/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{var t={"./node_modules/@firebase/util/dist/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CONSTANTS:()=>n,DecodeBase64StringError:()=>c,Deferred:()=>y,ErrorFactory:()=>R,FirebaseError:()=>z,MAX_VALUE_MILLIS:()=>vt,RANDOM_FACTOR:()=>bt,Sha1:()=>it,areCookiesEnabled:()=>O,assert:()=>s,assertionError:()=>a,async:()=>at,base64:()=>r,base64Decode:()=>d,base64Encode:()=>h,base64urlEncodeWithoutPadding:()=>l,calculateBackoffMillis:()=>wt,contains:()=>Y,createMockUserToken:()=>S,createSubscribe:()=>nt,decode:()=>U,deepCopy:()=>u,deepEqual:()=>q,deepExtend:()=>m,errorPrefix:()=>ct,extractQuerystring:()=>et,getDefaultAppConfig:()=>b,getDefaultEmulatorHost:()=>f,getDefaultEmulatorHostnameAndPort:()=>v,getDefaults:()=>g,getExperimentalSetting:()=>w,getGlobal:()=>p,getModularInstance:()=>St,getUA:()=>_,isAdmin:()=>V,isBrowser:()=>A,isBrowserExtension:()=>T,isElectron:()=>x,isEmpty:()=>$,isIE:()=>L,isIndexedDBAvailable:()=>k,isMobileCordova:()=>I,isNode:()=>E,isNodeSdk:()=>D,isReactNative:()=>C,isSafari:()=>B,isUWP:()=>P,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>F,map:()=>K,ordinal:()=>yt,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>tt,safeGet:()=>X,stringLength:()=>mt,stringToByteArray:()=>ut,stringify:()=>j,uuidv4:()=>pt,validateArgCount:()=>rt,validateCallback:()=>lt,validateContextObject:()=>dt,validateIndexedDBOpenable:()=>M,validateNamespace:()=>ht});const n={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},s=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+n.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},o=function(t){const e=[];let i=0;for(let n=0;n<t.length;n++){let s=t.charCodeAt(n);s<128?e[i++]=s:s<2048?(e[i++]=s>>6|192,e[i++]=63&s|128):55296==(64512&s)&&n+1<t.length&&56320==(64512&t.charCodeAt(n+1))?(s=65536+((1023&s)<<10)+(1023&t.charCodeAt(++n)),e[i++]=s>>18|240,e[i++]=s>>12&63|128,e[i++]=s>>6&63|128,e[i++]=63&s|128):(e[i++]=s>>12|224,e[i++]=s>>6&63|128,e[i++]=63&s|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const i=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,n=[];for(let e=0;e<t.length;e+=3){const s=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,c=r?t[e+2]:0,h=s>>2,l=(3&s)<<4|o>>4;let d=(15&o)<<2|c>>6,u=63&c;r||(u=64,a||(d=64)),n.push(i[h],i[l],i[d],i[u])}return n.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(o(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let i=0,n=0;for(;i<t.length;){const s=t[i++];if(s<128)e[n++]=String.fromCharCode(s);else if(s>191&&s<224){const a=t[i++];e[n++]=String.fromCharCode((31&s)<<6|63&a)}else if(s>239&&s<365){const a=((7&s)<<18|(63&t[i++])<<12|(63&t[i++])<<6|63&t[i++])-65536;e[n++]=String.fromCharCode(55296+(a>>10)),e[n++]=String.fromCharCode(56320+(1023&a))}else{const a=t[i++],o=t[i++];e[n++]=String.fromCharCode((15&s)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const i=e?this.charToByteMapWebSafe_:this.charToByteMap_,n=[];for(let e=0;e<t.length;){const s=i[t.charAt(e++)],a=e<t.length?i[t.charAt(e)]:0;++e;const o=e<t.length?i[t.charAt(e)]:64;++e;const r=e<t.length?i[t.charAt(e)]:64;if(++e,null==s||null==a||null==o||null==r)throw new c;const h=s<<2|a>>4;if(n.push(h),64!==o){const t=a<<4&240|o>>2;if(n.push(t),64!==r){const t=o<<6&192|r;n.push(t)}}}return n},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class c extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const h=function(t){const e=o(t);return r.encodeByteArray(e,!0)},l=function(t){return h(t).replace(/\./g,"")},d=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function u(t){return m(void 0,t)}function m(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(const i in e)e.hasOwnProperty(i)&&"__proto__"!==i&&(t[i]=m(t[i],e[i]));return t}function p(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw new Error("Unable to locate global object.")}const g=()=>{try{return p().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&d(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},f=t=>{var e,i;return null===(i=null===(e=g())||void 0===e?void 0:e.emulatorHosts)||void 0===i?void 0:i[t]},v=t=>{const e=f(t);if(!e)return;const i=e.lastIndexOf(":");if(i<=0||i+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const n=parseInt(e.substring(i+1),10);return"["===e[0]?[e.substring(1,i-1),n]:[e.substring(0,i),n]},b=()=>{var t;return null===(t=g())||void 0===t?void 0:t.config},w=t=>{var e;return null===(e=g())||void 0===e?void 0:e[`_${t}`]};class y{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,i)=>{e?this.reject(e):this.resolve(i),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,i))}}}function S(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const i=e||"demo-project",n=t.iat||0,s=t.sub||t.user_id;if(!s)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${i}`,aud:i,iat:n,exp:n+3600,auth_time:n,sub:s,user_id:s,firebase:{sign_in_provider:"custom",identities:{}}},t);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(a)),""].join(".")}function _(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function I(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(_())}function E(){var t;const e=null===(t=g())||void 0===t?void 0:t.forceEnvironment;if("node"===e)return!0;if("browser"===e)return!1;try{return"[object process]"===Object.prototype.toString.call(i.g.process)}catch(t){return!1}}function A(){return"object"==typeof self&&self.self===self}function T(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function x(){return _().indexOf("Electron/")>=0}function L(){const t=_();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function P(){return _().indexOf("MSAppHost/")>=0}function D(){return!0===n.NODE_CLIENT||!0===n.NODE_ADMIN}function B(){return!E()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function k(){try{return"object"==typeof indexedDB}catch(t){return!1}}function M(){return new Promise(((t,e)=>{try{let i=!0;const n="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(n);s.onsuccess=()=>{s.result.close(),i||self.indexedDB.deleteDatabase(n),t(!0)},s.onupgradeneeded=()=>{i=!1},s.onerror=()=>{var t;e((null===(t=s.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function O(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class z extends Error{constructor(t,e,i){super(e),this.code=t,this.customData=i,this.name="FirebaseError",Object.setPrototypeOf(this,z.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,R.prototype.create)}}class R{constructor(t,e,i){this.service=t,this.serviceName=e,this.errors=i}create(t,...e){const i=e[0]||{},n=`${this.service}/${t}`,s=this.errors[t],a=s?function(t,e){return t.replace(N,((t,i)=>{const n=e[i];return null!=n?String(n):`<${i}?>`}))}(s,i):"Error",o=`${this.serviceName}: ${a} (${n}).`;return new z(n,o,i)}}const N=/\{\$([^}]+)}/g;function F(t){return JSON.parse(t)}function j(t){return JSON.stringify(t)}const U=function(t){let e={},i={},n={},s="";try{const a=t.split(".");e=F(d(a[0])||""),i=F(d(a[1])||""),s=a[2],n=i.d||{},delete i.d}catch(t){}return{header:e,claims:i,data:n,signature:s}},H=function(t){const e=U(t).claims,i=Math.floor((new Date).getTime()/1e3);let n=0,s=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?n=e.nbf:e.hasOwnProperty("iat")&&(n=e.iat),s=e.hasOwnProperty("exp")?e.exp:n+86400),!!i&&!!n&&!!s&&i>=n&&i<=s},G=function(t){const e=U(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},W=function(t){const e=U(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},V=function(t){const e=U(t).claims;return"object"==typeof e&&!0===e.admin};function Y(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function $(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function K(t,e,i){const n={};for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(n[s]=e.call(i,t[s],s,t));return n}function q(t,e){if(t===e)return!0;const i=Object.keys(t),n=Object.keys(e);for(const s of i){if(!n.includes(s))return!1;const i=t[s],a=e[s];if(J(i)&&J(a)){if(!q(i,a))return!1}else if(i!==a)return!1}for(const t of n)if(!i.includes(t))return!1;return!0}function J(t){return null!==t&&"object"==typeof t}function Z(t,e=2e3){const i=new y;return setTimeout((()=>i.reject("timeout!")),e),t.then(i.resolve,i.reject),i.promise}function Q(t){const e=[];for(const[i,n]of Object.entries(t))Array.isArray(n)?n.forEach((t=>{e.push(encodeURIComponent(i)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(i)+"="+encodeURIComponent(n));return e.length?"&"+e.join("&"):""}function tt(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[i,n]=t.split("=");e[decodeURIComponent(i)]=decodeURIComponent(n)}})),e}function et(t){const e=t.indexOf("?");if(!e)return"";const i=t.indexOf("#",e);return t.substring(e,i>0?i:void 0)}class it{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(t,e){e||(e=0);const i=this.W_;if("string"==typeof t)for(let n=0;n<16;n++)i[n]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(let n=0;n<16;n++)i[n]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(let t=16;t<80;t++){const e=i[t-3]^i[t-8]^i[t-14]^i[t-16];i[t]=4294967295&(e<<1|e>>>31)}let n,s,a=this.chain_[0],o=this.chain_[1],r=this.chain_[2],c=this.chain_[3],h=this.chain_[4];for(let t=0;t<80;t++){t<40?t<20?(n=c^o&(r^c),s=1518500249):(n=o^r^c,s=1859775393):t<60?(n=o&r|c&(o|r),s=2400959708):(n=o^r^c,s=3395469782);const e=(a<<5|a>>>27)+n+h+s+i[t]&4294967295;h=c,c=r,r=4294967295&(o<<30|o>>>2),o=a,a=e}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295}update(t,e){if(null==t)return;void 0===e&&(e=t.length);const i=e-this.blockSize;let n=0;const s=this.buf_;let a=this.inbuf_;for(;n<e;){if(0===a)for(;n<=i;)this.compress_(t,n),n+=this.blockSize;if("string"==typeof t){for(;n<e;)if(s[a]=t.charCodeAt(n),++a,++n,a===this.blockSize){this.compress_(s),a=0;break}}else for(;n<e;)if(s[a]=t[n],++a,++n,a===this.blockSize){this.compress_(s),a=0;break}}this.inbuf_=a,this.total_+=e}digest(){const t=[];let e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let t=this.blockSize-1;t>=56;t--)this.buf_[t]=255&e,e/=256;this.compress_(this.buf_);let i=0;for(let e=0;e<5;e++)for(let n=24;n>=0;n-=8)t[i]=this.chain_[e]>>n&255,++i;return t}}function nt(t,e){const i=new st(t,e);return i.subscribe.bind(i)}class st{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,i){let n;if(void 0===t&&void 0===e&&void 0===i)throw new Error("Missing Observer.");n=function(t,e){if("object"!=typeof t||null===t)return!1;for(const i of e)if(i in t&&"function"==typeof t[i])return!0;return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:i},void 0===n.next&&(n.next=ot),void 0===n.error&&(n.error=ot),void 0===n.complete&&(n.complete=ot);const s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?n.error(this.finalError):n.complete()}catch(t){}})),this.observers.push(n),s}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function at(t,e){return(...i)=>{Promise.resolve(!0).then((()=>{t(...i)})).catch((t=>{e&&e(t)}))}}function ot(){}const rt=function(t,e,i,n){let s;if(n<e?s="at least "+e:n>i&&(s=0===i?"none":"no more than "+i),s){throw new Error(t+" failed: Was called with "+n+(1===n?" argument.":" arguments.")+" Expects "+s+".")}};function ct(t,e){return`${t} failed: ${e} argument `}function ht(t,e,i){if((!i||e)&&"string"!=typeof e)throw new Error(ct(t,"namespace")+"must be a valid firebase namespace.")}function lt(t,e,i,n){if((!n||i)&&"function"!=typeof i)throw new Error(ct(t,e)+"must be a valid function.")}function dt(t,e,i,n){if((!n||i)&&("object"!=typeof i||null===i))throw new Error(ct(t,e)+"must be a valid context object.")}const ut=function(t){const e=[];let i=0;for(let n=0;n<t.length;n++){let a=t.charCodeAt(n);if(a>=55296&&a<=56319){const e=a-55296;n++,s(n<t.length,"Surrogate pair missing trail surrogate.");a=65536+(e<<10)+(t.charCodeAt(n)-56320)}a<128?e[i++]=a:a<2048?(e[i++]=a>>6|192,e[i++]=63&a|128):a<65536?(e[i++]=a>>12|224,e[i++]=a>>6&63|128,e[i++]=63&a|128):(e[i++]=a>>18|240,e[i++]=a>>12&63|128,e[i++]=a>>6&63|128,e[i++]=63&a|128)}return e},mt=function(t){let e=0;for(let i=0;i<t.length;i++){const n=t.charCodeAt(i);n<128?e++:n<2048?e+=2:n>=55296&&n<=56319?(e+=4,i++):e+=3}return e},pt=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))},gt=1e3,ft=2,vt=144e5,bt=.5;function wt(t,e=gt,i=ft){const n=e*Math.pow(i,t),s=Math.round(bt*n*(Math.random()-.5)*2);return Math.min(vt,n+s)}function yt(t){return Number.isFinite(t)?t+function(t){t=Math.abs(t);const e=t%100;if(e>=10&&e<=20)return"th";const i=t%10;if(1===i)return"st";if(2===i)return"nd";if(3===i)return"rd";return"th"}(t):`${t}`}function St(t){return t&&t._delegate?t._delegate:t}},"./node_modules/@rive-app/canvas/rive.js":function(t){var e;e=()=>(()=>{"use strict";var t=[,(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var n,s=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(t={}){var e,i,s=t;function a(){function t(t){const a=n;i=e=0,n=new Map,a.forEach((e=>{try{e(t)}catch(t){console.error(t)}})),this.ob(),s&&s.Tb()}let e=0,i=0,n=new Map,s=null,a=null;this.requestAnimationFrame=function(s){e||(e=requestAnimationFrame(t.bind(this)));const a=++i;return n.set(a,s),a},this.cancelAnimationFrame=function(t){n.delete(t),e&&0==n.size&&(cancelAnimationFrame(e),e=0)},this.Rb=function(t){a&&(document.body.remove(a),a=null),t||(a=document.createElement("div"),a.style.backgroundColor="black",a.style.position="fixed",a.style.right=0,a.style.top=0,a.style.color="white",a.style.padding="4px",a.innerHTML="RIVE FPS",t=function(t){a.innerHTML="RIVE FPS "+t.toFixed(1)},document.body.appendChild(a)),s=new function(){let e=0,i=0;this.Tb=function(){var n=performance.now();i?(++e,1e3<(n-=i)&&(t(1e3*e/n),e=i=0)):(i=n,e=0)}}},this.Ob=function(){a&&(document.body.remove(a),a=null),s=null},this.ob=function(){}}function o(t){console.assert(!0);const e=new Map;let i=-1/0;this.push=function(n){return n=n+((1<<t)-1)>>t,e.has(n)&&clearTimeout(e.get(n)),e.set(n,setTimeout((function(){e.delete(n),0==e.length?i=-1/0:n==i&&(i=Math.max(...e.keys()),console.assert(i<n))}),1e3)),i=Math.max(n,i),i<<t}}s.ready=new Promise(((t,n)=>{e=t,i=n}));const r=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){r&&r();let t=s.decodeAudio;s.decodeAudio=function(e,i){i(e=t(e))};let e=s.decodeFont;s.decodeFont=function(t,i){i(t=e(t))};const i=s.FileAssetLoader;s.ptrToAsset=t=>{let e=s.ptrToFileAsset(t);return e.isImage?s.ptrToImageAsset(t):e.isFont?s.ptrToFontAsset(t):e.isAudio?s.ptrToAudioAsset(t):e},s.CustomFileAssetLoader=i.extend("CustomFileAssetLoader",{__construct:function({loadContents:t}){this.__parent.__construct.call(this),this.Gb=t},loadContents:function(t,e){return t=s.ptrToAsset(t),this.Gb(t,e)}}),s.CDNFileAssetLoader=i.extend("CDNFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this)},loadContents:function(t){let e=s.ptrToAsset(t);return""!==(t=e.cdnUuid)&&(i=e.cdnBaseUrl+"/"+t,(n=new XMLHttpRequest).responseType="arraybuffer",n.onreadystatechange=function(){4==n.readyState&&200==n.status&&(t=>{e.decode(new Uint8Array(t.response))})(n)},n.open("GET",i,!0),n.send(null),!0);var i,n}}),s.FallbackFileAssetLoader=i.extend("FallbackFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this),this.kb=[]},addLoader:function(t){this.kb.push(t)},loadContents:function(t,e){for(let i of this.kb)if(i.loadContents(t,e))return!0;return!1}})};const c="createConicGradient createImageData createLinearGradient createPattern createRadialGradient getContextAttributes getImageData getLineDash getTransform isContextLost isPointInPath isPointInStroke measureText".split(" "),h=new function(){function t(){if(!e){var t=document.createElement("canvas"),o={alpha:1,depth:0,stencil:0,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:1,renderViaOffscreenBackBuffer:1};let r;if(/iPhone|iPad|iPod/i.test(navigator.userAgent)){if(r=t.getContext("webgl",o),i=1,!r)return console.log("No WebGL support. Image mesh will not be drawn."),!1}else if(r=t.getContext("webgl2",o))i=2;else{if(!(r=t.getContext("webgl",o)))return console.log("No WebGL support. Image mesh will not be drawn."),!1;i=1}function c(t,e,i){if(e=r.createShader(e),r.shaderSource(e,i),r.compileShader(e),0<((i=r.getShaderInfoLog(e))||"").length)throw i;r.attachShader(t,e)}if(r=new Proxy(r,{get:(t,e)=>t.isContextLost()?(h||(console.error("Cannot render the mesh because the GL Context was lost. Tried to invoke ",e),h=!0),"function"==typeof t[e]?function(){}:void 0):"function"==typeof t[e]?function(...i){return t[e].apply(t,i)}:t[e],set(t,e,i){if(!t.isContextLost())return t[e]=i,!0;h||(console.error("Cannot render the mesh because the GL Context was lost. Tried to set property "+e),h=!0)}}),n=Math.min(r.getParameter(r.MAX_RENDERBUFFER_SIZE),r.getParameter(r.MAX_TEXTURE_SIZE)),c(t=r.createProgram(),r.VERTEX_SHADER,"attribute vec2 vertex;\n                attribute vec2 uv;\n                uniform vec4 mat;\n                uniform vec2 translate;\n                varying vec2 st;\n                void main() {\n                    st = uv;\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\n                }"),c(t,r.FRAGMENT_SHADER,"precision highp float;\n                uniform sampler2D image;\n                varying vec2 st;\n                void main() {\n                    gl_FragColor = texture2D(image, st);\n                }"),r.bindAttribLocation(t,0,"vertex"),r.bindAttribLocation(t,1,"uv"),r.linkProgram(t),0<((o=r.getProgramInfoLog(t))||"").trim().length)throw o;s=r.getUniformLocation(t,"mat"),a=r.getUniformLocation(t,"translate"),r.useProgram(t),r.bindBuffer(r.ARRAY_BUFFER,r.createBuffer()),r.enableVertexAttribArray(0),r.enableVertexAttribArray(1),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,r.createBuffer()),r.uniform1i(r.getUniformLocation(t,"image"),0),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e=r}return!0}let e=null,i=0,n=0,s=null,a=null,r=0,c=0,h=!1;t(),this.hc=function(){return t(),n},this.Mb=function(t){e.deleteTexture&&e.deleteTexture(t)},this.Lb=function(n){if(!t())return null;const s=e.createTexture();return s?(e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),2==i?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR),e.generateMipmap(e.TEXTURE_2D)):e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),s):null};const l=new o(8),d=new o(8),u=new o(10),m=new o(10);this.Qb=function(i,n,o,h,p){if(t()){var g=l.push(i),f=d.push(n);if(e.canvas){for(var v of(e.canvas.width==g&&e.canvas.height==f||(e.canvas.width=g,e.canvas.height=f),e.viewport(0,f-n,i,n),e.disable(e.SCISSOR_TEST),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),e.enable(e.SCISSOR_TEST),o.sort(((t,e)=>e.wb-t.wb)),g=u.push(h),r!=g&&(e.bufferData(e.ARRAY_BUFFER,8*g,e.DYNAMIC_DRAW),r=g),g=0,o))e.bufferSubData(e.ARRAY_BUFFER,g,v.Ta),g+=4*v.Ta.length;for(var b of(console.assert(g==4*h),o))e.bufferSubData(e.ARRAY_BUFFER,g,b.Db),g+=4*b.Db.length;for(var w of(console.assert(g==8*h),g=m.push(p),c!=g&&(e.bufferData(e.ELEMENT_ARRAY_BUFFER,2*g,e.DYNAMIC_DRAW),c=g),v=0,o))e.bufferSubData(e.ELEMENT_ARRAY_BUFFER,v,w.indices),v+=2*w.indices.length;console.assert(v==2*p),w=0,b=!0,g=v=0;for(const t of o){t.image.Ka!=w&&(e.bindTexture(e.TEXTURE_2D,t.image.Ja||null),w=t.image.Ka),t.mc?(e.scissor(t.Ya,f-t.Za-t.jb,t.Ac,t.jb),b=!0):b&&(e.scissor(0,f-n,i,n),b=!1),o=2/i;const r=-2/n;e.uniform4f(s,t.ha[0]*o*t.Ba,t.ha[1]*r*t.Ca,t.ha[2]*o*t.Ba,t.ha[3]*r*t.Ca),e.uniform2f(a,t.ha[4]*o*t.Ba+o*(t.Ya-t.ic*t.Ba)-1,t.ha[5]*r*t.Ca+r*(t.Za-t.jc*t.Ca)+1),e.vertexAttribPointer(0,2,e.FLOAT,!1,0,g),e.vertexAttribPointer(1,2,e.FLOAT,!1,0,g+4*h),e.drawElements(e.TRIANGLES,t.indices.length,e.UNSIGNED_SHORT,v),g+=4*t.Ta.length,v+=2*t.indices.length}console.assert(g==4*h),console.assert(v==2*p)}}},this.canvas=function(){return t()&&e.canvas}},l=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){function t(t){switch(t){case p.srcOver:return"source-over";case p.screen:return"screen";case p.overlay:return"overlay";case p.darken:return"darken";case p.lighten:return"lighten";case p.colorDodge:return"color-dodge";case p.colorBurn:return"color-burn";case p.hardLight:return"hard-light";case p.softLight:return"soft-light";case p.difference:return"difference";case p.exclusion:return"exclusion";case p.multiply:return"multiply";case p.hue:return"hue";case p.saturation:return"saturation";case p.color:return"color";case p.luminosity:return"luminosity"}}function e(t){return"rgba("+((16711680&t)>>>16)+","+((65280&t)>>>8)+","+((255&t)>>>0)+","+((4278190080&t)>>>24)/255+")"}function i(){0<E.length&&(h.Qb(I.drawWidth(),I.drawHeight(),E,A,T),E=[],T=A=0,I.reset(512,512));for(const t of _){for(const e of t.H)e();t.H=[]}_.clear()}l&&l();var n=s.RenderPaintStyle;const o=s.RenderPath,r=s.RenderPaint,d=s.Renderer,u=s.StrokeCap,m=s.StrokeJoin,p=s.BlendMode,g=n.fill,f=n.stroke,v=s.FillRule.evenOdd;let b=1;var w=s.RenderImage.extend("CanvasRenderImage",{__construct:function({la:t,xa:e}={}){this.__parent.__construct.call(this),this.Ka=b,b=b+1&2147483647||1,this.la=t,this.xa=e},__destruct:function(){this.Ja&&(h.Mb(this.Ja),URL.revokeObjectURL(this.Wa)),this.__parent.__destruct.call(this)},decode:function(t){var e=this;e.xa&&e.xa(e);var i=new Image;e.Wa=URL.createObjectURL(new Blob([t],{type:"image/png"})),i.onload=function(){e.Fb=i,e.Ja=h.Lb(i),e.size(i.width,i.height),e.la&&e.la(e)},i.src=e.Wa}}),y=o.extend("CanvasRenderPath",{__construct:function(){this.__parent.__construct.call(this),this.T=new Path2D},rewind:function(){this.T=new Path2D},addPath:function(t,e,i,n,s,a,o){var r=this.T,c=r.addPath;t=t.T;const h=new DOMMatrix;h.a=e,h.b=i,h.c=n,h.d=s,h.e=a,h.f=o,c.call(r,t,h)},fillRule:function(t){this.Va=t},moveTo:function(t,e){this.T.moveTo(t,e)},lineTo:function(t,e){this.T.lineTo(t,e)},cubicTo:function(t,e,i,n,s,a){this.T.bezierCurveTo(t,e,i,n,s,a)},close:function(){this.T.closePath()}}),S=r.extend("CanvasRenderPaint",{color:function(t){this.Xa=e(t)},thickness:function(t){this.Ib=t},join:function(t){switch(t){case m.miter:this.Ia="miter";break;case m.round:this.Ia="round";break;case m.bevel:this.Ia="bevel"}},cap:function(t){switch(t){case u.butt:this.Ha="butt";break;case u.round:this.Ha="round";break;case u.square:this.Ha="square"}},style:function(t){this.Hb=t},blendMode:function(e){this.Eb=t(e)},clearGradient:function(){this.ja=null},linearGradient:function(t,e,i,n){this.ja={yb:t,zb:e,bb:i,cb:n,Ra:[]}},radialGradient:function(t,e,i,n){this.ja={yb:t,zb:e,bb:i,cb:n,Ra:[],ec:!0}},addStop:function(t,e){this.ja.Ra.push({color:t,stop:e})},completeGradient:function(){},draw:function(t,i,n){let s=this.Hb;var a=this.Xa,o=this.ja;if(t.globalCompositeOperation=this.Eb,null!=o){a=o.yb;var r=o.zb;const i=o.bb;var c=o.cb;const n=o.Ra;o.ec?(o=i-a,c-=r,a=t.createRadialGradient(a,r,0,a,r,Math.sqrt(o*o+c*c))):a=t.createLinearGradient(a,r,i,c);for(let t=0,i=n.length;t<i;t++)r=n[t],a.addColorStop(r.stop,e(r.color));this.Xa=a,this.ja=null}switch(s){case f:t.strokeStyle=a,t.lineWidth=this.Ib,t.lineCap=this.Ha,t.lineJoin=this.Ia,t.stroke(i);break;case g:t.fillStyle=a,t.fill(i,n)}}});const _=new Set;let I=null,E=[],A=0,T=0;var C=s.CanvasRenderer=d.extend("Renderer",{__construct:function(t){this.__parent.__construct.call(this),this.S=[1,0,0,1,0,0],this.C=t.getContext("2d"),this.Ua=t,this.H=[]},save:function(){this.S.push(...this.S.slice(this.S.length-6)),this.H.push(this.C.save.bind(this.C))},restore:function(){const t=this.S.length-6;if(6>t)throw"restore() called without matching save().";this.S.splice(t),this.H.push(this.C.restore.bind(this.C))},transform:function(t,e,i,n,s,a){const o=this.S,r=o.length-6;o.splice(r,6,o[r]*t+o[r+2]*e,o[r+1]*t+o[r+3]*e,o[r]*i+o[r+2]*n,o[r+1]*i+o[r+3]*n,o[r]*s+o[r+2]*a+o[r+4],o[r+1]*s+o[r+3]*a+o[r+5]),this.H.push(this.C.transform.bind(this.C,t,e,i,n,s,a))},rotate:function(t){const e=Math.sin(t);t=Math.cos(t),this.transform(t,e,-e,t,0,0)},_drawPath:function(t,e){this.H.push(e.draw.bind(e,this.C,t.T,t.Va===v?"evenodd":"nonzero"))},_drawRiveImage:function(e,i,n){var s=e.Fb;if(s){var a=this.C,o=t(i);this.H.push((function(){a.globalCompositeOperation=o,a.globalAlpha=n,a.drawImage(s,0,0),a.globalAlpha=1}))}},_getMatrix:function(t){const e=this.S,i=e.length-6;for(let n=0;6>n;++n)t[n]=e[i+n]},_drawImageMesh:function(e,n,a,o,r,c,l,d,u,m){var p=this.C.canvas.width,g=this.C.canvas.height;const f=u-l,v=m-d;l=Math.max(l,0),d=Math.max(d,0),u=Math.min(u,p),m=Math.min(m,g);const b=u-l,w=m-d;if(console.assert(b<=Math.min(f,p)),console.assert(w<=Math.min(v,g)),!(0>=b||0>=w)){u=b<f||w<v,p=m=1;var y=Math.ceil(b*m),S=Math.ceil(w*p);g=h.hc(),y>g&&(m*=g/y,y=g),S>g&&(p*=g/S,S=g),I||(I=new s.DynamicRectanizer(g),I.reset(512,512)),0>(g=I.addRect(y,S))&&(i(),_.add(this),g=I.addRect(y,S),console.assert(0<=g));var C=65535&g,x=g>>16;E.push({ha:this.S.slice(this.S.length-6),image:e,Ya:C,Za:x,ic:l,jc:d,Ac:y,jb:S,Ba:m,Ca:p,Ta:new Float32Array(o),Db:new Float32Array(r),indices:new Uint16Array(c),mc:u,wb:e.Ka<<1|(u?1:0)}),A+=o.length,T+=c.length;var L=this.C,P=t(n);this.H.push((function(){L.save(),L.resetTransform(),L.globalCompositeOperation=P,L.globalAlpha=a;const t=h.canvas();t&&L.drawImage(t,C,x,y,S,l,d,b,w),L.restore()}))}},_clipPath:function(t){this.H.push(this.C.clip.bind(this.C,t.T,t.Va===v?"evenodd":"nonzero"))},clear:function(){_.add(this),this.H.push(this.C.clearRect.bind(this.C,0,0,this.Ua.width,this.Ua.height))},flush:function(){},translate:function(t,e){this.transform(1,0,0,1,t,e)}});s.makeRenderer=function(t){const e=new C(t),i=e.C;return new Proxy(e,{get(t,n){if("function"==typeof t[n])return function(...e){return t[n].apply(t,e)};if("function"==typeof i[n]){if(-1<c.indexOf(n))throw Error("RiveException: Method call to '"+n+"()' is not allowed, as the renderer cannot immediately pass through the return                 values of any canvas 2d context methods.");return function(...t){e.H.push(i[n].bind(i,...t))}}return t[n]},set(t,n,s){if(n in i)return e.H.push((()=>{i[n]=s})),!0}})},s.decodeImage=function(t,e){new w({la:e}).decode(t)},s.renderFactory={makeRenderPaint:function(){return new S},makeRenderPath:function(){return new y},makeRenderImage:function(){let t=L;return new w({xa:()=>{t.total++},la:()=>{if(t.loaded++,t.loaded===t.total){const e=t.ready;e&&(e(),t.ready=null)}}})}};let x=s.load,L=null;s.load=function(t,e,i=!0){const n=new s.FallbackFileAssetLoader;return void 0!==e&&n.addLoader(e),i&&(e=new s.CDNFileAssetLoader,n.addLoader(e)),new Promise((function(e){let i=null;L={total:0,loaded:0,ready:function(){e(i)}},i=x(t,n),0==L.total&&e(i)}))},n=new a,s.requestAnimationFrame=n.requestAnimationFrame.bind(n),s.cancelAnimationFrame=n.cancelAnimationFrame.bind(n),s.enableFPSCounter=n.Rb.bind(n),s.disableFPSCounter=n.Ob,n.ob=i,s.resolveAnimationFrame=i,s.cleanup=function(){I&&I.delete()}};var d,u,m=Object.assign({},s),p="./this.program",g="object"==typeof window,f="function"==typeof importScripts,v="";(g||f)&&(f?v=self.location.href:"undefined"!=typeof document&&document.currentScript&&(v=document.currentScript.src),n&&(v=n),v=0!==v.indexOf("blob:")?v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):"",f&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),d=(t,e,i)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):i()},n.onerror=i,n.send(null)});var b,w=s.print||console.log.bind(console),y=s.printErr||console.error.bind(console);Object.assign(s,m),m=null,s.thisProgram&&(p=s.thisProgram),s.wasmBinary&&(b=s.wasmBinary),s.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var S,_,I,E,A,T,C,x,L,P,D=!1;function B(){var t=S.buffer;s.HEAP8=I=new Int8Array(t),s.HEAP16=A=new Int16Array(t),s.HEAP32=C=new Int32Array(t),s.HEAPU8=E=new Uint8Array(t),s.HEAPU16=T=new Uint16Array(t),s.HEAPU32=x=new Uint32Array(t),s.HEAPF32=L=new Float32Array(t),s.HEAPF64=P=new Float64Array(t)}var k,M=[],O=[],z=[];function R(){var t=s.preRun.shift();M.unshift(t)}var N,F=0,j=null,U=null;function H(t){throw s.onAbort&&s.onAbort(t),y(t="Aborted("+t+")"),D=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),i(t),t}function G(t){return t.startsWith("data:application/octet-stream;base64,")}if(!G(N="canvas_advanced.wasm")){var W=N;N=s.locateFile?s.locateFile(W,v):v+W}function V(t){if(t==N&&b)return new Uint8Array(b);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}function Y(t,e,i){return function(t){if(!b&&(g||f)){if("function"==typeof fetch&&!t.startsWith("file://"))return fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>V(t)));if(d)return new Promise(((e,i)=>{d(t,(t=>e(new Uint8Array(t))),i)}))}return Promise.resolve().then((()=>V(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(i,(t=>{y("failed to asynchronously prepare wasm: "+t),H(t)}))}var X,$,K={437756:(t,e,i,n,s)=>{if("undefined"==typeof window||void 0===(window.AudioContext||window.webkitAudioContext))return 0;if(void 0===window.h){window.h={Aa:0},window.h.I={},window.h.I.ya=t,window.h.I.capture=e,window.h.I.La=i,window.h.ga={},window.h.ga.stopped=n,window.h.ga.xb=s;let a=window.h;a.D=[],a.yc=function(t){for(var e=0;e<a.D.length;++e)if(null==a.D[e])return a.D[e]=t,e;return a.D.push(t),a.D.length-1},a.Cb=function(t){for(a.D[t]=null;0<a.D.length&&null==a.D[a.D.length-1];)a.D.pop()},a.Sc=function(t){for(var e=0;e<a.D.length;++e)if(a.D[e]==t)return a.Cb(e)},a.ra=function(t){return a.D[t]},a.Bb=["touchend","click"],a.unlock=function(){for(var t=0;t<a.D.length;++t){var e=a.D[t];null!=e&&null!=e.J&&e.state===a.ga.xb&&e.J.resume().then((()=>{Li(e.pb)}),(t=>{console.error("Failed to resume audiocontext",t)}))}a.Bb.map((function(t){document.removeEventListener(t,a.unlock,!0)}))},a.Bb.map((function(t){document.addEventListener(t,a.unlock,!0)}))}return window.h.Aa+=1,1},439934:()=>{void 0!==window.h&&(--window.h.Aa,0===window.h.Aa&&delete window.h)},440098:()=>void 0!==navigator.mediaDevices&&void 0!==navigator.mediaDevices.getUserMedia,440202:()=>{try{var t=new(window.AudioContext||window.webkitAudioContext),e=t.sampleRate;return t.close(),e}catch(t){return 0}},440373:(t,e,i,n,s,a)=>{if(void 0===window.h)return-1;var o={},r={};return t==window.h.I.ya&&0!=i&&(r.sampleRate=i),o.J=new(window.AudioContext||window.webkitAudioContext)(r),o.J.suspend(),o.state=window.h.ga.stopped,i=0,t!=window.h.I.ya&&(i=e),o.Z=o.J.createScriptProcessor(n,i,e),o.Z.onaudioprocess=function(i){if(null!=o.sa&&0!=o.sa.length||(o.sa=new Float32Array(L.buffer,s,n*e)),t==window.h.I.capture||t==window.h.I.La){for(var r=0;r<e;r+=1)for(var c=i.inputBuffer.getChannelData(r),h=o.sa,l=0;l<n;l+=1)h[l*e+r]=c[l];Di(a,n,s)}if(t==window.h.I.ya||t==window.h.I.La)for(Bi(a,n,s),r=0;r<i.outputBuffer.numberOfChannels;++r)for(c=i.outputBuffer.getChannelData(r),h=o.sa,l=0;l<n;l+=1)c[l]=h[l*e+r];else for(r=0;r<i.outputBuffer.numberOfChannels;++r)i.outputBuffer.getChannelData(r).fill(0)},t!=window.h.I.capture&&t!=window.h.I.La||navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(t){o.Da=o.J.createMediaStreamSource(t),o.Da.connect(o.Z),o.Z.connect(o.J.destination)})).catch((function(t){console.log("Failed to get user media: "+t)})),t==window.h.I.ya&&o.Z.connect(o.J.destination),o.pb=a,window.h.yc(o)},443250:t=>window.h.ra(t).J.sampleRate,443323:t=>{void 0!==(t=window.h.ra(t)).Z&&(t.Z.onaudioprocess=function(){},t.Z.disconnect(),t.Z=void 0),void 0!==t.Da&&(t.Da.disconnect(),t.Da=void 0),t.J.close(),t.J=void 0,t.pb=void 0},443723:t=>{window.h.Cb(t)},443773:t=>{(t=window.h.ra(t)).J.resume(),t.state=window.h.ga.xb},443912:t=>{(t=window.h.ra(t)).J.suspend(),t.state=window.h.ga.stopped}},q=t=>{for(;0<t.length;)t.shift()(s)},J=(t,e)=>{for(var i=0,n=t.length-1;0<=n;n--){var s=t[n];"."===s?t.splice(n,1):".."===s?(t.splice(n,1),i++):i&&(t.splice(n,1),i--)}if(e)for(;i;i--)t.unshift("..");return t},Z=t=>{var e="/"===t.charAt(0),i="/"===t.substr(-1);return(t=J(t.split("/").filter((t=>!!t)),!e).join("/"))||e||(t="."),t&&i&&(t+="/"),(e?"/":"")+t},Q=t=>{var e=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(t).slice(1);return t=e[0],e=e[1],t||e?(e&&(e=e.substr(0,e.length-1)),t+e):"."},tt=t=>{if("/"===t)return"/";var e=(t=(t=Z(t)).replace(/\/$/,"")).lastIndexOf("/");return-1===e?t:t.substr(e+1)},et=t=>(et=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return t=>crypto.getRandomValues(t);H("initRandomDevice")})())(t);function it(){for(var t="",e=!1,i=arguments.length-1;-1<=i&&!e;i--){if("string"!=typeof(e=0<=i?arguments[i]:"/"))throw new TypeError("Arguments to path.resolve must be strings");if(!e)return"";t=e+"/"+t,e="/"===e.charAt(0)}return(e?"/":"")+(t=J(t.split("/").filter((t=>!!t)),!e).join("/"))||"."}var nt="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,st=(t,e,i)=>{var n=e+i;for(i=e;t[i]&&!(i>=n);)++i;if(16<i-e&&t.buffer&&nt)return nt.decode(t.subarray(e,i));for(n="";e<i;){var s=t[e++];if(128&s){var a=63&t[e++];if(192==(224&s))n+=String.fromCharCode((31&s)<<6|a);else{var o=63&t[e++];65536>(s=224==(240&s)?(15&s)<<12|a<<6|o:(7&s)<<18|a<<12|o<<6|63&t[e++])?n+=String.fromCharCode(s):(s-=65536,n+=String.fromCharCode(55296|s>>10,56320|1023&s))}}else n+=String.fromCharCode(s)}return n},at=[],ot=t=>{for(var e=0,i=0;i<t.length;++i){var n=t.charCodeAt(i);127>=n?e++:2047>=n?e+=2:55296<=n&&57343>=n?(e+=4,++i):e+=3}return e},rt=(t,e,i,n)=>{if(!(0<n))return 0;var s=i;n=i+n-1;for(var a=0;a<t.length;++a){var o=t.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++a)),127>=o){if(i>=n)break;e[i++]=o}else{if(2047>=o){if(i+1>=n)break;e[i++]=192|o>>6}else{if(65535>=o){if(i+2>=n)break;e[i++]=224|o>>12}else{if(i+3>=n)break;e[i++]=240|o>>18,e[i++]=128|o>>12&63}e[i++]=128|o>>6&63}e[i++]=128|63&o}}return e[i]=0,i-s};function ct(t,e){var i=Array(ot(t)+1);return t=rt(t,i,0,i.length),e&&(i.length=t),i}var ht=[];function lt(t,e){ht[t]={input:[],F:[],V:e},Ft(t,dt)}var dt={open:function(t){var e=ht[t.node.za];if(!e)throw new Tt(43);t.s=e,t.seekable=!1},close:function(t){t.s.V.qa(t.s)},qa:function(t){t.s.V.qa(t.s)},read:function(t,e,i,n){if(!t.s||!t.s.V.ib)throw new Tt(60);for(var s=0,a=0;a<n;a++){try{var o=t.s.V.ib(t.s)}catch(t){throw new Tt(29)}if(void 0===o&&0===s)throw new Tt(6);if(null==o)break;s++,e[i+a]=o}return s&&(t.node.timestamp=Date.now()),s},write:function(t,e,i,n){if(!t.s||!t.s.V.Oa)throw new Tt(60);try{for(var s=0;s<n;s++)t.s.V.Oa(t.s,e[i+s])}catch(t){throw new Tt(29)}return n&&(t.node.timestamp=Date.now()),s}},ut={ib:function(){t:{if(!at.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t){t=null;break t}at=ct(t,!0)}t=at.shift()}return t},Oa:function(t,e){null===e||10===e?(w(st(t.F,0)),t.F=[]):0!=e&&t.F.push(e)},qa:function(t){t.F&&0<t.F.length&&(w(st(t.F,0)),t.F=[])},bc:function(){return{Fc:25856,Hc:5,Ec:191,Gc:35387,Dc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},cc:function(){return 0},dc:function(){return[24,80]}},mt={Oa:function(t,e){null===e||10===e?(y(st(t.F,0)),t.F=[]):0!=e&&t.F.push(e)},qa:function(t){t.F&&0<t.F.length&&(y(st(t.F,0)),t.F=[])}};function pt(t,e){var i=t.j?t.j.length:0;i>=e||(e=Math.max(e,i*(1048576>i?2:1.125)>>>0),0!=i&&(e=Math.max(e,256)),i=t.j,t.j=new Uint8Array(e),0<t.v&&t.j.set(i.subarray(0,t.v),0))}var gt,ft,vt,bt,wt={O:null,U:()=>wt.createNode(null,"/",16895,0),createNode(t,e,i,n){if(24576==(61440&i)||4096==(61440&i))throw new Tt(63);return wt.O||(wt.O={dir:{node:{Y:wt.l.Y,P:wt.l.P,ka:wt.l.ka,va:wt.l.va,ub:wt.l.ub,Ab:wt.l.Ab,vb:wt.l.vb,sb:wt.l.sb,Ea:wt.l.Ea},stream:{ba:wt.m.ba}},file:{node:{Y:wt.l.Y,P:wt.l.P},stream:{ba:wt.m.ba,read:wt.m.read,write:wt.m.write,pa:wt.m.pa,lb:wt.m.lb,nb:wt.m.nb}},link:{node:{Y:wt.l.Y,P:wt.l.P,ma:wt.l.ma},stream:{}},$a:{node:{Y:wt.l.Y,P:wt.l.P},stream:Nt}}),16384==(61440&(i=Bt(t,e,i,n)).mode)?(i.l=wt.O.dir.node,i.m=wt.O.dir.stream,i.j={}):32768==(61440&i.mode)?(i.l=wt.O.file.node,i.m=wt.O.file.stream,i.v=0,i.j=null):40960==(61440&i.mode)?(i.l=wt.O.link.node,i.m=wt.O.link.stream):8192==(61440&i.mode)&&(i.l=wt.O.$a.node,i.m=wt.O.$a.stream),i.timestamp=Date.now(),t&&(t.j[e]=i,t.timestamp=i.timestamp),i},Kc:t=>t.j?t.j.subarray?t.j.subarray(0,t.v):new Uint8Array(t.j):new Uint8Array(0),l:{Y(t){var e={};return e.Jc=8192==(61440&t.mode)?t.id:1,e.Mc=t.id,e.mode=t.mode,e.Oc=1,e.uid=0,e.Lc=0,e.za=t.za,16384==(61440&t.mode)?e.size=4096:32768==(61440&t.mode)?e.size=t.v:40960==(61440&t.mode)?e.size=t.link.length:e.size=0,e.Bc=new Date(t.timestamp),e.Nc=new Date(t.timestamp),e.Ic=new Date(t.timestamp),e.Jb=4096,e.Cc=Math.ceil(e.size/e.Jb),e},P(t,e){if(void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp),void 0!==e.size&&(e=e.size,t.v!=e))if(0==e)t.j=null,t.v=0;else{var i=t.j;t.j=new Uint8Array(e),i&&t.j.set(i.subarray(0,Math.min(e,t.v))),t.v=e}},ka(){throw Ct[44]},va:(t,e,i,n)=>wt.createNode(t,e,i,n),ub(t,e,i){if(16384==(61440&t.mode)){try{var n=Dt(e,i)}catch(t){}if(n)for(var s in n.j)throw new Tt(55)}delete t.parent.j[t.name],t.parent.timestamp=Date.now(),t.name=i,e.j[i]=t,e.timestamp=t.parent.timestamp,t.parent=e},Ab(t,e){delete t.j[e],t.timestamp=Date.now()},vb(t,e){var i,n=Dt(t,e);for(i in n.j)throw new Tt(55);delete t.j[e],t.timestamp=Date.now()},sb(t){var e,i=[".",".."];for(e in t.j)t.j.hasOwnProperty(e)&&i.push(e);return i},Ea:(t,e,i)=>((t=wt.createNode(t,e,41471,0)).link=i,t),ma(t){if(40960!=(61440&t.mode))throw new Tt(28);return t.link}},m:{read(t,e,i,n,s){var a=t.node.j;if(s>=t.node.v)return 0;if(8<(t=Math.min(t.node.v-s,n))&&a.subarray)e.set(a.subarray(s,s+t),i);else for(n=0;n<t;n++)e[i+n]=a[s+n];return t},write(t,e,i,n,s,a){if(e.buffer===I.buffer&&(a=!1),!n)return 0;if((t=t.node).timestamp=Date.now(),e.subarray&&(!t.j||t.j.subarray)){if(a)return t.j=e.subarray(i,i+n),t.v=n;if(0===t.v&&0===s)return t.j=e.slice(i,i+n),t.v=n;if(s+n<=t.v)return t.j.set(e.subarray(i,i+n),s),n}if(pt(t,s+n),t.j.subarray&&e.subarray)t.j.set(e.subarray(i,i+n),s);else for(a=0;a<n;a++)t.j[s+a]=e[i+a];return t.v=Math.max(t.v,s+n),n},ba(t,e,i){if(1===i?e+=t.position:2===i&&32768==(61440&t.node.mode)&&(e+=t.node.v),0>e)throw new Tt(28);return e},pa(t,e,i){pt(t.node,e+i),t.node.v=Math.max(t.node.v,e+i)},lb(t,e,i,n,s){if(32768!=(61440&t.node.mode))throw new Tt(43);if(t=t.node.j,2&s||t.buffer!==I.buffer){if((0<i||i+e<t.length)&&(t=t.subarray?t.subarray(i,i+e):Array.prototype.slice.call(t,i,i+e)),i=!0,H(),!(e=void 0))throw new Tt(48);I.set(t,e)}else i=!1,e=t.byteOffset;return{o:e,M:i}},nb:(t,e,i,n)=>(wt.m.write(t,e,0,n,i,!1),0)}},yt=null,St={},_t=[],It=1,Et=null,At=!0,Tt=null,Ct={},xt=(t,e={})=>{if(!(t=it(t)))return{path:"",node:null};if(8<(e=Object.assign({gb:!0,Qa:0},e)).Qa)throw new Tt(32);t=t.split("/").filter((t=>!!t));for(var i=yt,n="/",s=0;s<t.length;s++){var a=s===t.length-1;if(a&&e.parent)break;if(i=Dt(i,t[s]),n=Z(n+"/"+t[s]),i.wa&&(!a||a&&e.gb)&&(i=i.wa.root),!a||e.fb)for(a=0;40960==(61440&i.mode);)if(i=Wt(n),n=it(Q(n),i),i=xt(n,{Qa:e.Qa+1}).node,40<a++)throw new Tt(32)}return{path:n,node:i}},Lt=t=>{for(var e;;){if(t===t.parent)return t=t.U.mb,e?"/"!==t[t.length-1]?`${t}/${e}`:t+e:t;e=e?`${t.name}/${e}`:t.name,t=t.parent}},Pt=(t,e)=>{for(var i=0,n=0;n<e.length;n++)i=(i<<5)-i+e.charCodeAt(n)|0;return(t+i>>>0)%Et.length},Dt=(t,e)=>{var i;if(i=(i=Mt(t,"x"))?i:t.l.ka?0:2)throw new Tt(i,t);for(i=Et[Pt(t.id,e)];i;i=i.lc){var n=i.name;if(i.parent.id===t.id&&n===e)return i}return t.l.ka(t,e)},Bt=(t,e,i,n)=>(t=new Ii(t,e,i,n),e=Pt(t.parent.id,t.name),t.lc=Et[e],Et[e]=t),kt=t=>{var e=["r","w","rw"][3&t];return 512&t&&(e+="w"),e},Mt=(t,e)=>At?0:!e.includes("r")||292&t.mode?e.includes("w")&&!(146&t.mode)||e.includes("x")&&!(73&t.mode)?2:0:2,Ot=(t,e)=>{try{return Dt(t,e),20}catch(t){}return Mt(t,"wx")},zt=t=>{if(!(t=_t[t]))throw new Tt(8);return t},Rt=(t,e=-1)=>(vt||((vt=function(){this.h={}}).prototype={},Object.defineProperties(vt.prototype,{object:{get(){return this.node},set(t){this.node=t}},flags:{get(){return this.h.flags},set(t){this.h.flags=t}},position:{get(){return this.h.position},set(t){this.h.position=t}}})),t=Object.assign(new vt,t),-1==e&&(e=(()=>{for(var t=0;4096>=t;t++)if(!_t[t])return t;throw new Tt(33)})()),t.X=e,_t[e]=t),Nt={open:t=>{t.m=St[t.node.za].m,t.m.open&&t.m.open(t)},ba:()=>{throw new Tt(70)}},Ft=(t,e)=>{St[t]={m:e}},jt=(t,e)=>{var i="/"===e,n=!e;if(i&&yt)throw new Tt(10);if(!i&&!n){var s=xt(e,{gb:!1});if(e=s.path,(s=s.node).wa)throw new Tt(10);if(16384!=(61440&s.mode))throw new Tt(54)}e={type:t,Qc:{},mb:e,kc:[]},(t=t.U(e)).U=e,e.root=t,i?yt=t:s&&(s.wa=e,s.U&&s.U.kc.push(e))},Ut=(t,e,i)=>{var n=xt(t,{parent:!0}).node;if(!(t=tt(t))||"."===t||".."===t)throw new Tt(28);var s=Ot(n,t);if(s)throw new Tt(s);if(!n.l.va)throw new Tt(63);return n.l.va(n,t,e,i)},Ht=(t,e,i)=>{void 0===i&&(i=e,e=438),Ut(t,8192|e,i)},Gt=(t,e)=>{if(!it(t))throw new Tt(44);var i=xt(e,{parent:!0}).node;if(!i)throw new Tt(44);e=tt(e);var n=Ot(i,e);if(n)throw new Tt(n);if(!i.l.Ea)throw new Tt(63);i.l.Ea(i,e,t)},Wt=t=>{if(!(t=xt(t).node))throw new Tt(44);if(!t.l.ma)throw new Tt(28);return it(Lt(t.parent),t.l.ma(t))},Vt=(t,e,i)=>{if(""===t)throw new Tt(44);if("string"==typeof e){var n={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[e];if(void 0===n)throw Error(`Unknown file open mode: ${e}`);e=n}if(i=64&e?4095&(void 0===i?438:i)|32768:0,"object"==typeof t)var a=t;else{t=Z(t);try{a=xt(t,{fb:!(131072&e)}).node}catch(t){}}if(n=!1,64&e)if(a){if(128&e)throw new Tt(20)}else a=Ut(t,i,0),n=!0;if(!a)throw new Tt(44);if(8192==(61440&a.mode)&&(e&=-513),65536&e&&16384!=(61440&a.mode))throw new Tt(54);if(!n&&(i=a?40960==(61440&a.mode)?32:16384==(61440&a.mode)&&("r"!==kt(e)||512&e)?31:Mt(a,kt(e)):44))throw new Tt(i);if(512&e&&!n){if(!(i="string"==typeof(i=a)?xt(i,{fb:!0}).node:i).l.P)throw new Tt(63);if(16384==(61440&i.mode))throw new Tt(31);if(32768!=(61440&i.mode))throw new Tt(28);if(n=Mt(i,"w"))throw new Tt(n);i.l.P(i,{size:0,timestamp:Date.now()})}return e&=-131713,(a=Rt({node:a,path:Lt(a),flags:e,seekable:!0,position:0,m:a.m,zc:[],error:!1})).m.open&&a.m.open(a),!s.logReadFiles||1&e||(bt||(bt={}),t in bt||(bt[t]=1)),a},Yt=(t,e,i)=>{if(null===t.X)throw new Tt(8);if(!t.seekable||!t.m.ba)throw new Tt(70);if(0!=i&&1!=i&&2!=i)throw new Tt(28);t.position=t.m.ba(t,e,i),t.zc=[]},Xt=()=>{Tt||((Tt=function(t,e){this.name="ErrnoError",this.node=e,this.pc=function(t){this.aa=t},this.pc(t),this.message="FS error"}).prototype=Error(),Tt.prototype.constructor=Tt,[44].forEach((t=>{Ct[t]=new Tt(t),Ct[t].stack="<generic error, no stack>"})))},$t=(t,e,i)=>{t=Z("/dev/"+t);var n=function(t,e){var i=0;return t&&(i|=365),e&&(i|=146),i}(!!e,!!i);ft||(ft=64);var s=ft++<<8;Ft(s,{open:t=>{t.seekable=!1},close:()=>{i&&i.buffer&&i.buffer.length&&i(10)},read:(t,i,n,s)=>{for(var a=0,o=0;o<s;o++){try{var r=e()}catch(t){throw new Tt(29)}if(void 0===r&&0===a)throw new Tt(6);if(null==r)break;a++,i[n+o]=r}return a&&(t.node.timestamp=Date.now()),a},write:(t,e,n,s)=>{for(var a=0;a<s;a++)try{i(e[n+a])}catch(t){throw new Tt(29)}return s&&(t.node.timestamp=Date.now()),a}}),Ht(t,n,s)},Kt={},qt=void 0;function Jt(){return C[(qt+=4)-4>>2]}function Zt(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return 48<=e&&57>=e?`_${t}`:t}function Qt(t,e){return t=Zt(t),{[t]:function(){return e.apply(this,arguments)}}[t]}function te(){this.M=[void 0],this.hb=[]}var ee=new te,ie=void 0;function ne(t){throw new ie(t)}var se=t=>(t||ne("Cannot use deleted val. handle = "+t),ee.get(t).value),ae=t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ee.pa({tb:1,value:t})}};function oe(t){var e=Error,i=Qt(t,(function(e){this.name=t,this.message=e,void 0!==(e=Error(e).stack)&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return i.prototype=Object.create(e.prototype),i.prototype.constructor=i,i.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},i}var re=void 0,ce=void 0;function he(t){for(var e="";E[t];)e+=ce[E[t++]];return e}var le=[];function de(){for(;le.length;){var t=le.pop();t.g.fa=!1,t.delete()}}var ue=void 0,me={};function pe(t,e){for(void 0===e&&ne("ptr should not be undefined");t.A;)e=t.na(e),t=t.A;return e}var ge={};function fe(t){var e=he(t=Mi(t));return Ci(t),e}function ve(t,e){var i=ge[t];return void 0===i&&ne(e+" has unknown type "+fe(t)),i}function be(){}var we=!1;function ye(t){--t.count.value,0===t.count.value&&(t.G?t.L.W(t.G):t.u.i.W(t.o))}function Se(t,e,i){return e===i?t:void 0===i.A||null===(t=Se(t,e,i.A))?null:i.Pb(t)}var _e={},Ie=void 0;function Ee(t){throw new Ie(t)}function Ae(t,e){return e.u&&e.o||Ee("makeClassHandle requires ptr and ptrType"),!!e.L!=!!e.G&&Ee("Both smartPtrType and smartPtr must be specified"),e.count={value:1},Te(Object.create(t,{g:{value:e}}))}function Te(t){return"undefined"==typeof FinalizationRegistry?(Te=t=>t,t):(we=new FinalizationRegistry((t=>{ye(t.g)})),be=t=>{we.unregister(t)},(Te=t=>{var e=t.g;return e.G&&we.register(t,{g:e},t),t})(t))}var Ce={};function xe(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function Le(t){return this.fromWireType(C[t>>2])}var Pe={},De={};function Be(t,e,i){function n(e){(e=i(e)).length!==t.length&&Ee("Mismatched type converter count");for(var n=0;n<t.length;++n)Me(t[n],e[n])}t.forEach((function(t){De[t]=e}));var s=Array(e.length),a=[],o=0;e.forEach(((t,e)=>{ge.hasOwnProperty(t)?s[e]=ge[t]:(a.push(t),Pe.hasOwnProperty(t)||(Pe[t]=[]),Pe[t].push((()=>{s[e]=ge[t],++o===a.length&&n(s)})))})),0===a.length&&n(s)}function ke(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${t}`)}}function Me(t,e,i={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");!function(t,e,i={}){var n=e.name;if(t||ne(`type "${n}" must have a positive integer typeid pointer`),ge.hasOwnProperty(t)){if(i.$b)return;ne(`Cannot register type '${n}' twice`)}ge[t]=e,delete De[t],Pe.hasOwnProperty(t)&&(e=Pe[t],delete Pe[t],e.forEach((t=>t())))}(t,e,i)}function Oe(t){ne(t.g.u.i.name+" instance already deleted")}function ze(){}function Re(t,e,i){if(void 0===t[e].B){var n=t[e];t[e]=function(){return t[e].B.hasOwnProperty(arguments.length)||ne(`Function '${i}' called with an invalid number of arguments (${arguments.length}) - expects one of (${t[e].B})!`),t[e].B[arguments.length].apply(this,arguments)},t[e].B=[],t[e].B[n.ea]=n}}function Ne(t,e,i){s.hasOwnProperty(t)?((void 0===i||void 0!==s[t].B&&void 0!==s[t].B[i])&&ne(`Cannot register public name '${t}' twice`),Re(s,t,t),s.hasOwnProperty(i)&&ne(`Cannot register multiple overloads of a function with the same number of arguments (${i})!`),s[t].B[i]=e):(s[t]=e,void 0!==i&&(s[t].Pc=i))}function Fe(t,e,i,n,s,a,o,r){this.name=t,this.constructor=e,this.N=i,this.W=n,this.A=s,this.Ub=a,this.na=o,this.Pb=r,this.qb=[]}function je(t,e,i){for(;e!==i;)e.na||ne(`Expected null or instance of ${i.name}, got an instance of ${e.name}`),t=e.na(t),e=e.A;return t}function Ue(t,e){return null===e?(this.Na&&ne(`null is not a valid ${this.name}`),0):(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),je(e.g.o,e.g.u.i,this.i))}function He(t,e){if(null===e){if(this.Na&&ne(`null is not a valid ${this.name}`),this.ua){var i=this.Pa();return null!==t&&t.push(this.W,i),i}return 0}if(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.ta&&e.g.u.ta&&ne(`Cannot convert argument of type ${e.g.L?e.g.L.name:e.g.u.name} to parameter type ${this.name}`),i=je(e.g.o,e.g.u.i,this.i),this.ua)switch(void 0===e.g.G&&ne("Passing raw pointer to smart pointer is illegal"),this.tc){case 0:e.g.L===this?i=e.g.G:ne(`Cannot convert argument of type ${e.g.L?e.g.L.name:e.g.u.name} to parameter type ${this.name}`);break;case 1:i=e.g.G;break;case 2:if(e.g.L===this)i=e.g.G;else{var n=e.clone();i=this.oc(i,ae((function(){n.delete()}))),null!==t&&t.push(this.W,i)}break;default:ne("Unsupporting sharing policy")}return i}function Ge(t,e){return null===e?(this.Na&&ne(`null is not a valid ${this.name}`),0):(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),e.g.u.ta&&ne(`Cannot convert argument of type ${e.g.u.name} to parameter type ${this.name}`),je(e.g.o,e.g.u.i,this.i))}function We(t,e,i,n){this.name=t,this.i=e,this.Na=i,this.ta=n,this.ua=!1,this.W=this.oc=this.Pa=this.rb=this.tc=this.nc=void 0,void 0!==e.A?this.toWireType=He:(this.toWireType=n?Ue:Ge,this.K=null)}function Ve(t,e,i){s.hasOwnProperty(t)||Ee("Replacing nonexistant public symbol"),void 0!==s[t].B&&void 0!==i?s[t].B[i]=e:(s[t]=e,s[t].ea=i)}var Ye=[],Xe=t=>{var e=Ye[t];return e||(t>=Ye.length&&(Ye.length=t+1),Ye[t]=e=k.get(t)),e};function $e(t,e){var i=(t=he(t)).includes("j")?((t,e)=>{var i=[];return function(){if(i.length=0,Object.assign(i,arguments),t.includes("j")){var n=s["dynCall_"+t];n=i&&i.length?n.apply(null,[e].concat(i)):n.call(null,e)}else n=Xe(e).apply(null,i);return n}})(t,e):Xe(e);return"function"!=typeof i&&ne(`unknown function pointer with signature ${t}: ${e}`),i}var Ke=void 0;function qe(t,e){var i=[],n={};throw e.forEach((function t(e){n[e]||ge[e]||(De[e]?De[e].forEach(t):(i.push(e),n[e]=!0))})),new Ke(`${t}: `+i.map(fe).join([", "]))}function Je(t,e,i,n,s){var a=e.length;2>a&&ne("argTypes array size mismatch! Must at least get return value and 'this' types!");var o=null!==e[1]&&null!==i,r=!1;for(i=1;i<e.length;++i)if(null!==e[i]&&void 0===e[i].K){r=!0;break}var c="void"!==e[0].name,h=a-2,l=Array(h),d=[],u=[];return function(){if(arguments.length!==h&&ne(`function ${t} called with ${arguments.length} arguments, expected ${h} args!`),u.length=0,d.length=o?2:1,d[0]=s,o){var i=e[1].toWireType(u,this);d[1]=i}for(var a=0;a<h;++a)l[a]=e[a+2].toWireType(u,arguments[a]),d.push(l[a]);if(a=n.apply(null,d),r)xe(u);else for(var m=o?1:2;m<e.length;m++){var p=1===m?i:l[m-2];null!==e[m].K&&e[m].K(p)}return i=c?e[0].fromWireType(a):void 0}}function Ze(t,e){for(var i=[],n=0;n<t;n++)i.push(x[e+4*n>>2]);return i}function Qe(t,e,i){return t instanceof Object||ne(`${i} with invalid "this": ${t}`),t instanceof e.i.constructor||ne(`${i} incompatible with "this" of type ${t.constructor.name}`),t.g.o||ne(`cannot call emscripten binding method ${i} on deleted object`),je(t.g.o,t.g.u.i,e.i)}function ti(t){t>=ee.h&&0==--ee.get(t).tb&&ee.Zb(t)}function ei(t,e,i){switch(e){case 0:return function(t){return this.fromWireType((i?I:E)[t])};case 1:return function(t){return this.fromWireType((i?A:T)[t>>1])};case 2:return function(t){return this.fromWireType((i?C:x)[t>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function ii(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function ni(t,e){switch(e){case 2:return function(t){return this.fromWireType(L[t>>2])};case 3:return function(t){return this.fromWireType(P[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function si(t,e,i){switch(e){case 0:return i?function(t){return I[t]}:function(t){return E[t]};case 1:return i?function(t){return A[t>>1]}:function(t){return T[t>>1]};case 2:return i?function(t){return C[t>>2]}:function(t){return x[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var ai="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,oi=(t,e)=>{for(var i=t>>1,n=i+e/2;!(i>=n)&&T[i];)++i;if(32<(i<<=1)-t&&ai)return ai.decode(E.subarray(t,i));for(i="",n=0;!(n>=e/2);++n){var s=A[t+2*n>>1];if(0==s)break;i+=String.fromCharCode(s)}return i},ri=(t,e,i)=>{if(void 0===i&&(i=2147483647),2>i)return 0;var n=e;i=(i-=2)<2*t.length?i/2:t.length;for(var s=0;s<i;++s)A[e>>1]=t.charCodeAt(s),e+=2;return A[e>>1]=0,e-n},ci=t=>2*t.length,hi=(t,e)=>{for(var i=0,n="";!(i>=e/4);){var s=C[t+4*i>>2];if(0==s)break;++i,65536<=s?(s-=65536,n+=String.fromCharCode(55296|s>>10,56320|1023&s)):n+=String.fromCharCode(s)}return n},li=(t,e,i)=>{if(void 0===i&&(i=2147483647),4>i)return 0;var n=e;i=n+i-4;for(var s=0;s<t.length;++s){var a=t.charCodeAt(s);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++s)),C[e>>2]=a,(e+=4)+4>i)break}return C[e>>2]=0,e-n},di=t=>{for(var e=0,i=0;i<t.length;++i){var n=t.charCodeAt(i);55296<=n&&57343>=n&&++i,e+=4}return e},ui={};function mi(t){var e=ui[t];return void 0===e?he(t):e}var pi,gi=[],fi=[],vi=[],bi={},wi=()=>{if(!pi){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(t in bi)void 0===bi[t]?delete e[t]:e[t]=bi[t];var i=[];for(t in e)i.push(`${t}=${e[t]}`);pi=i}return pi},yi=t=>0==t%4&&(0!=t%100||0==t%400),Si=[31,29,31,30,31,30,31,31,30,31,30,31],_i=[31,28,31,30,31,30,31,31,30,31,30,31];function Ii(t,e,i,n){t||(t=this),this.parent=t,this.U=t.U,this.wa=null,this.id=It++,this.name=e,this.mode=i,this.l={},this.m={},this.za=n}Object.defineProperties(Ii.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(t){t?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(t){t?this.mode|=146:this.mode&=-147}}}),Xt(),Et=Array(4096),jt(wt,"/"),Ut("/tmp",16895,0),Ut("/home",16895,0),Ut("/home/web_user",16895,0),(()=>{Ut("/dev",16895,0),Ft(259,{read:()=>0,write:(t,e,i,n)=>n}),Ht("/dev/null",259),lt(1280,ut),lt(1536,mt),Ht("/dev/tty",1280),Ht("/dev/tty1",1536);var t=new Uint8Array(1024),e=0,i=()=>(0===e&&(e=et(t).byteLength),t[--e]);$t("random",i),$t("urandom",i),Ut("/dev/shm",16895,0),Ut("/dev/shm/tmp",16895,0)})(),(()=>{Ut("/proc",16895,0);var t=Ut("/proc/self",16895,0);Ut("/proc/self/fd",16895,0),jt({U:()=>{var e=Bt(t,"fd",16895,73);return e.l={ka:(t,e)=>{var i=zt(+e);return(t={parent:null,U:{mb:"fake"},l:{ma:()=>i.path}}).parent=t}},e}},"/proc/self/fd")})(),Object.assign(te.prototype,{get(t){return this.M[t]},has(t){return void 0!==this.M[t]},pa(t){var e=this.hb.pop()||this.M.length;return this.M[e]=t,e},Zb(t){this.M[t]=void 0,this.hb.push(t)}}),ie=s.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},ee.M.push({value:void 0},{value:null},{value:!0},{value:!1}),ee.h=ee.M.length,s.count_emval_handles=function(){for(var t=0,e=ee.h;e<ee.M.length;++e)void 0!==ee.M[e]&&++t;return t},re=s.PureVirtualError=oe("PureVirtualError");for(var Ei=Array(256),Ai=0;256>Ai;++Ai)Ei[Ai]=String.fromCharCode(Ai);ce=Ei,s.getInheritedInstanceCount=function(){return Object.keys(me).length},s.getLiveInheritedInstances=function(){var t,e=[];for(t in me)me.hasOwnProperty(t)&&e.push(me[t]);return e},s.flushPendingDeletes=de,s.setDelayFunction=function(t){ue=t,le.length&&ue&&ue(de)},Ie=s.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},ze.prototype.isAliasOf=function(t){if(!(this instanceof ze&&t instanceof ze))return!1;var e=this.g.u.i,i=this.g.o,n=t.g.u.i;for(t=t.g.o;e.A;)i=e.na(i),e=e.A;for(;n.A;)t=n.na(t),n=n.A;return e===n&&i===t},ze.prototype.clone=function(){if(this.g.o||Oe(this),this.g.ia)return this.g.count.value+=1,this;var t=Te,e=Object,i=e.create,n=Object.getPrototypeOf(this),s=this.g;return(t=t(i.call(e,n,{g:{value:{count:s.count,fa:s.fa,ia:s.ia,o:s.o,u:s.u,G:s.G,L:s.L}}}))).g.count.value+=1,t.g.fa=!1,t},ze.prototype.delete=function(){this.g.o||Oe(this),this.g.fa&&!this.g.ia&&ne("Object already scheduled for deletion"),be(this),ye(this.g),this.g.ia||(this.g.G=void 0,this.g.o=void 0)},ze.prototype.isDeleted=function(){return!this.g.o},ze.prototype.deleteLater=function(){return this.g.o||Oe(this),this.g.fa&&!this.g.ia&&ne("Object already scheduled for deletion"),le.push(this),1===le.length&&ue&&ue(de),this.g.fa=!0,this},We.prototype.Vb=function(t){return this.rb&&(t=this.rb(t)),t},We.prototype.ab=function(t){this.W&&this.W(t)},We.prototype.argPackAdvance=8,We.prototype.readValueFromPointer=Le,We.prototype.deleteObject=function(t){null!==t&&t.delete()},We.prototype.fromWireType=function(t){function e(){return this.ua?Ae(this.i.N,{u:this.nc,o:i,L:this,G:t}):Ae(this.i.N,{u:this,o:t})}var i=this.Vb(t);if(!i)return this.ab(t),null;var n=function(t,e){return e=pe(t,e),me[e]}(this.i,i);if(void 0!==n)return 0===n.g.count.value?(n.g.o=i,n.g.G=t,n.clone()):(n=n.clone(),this.ab(t),n);if(n=this.i.Ub(i),!(n=_e[n]))return e.call(this);n=this.ta?n.Kb:n.pointerType;var s=Se(i,this.i,n.i);return null===s?e.call(this):this.ua?Ae(n.i.N,{u:n,o:s,L:this,G:t}):Ae(n.i.N,{u:n,o:s})},Ke=s.UnboundTypeError=oe("UnboundTypeError");var Ti={__syscall_fcntl64:function(t,e,i){qt=i;try{var n=zt(t);switch(e){case 0:var s=Jt();return 0>s?-28:Rt(n,s).X;case 1:case 2:case 6:case 7:return 0;case 3:return n.flags;case 4:return s=Jt(),n.flags|=s,0;case 5:return s=Jt(),A[s+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return C[ki()>>2]=28,-1}}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return-t.aa}},__syscall_ioctl:function(t,e,i){qt=i;try{var n=zt(t);switch(e){case 21509:case 21510:case 21511:case 21512:case 21524:case 21515:return n.s?0:-59;case 21505:if(!n.s)return-59;if(n.s.V.bc){e=[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];var s=Jt();C[s>>2]=25856,C[s+4>>2]=5,C[s+8>>2]=191,C[s+12>>2]=35387;for(var a=0;32>a;a++)I[s+a+17|0]=e[a]||0}return 0;case 21506:case 21507:case 21508:if(!n.s)return-59;if(n.s.V.cc)for(s=Jt(),e=[],a=0;32>a;a++)e.push(I[s+a+17|0]);return 0;case 21519:return n.s?(s=Jt(),C[s>>2]=0):-59;case 21520:return n.s?-28:-59;case 21531:if(s=Jt(),!n.m.ac)throw new Tt(59);return n.m.ac(n,e,s);case 21523:return n.s?(n.s.V.dc&&(a=[24,80],s=Jt(),A[s>>1]=a[0],A[s+2>>1]=a[1]),0):-59;default:return-28}}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return-t.aa}},__syscall_openat:function(t,e,i,n){qt=n;try{var s=e=e?st(E,e):"";if("/"===s.charAt(0))e=s;else{var a=-100===t?"/":zt(t).path;if(0==s.length)throw new Tt(44);e=Z(a+"/"+s)}var o=n?Jt():0;return Vt(e,i,o).X}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return-t.aa}},_embind_create_inheriting_constructor:function(t,e,i){t=he(t),e=ve(e,"wrapper"),i=se(i);var n=[].slice,s=e.i,a=s.N,o=s.A.N,r=s.A.constructor;for(var c in t=Qt(t,(function(){s.A.qb.forEach(function(t){if(this[t]===o[t])throw new re(`Pure virtual function ${t} must be implemented in JavaScript`)}.bind(this)),Object.defineProperty(this,"__parent",{value:a}),this.__construct.apply(this,n.call(arguments))})),a.__construct=function(){this===a&&ne("Pass correct 'this' to __construct");var t=r.implement.apply(void 0,[this].concat(n.call(arguments)));be(t);var e=t.g;t.notifyOnDestruction(),e.ia=!0,Object.defineProperties(this,{g:{value:e}}),Te(this),t=e.o,t=pe(s,t),me.hasOwnProperty(t)?ne(`Tried to register registered instance: ${t}`):me[t]=this},a.__destruct=function(){this===a&&ne("Pass correct 'this' to __destruct"),be(this);var t=this.g.o;t=pe(s,t),me.hasOwnProperty(t)?delete me[t]:ne(`Tried to unregister unregistered instance: ${t}`)},t.prototype=Object.create(a),i)t.prototype[c]=i[c];return ae(t)},_embind_finalize_value_object:function(t){var e=Ce[t];delete Ce[t];var i=e.Pa,n=e.W,s=e.eb;Be([t],s.map((t=>t.Yb)).concat(s.map((t=>t.rc))),(t=>{var a={};return s.forEach(((e,i)=>{var n=t[i],o=e.Wb,r=e.Xb,c=t[i+s.length],h=e.qc,l=e.sc;a[e.Sb]={read:t=>n.fromWireType(o(r,t)),write:(t,e)=>{var i=[];h(l,t,c.toWireType(i,e)),xe(i)}}})),[{name:e.name,fromWireType:function(t){var e,i={};for(e in a)i[e]=a[e].read(t);return n(t),i},toWireType:function(t,e){for(var s in a)if(!(s in e))throw new TypeError(`Missing field: "${s}"`);var o=i();for(s in a)a[s].write(o,e[s]);return null!==t&&t.push(n,o),o},argPackAdvance:8,readValueFromPointer:Le,K:n}]}))},_embind_register_bigint:function(){},_embind_register_bool:function(t,e,i,n,s){var a=ke(i);Me(t,{name:e=he(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:s},argPackAdvance:8,readValueFromPointer:function(t){if(1===i)var n=I;else if(2===i)n=A;else{if(4!==i)throw new TypeError("Unknown boolean type size: "+e);n=C}return this.fromWireType(n[t>>a])},K:null})},_embind_register_class:function(t,e,i,n,s,a,o,r,c,h,l,d,u){l=he(l),a=$e(s,a),r&&(r=$e(o,r)),h&&(h=$e(c,h)),u=$e(d,u);var m=Zt(l);Ne(m,(function(){qe(`Cannot construct ${l} due to unbound types`,[n])})),Be([t,e,i],n?[n]:[],(function(e){if(e=e[0],n)var i=e.i,s=i.N;else s=ze.prototype;e=Qt(m,(function(){if(Object.getPrototypeOf(this)!==o)throw new ie("Use 'new' to construct "+l);if(void 0===c.$)throw new ie(l+" has no accessible constructor");var t=c.$[arguments.length];if(void 0===t)throw new ie(`Tried to invoke ctor of ${l} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(c.$).toString()}) parameters instead!`);return t.apply(this,arguments)}));var o=Object.create(s,{constructor:{value:e}});e.prototype=o;var c=new Fe(l,e,o,u,i,a,r,h);c.A&&(void 0===c.A.oa&&(c.A.oa=[]),c.A.oa.push(c)),i=new We(l,c,!0,!1),s=new We(l+"*",c,!1,!1);var d=new We(l+" const*",c,!1,!0);return _e[t]={pointerType:s,Kb:d},Ve(m,e),[i,s,d]}))},_embind_register_class_class_function:function(t,e,i,n,s,a,o){var r=Ze(i,n);e=he(e),a=$e(s,a),Be([],[t],(function(t){function n(){qe(`Cannot call ${s} due to unbound types`,r)}var s=`${(t=t[0]).name}.${e}`;e.startsWith("@@")&&(e=Symbol[e.substring(2)]);var c=t.i.constructor;return void 0===c[e]?(n.ea=i-1,c[e]=n):(Re(c,e,s),c[e].B[i-1]=n),Be([],r,(function(n){if(n=Je(s,[n[0],null].concat(n.slice(1)),null,a,o),void 0===c[e].B?(n.ea=i-1,c[e]=n):c[e].B[i-1]=n,t.i.oa)for(const i of t.i.oa)i.constructor.hasOwnProperty(e)||(i.constructor[e]=n);return[]})),[]}))},_embind_register_class_class_property:function(t,e,i,n,s,a,o,r){e=he(e),a=$e(s,a),Be([],[t],(function(t){var s=`${(t=t[0]).name}.${e}`,c={get(){qe(`Cannot access ${s} due to unbound types`,[i])},enumerable:!0,configurable:!0};return c.set=r?()=>{qe(`Cannot access ${s} due to unbound types`,[i])}:()=>{ne(`${s} is a read-only property`)},Object.defineProperty(t.i.constructor,e,c),Be([],[i],(function(i){i=i[0];var s={get:()=>i.fromWireType(a(n)),enumerable:!0};return r&&(r=$e(o,r),s.set=t=>{var e=[];r(n,i.toWireType(e,t)),xe(e)}),Object.defineProperty(t.i.constructor,e,s),[]})),[]}))},_embind_register_class_constructor:function(t,e,i,n,s,a){var o=Ze(e,i);s=$e(n,s),Be([],[t],(function(t){var i=`constructor ${(t=t[0]).name}`;if(void 0===t.i.$&&(t.i.$=[]),void 0!==t.i.$[e-1])throw new ie(`Cannot register multiple constructors with identical number of parameters (${e-1}) for class '${t.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return t.i.$[e-1]=()=>{qe(`Cannot construct ${t.name} due to unbound types`,o)},Be([],o,(function(n){return n.splice(1,0,null),t.i.$[e-1]=Je(i,n,null,s,a),[]})),[]}))},_embind_register_class_function:function(t,e,i,n,s,a,o,r){var c=Ze(i,n);e=he(e),a=$e(s,a),Be([],[t],(function(t){function n(){qe(`Cannot call ${s} due to unbound types`,c)}var s=`${(t=t[0]).name}.${e}`;e.startsWith("@@")&&(e=Symbol[e.substring(2)]),r&&t.i.qb.push(e);var h=t.i.N,l=h[e];return void 0===l||void 0===l.B&&l.className!==t.name&&l.ea===i-2?(n.ea=i-2,n.className=t.name,h[e]=n):(Re(h,e,s),h[e].B[i-2]=n),Be([],c,(function(n){return n=Je(s,n,t,a,o),void 0===h[e].B?(n.ea=i-2,h[e]=n):h[e].B[i-2]=n,[]})),[]}))},_embind_register_class_property:function(t,e,i,n,s,a,o,r,c,h){e=he(e),s=$e(n,s),Be([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`,l={get(){qe(`Cannot access ${n} due to unbound types`,[i,o])},enumerable:!0,configurable:!0};return l.set=c?()=>{qe(`Cannot access ${n} due to unbound types`,[i,o])}:()=>{ne(n+" is a read-only property")},Object.defineProperty(t.i.N,e,l),Be([],c?[i,o]:[i],(function(i){var o=i[0],l={get(){var e=Qe(this,t,n+" getter");return o.fromWireType(s(a,e))},enumerable:!0};if(c){c=$e(r,c);var d=i[1];l.set=function(e){var i=Qe(this,t,n+" setter"),s=[];c(h,i,d.toWireType(s,e)),xe(s)}}return Object.defineProperty(t.i.N,e,l),[]})),[]}))},_embind_register_emval:function(t,e){Me(t,{name:e=he(e),fromWireType:function(t){var e=se(t);return ti(t),e},toWireType:function(t,e){return ae(e)},argPackAdvance:8,readValueFromPointer:Le,K:null})},_embind_register_enum:function(t,e,i,n){function s(){}i=ke(i),e=he(e),s.values={},Me(t,{name:e,constructor:s,fromWireType:function(t){return this.constructor.values[t]},toWireType:function(t,e){return e.value},argPackAdvance:8,readValueFromPointer:ei(e,i,n),K:null}),Ne(e,s)},_embind_register_enum_value:function(t,e,i){var n=ve(t,"enum");e=he(e),t=n.constructor,n=Object.create(n.constructor.prototype,{value:{value:i},constructor:{value:Qt(`${n.name}_${e}`,(function(){}))}}),t.values[i]=n,t[e]=n},_embind_register_float:function(t,e,i){i=ke(i),Me(t,{name:e=he(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:ni(e,i),K:null})},_embind_register_function:function(t,e,i,n,s,a){var o=Ze(e,i);t=he(t),s=$e(n,s),Ne(t,(function(){qe(`Cannot call ${t} due to unbound types`,o)}),e-1),Be([],o,(function(i){return Ve(t,Je(t,[i[0],null].concat(i.slice(1)),null,s,a),e-1),[]}))},_embind_register_integer:function(t,e,i,n,s){e=he(e),-1===s&&(s=4294967295),s=ke(i);var a=t=>t;if(0===n){var o=32-8*i;a=t=>t<<o>>>o}i=e.includes("unsigned")?function(t,e){return e>>>0}:function(t,e){return e},Me(t,{name:e,fromWireType:a,toWireType:i,argPackAdvance:8,readValueFromPointer:si(e,s,0!==n),K:null})},_embind_register_memory_view:function(t,e,i){function n(t){t>>=2;var e=x;return new s(e.buffer,e[t+1],e[t])}var s=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];Me(t,{name:i=he(i),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{$b:!0})},_embind_register_std_string:function(t,e){var i="std::string"===(e=he(e));Me(t,{name:e,fromWireType:function(t){var e=x[t>>2],n=t+4;if(i)for(var s=n,a=0;a<=e;++a){var o=n+a;if(a==e||0==E[o]){if(s=s?st(E,s,o-s):"",void 0===r)var r=s;else r+=String.fromCharCode(0),r+=s;s=o+1}}else{for(r=Array(e),a=0;a<e;++a)r[a]=String.fromCharCode(E[n+a]);r=r.join("")}return Ci(t),r},toWireType:function(t,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var n="string"==typeof e;n||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||ne("Cannot pass non-string to std::string");var s=i&&n?ot(e):e.length,a=xi(4+s+1),o=a+4;if(x[a>>2]=s,i&&n)rt(e,E,o,s+1);else if(n)for(n=0;n<s;++n){var r=e.charCodeAt(n);255<r&&(Ci(o),ne("String has UTF-16 code units that do not fit in 8 bits")),E[o+n]=r}else for(n=0;n<s;++n)E[o+n]=e[n];return null!==t&&t.push(Ci,a),a},argPackAdvance:8,readValueFromPointer:Le,K:function(t){Ci(t)}})},_embind_register_std_wstring:function(t,e,i){if(i=he(i),2===e)var n=oi,s=ri,a=ci,o=()=>T,r=1;else 4===e&&(n=hi,s=li,a=di,o=()=>x,r=2);Me(t,{name:i,fromWireType:function(t){for(var i,s=x[t>>2],a=o(),c=t+4,h=0;h<=s;++h){var l=t+4+h*e;h!=s&&0!=a[l>>r]||(c=n(c,l-c),void 0===i?i=c:(i+=String.fromCharCode(0),i+=c),c=l+e)}return Ci(t),i},toWireType:function(t,n){"string"!=typeof n&&ne(`Cannot pass non-string to C++ string type ${i}`);var o=a(n),c=xi(4+o+e);return x[c>>2]=o>>r,s(n,c+4,o+e),null!==t&&t.push(Ci,c),c},argPackAdvance:8,readValueFromPointer:Le,K:function(t){Ci(t)}})},_embind_register_value_object:function(t,e,i,n,s,a){Ce[t]={name:he(e),Pa:$e(i,n),W:$e(s,a),eb:[]}},_embind_register_value_object_field:function(t,e,i,n,s,a,o,r,c,h){Ce[t].eb.push({Sb:he(e),Yb:i,Wb:$e(n,s),Xb:a,rc:o,qc:$e(r,c),sc:h})},_embind_register_void:function(t,e){Me(t,{fc:!0,name:e=he(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},_emscripten_get_now_is_monotonic:()=>!0,_emval_as:function(t,e,i){t=se(t),e=ve(e,"emval::as");var n=[],s=ae(n);return x[i>>2]=s,e.toWireType(n,t)},_emval_call_method:function(t,e,i,n,s){t=gi[t],e=se(e),i=mi(i);var a=[];return x[n>>2]=ae(a),t(e,i,a,s)},_emval_call_void_method:function(t,e,i,n){(t=gi[t])(e=se(e),i=mi(i),null,n)},_emval_decref:ti,_emval_get_method_caller:function(t,e){var i=function(t,e){for(var i=Array(t),n=0;n<t;++n)i[n]=ve(x[e+4*n>>2],"parameter "+n);return i}(t,e),n=i[0];e=n.name+"_$"+i.slice(1).map((function(t){return t.name})).join("_")+"$";var s=fi[e];if(void 0!==s)return s;var a=Array(t-1);return s=function(t){var e=gi.length;return gi.push(t),e}(((e,s,o,r)=>{for(var c=0,h=0;h<t-1;++h)a[h]=i[h+1].readValueFromPointer(r+c),c+=i[h+1].argPackAdvance;for(e=e[s].apply(e,a),h=0;h<t-1;++h)i[h+1].Nb&&i[h+1].Nb(a[h]);if(!n.fc)return n.toWireType(o,e)})),fi[e]=s},_emval_get_module_property:function(t){return t=mi(t),ae(s[t])},_emval_get_property:function(t,e){return t=se(t),e=se(e),ae(t[e])},_emval_incref:function(t){4<t&&(ee.get(t).tb+=1)},_emval_new_cstring:function(t){return ae(mi(t))},_emval_new_object:function(){return ae({})},_emval_run_destructors:function(t){xe(se(t)),ti(t)},_emval_set_property:function(t,e,i){t=se(t),e=se(e),i=se(i),t[e]=i},_emval_take_value:function(t,e){return t=(t=ve(t,"_emval_take_value")).readValueFromPointer(e),ae(t)},abort:()=>{H("")},emscripten_asm_const_int:(t,e,i)=>{var n;for(vi.length=0,i>>=2;n=E[e++];)i+=105!=n&i,vi.push(105==n?C[i]:P[i++>>1]),++i;return K[t].apply(null,vi)},emscripten_date_now:function(){return Date.now()},emscripten_get_now:()=>performance.now(),emscripten_memcpy_big:(t,e,i)=>E.copyWithin(t,e,e+i),emscripten_resize_heap:t=>{var e=E.length;if(2147483648<(t>>>=0))return!1;for(var i=1;4>=i;i*=2){var n=e*(1+.2/i);n=Math.min(n,t+100663296);var s=Math;n=Math.max(t,n);t:{s=s.min.call(s,2147483648,n+(65536-n%65536)%65536)-S.buffer.byteLength+65535>>>16;try{S.grow(s),B();var a=1;break t}catch(t){}a=void 0}if(a)return!0}return!1},environ_get:(t,e)=>{var i=0;return wi().forEach((function(n,s){var a=e+i;for(s=x[t+4*s>>2]=a,a=0;a<n.length;++a)I[0|s++]=n.charCodeAt(a);I[0|s]=0,i+=n.length+1})),0},environ_sizes_get:(t,e)=>{var i=wi();x[t>>2]=i.length;var n=0;return i.forEach((function(t){n+=t.length+1})),x[e>>2]=n,0},fd_close:function(t){try{var e=zt(t);if(null===e.X)throw new Tt(8);e.Ma&&(e.Ma=null);try{e.m.close&&e.m.close(e)}catch(t){throw t}finally{_t[e.X]=null}return e.X=null,0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_read:function(t,e,i,n){try{t:{var s=zt(t);t=e;for(var a,o=e=0;o<i;o++){var r=x[t>>2],c=x[t+4>>2];t+=8;var h=s,l=r,d=c,u=a,m=I;if(0>d||0>u)throw new Tt(28);if(null===h.X)throw new Tt(8);if(1==(2097155&h.flags))throw new Tt(8);if(16384==(61440&h.node.mode))throw new Tt(31);if(!h.m.read)throw new Tt(28);var p=void 0!==u;if(p){if(!h.seekable)throw new Tt(70)}else u=h.position;var g=h.m.read(h,m,l,d,u);p||(h.position+=g);var f=g;if(0>f){var v=-1;break t}if(e+=f,f<c)break;void 0!==a&&(a+=f)}v=e}return x[n>>2]=v,0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_seek:function(t,e,i,n,s){e=i+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*i:NaN;try{if(isNaN(e))return 61;var a=zt(t);return Yt(a,e,n),$=[a.position>>>0,(X=a.position,1<=+Math.abs(X)?0<X?+Math.floor(X/4294967296)>>>0:~~+Math.ceil((X-+(~~X>>>0))/4294967296)>>>0:0)],C[s>>2]=$[0],C[s+4>>2]=$[1],a.Ma&&0===e&&0===n&&(a.Ma=null),0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_write:function(t,e,i,n){try{t:{var s=zt(t);t=e;for(var a,o=e=0;o<i;o++){var r=x[t>>2],c=x[t+4>>2];t+=8;var h=s,l=r,d=c,u=a,m=I;if(0>d||0>u)throw new Tt(28);if(null===h.X)throw new Tt(8);if(!(2097155&h.flags))throw new Tt(8);if(16384==(61440&h.node.mode))throw new Tt(31);if(!h.m.write)throw new Tt(28);h.seekable&&1024&h.flags&&Yt(h,0,2);var p=void 0!==u;if(p){if(!h.seekable)throw new Tt(70)}else u=h.position;var g=h.m.write(h,m,l,d,u,void 0);p||(h.position+=g);var f=g;if(0>f){var v=-1;break t}e+=f,void 0!==a&&(a+=f)}v=e}return x[n>>2]=v,0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},strftime_l:(t,e,i,n)=>((t,e,i,n)=>{function s(t,e,i){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=i[0]+t;return t}function a(t,e){return s(t,e,"0")}function o(t,e){function i(t){return 0>t?-1:0<t?1:0}var n;return 0===(n=i(t.getFullYear()-e.getFullYear()))&&0===(n=i(t.getMonth()-e.getMonth()))&&(n=i(t.getDate()-e.getDate())),n}function r(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.ca;for(t=new Date(new Date(t.da+1900,0,1).getTime());0<e;){var i=t.getMonth(),n=(yi(t.getFullYear())?Si:_i)[i];if(!(e>n-t.getDate())){t.setDate(t.getDate()+e);break}e-=n-t.getDate()+1,t.setDate(1),11>i?t.setMonth(i+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return i=new Date(t.getFullYear()+1,0,4),e=r(new Date(t.getFullYear(),0,4)),i=r(i),0>=o(e,t)?0>=o(i,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var h=C[n+40>>2];for(var l in n={wc:C[n>>2],vc:C[n+4>>2],Fa:C[n+8>>2],Sa:C[n+12>>2],Ga:C[n+16>>2],da:C[n+20>>2],R:C[n+24>>2],ca:C[n+28>>2],Rc:C[n+32>>2],uc:C[n+36>>2],xc:h&&h?st(E,h):""},i=i?st(E,i):"",h={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})i=i.replace(new RegExp(l,"g"),h[l]);var d="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),u="January February March April May June July August September October November December".split(" ");for(l in h={"%a":t=>d[t.R].substring(0,3),"%A":t=>d[t.R],"%b":t=>u[t.Ga].substring(0,3),"%B":t=>u[t.Ga],"%C":t=>a((t.da+1900)/100|0,2),"%d":t=>a(t.Sa,2),"%e":t=>s(t.Sa,2," "),"%g":t=>c(t).toString().substring(2),"%G":t=>c(t),"%H":t=>a(t.Fa,2),"%I":t=>(0==(t=t.Fa)?t=12:12<t&&(t-=12),a(t,2)),"%j":t=>{for(var e=0,i=0;i<=t.Ga-1;e+=(yi(t.da+1900)?Si:_i)[i++]);return a(t.Sa+e,3)},"%m":t=>a(t.Ga+1,2),"%M":t=>a(t.vc,2),"%n":()=>"\n","%p":t=>0<=t.Fa&&12>t.Fa?"AM":"PM","%S":t=>a(t.wc,2),"%t":()=>"\t","%u":t=>t.R||7,"%U":t=>a(Math.floor((t.ca+7-t.R)/7),2),"%V":t=>{var e=Math.floor((t.ca+7-(t.R+6)%7)/7);if(2>=(t.R+371-t.ca-2)%7&&e++,e)53==e&&(4==(i=(t.R+371-t.ca)%7)||3==i&&yi(t.da)||(e=1));else{e=52;var i=(t.R+7-t.ca-1)%7;(4==i||5==i&&yi(t.da%400-1))&&e++}return a(e,2)},"%w":t=>t.R,"%W":t=>a(Math.floor((t.ca+7-(t.R+6)%7)/7),2),"%y":t=>(t.da+1900).toString().substring(2),"%Y":t=>t.da+1900,"%z":t=>{var e=0<=(t=t.uc);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":t=>t.xc,"%%":()=>"%"},i=i.replace(/%%/g,"\0\0"),h)i.includes(l)&&(i=i.replace(new RegExp(l,"g"),h[l](n)));return(l=ct(i=i.replace(/\0\0/g,"%"),!1)).length>e?0:(I.set(l,t),l.length-1)})(t,e,i,n)};!function(){function t(t){if(_=t=t.exports,S=_.memory,B(),k=_.__indirect_function_table,O.unshift(_.__wasm_call_ctors),F--,s.monitorRunDependencies&&s.monitorRunDependencies(F),0==F&&(null!==j&&(clearInterval(j),j=null),U)){var e=U;U=null,e()}return t}var e={env:Ti,wasi_snapshot_preview1:Ti};if(F++,s.monitorRunDependencies&&s.monitorRunDependencies(F),s.instantiateWasm)try{return s.instantiateWasm(e,t)}catch(t){y("Module.instantiateWasm callback failed with error: "+t),i(t)}(function(t,e){var i=N;return b||"function"!=typeof WebAssembly.instantiateStreaming||G(i)||i.startsWith("file://")||"function"!=typeof fetch?Y(i,t,e):fetch(i,{credentials:"same-origin"}).then((n=>WebAssembly.instantiateStreaming(n,t).then(e,(function(n){return y("wasm streaming compile failed: "+n),y("falling back to ArrayBuffer instantiation"),Y(i,t,e)}))))})(e,(function(e){t(e.instance)})).catch(i)}();var Ci=t=>(Ci=_.free)(t),xi=t=>(xi=_.malloc)(t),Li=s._ma_device__on_notification_unlocked=t=>(Li=s._ma_device__on_notification_unlocked=_.ma_device__on_notification_unlocked)(t);s._ma_malloc_emscripten=(t,e)=>(s._ma_malloc_emscripten=_.ma_malloc_emscripten)(t,e),s._ma_free_emscripten=(t,e)=>(s._ma_free_emscripten=_.ma_free_emscripten)(t,e);var Pi,Di=s._ma_device_process_pcm_frames_capture__webaudio=(t,e,i)=>(Di=s._ma_device_process_pcm_frames_capture__webaudio=_.ma_device_process_pcm_frames_capture__webaudio)(t,e,i),Bi=s._ma_device_process_pcm_frames_playback__webaudio=(t,e,i)=>(Bi=s._ma_device_process_pcm_frames_playback__webaudio=_.ma_device_process_pcm_frames_playback__webaudio)(t,e,i),ki=()=>(ki=_.__errno_location)(),Mi=t=>(Mi=_.__getTypeName)(t);function Oi(){function t(){if(!Pi&&(Pi=!0,s.calledRun=!0,!D)){if(s.noFSInit||gt||(gt=!0,Xt(),s.stdin=s.stdin,s.stdout=s.stdout,s.stderr=s.stderr,s.stdin?$t("stdin",s.stdin):Gt("/dev/tty","/dev/stdin"),s.stdout?$t("stdout",null,s.stdout):Gt("/dev/tty","/dev/stdout"),s.stderr?$t("stderr",null,s.stderr):Gt("/dev/tty1","/dev/stderr"),Vt("/dev/stdin",0),Vt("/dev/stdout",1),Vt("/dev/stderr",1)),At=!1,q(O),e(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),s.postRun)for("function"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var t=s.postRun.shift();z.unshift(t)}q(z)}}if(!(0<F)){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)R();q(M),0<F||(s.setStatus?(s.setStatus("Running..."),setTimeout((function(){setTimeout((function(){s.setStatus("")}),1),t()}),1)):t())}}if(s.__embind_initialize_bindings=()=>(s.__embind_initialize_bindings=_._embind_initialize_bindings)(),s.dynCall_iiji=(t,e,i,n,a)=>(s.dynCall_iiji=_.dynCall_iiji)(t,e,i,n,a),s.dynCall_jiji=(t,e,i,n,a)=>(s.dynCall_jiji=_.dynCall_jiji)(t,e,i,n,a),s.dynCall_iiiji=(t,e,i,n,a,o)=>(s.dynCall_iiiji=_.dynCall_iiiji)(t,e,i,n,a,o),s.dynCall_iij=(t,e,i,n)=>(s.dynCall_iij=_.dynCall_iij)(t,e,i,n),s.dynCall_jii=(t,e,i)=>(s.dynCall_jii=_.dynCall_jii)(t,e,i),s.dynCall_viijii=(t,e,i,n,a,o,r)=>(s.dynCall_viijii=_.dynCall_viijii)(t,e,i,n,a,o,r),s.dynCall_iiiiij=(t,e,i,n,a,o,r)=>(s.dynCall_iiiiij=_.dynCall_iiiiij)(t,e,i,n,a,o,r),s.dynCall_iiiiijj=(t,e,i,n,a,o,r,c,h)=>(s.dynCall_iiiiijj=_.dynCall_iiiiijj)(t,e,i,n,a,o,r,c,h),s.dynCall_iiiiiijj=(t,e,i,n,a,o,r,c,h,l)=>(s.dynCall_iiiiiijj=_.dynCall_iiiiiijj)(t,e,i,n,a,o,r,c,h,l),U=function t(){Pi||Oi(),Pi||(U=t)},s.preInit)for("function"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Oi(),t.ready});const a=s},t=>{t.exports=JSON.parse('{"name":"@rive-app/canvas","version":"2.21.5","description":"Rive\'s canvas based web api.","main":"rive.js","homepage":"https://rive.app","repository":{"type":"git","url":"https://github.com/rive-app/rive-wasm/tree/master/js"},"keywords":["rive","animation"],"author":"Rive","contributors":["Luigi Rosso <luigi@rive.app> (https://rive.app)","Maxwell Talbot <max@rive.app> (https://rive.app)","Arthur Vivian <arthur@rive.app> (https://rive.app)","Umberto Sonnino <umberto@rive.app> (https://rive.app)","Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)"],"license":"MIT","files":["rive.js","rive.js.map","rive.wasm","rive_fallback.wasm","rive.d.ts","rive_advanced.mjs.d.ts"],"typings":"rive.d.ts","dependencies":{},"browser":{"fs":false,"path":false}}')},(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>n.Animation});var n=i(4)},(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>n});var n=function(){function t(t,e,i,n){this.animation=t,this.artboard=e,this.playing=n,this.loopCount=0,this.scrubTo=null,this.instance=new i.LinearAnimationInstance(t,e)}return Object.defineProperty(t.prototype,"name",{get:function(){return this.animation.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"time",{get:function(){return this.instance.time},set:function(t){this.instance.time=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loopValue",{get:function(){return this.animation.loopValue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"needsScrub",{get:function(){return null!==this.scrubTo},enumerable:!1,configurable:!0}),t.prototype.advance=function(t){null===this.scrubTo?this.instance.advance(t):(this.instance.time=0,this.instance.advance(this.scrubTo),this.scrubTo=null)},t.prototype.apply=function(t){this.instance.apply(t)},t.prototype.cleanup=function(){this.instance.delete()},t}()},(t,e,i)=>{i.r(e),i.d(e,{BLANK_URL:()=>s.BLANK_URL,registerTouchInteractions:()=>n.registerTouchInteractions,sanitizeUrl:()=>s.sanitizeUrl});var n=i(6),s=i(7)},(t,e,i)=>{i.r(e),i.d(e,{registerTouchInteractions:()=>n});var n=function(t){var e=t.canvas,i=t.artboard,n=t.stateMachines,s=void 0===n?[]:n,a=t.renderer,o=t.rive,r=t.fit,c=t.alignment,h=t.isTouchScrollEnabled,l=void 0!==h&&h;if(!(e&&s.length&&a&&o&&i&&"undefined"!=typeof window))return null;var d=null,u=!1,m=function(t){if(u&&t instanceof MouseEvent)"mouseup"==t.type&&(u=!1);else{u=l&&"touchend"===t.type&&"touchstart"===d,d=t.type;var e=t.currentTarget.getBoundingClientRect(),n=function(t,e){var i,n;return["touchstart","touchmove"].indexOf(t.type)>-1&&(null===(i=t.touches)||void 0===i?void 0:i.length)?(e||t.preventDefault(),{clientX:t.touches[0].clientX,clientY:t.touches[0].clientY}):"touchend"===t.type&&(null===(n=t.changedTouches)||void 0===n?void 0:n.length)?{clientX:t.changedTouches[0].clientX,clientY:t.changedTouches[0].clientY}:{clientX:t.clientX,clientY:t.clientY}}(t,l),a=n.clientX,h=n.clientY;if(a||h){var m=a-e.left,p=h-e.top,g=o.computeAlignment(r,c,{minX:0,minY:0,maxX:e.width,maxY:e.height},i.bounds),f=new o.Mat2D;g.invert(f);var v=new o.Vec2D(m,p),b=o.mapXY(f,v),w=b.x(),y=b.y();switch(b.delete(),f.delete(),v.delete(),g.delete(),t.type){case"mouseout":for(var S=0,_=s;S<_.length;S++)_[S].pointerMove(w<0?w-1e4:w+1e4,y<0?y-1e4:y+1e4);break;case"touchmove":case"mouseover":case"mousemove":for(var I=0,E=s;I<E.length;I++)E[I].pointerMove(w,y);break;case"touchstart":case"mousedown":for(var A=0,T=s;A<T.length;A++)T[A].pointerDown(w,y);break;case"touchend":case"mouseup":for(var C=0,x=s;C<x.length;C++)x[C].pointerUp(w,y)}}}}.bind(void 0);return e.addEventListener("mouseover",m),e.addEventListener("mouseout",m),e.addEventListener("mousemove",m),e.addEventListener("mousedown",m),e.addEventListener("mouseup",m),e.addEventListener("touchmove",m,{passive:l}),e.addEventListener("touchstart",m,{passive:l}),e.addEventListener("touchend",m),function(){e.removeEventListener("mouseover",m),e.removeEventListener("mouseout",m),e.removeEventListener("mousemove",m),e.removeEventListener("mousedown",m),e.removeEventListener("mouseup",m),e.removeEventListener("touchmove",m),e.removeEventListener("touchstart",m),e.removeEventListener("touchend",m)}}},(t,e,i)=>{i.r(e),i.d(e,{BLANK_URL:()=>h,sanitizeUrl:()=>l});var n=/^([^\w]*)(javascript|data|vbscript)/im,s=/&#(\w+)(^\w|;)?/g,a=/&(newline|tab);/gi,o=/[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim,r=/^.+(:|&colon;)/gim,c=[".","/"],h="about:blank";function l(t){if(!t)return h;var e,i=(e=t,e.replace(o,"").replace(s,(function(t,e){return String.fromCharCode(e)}))).replace(a,"").replace(o,"").trim();if(!i)return h;if(function(t){return c.indexOf(t[0])>-1}(i))return i;var l=i.match(r);if(!l)return i;var d=l[0];return n.test(d)?h:i}}],e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{i.r(n),i.d(n,{Alignment:()=>s,EventType:()=>v,Fit:()=>e,Layout:()=>m,LoopType:()=>b,Rive:()=>P,RiveEventType:()=>g,RiveFile:()=>L,RuntimeLoader:()=>p,StateMachineInput:()=>f,StateMachineInputType:()=>u,Testing:()=>k,decodeAudio:()=>M,decodeFont:()=>z,decodeImage:()=>O});var t,e,s,a=i(1),o=i(2),r=i(3),c=i(5),h=(t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)},function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}),l=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function o(t){try{c(n.next(t))}catch(t){a(t)}}function r(t){try{c(n.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,r)}c((n=n.apply(t,e||[])).next())}))},d=function(t,e){var i,n,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(r){return function(c){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;a&&(a=0,r[0]&&(o=0)),o;)try{if(i=1,n&&(s=2&r[0]?n.return:r[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,r[1])).done)return s;switch(n=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){o.label=r[1];break}if(6===r[0]&&o.label<s[1]){o.label=s[1],s=r;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(r);break}s[2]&&o.ops.pop(),o.trys.pop();continue}r=e.call(t,o)}catch(t){r=[6,t],n=0}finally{i=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,c])}}};!function(t){t.Cover="cover",t.Contain="contain",t.Fill="fill",t.FitWidth="fitWidth",t.FitHeight="fitHeight",t.None="none",t.ScaleDown="scaleDown"}(e||(e={})),function(t){t.Center="center",t.TopLeft="topLeft",t.TopCenter="topCenter",t.TopRight="topRight",t.CenterLeft="centerLeft",t.CenterRight="centerRight",t.BottomLeft="bottomLeft",t.BottomCenter="bottomCenter",t.BottomRight="bottomRight"}(s||(s={}));var u,m=function(){function t(t){var i,n,a,o,r,c;this.fit=null!==(i=null==t?void 0:t.fit)&&void 0!==i?i:e.Contain,this.alignment=null!==(n=null==t?void 0:t.alignment)&&void 0!==n?n:s.Center,this.minX=null!==(a=null==t?void 0:t.minX)&&void 0!==a?a:0,this.minY=null!==(o=null==t?void 0:t.minY)&&void 0!==o?o:0,this.maxX=null!==(r=null==t?void 0:t.maxX)&&void 0!==r?r:0,this.maxY=null!==(c=null==t?void 0:t.maxY)&&void 0!==c?c:0}return t.new=function(e){var i=e.fit,n=e.alignment,s=e.minX,a=e.minY,o=e.maxX,r=e.maxY;return console.warn("This function is deprecated: please use `new Layout({})` instead"),new t({fit:i,alignment:n,minX:s,minY:a,maxX:o,maxY:r})},t.prototype.copyWith=function(e){var i=e.fit,n=e.alignment,s=e.minX,a=e.minY,o=e.maxX,r=e.maxY;return new t({fit:null!=i?i:this.fit,alignment:null!=n?n:this.alignment,minX:null!=s?s:this.minX,minY:null!=a?a:this.minY,maxX:null!=o?o:this.maxX,maxY:null!=r?r:this.maxY})},t.prototype.runtimeFit=function(t){return this.cachedRuntimeFit?this.cachedRuntimeFit:(i=this.fit===e.Cover?t.Fit.cover:this.fit===e.Contain?t.Fit.contain:this.fit===e.Fill?t.Fit.fill:this.fit===e.FitWidth?t.Fit.fitWidth:this.fit===e.FitHeight?t.Fit.fitHeight:this.fit===e.ScaleDown?t.Fit.scaleDown:t.Fit.none,this.cachedRuntimeFit=i,i);var i},t.prototype.runtimeAlignment=function(t){return this.cachedRuntimeAlignment?this.cachedRuntimeAlignment:(e=this.alignment===s.TopLeft?t.Alignment.topLeft:this.alignment===s.TopCenter?t.Alignment.topCenter:this.alignment===s.TopRight?t.Alignment.topRight:this.alignment===s.CenterLeft?t.Alignment.centerLeft:this.alignment===s.CenterRight?t.Alignment.centerRight:this.alignment===s.BottomLeft?t.Alignment.bottomLeft:this.alignment===s.BottomCenter?t.Alignment.bottomCenter:this.alignment===s.BottomRight?t.Alignment.bottomRight:t.Alignment.center,this.cachedRuntimeAlignment=e,e);var e},t}(),p=function(){function t(){}return t.loadRuntime=function(){a.default({locateFile:function(){return t.wasmURL}}).then((function(e){var i;for(t.runtime=e;t.callBackQueue.length>0;)null===(i=t.callBackQueue.shift())||void 0===i||i(t.runtime)})).catch((function(){var e="https://cdn.jsdelivr.net/npm/".concat(o.name,"@").concat(o.version,"/rive_fallback.wasm");t.wasmURL.toLowerCase()!==e?(console.warn("Failed to load WASM from ".concat(t.wasmURL,", trying jsdelivr as a backup")),t.setWasmUrl(e),t.loadRuntime()):console.error("Could not load Rive WASM file from unpkg or jsdelivr, network connection may be down, or         you may need to call set a new WASM source via RuntimeLoader.setWasmUrl() and call         RuntimeLoader.loadRuntime() again")}))},t.getInstance=function(e){t.isLoading||(t.isLoading=!0,t.loadRuntime()),t.runtime?e(t.runtime):t.callBackQueue.push(e)},t.awaitInstance=function(){return new Promise((function(e){return t.getInstance((function(t){return e(t)}))}))},t.setWasmUrl=function(e){t.wasmURL=e},t.isLoading=!1,t.callBackQueue=[],t.wasmURL="https://unpkg.com/".concat(o.name,"@").concat(o.version,"/rive.wasm"),t}();!function(t){t[t.Number=56]="Number",t[t.Trigger=58]="Trigger",t[t.Boolean=59]="Boolean"}(u||(u={}));var g,f=function(){function t(t,e){this.type=t,this.runtimeInput=e}return Object.defineProperty(t.prototype,"name",{get:function(){return this.runtimeInput.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.runtimeInput.value},set:function(t){this.runtimeInput.value=t},enumerable:!1,configurable:!0}),t.prototype.fire=function(){this.type===u.Trigger&&this.runtimeInput.fire()},t}();!function(t){t[t.General=128]="General",t[t.OpenUrl=131]="OpenUrl"}(g||(g={}));var v,b,w=function(){function t(t,e,i,n){this.stateMachine=t,this.playing=i,this.artboard=n,this.inputs=[],this.instance=new e.StateMachineInstance(t,n),this.initInputs(e)}return Object.defineProperty(t.prototype,"name",{get:function(){return this.stateMachine.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"statesChanged",{get:function(){for(var t=[],e=0;e<this.instance.stateChangedCount();e++)t.push(this.instance.stateChangedNameByIndex(e));return t},enumerable:!1,configurable:!0}),t.prototype.advance=function(t){this.instance.advance(t)},t.prototype.reportedEventCount=function(){return this.instance.reportedEventCount()},t.prototype.reportedEventAt=function(t){return this.instance.reportedEventAt(t)},t.prototype.initInputs=function(t){for(var e=0;e<this.instance.inputCount();e++){var i=this.instance.input(e);this.inputs.push(this.mapRuntimeInput(i,t))}},t.prototype.mapRuntimeInput=function(t,e){return t.type===e.SMIInput.bool?new f(u.Boolean,t.asBool()):t.type===e.SMIInput.number?new f(u.Number,t.asNumber()):t.type===e.SMIInput.trigger?new f(u.Trigger,t.asTrigger()):void 0},t.prototype.cleanup=function(){this.instance.delete()},t}(),y=function(){function t(t,e,i,n,s){void 0===n&&(n=[]),void 0===s&&(s=[]),this.runtime=t,this.artboard=e,this.eventManager=i,this.animations=n,this.stateMachines=s}return t.prototype.add=function(t,e,i){if(void 0===i&&(i=!0),0===(t=B(t)).length)this.animations.forEach((function(t){return t.playing=e})),this.stateMachines.forEach((function(t){return t.playing=e}));else for(var n=this.animations.map((function(t){return t.name})),s=this.stateMachines.map((function(t){return t.name})),a=0;a<t.length;a++){var o=n.indexOf(t[a]),c=s.indexOf(t[a]);if(o>=0||c>=0)o>=0?this.animations[o].playing=e:this.stateMachines[c].playing=e;else{var h=this.artboard.animationByName(t[a]);if(h){var l=new r.Animation(h,this.artboard,this.runtime,e);l.advance(0),l.apply(1),this.animations.push(l)}else{var d=this.artboard.stateMachineByName(t[a]);if(d){var u=new w(d,this.runtime,e,this.artboard);this.stateMachines.push(u)}}}}return i&&(e?this.eventManager.fire({type:v.Play,data:this.playing}):this.eventManager.fire({type:v.Pause,data:this.paused})),e?this.playing:this.paused},t.prototype.initLinearAnimations=function(t,e){for(var i=this.animations.map((function(t){return t.name})),n=0;n<t.length;n++){var s=i.indexOf(t[n]);if(s>=0)this.animations[s].playing=e;else{var a=this.artboard.animationByName(t[n]);if(a){var o=new r.Animation(a,this.artboard,this.runtime,e);o.advance(0),o.apply(1),this.animations.push(o)}}}},t.prototype.initStateMachines=function(t,e){for(var i=this.stateMachines.map((function(t){return t.name})),n=0;n<t.length;n++){var s=i.indexOf(t[n]);if(s>=0)this.stateMachines[s].playing=e;else{var a=this.artboard.stateMachineByName(t[n]);if(a){var o=new w(a,this.runtime,e,this.artboard);this.stateMachines.push(o)}else this.initLinearAnimations([t[n]],e)}}},t.prototype.play=function(t){return this.add(t,!0)},t.prototype.pause=function(t){return this.add(t,!1)},t.prototype.scrub=function(t,e){var i=this.animations.filter((function(e){return t.includes(e.name)}));return i.forEach((function(t){return t.scrubTo=e})),i.map((function(t){return t.name}))},Object.defineProperty(t.prototype,"playing",{get:function(){return this.animations.filter((function(t){return t.playing})).map((function(t){return t.name})).concat(this.stateMachines.filter((function(t){return t.playing})).map((function(t){return t.name})))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"paused",{get:function(){return this.animations.filter((function(t){return!t.playing})).map((function(t){return t.name})).concat(this.stateMachines.filter((function(t){return!t.playing})).map((function(t){return t.name})))},enumerable:!1,configurable:!0}),t.prototype.stop=function(t){var e=this,i=[];if(0===(t=B(t)).length)i=this.animations.map((function(t){return t.name})).concat(this.stateMachines.map((function(t){return t.name}))),this.animations.forEach((function(t){return t.cleanup()})),this.stateMachines.forEach((function(t){return t.cleanup()})),this.animations.splice(0,this.animations.length),this.stateMachines.splice(0,this.stateMachines.length);else{var n=this.animations.filter((function(e){return t.includes(e.name)}));n.forEach((function(t){t.cleanup(),e.animations.splice(e.animations.indexOf(t),1)}));var s=this.stateMachines.filter((function(e){return t.includes(e.name)}));s.forEach((function(t){t.cleanup(),e.stateMachines.splice(e.stateMachines.indexOf(t),1)})),i=n.map((function(t){return t.name})).concat(s.map((function(t){return t.name})))}return this.eventManager.fire({type:v.Stop,data:i}),i},Object.defineProperty(t.prototype,"isPlaying",{get:function(){return this.animations.reduce((function(t,e){return t||e.playing}),!1)||this.stateMachines.reduce((function(t,e){return t||e.playing}),!1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPaused",{get:function(){return!this.isPlaying&&(this.animations.length>0||this.stateMachines.length>0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return 0===this.animations.length&&0===this.stateMachines.length},enumerable:!1,configurable:!0}),t.prototype.atLeastOne=function(t,e){var i;return void 0===e&&(e=!0),0===this.animations.length&&0===this.stateMachines.length&&(this.artboard.animationCount()>0?this.add([i=this.artboard.animationByIndex(0).name],t,e):this.artboard.stateMachineCount()>0&&this.add([i=this.artboard.stateMachineByIndex(0).name],t,e)),i},t.prototype.handleLooping=function(){for(var t=0,e=this.animations.filter((function(t){return t.playing}));t<e.length;t++){var i=e[t];0===i.loopValue&&i.loopCount?(i.loopCount=0,this.stop(i.name)):1===i.loopValue&&i.loopCount?(this.eventManager.fire({type:v.Loop,data:{animation:i.name,type:b.Loop}}),i.loopCount=0):2===i.loopValue&&i.loopCount>1&&(this.eventManager.fire({type:v.Loop,data:{animation:i.name,type:b.PingPong}}),i.loopCount=0)}},t.prototype.handleStateChanges=function(){for(var t=[],e=0,i=this.stateMachines.filter((function(t){return t.playing}));e<i.length;e++){var n=i[e];t.push.apply(t,n.statesChanged)}t.length>0&&this.eventManager.fire({type:v.StateChange,data:t})},t.prototype.handleAdvancing=function(t){this.eventManager.fire({type:v.Advance,data:t})},t}();!function(t){t.Load="load",t.LoadError="loaderror",t.Play="play",t.Pause="pause",t.Stop="stop",t.Loop="loop",t.Draw="draw",t.Advance="advance",t.StateChange="statechange",t.RiveEvent="riveevent",t.AudioStatusChange="audiostatuschange"}(v||(v={})),function(t){t.OneShot="oneshot",t.Loop="loop",t.PingPong="pingpong"}(b||(b={}));var S,_=function(){function t(t){void 0===t&&(t=[]),this.listeners=t}return t.prototype.getListeners=function(t){return this.listeners.filter((function(e){return e.type===t}))},t.prototype.add=function(t){this.listeners.includes(t)||this.listeners.push(t)},t.prototype.remove=function(t){for(var e=0;e<this.listeners.length;e++){var i=this.listeners[e];if(i.type===t.type&&i.callback===t.callback){this.listeners.splice(e,1);break}}},t.prototype.removeAll=function(t){var e=this;t?this.listeners.filter((function(e){return e.type===t})).forEach((function(t){return e.remove(t)})):this.listeners.splice(0,this.listeners.length)},t.prototype.fire=function(t){this.getListeners(t.type).forEach((function(e){return e.callback(t)}))},t}(),I=function(){function t(t){this.eventManager=t,this.queue=[]}return t.prototype.add=function(t){this.queue.push(t)},t.prototype.process=function(){for(;this.queue.length>0;){var t=this.queue.shift();(null==t?void 0:t.action)&&t.action(),(null==t?void 0:t.event)&&this.eventManager.fire(t.event)}},t}();!function(t){t[t.AVAILABLE=0]="AVAILABLE",t[t.UNAVAILABLE=1]="UNAVAILABLE"}(S||(S={}));var E=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._started=!1,e._enabled=!1,e._status=S.UNAVAILABLE,e}return h(e,t),e.prototype.delay=function(t){return l(this,void 0,void 0,(function(){return d(this,(function(e){return[2,new Promise((function(e){return setTimeout(e,t)}))]}))}))},e.prototype.timeout=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){return[2,new Promise((function(t,e){return setTimeout(e,50)}))]}))}))},e.prototype.reportToListeners=function(){this.fire({type:v.AudioStatusChange}),this.removeAll()},e.prototype.enableAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){return this._enabled||(this._enabled=!0,this._status=S.AVAILABLE,this.reportToListeners()),[2]}))}))},e.prototype.testAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:if(this._status!==S.UNAVAILABLE||null===this._audioContext)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,Promise.race([this._audioContext.resume(),this.timeout()])];case 2:return t.sent(),this.enableAudio(),[3,4];case 3:return t.sent(),[3,4];case 4:return[2]}}))}))},e.prototype._establishAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return this._started?[3,5]:(this._started=!0,"undefined"!=typeof window?[3,1]:(this.enableAudio(),[3,5]));case 1:this._audioContext=new AudioContext,this.listenForUserAction(),t.label=2;case 2:return this._status!==S.UNAVAILABLE?[3,5]:[4,this.testAudio()];case 3:return t.sent(),[4,this.delay(1e3)];case 4:return t.sent(),[3,2];case 5:return[2]}}))}))},e.prototype.listenForUserAction=function(){var t=this;document.addEventListener("pointerdown",(function(){return l(t,void 0,void 0,(function(){return d(this,(function(t){return this.enableAudio(),[2]}))}))}),{once:!0})},e.prototype.establishAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){return this._establishAudio(),[2]}))}))},Object.defineProperty(e.prototype,"systemVolume",{get:function(){return this._status===S.UNAVAILABLE?(this.testAudio(),0):1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!1,configurable:!0}),e}(_),A=new E,T=function(){function t(){}return t.prototype.observe=function(){},t.prototype.unobserve=function(){},t.prototype.disconnect=function(){},t}(),C=globalThis.ResizeObserver||T,x=new(function(){function t(){var t=this;this._elementsMap=new Map,this._onObservedEntry=function(e){var i=t._elementsMap.get(e.target);null!==i?i.onResize(0==e.target.clientWidth||0==e.target.clientHeight):t._resizeObserver.unobserve(e.target)},this._onObserved=function(e){e.forEach(t._onObservedEntry)},this._resizeObserver=new C(this._onObserved)}return t.prototype.add=function(t,e){var i={onResize:e,element:t};return this._elementsMap.set(t,i),this._resizeObserver.observe(t),i},t.prototype.remove=function(t){this._resizeObserver.unobserve(t.element),this._elementsMap.delete(t.element)},t}()),L=function(){function t(t){this.enableRiveAssetCDN=!0,this.referenceCount=0,this.src=t.src,this.buffer=t.buffer,t.assetLoader&&(this.assetLoader=t.assetLoader),this.enableRiveAssetCDN="boolean"!=typeof t.enableRiveAssetCDN||t.enableRiveAssetCDN,this.eventManager=new _,t.onLoad&&this.on(v.Load,t.onLoad),t.onLoadError&&this.on(v.LoadError,t.onLoadError)}return t.prototype.initData=function(){return l(this,void 0,void 0,(function(){var e,i,n;return d(this,(function(s){switch(s.label){case 0:return this.src?(e=this,[4,D(this.src)]):[3,2];case 1:e.buffer=s.sent(),s.label=2;case 2:return this.assetLoader&&(i=new this.runtime.CustomFileAssetLoader({loadContents:this.assetLoader})),n=this,[4,this.runtime.load(new Uint8Array(this.buffer),i,this.enableRiveAssetCDN)];case 3:if(n.file=s.sent(),null===this.file)throw this.eventManager.fire({type:v.LoadError,data:null}),new Error(t.fileLoadErrorMessage);return this.eventManager.fire({type:v.Load,data:this}),[2]}}))}))},t.prototype.init=function(){return l(this,void 0,void 0,(function(){var e;return d(this,(function(i){switch(i.label){case 0:if(!this.src&&!this.buffer)throw new Error(t.missingErrorMessage);return e=this,[4,p.awaitInstance()];case 1:return e.runtime=i.sent(),[4,this.initData()];case 2:return i.sent(),[2]}}))}))},t.prototype.on=function(t,e){this.eventManager.add({type:t,callback:e})},t.prototype.off=function(t,e){this.eventManager.remove({type:t,callback:e})},t.prototype.cleanup=function(){var t;this.referenceCount-=1,this.referenceCount<=0&&(this.removeAllRiveEventListeners(),null===(t=this.file)||void 0===t||t.delete())},t.prototype.removeAllRiveEventListeners=function(t){this.eventManager.removeAll(t)},t.prototype.getInstance=function(){if(null!==this.file)return this.referenceCount+=1,this.file},t.missingErrorMessage="Rive source file or data buffer required",t.fileLoadErrorMessage="The file failed to load",t}(),P=function(){function t(t){var e,i=this;this.loaded=!1,this.readyForPlaying=!1,this.artboard=null,this.eventCleanup=null,this.shouldDisableRiveListeners=!1,this.automaticallyHandleEvents=!1,this.enableRiveAssetCDN=!0,this._volume=1,this._hasZeroSize=!1,this.durations=[],this.frameTimes=[],this.frameCount=0,this.isTouchScrollEnabled=!1,this.onCanvasResize=function(t){i._hasZeroSize=t,i._layout.maxX&&i._layout.maxY||i.resizeToCanvas()},this.renderSecondTimer=0,this.canvas=t.canvas,t.canvas.constructor===HTMLCanvasElement&&(this._observed=x.add(this.canvas,this.onCanvasResize)),this.src=t.src,this.buffer=t.buffer,this.riveFile=t.riveFile,this.layout=null!==(e=t.layout)&&void 0!==e?e:new m,this.shouldDisableRiveListeners=!!t.shouldDisableRiveListeners,this.isTouchScrollEnabled=!!t.isTouchScrollEnabled,this.automaticallyHandleEvents=!!t.automaticallyHandleEvents,this.enableRiveAssetCDN=void 0===t.enableRiveAssetCDN||t.enableRiveAssetCDN,this.eventManager=new _,t.onLoad&&this.on(v.Load,t.onLoad),t.onLoadError&&this.on(v.LoadError,t.onLoadError),t.onPlay&&this.on(v.Play,t.onPlay),t.onPause&&this.on(v.Pause,t.onPause),t.onStop&&this.on(v.Stop,t.onStop),t.onLoop&&this.on(v.Loop,t.onLoop),t.onStateChange&&this.on(v.StateChange,t.onStateChange),t.onAdvance&&this.on(v.Advance,t.onAdvance),t.onload&&!t.onLoad&&this.on(v.Load,t.onload),t.onloaderror&&!t.onLoadError&&this.on(v.LoadError,t.onloaderror),t.onplay&&!t.onPlay&&this.on(v.Play,t.onplay),t.onpause&&!t.onPause&&this.on(v.Pause,t.onpause),t.onstop&&!t.onStop&&this.on(v.Stop,t.onstop),t.onloop&&!t.onLoop&&this.on(v.Loop,t.onloop),t.onstatechange&&!t.onStateChange&&this.on(v.StateChange,t.onstatechange),t.assetLoader&&(this.assetLoader=t.assetLoader),this.taskQueue=new I(this.eventManager),this.init({src:this.src,buffer:this.buffer,riveFile:this.riveFile,autoplay:t.autoplay,animations:t.animations,stateMachines:t.stateMachines,artboard:t.artboard,useOffscreenRenderer:t.useOffscreenRenderer})}return t.new=function(e){return console.warn("This function is deprecated: please use `new Rive({})` instead"),new t(e)},t.prototype.onSystemAudioChanged=function(){this.volume=this._volume},t.prototype.init=function(e){var i=this,n=e.src,s=e.buffer,a=e.riveFile,o=e.animations,r=e.stateMachines,c=e.artboard,h=e.autoplay,l=void 0!==h&&h,d=e.useOffscreenRenderer,u=void 0!==d&&d;if(this.src=n,this.buffer=s,this.riveFile=a,!this.src&&!this.buffer&&!this.riveFile)throw new Error(t.missingErrorMessage);var m=B(o),g=B(r);this.loaded=!1,this.readyForPlaying=!1,p.awaitInstance().then((function(t){i.runtime=t,i.renderer=i.runtime.makeRenderer(i.canvas,u),i.canvas.width||i.canvas.height||i.resizeDrawingSurfaceToCanvas(),i.initData(c,m,g,l).then((function(){return i.setupRiveListeners()})).catch((function(t){console.error(t)}))})).catch((function(t){console.error(t)}))},t.prototype.setupRiveListeners=function(t){var e=this;if(!this.shouldDisableRiveListeners){var i=(this.animator.stateMachines||[]).filter((function(t){return t.playing&&e.runtime.hasListeners(t.instance)})).map((function(t){return t.instance})),n=this.isTouchScrollEnabled;t&&"isTouchScrollEnabled"in t&&(n=t.isTouchScrollEnabled),this.eventCleanup=(0,c.registerTouchInteractions)({canvas:this.canvas,artboard:this.artboard,stateMachines:i,renderer:this.renderer,rive:this.runtime,fit:this._layout.runtimeFit(this.runtime),alignment:this._layout.runtimeAlignment(this.runtime),isTouchScrollEnabled:n})}},t.prototype.removeRiveListeners=function(){this.eventCleanup&&this.eventCleanup()},t.prototype.initializeAudio=function(){var t,e=this;A.status==S.UNAVAILABLE&&(null===(t=this.artboard)||void 0===t?void 0:t.hasAudio)&&(A.add({type:v.AudioStatusChange,callback:function(){return e.onSystemAudioChanged()}}),A.establishAudio())},t.prototype.initData=function(t,e,i,n){var s;return l(this,void 0,void 0,(function(){var a;return d(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),null!=this.riveFile?[3,2]:(this.riveFile=new L({src:this.src,buffer:this.buffer,enableRiveAssetCDN:this.enableRiveAssetCDN,assetLoader:this.assetLoader}),[4,this.riveFile.init()]);case 1:o.sent(),o.label=2;case 2:return this.file=this.riveFile.getInstance(),this.initArtboard(t,e,i,n),this.initializeAudio(),this.loaded=!0,this.eventManager.fire({type:v.Load,data:null!==(s=this.src)&&void 0!==s?s:"buffer"}),this.readyForPlaying=!0,this.taskQueue.process(),this.drawFrame(),[2,Promise.resolve()];case 3:return o.sent(),a="Problem loading file; may be corrupt!",console.warn(a),this.eventManager.fire({type:v.LoadError,data:a}),[2,Promise.reject(a)];case 4:return[2]}}))}))},t.prototype.initArtboard=function(t,e,i,n){if(this.file){var s,a=t?this.file.artboardByName(t):this.file.defaultArtboard();if(!a){var o="Invalid artboard name or no default artboard";return console.warn(o),void this.eventManager.fire({type:v.LoadError,data:o})}if(this.artboard=a,a.volume=this._volume*A.systemVolume,this.artboard.animationCount()<1)throw o="Artboard has no animations",this.eventManager.fire({type:v.LoadError,data:o}),o;this.animator=new y(this.runtime,this.artboard,this.eventManager),e.length>0||i.length>0?(s=e.concat(i),this.animator.initLinearAnimations(e,n),this.animator.initStateMachines(i,n)):s=[this.animator.atLeastOne(n,!1)],this.taskQueue.add({event:{type:n?v.Play:v.Pause,data:s}})}},t.prototype.drawFrame=function(){this.startRendering()},t.prototype.draw=function(t,e){this.frameRequestId=null;var i=performance.now();this.lastRenderTime||(this.lastRenderTime=t),this.renderSecondTimer+=t-this.lastRenderTime,this.renderSecondTimer>5e3&&(this.renderSecondTimer=0,null==e||e());var n=(t-this.lastRenderTime)/1e3;this.lastRenderTime=t;for(var s=0,a=this.animator.animations.filter((function(t){return t.playing||t.needsScrub})).sort((function(t){return t.needsScrub?-1:1}));s<a.length;s++){var o=a[s];o.advance(n),o.instance.didLoop&&(o.loopCount+=1),o.apply(1)}for(var r=0,h=this.animator.stateMachines.filter((function(t){return t.playing}));r<h.length;r++){var l=h[r],d=l.reportedEventCount();if(d)for(var u=0;u<d;u++){var m=l.reportedEventAt(u);if(m)if(m.type===g.OpenUrl){if(this.eventManager.fire({type:v.RiveEvent,data:m}),this.automaticallyHandleEvents){var p=document.createElement("a"),f=m,b=f.url,w=f.target,y=(0,c.sanitizeUrl)(b);b&&p.setAttribute("href",y),w&&p.setAttribute("target",w),y&&y!==c.BLANK_URL&&p.click()}}else this.eventManager.fire({type:v.RiveEvent,data:m})}l.advance(n)}this.artboard.advance(n);var S=this.renderer;S.clear(),S.save(),this.alignRenderer(),this._hasZeroSize||this.artboard.draw(S),S.restore(),S.flush(),this.animator.handleLooping(),this.animator.handleStateChanges(),this.animator.handleAdvancing(n),this.frameCount++;var _=performance.now();for(this.frameTimes.push(_),this.durations.push(_-i);this.frameTimes[0]<=_-1e3;)this.frameTimes.shift(),this.durations.shift();this.animator.isPlaying?this.startRendering():(this.animator.isPaused||this.animator.isStopped)&&(this.lastRenderTime=0)},t.prototype.alignRenderer=function(){var t=this,e=t.renderer,i=t.runtime,n=t._layout,s=t.artboard;e.align(n.runtimeFit(i),n.runtimeAlignment(i),{minX:n.minX,minY:n.minY,maxX:n.maxX,maxY:n.maxY},s.bounds)},Object.defineProperty(t.prototype,"fps",{get:function(){return this.durations.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"frameTime",{get:function(){return 0===this.durations.length?0:(this.durations.reduce((function(t,e){return t+e}),0)/this.durations.length).toFixed(4)},enumerable:!1,configurable:!0}),t.prototype.cleanup=function(){var t;this.stopRendering(),this.cleanupInstances(),null!==this._observed&&x.remove(this._observed),null===(t=this.riveFile)||void 0===t||t.cleanup(),this.riveFile=null,this.file=null},t.prototype.deleteRiveRenderer=function(){var t;null===(t=this.renderer)||void 0===t||t.delete(),this.renderer=null},t.prototype.cleanupInstances=function(){null!==this.eventCleanup&&this.eventCleanup(),this.stop(),this.artboard&&(this.artboard.delete(),this.artboard=null)},t.prototype.retrieveTextRun=function(t){var e;if(t)if(this.artboard){var i=this.artboard.textRun(t);if(i)return i;console.warn("Could not access a text run with name '".concat(t,"' in the '").concat(null===(e=this.artboard)||void 0===e?void 0:e.name,"' Artboard. Note that you must rename a text run node in the Rive editor to make it queryable at runtime."))}else console.warn("Tried to access text run, but the Artboard is null");else console.warn("No text run name provided")},t.prototype.getTextRunValue=function(t){var e=this.retrieveTextRun(t);return e?e.text:void 0},t.prototype.setTextRunValue=function(t,e){var i=this.retrieveTextRun(t);i&&(i.text=e)},t.prototype.play=function(t,e){var i=this;t=B(t),this.readyForPlaying?(this.animator.play(t),this.eventCleanup&&this.eventCleanup(),this.setupRiveListeners(),this.startRendering()):this.taskQueue.add({action:function(){return i.play(t,e)}})},t.prototype.pause=function(t){var e=this;t=B(t),this.readyForPlaying?(this.eventCleanup&&this.eventCleanup(),this.animator.pause(t)):this.taskQueue.add({action:function(){return e.pause(t)}})},t.prototype.scrub=function(t,e){var i=this;t=B(t),this.readyForPlaying?(this.animator.scrub(t,e||0),this.drawFrame()):this.taskQueue.add({action:function(){return i.scrub(t,e)}})},t.prototype.stop=function(t){var e=this;t=B(t),this.readyForPlaying?(this.animator.stop(t),this.eventCleanup&&this.eventCleanup()):this.taskQueue.add({action:function(){return e.stop(t)}})},t.prototype.reset=function(t){var e,i=null==t?void 0:t.artboard,n=B(null==t?void 0:t.animations),s=B(null==t?void 0:t.stateMachines),a=null!==(e=null==t?void 0:t.autoplay)&&void 0!==e&&e;this.cleanupInstances(),this.initArtboard(i,n,s,a),this.taskQueue.process()},t.prototype.load=function(t){this.file=null,this.stop(),this.init(t)},Object.defineProperty(t.prototype,"layout",{get:function(){return this._layout},set:function(t){this._layout=t,t.maxX&&t.maxY||this.resizeToCanvas(),this.loaded&&!this.animator.isPlaying&&this.drawFrame()},enumerable:!1,configurable:!0}),t.prototype.resizeToCanvas=function(){this._layout=this.layout.copyWith({minX:0,minY:0,maxX:this.canvas.width,maxY:this.canvas.height})},t.prototype.resizeDrawingSurfaceToCanvas=function(t){if(this.canvas instanceof HTMLCanvasElement&&window){var e=this.canvas.getBoundingClientRect(),i=e.width,n=e.height,s=t||window.devicePixelRatio||1;this.canvas.width=s*i,this.canvas.height=s*n,this.startRendering(),this.resizeToCanvas()}},Object.defineProperty(t.prototype,"source",{get:function(){return this.src},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"activeArtboard",{get:function(){return this.artboard?this.artboard.name:""},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"animationNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var t=[],e=0;e<this.artboard.animationCount();e++)t.push(this.artboard.animationByIndex(e).name);return t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateMachineNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var t=[],e=0;e<this.artboard.stateMachineCount();e++)t.push(this.artboard.stateMachineByIndex(e).name);return t},enumerable:!1,configurable:!0}),t.prototype.stateMachineInputs=function(t){if(this.loaded){var e=this.animator.stateMachines.find((function(e){return e.name===t}));return null==e?void 0:e.inputs}},t.prototype.retrieveInputAtPath=function(t,e){if(t)if(this.artboard){var i=this.artboard.inputByPath(t,e);if(i)return i;console.warn("Could not access an input with name: '".concat(t,"', at path:'").concat(e,"'"))}else console.warn("Tried to access input: '".concat(t,"', at path: '").concat(e,"', but the Artboard is null"));else console.warn("No input name provided for path '".concat(e,"'"))},t.prototype.setBooleanStateAtPath=function(t,e,i){var n=this.retrieveInputAtPath(t,i);n&&(n.type===u.Boolean?n.asBool().value=e:console.warn("Input with name: '".concat(t,"', at path:'").concat(i,"' is not a boolean")))},t.prototype.setNumberStateAtPath=function(t,e,i){var n=this.retrieveInputAtPath(t,i);n&&(n.type===u.Number?n.asNumber().value=e:console.warn("Input with name: '".concat(t,"', at path:'").concat(i,"' is not a number")))},t.prototype.fireStateAtPath=function(t,e){var i=this.retrieveInputAtPath(t,e);i&&(i.type===u.Trigger?i.asTrigger().fire():console.warn("Input with name: '".concat(t,"', at path:'").concat(e,"' is not a trigger")))},t.prototype.retrieveTextAtPath=function(t,e){if(t)if(e)if(this.artboard){var i=this.artboard.textByPath(t,e);if(i)return i;console.warn("Could not access text with name: '".concat(t,"', at path:'").concat(e,"'"))}else console.warn("Tried to access text: '".concat(t,"', at path: '").concat(e,"', but the Artboard is null"));else console.warn("No path provided for text '".concat(t,"'"));else console.warn("No text name provided for path '".concat(e,"'"))},t.prototype.getTextRunValueAtPath=function(t,e){var i=this.retrieveTextAtPath(t,e);if(i)return i.text;console.warn("Could not get text with name: '".concat(t,"', at path:'").concat(e,"'"))},t.prototype.setTextRunValueAtPath=function(t,e,i){var n=this.retrieveTextAtPath(t,i);n?n.text=e:console.warn("Could not set text with name: '".concat(t,"', at path:'").concat(i,"'"))},Object.defineProperty(t.prototype,"playingStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(t){return t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"playingAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(t){return t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pausedAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(t){return!t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pausedStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(t){return!t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPlaying",{get:function(){return this.animator.isPlaying},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPaused",{get:function(){return this.animator.isPaused},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return this.animator.isStopped},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bounds",{get:function(){return this.artboard?this.artboard.bounds:void 0},enumerable:!1,configurable:!0}),t.prototype.on=function(t,e){this.eventManager.add({type:t,callback:e})},t.prototype.off=function(t,e){this.eventManager.remove({type:t,callback:e})},t.prototype.unsubscribe=function(t,e){console.warn("This function is deprecated: please use `off()` instead."),this.off(t,e)},t.prototype.removeAllRiveEventListeners=function(t){this.eventManager.removeAll(t)},t.prototype.unsubscribeAll=function(t){console.warn("This function is deprecated: please use `removeAllRiveEventListeners()` instead."),this.removeAllRiveEventListeners(t)},t.prototype.stopRendering=function(){this.loaded&&this.frameRequestId&&(this.runtime.cancelAnimationFrame?this.runtime.cancelAnimationFrame(this.frameRequestId):cancelAnimationFrame(this.frameRequestId),this.frameRequestId=null)},t.prototype.startRendering=function(){this.loaded&&this.artboard&&!this.frameRequestId&&(this.runtime.requestAnimationFrame?this.frameRequestId=this.runtime.requestAnimationFrame(this.draw.bind(this)):this.frameRequestId=requestAnimationFrame(this.draw.bind(this)))},t.prototype.enableFPSCounter=function(t){this.runtime.enableFPSCounter(t)},t.prototype.disableFPSCounter=function(){this.runtime.disableFPSCounter()},Object.defineProperty(t.prototype,"contents",{get:function(){if(this.loaded){for(var t={artboards:[]},e=0;e<this.file.artboardCount();e++){for(var i=this.file.artboardByIndex(e),n={name:i.name,animations:[],stateMachines:[]},s=0;s<i.animationCount();s++){var a=i.animationByIndex(s);n.animations.push(a.name)}for(var o=0;o<i.stateMachineCount();o++){for(var r=i.stateMachineByIndex(o),c=r.name,h=new this.runtime.StateMachineInstance(r,i),l=[],d=0;d<h.inputCount();d++){var u=h.input(d);l.push({name:u.name,type:u.type})}n.stateMachines.push({name:c,inputs:l})}t.artboards.push(n)}return t}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"volume",{get:function(){return this.artboard&&this.artboard.volume!==this._volume&&(this._volume=this.artboard.volume),this._volume},set:function(t){this._volume=t,this.artboard&&(this.artboard.volume=t*A.systemVolume)},enumerable:!1,configurable:!0}),t.missingErrorMessage="Rive source file or data buffer required",t}(),D=function(t){return l(void 0,void 0,void 0,(function(){var e;return d(this,(function(i){switch(i.label){case 0:return e=new Request(t),[4,fetch(e)];case 1:return[4,i.sent().arrayBuffer()];case 2:return[2,i.sent()]}}))}))},B=function(t){return"string"==typeof t?[t]:t instanceof Array?t:[]},k={EventManager:_,TaskQueueManager:I},M=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeAudio(t,e)}))}))},O=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeImage(t,e)}))}))},z=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeFont(t,e)}))}))}})(),n})(),t.exports=e()},"./src/Firebase/base-firebase-integration.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{BaseFirebaseIntegration:()=>o});var n=i("./node_modules/firebase/app/dist/esm/index.esm.js"),s=i("./node_modules/firebase/analytics/dist/esm/index.esm.js"),a=i("./src/Firebase/firebase-config.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(t,e){try{(0,s.logEvent)(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,s.logEvent)(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}initializeFirebase(){try{this.firebaseApp=(0,n.initializeApp)(a.firebaseConfig),this.analytics=(0,s.getAnalytics)(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}},"./src/Firebase/firebase-config.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{firebaseConfig:()=>n});const n={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FirebaseIntegration:()=>s});var n=i("./src/Firebase/base-firebase-integration.ts");class s extends n.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return s.instance||(s.instance=new s),s.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}},"./src/common/event-names.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CLICK:()=>d,LOADPUZZLE:()=>n,MOUSEDOWN:()=>o,MOUSEMOVE:()=>a,MOUSEUP:()=>r,STONEDROP:()=>s,TOUCHEND:()=>l,TOUCHMOVE:()=>h,TOUCHSTART:()=>c,VISIBILITY_CHANGE:()=>u});const n="loadpuzzle",s="stonesdropped",a="mousemove",o="mousedown",r="mouseup",c="touchstart",h="touchmove",l="touchend",d="click",u="visibilitychange"},"./src/common/global-variables.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Debugger:()=>h,font:()=>c,lang:()=>r,pseudoId:()=>o});var n=i("./src/constants/index.ts"),s=i("./src/common/index.ts");const a=new URLSearchParams(window.location.search);var o=a.get("cr_user_id"),r=null==a.get("cr_lang")?"english":a.get("cr_lang");const c=s.Utils.getLanguageSpecificFont(r),h={DevelopmentLink:!!window.location.href.includes(n.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CLICK:()=>o.CLICK,Debugger:()=>a.Debugger,LOADPUZZLE:()=>o.LOADPUZZLE,MOUSEDOWN:()=>o.MOUSEDOWN,MOUSEMOVE:()=>o.MOUSEMOVE,MOUSEUP:()=>o.MOUSEUP,STONEDROP:()=>o.STONEDROP,StoneConfig:()=>n.StoneConfig,TOUCHEND:()=>o.TOUCHEND,TOUCHMOVE:()=>o.TOUCHMOVE,TOUCHSTART:()=>o.TOUCHSTART,Utils:()=>s.Utils,VISIBILITY_CHANGE:()=>o.VISIBILITY_CHANGE,createRippleEffect:()=>s.createRippleEffect,font:()=>a.font,hideElement:()=>s.hideElement,isClickInsideButton:()=>s.isClickInsideButton,isDocumentVisible:()=>s.isDocumentVisible,lang:()=>a.lang,loadImages:()=>s.loadImages,pseudoId:()=>a.pseudoId,syncLoadingImages:()=>s.syncLoadingImages,toggleDebugMode:()=>s.toggleDebugMode});var n=i("./src/common/stone-config.ts"),s=i("./src/common/utils.ts"),a=i("./src/common/global-variables.ts"),o=i("./src/common/event-names.ts")},"./src/common/stone-config.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{StoneConfig:()=>s});var n=i("./src/common/index.ts");class s{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,i,n,s,a,o,r,c){this.x=s,this.y=a,this.origx=s,this.origy=a,this.canvasWidth=e,this.canvasHeight=i,this.tutorialInstance=c,this.text=n,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,i,n)=>-i/2*(Math.cos(Math.PI*t/n)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);adjustSize(t,e){return t?1.25*e:e}draw(t,e=!1){const i=this.getX()-this.adjustSize(e,this.imageCenterOffsetX),s=this.getY()-this.adjustSize(e,this.imageCenterOffsetY);this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,i,s,this.adjustSize(e,this.imageSize),this.adjustSize(e,this.imageSize)),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${n.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}},"./src/common/utils.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Utils:()=>a,createRippleEffect:()=>o,hideElement:()=>u,isClickInsideButton:()=>h,isDocumentVisible:()=>l,loadImages:()=>r,syncLoadingImages:()=>c,toggleDebugMode:()=>d});var n=i("./src/common/index.ts"),s=i("./src/data/i18-font-mapping.ts");class a{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return n.Debugger.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in s.languageFontMapping)if(t.toLowerCase()===e)return s.languageFontMapping[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function o(t){const e=t;if(!e)throw new Error("Canvas context is null");let i=0,n=0;let s=10,a=10;return function(t,o,r){r&&(s=0,a=0),i=t,n=o,e.beginPath(),e.arc(i,n,s,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(i,n,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),s+=.5,a+=.5,(s>=60||a>=60)&&(s=10,a=10)}}function r(t,e){const i={};let n=0;const s=Object.keys(t).length;for(let a in t)i[a]=new Image,i[a].onload=function(){++n>=s&&e(i)},i[a].src=t[a]}const c=async t=>{const e=Object.keys(t).map((async e=>{const i=await(async t=>{const e=new Image;return new Promise((i=>{e.onload=()=>i(e),e.src=t}))})(t[e]);return{[e]:i}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})};function h(t,e,i,n,s,a,o=!1){if(o){return Math.sqrt((t-(i+s/2))**2+(e-(n+a/2))**2)<s/2}return t>=i&&t<=i+s&&e>=n&&e<=n+a}const l=()=>"visible"===document.visibilityState,d=t=>{t.classList.toggle("on");const e=t.classList.contains("on");n.Debugger.DebugMode=e,t.innerText="Dev"},u=(t=!1,e)=>{t?e.classList.remove("show"):e.classList.add("show")}},"./src/components/audio-player.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{AudioPlayer:()=>s});var n=i("./src/constants/index.ts");class s{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=a.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const t=n.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(t),s.audioBuffers.set(t,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(t){return void console.error("Error loading or decoding click sound:",t)}if(this.clickSoundBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.clickSoundBuffer,t.connect(this.audioContext.destination),t.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(t){return new Promise((async(e,i)=>{try{const i=await fetch(t),n=await i.arrayBuffer();e(await this.audioContext.decodeAudioData(n))}catch(t){console.error("Error loading or decoding audio:",t),i(t)}}))}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(s.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&s.audioBuffers.set(t,e)}playAudio(t){const e=s.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((i=>{this.audioContext?.decodeAudioData(i,(i=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=i,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)}}class a{static instance=null;static getAudioContext(){return a.instance||(a.instance=new(window.AudioContext||window.webkitAudioContext)),a.instance}}},"./src/components/background.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Background:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a={bgImg:s.DEFAULT_BACKGROUND_1,hillImg:s.ASSETS_PATH_HILL,pillerImg:s.ASSETS_PATH_TOTEM,fenchImg:s.ASSETS_PATH_FENCE,autumnBgImg:s.AUTUMN_BACKGROUND_1,autumnHillImg:s.AUTUMN_HILL_1,autumnPillerImg:s.AUTUMN_PILLAR_1,autumnSignImg:s.AUTUMN_SIGN_1,autumnFenceImg:s.AUTUMN_FENCE_1,winterBgImg:s.WINTER_BACKGROUND_1,winterHillImg:s.WINTER_HILL_1,winterSignImg:s.WINTER_SIGN_1,winterFenceImg:s.WINTER_FENCE_1,winterPillerImg:s.WINTER_PILLAR_1};class o{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,e,i,s){this.width=e,this.height=i,this.context=t,this.levelNumber=s,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,n.loadImages)(a,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,(0,n.loadImages)({cancel_button_image:s.CANCEL_BTN_IMG},(t=>{this.cancel_button_image=t.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/close-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i,this.posY=a,this.context=t,this.canvas=e,(0,n.loadImages)({close_button_image:s.MAP_BTN_IMG},(t=>{this.close_button_image=t.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:a}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CancelButton:()=>s.default,CloseButton:()=>n.default,LevelBloonButton:()=>d.default,NextButton:()=>a.default,NoButton:()=>o.default,PauseButton:()=>r.default,PlayButton:()=>l.default,RetryButton:()=>c.default,YesButton:()=>h.default});var n=i("./src/components/buttons/close-button.ts"),s=i("./src/components/buttons/cancel-button.ts"),a=i("./src/components/buttons/next-button.ts"),o=i("./src/components/buttons/no-button.ts"),r=i("./src/components/buttons/pause-button.ts"),c=i("./src/components/buttons/retry-button.ts"),h=i("./src/components/buttons/yes-button.ts"),l=i("./src/components/buttons/play-button.ts"),d=i("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(t,e,i){this.context=e,this.levelData=i,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=t.height/5,this.radiusOffSet=t.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=t.height/13,this.textFontSize=this.size/6}isSpecialLevel(t){return s.SPECIAL_LEVELS.includes(t)}isLevelSpecial(t){return this.levelData?.isSpecial?.9*t:t}draw(t,e,i,s){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${n.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+t}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${n.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(t,e,i,s)}applyPulseEffect(){const t=.7,e=Date.now()%1500/1500,i=e<=t,n=i?e/t:(e-t)/(i?t:.30000000000000004),s=i?15*n:15+45*n,a=i?.5*(1-n):0;if(a<=0)return;const{x:o,y:r,radius:c}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},h=this.posX+this.btnSize/o,l=this.posY+this.btnSize/r,d=this.btnSize/c+s;this.context.save(),this.context.beginPath(),this.context.arc(h,l,d,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${a})`,this.context.fill(),this.context.restore()}drawIcons(t,e,i,s){const a=this.levelData.index;if(n.Debugger.DebugMode||a+t-1>e+1&&this.drawLock(),i.length&&a+t<=s)for(let e=0;e<i.length;e++)if(a-1+t===parseInt(i[e].levelNumber)){this.checkStars(i[e].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(t){const e=this.levelData.x,i=this.levelData.y,n=this.size;t>=1&&this.drawStar(e,i-.01*n),t>1&&this.drawStar(e+n/2.5,i-.01*n),3===t&&this.drawStar(e+n/5,i-.1*n)}drawStar(t,e){this.context.drawImage(this.levelData?.starImg,t,e,this.size/5,this.size/5)}onClick(t,e,i,s,a){Math.sqrt((t-this.levelData.x-this.radiusOffSet)*(t-this.levelData.x-this.radiusOffSet)+(e-this.levelData.y-this.radiusOffSet)*(e-this.levelData.y-this.radiusOffSet))<45&&(n.Debugger.DebugMode||this.levelData.index+i<=s)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,a(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a,o){this.posX=a,this.posY=o,this.context=t,this.width=e,this.height=i,(0,n.loadImages)({next_button_image:s.NEXT_BTN_IMG},(t=>{this.next_button_image=t.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/no-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i+5,this.posY=a+10,this.context=t,this.canvas=e,(0,n.loadImages)({no_button_image:s.CANCEL_BTN_IMG},(t=>{this.no_button_image=t.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/pause-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,(0,n.loadImages)({pause_button_image:s.PAUSE_BTN_IMG},(t=>{this.pause_button_image=t.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9),i}}},"./src/components/buttons/play-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("./src/constants/index.ts"),s=i("./src/Firebase/firebase-integration.ts"),a=i("./src/common/index.ts"),o=i("./src/data/index.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,i,o){this.posX=i,this.posY=o,this.context=t,this.canvas=e,this.firebaseIntegration=new s.FirebaseIntegration,this.init(),this.images={pause_button_image:n.PLAY_BTN_IMG},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await(0,o.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const i=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),i<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}},"./src/components/buttons/retry-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i,this.posY=a,this.context=t,this.canvas=e,(0,n.loadImages)({retry_button_image:s.RETRY_BTN_IMG},(t=>{this.retry_button_image=t.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:a}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/yes-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i-5,this.posY=a,this.context=t,this.canvas=e,(0,n.loadImages)({yes_button_image:s.YES_BTN_IMG},(t=>{this.yes_button_image=t.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/feedback-text/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FeedbackTextEffects:()=>s});var n=i("./src/common/index.ts");class s{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(t){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=t,(0,n.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,n.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{AudioPlayer:()=>u.AudioPlayer,Background:()=>l.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>s.LevelIndicators,Monster:()=>c.Monster,PauseButton:()=>n.default,PromptText:()=>a.PromptText,StoneHandler:()=>o.default,TimerTicking:()=>h.TimerTicking,TrailEffect:()=>m.default,Tutorial:()=>r.Tutorial});var n=i("./src/components/buttons/pause-button.ts"),s=i("./src/components/level-indicator.ts"),a=i("./src/components/prompt-text.ts"),o=i("./src/components/stone-handler.ts"),r=i("./src/components/tutorial.ts"),c=i("./src/components/monster.ts"),h=i("./src/components/timer-ticking.ts"),l=i("./src/components/background.ts"),d=i("./src/components/feedback-text/index.ts"),u=i("./src/components/audio-player.ts"),m=i("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LevelIndicators:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a=i("./src/events/index.ts");class o extends a.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=i,this.images={level_indicator:s.LEVEL_INDICATOR,bar_empty:s.BAR_EMPTY,bar_full:s.BAR_FULL},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}},"./src/components/monster.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Monster:()=>a});var n=i("./src/events/index.ts"),s=i("./src/components/riveMonster/index.ts");class a extends n.EventManager{zindex;width;height;x;y;fps;canvasStack;canvasElement;context;game;monsterPhase;riveMonster;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canvasElement=document.getElementById("rivecanvas"),this.context=this.canvasElement.getContext("2d"),this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.initializeRiveMonster(),i&&i()}initializeRiveMonster(){this.riveMonster=new s.RiveMonsterComponent({src:"./assets/monsterrive.riv",canvas:this.canvasElement,autoplay:!0,stateMachines:"State Machine 1",fit:"contain",alignment:"topCenter",width:this.canvasElement.width,height:this.canvasElement.height,onLoad:()=>{this.riveMonster.play("Eat Happy")}})}stopRiveMonster(){this.riveMonster&&(this.riveMonster.stop(),console.log("Rive Monster animation stopped."))}update(t){}draw(){console.log("Drawing Rive Animation")}changeToDragAnimation(){this.riveMonster.play("Opening Mouth Eat")}changeToEatAnimation(){this.riveMonster.play("Eat Happy")}changeToIdleAnimation(){this.riveMonster.play("Idle")}changeToSpitAnimation(){this.riveMonster.play("Eat Disgust")}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.stopRiveMonster(),this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>c});var n=i("./src/components/buttons/index.ts"),s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),o=i("./src/components/popups/sure-popup.ts"),r=i("./src/constants/index.ts");class c{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,i,c,h){this.canvas=t,this.callback=e,this.gameplayData=h,this.switchToLevelSelection=i,this.reloadScene=c;const l=document.getElementById("canvas");this.context=l.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.cancelButton=new n.CancelButton(this.context,this.canvas),this.retryButton=new n.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new n.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,s.loadImages)({pop_up_image:r.POPUP_BG_IMG},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new o.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new o.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(s.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,a=t.clientY-i.top;this.cancelButton.onClick(n,a)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(n,a)&&("english"==s.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(n,a)&&("english"==s.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==s.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==s.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(r.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(s.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("./src/common/index.ts"),s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/constants/index.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,i){this.canvas=t,this.yesCallback=e,this.noCallback=i,this.context=this.canvas.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.yesButton=new a.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new a.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,n.loadImages)({pop_up_image:o.POPUP_BG_IMG},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(n.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.yesButton.onClick(n,s)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(n,s)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(n.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{PromptText:()=>r});var n=i("./src/events/index.ts"),s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),o=i("./src/constants/index.ts");class r extends n.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,i,n,o){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=n,this.rightToLeft=o,this.currentPromptText=i.prompt.promptText,this.currentPuzzleData=i,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.onClick(n,s)&&this.playSound()};getPromptAudioUrl=()=>s.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(s.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var i=this.calculateFont();const n=this.promptImageWidth,a=this.promptImageHeight;if(this.context.font=`${i}px ${s.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var o=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(o).width/2,e),this.context.fillStyle="black",this.context.fillText(o,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,a/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let i=this.targetStones.length-1;i>=0;i--)this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[i],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[i],t,e)),t=t+this.context.measureText(this.targetStones[i]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,a/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-n),e=.33*(this.height-a);this.context.drawImage(this.promptPlayButton,t,e,n/4,a/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,a/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),i=this.promptImageWidth,n=this.promptImageHeight;var a=this.calculateFont();this.context.font=`${a}px ${s.font}, monospace`;let o=this.width/2-this.context.measureText(this.currentPromptText).width/2,r=0;var c=this.currentPuzzleData.targetStones[0].split("");for(let s=0;s<t.length;s++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){c.includes(t[s])?(c=c.slice(1,c.length),this.context.fillStyle="red",this.context.fillText(t[s],o,e)):(this.context.fillStyle="black",this.context.fillText(t[s],o,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>s||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(t[s],o,e)):(this.context.fillStyle="red",this.context.fillText(t[s],o,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4)}r=(this.context.measureText(t[s]).width+this.context.measureText(t[s+1]).width)/2,o+=r}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,i=(this.width-t)/2,n=(this.height-e)/5;this.context.drawImage(this.prompt_image,i,n,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,o.PROMPT_TEXT_BG),e=this.loadImage(this.promptPlayButton,o.PROMPT_PLAY_BUTTON);await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((i,n)=>{t.onload=()=>{i()},t.src=e,t.onerror=t=>{n(t)}}))}}},"./src/components/riveMonster/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{RiveMonsterComponent:()=>s});var n=i("./node_modules/@rive-app/canvas/rive.js");class s{props;riveInstance;constructor(t){this.props=t,this.riveInstance=new n.Rive({src:this.props.src,canvas:this.props.canvas,autoplay:this.props.autoplay,stateMachines:this.props.stateMachines||"",layout:new n.Layout({fit:n.Fit[this.props.fit||"Contain"],alignment:n.Alignment[this.props.alignment||"TopCenter"]}),onLoad:()=>{this.props.onLoad&&this.props.onLoad()}})}play(t){this.riveInstance&&this.riveInstance.play(t)}stop(){this.riveInstance&&this.riveInstance.stop()}}},"./src/components/stone-handler.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>c});var n=i("./src/common/index.ts"),s=i("./src/events/index.ts"),a=i("./src/components/index.ts"),o=i("./src/data/index.ts"),r=i("./src/constants/index.ts");class c extends s.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==o.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,i,s,o,c){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=i,this.levelData=s,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(r.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(o),this.puzzleStartTime=new Date,this.tutorial=new a.Tutorial(t,e.width,e.height,i),this.stonebg=new Image,this.stonebg.src=r.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new a.AudioPlayer,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new a.AudioPlayer,this.timerTickingInstance=c,document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(t){const e=this.getFoilStones();for(let i=0;i<e.length;i++)e[i]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[i]),this.foilStones.push(new n.StoneConfig(this.context,this.canvas.width,this.canvas.height,e[i],this.stonePos[i][0],this.stonePos[i][1],t,this.timerTickingInstance,i==e.length-1?this.tutorial:null))}draw(t){for(let e=0;e<this.foilStones.length;e++)this.foilStones[e].draw(t);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}drawWordPuzzleLetters(t,e,i){for(let n=0;n<this.foilStones.length;n++)e(n)&&this.foilStones[n].draw(t,Object.keys(i).length>1&&void 0!==i[n]);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,i=!1){const n=i?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,n,i,t),n}processLetterDropFeedbackAudio(t,e,i,n){if(e){(i?n===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,r.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?r.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=n.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(e),r.AUDIO_PATH_POINTS_ADD,n.Utils.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}resetStonePosition(t,e,i){const n=e,s=i;if(n&&s&&n.text&&"number"==typeof s.origx&&"number"==typeof s.origy){const e=50,i=t/2;n.x=n.text.length<=3&&s.origx<e&&s.origx<i?s.origx+25:s.origx,n.y=s.origy}return n}computeCursorDistance(t,e,i){return Math.sqrt((t-i.x)**2+(e-i.y)**2)}handlePickStoneUp(t,e){let i=null,n=0;for(let s of this.foilStones){if(this.computeCursorDistance(t,e,s)<=40){i=s,i.foilStoneIndex=n;break}n++}return i}handleHoveringToAnotherStone(t,e,i){let n=null,s=0;for(let a of this.foilStones){if(this.computeCursorDistance(t,e,a)<=40&&i(a.text,s)){n=a,n.foilStoneIndex=s;break}s++}return n}handleMovingStoneLetter(t,e,i){const n=t,s=this.canvas.getBoundingClientRect();return n.x=e-s.left,n.y=i-s.top,n}}},"./src/components/timer-ticking.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{TimerTicking:()=>r});var n=i("./src/common/index.ts"),s=i("./src/events/index.ts"),a=i("./src/components/index.ts"),o=i("./src/constants/index.ts");class r extends s.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=i,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new a.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:o.TIMER_EMPTY,rotating_clock:o.ROTATING_CLOCK,timer_full:o.TIMER_FULL},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(o.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});class n{ctx;particles;mouse;isDiamond;constructor(t){this.ctx=t.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1}init(){this.draw()}draw(){this.drawTrail();let t=[];for(let e=0;e<this.particles.length;e++)this.particles[e].time<=this.particles[e].ttl&&t.push(this.particles[e]);this.particles=t}drawTrail(){for(let t=0;t<this.particles.length;t++)this.particles[t].update(),this.isDiamond=!this.isDiamond,this.particles[t].draw(this.isDiamond)}addTrailParticlesOnMove(t,e){this.mouse.x=t,this.mouse.y=e,this.particles.push(new s(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class s{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(t,e){const i=this.determineValueByScreenWidth(30,15),n=this.determineValueByScreenWidth(30,15),s=this.determineValueByScreenWidth(3,.5),a=this.determineValueByScreenWidth(2,.5);this.ctx=t,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:e.x+this.getRandomInt(-i,i),y:e.y+this.getRandomInt(-n,n),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-s,s),y:this.start.y+this.getRandomInt(-a,a)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(t,e){return window.screen.width>768?t:e}update(){if(this.time<=this.ttl){const t=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(t)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(t){t?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(t,e){return Math.round(Math.random()*(e-t))+t}easeOutQuart(t){return 1-Math.pow(1-t,4)}}},"./src/components/tutorial.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Tutorial:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a=i("./src/data/index.ts");class o{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,i,a){this.width=e,this.height=i,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=a>=0?a:null,this.tutorialImg=new Image,this.tutorialImg.src=s.TUTORIAL_HAND,this.drawRipple=(0,n.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,i){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const n=this.x-this.endx+this.absdx,s=this.y-this.endy+this.absdy;let a=100*Math.sqrt(n*n+s*s)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,i,i),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,i,n){this.totalTime+=Math.floor(t);const s=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*s,o=this.tutorialImg.height*s;this.context.drawImage(this.tutorialImg,e,i,a,o),!n&&this.drawRipple(e+.02*this.width,i+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,i,n){const s=(i-e)/2,a=Math.PI/n;return e+s*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,i=this.height/1.9+this.tutorialImg.height/.8,n=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let s;const a=this.endx;this.totalTime<e/2?(s=n+this.totalTime/(e/2)*(i-n),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(s=i-(this.totalTime-e/2)/(e/2)*(i-n),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,s,this.tutorialImg.width,this.tutorialImg.height),s<=n&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return a.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return a.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}},"./src/compositions/background.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{BACKGROUND_ASSET_LIST:()=>a,autumBgDrawing:()=>h,createBackground:()=>o,defaultBgDrawing:()=>c,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>l});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");const a={summer:{BG_GROUP_IMGS:s.DEFAULT_BG_GROUP_IMGS,draw:c},autumn:{BG_GROUP_IMGS:s.AUTUMN_BG_GROUP_IMGS,draw:h},winter:{BG_GROUP_IMGS:s.WINTER_BG_GROUP_IMGS,draw:l}};async function o(t,e,i,s,a){return{...{...a(t,e,i,{...await(0,n.syncLoadingImages)(s)})}}}const r=(t,e)=>{const i=Object.keys(e);let n=Math.floor(t/10)%i.length;return t>=30&&(n%=3),{...e[i[n]]}};function c(t,e,i,n){return{draw:()=>{t.drawImage(n?.DEFAULT_BACKGROUND_1,0,0,e,i),t.drawImage(n?.ASSETS_PATH_TOTEM,.6*e,i/6,e,i/2),t.drawImage(n?.ASSETS_PATH_FENCE,.4*-e,i/3,e,i/3),t.drawImage(n?.ASSETS_PATH_HILL,.25*-e,i/2,1.5*e,i/2)}}}function h(t,e,i,n){return{draw:()=>{t.drawImage(n.AUTUMN_BACKGROUND_1,0,0,e,i),t.drawImage(n.AUTUMN_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(n.AUTUMN_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(n.AUTUMN_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}function l(t,e,i,n){return{draw:()=>{t.drawImage(n.WINTER_BACKGROUND_1,0,0,e,i),t.drawImage(n.WINTER_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(n.WINTER_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(n.WINTER_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}function d(t,e,i,n){return{draw:()=>{t.drawImage(n?.LEVEL_SELECTION_BACKGROUND,0,0,e,i)}}}},"./src/compositions/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{BACKGROUND_ASSET_LIST:()=>n.BACKGROUND_ASSET_LIST,autumBgDrawing:()=>n.autumBgDrawing,createBackground:()=>n.createBackground,createLevelObject:()=>s.createLevelObject,defaultBgDrawing:()=>n.defaultBgDrawing,getdefaultCloudBtnsPos:()=>s.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>n.levelSelectBgDrawing,loadDynamicBgAssets:()=>n.loadDynamicBgAssets,loadLevelImages:()=>s.loadLevelImages,winterBgDrawing:()=>n.winterBgDrawing});var n=i("./src/compositions/background.ts"),s=i("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createLevelObject:()=>c,getdefaultCloudBtnsPos:()=>o,loadLevelImages:()=>r});var n=i("./src/constants/index.ts"),s=i("./src/common/index.ts");const a=t=>n.SPECIAL_LEVELS.includes(t),o=t=>[[[t.width/10,t.height/10],[t.width/2.5,t.height/10],[t.width/3+t.width/2.8,t.height/10],[t.width/10,t.height/3],[t.width/2.5,t.height/3],[t.width/3+t.width/2.8,t.height/3],[t.width/10,t.height/1.8],[t.width/2.5,t.height/1.8],[t.width/3+t.width/2.8,t.height/1.8],[t.width/2.5,t.height/1.3]]],r=()=>(0,s.syncLoadingImages)({balloonImg:n.MAP_ICON_IMG,specialBloonImg:n.MAP_ICON_SPECIAL_IMG,lockImg:n.MAP_LOCK_IMG,starImg:n.STAR_IMG});async function c(t,e,i,n){const s=a(i);return{...{x:t,y:e,index:i,isSpecial:s,...n,balloonImg:s?n?.specialBloonImg:n?.balloonImg}}}},"./src/constants/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{ASSETS_PATH_BG_01:()=>G,ASSETS_PATH_FENCE:()=>V,ASSETS_PATH_HILL:()=>W,ASSETS_PATH_MONSTER_IDLE:()=>Y,ASSETS_PATH_STONE_PINK_BG:()=>U,ASSETS_PATH_TOTEM:()=>H,AUDIO_ARE_YOU_SURE:()=>O,AUDIO_INTRO:()=>R,AUDIO_LEVEL_LOSE:()=>N,AUDIO_LEVEL_WIN:()=>F,AUDIO_PATH_BTN_CLICK:()=>k,AUDIO_PATH_CHEERING_FUNC:()=>B,AUDIO_PATH_CORRECT_STONE:()=>D,AUDIO_PATH_EATS:()=>C,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>L,AUDIO_PATH_MONSTER_SPIT:()=>x,AUDIO_PATH_ON_DRAG:()=>M,AUDIO_PATH_POINTS_ADD:()=>P,AUDIO_TIMEOUT:()=>z,AUDIO_URL_PRELOAD:()=>j,AUTUMN_BACKGROUND_1:()=>$,AUTUMN_BG_GROUP_IMGS:()=>zt,AUTUMN_FENCE_1:()=>Z,AUTUMN_HILL_1:()=>K,AUTUMN_PILLAR_1:()=>q,AUTUMN_SIGN_1:()=>J,BACK_BTN_IMG:()=>Lt,BAR_EMPTY:()=>ct,BAR_FULL:()=>ht,ButtonClick:()=>g,CANCEL_BTN_IMG:()=>Dt,CLOUD_6:()=>bt,CLOUD_7:()=>wt,CLOUD_8:()=>yt,DEFAULT_BACKGROUND_1:()=>X,DEFAULT_BG_GROUP_IMGS:()=>Ot,DevelopmentServer:()=>S,EndScene1:()=>A,FONT_BASE_PATH:()=>T,FeedbackAudio:()=>u,FirebaseUserClicked:()=>n,FirebaseUserInstall:()=>s,GAMEPLAY_BG_GROUP_IMGS:()=>Mt,GameScene1:()=>E,IntroMusic:()=>m,IsCached:()=>l,LEVEL_INDICATOR:()=>rt,LEVEL_SELECTION_BACKGROUND:()=>st,LevelEndAudio:()=>w,LevelSelection1:()=>I,MAP_BTN_IMG:()=>It,MAP_ICON_IMG:()=>Et,MAP_ICON_SPECIAL_IMG:()=>At,MAP_LOCK_IMG:()=>Tt,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>xt,NativePlayButton:()=>r,PAUSE_BTN_IMG:()=>_t,PIN_STAR_1:()=>gt,PIN_STAR_2:()=>ft,PIN_STAR_3:()=>vt,PLAY_BTN_IMG:()=>St,POPUP_BG_IMG:()=>kt,PROMPT_PLAY_BUTTON:()=>ot,PROMPT_TEXT_BG:()=>at,PWAInstallStatus:()=>a,PhraseAudio:()=>b,PreviousPlayedLevel:()=>c,PromptAudio:()=>p,RETRY_BTN_IMG:()=>Pt,ROTATING_CLOCK:()=>dt,SCENE_NAME_GAME_PLAY:()=>jt,SCENE_NAME_LEVEL_END:()=>Ut,SCENE_NAME_LEVEL_SELECT:()=>Ft,SCENE_NAME_START:()=>Nt,SPECIAL_LEVELS:()=>Ht,STAR_IMG:()=>Ct,StartScene1:()=>_,StoneMusic:()=>v,StoreMonsterPhaseNumber:()=>h,TIMER_EMPTY:()=>lt,TIMER_FULL:()=>ut,TUTORIAL_HAND:()=>mt,TimeOver:()=>f,UrlSubstring:()=>y,UserCancelled:()=>o,WINTER_BACKGROUND_1:()=>Q,WINTER_BG_GROUP_IMGS:()=>Rt,WINTER_FENCE_1:()=>it,WINTER_HILL_1:()=>tt,WINTER_PILLAR_1:()=>nt,WINTER_SIGN_1:()=>et,WIN_BG:()=>pt,YES_BTN_IMG:()=>Bt});const n="user_clicked",s="user_installed",a="pwa_installed_status",o="user_cancel_installation",r="native_playbutton_clicked",c="storePreviousPlayedLevel",h="storeMonsterPhaseNumber",l="is_cached",d="monster_audio",u="feedback_audio",m="intro_music",p="prompt_audio",g="button_click",f="time_over",v="stone_music",b="phrase_audio",w="level_end_audio",y="/feedthemonster",S="https://feedthemonsterdev.curiouscontent.org",_="StartScene1",I="LevelSelection1",E="GameScene1",A="EndScene1",T="./assets/fonts/",C="./assets/audios/Eat.mp3",x="./assets/audios/MonsterSpit.mp3",L="./assets/audios/Disapointed-05.mp3",P="assets/audios/PointsAdd.wav",D="assets/audios/CorrectStoneFinal.mp3",B=t=>`./assets/audios/Cheering-0${t}.mp3`,k="./assets/audios/ButtonClick.mp3",M="./assets/audios/onDrag.mp3",O="./assets/audios/are-you-sure.mp3",z="./assets/audios/timeout.mp3",R="./assets/audios/intro.mp3",N="./assets/audios/LevelLoseFanfare.mp3",F="./assets/audios/LevelWinFanfare.mp3",j=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],U="./assets/images/stone_pink.webp",H="./assets/images/Totem_v02_v01.webp",G="./assets/images/bg_v01.webp",W="./assets/images/hill_v01.webp",V="./assets/images/fence_v01.webp",Y="./assets/images/idle4.png",X="./assets/images/bg_v01.webp",$="./assets/images/Autumn_bg_v01.webp",K="./assets/images/Autumn_hill_v01.webp",q="./assets/images/Autumn_sign_v01.webp",J="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_fence_v01.webp",Q="./assets/images/Winter_bg_01.webp",tt="./assets/images/Winter_hill_v01.webp",et="./assets/images/Winter_sign_v01.webp",it="./assets/images/Winter_fence_v01.webp",nt="./assets/images/Winter_sign_v01.webp",st="./assets/images/map.webp",at="./assets/images/promptTextBg.webp",ot="./assets/images/promptPlayButton.webp",rt="./assets/images/levels_v01.webp",ct="./assets/images/bar_empty_v01.webp",ht="./assets/images/bar_full_v01.webp",lt="./assets/images/timer_empty.webp",dt="./assets/images/timer.webp",ut="./assets/images/timer_full.png",mt="./assets/images/tutorial_hand.webp",pt="./assets/images/WIN_screen_bg.webp",gt="./assets/images/pinStar1.webp",ft="./assets/images/pinStar2.webp",vt="./assets/images/pinStar3.webp",bt="./assets/images/cloud_01.png",wt="./assets/images/cloud_02.png",yt="./assets/images/cloud_03.png",St="./assets/images/Play_button.webp",_t="./assets/images/pause_v01.webp",It="./assets/images/map_btn.webp",Et="./assets/images/mapIcon.webp",At="./assets/images/map_icon_monster_level_v01.webp",Tt="./assets/images/mapLock.webp",Ct="./assets/images/star.webp",xt="./assets/images/next_btn.webp",Lt="./assets/images/back_btn.webp",Pt="./assets/images/retry_btn.webp",Dt="./assets/images/close_btn.webp",Bt="./assets/images/confirm_btn.webp",kt="./assets/images/popup_bg_v01.webp",Mt={ASSETS_PATH_TOTEM:H,DEFAULT_BACKGROUND_1:X,ASSETS_PATH_HILL:W,ASSETS_PATH_FENCE:V,ASSETS_PATH_MONSTER_IDLE:Y},Ot={DEFAULT_BACKGROUND_1:X,ASSETS_PATH_HILL:W,ASSETS_PATH_TOTEM:H,ASSETS_PATH_FENCE:V},zt={AUTUMN_BACKGROUND_1:$,AUTUMN_HILL_1:K,AUTUMN_PILLAR_1:q,AUTUMN_SIGN_1:J,AUTUMN_FENCE_1:Z},Rt={WINTER_BACKGROUND_1:Q,WINTER_HILL_1:tt,WINTER_SIGN_1:et,WINTER_FENCE_1:it,WINTER_PILLAR_1:nt},Nt="StartScene",Ft="LevelSelection",jt="GamePlay",Ut="LevelEnd",Ht=[5,13,20,30,42]},"./src/data/api-data.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{URL:()=>s,getData:()=>o,getFtmData:()=>a});var n=i("./src/common/index.ts");const s="./lang/"+n.lang+"/ftm_"+n.lang+".json";function a(){return fetch(s,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}async function o(){return await a()}},"./src/data/custom-fonts.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{customFonts:()=>n});const n={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"}},"./src/data/data-modal.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{DataModal:()=>n,FeedbackAudios:()=>o,FeedbackTexts:()=>a,FoilStone:()=>h,LevelMeta:()=>u,Levels:()=>r,OtherAudios:()=>s,Prompt:()=>d,Puzzles:()=>c,TargetStone:()=>l});class n{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,i,n,r,c,h,l,d){this.title=t,this.otherAudios=new s(e),this.levels=this.getLevels(i),this.FeedbackTexts=new a(n),this.FeedbackAudios=new o(c),this.rightToLeft=r,this.majVersion=h,this.minVersion=l,this.version=d}getLevels(t){let e=[];for(let i=0;i<t.length;i++)e.push(new r(t[i]));return e}}class s{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class a{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class o{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class r{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new u(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,i)=>{e.push(new c(t))})),e}}class c{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new d(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,i)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,i)=>{e.push(t.StoneText)})),e}}class h{stoneText;constructor(t){this.stoneText=t}}class l{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class u{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}},"./src/data/game-score.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameScore:()=>s});var n=i("./src/common/index.ts");class s{static currentlanguage=n.lang;static setGameLevelScore(t,e){let i=this.calculateStarCount(e),n={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:i};this.setTotalStarCount(i);let s=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<s.length;t++)if(s[t].levelNumber===n.levelNumber){a=t;break}-1!==a&&n.score>s[a].score?s[a]=n:s.push(n),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(s))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return n.Debugger.DebugMode?JSON.parse(localStorage.getItem(n.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(n.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{languageFontMapping:()=>n});const n={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{DataModal:()=>s.DataModal,FeedbackAudios:()=>s.FeedbackAudios,FeedbackTexts:()=>s.FeedbackTexts,FoilStone:()=>s.FoilStone,GameScore:()=>a.GameScore,LevelMeta:()=>s.LevelMeta,Levels:()=>s.Levels,OtherAudios:()=>s.OtherAudios,Prompt:()=>s.Prompt,Puzzles:()=>s.Puzzles,TargetStone:()=>s.TargetStone,URL:()=>n.URL,customFonts:()=>r.customFonts,getData:()=>n.getData,getFtmData:()=>n.getFtmData,languageFontMapping:()=>o.languageFontMapping});var n=i("./src/data/api-data.ts"),s=i("./src/data/data-modal.ts"),a=i("./src/data/game-score.ts"),o=i("./src/data/i18-font-mapping.ts"),r=i("./src/data/custom-fonts.ts")},"./src/events/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{EventManager:()=>s});var n=i("./src/common/index.ts");class s{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(n.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(n.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(n.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(n.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/gamepuzzles/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{WordPuzzleLogic:()=>n.default});var n=i("./src/gamepuzzles/wordPuzzleLogic.ts")},"./src/gamepuzzles/wordPuzzleLogic.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});class n{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(t,e){this.levelData=t,this.puzzleNumber=e,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(t){this.clearAllValues(),this.puzzleNumber=t}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(t){return!this.hideListObj[t]}handleCheckHoveredStone(t,e){const i=this.groupedLetters,n=this.getTargetWord();if(!this.droppedLetters.length&&n[0]!==i[0])return!1;const s=!i.includes(t),a=!this.groupedObj[e];return n.includes(`${this.droppedLetters}${i}${t}`)&&(s||a)}validateFedLetters(){const t=this.getTargetWord();return this.droppedLetters===t.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const t=this.getTargetWord();return this.droppedLetters===t}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(t,e){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${t}`,this.groupedObj[e]=t}}},"./src/sceneHandler/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{SceneHandler:()=>r});var n=i("./src/scenes/index.ts"),s=i("./src/data/index.ts"),a=i("./src/common/index.ts"),o=i("./src/constants/index.ts");class r{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(t,e){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new n.StartScene(t,e,this.switchSceneToLevelSelection),r.SceneName=o.StartScene1,this.loadingScreen=new n.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let t=s.GameScore.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),r.SceneName===o.StartScene1?this.startScene.animation(e):r.SceneName===o.LevelSelection1?this.levelSelectionScene.drawLevelSelection():r.SceneName===o.GameScene1?this.gameplayScene.draw(e):r.SceneName===o.EndScene1&&this.levelEndScene.draw(e)};switchSceneToGameplay=(t,e)=>{this.showLoading(),this.dispose(e);let i=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new n.GameplayScene(this.canvas,t.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,t.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(o.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,i,this.data.FeedbackAudios),r.SceneName=o.GameScene1}),800)};switchSceneToEndLevel=(t,e,i,s)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(o.SCENE_NAME_GAME_PLAY),this.levelEndScene=new n.LevelEndScene(this.canvas,this.height,this.width,this.context,t,i,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),r.SceneName=o.EndScene1}),s?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new n.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),r.SceneName=o.LevelSelection1,this.titleTextElement.style.display="none"}),800)};dispose=t=>{t==o.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():t===o.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():t===o.SCENE_NAME_START?this.startScene.dispose():t==o.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),localStorage.setItem(o.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameplayScene:()=>d});var n=i("./src/components/index.ts"),s=i("./src/components/popups/pause-popup.ts"),a=i("./src/common/index.ts"),o=i("./src/data/index.ts"),r=i("./src/Firebase/firebase-integration.ts"),c=i("./src/constants/index.ts"),h=i("./src/compositions/index.ts"),l=i("./src/gamepuzzles/index.ts");class d{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;hasFed;wordPuzzleLogic;riveMonsterElement;constructor(t,e,i,o,h,d,u,m,p,g,f){this.width=t.width,this.height=t.height,this.rightToLeft=h,this.canvas=t,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new n.TrailEffect(t),this.monsterPhaseNumber=i||1,this.levelData=e,this.switchSceneToEnd=d,this.levelNumber=u,this.switchToLevelSelection=m,this.reloadScene=p,this.jsonVersionNumber=g,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new n.PauseButton(this.context,this.canvas),this.timerTicking=new n.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new n.StoneHandler(this.context,this.canvas,this.counter,this.levelData,f,this.timerTicking),this.tutorial=new n.Tutorial(this.context,t.width,t.height),this.riveMonsterElement=document.getElementById("rivecanvas"),this.promptText=new n.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new n.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new n.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new s.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:e,selectedLevelNumber:u}),this.firebaseIntegration=new r.FirebaseIntegration,this.feedbackTextEffects=new n.FeedbackTextEffects,this.audioPlayer=new n.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=e.puzzles,this.feedBackTexts=o,this.images={profileMonster:c.ASSETS_PATH_MONSTER_IDLE},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}));var v=this.levelData.levelMeta.levelNumber;a.Debugger.DebugMode?localStorage.setItem(c.PreviousPlayedLevel+a.lang+"Debug",v):localStorage.setItem(c.PreviousPlayedLevel+a.lang,v),this.addEventListeners(),this.resetAnimationID=0,this.trailParticles?.init(),this.clickTrailToggle=!1,this.hasFed=!1,this.riveMonsterElement.style.zIndex="4",this.wordPuzzleLogic=new l.WordPuzzleLogic(e,this.counter)}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,h.loadDynamicBgAssets)(this.levelData.levelNumber,h.BACKGROUND_ASSET_LIST);this.background=await(0,h.createBackground)(this.context,this.width,this.height,t,e)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const i=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(i-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(Math.sqrt((i-this.monster.x-this.canvas.width/4)**2+(n-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),this.clickTrailToggle=!1};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(i,n);else for(let t of this.stoneHandler.foilStones){if(Math.sqrt((i-t.x)**2+(n-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(c.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};setPickedUp(t,e){const i=this.stoneHandler.handlePickStoneUp(t,e);i&&(this.pickedStoneObject=i,this.pickedStone=i,this.audioPlayer.playAudio(c.AUDIO_PATH_ON_DRAG),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(i?.text,i?.foilStoneIndex))}handleMouseMove=t=>{let e=t.clientX,i=t.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const n=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,t.clientX,t.clientY);if(this.pickedStone=n,e=n.x,i=n.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const t=this.stoneHandler.handleHoveringToAnotherStone(e,i,((t,e)=>this.wordPuzzleLogic.handleCheckHoveredStone(t,e)));t&&(this.wordPuzzleLogic.setPickUpLetter(t?.text,t?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=t,this.pickedStone=t)}}else{let n=this.canvas.getBoundingClientRect();const s=t.clientX-n.left,a=t.clientY-n.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=a,e=s,i=a}this.monster.changeToDragAnimation()}this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(e,i)};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;this.monster.onClick(i,n)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(i,n)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(i,n)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY}),this.hasFed||this.monster.changeToIdleAnimation(),this.trailParticles?.resetParticles()};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.monster.update(t),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(t),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(t)}handleStoneLetterDrawing(t){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const{groupedObj:e}=this.wordPuzzleLogic.getValues();this.stoneHandler.drawWordPuzzleLetters(t,(t=>this.wordPuzzleLogic.validateShouldHideLetter(t)),e)}else this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener(a.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(a.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(a.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(a.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(a.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(a.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(a.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(a.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(t,e,i=!1){return this.hasFed=!0,this.stoneHandler.isStoneLetterDropCorrect(t,e,i)}letterPuzzle(t){const e=this.getRandomInt(0,1),i=this.checkStoneDropped(t,e);i&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(i)}wordPuzzle(t){this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const e=this.getRandomInt(0,1);this.hasFed=!0,this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:i}=this.wordPuzzleLogic.getValues(),n=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(e,n,!0,i),n){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(n,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==a.lang?this.stonesCount:i.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation(),this.hasFed=!1}),2e3)}else this.handleStoneDropEnd(n,"Word"),this.stonesCount=1}resetToIdleAnimation(t,e){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(t,e)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t))};dispatchStoneDropEvent(t){const e=new CustomEvent(a.STONEDROP,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(t?.detail?.counter),this.pickedStone=null,document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime(),this.hasFed=!1}logPuzzleEndFirebaseEvent(t,e){let i=Date.now();const{droppedLetters:n}=this.wordPuzzleLogic.getValues(),s={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==n||null==n?"TIMEOUT":n:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(i-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(s)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameplayScene:()=>n.GameplayScene,LevelEndScene:()=>a.LevelEndScene,LevelSelectionScreen:()=>s.LevelSelectionScreen,LoadingScene:()=>o.LoadingScene,StartScene:()=>r.StartScene,TestGameplayScene:()=>c.TestGameplayScene});var n=i("./src/scenes/gameplay-scene.ts"),s=i("./src/scenes/level-selection-scene.ts"),a=i("./src/scenes/levelend-scene.ts"),o=i("./src/scenes/loading-scene.ts"),r=i("./src/scenes/start-scene.ts"),c=i("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LevelSelectionScreen:()=>l});var n=i("./src/common/index.ts"),s=i("./src/components/index.ts"),a=i("./src/data/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/compositions/index.ts"),c=i("./src/constants/index.ts"),h=i("./src/components/buttons/index.ts");class l{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;riveMonsterElement;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let r=this;this.callBack=i,this.levelsSectionCount=r.data.levels.length/10>Math.floor(r.data.levels.length/10)?Math.floor(r.data.levels.length/10)+1:Math.floor(r.data.levels.length/10),this.levels=[],this.firebaseIntegration=new o.FirebaseIntegration,this.init(),this.riveMonsterElement=document.getElementById("rivecanvas"),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=a.GameScore.getAllGameLevelInfo(),this.audioPlayer=new s.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(n.Debugger.DebugMode?localStorage.getItem(c.PreviousPlayedLevel+n.lang+"Debug"):localStorage.getItem(c.PreviousPlayedLevel+n.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.riveMonsterElement.style.zIndex="-1",this.images={nextbtn:c.NEXT_BTN_IMG,backbtn:c.BACK_BTN_IMG},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(c.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const t=await(0,a.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:c.LEVEL_SELECTION_BACKGROUND},r.levelSelectBgDrawing)};async createLevelButtons(){const t=await(0,r.loadLevelImages)(),e=(0,r.getdefaultCloudBtnsPos)(this.canvas)[0].map(((e,i)=>(0,r.createLevelObject)(e[0],e[1],i+1,t)));this.levels=await Promise.all(e),this.levelButtons=this.levels.map((t=>new h.LevelBloonButton(this.canvas,this.context,{...t})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(c.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,i=t.touches[0].clientY,n=this.xDown-e,s=this.yDown-i;Math.abs(n)>Math.abs(s)&&(n>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top,s=(t,e=1.3)=>i>=t&&i<t+this.canvas.height/10&&n>this.canvas.height/e&&n<this.canvas.height/e+this.canvas.height/10,a=s(.7*this.canvas.width),o=s(this.canvas.width/10);if(o||a){const t=this.levelSelectionPageIndex;a&&t!=10*this.levelsSectionCount-10?(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):o&&0!=t&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let t of this.levelButtons)t.onClick(i,n,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(t=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=t+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(t,e){const i=t.levelData.index+this.levelSelectionPageIndex,s=i-1;this.unlockLevelIndex+1===s&&t.applyPulseEffect(),i<=this.data.levels.length&&(this.checkUnlockedLevel(e),t.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,e,this.data.levels.length),n.Debugger.DebugMode&&this.context.fillText(this.data.levels[i-1].levelMeta.levelType,t.levelData.x+t.btnSize/3.5,t.levelData.y+t.btnSize/1.3))}draw(){for(let t of this.levelButtons)this.drawLevel(t,this.gameLevelData)}downButton(t){t!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=t?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber))}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.logSelectedLevelEvent(),this.callBack(e,"LevelSelection")}logSelectedLevelEvent(){const t={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LevelEndScene:()=>c});var n=i("./src/common/index.ts"),s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/compositions/index.ts"),r=i("./src/constants/index.ts");class c{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(t,e,i,o,c,h,l,d,u,m){this.canvas=t,this.height=e,this.width=i,this.context=o,this.monster=new s.Monster(this.canvas,m,this.switchToReactionAnimation),this.switchToGameplayCB=l,this.switchToLevelSelectionCB=d,this.data=u,this.starDrawnCount=0,this.closeButton=new a.CloseButton(o,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new a.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new a.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new s.AudioPlayer,this.starCount=c,this.currentLevel=h,this.images={backgroundImg:r.WIN_BG,star1Img:r.PIN_STAR_1,star2Img:r.PIN_STAR_2,star3Img:r.PIN_STAR_3,winBackgroundImg:r.DEFAULT_BACKGROUND_1},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new s.AudioPlayer,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,o.loadDynamicBgAssets)(this.currentLevel,o.BACKGROUND_ASSET_LIST);this.background=await(0,o.createBackground)(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?((0,n.isDocumentVisible)()&&this.audioPlayer.playAudio(r.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,n.isDocumentVisible)()&&(this.audioPlayer.playAudio(r.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(r.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(t),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(this.closeButton.onClick(i,n)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(i,n)){this.audioPlayer.playButtonClickSound();let t={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(t,"LevelEnd")}if(this.isLastLevel&&this.nextButton.onClick(i,n)){this.audioPlayer.playButtonClickSound();let t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.switchToGameplayCB(e,"LevelEnd")}};pauseAudios=()=>{(0,n.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LoadingScene:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,i){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=i,this.context=this.canvas.getContext("2d"),this.images={cloud6:s.CLOUD_6,cloud7:s.CLOUD_7,cloud8:s.CLOUD_8},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{StartScene:()=>l});var n=i("./src/components/index.ts"),s=i("./src/components/buttons/index.ts"),a=i("./src/common/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/compositions/index.ts"),c=i("./src/constants/index.ts"),h=i("./src/components/riveMonster/index.ts");class l{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;riveMonsterElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;riveMonster;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.riveMonsterElement=document.getElementById("rivecanvas"),this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.riveMonster=new h.RiveMonsterComponent({src:"./assets/monsterrive.riv",canvas:this.riveMonsterElement,autoplay:!0,stateMachines:"State Machine 1",fit:"contain",alignment:"topCenter",width:this.canavsElement.width,height:this.canavsElement.height,onLoad:()=>{this.riveMonster.play("Idle")}}),this.switchSceneToLevelSelection=i,this.audioPlayer=new n.AudioPlayer,this.pwa_status=localStorage.getItem(c.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle(),this.riveMonsterElement.style.zIndex="6"}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,c.DEFAULT_BG_GROUP_IMGS,r.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,a.toggleDebugMode)(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=t=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.playButton.draw()};createPlayButton(){this.playButton=new s.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var n=i.getBoundingClientRect();const s=t.clientX-n.left,r=t.clientY-n.top,{excludeX:h,excludeY:l}=a.Utils.getExcludedCoordinates(i,15);s<h&&r<l||(o.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",c.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(c.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{TestGameplayScene:()=>c});var n=i("./src/constants/index.ts"),s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/common/index.ts");const r=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),localStorage.setItem(n.PWAInstallStatus,"false")}));class c{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(t,e,i,a){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new s.Monster(this.canvas,0),console.log(Date.now," ::: ",performance.now),this.switchSceneToLevelSelection=a,this.stoneHandler=new s.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new s.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new s.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new s.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(n.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=i,this.animation(0),this.images={pillerImg:n.ASSETS_PATH_TOTEM,bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.ASSETS_PATH_HILL,fenchImg:n.ASSETS_PATH_FENCE,profileMonster:n.ASSETS_PATH_MONSTER_IDLE},(0,o.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{r.addEventListener("click",(()=>(0,o.toggleDebugMode)(r)))};handleMouseUp=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;Math.sqrt((n-e.monster.x-e.canvas.width/4)*(n-e.monster.x-e.canvas.width/4)+(s-e.monster.y-e.canvas.height/2.7)*(s-e.monster.y-e.canvas.height/2.7))<=60||e.monster.changeToIdleAnimation(),e.pickedStone=null};handleMouseDown=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;for(let t of e.stoneHandler.foilStones)Math.sqrt((n-t.x)*(n-t.x)+(s-t.y)*(s-t.y))<=40&&(this.pickedStone=t)};handleMouseMove=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;e.pickedStone&&(e.monster.changeToDragAnimation(),e.pickedStone.x=n,e.pickedStone.y=s)};animation=t=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(t),this.promptText.draw(t),this.stoneHandler.draw(t),this.levelIndicator.draw(),this.timerTicking.update(t))};draw(){}createPlayButton=()=>{this.playButton=new a.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(t){var e=t.touches[0],i=new MouseEvent("mousedown",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchmove",(function(t){var e=t.touches[0],i=new MouseEvent("mousemove",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchend",(function(t){var e=t.changedTouches[0],i=new MouseEvent("mouseup",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1)};handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var s=i.getBoundingClientRect();const a=t.clientX-s.left,o=t.clientY-s.top;e.playButton.onClick(a,o)&&(e.firebase_analytics&&e.firebase_analytics.logEvent(n.FirebaseUserClicked,"click"),fbq("trackCustom",n.FirebaseUserClicked,{event:"click"}),r.style.display="none",e.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>Y,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>V,setDefaultEventParameters:()=>q,setUserId:()=>X,setUserProperties:()=>$,settings:()=>j});var n=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),s=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js");i("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",c="firebase_id",h="origin",l=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",u="https://www.googletagmanager.com/gtag/js",m=new s.Logger("@firebase/analytics"),p={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},g=new a.ErrorFactory("analytics","Analytics",p);function f(t){if(!t.startsWith(u)){const e=g.create("invalid-gtag-resource",{gtagURL:t});return m.warn(e.message),""}return t}function v(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function b(t,e){const i=function(t,e){let i;return window.trustedTypes&&(i=window.trustedTypes.createPolicy(t,e)),i}("firebase-js-sdk-policy",{createScriptURL:f}),n=document.createElement("script"),s=`${u}?l=${t}&id=${e}`;n.src=i?null==i?void 0:i.createScriptURL(s):s,n.async=!0,document.head.appendChild(n)}function w(t,e,i,n){return async function(s,...a){try{if("event"===s){const[n,s]=a;await async function(t,e,i,n,s){try{let a=[];if(s&&s.send_to){let t=s.send_to;Array.isArray(t)||(t=[t]);const n=await v(i);for(const i of t){const t=n.find((t=>t.measurementId===i)),s=t&&e[t.appId];if(!s){a=[];break}a.push(s)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",n,s||{})}catch(t){m.error(t)}}(t,e,i,n,s)}else if("config"===s){const[s,o]=a;await async function(t,e,i,n,s,a){const o=n[s];try{if(o)await e[o];else{const t=(await v(i)).find((t=>t.measurementId===s));t&&await e[t.appId]}}catch(t){m.error(t)}t("config",s,a)}(t,e,i,n,s,o)}else if("consent"===s){const[e]=a;t("consent","update",e)}else if("get"===s){const[e,i,n]=a;t("get",e,i,n)}else if("set"===s){const[e]=a;t("set",e)}else t(s,...a)}catch(t){m.error(t)}}}const y=30;const S=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function _(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function I(t,e=S,i){const{appId:n,apiKey:s,measurementId:a}=t.options;if(!n)throw g.create("no-app-id");if(!s){if(a)return{measurementId:a,appId:n};throw g.create("no-api-key")}const o=e.getThrottleMetadata(n)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new A;return setTimeout((async()=>{r.abort()}),void 0!==i?i:l),E({appId:n,apiKey:s,measurementId:a},o,r,e)}async function E(t,{throttleEndTimeMillis:e,backoffCount:i},n,s=S){var o;const{appId:r,measurementId:c}=t;try{await function(t,e){return new Promise(((i,n)=>{const s=Math.max(e-Date.now(),0),a=setTimeout(i,s);t.addEventListener((()=>{clearTimeout(a),n(g.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(n,e)}catch(t){if(c)return m.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:r,measurementId:c};throw t}try{const e=await async function(t){var e;const{appId:i,apiKey:n}=t,s={method:"GET",headers:_(n)},a=d.replace("{app-id}",i),o=await fetch(a,s);if(200!==o.status&&304!==o.status){let t="";try{const i=await o.json();(null===(e=i.error)||void 0===e?void 0:e.message)&&(t=i.error.message)}catch(t){}throw g.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return s.deleteThrottleMetadata(r),e}catch(e){const h=e;if(!function(t){if(!(t instanceof a.FirebaseError&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h)){if(s.deleteThrottleMetadata(r),c)return m.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==h?void 0:h.message}]`),{appId:r,measurementId:c};throw e}const l=503===Number(null===(o=null==h?void 0:h.customData)||void 0===o?void 0:o.httpStatus)?(0,a.calculateBackoffMillis)(i,s.intervalMillis,y):(0,a.calculateBackoffMillis)(i,s.intervalMillis),d={throttleEndTimeMillis:Date.now()+l,backoffCount:i+1};return s.setThrottleMetadata(r,d),m.debug(`Calling attemptFetch again in ${l} millis`),E(t,d,n,s)}}class A{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let T,C;function x(t){C=t}function L(t){T=t}async function P(t,e,i,n,s,o,r){var l;const d=I(t);d.then((e=>{i[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&m.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>m.error(t))),e.push(d);const p=async function(){if(!(0,a.isIndexedDBAvailable)())return m.warn(g.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,a.validateIndexedDBOpenable)()}catch(t){return m.warn(g.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?n.getId():void 0)),[f,v]=await Promise.all([d,p]);(function(t){const e=window.document.getElementsByTagName("script");for(const i of Object.values(e))if(i.src&&i.src.includes(u)&&i.src.includes(t))return i;return null})(o)||b(o,f.measurementId),C&&(s("consent","default",C),x(void 0)),s("js",new Date);const w=null!==(l=null==r?void 0:r.config)&&void 0!==l?l:{};return w[h]="firebase",w.update=!0,null!=v&&(w[c]=v),s("config",f.measurementId,w),T&&(s("set",T),L(void 0)),f.measurementId}class D{constructor(t){this.app=t}_delete(){return delete B[this.app.options.appId],Promise.resolve()}}let B={},k=[];const M={};let O,z,R="dataLayer",N="gtag",F=!1;function j(t){if(F)throw g.create("already-initialized");t.dataLayerName&&(R=t.dataLayerName),t.gtagName&&(N=t.gtagName)}function U(t,e,i){!function(){const t=[];if((0,a.isBrowserExtension)()&&t.push("This is a browser extension environment."),(0,a.areCookiesEnabled)()||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),i=g.create("invalid-analytics-context",{errorInfo:e});m.warn(i.message)}}();const n=t.options.appId;if(!n)throw g.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw g.create("no-api-key");m.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=B[n])throw g.create("already-exists",{id:n});if(!F){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(R);const{wrappedGtag:t,gtagCore:e}=function(t,e,i,n,s){let a=function(...t){window[n].push(arguments)};return window[s]&&"function"==typeof window[s]&&(a=window[s]),window[s]=w(a,t,e,i),{gtagCore:a,wrappedGtag:window[s]}}(B,k,M,R,N);z=t,O=e,F=!0}B[n]=P(t,k,M,e,O,R,i);return new D(t)}function H(t=(0,n.getApp)()){t=(0,a.getModularInstance)(t);const e=(0,n._getProvider)(t,r);return e.isInitialized()?e.getImmediate():G(t)}function G(t,e={}){const i=(0,n._getProvider)(t,r);if(i.isInitialized()){const t=i.getImmediate();if((0,a.deepEqual)(e,i.getOptions()))return t;throw g.create("already-initialized")}return i.initialize({options:e})}async function W(){if((0,a.isBrowserExtension)())return!1;if(!(0,a.areCookiesEnabled)())return!1;if(!(0,a.isIndexedDBAvailable)())return!1;try{return await(0,a.validateIndexedDBOpenable)()}catch(t){return!1}}function V(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,n){if(n&&n.global)return t("set",{screen_name:i}),Promise.resolve();t("config",await e,{update:!0,screen_name:i})}(z,B[t.app.options.appId],e,i).catch((t=>m.error(t)))}async function Y(t){return t=(0,a.getModularInstance)(t),async function(t,e){const i=await e;return new Promise(((e,n)=>{t("get",i,"client_id",(t=>{t||n(g.create("no-client-id")),e(t)}))}))}(z,B[t.app.options.appId])}function X(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,n){if(n&&n.global)return t("set",{user_id:i}),Promise.resolve();t("config",await e,{update:!0,user_id:i})}(z,B[t.app.options.appId],e,i).catch((t=>m.error(t)))}function $(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,n){if(n&&n.global){const e={};for(const t of Object.keys(i))e[`user_properties.${t}`]=i[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:i})}(z,B[t.app.options.appId],e,i).catch((t=>m.error(t)))}function K(t,e){t=(0,a.getModularInstance)(t),async function(t,e){const i=await t;window[`ga-disable-${i}`]=!e}(B[t.app.options.appId],e).catch((t=>m.error(t)))}function q(t){z?z("set",t):L(t)}function J(t,e,i,n){t=(0,a.getModularInstance)(t),async function(t,e,i,n,s){if(s&&s.global)t("event",i,n);else{const s=await e;t("event",i,Object.assign(Object.assign({},n),{send_to:s}))}}(z,B[t.app.options.appId],e,i,n).catch((t=>m.error(t)))}function Z(t){z?z("consent","update",t):x(t)}const Q="@firebase/analytics",tt="0.10.0";(0,n._registerComponent)(new o.Component(r,((t,{options:e})=>U(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),(0,n._registerComponent)(new o.Component("analytics-internal",(function(t){try{const e=t.getProvider(r).getImmediate();return{logEvent:(t,i,n)=>J(e,t,i,n)}}catch(t){throw g.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),(0,n.registerVersion)(Q,tt),(0,n.registerVersion)(Q,tt,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>O,_addComponent:()=>F,_addOrOverwriteComponent:()=>j,_apps:()=>R,_clearComponents:()=>W,_components:()=>N,_getProvider:()=>H,_registerComponent:()=>U,_removeServiceInstance:()=>G,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>tt,registerVersion:()=>Q,setLogLevel:()=>et});var n=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),s=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/idb/build/index.js");class r{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const c="@firebase/app",h="0.9.15",l=new s.Logger("@firebase/app"),d="@firebase/app-compat",u="@firebase/analytics-compat",m="@firebase/analytics",p="@firebase/app-check-compat",g="@firebase/app-check",f="@firebase/auth",v="@firebase/auth-compat",b="@firebase/database",w="@firebase/database-compat",y="@firebase/functions",S="@firebase/functions-compat",_="@firebase/installations",I="@firebase/installations-compat",E="@firebase/messaging",A="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",x="@firebase/remote-config",L="@firebase/remote-config-compat",P="@firebase/storage",D="@firebase/storage-compat",B="@firebase/firestore",k="@firebase/firestore-compat",M="firebase",O="[DEFAULT]",z={[c]:"fire-core",[d]:"fire-core-compat",[m]:"fire-analytics",[u]:"fire-analytics-compat",[g]:"fire-app-check",[p]:"fire-app-check-compat",[f]:"fire-auth",[v]:"fire-auth-compat",[b]:"fire-rtdb",[w]:"fire-rtdb-compat",[y]:"fire-fn",[S]:"fire-fn-compat",[_]:"fire-iid",[I]:"fire-iid-compat",[E]:"fire-fcm",[A]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[x]:"fire-rc",[L]:"fire-rc-compat",[P]:"fire-gcs",[D]:"fire-gcs-compat",[B]:"fire-fst",[k]:"fire-fst-compat","fire-js":"fire-js",[M]:"fire-js-all"},R=new Map,N=new Map;function F(t,e){try{t.container.addComponent(e)}catch(i){l.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,i)}}function j(t,e){t.container.addOrOverwriteComponent(e)}function U(t){const e=t.name;if(N.has(e))return l.debug(`There were multiple attempts to register component ${e}.`),!1;N.set(e,t);for(const e of R.values())F(e,t);return!0}function H(t,e){const i=t.container.getProvider("heartbeat").getImmediate({optional:!0});return i&&i.triggerHeartbeat(),t.container.getProvider(e)}function G(t,e,i=O){H(t,e).clearInstance(i)}function W(){N.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},Y=new a.ErrorFactory("app","Firebase",V);class X{constructor(t,e,i){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=i,this.container.addComponent(new n.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw Y.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(t,e={}){let i=t;if("object"!=typeof e){e={name:e}}const s=Object.assign({name:O,automaticDataCollectionEnabled:!1},e),o=s.name;if("string"!=typeof o||!o)throw Y.create("bad-app-name",{appName:String(o)});if(i||(i=(0,a.getDefaultAppConfig)()),!i)throw Y.create("no-options");const r=R.get(o);if(r){if((0,a.deepEqual)(i,r.options)&&(0,a.deepEqual)(s,r.config))return r;throw Y.create("duplicate-app",{appName:o})}const c=new n.ComponentContainer(o);for(const t of N.values())c.addComponent(t);const h=new X(i,s,c);return R.set(o,h),h}function q(t=O){const e=R.get(t);if(!e&&t===O&&(0,a.getDefaultAppConfig)())return K();if(!e)throw Y.create("no-app",{appName:t});return e}function J(){return Array.from(R.values())}async function Z(t){const e=t.name;R.has(e)&&(R.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function Q(t,e,i){var s;let a=null!==(s=z[t])&&void 0!==s?s:t;i&&(a+=`-${i}`);const o=a.match(/\s|\//),r=e.match(/\s|\//);if(o||r){const t=[`Unable to register library "${a}" with version "${e}":`];return o&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&r&&t.push("and"),r&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void l.warn(t.join(" "))}U(new n.Component(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}function tt(t,e){if(null!==t&&"function"!=typeof t)throw Y.create("invalid-log-argument");(0,s.setUserLogHandler)(t,e)}function et(t){(0,s.setLogLevel)(t)}const it="firebase-heartbeat-database",nt=1,st="firebase-heartbeat-store";let at=null;function ot(){return at||(at=(0,o.openDB)(it,nt,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(st)}}).catch((t=>{throw Y.create("idb-open",{originalErrorMessage:t.message})}))),at}async function rt(t,e){try{const i=(await ot()).transaction(st,"readwrite"),n=i.objectStore(st);await n.put(e,ct(t)),await i.done}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=Y.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}function ct(t){return`${t.name}!${t.options.appId}`}class ht{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new dt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=lt();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=lt(),{heartbeatsToSend:e,unsentEntries:i}=function(t,e=1024){const i=[];let n=t.slice();for(const s of t){const t=i.find((t=>t.agent===s.agent));if(t){if(t.dates.push(s.date),ut(i)>e){t.dates.pop();break}}else if(i.push({agent:s.agent,dates:[s.date]}),ut(i)>e){i.pop();break}n=n.slice(1)}return{heartbeatsToSend:i,unsentEntries:n}}(this._heartbeatsCache.heartbeats),n=(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),n}}function lt(){return(new Date).toISOString().substring(0,10)}class dt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.isIndexedDBAvailable)()&&(0,a.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(t){try{const e=await ot();return await e.transaction(st).objectStore(st).get(ct(t))}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=Y.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:[...i.heartbeats,...t.heartbeats]})}}}function ut(t){return(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t})).length}var mt;mt="",U(new n.Component("platform-logger",(t=>new r(t)),"PRIVATE")),U(new n.Component("heartbeat",(t=>new ht(t)),"PRIVATE")),Q(c,h,mt),Q(c,h,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Component:()=>s,ComponentContainer:()=>r,Provider:()=>o});var n=i("./node_modules/@firebase/util/dist/index.esm2017.js");class s{constructor(t,e,i){this.name=t,this.instanceFactory=e,this.type=i,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const a="[DEFAULT]";class o{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new n.Deferred;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const i=this.getOrInitializeService({instanceIdentifier:e});i&&t.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const i=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),n=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(i)&&!this.shouldAutoInitialize()){if(n)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:i})}catch(t){if(n)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:a})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const i=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:i});e.resolve(t)}catch(t){}}}}clearInstance(t=a){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=a){return this.instances.has(t)}getOptions(t=a){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,i=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(i))throw Error(`${this.name}(${i}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const n=this.getOrInitializeService({instanceIdentifier:i,options:e});for(const[t,e]of this.instancesDeferred.entries()){i===this.normalizeInstanceIdentifier(t)&&e.resolve(n)}return n}onInit(t,e){var i;const n=this.normalizeInstanceIdentifier(e),s=null!==(i=this.onInitCallbacks.get(n))&&void 0!==i?i:new Set;s.add(t),this.onInitCallbacks.set(n,s);const a=this.instances.get(n);return a&&t(a,n),()=>{s.delete(t)}}invokeOnInitCallbacks(t,e){const i=this.onInitCallbacks.get(e);if(i)for(const n of i)try{n(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let i=this.instances.get(t);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(n=t,n===a?void 0:n),options:e}),this.instances.set(t,i),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(i,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,i)}catch(t){}var n;return i||null}normalizeInstanceIdentifier(t=a){return this.component?this.component.multipleInstances?t:a:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new o(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>et,getToken:()=>J,onIdChange:()=>tt});var n=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),s=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",c="0.6.4",h=1e4,l=`w:${c}`,d="FIS_v2",u="https://firebaseinstallations.googleapis.com/v1",m=36e5,p={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},g=new a.ErrorFactory("installations","Installations",p);function f(t){return t instanceof a.FirebaseError&&t.code.includes("request-failed")}function v({projectId:t}){return`${u}/projects/${t}/installations`}function b(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function w(t,e){const i=(await e.json()).error;return g.create("request-failed",{requestName:t,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})}function y({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function S(t,{refreshToken:e}){const i=y(t);return i.append("Authorization",function(t){return`${d} ${t}`}(e)),i}async function _(t){const e=await t();return e.status>=500&&e.status<600?t():e}function I(t){return new Promise((e=>{setTimeout(e,t)}))}const E=/^[cdef][\w-]{21}$/,A="";function T(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(i=t,btoa(String.fromCharCode(...i)).replace(/\+/g,"-").replace(/\//g,"_"));var i;return e.substr(0,22)}(t);return E.test(e)?e:A}catch(t){return A}}function C(t){return`${t.appName}!${t.appId}`}const x=new Map;function L(t,e){const i=C(t);P(i,e),function(t,e){const i=B();i&&i.postMessage({key:t,fid:e});k()}(i,e)}function P(t,e){const i=x.get(t);if(i)for(const t of i)t(e)}let D=null;function B(){return!D&&"BroadcastChannel"in self&&(D=new BroadcastChannel("[Firebase] FID Change"),D.onmessage=t=>{P(t.data.key,t.data.fid)}),D}function k(){0===x.size&&D&&(D.close(),D=null)}const M="firebase-installations-database",O=1,z="firebase-installations-store";let R=null;function N(){return R||(R=(0,o.openDB)(M,O,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(z)}})),R}async function F(t,e){const i=C(t),n=(await N()).transaction(z,"readwrite"),s=n.objectStore(z),a=await s.get(i);return await s.put(e,i),await n.done,a&&a.fid===e.fid||L(t,e.fid),e}async function j(t){const e=C(t),i=(await N()).transaction(z,"readwrite");await i.objectStore(z).delete(e),await i.done}async function U(t,e){const i=C(t),n=(await N()).transaction(z,"readwrite"),s=n.objectStore(z),a=await s.get(i),o=e(a);return void 0===o?await s.delete(i):await s.put(o,i),await n.done,!o||a&&a.fid===o.fid||L(t,o.fid),o}async function H(t){let e;const i=await U(t.appConfig,(i=>{const n=function(t){const e=t||{fid:T(),registrationStatus:0};return V(e)}(i),s=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(g.create("app-offline"))}}const i={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},n=async function(t,e){try{const i=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:i}){const n=v(t),s=y(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&s.append("x-firebase-client",t)}const o={fid:i,authVersion:d,appId:t.appId,sdkVersion:l},r={method:"POST",headers:s,body:JSON.stringify(o)},c=await _((()=>fetch(n,r)));if(c.ok){const t=await c.json();return{fid:t.fid||i,registrationStatus:2,refreshToken:t.refreshToken,authToken:b(t.authToken)}}throw await w("Create Installation",c)}(t,e);return F(t.appConfig,i)}catch(i){throw f(i)&&409===i.customData.serverCode?await j(t.appConfig):await F(t.appConfig,{fid:e.fid,registrationStatus:0}),i}}(t,i);return{installationEntry:i,registrationPromise:n}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:G(t)}:{installationEntry:e}}(t,n);return e=s.registrationPromise,s.installationEntry}));return i.fid===A?{installationEntry:await e}:{installationEntry:i,registrationPromise:e}}async function G(t){let e=await W(t.appConfig);for(;1===e.registrationStatus;)await I(100),e=await W(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:i}=await H(t);return i||e}return e}function W(t){return U(t,(t=>{if(!t)throw g.create("installation-not-found");return V(t)}))}function V(t){return 1===(e=t).registrationStatus&&e.registrationTime+h<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function Y({appConfig:t,heartbeatServiceProvider:e},i){const n=function(t,{fid:e}){return`${v(t)}/${e}/authTokens:generate`}(t,i),s=S(t,i),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&s.append("x-firebase-client",t)}const o={installation:{sdkVersion:l,appId:t.appId}},r={method:"POST",headers:s,body:JSON.stringify(o)},c=await _((()=>fetch(n,r)));if(c.ok){return b(await c.json())}throw await w("Generate Auth Token",c)}async function X(t,e=!1){let i;const n=await U(t.appConfig,(n=>{if(!K(n))throw g.create("not-registered");const s=n.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+m}(t)}(s))return n;if(1===s.requestStatus)return i=async function(t,e){let i=await $(t.appConfig);for(;1===i.authToken.requestStatus;)await I(100),i=await $(t.appConfig);const n=i.authToken;return 0===n.requestStatus?X(t,e):n}(t,e),n;{if(!navigator.onLine)throw g.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(n);return i=async function(t,e){try{const i=await Y(t,e),n=Object.assign(Object.assign({},e),{authToken:i});return await F(t.appConfig,n),i}catch(i){if(!f(i)||401!==i.customData.serverCode&&404!==i.customData.serverCode){const i=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await F(t.appConfig,i)}else await j(t.appConfig);throw i}}(t,e),e}}));return i?await i:n.authToken}function $(t){return U(t,(t=>{if(!K(t))throw g.create("not-registered");const e=t.authToken;return 1===(i=e).requestStatus&&i.requestTime+h<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var i}))}function K(t){return void 0!==t&&2===t.registrationStatus}async function q(t){const e=t,{installationEntry:i,registrationPromise:n}=await H(e);return n?n.catch(console.error):X(e).catch(console.error),i.fid}async function J(t,e=!1){const i=t;await async function(t){const{registrationPromise:e}=await H(t);e&&await e}(i);return(await X(i,e)).token}async function Z(t,e){const i=function(t,{fid:e}){return`${v(t)}/${e}`}(t,e),n={method:"DELETE",headers:S(t,e)},s=await _((()=>fetch(i,n)));if(!s.ok)throw await w("Delete Installation",s)}async function Q(t){const{appConfig:e}=t,i=await U(e,(t=>{if(!t||0!==t.registrationStatus)return t}));if(i){if(1===i.registrationStatus)throw g.create("delete-pending-registration");if(2===i.registrationStatus){if(!navigator.onLine)throw g.create("app-offline");await Z(e,i),await j(e)}}}function tt(t,e){const{appConfig:i}=t;return function(t,e){B();const i=C(t);let n=x.get(i);n||(n=new Set,x.set(i,n)),n.add(e)}(i,e),()=>{!function(t,e){const i=C(t),n=x.get(i);n&&(n.delete(e),0===n.size&&x.delete(i),k())}(i,e)}}function et(t=(0,n.getApp)()){return(0,n._getProvider)(t,"installations").getImmediate()}function it(t){return g.create("missing-app-config-values",{valueName:t})}const nt="installations",st=t=>{const e=t.getProvider("app").getImmediate(),i=function(t){if(!t||!t.options)throw it("App Configuration");if(!t.name)throw it("App Name");const e=["projectId","apiKey","appId"];for(const i of e)if(!t.options[i])throw it(i);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:i,heartbeatServiceProvider:(0,n._getProvider)(e,"heartbeat"),_delete:()=>Promise.resolve()}},at=t=>{const e=t.getProvider("app").getImmediate(),i=(0,n._getProvider)(e,nt).getImmediate();return{getId:()=>q(i),getToken:t=>J(i,t)}};(0,n._registerComponent)(new s.Component(nt,st,"PUBLIC")),(0,n._registerComponent)(new s.Component("installations-internal",at,"PRIVATE")),(0,n.registerVersion)(r,c),(0,n.registerVersion)(r,c,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{deleteDB:()=>a,openDB:()=>s,unwrap:()=>n.u,wrap:()=>n.w});var n=i("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function s(t,e,{blocked:i,upgrade:s,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),c=(0,n.w)(r);return s&&r.addEventListener("upgradeneeded",(t=>{s((0,n.w)(r.result),t.oldVersion,t.newVersion,(0,n.w)(r.transaction))})),i&&r.addEventListener("blocked",(()=>i())),c.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),c}function a(t,{blocked:e}={}){const i=indexedDB.deleteDatabase(t);return e&&i.addEventListener("blocked",(()=>e())),(0,n.w)(i).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],c=new Map;function h(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(c.get(e))return c.get(e);const i=e.replace(/FromIndex$/,""),n=e!==i,s=r.includes(i);if(!(i in(n?IDBIndex:IDBObjectStore).prototype)||!s&&!o.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,s?"readwrite":"readonly");let o=a.store;return n&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),s&&a.done]))[0]};return c.set(e,a),a}(0,n.r)((t=>({...t,get:(e,i,n)=>h(e,i)||t.get(e,i,n),has:(e,i)=>!!h(e,i)||t.has(e,i)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{a:()=>l,i:()=>n,r:()=>u,u:()=>f,w:()=>g});const n=(t,e)=>e.some((e=>t instanceof e));let s,a;const o=new WeakMap,r=new WeakMap,c=new WeakMap,h=new WeakMap,l=new WeakMap;let d={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||c.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return g(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function m(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),g(o.get(this))}:function(...e){return g(t.apply(f(this),e))}:function(e,...i){const n=t.call(f(this),e,...i);return c.set(n,e.sort?e.sort():[e]),g(n)}}function p(t){return"function"==typeof t?m(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",a),t.removeEventListener("abort",a)},s=()=>{e(),n()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",s),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),n(t,s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function g(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("success",s),t.removeEventListener("error",a)},s=()=>{e(g(t.result)),n()},a=()=>{i(t.error),n()};t.addEventListener("success",s),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(h.has(t))return h.get(t);const e=p(t);return e!==t&&(h.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LogLevel:()=>s,Logger:()=>h,setLogLevel:()=>l,setUserLogHandler:()=>d});const n=[];var s;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(s||(s={}));const a={debug:s.DEBUG,verbose:s.VERBOSE,info:s.INFO,warn:s.WARN,error:s.ERROR,silent:s.SILENT},o=s.INFO,r={[s.DEBUG]:"log",[s.VERBOSE]:"log",[s.INFO]:"info",[s.WARN]:"warn",[s.ERROR]:"error"},c=(t,e,...i)=>{if(e<t.logLevel)return;const n=(new Date).toISOString(),s=r[e];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[s](`[${n}]  ${t.name}:`,...i)};class h{constructor(t){this.name=t,this._logLevel=o,this._logHandler=c,this._userLogHandler=null,n.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in s))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,s.DEBUG,...t),this._logHandler(this,s.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,s.VERBOSE,...t),this._logHandler(this,s.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,s.INFO,...t),this._logHandler(this,s.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,s.WARN,...t),this._logHandler(this,s.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,s.ERROR,...t),this._logHandler(this,s.ERROR,...t)}}function l(t){n.forEach((e=>{e.setLogLevel(t)}))}function d(t,e){for(const i of n){let n=null;e&&e.level&&(n=a[e.level]),i.userLogHandler=null===t?null:(e,i,...a)=>{const o=a.map((t=>{if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((t=>t)).join(" ");i>=(null!=n?n:e.logLevel)&&t({level:s[i].toLowerCase(),message:o,args:a,type:e.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{getAnalytics:()=>n.getAnalytics,getGoogleAnalyticsClientId:()=>n.getGoogleAnalyticsClientId,initializeAnalytics:()=>n.initializeAnalytics,isSupported:()=>n.isSupported,logEvent:()=>n.logEvent,setAnalyticsCollectionEnabled:()=>n.setAnalyticsCollectionEnabled,setConsent:()=>n.setConsent,setCurrentScreen:()=>n.setCurrentScreen,setDefaultEventParameters:()=>n.setDefaultEventParameters,setUserId:()=>n.setUserId,setUserProperties:()=>n.setUserProperties,settings:()=>n.settings});var n=i("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FirebaseError:()=>n.FirebaseError,SDK_VERSION:()=>n.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>n._DEFAULT_ENTRY_NAME,_addComponent:()=>n._addComponent,_addOrOverwriteComponent:()=>n._addOrOverwriteComponent,_apps:()=>n._apps,_clearComponents:()=>n._clearComponents,_components:()=>n._components,_getProvider:()=>n._getProvider,_registerComponent:()=>n._registerComponent,_removeServiceInstance:()=>n._removeServiceInstance,deleteApp:()=>n.deleteApp,getApp:()=>n.getApp,getApps:()=>n.getApps,initializeApp:()=>n.initializeApp,onLog:()=>n.onLog,registerVersion:()=>n.registerVersion,setLogLevel:()=>n.setLogLevel});var n=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,n.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{deleteDB:()=>a,openDB:()=>s,unwrap:()=>n.u,wrap:()=>n.w});var n=i("./node_modules/idb/build/wrap-idb-value.js");function s(t,e,{blocked:i,upgrade:s,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),c=(0,n.w)(r);return s&&r.addEventListener("upgradeneeded",(t=>{s((0,n.w)(r.result),t.oldVersion,t.newVersion,(0,n.w)(r.transaction),t)})),i&&r.addEventListener("blocked",(t=>i(t.oldVersion,t.newVersion,t))),c.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),c}function a(t,{blocked:e}={}){const i=indexedDB.deleteDatabase(t);return e&&i.addEventListener("blocked",(t=>e(t.oldVersion,t))),(0,n.w)(i).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],c=new Map;function h(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(c.get(e))return c.get(e);const i=e.replace(/FromIndex$/,""),n=e!==i,s=r.includes(i);if(!(i in(n?IDBIndex:IDBObjectStore).prototype)||!s&&!o.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,s?"readwrite":"readonly");let o=a.store;return n&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),s&&a.done]))[0]};return c.set(e,a),a}(0,n.r)((t=>({...t,get:(e,i,n)=>h(e,i)||t.get(e,i,n),has:(e,i)=>!!h(e,i)||t.has(e,i)})))},"./node_modules/idb/build/wrap-idb-value.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{a:()=>l,i:()=>n,r:()=>u,u:()=>f,w:()=>g});const n=(t,e)=>e.some((e=>t instanceof e));let s,a;const o=new WeakMap,r=new WeakMap,c=new WeakMap,h=new WeakMap,l=new WeakMap;let d={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||c.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return g(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function m(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),g(o.get(this))}:function(...e){return g(t.apply(f(this),e))}:function(e,...i){const n=t.call(f(this),e,...i);return c.set(n,e.sort?e.sort():[e]),g(n)}}function p(t){return"function"==typeof t?m(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",a),t.removeEventListener("abort",a)},s=()=>{e(),n()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",s),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),n(t,s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function g(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("success",s),t.removeEventListener("error",a)},s=()=>{e(g(t.result)),n()},a=()=>{i(t.error),n()};t.addEventListener("success",s),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(h.has(t))return h.get(t);const e=p(t);return e!==t&&(h.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Workbox:()=>u,messageSW:()=>n});try{self["workbox:window:4.3.1"]&&_()}catch(n){}var n=function(t,e){return new Promise((function(i){var n=new MessageChannel;n.port1.onmessage=function(t){return i(t.data)},t.postMessage(e,[n.port2])}))};function s(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(n){}var o=function(){var t=this;this.promise=new Promise((function(e,i){t.resolve=e,t.reject=i}))},r=function(t,e){return new URL(t,location).href===new URL(e,location).href},c=function(t,e){Object.assign(this,e,{type:t})};function h(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function l(t,e,i){return i?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function d(){}var u=function(t){var e,i;function u(e,i){var n;return void 0===i&&(i={}),(n=t.call(this)||this).t=e,n.i=i,n.o=0,n.u=new o,n.s=new o,n.h=new o,n.v=n.v.bind(a(a(n))),n.l=n.l.bind(a(a(n))),n.g=n.g.bind(a(a(n))),n.m=n.m.bind(a(a(n))),n}i=t,(e=u).prototype=Object.create(i.prototype),e.prototype.constructor=e,e.__proto__=i;var m,p,g=u.prototype;return g.register=h((function(t){var e,i,n=this,s=(void 0===t?{}:t).immediate,a=void 0!==s&&s;return e=function(){return n.p=Boolean(navigator.serviceWorker.controller),n.P=n.R(),l(n.k(),(function(t){n.B=t,n.P&&(n.O=n.P,n.s.resolve(n.P),n.h.resolve(n.P),n.j(n.P),n.P.addEventListener("statechange",n.l,{once:!0}));var e=n.B.waiting;return e&&r(e.scriptURL,n.t)&&(n.O=e,Promise.resolve().then((function(){n.dispatchEvent(new c("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),n.O&&n.u.resolve(n.O),n.B.addEventListener("updatefound",n.g),navigator.serviceWorker.addEventListener("controllerchange",n.m,{once:!0}),"BroadcastChannel"in self&&(n.C=new BroadcastChannel("workbox"),n.C.addEventListener("message",n.v)),navigator.serviceWorker.addEventListener("message",n.v),n.B}))},(i=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(d):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&i.then?i.then(e):e()})),g.getSW=h((function(){return this.O||this.u.promise})),g.messageSW=h((function(t){return l(this.getSW(),(function(e){return n(e,t)}))})),g.R=function(){var t=navigator.serviceWorker.controller;if(t&&r(t.scriptURL,this.t))return t},g.k=h((function(){var t=this;return function(t,e){try{var i=t()}catch(t){return e(t)}return i&&i.then?i.then(void 0,e):i}((function(){return l(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),g.j=function(t){n(t,{type:"WINDOW_READY",meta:"workbox-window"})},g.g=function(){var t=this.B.installing;this.o>0||!r(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},g.l=function(t){var e=this,i=t.target,n=i.state,s=i===this.W,a=s?"external":"",o={sw:i,originalEvent:t};!s&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new c(a+n,o)),"installed"===n?this._=setTimeout((function(){"installed"===n&&e.B.waiting===i&&e.dispatchEvent(new c(a+"waiting",o))}),200):"activating"===n&&(clearTimeout(this._),s||this.s.resolve(i))},g.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new c("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},g.v=function(t){var e=t.data;this.dispatchEvent(new c("message",{data:e,originalEvent:t}))},m=u,(p=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&s(m.prototype,p),u}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}())}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var a=e[n]={exports:{}};return t[n].call(a.exports,a,a.exports,i),a.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{"use strict";i.r(n);var t=i("./src/data/index.ts"),e=i("./src/sceneHandler/index.ts"),s=i("./src/constants/index.ts"),a=i("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/common/index.ts"),c=i("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(t){this.lang=t,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new o.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const e=await r.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),await this.loadTitleFeedbackCustomFont(),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const i=await(0,t.getData)();this.majVersion=i.majversion,this.minVersion=i.minversion,this.dataModal=this.createDataModal(i),this.globalInitialization(i),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)}));const n=localStorage.getItem(this.lang+"gamePlayedInfo"),a=n?JSON.parse(n).length-1:0,o=r.Debugger.DebugMode?s.PreviousPlayedLevel+this.lang+"Debug":s.PreviousPlayedLevel+this.lang;localStorage.setItem(o,a.toString()),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}async loadTitleFeedbackCustomFont(){const e=t.customFonts[this.lang]||t.customFonts.default,i=`'${e}', sans-serif`;await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((t=>{t&&(t.style.fontFamily=i)}))}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let i=parseInt(t);isNaN(i)||(e=Math.abs((new Date).getTime()-i))}const i=parseFloat((e?e/864e5:0).toFixed(3)),n={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:i};this.firebaseIntegration.sendSessionStartEvent(n)}logSessionEndFirebaseEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(s.IsCached);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const i=await caches.open("fontCache");if(!await i.match(e)){const t=await fetch(e),n=await t.blob();await i.put(e,new Response(n))}const n=new FontFace(t,`url(${e}) format('truetype')`);await n.load(),document.fonts.add(n)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const e=new a.Workbox("./sw.js",{});await e.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(t.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async t=>{if(!t.ok)return void console.error("Failed to fetch the content file from the server!");const e=await t.json(),i=e.majversion+"."+e.minversion,n=localStorage.getItem("version"+r.lang.toLowerCase());if(i&&n!=i){console.log("Content version mismatch! Reloading...");var a=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+r.lang);var o=a.filter((t=>!t.toString().includes(r.lang)));localStorage.setItem(s.IsCached,JSON.stringify(o)),localStorage.removeItem("version"+r.lang.toLowerCase()),caches.delete(r.lang),this.handleUpdateFoundMessage()}})).catch((t=>{console.error("Error fetching the content file: "+t)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(e){return new t.DataModal(e.title,e.OtherAudios,e.Levels,e.FeedbackTexts,e.RightToLeft,e.FeedbackAudios,e.majversion,e.minversion,e.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const e=Math.min(100,Math.max(0,t.data));e>this.currentProgress&&(this.currentProgress=e,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(t){return 100===t&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(s.IsCached,JSON.stringify(Array.from(this.is_cached.entries())))}catch(t){console.error("Error caching language:",t)}}sendCompletionEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(t)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(t){console.error("Error hiding loading screen:",t)}}handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,r.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=s.AUDIO_URL_PRELOAD;return new Promise(((e,i)=>{const n=t.map((t=>(new c.AudioPlayer).preloadGameAudio(t)));Promise.all(n).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),i(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLMDZGLGNBQ3RDN3lGLFVBQVVreEYsZUFDVmx4RixVQUFVa3hGLGNBQWNscUUsb0JBQW9CLFVBQVc3dUIsS0FBS3c2RiwyQkFHcEUsR0FFZ0IsRUFBQXI2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQHJpdmUtYXBwL2NhbnZhcy9yaXZlLmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvRmlyZWJhc2UvYmFzZS1maXJlYmFzZS1pbnRlZ3JhdGlvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWNvbmZpZy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWludGVncmF0aW9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL2V2ZW50LW5hbWVzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL2dsb2JhbC12YXJpYWJsZXMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21tb24vc3RvbmUtY29uZmlnLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL3V0aWxzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9hdWRpby1wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvY2FuY2VsLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9jbG9zZS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvbGV2ZWwtYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL25leHQtYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL25vLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9wYXVzZS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvcGxheS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvcmV0cnktYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL3llcy1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2ZlZWRiYWNrLXRleHQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2xldmVsLWluZGljYXRvci50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvbW9uc3Rlci50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvcG9wdXBzL3BhdXNlLXBvcHVwLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvc3VyZS1wb3B1cC50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvcHJvbXB0LXRleHQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3JpdmVNb25zdGVyL2luZGV4LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9zdG9uZS1oYW5kbGVyLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy90aW1lci10aWNraW5nLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy90cmFpbC1wYXJ0aWNsZXMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3R1dG9yaWFsLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9zaXRpb25zL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb3NpdGlvbnMvbGV2ZWwtY29uZmlnLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9hcGktZGF0YS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2RhdGEvY3VzdG9tLWZvbnRzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9kYXRhLW1vZGFsLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9nYW1lLXNjb3JlLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9pMTgtZm9udC1tYXBwaW5nLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZXZlbnRzL2luZGV4LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZ2FtZXB1enpsZXMvd29yZFB1enpsZUxvZ2ljLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVIYW5kbGVyL2luZGV4LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL2dhbWVwbGF5LXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL2xldmVsLXNlbGVjdGlvbi1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9sZXZlbGVuZC1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9sb2FkaW5nLXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL3N0YXJ0LXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL3Rlc3QtZ2FtZXBsYXktc2NlbmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYW5hbHl0aWNzL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvYXBwL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvY29tcG9uZW50L2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9kaXN0L2VzbS9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2luc3RhbGxhdGlvbnMvbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvd3JhcC1pZGItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvbG9nZ2VyL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9lc20vaW5kZXguZXNtLmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL3dyYXAtaWRiLXZhbHVlLmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvd29ya2JveC13aW5kb3cvYnVpbGQvd29ya2JveC13aW5kb3cucHJvZC5lczUubWpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vZmVlZFRoZU1vbnN0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbmNvbnN0IENPTlNUQU5UUyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQ0xJRU5UOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBBZG1pbiBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9BRE1JTjogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKi9cclxuY29uc3QgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICovXHJcbmNvbnN0IGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcclxuICAgICAgICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxyXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXHJcbiAqL1xyXG5jb25zdCBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHBvcyA9IDAsIGMgPSAwO1xyXG4gICAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gKCgoYzEgJiA3KSA8PCAxOCkgfCAoKGMyICYgNjMpIDw8IDEyKSB8ICgoYzMgJiA2MykgPDwgNikgfCAoYzQgJiA2MykpIC1cclxuICAgICAgICAgICAgICAgIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodSA+PiAxMCkpO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XHJcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbmNvbnN0IGJhc2U2NCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cclxuICAgICAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyB0aGUgYXRvYiBhbmQgYnRvYSBmdW5jdGlvbnMuIFRoaXMgZXh0ZW5zaW9uXHJcbiAgICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXHJcbiAgICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcclxuICAgICAqIGJ1dCBzdGlsbCBhbGxvd2luZyB0aGUgc3RhbmRhcmQgcGVyLWJyb3dzZXIgY29tcGlsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcclxuICAgICAgICAgICAgbGV0IG91dEJ5dGU0ID0gYnl0ZTMgJiAweDNmO1xyXG4gICAgICAgICAgICBpZiAoIWhhdmVCeXRlMykge1xyXG4gICAgICAgICAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcclxuICAgICAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0Qnl0ZTMgPSA2NDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChieXRlVG9DaGFyTWFwW291dEJ5dGUxXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLCBieXRlVG9DaGFyTWFwW291dEJ5dGU0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkkMShpbnB1dCksIHdlYlNhZmUpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgY29uc3QgY2hhclRvQnl0ZU1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuY2hhclRvQnl0ZU1hcF87XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEFuIGVycm9yIGVuY291bnRlcmVkIHdoaWxlIGRlY29kaW5nIGJhc2U2NCBzdHJpbmcuXHJcbiAqL1xyXG5jbGFzcyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0RlY29kZUJhc2U2NFN0cmluZ0Vycm9yJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqL1xyXG5jb25zdCBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBjb25zdCB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheSQxKHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nICh3aXRob3V0IFwiLlwiIHBhZGRpbmcgaW4gdGhlIGVuZCkuXHJcbiAqIGUuZy4gVXNlZCBpbiBKU09OIFdlYiBUb2tlbiAoSldUKSBwYXJ0cy5cclxuICovXHJcbmNvbnN0IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVXNlIGJhc2U2NHVybCBlbmNvZGluZyBhbmQgcmVtb3ZlIHBhZGRpbmcgaW4gdGhlIGVuZCAoZG90IGNoYXJhY3RlcnMpLlxyXG4gICAgcmV0dXJuIGJhc2U2NEVuY29kZShzdHIpLnJlcGxhY2UoL1xcLi9nLCAnJyk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcclxuICpcclxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXHJcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcclxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbmNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwQ29weSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cclxuICogb2YgT2JqZWN0cyBhbmQgQXJyYXlzKS4gIFNjYWxhciB2YWx1ZXMgaW4gdGhlIHRhcmdldCBhcmUgb3Zlci13cml0dGVuLlxyXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIChhbmQgcmV0dXJuZWQpLlxyXG4gKlxyXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cclxuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXHJcbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgY29uc3QgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBzb3VyY2UpIHtcclxuICAgICAgICAvLyB1c2UgaXNWYWxpZEtleSB0byBndWFyZCBhZ2FpbnN0IHByb3RvdHlwZSBwb2xsdXRpb24uIFNlZSBodHRwczovL3NueWsuaW8vdnVsbi9TTllLLUpTLUxPREFTSC00NTAyMDJcclxuICAgICAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCAhaXNWYWxpZEtleShwcm9wKSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4ga2V5ICE9PSAnX19wcm90b19fJztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QuJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsID0gKCkgPT4gZ2V0R2xvYmFsKCkuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4vKipcclxuICogQXR0ZW1wdCB0byByZWFkIGRlZmF1bHRzIGZyb20gYSBKU09OIHN0cmluZyBwcm92aWRlZCB0b1xyXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cclxuICogcHJvY2VzcyguKWVudiguKV9fRklSRUJBU0VfREVGQVVMVFNfUEFUSF9fXHJcbiAqIFRoZSBkb3RzIGFyZSBpbiBwYXJlbnMgYmVjYXVzZSBjZXJ0YWluIGNvbXBpbGVycyAoVml0ZT8pIGNhbm5vdFxyXG4gKiBoYW5kbGUgc2VlaW5nIHRoYXQgdmFyaWFibGUgaW4gY29tbWVudHMuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82ODM4XHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHByb2Nlc3MuZW52ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGRlZmF1bHRzSnNvblN0cmluZyA9IHByb2Nlc3MuZW52Ll9fRklSRUJBU0VfREVGQVVMVFNfXztcclxuICAgIGlmIChkZWZhdWx0c0pzb25TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWZhdWx0c0pzb25TdHJpbmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21Db29raWUgPSAoKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBtYXRjaDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goL19fRklSRUJBU0VfREVGQVVMVFNfXz0oW147XSspLyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQW5ndWxhciBVbml2ZXJzYWwgU1NSIGhhdmUgYVxyXG4gICAgICAgIC8vIGBkb2N1bWVudGAgb2JqZWN0IGJ1dCBlcnJvciBvbiBhY2Nlc3NpbmcgYGRvY3VtZW50LmNvb2tpZWAuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjb2RlZCA9IG1hdGNoICYmIGJhc2U2NERlY29kZShtYXRjaFsxXSk7XHJcbiAgICByZXR1cm4gZGVjb2RlZCAmJiBKU09OLnBhcnNlKGRlY29kZWQpO1xyXG59O1xyXG4vKipcclxuICogR2V0IHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LiBJdCBjaGVja3MgaW4gb3JkZXI6XHJcbiAqICgxKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgYXMgYSBwcm9wZXJ0eSBvZiBgZ2xvYmFsVGhpc2BcclxuICogKDIpIGlmIHN1Y2ggYW4gb2JqZWN0IHdhcyBwcm92aWRlZCBvbiBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqICgzKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgaW4gYSBjb29raWVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcclxuICAgICAgICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21Db29raWUoKSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXHJcbiAgICAgICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXHJcbiAgICAgICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xyXG4gICAgICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAocHJvZHVjdE5hbWUpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbXVsYXRvckhvc3RzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbcHJvZHVjdE5hbWVdOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0bmFtZSBhbmQgcG9ydCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcclxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxyXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0ID0gKHByb2R1Y3ROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XHJcbiAgICBpZiAoIWhvc3QpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cclxuICAgIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xyXG4gICAgaWYgKGhvc3RbMF0gPT09ICdbJykge1xyXG4gICAgICAgIC8vIEJyYWNrZXQtcXVvdGVkIGBbaXB2NmFkZHJdOnBvcnRgID0+IHJldHVybiBcImlwdjZhZGRyXCIgKHdpdGhvdXQgYnJhY2tldHMpLlxyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMSwgc2VwYXJhdG9ySW5kZXggLSAxKSwgcG9ydF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xyXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtgXyR7bmFtZX1gXTsgfTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgd3JhcENhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcnJvciwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKHRva2VuLCBwcm9qZWN0SWQpIHtcclxuICAgIGlmICh0b2tlbi51aWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nKTtcclxuICAgIH1cclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxyXG4gICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgIGFsZzogJ25vbmUnLFxyXG4gICAgICAgIHR5cGU6ICdKV1QnXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcclxuICAgIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xyXG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XHJcbiAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7IFxyXG4gICAgICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xyXG4gICAgICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCwgYXVkOiBwcm9qZWN0LCBpYXQsIGV4cDogaWF0ICsgMzYwMCwgYXV0aF90aW1lOiBpYXQsIHN1YiwgdXNlcl9pZDogc3ViLCBmaXJlYmFzZToge1xyXG4gICAgICAgICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgaWRlbnRpdGllczoge31cclxuICAgICAgICB9IH0sIHRva2VuKTtcclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIF0uam9pbignLicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXHJcbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFVBKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcclxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxyXG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcclxuICAgICAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cclxuICAgICAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxyXG4gICAgICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpKTtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IE5vZGUuanMuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkIG9yIHNwZWNpZmllZC5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG5mdW5jdGlvbiBpc05vZGUoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBmb3JjZUVudmlyb25tZW50ID0gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvcmNlRW52aXJvbm1lbnQ7XHJcbiAgICBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmb3JjZUVudmlyb25tZW50ID09PSAnYnJvd3NlcicpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGY7XHJcbn1cclxuZnVuY3Rpb24gaXNCcm93c2VyRXh0ZW5zaW9uKCkge1xyXG4gICAgY29uc3QgcnVudGltZSA9IHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnXHJcbiAgICAgICAgPyBjaHJvbWUucnVudGltZVxyXG4gICAgICAgIDogdHlwZW9mIGJyb3dzZXIgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgID8gYnJvd3Nlci5ydW50aW1lXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBydW50aW1lID09PSAnb2JqZWN0JyAmJiBydW50aW1lLmlkICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnKTtcclxufVxyXG4vKiogRGV0ZWN0cyBFbGVjdHJvbiBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc0VsZWN0cm9uKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignRWxlY3Ryb24vJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBJbnRlcm5ldCBFeHBsb3Jlci4gKi9cclxuZnVuY3Rpb24gaXNJRSgpIHtcclxuICAgIGNvbnN0IHVhID0gZ2V0VUEoKTtcclxuICAgIHJldHVybiB1YS5pbmRleE9mKCdNU0lFICcpID49IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIFVuaXZlcnNhbCBXaW5kb3dzIFBsYXRmb3JtIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzVVdQKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignTVNBcHBIb3N0LycpID49IDA7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCB3aGV0aGVyIHRoZSBjdXJyZW50IFNESyBidWlsZCBpcyB0aGUgTm9kZSB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaXQncyB0aGUgTm9kZSBTREsgYnVpbGQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc05vZGVTZGsoKSB7XHJcbiAgICByZXR1cm4gQ09OU1RBTlRTLk5PREVfQ0xJRU5UID09PSB0cnVlIHx8IENPTlNUQU5UUy5OT0RFX0FETUlOID09PSB0cnVlO1xyXG59XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gU2FmYXJpLiAqL1xyXG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcclxuICAgIHJldHVybiAoIWlzTm9kZSgpICYmXHJcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnU2FmYXJpJykgJiZcclxuICAgICAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJykpO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmRleGVkREJBdmFpbGFibGUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5kZXhlZERCID09PSAnb2JqZWN0JztcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XHJcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XHJcbiAqIHByaXZhdGUgYnJvd3NpbmcpXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgcHJlRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBEQl9DSEVDS19OQU1FID0gJ3ZhbGlkYXRlLWJyb3dzZXItY29udGV4dC1mb3ItaW5kZXhlZGRiLWFuYWx5dGljcy1tb2R1bGUnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGRhdGFiYXNlIG9ubHkgd2hlbiBpdCBkb2Vzbid0IHByZS1leGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmVFeGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKChfYSA9IHJlcXVlc3QuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB8fCAnJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3Mgd2hldGhlciBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqL1xyXG5mdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTdGFuZGFyZGl6ZWQgRmlyZWJhc2UgRXJyb3IuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKlxyXG4gKiAgIC8vIFR5cGVzY3JpcHQgc3RyaW5nIGxpdGVyYWxzIGZvciB0eXBlLXNhZmUgY29kZXNcclxuICogICB0eXBlIEVyciA9XHJcbiAqICAgICAndW5rbm93bicgfFxyXG4gKiAgICAgJ29iamVjdC1ub3QtZm91bmQnXHJcbiAqICAgICA7XHJcbiAqXHJcbiAqICAgLy8gQ2xvc3VyZSBlbnVtIGZvciB0eXBlLXNhZmUgZXJyb3IgY29kZXNcclxuICogICAvLyBhdC1lbnVtIHtzdHJpbmd9XHJcbiAqICAgdmFyIEVyciA9IHtcclxuICogICAgIFVOS05PV046ICd1bmtub3duJyxcclxuICogICAgIE9CSkVDVF9OT1RfRk9VTkQ6ICdvYmplY3Qtbm90LWZvdW5kJyxcclxuICogICB9XHJcbiAqXHJcbiAqICAgbGV0IGVycm9yczogTWFwPEVyciwgc3RyaW5nPiA9IHtcclxuICogICAgICdnZW5lcmljLWVycm9yJzogXCJVbmtub3duIGVycm9yXCIsXHJcbiAqICAgICAnZmlsZS1ub3QtZm91bmQnOiBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IHskZmlsZX1cIixcclxuICogICB9O1xyXG4gKlxyXG4gKiAgIC8vIFR5cGUtc2FmZSBmdW5jdGlvbiAtIG11c3QgcGFzcyBhIHZhbGlkIGVycm9yIGNvZGUgYXMgcGFyYW0uXHJcbiAqICAgbGV0IGVycm9yID0gbmV3IEVycm9yRmFjdG9yeTxFcnI+KCdzZXJ2aWNlJywgJ1NlcnZpY2UnLCBlcnJvcnMpO1xyXG4gKlxyXG4gKiAgIC4uLlxyXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuR0VORVJJQyk7XHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5GSUxFX05PVF9GT1VORCwgeydmaWxlJzogZmlsZU5hbWV9KTtcclxuICogICAuLi5cclxuICogICAvLyBTZXJ2aWNlOiBDb3VsZCBub3QgZmlsZSBmaWxlOiBmb28udHh0IChzZXJ2aWNlL2ZpbGUtbm90LWZvdW5kKS5cclxuICpcclxuICogICBjYXRjaCAoZSkge1xyXG4gKiAgICAgYXNzZXJ0KGUubWVzc2FnZSA9PT0gXCJDb3VsZCBub3QgZmluZCBmaWxlOiBmb28udHh0LlwiKTtcclxuICogICAgIGlmICgoZSBhcyBGaXJlYmFzZUVycm9yKT8uY29kZSA9PT0gJ3NlcnZpY2UvZmlsZS1ub3QtZm91bmQnKSB7XHJcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IHJlYWQgZmlsZTogXCIgKyBlWydmaWxlJ10pO1xyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICovXHJcbmNvbnN0IEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbi8vIEJhc2VkIG9uIGNvZGUgZnJvbTpcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXHJcbmNsYXNzIEZpcmViYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKiBUaGUgZXJyb3IgY29kZSBmb3IgdGhpcyBlcnJvci4gKi9cclxuICAgIGNvZGUsIG1lc3NhZ2UsIFxyXG4gICAgLyoqIEN1c3RvbSBkYXRhIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcclxuICAgICAgICAvKiogVGhlIGN1c3RvbSBuYW1lIGZvciBhbGwgRmlyZWJhc2VFcnJvcnMuICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gRVJST1JfTkFNRTtcclxuICAgICAgICAvLyBGaXggRm9yIEVTNVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZpcmViYXNlRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICAvLyBNYWludGFpbnMgcHJvcGVyIHN0YWNrIHRyYWNlIGZvciB3aGVyZSBvdXIgZXJyb3Igd2FzIHRocm93bi5cclxuICAgICAgICAvLyBPbmx5IGF2YWlsYWJsZSBvbiBWOC5cclxuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcclxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jbGFzcyBFcnJvckZhY3Rvcnkge1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZSwgc2VydmljZU5hbWUsIGVycm9ycykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlTmFtZSA9IHNlcnZpY2VOYW1lO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKGNvZGUsIC4uLmRhdGEpIHtcclxuICAgICAgICBjb25zdCBjdXN0b21EYXRhID0gZGF0YVswXSB8fCB7fTtcclxuICAgICAgICBjb25zdCBmdWxsQ29kZSA9IGAke3RoaXMuc2VydmljZX0vJHtjb2RlfWA7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLmVycm9yc1tjb2RlXTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcclxuICAgICAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXHJcbiAgICAgICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBgJHt0aGlzLnNlcnZpY2VOYW1lfTogJHttZXNzYWdlfSAoJHtmdWxsQ29kZX0pLmA7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgZnVsbE1lc3NhZ2UsIGN1c3RvbURhdGEpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIChfLCBrZXkpID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFba2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBgPCR7a2V5fT8+YDtcclxuICAgIH0pO1xyXG59XHJcbmNvbnN0IFBBVFRFUk4gPSAvXFx7XFwkKFtefV0rKX0vZztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEV2YWx1YXRlcyBhIEpTT04gc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHN0cmluZyBjb250YWluaW5nIEpTT04uXHJcbiAqIEByZXR1cm4geyp9IFRoZSBqYXZhc2NyaXB0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBKU09OLlxyXG4gKi9cclxuZnVuY3Rpb24ganNvbkV2YWwoc3RyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50aW5nIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YSBKYXZhc2NyaXB0IG9iamVjdCB0byBiZSBzdHJpbmdpZmllZC5cclxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgSlNPTiBjb250ZW50cyBvZiB0aGUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5KGRhdGEpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGludG8gY29uc3RpdHVlbnQgcGFydHMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gd2l0aCBpbnZhbGlkIC8gaW5jb21wbGV0ZSBjbGFpbXMgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGxldCBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcclxuICAgICAgICBoZWFkZXIgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMF0pIHx8ICcnKTtcclxuICAgICAgICBjbGFpbXMgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMV0pIHx8ICcnKTtcclxuICAgICAgICBzaWduYXR1cmUgPSBwYXJ0c1syXTtcclxuICAgICAgICBkYXRhID0gY2xhaW1zWydkJ10gfHwge307XHJcbiAgICAgICAgZGVsZXRlIGNsYWltc1snZCddO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAgc2lnbmF0dXJlXHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyB0aW1lLWJhc2VkIGNsYWltcy4gV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGVcclxuICogdG9rZW4gaXMgd2l0aGluIHRoZSB0aW1lIHdpbmRvdyBhdXRob3JpemVkIGJ5IHRoZSAnbmJmJyAobm90LWJlZm9yZSkgYW5kICdpYXQnIChpc3N1ZWQtYXQpIGNsYWltcy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZFRpbWVzdGFtcCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XHJcbiAgICBsZXQgdmFsaWRTaW5jZSA9IDAsIHZhbGlkVW50aWwgPSAwO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCEhbm93ICYmXHJcbiAgICAgICAgISF2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgISF2YWxpZFVudGlsICYmXHJcbiAgICAgICAgbm93ID49IHZhbGlkU2luY2UgJiZcclxuICAgICAgICBub3cgPD0gdmFsaWRVbnRpbCk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIHJldHVybnMgaXRzIGlzc3VlZCBhdCB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBudWxsIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNzdWVkQXRUaW1lID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUodG9rZW4pLCBjbGFpbXMgPSBkZWNvZGVkLmNsYWltcztcclxuICAgIHJldHVybiAhIWNsYWltcyAmJiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpO1xyXG59O1xyXG4vKipcclxuICogQXR0ZW1wdHMgdG8gcGVlciBpbnRvIGFuIGF1dGggdG9rZW4gYW5kIGRldGVybWluZSBpZiBpdCdzIGFuIGFkbWluIGF1dGggdG9rZW4gYnkgbG9va2luZyBhdCB0aGUgY2xhaW1zIHBvcnRpb24uXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltc1snYWRtaW4nXSA9PT0gdHJ1ZTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gY29udGFpbnMob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNhZmVHZXQob2JqLCBrZXkpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIG1hcChvYmosIGZuLCBjb250ZXh0T2JqKSB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gZm4uY2FsbChjb250ZXh0T2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyoqXHJcbiAqIERlZXAgZXF1YWwgdHdvIG9iamVjdHMuIFN1cHBvcnQgQXJyYXlzIGFuZCBPYmplY3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcclxuICAgIGZvciAoY29uc3QgayBvZiBhS2V5cykge1xyXG4gICAgICAgIGlmICghYktleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhUHJvcCA9IGFba107XHJcbiAgICAgICAgY29uc3QgYlByb3AgPSBiW2tdO1xyXG4gICAgICAgIGlmIChpc09iamVjdChhUHJvcCkgJiYgaXNPYmplY3QoYlByb3ApKSB7XHJcbiAgICAgICAgICAgIGlmICghZGVlcEVxdWFsKGFQcm9wLCBiUHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhUHJvcCAhPT0gYlByb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgayBvZiBiS2V5cykge1xyXG4gICAgICAgIGlmICghYUtleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVqZWN0cyBpZiB0aGUgZ2l2ZW4gcHJvbWlzZSBkb2Vzbid0IHJlc29sdmUgaW4gdGltZUluTVMgbWlsbGlzZWNvbmRzLlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIHByb21pc2VXaXRoVGltZW91dChwcm9taXNlLCB0aW1lSW5NUyA9IDIwMDApIHtcclxuICAgIGNvbnN0IGRlZmVycmVkUHJvbWlzZSA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBkZWZlcnJlZFByb21pc2UucmVqZWN0KCd0aW1lb3V0IScpLCB0aW1lSW5NUyk7XHJcbiAgICBwcm9taXNlLnRoZW4oZGVmZXJyZWRQcm9taXNlLnJlc29sdmUsIGRlZmVycmVkUHJvbWlzZS5yZWplY3QpO1xyXG4gICAgcmV0dXJuIGRlZmVycmVkUHJvbWlzZS5wcm9taXNlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxyXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zKSB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5c3RyaW5nUGFyYW1zKSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGFycmF5VmFsID0+IHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcclxufVxyXG4vKipcclxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3RcclxuICogKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqL1xyXG5mdW5jdGlvbiBxdWVyeXN0cmluZ0RlY29kZShxdWVyeXN0cmluZykge1xyXG4gICAgY29uc3Qgb2JqID0ge307XHJcbiAgICBjb25zdCB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XHJcbiAgICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHRva2VuLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIG9ialtkZWNvZGVVUklDb21wb25lbnQoa2V5KV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG4vKipcclxuICogRXh0cmFjdCB0aGUgcXVlcnkgc3RyaW5nIHBhcnQgb2YgYSBVUkwsIGluY2x1ZGluZyB0aGUgbGVhZGluZyBxdWVzdGlvbiBtYXJrIChpZiBwcmVzZW50KS5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RRdWVyeXN0cmluZyh1cmwpIHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RhcnQgPSB1cmwuaW5kZXhPZignPycpO1xyXG4gICAgaWYgKCFxdWVyeVN0YXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhZ21lbnRTdGFydCA9IHVybC5pbmRleE9mKCcjJywgcXVlcnlTdGFydCk7XHJcbiAgICByZXR1cm4gdXJsLnN1YnN0cmluZyhxdWVyeVN0YXJ0LCBmcmFnbWVudFN0YXJ0ID4gMCA/IGZyYWdtZW50U3RhcnQgOiB1bmRlZmluZWQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cclxuICogVmFyaWFibGUgbmFtZXMgZm9sbG93IHRoZSBub3RhdGlvbiBpbiBGSVBTIFBVQiAxODAtMzpcclxuICogaHR0cDovL2NzcmMubmlzdC5nb3YvcHVibGljYXRpb25zL2ZpcHMvZmlwczE4MC0zL2ZpcHMxODAtM19maW5hbC5wZGYuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiAgIHZhciBzaGExID0gbmV3IHNoYTEoKTtcclxuICogICBzaGExLnVwZGF0ZShieXRlcyk7XHJcbiAqICAgdmFyIGhhc2ggPSBzaGExLmRpZ2VzdCgpO1xyXG4gKlxyXG4gKiBQZXJmb3JtYW5jZTpcclxuICogICBDaHJvbWUgMjM6ICAgfjQwMCBNYml0L3NcclxuICogICBGaXJlZm94IDE2OiAgfjI1MCBNYml0L3NcclxuICpcclxuICovXHJcbi8qKlxyXG4gKiBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2ggY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBwcm9wZXJ0aWVzIGRlY2xhcmVkIGhlcmUgYXJlIGRpc2N1c3NlZCBpbiB0aGUgYWJvdmUgYWxnb3JpdGhtIGRvY3VtZW50LlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbmNsYXNzIFNoYTEge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgdGhlIHByZXZpb3VzIHZhbHVlcyBvZiBhY2N1bXVsYXRlZCB2YXJpYWJsZXMgYS1lIGluIHRoZSBjb21wcmVzc19cclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLldfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICB0aGlzLnBhZF9bMF0gPSAxMjg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIGJ1ZiBCbG9jayB0byBjb21wcmVzcy5cclxuICAgICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29tcHJlc3NfKGJ1Ziwgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgVyA9IHRoaXMuV187XHJcbiAgICAgICAgLy8gZ2V0IDE2IGJpZyBlbmRpYW4gd29yZHNcclxuICAgICAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHVzZXIpOiBbYnVnIDgxNDAxMjJdIFJlY2VudCB2ZXJzaW9ucyBvZiBTYWZhcmkgZm9yIE1hYyBPUyBhbmQgaU9TXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gIFdlIGhhdmUgY29kZSB0aGF0IGRlcGVuZHMgaGVhdmlseSBvbiBTSEEtMSBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3RuZXNzIGFuZCB3aGljaCBpcyBhZmZlY3RlZCBieSB0aGlzIGJ1Zywgc28gSSd2ZSByZW1vdmVkIGFsbCB1c2VzXHJcbiAgICAgICAgICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNoYW5nZSBvbmNlIHRoZSBTYWZhcmkgYnVnXHJcbiAgICAgICAgICAgICAgICAvLyAoaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEwOTAzNikgaGFzIGJlZW4gZml4ZWQgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0KSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMyk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldF0gPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvZmZzZXQgKyAxXSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmW29mZnNldCArIDNdO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXhwYW5kIHRvIDgwIHdvcmRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICBsZXQgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIGxldCBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgbGV0IGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICBsZXQgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIGxldCBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBlID0gZDtcclxuICAgICAgICAgICAgZCA9IGM7XHJcbiAgICAgICAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMV0gPSAodGhpcy5jaGFpbl9bMV0gKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAodGhpcy5jaGFpbl9bMl0gKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bNF0gPSAodGhpcy5jaGFpbl9bNF0gKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoYnl0ZXMsIGxlbmd0aCkge1xyXG4gICAgICAgIC8vIFRPRE8oam9obmxlbnopOiB0aWdodGVuIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kIHJlbW92ZSB0aGlzIGNoZWNrXHJcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZW5ndGhNaW51c0Jsb2NrID0gbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMuYnVmXztcclxuICAgICAgICBsZXQgaW5idWYgPSB0aGlzLmluYnVmXztcclxuICAgICAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxyXG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8PSBsZW5ndGhNaW51c0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnl0ZXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5idWZfID0gaW5idWY7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgZGlnZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IFtdO1xyXG4gICAgICAgIGxldCB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsXyAqIDg7XHJcbiAgICAgICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxyXG4gICAgICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgNTYgLSB0aGlzLmluYnVmXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkICMgYml0cy5cclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xyXG4gICAgICAgICAgICB0b3RhbEJpdHMgLz0gMjU2OyAvLyBEb24ndCB1c2UgYml0LXNoaWZ0aW5nIGhlcmUhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcclxuICAgICAgICAgICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcclxuICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlnZXN0O1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXHJcbiAqIFRoZW5hYmxlKS5cclxuICpcclxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAqICAgICBhcyBhIHByb3h5LlxyXG4gKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdWJzY3JpYmUoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpO1xyXG4gICAgcmV0dXJuIHByb3h5LnN1YnNjcmliZS5iaW5kKHByb3h5KTtcclxufVxyXG4vKipcclxuICogSW1wbGVtZW50IGZhbi1vdXQgZm9yIGFueSBudW1iZXIgb2YgT2JzZXJ2ZXJzIGF0dGFjaGVkIHZpYSBhIHN1YnNjcmliZVxyXG4gKiBmdW5jdGlvbi5cclxuICovXHJcbmNsYXNzIE9ic2VydmVyUHJveHkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICAgICAqICAgICBhcyBhIHByb3h5LlxyXG4gICAgICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBleGVjdXRvcih0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBuZXh0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXJyb3IoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBhZGQgYW4gT2JzZXJ2ZXIgdG8gdGhlIGZhbi1vdXQgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcclxuICAgICAqICAgY2FsbCB0byBzdWJzY3JpYmUoKS5cclxuICAgICAqL1xyXG4gICAgc3Vic2NyaWJlKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICBsZXQgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFtcclxuICAgICAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICAgICAnZXJyb3InLFxyXG4gICAgICAgICAgICAnY29tcGxldGUnXHJcbiAgICAgICAgXSkpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5uZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcclxuICAgICAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXHJcbiAgICAgICAgLy8gZXZlbnQuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5hbEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKHRoaXMuZmluYWxFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIHVuc3ViO1xyXG4gICAgfVxyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICB1bnN1YnNjcmliZU9uZShpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3JFYWNoT2JzZXJ2ZXIoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBjbG9zZWQgYnkgcHJldmlvdXMgZXZlbnQuLi4uanVzdCBlYXQgdGhlIGFkZGl0aW9uYWwgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpbmNlIHNlbmRPbmUgY2FsbHMgYXN5bmNocm9ub3VzbHkgLSB0aGVyZSBpcyBubyBjaGFuY2UgdGhhdFxyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2ZXJzIHdpbGwgYmVjb21lIHVuZGVmaW5lZC5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2FsbCB0aGUgT2JzZXJ2ZXIgdmlhIG9uZSBvZiBpdCdzIGNhbGxiYWNrIGZ1bmN0aW9uLiBXZSBhcmUgY2FyZWZ1bCB0b1xyXG4gICAgLy8gY29uZmlybSB0aGF0IHRoZSBvYnNlcnZlIGhhcyBub3QgYmVlbiB1bnN1YnNjcmliZWQgc2luY2UgdGhpcyBhc3luY2hyb25vdXNcclxuICAgIC8vIGZ1bmN0aW9uIGhhZCBiZWVuIHF1ZXVlZC5cclxuICAgIHNlbmRPbmUoaSwgZm4pIHtcclxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFjayBhc3luY2hyb25vdXNseVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4odGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ic2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZShlcnIpIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmZ1bmN0aW9uIGFzeW5jKGZuLCBvbkVycm9yKSB7XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUodHJ1ZSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBmbiguLi5hcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XHJcbiAgICAgICAgaWYgKG1ldGhvZCBpbiBvYmogJiYgdHlwZW9mIG9ialttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBub29wKCkge1xyXG4gICAgLy8gZG8gbm90aGluZ1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cclxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBtaW5Db3VudCBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGVBcmdDb3VudCA9IGZ1bmN0aW9uIChmbk5hbWUsIG1pbkNvdW50LCBtYXhDb3VudCwgYXJnQ291bnQpIHtcclxuICAgIGxldCBhcmdFcnJvcjtcclxuICAgIGlmIChhcmdDb3VudCA8IG1pbkNvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSAnYXQgbGVhc3QgJyArIG1pbkNvdW50O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYXJnQ291bnQgPiBtYXhDb3VudCkge1xyXG4gICAgICAgIGFyZ0Vycm9yID0gbWF4Q291bnQgPT09IDAgPyAnbm9uZScgOiAnbm8gbW9yZSB0aGFuICcgKyBtYXhDb3VudDtcclxuICAgIH1cclxuICAgIGlmIChhcmdFcnJvcikge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBhcmdOYW1lIFRoZSBuYW1lIG9mIHRoZSBhcmd1bWVudFxyXG4gKiBAcmV0dXJuIFRoZSBwcmVmaXggdG8gYWRkIHRvIHRoZSBlcnJvciB0aHJvd24gZm9yIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBlcnJvclByZWZpeChmbk5hbWUsIGFyZ05hbWUpIHtcclxuICAgIHJldHVybiBgJHtmbk5hbWV9IGZhaWxlZDogJHthcmdOYW1lfSBhcmd1bWVudCBgO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0gZm5OYW1lXHJcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlclxyXG4gKiBAcGFyYW0gbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBvcHRpb25hbFxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UoZm5OYW1lLCBuYW1lc3BhY2UsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsICduYW1lc3BhY2UnKSArICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCBhcmd1bWVudE5hbWUsIFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5jYWxsYmFjaywgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgYXJndW1lbnROYW1lLCBjb250ZXh0LCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JyB8fCBjb250ZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgY29udGV4dCBvYmplY3QuJyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XHJcbi8vIGF1dG9tYXRpY2FsbHkgcmVwbGFjZWQgJ1xcclxcbicgd2l0aCAnXFxuJywgYW5kIHRoZXkgZGlkbid0IGhhbmRsZSBzdXJyb2dhdGUgcGFpcnMsXHJcbi8vIHNvIGl0J3MgYmVlbiBtb2RpZmllZC5cclxuLy8gTm90ZSB0aGF0IG5vdCBhbGwgVW5pY29kZSBjaGFyYWN0ZXJzIGFwcGVhciBhcyBzaW5nbGUgY2hhcmFjdGVycyBpbiBKYXZhU2NyaXB0IHN0cmluZ3MuXHJcbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xyXG4vLyB1c2UgMiBjaGFyYWN0ZXJzIGluIEphdmFzY3JpcHQuICBBbGwgNC1ieXRlIFVURi04IGNoYXJhY3RlcnMgYmVnaW4gd2l0aCBhIGZpcnN0XHJcbi8vIGNoYXJhY3RlciBpbiB0aGUgcmFuZ2UgMHhEODAwIC0gMHhEQkZGICh0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc28tY2FsbGVkIHN1cnJvZ2F0ZVxyXG4vLyBwYWlyKS5cclxuLy8gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xLjNcclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XHJcbiAgICAgICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICBjb25zdCBsb3cgPSBzdHIuY2hhckNvZGVBdChpKSAtIDB4ZGMwMDsgLy8gdGhlIGxvdyAxMCBiaXRzLlxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArIChoaWdoIDw8IDEwKSArIGxvdztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgNjU1MzYpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBsZW5ndGggd2l0aG91dCBhY3R1YWxseSBjb252ZXJ0aW5nOyB1c2VmdWwgZm9yIGRvaW5nIGNoZWFwZXIgdmFsaWRhdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdMZW5ndGggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29waWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcclxuICogR2VuZXJhdGVzIGEgbmV3IHV1aWQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IHV1aWR2NCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGMgPT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gZXhwb25lbnRpYWxseSBpbmNyZWFzZS5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfSU5URVJWQUxfTUlMTElTID0gMTAwMDtcclxuLyoqXHJcbiAqIFRoZSBmYWN0b3IgdG8gYmFja29mZiBieS5cclxuICogU2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUiA9IDI7XHJcbi8qKlxyXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcclxuICovXHJcbmNvbnN0IE1BWF9WQUxVRV9NSUxMSVMgPSA0ICogNjAgKiA2MCAqIDEwMDA7IC8vIEZvdXIgaG91cnMsIGxpa2UgaU9TIGFuZCBBbmRyb2lkLlxyXG4vKipcclxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cclxuICogU2VlXHJcbiAqIGh0dHA6Ly9nby9zYWZlLWNsaWVudC1iZWhhdmlvciNzdGVwLTEtZGV0ZXJtaW5lLXRoZS1hcHByb3ByaWF0ZS1yZXRyeS1pbnRlcnZhbC10by1oYW5kbGUtc3Bpa2UtdHJhZmZpY1xyXG4gKiBmb3IgY29udGV4dC5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgUkFORE9NX0ZBQ1RPUiA9IDAuNTtcclxuLyoqXHJcbiAqIEJhc2VkIG9uIHRoZSBiYWNrb2ZmIG1ldGhvZCBmcm9tXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL2Nsb3N1cmUvZ29vZy9tYXRoL2V4cG9uZW50aWFsYmFja29mZi5qcy5cclxuICogRXh0cmFjdGVkIGhlcmUgc28gd2UgZG9uJ3QgbmVlZCB0byBwYXNzIG1ldGFkYXRhIGFuZCBhIHN0YXRlZnVsIEV4cG9uZW50aWFsQmFja29mZiBvYmplY3QgYXJvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIGludGVydmFsTWlsbGlzID0gREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMsIGJhY2tvZmZGYWN0b3IgPSBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SKSB7XHJcbiAgICAvLyBDYWxjdWxhdGVzIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyB2YWx1ZS5cclxuICAgIC8vIERldmlhdGlvbjogY2FsY3VsYXRlcyB2YWx1ZSBmcm9tIGNvdW50IGFuZCBhIGNvbnN0YW50IGludGVydmFsLCBzbyB3ZSBvbmx5IG5lZWQgdG8gc2F2ZSB2YWx1ZVxyXG4gICAgLy8gYW5kIGNvdW50IHRvIHJlc3RvcmUgc3RhdGUuXHJcbiAgICBjb25zdCBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xyXG4gICAgLy8gQSByYW5kb20gXCJmdXp6XCIgdG8gYXZvaWQgd2F2ZXMgb2YgcmV0cmllcy5cclxuICAgIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxyXG4gICAgY29uc3QgcmFuZG9tV2FpdCA9IE1hdGgucm91bmQoXHJcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cclxuICAgIC8vIERldmlhdGlvbjogY2hhbmdlcyBtdWx0aXBsaWNhdGlvbiBvcmRlciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxyXG4gICAgUkFORE9NX0ZBQ1RPUiAqXHJcbiAgICAgICAgY3VyckJhc2VWYWx1ZSAqXHJcbiAgICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXHJcbiAgICAgICAgLy8gaWYgd2UgYWRkIG9yIHN1YnRyYWN0LlxyXG4gICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqXHJcbiAgICAgICAgMik7XHJcbiAgICAvLyBMaW1pdHMgYmFja29mZiB0byBtYXggdG8gYXZvaWQgZWZmZWN0aXZlbHkgcGVybWFuZW50IGJhY2tvZmYuXHJcbiAgICByZXR1cm4gTWF0aC5taW4oTUFYX1ZBTFVFX01JTExJUywgY3VyckJhc2VWYWx1ZSArIHJhbmRvbVdhaXQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlIEVuZ2xpc2ggb3JkaW5hbCBsZXR0ZXJzIGFmdGVyIGEgbnVtYmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBvcmRpbmFsKGkpIHtcclxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2l9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBpICsgaW5kaWNhdG9yKGkpO1xyXG59XHJcbmZ1bmN0aW9uIGluZGljYXRvcihpKSB7XHJcbiAgICBpID0gTWF0aC5hYnMoaSk7XHJcbiAgICBjb25zdCBjZW50ID0gaSAlIDEwMDtcclxuICAgIGlmIChjZW50ID49IDEwICYmIGNlbnQgPD0gMjApIHtcclxuICAgICAgICByZXR1cm4gJ3RoJztcclxuICAgIH1cclxuICAgIGNvbnN0IGRlYyA9IGkgJSAxMDtcclxuICAgIGlmIChkZWMgPT09IDEpIHtcclxuICAgICAgICByZXR1cm4gJ3N0JztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDIpIHtcclxuICAgICAgICByZXR1cm4gJ25kJztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDMpIHtcclxuICAgICAgICByZXR1cm4gJ3JkJztcclxuICAgIH1cclxuICAgIHJldHVybiAndGgnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldE1vZHVsYXJJbnN0YW5jZShzZXJ2aWNlKSB7XHJcbiAgICBpZiAoc2VydmljZSAmJiBzZXJ2aWNlLl9kZWxlZ2F0ZSkge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlLl9kZWxlZ2F0ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENPTlNUQU5UUywgRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IsIERlZmVycmVkLCBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IsIE1BWF9WQUxVRV9NSUxMSVMsIFJBTkRPTV9GQUNUT1IsIFNoYTEsIGFyZUNvb2tpZXNFbmFibGVkLCBhc3NlcnQsIGFzc2VydGlvbkVycm9yLCBhc3luYywgYmFzZTY0LCBiYXNlNjREZWNvZGUsIGJhc2U2NEVuY29kZSwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMsIGNvbnRhaW5zLCBjcmVhdGVNb2NrVXNlclRva2VuLCBjcmVhdGVTdWJzY3JpYmUsIGRlY29kZSwgZGVlcENvcHksIGRlZXBFcXVhbCwgZGVlcEV4dGVuZCwgZXJyb3JQcmVmaXgsIGV4dHJhY3RRdWVyeXN0cmluZywgZ2V0RGVmYXVsdEFwcENvbmZpZywgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCwgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0LCBnZXREZWZhdWx0cywgZ2V0RXhwZXJpbWVudGFsU2V0dGluZywgZ2V0R2xvYmFsLCBnZXRNb2R1bGFySW5zdGFuY2UsIGdldFVBLCBpc0FkbWluLCBpc0Jyb3dzZXIsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNFbGVjdHJvbiwgaXNFbXB0eSwgaXNJRSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzTW9iaWxlQ29yZG92YSwgaXNOb2RlLCBpc05vZGVTZGssIGlzUmVhY3ROYXRpdmUsIGlzU2FmYXJpLCBpc1VXUCwgaXNWYWxpZEZvcm1hdCwgaXNWYWxpZFRpbWVzdGFtcCwgaXNzdWVkQXRUaW1lLCBqc29uRXZhbCwgbWFwLCBvcmRpbmFsLCBwcm9taXNlV2l0aFRpbWVvdXQsIHF1ZXJ5c3RyaW5nLCBxdWVyeXN0cmluZ0RlY29kZSwgc2FmZUdldCwgc3RyaW5nTGVuZ3RoLCBzdHJpbmdUb0J5dGVBcnJheSwgc3RyaW5naWZ5LCB1dWlkdjQsIHZhbGlkYXRlQXJnQ291bnQsIHZhbGlkYXRlQ2FsbGJhY2ssIHZhbGlkYXRlQ29udGV4dE9iamVjdCwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgdmFsaWRhdGVOYW1lc3BhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJyaXZlXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcInJpdmVcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCAoKSA9PiB7XG5yZXR1cm4gLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRcInVzZSBzdHJpY3RcIjtcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoW1xuLyogMCAqLyxcbi8qIDEgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgXCJkZWZhdWx0XCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuXG52YXIgUml2ZSA9ICgoKSA9PiB7XG4gIHZhciBfc2NyaXB0RGlyID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBkb2N1bWVudC5jdXJyZW50U2NyaXB0ID8gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmMgOiB1bmRlZmluZWQ7XG4gIFxuICByZXR1cm4gKFxuZnVuY3Rpb24obW9kdWxlQXJnID0ge30pIHtcblxudmFyIG0gPSBtb2R1bGVBcmcsIGFhLCBlYTtcbm0ucmVhZHkgPSBuZXcgUHJvbWlzZSgoYSwgYikgPT4ge1xuICBhYSA9IGE7XG4gIGVhID0gYjtcbn0pO1xuZnVuY3Rpb24gZmEoKSB7XG4gIGZ1bmN0aW9uIGEoZykge1xuICAgIGNvbnN0IG4gPSBkO1xuICAgIGMgPSBiID0gMDtcbiAgICBkID0gbmV3IE1hcCgpO1xuICAgIG4uZm9yRWFjaChwID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHAoZyk7XG4gICAgICB9IGNhdGNoIChsKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5vYigpO1xuICAgIGUgJiYgZS5UYigpO1xuICB9XG4gIGxldCBiID0gMCwgYyA9IDAsIGQgPSBuZXcgTWFwKCksIGUgPSBudWxsLCBmID0gbnVsbDtcbiAgdGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbihnKSB7XG4gICAgYiB8fCAoYiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShhLmJpbmQodGhpcykpKTtcbiAgICBjb25zdCBuID0gKytjO1xuICAgIGQuc2V0KG4sIGcpO1xuICAgIHJldHVybiBuO1xuICB9O1xuICB0aGlzLmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oZykge1xuICAgIGQuZGVsZXRlKGcpO1xuICAgIGIgJiYgMCA9PSBkLnNpemUgJiYgKGNhbmNlbEFuaW1hdGlvbkZyYW1lKGIpLCBiID0gMCk7XG4gIH07XG4gIHRoaXMuUmIgPSBmdW5jdGlvbihnKSB7XG4gICAgZiAmJiAoZG9jdW1lbnQuYm9keS5yZW1vdmUoZiksIGYgPSBudWxsKTtcbiAgICBnIHx8IChmID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSwgZi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsYWNrXCIsIGYuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCIsIGYuc3R5bGUucmlnaHQgPSAwLCBmLnN0eWxlLnRvcCA9IDAsIGYuc3R5bGUuY29sb3IgPSBcIndoaXRlXCIsIGYuc3R5bGUucGFkZGluZyA9IFwiNHB4XCIsIGYuaW5uZXJIVE1MID0gXCJSSVZFIEZQU1wiLCBnID0gZnVuY3Rpb24obikge1xuICAgICAgZi5pbm5lckhUTUwgPSBcIlJJVkUgRlBTIFwiICsgbi50b0ZpeGVkKDEpO1xuICAgIH0sIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZikpO1xuICAgIGUgPSBuZXcgZnVuY3Rpb24oKSB7XG4gICAgICBsZXQgbiA9IDAsIHAgPSAwO1xuICAgICAgdGhpcy5UYiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgbCA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICBwID8gKCsrbiwgbCAtPSBwLCAxMDAwIDwgbCAmJiAoZygxMDAwICogbiAvIGwpLCBuID0gcCA9IDApKSA6IChwID0gbCwgbiA9IDApO1xuICAgICAgfTtcbiAgICB9KCk7XG4gIH07XG4gIHRoaXMuT2IgPSBmdW5jdGlvbigpIHtcbiAgICBmICYmIChkb2N1bWVudC5ib2R5LnJlbW92ZShmKSwgZiA9IG51bGwpO1xuICAgIGUgPSBudWxsO1xuICB9O1xuICB0aGlzLm9iID0gZnVuY3Rpb24oKSB7XG4gIH07XG59XG5mdW5jdGlvbiBoYShhKSB7XG4gIGNvbnNvbGUuYXNzZXJ0KCEwKTtcbiAgY29uc3QgYiA9IG5ldyBNYXAoKTtcbiAgbGV0IGMgPSAtSW5maW5pdHk7XG4gIHRoaXMucHVzaCA9IGZ1bmN0aW9uKGQpIHtcbiAgICBkID0gZCArICgoMSA8PCBhKSAtIDEpID4+IGE7XG4gICAgYi5oYXMoZCkgJiYgY2xlYXJUaW1lb3V0KGIuZ2V0KGQpKTtcbiAgICBiLnNldChkLCBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgYi5kZWxldGUoZCk7XG4gICAgICAwID09IGIubGVuZ3RoID8gYyA9IC1JbmZpbml0eSA6IGQgPT0gYyAmJiAoYyA9IE1hdGgubWF4KC4uLmIua2V5cygpKSwgY29uc29sZS5hc3NlcnQoYyA8IGQpKTtcbiAgICB9LCAxMDAwKSk7XG4gICAgYyA9IE1hdGgubWF4KGQsIGMpO1xuICAgIHJldHVybiBjIDw8IGE7XG4gIH07XG59XG5jb25zdCBpYSA9IG0ub25SdW50aW1lSW5pdGlhbGl6ZWQ7XG5tLm9uUnVudGltZUluaXRpYWxpemVkID0gZnVuY3Rpb24oKSB7XG4gIGlhICYmIGlhKCk7XG4gIGxldCBhID0gbS5kZWNvZGVBdWRpbztcbiAgbS5kZWNvZGVBdWRpbyA9IGZ1bmN0aW9uKGQsIGUpIHtcbiAgICBkID0gYShkKTtcbiAgICBlKGQpO1xuICB9O1xuICBsZXQgYiA9IG0uZGVjb2RlRm9udDtcbiAgbS5kZWNvZGVGb250ID0gZnVuY3Rpb24oZCwgZSkge1xuICAgIGQgPSBiKGQpO1xuICAgIGUoZCk7XG4gIH07XG4gIGNvbnN0IGMgPSBtLkZpbGVBc3NldExvYWRlcjtcbiAgbS5wdHJUb0Fzc2V0ID0gZCA9PiB7XG4gICAgbGV0IGUgPSBtLnB0clRvRmlsZUFzc2V0KGQpO1xuICAgIHJldHVybiBlLmlzSW1hZ2UgPyBtLnB0clRvSW1hZ2VBc3NldChkKSA6IGUuaXNGb250ID8gbS5wdHJUb0ZvbnRBc3NldChkKSA6IGUuaXNBdWRpbyA/IG0ucHRyVG9BdWRpb0Fzc2V0KGQpIDogZTtcbiAgfTtcbiAgbS5DdXN0b21GaWxlQXNzZXRMb2FkZXIgPSBjLmV4dGVuZChcIkN1c3RvbUZpbGVBc3NldExvYWRlclwiLCB7X19jb25zdHJ1Y3Q6ZnVuY3Rpb24oe2xvYWRDb250ZW50czpkfSkge1xuICAgIHRoaXMuX19wYXJlbnQuX19jb25zdHJ1Y3QuY2FsbCh0aGlzKTtcbiAgICB0aGlzLkdiID0gZDtcbiAgfSwgbG9hZENvbnRlbnRzOmZ1bmN0aW9uKGQsIGUpIHtcbiAgICBkID0gbS5wdHJUb0Fzc2V0KGQpO1xuICAgIHJldHVybiB0aGlzLkdiKGQsIGUpO1xuICB9LH0pO1xuICBtLkNETkZpbGVBc3NldExvYWRlciA9IGMuZXh0ZW5kKFwiQ0RORmlsZUFzc2V0TG9hZGVyXCIsIHtfX2NvbnN0cnVjdDpmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9fcGFyZW50Ll9fY29uc3RydWN0LmNhbGwodGhpcyk7XG4gIH0sIGxvYWRDb250ZW50czpmdW5jdGlvbihkKSB7XG4gICAgbGV0IGUgPSBtLnB0clRvQXNzZXQoZCk7XG4gICAgZCA9IGUuY2RuVXVpZDtcbiAgICBpZiAoXCJcIiA9PT0gZCkge1xuICAgICAgcmV0dXJuICExO1xuICAgIH1cbiAgICAoZnVuY3Rpb24oZiwgZykge1xuICAgICAgdmFyIG4gPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIG4ucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgbi5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgNCA9PSBuLnJlYWR5U3RhdGUgJiYgMjAwID09IG4uc3RhdHVzICYmIGcobik7XG4gICAgICB9O1xuICAgICAgbi5vcGVuKFwiR0VUXCIsIGYsICEwKTtcbiAgICAgIG4uc2VuZChudWxsKTtcbiAgICB9KShlLmNkbkJhc2VVcmwgKyBcIi9cIiArIGQsIGYgPT4ge1xuICAgICAgZS5kZWNvZGUobmV3IFVpbnQ4QXJyYXkoZi5yZXNwb25zZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiAhMDtcbiAgfSx9KTtcbiAgbS5GYWxsYmFja0ZpbGVBc3NldExvYWRlciA9IGMuZXh0ZW5kKFwiRmFsbGJhY2tGaWxlQXNzZXRMb2FkZXJcIiwge19fY29uc3RydWN0OmZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX19wYXJlbnQuX19jb25zdHJ1Y3QuY2FsbCh0aGlzKTtcbiAgICB0aGlzLmtiID0gW107XG4gIH0sIGFkZExvYWRlcjpmdW5jdGlvbihkKSB7XG4gICAgdGhpcy5rYi5wdXNoKGQpO1xuICB9LCBsb2FkQ29udGVudHM6ZnVuY3Rpb24oZCwgZSkge1xuICAgIGZvciAobGV0IGYgb2YgdGhpcy5rYikge1xuICAgICAgaWYgKGYubG9hZENvbnRlbnRzKGQsIGUpKSB7XG4gICAgICAgIHJldHVybiAhMDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICExO1xuICB9LH0pO1xufTtcbmNvbnN0IGphID0gXCJjcmVhdGVDb25pY0dyYWRpZW50IGNyZWF0ZUltYWdlRGF0YSBjcmVhdGVMaW5lYXJHcmFkaWVudCBjcmVhdGVQYXR0ZXJuIGNyZWF0ZVJhZGlhbEdyYWRpZW50IGdldENvbnRleHRBdHRyaWJ1dGVzIGdldEltYWdlRGF0YSBnZXRMaW5lRGFzaCBnZXRUcmFuc2Zvcm0gaXNDb250ZXh0TG9zdCBpc1BvaW50SW5QYXRoIGlzUG9pbnRJblN0cm9rZSBtZWFzdXJlVGV4dFwiLnNwbGl0KFwiIFwiKSwga2EgPSBuZXcgZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIGEoKSB7XG4gICAgaWYgKCFiKSB7XG4gICAgICB2YXIgayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIiksIHQgPSB7YWxwaGE6MSwgZGVwdGg6MCwgc3RlbmNpbDowLCBhbnRpYWxpYXM6MCwgcHJlbXVsdGlwbGllZEFscGhhOjEsIHByZXNlcnZlRHJhd2luZ0J1ZmZlcjowLCBwcmVmZXJMb3dQb3dlclRvSGlnaFBlcmZvcm1hbmNlOjAsIGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6MCwgZW5hYmxlRXh0ZW5zaW9uc0J5RGVmYXVsdDoxLCBleHBsaWNpdFN3YXBDb250cm9sOjEsIHJlbmRlclZpYU9mZnNjcmVlbkJhY2tCdWZmZXI6MSx9O1xuICAgICAgbGV0IHI7XG4gICAgICBpZiAoL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgIGlmIChyID0gay5nZXRDb250ZXh0KFwid2ViZ2xcIiwgdCksIGMgPSAxLCAhcikge1xuICAgICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIk5vIFdlYkdMIHN1cHBvcnQuIEltYWdlIG1lc2ggd2lsbCBub3QgYmUgZHJhd24uXCIpLCAhMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHIgPSBrLmdldENvbnRleHQoXCJ3ZWJnbDJcIiwgdCkpIHtcbiAgICAgICAgICBjID0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAociA9IGsuZ2V0Q29udGV4dChcIndlYmdsXCIsIHQpKSB7XG4gICAgICAgICAgICBjID0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiTm8gV2ViR0wgc3VwcG9ydC4gSW1hZ2UgbWVzaCB3aWxsIG5vdCBiZSBkcmF3bi5cIiksICExO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgciA9IG5ldyBQcm94eShyLCB7Z2V0KEQsIHcpIHtcbiAgICAgICAgaWYgKEQuaXNDb250ZXh0TG9zdCgpKSB7XG4gICAgICAgICAgaWYgKHAgfHwgKGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmVuZGVyIHRoZSBtZXNoIGJlY2F1c2UgdGhlIEdMIENvbnRleHQgd2FzIGxvc3QuIFRyaWVkIHRvIGludm9rZSBcIiwgdyksIHAgPSAhMCksIFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIERbd10pIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBEW3ddID8gZnVuY3Rpb24oLi4uTSkge1xuICAgICAgICAgICAgcmV0dXJuIERbd10uYXBwbHkoRCwgTSk7XG4gICAgICAgICAgfSA6IERbd107XG4gICAgICAgIH1cbiAgICAgIH0sIHNldChELCB3LCBNKSB7XG4gICAgICAgIGlmIChELmlzQ29udGV4dExvc3QoKSkge1xuICAgICAgICAgIHAgfHwgKGNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmVuZGVyIHRoZSBtZXNoIGJlY2F1c2UgdGhlIEdMIENvbnRleHQgd2FzIGxvc3QuIFRyaWVkIHRvIHNldCBwcm9wZXJ0eSBcIiArIHcpLCBwID0gITApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBEW3ddID0gTSwgITA7XG4gICAgICAgIH1cbiAgICAgIH0sfSk7XG4gICAgICBkID0gTWF0aC5taW4oci5nZXRQYXJhbWV0ZXIoci5NQVhfUkVOREVSQlVGRkVSX1NJWkUpLCByLmdldFBhcmFtZXRlcihyLk1BWF9URVhUVVJFX1NJWkUpKTtcbiAgICAgIGZ1bmN0aW9uIEEoRCwgdywgTSkge1xuICAgICAgICB3ID0gci5jcmVhdGVTaGFkZXIodyk7XG4gICAgICAgIHIuc2hhZGVyU291cmNlKHcsIE0pO1xuICAgICAgICByLmNvbXBpbGVTaGFkZXIodyk7XG4gICAgICAgIE0gPSByLmdldFNoYWRlckluZm9Mb2codyk7XG4gICAgICAgIGlmICgwIDwgKE0gfHwgXCJcIikubGVuZ3RoKSB7XG4gICAgICAgICAgdGhyb3cgTTtcbiAgICAgICAgfVxuICAgICAgICByLmF0dGFjaFNoYWRlcihELCB3KTtcbiAgICAgIH1cbiAgICAgIGsgPSByLmNyZWF0ZVByb2dyYW0oKTtcbiAgICAgIEEoaywgci5WRVJURVhfU0hBREVSLCBcImF0dHJpYnV0ZSB2ZWMyIHZlcnRleDtcXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlIHZlYzIgdXY7XFxuICAgICAgICAgICAgICAgIHVuaWZvcm0gdmVjNCBtYXQ7XFxuICAgICAgICAgICAgICAgIHVuaWZvcm0gdmVjMiB0cmFuc2xhdGU7XFxuICAgICAgICAgICAgICAgIHZhcnlpbmcgdmVjMiBzdDtcXG4gICAgICAgICAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICAgICAgICAgICAgc3QgPSB1djtcXG4gICAgICAgICAgICAgICAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChtYXQyKG1hdCkgKiB2ZXJ0ZXggKyB0cmFuc2xhdGUsIDAsIDEpO1xcbiAgICAgICAgICAgICAgICB9XCIpO1xuICAgICAgQShrLCByLkZSQUdNRU5UX1NIQURFUiwgXCJwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuICAgICAgICAgICAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGltYWdlO1xcbiAgICAgICAgICAgICAgICB2YXJ5aW5nIHZlYzIgc3Q7XFxuICAgICAgICAgICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgICAgICAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChpbWFnZSwgc3QpO1xcbiAgICAgICAgICAgICAgICB9XCIpO1xuICAgICAgci5iaW5kQXR0cmliTG9jYXRpb24oaywgMCwgXCJ2ZXJ0ZXhcIik7XG4gICAgICByLmJpbmRBdHRyaWJMb2NhdGlvbihrLCAxLCBcInV2XCIpO1xuICAgICAgci5saW5rUHJvZ3JhbShrKTtcbiAgICAgIHQgPSByLmdldFByb2dyYW1JbmZvTG9nKGspO1xuICAgICAgaWYgKDAgPCAodCB8fCBcIlwiKS50cmltKCkubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IHQ7XG4gICAgICB9XG4gICAgICBlID0gci5nZXRVbmlmb3JtTG9jYXRpb24oaywgXCJtYXRcIik7XG4gICAgICBmID0gci5nZXRVbmlmb3JtTG9jYXRpb24oaywgXCJ0cmFuc2xhdGVcIik7XG4gICAgICByLnVzZVByb2dyYW0oayk7XG4gICAgICByLmJpbmRCdWZmZXIoci5BUlJBWV9CVUZGRVIsIHIuY3JlYXRlQnVmZmVyKCkpO1xuICAgICAgci5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSgwKTtcbiAgICAgIHIuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoMSk7XG4gICAgICByLmJpbmRCdWZmZXIoci5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgci5jcmVhdGVCdWZmZXIoKSk7XG4gICAgICByLnVuaWZvcm0xaShyLmdldFVuaWZvcm1Mb2NhdGlvbihrLCBcImltYWdlXCIpLCAwKTtcbiAgICAgIHIucGl4ZWxTdG9yZWkoci5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsICEwKTtcbiAgICAgIGIgPSByO1xuICAgIH1cbiAgICByZXR1cm4gITA7XG4gIH1cbiAgbGV0IGIgPSBudWxsLCBjID0gMCwgZCA9IDAsIGUgPSBudWxsLCBmID0gbnVsbCwgZyA9IDAsIG4gPSAwLCBwID0gITE7XG4gIGEoKTtcbiAgdGhpcy5oYyA9IGZ1bmN0aW9uKCkge1xuICAgIGEoKTtcbiAgICByZXR1cm4gZDtcbiAgfTtcbiAgdGhpcy5NYiA9IGZ1bmN0aW9uKGspIHtcbiAgICBiLmRlbGV0ZVRleHR1cmUgJiYgYi5kZWxldGVUZXh0dXJlKGspO1xuICB9O1xuICB0aGlzLkxiID0gZnVuY3Rpb24oaykge1xuICAgIGlmICghYSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgdCA9IGIuY3JlYXRlVGV4dHVyZSgpO1xuICAgIGlmICghdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGIuYmluZFRleHR1cmUoYi5URVhUVVJFXzJELCB0KTtcbiAgICBiLnRleEltYWdlMkQoYi5URVhUVVJFXzJELCAwLCBiLlJHQkEsIGIuUkdCQSwgYi5VTlNJR05FRF9CWVRFLCBrKTtcbiAgICBiLnRleFBhcmFtZXRlcmkoYi5URVhUVVJFXzJELCBiLlRFWFRVUkVfV1JBUF9TLCBiLkNMQU1QX1RPX0VER0UpO1xuICAgIGIudGV4UGFyYW1ldGVyaShiLlRFWFRVUkVfMkQsIGIuVEVYVFVSRV9XUkFQX1QsIGIuQ0xBTVBfVE9fRURHRSk7XG4gICAgYi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCwgYi5URVhUVVJFX01BR19GSUxURVIsIGIuTElORUFSKTtcbiAgICAyID09IGMgPyAoYi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCwgYi5URVhUVVJFX01JTl9GSUxURVIsIGIuTElORUFSX01JUE1BUF9MSU5FQVIpLCBiLmdlbmVyYXRlTWlwbWFwKGIuVEVYVFVSRV8yRCkpIDogYi50ZXhQYXJhbWV0ZXJpKGIuVEVYVFVSRV8yRCwgYi5URVhUVVJFX01JTl9GSUxURVIsIGIuTElORUFSKTtcbiAgICByZXR1cm4gdDtcbiAgfTtcbiAgY29uc3QgbCA9IG5ldyBoYSg4KSwgdSA9IG5ldyBoYSg4KSwgdiA9IG5ldyBoYSgxMCksIHggPSBuZXcgaGEoMTApO1xuICB0aGlzLlFiID0gZnVuY3Rpb24oaywgdCwgciwgQSwgRCkge1xuICAgIGlmIChhKCkpIHtcbiAgICAgIHZhciB3ID0gbC5wdXNoKGspLCBNID0gdS5wdXNoKHQpO1xuICAgICAgaWYgKGIuY2FudmFzKSB7XG4gICAgICAgIGlmIChiLmNhbnZhcy53aWR0aCAhPSB3IHx8IGIuY2FudmFzLmhlaWdodCAhPSBNKSB7XG4gICAgICAgICAgYi5jYW52YXMud2lkdGggPSB3LCBiLmNhbnZhcy5oZWlnaHQgPSBNO1xuICAgICAgICB9XG4gICAgICAgIGIudmlld3BvcnQoMCwgTSAtIHQsIGssIHQpO1xuICAgICAgICBiLmRpc2FibGUoYi5TQ0lTU09SX1RFU1QpO1xuICAgICAgICBiLmNsZWFyQ29sb3IoMCwgMCwgMCwgMCk7XG4gICAgICAgIGIuY2xlYXIoYi5DT0xPUl9CVUZGRVJfQklUKTtcbiAgICAgICAgYi5lbmFibGUoYi5TQ0lTU09SX1RFU1QpO1xuICAgICAgICByLnNvcnQoKEYsIGJhKSA9PiBiYS53YiAtIEYud2IpO1xuICAgICAgICB3ID0gdi5wdXNoKEEpO1xuICAgICAgICBnICE9IHcgJiYgKGIuYnVmZmVyRGF0YShiLkFSUkFZX0JVRkZFUiwgOCAqIHcsIGIuRFlOQU1JQ19EUkFXKSwgZyA9IHcpO1xuICAgICAgICB3ID0gMDtcbiAgICAgICAgZm9yICh2YXIgVCBvZiByKSB7XG4gICAgICAgICAgYi5idWZmZXJTdWJEYXRhKGIuQVJSQVlfQlVGRkVSLCB3LCBULlRhKSwgdyArPSA0ICogVC5UYS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5hc3NlcnQodyA9PSA0ICogQSk7XG4gICAgICAgIGZvciAodmFyIGNhIG9mIHIpIHtcbiAgICAgICAgICBiLmJ1ZmZlclN1YkRhdGEoYi5BUlJBWV9CVUZGRVIsIHcsIGNhLkRiKSwgdyArPSA0ICogY2EuRGIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHcgPT0gOCAqIEEpO1xuICAgICAgICB3ID0geC5wdXNoKEQpO1xuICAgICAgICBuICE9IHcgJiYgKGIuYnVmZmVyRGF0YShiLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCAyICogdywgYi5EWU5BTUlDX0RSQVcpLCBuID0gdyk7XG4gICAgICAgIFQgPSAwO1xuICAgICAgICBmb3IgKHZhciByYSBvZiByKSB7XG4gICAgICAgICAgYi5idWZmZXJTdWJEYXRhKGIuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIFQsIHJhLmluZGljZXMpLCBUICs9IDIgKiByYS5pbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmFzc2VydChUID09IDIgKiBEKTtcbiAgICAgICAgcmEgPSAwO1xuICAgICAgICBjYSA9ICEwO1xuICAgICAgICB3ID0gVCA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgRiBvZiByKSB7XG4gICAgICAgICAgRi5pbWFnZS5LYSAhPSByYSAmJiAoYi5iaW5kVGV4dHVyZShiLlRFWFRVUkVfMkQsIEYuaW1hZ2UuSmEgfHwgbnVsbCksIHJhID0gRi5pbWFnZS5LYSk7XG4gICAgICAgICAgRi5tYyA/IChiLnNjaXNzb3IoRi5ZYSwgTSAtIEYuWmEgLSBGLmpiLCBGLkFjLCBGLmpiKSwgY2EgPSAhMCkgOiBjYSAmJiAoYi5zY2lzc29yKDAsIE0gLSB0LCBrLCB0KSwgY2EgPSAhMSk7XG4gICAgICAgICAgciA9IDIgLyBrO1xuICAgICAgICAgIGNvbnN0IGJhID0gLTIgLyB0O1xuICAgICAgICAgIGIudW5pZm9ybTRmKGUsIEYuaGFbMF0gKiByICogRi5CYSwgRi5oYVsxXSAqIGJhICogRi5DYSwgRi5oYVsyXSAqIHIgKiBGLkJhLCBGLmhhWzNdICogYmEgKiBGLkNhKTtcbiAgICAgICAgICBiLnVuaWZvcm0yZihmLCBGLmhhWzRdICogciAqIEYuQmEgKyByICogKEYuWWEgLSBGLmljICogRi5CYSkgLSAxLCBGLmhhWzVdICogYmEgKiBGLkNhICsgYmEgKiAoRi5aYSAtIEYuamMgKiBGLkNhKSArIDEpO1xuICAgICAgICAgIGIudmVydGV4QXR0cmliUG9pbnRlcigwLCAyLCBiLkZMT0FULCAhMSwgMCwgdyk7XG4gICAgICAgICAgYi52ZXJ0ZXhBdHRyaWJQb2ludGVyKDEsIDIsIGIuRkxPQVQsICExLCAwLCB3ICsgNCAqIEEpO1xuICAgICAgICAgIGIuZHJhd0VsZW1lbnRzKGIuVFJJQU5HTEVTLCBGLmluZGljZXMubGVuZ3RoLCBiLlVOU0lHTkVEX1NIT1JULCBUKTtcbiAgICAgICAgICB3ICs9IDQgKiBGLlRhLmxlbmd0aDtcbiAgICAgICAgICBUICs9IDIgKiBGLmluZGljZXMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUuYXNzZXJ0KHcgPT0gNCAqIEEpO1xuICAgICAgICBjb25zb2xlLmFzc2VydChUID09IDIgKiBEKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHRoaXMuY2FudmFzID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGEoKSAmJiBiLmNhbnZhcztcbiAgfTtcbn0oKSwgbGEgPSBtLm9uUnVudGltZUluaXRpYWxpemVkO1xubS5vblJ1bnRpbWVJbml0aWFsaXplZCA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBhKHEpIHtcbiAgICBzd2l0Y2gocSkge1xuICAgICAgY2FzZSBsLnNyY092ZXI6XG4gICAgICAgIHJldHVybiBcInNvdXJjZS1vdmVyXCI7XG4gICAgICBjYXNlIGwuc2NyZWVuOlxuICAgICAgICByZXR1cm4gXCJzY3JlZW5cIjtcbiAgICAgIGNhc2UgbC5vdmVybGF5OlxuICAgICAgICByZXR1cm4gXCJvdmVybGF5XCI7XG4gICAgICBjYXNlIGwuZGFya2VuOlxuICAgICAgICByZXR1cm4gXCJkYXJrZW5cIjtcbiAgICAgIGNhc2UgbC5saWdodGVuOlxuICAgICAgICByZXR1cm4gXCJsaWdodGVuXCI7XG4gICAgICBjYXNlIGwuY29sb3JEb2RnZTpcbiAgICAgICAgcmV0dXJuIFwiY29sb3ItZG9kZ2VcIjtcbiAgICAgIGNhc2UgbC5jb2xvckJ1cm46XG4gICAgICAgIHJldHVybiBcImNvbG9yLWJ1cm5cIjtcbiAgICAgIGNhc2UgbC5oYXJkTGlnaHQ6XG4gICAgICAgIHJldHVybiBcImhhcmQtbGlnaHRcIjtcbiAgICAgIGNhc2UgbC5zb2Z0TGlnaHQ6XG4gICAgICAgIHJldHVybiBcInNvZnQtbGlnaHRcIjtcbiAgICAgIGNhc2UgbC5kaWZmZXJlbmNlOlxuICAgICAgICByZXR1cm4gXCJkaWZmZXJlbmNlXCI7XG4gICAgICBjYXNlIGwuZXhjbHVzaW9uOlxuICAgICAgICByZXR1cm4gXCJleGNsdXNpb25cIjtcbiAgICAgIGNhc2UgbC5tdWx0aXBseTpcbiAgICAgICAgcmV0dXJuIFwibXVsdGlwbHlcIjtcbiAgICAgIGNhc2UgbC5odWU6XG4gICAgICAgIHJldHVybiBcImh1ZVwiO1xuICAgICAgY2FzZSBsLnNhdHVyYXRpb246XG4gICAgICAgIHJldHVybiBcInNhdHVyYXRpb25cIjtcbiAgICAgIGNhc2UgbC5jb2xvcjpcbiAgICAgICAgcmV0dXJuIFwiY29sb3JcIjtcbiAgICAgIGNhc2UgbC5sdW1pbm9zaXR5OlxuICAgICAgICByZXR1cm4gXCJsdW1pbm9zaXR5XCI7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGIocSkge1xuICAgIHJldHVybiBcInJnYmEoXCIgKyAoKDE2NzExNjgwICYgcSkgPj4+IDE2KSArIFwiLFwiICsgKCg2NTI4MCAmIHEpID4+PiA4KSArIFwiLFwiICsgKCgyNTUgJiBxKSA+Pj4gMCkgKyBcIixcIiArICgoNDI3ODE5MDA4MCAmIHEpID4+PiAyNCkgLyAyNTUgKyBcIilcIjtcbiAgfVxuICBmdW5jdGlvbiBjKCkge1xuICAgIDAgPCBNLmxlbmd0aCAmJiAoa2EuUWIody5kcmF3V2lkdGgoKSwgdy5kcmF3SGVpZ2h0KCksIE0sIFQsIGNhKSwgTSA9IFtdLCBjYSA9IFQgPSAwLCB3LnJlc2V0KDUxMiwgNTEyKSk7XG4gICAgZm9yIChjb25zdCBxIG9mIEQpIHtcbiAgICAgIGZvciAoY29uc3QgeiBvZiBxLkgpIHtcbiAgICAgICAgeigpO1xuICAgICAgfVxuICAgICAgcS5IID0gW107XG4gICAgfVxuICAgIEQuY2xlYXIoKTtcbiAgfVxuICBsYSAmJiBsYSgpO1xuICB2YXIgZCA9IG0uUmVuZGVyUGFpbnRTdHlsZTtcbiAgY29uc3QgZSA9IG0uUmVuZGVyUGF0aCwgZiA9IG0uUmVuZGVyUGFpbnQsIGcgPSBtLlJlbmRlcmVyLCBuID0gbS5TdHJva2VDYXAsIHAgPSBtLlN0cm9rZUpvaW4sIGwgPSBtLkJsZW5kTW9kZSwgdSA9IGQuZmlsbCwgdiA9IGQuc3Ryb2tlLCB4ID0gbS5GaWxsUnVsZS5ldmVuT2RkO1xuICBsZXQgayA9IDE7XG4gIHZhciB0ID0gbS5SZW5kZXJJbWFnZS5leHRlbmQoXCJDYW52YXNSZW5kZXJJbWFnZVwiLCB7X19jb25zdHJ1Y3Q6ZnVuY3Rpb24oe2xhOnEsIHhhOnp9ID0ge30pIHtcbiAgICB0aGlzLl9fcGFyZW50Ll9fY29uc3RydWN0LmNhbGwodGhpcyk7XG4gICAgdGhpcy5LYSA9IGs7XG4gICAgayA9IGsgKyAxICYgMjE0NzQ4MzY0NyB8fCAxO1xuICAgIHRoaXMubGEgPSBxO1xuICAgIHRoaXMueGEgPSB6O1xuICB9LCBfX2Rlc3RydWN0OmZ1bmN0aW9uKCkge1xuICAgIHRoaXMuSmEgJiYgKGthLk1iKHRoaXMuSmEpLCBVUkwucmV2b2tlT2JqZWN0VVJMKHRoaXMuV2EpKTtcbiAgICB0aGlzLl9fcGFyZW50Ll9fZGVzdHJ1Y3QuY2FsbCh0aGlzKTtcbiAgfSwgZGVjb2RlOmZ1bmN0aW9uKHEpIHtcbiAgICB2YXIgeiA9IHRoaXM7XG4gICAgei54YSAmJiB6LnhhKHopO1xuICAgIHZhciBHID0gbmV3IEltYWdlKCk7XG4gICAgei5XYSA9IFVSTC5jcmVhdGVPYmplY3RVUkwobmV3IEJsb2IoW3FdLCB7dHlwZTpcImltYWdlL3BuZ1wiLH0pKTtcbiAgICBHLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgei5GYiA9IEc7XG4gICAgICB6LkphID0ga2EuTGIoRyk7XG4gICAgICB6LnNpemUoRy53aWR0aCwgRy5oZWlnaHQpO1xuICAgICAgei5sYSAmJiB6LmxhKHopO1xuICAgIH07XG4gICAgRy5zcmMgPSB6LldhO1xuICB9LH0pLCByID0gZS5leHRlbmQoXCJDYW52YXNSZW5kZXJQYXRoXCIsIHtfX2NvbnN0cnVjdDpmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9fcGFyZW50Ll9fY29uc3RydWN0LmNhbGwodGhpcyk7XG4gICAgdGhpcy5UID0gbmV3IFBhdGgyRCgpO1xuICB9LCByZXdpbmQ6ZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5UID0gbmV3IFBhdGgyRCgpO1xuICB9LCBhZGRQYXRoOmZ1bmN0aW9uKHEsIHosIEcsIEgsIEMsIEksIEopIHtcbiAgICB2YXIgSyA9IHRoaXMuVCwgWCA9IEsuYWRkUGF0aDtcbiAgICBxID0gcS5UO1xuICAgIGNvbnN0IFEgPSBuZXcgRE9NTWF0cml4KCk7XG4gICAgUS5hID0gejtcbiAgICBRLmIgPSBHO1xuICAgIFEuYyA9IEg7XG4gICAgUS5kID0gQztcbiAgICBRLmUgPSBJO1xuICAgIFEuZiA9IEo7XG4gICAgWC5jYWxsKEssIHEsIFEpO1xuICB9LCBmaWxsUnVsZTpmdW5jdGlvbihxKSB7XG4gICAgdGhpcy5WYSA9IHE7XG4gIH0sIG1vdmVUbzpmdW5jdGlvbihxLCB6KSB7XG4gICAgdGhpcy5ULm1vdmVUbyhxLCB6KTtcbiAgfSwgbGluZVRvOmZ1bmN0aW9uKHEsIHopIHtcbiAgICB0aGlzLlQubGluZVRvKHEsIHopO1xuICB9LCBjdWJpY1RvOmZ1bmN0aW9uKHEsIHosIEcsIEgsIEMsIEkpIHtcbiAgICB0aGlzLlQuYmV6aWVyQ3VydmVUbyhxLCB6LCBHLCBILCBDLCBJKTtcbiAgfSwgY2xvc2U6ZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5ULmNsb3NlUGF0aCgpO1xuICB9LH0pLCBBID0gZi5leHRlbmQoXCJDYW52YXNSZW5kZXJQYWludFwiLCB7Y29sb3I6ZnVuY3Rpb24ocSkge1xuICAgIHRoaXMuWGEgPSBiKHEpO1xuICB9LCB0aGlja25lc3M6ZnVuY3Rpb24ocSkge1xuICAgIHRoaXMuSWIgPSBxO1xuICB9LCBqb2luOmZ1bmN0aW9uKHEpIHtcbiAgICBzd2l0Y2gocSkge1xuICAgICAgY2FzZSBwLm1pdGVyOlxuICAgICAgICB0aGlzLklhID0gXCJtaXRlclwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgcC5yb3VuZDpcbiAgICAgICAgdGhpcy5JYSA9IFwicm91bmRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIHAuYmV2ZWw6XG4gICAgICAgIHRoaXMuSWEgPSBcImJldmVsXCI7XG4gICAgfVxuICB9LCBjYXA6ZnVuY3Rpb24ocSkge1xuICAgIHN3aXRjaChxKSB7XG4gICAgICBjYXNlIG4uYnV0dDpcbiAgICAgICAgdGhpcy5IYSA9IFwiYnV0dFwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2Ugbi5yb3VuZDpcbiAgICAgICAgdGhpcy5IYSA9IFwicm91bmRcIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIG4uc3F1YXJlOlxuICAgICAgICB0aGlzLkhhID0gXCJzcXVhcmVcIjtcbiAgICB9XG4gIH0sIHN0eWxlOmZ1bmN0aW9uKHEpIHtcbiAgICB0aGlzLkhiID0gcTtcbiAgfSwgYmxlbmRNb2RlOmZ1bmN0aW9uKHEpIHtcbiAgICB0aGlzLkViID0gYShxKTtcbiAgfSwgY2xlYXJHcmFkaWVudDpmdW5jdGlvbigpIHtcbiAgICB0aGlzLmphID0gbnVsbDtcbiAgfSwgbGluZWFyR3JhZGllbnQ6ZnVuY3Rpb24ocSwgeiwgRywgSCkge1xuICAgIHRoaXMuamEgPSB7eWI6cSwgemI6eiwgYmI6RywgY2I6SCwgUmE6W10sfTtcbiAgfSwgcmFkaWFsR3JhZGllbnQ6ZnVuY3Rpb24ocSwgeiwgRywgSCkge1xuICAgIHRoaXMuamEgPSB7eWI6cSwgemI6eiwgYmI6RywgY2I6SCwgUmE6W10sIGVjOiEwLH07XG4gIH0sIGFkZFN0b3A6ZnVuY3Rpb24ocSwgeikge1xuICAgIHRoaXMuamEuUmEucHVzaCh7Y29sb3I6cSwgc3RvcDp6LH0pO1xuICB9LCBjb21wbGV0ZUdyYWRpZW50OmZ1bmN0aW9uKCkge1xuICB9LCBkcmF3OmZ1bmN0aW9uKHEsIHosIEcpIHtcbiAgICBsZXQgSCA9IHRoaXMuSGI7XG4gICAgdmFyIEMgPSB0aGlzLlhhLCBJID0gdGhpcy5qYTtcbiAgICBxLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IHRoaXMuRWI7XG4gICAgaWYgKG51bGwgIT0gSSkge1xuICAgICAgQyA9IEkueWI7XG4gICAgICB2YXIgSiA9IEkuemI7XG4gICAgICBjb25zdCBYID0gSS5iYjtcbiAgICAgIHZhciBLID0gSS5jYjtcbiAgICAgIGNvbnN0IFEgPSBJLlJhO1xuICAgICAgSS5lYyA/IChJID0gWCAtIEMsIEsgLT0gSiwgQyA9IHEuY3JlYXRlUmFkaWFsR3JhZGllbnQoQywgSiwgMCwgQywgSiwgTWF0aC5zcXJ0KEkgKiBJICsgSyAqIEspKSkgOiBDID0gcS5jcmVhdGVMaW5lYXJHcmFkaWVudChDLCBKLCBYLCBLKTtcbiAgICAgIGZvciAobGV0IGRhID0gMCwgUiA9IFEubGVuZ3RoOyBkYSA8IFI7IGRhKyspIHtcbiAgICAgICAgSiA9IFFbZGFdLCBDLmFkZENvbG9yU3RvcChKLnN0b3AsIGIoSi5jb2xvcikpO1xuICAgICAgfVxuICAgICAgdGhpcy5YYSA9IEM7XG4gICAgICB0aGlzLmphID0gbnVsbDtcbiAgICB9XG4gICAgc3dpdGNoKEgpIHtcbiAgICAgIGNhc2UgdjpcbiAgICAgICAgcS5zdHJva2VTdHlsZSA9IEM7XG4gICAgICAgIHEubGluZVdpZHRoID0gdGhpcy5JYjtcbiAgICAgICAgcS5saW5lQ2FwID0gdGhpcy5IYTtcbiAgICAgICAgcS5saW5lSm9pbiA9IHRoaXMuSWE7XG4gICAgICAgIHEuc3Ryb2tlKHopO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgdTpcbiAgICAgICAgcS5maWxsU3R5bGUgPSBDLCBxLmZpbGwoeiwgRyk7XG4gICAgfVxuICB9LH0pO1xuICBjb25zdCBEID0gbmV3IFNldCgpO1xuICBsZXQgdyA9IG51bGwsIE0gPSBbXSwgVCA9IDAsIGNhID0gMDtcbiAgdmFyIHJhID0gbS5DYW52YXNSZW5kZXJlciA9IGcuZXh0ZW5kKFwiUmVuZGVyZXJcIiwge19fY29uc3RydWN0OmZ1bmN0aW9uKHEpIHtcbiAgICB0aGlzLl9fcGFyZW50Ll9fY29uc3RydWN0LmNhbGwodGhpcyk7XG4gICAgdGhpcy5TID0gWzEsIDAsIDAsIDEsIDAsIDBdO1xuICAgIHRoaXMuQyA9IHEuZ2V0Q29udGV4dChcIjJkXCIpO1xuICAgIHRoaXMuVWEgPSBxO1xuICAgIHRoaXMuSCA9IFtdO1xuICB9LCBzYXZlOmZ1bmN0aW9uKCkge1xuICAgIHRoaXMuUy5wdXNoKC4uLnRoaXMuUy5zbGljZSh0aGlzLlMubGVuZ3RoIC0gNikpO1xuICAgIHRoaXMuSC5wdXNoKHRoaXMuQy5zYXZlLmJpbmQodGhpcy5DKSk7XG4gIH0sIHJlc3RvcmU6ZnVuY3Rpb24oKSB7XG4gICAgY29uc3QgcSA9IHRoaXMuUy5sZW5ndGggLSA2O1xuICAgIGlmICg2ID4gcSkge1xuICAgICAgdGhyb3cgXCJyZXN0b3JlKCkgY2FsbGVkIHdpdGhvdXQgbWF0Y2hpbmcgc2F2ZSgpLlwiO1xuICAgIH1cbiAgICB0aGlzLlMuc3BsaWNlKHEpO1xuICAgIHRoaXMuSC5wdXNoKHRoaXMuQy5yZXN0b3JlLmJpbmQodGhpcy5DKSk7XG4gIH0sIHRyYW5zZm9ybTpmdW5jdGlvbihxLCB6LCBHLCBILCBDLCBJKSB7XG4gICAgY29uc3QgSiA9IHRoaXMuUywgSyA9IEoubGVuZ3RoIC0gNjtcbiAgICBKLnNwbGljZShLLCA2LCBKW0tdICogcSArIEpbSyArIDJdICogeiwgSltLICsgMV0gKiBxICsgSltLICsgM10gKiB6LCBKW0tdICogRyArIEpbSyArIDJdICogSCwgSltLICsgMV0gKiBHICsgSltLICsgM10gKiBILCBKW0tdICogQyArIEpbSyArIDJdICogSSArIEpbSyArIDRdLCBKW0sgKyAxXSAqIEMgKyBKW0sgKyAzXSAqIEkgKyBKW0sgKyA1XSk7XG4gICAgdGhpcy5ILnB1c2godGhpcy5DLnRyYW5zZm9ybS5iaW5kKHRoaXMuQywgcSwgeiwgRywgSCwgQywgSSkpO1xuICB9LCByb3RhdGU6ZnVuY3Rpb24ocSkge1xuICAgIGNvbnN0IHogPSBNYXRoLnNpbihxKTtcbiAgICBxID0gTWF0aC5jb3MocSk7XG4gICAgdGhpcy50cmFuc2Zvcm0ocSwgeiwgLXosIHEsIDAsIDApO1xuICB9LCBfZHJhd1BhdGg6ZnVuY3Rpb24ocSwgeikge1xuICAgIHRoaXMuSC5wdXNoKHouZHJhdy5iaW5kKHosIHRoaXMuQywgcS5ULCBxLlZhID09PSB4ID8gXCJldmVub2RkXCIgOiBcIm5vbnplcm9cIikpO1xuICB9LCBfZHJhd1JpdmVJbWFnZTpmdW5jdGlvbihxLCB6LCBHKSB7XG4gICAgdmFyIEggPSBxLkZiO1xuICAgIGlmIChIKSB7XG4gICAgICB2YXIgQyA9IHRoaXMuQywgSSA9IGEoeik7XG4gICAgICB0aGlzLkgucHVzaChmdW5jdGlvbigpIHtcbiAgICAgICAgQy5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBJO1xuICAgICAgICBDLmdsb2JhbEFscGhhID0gRztcbiAgICAgICAgQy5kcmF3SW1hZ2UoSCwgMCwgMCk7XG4gICAgICAgIEMuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBfZ2V0TWF0cml4OmZ1bmN0aW9uKHEpIHtcbiAgICBjb25zdCB6ID0gdGhpcy5TLCBHID0gei5sZW5ndGggLSA2O1xuICAgIGZvciAobGV0IEggPSAwOyA2ID4gSDsgKytIKSB7XG4gICAgICBxW0hdID0geltHICsgSF07XG4gICAgfVxuICB9LCBfZHJhd0ltYWdlTWVzaDpmdW5jdGlvbihxLCB6LCBHLCBILCBDLCBJLCBKLCBLLCBYLCBRKSB7XG4gICAgdmFyIGRhID0gdGhpcy5DLmNhbnZhcy53aWR0aCwgUiA9IHRoaXMuQy5jYW52YXMuaGVpZ2h0O1xuICAgIGNvbnN0IFliID0gWCAtIEosIFpiID0gUSAtIEs7XG4gICAgSiA9IE1hdGgubWF4KEosIDApO1xuICAgIEsgPSBNYXRoLm1heChLLCAwKTtcbiAgICBYID0gTWF0aC5taW4oWCwgZGEpO1xuICAgIFEgPSBNYXRoLm1pbihRLCBSKTtcbiAgICBjb25zdCBHYSA9IFggLSBKLCBIYSA9IFEgLSBLO1xuICAgIGNvbnNvbGUuYXNzZXJ0KEdhIDw9IE1hdGgubWluKFliLCBkYSkpO1xuICAgIGNvbnNvbGUuYXNzZXJ0KEhhIDw9IE1hdGgubWluKFpiLCBSKSk7XG4gICAgaWYgKCEoMCA+PSBHYSB8fCAwID49IEhhKSkge1xuICAgICAgWCA9IEdhIDwgWWIgfHwgSGEgPCBaYjtcbiAgICAgIGRhID0gUSA9IDE7XG4gICAgICB2YXIgc2EgPSBNYXRoLmNlaWwoR2EgKiBRKSwgdGEgPSBNYXRoLmNlaWwoSGEgKiBkYSk7XG4gICAgICBSID0ga2EuaGMoKTtcbiAgICAgIHNhID4gUiAmJiAoUSAqPSBSIC8gc2EsIHNhID0gUik7XG4gICAgICB0YSA+IFIgJiYgKGRhICo9IFIgLyB0YSwgdGEgPSBSKTtcbiAgICAgIHcgfHwgKHcgPSBuZXcgbS5EeW5hbWljUmVjdGFuaXplcihSKSwgdy5yZXNldCg1MTIsIDUxMikpO1xuICAgICAgUiA9IHcuYWRkUmVjdChzYSwgdGEpO1xuICAgICAgMCA+IFIgJiYgKGMoKSwgRC5hZGQodGhpcyksIFIgPSB3LmFkZFJlY3Qoc2EsIHRhKSwgY29uc29sZS5hc3NlcnQoMCA8PSBSKSk7XG4gICAgICB2YXIgJGIgPSBSICYgNjU1MzUsIGFjID0gUiA+PiAxNjtcbiAgICAgIE0ucHVzaCh7aGE6dGhpcy5TLnNsaWNlKHRoaXMuUy5sZW5ndGggLSA2KSwgaW1hZ2U6cSwgWWE6JGIsIFphOmFjLCBpYzpKLCBqYzpLLCBBYzpzYSwgamI6dGEsIEJhOlEsIENhOmRhLCBUYTpuZXcgRmxvYXQzMkFycmF5KEgpLCBEYjpuZXcgRmxvYXQzMkFycmF5KEMpLCBpbmRpY2VzOm5ldyBVaW50MTZBcnJheShJKSwgbWM6WCwgd2I6cS5LYSA8PCAxIHwgKFggPyAxIDogMCksfSk7XG4gICAgICBUICs9IEgubGVuZ3RoO1xuICAgICAgY2EgKz0gSS5sZW5ndGg7XG4gICAgICB2YXIgemEgPSB0aGlzLkMsIHFkID0gYSh6KTtcbiAgICAgIHRoaXMuSC5wdXNoKGZ1bmN0aW9uKCkge1xuICAgICAgICB6YS5zYXZlKCk7XG4gICAgICAgIHphLnJlc2V0VHJhbnNmb3JtKCk7XG4gICAgICAgIHphLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IHFkO1xuICAgICAgICB6YS5nbG9iYWxBbHBoYSA9IEc7XG4gICAgICAgIGNvbnN0IGJjID0ga2EuY2FudmFzKCk7XG4gICAgICAgIGJjICYmIHphLmRyYXdJbWFnZShiYywgJGIsIGFjLCBzYSwgdGEsIEosIEssIEdhLCBIYSk7XG4gICAgICAgIHphLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgX2NsaXBQYXRoOmZ1bmN0aW9uKHEpIHtcbiAgICB0aGlzLkgucHVzaCh0aGlzLkMuY2xpcC5iaW5kKHRoaXMuQywgcS5ULCBxLlZhID09PSB4ID8gXCJldmVub2RkXCIgOiBcIm5vbnplcm9cIikpO1xuICB9LCBjbGVhcjpmdW5jdGlvbigpIHtcbiAgICBELmFkZCh0aGlzKTtcbiAgICB0aGlzLkgucHVzaCh0aGlzLkMuY2xlYXJSZWN0LmJpbmQodGhpcy5DLCAwLCAwLCB0aGlzLlVhLndpZHRoLCB0aGlzLlVhLmhlaWdodCkpO1xuICB9LCBmbHVzaDpmdW5jdGlvbigpIHtcbiAgfSwgdHJhbnNsYXRlOmZ1bmN0aW9uKHEsIHopIHtcbiAgICB0aGlzLnRyYW5zZm9ybSgxLCAwLCAwLCAxLCBxLCB6KTtcbiAgfSx9KTtcbiAgbS5tYWtlUmVuZGVyZXIgPSBmdW5jdGlvbihxKSB7XG4gICAgY29uc3QgeiA9IG5ldyByYShxKSwgRyA9IHouQztcbiAgICByZXR1cm4gbmV3IFByb3h5KHosIHtnZXQoSCwgQykge1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIEhbQ10pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKC4uLkkpIHtcbiAgICAgICAgICByZXR1cm4gSFtDXS5hcHBseShILCBJKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBHW0NdKSB7XG4gICAgICAgIGlmICgtMSA8IGphLmluZGV4T2YoQykpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihcIlJpdmVFeGNlcHRpb246IE1ldGhvZCBjYWxsIHRvICdcIiArIEMgKyBcIigpJyBpcyBub3QgYWxsb3dlZCwgYXMgdGhlIHJlbmRlcmVyIGNhbm5vdCBpbW1lZGlhdGVseSBwYXNzIHRocm91Z2ggdGhlIHJldHVybiAgICAgICAgICAgICAgICAgdmFsdWVzIG9mIGFueSBjYW52YXMgMmQgY29udGV4dCBtZXRob2RzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24oLi4uSSkge1xuICAgICAgICAgIHouSC5wdXNoKEdbQ10uYmluZChHLCAuLi5JKSk7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gSFtDXTtcbiAgICB9LCBzZXQoSCwgQywgSSkge1xuICAgICAgaWYgKEMgaW4gRykge1xuICAgICAgICByZXR1cm4gei5ILnB1c2goKCkgPT4ge1xuICAgICAgICAgIEdbQ10gPSBJO1xuICAgICAgICB9KSwgITA7XG4gICAgICB9XG4gICAgfSx9KTtcbiAgfTtcbiAgbS5kZWNvZGVJbWFnZSA9IGZ1bmN0aW9uKHEsIHopIHtcbiAgICAobmV3IHQoe2xhOnp9KSkuZGVjb2RlKHEpO1xuICB9O1xuICBtLnJlbmRlckZhY3RvcnkgPSB7bWFrZVJlbmRlclBhaW50OmZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgQSgpO1xuICB9LCBtYWtlUmVuZGVyUGF0aDpmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbmV3IHIoKTtcbiAgfSwgbWFrZVJlbmRlckltYWdlOmZ1bmN0aW9uKCkge1xuICAgIGxldCBxID0gYmE7XG4gICAgcmV0dXJuIG5ldyB0KHt4YTooKSA9PiB7XG4gICAgICBxLnRvdGFsKys7XG4gICAgfSwgbGE6KCkgPT4ge1xuICAgICAgcS5sb2FkZWQrKztcbiAgICAgIGlmIChxLmxvYWRlZCA9PT0gcS50b3RhbCkge1xuICAgICAgICBjb25zdCB6ID0gcS5yZWFkeTtcbiAgICAgICAgeiAmJiAoeigpLCBxLnJlYWR5ID0gbnVsbCk7XG4gICAgICB9XG4gICAgfSx9KTtcbiAgfSx9O1xuICBsZXQgRiA9IG0ubG9hZCwgYmEgPSBudWxsO1xuICBtLmxvYWQgPSBmdW5jdGlvbihxLCB6LCBHID0gITApIHtcbiAgICBjb25zdCBIID0gbmV3IG0uRmFsbGJhY2tGaWxlQXNzZXRMb2FkZXIoKTtcbiAgICB2b2lkIDAgIT09IHogJiYgSC5hZGRMb2FkZXIoeik7XG4gICAgRyAmJiAoeiA9IG5ldyBtLkNETkZpbGVBc3NldExvYWRlcigpLCBILmFkZExvYWRlcih6KSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKEMpIHtcbiAgICAgIGxldCBJID0gbnVsbDtcbiAgICAgIGJhID0ge3RvdGFsOjAsIGxvYWRlZDowLCByZWFkeTpmdW5jdGlvbigpIHtcbiAgICAgICAgQyhJKTtcbiAgICAgIH0sfTtcbiAgICAgIEkgPSBGKHEsIEgpO1xuICAgICAgMCA9PSBiYS50b3RhbCAmJiBDKEkpO1xuICAgIH0pO1xuICB9O1xuICBkID0gbmV3IGZhKCk7XG4gIG0ucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZChkKTtcbiAgbS5jYW5jZWxBbmltYXRpb25GcmFtZSA9IGQuY2FuY2VsQW5pbWF0aW9uRnJhbWUuYmluZChkKTtcbiAgbS5lbmFibGVGUFNDb3VudGVyID0gZC5SYi5iaW5kKGQpO1xuICBtLmRpc2FibGVGUFNDb3VudGVyID0gZC5PYjtcbiAgZC5vYiA9IGM7XG4gIG0ucmVzb2x2ZUFuaW1hdGlvbkZyYW1lID0gYztcbiAgbS5jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgdyAmJiB3LmRlbGV0ZSgpO1xuICB9O1xufTtcbnZhciBtYSA9IE9iamVjdC5hc3NpZ24oe30sIG0pLCBuYSA9IFwiLi90aGlzLnByb2dyYW1cIiwgb2EgPSBcIm9iamVjdFwiID09IHR5cGVvZiB3aW5kb3csIHBhID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBpbXBvcnRTY3JpcHRzLCBxYSA9IFwiXCIsIHVhLCB2YTtcbmlmIChvYSB8fCBwYSkge1xuICBwYSA/IHFhID0gc2VsZi5sb2NhdGlvbi5ocmVmIDogXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3VycmVudFNjcmlwdCAmJiAocWEgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyYyksIF9zY3JpcHREaXIgJiYgKHFhID0gX3NjcmlwdERpciksIDAgIT09IHFhLmluZGV4T2YoXCJibG9iOlwiKSA/IHFhID0gcWEuc3Vic3RyKDAsIHFhLnJlcGxhY2UoL1s/I10uKi8sIFwiXCIpLmxhc3RJbmRleE9mKFwiL1wiKSArIDEpIDogcWEgPSBcIlwiLCBwYSAmJiAodmEgPSBhID0+IHtcbiAgICB2YXIgYiA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGIub3BlbihcIkdFVFwiLCBhLCAhMSk7XG4gICAgYi5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgYi5zZW5kKG51bGwpO1xuICAgIHJldHVybiBuZXcgVWludDhBcnJheShiLnJlc3BvbnNlKTtcbiAgfSksIHVhID0gKGEsIGIsIGMpID0+IHtcbiAgICB2YXIgZCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGQub3BlbihcIkdFVFwiLCBhLCAhMCk7XG4gICAgZC5yZXNwb25zZVR5cGUgPSBcImFycmF5YnVmZmVyXCI7XG4gICAgZC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAyMDAgPT0gZC5zdGF0dXMgfHwgMCA9PSBkLnN0YXR1cyAmJiBkLnJlc3BvbnNlID8gYihkLnJlc3BvbnNlKSA6IGMoKTtcbiAgICB9O1xuICAgIGQub25lcnJvciA9IGM7XG4gICAgZC5zZW5kKG51bGwpO1xuICB9O1xufVxudmFyIHdhID0gbS5wcmludCB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpLCB4YSA9IG0ucHJpbnRFcnIgfHwgY29uc29sZS5lcnJvci5iaW5kKGNvbnNvbGUpO1xuT2JqZWN0LmFzc2lnbihtLCBtYSk7XG5tYSA9IG51bGw7XG5tLnRoaXNQcm9ncmFtICYmIChuYSA9IG0udGhpc1Byb2dyYW0pO1xudmFyIHlhO1xubS53YXNtQmluYXJ5ICYmICh5YSA9IG0ud2FzbUJpbmFyeSk7XG52YXIgbm9FeGl0UnVudGltZSA9IG0ubm9FeGl0UnVudGltZSB8fCAhMDtcblwib2JqZWN0XCIgIT0gdHlwZW9mIFdlYkFzc2VtYmx5ICYmIEFhKFwibm8gbmF0aXZlIHdhc20gc3VwcG9ydCBkZXRlY3RlZFwiKTtcbnZhciBCYSwgeSwgQ2EgPSAhMSwgQiwgRSwgRGEsIEVhLCBMLCBOLCBGYSwgSWE7XG5mdW5jdGlvbiBKYSgpIHtcbiAgdmFyIGEgPSBCYS5idWZmZXI7XG4gIG0uSEVBUDggPSBCID0gbmV3IEludDhBcnJheShhKTtcbiAgbS5IRUFQMTYgPSBEYSA9IG5ldyBJbnQxNkFycmF5KGEpO1xuICBtLkhFQVAzMiA9IEwgPSBuZXcgSW50MzJBcnJheShhKTtcbiAgbS5IRUFQVTggPSBFID0gbmV3IFVpbnQ4QXJyYXkoYSk7XG4gIG0uSEVBUFUxNiA9IEVhID0gbmV3IFVpbnQxNkFycmF5KGEpO1xuICBtLkhFQVBVMzIgPSBOID0gbmV3IFVpbnQzMkFycmF5KGEpO1xuICBtLkhFQVBGMzIgPSBGYSA9IG5ldyBGbG9hdDMyQXJyYXkoYSk7XG4gIG0uSEVBUEY2NCA9IElhID0gbmV3IEZsb2F0NjRBcnJheShhKTtcbn1cbnZhciBLYSwgTGEgPSBbXSwgTWEgPSBbXSwgTmEgPSBbXTtcbmZ1bmN0aW9uIE9hKCkge1xuICB2YXIgYSA9IG0ucHJlUnVuLnNoaWZ0KCk7XG4gIExhLnVuc2hpZnQoYSk7XG59XG52YXIgUGEgPSAwLCBRYSA9IG51bGwsIFJhID0gbnVsbDtcbmZ1bmN0aW9uIEFhKGEpIHtcbiAgaWYgKG0ub25BYm9ydCkge1xuICAgIG0ub25BYm9ydChhKTtcbiAgfVxuICBhID0gXCJBYm9ydGVkKFwiICsgYSArIFwiKVwiO1xuICB4YShhKTtcbiAgQ2EgPSAhMDtcbiAgYSA9IG5ldyBXZWJBc3NlbWJseS5SdW50aW1lRXJyb3IoYSArIFwiLiBCdWlsZCB3aXRoIC1zQVNTRVJUSU9OUyBmb3IgbW9yZSBpbmZvLlwiKTtcbiAgZWEoYSk7XG4gIHRocm93IGE7XG59XG5mdW5jdGlvbiBTYShhKSB7XG4gIHJldHVybiBhLnN0YXJ0c1dpdGgoXCJkYXRhOmFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbTtiYXNlNjQsXCIpO1xufVxudmFyIFRhO1xuVGEgPSBcImNhbnZhc19hZHZhbmNlZC53YXNtXCI7XG5pZiAoIVNhKFRhKSkge1xuICB2YXIgVWEgPSBUYTtcbiAgVGEgPSBtLmxvY2F0ZUZpbGUgPyBtLmxvY2F0ZUZpbGUoVWEsIHFhKSA6IHFhICsgVWE7XG59XG5mdW5jdGlvbiBWYShhKSB7XG4gIGlmIChhID09IFRhICYmIHlhKSB7XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHlhKTtcbiAgfVxuICBpZiAodmEpIHtcbiAgICByZXR1cm4gdmEoYSk7XG4gIH1cbiAgdGhyb3cgXCJib3RoIGFzeW5jIGFuZCBzeW5jIGZldGNoaW5nIG9mIHRoZSB3YXNtIGZhaWxlZFwiO1xufVxuZnVuY3Rpb24gV2EoYSkge1xuICBpZiAoIXlhICYmIChvYSB8fCBwYSkpIHtcbiAgICBpZiAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBmZXRjaCAmJiAhYS5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSkge1xuICAgICAgcmV0dXJuIGZldGNoKGEsIHtjcmVkZW50aWFsczpcInNhbWUtb3JpZ2luXCJ9KS50aGVuKGIgPT4ge1xuICAgICAgICBpZiAoIWIub2spIHtcbiAgICAgICAgICB0aHJvdyBcImZhaWxlZCB0byBsb2FkIHdhc20gYmluYXJ5IGZpbGUgYXQgJ1wiICsgYSArIFwiJ1wiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiLmFycmF5QnVmZmVyKCk7XG4gICAgICB9KS5jYXRjaCgoKSA9PiBWYShhKSk7XG4gICAgfVxuICAgIGlmICh1YSkge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChiLCBjKSA9PiB7XG4gICAgICAgIHVhKGEsIGQgPT4gYihuZXcgVWludDhBcnJheShkKSksIGMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IFZhKGEpKTtcbn1cbmZ1bmN0aW9uIFhhKGEsIGIsIGMpIHtcbiAgcmV0dXJuIFdhKGEpLnRoZW4oZCA9PiBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZShkLCBiKSkudGhlbihkID0+IGQpLnRoZW4oYywgZCA9PiB7XG4gICAgeGEoXCJmYWlsZWQgdG8gYXN5bmNocm9ub3VzbHkgcHJlcGFyZSB3YXNtOiBcIiArIGQpO1xuICAgIEFhKGQpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIFlhKGEsIGIpIHtcbiAgdmFyIGMgPSBUYTtcbiAgcmV0dXJuIHlhIHx8IFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2ViQXNzZW1ibHkuaW5zdGFudGlhdGVTdHJlYW1pbmcgfHwgU2EoYykgfHwgYy5zdGFydHNXaXRoKFwiZmlsZTovL1wiKSB8fCBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGZldGNoID8gWGEoYywgYSwgYikgOiBmZXRjaChjLCB7Y3JlZGVudGlhbHM6XCJzYW1lLW9yaWdpblwifSkudGhlbihkID0+IFdlYkFzc2VtYmx5Lmluc3RhbnRpYXRlU3RyZWFtaW5nKGQsIGEpLnRoZW4oYiwgZnVuY3Rpb24oZSkge1xuICAgIHhhKFwid2FzbSBzdHJlYW1pbmcgY29tcGlsZSBmYWlsZWQ6IFwiICsgZSk7XG4gICAgeGEoXCJmYWxsaW5nIGJhY2sgdG8gQXJyYXlCdWZmZXIgaW5zdGFudGlhdGlvblwiKTtcbiAgICByZXR1cm4gWGEoYywgYSwgYik7XG4gIH0pKTtcbn1cbnZhciBaYSwgJGEsIGRiID0gezQzNzc1NjooYSwgYiwgYywgZCwgZSkgPT4ge1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdyB8fCB2b2lkIDAgPT09ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiB3aW5kb3cuaCkge1xuICAgIHdpbmRvdy5oID0ge0FhOjB9O1xuICAgIHdpbmRvdy5oLkkgPSB7fTtcbiAgICB3aW5kb3cuaC5JLnlhID0gYTtcbiAgICB3aW5kb3cuaC5JLmNhcHR1cmUgPSBiO1xuICAgIHdpbmRvdy5oLkkuTGEgPSBjO1xuICAgIHdpbmRvdy5oLmdhID0ge307XG4gICAgd2luZG93LmguZ2Euc3RvcHBlZCA9IGQ7XG4gICAgd2luZG93LmguZ2EueGIgPSBlO1xuICAgIGxldCBmID0gd2luZG93Lmg7XG4gICAgZi5EID0gW107XG4gICAgZi55YyA9IGZ1bmN0aW9uKGcpIHtcbiAgICAgIGZvciAodmFyIG4gPSAwOyBuIDwgZi5ELmxlbmd0aDsgKytuKSB7XG4gICAgICAgIGlmIChudWxsID09IGYuRFtuXSkge1xuICAgICAgICAgIHJldHVybiBmLkRbbl0gPSBnLCBuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmLkQucHVzaChnKTtcbiAgICAgIHJldHVybiBmLkQubGVuZ3RoIC0gMTtcbiAgICB9O1xuICAgIGYuQ2IgPSBmdW5jdGlvbihnKSB7XG4gICAgICBmb3IgKGYuRFtnXSA9IG51bGw7IDAgPCBmLkQubGVuZ3RoOykge1xuICAgICAgICBpZiAobnVsbCA9PSBmLkRbZi5ELmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgZi5ELnBvcCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBmLlNjID0gZnVuY3Rpb24oZykge1xuICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCBmLkQubGVuZ3RoOyArK24pIHtcbiAgICAgICAgaWYgKGYuRFtuXSA9PSBnKSB7XG4gICAgICAgICAgcmV0dXJuIGYuQ2Iobik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIGYucmEgPSBmdW5jdGlvbihnKSB7XG4gICAgICByZXR1cm4gZi5EW2ddO1xuICAgIH07XG4gICAgZi5CYiA9IFtcInRvdWNoZW5kXCIsIFwiY2xpY2tcIl07XG4gICAgZi51bmxvY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGcgPSAwOyBnIDwgZi5ELmxlbmd0aDsgKytnKSB7XG4gICAgICAgIHZhciBuID0gZi5EW2ddO1xuICAgICAgICBudWxsICE9IG4gJiYgbnVsbCAhPSBuLkogJiYgbi5zdGF0ZSA9PT0gZi5nYS54YiAmJiBuLkoucmVzdW1lKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgYWIobi5wYik7XG4gICAgICAgIH0sIHAgPT4ge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gcmVzdW1lIGF1ZGlvY29udGV4dFwiLCBwKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBmLkJiLm1hcChmdW5jdGlvbihwKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIocCwgZi51bmxvY2ssICEwKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgZi5CYi5tYXAoZnVuY3Rpb24oZykge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihnLCBmLnVubG9jaywgITApO1xuICAgIH0pO1xuICB9XG4gIHdpbmRvdy5oLkFhICs9IDE7XG4gIHJldHVybiAxO1xufSwgNDM5OTM0OigpID0+IHtcbiAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIHdpbmRvdy5oICYmICgtLXdpbmRvdy5oLkFhLCAwID09PSB3aW5kb3cuaC5BYSAmJiBkZWxldGUgd2luZG93LmgpO1xufSwgNDQwMDk4OigpID0+IHZvaWQgMCAhPT0gbmF2aWdhdG9yLm1lZGlhRGV2aWNlcyAmJiB2b2lkIDAgIT09IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhLCA0NDAyMDI6KCkgPT4ge1xuICB0cnkge1xuICAgIHZhciBhID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8IHdpbmRvdy53ZWJraXRBdWRpb0NvbnRleHQpKCksIGIgPSBhLnNhbXBsZVJhdGU7XG4gICAgYS5jbG9zZSgpO1xuICAgIHJldHVybiBiO1xuICB9IGNhdGNoIChjKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn0sIDQ0MDM3MzooYSwgYiwgYywgZCwgZSwgZikgPT4ge1xuICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHdpbmRvdy5oKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG4gIHZhciBnID0ge30sIG4gPSB7fTtcbiAgYSA9PSB3aW5kb3cuaC5JLnlhICYmIDAgIT0gYyAmJiAobi5zYW1wbGVSYXRlID0gYyk7XG4gIGcuSiA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fCB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KShuKTtcbiAgZy5KLnN1c3BlbmQoKTtcbiAgZy5zdGF0ZSA9IHdpbmRvdy5oLmdhLnN0b3BwZWQ7XG4gIGMgPSAwO1xuICBhICE9IHdpbmRvdy5oLkkueWEgJiYgKGMgPSBiKTtcbiAgZy5aID0gZy5KLmNyZWF0ZVNjcmlwdFByb2Nlc3NvcihkLCBjLCBiKTtcbiAgZy5aLm9uYXVkaW9wcm9jZXNzID0gZnVuY3Rpb24ocCkge1xuICAgIGlmIChudWxsID09IGcuc2EgfHwgMCA9PSBnLnNhLmxlbmd0aCkge1xuICAgICAgZy5zYSA9IG5ldyBGbG9hdDMyQXJyYXkoRmEuYnVmZmVyLCBlLCBkICogYik7XG4gICAgfVxuICAgIGlmIChhID09IHdpbmRvdy5oLkkuY2FwdHVyZSB8fCBhID09IHdpbmRvdy5oLkkuTGEpIHtcbiAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgYjsgbCArPSAxKSB7XG4gICAgICAgIGZvciAodmFyIHUgPSBwLmlucHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKGwpLCB2ID0gZy5zYSwgeCA9IDA7IHggPCBkOyB4ICs9IDEpIHtcbiAgICAgICAgICB2W3ggKiBiICsgbF0gPSB1W3hdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBiYihmLCBkLCBlKTtcbiAgICB9XG4gICAgaWYgKGEgPT0gd2luZG93LmguSS55YSB8fCBhID09IHdpbmRvdy5oLkkuTGEpIHtcbiAgICAgIGZvciAoY2IoZiwgZCwgZSksIGwgPSAwOyBsIDwgcC5vdXRwdXRCdWZmZXIubnVtYmVyT2ZDaGFubmVsczsgKytsKSB7XG4gICAgICAgIGZvciAodSA9IHAub3V0cHV0QnVmZmVyLmdldENoYW5uZWxEYXRhKGwpLCB2ID0gZy5zYSwgeCA9IDA7IHggPCBkOyB4ICs9IDEpIHtcbiAgICAgICAgICB1W3hdID0gdlt4ICogYiArIGxdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobCA9IDA7IGwgPCBwLm91dHB1dEJ1ZmZlci5udW1iZXJPZkNoYW5uZWxzOyArK2wpIHtcbiAgICAgICAgcC5vdXRwdXRCdWZmZXIuZ2V0Q2hhbm5lbERhdGEobCkuZmlsbCgwLjApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgYSAhPSB3aW5kb3cuaC5JLmNhcHR1cmUgJiYgYSAhPSB3aW5kb3cuaC5JLkxhIHx8IG5hdmlnYXRvci5tZWRpYURldmljZXMuZ2V0VXNlck1lZGlhKHthdWRpbzohMCwgdmlkZW86ITF9KS50aGVuKGZ1bmN0aW9uKHApIHtcbiAgICBnLkRhID0gZy5KLmNyZWF0ZU1lZGlhU3RyZWFtU291cmNlKHApO1xuICAgIGcuRGEuY29ubmVjdChnLlopO1xuICAgIGcuWi5jb25uZWN0KGcuSi5kZXN0aW5hdGlvbik7XG4gIH0pLmNhdGNoKGZ1bmN0aW9uKHApIHtcbiAgICBjb25zb2xlLmxvZyhcIkZhaWxlZCB0byBnZXQgdXNlciBtZWRpYTogXCIgKyBwKTtcbiAgfSk7XG4gIGEgPT0gd2luZG93LmguSS55YSAmJiBnLlouY29ubmVjdChnLkouZGVzdGluYXRpb24pO1xuICBnLnBiID0gZjtcbiAgcmV0dXJuIHdpbmRvdy5oLnljKGcpO1xufSwgNDQzMjUwOmEgPT4gd2luZG93LmgucmEoYSkuSi5zYW1wbGVSYXRlLCA0NDMzMjM6YSA9PiB7XG4gIGEgPSB3aW5kb3cuaC5yYShhKTtcbiAgdm9pZCAwICE9PSBhLlogJiYgKGEuWi5vbmF1ZGlvcHJvY2VzcyA9IGZ1bmN0aW9uKCkge1xuICB9LCBhLlouZGlzY29ubmVjdCgpLCBhLlogPSB2b2lkIDApO1xuICB2b2lkIDAgIT09IGEuRGEgJiYgKGEuRGEuZGlzY29ubmVjdCgpLCBhLkRhID0gdm9pZCAwKTtcbiAgYS5KLmNsb3NlKCk7XG4gIGEuSiA9IHZvaWQgMDtcbiAgYS5wYiA9IHZvaWQgMDtcbn0sIDQ0MzcyMzphID0+IHtcbiAgd2luZG93LmguQ2IoYSk7XG59LCA0NDM3NzM6YSA9PiB7XG4gIGEgPSB3aW5kb3cuaC5yYShhKTtcbiAgYS5KLnJlc3VtZSgpO1xuICBhLnN0YXRlID0gd2luZG93LmguZ2EueGI7XG59LCA0NDM5MTI6YSA9PiB7XG4gIGEgPSB3aW5kb3cuaC5yYShhKTtcbiAgYS5KLnN1c3BlbmQoKTtcbiAgYS5zdGF0ZSA9IHdpbmRvdy5oLmdhLnN0b3BwZWQ7XG59fSwgZWIgPSBhID0+IHtcbiAgZm9yICg7IDAgPCBhLmxlbmd0aDspIHtcbiAgICBhLnNoaWZ0KCkobSk7XG4gIH1cbn0sIGZiID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgYyA9IDAsIGQgPSBhLmxlbmd0aCAtIDE7IDAgPD0gZDsgZC0tKSB7XG4gICAgdmFyIGUgPSBhW2RdO1xuICAgIFwiLlwiID09PSBlID8gYS5zcGxpY2UoZCwgMSkgOiBcIi4uXCIgPT09IGUgPyAoYS5zcGxpY2UoZCwgMSksIGMrKykgOiBjICYmIChhLnNwbGljZShkLCAxKSwgYy0tKTtcbiAgfVxuICBpZiAoYikge1xuICAgIGZvciAoOyBjOyBjLS0pIHtcbiAgICAgIGEudW5zaGlmdChcIi4uXCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYTtcbn0sIGdiID0gYSA9PiB7XG4gIHZhciBiID0gXCIvXCIgPT09IGEuY2hhckF0KDApLCBjID0gXCIvXCIgPT09IGEuc3Vic3RyKC0xKTtcbiAgKGEgPSBmYihhLnNwbGl0KFwiL1wiKS5maWx0ZXIoZCA9PiAhIWQpLCAhYikuam9pbihcIi9cIikpIHx8IGIgfHwgKGEgPSBcIi5cIik7XG4gIGEgJiYgYyAmJiAoYSArPSBcIi9cIik7XG4gIHJldHVybiAoYiA/IFwiL1wiIDogXCJcIikgKyBhO1xufSwgaGIgPSBhID0+IHtcbiAgdmFyIGIgPSAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLy5leGVjKGEpLnNsaWNlKDEpO1xuICBhID0gYlswXTtcbiAgYiA9IGJbMV07XG4gIGlmICghYSAmJiAhYikge1xuICAgIHJldHVybiBcIi5cIjtcbiAgfVxuICBiICYmIChiID0gYi5zdWJzdHIoMCwgYi5sZW5ndGggLSAxKSk7XG4gIHJldHVybiBhICsgYjtcbn0sIGliID0gYSA9PiB7XG4gIGlmIChcIi9cIiA9PT0gYSkge1xuICAgIHJldHVybiBcIi9cIjtcbiAgfVxuICBhID0gZ2IoYSk7XG4gIGEgPSBhLnJlcGxhY2UoL1xcLyQvLCBcIlwiKTtcbiAgdmFyIGIgPSBhLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgcmV0dXJuIC0xID09PSBiID8gYSA6IGEuc3Vic3RyKGIgKyAxKTtcbn0sIGpiID0gKCkgPT4ge1xuICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgY3J5cHRvICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICAgIHJldHVybiBhID0+IGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYSk7XG4gIH1cbiAgQWEoXCJpbml0UmFuZG9tRGV2aWNlXCIpO1xufSwga2IgPSBhID0+IChrYiA9IGpiKCkpKGEpO1xuZnVuY3Rpb24gbGIoKSB7XG4gIGZvciAodmFyIGEgPSBcIlwiLCBiID0gITEsIGMgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgLTEgPD0gYyAmJiAhYjsgYy0tKSB7XG4gICAgYiA9IDAgPD0gYyA/IGFyZ3VtZW50c1tjXSA6IFwiL1wiO1xuICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBiKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQXJndW1lbnRzIHRvIHBhdGgucmVzb2x2ZSBtdXN0IGJlIHN0cmluZ3NcIik7XG4gICAgfVxuICAgIGlmICghYikge1xuICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGEgPSBiICsgXCIvXCIgKyBhO1xuICAgIGIgPSBcIi9cIiA9PT0gYi5jaGFyQXQoMCk7XG4gIH1cbiAgYSA9IGZiKGEuc3BsaXQoXCIvXCIpLmZpbHRlcihkID0+ICEhZCksICFiKS5qb2luKFwiL1wiKTtcbiAgcmV0dXJuIChiID8gXCIvXCIgOiBcIlwiKSArIGEgfHwgXCIuXCI7XG59XG52YXIgbWIgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBUZXh0RGVjb2RlciA/IG5ldyBUZXh0RGVjb2RlcihcInV0ZjhcIikgOiB2b2lkIDAsIG5iID0gKGEsIGIsIGMpID0+IHtcbiAgdmFyIGQgPSBiICsgYztcbiAgZm9yIChjID0gYjsgYVtjXSAmJiAhKGMgPj0gZCk7KSB7XG4gICAgKytjO1xuICB9XG4gIGlmICgxNiA8IGMgLSBiICYmIGEuYnVmZmVyICYmIG1iKSB7XG4gICAgcmV0dXJuIG1iLmRlY29kZShhLnN1YmFycmF5KGIsIGMpKTtcbiAgfVxuICBmb3IgKGQgPSBcIlwiOyBiIDwgYzspIHtcbiAgICB2YXIgZSA9IGFbYisrXTtcbiAgICBpZiAoZSAmIDEyOCkge1xuICAgICAgdmFyIGYgPSBhW2IrK10gJiA2MztcbiAgICAgIGlmICgxOTIgPT0gKGUgJiAyMjQpKSB7XG4gICAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoZSAmIDMxKSA8PCA2IHwgZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZyA9IGFbYisrXSAmIDYzO1xuICAgICAgICBlID0gMjI0ID09IChlICYgMjQwKSA/IChlICYgMTUpIDw8IDEyIHwgZiA8PCA2IHwgZyA6IChlICYgNykgPDwgMTggfCBmIDw8IDEyIHwgZyA8PCA2IHwgYVtiKytdICYgNjM7XG4gICAgICAgIDY1NTM2ID4gZSA/IGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlKSA6IChlIC09IDY1NTM2LCBkICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoNTUyOTYgfCBlID4+IDEwLCA1NjMyMCB8IGUgJiAxMDIzKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGQ7XG59LCBvYiA9IFtdLCBwYiA9IGEgPT4ge1xuICBmb3IgKHZhciBiID0gMCwgYyA9IDA7IGMgPCBhLmxlbmd0aDsgKytjKSB7XG4gICAgdmFyIGQgPSBhLmNoYXJDb2RlQXQoYyk7XG4gICAgMTI3ID49IGQgPyBiKysgOiAyMDQ3ID49IGQgPyBiICs9IDIgOiA1NTI5NiA8PSBkICYmIDU3MzQzID49IGQgPyAoYiArPSA0LCArK2MpIDogYiArPSAzO1xuICB9XG4gIHJldHVybiBiO1xufSwgcWIgPSAoYSwgYiwgYywgZCkgPT4ge1xuICBpZiAoISgwIDwgZCkpIHtcbiAgICByZXR1cm4gMDtcbiAgfVxuICB2YXIgZSA9IGM7XG4gIGQgPSBjICsgZCAtIDE7XG4gIGZvciAodmFyIGYgPSAwOyBmIDwgYS5sZW5ndGg7ICsrZikge1xuICAgIHZhciBnID0gYS5jaGFyQ29kZUF0KGYpO1xuICAgIGlmICg1NTI5NiA8PSBnICYmIDU3MzQzID49IGcpIHtcbiAgICAgIHZhciBuID0gYS5jaGFyQ29kZUF0KCsrZik7XG4gICAgICBnID0gNjU1MzYgKyAoKGcgJiAxMDIzKSA8PCAxMCkgfCBuICYgMTAyMztcbiAgICB9XG4gICAgaWYgKDEyNyA+PSBnKSB7XG4gICAgICBpZiAoYyA+PSBkKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgYltjKytdID0gZztcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKDIwNDcgPj0gZykge1xuICAgICAgICBpZiAoYyArIDEgPj0gZCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGJbYysrXSA9IDE5MiB8IGcgPj4gNjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICg2NTUzNSA+PSBnKSB7XG4gICAgICAgICAgaWYgKGMgKyAyID49IGQpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBiW2MrK10gPSAyMjQgfCBnID4+IDEyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjICsgMyA+PSBkKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYltjKytdID0gMjQwIHwgZyA+PiAxODtcbiAgICAgICAgICBiW2MrK10gPSAxMjggfCBnID4+IDEyICYgNjM7XG4gICAgICAgIH1cbiAgICAgICAgYltjKytdID0gMTI4IHwgZyA+PiA2ICYgNjM7XG4gICAgICB9XG4gICAgICBiW2MrK10gPSAxMjggfCBnICYgNjM7XG4gICAgfVxuICB9XG4gIGJbY10gPSAwO1xuICByZXR1cm4gYyAtIGU7XG59O1xuZnVuY3Rpb24gcmIoYSwgYikge1xuICB2YXIgYyA9IEFycmF5KHBiKGEpICsgMSk7XG4gIGEgPSBxYihhLCBjLCAwLCBjLmxlbmd0aCk7XG4gIGIgJiYgKGMubGVuZ3RoID0gYSk7XG4gIHJldHVybiBjO1xufVxudmFyIHNiID0gW107XG5mdW5jdGlvbiB0YihhLCBiKSB7XG4gIHNiW2FdID0ge2lucHV0OltdLCBGOltdLCBWOmJ9O1xuICB1YihhLCB2Yik7XG59XG52YXIgdmIgPSB7b3BlbjpmdW5jdGlvbihhKSB7XG4gIHZhciBiID0gc2JbYS5ub2RlLnphXTtcbiAgaWYgKCFiKSB7XG4gICAgdGhyb3cgbmV3IE8oNDMpO1xuICB9XG4gIGEucyA9IGI7XG4gIGEuc2Vla2FibGUgPSAhMTtcbn0sIGNsb3NlOmZ1bmN0aW9uKGEpIHtcbiAgYS5zLlYucWEoYS5zKTtcbn0sIHFhOmZ1bmN0aW9uKGEpIHtcbiAgYS5zLlYucWEoYS5zKTtcbn0sIHJlYWQ6ZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICBpZiAoIWEucyB8fCAhYS5zLlYuaWIpIHtcbiAgICB0aHJvdyBuZXcgTyg2MCk7XG4gIH1cbiAgZm9yICh2YXIgZSA9IDAsIGYgPSAwOyBmIDwgZDsgZisrKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBnID0gYS5zLlYuaWIoYS5zKTtcbiAgICB9IGNhdGNoIChuKSB7XG4gICAgICB0aHJvdyBuZXcgTygyOSk7XG4gICAgfVxuICAgIGlmICh2b2lkIDAgPT09IGcgJiYgMCA9PT0gZSkge1xuICAgICAgdGhyb3cgbmV3IE8oNik7XG4gICAgfVxuICAgIGlmIChudWxsID09PSBnIHx8IHZvaWQgMCA9PT0gZykge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGUrKztcbiAgICBiW2MgKyBmXSA9IGc7XG4gIH1cbiAgZSAmJiAoYS5ub2RlLnRpbWVzdGFtcCA9IERhdGUubm93KCkpO1xuICByZXR1cm4gZTtcbn0sIHdyaXRlOmZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgaWYgKCFhLnMgfHwgIWEucy5WLk9hKSB7XG4gICAgdGhyb3cgbmV3IE8oNjApO1xuICB9XG4gIHRyeSB7XG4gICAgZm9yICh2YXIgZSA9IDA7IGUgPCBkOyBlKyspIHtcbiAgICAgIGEucy5WLk9hKGEucywgYltjICsgZV0pO1xuICAgIH1cbiAgfSBjYXRjaCAoZikge1xuICAgIHRocm93IG5ldyBPKDI5KTtcbiAgfVxuICBkICYmIChhLm5vZGUudGltZXN0YW1wID0gRGF0ZS5ub3coKSk7XG4gIHJldHVybiBlO1xufSx9LCB3YiA9IHtpYjpmdW5jdGlvbigpIHtcbiAgYToge1xuICAgIGlmICghb2IubGVuZ3RoKSB7XG4gICAgICB2YXIgYSA9IG51bGw7XG4gICAgICBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB3aW5kb3cgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiB3aW5kb3cucHJvbXB0ID8gKGEgPSB3aW5kb3cucHJvbXB0KFwiSW5wdXQ6IFwiKSwgbnVsbCAhPT0gYSAmJiAoYSArPSBcIlxcblwiKSkgOiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIHJlYWRsaW5lICYmIChhID0gcmVhZGxpbmUoKSwgbnVsbCAhPT0gYSAmJiAoYSArPSBcIlxcblwiKSk7XG4gICAgICBpZiAoIWEpIHtcbiAgICAgICAgYSA9IG51bGw7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICB9XG4gICAgICBvYiA9IHJiKGEsICEwKTtcbiAgICB9XG4gICAgYSA9IG9iLnNoaWZ0KCk7XG4gIH1cbiAgcmV0dXJuIGE7XG59LCBPYTpmdW5jdGlvbihhLCBiKSB7XG4gIG51bGwgPT09IGIgfHwgMTAgPT09IGIgPyAod2EobmIoYS5GLCAwKSksIGEuRiA9IFtdKSA6IDAgIT0gYiAmJiBhLkYucHVzaChiKTtcbn0sIHFhOmZ1bmN0aW9uKGEpIHtcbiAgYS5GICYmIDAgPCBhLkYubGVuZ3RoICYmICh3YShuYihhLkYsIDApKSwgYS5GID0gW10pO1xufSwgYmM6ZnVuY3Rpb24oKSB7XG4gIHJldHVybiB7RmM6MjU4NTYsIEhjOjUsIEVjOjE5MSwgR2M6MzUzODcsIERjOlszLCAyOCwgMTI3LCAyMSwgNCwgMCwgMSwgMCwgMTcsIDE5LCAyNiwgMCwgMTgsIDE1LCAyMywgMjIsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsXX07XG59LCBjYzpmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDA7XG59LCBkYzpmdW5jdGlvbigpIHtcbiAgcmV0dXJuIFsyNCwgODBdO1xufSx9LCB4YiA9IHtPYTpmdW5jdGlvbihhLCBiKSB7XG4gIG51bGwgPT09IGIgfHwgMTAgPT09IGIgPyAoeGEobmIoYS5GLCAwKSksIGEuRiA9IFtdKSA6IDAgIT0gYiAmJiBhLkYucHVzaChiKTtcbn0sIHFhOmZ1bmN0aW9uKGEpIHtcbiAgYS5GICYmIDAgPCBhLkYubGVuZ3RoICYmICh4YShuYihhLkYsIDApKSwgYS5GID0gW10pO1xufSx9O1xuZnVuY3Rpb24geWIoYSwgYikge1xuICB2YXIgYyA9IGEuaiA/IGEuai5sZW5ndGggOiAwO1xuICBjID49IGIgfHwgKGIgPSBNYXRoLm1heChiLCBjICogKDEwNDg1NzYgPiBjID8gMi4wIDogMS4xMjUpID4+PiAwKSwgMCAhPSBjICYmIChiID0gTWF0aC5tYXgoYiwgMjU2KSksIGMgPSBhLmosIGEuaiA9IG5ldyBVaW50OEFycmF5KGIpLCAwIDwgYS52ICYmIGEuai5zZXQoYy5zdWJhcnJheSgwLCBhLnYpLCAwKSk7XG59XG52YXIgUCA9IHtPOm51bGwsIFUoKSB7XG4gIHJldHVybiBQLmNyZWF0ZU5vZGUobnVsbCwgXCIvXCIsIDE2ODk1LCAwKTtcbn0sIGNyZWF0ZU5vZGUoYSwgYiwgYywgZCkge1xuICBpZiAoMjQ1NzYgPT09IChjICYgNjE0NDApIHx8IDQwOTYgPT09IChjICYgNjE0NDApKSB7XG4gICAgdGhyb3cgbmV3IE8oNjMpO1xuICB9XG4gIFAuTyB8fCAoUC5PID0ge2Rpcjp7bm9kZTp7WTpQLmwuWSwgUDpQLmwuUCwga2E6UC5sLmthLCB2YTpQLmwudmEsIHViOlAubC51YiwgQWI6UC5sLkFiLCB2YjpQLmwudmIsIHNiOlAubC5zYiwgRWE6UC5sLkVhfSwgc3RyZWFtOntiYTpQLm0uYmF9fSwgZmlsZTp7bm9kZTp7WTpQLmwuWSwgUDpQLmwuUH0sIHN0cmVhbTp7YmE6UC5tLmJhLCByZWFkOlAubS5yZWFkLCB3cml0ZTpQLm0ud3JpdGUsIHBhOlAubS5wYSwgbGI6UC5tLmxiLCBuYjpQLm0ubmJ9fSwgbGluazp7bm9kZTp7WTpQLmwuWSwgUDpQLmwuUCwgbWE6UC5sLm1hfSwgc3RyZWFtOnt9fSwgJGE6e25vZGU6e1k6UC5sLlksIFA6UC5sLlB9LCBzdHJlYW06emJ9fSk7XG4gIGMgPSBBYihhLCBiLCBjLCBkKTtcbiAgMTYzODQgPT09IChjLm1vZGUgJiA2MTQ0MCkgPyAoYy5sID0gUC5PLmRpci5ub2RlLCBjLm0gPSBQLk8uZGlyLnN0cmVhbSwgYy5qID0ge30pIDogMzI3NjggPT09IChjLm1vZGUgJiA2MTQ0MCkgPyAoYy5sID0gUC5PLmZpbGUubm9kZSwgYy5tID0gUC5PLmZpbGUuc3RyZWFtLCBjLnYgPSAwLCBjLmogPSBudWxsKSA6IDQwOTYwID09PSAoYy5tb2RlICYgNjE0NDApID8gKGMubCA9IFAuTy5saW5rLm5vZGUsIGMubSA9IFAuTy5saW5rLnN0cmVhbSkgOiA4MTkyID09PSAoYy5tb2RlICYgNjE0NDApICYmIChjLmwgPSBQLk8uJGEubm9kZSwgYy5tID0gUC5PLiRhLnN0cmVhbSk7XG4gIGMudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgYSAmJiAoYS5qW2JdID0gYywgYS50aW1lc3RhbXAgPSBjLnRpbWVzdGFtcCk7XG4gIHJldHVybiBjO1xufSwgS2MoYSkge1xuICByZXR1cm4gYS5qID8gYS5qLnN1YmFycmF5ID8gYS5qLnN1YmFycmF5KDAsIGEudikgOiBuZXcgVWludDhBcnJheShhLmopIDogbmV3IFVpbnQ4QXJyYXkoMCk7XG59LCBsOntZKGEpIHtcbiAgdmFyIGIgPSB7fTtcbiAgYi5KYyA9IDgxOTIgPT09IChhLm1vZGUgJiA2MTQ0MCkgPyBhLmlkIDogMTtcbiAgYi5NYyA9IGEuaWQ7XG4gIGIubW9kZSA9IGEubW9kZTtcbiAgYi5PYyA9IDE7XG4gIGIudWlkID0gMDtcbiAgYi5MYyA9IDA7XG4gIGIuemEgPSBhLnphO1xuICAxNjM4NCA9PT0gKGEubW9kZSAmIDYxNDQwKSA/IGIuc2l6ZSA9IDQwOTYgOiAzMjc2OCA9PT0gKGEubW9kZSAmIDYxNDQwKSA/IGIuc2l6ZSA9IGEudiA6IDQwOTYwID09PSAoYS5tb2RlICYgNjE0NDApID8gYi5zaXplID0gYS5saW5rLmxlbmd0aCA6IGIuc2l6ZSA9IDA7XG4gIGIuQmMgPSBuZXcgRGF0ZShhLnRpbWVzdGFtcCk7XG4gIGIuTmMgPSBuZXcgRGF0ZShhLnRpbWVzdGFtcCk7XG4gIGIuSWMgPSBuZXcgRGF0ZShhLnRpbWVzdGFtcCk7XG4gIGIuSmIgPSA0MDk2O1xuICBiLkNjID0gTWF0aC5jZWlsKGIuc2l6ZSAvIGIuSmIpO1xuICByZXR1cm4gYjtcbn0sIFAoYSwgYikge1xuICB2b2lkIDAgIT09IGIubW9kZSAmJiAoYS5tb2RlID0gYi5tb2RlKTtcbiAgdm9pZCAwICE9PSBiLnRpbWVzdGFtcCAmJiAoYS50aW1lc3RhbXAgPSBiLnRpbWVzdGFtcCk7XG4gIGlmICh2b2lkIDAgIT09IGIuc2l6ZSAmJiAoYiA9IGIuc2l6ZSwgYS52ICE9IGIpKSB7XG4gICAgaWYgKDAgPT0gYikge1xuICAgICAgYS5qID0gbnVsbCwgYS52ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGMgPSBhLmo7XG4gICAgICBhLmogPSBuZXcgVWludDhBcnJheShiKTtcbiAgICAgIGMgJiYgYS5qLnNldChjLnN1YmFycmF5KDAsIE1hdGgubWluKGIsIGEudikpKTtcbiAgICAgIGEudiA9IGI7XG4gICAgfVxuICB9XG59LCBrYSgpIHtcbiAgdGhyb3cgQmJbNDRdO1xufSwgdmEoYSwgYiwgYywgZCkge1xuICByZXR1cm4gUC5jcmVhdGVOb2RlKGEsIGIsIGMsIGQpO1xufSwgdWIoYSwgYiwgYykge1xuICBpZiAoMTYzODQgPT09IChhLm1vZGUgJiA2MTQ0MCkpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGQgPSBDYihiLCBjKTtcbiAgICB9IGNhdGNoIChmKSB7XG4gICAgfVxuICAgIGlmIChkKSB7XG4gICAgICBmb3IgKHZhciBlIGluIGQuaikge1xuICAgICAgICB0aHJvdyBuZXcgTyg1NSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGRlbGV0ZSBhLnBhcmVudC5qW2EubmFtZV07XG4gIGEucGFyZW50LnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG4gIGEubmFtZSA9IGM7XG4gIGIualtjXSA9IGE7XG4gIGIudGltZXN0YW1wID0gYS5wYXJlbnQudGltZXN0YW1wO1xuICBhLnBhcmVudCA9IGI7XG59LCBBYihhLCBiKSB7XG4gIGRlbGV0ZSBhLmpbYl07XG4gIGEudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbn0sIHZiKGEsIGIpIHtcbiAgdmFyIGMgPSBDYihhLCBiKSwgZDtcbiAgZm9yIChkIGluIGMuaikge1xuICAgIHRocm93IG5ldyBPKDU1KTtcbiAgfVxuICBkZWxldGUgYS5qW2JdO1xuICBhLnRpbWVzdGFtcCA9IERhdGUubm93KCk7XG59LCBzYihhKSB7XG4gIHZhciBiID0gW1wiLlwiLCBcIi4uXCJdLCBjO1xuICBmb3IgKGMgaW4gYS5qKSB7XG4gICAgYS5qLmhhc093blByb3BlcnR5KGMpICYmIGIucHVzaChjKTtcbiAgfVxuICByZXR1cm4gYjtcbn0sIEVhKGEsIGIsIGMpIHtcbiAgYSA9IFAuY3JlYXRlTm9kZShhLCBiLCA0MTQ3MSwgMCk7XG4gIGEubGluayA9IGM7XG4gIHJldHVybiBhO1xufSwgbWEoYSkge1xuICBpZiAoNDA5NjAgIT09IChhLm1vZGUgJiA2MTQ0MCkpIHtcbiAgICB0aHJvdyBuZXcgTygyOCk7XG4gIH1cbiAgcmV0dXJuIGEubGluaztcbn0sfSwgbTp7cmVhZChhLCBiLCBjLCBkLCBlKSB7XG4gIHZhciBmID0gYS5ub2RlLmo7XG4gIGlmIChlID49IGEubm9kZS52KSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgYSA9IE1hdGgubWluKGEubm9kZS52IC0gZSwgZCk7XG4gIGlmICg4IDwgYSAmJiBmLnN1YmFycmF5KSB7XG4gICAgYi5zZXQoZi5zdWJhcnJheShlLCBlICsgYSksIGMpO1xuICB9IGVsc2Uge1xuICAgIGZvciAoZCA9IDA7IGQgPCBhOyBkKyspIHtcbiAgICAgIGJbYyArIGRdID0gZltlICsgZF07XG4gICAgfVxuICB9XG4gIHJldHVybiBhO1xufSwgd3JpdGUoYSwgYiwgYywgZCwgZSwgZikge1xuICBiLmJ1ZmZlciA9PT0gQi5idWZmZXIgJiYgKGYgPSAhMSk7XG4gIGlmICghZCkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIGEgPSBhLm5vZGU7XG4gIGEudGltZXN0YW1wID0gRGF0ZS5ub3coKTtcbiAgaWYgKGIuc3ViYXJyYXkgJiYgKCFhLmogfHwgYS5qLnN1YmFycmF5KSkge1xuICAgIGlmIChmKSB7XG4gICAgICByZXR1cm4gYS5qID0gYi5zdWJhcnJheShjLCBjICsgZCksIGEudiA9IGQ7XG4gICAgfVxuICAgIGlmICgwID09PSBhLnYgJiYgMCA9PT0gZSkge1xuICAgICAgcmV0dXJuIGEuaiA9IGIuc2xpY2UoYywgYyArIGQpLCBhLnYgPSBkO1xuICAgIH1cbiAgICBpZiAoZSArIGQgPD0gYS52KSB7XG4gICAgICByZXR1cm4gYS5qLnNldChiLnN1YmFycmF5KGMsIGMgKyBkKSwgZSksIGQ7XG4gICAgfVxuICB9XG4gIHliKGEsIGUgKyBkKTtcbiAgaWYgKGEuai5zdWJhcnJheSAmJiBiLnN1YmFycmF5KSB7XG4gICAgYS5qLnNldChiLnN1YmFycmF5KGMsIGMgKyBkKSwgZSk7XG4gIH0gZWxzZSB7XG4gICAgZm9yIChmID0gMDsgZiA8IGQ7IGYrKykge1xuICAgICAgYS5qW2UgKyBmXSA9IGJbYyArIGZdO1xuICAgIH1cbiAgfVxuICBhLnYgPSBNYXRoLm1heChhLnYsIGUgKyBkKTtcbiAgcmV0dXJuIGQ7XG59LCBiYShhLCBiLCBjKSB7XG4gIDEgPT09IGMgPyBiICs9IGEucG9zaXRpb24gOiAyID09PSBjICYmIDMyNzY4ID09PSAoYS5ub2RlLm1vZGUgJiA2MTQ0MCkgJiYgKGIgKz0gYS5ub2RlLnYpO1xuICBpZiAoMCA+IGIpIHtcbiAgICB0aHJvdyBuZXcgTygyOCk7XG4gIH1cbiAgcmV0dXJuIGI7XG59LCBwYShhLCBiLCBjKSB7XG4gIHliKGEubm9kZSwgYiArIGMpO1xuICBhLm5vZGUudiA9IE1hdGgubWF4KGEubm9kZS52LCBiICsgYyk7XG59LCBsYihhLCBiLCBjLCBkLCBlKSB7XG4gIGlmICgzMjc2OCAhPT0gKGEubm9kZS5tb2RlICYgNjE0NDApKSB7XG4gICAgdGhyb3cgbmV3IE8oNDMpO1xuICB9XG4gIGEgPSBhLm5vZGUuajtcbiAgaWYgKGUgJiAyIHx8IGEuYnVmZmVyICE9PSBCLmJ1ZmZlcikge1xuICAgIGlmICgwIDwgYyB8fCBjICsgYiA8IGEubGVuZ3RoKSB7XG4gICAgICBhLnN1YmFycmF5ID8gYSA9IGEuc3ViYXJyYXkoYywgYyArIGIpIDogYSA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGEsIGMsIGMgKyBiKTtcbiAgICB9XG4gICAgYyA9ICEwO1xuICAgIEFhKCk7XG4gICAgYiA9IHZvaWQgMDtcbiAgICBpZiAoIWIpIHtcbiAgICAgIHRocm93IG5ldyBPKDQ4KTtcbiAgICB9XG4gICAgQi5zZXQoYSwgYik7XG4gIH0gZWxzZSB7XG4gICAgYyA9ICExLCBiID0gYS5ieXRlT2Zmc2V0O1xuICB9XG4gIHJldHVybiB7bzpiLCBNOmN9O1xufSwgbmIoYSwgYiwgYywgZCkge1xuICBQLm0ud3JpdGUoYSwgYiwgMCwgZCwgYywgITEpO1xuICByZXR1cm4gMDtcbn0sfSx9O1xuZnVuY3Rpb24gRGIoYSwgYikge1xuICB2YXIgYyA9IDA7XG4gIGEgJiYgKGMgfD0gMzY1KTtcbiAgYiAmJiAoYyB8PSAxNDYpO1xuICByZXR1cm4gYztcbn1cbnZhciBFYiA9IG51bGwsIEZiID0ge30sIEdiID0gW10sIEhiID0gMSwgSWIgPSBudWxsLCBKYiA9ICEwLCBPID0gbnVsbCwgQmIgPSB7fSwgTGIgPSAoYSwgYiA9IHt9KSA9PiB7XG4gIGEgPSBsYihhKTtcbiAgaWYgKCFhKSB7XG4gICAgcmV0dXJuIHtwYXRoOlwiXCIsIG5vZGU6bnVsbH07XG4gIH1cbiAgYiA9IE9iamVjdC5hc3NpZ24oe2diOiEwLCBRYTowfSwgYik7XG4gIGlmICg4IDwgYi5RYSkge1xuICAgIHRocm93IG5ldyBPKDMyKTtcbiAgfVxuICBhID0gYS5zcGxpdChcIi9cIikuZmlsdGVyKGcgPT4gISFnKTtcbiAgZm9yICh2YXIgYyA9IEViLCBkID0gXCIvXCIsIGUgPSAwOyBlIDwgYS5sZW5ndGg7IGUrKykge1xuICAgIHZhciBmID0gZSA9PT0gYS5sZW5ndGggLSAxO1xuICAgIGlmIChmICYmIGIucGFyZW50KSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYyA9IENiKGMsIGFbZV0pO1xuICAgIGQgPSBnYihkICsgXCIvXCIgKyBhW2VdKTtcbiAgICBjLndhICYmICghZiB8fCBmICYmIGIuZ2IpICYmIChjID0gYy53YS5yb290KTtcbiAgICBpZiAoIWYgfHwgYi5mYikge1xuICAgICAgZm9yIChmID0gMDsgNDA5NjAgPT09IChjLm1vZGUgJiA2MTQ0MCk7KSB7XG4gICAgICAgIGlmIChjID0gS2IoZCksIGQgPSBsYihoYihkKSwgYyksIGMgPSBMYihkLCB7UWE6Yi5RYSArIDF9KS5ub2RlLCA0MCA8IGYrKykge1xuICAgICAgICAgIHRocm93IG5ldyBPKDMyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4ge3BhdGg6ZCwgbm9kZTpjfTtcbn0sIE1iID0gYSA9PiB7XG4gIGZvciAodmFyIGI7Oykge1xuICAgIGlmIChhID09PSBhLnBhcmVudCkge1xuICAgICAgcmV0dXJuIGEgPSBhLlUubWIsIGIgPyBcIi9cIiAhPT0gYVthLmxlbmd0aCAtIDFdID8gYCR7YX0vJHtifWAgOiBhICsgYiA6IGE7XG4gICAgfVxuICAgIGIgPSBiID8gYCR7YS5uYW1lfS8ke2J9YCA6IGEubmFtZTtcbiAgICBhID0gYS5wYXJlbnQ7XG4gIH1cbn0sIE5iID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgYyA9IDAsIGQgPSAwOyBkIDwgYi5sZW5ndGg7IGQrKykge1xuICAgIGMgPSAoYyA8PCA1KSAtIGMgKyBiLmNoYXJDb2RlQXQoZCkgfCAwO1xuICB9XG4gIHJldHVybiAoYSArIGMgPj4+IDApICUgSWIubGVuZ3RoO1xufSwgQ2IgPSAoYSwgYikgPT4ge1xuICB2YXIgYztcbiAgaWYgKGMgPSAoYyA9IE9iKGEsIFwieFwiKSkgPyBjIDogYS5sLmthID8gMCA6IDIpIHtcbiAgICB0aHJvdyBuZXcgTyhjLCBhKTtcbiAgfVxuICBmb3IgKGMgPSBJYltOYihhLmlkLCBiKV07IGM7IGMgPSBjLmxjKSB7XG4gICAgdmFyIGQgPSBjLm5hbWU7XG4gICAgaWYgKGMucGFyZW50LmlkID09PSBhLmlkICYmIGQgPT09IGIpIHtcbiAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYS5sLmthKGEsIGIpO1xufSwgQWIgPSAoYSwgYiwgYywgZCkgPT4ge1xuICBhID0gbmV3IFBiKGEsIGIsIGMsIGQpO1xuICBiID0gTmIoYS5wYXJlbnQuaWQsIGEubmFtZSk7XG4gIGEubGMgPSBJYltiXTtcbiAgcmV0dXJuIEliW2JdID0gYTtcbn0sIFFiID0gYSA9PiB7XG4gIHZhciBiID0gW1wiclwiLCBcIndcIiwgXCJyd1wiXVthICYgM107XG4gIGEgJiA1MTIgJiYgKGIgKz0gXCJ3XCIpO1xuICByZXR1cm4gYjtcbn0sIE9iID0gKGEsIGIpID0+IHtcbiAgaWYgKEpiKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgaWYgKCFiLmluY2x1ZGVzKFwiclwiKSB8fCBhLm1vZGUgJiAyOTIpIHtcbiAgICBpZiAoYi5pbmNsdWRlcyhcIndcIikgJiYgIShhLm1vZGUgJiAxNDYpIHx8IGIuaW5jbHVkZXMoXCJ4XCIpICYmICEoYS5tb2RlICYgNzMpKSB7XG4gICAgICByZXR1cm4gMjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDI7XG4gIH1cbiAgcmV0dXJuIDA7XG59LCBSYiA9IChhLCBiKSA9PiB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIENiKGEsIGIpLCAyMDtcbiAgfSBjYXRjaCAoYykge1xuICB9XG4gIHJldHVybiBPYihhLCBcInd4XCIpO1xufSwgU2IgPSAoKSA9PiB7XG4gIGZvciAodmFyIGEgPSAwOyA0MDk2ID49IGE7IGErKykge1xuICAgIGlmICghR2JbYV0pIHtcbiAgICAgIHJldHVybiBhO1xuICAgIH1cbiAgfVxuICB0aHJvdyBuZXcgTygzMyk7XG59LCBUYiA9IGEgPT4ge1xuICBhID0gR2JbYV07XG4gIGlmICghYSkge1xuICAgIHRocm93IG5ldyBPKDgpO1xuICB9XG4gIHJldHVybiBhO1xufSwgVmIgPSAoYSwgYiA9IC0xKSA9PiB7XG4gIFViIHx8IChVYiA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaCA9IHt9O1xuICB9LCBVYi5wcm90b3R5cGUgPSB7fSwgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoVWIucHJvdG90eXBlLCB7b2JqZWN0OntnZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgfSwgc2V0KGMpIHtcbiAgICB0aGlzLm5vZGUgPSBjO1xuICB9fSwgZmxhZ3M6e2dldCgpIHtcbiAgICByZXR1cm4gdGhpcy5oLmZsYWdzO1xuICB9LCBzZXQoYykge1xuICAgIHRoaXMuaC5mbGFncyA9IGM7XG4gIH0sfSwgcG9zaXRpb246e2dldCgpIHtcbiAgICByZXR1cm4gdGhpcy5oLnBvc2l0aW9uO1xuICB9LCBzZXQoYykge1xuICAgIHRoaXMuaC5wb3NpdGlvbiA9IGM7XG4gIH0sfSx9KSk7XG4gIGEgPSBPYmplY3QuYXNzaWduKG5ldyBVYigpLCBhKTtcbiAgLTEgPT0gYiAmJiAoYiA9IFNiKCkpO1xuICBhLlggPSBiO1xuICByZXR1cm4gR2JbYl0gPSBhO1xufSwgemIgPSB7b3BlbjphID0+IHtcbiAgYS5tID0gRmJbYS5ub2RlLnphXS5tO1xuICBhLm0ub3BlbiAmJiBhLm0ub3BlbihhKTtcbn0sIGJhOigpID0+IHtcbiAgdGhyb3cgbmV3IE8oNzApO1xufSx9LCB1YiA9IChhLCBiKSA9PiB7XG4gIEZiW2FdID0ge206Yn07XG59LCBXYiA9IChhLCBiKSA9PiB7XG4gIHZhciBjID0gXCIvXCIgPT09IGIsIGQgPSAhYjtcbiAgaWYgKGMgJiYgRWIpIHtcbiAgICB0aHJvdyBuZXcgTygxMCk7XG4gIH1cbiAgaWYgKCFjICYmICFkKSB7XG4gICAgdmFyIGUgPSBMYihiLCB7Z2I6ITF9KTtcbiAgICBiID0gZS5wYXRoO1xuICAgIGUgPSBlLm5vZGU7XG4gICAgaWYgKGUud2EpIHtcbiAgICAgIHRocm93IG5ldyBPKDEwKTtcbiAgICB9XG4gICAgaWYgKDE2Mzg0ICE9PSAoZS5tb2RlICYgNjE0NDApKSB7XG4gICAgICB0aHJvdyBuZXcgTyg1NCk7XG4gICAgfVxuICB9XG4gIGIgPSB7dHlwZTphLCBRYzp7fSwgbWI6Yiwga2M6W119O1xuICBhID0gYS5VKGIpO1xuICBhLlUgPSBiO1xuICBiLnJvb3QgPSBhO1xuICBjID8gRWIgPSBhIDogZSAmJiAoZS53YSA9IGIsIGUuVSAmJiBlLlUua2MucHVzaChiKSk7XG59LCBTID0gKGEsIGIsIGMpID0+IHtcbiAgdmFyIGQgPSBMYihhLCB7cGFyZW50OiEwfSkubm9kZTtcbiAgYSA9IGliKGEpO1xuICBpZiAoIWEgfHwgXCIuXCIgPT09IGEgfHwgXCIuLlwiID09PSBhKSB7XG4gICAgdGhyb3cgbmV3IE8oMjgpO1xuICB9XG4gIHZhciBlID0gUmIoZCwgYSk7XG4gIGlmIChlKSB7XG4gICAgdGhyb3cgbmV3IE8oZSk7XG4gIH1cbiAgaWYgKCFkLmwudmEpIHtcbiAgICB0aHJvdyBuZXcgTyg2Myk7XG4gIH1cbiAgcmV0dXJuIGQubC52YShkLCBhLCBiLCBjKTtcbn0sIFhiID0gKGEsIGIsIGMpID0+IHtcbiAgXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2YgYyAmJiAoYyA9IGIsIGIgPSA0MzgpO1xuICBTKGEsIGIgfCA4MTkyLCBjKTtcbn0sIGNjID0gKGEsIGIpID0+IHtcbiAgaWYgKCFsYihhKSkge1xuICAgIHRocm93IG5ldyBPKDQ0KTtcbiAgfVxuICB2YXIgYyA9IExiKGIsIHtwYXJlbnQ6ITB9KS5ub2RlO1xuICBpZiAoIWMpIHtcbiAgICB0aHJvdyBuZXcgTyg0NCk7XG4gIH1cbiAgYiA9IGliKGIpO1xuICB2YXIgZCA9IFJiKGMsIGIpO1xuICBpZiAoZCkge1xuICAgIHRocm93IG5ldyBPKGQpO1xuICB9XG4gIGlmICghYy5sLkVhKSB7XG4gICAgdGhyb3cgbmV3IE8oNjMpO1xuICB9XG4gIGMubC5FYShjLCBiLCBhKTtcbn0sIEtiID0gYSA9PiB7XG4gIGEgPSBMYihhKS5ub2RlO1xuICBpZiAoIWEpIHtcbiAgICB0aHJvdyBuZXcgTyg0NCk7XG4gIH1cbiAgaWYgKCFhLmwubWEpIHtcbiAgICB0aHJvdyBuZXcgTygyOCk7XG4gIH1cbiAgcmV0dXJuIGxiKE1iKGEucGFyZW50KSwgYS5sLm1hKGEpKTtcbn0sIGVjID0gKGEsIGIsIGMpID0+IHtcbiAgaWYgKFwiXCIgPT09IGEpIHtcbiAgICB0aHJvdyBuZXcgTyg0NCk7XG4gIH1cbiAgaWYgKFwic3RyaW5nXCIgPT0gdHlwZW9mIGIpIHtcbiAgICB2YXIgZCA9IHtyOjAsIFwicitcIjoyLCB3OjU3NywgXCJ3K1wiOjU3OCwgYToxMDg5LCBcImErXCI6MTA5MCx9W2JdO1xuICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBkKSB7XG4gICAgICB0aHJvdyBFcnJvcihgVW5rbm93biBmaWxlIG9wZW4gbW9kZTogJHtifWApO1xuICAgIH1cbiAgICBiID0gZDtcbiAgfVxuICBjID0gYiAmIDY0ID8gKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGMgPyA0MzggOiBjKSAmIDQwOTUgfCAzMjc2OCA6IDA7XG4gIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBhKSB7XG4gICAgdmFyIGUgPSBhO1xuICB9IGVsc2Uge1xuICAgIGEgPSBnYihhKTtcbiAgICB0cnkge1xuICAgICAgZSA9IExiKGEsIHtmYjohKGIgJiAxMzEwNzIpfSkubm9kZTtcbiAgICB9IGNhdGNoIChmKSB7XG4gICAgfVxuICB9XG4gIGQgPSAhMTtcbiAgaWYgKGIgJiA2NCkge1xuICAgIGlmIChlKSB7XG4gICAgICBpZiAoYiAmIDEyOCkge1xuICAgICAgICB0aHJvdyBuZXcgTygyMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGUgPSBTKGEsIGMsIDApLCBkID0gITA7XG4gICAgfVxuICB9XG4gIGlmICghZSkge1xuICAgIHRocm93IG5ldyBPKDQ0KTtcbiAgfVxuICA4MTkyID09PSAoZS5tb2RlICYgNjE0NDApICYmIChiICY9IC01MTMpO1xuICBpZiAoYiAmIDY1NTM2ICYmIDE2Mzg0ICE9PSAoZS5tb2RlICYgNjE0NDApKSB7XG4gICAgdGhyb3cgbmV3IE8oNTQpO1xuICB9XG4gIGlmICghZCAmJiAoYyA9IGUgPyA0MDk2MCA9PT0gKGUubW9kZSAmIDYxNDQwKSA/IDMyIDogMTYzODQgPT09IChlLm1vZGUgJiA2MTQ0MCkgJiYgKFwiclwiICE9PSBRYihiKSB8fCBiICYgNTEyKSA/IDMxIDogT2IoZSwgUWIoYikpIDogNDQpKSB7XG4gICAgdGhyb3cgbmV3IE8oYyk7XG4gIH1cbiAgaWYgKGIgJiA1MTIgJiYgIWQpIHtcbiAgICBjID0gZTtcbiAgICBjID0gXCJzdHJpbmdcIiA9PSB0eXBlb2YgYyA/IExiKGMsIHtmYjohMH0pLm5vZGUgOiBjO1xuICAgIGlmICghYy5sLlApIHtcbiAgICAgIHRocm93IG5ldyBPKDYzKTtcbiAgICB9XG4gICAgaWYgKDE2Mzg0ID09PSAoYy5tb2RlICYgNjE0NDApKSB7XG4gICAgICB0aHJvdyBuZXcgTygzMSk7XG4gICAgfVxuICAgIGlmICgzMjc2OCAhPT0gKGMubW9kZSAmIDYxNDQwKSkge1xuICAgICAgdGhyb3cgbmV3IE8oMjgpO1xuICAgIH1cbiAgICBpZiAoZCA9IE9iKGMsIFwid1wiKSkge1xuICAgICAgdGhyb3cgbmV3IE8oZCk7XG4gICAgfVxuICAgIGMubC5QKGMsIHtzaXplOjAsIHRpbWVzdGFtcDpEYXRlLm5vdygpfSk7XG4gIH1cbiAgYiAmPSAtMTMxNzEzO1xuICBlID0gVmIoe25vZGU6ZSwgcGF0aDpNYihlKSwgZmxhZ3M6Yiwgc2Vla2FibGU6ITAsIHBvc2l0aW9uOjAsIG06ZS5tLCB6YzpbXSwgZXJyb3I6ITF9KTtcbiAgZS5tLm9wZW4gJiYgZS5tLm9wZW4oZSk7XG4gICFtLmxvZ1JlYWRGaWxlcyB8fCBiICYgMSB8fCAoZGMgfHwgKGRjID0ge30pLCBhIGluIGRjIHx8IChkY1thXSA9IDEpKTtcbiAgcmV0dXJuIGU7XG59LCBmYyA9IChhLCBiLCBjKSA9PiB7XG4gIGlmIChudWxsID09PSBhLlgpIHtcbiAgICB0aHJvdyBuZXcgTyg4KTtcbiAgfVxuICBpZiAoIWEuc2Vla2FibGUgfHwgIWEubS5iYSkge1xuICAgIHRocm93IG5ldyBPKDcwKTtcbiAgfVxuICBpZiAoMCAhPSBjICYmIDEgIT0gYyAmJiAyICE9IGMpIHtcbiAgICB0aHJvdyBuZXcgTygyOCk7XG4gIH1cbiAgYS5wb3NpdGlvbiA9IGEubS5iYShhLCBiLCBjKTtcbiAgYS56YyA9IFtdO1xufSwgZ2MgPSAoKSA9PiB7XG4gIE8gfHwgKE8gPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgdGhpcy5uYW1lID0gXCJFcnJub0Vycm9yXCI7XG4gICAgdGhpcy5ub2RlID0gYjtcbiAgICB0aGlzLnBjID0gZnVuY3Rpb24oYykge1xuICAgICAgdGhpcy5hYSA9IGM7XG4gICAgfTtcbiAgICB0aGlzLnBjKGEpO1xuICAgIHRoaXMubWVzc2FnZSA9IFwiRlMgZXJyb3JcIjtcbiAgfSwgTy5wcm90b3R5cGUgPSBFcnJvcigpLCBPLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE8sIFs0NF0uZm9yRWFjaChhID0+IHtcbiAgICBCYlthXSA9IG5ldyBPKGEpO1xuICAgIEJiW2FdLnN0YWNrID0gXCI8Z2VuZXJpYyBlcnJvciwgbm8gc3RhY2s+XCI7XG4gIH0pKTtcbn0sIGhjLCBqYyA9IChhLCBiLCBjKSA9PiB7XG4gIGEgPSBnYihcIi9kZXYvXCIgKyBhKTtcbiAgdmFyIGQgPSBEYighIWIsICEhYyk7XG4gIGljIHx8IChpYyA9IDY0KTtcbiAgdmFyIGUgPSBpYysrIDw8IDggfCAwO1xuICB1YihlLCB7b3BlbjpmID0+IHtcbiAgICBmLnNlZWthYmxlID0gITE7XG4gIH0sIGNsb3NlOigpID0+IHtcbiAgICBjICYmIGMuYnVmZmVyICYmIGMuYnVmZmVyLmxlbmd0aCAmJiBjKDEwKTtcbiAgfSwgcmVhZDooZiwgZywgbiwgcCkgPT4ge1xuICAgIGZvciAodmFyIGwgPSAwLCB1ID0gMDsgdSA8IHA7IHUrKykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHYgPSBiKCk7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIHRocm93IG5ldyBPKDI5KTtcbiAgICAgIH1cbiAgICAgIGlmICh2b2lkIDAgPT09IHYgJiYgMCA9PT0gbCkge1xuICAgICAgICB0aHJvdyBuZXcgTyg2KTtcbiAgICAgIH1cbiAgICAgIGlmIChudWxsID09PSB2IHx8IHZvaWQgMCA9PT0gdikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGwrKztcbiAgICAgIGdbbiArIHVdID0gdjtcbiAgICB9XG4gICAgbCAmJiAoZi5ub2RlLnRpbWVzdGFtcCA9IERhdGUubm93KCkpO1xuICAgIHJldHVybiBsO1xuICB9LCB3cml0ZTooZiwgZywgbiwgcCkgPT4ge1xuICAgIGZvciAodmFyIGwgPSAwOyBsIDwgcDsgbCsrKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjKGdbbiArIGxdKTtcbiAgICAgIH0gY2F0Y2ggKHUpIHtcbiAgICAgICAgdGhyb3cgbmV3IE8oMjkpO1xuICAgICAgfVxuICAgIH1cbiAgICBwICYmIChmLm5vZGUudGltZXN0YW1wID0gRGF0ZS5ub3coKSk7XG4gICAgcmV0dXJuIGw7XG4gIH19KTtcbiAgWGIoYSwgZCwgZSk7XG59LCBpYywga2MgPSB7fSwgVWIsIGRjLCBsYyA9IHZvaWQgMDtcbmZ1bmN0aW9uIG1jKCkge1xuICBsYyArPSA0O1xuICByZXR1cm4gTFtsYyAtIDQgPj4gMl07XG59XG5mdW5jdGlvbiBuYyhhKSB7XG4gIGlmICh2b2lkIDAgPT09IGEpIHtcbiAgICByZXR1cm4gXCJfdW5rbm93blwiO1xuICB9XG4gIGEgPSBhLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgXCIkXCIpO1xuICB2YXIgYiA9IGEuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIDQ4IDw9IGIgJiYgNTcgPj0gYiA/IGBfJHthfWAgOiBhO1xufVxuZnVuY3Rpb24gb2MoYSwgYikge1xuICBhID0gbmMoYSk7XG4gIHJldHVybiB7W2FdOmZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBiLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH19W2FdO1xufVxuZnVuY3Rpb24gcGMoKSB7XG4gIHRoaXMuTSA9IFt2b2lkIDBdO1xuICB0aGlzLmhiID0gW107XG59XG52YXIgVSA9IG5ldyBwYygpLCBxYyA9IHZvaWQgMDtcbmZ1bmN0aW9uIFYoYSkge1xuICB0aHJvdyBuZXcgcWMoYSk7XG59XG52YXIgcmMgPSBhID0+IHtcbiAgYSB8fCBWKFwiQ2Fubm90IHVzZSBkZWxldGVkIHZhbC4gaGFuZGxlID0gXCIgKyBhKTtcbiAgcmV0dXJuIFUuZ2V0KGEpLnZhbHVlO1xufSwgc2MgPSBhID0+IHtcbiAgc3dpdGNoKGEpIHtcbiAgICBjYXNlIHZvaWQgMDpcbiAgICAgIHJldHVybiAxO1xuICAgIGNhc2UgbnVsbDpcbiAgICAgIHJldHVybiAyO1xuICAgIGNhc2UgITA6XG4gICAgICByZXR1cm4gMztcbiAgICBjYXNlICExOlxuICAgICAgcmV0dXJuIDQ7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBVLnBhKHt0YjoxLCB2YWx1ZTphfSk7XG4gIH1cbn07XG5mdW5jdGlvbiB0YyhhKSB7XG4gIHZhciBiID0gRXJyb3IsIGMgPSBvYyhhLCBmdW5jdGlvbihkKSB7XG4gICAgdGhpcy5uYW1lID0gYTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBkO1xuICAgIGQgPSBFcnJvcihkKS5zdGFjaztcbiAgICB2b2lkIDAgIT09IGQgJiYgKHRoaXMuc3RhY2sgPSB0aGlzLnRvU3RyaW5nKCkgKyBcIlxcblwiICsgZC5yZXBsYWNlKC9eRXJyb3IoOlteXFxuXSopP1xcbi8sIFwiXCIpKTtcbiAgfSk7XG4gIGMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShiLnByb3RvdHlwZSk7XG4gIGMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gYztcbiAgYy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdm9pZCAwID09PSB0aGlzLm1lc3NhZ2UgPyB0aGlzLm5hbWUgOiBgJHt0aGlzLm5hbWV9OiAke3RoaXMubWVzc2FnZX1gO1xuICB9O1xuICByZXR1cm4gYztcbn1cbnZhciB1YyA9IHZvaWQgMCwgdmMgPSB2b2lkIDA7XG5mdW5jdGlvbiBXKGEpIHtcbiAgZm9yICh2YXIgYiA9IFwiXCI7IEVbYV07KSB7XG4gICAgYiArPSB2Y1tFW2ErK11dO1xuICB9XG4gIHJldHVybiBiO1xufVxudmFyIHdjID0gW107XG5mdW5jdGlvbiB4YygpIHtcbiAgZm9yICg7IHdjLmxlbmd0aDspIHtcbiAgICB2YXIgYSA9IHdjLnBvcCgpO1xuICAgIGEuZy5mYSA9ICExO1xuICAgIGFbXCJkZWxldGVcIl0oKTtcbiAgfVxufVxudmFyIHljID0gdm9pZCAwLCB6YyA9IHt9O1xuZnVuY3Rpb24gQWMoYSwgYikge1xuICBmb3IgKHZvaWQgMCA9PT0gYiAmJiBWKFwicHRyIHNob3VsZCBub3QgYmUgdW5kZWZpbmVkXCIpOyBhLkE7KSB7XG4gICAgYiA9IGEubmEoYiksIGEgPSBhLkE7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG52YXIgQmMgPSB7fTtcbmZ1bmN0aW9uIENjKGEpIHtcbiAgYSA9IERjKGEpO1xuICB2YXIgYiA9IFcoYSk7XG4gIEVjKGEpO1xuICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIEZjKGEsIGIpIHtcbiAgdmFyIGMgPSBCY1thXTtcbiAgdm9pZCAwID09PSBjICYmIFYoYiArIFwiIGhhcyB1bmtub3duIHR5cGUgXCIgKyBDYyhhKSk7XG4gIHJldHVybiBjO1xufVxuZnVuY3Rpb24gR2MoKSB7XG59XG52YXIgSGMgPSAhMTtcbmZ1bmN0aW9uIEljKGEpIHtcbiAgLS1hLmNvdW50LnZhbHVlO1xuICAwID09PSBhLmNvdW50LnZhbHVlICYmIChhLkcgPyBhLkwuVyhhLkcpIDogYS51LmkuVyhhLm8pKTtcbn1cbmZ1bmN0aW9uIEpjKGEsIGIsIGMpIHtcbiAgaWYgKGIgPT09IGMpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxuICBpZiAodm9pZCAwID09PSBjLkEpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBhID0gSmMoYSwgYiwgYy5BKTtcbiAgcmV0dXJuIG51bGwgPT09IGEgPyBudWxsIDogYy5QYihhKTtcbn1cbnZhciBLYyA9IHt9O1xuZnVuY3Rpb24gTGMoYSwgYikge1xuICBiID0gQWMoYSwgYik7XG4gIHJldHVybiB6Y1tiXTtcbn1cbnZhciBNYyA9IHZvaWQgMDtcbmZ1bmN0aW9uIE5jKGEpIHtcbiAgdGhyb3cgbmV3IE1jKGEpO1xufVxuZnVuY3Rpb24gT2MoYSwgYikge1xuICBiLnUgJiYgYi5vIHx8IE5jKFwibWFrZUNsYXNzSGFuZGxlIHJlcXVpcmVzIHB0ciBhbmQgcHRyVHlwZVwiKTtcbiAgISFiLkwgIT09ICEhYi5HICYmIE5jKFwiQm90aCBzbWFydFB0clR5cGUgYW5kIHNtYXJ0UHRyIG11c3QgYmUgc3BlY2lmaWVkXCIpO1xuICBiLmNvdW50ID0ge3ZhbHVlOjF9O1xuICByZXR1cm4gUGMoT2JqZWN0LmNyZWF0ZShhLCB7Zzp7dmFsdWU6Yix9LH0pKTtcbn1cbmZ1bmN0aW9uIFBjKGEpIHtcbiAgaWYgKFwidW5kZWZpbmVkXCIgPT09IHR5cGVvZiBGaW5hbGl6YXRpb25SZWdpc3RyeSkge1xuICAgIHJldHVybiBQYyA9IGIgPT4gYiwgYTtcbiAgfVxuICBIYyA9IG5ldyBGaW5hbGl6YXRpb25SZWdpc3RyeShiID0+IHtcbiAgICBJYyhiLmcpO1xuICB9KTtcbiAgUGMgPSBiID0+IHtcbiAgICB2YXIgYyA9IGIuZztcbiAgICBjLkcgJiYgSGMucmVnaXN0ZXIoYiwge2c6Y30sIGIpO1xuICAgIHJldHVybiBiO1xuICB9O1xuICBHYyA9IGIgPT4ge1xuICAgIEhjLnVucmVnaXN0ZXIoYik7XG4gIH07XG4gIHJldHVybiBQYyhhKTtcbn1cbnZhciBRYyA9IHt9O1xuZnVuY3Rpb24gUmMoYSkge1xuICBmb3IgKDsgYS5sZW5ndGg7KSB7XG4gICAgdmFyIGIgPSBhLnBvcCgpO1xuICAgIGEucG9wKCkoYik7XG4gIH1cbn1cbmZ1bmN0aW9uIFNjKGEpIHtcbiAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKExbYSA+PiAyXSk7XG59XG52YXIgVGMgPSB7fSwgVWMgPSB7fTtcbmZ1bmN0aW9uIFkoYSwgYiwgYykge1xuICBmdW5jdGlvbiBkKG4pIHtcbiAgICBuID0gYyhuKTtcbiAgICBuLmxlbmd0aCAhPT0gYS5sZW5ndGggJiYgTmMoXCJNaXNtYXRjaGVkIHR5cGUgY29udmVydGVyIGNvdW50XCIpO1xuICAgIGZvciAodmFyIHAgPSAwOyBwIDwgYS5sZW5ndGg7ICsrcCkge1xuICAgICAgVmMoYVtwXSwgbltwXSk7XG4gICAgfVxuICB9XG4gIGEuZm9yRWFjaChmdW5jdGlvbihuKSB7XG4gICAgVWNbbl0gPSBiO1xuICB9KTtcbiAgdmFyIGUgPSBBcnJheShiLmxlbmd0aCksIGYgPSBbXSwgZyA9IDA7XG4gIGIuZm9yRWFjaCgobiwgcCkgPT4ge1xuICAgIEJjLmhhc093blByb3BlcnR5KG4pID8gZVtwXSA9IEJjW25dIDogKGYucHVzaChuKSwgVGMuaGFzT3duUHJvcGVydHkobikgfHwgKFRjW25dID0gW10pLCBUY1tuXS5wdXNoKCgpID0+IHtcbiAgICAgIGVbcF0gPSBCY1tuXTtcbiAgICAgICsrZztcbiAgICAgIGcgPT09IGYubGVuZ3RoICYmIGQoZSk7XG4gICAgfSkpO1xuICB9KTtcbiAgMCA9PT0gZi5sZW5ndGggJiYgZChlKTtcbn1cbmZ1bmN0aW9uIFdjKGEpIHtcbiAgc3dpdGNoKGEpIHtcbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gMDtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIDQ6XG4gICAgICByZXR1cm4gMjtcbiAgICBjYXNlIDg6XG4gICAgICByZXR1cm4gMztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgVW5rbm93biB0eXBlIHNpemU6ICR7YX1gKTtcbiAgfVxufVxuZnVuY3Rpb24gWGMoYSwgYiwgYyA9IHt9KSB7XG4gIHZhciBkID0gYi5uYW1lO1xuICBhIHx8IFYoYHR5cGUgXCIke2R9XCIgbXVzdCBoYXZlIGEgcG9zaXRpdmUgaW50ZWdlciB0eXBlaWQgcG9pbnRlcmApO1xuICBpZiAoQmMuaGFzT3duUHJvcGVydHkoYSkpIHtcbiAgICBpZiAoYy4kYikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBWKGBDYW5ub3QgcmVnaXN0ZXIgdHlwZSAnJHtkfScgdHdpY2VgKTtcbiAgfVxuICBCY1thXSA9IGI7XG4gIGRlbGV0ZSBVY1thXTtcbiAgVGMuaGFzT3duUHJvcGVydHkoYSkgJiYgKGIgPSBUY1thXSwgZGVsZXRlIFRjW2FdLCBiLmZvckVhY2goZSA9PiBlKCkpKTtcbn1cbmZ1bmN0aW9uIFZjKGEsIGIsIGMgPSB7fSkge1xuICBpZiAoIShcImFyZ1BhY2tBZHZhbmNlXCIgaW4gYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwicmVnaXN0ZXJUeXBlIHJlZ2lzdGVyZWRJbnN0YW5jZSByZXF1aXJlcyBhcmdQYWNrQWR2YW5jZVwiKTtcbiAgfVxuICBYYyhhLCBiLCBjKTtcbn1cbmZ1bmN0aW9uIFljKGEpIHtcbiAgVihhLmcudS5pLm5hbWUgKyBcIiBpbnN0YW5jZSBhbHJlYWR5IGRlbGV0ZWRcIik7XG59XG5mdW5jdGlvbiBaYygpIHtcbn1cbmZ1bmN0aW9uICRjKGEsIGIsIGMpIHtcbiAgaWYgKHZvaWQgMCA9PT0gYVtiXS5CKSB7XG4gICAgdmFyIGQgPSBhW2JdO1xuICAgIGFbYl0gPSBmdW5jdGlvbigpIHtcbiAgICAgIGFbYl0uQi5oYXNPd25Qcm9wZXJ0eShhcmd1bWVudHMubGVuZ3RoKSB8fCBWKGBGdW5jdGlvbiAnJHtjfScgY2FsbGVkIHdpdGggYW4gaW52YWxpZCBudW1iZXIgb2YgYXJndW1lbnRzICgke2FyZ3VtZW50cy5sZW5ndGh9KSAtIGV4cGVjdHMgb25lIG9mICgke2FbYl0uQn0pIWApO1xuICAgICAgcmV0dXJuIGFbYl0uQlthcmd1bWVudHMubGVuZ3RoXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gICAgYVtiXS5CID0gW107XG4gICAgYVtiXS5CW2QuZWFdID0gZDtcbiAgfVxufVxuZnVuY3Rpb24gYWQoYSwgYiwgYykge1xuICBtLmhhc093blByb3BlcnR5KGEpID8gKCh2b2lkIDAgPT09IGMgfHwgdm9pZCAwICE9PSBtW2FdLkIgJiYgdm9pZCAwICE9PSBtW2FdLkJbY10pICYmIFYoYENhbm5vdCByZWdpc3RlciBwdWJsaWMgbmFtZSAnJHthfScgdHdpY2VgKSwgJGMobSwgYSwgYSksIG0uaGFzT3duUHJvcGVydHkoYykgJiYgVihgQ2Fubm90IHJlZ2lzdGVyIG11bHRpcGxlIG92ZXJsb2FkcyBvZiBhIGZ1bmN0aW9uIHdpdGggdGhlIHNhbWUgbnVtYmVyIG9mIGFyZ3VtZW50cyAoJHtjfSkhYCksIG1bYV0uQltjXSA9IGIpIDogKG1bYV0gPSBiLCB2b2lkIDAgIT09IGMgJiYgKG1bYV0uUGMgPSBjKSk7XG59XG5mdW5jdGlvbiBiZChhLCBiLCBjLCBkLCBlLCBmLCBnLCBuKSB7XG4gIHRoaXMubmFtZSA9IGE7XG4gIHRoaXMuY29uc3RydWN0b3IgPSBiO1xuICB0aGlzLk4gPSBjO1xuICB0aGlzLlcgPSBkO1xuICB0aGlzLkEgPSBlO1xuICB0aGlzLlViID0gZjtcbiAgdGhpcy5uYSA9IGc7XG4gIHRoaXMuUGIgPSBuO1xuICB0aGlzLnFiID0gW107XG59XG5mdW5jdGlvbiBjZChhLCBiLCBjKSB7XG4gIGZvciAoOyBiICE9PSBjOykge1xuICAgIGIubmEgfHwgVihgRXhwZWN0ZWQgbnVsbCBvciBpbnN0YW5jZSBvZiAke2MubmFtZX0sIGdvdCBhbiBpbnN0YW5jZSBvZiAke2IubmFtZX1gKSwgYSA9IGIubmEoYSksIGIgPSBiLkE7XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5mdW5jdGlvbiBkZChhLCBiKSB7XG4gIGlmIChudWxsID09PSBiKSB7XG4gICAgcmV0dXJuIHRoaXMuTmEgJiYgVihgbnVsbCBpcyBub3QgYSB2YWxpZCAke3RoaXMubmFtZX1gKSwgMDtcbiAgfVxuICBiLmcgfHwgVihgQ2Fubm90IHBhc3MgXCIke2VkKGIpfVwiIGFzIGEgJHt0aGlzLm5hbWV9YCk7XG4gIGIuZy5vIHx8IFYoYENhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlICR7dGhpcy5uYW1lfWApO1xuICByZXR1cm4gY2QoYi5nLm8sIGIuZy51LmksIHRoaXMuaSk7XG59XG5mdW5jdGlvbiBmZChhLCBiKSB7XG4gIGlmIChudWxsID09PSBiKSB7XG4gICAgdGhpcy5OYSAmJiBWKGBudWxsIGlzIG5vdCBhIHZhbGlkICR7dGhpcy5uYW1lfWApO1xuICAgIGlmICh0aGlzLnVhKSB7XG4gICAgICB2YXIgYyA9IHRoaXMuUGEoKTtcbiAgICAgIG51bGwgIT09IGEgJiYgYS5wdXNoKHRoaXMuVywgYyk7XG4gICAgICByZXR1cm4gYztcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgYi5nIHx8IFYoYENhbm5vdCBwYXNzIFwiJHtlZChiKX1cIiBhcyBhICR7dGhpcy5uYW1lfWApO1xuICBiLmcubyB8fCBWKGBDYW5ub3QgcGFzcyBkZWxldGVkIG9iamVjdCBhcyBhIHBvaW50ZXIgb2YgdHlwZSAke3RoaXMubmFtZX1gKTtcbiAgIXRoaXMudGEgJiYgYi5nLnUudGEgJiYgVihgQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSAke2IuZy5MID8gYi5nLkwubmFtZSA6IGIuZy51Lm5hbWV9IHRvIHBhcmFtZXRlciB0eXBlICR7dGhpcy5uYW1lfWApO1xuICBjID0gY2QoYi5nLm8sIGIuZy51LmksIHRoaXMuaSk7XG4gIGlmICh0aGlzLnVhKSB7XG4gICAgc3dpdGNoKHZvaWQgMCA9PT0gYi5nLkcgJiYgVihcIlBhc3NpbmcgcmF3IHBvaW50ZXIgdG8gc21hcnQgcG9pbnRlciBpcyBpbGxlZ2FsXCIpLCB0aGlzLnRjKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIGIuZy5MID09PSB0aGlzID8gYyA9IGIuZy5HIDogVihgQ2Fubm90IGNvbnZlcnQgYXJndW1lbnQgb2YgdHlwZSAke2IuZy5MID8gYi5nLkwubmFtZSA6IGIuZy51Lm5hbWV9IHRvIHBhcmFtZXRlciB0eXBlICR7dGhpcy5uYW1lfWApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgYyA9IGIuZy5HO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgaWYgKGIuZy5MID09PSB0aGlzKSB7XG4gICAgICAgICAgYyA9IGIuZy5HO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBkID0gYi5jbG9uZSgpO1xuICAgICAgICAgIGMgPSB0aGlzLm9jKGMsIHNjKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgZFtcImRlbGV0ZVwiXSgpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBudWxsICE9PSBhICYmIGEucHVzaCh0aGlzLlcsIGMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgVihcIlVuc3VwcG9ydGluZyBzaGFyaW5nIHBvbGljeVwiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBnZChhLCBiKSB7XG4gIGlmIChudWxsID09PSBiKSB7XG4gICAgcmV0dXJuIHRoaXMuTmEgJiYgVihgbnVsbCBpcyBub3QgYSB2YWxpZCAke3RoaXMubmFtZX1gKSwgMDtcbiAgfVxuICBiLmcgfHwgVihgQ2Fubm90IHBhc3MgXCIke2VkKGIpfVwiIGFzIGEgJHt0aGlzLm5hbWV9YCk7XG4gIGIuZy5vIHx8IFYoYENhbm5vdCBwYXNzIGRlbGV0ZWQgb2JqZWN0IGFzIGEgcG9pbnRlciBvZiB0eXBlICR7dGhpcy5uYW1lfWApO1xuICBiLmcudS50YSAmJiBWKGBDYW5ub3QgY29udmVydCBhcmd1bWVudCBvZiB0eXBlICR7Yi5nLnUubmFtZX0gdG8gcGFyYW1ldGVyIHR5cGUgJHt0aGlzLm5hbWV9YCk7XG4gIHJldHVybiBjZChiLmcubywgYi5nLnUuaSwgdGhpcy5pKTtcbn1cbmZ1bmN0aW9uIGhkKGEsIGIsIGMsIGQpIHtcbiAgdGhpcy5uYW1lID0gYTtcbiAgdGhpcy5pID0gYjtcbiAgdGhpcy5OYSA9IGM7XG4gIHRoaXMudGEgPSBkO1xuICB0aGlzLnVhID0gITE7XG4gIHRoaXMuVyA9IHRoaXMub2MgPSB0aGlzLlBhID0gdGhpcy5yYiA9IHRoaXMudGMgPSB0aGlzLm5jID0gdm9pZCAwO1xuICB2b2lkIDAgIT09IGIuQSA/IHRoaXMudG9XaXJlVHlwZSA9IGZkIDogKHRoaXMudG9XaXJlVHlwZSA9IGQgPyBkZCA6IGdkLCB0aGlzLksgPSBudWxsKTtcbn1cbmZ1bmN0aW9uIGpkKGEsIGIsIGMpIHtcbiAgbS5oYXNPd25Qcm9wZXJ0eShhKSB8fCBOYyhcIlJlcGxhY2luZyBub25leGlzdGFudCBwdWJsaWMgc3ltYm9sXCIpO1xuICB2b2lkIDAgIT09IG1bYV0uQiAmJiB2b2lkIDAgIT09IGMgPyBtW2FdLkJbY10gPSBiIDogKG1bYV0gPSBiLCBtW2FdLmVhID0gYyk7XG59XG52YXIga2QgPSBbXSwgbGQgPSBhID0+IHtcbiAgdmFyIGIgPSBrZFthXTtcbiAgYiB8fCAoYSA+PSBrZC5sZW5ndGggJiYgKGtkLmxlbmd0aCA9IGEgKyAxKSwga2RbYV0gPSBiID0gS2EuZ2V0KGEpKTtcbiAgcmV0dXJuIGI7XG59LCBtZCA9IChhLCBiKSA9PiB7XG4gIHZhciBjID0gW107XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjLmxlbmd0aCA9IDA7XG4gICAgT2JqZWN0LmFzc2lnbihjLCBhcmd1bWVudHMpO1xuICAgIGlmIChhLmluY2x1ZGVzKFwialwiKSkge1xuICAgICAgdmFyIGQgPSBtW1wiZHluQ2FsbF9cIiArIGFdO1xuICAgICAgZCA9IGMgJiYgYy5sZW5ndGggPyBkLmFwcGx5KG51bGwsIFtiXS5jb25jYXQoYykpIDogZC5jYWxsKG51bGwsIGIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gbGQoYikuYXBwbHkobnVsbCwgYyk7XG4gICAgfVxuICAgIHJldHVybiBkO1xuICB9O1xufTtcbmZ1bmN0aW9uIFooYSwgYikge1xuICBhID0gVyhhKTtcbiAgdmFyIGMgPSBhLmluY2x1ZGVzKFwialwiKSA/IG1kKGEsIGIpIDogbGQoYik7XG4gIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgYyAmJiBWKGB1bmtub3duIGZ1bmN0aW9uIHBvaW50ZXIgd2l0aCBzaWduYXR1cmUgJHthfTogJHtifWApO1xuICByZXR1cm4gYztcbn1cbnZhciBuZCA9IHZvaWQgMDtcbmZ1bmN0aW9uIG9kKGEsIGIpIHtcbiAgZnVuY3Rpb24gYyhmKSB7XG4gICAgZVtmXSB8fCBCY1tmXSB8fCAoVWNbZl0gPyBVY1tmXS5mb3JFYWNoKGMpIDogKGQucHVzaChmKSwgZVtmXSA9ICEwKSk7XG4gIH1cbiAgdmFyIGQgPSBbXSwgZSA9IHt9O1xuICBiLmZvckVhY2goYyk7XG4gIHRocm93IG5ldyBuZChgJHthfTogYCArIGQubWFwKENjKS5qb2luKFtcIiwgXCJdKSk7XG59XG5mdW5jdGlvbiBwZChhLCBiLCBjLCBkLCBlKSB7XG4gIHZhciBmID0gYi5sZW5ndGg7XG4gIDIgPiBmICYmIFYoXCJhcmdUeXBlcyBhcnJheSBzaXplIG1pc21hdGNoISBNdXN0IGF0IGxlYXN0IGdldCByZXR1cm4gdmFsdWUgYW5kICd0aGlzJyB0eXBlcyFcIik7XG4gIHZhciBnID0gbnVsbCAhPT0gYlsxXSAmJiBudWxsICE9PSBjLCBuID0gITE7XG4gIGZvciAoYyA9IDE7IGMgPCBiLmxlbmd0aDsgKytjKSB7XG4gICAgaWYgKG51bGwgIT09IGJbY10gJiYgdm9pZCAwID09PSBiW2NdLkspIHtcbiAgICAgIG4gPSAhMDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICB2YXIgcCA9IFwidm9pZFwiICE9PSBiWzBdLm5hbWUsIGwgPSBmIC0gMiwgdSA9IEFycmF5KGwpLCB2ID0gW10sIHggPSBbXTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGFyZ3VtZW50cy5sZW5ndGggIT09IGwgJiYgVihgZnVuY3Rpb24gJHthfSBjYWxsZWQgd2l0aCAke2FyZ3VtZW50cy5sZW5ndGh9IGFyZ3VtZW50cywgZXhwZWN0ZWQgJHtsfSBhcmdzIWApO1xuICAgIHgubGVuZ3RoID0gMDtcbiAgICB2Lmxlbmd0aCA9IGcgPyAyIDogMTtcbiAgICB2WzBdID0gZTtcbiAgICBpZiAoZykge1xuICAgICAgdmFyIGsgPSBiWzFdLnRvV2lyZVR5cGUoeCwgdGhpcyk7XG4gICAgICB2WzFdID0gaztcbiAgICB9XG4gICAgZm9yICh2YXIgdCA9IDA7IHQgPCBsOyArK3QpIHtcbiAgICAgIHVbdF0gPSBiW3QgKyAyXS50b1dpcmVUeXBlKHgsIGFyZ3VtZW50c1t0XSksIHYucHVzaCh1W3RdKTtcbiAgICB9XG4gICAgdCA9IGQuYXBwbHkobnVsbCwgdik7XG4gICAgaWYgKG4pIHtcbiAgICAgIFJjKHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKHZhciByID0gZyA/IDEgOiAyOyByIDwgYi5sZW5ndGg7IHIrKykge1xuICAgICAgICB2YXIgQSA9IDEgPT09IHIgPyBrIDogdVtyIC0gMl07XG4gICAgICAgIG51bGwgIT09IGJbcl0uSyAmJiBiW3JdLksoQSk7XG4gICAgICB9XG4gICAgfVxuICAgIGsgPSBwID8gYlswXS5mcm9tV2lyZVR5cGUodCkgOiB2b2lkIDA7XG4gICAgcmV0dXJuIGs7XG4gIH07XG59XG5mdW5jdGlvbiByZChhLCBiKSB7XG4gIGZvciAodmFyIGMgPSBbXSwgZCA9IDA7IGQgPCBhOyBkKyspIHtcbiAgICBjLnB1c2goTltiICsgNCAqIGQgPj4gMl0pO1xuICB9XG4gIHJldHVybiBjO1xufVxuZnVuY3Rpb24gc2QoYSwgYiwgYykge1xuICBhIGluc3RhbmNlb2YgT2JqZWN0IHx8IFYoYCR7Y30gd2l0aCBpbnZhbGlkIFwidGhpc1wiOiAke2F9YCk7XG4gIGEgaW5zdGFuY2VvZiBiLmkuY29uc3RydWN0b3IgfHwgVihgJHtjfSBpbmNvbXBhdGlibGUgd2l0aCBcInRoaXNcIiBvZiB0eXBlICR7YS5jb25zdHJ1Y3Rvci5uYW1lfWApO1xuICBhLmcubyB8fCBWKGBjYW5ub3QgY2FsbCBlbXNjcmlwdGVuIGJpbmRpbmcgbWV0aG9kICR7Y30gb24gZGVsZXRlZCBvYmplY3RgKTtcbiAgcmV0dXJuIGNkKGEuZy5vLCBhLmcudS5pLCBiLmkpO1xufVxuZnVuY3Rpb24gdGQoYSkge1xuICBhID49IFUuaCAmJiAwID09PSAtLVUuZ2V0KGEpLnRiICYmIFUuWmIoYSk7XG59XG5mdW5jdGlvbiB1ZChhLCBiLCBjKSB7XG4gIHN3aXRjaChiKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKChjID8gQiA6IEUpW2RdKTtcbiAgICAgIH07XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKChjID8gRGEgOiBFYSlbZCA+PiAxXSk7XG4gICAgICB9O1xuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb21XaXJlVHlwZSgoYyA/IEwgOiBOKVtkID4+IDJdKTtcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGludGVnZXIgdHlwZTogXCIgKyBhKTtcbiAgfVxufVxuZnVuY3Rpb24gZWQoYSkge1xuICBpZiAobnVsbCA9PT0gYSkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfVxuICB2YXIgYiA9IHR5cGVvZiBhO1xuICByZXR1cm4gXCJvYmplY3RcIiA9PT0gYiB8fCBcImFycmF5XCIgPT09IGIgfHwgXCJmdW5jdGlvblwiID09PSBiID8gYS50b1N0cmluZygpIDogXCJcIiArIGE7XG59XG5mdW5jdGlvbiB2ZChhLCBiKSB7XG4gIHN3aXRjaChiKSB7XG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZnJvbVdpcmVUeXBlKEZhW2MgPj4gMl0pO1xuICAgICAgfTtcbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4gZnVuY3Rpb24oYykge1xuICAgICAgICByZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUoSWFbYyA+PiAzXSk7XG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBmbG9hdCB0eXBlOiBcIiArIGEpO1xuICB9XG59XG5mdW5jdGlvbiB3ZChhLCBiLCBjKSB7XG4gIHN3aXRjaChiKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIGMgPyBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBCW2RdO1xuICAgICAgfSA6IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIEVbZF07XG4gICAgICB9O1xuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBjID8gZnVuY3Rpb24oZCkge1xuICAgICAgICByZXR1cm4gRGFbZCA+PiAxXTtcbiAgICAgIH0gOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBFYVtkID4+IDFdO1xuICAgICAgfTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gYyA/IGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgcmV0dXJuIExbZCA+PiAyXTtcbiAgICAgIH0gOiBmdW5jdGlvbihkKSB7XG4gICAgICAgIHJldHVybiBOW2QgPj4gMl07XG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVW5rbm93biBpbnRlZ2VyIHR5cGU6IFwiICsgYSk7XG4gIH1cbn1cbnZhciB4ZCA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFRleHREZWNvZGVyID8gbmV3IFRleHREZWNvZGVyKFwidXRmLTE2bGVcIikgOiB2b2lkIDAsIHlkID0gKGEsIGIpID0+IHtcbiAgdmFyIGMgPSBhID4+IDE7XG4gIGZvciAodmFyIGQgPSBjICsgYiAvIDI7ICEoYyA+PSBkKSAmJiBFYVtjXTspIHtcbiAgICArK2M7XG4gIH1cbiAgYyA8PD0gMTtcbiAgaWYgKDMyIDwgYyAtIGEgJiYgeGQpIHtcbiAgICByZXR1cm4geGQuZGVjb2RlKEUuc3ViYXJyYXkoYSwgYykpO1xuICB9XG4gIGMgPSBcIlwiO1xuICBmb3IgKGQgPSAwOyAhKGQgPj0gYiAvIDIpOyArK2QpIHtcbiAgICB2YXIgZSA9IERhW2EgKyAyICogZCA+PiAxXTtcbiAgICBpZiAoMCA9PSBlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgYyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpO1xuICB9XG4gIHJldHVybiBjO1xufSwgemQgPSAoYSwgYiwgYykgPT4ge1xuICB2b2lkIDAgPT09IGMgJiYgKGMgPSAyMTQ3NDgzNjQ3KTtcbiAgaWYgKDIgPiBjKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgYyAtPSAyO1xuICB2YXIgZCA9IGI7XG4gIGMgPSBjIDwgMiAqIGEubGVuZ3RoID8gYyAvIDIgOiBhLmxlbmd0aDtcbiAgZm9yICh2YXIgZSA9IDA7IGUgPCBjOyArK2UpIHtcbiAgICBEYVtiID4+IDFdID0gYS5jaGFyQ29kZUF0KGUpLCBiICs9IDI7XG4gIH1cbiAgRGFbYiA+PiAxXSA9IDA7XG4gIHJldHVybiBiIC0gZDtcbn0sIEFkID0gYSA9PiAyICogYS5sZW5ndGgsIEJkID0gKGEsIGIpID0+IHtcbiAgZm9yICh2YXIgYyA9IDAsIGQgPSBcIlwiOyAhKGMgPj0gYiAvIDQpOykge1xuICAgIHZhciBlID0gTFthICsgNCAqIGMgPj4gMl07XG4gICAgaWYgKDAgPT0gZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgICsrYztcbiAgICA2NTUzNiA8PSBlID8gKGUgLT0gNjU1MzYsIGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSg1NTI5NiB8IGUgPj4gMTAsIDU2MzIwIHwgZSAmIDEwMjMpKSA6IGQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShlKTtcbiAgfVxuICByZXR1cm4gZDtcbn0sIENkID0gKGEsIGIsIGMpID0+IHtcbiAgdm9pZCAwID09PSBjICYmIChjID0gMjE0NzQ4MzY0Nyk7XG4gIGlmICg0ID4gYykge1xuICAgIHJldHVybiAwO1xuICB9XG4gIHZhciBkID0gYjtcbiAgYyA9IGQgKyBjIC0gNDtcbiAgZm9yICh2YXIgZSA9IDA7IGUgPCBhLmxlbmd0aDsgKytlKSB7XG4gICAgdmFyIGYgPSBhLmNoYXJDb2RlQXQoZSk7XG4gICAgaWYgKDU1Mjk2IDw9IGYgJiYgNTczNDMgPj0gZikge1xuICAgICAgdmFyIGcgPSBhLmNoYXJDb2RlQXQoKytlKTtcbiAgICAgIGYgPSA2NTUzNiArICgoZiAmIDEwMjMpIDw8IDEwKSB8IGcgJiAxMDIzO1xuICAgIH1cbiAgICBMW2IgPj4gMl0gPSBmO1xuICAgIGIgKz0gNDtcbiAgICBpZiAoYiArIDQgPiBjKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgTFtiID4+IDJdID0gMDtcbiAgcmV0dXJuIGIgLSBkO1xufSwgRGQgPSBhID0+IHtcbiAgZm9yICh2YXIgYiA9IDAsIGMgPSAwOyBjIDwgYS5sZW5ndGg7ICsrYykge1xuICAgIHZhciBkID0gYS5jaGFyQ29kZUF0KGMpO1xuICAgIDU1Mjk2IDw9IGQgJiYgNTczNDMgPj0gZCAmJiArK2M7XG4gICAgYiArPSA0O1xuICB9XG4gIHJldHVybiBiO1xufSwgRWQgPSB7fTtcbmZ1bmN0aW9uIEZkKGEpIHtcbiAgdmFyIGIgPSBFZFthXTtcbiAgcmV0dXJuIHZvaWQgMCA9PT0gYiA/IFcoYSkgOiBiO1xufVxudmFyIEdkID0gW107XG5mdW5jdGlvbiBIZChhKSB7XG4gIHZhciBiID0gR2QubGVuZ3RoO1xuICBHZC5wdXNoKGEpO1xuICByZXR1cm4gYjtcbn1cbmZ1bmN0aW9uIElkKGEsIGIpIHtcbiAgZm9yICh2YXIgYyA9IEFycmF5KGEpLCBkID0gMDsgZCA8IGE7ICsrZCkge1xuICAgIGNbZF0gPSBGYyhOW2IgKyA0ICogZCA+PiAyXSwgXCJwYXJhbWV0ZXIgXCIgKyBkKTtcbiAgfVxuICByZXR1cm4gYztcbn1cbnZhciBKZCA9IFtdLCBLZCA9IFtdLCBMZCA9IHt9LCBOZCA9ICgpID0+IHtcbiAgaWYgKCFNZCkge1xuICAgIHZhciBhID0ge1VTRVI6XCJ3ZWJfdXNlclwiLCBMT0dOQU1FOlwid2ViX3VzZXJcIiwgUEFUSDpcIi9cIiwgUFdEOlwiL1wiLCBIT01FOlwiL2hvbWUvd2ViX3VzZXJcIiwgTEFORzooXCJvYmplY3RcIiA9PSB0eXBlb2YgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5sYW5ndWFnZXMgJiYgbmF2aWdhdG9yLmxhbmd1YWdlc1swXSB8fCBcIkNcIikucmVwbGFjZShcIi1cIiwgXCJfXCIpICsgXCIuVVRGLThcIiwgXzpuYSB8fCBcIi4vdGhpcy5wcm9ncmFtXCJ9LCBiO1xuICAgIGZvciAoYiBpbiBMZCkge1xuICAgICAgdm9pZCAwID09PSBMZFtiXSA/IGRlbGV0ZSBhW2JdIDogYVtiXSA9IExkW2JdO1xuICAgIH1cbiAgICB2YXIgYyA9IFtdO1xuICAgIGZvciAoYiBpbiBhKSB7XG4gICAgICBjLnB1c2goYCR7Yn09JHthW2JdfWApO1xuICAgIH1cbiAgICBNZCA9IGM7XG4gIH1cbiAgcmV0dXJuIE1kO1xufSwgTWQsIE9kID0gYSA9PiAwID09PSBhICUgNCAmJiAoMCAhPT0gYSAlIDEwMCB8fCAwID09PSBhICUgNDAwKSwgUGQgPSBbMzEsIDI5LCAzMSwgMzAsIDMxLCAzMCwgMzEsIDMxLCAzMCwgMzEsIDMwLCAzMV0sIFFkID0gWzMxLCAyOCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdLCBSZCA9IChhLCBiLCBjLCBkKSA9PiB7XG4gIGZ1bmN0aW9uIGUoaywgdCwgcikge1xuICAgIGZvciAoayA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGsgPyBrLnRvU3RyaW5nKCkgOiBrIHx8IFwiXCI7IGsubGVuZ3RoIDwgdDspIHtcbiAgICAgIGsgPSByWzBdICsgaztcbiAgICB9XG4gICAgcmV0dXJuIGs7XG4gIH1cbiAgZnVuY3Rpb24gZihrLCB0KSB7XG4gICAgcmV0dXJuIGUoaywgdCwgXCIwXCIpO1xuICB9XG4gIGZ1bmN0aW9uIGcoaywgdCkge1xuICAgIGZ1bmN0aW9uIHIoRCkge1xuICAgICAgcmV0dXJuIDAgPiBEID8gLTEgOiAwIDwgRCA/IDEgOiAwO1xuICAgIH1cbiAgICB2YXIgQTtcbiAgICAwID09PSAoQSA9IHIoay5nZXRGdWxsWWVhcigpIC0gdC5nZXRGdWxsWWVhcigpKSkgJiYgMCA9PT0gKEEgPSByKGsuZ2V0TW9udGgoKSAtIHQuZ2V0TW9udGgoKSkpICYmIChBID0gcihrLmdldERhdGUoKSAtIHQuZ2V0RGF0ZSgpKSk7XG4gICAgcmV0dXJuIEE7XG4gIH1cbiAgZnVuY3Rpb24gbihrKSB7XG4gICAgc3dpdGNoKGsuZ2V0RGF5KCkpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGsuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAyOSk7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBrO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbmV3IERhdGUoay5nZXRGdWxsWWVhcigpLCAwLCAzKTtcbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGsuZ2V0RnVsbFllYXIoKSwgMCwgMik7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShrLmdldEZ1bGxZZWFyKCksIDAsIDEpO1xuICAgICAgY2FzZSA1OlxuICAgICAgICByZXR1cm4gbmV3IERhdGUoay5nZXRGdWxsWWVhcigpIC0gMSwgMTEsIDMxKTtcbiAgICAgIGNhc2UgNjpcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKGsuZ2V0RnVsbFllYXIoKSAtIDEsIDExLCAzMCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHAoaykge1xuICAgIHZhciB0ID0gay5jYTtcbiAgICBmb3IgKGsgPSBuZXcgRGF0ZSgobmV3IERhdGUoay5kYSArIDE5MDAsIDAsIDEpKS5nZXRUaW1lKCkpOyAwIDwgdDspIHtcbiAgICAgIHZhciByID0gay5nZXRNb250aCgpLCBBID0gKE9kKGsuZ2V0RnVsbFllYXIoKSkgPyBQZCA6IFFkKVtyXTtcbiAgICAgIGlmICh0ID4gQSAtIGsuZ2V0RGF0ZSgpKSB7XG4gICAgICAgIHQgLT0gQSAtIGsuZ2V0RGF0ZSgpICsgMSwgay5zZXREYXRlKDEpLCAxMSA+IHIgPyBrLnNldE1vbnRoKHIgKyAxKSA6IChrLnNldE1vbnRoKDApLCBrLnNldEZ1bGxZZWFyKGsuZ2V0RnVsbFllYXIoKSArIDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGsuc2V0RGF0ZShrLmdldERhdGUoKSArIHQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgciA9IG5ldyBEYXRlKGsuZ2V0RnVsbFllYXIoKSArIDEsIDAsIDQpO1xuICAgIHQgPSBuKG5ldyBEYXRlKGsuZ2V0RnVsbFllYXIoKSwgMCwgNCkpO1xuICAgIHIgPSBuKHIpO1xuICAgIHJldHVybiAwID49IGcodCwgaykgPyAwID49IGcociwgaykgPyBrLmdldEZ1bGxZZWFyKCkgKyAxIDogay5nZXRGdWxsWWVhcigpIDogay5nZXRGdWxsWWVhcigpIC0gMTtcbiAgfVxuICB2YXIgbCA9IExbZCArIDQwID4+IDJdO1xuICBkID0ge3djOkxbZCA+PiAyXSwgdmM6TFtkICsgNCA+PiAyXSwgRmE6TFtkICsgOCA+PiAyXSwgU2E6TFtkICsgMTIgPj4gMl0sIEdhOkxbZCArIDE2ID4+IDJdLCBkYTpMW2QgKyAyMCA+PiAyXSwgUjpMW2QgKyAyNCA+PiAyXSwgY2E6TFtkICsgMjggPj4gMl0sIFJjOkxbZCArIDMyID4+IDJdLCB1YzpMW2QgKyAzNiA+PiAyXSwgeGM6bCA/IGwgPyBuYihFLCBsKSA6IFwiXCIgOiBcIlwifTtcbiAgYyA9IGMgPyBuYihFLCBjKSA6IFwiXCI7XG4gIGwgPSB7XCIlY1wiOlwiJWEgJWIgJWQgJUg6JU06JVMgJVlcIiwgXCIlRFwiOlwiJW0vJWQvJXlcIiwgXCIlRlwiOlwiJVktJW0tJWRcIiwgXCIlaFwiOlwiJWJcIiwgXCIlclwiOlwiJUk6JU06JVMgJXBcIiwgXCIlUlwiOlwiJUg6JU1cIiwgXCIlVFwiOlwiJUg6JU06JVNcIiwgXCIleFwiOlwiJW0vJWQvJXlcIiwgXCIlWFwiOlwiJUg6JU06JVNcIiwgXCIlRWNcIjpcIiVjXCIsIFwiJUVDXCI6XCIlQ1wiLCBcIiVFeFwiOlwiJW0vJWQvJXlcIiwgXCIlRVhcIjpcIiVIOiVNOiVTXCIsIFwiJUV5XCI6XCIleVwiLCBcIiVFWVwiOlwiJVlcIiwgXCIlT2RcIjpcIiVkXCIsIFwiJU9lXCI6XCIlZVwiLCBcIiVPSFwiOlwiJUhcIiwgXCIlT0lcIjpcIiVJXCIsIFwiJU9tXCI6XCIlbVwiLCBcIiVPTVwiOlwiJU1cIiwgXCIlT1NcIjpcIiVTXCIsIFwiJU91XCI6XCIldVwiLCBcIiVPVVwiOlwiJVVcIiwgXCIlT1ZcIjpcIiVWXCIsIFwiJU93XCI6XCIld1wiLCBcIiVPV1wiOlwiJVdcIiwgXCIlT3lcIjpcIiV5XCIsfTtcbiAgZm9yICh2YXIgdSBpbiBsKSB7XG4gICAgYyA9IGMucmVwbGFjZShuZXcgUmVnRXhwKHUsIFwiZ1wiKSwgbFt1XSk7XG4gIH1cbiAgdmFyIHYgPSBcIlN1bmRheSBNb25kYXkgVHVlc2RheSBXZWRuZXNkYXkgVGh1cnNkYXkgRnJpZGF5IFNhdHVyZGF5XCIuc3BsaXQoXCIgXCIpLCB4ID0gXCJKYW51YXJ5IEZlYnJ1YXJ5IE1hcmNoIEFwcmlsIE1heSBKdW5lIEp1bHkgQXVndXN0IFNlcHRlbWJlciBPY3RvYmVyIE5vdmVtYmVyIERlY2VtYmVyXCIuc3BsaXQoXCIgXCIpO1xuICBsID0ge1wiJWFcIjprID0+IHZbay5SXS5zdWJzdHJpbmcoMCwgMyksIFwiJUFcIjprID0+IHZbay5SXSwgXCIlYlwiOmsgPT4geFtrLkdhXS5zdWJzdHJpbmcoMCwgMyksIFwiJUJcIjprID0+IHhbay5HYV0sIFwiJUNcIjprID0+IGYoKGsuZGEgKyAxOTAwKSAvIDEwMCB8IDAsIDIpLCBcIiVkXCI6ayA9PiBmKGsuU2EsIDIpLCBcIiVlXCI6ayA9PiBlKGsuU2EsIDIsIFwiIFwiKSwgXCIlZ1wiOmsgPT4gcChrKS50b1N0cmluZygpLnN1YnN0cmluZygyKSwgXCIlR1wiOmsgPT4gcChrKSwgXCIlSFwiOmsgPT4gZihrLkZhLCAyKSwgXCIlSVwiOmsgPT4ge1xuICAgIGsgPSBrLkZhO1xuICAgIDAgPT0gayA/IGsgPSAxMiA6IDEyIDwgayAmJiAoayAtPSAxMik7XG4gICAgcmV0dXJuIGYoaywgMik7XG4gIH0sIFwiJWpcIjprID0+IHtcbiAgICBmb3IgKHZhciB0ID0gMCwgciA9IDA7IHIgPD0gay5HYSAtIDE7IHQgKz0gKE9kKGsuZGEgKyAxOTAwKSA/IFBkIDogUWQpW3IrK10pIHtcbiAgICB9XG4gICAgcmV0dXJuIGYoay5TYSArIHQsIDMpO1xuICB9LCBcIiVtXCI6ayA9PiBmKGsuR2EgKyAxLCAyKSwgXCIlTVwiOmsgPT4gZihrLnZjLCAyKSwgXCIlblwiOigpID0+IFwiXFxuXCIsIFwiJXBcIjprID0+IDAgPD0gay5GYSAmJiAxMiA+IGsuRmEgPyBcIkFNXCIgOiBcIlBNXCIsIFwiJVNcIjprID0+IGYoay53YywgMiksIFwiJXRcIjooKSA9PiBcIlxcdFwiLCBcIiV1XCI6ayA9PiBrLlIgfHwgNywgXCIlVVwiOmsgPT4gZihNYXRoLmZsb29yKChrLmNhICsgNyAtIGsuUikgLyA3KSwgMiksIFwiJVZcIjprID0+IHtcbiAgICB2YXIgdCA9IE1hdGguZmxvb3IoKGsuY2EgKyA3IC0gKGsuUiArIDYpICUgNykgLyA3KTtcbiAgICAyID49IChrLlIgKyAzNzEgLSBrLmNhIC0gMikgJSA3ICYmIHQrKztcbiAgICBpZiAodCkge1xuICAgICAgNTMgPT0gdCAmJiAociA9IChrLlIgKyAzNzEgLSBrLmNhKSAlIDcsIDQgPT0gciB8fCAzID09IHIgJiYgT2Qoay5kYSkgfHwgKHQgPSAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQgPSA1MjtcbiAgICAgIHZhciByID0gKGsuUiArIDcgLSBrLmNhIC0gMSkgJSA3O1xuICAgICAgKDQgPT0gciB8fCA1ID09IHIgJiYgT2Qoay5kYSAlIDQwMCAtIDEpKSAmJiB0Kys7XG4gICAgfVxuICAgIHJldHVybiBmKHQsIDIpO1xuICB9LCBcIiV3XCI6ayA9PiBrLlIsIFwiJVdcIjprID0+IGYoTWF0aC5mbG9vcigoay5jYSArIDcgLSAoay5SICsgNikgJSA3KSAvIDcpLCAyKSwgXCIleVwiOmsgPT4gKGsuZGEgKyAxOTAwKS50b1N0cmluZygpLnN1YnN0cmluZygyKSwgXCIlWVwiOmsgPT4gay5kYSArIDE5MDAsIFwiJXpcIjprID0+IHtcbiAgICBrID0gay51YztcbiAgICB2YXIgdCA9IDAgPD0gaztcbiAgICBrID0gTWF0aC5hYnMoaykgLyA2MDtcbiAgICByZXR1cm4gKHQgPyBcIitcIiA6IFwiLVwiKSArIFN0cmluZyhcIjAwMDBcIiArIChrIC8gNjAgKiAxMDAgKyBrICUgNjApKS5zbGljZSgtNCk7XG4gIH0sIFwiJVpcIjprID0+IGsueGMsIFwiJSVcIjooKSA9PiBcIiVcIn07XG4gIGMgPSBjLnJlcGxhY2UoLyUlL2csIFwiXFx4MDBcXHgwMFwiKTtcbiAgZm9yICh1IGluIGwpIHtcbiAgICBjLmluY2x1ZGVzKHUpICYmIChjID0gYy5yZXBsYWNlKG5ldyBSZWdFeHAodSwgXCJnXCIpLCBsW3VdKGQpKSk7XG4gIH1cbiAgYyA9IGMucmVwbGFjZSgvXFwwXFwwL2csIFwiJVwiKTtcbiAgdSA9IHJiKGMsICExKTtcbiAgaWYgKHUubGVuZ3RoID4gYikge1xuICAgIHJldHVybiAwO1xuICB9XG4gIEIuc2V0KHUsIGEpO1xuICByZXR1cm4gdS5sZW5ndGggLSAxO1xufTtcbmZ1bmN0aW9uIFBiKGEsIGIsIGMsIGQpIHtcbiAgYSB8fCAoYSA9IHRoaXMpO1xuICB0aGlzLnBhcmVudCA9IGE7XG4gIHRoaXMuVSA9IGEuVTtcbiAgdGhpcy53YSA9IG51bGw7XG4gIHRoaXMuaWQgPSBIYisrO1xuICB0aGlzLm5hbWUgPSBiO1xuICB0aGlzLm1vZGUgPSBjO1xuICB0aGlzLmwgPSB7fTtcbiAgdGhpcy5tID0ge307XG4gIHRoaXMuemEgPSBkO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUGIucHJvdG90eXBlLCB7cmVhZDp7Z2V0OmZ1bmN0aW9uKCkge1xuICByZXR1cm4gMzY1ID09PSAodGhpcy5tb2RlICYgMzY1KTtcbn0sIHNldDpmdW5jdGlvbihhKSB7XG4gIGEgPyB0aGlzLm1vZGUgfD0gMzY1IDogdGhpcy5tb2RlICY9IC0zNjY7XG59fSwgd3JpdGU6e2dldDpmdW5jdGlvbigpIHtcbiAgcmV0dXJuIDE0NiA9PT0gKHRoaXMubW9kZSAmIDE0Nik7XG59LCBzZXQ6ZnVuY3Rpb24oYSkge1xuICBhID8gdGhpcy5tb2RlIHw9IDE0NiA6IHRoaXMubW9kZSAmPSAtMTQ3O1xufX19KTtcbmdjKCk7XG5JYiA9IEFycmF5KDQwOTYpO1xuV2IoUCwgXCIvXCIpO1xuUyhcIi90bXBcIiwgMTY4OTUsIDApO1xuUyhcIi9ob21lXCIsIDE2ODk1LCAwKTtcblMoXCIvaG9tZS93ZWJfdXNlclwiLCAxNjg5NSwgMCk7XG4oKCkgPT4ge1xuICBTKFwiL2RldlwiLCAxNjg5NSwgMCk7XG4gIHViKDI1OSwge3JlYWQ6KCkgPT4gMCwgd3JpdGU6KGQsIGUsIGYsIGcpID0+IGcsfSk7XG4gIFhiKFwiL2Rldi9udWxsXCIsIDI1OSk7XG4gIHRiKDEyODAsIHdiKTtcbiAgdGIoMTUzNiwgeGIpO1xuICBYYihcIi9kZXYvdHR5XCIsIDEyODApO1xuICBYYihcIi9kZXYvdHR5MVwiLCAxNTM2KTtcbiAgdmFyIGEgPSBuZXcgVWludDhBcnJheSgxMDI0KSwgYiA9IDAsIGMgPSAoKSA9PiB7XG4gICAgMCA9PT0gYiAmJiAoYiA9IGtiKGEpLmJ5dGVMZW5ndGgpO1xuICAgIHJldHVybiBhWy0tYl07XG4gIH07XG4gIGpjKFwicmFuZG9tXCIsIGMpO1xuICBqYyhcInVyYW5kb21cIiwgYyk7XG4gIFMoXCIvZGV2L3NobVwiLCAxNjg5NSwgMCk7XG4gIFMoXCIvZGV2L3NobS90bXBcIiwgMTY4OTUsIDApO1xufSkoKTtcbigoKSA9PiB7XG4gIFMoXCIvcHJvY1wiLCAxNjg5NSwgMCk7XG4gIHZhciBhID0gUyhcIi9wcm9jL3NlbGZcIiwgMTY4OTUsIDApO1xuICBTKFwiL3Byb2Mvc2VsZi9mZFwiLCAxNjg5NSwgMCk7XG4gIFdiKHtVOigpID0+IHtcbiAgICB2YXIgYiA9IEFiKGEsIFwiZmRcIiwgMTY4OTUsIDczKTtcbiAgICBiLmwgPSB7a2E6KGMsIGQpID0+IHtcbiAgICAgIHZhciBlID0gVGIoK2QpO1xuICAgICAgYyA9IHtwYXJlbnQ6bnVsbCwgVTp7bWI6XCJmYWtlXCJ9LCBsOnttYTooKSA9PiBlLnBhdGh9LH07XG4gICAgICByZXR1cm4gYy5wYXJlbnQgPSBjO1xuICAgIH19O1xuICAgIHJldHVybiBiO1xuICB9fSwgXCIvcHJvYy9zZWxmL2ZkXCIpO1xufSkoKTtcbk9iamVjdC5hc3NpZ24ocGMucHJvdG90eXBlLCB7Z2V0KGEpIHtcbiAgcmV0dXJuIHRoaXMuTVthXTtcbn0sIGhhcyhhKSB7XG4gIHJldHVybiB2b2lkIDAgIT09IHRoaXMuTVthXTtcbn0sIHBhKGEpIHtcbiAgdmFyIGIgPSB0aGlzLmhiLnBvcCgpIHx8IHRoaXMuTS5sZW5ndGg7XG4gIHRoaXMuTVtiXSA9IGE7XG4gIHJldHVybiBiO1xufSwgWmIoYSkge1xuICB0aGlzLk1bYV0gPSB2b2lkIDA7XG4gIHRoaXMuaGIucHVzaChhKTtcbn19KTtcbnFjID0gbS5CaW5kaW5nRXJyb3IgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoYSkge1xuICAgIHN1cGVyKGEpO1xuICAgIHRoaXMubmFtZSA9IFwiQmluZGluZ0Vycm9yXCI7XG4gIH1cbn07XG5VLk0ucHVzaCh7dmFsdWU6dm9pZCAwfSwge3ZhbHVlOm51bGx9LCB7dmFsdWU6ITB9LCB7dmFsdWU6ITF9LCk7XG5VLmggPSBVLk0ubGVuZ3RoO1xubS5jb3VudF9lbXZhbF9oYW5kbGVzID0gZnVuY3Rpb24oKSB7XG4gIGZvciAodmFyIGEgPSAwLCBiID0gVS5oOyBiIDwgVS5NLmxlbmd0aDsgKytiKSB7XG4gICAgdm9pZCAwICE9PSBVLk1bYl0gJiYgKythO1xuICB9XG4gIHJldHVybiBhO1xufTtcbnVjID0gbS5QdXJlVmlydHVhbEVycm9yID0gdGMoXCJQdXJlVmlydHVhbEVycm9yXCIpO1xuZm9yICh2YXIgU2QgPSBBcnJheSgyNTYpLCBUZCA9IDA7IDI1NiA+IFRkOyArK1RkKSB7XG4gIFNkW1RkXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoVGQpO1xufVxudmMgPSBTZDtcbm0uZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoemMpLmxlbmd0aDtcbn07XG5tLmdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGEgPSBbXSwgYjtcbiAgZm9yIChiIGluIHpjKSB7XG4gICAgemMuaGFzT3duUHJvcGVydHkoYikgJiYgYS5wdXNoKHpjW2JdKTtcbiAgfVxuICByZXR1cm4gYTtcbn07XG5tLmZsdXNoUGVuZGluZ0RlbGV0ZXMgPSB4Yztcbm0uc2V0RGVsYXlGdW5jdGlvbiA9IGZ1bmN0aW9uKGEpIHtcbiAgeWMgPSBhO1xuICB3Yy5sZW5ndGggJiYgeWMgJiYgeWMoeGMpO1xufTtcbk1jID0gbS5JbnRlcm5hbEVycm9yID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKGEpIHtcbiAgICBzdXBlcihhKTtcbiAgICB0aGlzLm5hbWUgPSBcIkludGVybmFsRXJyb3JcIjtcbiAgfVxufTtcblpjLnByb3RvdHlwZS5pc0FsaWFzT2YgPSBmdW5jdGlvbihhKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBaYyAmJiBhIGluc3RhbmNlb2YgWmMpKSB7XG4gICAgcmV0dXJuICExO1xuICB9XG4gIHZhciBiID0gdGhpcy5nLnUuaSwgYyA9IHRoaXMuZy5vLCBkID0gYS5nLnUuaTtcbiAgZm9yIChhID0gYS5nLm87IGIuQTspIHtcbiAgICBjID0gYi5uYShjKSwgYiA9IGIuQTtcbiAgfVxuICBmb3IgKDsgZC5BOykge1xuICAgIGEgPSBkLm5hKGEpLCBkID0gZC5BO1xuICB9XG4gIHJldHVybiBiID09PSBkICYmIGMgPT09IGE7XG59O1xuWmMucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZy5vIHx8IFljKHRoaXMpO1xuICBpZiAodGhpcy5nLmlhKSB7XG4gICAgcmV0dXJuIHRoaXMuZy5jb3VudC52YWx1ZSArPSAxLCB0aGlzO1xuICB9XG4gIHZhciBhID0gUGMsIGIgPSBPYmplY3QsIGMgPSBiLmNyZWF0ZSwgZCA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgZSA9IHRoaXMuZztcbiAgYSA9IGEoYy5jYWxsKGIsIGQsIHtnOnt2YWx1ZTp7Y291bnQ6ZS5jb3VudCwgZmE6ZS5mYSwgaWE6ZS5pYSwgbzplLm8sIHU6ZS51LCBHOmUuRywgTDplLkwsfSx9fSkpO1xuICBhLmcuY291bnQudmFsdWUgKz0gMTtcbiAgYS5nLmZhID0gITE7XG4gIHJldHVybiBhO1xufTtcblpjLnByb3RvdHlwZVtcImRlbGV0ZVwiXSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmcubyB8fCBZYyh0aGlzKTtcbiAgdGhpcy5nLmZhICYmICF0aGlzLmcuaWEgJiYgVihcIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb25cIik7XG4gIEdjKHRoaXMpO1xuICBJYyh0aGlzLmcpO1xuICB0aGlzLmcuaWEgfHwgKHRoaXMuZy5HID0gdm9pZCAwLCB0aGlzLmcubyA9IHZvaWQgMCk7XG59O1xuWmMucHJvdG90eXBlLmlzRGVsZXRlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMuZy5vO1xufTtcblpjLnByb3RvdHlwZS5kZWxldGVMYXRlciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmcubyB8fCBZYyh0aGlzKTtcbiAgdGhpcy5nLmZhICYmICF0aGlzLmcuaWEgJiYgVihcIk9iamVjdCBhbHJlYWR5IHNjaGVkdWxlZCBmb3IgZGVsZXRpb25cIik7XG4gIHdjLnB1c2godGhpcyk7XG4gIDEgPT09IHdjLmxlbmd0aCAmJiB5YyAmJiB5Yyh4Yyk7XG4gIHRoaXMuZy5mYSA9ICEwO1xuICByZXR1cm4gdGhpcztcbn07XG5oZC5wcm90b3R5cGUuVmIgPSBmdW5jdGlvbihhKSB7XG4gIHRoaXMucmIgJiYgKGEgPSB0aGlzLnJiKGEpKTtcbiAgcmV0dXJuIGE7XG59O1xuaGQucHJvdG90eXBlLmFiID0gZnVuY3Rpb24oYSkge1xuICB0aGlzLlcgJiYgdGhpcy5XKGEpO1xufTtcbmhkLnByb3RvdHlwZS5hcmdQYWNrQWR2YW5jZSA9IDg7XG5oZC5wcm90b3R5cGUucmVhZFZhbHVlRnJvbVBvaW50ZXIgPSBTYztcbmhkLnByb3RvdHlwZS5kZWxldGVPYmplY3QgPSBmdW5jdGlvbihhKSB7XG4gIGlmIChudWxsICE9PSBhKSB7XG4gICAgYVtcImRlbGV0ZVwiXSgpO1xuICB9XG59O1xuaGQucHJvdG90eXBlLmZyb21XaXJlVHlwZSA9IGZ1bmN0aW9uKGEpIHtcbiAgZnVuY3Rpb24gYigpIHtcbiAgICByZXR1cm4gdGhpcy51YSA/IE9jKHRoaXMuaS5OLCB7dTp0aGlzLm5jLCBvOmMsIEw6dGhpcywgRzphLH0pIDogT2ModGhpcy5pLk4sIHt1OnRoaXMsIG86YSx9KTtcbiAgfVxuICB2YXIgYyA9IHRoaXMuVmIoYSk7XG4gIGlmICghYykge1xuICAgIHJldHVybiB0aGlzLmFiKGEpLCBudWxsO1xuICB9XG4gIHZhciBkID0gTGModGhpcy5pLCBjKTtcbiAgaWYgKHZvaWQgMCAhPT0gZCkge1xuICAgIGlmICgwID09PSBkLmcuY291bnQudmFsdWUpIHtcbiAgICAgIHJldHVybiBkLmcubyA9IGMsIGQuZy5HID0gYSwgZC5jbG9uZSgpO1xuICAgIH1cbiAgICBkID0gZC5jbG9uZSgpO1xuICAgIHRoaXMuYWIoYSk7XG4gICAgcmV0dXJuIGQ7XG4gIH1cbiAgZCA9IHRoaXMuaS5VYihjKTtcbiAgZCA9IEtjW2RdO1xuICBpZiAoIWQpIHtcbiAgICByZXR1cm4gYi5jYWxsKHRoaXMpO1xuICB9XG4gIGQgPSB0aGlzLnRhID8gZC5LYiA6IGQucG9pbnRlclR5cGU7XG4gIHZhciBlID0gSmMoYywgdGhpcy5pLCBkLmkpO1xuICByZXR1cm4gbnVsbCA9PT0gZSA/IGIuY2FsbCh0aGlzKSA6IHRoaXMudWEgPyBPYyhkLmkuTiwge3U6ZCwgbzplLCBMOnRoaXMsIEc6YSx9KSA6IE9jKGQuaS5OLCB7dTpkLCBvOmUsfSk7XG59O1xubmQgPSBtLlVuYm91bmRUeXBlRXJyb3IgPSB0YyhcIlVuYm91bmRUeXBlRXJyb3JcIik7XG52YXIgV2QgPSB7X19zeXNjYWxsX2ZjbnRsNjQ6ZnVuY3Rpb24oYSwgYiwgYykge1xuICBsYyA9IGM7XG4gIHRyeSB7XG4gICAgdmFyIGQgPSBUYihhKTtcbiAgICBzd2l0Y2goYikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICB2YXIgZSA9IG1jKCk7XG4gICAgICAgIHJldHVybiAwID4gZSA/IC0yOCA6IFZiKGQsIGUpLlg7XG4gICAgICBjYXNlIDE6XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gZC5mbGFncztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIGUgPSBtYygpLCBkLmZsYWdzIHw9IGUsIDA7XG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJldHVybiBlID0gbWMoKSwgRGFbZSArIDAgPj4gMV0gPSAyLCAwO1xuICAgICAgY2FzZSA2OlxuICAgICAgY2FzZSA3OlxuICAgICAgICByZXR1cm4gMDtcbiAgICAgIGNhc2UgMTY6XG4gICAgICBjYXNlIDg6XG4gICAgICAgIHJldHVybiAtMjg7XG4gICAgICBjYXNlIDk6XG4gICAgICAgIHJldHVybiBMW1VkKCkgPj4gMl0gPSAyOCwgLTE7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gLTI4O1xuICAgIH1cbiAgfSBjYXRjaCAoZikge1xuICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBrYyB8fCBcIkVycm5vRXJyb3JcIiAhPT0gZi5uYW1lKSB7XG4gICAgICB0aHJvdyBmO1xuICAgIH1cbiAgICByZXR1cm4gLWYuYWE7XG4gIH1cbn0sIF9fc3lzY2FsbF9pb2N0bDpmdW5jdGlvbihhLCBiLCBjKSB7XG4gIGxjID0gYztcbiAgdHJ5IHtcbiAgICB2YXIgZCA9IFRiKGEpO1xuICAgIHN3aXRjaChiKSB7XG4gICAgICBjYXNlIDIxNTA5OlxuICAgICAgICByZXR1cm4gZC5zID8gMCA6IC01OTtcbiAgICAgIGNhc2UgMjE1MDU6XG4gICAgICAgIGlmICghZC5zKSB7XG4gICAgICAgICAgcmV0dXJuIC01OTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZC5zLlYuYmMpIHtcbiAgICAgICAgICBiID0gWzMsIDI4LCAxMjcsIDIxLCA0LCAwLCAxLCAwLCAxNywgMTksIDI2LCAwLCAxOCwgMTUsIDIzLCAyMiwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCxdO1xuICAgICAgICAgIHZhciBlID0gbWMoKTtcbiAgICAgICAgICBMW2UgPj4gMl0gPSAyNTg1NjtcbiAgICAgICAgICBMW2UgKyA0ID4+IDJdID0gNTtcbiAgICAgICAgICBMW2UgKyA4ID4+IDJdID0gMTkxO1xuICAgICAgICAgIExbZSArIDEyID4+IDJdID0gMzUzODc7XG4gICAgICAgICAgZm9yICh2YXIgZiA9IDA7IDMyID4gZjsgZisrKSB7XG4gICAgICAgICAgICBCW2UgKyBmICsgMTcgPj4gMF0gPSBiW2ZdIHx8IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSAyMTUxMDpcbiAgICAgIGNhc2UgMjE1MTE6XG4gICAgICBjYXNlIDIxNTEyOlxuICAgICAgICByZXR1cm4gZC5zID8gMCA6IC01OTtcbiAgICAgIGNhc2UgMjE1MDY6XG4gICAgICBjYXNlIDIxNTA3OlxuICAgICAgY2FzZSAyMTUwODpcbiAgICAgICAgaWYgKCFkLnMpIHtcbiAgICAgICAgICByZXR1cm4gLTU5O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkLnMuVi5jYykge1xuICAgICAgICAgIGZvciAoZSA9IG1jKCksIGIgPSBbXSwgZiA9IDA7IDMyID4gZjsgZisrKSB7XG4gICAgICAgICAgICBiLnB1c2goQltlICsgZiArIDE3ID4+IDBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIDIxNTE5OlxuICAgICAgICBpZiAoIWQucykge1xuICAgICAgICAgIHJldHVybiAtNTk7XG4gICAgICAgIH1cbiAgICAgICAgZSA9IG1jKCk7XG4gICAgICAgIHJldHVybiBMW2UgPj4gMl0gPSAwO1xuICAgICAgY2FzZSAyMTUyMDpcbiAgICAgICAgcmV0dXJuIGQucyA/IC0yOCA6IC01OTtcbiAgICAgIGNhc2UgMjE1MzE6XG4gICAgICAgIGUgPSBtYygpO1xuICAgICAgICBpZiAoIWQubS5hYykge1xuICAgICAgICAgIHRocm93IG5ldyBPKDU5KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZC5tLmFjKGQsIGIsIGUpO1xuICAgICAgY2FzZSAyMTUyMzpcbiAgICAgICAgaWYgKCFkLnMpIHtcbiAgICAgICAgICByZXR1cm4gLTU5O1xuICAgICAgICB9XG4gICAgICAgIGQucy5WLmRjICYmIChmID0gWzI0LCA4MF0sIGUgPSBtYygpLCBEYVtlID4+IDFdID0gZlswXSwgRGFbZSArIDIgPj4gMV0gPSBmWzFdKTtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICBjYXNlIDIxNTI0OlxuICAgICAgICByZXR1cm4gZC5zID8gMCA6IC01OTtcbiAgICAgIGNhc2UgMjE1MTU6XG4gICAgICAgIHJldHVybiBkLnMgPyAwIDogLTU5O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIC0yODtcbiAgICB9XG4gIH0gY2F0Y2ggKGcpIHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2Yga2MgfHwgXCJFcnJub0Vycm9yXCIgIT09IGcubmFtZSkge1xuICAgICAgdGhyb3cgZztcbiAgICB9XG4gICAgcmV0dXJuIC1nLmFhO1xuICB9XG59LCBfX3N5c2NhbGxfb3BlbmF0OmZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgbGMgPSBkO1xuICB0cnkge1xuICAgIGIgPSBiID8gbmIoRSwgYikgOiBcIlwiO1xuICAgIHZhciBlID0gYjtcbiAgICBpZiAoXCIvXCIgPT09IGUuY2hhckF0KDApKSB7XG4gICAgICBiID0gZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGYgPSAtMTAwID09PSBhID8gXCIvXCIgOiBUYihhKS5wYXRoO1xuICAgICAgaWYgKDAgPT0gZS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IE8oNDQpO1xuICAgICAgfVxuICAgICAgYiA9IGdiKGYgKyBcIi9cIiArIGUpO1xuICAgIH1cbiAgICB2YXIgZyA9IGQgPyBtYygpIDogMDtcbiAgICByZXR1cm4gZWMoYiwgYywgZykuWDtcbiAgfSBjYXRjaCAobikge1xuICAgIGlmIChcInVuZGVmaW5lZFwiID09IHR5cGVvZiBrYyB8fCBcIkVycm5vRXJyb3JcIiAhPT0gbi5uYW1lKSB7XG4gICAgICB0aHJvdyBuO1xuICAgIH1cbiAgICByZXR1cm4gLW4uYWE7XG4gIH1cbn0sIF9lbWJpbmRfY3JlYXRlX2luaGVyaXRpbmdfY29uc3RydWN0b3I6ZnVuY3Rpb24oYSwgYiwgYykge1xuICBhID0gVyhhKTtcbiAgYiA9IEZjKGIsIFwid3JhcHBlclwiKTtcbiAgYyA9IHJjKGMpO1xuICB2YXIgZCA9IFtdLnNsaWNlLCBlID0gYi5pLCBmID0gZS5OLCBnID0gZS5BLk4sIG4gPSBlLkEuY29uc3RydWN0b3I7XG4gIGEgPSBvYyhhLCBmdW5jdGlvbigpIHtcbiAgICBlLkEucWIuZm9yRWFjaChmdW5jdGlvbihsKSB7XG4gICAgICBpZiAodGhpc1tsXSA9PT0gZ1tsXSkge1xuICAgICAgICB0aHJvdyBuZXcgdWMoYFB1cmUgdmlydHVhbCBmdW5jdGlvbiAke2x9IG11c3QgYmUgaW1wbGVtZW50ZWQgaW4gSmF2YVNjcmlwdGApO1xuICAgICAgfVxuICAgIH0uYmluZCh0aGlzKSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX19wYXJlbnRcIiwge3ZhbHVlOmZ9KTtcbiAgICB0aGlzLl9fY29uc3RydWN0LmFwcGx5KHRoaXMsIGQuY2FsbChhcmd1bWVudHMpKTtcbiAgfSk7XG4gIGYuX19jb25zdHJ1Y3QgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzID09PSBmICYmIFYoXCJQYXNzIGNvcnJlY3QgJ3RoaXMnIHRvIF9fY29uc3RydWN0XCIpO1xuICAgIHZhciBsID0gbi5pbXBsZW1lbnQuYXBwbHkodm9pZCAwLCBbdGhpc10uY29uY2F0KGQuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgR2MobCk7XG4gICAgdmFyIHUgPSBsLmc7XG4gICAgbC5ub3RpZnlPbkRlc3RydWN0aW9uKCk7XG4gICAgdS5pYSA9ICEwO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRoaXMsIHtnOnt2YWx1ZTp1fX0pO1xuICAgIFBjKHRoaXMpO1xuICAgIGwgPSB1Lm87XG4gICAgbCA9IEFjKGUsIGwpO1xuICAgIHpjLmhhc093blByb3BlcnR5KGwpID8gVihgVHJpZWQgdG8gcmVnaXN0ZXIgcmVnaXN0ZXJlZCBpbnN0YW5jZTogJHtsfWApIDogemNbbF0gPSB0aGlzO1xuICB9O1xuICBmLl9fZGVzdHJ1Y3QgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzID09PSBmICYmIFYoXCJQYXNzIGNvcnJlY3QgJ3RoaXMnIHRvIF9fZGVzdHJ1Y3RcIik7XG4gICAgR2ModGhpcyk7XG4gICAgdmFyIGwgPSB0aGlzLmcubztcbiAgICBsID0gQWMoZSwgbCk7XG4gICAgemMuaGFzT3duUHJvcGVydHkobCkgPyBkZWxldGUgemNbbF0gOiBWKGBUcmllZCB0byB1bnJlZ2lzdGVyIHVucmVnaXN0ZXJlZCBpbnN0YW5jZTogJHtsfWApO1xuICB9O1xuICBhLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZik7XG4gIGZvciAodmFyIHAgaW4gYykge1xuICAgIGEucHJvdG90eXBlW3BdID0gY1twXTtcbiAgfVxuICByZXR1cm4gc2MoYSk7XG59LCBfZW1iaW5kX2ZpbmFsaXplX3ZhbHVlX29iamVjdDpmdW5jdGlvbihhKSB7XG4gIHZhciBiID0gUWNbYV07XG4gIGRlbGV0ZSBRY1thXTtcbiAgdmFyIGMgPSBiLlBhLCBkID0gYi5XLCBlID0gYi5lYiwgZiA9IGUubWFwKGcgPT4gZy5ZYikuY29uY2F0KGUubWFwKGcgPT4gZy5yYykpO1xuICBZKFthXSwgZiwgZyA9PiB7XG4gICAgdmFyIG4gPSB7fTtcbiAgICBlLmZvckVhY2goKHAsIGwpID0+IHtcbiAgICAgIHZhciB1ID0gZ1tsXSwgdiA9IHAuV2IsIHggPSBwLlhiLCBrID0gZ1tsICsgZS5sZW5ndGhdLCB0ID0gcC5xYywgciA9IHAuc2M7XG4gICAgICBuW3AuU2JdID0ge3JlYWQ6QSA9PiB1LmZyb21XaXJlVHlwZSh2KHgsIEEpKSwgd3JpdGU6KEEsIEQpID0+IHtcbiAgICAgICAgdmFyIHcgPSBbXTtcbiAgICAgICAgdChyLCBBLCBrLnRvV2lyZVR5cGUodywgRCkpO1xuICAgICAgICBSYyh3KTtcbiAgICAgIH19O1xuICAgIH0pO1xuICAgIHJldHVybiBbe25hbWU6Yi5uYW1lLCBmcm9tV2lyZVR5cGU6ZnVuY3Rpb24ocCkge1xuICAgICAgdmFyIGwgPSB7fSwgdTtcbiAgICAgIGZvciAodSBpbiBuKSB7XG4gICAgICAgIGxbdV0gPSBuW3VdLnJlYWQocCk7XG4gICAgICB9XG4gICAgICBkKHApO1xuICAgICAgcmV0dXJuIGw7XG4gICAgfSwgdG9XaXJlVHlwZTpmdW5jdGlvbihwLCBsKSB7XG4gICAgICBmb3IgKHZhciB1IGluIG4pIHtcbiAgICAgICAgaWYgKCEodSBpbiBsKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE1pc3NpbmcgZmllbGQ6IFwiJHt1fVwiYCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciB2ID0gYygpO1xuICAgICAgZm9yICh1IGluIG4pIHtcbiAgICAgICAgblt1XS53cml0ZSh2LCBsW3VdKTtcbiAgICAgIH1cbiAgICAgIG51bGwgIT09IHAgJiYgcC5wdXNoKGQsIHYpO1xuICAgICAgcmV0dXJuIHY7XG4gICAgfSwgYXJnUGFja0FkdmFuY2U6OCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6U2MsIEs6ZCx9XTtcbiAgfSk7XG59LCBfZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludDpmdW5jdGlvbigpIHtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfYm9vbDpmdW5jdGlvbihhLCBiLCBjLCBkLCBlKSB7XG4gIHZhciBmID0gV2MoYyk7XG4gIGIgPSBXKGIpO1xuICBWYyhhLCB7bmFtZTpiLCBmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oZykge1xuICAgIHJldHVybiAhIWc7XG4gIH0sIHRvV2lyZVR5cGU6ZnVuY3Rpb24oZywgbikge1xuICAgIHJldHVybiBuID8gZCA6IGU7XG4gIH0sIGFyZ1BhY2tBZHZhbmNlOjgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOmZ1bmN0aW9uKGcpIHtcbiAgICBpZiAoMSA9PT0gYykge1xuICAgICAgdmFyIG4gPSBCO1xuICAgIH0gZWxzZSBpZiAoMiA9PT0gYykge1xuICAgICAgbiA9IERhO1xuICAgIH0gZWxzZSBpZiAoNCA9PT0gYykge1xuICAgICAgbiA9IEw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJVbmtub3duIGJvb2xlYW4gdHlwZSBzaXplOiBcIiArIGIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mcm9tV2lyZVR5cGUobltnID4+IGZdKTtcbiAgfSwgSzpudWxsLH0pO1xufSwgX2VtYmluZF9yZWdpc3Rlcl9jbGFzczpmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmLCBnLCBuLCBwLCBsLCB1LCB2LCB4KSB7XG4gIHUgPSBXKHUpO1xuICBmID0gWihlLCBmKTtcbiAgbiAmJiAobiA9IFooZywgbikpO1xuICBsICYmIChsID0gWihwLCBsKSk7XG4gIHggPSBaKHYsIHgpO1xuICB2YXIgayA9IG5jKHUpO1xuICBhZChrLCBmdW5jdGlvbigpIHtcbiAgICBvZChgQ2Fubm90IGNvbnN0cnVjdCAke3V9IGR1ZSB0byB1bmJvdW5kIHR5cGVzYCwgW2RdKTtcbiAgfSk7XG4gIFkoW2EsIGIsIGNdLCBkID8gW2RdIDogW10sIGZ1bmN0aW9uKHQpIHtcbiAgICB0ID0gdFswXTtcbiAgICBpZiAoZCkge1xuICAgICAgdmFyIHIgPSB0Lmk7XG4gICAgICB2YXIgQSA9IHIuTjtcbiAgICB9IGVsc2Uge1xuICAgICAgQSA9IFpjLnByb3RvdHlwZTtcbiAgICB9XG4gICAgdCA9IG9jKGssIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSAhPT0gRCkge1xuICAgICAgICB0aHJvdyBuZXcgcWMoXCJVc2UgJ25ldycgdG8gY29uc3RydWN0IFwiICsgdSk7XG4gICAgICB9XG4gICAgICBpZiAodm9pZCAwID09PSB3LiQpIHtcbiAgICAgICAgdGhyb3cgbmV3IHFjKHUgKyBcIiBoYXMgbm8gYWNjZXNzaWJsZSBjb25zdHJ1Y3RvclwiKTtcbiAgICAgIH1cbiAgICAgIHZhciBUID0gdy4kW2FyZ3VtZW50cy5sZW5ndGhdO1xuICAgICAgaWYgKHZvaWQgMCA9PT0gVCkge1xuICAgICAgICB0aHJvdyBuZXcgcWMoYFRyaWVkIHRvIGludm9rZSBjdG9yIG9mICR7dX0gd2l0aCBpbnZhbGlkIG51bWJlciBvZiBwYXJhbWV0ZXJzICgke2FyZ3VtZW50cy5sZW5ndGh9KSAtIGV4cGVjdGVkICgke09iamVjdC5rZXlzKHcuJCkudG9TdHJpbmcoKX0pIHBhcmFtZXRlcnMgaW5zdGVhZCFgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBULmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSk7XG4gICAgdmFyIEQgPSBPYmplY3QuY3JlYXRlKEEsIHtjb25zdHJ1Y3Rvcjp7dmFsdWU6dH0sfSk7XG4gICAgdC5wcm90b3R5cGUgPSBEO1xuICAgIHZhciB3ID0gbmV3IGJkKHUsIHQsIEQsIHgsIHIsIGYsIG4sIGwpO1xuICAgIHcuQSAmJiAodm9pZCAwID09PSB3LkEub2EgJiYgKHcuQS5vYSA9IFtdKSwgdy5BLm9hLnB1c2godykpO1xuICAgIHIgPSBuZXcgaGQodSwgdywgITAsICExKTtcbiAgICBBID0gbmV3IGhkKHUgKyBcIipcIiwgdywgITEsICExKTtcbiAgICB2YXIgTSA9IG5ldyBoZCh1ICsgXCIgY29uc3QqXCIsIHcsICExLCAhMCk7XG4gICAgS2NbYV0gPSB7cG9pbnRlclR5cGU6QSwgS2I6TX07XG4gICAgamQoaywgdCk7XG4gICAgcmV0dXJuIFtyLCBBLCBNXTtcbiAgfSk7XG59LCBfZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NsYXNzX2Z1bmN0aW9uOmZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYsIGcpIHtcbiAgdmFyIG4gPSByZChjLCBkKTtcbiAgYiA9IFcoYik7XG4gIGYgPSBaKGUsIGYpO1xuICBZKFtdLCBbYV0sIGZ1bmN0aW9uKHApIHtcbiAgICBmdW5jdGlvbiBsKCkge1xuICAgICAgb2QoYENhbm5vdCBjYWxsICR7dX0gZHVlIHRvIHVuYm91bmQgdHlwZXNgLCBuKTtcbiAgICB9XG4gICAgcCA9IHBbMF07XG4gICAgdmFyIHUgPSBgJHtwLm5hbWV9LiR7Yn1gO1xuICAgIGIuc3RhcnRzV2l0aChcIkBAXCIpICYmIChiID0gU3ltYm9sW2Iuc3Vic3RyaW5nKDIpXSk7XG4gICAgdmFyIHYgPSBwLmkuY29uc3RydWN0b3I7XG4gICAgdm9pZCAwID09PSB2W2JdID8gKGwuZWEgPSBjIC0gMSwgdltiXSA9IGwpIDogKCRjKHYsIGIsIHUpLCB2W2JdLkJbYyAtIDFdID0gbCk7XG4gICAgWShbXSwgbiwgZnVuY3Rpb24oeCkge1xuICAgICAgeCA9IHBkKHUsIFt4WzBdLCBudWxsXS5jb25jYXQoeC5zbGljZSgxKSksIG51bGwsIGYsIGcpO1xuICAgICAgdm9pZCAwID09PSB2W2JdLkIgPyAoeC5lYSA9IGMgLSAxLCB2W2JdID0geCkgOiB2W2JdLkJbYyAtIDFdID0geDtcbiAgICAgIGlmIChwLmkub2EpIHtcbiAgICAgICAgZm9yIChjb25zdCBrIG9mIHAuaS5vYSkge1xuICAgICAgICAgIGsuY29uc3RydWN0b3IuaGFzT3duUHJvcGVydHkoYikgfHwgKGsuY29uc3RydWN0b3JbYl0gPSB4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFtdO1xuICAgIH0pO1xuICAgIHJldHVybiBbXTtcbiAgfSk7XG59LCBfZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX2NsYXNzX3Byb3BlcnR5OmZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYsIGcsIG4pIHtcbiAgYiA9IFcoYik7XG4gIGYgPSBaKGUsIGYpO1xuICBZKFtdLCBbYV0sIGZ1bmN0aW9uKHApIHtcbiAgICBwID0gcFswXTtcbiAgICB2YXIgbCA9IGAke3AubmFtZX0uJHtifWAsIHUgPSB7Z2V0KCkge1xuICAgICAgb2QoYENhbm5vdCBhY2Nlc3MgJHtsfSBkdWUgdG8gdW5ib3VuZCB0eXBlc2AsIFtjXSk7XG4gICAgfSwgZW51bWVyYWJsZTohMCwgY29uZmlndXJhYmxlOiEwfTtcbiAgICB1LnNldCA9IG4gPyAoKSA9PiB7XG4gICAgICBvZChgQ2Fubm90IGFjY2VzcyAke2x9IGR1ZSB0byB1bmJvdW5kIHR5cGVzYCwgW2NdKTtcbiAgICB9IDogKCkgPT4ge1xuICAgICAgVihgJHtsfSBpcyBhIHJlYWQtb25seSBwcm9wZXJ0eWApO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAuaS5jb25zdHJ1Y3RvciwgYiwgdSk7XG4gICAgWShbXSwgW2NdLCBmdW5jdGlvbih2KSB7XG4gICAgICB2ID0gdlswXTtcbiAgICAgIHZhciB4ID0ge2dldCgpIHtcbiAgICAgICAgcmV0dXJuIHYuZnJvbVdpcmVUeXBlKGYoZCkpO1xuICAgICAgfSwgZW51bWVyYWJsZTohMH07XG4gICAgICBuICYmIChuID0gWihnLCBuKSwgeC5zZXQgPSBrID0+IHtcbiAgICAgICAgdmFyIHQgPSBbXTtcbiAgICAgICAgbihkLCB2LnRvV2lyZVR5cGUodCwgaykpO1xuICAgICAgICBSYyh0KTtcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHAuaS5jb25zdHJ1Y3RvciwgYiwgeCk7XG4gICAgICByZXR1cm4gW107XG4gICAgfSk7XG4gICAgcmV0dXJuIFtdO1xuICB9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfY29uc3RydWN0b3I6ZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgZyA9IHJkKGIsIGMpO1xuICBlID0gWihkLCBlKTtcbiAgWShbXSwgW2FdLCBmdW5jdGlvbihuKSB7XG4gICAgbiA9IG5bMF07XG4gICAgdmFyIHAgPSBgY29uc3RydWN0b3IgJHtuLm5hbWV9YDtcbiAgICB2b2lkIDAgPT09IG4uaS4kICYmIChuLmkuJCA9IFtdKTtcbiAgICBpZiAodm9pZCAwICE9PSBuLmkuJFtiIC0gMV0pIHtcbiAgICAgIHRocm93IG5ldyBxYyhgQ2Fubm90IHJlZ2lzdGVyIG11bHRpcGxlIGNvbnN0cnVjdG9ycyB3aXRoIGlkZW50aWNhbCBudW1iZXIgb2YgcGFyYW1ldGVycyAoJHtiIC0gMX0pIGZvciBjbGFzcyAnJHtuLm5hbWV9JyEgT3ZlcmxvYWQgcmVzb2x1dGlvbiBpcyBjdXJyZW50bHkgb25seSBwZXJmb3JtZWQgdXNpbmcgdGhlIHBhcmFtZXRlciBjb3VudCwgbm90IGFjdHVhbCB0eXBlIGluZm8hYCk7XG4gICAgfVxuICAgIG4uaS4kW2IgLSAxXSA9ICgpID0+IHtcbiAgICAgIG9kKGBDYW5ub3QgY29uc3RydWN0ICR7bi5uYW1lfSBkdWUgdG8gdW5ib3VuZCB0eXBlc2AsIGcpO1xuICAgIH07XG4gICAgWShbXSwgZywgZnVuY3Rpb24obCkge1xuICAgICAgbC5zcGxpY2UoMSwgMCwgbnVsbCk7XG4gICAgICBuLmkuJFtiIC0gMV0gPSBwZChwLCBsLCBudWxsLCBlLCBmKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcbiAgICByZXR1cm4gW107XG4gIH0pO1xufSwgX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19mdW5jdGlvbjpmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmLCBnLCBuKSB7XG4gIHZhciBwID0gcmQoYywgZCk7XG4gIGIgPSBXKGIpO1xuICBmID0gWihlLCBmKTtcbiAgWShbXSwgW2FdLCBmdW5jdGlvbihsKSB7XG4gICAgZnVuY3Rpb24gdSgpIHtcbiAgICAgIG9kKGBDYW5ub3QgY2FsbCAke3Z9IGR1ZSB0byB1bmJvdW5kIHR5cGVzYCwgcCk7XG4gICAgfVxuICAgIGwgPSBsWzBdO1xuICAgIHZhciB2ID0gYCR7bC5uYW1lfS4ke2J9YDtcbiAgICBiLnN0YXJ0c1dpdGgoXCJAQFwiKSAmJiAoYiA9IFN5bWJvbFtiLnN1YnN0cmluZygyKV0pO1xuICAgIG4gJiYgbC5pLnFiLnB1c2goYik7XG4gICAgdmFyIHggPSBsLmkuTiwgayA9IHhbYl07XG4gICAgdm9pZCAwID09PSBrIHx8IHZvaWQgMCA9PT0gay5CICYmIGsuY2xhc3NOYW1lICE9PSBsLm5hbWUgJiYgay5lYSA9PT0gYyAtIDIgPyAodS5lYSA9IGMgLSAyLCB1LmNsYXNzTmFtZSA9IGwubmFtZSwgeFtiXSA9IHUpIDogKCRjKHgsIGIsIHYpLCB4W2JdLkJbYyAtIDJdID0gdSk7XG4gICAgWShbXSwgcCwgZnVuY3Rpb24odCkge1xuICAgICAgdCA9IHBkKHYsIHQsIGwsIGYsIGcpO1xuICAgICAgdm9pZCAwID09PSB4W2JdLkIgPyAodC5lYSA9IGMgLSAyLCB4W2JdID0gdCkgOiB4W2JdLkJbYyAtIDJdID0gdDtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcbiAgICByZXR1cm4gW107XG4gIH0pO1xufSwgX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19wcm9wZXJ0eTpmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmLCBnLCBuLCBwLCBsKSB7XG4gIGIgPSBXKGIpO1xuICBlID0gWihkLCBlKTtcbiAgWShbXSwgW2FdLCBmdW5jdGlvbih1KSB7XG4gICAgdSA9IHVbMF07XG4gICAgdmFyIHYgPSBgJHt1Lm5hbWV9LiR7Yn1gLCB4ID0ge2dldCgpIHtcbiAgICAgIG9kKGBDYW5ub3QgYWNjZXNzICR7dn0gZHVlIHRvIHVuYm91bmQgdHlwZXNgLCBbYywgZ10pO1xuICAgIH0sIGVudW1lcmFibGU6ITAsIGNvbmZpZ3VyYWJsZTohMH07XG4gICAgeC5zZXQgPSBwID8gKCkgPT4ge1xuICAgICAgb2QoYENhbm5vdCBhY2Nlc3MgJHt2fSBkdWUgdG8gdW5ib3VuZCB0eXBlc2AsIFtjLCBnXSk7XG4gICAgfSA6ICgpID0+IHtcbiAgICAgIFYodiArIFwiIGlzIGEgcmVhZC1vbmx5IHByb3BlcnR5XCIpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHUuaS5OLCBiLCB4KTtcbiAgICBZKFtdLCBwID8gW2MsIGddIDogW2NdLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIgdCA9IGtbMF0sIHIgPSB7Z2V0KCkge1xuICAgICAgICB2YXIgRCA9IHNkKHRoaXMsIHUsIHYgKyBcIiBnZXR0ZXJcIik7XG4gICAgICAgIHJldHVybiB0LmZyb21XaXJlVHlwZShlKGYsIEQpKTtcbiAgICAgIH0sIGVudW1lcmFibGU6ITB9O1xuICAgICAgaWYgKHApIHtcbiAgICAgICAgcCA9IFoobiwgcCk7XG4gICAgICAgIHZhciBBID0ga1sxXTtcbiAgICAgICAgci5zZXQgPSBmdW5jdGlvbihEKSB7XG4gICAgICAgICAgdmFyIHcgPSBzZCh0aGlzLCB1LCB2ICsgXCIgc2V0dGVyXCIpLCBNID0gW107XG4gICAgICAgICAgcChsLCB3LCBBLnRvV2lyZVR5cGUoTSwgRCkpO1xuICAgICAgICAgIFJjKE0pO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHUuaS5OLCBiLCByKTtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KTtcbiAgICByZXR1cm4gW107XG4gIH0pO1xufSwgX2VtYmluZF9yZWdpc3Rlcl9lbXZhbDpmdW5jdGlvbihhLCBiKSB7XG4gIGIgPSBXKGIpO1xuICBWYyhhLCB7bmFtZTpiLCBmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oYykge1xuICAgIHZhciBkID0gcmMoYyk7XG4gICAgdGQoYyk7XG4gICAgcmV0dXJuIGQ7XG4gIH0sIHRvV2lyZVR5cGU6ZnVuY3Rpb24oYywgZCkge1xuICAgIHJldHVybiBzYyhkKTtcbiAgfSwgYXJnUGFja0FkdmFuY2U6OCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6U2MsIEs6bnVsbCx9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfZW51bTpmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gIGZ1bmN0aW9uIGUoKSB7XG4gIH1cbiAgYyA9IFdjKGMpO1xuICBiID0gVyhiKTtcbiAgZS52YWx1ZXMgPSB7fTtcbiAgVmMoYSwge25hbWU6YiwgY29uc3RydWN0b3I6ZSwgZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKGYpIHtcbiAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci52YWx1ZXNbZl07XG4gIH0sIHRvV2lyZVR5cGU6ZnVuY3Rpb24oZiwgZykge1xuICAgIHJldHVybiBnLnZhbHVlO1xuICB9LCBhcmdQYWNrQWR2YW5jZTo4LCByZWFkVmFsdWVGcm9tUG9pbnRlcjp1ZChiLCBjLCBkKSwgSzpudWxsLH0pO1xuICBhZChiLCBlKTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfZW51bV92YWx1ZTpmdW5jdGlvbihhLCBiLCBjKSB7XG4gIHZhciBkID0gRmMoYSwgXCJlbnVtXCIpO1xuICBiID0gVyhiKTtcbiAgYSA9IGQuY29uc3RydWN0b3I7XG4gIGQgPSBPYmplY3QuY3JlYXRlKGQuY29uc3RydWN0b3IucHJvdG90eXBlLCB7dmFsdWU6e3ZhbHVlOmN9LCBjb25zdHJ1Y3Rvcjp7dmFsdWU6b2MoYCR7ZC5uYW1lfV8ke2J9YCwgZnVuY3Rpb24oKSB7XG4gIH0pfSx9KTtcbiAgYS52YWx1ZXNbY10gPSBkO1xuICBhW2JdID0gZDtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfZmxvYXQ6ZnVuY3Rpb24oYSwgYiwgYykge1xuICBjID0gV2MoYyk7XG4gIGIgPSBXKGIpO1xuICBWYyhhLCB7bmFtZTpiLCBmcm9tV2lyZVR5cGU6ZnVuY3Rpb24oZCkge1xuICAgIHJldHVybiBkO1xuICB9LCB0b1dpcmVUeXBlOmZ1bmN0aW9uKGQsIGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfSwgYXJnUGFja0FkdmFuY2U6OCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6dmQoYiwgYyksIEs6bnVsbCx9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfZnVuY3Rpb246ZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgZyA9IHJkKGIsIGMpO1xuICBhID0gVyhhKTtcbiAgZSA9IFooZCwgZSk7XG4gIGFkKGEsIGZ1bmN0aW9uKCkge1xuICAgIG9kKGBDYW5ub3QgY2FsbCAke2F9IGR1ZSB0byB1bmJvdW5kIHR5cGVzYCwgZyk7XG4gIH0sIGIgLSAxKTtcbiAgWShbXSwgZywgZnVuY3Rpb24obikge1xuICAgIGpkKGEsIHBkKGEsIFtuWzBdLCBudWxsXS5jb25jYXQobi5zbGljZSgxKSksIG51bGwsIGUsIGYpLCBiIC0gMSk7XG4gICAgcmV0dXJuIFtdO1xuICB9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfaW50ZWdlcjpmdW5jdGlvbihhLCBiLCBjLCBkLCBlKSB7XG4gIGIgPSBXKGIpO1xuICAtMSA9PT0gZSAmJiAoZSA9IDQyOTQ5NjcyOTUpO1xuICBlID0gV2MoYyk7XG4gIHZhciBmID0gbiA9PiBuO1xuICBpZiAoMCA9PT0gZCkge1xuICAgIHZhciBnID0gMzIgLSA4ICogYztcbiAgICBmID0gbiA9PiBuIDw8IGcgPj4+IGc7XG4gIH1cbiAgYyA9IGIuaW5jbHVkZXMoXCJ1bnNpZ25lZFwiKSA/IGZ1bmN0aW9uKG4sIHApIHtcbiAgICByZXR1cm4gcCA+Pj4gMDtcbiAgfSA6IGZ1bmN0aW9uKG4sIHApIHtcbiAgICByZXR1cm4gcDtcbiAgfTtcbiAgVmMoYSwge25hbWU6YiwgZnJvbVdpcmVUeXBlOmYsIHRvV2lyZVR5cGU6YywgYXJnUGFja0FkdmFuY2U6OCwgcmVhZFZhbHVlRnJvbVBvaW50ZXI6d2QoYiwgZSwgMCAhPT0gZCksIEs6bnVsbCx9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfbWVtb3J5X3ZpZXc6ZnVuY3Rpb24oYSwgYiwgYykge1xuICBmdW5jdGlvbiBkKGYpIHtcbiAgICBmID4+PSAyO1xuICAgIHZhciBnID0gTjtcbiAgICByZXR1cm4gbmV3IGUoZy5idWZmZXIsIGdbZiArIDFdLCBnW2ZdKTtcbiAgfVxuICB2YXIgZSA9IFtJbnQ4QXJyYXksIFVpbnQ4QXJyYXksIEludDE2QXJyYXksIFVpbnQxNkFycmF5LCBJbnQzMkFycmF5LCBVaW50MzJBcnJheSwgRmxvYXQzMkFycmF5LCBGbG9hdDY0QXJyYXksXVtiXTtcbiAgYyA9IFcoYyk7XG4gIFZjKGEsIHtuYW1lOmMsIGZyb21XaXJlVHlwZTpkLCBhcmdQYWNrQWR2YW5jZTo4LCByZWFkVmFsdWVGcm9tUG9pbnRlcjpkLH0sIHskYjohMCx9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZzpmdW5jdGlvbihhLCBiKSB7XG4gIGIgPSBXKGIpO1xuICB2YXIgYyA9IFwic3RkOjpzdHJpbmdcIiA9PT0gYjtcbiAgVmMoYSwge25hbWU6YiwgZnJvbVdpcmVUeXBlOmZ1bmN0aW9uKGQpIHtcbiAgICB2YXIgZSA9IE5bZCA+PiAyXSwgZiA9IGQgKyA0O1xuICAgIGlmIChjKSB7XG4gICAgICBmb3IgKHZhciBnID0gZiwgbiA9IDA7IG4gPD0gZTsgKytuKSB7XG4gICAgICAgIHZhciBwID0gZiArIG47XG4gICAgICAgIGlmIChuID09IGUgfHwgMCA9PSBFW3BdKSB7XG4gICAgICAgICAgZyA9IGcgPyBuYihFLCBnLCBwIC0gZykgOiBcIlwiO1xuICAgICAgICAgIGlmICh2b2lkIDAgPT09IGwpIHtcbiAgICAgICAgICAgIHZhciBsID0gZztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDApLCBsICs9IGc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGcgPSBwICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsID0gQXJyYXkoZSk7XG4gICAgICBmb3IgKG4gPSAwOyBuIDwgZTsgKytuKSB7XG4gICAgICAgIGxbbl0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKEVbZiArIG5dKTtcbiAgICAgIH1cbiAgICAgIGwgPSBsLmpvaW4oXCJcIik7XG4gICAgfVxuICAgIEVjKGQpO1xuICAgIHJldHVybiBsO1xuICB9LCB0b1dpcmVUeXBlOmZ1bmN0aW9uKGQsIGUpIHtcbiAgICBlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgJiYgKGUgPSBuZXcgVWludDhBcnJheShlKSk7XG4gICAgdmFyIGYgPSBcInN0cmluZ1wiID09IHR5cGVvZiBlO1xuICAgIGYgfHwgZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgZSBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5IHx8IGUgaW5zdGFuY2VvZiBJbnQ4QXJyYXkgfHwgVihcIkNhbm5vdCBwYXNzIG5vbi1zdHJpbmcgdG8gc3RkOjpzdHJpbmdcIik7XG4gICAgdmFyIGcgPSBjICYmIGYgPyBwYihlKSA6IGUubGVuZ3RoO1xuICAgIHZhciBuID0gVmQoNCArIGcgKyAxKSwgcCA9IG4gKyA0O1xuICAgIE5bbiA+PiAyXSA9IGc7XG4gICAgaWYgKGMgJiYgZikge1xuICAgICAgcWIoZSwgRSwgcCwgZyArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZikge1xuICAgICAgICBmb3IgKGYgPSAwOyBmIDwgZzsgKytmKSB7XG4gICAgICAgICAgdmFyIGwgPSBlLmNoYXJDb2RlQXQoZik7XG4gICAgICAgICAgMjU1IDwgbCAmJiAoRWMocCksIFYoXCJTdHJpbmcgaGFzIFVURi0xNiBjb2RlIHVuaXRzIHRoYXQgZG8gbm90IGZpdCBpbiA4IGJpdHNcIikpO1xuICAgICAgICAgIEVbcCArIGZdID0gbDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChmID0gMDsgZiA8IGc7ICsrZikge1xuICAgICAgICAgIEVbcCArIGZdID0gZVtmXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBudWxsICE9PSBkICYmIGQucHVzaChFYywgbik7XG4gICAgcmV0dXJuIG47XG4gIH0sIGFyZ1BhY2tBZHZhbmNlOjgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOlNjLCBLOmZ1bmN0aW9uKGQpIHtcbiAgICBFYyhkKTtcbiAgfSx9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmc6ZnVuY3Rpb24oYSwgYiwgYykge1xuICBjID0gVyhjKTtcbiAgaWYgKDIgPT09IGIpIHtcbiAgICB2YXIgZCA9IHlkO1xuICAgIHZhciBlID0gemQ7XG4gICAgdmFyIGYgPSBBZDtcbiAgICB2YXIgZyA9ICgpID0+IEVhO1xuICAgIHZhciBuID0gMTtcbiAgfSBlbHNlIHtcbiAgICA0ID09PSBiICYmIChkID0gQmQsIGUgPSBDZCwgZiA9IERkLCBnID0gKCkgPT4gTiwgbiA9IDIpO1xuICB9XG4gIFZjKGEsIHtuYW1lOmMsIGZyb21XaXJlVHlwZTpmdW5jdGlvbihwKSB7XG4gICAgZm9yICh2YXIgbCA9IE5bcCA+PiAyXSwgdSA9IGcoKSwgdiwgeCA9IHAgKyA0LCBrID0gMDsgayA8PSBsOyArK2spIHtcbiAgICAgIHZhciB0ID0gcCArIDQgKyBrICogYjtcbiAgICAgIGlmIChrID09IGwgfHwgMCA9PSB1W3QgPj4gbl0pIHtcbiAgICAgICAgeCA9IGQoeCwgdCAtIHgpLCB2b2lkIDAgPT09IHYgPyB2ID0geCA6ICh2ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCksIHYgKz0geCksIHggPSB0ICsgYjtcbiAgICAgIH1cbiAgICB9XG4gICAgRWMocCk7XG4gICAgcmV0dXJuIHY7XG4gIH0sIHRvV2lyZVR5cGU6ZnVuY3Rpb24ocCwgbCkge1xuICAgIFwic3RyaW5nXCIgIT0gdHlwZW9mIGwgJiYgVihgQ2Fubm90IHBhc3Mgbm9uLXN0cmluZyB0byBDKysgc3RyaW5nIHR5cGUgJHtjfWApO1xuICAgIHZhciB1ID0gZihsKSwgdiA9IFZkKDQgKyB1ICsgYik7XG4gICAgTlt2ID4+IDJdID0gdSA+PiBuO1xuICAgIGUobCwgdiArIDQsIHUgKyBiKTtcbiAgICBudWxsICE9PSBwICYmIHAucHVzaChFYywgdik7XG4gICAgcmV0dXJuIHY7XG4gIH0sIGFyZ1BhY2tBZHZhbmNlOjgsIHJlYWRWYWx1ZUZyb21Qb2ludGVyOlNjLCBLOmZ1bmN0aW9uKHApIHtcbiAgICBFYyhwKTtcbiAgfSx9KTtcbn0sIF9lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0OmZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgUWNbYV0gPSB7bmFtZTpXKGIpLCBQYTpaKGMsIGQpLCBXOlooZSwgZiksIGViOltdLH07XG59LCBfZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdF9maWVsZDpmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmLCBnLCBuLCBwLCBsKSB7XG4gIFFjW2FdLmViLnB1c2goe1NiOlcoYiksIFliOmMsIFdiOlooZCwgZSksIFhiOmYsIHJjOmcsIHFjOloobiwgcCksIHNjOmwsfSk7XG59LCBfZW1iaW5kX3JlZ2lzdGVyX3ZvaWQ6ZnVuY3Rpb24oYSwgYikge1xuICBiID0gVyhiKTtcbiAgVmMoYSwge2ZjOiEwLCBuYW1lOmIsIGFyZ1BhY2tBZHZhbmNlOjAsIGZyb21XaXJlVHlwZTpmdW5jdGlvbigpIHtcbiAgfSwgdG9XaXJlVHlwZTpmdW5jdGlvbigpIHtcbiAgfSx9KTtcbn0sIF9lbXNjcmlwdGVuX2dldF9ub3dfaXNfbW9ub3RvbmljOigpID0+ICEwLCBfZW12YWxfYXM6ZnVuY3Rpb24oYSwgYiwgYykge1xuICBhID0gcmMoYSk7XG4gIGIgPSBGYyhiLCBcImVtdmFsOjphc1wiKTtcbiAgdmFyIGQgPSBbXSwgZSA9IHNjKGQpO1xuICBOW2MgPj4gMl0gPSBlO1xuICByZXR1cm4gYi50b1dpcmVUeXBlKGQsIGEpO1xufSwgX2VtdmFsX2NhbGxfbWV0aG9kOmZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUpIHtcbiAgYSA9IEdkW2FdO1xuICBiID0gcmMoYik7XG4gIGMgPSBGZChjKTtcbiAgdmFyIGYgPSBbXTtcbiAgTltkID4+IDJdID0gc2MoZik7XG4gIHJldHVybiBhKGIsIGMsIGYsIGUpO1xufSwgX2VtdmFsX2NhbGxfdm9pZF9tZXRob2Q6ZnVuY3Rpb24oYSwgYiwgYywgZCkge1xuICBhID0gR2RbYV07XG4gIGIgPSByYyhiKTtcbiAgYyA9IEZkKGMpO1xuICBhKGIsIGMsIG51bGwsIGQpO1xufSwgX2VtdmFsX2RlY3JlZjp0ZCwgX2VtdmFsX2dldF9tZXRob2RfY2FsbGVyOmZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGMgPSBJZChhLCBiKSwgZCA9IGNbMF07XG4gIGIgPSBkLm5hbWUgKyBcIl8kXCIgKyBjLnNsaWNlKDEpLm1hcChmdW5jdGlvbihnKSB7XG4gICAgcmV0dXJuIGcubmFtZTtcbiAgfSkuam9pbihcIl9cIikgKyBcIiRcIjtcbiAgdmFyIGUgPSBKZFtiXTtcbiAgaWYgKHZvaWQgMCAhPT0gZSkge1xuICAgIHJldHVybiBlO1xuICB9XG4gIHZhciBmID0gQXJyYXkoYSAtIDEpO1xuICBlID0gSGQoKGcsIG4sIHAsIGwpID0+IHtcbiAgICBmb3IgKHZhciB1ID0gMCwgdiA9IDA7IHYgPCBhIC0gMTsgKyt2KSB7XG4gICAgICBmW3ZdID0gY1t2ICsgMV0ucmVhZFZhbHVlRnJvbVBvaW50ZXIobCArIHUpLCB1ICs9IGNbdiArIDFdLmFyZ1BhY2tBZHZhbmNlO1xuICAgIH1cbiAgICBnID0gZ1tuXS5hcHBseShnLCBmKTtcbiAgICBmb3IgKHYgPSAwOyB2IDwgYSAtIDE7ICsrdikge1xuICAgICAgY1t2ICsgMV0uTmIgJiYgY1t2ICsgMV0uTmIoZlt2XSk7XG4gICAgfVxuICAgIGlmICghZC5mYykge1xuICAgICAgcmV0dXJuIGQudG9XaXJlVHlwZShwLCBnKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gSmRbYl0gPSBlO1xufSwgX2VtdmFsX2dldF9tb2R1bGVfcHJvcGVydHk6ZnVuY3Rpb24oYSkge1xuICBhID0gRmQoYSk7XG4gIHJldHVybiBzYyhtW2FdKTtcbn0sIF9lbXZhbF9nZXRfcHJvcGVydHk6ZnVuY3Rpb24oYSwgYikge1xuICBhID0gcmMoYSk7XG4gIGIgPSByYyhiKTtcbiAgcmV0dXJuIHNjKGFbYl0pO1xufSwgX2VtdmFsX2luY3JlZjpmdW5jdGlvbihhKSB7XG4gIDQgPCBhICYmIChVLmdldChhKS50YiArPSAxKTtcbn0sIF9lbXZhbF9uZXdfY3N0cmluZzpmdW5jdGlvbihhKSB7XG4gIHJldHVybiBzYyhGZChhKSk7XG59LCBfZW12YWxfbmV3X29iamVjdDpmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHNjKHt9KTtcbn0sIF9lbXZhbF9ydW5fZGVzdHJ1Y3RvcnM6ZnVuY3Rpb24oYSkge1xuICB2YXIgYiA9IHJjKGEpO1xuICBSYyhiKTtcbiAgdGQoYSk7XG59LCBfZW12YWxfc2V0X3Byb3BlcnR5OmZ1bmN0aW9uKGEsIGIsIGMpIHtcbiAgYSA9IHJjKGEpO1xuICBiID0gcmMoYik7XG4gIGMgPSByYyhjKTtcbiAgYVtiXSA9IGM7XG59LCBfZW12YWxfdGFrZV92YWx1ZTpmdW5jdGlvbihhLCBiKSB7XG4gIGEgPSBGYyhhLCBcIl9lbXZhbF90YWtlX3ZhbHVlXCIpO1xuICBhID0gYS5yZWFkVmFsdWVGcm9tUG9pbnRlcihiKTtcbiAgcmV0dXJuIHNjKGEpO1xufSwgYWJvcnQ6KCkgPT4ge1xuICBBYShcIlwiKTtcbn0sIGVtc2NyaXB0ZW5fYXNtX2NvbnN0X2ludDooYSwgYiwgYykgPT4ge1xuICBLZC5sZW5ndGggPSAwO1xuICB2YXIgZDtcbiAgZm9yIChjID4+PSAyOyBkID0gRVtiKytdOykge1xuICAgIGMgKz0gMTA1ICE9IGQgJiBjLCBLZC5wdXNoKDEwNSA9PSBkID8gTFtjXSA6IElhW2MrKyA+PiAxXSksICsrYztcbiAgfVxuICByZXR1cm4gZGJbYV0uYXBwbHkobnVsbCwgS2QpO1xufSwgZW1zY3JpcHRlbl9kYXRlX25vdzpmdW5jdGlvbigpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59LCBlbXNjcmlwdGVuX2dldF9ub3c6KCkgPT4gcGVyZm9ybWFuY2Uubm93KCksIGVtc2NyaXB0ZW5fbWVtY3B5X2JpZzooYSwgYiwgYykgPT4gRS5jb3B5V2l0aGluKGEsIGIsIGIgKyBjKSwgZW1zY3JpcHRlbl9yZXNpemVfaGVhcDphID0+IHtcbiAgdmFyIGIgPSBFLmxlbmd0aDtcbiAgYSA+Pj49IDA7XG4gIGlmICgyMTQ3NDgzNjQ4IDwgYSkge1xuICAgIHJldHVybiAhMTtcbiAgfVxuICBmb3IgKHZhciBjID0gMTsgNCA+PSBjOyBjICo9IDIpIHtcbiAgICB2YXIgZCA9IGIgKiAoMSArIDAuMiAvIGMpO1xuICAgIGQgPSBNYXRoLm1pbihkLCBhICsgMTAwNjYzMjk2KTtcbiAgICB2YXIgZSA9IE1hdGg7XG4gICAgZCA9IE1hdGgubWF4KGEsIGQpO1xuICAgIGE6IHtcbiAgICAgIGUgPSBlLm1pbi5jYWxsKGUsIDIxNDc0ODM2NDgsIGQgKyAoNjU1MzYgLSBkICUgNjU1MzYpICUgNjU1MzYpIC0gQmEuYnVmZmVyLmJ5dGVMZW5ndGggKyA2NTUzNSA+Pj4gMTY7XG4gICAgICB0cnkge1xuICAgICAgICBCYS5ncm93KGUpO1xuICAgICAgICBKYSgpO1xuICAgICAgICB2YXIgZiA9IDE7XG4gICAgICAgIGJyZWFrIGE7XG4gICAgICB9IGNhdGNoIChnKSB7XG4gICAgICB9XG4gICAgICBmID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoZikge1xuICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgfVxuICByZXR1cm4gITE7XG59LCBlbnZpcm9uX2dldDooYSwgYikgPT4ge1xuICB2YXIgYyA9IDA7XG4gIE5kKCkuZm9yRWFjaChmdW5jdGlvbihkLCBlKSB7XG4gICAgdmFyIGYgPSBiICsgYztcbiAgICBlID0gTlthICsgNCAqIGUgPj4gMl0gPSBmO1xuICAgIGZvciAoZiA9IDA7IGYgPCBkLmxlbmd0aDsgKytmKSB7XG4gICAgICBCW2UrKyA+PiAwXSA9IGQuY2hhckNvZGVBdChmKTtcbiAgICB9XG4gICAgQltlID4+IDBdID0gMDtcbiAgICBjICs9IGQubGVuZ3RoICsgMTtcbiAgfSk7XG4gIHJldHVybiAwO1xufSwgZW52aXJvbl9zaXplc19nZXQ6KGEsIGIpID0+IHtcbiAgdmFyIGMgPSBOZCgpO1xuICBOW2EgPj4gMl0gPSBjLmxlbmd0aDtcbiAgdmFyIGQgPSAwO1xuICBjLmZvckVhY2goZnVuY3Rpb24oZSkge1xuICAgIGQgKz0gZS5sZW5ndGggKyAxO1xuICB9KTtcbiAgTltiID4+IDJdID0gZDtcbiAgcmV0dXJuIDA7XG59LCBmZF9jbG9zZTpmdW5jdGlvbihhKSB7XG4gIHRyeSB7XG4gICAgdmFyIGIgPSBUYihhKTtcbiAgICBpZiAobnVsbCA9PT0gYi5YKSB7XG4gICAgICB0aHJvdyBuZXcgTyg4KTtcbiAgICB9XG4gICAgYi5NYSAmJiAoYi5NYSA9IG51bGwpO1xuICAgIHRyeSB7XG4gICAgICBiLm0uY2xvc2UgJiYgYi5tLmNsb3NlKGIpO1xuICAgIH0gY2F0Y2ggKGMpIHtcbiAgICAgIHRocm93IGM7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIEdiW2IuWF0gPSBudWxsO1xuICAgIH1cbiAgICBiLlggPSBudWxsO1xuICAgIHJldHVybiAwO1xuICB9IGNhdGNoIChjKSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGtjIHx8IFwiRXJybm9FcnJvclwiICE9PSBjLm5hbWUpIHtcbiAgICAgIHRocm93IGM7XG4gICAgfVxuICAgIHJldHVybiBjLmFhO1xuICB9XG59LCBmZF9yZWFkOmZ1bmN0aW9uKGEsIGIsIGMsIGQpIHtcbiAgdHJ5IHtcbiAgICBhOiB7XG4gICAgICB2YXIgZSA9IFRiKGEpO1xuICAgICAgYSA9IGI7XG4gICAgICBmb3IgKHZhciBmLCBnID0gYiA9IDA7IGcgPCBjOyBnKyspIHtcbiAgICAgICAgdmFyIG4gPSBOW2EgPj4gMl0sIHAgPSBOW2EgKyA0ID4+IDJdO1xuICAgICAgICBhICs9IDg7XG4gICAgICAgIHZhciBsID0gZSwgdSA9IG4sIHYgPSBwLCB4ID0gZiwgayA9IEI7XG4gICAgICAgIGlmICgwID4gdiB8fCAwID4geCkge1xuICAgICAgICAgIHRocm93IG5ldyBPKDI4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobnVsbCA9PT0gbC5YKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE8oOCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDEgPT09IChsLmZsYWdzICYgMjA5NzE1NSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTyg4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoMTYzODQgPT09IChsLm5vZGUubW9kZSAmIDYxNDQwKSkge1xuICAgICAgICAgIHRocm93IG5ldyBPKDMxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWwubS5yZWFkKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE8oMjgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgeDtcbiAgICAgICAgaWYgKCF0KSB7XG4gICAgICAgICAgeCA9IGwucG9zaXRpb247XG4gICAgICAgIH0gZWxzZSBpZiAoIWwuc2Vla2FibGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTyg3MCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHIgPSBsLm0ucmVhZChsLCBrLCB1LCB2LCB4KTtcbiAgICAgICAgdCB8fCAobC5wb3NpdGlvbiArPSByKTtcbiAgICAgICAgdmFyIEEgPSByO1xuICAgICAgICBpZiAoMCA+IEEpIHtcbiAgICAgICAgICB2YXIgRCA9IC0xO1xuICAgICAgICAgIGJyZWFrIGE7XG4gICAgICAgIH1cbiAgICAgICAgYiArPSBBO1xuICAgICAgICBpZiAoQSA8IHApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgZiAmJiAoZiArPSBBKTtcbiAgICAgIH1cbiAgICAgIEQgPSBiO1xuICAgIH1cbiAgICBOW2QgPj4gMl0gPSBEO1xuICAgIHJldHVybiAwO1xuICB9IGNhdGNoICh3KSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGtjIHx8IFwiRXJybm9FcnJvclwiICE9PSB3Lm5hbWUpIHtcbiAgICAgIHRocm93IHc7XG4gICAgfVxuICAgIHJldHVybiB3LmFhO1xuICB9XG59LCBmZF9zZWVrOmZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUpIHtcbiAgYiA9IGMgKyAyMDk3MTUyID4+PiAwIDwgNDE5NDMwNSAtICEhYiA/IChiID4+PiAwKSArIDQyOTQ5NjcyOTYgKiBjIDogTmFOO1xuICB0cnkge1xuICAgIGlmIChpc05hTihiKSkge1xuICAgICAgcmV0dXJuIDYxO1xuICAgIH1cbiAgICB2YXIgZiA9IFRiKGEpO1xuICAgIGZjKGYsIGIsIGQpO1xuICAgICRhID0gW2YucG9zaXRpb24gPj4+IDAsIChaYSA9IGYucG9zaXRpb24sIDEuMCA8PSArTWF0aC5hYnMoWmEpID8gMC4wIDwgWmEgPyArTWF0aC5mbG9vcihaYSAvIDQyOTQ5NjcyOTYuMCkgPj4+IDAgOiB+fitNYXRoLmNlaWwoKFphIC0gKyh+flphID4+PiAwKSkgLyA0Mjk0OTY3Mjk2LjApID4+PiAwIDogMCldO1xuICAgIExbZSA+PiAyXSA9ICRhWzBdO1xuICAgIExbZSArIDQgPj4gMl0gPSAkYVsxXTtcbiAgICBmLk1hICYmIDAgPT09IGIgJiYgMCA9PT0gZCAmJiAoZi5NYSA9IG51bGwpO1xuICAgIHJldHVybiAwO1xuICB9IGNhdGNoIChnKSB7XG4gICAgaWYgKFwidW5kZWZpbmVkXCIgPT0gdHlwZW9mIGtjIHx8IFwiRXJybm9FcnJvclwiICE9PSBnLm5hbWUpIHtcbiAgICAgIHRocm93IGc7XG4gICAgfVxuICAgIHJldHVybiBnLmFhO1xuICB9XG59LCBmZF93cml0ZTpmdW5jdGlvbihhLCBiLCBjLCBkKSB7XG4gIHRyeSB7XG4gICAgYToge1xuICAgICAgdmFyIGUgPSBUYihhKTtcbiAgICAgIGEgPSBiO1xuICAgICAgZm9yICh2YXIgZiwgZyA9IGIgPSAwOyBnIDwgYzsgZysrKSB7XG4gICAgICAgIHZhciBuID0gTlthID4+IDJdLCBwID0gTlthICsgNCA+PiAyXTtcbiAgICAgICAgYSArPSA4O1xuICAgICAgICB2YXIgbCA9IGUsIHUgPSBuLCB2ID0gcCwgeCA9IGYsIGsgPSBCO1xuICAgICAgICBpZiAoMCA+IHYgfHwgMCA+IHgpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTygyOCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG51bGwgPT09IGwuWCkge1xuICAgICAgICAgIHRocm93IG5ldyBPKDgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgwID09PSAobC5mbGFncyAmIDIwOTcxNTUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IE8oOCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKDE2Mzg0ID09PSAobC5ub2RlLm1vZGUgJiA2MTQ0MCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTygzMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFsLm0ud3JpdGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgTygyOCk7XG4gICAgICAgIH1cbiAgICAgICAgbC5zZWVrYWJsZSAmJiBsLmZsYWdzICYgMTAyNCAmJiBmYyhsLCAwLCAyKTtcbiAgICAgICAgdmFyIHQgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiB4O1xuICAgICAgICBpZiAoIXQpIHtcbiAgICAgICAgICB4ID0gbC5wb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmICghbC5zZWVrYWJsZSkge1xuICAgICAgICAgIHRocm93IG5ldyBPKDcwKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgciA9IGwubS53cml0ZShsLCBrLCB1LCB2LCB4LCB2b2lkIDApO1xuICAgICAgICB0IHx8IChsLnBvc2l0aW9uICs9IHIpO1xuICAgICAgICB2YXIgQSA9IHI7XG4gICAgICAgIGlmICgwID4gQSkge1xuICAgICAgICAgIHZhciBEID0gLTE7XG4gICAgICAgICAgYnJlYWsgYTtcbiAgICAgICAgfVxuICAgICAgICBiICs9IEE7XG4gICAgICAgIFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBmICYmIChmICs9IEEpO1xuICAgICAgfVxuICAgICAgRCA9IGI7XG4gICAgfVxuICAgIE5bZCA+PiAyXSA9IEQ7XG4gICAgcmV0dXJuIDA7XG4gIH0gY2F0Y2ggKHcpIHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PSB0eXBlb2Yga2MgfHwgXCJFcnJub0Vycm9yXCIgIT09IHcubmFtZSkge1xuICAgICAgdGhyb3cgdztcbiAgICB9XG4gICAgcmV0dXJuIHcuYWE7XG4gIH1cbn0sIHN0cmZ0aW1lX2w6KGEsIGIsIGMsIGQpID0+IFJkKGEsIGIsIGMsIGQpfTtcbihmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gYShjKSB7XG4gICAgeSA9IGMgPSBjLmV4cG9ydHM7XG4gICAgQmEgPSB5Lm1lbW9yeTtcbiAgICBKYSgpO1xuICAgIEthID0geS5fX2luZGlyZWN0X2Z1bmN0aW9uX3RhYmxlO1xuICAgIE1hLnVuc2hpZnQoeS5fX3dhc21fY2FsbF9jdG9ycyk7XG4gICAgUGEtLTtcbiAgICBtLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgbS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFBhKTtcbiAgICBpZiAoMCA9PSBQYSAmJiAobnVsbCAhPT0gUWEgJiYgKGNsZWFySW50ZXJ2YWwoUWEpLCBRYSA9IG51bGwpLCBSYSkpIHtcbiAgICAgIHZhciBkID0gUmE7XG4gICAgICBSYSA9IG51bGw7XG4gICAgICBkKCk7XG4gICAgfVxuICAgIHJldHVybiBjO1xuICB9XG4gIHZhciBiID0ge2VudjpXZCwgd2FzaV9zbmFwc2hvdF9wcmV2aWV3MTpXZCx9O1xuICBQYSsrO1xuICBtLm1vbml0b3JSdW5EZXBlbmRlbmNpZXMgJiYgbS5tb25pdG9yUnVuRGVwZW5kZW5jaWVzKFBhKTtcbiAgaWYgKG0uaW5zdGFudGlhdGVXYXNtKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmluc3RhbnRpYXRlV2FzbShiLCBhKTtcbiAgICB9IGNhdGNoIChjKSB7XG4gICAgICB4YShcIk1vZHVsZS5pbnN0YW50aWF0ZVdhc20gY2FsbGJhY2sgZmFpbGVkIHdpdGggZXJyb3I6IFwiICsgYyksIGVhKGMpO1xuICAgIH1cbiAgfVxuICBZYShiLCBmdW5jdGlvbihjKSB7XG4gICAgYShjLmluc3RhbmNlKTtcbiAgfSkuY2F0Y2goZWEpO1xuICByZXR1cm4ge307XG59KSgpO1xudmFyIEVjID0gYSA9PiAoRWMgPSB5LmZyZWUpKGEpLCBWZCA9IGEgPT4gKFZkID0geS5tYWxsb2MpKGEpLCBhYiA9IG0uX21hX2RldmljZV9fb25fbm90aWZpY2F0aW9uX3VubG9ja2VkID0gYSA9PiAoYWIgPSBtLl9tYV9kZXZpY2VfX29uX25vdGlmaWNhdGlvbl91bmxvY2tlZCA9IHkubWFfZGV2aWNlX19vbl9ub3RpZmljYXRpb25fdW5sb2NrZWQpKGEpO1xubS5fbWFfbWFsbG9jX2Vtc2NyaXB0ZW4gPSAoYSwgYikgPT4gKG0uX21hX21hbGxvY19lbXNjcmlwdGVuID0geS5tYV9tYWxsb2NfZW1zY3JpcHRlbikoYSwgYik7XG5tLl9tYV9mcmVlX2Vtc2NyaXB0ZW4gPSAoYSwgYikgPT4gKG0uX21hX2ZyZWVfZW1zY3JpcHRlbiA9IHkubWFfZnJlZV9lbXNjcmlwdGVuKShhLCBiKTtcbnZhciBiYiA9IG0uX21hX2RldmljZV9wcm9jZXNzX3BjbV9mcmFtZXNfY2FwdHVyZV9fd2ViYXVkaW8gPSAoYSwgYiwgYykgPT4gKGJiID0gbS5fbWFfZGV2aWNlX3Byb2Nlc3NfcGNtX2ZyYW1lc19jYXB0dXJlX193ZWJhdWRpbyA9IHkubWFfZGV2aWNlX3Byb2Nlc3NfcGNtX2ZyYW1lc19jYXB0dXJlX193ZWJhdWRpbykoYSwgYiwgYyksIGNiID0gbS5fbWFfZGV2aWNlX3Byb2Nlc3NfcGNtX2ZyYW1lc19wbGF5YmFja19fd2ViYXVkaW8gPSAoYSwgYiwgYykgPT4gKGNiID0gbS5fbWFfZGV2aWNlX3Byb2Nlc3NfcGNtX2ZyYW1lc19wbGF5YmFja19fd2ViYXVkaW8gPSB5Lm1hX2RldmljZV9wcm9jZXNzX3BjbV9mcmFtZXNfcGxheWJhY2tfX3dlYmF1ZGlvKShhLCBiLCBjKSwgVWQgPSAoKSA9PiAoVWQgPSB5Ll9fZXJybm9fbG9jYXRpb24pKCksIERjID0gYSA9PiAoRGMgPSB5Ll9fZ2V0VHlwZU5hbWUpKGEpO1xubS5fX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzID0gKCkgPT4gKG0uX19lbWJpbmRfaW5pdGlhbGl6ZV9iaW5kaW5ncyA9IHkuX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzKSgpO1xubS5keW5DYWxsX2lpamkgPSAoYSwgYiwgYywgZCwgZSkgPT4gKG0uZHluQ2FsbF9paWppID0geS5keW5DYWxsX2lpamkpKGEsIGIsIGMsIGQsIGUpO1xubS5keW5DYWxsX2ppamkgPSAoYSwgYiwgYywgZCwgZSkgPT4gKG0uZHluQ2FsbF9qaWppID0geS5keW5DYWxsX2ppamkpKGEsIGIsIGMsIGQsIGUpO1xubS5keW5DYWxsX2lpaWppID0gKGEsIGIsIGMsIGQsIGUsIGYpID0+IChtLmR5bkNhbGxfaWlpamkgPSB5LmR5bkNhbGxfaWlpamkpKGEsIGIsIGMsIGQsIGUsIGYpO1xubS5keW5DYWxsX2lpaiA9IChhLCBiLCBjLCBkKSA9PiAobS5keW5DYWxsX2lpaiA9IHkuZHluQ2FsbF9paWopKGEsIGIsIGMsIGQpO1xubS5keW5DYWxsX2ppaSA9IChhLCBiLCBjKSA9PiAobS5keW5DYWxsX2ppaSA9IHkuZHluQ2FsbF9qaWkpKGEsIGIsIGMpO1xubS5keW5DYWxsX3ZpaWppaSA9IChhLCBiLCBjLCBkLCBlLCBmLCBnKSA9PiAobS5keW5DYWxsX3ZpaWppaSA9IHkuZHluQ2FsbF92aWlqaWkpKGEsIGIsIGMsIGQsIGUsIGYsIGcpO1xubS5keW5DYWxsX2lpaWlpaiA9IChhLCBiLCBjLCBkLCBlLCBmLCBnKSA9PiAobS5keW5DYWxsX2lpaWlpaiA9IHkuZHluQ2FsbF9paWlpaWopKGEsIGIsIGMsIGQsIGUsIGYsIGcpO1xubS5keW5DYWxsX2lpaWlpamogPSAoYSwgYiwgYywgZCwgZSwgZiwgZywgbiwgcCkgPT4gKG0uZHluQ2FsbF9paWlpaWpqID0geS5keW5DYWxsX2lpaWlpamopKGEsIGIsIGMsIGQsIGUsIGYsIGcsIG4sIHApO1xubS5keW5DYWxsX2lpaWlpaWpqID0gKGEsIGIsIGMsIGQsIGUsIGYsIGcsIG4sIHAsIGwpID0+IChtLmR5bkNhbGxfaWlpaWlpamogPSB5LmR5bkNhbGxfaWlpaWlpamopKGEsIGIsIGMsIGQsIGUsIGYsIGcsIG4sIHAsIGwpO1xudmFyIFhkO1xuUmEgPSBmdW5jdGlvbiBZZCgpIHtcbiAgWGQgfHwgWmQoKTtcbiAgWGQgfHwgKFJhID0gWWQpO1xufTtcbmZ1bmN0aW9uIFpkKCkge1xuICBmdW5jdGlvbiBhKCkge1xuICAgIGlmICghWGQgJiYgKFhkID0gITAsIG0uY2FsbGVkUnVuID0gITAsICFDYSkpIHtcbiAgICAgIG0ubm9GU0luaXQgfHwgaGMgfHwgKGhjID0gITAsIGdjKCksIG0uc3RkaW4gPSBtLnN0ZGluLCBtLnN0ZG91dCA9IG0uc3Rkb3V0LCBtLnN0ZGVyciA9IG0uc3RkZXJyLCBtLnN0ZGluID8gamMoXCJzdGRpblwiLCBtLnN0ZGluKSA6IGNjKFwiL2Rldi90dHlcIiwgXCIvZGV2L3N0ZGluXCIpLCBtLnN0ZG91dCA/IGpjKFwic3Rkb3V0XCIsIG51bGwsIG0uc3Rkb3V0KSA6IGNjKFwiL2Rldi90dHlcIiwgXCIvZGV2L3N0ZG91dFwiKSwgbS5zdGRlcnIgPyBqYyhcInN0ZGVyclwiLCBudWxsLCBtLnN0ZGVycikgOiBjYyhcIi9kZXYvdHR5MVwiLCBcIi9kZXYvc3RkZXJyXCIpLCBlYyhcIi9kZXYvc3RkaW5cIiwgMCksIGVjKFwiL2Rldi9zdGRvdXRcIiwgMSksIGVjKFwiL2Rldi9zdGRlcnJcIiwgMSkpO1xuICAgICAgSmIgPSAhMTtcbiAgICAgIGViKE1hKTtcbiAgICAgIGFhKG0pO1xuICAgICAgaWYgKG0ub25SdW50aW1lSW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgbS5vblJ1bnRpbWVJbml0aWFsaXplZCgpO1xuICAgICAgfVxuICAgICAgaWYgKG0ucG9zdFJ1bikge1xuICAgICAgICBmb3IgKFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgbS5wb3N0UnVuICYmIChtLnBvc3RSdW4gPSBbbS5wb3N0UnVuXSk7IG0ucG9zdFJ1bi5sZW5ndGg7KSB7XG4gICAgICAgICAgdmFyIGIgPSBtLnBvc3RSdW4uc2hpZnQoKTtcbiAgICAgICAgICBOYS51bnNoaWZ0KGIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlYihOYSk7XG4gICAgfVxuICB9XG4gIGlmICghKDAgPCBQYSkpIHtcbiAgICBpZiAobS5wcmVSdW4pIHtcbiAgICAgIGZvciAoXCJmdW5jdGlvblwiID09IHR5cGVvZiBtLnByZVJ1biAmJiAobS5wcmVSdW4gPSBbbS5wcmVSdW5dKTsgbS5wcmVSdW4ubGVuZ3RoOykge1xuICAgICAgICBPYSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBlYihMYSk7XG4gICAgMCA8IFBhIHx8IChtLnNldFN0YXR1cyA/IChtLnNldFN0YXR1cyhcIlJ1bm5pbmcuLi5cIiksIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBtLnNldFN0YXR1cyhcIlwiKTtcbiAgICAgIH0sIDEpO1xuICAgICAgYSgpO1xuICAgIH0sIDEpKSA6IGEoKSk7XG4gIH1cbn1cbmlmIChtLnByZUluaXQpIHtcbiAgZm9yIChcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIG0ucHJlSW5pdCAmJiAobS5wcmVJbml0ID0gW20ucHJlSW5pdF0pOyAwIDwgbS5wcmVJbml0Lmxlbmd0aDspIHtcbiAgICBtLnByZUluaXQucG9wKCkoKTtcbiAgfVxufVxuWmQoKTtcblxuXG5cbiAgcmV0dXJuIG1vZHVsZUFyZy5yZWFkeVxufVxuXG4pO1xufSkoKTtcbi8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAoUml2ZSk7XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKChtb2R1bGUpID0+IHtcblxubW9kdWxlLmV4cG9ydHMgPSBKU09OLnBhcnNlKCd7XCJuYW1lXCI6XCJAcml2ZS1hcHAvY2FudmFzXCIsXCJ2ZXJzaW9uXCI6XCIyLjIxLjVcIixcImRlc2NyaXB0aW9uXCI6XCJSaXZlXFwncyBjYW52YXMgYmFzZWQgd2ViIGFwaS5cIixcIm1haW5cIjpcInJpdmUuanNcIixcImhvbWVwYWdlXCI6XCJodHRwczovL3JpdmUuYXBwXCIsXCJyZXBvc2l0b3J5XCI6e1widHlwZVwiOlwiZ2l0XCIsXCJ1cmxcIjpcImh0dHBzOi8vZ2l0aHViLmNvbS9yaXZlLWFwcC9yaXZlLXdhc20vdHJlZS9tYXN0ZXIvanNcIn0sXCJrZXl3b3Jkc1wiOltcInJpdmVcIixcImFuaW1hdGlvblwiXSxcImF1dGhvclwiOlwiUml2ZVwiLFwiY29udHJpYnV0b3JzXCI6W1wiTHVpZ2kgUm9zc28gPGx1aWdpQHJpdmUuYXBwPiAoaHR0cHM6Ly9yaXZlLmFwcClcIixcIk1heHdlbGwgVGFsYm90IDxtYXhAcml2ZS5hcHA+IChodHRwczovL3JpdmUuYXBwKVwiLFwiQXJ0aHVyIFZpdmlhbiA8YXJ0aHVyQHJpdmUuYXBwPiAoaHR0cHM6Ly9yaXZlLmFwcClcIixcIlVtYmVydG8gU29ubmlubyA8dW1iZXJ0b0ByaXZlLmFwcD4gKGh0dHBzOi8vcml2ZS5hcHApXCIsXCJNYXR0aGV3IFN1bGxpdmFuIDxtYXR0Lmouc3VsbGl2YW5AZ21haWwuY29tPiAobWFpbHRvOm1hdHQuai5zdWxsaXZhbkBnbWFpbC5jb20pXCJdLFwibGljZW5zZVwiOlwiTUlUXCIsXCJmaWxlc1wiOltcInJpdmUuanNcIixcInJpdmUuanMubWFwXCIsXCJyaXZlLndhc21cIixcInJpdmVfZmFsbGJhY2sud2FzbVwiLFwicml2ZS5kLnRzXCIsXCJyaXZlX2FkdmFuY2VkLm1qcy5kLnRzXCJdLFwidHlwaW5nc1wiOlwicml2ZS5kLnRzXCIsXCJkZXBlbmRlbmNpZXNcIjp7fSxcImJyb3dzZXJcIjp7XCJmc1wiOmZhbHNlLFwicGF0aFwiOmZhbHNlfX0nKTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEFuaW1hdGlvbjogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX0FuaW1hdGlvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLkFuaW1hdGlvbilcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9BbmltYXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cblxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQW5pbWF0aW9uOiAoKSA9PiAoLyogYmluZGluZyAqLyBBbmltYXRpb24pXG4vKiBoYXJtb255IGV4cG9ydCAqLyB9KTtcbi8qKlxuICogUmVwcmVzZW50cyBhbiBhbmltYXRpb24gdGhhdCBjYW4gYmUgcGxheWVkIG9uIGFuIEFydGJvYXJkLlxuICogV3JhcHMgYW5pbWF0aW9ucyBhbmQgaW5zdGFuY2VzIGZyb20gdGhlIHJ1bnRpbWUgYW5kIGtlZXBzIHRyYWNrIG9mIHBsYXliYWNrIHN0YXRlLlxuICpcbiAqIFRoZSBgQW5pbWF0aW9uYCBjbGFzcyBtYW5hZ2VzIHRoZSBzdGF0ZSBhbmQgYmVoYXZpb3Igb2YgYSBzaW5nbGUgYW5pbWF0aW9uIGluc3RhbmNlLFxuICogaW5jbHVkaW5nIGl0cyBjdXJyZW50IHRpbWUsIGxvb3AgY291bnQsIGFuZCBhYmlsaXR5IHRvIHNjcnViIHRvIGEgc3BlY2lmaWMgdGltZS5cbiAqXG4gKiBUaGUgY2xhc3MgcHJvdmlkZXMgbWV0aG9kcyB0byBhZHZhbmNlIHRoZSBhbmltYXRpb24sIGFwcGx5IGl0cyBpbnRlcnBvbGF0ZWQga2V5ZnJhbWVcbiAqIHZhbHVlcyB0byB0aGUgQXJ0Ym9hcmQsIGFuZCBjbGVhbiB1cCB0aGUgdW5kZXJseWluZyBhbmltYXRpb24gaW5zdGFuY2Ugd2hlbiB0aGVcbiAqIGFuaW1hdGlvbiBpcyBubyBsb25nZXIgbmVlZGVkLlxuICovXG52YXIgQW5pbWF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgYW5pbWF0aW9uXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHthbnl9IGFuaW1hdGlvbjogcnVudGltZSBhbmltYXRpb24gb2JqZWN0XG4gICAgICogQHBhcmFtIHthbnl9IGluc3RhbmNlOiBydW50aW1lIGFuaW1hdGlvbiBpbnN0YW5jZSBvYmplY3RcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBBbmltYXRpb24oYW5pbWF0aW9uLCBhcnRib2FyZCwgcnVudGltZSwgcGxheWluZykge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IGFuaW1hdGlvbjtcbiAgICAgICAgdGhpcy5hcnRib2FyZCA9IGFydGJvYXJkO1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBwbGF5aW5nO1xuICAgICAgICB0aGlzLmxvb3BDb3VudCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGltZSB0byB3aGljaCB0aGUgYW5pbWF0aW9uIHNob3VsZCBtb3ZlIHRvIG9uIHRoZSBuZXh0IHJlbmRlci5cbiAgICAgICAgICogSWYgbm90IG51bGwsIHRoZSBhbmltYXRpb24gd2lsbCBzY3J1YiB0byB0aGlzIHRpbWUgaW5zdGVhZCBvZiBhZHZhbmNpbmcgYnkgdGhlIGdpdmVuIHRpbWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNjcnViVG8gPSBudWxsO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IHJ1bnRpbWUuTGluZWFyQW5pbWF0aW9uSW5zdGFuY2UoYW5pbWF0aW9uLCBhcnRib2FyZCk7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb24ucHJvdG90eXBlLCBcIm5hbWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgYW5pbWF0aW9uJ3MgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb24ubmFtZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRpb24ucHJvdG90eXBlLCBcInRpbWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgYW5pbWF0aW9uJ3MgbmFtZVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZS50aW1lO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgYW5pbWF0aW9uJ3MgY3VycmVudCB0aW1lXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZS50aW1lID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uLnByb3RvdHlwZSwgXCJsb29wVmFsdWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgYW5pbWF0aW9uJ3MgbG9vcCB0eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbi5sb29wVmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0aW9uLnByb3RvdHlwZSwgXCJuZWVkc1NjcnViXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBhbmltYXRpb24gbmVlZHMgdG8gYmUgc2NydWJiZWQuXG4gICAgICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgYW5pbWF0aW9uIG5lZWRzIHRvIGJlIHNjcnViYmVkLCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NydWJUbyAhPT0gbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEFkdmFuY2VzIHRoZSBhbmltYXRpb24gYnkgdGhlIGdpdmUgdGltZS4gSWYgdGhlIGFuaW1hdGlvbiBuZWVkcyBzY3J1YmJpbmcsXG4gICAgICogdGltZSBpcyBpZ25vcmVkIGFuZCB0aGUgc3RvcmVkIHNjcnViIHZhbHVlIGlzIHVzZWQuXG4gICAgICogQHBhcmFtIHRpbWUgdGhlIHRpbWUgdG8gYWR2YW5jZSB0aGUgYW5pbWF0aW9uIGJ5IGlmIG5vIHNjcnViYmluZyByZXF1aXJlZFxuICAgICAqL1xuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuYWR2YW5jZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnNjcnViVG8gPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UuYWR2YW5jZSh0aW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2UudGltZSA9IDA7XG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlLmFkdmFuY2UodGhpcy5zY3J1YlRvKTtcbiAgICAgICAgICAgIHRoaXMuc2NydWJUbyA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFwcGx5IGludGVycG9sYXRlZCBrZXlmcmFtZSB2YWx1ZXMgdG8gdGhlIGFydGJvYXJkLiBUaGlzIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgY2FsbGluZ1xuICAgICAqIC5hZHZhbmNlKCkgb24gYW4gYW5pbWF0aW9uIGluc3RhbmNlIHNvIHRoYXQgbmV3IHZhbHVlcyBhcmUgYXBwbGllZCB0byBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBkb2VzIG5vdCBhZHZhbmNlIHRoZSBhcnRib2FyZCwgd2hpY2ggdXBkYXRlcyBhbGwgb2JqZWN0cyBvbiB0aGUgYXJ0Ym9hcmRcbiAgICAgKiBAcGFyYW0gbWl4IC0gTWl4IHZhbHVlIGZvciB0aGUgYW5pbWF0aW9uIGZyb20gMCB0byAxXG4gICAgICovXG4gICAgQW5pbWF0aW9uLnByb3RvdHlwZS5hcHBseSA9IGZ1bmN0aW9uIChtaXgpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5hcHBseShtaXgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyB0aGUgYmFja2luZyBXYXNtIGFuaW1hdGlvbiBpbnN0YW5jZTsgb25jZSB0aGlzIGlzIGNhbGxlZCwgdGhpc1xuICAgICAqIGFuaW1hdGlvbiBpcyBubyBtb3JlLlxuICAgICAqL1xuICAgIEFuaW1hdGlvbi5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb247XG59KCkpO1xuXG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEJMQU5LX1VSTDogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3Nhbml0aXplVXJsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18uQkxBTktfVVJMKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgcmVnaXN0ZXJUb3VjaEludGVyYWN0aW9uczogKCkgPT4gKC8qIHJlZXhwb3J0IHNhZmUgKi8gX3JlZ2lzdGVyVG91Y2hJbnRlcmFjdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5yZWdpc3RlclRvdWNoSW50ZXJhY3Rpb25zKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgc2FuaXRpemVVcmw6ICgpID0+ICgvKiByZWV4cG9ydCBzYWZlICovIF9zYW5pdGl6ZVVybF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnNhbml0aXplVXJsKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3JlZ2lzdGVyVG91Y2hJbnRlcmFjdGlvbnNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3Nhbml0aXplVXJsX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXG5cblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgcmVnaXN0ZXJUb3VjaEludGVyYWN0aW9uczogKCkgPT4gKC8qIGJpbmRpbmcgKi8gcmVnaXN0ZXJUb3VjaEludGVyYWN0aW9ucylcbi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pO1xudmFyIF90aGlzID0gdW5kZWZpbmVkO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSBjbGllbnRYIGFuZCBjbGllbnRZIHByb3BlcnRpZXMgZnJvbSB0b3VjaCBvciBtb3VzZSBldmVudHMuIEFsc29cbiAqIGNhbGxzIHByZXZlbnREZWZhdWx0KCkgb24gdGhlIGV2ZW50IGlmIGl0IGlzIGEgdG91Y2hzdGFydCBvciB0b3VjaG1vdmUgdG8gcHJldmVudFxuICogc2Nyb2xsaW5nIHRoZSBwYWdlIG9uIG1vYmlsZSBkZXZpY2VzXG4gKiBAcGFyYW0gZXZlbnQgLSBFaXRoZXIgYSBUb3VjaEV2ZW50IG9yIGEgTW91c2VFdmVudFxuICogQHJldHVybnMgLSBDb29yZGluYXRlcyBvZiB0aGUgY2xpZW50WCBhbmQgY2xpZW50WSBwcm9wZXJ0aWVzIGZyb20gdGhlIHRvdWNoL21vdXNlIGV2ZW50XG4gKi9cbnZhciBnZXRDbGllbnRDb29yZGluYXRlcyA9IGZ1bmN0aW9uIChldmVudCwgaXNUb3VjaFNjcm9sbEVuYWJsZWQpIHtcbiAgICB2YXIgX2EsIF9iO1xuICAgIGlmIChbXCJ0b3VjaHN0YXJ0XCIsIFwidG91Y2htb3ZlXCJdLmluZGV4T2YoZXZlbnQudHlwZSkgPiAtMSAmJlxuICAgICAgICAoKF9hID0gZXZlbnQudG91Y2hlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkpIHtcbiAgICAgICAgLy8gVGhpcyBmbGFnLCBpZiBmYWxzZSwgcHJldmVudHMgdG91Y2ggZXZlbnRzIG9uIHRoZSBjYW52YXMgZGVmYXVsdCBiZWhhdmlvclxuICAgICAgICAvLyB3aGljaCBtYXkgcHJldmVudCBzY3JvbGxpbmcgaWYgYSBkcmFnIG1vdGlvbiBvbiB0aGUgY2FudmFzIGlzIHBlcmZvcm1lZFxuICAgICAgICBpZiAoIWlzVG91Y2hTY3JvbGxFbmFibGVkKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnRYOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFgsXG4gICAgICAgICAgICBjbGllbnRZOiBldmVudC50b3VjaGVzWzBdLmNsaWVudFksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKGV2ZW50LnR5cGUgPT09IFwidG91Y2hlbmRcIiAmJlxuICAgICAgICAoKF9iID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnRYOiBldmVudC5jaGFuZ2VkVG91Y2hlc1swXS5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uY2xpZW50WSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGllbnRYOiBldmVudC5jbGllbnRYLFxuICAgICAgICAgICAgY2xpZW50WTogZXZlbnQuY2xpZW50WSxcbiAgICAgICAgfTtcbiAgICB9XG59O1xuLyoqXG4gKiBSZWdpc3RlcnMgbW91c2UgbW92ZS91cC9kb3duIGNhbGxiYWNrIGhhbmRsZXJzIG9uIHRoZSBjYW52YXMgdG8gc2VuZCBtZWFuaW5nZnVsIGNvb3JkaW5hdGVzIHRvXG4gKiB0aGUgc3RhdGUgbWFjaGluZSBwb2ludGVyIG1vdmUvdXAvZG93biBmdW5jdGlvbnMgYmFzZWQgb24gY3Vyc29yIGludGVyYWN0aW9uXG4gKi9cbnZhciByZWdpc3RlclRvdWNoSW50ZXJhY3Rpb25zID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgdmFyIGNhbnZhcyA9IF9hLmNhbnZhcywgYXJ0Ym9hcmQgPSBfYS5hcnRib2FyZCwgX2IgPSBfYS5zdGF0ZU1hY2hpbmVzLCBzdGF0ZU1hY2hpbmVzID0gX2IgPT09IHZvaWQgMCA/IFtdIDogX2IsIHJlbmRlcmVyID0gX2EucmVuZGVyZXIsIHJpdmUgPSBfYS5yaXZlLCBmaXQgPSBfYS5maXQsIGFsaWdubWVudCA9IF9hLmFsaWdubWVudCwgX2MgPSBfYS5pc1RvdWNoU2Nyb2xsRW5hYmxlZCwgaXNUb3VjaFNjcm9sbEVuYWJsZWQgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYztcbiAgICBpZiAoIWNhbnZhcyB8fFxuICAgICAgICAhc3RhdGVNYWNoaW5lcy5sZW5ndGggfHxcbiAgICAgICAgIXJlbmRlcmVyIHx8XG4gICAgICAgICFyaXZlIHx8XG4gICAgICAgICFhcnRib2FyZCB8fFxuICAgICAgICB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZnRlciBhIHRvdWNoZW5kIGV2ZW50LCBzb21lIGJyb3dzZXJzIG1heSBmaXJlIHN5bnRoZXRpYyBtb3VzZSBldmVudHNcbiAgICAgKiAobW91c2VvdmVyLCBtb3VzZWRvd24sIG1vdXNlbW92ZSwgbW91c2V1cCkgaWYgdGhlIHRvdWNoIGludGVyYWN0aW9uIGRpZCBub3QgY2F1c2VcbiAgICAgKiBhbnkgZGVmYXVsdCBhY3Rpb24gKHN1Y2ggYXMgc2Nyb2xsaW5nKS5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgZG9uZSB0byBzaW11bGF0ZSB0aGUgYmVoYXZpb3Igb2YgYSBtb3VzZSBmb3IgYXBwbGljYXRpb25zIHRoYXQgZG8gbm90IHN1cHBvcnRcbiAgICAgKiB0b3VjaCBldmVudHMuXG4gICAgICpcbiAgICAgKiBXZSdyZSBrZWVwaW5nIHRyYWNrIG9mIHRoZSBwcmV2aW91cyBldmVudCB0byBub3Qgc2VuZCB0aGUgc3ludGhldGljIG1vdXNlIGV2ZW50cyBpZiB0aGVcbiAgICAgKiB0b3VjaCBldmVudCB3YXMgYSBjbGljayAodG91Y2hzdGFydCAtPiB0b3VjaGVuZCkuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIG9ubHkgbmVlZGVkIHdoZW4gYGlzVG91Y2hTY3JvbGxFbmFibGVkYCBpcyBmYWxzZVxuICAgICAqIFdoZW4gdHJ1ZSwgYHByZXZlbnREZWZhdWx0KClgIGlzIGNhbGxlZCB3aGljaCBwcmV2ZW50cyB0aGlzIGJlaGF2aW91ci5cbiAgICAgKiovXG4gICAgdmFyIF9wcmV2RXZlbnRUeXBlID0gbnVsbDtcbiAgICB2YXIgX3N5bnRoZXRpY0V2ZW50c0FjdGl2ZSA9IGZhbHNlO1xuICAgIHZhciBwcm9jZXNzRXZlbnRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBFeGl0IGVhcmx5IG91dCBvZiBhbGwgc3ludGhldGljIG1vdXNlIGV2ZW50c1xuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85NjU2OTkwL2hvdy10by1wcmV2ZW50LXNpbXVsYXRlZC1tb3VzZS1ldmVudHMtaW4tbW9iaWxlLWJyb3dzZXJzXG4gICAgICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI1NTcyMDcwL2phdmFzY3JpcHQtdG91Y2hlbmQtdmVyc3VzLWNsaWNrLWRpbGVtbWFcbiAgICAgICAgaWYgKF9zeW50aGV0aWNFdmVudHNBY3RpdmUgJiYgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTeW50aGV0aWMgZXZlbnQgZmluaXNoZWRcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09IFwibW91c2V1cFwiKSB7XG4gICAgICAgICAgICAgICAgX3N5bnRoZXRpY0V2ZW50c0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgaWYgaXQncyBhIFwidG91Y2ggY2xpY2tcIi4gVGhpcyBjb3VsZCBjYXVzZSB0aGUgYnJvd3NlciB0byBzZW5kXG4gICAgICAgIC8vIHN5bnRoZXRpYyBtb3VzZSBldmVudHMuXG4gICAgICAgIF9zeW50aGV0aWNFdmVudHNBY3RpdmUgPVxuICAgICAgICAgICAgaXNUb3VjaFNjcm9sbEVuYWJsZWQgJiZcbiAgICAgICAgICAgICAgICBldmVudC50eXBlID09PSBcInRvdWNoZW5kXCIgJiZcbiAgICAgICAgICAgICAgICBfcHJldkV2ZW50VHlwZSA9PT0gXCJ0b3VjaHN0YXJ0XCI7XG4gICAgICAgIF9wcmV2RXZlbnRUeXBlID0gZXZlbnQudHlwZTtcbiAgICAgICAgdmFyIGJvdW5kaW5nUmVjdCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBfYSA9IGdldENsaWVudENvb3JkaW5hdGVzKGV2ZW50LCBpc1RvdWNoU2Nyb2xsRW5hYmxlZCksIGNsaWVudFggPSBfYS5jbGllbnRYLCBjbGllbnRZID0gX2EuY2xpZW50WTtcbiAgICAgICAgaWYgKCFjbGllbnRYICYmICFjbGllbnRZKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbnZhc1ggPSBjbGllbnRYIC0gYm91bmRpbmdSZWN0LmxlZnQ7XG4gICAgICAgIHZhciBjYW52YXNZID0gY2xpZW50WSAtIGJvdW5kaW5nUmVjdC50b3A7XG4gICAgICAgIHZhciBmb3J3YXJkTWF0cml4ID0gcml2ZS5jb21wdXRlQWxpZ25tZW50KGZpdCwgYWxpZ25tZW50LCB7XG4gICAgICAgICAgICBtaW5YOiAwLFxuICAgICAgICAgICAgbWluWTogMCxcbiAgICAgICAgICAgIG1heFg6IGJvdW5kaW5nUmVjdC53aWR0aCxcbiAgICAgICAgICAgIG1heFk6IGJvdW5kaW5nUmVjdC5oZWlnaHQsXG4gICAgICAgIH0sIGFydGJvYXJkLmJvdW5kcyk7XG4gICAgICAgIHZhciBpbnZlcnRlZE1hdHJpeCA9IG5ldyByaXZlLk1hdDJEKCk7XG4gICAgICAgIGZvcndhcmRNYXRyaXguaW52ZXJ0KGludmVydGVkTWF0cml4KTtcbiAgICAgICAgdmFyIGNhbnZhc0Nvb3JkaW5hdGVzVmVjdG9yID0gbmV3IHJpdmUuVmVjMkQoY2FudmFzWCwgY2FudmFzWSk7XG4gICAgICAgIHZhciB0cmFuc2Zvcm1lZFZlY3RvciA9IHJpdmUubWFwWFkoaW52ZXJ0ZWRNYXRyaXgsIGNhbnZhc0Nvb3JkaW5hdGVzVmVjdG9yKTtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkWCA9IHRyYW5zZm9ybWVkVmVjdG9yLngoKTtcbiAgICAgICAgdmFyIHRyYW5zZm9ybWVkWSA9IHRyYW5zZm9ybWVkVmVjdG9yLnkoKTtcbiAgICAgICAgdHJhbnNmb3JtZWRWZWN0b3IuZGVsZXRlKCk7XG4gICAgICAgIGludmVydGVkTWF0cml4LmRlbGV0ZSgpO1xuICAgICAgICBjYW52YXNDb29yZGluYXRlc1ZlY3Rvci5kZWxldGUoKTtcbiAgICAgICAgZm9yd2FyZE1hdHJpeC5kZWxldGUoKTtcbiAgICAgICAgc3dpdGNoIChldmVudC50eXBlKSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFRoZXJlJ3MgYSAycHggYnVmZmVyIGZvciBhIGhpdFJhZGl1cyB3aGVuIHRyYW5zbGF0aW5nIHRoZSBwb2ludGVyIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICAgKiBkb3duIHRvIHRoZSBzdGF0ZSBtYWNoaW5lLiBJbiBjYXNlcyB3aGVyZSB0aGUgaGl0Ym94IGlzIGFib3V0IHRoYXQgbXVjaCBhd2F5XG4gICAgICAgICAgICAgKiBmcm9tIHRoZSBBcnRib2FyZCBib3JkZXIsIHdlIGRvbid0IGhhdmUgZXhhY3QgcHJlY2lzaW9uIG9uIGRldGVybWluaW5nIHBvaW50ZXJcbiAgICAgICAgICAgICAqIGV4aXQuIFdlJ3JlIHRoZXJlZm9yZSBhZGRpbmcgdG8gdGhlIHRyYW5zbGF0ZWQgY29vcmRpbmF0ZXMgb24gbW91c2VvdXQgb2YgYSBjYW52YXNcbiAgICAgICAgICAgICAqIHRvIGVuc3VyZSB0aGF0IHdlIHJlcG9ydCB0aGUgbW91c2UgaGFzIHRydWx5IGV4aXRlZCB0aGUgaGl0YXJlYS5cbiAgICAgICAgICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yaXZlLWFwcC9yaXZlLWNwcC9ibG9iL21hc3Rlci9zcmMvYW5pbWF0aW9uL3N0YXRlX21hY2hpbmVfaW5zdGFuY2UuY3BwI0wzMzZcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBXZSBhZGQvc3VidHJhY3QgMTAwMDAgdG8gYWNjb3VudCBmb3Igd2hlbiB0aGUgZ3JhcGhpYyBnb2VzIGJleW9uZCB0aGUgY2FudmFzIGJvdW5kXG4gICAgICAgICAgICAgKiBkdWUgdG8gZm9yIGV4YW1wbGUsIGEgZml0OiAnY292ZXInLiBOb3QgcGVyZmVjdCwgYnV0IGhlbHBzIHJlbGlhYmx5IChmb3Igbm93KSBlbnN1cmVcbiAgICAgICAgICAgICAqIHdlIHJlcG9ydCBnb2luZyBvdXQgb2YgYm91bmRzIHdoZW4gdGhlIG1vdXNlIGlzIG91dCBvZiB0aGUgY2FudmFzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhc2UgXCJtb3VzZW91dFwiOlxuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgc3RhdGVNYWNoaW5lc18xID0gc3RhdGVNYWNoaW5lczsgX2kgPCBzdGF0ZU1hY2hpbmVzXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZU1hY2hpbmUgPSBzdGF0ZU1hY2hpbmVzXzFbX2ldO1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZU1hY2hpbmUucG9pbnRlck1vdmUodHJhbnNmb3JtZWRYIDwgMCA/IHRyYW5zZm9ybWVkWCAtIDEwMDAwIDogdHJhbnNmb3JtZWRYICsgMTAwMDAsIHRyYW5zZm9ybWVkWSA8IDAgPyB0cmFuc2Zvcm1lZFkgLSAxMDAwMCA6IHRyYW5zZm9ybWVkWSArIDEwMDAwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBQb2ludGVyIG1vdmluZy9ob3ZlcmluZyBvbiB0aGUgY2FudmFzXG4gICAgICAgICAgICBjYXNlIFwidG91Y2htb3ZlXCI6XG4gICAgICAgICAgICBjYXNlIFwibW91c2VvdmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwibW91c2Vtb3ZlXCI6IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIHN0YXRlTWFjaGluZXNfMiA9IHN0YXRlTWFjaGluZXM7IF9iIDwgc3RhdGVNYWNoaW5lc18yLmxlbmd0aDsgX2IrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVNYWNoaW5lID0gc3RhdGVNYWNoaW5lc18yW19iXTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVNYWNoaW5lLnBvaW50ZXJNb3ZlKHRyYW5zZm9ybWVkWCwgdHJhbnNmb3JtZWRZKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBQb2ludGVyIGNsaWNrIGluaXRpYXRlZCBidXQgbm90IHJlbGVhc2VkIHlldCBvbiB0aGUgY2FudmFzXG4gICAgICAgICAgICBjYXNlIFwidG91Y2hzdGFydFwiOlxuICAgICAgICAgICAgY2FzZSBcIm1vdXNlZG93blwiOiB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2MgPSAwLCBzdGF0ZU1hY2hpbmVzXzMgPSBzdGF0ZU1hY2hpbmVzOyBfYyA8IHN0YXRlTWFjaGluZXNfMy5sZW5ndGg7IF9jKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlTWFjaGluZSA9IHN0YXRlTWFjaGluZXNfM1tfY107XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlTWFjaGluZS5wb2ludGVyRG93bih0cmFuc2Zvcm1lZFgsIHRyYW5zZm9ybWVkWSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gUG9pbnRlciBjbGljayByZWxlYXNlZCBvbiB0aGUgY2FudmFzXG4gICAgICAgICAgICBjYXNlIFwidG91Y2hlbmRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJtb3VzZXVwXCI6IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfZCA9IDAsIHN0YXRlTWFjaGluZXNfNCA9IHN0YXRlTWFjaGluZXM7IF9kIDwgc3RhdGVNYWNoaW5lc180Lmxlbmd0aDsgX2QrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVNYWNoaW5lID0gc3RhdGVNYWNoaW5lc180W19kXTtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVNYWNoaW5lLnBvaW50ZXJVcCh0cmFuc2Zvcm1lZFgsIHRyYW5zZm9ybWVkWSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNhbGxiYWNrID0gcHJvY2Vzc0V2ZW50Q2FsbGJhY2suYmluZChfdGhpcyk7XG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgY2FsbGJhY2spO1xuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VvdXRcIiwgY2FsbGJhY2spO1xuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIGNhbGxiYWNrKTtcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBjYWxsYmFjayk7XG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGNhbGxiYWNrKTtcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBjYWxsYmFjaywge1xuICAgICAgICBwYXNzaXZlOiBpc1RvdWNoU2Nyb2xsRW5hYmxlZCxcbiAgICB9KTtcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgY2FsbGJhY2ssIHtcbiAgICAgICAgcGFzc2l2ZTogaXNUb3VjaFNjcm9sbEVuYWJsZWQsXG4gICAgfSk7XG4gICAgY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBjYWxsYmFjayk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW92ZXJcIiwgY2FsbGJhY2spO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIGNhbGxiYWNrKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgY2FsbGJhY2spO1xuICAgICAgICBjYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBjYWxsYmFjayk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBjYWxsYmFjayk7XG4gICAgICAgIGNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGNhbGxiYWNrKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGNhbGxiYWNrKTtcbiAgICAgICAgY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBjYWxsYmFjayk7XG4gICAgfTtcbn07XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7XG5cbl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTtcbi8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7XG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEJMQU5LX1VSTDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gQkxBTktfVVJMKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgc2FuaXRpemVVcmw6ICgpID0+ICgvKiBiaW5kaW5nICovIHNhbml0aXplVXJsKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vLyBSZWZlcmVuY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9icmFpbnRyZWUvc2FuaXRpemUtdXJsL3RyZWUvbWFpblxudmFyIGludmFsaWRQcm90b2NvbFJlZ2V4ID0gL14oW15cXHddKikoamF2YXNjcmlwdHxkYXRhfHZic2NyaXB0KS9pbTtcbnZhciBodG1sRW50aXRpZXNSZWdleCA9IC8mIyhcXHcrKSheXFx3fDspPy9nO1xudmFyIGh0bWxDdHJsRW50aXR5UmVnZXggPSAvJihuZXdsaW5lfHRhYik7L2dpO1xudmFyIGN0cmxDaGFyYWN0ZXJzUmVnZXggPSAvW1xcdTAwMDAtXFx1MDAxRlxcdTAwN0YtXFx1MDA5RlxcdTIwMDAtXFx1MjAwRFxcdUZFRkZdL2dpbTtcbnZhciB1cmxTY2hlbWVSZWdleCA9IC9eLisoOnwmY29sb247KS9naW07XG52YXIgcmVsYXRpdmVGaXJzdENoYXJhY3RlcnMgPSBbXCIuXCIsIFwiL1wiXTtcbnZhciBCTEFOS19VUkwgPSBcImFib3V0OmJsYW5rXCI7XG5mdW5jdGlvbiBpc1JlbGF0aXZlVXJsV2l0aG91dFByb3RvY29sKHVybCkge1xuICAgIHJldHVybiByZWxhdGl2ZUZpcnN0Q2hhcmFjdGVycy5pbmRleE9mKHVybFswXSkgPiAtMTtcbn1cbi8vIGFkYXB0ZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjk4MjQ1NTAvMjYwMTU1MlxuZnVuY3Rpb24gZGVjb2RlSHRtbENoYXJhY3RlcnMoc3RyKSB7XG4gICAgdmFyIHJlbW92ZWROdWxsQnl0ZSA9IHN0ci5yZXBsYWNlKGN0cmxDaGFyYWN0ZXJzUmVnZXgsIFwiXCIpO1xuICAgIHJldHVybiByZW1vdmVkTnVsbEJ5dGUucmVwbGFjZShodG1sRW50aXRpZXNSZWdleCwgZnVuY3Rpb24gKG1hdGNoLCBkZWMpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZGVjKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNhbml0aXplVXJsKHVybCkge1xuICAgIGlmICghdXJsKSB7XG4gICAgICAgIHJldHVybiBCTEFOS19VUkw7XG4gICAgfVxuICAgIHZhciBzYW5pdGl6ZWRVcmwgPSBkZWNvZGVIdG1sQ2hhcmFjdGVycyh1cmwpXG4gICAgICAgIC5yZXBsYWNlKGh0bWxDdHJsRW50aXR5UmVnZXgsIFwiXCIpXG4gICAgICAgIC5yZXBsYWNlKGN0cmxDaGFyYWN0ZXJzUmVnZXgsIFwiXCIpXG4gICAgICAgIC50cmltKCk7XG4gICAgaWYgKCFzYW5pdGl6ZWRVcmwpIHtcbiAgICAgICAgcmV0dXJuIEJMQU5LX1VSTDtcbiAgICB9XG4gICAgaWYgKGlzUmVsYXRpdmVVcmxXaXRob3V0UHJvdG9jb2woc2FuaXRpemVkVXJsKSkge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVkVXJsO1xuICAgIH1cbiAgICB2YXIgdXJsU2NoZW1lUGFyc2VSZXN1bHRzID0gc2FuaXRpemVkVXJsLm1hdGNoKHVybFNjaGVtZVJlZ2V4KTtcbiAgICBpZiAoIXVybFNjaGVtZVBhcnNlUmVzdWx0cykge1xuICAgICAgICByZXR1cm4gc2FuaXRpemVkVXJsO1xuICAgIH1cbiAgICB2YXIgdXJsU2NoZW1lID0gdXJsU2NoZW1lUGFyc2VSZXN1bHRzWzBdO1xuICAgIGlmIChpbnZhbGlkUHJvdG9jb2xSZWdleC50ZXN0KHVybFNjaGVtZSkpIHtcbiAgICAgICAgcmV0dXJuIEJMQU5LX1VSTDtcbiAgICB9XG4gICAgcmV0dXJuIHNhbml0aXplZFVybDtcbn1cblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXHRdKTtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuLyoqKioqKi8gXHRcdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuLyoqKioqKi8gXHRcdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqLyBcdFxuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqLyBcdFxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovXG4vKioqKioqLyBcdCgoKSA9PiB7XG4vKioqKioqLyBcdFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG4vKioqKioqLyBcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuLyoqKioqKi8gXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG4vKioqKioqLyBcdFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi8gXHR9KSgpO1xuLyoqKioqKi8gXHRcbi8qKioqKiovIFx0Lyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqL1xuLyoqKioqKi8gXHQoKCkgPT4ge1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSlcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqLyBcdC8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi9cbi8qKioqKiovIFx0KCgpID0+IHtcbi8qKioqKiovIFx0XHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcbi8qKioqKiovIFx0XHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuLyoqKioqKi8gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbi8qKioqKiovIFx0XHRcdH1cbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovIFx0fSkoKTtcbi8qKioqKiovIFx0XG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xudmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTtcbi8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuXG4oKCkgPT4ge1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pO1xuLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHtcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgQWxpZ25tZW50OiAoKSA9PiAoLyogYmluZGluZyAqLyBBbGlnbm1lbnQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBFdmVudFR5cGU6ICgpID0+ICgvKiBiaW5kaW5nICovIEV2ZW50VHlwZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIEZpdDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gRml0KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgTGF5b3V0OiAoKSA9PiAoLyogYmluZGluZyAqLyBMYXlvdXQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBMb29wVHlwZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gTG9vcFR5cGUpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBSaXZlOiAoKSA9PiAoLyogYmluZGluZyAqLyBSaXZlKSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgUml2ZUV2ZW50VHlwZTogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUml2ZUV2ZW50VHlwZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFJpdmVGaWxlOiAoKSA9PiAoLyogYmluZGluZyAqLyBSaXZlRmlsZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFJ1bnRpbWVMb2FkZXI6ICgpID0+ICgvKiBiaW5kaW5nICovIFJ1bnRpbWVMb2FkZXIpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTdGF0ZU1hY2hpbmVJbnB1dDogKCkgPT4gKC8qIGJpbmRpbmcgKi8gU3RhdGVNYWNoaW5lSW5wdXQpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBTdGF0ZU1hY2hpbmVJbnB1dFR5cGU6ICgpID0+ICgvKiBiaW5kaW5nICovIFN0YXRlTWFjaGluZUlucHV0VHlwZSksXG4vKiBoYXJtb255IGV4cG9ydCAqLyAgIFRlc3Rpbmc6ICgpID0+ICgvKiBiaW5kaW5nICovIFRlc3RpbmcpLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBkZWNvZGVBdWRpbzogKCkgPT4gKC8qIGJpbmRpbmcgKi8gZGVjb2RlQXVkaW8pLFxuLyogaGFybW9ueSBleHBvcnQgKi8gICBkZWNvZGVGb250OiAoKSA9PiAoLyogYmluZGluZyAqLyBkZWNvZGVGb250KSxcbi8qIGhhcm1vbnkgZXhwb3J0ICovICAgZGVjb2RlSW1hZ2U6ICgpID0+ICgvKiBiaW5kaW5nICovIGRlY29kZUltYWdlKVxuLyogaGFybW9ueSBleHBvcnQgKi8gfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3JpdmVfYWR2YW5jZWRfbWpzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHBhY2thZ2VfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfYW5pbWF0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciBfX2V4dGVuZHMgPSAodW5kZWZpbmVkICYmIHVuZGVmaW5lZC5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIF9fYXdhaXRlciA9ICh1bmRlZmluZWQgJiYgdW5kZWZpbmVkLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHVuZGVmaW5lZCAmJiB1bmRlZmluZWQuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5cblxuXG5cbi8vICNyZWdpb24gbGF5b3V0XG4vLyBGaXQgb3B0aW9ucyBmb3IgdGhlIGNhbnZhc1xudmFyIEZpdDtcbihmdW5jdGlvbiAoRml0KSB7XG4gICAgRml0W1wiQ292ZXJcIl0gPSBcImNvdmVyXCI7XG4gICAgRml0W1wiQ29udGFpblwiXSA9IFwiY29udGFpblwiO1xuICAgIEZpdFtcIkZpbGxcIl0gPSBcImZpbGxcIjtcbiAgICBGaXRbXCJGaXRXaWR0aFwiXSA9IFwiZml0V2lkdGhcIjtcbiAgICBGaXRbXCJGaXRIZWlnaHRcIl0gPSBcImZpdEhlaWdodFwiO1xuICAgIEZpdFtcIk5vbmVcIl0gPSBcIm5vbmVcIjtcbiAgICBGaXRbXCJTY2FsZURvd25cIl0gPSBcInNjYWxlRG93blwiO1xufSkoRml0IHx8IChGaXQgPSB7fSkpO1xuLy8gQWxpZ25tZW50IG9wdGlvbnMgZm9yIHRoZSBjYW52YXNcbnZhciBBbGlnbm1lbnQ7XG4oZnVuY3Rpb24gKEFsaWdubWVudCkge1xuICAgIEFsaWdubWVudFtcIkNlbnRlclwiXSA9IFwiY2VudGVyXCI7XG4gICAgQWxpZ25tZW50W1wiVG9wTGVmdFwiXSA9IFwidG9wTGVmdFwiO1xuICAgIEFsaWdubWVudFtcIlRvcENlbnRlclwiXSA9IFwidG9wQ2VudGVyXCI7XG4gICAgQWxpZ25tZW50W1wiVG9wUmlnaHRcIl0gPSBcInRvcFJpZ2h0XCI7XG4gICAgQWxpZ25tZW50W1wiQ2VudGVyTGVmdFwiXSA9IFwiY2VudGVyTGVmdFwiO1xuICAgIEFsaWdubWVudFtcIkNlbnRlclJpZ2h0XCJdID0gXCJjZW50ZXJSaWdodFwiO1xuICAgIEFsaWdubWVudFtcIkJvdHRvbUxlZnRcIl0gPSBcImJvdHRvbUxlZnRcIjtcbiAgICBBbGlnbm1lbnRbXCJCb3R0b21DZW50ZXJcIl0gPSBcImJvdHRvbUNlbnRlclwiO1xuICAgIEFsaWdubWVudFtcIkJvdHRvbVJpZ2h0XCJdID0gXCJib3R0b21SaWdodFwiO1xufSkoQWxpZ25tZW50IHx8IChBbGlnbm1lbnQgPSB7fSkpO1xuLy8gQWxpZ25tZW50IG9wdGlvbnMgZm9yIFJpdmUgYW5pbWF0aW9ucyBpbiBhIEhUTUwgY2FudmFzXG52YXIgTGF5b3V0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExheW91dChwYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kLCBfZSwgX2Y7XG4gICAgICAgIHRoaXMuZml0ID0gKF9hID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmZpdCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogRml0LkNvbnRhaW47XG4gICAgICAgIHRoaXMuYWxpZ25tZW50ID0gKF9iID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmFsaWdubWVudCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogQWxpZ25tZW50LkNlbnRlcjtcbiAgICAgICAgdGhpcy5taW5YID0gKF9jID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLm1pblgpICE9PSBudWxsICYmIF9jICE9PSB2b2lkIDAgPyBfYyA6IDA7XG4gICAgICAgIHRoaXMubWluWSA9IChfZCA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5taW5ZKSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiAwO1xuICAgICAgICB0aGlzLm1heFggPSAoX2UgPSBwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMubWF4WCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogMDtcbiAgICAgICAgdGhpcy5tYXhZID0gKF9mID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLm1heFkpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IDA7XG4gICAgfVxuICAgIC8vIEFsdGVybmF0aXZlIGNvbnN0cnVjdG9yIHRvIGJ1aWxkIGEgTGF5b3V0IGZyb20gYW4gaW50ZXJmYWNlL29iamVjdFxuICAgIExheW91dC5uZXcgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGZpdCA9IF9hLmZpdCwgYWxpZ25tZW50ID0gX2EuYWxpZ25tZW50LCBtaW5YID0gX2EubWluWCwgbWluWSA9IF9hLm1pblksIG1heFggPSBfYS5tYXhYLCBtYXhZID0gX2EubWF4WTtcbiAgICAgICAgY29uc29sZS53YXJuKFwiVGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkOiBwbGVhc2UgdXNlIGBuZXcgTGF5b3V0KHt9KWAgaW5zdGVhZFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXlvdXQoeyBmaXQ6IGZpdCwgYWxpZ25tZW50OiBhbGlnbm1lbnQsIG1pblg6IG1pblgsIG1pblk6IG1pblksIG1heFg6IG1heFgsIG1heFk6IG1heFkgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlcyBhIGNvcHkgb2YgdGhlIGxheW91dCwgcmVwbGFjaW5nIGFueSBzcGVjaWZpZWQgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIExheW91dC5wcm90b3R5cGUuY29weVdpdGggPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgdmFyIGZpdCA9IF9hLmZpdCwgYWxpZ25tZW50ID0gX2EuYWxpZ25tZW50LCBtaW5YID0gX2EubWluWCwgbWluWSA9IF9hLm1pblksIG1heFggPSBfYS5tYXhYLCBtYXhZID0gX2EubWF4WTtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXlvdXQoe1xuICAgICAgICAgICAgZml0OiBmaXQgIT09IG51bGwgJiYgZml0ICE9PSB2b2lkIDAgPyBmaXQgOiB0aGlzLmZpdCxcbiAgICAgICAgICAgIGFsaWdubWVudDogYWxpZ25tZW50ICE9PSBudWxsICYmIGFsaWdubWVudCAhPT0gdm9pZCAwID8gYWxpZ25tZW50IDogdGhpcy5hbGlnbm1lbnQsXG4gICAgICAgICAgICBtaW5YOiBtaW5YICE9PSBudWxsICYmIG1pblggIT09IHZvaWQgMCA/IG1pblggOiB0aGlzLm1pblgsXG4gICAgICAgICAgICBtaW5ZOiBtaW5ZICE9PSBudWxsICYmIG1pblkgIT09IHZvaWQgMCA/IG1pblkgOiB0aGlzLm1pblksXG4gICAgICAgICAgICBtYXhYOiBtYXhYICE9PSBudWxsICYmIG1heFggIT09IHZvaWQgMCA/IG1heFggOiB0aGlzLm1heFgsXG4gICAgICAgICAgICBtYXhZOiBtYXhZICE9PSBudWxsICYmIG1heFkgIT09IHZvaWQgMCA/IG1heFkgOiB0aGlzLm1heFksXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gUmV0dXJucyBmaXQgZm9yIHRoZSBXYXNtIHJ1bnRpbWUgZm9ybWF0XG4gICAgTGF5b3V0LnByb3RvdHlwZS5ydW50aW1lRml0ID0gZnVuY3Rpb24gKHJpdmUpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVkUnVudGltZUZpdClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNhY2hlZFJ1bnRpbWVGaXQ7XG4gICAgICAgIHZhciBmaXQ7XG4gICAgICAgIGlmICh0aGlzLmZpdCA9PT0gRml0LkNvdmVyKVxuICAgICAgICAgICAgZml0ID0gcml2ZS5GaXQuY292ZXI7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZml0ID09PSBGaXQuQ29udGFpbilcbiAgICAgICAgICAgIGZpdCA9IHJpdmUuRml0LmNvbnRhaW47XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZml0ID09PSBGaXQuRmlsbClcbiAgICAgICAgICAgIGZpdCA9IHJpdmUuRml0LmZpbGw7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZml0ID09PSBGaXQuRml0V2lkdGgpXG4gICAgICAgICAgICBmaXQgPSByaXZlLkZpdC5maXRXaWR0aDtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5maXQgPT09IEZpdC5GaXRIZWlnaHQpXG4gICAgICAgICAgICBmaXQgPSByaXZlLkZpdC5maXRIZWlnaHQ7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuZml0ID09PSBGaXQuU2NhbGVEb3duKVxuICAgICAgICAgICAgZml0ID0gcml2ZS5GaXQuc2NhbGVEb3duO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmaXQgPSByaXZlLkZpdC5ub25lO1xuICAgICAgICB0aGlzLmNhY2hlZFJ1bnRpbWVGaXQgPSBmaXQ7XG4gICAgICAgIHJldHVybiBmaXQ7XG4gICAgfTtcbiAgICAvLyBSZXR1cm5zIGFsaWdubWVudCBmb3IgdGhlIFdhc20gcnVudGltZSBmb3JtYXRcbiAgICBMYXlvdXQucHJvdG90eXBlLnJ1bnRpbWVBbGlnbm1lbnQgPSBmdW5jdGlvbiAocml2ZSkge1xuICAgICAgICBpZiAodGhpcy5jYWNoZWRSdW50aW1lQWxpZ25tZW50KVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGVkUnVudGltZUFsaWdubWVudDtcbiAgICAgICAgdmFyIGFsaWdubWVudDtcbiAgICAgICAgaWYgKHRoaXMuYWxpZ25tZW50ID09PSBBbGlnbm1lbnQuVG9wTGVmdClcbiAgICAgICAgICAgIGFsaWdubWVudCA9IHJpdmUuQWxpZ25tZW50LnRvcExlZnQ7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWxpZ25tZW50ID09PSBBbGlnbm1lbnQuVG9wQ2VudGVyKVxuICAgICAgICAgICAgYWxpZ25tZW50ID0gcml2ZS5BbGlnbm1lbnQudG9wQ2VudGVyO1xuICAgICAgICBlbHNlIGlmICh0aGlzLmFsaWdubWVudCA9PT0gQWxpZ25tZW50LlRvcFJpZ2h0KVxuICAgICAgICAgICAgYWxpZ25tZW50ID0gcml2ZS5BbGlnbm1lbnQudG9wUmlnaHQ7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWxpZ25tZW50ID09PSBBbGlnbm1lbnQuQ2VudGVyTGVmdClcbiAgICAgICAgICAgIGFsaWdubWVudCA9IHJpdmUuQWxpZ25tZW50LmNlbnRlckxlZnQ7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWxpZ25tZW50ID09PSBBbGlnbm1lbnQuQ2VudGVyUmlnaHQpXG4gICAgICAgICAgICBhbGlnbm1lbnQgPSByaXZlLkFsaWdubWVudC5jZW50ZXJSaWdodDtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5hbGlnbm1lbnQgPT09IEFsaWdubWVudC5Cb3R0b21MZWZ0KVxuICAgICAgICAgICAgYWxpZ25tZW50ID0gcml2ZS5BbGlnbm1lbnQuYm90dG9tTGVmdDtcbiAgICAgICAgZWxzZSBpZiAodGhpcy5hbGlnbm1lbnQgPT09IEFsaWdubWVudC5Cb3R0b21DZW50ZXIpXG4gICAgICAgICAgICBhbGlnbm1lbnQgPSByaXZlLkFsaWdubWVudC5ib3R0b21DZW50ZXI7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYWxpZ25tZW50ID09PSBBbGlnbm1lbnQuQm90dG9tUmlnaHQpXG4gICAgICAgICAgICBhbGlnbm1lbnQgPSByaXZlLkFsaWdubWVudC5ib3R0b21SaWdodDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYWxpZ25tZW50ID0gcml2ZS5BbGlnbm1lbnQuY2VudGVyO1xuICAgICAgICB0aGlzLmNhY2hlZFJ1bnRpbWVBbGlnbm1lbnQgPSBhbGlnbm1lbnQ7XG4gICAgICAgIHJldHVybiBhbGlnbm1lbnQ7XG4gICAgfTtcbiAgICByZXR1cm4gTGF5b3V0O1xufSgpKTtcblxuLy8gUnVudGltZSBzaW5nbGV0b247IHVzZSBnZXRJbnN0YW5jZSB0byBwcm92aWRlIGEgY2FsbGJhY2sgdGhhdCByZXR1cm5zIHRoZVxuLy8gUml2ZSBydW50aW1lXG52YXIgUnVudGltZUxvYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBDbGFzcyBpcyBuZXZlciBpbnN0YW50aWF0ZWRcbiAgICBmdW5jdGlvbiBSdW50aW1lTG9hZGVyKCkge1xuICAgIH1cbiAgICAvLyBMb2FkcyB0aGUgcnVudGltZVxuICAgIFJ1bnRpbWVMb2FkZXIubG9hZFJ1bnRpbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9yaXZlX2FkdmFuY2VkX21qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fW1wiZGVmYXVsdFwiXSh7XG4gICAgICAgICAgICAvLyBMb2FkcyBXYXNtIGJ1bmRsZVxuICAgICAgICAgICAgbG9jYXRlRmlsZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gUnVudGltZUxvYWRlci53YXNtVVJMOyB9LFxuICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJpdmUpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIFJ1bnRpbWVMb2FkZXIucnVudGltZSA9IHJpdmU7XG4gICAgICAgICAgICAvLyBGaXJlIGFsbCB0aGUgY2FsbGJhY2tzXG4gICAgICAgICAgICB3aGlsZSAoUnVudGltZUxvYWRlci5jYWxsQmFja1F1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAoX2EgPSBSdW50aW1lTG9hZGVyLmNhbGxCYWNrUXVldWUuc2hpZnQoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hKFJ1bnRpbWVMb2FkZXIucnVudGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSW4gY2FzZSB1bnBrZyBmYWlscywgb3IgdGhlIHdhc20gd2FzIG5vdCBzdXBwb3J0ZWQsIHdlIHRyeSB0byBsb2FkIHRoZSBmYWxsYmFjayBtb2R1bGUgZnJvbSBqc2RlbGl2ci5cbiAgICAgICAgICAgIC8vIFRoaXMgYHJpdmVfZmFsbGJhY2sud2FzbWAgaXMgY29tcGlsZWQgdG8gc3VwcG9ydCBvbGRlciBhcmNoaXRlY3R1cmUuXG4gICAgICAgICAgICAvLyBUT0RPOiAoR29yZG9uKTogcHJlZW1wdGl2ZWx5IHRlc3QgYnJvd3NlciBzdXBwb3J0IGFuZCBsb2FkIHRoZSBjb3JyZWN0IHdhc20gZmlsZS4gVGhlbiB1c2UganNkZWx2ciBvbmx5IGlmIHVucGtnIGZhaWxzLlxuICAgICAgICAgICAgdmFyIGJhY2t1cEpzZGVsaXZyVXJsID0gXCJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL1wiLmNvbmNhdChwYWNrYWdlX2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5uYW1lLCBcIkBcIikuY29uY2F0KHBhY2thZ2VfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnZlcnNpb24sIFwiL3JpdmVfZmFsbGJhY2sud2FzbVwiKTtcbiAgICAgICAgICAgIGlmIChSdW50aW1lTG9hZGVyLndhc21VUkwudG9Mb3dlckNhc2UoKSAhPT0gYmFja3VwSnNkZWxpdnJVcmwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gbG9hZCBXQVNNIGZyb20gXCIuY29uY2F0KFJ1bnRpbWVMb2FkZXIud2FzbVVSTCwgXCIsIHRyeWluZyBqc2RlbGl2ciBhcyBhIGJhY2t1cFwiKSk7XG4gICAgICAgICAgICAgICAgUnVudGltZUxvYWRlci5zZXRXYXNtVXJsKGJhY2t1cEpzZGVsaXZyVXJsKTtcbiAgICAgICAgICAgICAgICBSdW50aW1lTG9hZGVyLmxvYWRSdW50aW1lKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiQ291bGQgbm90IGxvYWQgUml2ZSBXQVNNIGZpbGUgZnJvbSB1bnBrZyBvciBqc2RlbGl2ciwgbmV0d29yayBjb25uZWN0aW9uIG1heSBiZSBkb3duLCBvciBcXFxuICAgICAgICB5b3UgbWF5IG5lZWQgdG8gY2FsbCBzZXQgYSBuZXcgV0FTTSBzb3VyY2UgdmlhIFJ1bnRpbWVMb2FkZXIuc2V0V2FzbVVybCgpIGFuZCBjYWxsIFxcXG4gICAgICAgIFJ1bnRpbWVMb2FkZXIubG9hZFJ1bnRpbWUoKSBhZ2FpblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBQcm92aWRlcyBhIHJ1bnRpbWUgaW5zdGFuY2UgdmlhIGEgY2FsbGJhY2tcbiAgICBSdW50aW1lTG9hZGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIElmIGl0J3Mgbm90IGxvYWRpbmcsIHN0YXJ0IGxvYWRpbmcgcnVudGltZVxuICAgICAgICBpZiAoIVJ1bnRpbWVMb2FkZXIuaXNMb2FkaW5nKSB7XG4gICAgICAgICAgICBSdW50aW1lTG9hZGVyLmlzTG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICBSdW50aW1lTG9hZGVyLmxvYWRSdW50aW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFSdW50aW1lTG9hZGVyLnJ1bnRpbWUpIHtcbiAgICAgICAgICAgIFJ1bnRpbWVMb2FkZXIuY2FsbEJhY2tRdWV1ZS5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKFJ1bnRpbWVMb2FkZXIucnVudGltZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIFByb3ZpZGVzIGEgcnVudGltZSBpbnN0YW5jZSB2aWEgYSBwcm9taXNlXG4gICAgUnVudGltZUxvYWRlci5hd2FpdEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgIHJldHVybiBSdW50aW1lTG9hZGVyLmdldEluc3RhbmNlKGZ1bmN0aW9uIChyaXZlKSB7IHJldHVybiByZXNvbHZlKHJpdmUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBNYW51YWxseSBzZXRzIHRoZSB3YXNtIHVybFxuICAgIFJ1bnRpbWVMb2FkZXIuc2V0V2FzbVVybCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgUnVudGltZUxvYWRlci53YXNtVVJMID0gdXJsO1xuICAgIH07XG4gICAgLy8gRmxhZyB0byBpbmRpY2F0ZSB0aGF0IGxvYWRpbmcgaGFzIHN0YXJ0ZWQvY29tcGxldGVkXG4gICAgUnVudGltZUxvYWRlci5pc0xvYWRpbmcgPSBmYWxzZTtcbiAgICAvLyBMaXN0IG9mIGNhbGxiYWNrcyBmb3IgdGhlIHJ1bnRpbWUgdGhhdCBjb21lIGluIHdoaWxlIGxvYWRpbmdcbiAgICBSdW50aW1lTG9hZGVyLmNhbGxCYWNrUXVldWUgPSBbXTtcbiAgICAvLyBQYXRoIHRvIHRoZSBXYXNtIGZpbGU7IGRlZmF1bHQgcGF0aCB3b3JrcyBmb3IgdGVzdGluZyBvbmx5O1xuICAgIC8vIGlmIGVtYmVkZGVkIHdhc20gaXMgdXNlZCB0aGVuIHRoaXMgaXMgbmV2ZXIgdXNlZC5cbiAgICBSdW50aW1lTG9hZGVyLndhc21VUkwgPSBcImh0dHBzOi8vdW5wa2cuY29tL1wiLmNvbmNhdChwYWNrYWdlX2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5uYW1lLCBcIkBcIikuY29uY2F0KHBhY2thZ2VfanNvbl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLnZlcnNpb24sIFwiL3JpdmUud2FzbVwiKTtcbiAgICByZXR1cm4gUnVudGltZUxvYWRlcjtcbn0oKSk7XG5cbi8vICNlbmRyZWdpb25cbi8vICNyZWdpb24gc3RhdGUgbWFjaGluZXNcbnZhciBTdGF0ZU1hY2hpbmVJbnB1dFR5cGU7XG4oZnVuY3Rpb24gKFN0YXRlTWFjaGluZUlucHV0VHlwZSkge1xuICAgIFN0YXRlTWFjaGluZUlucHV0VHlwZVtTdGF0ZU1hY2hpbmVJbnB1dFR5cGVbXCJOdW1iZXJcIl0gPSA1Nl0gPSBcIk51bWJlclwiO1xuICAgIFN0YXRlTWFjaGluZUlucHV0VHlwZVtTdGF0ZU1hY2hpbmVJbnB1dFR5cGVbXCJUcmlnZ2VyXCJdID0gNThdID0gXCJUcmlnZ2VyXCI7XG4gICAgU3RhdGVNYWNoaW5lSW5wdXRUeXBlW1N0YXRlTWFjaGluZUlucHV0VHlwZVtcIkJvb2xlYW5cIl0gPSA1OV0gPSBcIkJvb2xlYW5cIjtcbn0pKFN0YXRlTWFjaGluZUlucHV0VHlwZSB8fCAoU3RhdGVNYWNoaW5lSW5wdXRUeXBlID0ge30pKTtcbi8qKlxuICogQW4gaW5wdXQgZm9yIGEgc3RhdGUgbWFjaGluZVxuICovXG52YXIgU3RhdGVNYWNoaW5lSW5wdXQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RhdGVNYWNoaW5lSW5wdXQodHlwZSwgcnVudGltZUlucHV0KSB7XG4gICAgICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMucnVudGltZUlucHV0ID0gcnVudGltZUlucHV0O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVNYWNoaW5lSW5wdXQucHJvdG90eXBlLCBcIm5hbWVcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgaW5wdXRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucnVudGltZUlucHV0Lm5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVNYWNoaW5lSW5wdXQucHJvdG90eXBlLCBcInZhbHVlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhlIGlucHV0XG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJ1bnRpbWVJbnB1dC52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoZSBpbnB1dFxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucnVudGltZUlucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBGaXJlcyBhIHRyaWdnZXI7IGRvZXMgbm90aGluZyBvbiBOdW1iZXIgb3IgQm9vbGVhbiBpbnB1dCB0eXBlc1xuICAgICAqL1xuICAgIFN0YXRlTWFjaGluZUlucHV0LnByb3RvdHlwZS5maXJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSBTdGF0ZU1hY2hpbmVJbnB1dFR5cGUuVHJpZ2dlcikge1xuICAgICAgICAgICAgdGhpcy5ydW50aW1lSW5wdXQuZmlyZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3RhdGVNYWNoaW5lSW5wdXQ7XG59KCkpO1xuXG52YXIgUml2ZUV2ZW50VHlwZTtcbihmdW5jdGlvbiAoUml2ZUV2ZW50VHlwZSkge1xuICAgIFJpdmVFdmVudFR5cGVbUml2ZUV2ZW50VHlwZVtcIkdlbmVyYWxcIl0gPSAxMjhdID0gXCJHZW5lcmFsXCI7XG4gICAgUml2ZUV2ZW50VHlwZVtSaXZlRXZlbnRUeXBlW1wiT3BlblVybFwiXSA9IDEzMV0gPSBcIk9wZW5VcmxcIjtcbn0pKFJpdmVFdmVudFR5cGUgfHwgKFJpdmVFdmVudFR5cGUgPSB7fSkpO1xudmFyIFN0YXRlTWFjaGluZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lIHJ1bnRpbWUgc3RhdGUgbWFjaGluZSBvYmplY3RcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgcnVudGltZSBzdGF0ZSBtYWNoaW5lIGluc3RhbmNlIG9iamVjdFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YXRlTWFjaGluZShzdGF0ZU1hY2hpbmUsIHJ1bnRpbWUsIHBsYXlpbmcsIGFydGJvYXJkKSB7XG4gICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lID0gc3RhdGVNYWNoaW5lO1xuICAgICAgICB0aGlzLnBsYXlpbmcgPSBwbGF5aW5nO1xuICAgICAgICB0aGlzLmFydGJvYXJkID0gYXJ0Ym9hcmQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZXMgdGhlIGlucHV0cyBmcm9tIHRoZSBydW50aW1lXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmlucHV0cyA9IFtdO1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IHJ1bnRpbWUuU3RhdGVNYWNoaW5lSW5zdGFuY2Uoc3RhdGVNYWNoaW5lLCBhcnRib2FyZCk7XG4gICAgICAgIHRoaXMuaW5pdElucHV0cyhydW50aW1lKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0YXRlTWFjaGluZS5wcm90b3R5cGUsIFwibmFtZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVNYWNoaW5lLm5hbWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhdGVNYWNoaW5lLnByb3RvdHlwZSwgXCJzdGF0ZXNDaGFuZ2VkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgYSBsaXN0IG9mIHN0YXRlIG5hbWVzIHRoYXQgaGF2ZSBjaGFuZ2VkIG9uIHRoaXMgZnJhbWVcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG5hbWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaW5zdGFuY2Uuc3RhdGVDaGFuZ2VkQ291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmFtZXMucHVzaCh0aGlzLmluc3RhbmNlLnN0YXRlQ2hhbmdlZE5hbWVCeUluZGV4KGkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuYW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEFkdmFuY2VzIHRoZSBzdGF0ZSBtYWNoaW5lIGluc3RhbmNlIGJ5IGEgZ2l2ZW4gdGltZS5cbiAgICAgKiBAcGFyYW0gdGltZSAtIHRoZSB0aW1lIHRvIGFkdmFuY2UgdGhlIGFuaW1hdGlvbiBieSBpbiBzZWNvbmRzXG4gICAgICovXG4gICAgU3RhdGVNYWNoaW5lLnByb3RvdHlwZS5hZHZhbmNlID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5hZHZhbmNlKHRpbWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGV2ZW50cyByZXBvcnRlZCBmcm9tIHRoZSBsYXN0IGFkdmFuY2UgY2FsbFxuICAgICAqIEByZXR1cm5zIE51bWJlciBvZiBldmVudHMgcmVwb3J0ZWRcbiAgICAgKi9cbiAgICBTdGF0ZU1hY2hpbmUucHJvdG90eXBlLnJlcG9ydGVkRXZlbnRDb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UucmVwb3J0ZWRFdmVudENvdW50KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgUml2ZUV2ZW50IG9iamVjdCBlbWl0dGVkIGZyb20gdGhlIGxhc3QgYWR2YW5jZSBjYWxsIGF0IHRoZSBnaXZlbiBpbmRleFxuICAgICAqIG9mIGEgbGlzdCBvZiBwb3RlbnRpYWxseSBtdWx0aXBsZSBldmVudHMuIElmIGFuIGV2ZW50IGF0IHRoZSBpbmRleCBpcyBub3QgZm91bmQsXG4gICAgICogdW5kZWZpbmVkIGlzIHJldHVybmVkLlxuICAgICAqIEBwYXJhbSBpIGluZGV4IG9mIHRoZSBldmVudCByZXBvcnRlZCBpbiBhIGxpc3Qgb2YgcG90ZW50aWFsbHkgbXVsdGlwbGUgZXZlbnRzXG4gICAgICogQHJldHVybnMgUml2ZUV2ZW50IG9yIGV4dGVuZGVkIFJpdmVFdmVudCBvYmplY3QgcmV0dXJuZWQsIG9yIHVuZGVmaW5lZFxuICAgICAqL1xuICAgIFN0YXRlTWFjaGluZS5wcm90b3R5cGUucmVwb3J0ZWRFdmVudEF0ID0gZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2UucmVwb3J0ZWRFdmVudEF0KGkpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmV0Y2hlcyByZWZlcmVuY2VzIHRvIHRoZSBzdGF0ZSBtYWNoaW5lJ3MgaW5wdXRzIGFuZCBjYWNoZXMgdGhlbVxuICAgICAqIEBwYXJhbSBydW50aW1lIGFuIGluc3RhbmNlIG9mIHRoZSBydW50aW1lOyBuZWVkZWQgZm9yIHRoZSBTTUlJbnB1dCB0eXBlc1xuICAgICAqL1xuICAgIFN0YXRlTWFjaGluZS5wcm90b3R5cGUuaW5pdElucHV0cyA9IGZ1bmN0aW9uIChydW50aW1lKSB7XG4gICAgICAgIC8vIEZldGNoIHRoZSBpbnB1dHMgZnJvbSB0aGUgcnVudGltZSBpZiB3ZSBkb24ndCBoYXZlIHRoZW1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmluc3RhbmNlLmlucHV0Q291bnQoKTsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLmluc3RhbmNlLmlucHV0KGkpO1xuICAgICAgICAgICAgdGhpcy5pbnB1dHMucHVzaCh0aGlzLm1hcFJ1bnRpbWVJbnB1dChpbnB1dCwgcnVudGltZSkpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYXBzIGEgcnVudGltZSBpbnB1dCB0byBpdCdzIGFwcHJvcHJpYXRlIHR5cGVcbiAgICAgKiBAcGFyYW0gaW5wdXRcbiAgICAgKi9cbiAgICBTdGF0ZU1hY2hpbmUucHJvdG90eXBlLm1hcFJ1bnRpbWVJbnB1dCA9IGZ1bmN0aW9uIChpbnB1dCwgcnVudGltZSkge1xuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gcnVudGltZS5TTUlJbnB1dC5ib29sKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YXRlTWFjaGluZUlucHV0KFN0YXRlTWFjaGluZUlucHV0VHlwZS5Cb29sZWFuLCBpbnB1dC5hc0Jvb2woKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQudHlwZSA9PT0gcnVudGltZS5TTUlJbnB1dC5udW1iZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgU3RhdGVNYWNoaW5lSW5wdXQoU3RhdGVNYWNoaW5lSW5wdXRUeXBlLk51bWJlciwgaW5wdXQuYXNOdW1iZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaW5wdXQudHlwZSA9PT0gcnVudGltZS5TTUlJbnB1dC50cmlnZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFN0YXRlTWFjaGluZUlucHV0KFN0YXRlTWFjaGluZUlucHV0VHlwZS5UcmlnZ2VyLCBpbnB1dC5hc1RyaWdnZXIoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlbGV0ZXMgdGhlIGJhY2tpbmcgV2FzbSBzdGF0ZSBtYWNoaW5lIGluc3RhbmNlOyBvbmNlIHRoaXMgaXMgY2FsbGVkLCB0aGlzXG4gICAgICogc3RhdGUgbWFjaGluZSBpcyBubyBtb3JlLlxuICAgICAqL1xuICAgIFN0YXRlTWFjaGluZS5wcm90b3R5cGUuY2xlYW51cCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pbnN0YW5jZS5kZWxldGUoKTtcbiAgICB9O1xuICAgIHJldHVybiBTdGF0ZU1hY2hpbmU7XG59KCkpO1xuLy8gI2VuZHJlZ2lvblxuLy8gI3JlZ2lvbiBhbmltYXRvclxuLyoqXG4gKiBNYW5hZ2VzIGFuaW1hdGlvblxuICovXG52YXIgQW5pbWF0b3IgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBhbmltYXRvclxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSBydW50aW1lIFJpdmUgcnVudGltZTsgbmVlZGVkIHRvIGluc3RhbmNlIGFuaW1hdGlvbnMgJiBzdGF0ZSBtYWNoaW5lc1xuICAgICAqIEBwYXJhbSBhcnRib2FyZCB0aGUgYXJ0Ym9hcmQgdGhhdCBob2xkcyBhbGwgYW5pbWF0aW9ucyBhbmQgc3RhdGUgbWFjaGluZXNcbiAgICAgKiBAcGFyYW0gYW5pbWF0aW9ucyBvcHRpb25hbCBsaXN0IG9mIGFuaW1hdGlvbnNcbiAgICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lcyBvcHRpb25hbCBsaXN0IG9mIHN0YXRlIG1hY2hpbmVzXG4gICAgICovXG4gICAgZnVuY3Rpb24gQW5pbWF0b3IocnVudGltZSwgYXJ0Ym9hcmQsIGV2ZW50TWFuYWdlciwgYW5pbWF0aW9ucywgc3RhdGVNYWNoaW5lcykge1xuICAgICAgICBpZiAoYW5pbWF0aW9ucyA9PT0gdm9pZCAwKSB7IGFuaW1hdGlvbnMgPSBbXTsgfVxuICAgICAgICBpZiAoc3RhdGVNYWNoaW5lcyA9PT0gdm9pZCAwKSB7IHN0YXRlTWFjaGluZXMgPSBbXTsgfVxuICAgICAgICB0aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAgICAgICB0aGlzLmFydGJvYXJkID0gYXJ0Ym9hcmQ7XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyID0gZXZlbnRNYW5hZ2VyO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbnMgPSBhbmltYXRpb25zO1xuICAgICAgICB0aGlzLnN0YXRlTWFjaGluZXMgPSBzdGF0ZU1hY2hpbmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFuaW1hdGlvbnMgYW5kIHN0YXRlIG1hY2hpbmVzIGJ5IHRoZWlyIG5hbWVzLiBJZiBuYW1lcyBhcmUgc2hhcmVkXG4gICAgICogYmV0d2VlbiBhbmltYXRpb25zICYgc3RhdGUgbWFjaGluZXMsIHRoZW4gdGhlIGZpcnN0IG9uZSBmb3VuZCB3aWxsIGJlXG4gICAgICogY3JlYXRlZC4gQmVzdCBub3QgdG8gdXNlIHRoZSBzYW1lIG5hbWVzIGZvciB0aGVzZSBpbiB5b3VyIFJpdmUgZmlsZS5cbiAgICAgKiBAcGFyYW0gYW5pbWF0YWJsZSB0aGUgbmFtZShzKSBvZiBhbmltYXRpb25zIGFuZCBzdGF0ZSBtYWNoaW5lcyB0byBhZGRcbiAgICAgKiBAcmV0dXJucyBhIGxpc3Qgb2YgbmFtZXMgb2YgdGhlIHBsYXlpbmcgYW5pbWF0aW9ucyBhbmQgc3RhdGUgbWFjaGluZXNcbiAgICAgKi9cbiAgICBBbmltYXRvci5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGFuaW1hdGFibGVzLCBwbGF5aW5nLCBmaXJlRXZlbnQpIHtcbiAgICAgICAgaWYgKGZpcmVFdmVudCA9PT0gdm9pZCAwKSB7IGZpcmVFdmVudCA9IHRydWU7IH1cbiAgICAgICAgYW5pbWF0YWJsZXMgPSBtYXBUb1N0cmluZ0FycmF5KGFuaW1hdGFibGVzKTtcbiAgICAgICAgLy8gSWYgYW5pbWF0YWJsZXMgaXMgZW1wdHksIHBsYXkgb3IgcGF1c2UgZXZlcnl0aGluZ1xuICAgICAgICBpZiAoYW5pbWF0YWJsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYSkgeyByZXR1cm4gKGEucGxheWluZyA9IHBsYXlpbmcpOyB9KTtcbiAgICAgICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lcy5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldHVybiAobS5wbGF5aW5nID0gcGxheWluZyk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUGxheS9wYXVzZSBhbHJlYWR5IGluc3RhbmNlZCBpdGVtcywgb3IgY3JlYXRlIG5ldyBpbnN0YW5jZXNcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZWRBbmltYXRpb25OYW1lcyA9IHRoaXMuYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEubmFtZTsgfSk7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2VkTWFjaGluZU5hbWVzID0gdGhpcy5zdGF0ZU1hY2hpbmVzLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5uYW1lOyB9KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgYUluZGV4ID0gaW5zdGFuY2VkQW5pbWF0aW9uTmFtZXMuaW5kZXhPZihhbmltYXRhYmxlc1tpXSk7XG4gICAgICAgICAgICAgICAgdmFyIG1JbmRleCA9IGluc3RhbmNlZE1hY2hpbmVOYW1lcy5pbmRleE9mKGFuaW1hdGFibGVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoYUluZGV4ID49IDAgfHwgbUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgaW5zdGFuY2VkLCBwbGF5L3BhdXNlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnNbYUluZGV4XS5wbGF5aW5nID0gcGxheWluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0YXRlIG1hY2hpbmUgaXMgaW5zdGFuY2VkLCBwbGF5L3BhdXNlIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZXNbbUluZGV4XS5wbGF5aW5nID0gcGxheWluZztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGNyZWF0ZSBhIG5ldyBhbmltYXRpb24gaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFuaW0gPSB0aGlzLmFydGJvYXJkLmFuaW1hdGlvbkJ5TmFtZShhbmltYXRhYmxlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhbmltKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3QW5pbWF0aW9uID0gbmV3IF9hbmltYXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5BbmltYXRpb24oYW5pbSwgdGhpcy5hcnRib2FyZCwgdGhpcy5ydW50aW1lLCBwbGF5aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERpc3BsYXkgdGhlIGZpcnN0IGZyYW1lIG9mIHRoZSBzcGVjaWZpZWQgYW5pbWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdBbmltYXRpb24uYWR2YW5jZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FuaW1hdGlvbi5hcHBseSgxLjApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb25zLnB1c2gobmV3QW5pbWF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBjcmVhdGUgYSBuZXcgc3RhdGUgbWFjaGluZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNtID0gdGhpcy5hcnRib2FyZC5zdGF0ZU1hY2hpbmVCeU5hbWUoYW5pbWF0YWJsZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1N0YXRlTWFjaGluZSA9IG5ldyBTdGF0ZU1hY2hpbmUoc20sIHRoaXMucnVudGltZSwgcGxheWluZywgdGhpcy5hcnRib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZU1hY2hpbmVzLnB1c2gobmV3U3RhdGVNYWNoaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBGaXJlIHBsYXkvcGF1c2VkIGV2ZW50cyBmb3IgYW5pbWF0aW9uc1xuICAgICAgICBpZiAoZmlyZUV2ZW50KSB7XG4gICAgICAgICAgICBpZiAocGxheWluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBFdmVudFR5cGUuUGxheSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5wbGF5aW5nLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEV2ZW50VHlwZS5QYXVzZSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcy5wYXVzZWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBsYXlpbmcgPyB0aGlzLnBsYXlpbmcgOiB0aGlzLnBhdXNlZDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFkZHMgbGluZWFyIGFuaW1hdGlvbnMgYnkgdGhlaXIgbmFtZXMuXG4gICAgICogQHBhcmFtIGFuaW1hdGFibGVzIHRoZSBuYW1lKHMpIG9mIGFuaW1hdGlvbnMgdG8gYWRkXG4gICAgICogQHBhcmFtIHBsYXlpbmcgd2hldGhlciBhbmltYXRpb25zIHNob3VsZCBwbGF5IG9uIGluc3RhbnRpYXRpb25cbiAgICAgKi9cbiAgICBBbmltYXRvci5wcm90b3R5cGUuaW5pdExpbmVhckFuaW1hdGlvbnMgPSBmdW5jdGlvbiAoYW5pbWF0YWJsZXMsIHBsYXlpbmcpIHtcbiAgICAgICAgLy8gUGxheS9wYXVzZSBhbHJlYWR5IGluc3RhbmNlZCBpdGVtcywgb3IgY3JlYXRlIG5ldyBpbnN0YW5jZXNcbiAgICAgICAgLy8gVGhpcyB2YWxpZGF0aW9uIGlzIGtlcHQgdG8gbWFpbnRhaW4gY29tcGF0aWJpbGl0eSB3aXRoIGN1cnJlbnQgYmVoYXZpb3IuXG4gICAgICAgIC8vIEJ1dCBnaXZlbiB0aGF0IGl0IHRoaXMgaXMgY2FsbGVkIGR1cmluZyBhcnRib2FyZCBpbml0aWFsaXphdGlvblxuICAgICAgICAvLyBpdCBzaG91bGQgcHJvYmFibHkgYmUgc2FmZSB0byByZW1vdmUuXG4gICAgICAgIHZhciBpbnN0YW5jZWRBbmltYXRpb25OYW1lcyA9IHRoaXMuYW5pbWF0aW9ucy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEubmFtZTsgfSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYW5pbWF0YWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhSW5kZXggPSBpbnN0YW5jZWRBbmltYXRpb25OYW1lcy5pbmRleE9mKGFuaW1hdGFibGVzW2ldKTtcbiAgICAgICAgICAgIGlmIChhSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uc1thSW5kZXhdLnBsYXlpbmcgPSBwbGF5aW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVHJ5IHRvIGNyZWF0ZSBhIG5ldyBhbmltYXRpb24gaW5zdGFuY2VcbiAgICAgICAgICAgICAgICB2YXIgYW5pbSA9IHRoaXMuYXJ0Ym9hcmQuYW5pbWF0aW9uQnlOYW1lKGFuaW1hdGFibGVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3QW5pbWF0aW9uID0gbmV3IF9hbmltYXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5BbmltYXRpb24oYW5pbSwgdGhpcy5hcnRib2FyZCwgdGhpcy5ydW50aW1lLCBwbGF5aW5nKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGlzcGxheSB0aGUgZmlyc3QgZnJhbWUgb2YgdGhlIHNwZWNpZmllZCBhbmltYXRpb25cbiAgICAgICAgICAgICAgICAgICAgbmV3QW5pbWF0aW9uLmFkdmFuY2UoMCk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0FuaW1hdGlvbi5hcHBseSgxLjApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbnMucHVzaChuZXdBbmltYXRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBzdGF0ZSBtYWNoaW5lcyBieSB0aGVpciBuYW1lcy5cbiAgICAgKiBAcGFyYW0gYW5pbWF0YWJsZXMgdGhlIG5hbWUocykgb2Ygc3RhdGUgbWFjaGluZXMgdG8gYWRkXG4gICAgICogQHBhcmFtIHBsYXlpbmcgd2hldGhlciBzdGF0ZSBtYWNoaW5lcyBzaG91bGQgcGxheSBvbiBpbnN0YW50aWF0aW9uXG4gICAgICovXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLmluaXRTdGF0ZU1hY2hpbmVzID0gZnVuY3Rpb24gKGFuaW1hdGFibGVzLCBwbGF5aW5nKSB7XG4gICAgICAgIC8vIFBsYXkvcGF1c2UgYWxyZWFkeSBpbnN0YW5jZWQgaXRlbXMsIG9yIGNyZWF0ZSBuZXcgaW5zdGFuY2VzXG4gICAgICAgIC8vIFRoaXMgdmFsaWRhdGlvbiBpcyBrZXB0IHRvIG1haW50YWluIGNvbXBhdGliaWxpdHkgd2l0aCBjdXJyZW50IGJlaGF2aW9yLlxuICAgICAgICAvLyBCdXQgZ2l2ZW4gdGhhdCBpdCB0aGlzIGlzIGNhbGxlZCBkdXJpbmcgYXJ0Ym9hcmQgaW5pdGlhbGl6YXRpb25cbiAgICAgICAgLy8gaXQgc2hvdWxkIHByb2JhYmx5IGJlIHNhZmUgdG8gcmVtb3ZlLlxuICAgICAgICB2YXIgaW5zdGFuY2VkU3RhdGVNYWNoaW5lTmFtZXMgPSB0aGlzLnN0YXRlTWFjaGluZXMubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm5hbWU7IH0pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuaW1hdGFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYUluZGV4ID0gaW5zdGFuY2VkU3RhdGVNYWNoaW5lTmFtZXMuaW5kZXhPZihhbmltYXRhYmxlc1tpXSk7XG4gICAgICAgICAgICBpZiAoYUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZXNbYUluZGV4XS5wbGF5aW5nID0gcGxheWluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRyeSB0byBjcmVhdGUgYSBuZXcgc3RhdGUgbWFjaGluZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHZhciBzbSA9IHRoaXMuYXJ0Ym9hcmQuc3RhdGVNYWNoaW5lQnlOYW1lKGFuaW1hdGFibGVzW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAoc20pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1N0YXRlTWFjaGluZSA9IG5ldyBTdGF0ZU1hY2hpbmUoc20sIHRoaXMucnVudGltZSwgcGxheWluZywgdGhpcy5hcnRib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVNYWNoaW5lcy5wdXNoKG5ld1N0YXRlTWFjaGluZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiBvcmRlciB0byBtYWludGFpbiBjb21wYXRpYmlsaXR5IHdpdGggY3VycmVudCBiZWhhdmlvciwgaWYgYSBzdGF0ZSBtYWNoaW5lIGlzIG5vdCBmb3VuZFxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBsb29rIGZvciBhbiBhbmltYXRpb24gd2l0aCB0aGUgc2FtZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdExpbmVhckFuaW1hdGlvbnMoW2FuaW1hdGFibGVzW2ldXSwgcGxheWluZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBQbGF5IHRoZSBuYW1lZCBhbmltYXRpb25zL3N0YXRlIG1hY2hpbmVzXG4gICAgICogQHBhcmFtIGFuaW1hdGFibGVzIHRoZSBuYW1lcyBvZiB0aGUgYW5pbWF0aW9ucy9tYWNoaW5lcyB0byBwbGF5OyBwbGF5cyBhbGwgaWYgZW1wdHlcbiAgICAgKiBAcmV0dXJucyBhIGxpc3Qgb2YgdGhlIHBsYXlpbmcgaXRlbXNcbiAgICAgKi9cbiAgICBBbmltYXRvci5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIChhbmltYXRhYmxlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGQoYW5pbWF0YWJsZXMsIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUGF1c2VzIG5hbWVkIGFuaW1hdGlvbnMgYW5kIHN0YXRlIG1hY2hpbmVzLCBvciBldmVyeXRoaW5nIGlmIG5vdGhpbmcgaXNcbiAgICAgKiBzcGVjaWZpZWRcbiAgICAgKiBAcGFyYW0gYW5pbWF0YWJsZXMgbmFtZXMgb2YgdGhlIGFuaW1hdGlvbnMgYW5kIHN0YXRlIG1hY2hpbmVzIHRvIHBhdXNlXG4gICAgICogQHJldHVybnMgYSBsaXN0IG9mIG5hbWVzIG9mIHRoZSBhbmltYXRpb25zIGFuZCBzdGF0ZSBtYWNoaW5lcyBwYXVzZWRcbiAgICAgKi9cbiAgICBBbmltYXRvci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoYW5pbWF0YWJsZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGFuaW1hdGFibGVzLCBmYWxzZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGltZSBvZiBuYW1lZCBhbmltYXRpb25zXG4gICAgICogQHBhcmFtIGFuaW1hdGlvbnMgbmFtZXMgb2YgdGhlIGFuaW1hdGlvbnMgdG8gc2NydWJcbiAgICAgKiBAcGFyYW0gdmFsdWUgdGltZSBzY3J1YiB2YWx1ZSwgYSBmbG9hdGluZyBwb2ludCBudW1iZXIgdG8gd2hpY2ggdGhlIHBsYXloZWFkIGlzIGp1bXBlZFxuICAgICAqIEByZXR1cm5zIGEgbGlzdCBvZiBuYW1lcyBvZiB0aGUgYW5pbWF0aW9ucyB0aGF0IHdlcmUgc2NydWJiZWRcbiAgICAgKi9cbiAgICBBbmltYXRvci5wcm90b3R5cGUuc2NydWIgPSBmdW5jdGlvbiAoYW5pbWF0YWJsZXMsIHZhbHVlKSB7XG4gICAgICAgIHZhciBmb3JTY3J1YmJpbmcgPSB0aGlzLmFuaW1hdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICByZXR1cm4gYW5pbWF0YWJsZXMuaW5jbHVkZXMoYS5uYW1lKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvclNjcnViYmluZy5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7IHJldHVybiAoYS5zY3J1YlRvID0gdmFsdWUpOyB9KTtcbiAgICAgICAgcmV0dXJuIGZvclNjcnViYmluZy5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEubmFtZTsgfSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0b3IucHJvdG90eXBlLCBcInBsYXlpbmdcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIGxpc3Qgb2YgbmFtZXMgb2YgYWxsIGFuaW1hdGlvbnMgYW5kIHN0YXRlIG1hY2hpbmVzIGN1cnJlbnRseVxuICAgICAgICAgKiBwbGF5aW5nXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdGlvbnNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLnBsYXlpbmc7IH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5uYW1lOyB9KVxuICAgICAgICAgICAgICAgIC5jb25jYXQodGhpcy5zdGF0ZU1hY2hpbmVzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5wbGF5aW5nOyB9KS5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubmFtZTsgfSkpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdG9yLnByb3RvdHlwZSwgXCJwYXVzZWRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyBhIGxpc3Qgb2YgbmFtZXMgb2YgYWxsIGFuaW1hdGlvbnMgYW5kIHN0YXRlIG1hY2hpbmVzIGN1cnJlbnRseVxuICAgICAgICAgKiBwYXVzZWRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFhLnBsYXlpbmc7IH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5uYW1lOyB9KVxuICAgICAgICAgICAgICAgIC5jb25jYXQodGhpcy5zdGF0ZU1hY2hpbmVzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gIW0ucGxheWluZzsgfSkubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm5hbWU7IH0pKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFN0b3BzIGFuZCByZW1vdmVzIGFsbCBuYW1lZCBhbmltYXRpb25zIGFuZCBzdGF0ZSBtYWNoaW5lc1xuICAgICAqIEBwYXJhbSBhbmltYXRhYmxlcyBhbmltYXRpb25zIGFuZCBzdGF0ZSBtYWNoaW5lcyB0byByZW1vdmVcbiAgICAgKiBAcmV0dXJucyBhIGxpc3Qgb2YgbmFtZXMgb2YgcmVtb3ZlZCBpdGVtc1xuICAgICAqL1xuICAgIEFuaW1hdG9yLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKGFuaW1hdGFibGVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGFuaW1hdGFibGVzID0gbWFwVG9TdHJpbmdBcnJheShhbmltYXRhYmxlcyk7XG4gICAgICAgIC8vIElmIG5vdGhpbmcncyBzcGVjaWZpZWQsIHdpcGUgdGhlbSBvdXQsIGFsbCBvZiB0aGVtXG4gICAgICAgIHZhciByZW1vdmVkTmFtZXMgPSBbXTtcbiAgICAgICAgLy8gU3RvcCBldmVyeXRoaW5nXG4gICAgICAgIGlmIChhbmltYXRhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJlbW92ZWROYW1lcyA9IHRoaXMuYW5pbWF0aW9uc1xuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEubmFtZTsgfSlcbiAgICAgICAgICAgICAgICAuY29uY2F0KHRoaXMuc3RhdGVNYWNoaW5lcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubmFtZTsgfSkpO1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgYmVmb3JlIGVtcHR5aW5nIHRoZSBhcnJheXNcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmNsZWFudXAoKTsgfSk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZXMuZm9yRWFjaChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5jbGVhbnVwKCk7IH0pO1xuICAgICAgICAgICAgLy8gRW1wdHkgb3V0IHRoZSBhcnJheXNcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9ucy5zcGxpY2UoMCwgdGhpcy5hbmltYXRpb25zLmxlbmd0aCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZXMuc3BsaWNlKDAsIHRoaXMuc3RhdGVNYWNoaW5lcy5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gUmVtb3ZlIG9ubHkgdGhlIG5hbWVkIGFuaW1hdGlvbnMvc3RhdGUgbWFjaGluZXNcbiAgICAgICAgICAgIHZhciBhbmltYXRpb25zVG9SZW1vdmUgPSB0aGlzLmFuaW1hdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGFibGVzLmluY2x1ZGVzKGEubmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGFuaW1hdGlvbnNUb1JlbW92ZS5mb3JFYWNoKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgYS5jbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0aW9ucy5zcGxpY2UoX3RoaXMuYW5pbWF0aW9ucy5pbmRleE9mKGEpLCAxKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdmFyIG1hY2hpbmVzVG9SZW1vdmUgPSB0aGlzLnN0YXRlTWFjaGluZXMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFuaW1hdGFibGVzLmluY2x1ZGVzKG0ubmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1hY2hpbmVzVG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgIG0uY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIF90aGlzLnN0YXRlTWFjaGluZXMuc3BsaWNlKF90aGlzLnN0YXRlTWFjaGluZXMuaW5kZXhPZihtKSwgMSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJlbW92ZWROYW1lcyA9IGFuaW1hdGlvbnNUb1JlbW92ZVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEubmFtZTsgfSlcbiAgICAgICAgICAgICAgICAuY29uY2F0KG1hY2hpbmVzVG9SZW1vdmUubWFwKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm5hbWU7IH0pKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlKHtcbiAgICAgICAgICAgIHR5cGU6IEV2ZW50VHlwZS5TdG9wLFxuICAgICAgICAgICAgZGF0YTogcmVtb3ZlZE5hbWVzLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSBsaXN0IG9mIGFuaW1hdGlvbnMgcmVtb3ZlZFxuICAgICAgICByZXR1cm4gcmVtb3ZlZE5hbWVzO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFuaW1hdG9yLnByb3RvdHlwZSwgXCJpc1BsYXlpbmdcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIGF0IGxlYXN0IG9uZSBhbmltYXRpb24gaXMgYWN0aXZlXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAodGhpcy5hbmltYXRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXJyKSB7IHJldHVybiBhY2MgfHwgY3Vyci5wbGF5aW5nOyB9LCBmYWxzZSkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlTWFjaGluZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGN1cnIpIHsgcmV0dXJuIGFjYyB8fCBjdXJyLnBsYXlpbmc7IH0sIGZhbHNlKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQW5pbWF0b3IucHJvdG90eXBlLCBcImlzUGF1c2VkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiBhbGwgYW5pbWF0aW9ucyBhcmUgcGF1c2VkIGFuZCB0aGVyZSdzIGF0IGxlYXN0IG9uZSBhbmltYXRpb25cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICghdGhpcy5pc1BsYXlpbmcgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5hbmltYXRpb25zLmxlbmd0aCA+IDAgfHwgdGhpcy5zdGF0ZU1hY2hpbmVzLmxlbmd0aCA+IDApKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBbmltYXRvci5wcm90b3R5cGUsIFwiaXNTdG9wcGVkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBhcmUgbm8gcGxheWluZyBvciBwYXVzZWQgYW5pbWF0aW9ucy9zdGF0ZSBtYWNoaW5lc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hbmltYXRpb25zLmxlbmd0aCA9PT0gMCAmJiB0aGlzLnN0YXRlTWFjaGluZXMubGVuZ3RoID09PSAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogSWYgdGhlcmUgYXJlIG5vIGFuaW1hdGlvbnMgb3Igc3RhdGUgbWFjaGluZXMsIGFkZCB0aGUgZmlyc3Qgb25lIGZvdW5kXG4gICAgICogQHJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGFuaW1hdGlvbiBvciBzdGF0ZSBtYWNoaW5lIGluc3RhbmNlZFxuICAgICAqL1xuICAgIEFuaW1hdG9yLnByb3RvdHlwZS5hdExlYXN0T25lID0gZnVuY3Rpb24gKHBsYXlpbmcsIGZpcmVFdmVudCkge1xuICAgICAgICBpZiAoZmlyZUV2ZW50ID09PSB2b2lkIDApIHsgZmlyZUV2ZW50ID0gdHJ1ZTsgfVxuICAgICAgICB2YXIgaW5zdGFuY2VkTmFtZTtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9ucy5sZW5ndGggPT09IDAgJiYgdGhpcy5zdGF0ZU1hY2hpbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJ0Ym9hcmQuYW5pbWF0aW9uQ291bnQoKSA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGZpcnN0IGFuaW1hdGlvblxuICAgICAgICAgICAgICAgIHRoaXMuYWRkKFsoaW5zdGFuY2VkTmFtZSA9IHRoaXMuYXJ0Ym9hcmQuYW5pbWF0aW9uQnlJbmRleCgwKS5uYW1lKV0sIHBsYXlpbmcsIGZpcmVFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmFydGJvYXJkLnN0YXRlTWFjaGluZUNvdW50KCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBmaXJzdCBzdGF0ZSBtYWNoaW5lXG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoWyhpbnN0YW5jZWROYW1lID0gdGhpcy5hcnRib2FyZC5zdGF0ZU1hY2hpbmVCeUluZGV4KDApLm5hbWUpXSwgcGxheWluZywgZmlyZUV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5zdGFuY2VkTmFtZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbnkgYW5pbWF0aW9ucyBoYXZlIGxvb3BlZCBhbmQgaWYgc28sIGZpcmUgdGhlIGFwcHJvcHJpYXRlIGV2ZW50XG4gICAgICovXG4gICAgQW5pbWF0b3IucHJvdG90eXBlLmhhbmRsZUxvb3BpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSB0aGlzLmFuaW1hdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLnBsYXlpbmc7IH0pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IF9hW19pXTtcbiAgICAgICAgICAgIC8vIEVtaXQgaWYgdGhlIGFuaW1hdGlvbiBsb29wZWRcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24ubG9vcFZhbHVlID09PSAwICYmIGFuaW1hdGlvbi5sb29wQ291bnQpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb24ubG9vcENvdW50ID0gMDtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgb25lLXNob3Q7IGlmIGl0IGhhcyBlbmRlZCwgZGVsZXRlIHRoZSBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcChhbmltYXRpb24ubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhbmltYXRpb24ubG9vcFZhbHVlID09PSAxICYmIGFuaW1hdGlvbi5sb29wQ291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLkxvb3AsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHsgYW5pbWF0aW9uOiBhbmltYXRpb24ubmFtZSwgdHlwZTogTG9vcFR5cGUuTG9vcCB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5sb29wQ291bnQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gV2FzbSBpbmRpY2F0ZXMgYSBsb29wIGF0IGVhY2ggdGltZSB0aGUgYW5pbWF0aW9uXG4gICAgICAgICAgICAvLyBjaGFuZ2VzIGRpcmVjdGlvbiwgc28gYSBmdWxsIGxvb3AvbGFwIG9jY3VycyBldmVyeVxuICAgICAgICAgICAgLy8gdHdvIGxvb3AgY291bnRzXG4gICAgICAgICAgICBlbHNlIGlmIChhbmltYXRpb24ubG9vcFZhbHVlID09PSAyICYmIGFuaW1hdGlvbi5sb29wQ291bnQgPiAxKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEV2ZW50VHlwZS5Mb29wLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB7IGFuaW1hdGlvbjogYW5pbWF0aW9uLm5hbWUsIHR5cGU6IExvb3BUeXBlLlBpbmdQb25nIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uLmxvb3BDb3VudCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBzdGF0ZXMgaGF2ZSBjaGFuZ2VkIGluIHN0YXRlIG1hY2hpbmVzIGFuZCBmaXJlcyBhIHN0YXRlY2hhbmdlXG4gICAgICogZXZlbnRcbiAgICAgKi9cbiAgICBBbmltYXRvci5wcm90b3R5cGUuaGFuZGxlU3RhdGVDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc3RhdGVzQ2hhbmdlZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gdGhpcy5zdGF0ZU1hY2hpbmVzLmZpbHRlcihmdW5jdGlvbiAoc20pIHsgcmV0dXJuIHNtLnBsYXlpbmc7IH0pOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgdmFyIHN0YXRlTWFjaGluZSA9IF9hW19pXTtcbiAgICAgICAgICAgIHN0YXRlc0NoYW5nZWQucHVzaC5hcHBseShzdGF0ZXNDaGFuZ2VkLCBzdGF0ZU1hY2hpbmUuc3RhdGVzQ2hhbmdlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlc0NoYW5nZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh7XG4gICAgICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLlN0YXRlQ2hhbmdlLFxuICAgICAgICAgICAgICAgIGRhdGE6IHN0YXRlc0NoYW5nZWQsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgQW5pbWF0b3IucHJvdG90eXBlLmhhbmRsZUFkdmFuY2luZyA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmUoe1xuICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLkFkdmFuY2UsXG4gICAgICAgICAgICBkYXRhOiB0aW1lLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRvcjtcbn0oKSk7XG4vLyAjZW5kcmVnaW9uXG4vLyAjcmVnaW9uIGV2ZW50c1xuLyoqXG4gKiBTdXBwb3J0ZWQgZXZlbnQgdHlwZXMgdHJpZ2dlcmVkIGluIFJpdmVcbiAqL1xudmFyIEV2ZW50VHlwZTtcbihmdW5jdGlvbiAoRXZlbnRUeXBlKSB7XG4gICAgRXZlbnRUeXBlW1wiTG9hZFwiXSA9IFwibG9hZFwiO1xuICAgIEV2ZW50VHlwZVtcIkxvYWRFcnJvclwiXSA9IFwibG9hZGVycm9yXCI7XG4gICAgRXZlbnRUeXBlW1wiUGxheVwiXSA9IFwicGxheVwiO1xuICAgIEV2ZW50VHlwZVtcIlBhdXNlXCJdID0gXCJwYXVzZVwiO1xuICAgIEV2ZW50VHlwZVtcIlN0b3BcIl0gPSBcInN0b3BcIjtcbiAgICBFdmVudFR5cGVbXCJMb29wXCJdID0gXCJsb29wXCI7XG4gICAgRXZlbnRUeXBlW1wiRHJhd1wiXSA9IFwiZHJhd1wiO1xuICAgIEV2ZW50VHlwZVtcIkFkdmFuY2VcIl0gPSBcImFkdmFuY2VcIjtcbiAgICBFdmVudFR5cGVbXCJTdGF0ZUNoYW5nZVwiXSA9IFwic3RhdGVjaGFuZ2VcIjtcbiAgICBFdmVudFR5cGVbXCJSaXZlRXZlbnRcIl0gPSBcInJpdmVldmVudFwiO1xuICAgIEV2ZW50VHlwZVtcIkF1ZGlvU3RhdHVzQ2hhbmdlXCJdID0gXCJhdWRpb3N0YXR1c2NoYW5nZVwiO1xufSkoRXZlbnRUeXBlIHx8IChFdmVudFR5cGUgPSB7fSkpO1xuLyoqXG4gKiBMb29waW5nIHR5cGVzOiBvbmUtc2hvdCwgbG9vcCwgYW5kIHBpbmctcG9uZ1xuICovXG52YXIgTG9vcFR5cGU7XG4oZnVuY3Rpb24gKExvb3BUeXBlKSB7XG4gICAgTG9vcFR5cGVbXCJPbmVTaG90XCJdID0gXCJvbmVzaG90XCI7XG4gICAgTG9vcFR5cGVbXCJMb29wXCJdID0gXCJsb29wXCI7XG4gICAgTG9vcFR5cGVbXCJQaW5nUG9uZ1wiXSA9IFwicGluZ3BvbmdcIjtcbn0pKExvb3BUeXBlIHx8IChMb29wVHlwZSA9IHt9KSk7XG4vLyBNYW5hZ2VzIFJpdmUgZXZlbnRzIGFuZCBsaXN0ZW5lcnNcbnZhciBFdmVudE1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRXZlbnRNYW5hZ2VyKGxpc3RlbmVycykge1xuICAgICAgICBpZiAobGlzdGVuZXJzID09PSB2b2lkIDApIHsgbGlzdGVuZXJzID0gW107IH1cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgfVxuICAgIC8vIEdldHMgbGlzdGVuZXJzIG9mIHNwZWNpZmllZCB0eXBlXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5nZXRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLnR5cGUgPT09IHR5cGU7IH0pO1xuICAgIH07XG4gICAgLy8gQWRkcyBhIGxpc3RlbmVyXG4gICAgRXZlbnRNYW5hZ2VyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKCF0aGlzLmxpc3RlbmVycy5pbmNsdWRlcyhsaXN0ZW5lcikpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgbGlzdGVuZXJcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHdpdGggdGhlIGNhbGxiYWNrIHRvIGJlIHJlbW92ZWRcbiAgICAgKi9cbiAgICBFdmVudE1hbmFnZXIucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChsaXN0ZW5lcikge1xuICAgICAgICAvLyBXZSBjYW4ndCBzaW1wbHkgbG9vayBmb3IgdGhlIGxpc3RlbmVyIGFzIGl0J2xsIGJlIGEgZGlmZmVyZW50IGluc3RhbmNlIHRvXG4gICAgICAgIC8vIG9uZSBvcmlnaW5hbGx5IHN1YnNjcmliZWQuIEZpbmQgYWxsIHRoZSBsaXN0ZW5lcnMgb2YgdGhlIHJpZ2h0IHR5cGUgYW5kXG4gICAgICAgIC8vIHRoZW4gY2hlY2sgdGhlaXIgY2FsbGJhY2tzIHdoaWNoIHNob3VsZCBtYXRjaC5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRMaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRMaXN0ZW5lci50eXBlID09PSBsaXN0ZW5lci50eXBlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRMaXN0ZW5lci5jYWxsYmFjayA9PT0gbGlzdGVuZXIuY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyBhbGwgbGlzdGVuZXJzIG9mIHNwZWNpZmllZCB0eXBlLCBvciBldmVyeSBsaXN0ZW5lciBpZiBubyB0eXBlIGlzXG4gICAgICogc3BlY2lmaWVkXG4gICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgbGlzdGVuZXJzIHRvIGNsZWFyLCBvciBhbGwgbGlzdGVuZXJzIGlmIG5vdFxuICAgICAqIHNwZWNpZmllZFxuICAgICAqL1xuICAgIEV2ZW50TWFuYWdlci5wcm90b3R5cGUucmVtb3ZlQWxsID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKCF0eXBlKSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UoMCwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzXG4gICAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAobCkgeyByZXR1cm4gbC50eXBlID09PSB0eXBlOyB9KVxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChsKSB7IHJldHVybiBfdGhpcy5yZW1vdmUobCk7IH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBGaXJlcyBhbiBldmVudFxuICAgIEV2ZW50TWFuYWdlci5wcm90b3R5cGUuZmlyZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB2YXIgZXZlbnRMaXN0ZW5lcnMgPSB0aGlzLmdldExpc3RlbmVycyhldmVudC50eXBlKTtcbiAgICAgICAgZXZlbnRMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsgcmV0dXJuIGxpc3RlbmVyLmNhbGxiYWNrKGV2ZW50KTsgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRXZlbnRNYW5hZ2VyO1xufSgpKTtcbi8vIE1hbmFnZXMgYSBxdWV1ZSBvZiB0YXNrc1xudmFyIFRhc2tRdWV1ZU1hbmFnZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVGFza1F1ZXVlTWFuYWdlcihldmVudE1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIgPSBldmVudE1hbmFnZXI7XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB9XG4gICAgLy8gQWRkcyBhIHRhc2sgdG9wIHRoZSBxdWV1ZVxuICAgIFRhc2tRdWV1ZU1hbmFnZXIucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0YXNrKSB7XG4gICAgICAgIHRoaXMucXVldWUucHVzaCh0YXNrKTtcbiAgICB9O1xuICAgIC8vIFByb2Nlc3NlcyBhbGwgdGFza3MgaW4gdGhlIHF1ZXVlXG4gICAgVGFza1F1ZXVlTWFuYWdlci5wcm90b3R5cGUucHJvY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMucXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0aGlzLnF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAodGFzayA9PT0gbnVsbCB8fCB0YXNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXNrLmFjdGlvbikge1xuICAgICAgICAgICAgICAgIHRhc2suYWN0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGFzayA9PT0gbnVsbCB8fCB0YXNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0YXNrLmV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh0YXNrLmV2ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFRhc2tRdWV1ZU1hbmFnZXI7XG59KCkpO1xuLy8gI2VuZHJlZ2lvblxuLy8gI3JlZ2lvbiBBdWRpb1xudmFyIFN5c3RlbUF1ZGlvU3RhdHVzO1xuKGZ1bmN0aW9uIChTeXN0ZW1BdWRpb1N0YXR1cykge1xuICAgIFN5c3RlbUF1ZGlvU3RhdHVzW1N5c3RlbUF1ZGlvU3RhdHVzW1wiQVZBSUxBQkxFXCJdID0gMF0gPSBcIkFWQUlMQUJMRVwiO1xuICAgIFN5c3RlbUF1ZGlvU3RhdHVzW1N5c3RlbUF1ZGlvU3RhdHVzW1wiVU5BVkFJTEFCTEVcIl0gPSAxXSA9IFwiVU5BVkFJTEFCTEVcIjtcbn0pKFN5c3RlbUF1ZGlvU3RhdHVzIHx8IChTeXN0ZW1BdWRpb1N0YXR1cyA9IHt9KSk7XG4vLyBDbGFzcyB0byBoYW5kbGUgYXVkaW8gY29udGV4dCBhdmFpbGFiaWxpdHkgYW5kIHN0YXR1cyBjaGFuZ2VzXG52YXIgQXVkaW9NYW5hZ2VyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBdWRpb01hbmFnZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXVkaW9NYW5hZ2VyKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuX3N0YXR1cyA9IFN5c3RlbUF1ZGlvU3RhdHVzLlVOQVZBSUxBQkxFO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEF1ZGlvTWFuYWdlci5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJldHVybiBzZXRUaW1lb3V0KHJlc29sdmUsIHRpbWUpOyB9KV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKF8sIHJlamVjdCkgeyByZXR1cm4gc2V0VGltZW91dChyZWplY3QsIDUwKTsgfSldO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gQWxlcnRzIGFuaW1hdGlvbnMgb24gc3RhdHVzIGNoYW5nZXMgYW5kIHJlbW92ZXMgdGhlIGxpc3RlbmVycyB0byBhdm9pZCBhbGVydGluZyB0d2ljZS5cbiAgICBBdWRpb01hbmFnZXIucHJvdG90eXBlLnJlcG9ydFRvTGlzdGVuZXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZpcmUoeyB0eXBlOiBFdmVudFR5cGUuQXVkaW9TdGF0dXNDaGFuZ2UgfSk7XG4gICAgICAgIHRoaXMucmVtb3ZlQWxsKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgYXVkaW8gY29udGV4dCBoYXMgYmVlbiByZXNvbHZlZC5cbiAgICAgKiBBbGVydCBhbnkgbGlzdGVuZXJzIHRoYXQgd2UgY2FuIG5vdyBwbGF5IGF1ZGlvLlxuICAgICAqIFJpdmUgd2lsbCBub3cgcGxheSBhdWRpbyBhdCB0aGUgY29uZmlndXJlZCB2b2x1bWUuXG4gICAgICovXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5lbmFibGVBdWRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gU3lzdGVtQXVkaW9TdGF0dXMuQVZBSUxBQkxFO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlcG9ydFRvTGlzdGVuZXJzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIHdlIGFyZSBhYmxlIHRvIHBsYXkgYXVkaW8uXG4gICAgICpcbiAgICAgKiBXZSBjdXJyZW50bHkgY2hlY2sgdGhlIGF1ZGlvIGNvbnRleHQsIHdoZW4gcmVzdW1lKCkgcmV0dXJucyBiZWZvcmUgYSB0aW1lb3V0IHdlIGtub3cgdGhhdCB0aGVcbiAgICAgKiBhdWRpbyBjb250ZXh0IGlzIHJ1bm5pbmcgYW5kIHdlIGNhbiBlbmFibGUgYXVkaW8uXG4gICAgICovXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS50ZXN0QXVkaW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuX3N0YXR1cyA9PT0gU3lzdGVtQXVkaW9TdGF0dXMuVU5BVkFJTEFCTEUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpb0NvbnRleHQgIT09IG51bGwpKSByZXR1cm4gWzMgLypicmVhayovLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAzLCAsIDRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFByb21pc2UucmFjZShbdGhpcy5fYXVkaW9Db250ZXh0LnJlc3VtZSgpLCB0aGlzLnRpbWVvdXQoKV0pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbmFibGVBdWRpbygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszIC8qYnJlYWsqLywgNF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVzdGFibGlzaCBhdWRpbyBmb3IgdXNlIHdpdGggcml2ZS5cbiAgICAgKiBXZSBib3RoIHRlc3QgaWYgd2UgY2FuIHVzZSBhdWRpbyBpbnRlcm1pdHRlbnRseSBhbmQgbGlzdGVuIGZvciB1c2VyIGludGVyYWN0aW9uLlxuICAgICAqIFRoZSBhaW0gaXMgdG8gZW5hYmxlIGF1ZGlvIHBsYXliYWNrIGFzIHNvb24gYXMgdGhlIGJyb3dzZXIgYWxsb3dzIHRoaXMuXG4gICAgICovXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5fZXN0YWJsaXNoQXVkaW8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghIXRoaXMuX3N0YXJ0ZWQpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0eXBlb2Ygd2luZG93ID09IFwidW5kZWZpbmVkXCIpKSByZXR1cm4gWzMgLypicmVhayovLCAxXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlQXVkaW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdWRpb0NvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlbkZvclVzZXJBY3Rpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodGhpcy5fc3RhdHVzID09PSBTeXN0ZW1BdWRpb1N0YXR1cy5VTkFWQUlMQUJMRSkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgdGhpcy50ZXN0QXVkaW8oKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuZGVsYXkoMTAwMCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5saXN0ZW5Gb3JVc2VyQWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBOT1RFOiBBdWRpb0NvbnRleHRzIGFyZSByZWFkeSBpbW1lZGlhdGVseSBpZiByZXF1ZXN0ZWQgaW4gYSB1aSBjYWxsYmFja1xuICAgICAgICAvLyB3ZSAqY291bGQqIHJlIHJlcXVlc3Qgb25lIGluIHRoaXMgbGlzdGVuZXIuXG4gICAgICAgIHZhciBfY2xpY2tMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICAvLyBub3RlIHRoaXMgaGFzIFwiYmV0dGVyXCIgcmVzdWx0cyB0aGFuIGNhbGxpbmcgYGF3YWl0IHRoaXMudGVzdEF1ZGlvKClgXG4gICAgICAgICAgICAgICAgLy8gYXMgd2UgZm9yY2UgYXVkaW8gdG8gYmUgZW5hYmxlZCBpbiB0aGUgY3VycmVudCB0aHJlYWQsIHJhdGhlciB0aGFuIGNoYW5jaW5nXG4gICAgICAgICAgICAgICAgLy8gdGhlIHRocmVhZCB0byBiZSBwYXNzZWQgb3ZlciBmb3Igc29tZSBvdGhlciBhc3luYyBjb250ZXh0XG4gICAgICAgICAgICAgICAgdGhpcy5lbmFibGVBdWRpbygpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTsgfTtcbiAgICAgICAgLy8gTk9URTogd2Ugc2hvdWxkIHRlc3QgdGhpcyBvbiBtb2JpbGUvcGFkc1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcmRvd25cIiwgX2NsaWNrTGlzdGVuZXIsIHtcbiAgICAgICAgICAgIG9uY2U6IHRydWUsXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRXN0YWJsaXNoIHRoZSBhdWRpbyBjb250ZXh0IGZvciByaXZlLCB0aGlzIGxldHMgcml2ZSBrbm93IHRoYXQgd2UgY2FuIHBsYXkgYXVkaW8uXG4gICAgICovXG4gICAgQXVkaW9NYW5hZ2VyLnByb3RvdHlwZS5lc3RhYmxpc2hBdWRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VzdGFibGlzaEF1ZGlvKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEF1ZGlvTWFuYWdlci5wcm90b3R5cGUsIFwic3lzdGVtVm9sdW1lXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3RhdHVzID09PSBTeXN0ZW1BdWRpb1N0YXR1cy5VTkFWQUlMQUJMRSkge1xuICAgICAgICAgICAgICAgIC8vIFdlIGRvIGFuIGltbWVkaWF0ZSB0ZXN0IHRvIGF2b2lkIGRlcGVuZGluZyBvbiB0aGUgZGVsYXkgb2YgdGhlIHJ1bm5pbmcgdGVzdFxuICAgICAgICAgICAgICAgIHRoaXMudGVzdEF1ZGlvKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBdWRpb01hbmFnZXIucHJvdG90eXBlLCBcInN0YXR1c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXR1cztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBBdWRpb01hbmFnZXI7XG59KEV2ZW50TWFuYWdlcikpO1xudmFyIGF1ZGlvTWFuYWdlciA9IG5ldyBBdWRpb01hbmFnZXIoKTtcbnZhciBGYWtlUmVzaXplT2JzZXJ2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmFrZVJlc2l6ZU9ic2VydmVyKCkge1xuICAgIH1cbiAgICBGYWtlUmVzaXplT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgRmFrZVJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS51bm9ic2VydmUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgRmFrZVJlc2l6ZU9ic2VydmVyLnByb3RvdHlwZS5kaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIHJldHVybiBGYWtlUmVzaXplT2JzZXJ2ZXI7XG59KCkpO1xudmFyIE15UmVzaXplT2JzZXJ2ZXIgPSBnbG9iYWxUaGlzLlJlc2l6ZU9ic2VydmVyIHx8IEZha2VSZXNpemVPYnNlcnZlcjtcbi8qKlxuICogVGhpcyBjbGFzcyB0YWtlcyBjYXJlIG9mIGFueSBvYnNlcnZlcnMgdGhhdCB3aWxsIGJlIGF0dGFjaGVkIHRvIGFuIGFuaW1hdGlvbi5cbiAqIEl0IHNob3VsZCBiZSB0cmVhdGVkIGFzIGEgc2luZ2xldG9uIGJlY2F1c2Ugb2JzZXJ2ZXJzIGFyZSBtdWNoIG1vcmUgcGVyZm9ybWFudFxuICogd2hlbiB1c2VkIGZvciBvYnNlcnZpbmcgbXVsdGlwbGUgZWxlbWVudHMgYnkgYSBzaW5nbGUgaW5zdGFuY2UuXG4gKi9cbnZhciBPYmplY3RPYnNlcnZlcnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JqZWN0T2JzZXJ2ZXJzKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9lbGVtZW50c01hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2l6ZSBvYnNlcnZlcnMgdHJpZ2dlciBib3RoIHdoZW4gdGhlIGVsZW1lbnQgY2hhbmdlcyBpdHMgc2l6ZSBhbmQgYWxzbyB3aGVuIHRoZVxuICAgICAgICAgKiBlbGVtZW50IGlzIGFkZGVkIG9yIHJlbW92ZWQgZnJvbSB0aGUgZG9jdW1lbnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLl9vbk9ic2VydmVkRW50cnkgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICAgICAgICAgIHZhciBvYnNlcnZlZCA9IF90aGlzLl9lbGVtZW50c01hcC5nZXQoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVkLm9uUmVzaXplKGVudHJ5LnRhcmdldC5jbGllbnRXaWR0aCA9PSAwIHx8IGVudHJ5LnRhcmdldC5jbGllbnRIZWlnaHQgPT0gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5fcmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX29uT2JzZXJ2ZWQgPSBmdW5jdGlvbiAoZW50cmllcykge1xuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKF90aGlzLl9vbk9ic2VydmVkRW50cnkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlciA9IG5ldyBNeVJlc2l6ZU9ic2VydmVyKHRoaXMuX29uT2JzZXJ2ZWQpO1xuICAgIH1cbiAgICAvLyBBZGRzIGFuIG9ic2VydmFibGUgZWxlbWVudFxuICAgIE9iamVjdE9ic2VydmVycy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9uUmVzaXplKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZCA9IHtcbiAgICAgICAgICAgIG9uUmVzaXplOiBvblJlc2l6ZSxcbiAgICAgICAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2VsZW1lbnRzTWFwLnNldChlbGVtZW50LCBvYnNlcnZlZCk7XG4gICAgICAgIHRoaXMuX3Jlc2l6ZU9ic2VydmVyLm9ic2VydmUoZWxlbWVudCk7XG4gICAgICAgIHJldHVybiBvYnNlcnZlZDtcbiAgICB9O1xuICAgIC8vIFJlbW92ZXMgYW4gb2JzZXJ2YWJsZSBlbGVtZW50XG4gICAgT2JqZWN0T2JzZXJ2ZXJzLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAob2JzZXJ2ZWQpIHtcbiAgICAgICAgdGhpcy5fcmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKG9ic2VydmVkLmVsZW1lbnQpO1xuICAgICAgICB0aGlzLl9lbGVtZW50c01hcC5kZWxldGUob2JzZXJ2ZWQuZWxlbWVudCk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JqZWN0T2JzZXJ2ZXJzO1xufSgpKTtcbnZhciBvYnNlcnZlcnMgPSBuZXcgT2JqZWN0T2JzZXJ2ZXJzKCk7XG52YXIgUml2ZUZpbGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUml2ZUZpbGUocGFyYW1zKSB7XG4gICAgICAgIC8vIEFsbG93IHRoZSBydW50aW1lIHRvIGF1dG9tYXRpY2FsbHkgbG9hZCBhc3NldHMgaG9zdGVkIGluIFJpdmUncyBydW50aW1lLlxuICAgICAgICB0aGlzLmVuYWJsZVJpdmVBc3NldENETiA9IHRydWU7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlQ291bnQgPSAwO1xuICAgICAgICB0aGlzLnNyYyA9IHBhcmFtcy5zcmM7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gcGFyYW1zLmJ1ZmZlcjtcbiAgICAgICAgaWYgKHBhcmFtcy5hc3NldExvYWRlcilcbiAgICAgICAgICAgIHRoaXMuYXNzZXRMb2FkZXIgPSBwYXJhbXMuYXNzZXRMb2FkZXI7XG4gICAgICAgIHRoaXMuZW5hYmxlUml2ZUFzc2V0Q0ROID1cbiAgICAgICAgICAgIHR5cGVvZiBwYXJhbXMuZW5hYmxlUml2ZUFzc2V0Q0ROID09IFwiYm9vbGVhblwiXG4gICAgICAgICAgICAgICAgPyBwYXJhbXMuZW5hYmxlUml2ZUFzc2V0Q0ROXG4gICAgICAgICAgICAgICAgOiB0cnVlO1xuICAgICAgICAvLyBOZXcgZXZlbnQgbWFuYWdlbWVudCBzeXN0ZW1cbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIgPSBuZXcgRXZlbnRNYW5hZ2VyKCk7XG4gICAgICAgIGlmIChwYXJhbXMub25Mb2FkKVxuICAgICAgICAgICAgdGhpcy5vbihFdmVudFR5cGUuTG9hZCwgcGFyYW1zLm9uTG9hZCk7XG4gICAgICAgIGlmIChwYXJhbXMub25Mb2FkRXJyb3IpXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5Mb2FkRXJyb3IsIHBhcmFtcy5vbkxvYWRFcnJvcik7XG4gICAgfVxuICAgIFJpdmVGaWxlLnByb3RvdHlwZS5pbml0RGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hLCBsb2FkZXIsIF9iO1xuICAgICAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYykge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoX2MubGFiZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNyYykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICBfYSA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBsb2FkUml2ZUZpbGUodGhpcy5zcmMpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EuYnVmZmVyID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgX2MubGFiZWwgPSAyO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hc3NldExvYWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlciA9IG5ldyB0aGlzLnJ1bnRpbWUuQ3VzdG9tRmlsZUFzc2V0TG9hZGVyKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZENvbnRlbnRzOiB0aGlzLmFzc2V0TG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9hZCB0aGUgUml2ZSBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBfYiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJ1bnRpbWUubG9hZChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlciksIGxvYWRlciwgdGhpcy5lbmFibGVSaXZlQXNzZXRDRE4pXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTG9hZCB0aGUgUml2ZSBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICBfYi5maWxlID0gX2Muc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmlsZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFdmVudFR5cGUuTG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmZpcmUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFdmVudFR5cGUuTG9hZEVycm9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihSaXZlRmlsZS5maWxlTG9hZEVycm9yTWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUml2ZUZpbGUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5vIHNvdXJjZSBmaWxlIHVybCBzcGVjaWZpZWQsIGl0J3MgYSBidXN0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3JjICYmICF0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihSaXZlRmlsZS5taXNzaW5nRXJyb3JNZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIFJ1bnRpbWVMb2FkZXIuYXdhaXRJbnN0YW5jZSgpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgX2EucnVudGltZSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHRoaXMuaW5pdERhdGEoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gUml2ZS1nZW5lcmF0ZWQgZXZlbnRzXG4gICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgZXZlbnQgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgZXZlbnQgb2NjdXJzXG4gICAgICovXG4gICAgUml2ZUZpbGUucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmFkZCh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBmcm9tIGEgUml2ZS1nZW5lcmF0ZWQgZXZlbnRcbiAgICAgKiBAcGFyYW0gdHlwZSB0aGUgdHlwZSBvZiBldmVudCB0byB1bnN1YnNjcmliZSBmcm9tXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIHRoZSBjYWxsYmFjayB0byB1bnN1YnNjcmliZVxuICAgICAqL1xuICAgIFJpdmVGaWxlLnByb3RvdHlwZS5vZmYgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIucmVtb3ZlKHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgUml2ZUZpbGUucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VDb3VudCAtPSAxO1xuICAgICAgICBpZiAodGhpcy5yZWZlcmVuY2VDb3VudCA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUFsbFJpdmVFdmVudExpc3RlbmVycygpO1xuICAgICAgICAgICAgKF9hID0gdGhpcy5maWxlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZGVsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBhbGwgUml2ZSBsaXN0ZW5lcnMgZnJvbSBhbiBldmVudCB0eXBlLCBvciBldmVyeXRoaW5nIGlmIG5vIHR5cGUgaXNcbiAgICAgKiBnaXZlblxuICAgICAqIEBwYXJhbSB0eXBlIHRoZSB0eXBlIG9mIGV2ZW50IHRvIHVuc3Vic2NyaWJlIGZyb20sIG9yIGFsbCB0eXBlcyBpZlxuICAgICAqIHVuZGVmaW5lZFxuICAgICAqL1xuICAgIFJpdmVGaWxlLnByb3RvdHlwZS5yZW1vdmVBbGxSaXZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5yZW1vdmVBbGwodHlwZSk7XG4gICAgfTtcbiAgICBSaXZlRmlsZS5wcm90b3R5cGUuZ2V0SW5zdGFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmZpbGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMucmVmZXJlbmNlQ291bnQgKz0gMTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbGU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEVycm9yIG1lc3NhZ2UgZm9yIG1pc3Npbmcgc291cmNlIG9yIGJ1ZmZlclxuICAgIFJpdmVGaWxlLm1pc3NpbmdFcnJvck1lc3NhZ2UgPSBcIlJpdmUgc291cmNlIGZpbGUgb3IgZGF0YSBidWZmZXIgcmVxdWlyZWRcIjtcbiAgICAvLyBFcnJvciBtZXNzYWdlIGZvciBmaWxlIGxvYWQgZXJyb3JcbiAgICBSaXZlRmlsZS5maWxlTG9hZEVycm9yTWVzc2FnZSA9IFwiVGhlIGZpbGUgZmFpbGVkIHRvIGxvYWRcIjtcbiAgICByZXR1cm4gUml2ZUZpbGU7XG59KCkpO1xuXG52YXIgUml2ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBSaXZlKHBhcmFtcykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFRyYWNrcyBpZiBhIFJpdmUgZmlsZSBpcyBsb2FkZWRcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRyYWNrcyBpZiBhIFJpdmUgZmlsZSBpcyBsb2FkZWQ7IHdlIG5lZWQgdGhpcyBpbiBhZGRpdGlvbiB0byBsb2FkZWQgYXMgc29tZVxuICAgICAgICAgKiBjb21tYW5kcyAoZS5nLiBjb250ZW50cykgY2FuIGJlIGNhbGxlZCBhcyBzb29uIGFzIHRoZSBmaWxlIGlzIGxvYWRlZC5cbiAgICAgICAgICogSG93ZXZlciwgcGxheWJhY2sgY29tbWFuZHMgbmVlZCB0byBiZSBxdWV1ZWQgYW5kIHJ1biBpbiBvcmRlciBvbmNlIGluaXRpYWxcbiAgICAgICAgICogYW5pbWF0aW9ucyBhbmQgYXV0b3BsYXkgaGFzIGJlZW4gc29ydGVkIG91dC4gVGhpcyBhcHBsaWVzIHRvIHBsYXksIHBhdXNlLFxuICAgICAgICAgKiBhbmQgc3RhcnQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlYWR5Rm9yUGxheWluZyA9IGZhbHNlO1xuICAgICAgICAvLyBSdW50aW1lIGFydGJvYXJkXG4gICAgICAgIHRoaXMuYXJ0Ym9hcmQgPSBudWxsO1xuICAgICAgICAvLyBwbGFjZSB0byBjbGVhciB1cCBldmVudCBsaXN0ZW5lcnNcbiAgICAgICAgdGhpcy5ldmVudENsZWFudXAgPSBudWxsO1xuICAgICAgICB0aGlzLnNob3VsZERpc2FibGVSaXZlTGlzdGVuZXJzID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYXV0b21hdGljYWxseUhhbmRsZUV2ZW50cyA9IGZhbHNlO1xuICAgICAgICAvLyBBbGxvdyB0aGUgcnVudGltZSB0byBhdXRvbWF0aWNhbGx5IGxvYWQgYXNzZXRzIGhvc3RlZCBpbiBSaXZlJ3MgcnVudGltZS5cbiAgICAgICAgdGhpcy5lbmFibGVSaXZlQXNzZXRDRE4gPSB0cnVlO1xuICAgICAgICAvLyBLZWVwIGEgbG9jYWwgdmFsdWUgb2YgdGhlIHNldCB2b2x1bWUgdG8gdXBkYXRlIGl0IGFzeW5jaHJvbm91c2x5XG4gICAgICAgIHRoaXMuX3ZvbHVtZSA9IDE7XG4gICAgICAgIC8vIFdoZXRoZXIgdGhlIGNhbnZhcyBlbGVtZW50J3Mgc2l6ZSBpcyAwXG4gICAgICAgIHRoaXMuX2hhc1plcm9TaXplID0gZmFsc2U7XG4gICAgICAgIC8vIER1cmF0aW9ucyB0byBnZW5lcmF0ZSBhIGZyYW1lIGZvciB0aGUgbGFzdCBzZWNvbmQuIFVzZWQgZm9yIHBlcmZvcm1hbmNlIHByb2ZpbGluZy5cbiAgICAgICAgdGhpcy5kdXJhdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5mcmFtZVRpbWVzID0gW107XG4gICAgICAgIHRoaXMuZnJhbWVDb3VudCA9IDA7XG4gICAgICAgIHRoaXMuaXNUb3VjaFNjcm9sbEVuYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbkNhbnZhc1Jlc2l6ZSA9IGZ1bmN0aW9uIChoYXNaZXJvU2l6ZSkge1xuICAgICAgICAgICAgX3RoaXMuX2hhc1plcm9TaXplID0gaGFzWmVyb1NpemU7XG4gICAgICAgICAgICBpZiAoIV90aGlzLl9sYXlvdXQubWF4WCB8fCAhX3RoaXMuX2xheW91dC5tYXhZKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzaXplVG9DYW52YXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFVzZWQgYmUgZHJhdyB0byB0cmFjayB3aGVuIGEgc2Vjb25kIG9mIGFjdGl2ZSByZW5kZXJpbmcgdGltZSBoYXMgcGFzc2VkLlxuICAgICAgICAgKiBVc2VkIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVuZGVyU2Vjb25kVGltZXIgPSAwO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IHBhcmFtcy5jYW52YXM7XG4gICAgICAgIGlmIChwYXJhbXMuY2FudmFzLmNvbnN0cnVjdG9yID09PSBIVE1MQ2FudmFzRWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZWQgPSBvYnNlcnZlcnMuYWRkKHRoaXMuY2FudmFzLCB0aGlzLm9uQ2FudmFzUmVzaXplKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNyYyA9IHBhcmFtcy5zcmM7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gcGFyYW1zLmJ1ZmZlcjtcbiAgICAgICAgdGhpcy5yaXZlRmlsZSA9IHBhcmFtcy5yaXZlRmlsZTtcbiAgICAgICAgdGhpcy5sYXlvdXQgPSAoX2EgPSBwYXJhbXMubGF5b3V0KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBuZXcgTGF5b3V0KCk7XG4gICAgICAgIHRoaXMuc2hvdWxkRGlzYWJsZVJpdmVMaXN0ZW5lcnMgPSAhIXBhcmFtcy5zaG91bGREaXNhYmxlUml2ZUxpc3RlbmVycztcbiAgICAgICAgdGhpcy5pc1RvdWNoU2Nyb2xsRW5hYmxlZCA9ICEhcGFyYW1zLmlzVG91Y2hTY3JvbGxFbmFibGVkO1xuICAgICAgICB0aGlzLmF1dG9tYXRpY2FsbHlIYW5kbGVFdmVudHMgPSAhIXBhcmFtcy5hdXRvbWF0aWNhbGx5SGFuZGxlRXZlbnRzO1xuICAgICAgICB0aGlzLmVuYWJsZVJpdmVBc3NldENETiA9XG4gICAgICAgICAgICBwYXJhbXMuZW5hYmxlUml2ZUFzc2V0Q0ROID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6IHBhcmFtcy5lbmFibGVSaXZlQXNzZXRDRE47XG4gICAgICAgIC8vIE5ldyBldmVudCBtYW5hZ2VtZW50IHN5c3RlbVxuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlciA9IG5ldyBFdmVudE1hbmFnZXIoKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbkxvYWQpXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5Mb2FkLCBwYXJhbXMub25Mb2FkKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbkxvYWRFcnJvcilcbiAgICAgICAgICAgIHRoaXMub24oRXZlbnRUeXBlLkxvYWRFcnJvciwgcGFyYW1zLm9uTG9hZEVycm9yKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vblBsYXkpXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5QbGF5LCBwYXJhbXMub25QbGF5KTtcbiAgICAgICAgaWYgKHBhcmFtcy5vblBhdXNlKVxuICAgICAgICAgICAgdGhpcy5vbihFdmVudFR5cGUuUGF1c2UsIHBhcmFtcy5vblBhdXNlKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vblN0b3ApXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5TdG9wLCBwYXJhbXMub25TdG9wKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbkxvb3ApXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5Mb29wLCBwYXJhbXMub25Mb29wKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vblN0YXRlQ2hhbmdlKVxuICAgICAgICAgICAgdGhpcy5vbihFdmVudFR5cGUuU3RhdGVDaGFuZ2UsIHBhcmFtcy5vblN0YXRlQ2hhbmdlKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbkFkdmFuY2UpXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5BZHZhbmNlLCBwYXJhbXMub25BZHZhbmNlKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXByZWNhdGVkIFVzZSBjYW1lbENhc2UnZCB2ZXJzaW9ucyBpbnN0ZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKHBhcmFtcy5vbmxvYWQgJiYgIXBhcmFtcy5vbkxvYWQpXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5Mb2FkLCBwYXJhbXMub25sb2FkKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbmxvYWRlcnJvciAmJiAhcGFyYW1zLm9uTG9hZEVycm9yKVxuICAgICAgICAgICAgdGhpcy5vbihFdmVudFR5cGUuTG9hZEVycm9yLCBwYXJhbXMub25sb2FkZXJyb3IpO1xuICAgICAgICBpZiAocGFyYW1zLm9ucGxheSAmJiAhcGFyYW1zLm9uUGxheSlcbiAgICAgICAgICAgIHRoaXMub24oRXZlbnRUeXBlLlBsYXksIHBhcmFtcy5vbnBsYXkpO1xuICAgICAgICBpZiAocGFyYW1zLm9ucGF1c2UgJiYgIXBhcmFtcy5vblBhdXNlKVxuICAgICAgICAgICAgdGhpcy5vbihFdmVudFR5cGUuUGF1c2UsIHBhcmFtcy5vbnBhdXNlKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbnN0b3AgJiYgIXBhcmFtcy5vblN0b3ApXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5TdG9wLCBwYXJhbXMub25zdG9wKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbmxvb3AgJiYgIXBhcmFtcy5vbkxvb3ApXG4gICAgICAgICAgICB0aGlzLm9uKEV2ZW50VHlwZS5Mb29wLCBwYXJhbXMub25sb29wKTtcbiAgICAgICAgaWYgKHBhcmFtcy5vbnN0YXRlY2hhbmdlICYmICFwYXJhbXMub25TdGF0ZUNoYW5nZSlcbiAgICAgICAgICAgIHRoaXMub24oRXZlbnRUeXBlLlN0YXRlQ2hhbmdlLCBwYXJhbXMub25zdGF0ZWNoYW5nZSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBc3NldCBsb2FkaW5nXG4gICAgICAgICAqL1xuICAgICAgICBpZiAocGFyYW1zLmFzc2V0TG9hZGVyKVxuICAgICAgICAgICAgdGhpcy5hc3NldExvYWRlciA9IHBhcmFtcy5hc3NldExvYWRlcjtcbiAgICAgICAgLy8gSG9vayB1cCB0aGUgdGFzayBxdWV1ZVxuICAgICAgICB0aGlzLnRhc2tRdWV1ZSA9IG5ldyBUYXNrUXVldWVNYW5hZ2VyKHRoaXMuZXZlbnRNYW5hZ2VyKTtcbiAgICAgICAgdGhpcy5pbml0KHtcbiAgICAgICAgICAgIHNyYzogdGhpcy5zcmMsXG4gICAgICAgICAgICBidWZmZXI6IHRoaXMuYnVmZmVyLFxuICAgICAgICAgICAgcml2ZUZpbGU6IHRoaXMucml2ZUZpbGUsXG4gICAgICAgICAgICBhdXRvcGxheTogcGFyYW1zLmF1dG9wbGF5LFxuICAgICAgICAgICAgYW5pbWF0aW9uczogcGFyYW1zLmFuaW1hdGlvbnMsXG4gICAgICAgICAgICBzdGF0ZU1hY2hpbmVzOiBwYXJhbXMuc3RhdGVNYWNoaW5lcyxcbiAgICAgICAgICAgIGFydGJvYXJkOiBwYXJhbXMuYXJ0Ym9hcmQsXG4gICAgICAgICAgICB1c2VPZmZzY3JlZW5SZW5kZXJlcjogcGFyYW1zLnVzZU9mZnNjcmVlblJlbmRlcmVyLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQWx0ZXJuYXRpdmUgY29uc3RydWN0b3IgdG8gYnVpbGQgYSBSaXZlIGluc3RhbmNlIGZyb20gYW4gaW50ZXJmYWNlL29iamVjdFxuICAgIFJpdmUubmV3ID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGlzIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQ6IHBsZWFzZSB1c2UgYG5ldyBSaXZlKHt9KWAgaW5zdGVhZFwiKTtcbiAgICAgICAgcmV0dXJuIG5ldyBSaXZlKHBhcmFtcyk7XG4gICAgfTtcbiAgICAvLyBFdmVudCBoYW5kbGVyIGZvciB3aGVuIGF1ZGlvIGNvbnRleHQgYmVjb21lcyBhdmFpbGFibGVcbiAgICBSaXZlLnByb3RvdHlwZS5vblN5c3RlbUF1ZGlvQ2hhbmdlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy52b2x1bWUgPSB0aGlzLl92b2x1bWU7XG4gICAgfTtcbiAgICAvLyBJbml0aWFsaXplcyB0aGUgUml2ZSBvYmplY3QgZWl0aGVyIGZyb20gY29uc3RydWN0b3Igb3IgbG9hZCgpXG4gICAgUml2ZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3JjID0gX2Euc3JjLCBidWZmZXIgPSBfYS5idWZmZXIsIHJpdmVGaWxlID0gX2Eucml2ZUZpbGUsIGFuaW1hdGlvbnMgPSBfYS5hbmltYXRpb25zLCBzdGF0ZU1hY2hpbmVzID0gX2Euc3RhdGVNYWNoaW5lcywgYXJ0Ym9hcmQgPSBfYS5hcnRib2FyZCwgX2IgPSBfYS5hdXRvcGxheSwgYXV0b3BsYXkgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYiwgX2MgPSBfYS51c2VPZmZzY3JlZW5SZW5kZXJlciwgdXNlT2Zmc2NyZWVuUmVuZGVyZXIgPSBfYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYztcbiAgICAgICAgdGhpcy5zcmMgPSBzcmM7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLnJpdmVGaWxlID0gcml2ZUZpbGU7XG4gICAgICAgIC8vIElmIG5vIHNvdXJjZSBmaWxlIHVybCBzcGVjaWZpZWQsIGl0J3MgYSBidXN0XG4gICAgICAgIGlmICghdGhpcy5zcmMgJiYgIXRoaXMuYnVmZmVyICYmICF0aGlzLnJpdmVGaWxlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoUml2ZS5taXNzaW5nRXJyb3JNZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBMaXN0IG9mIGFuaW1hdGlvbnMgdGhhdCBzaG91bGQgYmUgaW5pdGlhbGl6ZWQuXG4gICAgICAgIHZhciBzdGFydGluZ0FuaW1hdGlvbk5hbWVzID0gbWFwVG9TdHJpbmdBcnJheShhbmltYXRpb25zKTtcbiAgICAgICAgLy8gTGlzdCBvZiBzdGF0ZSBtYWNoaW5lcyB0aGF0IHNob3VsZCBiZSBpbml0aWFsaXplZFxuICAgICAgICB2YXIgc3RhcnRpbmdTdGF0ZU1hY2hpbmVOYW1lcyA9IG1hcFRvU3RyaW5nQXJyYXkoc3RhdGVNYWNoaW5lcyk7XG4gICAgICAgIC8vIEVuc3VyZSBsb2FkZWQgaXMgbWFya2VkIGFzIGZhbHNlIGlmIGxvYWRpbmcgbmV3IGZpbGVcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZWFkeUZvclBsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgLy8gRW5zdXJlIHRoZSBydW50aW1lIGlzIGxvYWRlZFxuICAgICAgICBSdW50aW1lTG9hZGVyLmF3YWl0SW5zdGFuY2UoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bnRpbWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJ1bnRpbWUgPSBydW50aW1lO1xuICAgICAgICAgICAgLy8gR2V0IHRoZSBjYW52YXMgd2hlcmUgeW91IHdhbnQgdG8gcmVuZGVyIHRoZSBhbmltYXRpb24gYW5kIGNyZWF0ZSBhIHJlbmRlcmVyXG4gICAgICAgICAgICBfdGhpcy5yZW5kZXJlciA9IF90aGlzLnJ1bnRpbWUubWFrZVJlbmRlcmVyKF90aGlzLmNhbnZhcywgdXNlT2Zmc2NyZWVuUmVuZGVyZXIpO1xuICAgICAgICAgICAgLy8gSW5pdGlhbCBzaXplIGFkanVzdG1lbnQgYmFzZWQgb24gZGV2aWNlUGl4ZWxSYXRpbyBpZiBubyB3aWR0aC9oZWlnaHQgYXJlXG4gICAgICAgICAgICAvLyBzcGVjaWZpZWQgZXhwbGljaXRseVxuICAgICAgICAgICAgaWYgKCEoX3RoaXMuY2FudmFzLndpZHRoIHx8IF90aGlzLmNhbnZhcy5oZWlnaHQpKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzaXplRHJhd2luZ1N1cmZhY2VUb0NhbnZhcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTG9hZCBSaXZlIGRhdGEgZnJvbSBhIHNvdXJjZSB1cmkgb3IgYSBkYXRhIGJ1ZmZlclxuICAgICAgICAgICAgX3RoaXMuaW5pdERhdGEoYXJ0Ym9hcmQsIHN0YXJ0aW5nQW5pbWF0aW9uTmFtZXMsIHN0YXJ0aW5nU3RhdGVNYWNoaW5lTmFtZXMsIGF1dG9wbGF5KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNldHVwUml2ZUxpc3RlbmVycygpOyB9KVxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXR1cCBSaXZlIExpc3RlbmVycyBvbiB0aGUgY2FudmFzXG4gICAgICogQHBhcmFtIHJpdmVMaXN0ZW5lck9wdGlvbnMgLSBFbmFibGVzIFRvdWNoRXZlbnQgZXZlbnRzIG9uIHRoZSBjYW52YXMuIFNldCB0byB0cnVlIHRvIGFsbG93XG4gICAgICogdG91Y2ggc2Nyb2xsaW5nIG9uIHRoZSBjYW52YXMgZWxlbWVudCBvbiB0b3VjaC1lbmFibGVkIGRldmljZXNcbiAgICAgKiBpLmUuIHsgaXNUb3VjaFNjcm9sbEVuYWJsZWQ6IHRydWUgfVxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLnNldHVwUml2ZUxpc3RlbmVycyA9IGZ1bmN0aW9uIChyaXZlTGlzdGVuZXJPcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGREaXNhYmxlUml2ZUxpc3RlbmVycykge1xuICAgICAgICAgICAgdmFyIGFjdGl2ZVN0YXRlTWFjaGluZXMgPSAodGhpcy5hbmltYXRvci5zdGF0ZU1hY2hpbmVzIHx8IFtdKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKHNtKSB7IHJldHVybiBzbS5wbGF5aW5nICYmIF90aGlzLnJ1bnRpbWUuaGFzTGlzdGVuZXJzKHNtLmluc3RhbmNlKTsgfSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChzbSkgeyByZXR1cm4gc20uaW5zdGFuY2U7IH0pO1xuICAgICAgICAgICAgdmFyIHRvdWNoU2Nyb2xsRW5hYmxlZE9wdGlvbiA9IHRoaXMuaXNUb3VjaFNjcm9sbEVuYWJsZWQ7XG4gICAgICAgICAgICBpZiAocml2ZUxpc3RlbmVyT3B0aW9ucyAmJlxuICAgICAgICAgICAgICAgIFwiaXNUb3VjaFNjcm9sbEVuYWJsZWRcIiBpbiByaXZlTGlzdGVuZXJPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgdG91Y2hTY3JvbGxFbmFibGVkT3B0aW9uID0gcml2ZUxpc3RlbmVyT3B0aW9ucy5pc1RvdWNoU2Nyb2xsRW5hYmxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZXZlbnRDbGVhbnVwID0gKDAsX3V0aWxzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18ucmVnaXN0ZXJUb3VjaEludGVyYWN0aW9ucykoe1xuICAgICAgICAgICAgICAgIGNhbnZhczogdGhpcy5jYW52YXMsXG4gICAgICAgICAgICAgICAgYXJ0Ym9hcmQ6IHRoaXMuYXJ0Ym9hcmQsXG4gICAgICAgICAgICAgICAgc3RhdGVNYWNoaW5lczogYWN0aXZlU3RhdGVNYWNoaW5lcyxcbiAgICAgICAgICAgICAgICByZW5kZXJlcjogdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICAgICAgICByaXZlOiB0aGlzLnJ1bnRpbWUsXG4gICAgICAgICAgICAgICAgZml0OiB0aGlzLl9sYXlvdXQucnVudGltZUZpdCh0aGlzLnJ1bnRpbWUpLFxuICAgICAgICAgICAgICAgIGFsaWdubWVudDogdGhpcy5fbGF5b3V0LnJ1bnRpbWVBbGlnbm1lbnQodGhpcy5ydW50aW1lKSxcbiAgICAgICAgICAgICAgICBpc1RvdWNoU2Nyb2xsRW5hYmxlZDogdG91Y2hTY3JvbGxFbmFibGVkT3B0aW9uLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZSBSaXZlIExpc3RlbmVycyBzZXR1cCBvbiB0aGUgY2FudmFzXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUucmVtb3ZlUml2ZUxpc3RlbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRDbGVhbnVwKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50Q2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgaW5zdGFuY2UgaGFzIGF1ZGlvIGFuZCB0aGUgc3lzdGVtIGF1ZGlvIGlzIG5vdCByZWFkeVxuICAgICAqIHdlIGhvb2sgdGhlIGluc3RhbmNlIHRvIHRoZSBhdWRpbyBtYW5hZ2VyXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUuaW5pdGlhbGl6ZUF1ZGlvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIEluaXRpYWxpemUgYXVkaW8gaWYgbmVlZGVkXG4gICAgICAgIGlmIChhdWRpb01hbmFnZXIuc3RhdHVzID09IFN5c3RlbUF1ZGlvU3RhdHVzLlVOQVZBSUxBQkxFKSB7XG4gICAgICAgICAgICBpZiAoKF9hID0gdGhpcy5hcnRib2FyZCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhhc0F1ZGlvKSB7XG4gICAgICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLmFkZCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEV2ZW50VHlwZS5BdWRpb1N0YXR1c0NoYW5nZSxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm9uU3lzdGVtQXVkaW9DaGFuZ2VkKCk7IH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLmVzdGFibGlzaEF1ZGlvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8vIEluaXRpYWxpemVzIHJ1bnRpbWUgd2l0aCBSaXZlIGRhdGEgYW5kIHByZXBzIGZvciBwbGF5aW5nXG4gICAgUml2ZS5wcm90b3R5cGUuaW5pdERhdGEgPSBmdW5jdGlvbiAoYXJ0Ym9hcmROYW1lLCBhbmltYXRpb25OYW1lcywgc3RhdGVNYWNoaW5lTmFtZXMsIGF1dG9wbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVycm9yXzEsIG1zZztcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgMywgLCA0XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISh0aGlzLnJpdmVGaWxlID09IG51bGwpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucml2ZUZpbGUgPSBuZXcgUml2ZUZpbGUoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogdGhpcy5zcmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiB0aGlzLmJ1ZmZlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVSaXZlQXNzZXRDRE46IHRoaXMuZW5hYmxlUml2ZUFzc2V0Q0ROLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2V0TG9hZGVyOiB0aGlzLmFzc2V0TG9hZGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB0aGlzLnJpdmVGaWxlLmluaXQoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maWxlID0gdGhpcy5yaXZlRmlsZS5nZXRJbnN0YW5jZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBhbmQgZHJhdyBmcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0QXJ0Ym9hcmQoYXJ0Ym9hcmROYW1lLCBhbmltYXRpb25OYW1lcywgc3RhdGVNYWNoaW5lTmFtZXMsIGF1dG9wbGF5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBhdWRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplQXVkaW8oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZXJ5dGhpbmcncyBzZXQgdXAsIGVtaXQgYSBsb2FkIGV2ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBFdmVudFR5cGUuTG9hZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiAoX2EgPSB0aGlzLnNyYykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogXCJidWZmZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmxhZyByZWFkeSBmb3IgcGxheWJhY2sgY29tbWFuZHMgYW5kIGNsZWFyIHRoZSB0YXNrIHF1ZXVlOyB0aGlzIG9yZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyBpbXBvcnRhbnQgb3IgaXQgbWF5IGluZmluaXRlbHkgcmVjdXJzZVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWFkeUZvclBsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50YXNrUXVldWUucHJvY2VzcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kcmF3RnJhbWUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlc29sdmUoKV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtc2cgPSBcIlByb2JsZW0gbG9hZGluZyBmaWxlOyBtYXkgYmUgY29ycnVwdCFcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh7IHR5cGU6IEV2ZW50VHlwZS5Mb2FkRXJyb3IsIGRhdGE6IG1zZyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBQcm9taXNlLnJlamVjdChtc2cpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLy8gSW5pdGlhbGl6ZSBmb3IgcGxheWJhY2tcbiAgICBSaXZlLnByb3RvdHlwZS5pbml0QXJ0Ym9hcmQgPSBmdW5jdGlvbiAoYXJ0Ym9hcmROYW1lLCBhbmltYXRpb25OYW1lcywgc3RhdGVNYWNoaW5lTmFtZXMsIGF1dG9wbGF5KSB7XG4gICAgICAgIGlmICghdGhpcy5maWxlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmV0Y2ggdGhlIGFydGJvYXJkXG4gICAgICAgIHZhciByb290QXJ0Ym9hcmQgPSBhcnRib2FyZE5hbWVcbiAgICAgICAgICAgID8gdGhpcy5maWxlLmFydGJvYXJkQnlOYW1lKGFydGJvYXJkTmFtZSlcbiAgICAgICAgICAgIDogdGhpcy5maWxlLmRlZmF1bHRBcnRib2FyZCgpO1xuICAgICAgICAvLyBDaGVjayB3ZSBoYXZlIGEgd29ya2luZyBhcnRib2FyZFxuICAgICAgICBpZiAoIXJvb3RBcnRib2FyZCkge1xuICAgICAgICAgICAgdmFyIG1zZyA9IFwiSW52YWxpZCBhcnRib2FyZCBuYW1lIG9yIG5vIGRlZmF1bHQgYXJ0Ym9hcmRcIjtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihtc2cpO1xuICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh7IHR5cGU6IEV2ZW50VHlwZS5Mb2FkRXJyb3IsIGRhdGE6IG1zZyB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFydGJvYXJkID0gcm9vdEFydGJvYXJkO1xuICAgICAgICByb290QXJ0Ym9hcmQudm9sdW1lID0gdGhpcy5fdm9sdW1lICogYXVkaW9NYW5hZ2VyLnN5c3RlbVZvbHVtZTtcbiAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgYXJ0Ym9hcmQgaGFzIGF0IGxlYXN0IDEgYW5pbWF0aW9uXG4gICAgICAgIGlmICh0aGlzLmFydGJvYXJkLmFuaW1hdGlvbkNvdW50KCkgPCAxKSB7XG4gICAgICAgICAgICB2YXIgbXNnID0gXCJBcnRib2FyZCBoYXMgbm8gYW5pbWF0aW9uc1wiO1xuICAgICAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuZmlyZSh7IHR5cGU6IEV2ZW50VHlwZS5Mb2FkRXJyb3IsIGRhdGE6IG1zZyB9KTtcbiAgICAgICAgICAgIHRocm93IG1zZztcbiAgICAgICAgfVxuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBhbmltYXRvclxuICAgICAgICB0aGlzLmFuaW1hdG9yID0gbmV3IEFuaW1hdG9yKHRoaXMucnVudGltZSwgdGhpcy5hcnRib2FyZCwgdGhpcy5ldmVudE1hbmFnZXIpO1xuICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBhbmltYXRpb25zOyBhcyBsb2FkZWQgaGFzbid0IGhhcHBlbmVkIHlldCwgd2UgbmVlZCB0b1xuICAgICAgICAvLyBzdXBwcmVzcyBmaXJpbmcgdGhlIHBsYXkvcGF1c2UgZXZlbnRzIHVudGlsIHRoZSBsb2FkIGV2ZW50IGhhcyBmaXJlZC4gVG9cbiAgICAgICAgLy8gZG8gdGhpcyB3ZSB0ZWxsIHRoZSBhbmltYXRvciB0byBzdXBwcmVzcyBmaXJpbmcgZXZlbnRzLCBhbmQgYWRkIGV2ZW50XG4gICAgICAgIC8vIGZpcmluZyB0byB0aGUgdGFzayBxdWV1ZS5cbiAgICAgICAgdmFyIGluc3RhbmNlTmFtZXM7XG4gICAgICAgIGlmIChhbmltYXRpb25OYW1lcy5sZW5ndGggPiAwIHx8IHN0YXRlTWFjaGluZU5hbWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGluc3RhbmNlTmFtZXMgPSBhbmltYXRpb25OYW1lcy5jb25jYXQoc3RhdGVNYWNoaW5lTmFtZXMpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5pbml0TGluZWFyQW5pbWF0aW9ucyhhbmltYXRpb25OYW1lcywgYXV0b3BsYXkpO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRvci5pbml0U3RhdGVNYWNoaW5lcyhzdGF0ZU1hY2hpbmVOYW1lcywgYXV0b3BsYXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW5zdGFuY2VOYW1lcyA9IFt0aGlzLmFuaW1hdG9yLmF0TGVhc3RPbmUoYXV0b3BsYXksIGZhbHNlKV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUXVldWUgdXAgZmlyaW5nIHRoZSBwbGF5YmFjayBldmVudHNcbiAgICAgICAgdGhpcy50YXNrUXVldWUuYWRkKHtcbiAgICAgICAgICAgIGV2ZW50OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogYXV0b3BsYXkgPyBFdmVudFR5cGUuUGxheSA6IEV2ZW50VHlwZS5QYXVzZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBpbnN0YW5jZU5hbWVzLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBEcmF3cyB0aGUgY3VycmVudCBhcnRib2FyZCBmcmFtZVxuICAgIFJpdmUucHJvdG90eXBlLmRyYXdGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5zdGFydFJlbmRlcmluZygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRHJhdyByZW5kZXJpbmcgbG9vcDsgcmVuZGVycyBhbmltYXRpb24gZnJhbWVzIGF0IHRoZSBjb3JyZWN0IHRpbWUgaW50ZXJ2YWwuXG4gICAgICogQHBhcmFtIHRpbWUgdGhlIHRpbWUgYXQgd2hpY2ggdG8gcmVuZGVyIGEgZnJhbWVcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24gKHRpbWUsIG9uU2Vjb25kKSB7XG4gICAgICAgIC8vIENsZWFyIHRoZSBmcmFtZVJlcXVlc3RJZCwgYXMgd2UncmUgbm93IHJlbmRlcmluZyBhIGZyZXNoIGZyYW1lXG4gICAgICAgIHRoaXMuZnJhbWVSZXF1ZXN0SWQgPSBudWxsO1xuICAgICAgICB2YXIgYmVmb3JlID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgICAgIC8vIE9uIHRoZSBmaXJzdCBwYXNzLCBtYWtlIHN1cmUgbGFzdFRpbWUgaGFzIGEgdmFsaWQgdmFsdWVcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RSZW5kZXJUaW1lKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RSZW5kZXJUaW1lID0gdGltZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBIYW5kbGUgdGhlIG9uU2Vjb25kIGNhbGxiYWNrXG4gICAgICAgIHRoaXMucmVuZGVyU2Vjb25kVGltZXIgKz0gdGltZSAtIHRoaXMubGFzdFJlbmRlclRpbWU7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlclNlY29uZFRpbWVyID4gNTAwMCkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJTZWNvbmRUaW1lciA9IDA7XG4gICAgICAgICAgICBvblNlY29uZCA9PT0gbnVsbCB8fCBvblNlY29uZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25TZWNvbmQoKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGVsYXBzZWQgdGltZSBiZXR3ZWVuIGZyYW1lcyBpbiBzZWNvbmRzXG4gICAgICAgIHZhciBlbGFwc2VkVGltZSA9ICh0aW1lIC0gdGhpcy5sYXN0UmVuZGVyVGltZSkgLyAxMDAwO1xuICAgICAgICB0aGlzLmxhc3RSZW5kZXJUaW1lID0gdGltZTtcbiAgICAgICAgLy8gLSBBZHZhbmNlIG5vbi1wYXVzZWQgYW5pbWF0aW9ucyBieSB0aGUgZWxhcHNlZCBudW1iZXIgb2Ygc2Vjb25kc1xuICAgICAgICAvLyAtIEFkdmFuY2UgYW55IGFuaW1hdGlvbnMgdGhhdCByZXF1aXJlIHNjcnViYmluZ1xuICAgICAgICAvLyAtIEFkdmFuY2UgdG8gdGhlIGZpcnN0IGZyYW1lIGV2ZW4gd2hlbiBhdXRvcGxheSBpcyBmYWxzZVxuICAgICAgICB2YXIgYWN0aXZlQW5pbWF0aW9ucyA9IHRoaXMuYW5pbWF0b3IuYW5pbWF0aW9uc1xuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5wbGF5aW5nIHx8IGEubmVlZHNTY3J1YjsgfSlcbiAgICAgICAgICAgIC8vIFRoZSBzY3J1YmJlZCBhbmltYXRpb25zIG11c3QgYmUgYXBwbGllZCBmaXJzdCB0byBwcmV2ZW50IHdlaXJkIGFydGlmYWN0c1xuICAgICAgICAgICAgLy8gaWYgdGhlIHBsYXlpbmcgYW5pbWF0aW9ucyBjb25mbGljdCB3aXRoIHRoZSBzY3J1YmJlZCBhbmltYXRpbmcgYXR0cmlidWF0ZXMuXG4gICAgICAgICAgICAuc29ydChmdW5jdGlvbiAoZmlyc3QpIHsgcmV0dXJuIChmaXJzdC5uZWVkc1NjcnViID8gLTEgOiAxKTsgfSk7XG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgYWN0aXZlQW5pbWF0aW9uc18xID0gYWN0aXZlQW5pbWF0aW9uczsgX2kgPCBhY3RpdmVBbmltYXRpb25zXzEubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gYWN0aXZlQW5pbWF0aW9uc18xW19pXTtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5hZHZhbmNlKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgICAgIGlmIChhbmltYXRpb24uaW5zdGFuY2UuZGlkTG9vcCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5sb29wQ291bnQgKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFuaW1hdGlvbi5hcHBseSgxLjApO1xuICAgICAgICB9XG4gICAgICAgIC8vIC0gQWR2YW5jZSBub24tcGF1c2VkIHN0YXRlIG1hY2hpbmVzIGJ5IHRoZSBlbGFwc2VkIG51bWJlciBvZiBzZWNvbmRzXG4gICAgICAgIC8vIC0gQWR2YW5jZSB0byB0aGUgZmlyc3QgZnJhbWUgZXZlbiB3aGVuIGF1dG9wbGF5IGlzIGZhbHNlXG4gICAgICAgIHZhciBhY3RpdmVTdGF0ZU1hY2hpbmVzID0gdGhpcy5hbmltYXRvci5zdGF0ZU1hY2hpbmVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5wbGF5aW5nOyB9KTtcbiAgICAgICAgZm9yICh2YXIgX2EgPSAwLCBhY3RpdmVTdGF0ZU1hY2hpbmVzXzEgPSBhY3RpdmVTdGF0ZU1hY2hpbmVzOyBfYSA8IGFjdGl2ZVN0YXRlTWFjaGluZXNfMS5sZW5ndGg7IF9hKyspIHtcbiAgICAgICAgICAgIHZhciBzdGF0ZU1hY2hpbmUgPSBhY3RpdmVTdGF0ZU1hY2hpbmVzXzFbX2FdO1xuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGV2ZW50cyBiZWZvcmUgdGhlIGN1cnJlbnQgZnJhbWUncyBzdGF0ZSBtYWNoaW5lIGFkdmFuY2VcbiAgICAgICAgICAgIHZhciBudW1FdmVudHNSZXBvcnRlZCA9IHN0YXRlTWFjaGluZS5yZXBvcnRlZEV2ZW50Q291bnQoKTtcbiAgICAgICAgICAgIGlmIChudW1FdmVudHNSZXBvcnRlZCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRXZlbnRzUmVwb3J0ZWQ7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRfMSA9IHN0YXRlTWFjaGluZS5yZXBvcnRlZEV2ZW50QXQoaSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudF8xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRfMS50eXBlID09PSBSaXZlRXZlbnRUeXBlLk9wZW5VcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLlJpdmVFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZXZlbnRfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgdGhlIGV2ZW50IHNpZGUgZWZmZWN0IGlmIGV4cGxpY2l0bHkgZW5hYmxlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmF1dG9tYXRpY2FsbHlIYW5kbGVFdmVudHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0FuY2hvclRhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBldmVudF8xLCB1cmwgPSBfYi51cmwsIHRhcmdldCA9IF9iLnRhcmdldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNhbml0aXplZFVybCA9ICgwLF91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLnNhbml0aXplVXJsKSh1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgJiYgbmV3QW5jaG9yVGFnLnNldEF0dHJpYnV0ZShcImhyZWZcIiwgc2FuaXRpemVkVXJsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ICYmIG5ld0FuY2hvclRhZy5zZXRBdHRyaWJ1dGUoXCJ0YXJnZXRcIiwgdGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNhbml0aXplZFVybCAmJiBzYW5pdGl6ZWRVcmwgIT09IF91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLkJMQU5LX1VSTCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QW5jaG9yVGFnLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5maXJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogRXZlbnRUeXBlLlJpdmVFdmVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogZXZlbnRfMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN0YXRlTWFjaGluZS5hZHZhbmNlKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgICAgIC8vIHN0YXRlTWFjaGluZS5pbnN0YW5jZS5hcHBseSh0aGlzLmFydGJvYXJkKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBPbmNlIHRoZSBhbmltYXRpb25zIGhhdmUgYmVlbiBhcHBsaWVkIHRvIHRoZSBhcnRib2FyZCwgYWR2YW5jZSBpdFxuICAgICAgICAvLyBieSB0aGUgZWxhcHNlZCB0aW1lLlxuICAgICAgICB0aGlzLmFydGJvYXJkLmFkdmFuY2UoZWxhcHNlZFRpbWUpO1xuICAgICAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyO1xuICAgICAgICAvLyBDYW52YXMgbXVzdCBiZSB3aXBlZCB0byBwcmV2ZW50IGFydGlmYWN0c1xuICAgICAgICByZW5kZXJlci5jbGVhcigpO1xuICAgICAgICByZW5kZXJlci5zYXZlKCk7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgcmVuZGVyZXIgYWxpZ25tZW50IGlmIG5lY2Vzc2FyeVxuICAgICAgICB0aGlzLmFsaWduUmVuZGVyZXIoKTtcbiAgICAgICAgLy8gRG8gbm90IGRyYXcgb24gMCBjYW52YXMgc2l6ZVxuICAgICAgICBpZiAoIXRoaXMuX2hhc1plcm9TaXplKSB7XG4gICAgICAgICAgICB0aGlzLmFydGJvYXJkLmRyYXcocmVuZGVyZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJlbmRlcmVyLnJlc3RvcmUoKTtcbiAgICAgICAgcmVuZGVyZXIuZmx1c2goKTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGFueSBhbmltYXRpb25zIHRoYXQgbG9vcGVkXG4gICAgICAgIHRoaXMuYW5pbWF0b3IuaGFuZGxlTG9vcGluZygpO1xuICAgICAgICAvLyBDaGVjayBmb3IgYW55IHN0YXRlIG1hY2hpbmVzIHRoYXQgaGFkIGEgc3RhdGUgY2hhbmdlXG4gICAgICAgIHRoaXMuYW5pbWF0b3IuaGFuZGxlU3RhdGVDaGFuZ2VzKCk7XG4gICAgICAgIC8vIFJlcG9ydCBhZHZhbmNlZCB0aW1lXG4gICAgICAgIHRoaXMuYW5pbWF0b3IuaGFuZGxlQWR2YW5jaW5nKGVsYXBzZWRUaW1lKTtcbiAgICAgICAgLy8gQWRkIGR1cmF0aW9uIHRvIGNyZWF0ZSBmcmFtZSB0byBkdXJhdGlvbnMgYXJyYXlcbiAgICAgICAgdGhpcy5mcmFtZUNvdW50Kys7XG4gICAgICAgIHZhciBhZnRlciA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICB0aGlzLmZyYW1lVGltZXMucHVzaChhZnRlcik7XG4gICAgICAgIHRoaXMuZHVyYXRpb25zLnB1c2goYWZ0ZXIgLSBiZWZvcmUpO1xuICAgICAgICB3aGlsZSAodGhpcy5mcmFtZVRpbWVzWzBdIDw9IGFmdGVyIC0gMTAwMCkge1xuICAgICAgICAgICAgdGhpcy5mcmFtZVRpbWVzLnNoaWZ0KCk7XG4gICAgICAgICAgICB0aGlzLmR1cmF0aW9ucy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhbGxpbmcgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHdpbGwgcmVydW4gZHJhdygpIGF0IHRoZSBjb3JyZWN0IHJhdGU6XG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DYW52YXNfQVBJL1R1dG9yaWFsL0Jhc2ljX2FuaW1hdGlvbnNcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0b3IuaXNQbGF5aW5nKSB7XG4gICAgICAgICAgICAvLyBSZXF1ZXN0IGEgbmV3IHJlbmRlcmluZyBmcmFtZVxuICAgICAgICAgICAgdGhpcy5zdGFydFJlbmRlcmluZygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYW5pbWF0b3IuaXNQYXVzZWQpIHtcbiAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBlbmQgdGltZSBzbyBvbiBwbGF5YmFjayBpdCBzdGFydHMgYXQgdGhlIGNvcnJlY3QgZnJhbWVcbiAgICAgICAgICAgIHRoaXMubGFzdFJlbmRlclRpbWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuYW5pbWF0b3IuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAvLyBSZXNldCBhbmltYXRpb24gaW5zdGFuY2VzLCBhcnRib2FyZCBhbmQgdGltZVxuICAgICAgICAgICAgLy8gVE9ETzogaW1wbGVtZW50IHRoaXMgcHJvcGVybHkgd2hlbiB3ZSBoYXZlIGluc3RhbmNpbmdcbiAgICAgICAgICAgIC8vIHRoaXMuaW5pdEFydGJvYXJkKCk7XG4gICAgICAgICAgICAvLyB0aGlzLmRyYXdGcmFtZSgpO1xuICAgICAgICAgICAgdGhpcy5sYXN0UmVuZGVyVGltZSA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEFsaWduIHRoZSByZW5kZXJlclxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLmFsaWduUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIHJlbmRlcmVyID0gX2EucmVuZGVyZXIsIHJ1bnRpbWUgPSBfYS5ydW50aW1lLCBfbGF5b3V0ID0gX2EuX2xheW91dCwgYXJ0Ym9hcmQgPSBfYS5hcnRib2FyZDtcbiAgICAgICAgLy8gQWxpZ24gdGhpbmdzIHVwIHNhZmUgaW4gdGhlIGtub3dsZWRnZSB3ZSBjYW4gcmVzdG9yZSBpZiBjaGFuZ2VkXG4gICAgICAgIHJlbmRlcmVyLmFsaWduKF9sYXlvdXQucnVudGltZUZpdChydW50aW1lKSwgX2xheW91dC5ydW50aW1lQWxpZ25tZW50KHJ1bnRpbWUpLCB7XG4gICAgICAgICAgICBtaW5YOiBfbGF5b3V0Lm1pblgsXG4gICAgICAgICAgICBtaW5ZOiBfbGF5b3V0Lm1pblksXG4gICAgICAgICAgICBtYXhYOiBfbGF5b3V0Lm1heFgsXG4gICAgICAgICAgICBtYXhZOiBfbGF5b3V0Lm1heFksXG4gICAgICAgIH0sIGFydGJvYXJkLmJvdW5kcyk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUml2ZS5wcm90b3R5cGUsIFwiZnBzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kdXJhdGlvbnMubGVuZ3RoO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcImZyYW1lVGltZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZHVyYXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICh0aGlzLmR1cmF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEgKyBiOyB9LCAwKSAvIHRoaXMuZHVyYXRpb25zLmxlbmd0aCkudG9GaXhlZCg0KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBhbGwgV2FzbS1nZW5lcmF0ZWQgb2JqZWN0cyB0aGF0IG5lZWQgdG8gYmUgbWFudWFsbHkgZGVzdHJveWVkOlxuICAgICAqIGFydGJvYXJkIGluc3RhbmNlcywgYW5pbWF0aW9uIGluc3RhbmNlcywgc3RhdGUgbWFjaGluZSBpbnN0YW5jZXMsXG4gICAgICogcmVuZGVyZXIgaW5zdGFuY2UsIGZpbGUgYW5kIHJ1bnRpbWUuXG4gICAgICpcbiAgICAgKiBPbmNlIHRoaXMgaXMgY2FsbGVkLCB5b3Ugd2lsbCBuZWVkIHRvIGluaXRpYWxpc2UgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlXG4gICAgICogUml2ZSBjbGFzc1xuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLmNsZWFudXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gU3RvcCB0aGUgcmVuZGVyZXIgaWYgaXQgaGFzbid0IGFscmVhZHkgYmVlbiBzdG9wcGVkLlxuICAgICAgICB0aGlzLnN0b3BSZW5kZXJpbmcoKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgYW55IGFydGJvYXJkLCBhbmltYXRpb24gb3Igc3RhdGUgbWFjaGluZSBpbnN0YW5jZXMuXG4gICAgICAgIHRoaXMuY2xlYW51cEluc3RhbmNlcygpO1xuICAgICAgICAvLyBSZW1vdmUgZnJvbSBvYnNlcnZlclxuICAgICAgICBpZiAodGhpcy5fb2JzZXJ2ZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG9ic2VydmVycy5yZW1vdmUodGhpcy5fb2JzZXJ2ZWQpO1xuICAgICAgICB9XG4gICAgICAgIChfYSA9IHRoaXMucml2ZUZpbGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jbGVhbnVwKCk7XG4gICAgICAgIHRoaXMucml2ZUZpbGUgPSBudWxsO1xuICAgICAgICB0aGlzLmZpbGUgPSBudWxsO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2xlYW5zIHVwIHRoZSBSZW5kZXJlciBvYmplY3QuIE9ubHkgY2FsbCB0aGlzIEFQSSBpZiB5b3Ugbm8gbG9uZ2VyXG4gICAgICogbmVlZCB0byByZW5kZXIgUml2ZSBjb250ZW50IGluIHlvdXIgc2Vzc2lvbi5cbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5kZWxldGVSaXZlUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5yZW5kZXJlcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlbGV0ZSgpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBhbnkgV2FzbS1nZW5lcmF0ZWQgb2JqZWN0cyB0aGF0IG5lZWQgdG8gYmUgbWFudWFsbHkgZGVzdHJveWVkOlxuICAgICAqIGFydGJvYXJkIGluc3RhbmNlcywgYW5pbWF0aW9uIGluc3RhbmNlcywgc3RhdGUgbWFjaGluZSBpbnN0YW5jZXMuXG4gICAgICpcbiAgICAgKiBPbmNlIHRoaXMgaXMgY2FsbGVkLCB0aGluZ3Mgd2lsbCBuZWVkIHRvIGJlIHJlaW5pdGlhbGl6ZWQgb3IgYmFkIHRoaW5nc1xuICAgICAqIG1pZ2h0IGhhcHBlbi5cbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5jbGVhbnVwSW5zdGFuY2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5ldmVudENsZWFudXAgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRDbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVsZXRlIGFsbCBhbmltYXRpb24gYW5kIHN0YXRlIG1hY2hpbmUgaW5zdGFuY2VzXG4gICAgICAgIHRoaXMuc3RvcCgpO1xuICAgICAgICBpZiAodGhpcy5hcnRib2FyZCkge1xuICAgICAgICAgICAgdGhpcy5hcnRib2FyZC5kZWxldGUoKTtcbiAgICAgICAgICAgIHRoaXMuYXJ0Ym9hcmQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUcmllcyB0byBxdWVyeSB0aGUgc2V0dXAgQXJ0Ym9hcmQgZm9yIGEgdGV4dCBydW4gbm9kZSB3aXRoIHRoZSBnaXZlbiBuYW1lLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRleHRSdW5OYW1lIC0gTmFtZSBvZiB0aGUgdGV4dCBydW4gbm9kZSBhc3NvY2lhdGVkIHdpdGggYSB0ZXh0IG9iamVjdFxuICAgICAqIEByZXR1cm5zIC0gVGV4dFZhbHVlUnVuIG5vZGUgb3IgdW5kZWZpbmVkIGlmIHRoZSB0ZXh0IHJ1biBjYW5ub3QgYmUgcXVlcmllZFxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLnJldHJpZXZlVGV4dFJ1biA9IGZ1bmN0aW9uICh0ZXh0UnVuTmFtZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGV4dFJ1bk5hbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIHRleHQgcnVuIG5hbWUgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmFydGJvYXJkKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJUcmllZCB0byBhY2Nlc3MgdGV4dCBydW4sIGJ1dCB0aGUgQXJ0Ym9hcmQgaXMgbnVsbFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGV4dFJ1biA9IHRoaXMuYXJ0Ym9hcmQudGV4dFJ1bih0ZXh0UnVuTmFtZSk7XG4gICAgICAgIGlmICghdGV4dFJ1bikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IGFjY2VzcyBhIHRleHQgcnVuIHdpdGggbmFtZSAnXCIuY29uY2F0KHRleHRSdW5OYW1lLCBcIicgaW4gdGhlICdcIikuY29uY2F0KChfYSA9IHRoaXMuYXJ0Ym9hcmQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uYW1lLCBcIicgQXJ0Ym9hcmQuIE5vdGUgdGhhdCB5b3UgbXVzdCByZW5hbWUgYSB0ZXh0IHJ1biBub2RlIGluIHRoZSBSaXZlIGVkaXRvciB0byBtYWtlIGl0IHF1ZXJ5YWJsZSBhdCBydW50aW1lLlwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRleHRSdW47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgc3RyaW5nIGZyb20gYSBnaXZlbiB0ZXh0IHJ1biBub2RlIG5hbWUsIG9yIHVuZGVmaW5lZCBpZiB0aGUgdGV4dCBydW5cbiAgICAgKiBjYW5ub3QgYmUgcXVlcmllZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZXh0UnVuTmFtZSAtIE5hbWUgb2YgdGhlIHRleHQgcnVuIG5vZGUgYXNzb2NpYXRlZCB3aXRoIGEgdGV4dCBvYmplY3RcbiAgICAgKiBAcmV0dXJucyAtIFN0cmluZyB2YWx1ZSBvZiB0aGUgdGV4dCBydW4gbm9kZSBvciB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5nZXRUZXh0UnVuVmFsdWUgPSBmdW5jdGlvbiAodGV4dFJ1bk5hbWUpIHtcbiAgICAgICAgdmFyIHRleHRSdW4gPSB0aGlzLnJldHJpZXZlVGV4dFJ1bih0ZXh0UnVuTmFtZSk7XG4gICAgICAgIHJldHVybiB0ZXh0UnVuID8gdGV4dFJ1bi50ZXh0IDogdW5kZWZpbmVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHRleHQgdmFsdWUgZm9yIGEgZ2l2ZW4gdGV4dCBydW4gbm9kZSBuYW1lIGlmIHBvc3NpYmxlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGV4dFJ1bk5hbWUgLSBOYW1lIG9mIHRoZSB0ZXh0IHJ1biBub2RlIGFzc29jaWF0ZWQgd2l0aCBhIHRleHQgb2JqZWN0XG4gICAgICogQHBhcmFtIHRleHRSdW5WYWx1ZSAtIFN0cmluZyB2YWx1ZSB0byBzZXQgb24gdGhlIHRleHQgcnVuIG5vZGVcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5zZXRUZXh0UnVuVmFsdWUgPSBmdW5jdGlvbiAodGV4dFJ1bk5hbWUsIHRleHRSdW5WYWx1ZSkge1xuICAgICAgICB2YXIgdGV4dFJ1biA9IHRoaXMucmV0cmlldmVUZXh0UnVuKHRleHRSdW5OYW1lKTtcbiAgICAgICAgaWYgKHRleHRSdW4pIHtcbiAgICAgICAgICAgIHRleHRSdW4udGV4dCA9IHRleHRSdW5WYWx1ZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLy8gUGxheXMgc3BlY2lmaWVkIGFuaW1hdGlvbnM7IGlmIG5vbmUgc3BlY2lmaWVkLCBpdCB1bnBhdXNlcyBldmVyeXRoaW5nLlxuICAgIFJpdmUucHJvdG90eXBlLnBsYXkgPSBmdW5jdGlvbiAoYW5pbWF0aW9uTmFtZXMsIGF1dG9wbGF5KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGFuaW1hdGlvbk5hbWVzID0gbWFwVG9TdHJpbmdBcnJheShhbmltYXRpb25OYW1lcyk7XG4gICAgICAgIC8vIElmIHRoZSBmaWxlJ3Mgbm90IGxvYWRlZCwgcXVldWUgdXAgdGhlIHBsYXlcbiAgICAgICAgaWYgKCF0aGlzLnJlYWR5Rm9yUGxheWluZykge1xuICAgICAgICAgICAgdGhpcy50YXNrUXVldWUuYWRkKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnBsYXkoYW5pbWF0aW9uTmFtZXMsIGF1dG9wbGF5KTsgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5pbWF0b3IucGxheShhbmltYXRpb25OYW1lcyk7XG4gICAgICAgIGlmICh0aGlzLmV2ZW50Q2xlYW51cCkge1xuICAgICAgICAgICAgdGhpcy5ldmVudENsZWFudXAoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldHVwUml2ZUxpc3RlbmVycygpO1xuICAgICAgICB0aGlzLnN0YXJ0UmVuZGVyaW5nKCk7XG4gICAgfTtcbiAgICAvLyBQYXVzZXMgc3BlY2lmaWVkIGFuaW1hdGlvbnM7IGlmIG5vbmUgc3BlY2lmaWVkLCBwYXVzZXMgYWxsLlxuICAgIFJpdmUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKGFuaW1hdGlvbk5hbWVzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGFuaW1hdGlvbk5hbWVzID0gbWFwVG9TdHJpbmdBcnJheShhbmltYXRpb25OYW1lcyk7XG4gICAgICAgIC8vIElmIHRoZSBmaWxlJ3Mgbm90IGxvYWRlZCwgZWFybHkgb3V0LCBub3RoaW5nIHRvIHBhdXNlXG4gICAgICAgIGlmICghdGhpcy5yZWFkeUZvclBsYXlpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudGFza1F1ZXVlLmFkZCh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5wYXVzZShhbmltYXRpb25OYW1lcyk7IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5ldmVudENsZWFudXApIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRDbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRvci5wYXVzZShhbmltYXRpb25OYW1lcyk7XG4gICAgfTtcbiAgICBSaXZlLnByb3RvdHlwZS5zY3J1YiA9IGZ1bmN0aW9uIChhbmltYXRpb25OYW1lcywgdmFsdWUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgYW5pbWF0aW9uTmFtZXMgPSBtYXBUb1N0cmluZ0FycmF5KGFuaW1hdGlvbk5hbWVzKTtcbiAgICAgICAgLy8gSWYgdGhlIGZpbGUncyBub3QgbG9hZGVkLCBlYXJseSBvdXQsIG5vdGhpbmcgdG8gcGF1c2VcbiAgICAgICAgaWYgKCF0aGlzLnJlYWR5Rm9yUGxheWluZykge1xuICAgICAgICAgICAgdGhpcy50YXNrUXVldWUuYWRkKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnNjcnViKGFuaW1hdGlvbk5hbWVzLCB2YWx1ZSk7IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBTY3J1YiB0aGUgYW5pbWF0aW9uIHRpbWU7IHdlIGRyYXcgYSBzaW5nbGUgZnJhbWUgaGVyZSBzbyB0aGF0IGlmXG4gICAgICAgIC8vIG5vdGhpbmcncyBjdXJyZW50bHkgcGxheWluZywgdGhlIHNjcnViYmVkIGFuaW1hdGlvbiBpcyBzdGlsbCByZW5kZXJlZC9cbiAgICAgICAgdGhpcy5hbmltYXRvci5zY3J1YihhbmltYXRpb25OYW1lcywgdmFsdWUgfHwgMCk7XG4gICAgICAgIHRoaXMuZHJhd0ZyYW1lKCk7XG4gICAgfTtcbiAgICAvLyBTdG9wcyBzcGVjaWZpZWQgYW5pbWF0aW9uczsgaWYgbm9uZSBzcGVjaWZpZXMsIHN0b3BzIHRoZW0gYWxsLlxuICAgIFJpdmUucHJvdG90eXBlLnN0b3AgPSBmdW5jdGlvbiAoYW5pbWF0aW9uTmFtZXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgYW5pbWF0aW9uTmFtZXMgPSBtYXBUb1N0cmluZ0FycmF5KGFuaW1hdGlvbk5hbWVzKTtcbiAgICAgICAgLy8gSWYgdGhlIGZpbGUncyBub3QgbG9hZGVkLCBlYXJseSBvdXQsIG5vdGhpbmcgdG8gcGF1c2VcbiAgICAgICAgaWYgKCF0aGlzLnJlYWR5Rm9yUGxheWluZykge1xuICAgICAgICAgICAgdGhpcy50YXNrUXVldWUuYWRkKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnN0b3AoYW5pbWF0aW9uTmFtZXMpOyB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltYXRvci5zdG9wKGFuaW1hdGlvbk5hbWVzKTtcbiAgICAgICAgaWYgKHRoaXMuZXZlbnRDbGVhbnVwKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50Q2xlYW51cCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXNldHMgdGhlIGFuaW1hdGlvblxuICAgICAqIEBwYXJhbSBhcnRib2FyZCB0aGUgbmFtZSBvZiB0aGUgYXJ0Ym9hcmQsIG9yIGRlZmF1bHQgaWYgbm9uZSBnaXZlblxuICAgICAqIEBwYXJhbSBhbmltYXRpb25zIHRoZSBuYW1lcyBvZiBhbmltYXRpb25zIGZvciBwbGF5YmFja1xuICAgICAqIEBwYXJhbSBzdGF0ZU1hY2hpbmVzIHRoZSBuYW1lcyBvZiBzdGF0ZSBtYWNoaW5lcyBmb3IgcGxheWJhY2tcbiAgICAgKiBAcGFyYW0gYXV0b3BsYXkgd2hldGhlciB0byBhdXRvcGxheSB3aGVuIHJlc2V0LCBkZWZhdWx0cyB0byBmYWxzZVxuICAgICAqXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGFydGJvYXJkLCBhbmltYXRpb25zLCBzdGF0ZSBtYWNoaW5lcywgYW5kIHBsYXliYWNrIHN0YXRlc1xuICAgICAgICB2YXIgYXJ0Qm9hcmROYW1lID0gcGFyYW1zID09PSBudWxsIHx8IHBhcmFtcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGFyYW1zLmFydGJvYXJkO1xuICAgICAgICB2YXIgYW5pbWF0aW9uTmFtZXMgPSBtYXBUb1N0cmluZ0FycmF5KHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5hbmltYXRpb25zKTtcbiAgICAgICAgdmFyIHN0YXRlTWFjaGluZU5hbWVzID0gbWFwVG9TdHJpbmdBcnJheShwYXJhbXMgPT09IG51bGwgfHwgcGFyYW1zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJhbXMuc3RhdGVNYWNoaW5lcyk7XG4gICAgICAgIHZhciBhdXRvcGxheSA9IChfYSA9IHBhcmFtcyA9PT0gbnVsbCB8fCBwYXJhbXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmFtcy5hdXRvcGxheSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmFsc2U7XG4gICAgICAgIC8vIFN0b3AgZXZlcnl0aGluZyBhbmQgY2xlYW4gdXBcbiAgICAgICAgdGhpcy5jbGVhbnVwSW5zdGFuY2VzKCk7XG4gICAgICAgIC8vIFJlaW5pdGlhbGl6ZSBhbiBhcnRib2FyZCBpbnN0YW5jZSB3aXRoIHRoZSBzdGF0ZVxuICAgICAgICB0aGlzLmluaXRBcnRib2FyZChhcnRCb2FyZE5hbWUsIGFuaW1hdGlvbk5hbWVzLCBzdGF0ZU1hY2hpbmVOYW1lcywgYXV0b3BsYXkpO1xuICAgICAgICB0aGlzLnRhc2tRdWV1ZS5wcm9jZXNzKCk7XG4gICAgfTtcbiAgICAvLyBMb2FkcyBhIG5ldyBSaXZlIGZpbGUsIGtlZXBpbmcgbGlzdGVuZXJzIGluIHBsYWNlXG4gICAgUml2ZS5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5maWxlID0gbnVsbDtcbiAgICAgICAgLy8gU3RvcCBhbGwgYW5pbWF0aW9uc1xuICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgLy8gUmVpbml0aWFsaXplXG4gICAgICAgIHRoaXMuaW5pdChwYXJhbXMpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcImxheW91dFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxheW91dC4gTm90ZSB0aGF0IGxheW91dCBzaG91bGQgYmUgdHJlYXRlZCBhc1xuICAgICAgICAgKiBpbW11dGFibGUuIElmIHlvdSB3YW50IHRvIGNoYW5nZSB0aGUgbGF5b3V0LCBjcmVhdGUgYSBuZXcgb25lIHVzZSB0aGVcbiAgICAgICAgICogbGF5b3V0IHNldHRlclxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGF5b3V0O1xuICAgICAgICB9LFxuICAgICAgICAvLyBTZXRzIGEgbmV3IGxheW91dFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChsYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xheW91dCA9IGxheW91dDtcbiAgICAgICAgICAgIC8vIElmIHRoZSBtYXhYIG9yIG1heFkgYXJlIDAsIHRoZW4gc2V0IHRoZW0gdG8gdGhlIGNhbnZhcyB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgICAgICAgICBpZiAoIWxheW91dC5tYXhYIHx8ICFsYXlvdXQubWF4WSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplVG9DYW52YXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmxvYWRlZCAmJiAhdGhpcy5hbmltYXRvci5pc1BsYXlpbmcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdGcmFtZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGF5b3V0IGJvdW5kcyB0byB0aGUgY3VycmVudCBjYW52YXMgc2l6ZTsgdGhpcyBpcyB0eXBpY2FsbHkgY2FsbGVkXG4gICAgICogd2hlbiB0aGUgY2FudmFzIGlzIHJlc2l6ZWRcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5yZXNpemVUb0NhbnZhcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fbGF5b3V0ID0gdGhpcy5sYXlvdXQuY29weVdpdGgoe1xuICAgICAgICAgICAgbWluWDogMCxcbiAgICAgICAgICAgIG1pblk6IDAsXG4gICAgICAgICAgICBtYXhYOiB0aGlzLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgIG1heFk6IHRoaXMuY2FudmFzLmhlaWdodCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBY2NvdW50cyBmb3IgZGV2aWNlUGl4ZWxSYXRpbyBhcyBhIG11bHRpcGxpZXIgdG8gcmVuZGVyIHRoZSBzaXplIG9mIHRoZSBjYW52YXMgZHJhd2luZyBzdXJmYWNlLlxuICAgICAqIFVzZXMgdGhlIHNpemUgb2YgdGhlIGJhY2tpbmcgY2FudmFzIHRvIHNldCBuZXcgd2lkdGgvaGVpZ2h0IGF0dHJpYnV0ZXMuIE5lZWQgdG8gcmUtcmVuZGVyXG4gICAgICogYW5kIHJlc2l6ZSB0aGUgbGF5b3V0IHRvIG1hdGNoIHRoZSBuZXcgZHJhd2luZyBzdXJmYWNlIGFmdGVyd2FyZHMuXG4gICAgICogVXNlZnVsIGZ1bmN0aW9uIGZvciBjb25zdW1lcnMgdG8gaW5jbHVkZSBpbiBhIHdpbmRvdyByZXNpemUgbGlzdGVuZXJcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5yZXNpemVEcmF3aW5nU3VyZmFjZVRvQ2FudmFzID0gZnVuY3Rpb24gKGN1c3RvbURldmljZVBpeGVsUmF0aW8pIHtcbiAgICAgICAgaWYgKHRoaXMuY2FudmFzIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgJiYgISF3aW5kb3cpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB3aWR0aCA9IF9hLndpZHRoLCBoZWlnaHQgPSBfYS5oZWlnaHQ7XG4gICAgICAgICAgICB2YXIgZHByID0gY3VzdG9tRGV2aWNlUGl4ZWxSYXRpbyB8fCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSBkcHIgKiB3aWR0aDtcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGRwciAqIGhlaWdodDtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRSZW5kZXJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMucmVzaXplVG9DYW52YXMoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcInNvdXJjZVwiLCB7XG4gICAgICAgIC8vIFJldHVybnMgdGhlIGFuaW1hdGlvbiBzb3VyY2UsIHdoaWNoIG1heSBiZSB1bmRlZmluZWRcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zcmM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUml2ZS5wcm90b3R5cGUsIFwiYWN0aXZlQXJ0Ym9hcmRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgbmFtZSBvZiB0aGUgYWN0aXZlIGFydGJvYXJkXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFydGJvYXJkID8gdGhpcy5hcnRib2FyZC5uYW1lIDogXCJcIjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSaXZlLnByb3RvdHlwZSwgXCJhbmltYXRpb25OYW1lc1wiLCB7XG4gICAgICAgIC8vIFJldHVybnMgYSBsaXN0IG9mIGFuaW1hdGlvbiBuYW1lcyBvbiB0aGUgY2hvc2VuIGFydGJvYXJkXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGZpbGUncyBub3QgbG9hZGVkLCB3ZSBnb3Qgbm90aGluZyB0byByZXR1cm5cbiAgICAgICAgICAgIGlmICghdGhpcy5sb2FkZWQgfHwgIXRoaXMuYXJ0Ym9hcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hcnRib2FyZC5hbmltYXRpb25Db3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25OYW1lcy5wdXNoKHRoaXMuYXJ0Ym9hcmQuYW5pbWF0aW9uQnlJbmRleChpKS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhbmltYXRpb25OYW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSaXZlLnByb3RvdHlwZSwgXCJzdGF0ZU1hY2hpbmVOYW1lc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBzdGF0ZSBtYWNoaW5lIG5hbWVzIGZyb20gdGhlIGN1cnJlbnQgYXJ0Ym9hcmRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIGZpbGUncyBub3QgbG9hZGVkLCB3ZSBnb3Qgbm90aGluZyB0byByZXR1cm5cbiAgICAgICAgICAgIGlmICghdGhpcy5sb2FkZWQgfHwgIXRoaXMuYXJ0Ym9hcmQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3RhdGVNYWNoaW5lTmFtZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hcnRib2FyZC5zdGF0ZU1hY2hpbmVDb3VudCgpOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzdGF0ZU1hY2hpbmVOYW1lcy5wdXNoKHRoaXMuYXJ0Ym9hcmQuc3RhdGVNYWNoaW5lQnlJbmRleChpKS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdGF0ZU1hY2hpbmVOYW1lcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGlucHV0cyBmb3IgdGhlIHNwZWNpZmllZCBpbnN0YW5jZWQgc3RhdGUgbWFjaGluZSwgb3IgYW4gZW1wdHlcbiAgICAgKiBsaXN0IGlmIHRoZSBuYW1lIGlzIGludmFsaWQgb3IgdGhlIHN0YXRlIG1hY2hpbmUgaXMgbm90IGluc3RhbmNlZFxuICAgICAqIEBwYXJhbSBuYW1lIHRoZSBzdGF0ZSBtYWNoaW5lIG5hbWVcbiAgICAgKiBAcmV0dXJucyB0aGUgaW5wdXRzIGZvciB0aGUgbmFtZWQgc3RhdGUgbWFjaGluZVxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLnN0YXRlTWFjaGluZUlucHV0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIC8vIElmIHRoZSBmaWxlJ3Mgbm90IGxvYWRlZCwgZWFybHkgb3V0LCBub3RoaW5nIHRvIHBhdXNlXG4gICAgICAgIGlmICghdGhpcy5sb2FkZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgc3RhdGVNYWNoaW5lID0gdGhpcy5hbmltYXRvci5zdGF0ZU1hY2hpbmVzLmZpbmQoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubmFtZSA9PT0gbmFtZTsgfSk7XG4gICAgICAgIHJldHVybiBzdGF0ZU1hY2hpbmUgPT09IG51bGwgfHwgc3RhdGVNYWNoaW5lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdGF0ZU1hY2hpbmUuaW5wdXRzO1xuICAgIH07XG4gICAgLy8gUmV0dXJucyB0aGUgaW5wdXQgd2l0aCB0aGUgcHJvdmlkZWQgbmFtZSBhdCB0aGUgZ2l2ZW4gcGF0aFxuICAgIFJpdmUucHJvdG90eXBlLnJldHJpZXZlSW5wdXRBdFBhdGggPSBmdW5jdGlvbiAobmFtZSwgcGF0aCkge1xuICAgICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIGlucHV0IG5hbWUgcHJvdmlkZWQgZm9yIHBhdGggJ1wiLmNvbmNhdChwYXRoLCBcIidcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hcnRib2FyZCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVHJpZWQgdG8gYWNjZXNzIGlucHV0OiAnXCIuY29uY2F0KG5hbWUsIFwiJywgYXQgcGF0aDogJ1wiKS5jb25jYXQocGF0aCwgXCInLCBidXQgdGhlIEFydGJvYXJkIGlzIG51bGxcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMuYXJ0Ym9hcmQuaW5wdXRCeVBhdGgobmFtZSwgcGF0aCk7XG4gICAgICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBhY2Nlc3MgYW4gaW5wdXQgd2l0aCBuYW1lOiAnXCIuY29uY2F0KG5hbWUsIFwiJywgYXQgcGF0aDonXCIpLmNvbmNhdChwYXRoLCBcIidcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgYm9vbGVhbiBpbnB1dCB3aXRoIHRoZSBwcm92aWRlZCBuYW1lIGF0IHRoZSBnaXZlbiBwYXRoIHdpdGggdmFsdWVcbiAgICAgKiBAcGFyYW0gaW5wdXQgdGhlIHN0YXRlIG1hY2hpbmUgaW5wdXQgbmFtZVxuICAgICAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gc2V0IHRoZSBpbnB1dCB0b1xuICAgICAqIEBwYXJhbSBwYXRoIHRoZSBwYXRoIHRoZSBpbnB1dCBpcyBsb2NhdGVkIGF0IGFuIGFydGJvYXJkIGxldmVsXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUuc2V0Qm9vbGVhblN0YXRlQXRQYXRoID0gZnVuY3Rpb24gKGlucHV0TmFtZSwgdmFsdWUsIHBhdGgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gdGhpcy5yZXRyaWV2ZUlucHV0QXRQYXRoKGlucHV0TmFtZSwgcGF0aCk7XG4gICAgICAgIGlmICghaW5wdXQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpbnB1dC50eXBlID09PSBTdGF0ZU1hY2hpbmVJbnB1dFR5cGUuQm9vbGVhbikge1xuICAgICAgICAgICAgaW5wdXQuYXNCb29sKCkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIklucHV0IHdpdGggbmFtZTogJ1wiLmNvbmNhdChpbnB1dE5hbWUsIFwiJywgYXQgcGF0aDonXCIpLmNvbmNhdChwYXRoLCBcIicgaXMgbm90IGEgYm9vbGVhblwiKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgbnVtYmVyIGlucHV0IHdpdGggdGhlIHByb3ZpZGVkIG5hbWUgYXQgdGhlIGdpdmVuIHBhdGggd2l0aCB2YWx1ZVxuICAgICAqIEBwYXJhbSBpbnB1dCB0aGUgc3RhdGUgbWFjaGluZSBpbnB1dCBuYW1lXG4gICAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBzZXQgdGhlIGlucHV0IHRvXG4gICAgICogQHBhcmFtIHBhdGggdGhlIHBhdGggdGhlIGlucHV0IGlzIGxvY2F0ZWQgYXQgYW4gYXJ0Ym9hcmQgbGV2ZWxcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5zZXROdW1iZXJTdGF0ZUF0UGF0aCA9IGZ1bmN0aW9uIChpbnB1dE5hbWUsIHZhbHVlLCBwYXRoKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IHRoaXMucmV0cmlldmVJbnB1dEF0UGF0aChpbnB1dE5hbWUsIHBhdGgpO1xuICAgICAgICBpZiAoIWlucHV0KVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoaW5wdXQudHlwZSA9PT0gU3RhdGVNYWNoaW5lSW5wdXRUeXBlLk51bWJlcikge1xuICAgICAgICAgICAgaW5wdXQuYXNOdW1iZXIoKS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiSW5wdXQgd2l0aCBuYW1lOiAnXCIuY29uY2F0KGlucHV0TmFtZSwgXCInLCBhdCBwYXRoOidcIikuY29uY2F0KHBhdGgsIFwiJyBpcyBub3QgYSBudW1iZXJcIikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaXJlIHRoZSB0cmlnZ2VyIHdpdGggdGhlIHByb3ZpZGVkIG5hbWUgYXQgdGhlIGdpdmVuIHBhdGhcbiAgICAgKiBAcGFyYW0gaW5wdXQgdGhlIHN0YXRlIG1hY2hpbmUgaW5wdXQgbmFtZVxuICAgICAqIEBwYXJhbSBwYXRoIHRoZSBwYXRoIHRoZSBpbnB1dCBpcyBsb2NhdGVkIGF0IGFuIGFydGJvYXJkIGxldmVsXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUuZmlyZVN0YXRlQXRQYXRoID0gZnVuY3Rpb24gKGlucHV0TmFtZSwgcGF0aCkge1xuICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLnJldHJpZXZlSW5wdXRBdFBhdGgoaW5wdXROYW1lLCBwYXRoKTtcbiAgICAgICAgaWYgKCFpbnB1dClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGlucHV0LnR5cGUgPT09IFN0YXRlTWFjaGluZUlucHV0VHlwZS5UcmlnZ2VyKSB7XG4gICAgICAgICAgICBpbnB1dC5hc1RyaWdnZXIoKS5maXJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJJbnB1dCB3aXRoIG5hbWU6ICdcIi5jb25jYXQoaW5wdXROYW1lLCBcIicsIGF0IHBhdGg6J1wiKS5jb25jYXQocGF0aCwgXCInIGlzIG5vdCBhIHRyaWdnZXJcIikpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvLyBSZXR1cm5zIHRoZSBUZXh0VmFsdWVSdW4gb2JqZWN0IGZvciB0aGUgcHJvdmlkZWQgbmFtZSBhdCB0aGUgZ2l2ZW4gcGF0aFxuICAgIFJpdmUucHJvdG90eXBlLnJldHJpZXZlVGV4dEF0UGF0aCA9IGZ1bmN0aW9uIChuYW1lLCBwYXRoKSB7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiTm8gdGV4dCBuYW1lIHByb3ZpZGVkIGZvciBwYXRoICdcIi5jb25jYXQocGF0aCwgXCInXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhdGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIk5vIHBhdGggcHJvdmlkZWQgZm9yIHRleHQgJ1wiLmNvbmNhdChuYW1lLCBcIidcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5hcnRib2FyZCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVHJpZWQgdG8gYWNjZXNzIHRleHQ6ICdcIi5jb25jYXQobmFtZSwgXCInLCBhdCBwYXRoOiAnXCIpLmNvbmNhdChwYXRoLCBcIicsIGJ1dCB0aGUgQXJ0Ym9hcmQgaXMgbnVsbFwiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHRleHQgPSB0aGlzLmFydGJvYXJkLnRleHRCeVBhdGgobmFtZSwgcGF0aCk7XG4gICAgICAgIGlmICghdGV4dCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IGFjY2VzcyB0ZXh0IHdpdGggbmFtZTogJ1wiLmNvbmNhdChuYW1lLCBcIicsIGF0IHBhdGg6J1wiKS5jb25jYXQocGF0aCwgXCInXCIpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHJpZXZlcyB0aGUgdGV4dCB2YWx1ZSBmb3IgYSBzcGVjaWZpZWQgdGV4dCBydW4gYXQgYSBnaXZlbiBwYXRoXG4gICAgICogQHBhcmFtIHRleHROYW1lIFRoZSBuYW1lIG9mIHRoZSB0ZXh0IHJ1blxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHRvIHRoZSB0ZXh0IHJ1biB3aXRoaW4gdGhlIGFydGJvYXJkXG4gICAgICogQHJldHVybnMgVGhlIHRleHQgdmFsdWUgb2YgdGhlIHRleHQgcnVuLCBvciB1bmRlZmluZWQgaWYgbm90IGZvdW5kXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEdldCB0aGUgdGV4dCB2YWx1ZSBmb3IgYSB0ZXh0IHJ1biBuYW1lZCBcInRpdGxlXCIgYXQgb25lIG5lc3RlZCBhcnRib2FyZCBkZWVwXG4gICAgICogY29uc3QgdGl0bGVUZXh0ID0gcml2ZUluc3RhbmNlLmdldFRleHRSdW5WYWx1ZUF0UGF0aChcInRpdGxlXCIsIFwiYXJ0Ym9hcmQxXCIpO1xuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBHZXQgdGhlIHRleHQgdmFsdWUgZm9yIGEgdGV4dCBydW4gbmFtZWQgXCJzdWJ0aXRsZVwiIHdpdGhpbiBhIG5lc3RlZCBncm91cCB0d28gYXJ0Ym9hcmRzIGRlZXBcbiAgICAgKiBjb25zdCBzdWJ0aXRsZVRleHQgPSByaXZlSW5zdGFuY2UuZ2V0VGV4dFJ1blZhbHVlQXRQYXRoKFwic3VidGl0bGVcIiwgXCJncm91cC9uZXN0ZWRHcm91cFwiKTtcbiAgICAgKlxuICAgICAqIEByZW1hcmtzXG4gICAgICogSWYgdGhlIHRleHQgcnVuIGNhbm5vdCBiZSBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIHBhdGgsIGEgd2FybmluZyB3aWxsIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZS5cbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5nZXRUZXh0UnVuVmFsdWVBdFBhdGggPSBmdW5jdGlvbiAodGV4dE5hbWUsIHBhdGgpIHtcbiAgICAgICAgdmFyIHJ1biA9IHRoaXMucmV0cmlldmVUZXh0QXRQYXRoKHRleHROYW1lLCBwYXRoKTtcbiAgICAgICAgaWYgKCFydW4pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkNvdWxkIG5vdCBnZXQgdGV4dCB3aXRoIG5hbWU6ICdcIi5jb25jYXQodGV4dE5hbWUsIFwiJywgYXQgcGF0aDonXCIpLmNvbmNhdChwYXRoLCBcIidcIikpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydW4udGV4dDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgdmFsdWUgZm9yIGEgc3BlY2lmaWVkIHRleHQgcnVuIGF0IGEgZ2l2ZW4gcGF0aFxuICAgICAqIEBwYXJhbSB0ZXh0TmFtZSBUaGUgbmFtZSBvZiB0aGUgdGV4dCBydW5cbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIG5ldyB0ZXh0IHZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSBwYXRoIFRoZSBwYXRoIHRvIHRoZSB0ZXh0IHJ1biB3aXRoaW4gdGhlIGFydGJvYXJkXG4gICAgICogQHJldHVybnMgdm9pZFxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBTZXQgdGhlIHRleHQgdmFsdWUgZm9yIGEgdGV4dCBydW4gbmFtZWQgXCJ0aXRsZVwiIGF0IG9uZSBuZXN0ZWQgYXJ0Ym9hcmQgZGVlcFxuICAgICAqIHJpdmVJbnN0YW5jZS5zZXRUZXh0UnVuVmFsdWVBdFBhdGgoXCJ0aXRsZVwiLCBcIk5ldyBUaXRsZVwiLCBcImFydGJvYXJkMVwiKTtcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogLy8gU2V0IHRoZSB0ZXh0IHZhbHVlIGZvciBhIHRleHQgcnVuIG5hbWVkIFwic3VidGl0bGVcIiB3aXRoaW4gYSBuZXN0ZWQgZ3JvdXAgdHdvIGFydGJvYXJkcyBkZWVwXG4gICAgICogcml2ZUluc3RhbmNlLnNldFRleHRSdW5WYWx1ZUF0UGF0aChcInN1YnRpdGxlXCIsIFwiTmV3IFN1YnRpdGxlXCIsIFwiZ3JvdXAvbmVzdGVkR3JvdXBcIik7XG4gICAgICpcbiAgICAgKiBAcmVtYXJrc1xuICAgICAqIElmIHRoZSB0ZXh0IHJ1biBjYW5ub3QgYmUgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBwYXRoLCBhIHdhcm5pbmcgd2lsbCBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGUuXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUuc2V0VGV4dFJ1blZhbHVlQXRQYXRoID0gZnVuY3Rpb24gKHRleHROYW1lLCB2YWx1ZSwgcGF0aCkge1xuICAgICAgICB2YXIgcnVuID0gdGhpcy5yZXRyaWV2ZVRleHRBdFBhdGgodGV4dE5hbWUsIHBhdGgpO1xuICAgICAgICBpZiAoIXJ1bikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiQ291bGQgbm90IHNldCB0ZXh0IHdpdGggbmFtZTogJ1wiLmNvbmNhdCh0ZXh0TmFtZSwgXCInLCBhdCBwYXRoOidcIikuY29uY2F0KHBhdGgsIFwiJ1wiKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcnVuLnRleHQgPSB2YWx1ZTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSaXZlLnByb3RvdHlwZSwgXCJwbGF5aW5nU3RhdGVNYWNoaW5lTmFtZXNcIiwge1xuICAgICAgICAvLyBSZXR1cm5zIGEgbGlzdCBvZiBwbGF5aW5nIG1hY2hpbmUgbmFtZXNcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgZmlsZSdzIG5vdCBsb2FkZWQsIHdlIGdvdCBub3RoaW5nIHRvIHJldHVyblxuICAgICAgICAgICAgaWYgKCF0aGlzLmxvYWRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFuaW1hdG9yLnN0YXRlTWFjaGluZXNcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLnBsYXlpbmc7IH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5uYW1lOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSaXZlLnByb3RvdHlwZSwgXCJwbGF5aW5nQW5pbWF0aW9uTmFtZXNcIiwge1xuICAgICAgICAvLyBSZXR1cm5zIGEgbGlzdCBvZiBwbGF5aW5nIGFuaW1hdGlvbiBuYW1lc1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlJ3Mgbm90IGxvYWRlZCwgd2UgZ290IG5vdGhpbmcgdG8gcmV0dXJuXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0b3IuYW5pbWF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEucGxheWluZzsgfSkubWFwKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm5hbWU7IH0pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcInBhdXNlZEFuaW1hdGlvbk5hbWVzXCIsIHtcbiAgICAgICAgLy8gUmV0dXJucyBhIGxpc3Qgb2YgcGF1c2VkIGFuaW1hdGlvbiBuYW1lc1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlJ3Mgbm90IGxvYWRlZCwgd2UgZ290IG5vdGhpbmcgdG8gcmV0dXJuXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0b3IuYW5pbWF0aW9uc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuICFhLnBsYXlpbmc7IH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5uYW1lOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSaXZlLnByb3RvdHlwZSwgXCJwYXVzZWRTdGF0ZU1hY2hpbmVOYW1lc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgUmV0dXJucyBhIGxpc3Qgb2YgcGF1c2VkIG1hY2hpbmUgbmFtZXNcbiAgICAgICAgICogQHJldHVybnMgYSBsaXN0IG9mIHN0YXRlIG1hY2hpbmUgbmFtZXMgdGhhdCBhcmUgcGF1c2VkXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBmaWxlJ3Mgbm90IGxvYWRlZCwgd2UgZ290IG5vdGhpbmcgdG8gcmV0dXJuXG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0b3Iuc3RhdGVNYWNoaW5lc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuICFtLnBsYXlpbmc7IH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5uYW1lOyB9KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSaXZlLnByb3RvdHlwZSwgXCJpc1BsYXlpbmdcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogQHJldHVybnMgdHJ1ZSBpZiBhbnkgYW5pbWF0aW9uIGlzIHBsYXlpbmdcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0b3IuaXNQbGF5aW5nO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcImlzUGF1c2VkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm5zIHRydWUgaWYgYWxsIGluc3RhbmNlZCBhbmltYXRpb25zIGFyZSBwYXVzZWRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0b3IuaXNQYXVzZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUml2ZS5wcm90b3R5cGUsIFwiaXNTdG9wcGVkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm5zIHRydWUgaWYgbm8gYW5pbWF0aW9ucyBhcmUgcGxheWluZyBvciBwYXVzZWRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYW5pbWF0b3IuaXNTdG9wcGVkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcImJvdW5kc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJucyB0aGUgYm91bmRzIG9mIHRoZSBjdXJyZW50IGFydGJvYXJkLCBvciB1bmRlZmluZWQgaWYgdGhlIGFydGJvYXJkXG4gICAgICAgICAqIGlzbid0IGxvYWRlZCB5ZXQuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmFydGJvYXJkID8gdGhpcy5hcnRib2FyZC5ib3VuZHMgOiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBTdWJzY3JpYmUgdG8gUml2ZS1nZW5lcmF0ZWQgZXZlbnRzXG4gICAgICogQHBhcmFtIHR5cGUgdGhlIHR5cGUgb2YgZXZlbnQgdG8gc3Vic2NyaWJlIHRvXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIGNhbGxiYWNrIHRvIGZpcmUgd2hlbiB0aGUgZXZlbnQgb2NjdXJzXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuYWRkKHtcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVW5zdWJzY3JpYmVzIGZyb20gYSBSaXZlLWdlbmVyYXRlZCBldmVudFxuICAgICAqIEBwYXJhbSB0eXBlIHRoZSB0eXBlIG9mIGV2ZW50IHRvIHVuc3Vic2NyaWJlIGZyb21cbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgdGhlIGNhbGxiYWNrIHRvIHVuc3Vic2NyaWJlXG4gICAgICovXG4gICAgUml2ZS5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLnJlbW92ZSh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVuc3Vic2NyaWJlcyBmcm9tIGEgUml2ZS1nZW5lcmF0ZWQgZXZlbnRcbiAgICAgKiBAZGVwcmVjYXRlZFxuICAgICAqIEBwYXJhbSBjYWxsYmFjayB0aGUgY2FsbGJhY2sgdG8gdW5zdWJzY3JpYmUgZnJvbVxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDogcGxlYXNlIHVzZSBgb2ZmKClgIGluc3RlYWQuXCIpO1xuICAgICAgICB0aGlzLm9mZih0eXBlLCBjYWxsYmFjayk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZXMgYWxsIFJpdmUgbGlzdGVuZXJzIGZyb20gYW4gZXZlbnQgdHlwZSwgb3IgZXZlcnl0aGluZyBpZiBubyB0eXBlIGlzXG4gICAgICogZ2l2ZW5cbiAgICAgKiBAcGFyYW0gdHlwZSB0aGUgdHlwZSBvZiBldmVudCB0byB1bnN1YnNjcmliZSBmcm9tLCBvciBhbGwgdHlwZXMgaWZcbiAgICAgKiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5yZW1vdmVBbGxSaXZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICB0aGlzLmV2ZW50TWFuYWdlci5yZW1vdmVBbGwodHlwZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZXMgYWxsIGxpc3RlbmVycyBmcm9tIGFuIGV2ZW50IHR5cGUsIG9yIGV2ZXJ5dGhpbmcgaWYgbm8gdHlwZSBpc1xuICAgICAqIGdpdmVuXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAcGFyYW0gdHlwZSB0aGUgdHlwZSBvZiBldmVudCB0byB1bnN1YnNjcmliZSBmcm9tLCBvciBhbGwgdHlwZXMgaWZcbiAgICAgKiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS51bnN1YnNjcmliZUFsbCA9IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIlRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZDogcGxlYXNlIHVzZSBgcmVtb3ZlQWxsUml2ZUV2ZW50TGlzdGVuZXJzKClgIGluc3RlYWQuXCIpO1xuICAgICAgICB0aGlzLnJlbW92ZUFsbFJpdmVFdmVudExpc3RlbmVycyh0eXBlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSByZW5kZXJpbmcgbG9vcDsgdGhpcyBpcyBkaWZmZXJlbnQgZnJvbSBwYXVzaW5nIGluIHRoYXQgaXQgZG9lc24ndFxuICAgICAqIGNoYW5nZSB0aGUgc3RhdGUgb2YgYW55IGFuaW1hdGlvbi4gSXQgc3RvcHMgcmVuZGVyaW5nIGZyb20gb2NjdXJyaW5nLiBUaGlzXG4gICAgICogaXMgZGVzaWduZWQgZm9yIHNpdHVhdGlvbnMgc3VjaCBhcyB3aGVuIFJpdmUgaXNuJ3QgdmlzaWJsZS5cbiAgICAgKlxuICAgICAqIFRoZSBvbmx5IHdheSB0byBzdGFydCByZW5kZXJpbmcgYWdhaW4gaXMgdG8gY2FsbCBgc3RhcnRSZW5kZXJpbmdgLlxuICAgICAqIEFuaW1hdGlvbnMgdGhhdCBhcmUgbWFya2VkIGFzIHBsYXlpbmcgd2lsbCBzdGFydCBmcm9tIHRoZSBwb3NpdGlvbiB0aGF0XG4gICAgICogdGhleSB3b3VsZCBoYXZlIGJlZW4gYXQgaWYgcmVuZGVyaW5nIGhhZCBub3QgYmVlbiBzdG9wcGVkLlxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLnN0b3BSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmxvYWRlZCAmJiB0aGlzLmZyYW1lUmVxdWVzdElkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5ydW50aW1lLmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ydW50aW1lLmNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuZnJhbWVSZXF1ZXN0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5mcmFtZVJlcXVlc3RJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZyYW1lUmVxdWVzdElkID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnRzIHRoZSByZW5kZXJpbmcgbG9vcCBpZiBpdCBoYXMgYmVlbiBwcmV2aW91c2x5IHN0b3BwZWQuIElmIHRoZVxuICAgICAqIHJlbmRlcmVyIGlzIGFscmVhZHkgYWN0aXZlLCB0aGVuIHRoaXMgd2lsbCBoYXZlIHplcm8gZWZmZWN0LlxuICAgICAqL1xuICAgIFJpdmUucHJvdG90eXBlLnN0YXJ0UmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5sb2FkZWQgJiYgdGhpcy5hcnRib2FyZCAmJiAhdGhpcy5mcmFtZVJlcXVlc3RJZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucnVudGltZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lUmVxdWVzdElkID0gdGhpcy5ydW50aW1lLnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmRyYXcuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lUmVxdWVzdElkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuZHJhdy5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBmcmFtZXMtcGVyLXNlY29uZCAoRlBTKSByZXBvcnRpbmcgZm9yIHRoZSBydW50aW1lXG4gICAgICogSWYgbm8gY2FsbGJhY2sgaXMgcHJvdmlkZWQsIFJpdmUgd2lsbCBhcHBlbmQgYSBmaXhlZC1wb3NpdGlvbiBkaXYgYXQgdGhlIHRvcC1yaWdodCBjb3JuZXIgb2ZcbiAgICAgKiB0aGUgcGFnZSB3aXRoIHRoZSBGUFMgcmVhZGluZ1xuICAgICAqIEBwYXJhbSBmcHNDYWxsYmFjayAtIENhbGxiYWNrIGZyb20gdGhlIHJ1bnRpbWUgZHVyaW5nIHRoZSBSQUYgbG9vcCB0aGF0IHN1cHBsaWVzIHRoZSBGUFMgdmFsdWVcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5lbmFibGVGUFNDb3VudGVyID0gZnVuY3Rpb24gKGZwc0NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMucnVudGltZS5lbmFibGVGUFNDb3VudGVyKGZwc0NhbGxiYWNrKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpc2FibGVzIGZyYW1lcy1wZXItc2Vjb25kIChGUFMpIHJlcG9ydGluZyBmb3IgdGhlIHJ1bnRpbWVcbiAgICAgKi9cbiAgICBSaXZlLnByb3RvdHlwZS5kaXNhYmxlRlBTQ291bnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5ydW50aW1lLmRpc2FibGVGUFNDb3VudGVyKCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUml2ZS5wcm90b3R5cGUsIFwiY29udGVudHNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0aGUgY29udGVudHMgb2YgYSBSaXZlIGZpbGU6IHRoZSBhcnRib2FyZHMsIGFuaW1hdGlvbnMsIGFuZCBzdGF0ZSBtYWNoaW5lc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMubG9hZGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciByaXZlQ29udGVudHMgPSB7XG4gICAgICAgICAgICAgICAgYXJ0Ym9hcmRzOiBbXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuZmlsZS5hcnRib2FyZENvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBhcnRib2FyZCA9IHRoaXMuZmlsZS5hcnRib2FyZEJ5SW5kZXgoaSk7XG4gICAgICAgICAgICAgICAgdmFyIGFydGJvYXJkQ29udGVudHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGFydGJvYXJkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbnM6IFtdLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZU1hY2hpbmVzOiBbXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYXJ0Ym9hcmQuYW5pbWF0aW9uQ291bnQoKTsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBhcnRib2FyZC5hbmltYXRpb25CeUluZGV4KGopO1xuICAgICAgICAgICAgICAgICAgICBhcnRib2FyZENvbnRlbnRzLmFuaW1hdGlvbnMucHVzaChhbmltYXRpb24ubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgYXJ0Ym9hcmQuc3RhdGVNYWNoaW5lQ291bnQoKTsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZU1hY2hpbmUgPSBhcnRib2FyZC5zdGF0ZU1hY2hpbmVCeUluZGV4KGspO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbmFtZV8xID0gc3RhdGVNYWNoaW5lLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IG5ldyB0aGlzLnJ1bnRpbWUuU3RhdGVNYWNoaW5lSW5zdGFuY2Uoc3RhdGVNYWNoaW5lLCBhcnRib2FyZCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dENvbnRlbnRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgaW5zdGFuY2UuaW5wdXRDb3VudCgpOyBsKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGluc3RhbmNlLmlucHV0KGwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRDb250ZW50cy5wdXNoKHsgbmFtZTogaW5wdXQubmFtZSwgdHlwZTogaW5wdXQudHlwZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhcnRib2FyZENvbnRlbnRzLnN0YXRlTWFjaGluZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lXzEsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dHM6IGlucHV0Q29udGVudHMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByaXZlQ29udGVudHMuYXJ0Ym9hcmRzLnB1c2goYXJ0Ym9hcmRDb250ZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcml2ZUNvbnRlbnRzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJpdmUucHJvdG90eXBlLCBcInZvbHVtZVwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBnZXR0ZXIgYW5kIHNldHRlciBmb3IgdGhlIHZvbHVtZSBvZiB0aGUgYXJ0Ym9hcmRcbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJ0Ym9hcmQgJiYgdGhpcy5hcnRib2FyZC52b2x1bWUgIT09IHRoaXMuX3ZvbHVtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHRoaXMuYXJ0Ym9hcmQudm9sdW1lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZvbHVtZSA9IHZhbHVlO1xuICAgICAgICAgICAgaWYgKHRoaXMuYXJ0Ym9hcmQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFydGJvYXJkLnZvbHVtZSA9IHZhbHVlICogYXVkaW9NYW5hZ2VyLnN5c3RlbVZvbHVtZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8vIEVycm9yIG1lc3NhZ2UgZm9yIG1pc3Npbmcgc291cmNlIG9yIGJ1ZmZlclxuICAgIFJpdmUubWlzc2luZ0Vycm9yTWVzc2FnZSA9IFwiUml2ZSBzb3VyY2UgZmlsZSBvciBkYXRhIGJ1ZmZlciByZXF1aXJlZFwiO1xuICAgIHJldHVybiBSaXZlO1xufSgpKTtcblxuLy8gTG9hZHMgUml2ZSBkYXRhIGZyb20gYSBVUkkgdmlhIGZldGNoLlxudmFyIGxvYWRSaXZlRmlsZSA9IGZ1bmN0aW9uIChzcmMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcSwgcmVzLCBidWZmZXI7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcmVxID0gbmV3IFJlcXVlc3Qoc3JjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaChyZXEpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzLmFycmF5QnVmZmVyKCldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgYnVmZmVyXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG4vLyAjZW5kcmVnaW9uXG4vLyAjcmVnaW9uIHV0aWxpdHkgZnVuY3Rpb25zXG4vKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBlbnN1cmUgYW4gb2JqZWN0IGlzIGEgc3RyaW5nIGFycmF5XG4gKi9cbnZhciBtYXBUb1N0cmluZ0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuICAgIGlmICh0eXBlb2Ygb2JqID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiBbb2JqXTtcbiAgICB9XG4gICAgZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgLy8gSWYgb2JqIGlzIHVuZGVmaW5lZCwgcmV0dXJuIGVtcHR5IGFycmF5XG4gICAgcmV0dXJuIFtdO1xufTtcbi8vICNlbmRyZWdpb25cbi8vICNyZWdpb24gdGVzdGluZyB1dGlsaXRpZXNcbi8vIEV4cG9ydHMgdG8gb25seSBiZSB1c2VkIGZvciB0ZXN0c1xudmFyIFRlc3RpbmcgPSB7XG4gICAgRXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIsXG4gICAgVGFza1F1ZXVlTWFuYWdlcjogVGFza1F1ZXVlTWFuYWdlcixcbn07XG4vLyAjZW5kcmVnaW9uXG4vLyAjcmVnaW9uIGFzc2V0IGxvYWRlcnNcbi8qKlxuICogRGVjb2RlcyBieXRlcyBpbnRvIGFuIGF1ZGlvIGFzc2V0LlxuICpcbiAqIEJlIHN1cmUgdG8gY2FsbCBgLnVucmVmKClgIG9uIHRoZSBhdWRpbyBvbmNlIGl0IGlzIG5vIGxvbmdlciBuZWVkZWQuIFRoaXNcbiAqIGFsbG93cyB0aGUgZW5naW5lIHRvIGNsZWFuIGl0IHVwIHdoZW4gaXQgaXMgbm90IHVzZWQgYnkgYW55IG1vcmUgYW5pbWF0aW9ucy5cbiAqL1xudmFyIGRlY29kZUF1ZGlvID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHJldHVybiBSdW50aW1lTG9hZGVyLmdldEluc3RhbmNlKGZ1bmN0aW9uIChyaXZlKSB7XG4gICAgICAgICAgICByaXZlLmRlY29kZUF1ZGlvKGJ5dGVzLCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuLyoqXG4gKiBEZWNvZGVzIGJ5dGVzIGludG8gYW4gaW1hZ2UuXG4gKlxuICogQmUgc3VyZSB0byBjYWxsIGAudW5yZWYoKWAgb24gdGhlIGltYWdlIG9uY2UgaXQgaXMgbm8gbG9uZ2VyIG5lZWRlZC4gVGhpc1xuICogYWxsb3dzIHRoZSBlbmdpbmUgdG8gY2xlYW4gaXQgdXAgd2hlbiBpdCBpcyBub3QgdXNlZCBieSBhbnkgbW9yZSBhbmltYXRpb25zLlxuICovXG52YXIgZGVjb2RlSW1hZ2UgPSBmdW5jdGlvbiAoYnl0ZXMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgcmV0dXJuIFJ1bnRpbWVMb2FkZXIuZ2V0SW5zdGFuY2UoZnVuY3Rpb24gKHJpdmUpIHtcbiAgICAgICAgICAgIHJpdmUuZGVjb2RlSW1hZ2UoYnl0ZXMsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4vKipcbiAqIERlY29kZXMgYnl0ZXMgaW50byBhIGZvbnQuXG4gKlxuICogQmUgc3VyZSB0byBjYWxsIGAudW5yZWYoKWAgb24gdGhlIGZvbnQgb25jZSBpdCBpcyBubyBsb25nZXIgbmVlZGVkLiBUaGlzXG4gKiBhbGxvd3MgdGhlIGVuZ2luZSB0byBjbGVhbiBpdCB1cCB3aGVuIGl0IGlzIG5vdCB1c2VkIGJ5IGFueSBtb3JlIGFuaW1hdGlvbnMuXG4gKi9cbnZhciBkZWNvZGVGb250ID0gZnVuY3Rpb24gKGJ5dGVzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHJldHVybiBSdW50aW1lTG9hZGVyLmdldEluc3RhbmNlKGZ1bmN0aW9uIChyaXZlKSB7XG4gICAgICAgICAgICByaXZlLmRlY29kZUZvbnQoYnl0ZXMsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG4vLyAjZW5kcmVnaW9uXG5cbn0pKCk7XG5cbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19leHBvcnRzX187XG4vKioqKioqLyB9KSgpXG47XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJpdmUuanMubWFwIiwiaW1wb3J0IHsgaW5pdGlhbGl6ZUFwcCB9IGZyb20gXCJmaXJlYmFzZS9hcHBcIjtcclxuaW1wb3J0IHsgZ2V0QW5hbHl0aWNzLCBsb2dFdmVudCB9IGZyb20gXCJmaXJlYmFzZS9hbmFseXRpY3NcIjtcclxuaW1wb3J0IHsgZmlyZWJhc2VDb25maWcgfSBmcm9tIFwiLi9maXJlYmFzZS1jb25maWdcIjtcclxuZXhwb3J0IGNsYXNzIEJhc2VGaXJlYmFzZUludGVncmF0aW9uIHtcclxuICAgIGZpcmViYXNlQXBwO1xyXG4gICAgYW5hbHl0aWNzO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplRmlyZWJhc2UoKTtcclxuICAgIH1cclxuICAgIGN1c3RvbUV2ZW50cyhldmVudE5hbWUsIGV2ZW50KSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9nRXZlbnQodGhpcy5hbmFseXRpY3MsIGV2ZW50TmFtZSwgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIGxvZ2dpbmcgY3VzdG9tIGV2ZW50OlwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2Vzc2lvbkVuZCgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLm9uTGluZSAmJiB0aGlzLmFuYWx5dGljcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dFdmVudCh0aGlzLmFuYWx5dGljcywgXCJzZXNzaW9uX2VuZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIGxvZ2dpbmcgc2Vzc2lvbl9lbmQgZXZlbnQ6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplRmlyZWJhc2UoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5maXJlYmFzZUFwcCA9IGluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLmFuYWx5dGljcyA9IGdldEFuYWx5dGljcyh0aGlzLmZpcmViYXNlQXBwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSBpbml0aWFsaXppbmcgRmlyZWJhc2U6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUI4YzJsQlZpMjZ1N1lSTDlzeE9QOTdVYXEzeU44aFRsNFwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJmdG0tYjlkOTkuZmlyZWJhc2VhcHAuY29tXCIsXHJcbiAgICBkYXRhYmFzZVVSTDogXCJodHRwczovL2Z0bS1iOWQ5OS5maXJlYmFzZWlvLmNvbVwiLFxyXG4gICAgcHJvamVjdElkOiBcImZ0bS1iOWQ5OVwiLFxyXG4gICAgc3RvcmFnZUJ1Y2tldDogXCJmdG0tYjlkOTkuYXBwc3BvdC5jb21cIixcclxuICAgIG1lc3NhZ2luZ1NlbmRlcklkOiBcIjYwMjQwMjM4Nzk0MVwiLFxyXG4gICAgYXBwSWQ6IFwiMTo2MDI0MDIzODc5NDE6d2ViOmE2M2Y0ZWFkZGM5NDlmNTM5ZGUxMGNcIixcclxuICAgIG1lYXN1cmVtZW50SWQ6IFwiRy1GVkxTTjdEN05NXCIsXHJcbn07XHJcbiIsImltcG9ydCB7IEJhc2VGaXJlYmFzZUludGVncmF0aW9uIH0gZnJvbSBcIi4vYmFzZS1maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VJbnRlZ3JhdGlvbiBleHRlbmRzIEJhc2VGaXJlYmFzZUludGVncmF0aW9uIHtcclxuICAgIHN0YXRpYyBpbnN0YW5jZTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgaWYgKCFGaXJlYmFzZUludGVncmF0aW9uLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIEZpcmViYXNlSW50ZWdyYXRpb24uaW5zdGFuY2UgPSBuZXcgRmlyZWJhc2VJbnRlZ3JhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRmlyZWJhc2VJbnRlZ3JhdGlvbi5pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIHNlbmRTZXNzaW9uU3RhcnRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJzZXNzaW9uX3N0YXJ0XCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZFNlc3Npb25FbmRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJzZXNzaW9uX2VuZFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRTZWxlY3RlZExldmVsRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwic2VsZWN0ZWRfbGV2ZWxcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kVGFwcGVkU3RhcnRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJ0YXBwZWRfc3RhcnRcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kUHV6emxlQ29tcGxldGVkRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwicHV6emxlX2NvbXBsZXRlZFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRMZXZlbENvbXBsZXRlZEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcImxldmVsX2NvbXBsZXRlZFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50KCkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKCd1c2VyX2NsaWNrZWQnLCB7IGNsaWNrOiAnQ2xpY2snIH0pO1xyXG4gICAgfVxyXG4gICAgc2VuZERvd25sb2FkQ29tcGxldGVkRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKCdkb3dubG9hZF9jb21wbGV0ZWQnLCBkYXRhKTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBjdXN0b20gRXZlbnRzXHJcbmV4cG9ydCBjb25zdCBMT0FEUFVaWkxFID0gXCJsb2FkcHV6emxlXCI7XHJcbmV4cG9ydCBjb25zdCBTVE9ORURST1AgPSBcInN0b25lc2Ryb3BwZWRcIjtcclxuLy8gZGVmYXVsdCBFdmVudHNcclxuZXhwb3J0IGNvbnN0IE1PVVNFTU9WRSA9IFwibW91c2Vtb3ZlXCI7XHJcbmV4cG9ydCBjb25zdCBNT1VTRURPV04gPSBcIm1vdXNlZG93blwiO1xyXG5leHBvcnQgY29uc3QgTU9VU0VVUCA9IFwibW91c2V1cFwiO1xyXG5leHBvcnQgY29uc3QgVE9VQ0hTVEFSVCA9IFwidG91Y2hzdGFydFwiO1xyXG5leHBvcnQgY29uc3QgVE9VQ0hNT1ZFID0gXCJ0b3VjaG1vdmVcIjtcclxuZXhwb3J0IGNvbnN0IFRPVUNIRU5EID0gXCJ0b3VjaGVuZFwiO1xyXG5leHBvcnQgY29uc3QgQ0xJQ0sgPSBcImNsaWNrXCI7XHJcbmV4cG9ydCBjb25zdCBWSVNJQklMSVRZX0NIQU5HRSA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xyXG4iLCJjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG5pbXBvcnQgeyBEZXZlbG9wbWVudFNlcnZlciB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuZXhwb3J0IHZhciBwc2V1ZG9JZCA9IHVybFBhcmFtcy5nZXQoXCJjcl91c2VyX2lkXCIpO1xyXG5leHBvcnQgdmFyIGxhbmcgPSB1cmxQYXJhbXMuZ2V0KFwiY3JfbGFuZ1wiKSA9PSBudWxsID8gXCJlbmdsaXNoXCIgOiB1cmxQYXJhbXMuZ2V0KFwiY3JfbGFuZ1wiKTtcclxuZXhwb3J0IGNvbnN0IGZvbnQgPSBVdGlscy5nZXRMYW5ndWFnZVNwZWNpZmljRm9udChsYW5nKTtcclxuZXhwb3J0IGNvbnN0IERlYnVnZ2VyID0ge1xyXG4gICAgRGV2ZWxvcG1lbnRMaW5rOiB3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyhEZXZlbG9wbWVudFNlcnZlcilcclxuICAgICAgICA/IHRydWVcclxuICAgICAgICA6IGZhbHNlLFxyXG4gICAgRGVidWdNb2RlOiBmYWxzZSxcclxufTtcclxuIiwiaW1wb3J0IHsgZm9udCB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBTdG9uZUNvbmZpZyB7XHJcbiAgICB4O1xyXG4gICAgeTtcclxuICAgIG9yaWd4O1xyXG4gICAgb3JpZ3k7XHJcbiAgICB0ZXh0O1xyXG4gICAgaW1nO1xyXG4gICAgaW1hZ2VTaXplO1xyXG4gICAgdGV4dEZvbnRTaXplO1xyXG4gICAgY2FudmFzV2lkdGg7XHJcbiAgICBjYW52YXNIZWlnaHQ7XHJcbiAgICBpbWFnZUNlbnRlck9mZnNldFg7XHJcbiAgICBpbWFnZUNlbnRlck9mZnNldFk7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgdHV0b3JpYWxJbnN0YW5jZTtcclxuICAgIHRpbWVyVGlja2luZ0luc3RhbmNlO1xyXG4gICAgZnJhbWUgPSAwO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCwgc3RvbmVMZXR0ZXIsIHhQb3MsIHlQb3MsIGltZywgdGltZXJUaWNraW5nSW5zdGFuY2UsIHR1dG9yaWFsSW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLnggPSB4UG9zO1xyXG4gICAgICAgIHRoaXMueSA9IHlQb3M7XHJcbiAgICAgICAgdGhpcy5vcmlneCA9IHhQb3M7XHJcbiAgICAgICAgdGhpcy5vcmlneSA9IHlQb3M7XHJcbiAgICAgICAgdGhpcy5jYW52YXNXaWR0aCA9IGNhbnZhc1dpZHRoO1xyXG4gICAgICAgIHRoaXMuY2FudmFzSGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWxJbnN0YW5jZSA9IHR1dG9yaWFsSW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gc3RvbmVMZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBpbWc7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUltYWdlQW5kRm9udFNpemUoKTtcclxuICAgICAgICB0aGlzLmltYWdlQ2VudGVyT2Zmc2V0WCA9IHRoaXMuaW1hZ2VTaXplIC8gMi4zO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRZID0gdGhpcy5pbWFnZVNpemUgLyAxLjU7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmdJbnN0YW5jZSA9IHRpbWVyVGlja2luZ0luc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMudGV4dCkud2lkdGggKiAxLjQgPlxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0hlaWdodCAvIDkuNSkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlU2l6ZSA9IHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpLndpZHRoICogMS4xO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRGb250U2l6ZSA9IHRoaXMuY2FudmFzSGVpZ2h0IC8gMjU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHQubGVuZ3RoID49IDMgJiYgdGhpcy5vcmlneCA8IDUwICYmIHRoaXMub3JpZ3ggPCB0aGlzLmNhbnZhc1dpZHRoIC8gMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5vcmlneCArIDIxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlU2l6ZSA9IHRoaXMuY2FudmFzSGVpZ2h0IC8gOS41O1xyXG4gICAgICAgICAgICB0aGlzLnRleHRGb250U2l6ZSA9IHRoaXMuY2FudmFzSGVpZ2h0IC8gMjA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0RWFzZSA9IChjdXJyZW50UHJvZ3Jlc3MsIHN0YXJ0LCBkaXN0YW5jZSwgc3RlcHMpID0+IHtcclxuICAgICAgICByZXR1cm4gLWRpc3RhbmNlIC8gMiAqIChNYXRoLmNvcyhNYXRoLlBJICogY3VycmVudFByb2dyZXNzIC8gc3RlcHMpIC0gMSkgKyBzdGFydDtcclxuICAgIH07XHJcbiAgICBnZXRYID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lID49IDEwMCkge1xyXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaGFzIGVuZGVkLCByZXR1cm4gdGhlIGZpbmFsIHN0b25lIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEVhc2UodGhpcy5mcmFtZSwgMCwgdGhpcy54LCAxMDApO1xyXG4gICAgfTtcclxuICAgIGdldFkgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWUgPj0gMTAwKSB7XHJcbiAgICAgICAgICAgIC8vIEFuaW1hdGlvbiBoYXMgZW5kZWQsIHJldHVybiB0aGUgZmluYWwgc3RvbmUgcG9zaXRpb25cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWFzZSh0aGlzLmZyYW1lLCAwLCB0aGlzLnksIDEwMCk7XHJcbiAgICB9O1xyXG4gICAgYWRqdXN0U2l6ZShzaG91bGRSZXNpemUsIG51bSkge1xyXG4gICAgICAgIHJldHVybiBzaG91bGRSZXNpemUgPyBudW0gKiAxLjI1IDogbnVtO1xyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUsIHNob3VsZFJlc2l6ZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IHRoaXMuZ2V0WCgpIC0gdGhpcy5hZGp1c3RTaXplKHNob3VsZFJlc2l6ZSwgdGhpcy5pbWFnZUNlbnRlck9mZnNldFgpO1xyXG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmdldFkoKSAtIHRoaXMuYWRqdXN0U2l6ZShzaG91bGRSZXNpemUsIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRZKTtcclxuICAgICAgICAvLyBBcHBseSBzaGFkb3cgcHJvcGVydGllc1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSAncmVkJztcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93Q29sb3IgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAxKSc7IC8vIENvbG9yIG9mIHRoZSBzaGFkb3dcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93Qmx1ciA9IDEyOyAvLyBCbHVyIGxldmVsIG9mIHRoZSBzaGFkb3dcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IDA7IC8vIEhvcml6b250YWwgc2hhZG93IG9mZnNldFxyXG4gICAgICAgIHRoaXMuY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDsgLy8gVmVydGljYWwgc2hhZG93IG9mZnNldFxyXG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWcsIHgsIHksIHRoaXMuYWRqdXN0U2l6ZShzaG91bGRSZXNpemUsIHRoaXMuaW1hZ2VTaXplKSwgdGhpcy5hZGp1c3RTaXplKHNob3VsZFJlc2l6ZSwgdGhpcy5pbWFnZVNpemUpKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gdGhpcy50ZXh0Rm9udFNpemUgKyBgcHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAvLyBTZXQgc2hhZG93IHByb3BlcnRpZXNcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WCA9IDA7IC8vIE1vdmUgc2hhZG93IHRvIHRoZSByaWdodCBieSAxMCBwaXhlbHNcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IDA7IC8vIE1vdmUgc2hhZG93IGRvd24gYnkgMTAgcGl4ZWxzXHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNoYWRvd0JsdXIgPSAwOyAvLyBCbHVyIHRoZSBzaGFkb3cgYnkgMTUgcGl4ZWxzXHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNoYWRvd0NvbG9yID0gJ3RyYW5zcGFyZW50ICc7IC8vIFNlbWktdHJhbnNwYXJlbnQgd2hpdGUgc2hhZG93XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMudGV4dCwgdGhpcy5nZXRYKCksIHRoaXMuZ2V0WSgpKTtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZSA8IDEwMCkge1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lID0gdGhpcy5mcmFtZSArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMudHV0b3JpYWxJbnN0YW5jZSAhPSBudWxsIHx8IHRoaXMudHV0b3JpYWxJbnN0YW5jZSAhPSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy50dXRvcmlhbEluc3RhbmNlLmRyYXcoZGVsdGFUaW1lLCB0aGlzLmltZywgdGhpcy5pbWFnZVNpemUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEZWJ1Z2dlciB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IGxhbmd1YWdlRm9udE1hcHBpbmcgfSBmcm9tIFwiQGRhdGEvaTE4LWZvbnQtbWFwcGluZ1wiO1xyXG5leHBvcnQgY2xhc3MgVXRpbHMge1xyXG4gICAgc3RhdGljIFVybFN1YnN0cmluZyA9IFwiL2ZlZWR0aGVtb25zdGVyXCI7XHJcbiAgICBzdGF0aWMgZ2V0Q29udmVydGVkRGV2UHJvZFVSTCh1cmwpIHtcclxuICAgICAgICByZXR1cm4gRGVidWdnZXIuRGV2ZWxvcG1lbnRMaW5rXHJcbiAgICAgICAgICAgID8gdXJsLnNsaWNlKDAsIHVybC5pbmRleE9mKHRoaXMuVXJsU3Vic3RyaW5nKSArIHRoaXMuVXJsU3Vic3RyaW5nLmxlbmd0aCkgK1xyXG4gICAgICAgICAgICAgICAgXCJkZXZcIiArXHJcbiAgICAgICAgICAgICAgICB1cmwuc2xpY2UodXJsLmluZGV4T2YodGhpcy5VcmxTdWJzdHJpbmcpICsgdGhpcy5VcmxTdWJzdHJpbmcubGVuZ3RoKVxyXG4gICAgICAgICAgICA6IHVybDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRMYW5ndWFnZVNwZWNpZmljRm9udChsYW5ndWFnZSkge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUxhbmd1YWdlID0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsYW5ndWFnZUZvbnRNYXBwaW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJDYXNlTGFuZ3VhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsYW5ndWFnZUZvbnRNYXBwaW5nW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coYEZvbnQgbm90IGZvdW5kIGZvciBsYW5ndWFnZTogJHtsYW5ndWFnZX1gKTtcclxuICAgICAgICByZXR1cm4gXCJOb3RvU2Fucy1SZWd1bGFyXCI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0UmFuZG9tTnVtYmVyKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RXhjbHVkZWRDb29yZGluYXRlcyhjYW52YXMsIGV4Y2x1c2lvblBlcmNlbnRhZ2UpIHtcclxuICAgICAgICBjb25zdCBleGNsdWRlZEFyZWFXaWR0aCA9IGNhbnZhcy53aWR0aCAqIChleGNsdXNpb25QZXJjZW50YWdlIC8gMTAwKTtcclxuICAgICAgICBjb25zdCBleGNsdWRlZEFyZWFIZWlnaHQgPSBjYW52YXMuaGVpZ2h0ICogKGV4Y2x1c2lvblBlcmNlbnRhZ2UgLyAxMDApO1xyXG4gICAgICAgIHJldHVybiB7IGV4Y2x1ZGVYOiBleGNsdWRlZEFyZWFXaWR0aCwgZXhjbHVkZVk6IGV4Y2x1ZGVkQXJlYUhlaWdodCB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSaXBwbGVFZmZlY3QoY29udGV4dCkge1xyXG4gICAgY29uc3QgY3R4ID0gY29udGV4dDtcclxuICAgIGlmICghY3R4KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FudmFzIGNvbnRleHQgaXMgbnVsbFwiKTtcclxuICAgIH1cclxuICAgIGxldCBjZW50ZXJYID0gMDtcclxuICAgIGxldCBjZW50ZXJZID0gMDtcclxuICAgIGNvbnN0IGluaXRpYWxPdXRlclJhZGl1cyA9IDEwO1xyXG4gICAgY29uc3QgaW5pdGlhbElubmVyUmFkaXVzID0gMTA7XHJcbiAgICBjb25zdCBtYXhSYWRpdXMgPSA2MDtcclxuICAgIGxldCBpbmNyZW1lbnQgPSAwLjU7XHJcbiAgICBsZXQgb3V0ZXJSYWRpdXMgPSBpbml0aWFsT3V0ZXJSYWRpdXM7XHJcbiAgICBsZXQgaW5uZXJSYWRpdXMgPSBpbml0aWFsSW5uZXJSYWRpdXM7XHJcbiAgICBmdW5jdGlvbiBkcmF3UmlwcGxlKHgsIHksIHJlc3RhcnQpIHtcclxuICAgICAgICBpZiAocmVzdGFydCkge1xyXG4gICAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XHJcbiAgICAgICAgICAgIGlubmVyUmFkaXVzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2VudGVyWCA9IHg7XHJcbiAgICAgICAgY2VudGVyWSA9IHk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgb3V0ZXJSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCBpbm5lclJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gMjtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIG91dGVyUmFkaXVzICs9IGluY3JlbWVudDtcclxuICAgICAgICBpbm5lclJhZGl1cyArPSBpbmNyZW1lbnQ7XHJcbiAgICAgICAgaWYgKG91dGVyUmFkaXVzID49IG1heFJhZGl1cyB8fCBpbm5lclJhZGl1cyA+PSBtYXhSYWRpdXMpIHtcclxuICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSBpbml0aWFsT3V0ZXJSYWRpdXM7XHJcbiAgICAgICAgICAgIGlubmVyUmFkaXVzID0gaW5pdGlhbElubmVyUmFkaXVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkcmF3UmlwcGxlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSW1hZ2VzKHNvdXJjZXMsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBpbWFnZXMgPSB7fTtcclxuICAgIGxldCBsb2FkZWRJbWFnZXMgPSAwO1xyXG4gICAgY29uc3QgbnVtSW1hZ2VzID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgc3JjIGluIHNvdXJjZXMpIHtcclxuICAgICAgICBpbWFnZXNbc3JjXSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlc1tzcmNdLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCsrbG9hZGVkSW1hZ2VzID49IG51bUltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW1hZ2VzW3NyY10uc3JjID0gc291cmNlc1tzcmNdO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNyZWF0ZUltZyA9IGFzeW5jIChpbWFnZSkgPT4ge1xyXG4gICAgY29uc3QgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIG5ld0ltYWdlLm9ubG9hZCA9ICgpID0+IHJlc29sdmUobmV3SW1hZ2UpO1xyXG4gICAgICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBzeW5jTG9hZGluZ0ltYWdlcyA9IGFzeW5jIChpbWFnZXMpID0+IHtcclxuICAgIGNvbnN0IGxvYWRJbWdQcm9taXNlcyA9IE9iamVjdC5rZXlzKGltYWdlcykubWFwKGFzeW5jIChhcnJLZXkpID0+IHtcclxuICAgICAgICBjb25zdCBpbWcgPSBhd2FpdCBjcmVhdGVJbWcoaW1hZ2VzW2FycktleV0pO1xyXG4gICAgICAgIHJldHVybiB7IFthcnJLZXldOiBpbWcgfTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRJbWFnZSA9IGF3YWl0IFByb21pc2UuYWxsKGxvYWRJbWdQcm9taXNlcyk7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSByZXNvbHZlZEltYWdlLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQpID0+IHtcclxuICAgICAgICByZXR1cm4geyAuLi5hY2N1bXVsYXRvciwgLi4uY3VycmVudCB9O1xyXG4gICAgfSwge30pO1xyXG4gICAgcmV0dXJuIGxvYWRlZEltYWdlcztcclxufTtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIGJ1dHRvblgsIGJ1dHRvblksIGJ1dHRvbldpZHRoLCBidXR0b25IZWlnaHQsIGlzQ2lyY3VsYXIgPSBmYWxzZSkge1xyXG4gICAgaWYgKGlzQ2lyY3VsYXIpIHtcclxuICAgICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgYnV0dG9uXHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIChidXR0b25YICsgYnV0dG9uV2lkdGggLyAyKSkgKiogMiArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSAoYnV0dG9uWSArIGJ1dHRvbkhlaWdodCAvIDIpKSAqKiAyKTtcclxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgPCBidXR0b25XaWR0aCAvIDI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBDaGVjayBmb3IgcmVjdGFuZ3VsYXIgYnV0dG9uXHJcbiAgICAgICAgcmV0dXJuICh4Q2xpY2sgPj0gYnV0dG9uWCAmJlxyXG4gICAgICAgICAgICB4Q2xpY2sgPD0gYnV0dG9uWCArIGJ1dHRvbldpZHRoICYmXHJcbiAgICAgICAgICAgIHlDbGljayA+PSBidXR0b25ZICYmXHJcbiAgICAgICAgICAgIHlDbGljayA8PSBidXR0b25ZICsgYnV0dG9uSGVpZ2h0KTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgaXNEb2N1bWVudFZpc2libGUgPSAoKSA9PiBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiO1xyXG5leHBvcnQgY29uc3QgdG9nZ2xlRGVidWdNb2RlID0gKHRvZ2dsZUJ0bikgPT4ge1xyXG4gICAgdG9nZ2xlQnRuLmNsYXNzTGlzdC50b2dnbGUoXCJvblwiKTtcclxuICAgIGNvbnN0IGlzT24gPSB0b2dnbGVCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwib25cIik7XHJcbiAgICBEZWJ1Z2dlci5EZWJ1Z01vZGUgPSBpc09uO1xyXG4gICAgdG9nZ2xlQnRuLmlubmVyVGV4dCA9IFwiRGV2XCI7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBoaWRlRWxlbWVudCA9IChpc0hpZGUgPSBmYWxzZSwgZWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKGlzSGlkZSkge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xyXG4gICAgfVxyXG59O1xyXG4iLCJpbXBvcnQgeyBBVURJT19QQVRIX0JUTl9DTElDSyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBBdWRpb1BsYXllciB7XHJcbiAgICBhdWRpb0NvbnRleHQ7XHJcbiAgICBzb3VyY2VOb2RlO1xyXG4gICAgYXVkaW9RdWV1ZTtcclxuICAgIHByb21wdEF1ZGlvQnVmZmVyO1xyXG4gICAgY2xpY2tTb3VuZEJ1ZmZlcjtcclxuICAgIHN0YXRpYyBhdWRpb0J1ZmZlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICBhdWRpb1NvdXJjcyA9IFtdO1xyXG4gICAgaXNDbGlja1NvdW5kTG9hZGVkO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5hdWRpb0NvbnRleHQgPSBBdWRpb0NvbnRleHRNYW5hZ2VyLmdldEF1ZGlvQ29udGV4dCgpO1xyXG4gICAgICAgIHRoaXMuc291cmNlTm9kZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5hdWRpb1F1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5jbGlja1NvdW5kQnVmZmVyID0gbnVsbDsgLy8gSW5pdGlhbGl6ZSB0aGUgY2xpY2tTb3VuZEJ1ZmZlclxyXG4gICAgICAgIHRoaXMuaXNDbGlja1NvdW5kTG9hZGVkID0gZmFsc2U7IC8vIEluaXRpYWxpemUgYXMgZmFsc2VcclxuICAgIH1cclxuICAgIGFzeW5jIHBsYXlCdXR0b25DbGlja1NvdW5kKCkge1xyXG4gICAgICAgIGNvbnN0IGF1ZGlvU3JjID0gQVVESU9fUEFUSF9CVE5fQ0xJQ0s7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xpY2tTb3VuZExvYWRlZCkge1xyXG4gICAgICAgICAgICAvLyBMb2FkIGFuZCBkZWNvZGUgdGhlIGF1ZGlvIG9uIGRlbWFuZCBpZiBpdCBoYXNuJ3QgYmVlbiBsb2FkZWRcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tTb3VuZEJ1ZmZlciA9IGF3YWl0IHRoaXMubG9hZEFuZERlY29kZUF1ZGlvKGF1ZGlvU3JjKTtcclxuICAgICAgICAgICAgICAgIEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5zZXQoYXVkaW9TcmMsIHRoaXMuY2xpY2tTb3VuZEJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzQ2xpY2tTb3VuZExvYWRlZCA9IHRydWU7IC8vIFNldCB0aGUgZmxhZyB0byB0cnVlIGFmdGVyIGxvYWRpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2FkaW5nIG9yIGRlY29kaW5nIGNsaWNrIHNvdW5kOlwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUGxheSB0aGUgYXVkaW8gdXNpbmcgdGhlIGJ1ZmZlciBpZiBpdCBleGlzdHNcclxuICAgICAgICBpZiAodGhpcy5jbGlja1NvdW5kQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZU5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5idWZmZXIgPSB0aGlzLmNsaWNrU291bmRCdWZmZXI7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJDbGljayBzb3VuZCBidWZmZXIgaXMgbm90IGF2YWlsYWJsZS5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgbG9hZEFuZERlY29kZUF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXVkaW9TcmMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhdWRpb0J1ZmZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgbG9hZGluZyBvciBkZWNvZGluZyBhdWRpbzpcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcHJlbG9hZFByb21wdEF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBbmREZWNvZGVBdWRpbyhhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvbXB0QXVkaW9CdWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3luYyBwcmVsb2FkR2FtZUF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgaWYgKEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5oYXMoYXVkaW9TcmMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBbmREZWNvZGVBdWRpbyhhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5zZXQoYXVkaW9TcmMsIGF1ZGlvQnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5QXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5nZXQoYXVkaW9TcmMpO1xyXG4gICAgICAgIGlmIChhdWRpb0J1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gYXVkaW9CdWZmZXI7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MucHVzaChzb3VyY2VOb2RlKTtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlGZWVkYmFja0F1ZGlvcyA9IChsb29wID0gZmFsc2UsIC4uLmZpbGVVcmwpID0+IHtcclxuICAgICAgICBpZiAoZmlsZVVybC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IGZpbGVVcmw7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUZldGNoKDAsIGxvb3ApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBwbGF5UHJvbXB0QXVkaW8gPSAoYXVkaW9TcmMpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wcm9tcHRBdWRpb0J1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gdGhpcy5wcm9tcHRBdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1NvdXJjcy5wdXNoKHNvdXJjZU5vZGUpO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHN0b3BGZWVkYmFja0F1ZGlvID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdWRpb1F1ZXVlID0gW107XHJcbiAgICB9O1xyXG4gICAgc3RvcEFsbEF1ZGlvcyA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MuZm9yRWFjaCgoc291cmNlTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmF1ZGlvU291cmNzID0gW107XHJcbiAgICB9O1xyXG4gICAgcGxheUZldGNoID0gKGluZGV4LCBsb29wKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMuYXVkaW9RdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wRmVlZGJhY2tBdWRpbygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvUXVldWVbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgIGZldGNoKHRoaXMuYXVkaW9RdWV1ZVtpbmRleF0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dD8uZGVjb2RlQXVkaW9EYXRhKGJ1ZmZlciwgKGF1ZGlvQnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQ/LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dD8uZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5sb29wID0gbG9vcDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUub25lbmRlZCA9ICgpID0+IHRoaXMuaGFuZGxlQXVkaW9FbmRlZChpbmRleCwgbG9vcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZUF1ZGlvRW5kZWQgPSAoaW5kZXgsIGxvb3ApID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5vbmVuZGVkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wbGF5RmV0Y2goaW5kZXggKyAxLCBsb29wKTtcclxuICAgIH07XHJcbn1cclxuY2xhc3MgQXVkaW9Db250ZXh0TWFuYWdlciB7XHJcbiAgICBzdGF0aWMgaW5zdGFuY2UgPSBudWxsO1xyXG4gICAgc3RhdGljIGdldEF1ZGlvQ29udGV4dCgpIHtcclxuICAgICAgICBpZiAoIUF1ZGlvQ29udGV4dE1hbmFnZXIuaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgQXVkaW9Db250ZXh0TWFuYWdlci5pbnN0YW5jZSA9IG5ldyAod2luZG93LkF1ZGlvQ29udGV4dCB8fFxyXG4gICAgICAgICAgICAgICAgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEF1ZGlvQ29udGV4dE1hbmFnZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IERFRkFVTFRfQkFDS0dST1VORF8xLCBBU1NFVFNfUEFUSF9ISUxMLCBBU1NFVFNfUEFUSF9UT1RFTSwgQVNTRVRTX1BBVEhfRkVOQ0UsIEFVVFVNTl9CQUNLR1JPVU5EXzEsIEFVVFVNTl9ISUxMXzEsIEFVVFVNTl9QSUxMQVJfMSwgQVVUVU1OX1NJR05fMSwgQVVUVU1OX0ZFTkNFXzEsIFdJTlRFUl9CQUNLR1JPVU5EXzEsIFdJTlRFUl9ISUxMXzEsIFdJTlRFUl9TSUdOXzEsIFdJTlRFUl9GRU5DRV8xLCBXSU5URVJfUElMTEFSXzEsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuLy8gdG8gZG8gbmVlZCB0byBvcHRpbWl6ZSBtb3JlXHJcbnZhciBpbWFnZXMgPSB7XHJcbiAgICBiZ0ltZzogREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICBoaWxsSW1nOiBBU1NFVFNfUEFUSF9ISUxMLFxyXG4gICAgcGlsbGVySW1nOiBBU1NFVFNfUEFUSF9UT1RFTSxcclxuICAgIGZlbmNoSW1nOiBBU1NFVFNfUEFUSF9GRU5DRSxcclxuICAgIGF1dHVtbkJnSW1nOiBBVVRVTU5fQkFDS0dST1VORF8xLFxyXG4gICAgYXV0dW1uSGlsbEltZzogQVVUVU1OX0hJTExfMSxcclxuICAgIGF1dHVtblBpbGxlckltZzogQVVUVU1OX1BJTExBUl8xLFxyXG4gICAgYXV0dW1uU2lnbkltZzogQVVUVU1OX1NJR05fMSxcclxuICAgIGF1dHVtbkZlbmNlSW1nOiBBVVRVTU5fRkVOQ0VfMSxcclxuICAgIHdpbnRlckJnSW1nOiBXSU5URVJfQkFDS0dST1VORF8xLFxyXG4gICAgd2ludGVySGlsbEltZzogV0lOVEVSX0hJTExfMSxcclxuICAgIHdpbnRlclNpZ25JbWc6IFdJTlRFUl9TSUdOXzEsXHJcbiAgICB3aW50ZXJGZW5jZUltZzogV0lOVEVSX0ZFTkNFXzEsXHJcbiAgICB3aW50ZXJQaWxsZXJJbWc6IFdJTlRFUl9QSUxMQVJfMSxcclxufTtcclxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmQge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIGF2YWlsYWJsZUJhY2tncm91bmRUeXBlcyA9IFtcIlN1bW1lclwiLCBcIkF1dHVtblwiLCBcIldpbnRlclwiXTtcclxuICAgIGJhY2tncm91bmRUeXBlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgbGV2ZWxOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVHlwZSA9XHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IodGhpcy5sZXZlbE51bWJlciAvIDEwKSAlIHRoaXMuYXZhaWxhYmxlQmFja2dyb3VuZFR5cGVzLmxlbmd0aDtcclxuICAgICAgICBpZiAodGhpcy5sZXZlbE51bWJlciA+PSAzMCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmRUeXBlID0gdGhpcy5iYWNrZ3JvdW5kVHlwZSAlIDM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvYWRJbWFnZXMoaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmF2YWlsYWJsZUJhY2tncm91bmRUeXBlc1t0aGlzLmJhY2tncm91bmRUeXBlXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIldpbnRlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy53aW50ZXJCZ0ltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLndpbnRlclBpbGxlckltZywgdGhpcy53aWR0aCAqIDAuMzgsIHRoaXMuaGVpZ2h0IC8gNiwgdGhpcy53aWR0aCAvIDEuMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy53aW50ZXJGZW5jZUltZywgLXRoaXMud2lkdGggKiAwLjQsIHRoaXMuaGVpZ2h0IC8gNCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy53aW50ZXJIaWxsSW1nLCAtdGhpcy53aWR0aCAqIDAuMjUsIHRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCAqIDEuNSwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQXV0dW1uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmF1dHVtbkJnSW1nLCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYXV0dW1uUGlsbGVySW1nLCB0aGlzLndpZHRoICogMC4zOCwgdGhpcy5oZWlnaHQgLyA2LCB0aGlzLndpZHRoIC8gMS4yLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmF1dHVtbkZlbmNlSW1nLCAtdGhpcy53aWR0aCAqIDAuNCwgdGhpcy5oZWlnaHQgLyA0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmF1dHVtbkhpbGxJbWcsIC10aGlzLndpZHRoICogMC4yNSwgdGhpcy5oZWlnaHQgLyAyLCB0aGlzLndpZHRoICogMS41LCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmJnSW1nLCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMucGlsbGVySW1nLCB0aGlzLndpZHRoICogMC42LCB0aGlzLmhlaWdodCAvIDYsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuZmVuY2hJbWcsIC10aGlzLndpZHRoICogMC40LCB0aGlzLmhlaWdodCAvIDMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuaGlsbEltZywgLXRoaXMud2lkdGggKiAwLjI1LCB0aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlzQ2xpY2tJbnNpZGVCdXR0b24sIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBDQU5DRUxfQlROX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhbmNlbEJ1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGNhbmNlbF9idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcykge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IGNhbnZhcy53aWR0aCAqIDAuMSArIChjYW52YXMud2lkdGggKiAwLjE1KSAvIDI7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gY2FudmFzLmhlaWdodCAqIDAuMjtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIGxvYWRJbWFnZXMoeyBjYW5jZWxfYnV0dG9uX2ltYWdlOiBDQU5DRUxfQlROX0lNRyB9LCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsX2J1dHRvbl9pbWFnZSA9IGltYWdlc1tcImNhbmNlbF9idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE1O1xyXG4gICAgICAgIHRoaXMuYnRuT3JpZ2luYWxTaXplID0gdGhpcy5idG5TaXplQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMub3JpZ25hbFBvcyA9IHsgeDogdGhpcy5wb3NYLCB5OiB0aGlzLnBvc1kgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24sIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA8IDAuMTUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiArIDAuMDAwNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMub3JpZ25hbFBvcy54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5vcmlnbmFsUG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgaXNJbnNpZGUgPSBpc0NsaWNrSW5zaWRlQnV0dG9uKHhDbGljaywgeUNsaWNrLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdHJ1ZSAvLyBCdXR0b24gaXMgY2lyY3VsYXJcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpc0luc2lkZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE0O1xyXG4gICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLnBvc1ggKyAxO1xyXG4gICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLnBvc1kgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNJbnNpZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaXNDbGlja0luc2lkZUJ1dHRvbiwgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IE1BUF9CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xvc2VCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBjbG9zZV9idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIGxvYWRJbWFnZXMoeyBjbG9zZV9idXR0b25faW1hZ2U6IE1BUF9CVE5fSU1HIH0sIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJjbG9zZV9idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE5O1xyXG4gICAgICAgIHRoaXMuYnRuT3JpZ2luYWxTaXplID0gdGhpcy5idG5TaXplQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMub3JpZ25hbFBvcyA9IHsgeDogcG9zWCwgeTogcG9zWSB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNsb3NlX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjE5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSB0aGlzLmJ0blNpemVBbmltYXRpb24gKyAwLjAwMDU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLm9yaWduYWxQb3MueDtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMub3JpZ25hbFBvcy55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGlzSW5zaWRlID0gaXNDbGlja0luc2lkZUJ1dHRvbih4Q2xpY2ssIHlDbGljaywgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRydWUgLy8gQnV0dG9uIGlzIGNpcmN1bGFyXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNJbnNpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4xODtcclxuICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5wb3NYICsgMTtcclxuICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5wb3NZICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzSW5zaWRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyLCBmb250LCB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IFNQRUNJQUxfTEVWRUxTLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExldmVsQmxvb25CdXR0b24ge1xyXG4gICAgY29udGV4dDtcclxuICAgIGxldmVsRGF0YTtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgb3JpZ2luYWxQb3NYO1xyXG4gICAgb3JpZ2luYWxQb3NZO1xyXG4gICAgc2l6ZTtcclxuICAgIHJhZGl1c09mZlNldDtcclxuICAgIGJsb29uU2l6ZTtcclxuICAgIGJ0blNpemU7XHJcbiAgICBsb2NrU2l6ZTtcclxuICAgIHRleHRGb250U2l6ZTtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgY29udGV4dCwgbGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmxldmVsRGF0YSA9IGxldmVsRGF0YTtcclxuICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLmxldmVsRGF0YS54O1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHRoaXMubGV2ZWxEYXRhLnk7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBvc1ggPSB0aGlzLnBvc1g7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBvc1kgPSB0aGlzLnBvc1k7XHJcbiAgICAgICAgdGhpcy5zaXplID0gY2FudmFzLmhlaWdodCAvIDU7XHJcbiAgICAgICAgdGhpcy5yYWRpdXNPZmZTZXQgPSBjYW52YXMuaGVpZ2h0IC8gMjA7XHJcbiAgICAgICAgdGhpcy5ibG9vblNpemUgPSB0aGlzLmlzTGV2ZWxTcGVjaWFsKHRoaXMuc2l6ZSk7XHJcbiAgICAgICAgdGhpcy5idG5TaXplID0gdGhpcy5ibG9vblNpemU7XHJcbiAgICAgICAgdGhpcy5sb2NrU2l6ZSA9IGNhbnZhcy5oZWlnaHQgLyAxMztcclxuICAgICAgICB0aGlzLnRleHRGb250U2l6ZSA9ICh0aGlzLnNpemUpIC8gNjtcclxuICAgIH1cclxuICAgIGlzU3BlY2lhbExldmVsKGluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuIFNQRUNJQUxfTEVWRUxTLmluY2x1ZGVzKGluZGV4KTtcclxuICAgIH1cclxuICAgIDtcclxuICAgIGlzTGV2ZWxTcGVjaWFsKHNpemUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5sZXZlbERhdGE/LmlzU3BlY2lhbFxyXG4gICAgICAgICAgICA/IHNpemUgKiAwLjlcclxuICAgICAgICAgICAgOiBzaXplO1xyXG4gICAgfVxyXG4gICAgZHJhdyhsZXZlbFNlbGVjdGlvblBhZ2VJbmRleCwgdW5sb2NrTGV2ZWxJbmRleCwgZ2FtZUxldmVsRGF0YSwgdG90YWxHYW1lTGV2ZWxzKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxldmVsRGF0YT8uYmFsbG9vbkltZywgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuYnRuU2l6ZSwgdGhpcy5idG5TaXplKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gdGhpcy50ZXh0Rm9udFNpemUgKyBgcHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoYCR7dGhpcy5sZXZlbERhdGEuaW5kZXggKyBsZXZlbFNlbGVjdGlvblBhZ2VJbmRleH1gLCB0aGlzLmxldmVsRGF0YS54ICsgdGhpcy5zaXplIC8gMy41LCB0aGlzLmxldmVsRGF0YS55ICsgdGhpcy5zaXplIC8gMyk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSB0aGlzLnRleHRGb250U2l6ZSAtICh0aGlzLnNpemUpIC8gMzAgKyBgcHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICBpZiAodGhpcy5idG5TaXplIDwgdGhpcy5ibG9vblNpemUpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaXplID0gdGhpcy5idG5TaXplICsgMC41MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZSA9IHRoaXMuYmxvb25TaXplO1xyXG4gICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLmxldmVsRGF0YS54O1xyXG4gICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLmxldmVsRGF0YS55O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRyYXdJY29ucyhsZXZlbFNlbGVjdGlvblBhZ2VJbmRleCwgdW5sb2NrTGV2ZWxJbmRleCwgZ2FtZUxldmVsRGF0YSwgdG90YWxHYW1lTGV2ZWxzKTtcclxuICAgIH1cclxuICAgIGFwcGx5UHVsc2VFZmZlY3QoKSB7XHJcbiAgICAgICAgY29uc3QgUHVsc2VEdXJhdGlvbiA9IDE1MDA7XHJcbiAgICAgICAgY29uc3QgR3Jvd1BoYXNlVGhyZXNob2xkID0gMC43O1xyXG4gICAgICAgIGNvbnN0IEJhc2VTaGFkb3dTaXplID0gMTU7XHJcbiAgICAgICAgY29uc3QgTWF4U2hhZG93U2l6ZSA9IDQ1O1xyXG4gICAgICAgIGNvbnN0IE1heE9wYWNpdHkgPSAwLjU7XHJcbiAgICAgICAgY29uc3QgQmFzZUNvbG9yUmdiYSA9ICcyNTUsIDI1NSwgMjU1JztcclxuICAgICAgICBjb25zdCBhbmltYXRpb25Qcm9ncmVzcyA9IChEYXRlLm5vdygpICUgUHVsc2VEdXJhdGlvbikgLyBQdWxzZUR1cmF0aW9uO1xyXG4gICAgICAgIGNvbnN0IGdyb3dQaGFzZSA9IGFuaW1hdGlvblByb2dyZXNzIDw9IEdyb3dQaGFzZVRocmVzaG9sZDtcclxuICAgICAgICBjb25zdCBwaGFzZUR1cmF0aW9uID0gZ3Jvd1BoYXNlID8gR3Jvd1BoYXNlVGhyZXNob2xkIDogKDEgLSBHcm93UGhhc2VUaHJlc2hvbGQpO1xyXG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gZ3Jvd1BoYXNlID8gYW5pbWF0aW9uUHJvZ3Jlc3MgLyBHcm93UGhhc2VUaHJlc2hvbGQgOiAoYW5pbWF0aW9uUHJvZ3Jlc3MgLSBHcm93UGhhc2VUaHJlc2hvbGQpIC8gcGhhc2VEdXJhdGlvbjtcclxuICAgICAgICBjb25zdCBzaGFkb3dTaXplID0gZ3Jvd1BoYXNlID8gcHJvZ3Jlc3MgKiBCYXNlU2hhZG93U2l6ZSA6IEJhc2VTaGFkb3dTaXplICsgcHJvZ3Jlc3MgKiBNYXhTaGFkb3dTaXplO1xyXG4gICAgICAgIGNvbnN0IHNoYWRvd09wYWNpdHkgPSBncm93UGhhc2UgPyBNYXhPcGFjaXR5ICogKDEgLSBwcm9ncmVzcykgOiAwO1xyXG4gICAgICAgIGlmIChzaGFkb3dPcGFjaXR5IDw9IDApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCB7IHg6IHNjYWxlWCwgeTogc2NhbGVZLCByYWRpdXM6IHNjYWxlUmFkaXVzIH0gPSB0aGlzLmxldmVsRGF0YT8uaXNTcGVjaWFsXHJcbiAgICAgICAgICAgID8geyB4OiAzLCB5OiAyLjUsIHJhZGl1czogMi4yIH1cclxuICAgICAgICAgICAgOiB7IHg6IDMuNCwgeTogMy44LCByYWRpdXM6IDMuMiB9O1xyXG4gICAgICAgIGNvbnN0IGNlbnRlclggPSB0aGlzLnBvc1ggKyB0aGlzLmJ0blNpemUgLyBzY2FsZVg7XHJcbiAgICAgICAgY29uc3QgY2VudGVyWSA9IHRoaXMucG9zWSArIHRoaXMuYnRuU2l6ZSAvIHNjYWxlWTtcclxuICAgICAgICBjb25zdCByYWRpdXMgPSB0aGlzLmJ0blNpemUgLyBzY2FsZVJhZGl1cyArIHNoYWRvd1NpemU7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCByYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gYHJnYmEoJHtCYXNlQ29sb3JSZ2JhfSwgJHtzaGFkb3dPcGFjaXR5fSlgO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcclxuICAgIH1cclxuICAgIGRyYXdJY29ucyhwYWdlSW5kZXgsIHVubG9ja0xldmVsSW5kZXgsIGdhbWVMZXZlbERhdGEsIHRvdGFsR2FtZUxldmVscykge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5sZXZlbERhdGEuaW5kZXg7XHJcbiAgICAgICAgaWYgKCFEZWJ1Z2dlci5EZWJ1Z01vZGUpIHtcclxuICAgICAgICAgICAgKGluZGV4ICsgcGFnZUluZGV4IC0gMSA+IHVubG9ja0xldmVsSW5kZXggKyAxKSAmJiB0aGlzLmRyYXdMb2NrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChnYW1lTGV2ZWxEYXRhLmxlbmd0aCAmJiBpbmRleCArIHBhZ2VJbmRleCA8PSB0b3RhbEdhbWVMZXZlbHMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYW1lTGV2ZWxEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggLSAxICsgcGFnZUluZGV4ID09PVxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGdhbWVMZXZlbERhdGFbaV0ubGV2ZWxOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1N0YXJzKGdhbWVMZXZlbERhdGFbaV0uc3RhckNvdW50KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXdMb2NrKCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sZXZlbERhdGE/LmxvY2tJbWcsIHRoaXMubGV2ZWxEYXRhLngsIHRoaXMubGV2ZWxEYXRhLnksIHRoaXMubG9ja1NpemUsIHRoaXMubG9ja1NpemUpO1xyXG4gICAgfVxyXG4gICAgY2hlY2tTdGFycyhzdGFyQ291bnQpIHtcclxuICAgICAgICBjb25zdCBwb3NYID0gdGhpcy5sZXZlbERhdGEueDtcclxuICAgICAgICBjb25zdCBwb3NZID0gdGhpcy5sZXZlbERhdGEueTtcclxuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5zaXplO1xyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFyKHBvc1gsIHBvc1kgLSBzaXplICogMC4wMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1N0YXIocG9zWCArIHNpemUgLyAyLjUsIHBvc1kgLSBzaXplICogMC4wMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPT09IDMpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3U3Rhcihwb3NYICsgc2l6ZSAvIDUsIHBvc1kgLSBzaXplICogMC4xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3U3Rhcihwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxldmVsRGF0YT8uc3RhckltZywgcG9zWCwgcG9zWSwgdGhpcy5zaXplIC8gNSwgdGhpcy5zaXplIC8gNSk7XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrLCBsZXZlbFNlbGVjdGlvblBhZ2VJbmRleCwgdW5sb2NrTGV2ZWxJbmRleCwgY2FsbEJhY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5sZXZlbERhdGEueCAtIHRoaXMucmFkaXVzT2ZmU2V0KSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLmxldmVsRGF0YS54IC0gdGhpcy5yYWRpdXNPZmZTZXQpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMubGV2ZWxEYXRhLnkgLSB0aGlzLnJhZGl1c09mZlNldCkgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMubGV2ZWxEYXRhLnkgLSB0aGlzLnJhZGl1c09mZlNldCkpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8IDQ1KSB7XHJcbiAgICAgICAgICAgIGlmIChEZWJ1Z2dlci5EZWJ1Z01vZGUgfHwgKHRoaXMubGV2ZWxEYXRhLmluZGV4ICsgbGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPD0gdW5sb2NrTGV2ZWxJbmRleCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnRuU2l6ZSA9IHRoaXMuYmxvb25TaXplIC0gNDtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMub3JpZ2luYWxQb3NYICsgMC41O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5vcmlnaW5hbFBvc1kgKyAxO1xyXG4gICAgICAgICAgICAgICAgY2FsbEJhY2sodGhpcy5sZXZlbERhdGEuaW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlzQ2xpY2tJbnNpZGVCdXR0b24sIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBORVhUX0JUTl9JTUcgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXh0QnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBuZXh0X2J1dHRvbl9pbWFnZTtcclxuICAgIGJ0blNpemVBbmltYXRpb247XHJcbiAgICBidG5PcmlnaW5hbFNpemU7XHJcbiAgICBvcmlnbmFsUG9zO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgbmV4dF9idXR0b25faW1hZ2U6IE5FWFRfQlROX0lNRyB9LCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dF9idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJuZXh0X2J1dHRvbl9pbWFnZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTk7XHJcbiAgICAgICAgdGhpcy5idG5PcmlnaW5hbFNpemUgPSB0aGlzLmJ0blNpemVBbmltYXRpb247XHJcbiAgICAgICAgdGhpcy5vcmlnbmFsUG9zID0geyB4OiB0aGlzLnBvc1gsIHk6IHRoaXMucG9zWSB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLm5leHRfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiwgdGhpcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjE5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSB0aGlzLmJ0blNpemVBbmltYXRpb24gKyAwLjAwMDU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLm9yaWduYWxQb3MueDtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMub3JpZ25hbFBvcy55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGlzSW5zaWRlID0gaXNDbGlja0luc2lkZUJ1dHRvbih4Q2xpY2ssIHlDbGljaywgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdGhpcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0cnVlIC8vIEJ1dHRvbiBpcyBjaXJjdWxhclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlzSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTg7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMucG9zWCArIDE7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMucG9zWSArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc0luc2lkZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpc0NsaWNrSW5zaWRlQnV0dG9uLCBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgQ0FOQ0VMX0JUTl9JTUcgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb0J1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIG5vX2J1dHRvbl9pbWFnZTtcclxuICAgIGJ0blNpemVBbmltYXRpb247XHJcbiAgICBidG5PcmlnaW5hbFNpemU7XHJcbiAgICBvcmlnbmFsUG9zO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWCArIDU7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWSArIDEwO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgbG9hZEltYWdlcyh7IG5vX2J1dHRvbl9pbWFnZTogQ0FOQ0VMX0JUTl9JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5vX2J1dHRvbl9pbWFnZSA9IGltYWdlc1tcIm5vX2J1dHRvbl9pbWFnZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTg7XHJcbiAgICAgICAgdGhpcy5idG5PcmlnaW5hbFNpemUgPSB0aGlzLmJ0blNpemVBbmltYXRpb247XHJcbiAgICAgICAgdGhpcy5vcmlnbmFsUG9zID0geyB4OiB0aGlzLnBvc1gsIHk6IHRoaXMucG9zWSB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLm5vX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjE4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSB0aGlzLmJ0blNpemVBbmltYXRpb24gKyAwLjAwMDU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLm9yaWduYWxQb3MueDtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMub3JpZ25hbFBvcy55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGlzSW5zaWRlID0gaXNDbGlja0luc2lkZUJ1dHRvbih4Q2xpY2ssIHlDbGljaywgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRydWUgLy8gQnV0dG9uIGlzIGNpcmN1bGFyXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNJbnNpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4xNztcclxuICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5wb3NYICsgMTtcclxuICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5wb3NZICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzSW5zaWRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlzQ2xpY2tJbnNpZGVCdXR0b24sIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBQQVVTRV9CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF1c2VCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBwYXVzZV9idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcykge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IGNhbnZhcy53aWR0aCAtIGNhbnZhcy5oZWlnaHQgKiAwLjA5O1xyXG4gICAgICAgIHRoaXMucG9zWSA9IDA7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgcGF1c2VfYnV0dG9uX2ltYWdlOiBQQVVTRV9CVE5fSU1HIH0sIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZV9idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJwYXVzZV9idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjA5O1xyXG4gICAgICAgIHRoaXMuYnRuT3JpZ2luYWxTaXplID0gdGhpcy5idG5TaXplQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMub3JpZ25hbFBvcyA9IHsgeDogdGhpcy5wb3NYLCB5OiB0aGlzLnBvc1kgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wYXVzZV9idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy5oZWlnaHQgKiB0aGlzLmJ0blNpemVBbmltYXRpb24sIHRoaXMuY2FudmFzLmhlaWdodCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjA5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSB0aGlzLmJ0blNpemVBbmltYXRpb24gKyAwLjAwMDI1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5vcmlnbmFsUG9zLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLm9yaWduYWxQb3MueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBpc0luc2lkZSA9IGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy5oZWlnaHQgKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRydWUgLy8gQnV0dG9uIGlzIGNpcmN1bGFyXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNJbnNpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4wODU7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMucG9zWCArIDAuOTtcclxuICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5wb3NZICsgMC45O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNJbnNpZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgUExBWV9CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi8uLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2VzLCBwc2V1ZG9JZCwgbGFuZyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IGdldERhdGEgfSBmcm9tIFwiQGRhdGFcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheUJ1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgZmlyZWJhc2VJbnRlZ3JhdGlvbjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIHBhdXNlX2J1dHRvbl9pbWFnZTogUExBWV9CVE5fSU1HXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RGF0YSgpO1xyXG4gICAgICAgIHRoaXMubWFqVmVyc2lvbiA9IGRhdGEubWFqdmVyc2lvbjtcclxuICAgICAgICB0aGlzLm1pblZlcnNpb24gPSBkYXRhLm1pbnZlcnNpb247XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnBhdXNlX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoIC8gMywgdGhpcy5jYW52YXMud2lkdGggLyAzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMucG9zWCAtIHRoaXMuY2FudmFzLndpZHRoIC8gNikgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5wb3NYIC0gdGhpcy5jYW52YXMud2lkdGggLyA2KSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSB0aGlzLmNhbnZhcy53aWR0aCAvIDYpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSB0aGlzLmNhbnZhcy53aWR0aCAvIDYpKTtcclxuICAgICAgICB0aGlzLmxvZ1RhcHBlZFN0YXJ0RmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8IHRoaXMuY2FudmFzLndpZHRoIC8gOCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsb2dUYXBwZWRTdGFydEZpcmViYXNlRXZlbnQoKSB7XHJcbiAgICAgICAgbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGNvbnN0IHRhcHBlZFN0YXJ0RGF0YSA9IHtcclxuICAgICAgICAgICAgY3JfdXNlcl9pZDogcHNldWRvSWQsXHJcbiAgICAgICAgICAgIGZ0bV9sYW5ndWFnZTogbGFuZyxcclxuICAgICAgICAgICAgcHJvZmlsZV9udW1iZXI6IDAsXHJcbiAgICAgICAgICAgIHZlcnNpb25fbnVtYmVyOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZlcnNpb24taW5mby1pZFwiKS5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgIGpzb25fdmVyc2lvbl9udW1iZXI6ICEhdGhpcy5tYWpWZXJzaW9uICYmICEhdGhpcy5taW5WZXJzaW9uID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpIDogXCJcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kVGFwcGVkU3RhcnRFdmVudCh0YXBwZWRTdGFydERhdGEpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlzQ2xpY2tJbnNpZGVCdXR0b24sIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBSRVRSWV9CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmV0cnlCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICByZXRyeV9idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIGxvYWRJbWFnZXMoeyByZXRyeV9idXR0b25faW1hZ2U6IFJFVFJZX0JUTl9JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5X2J1dHRvbl9pbWFnZSA9IGltYWdlc1tcInJldHJ5X2J1dHRvbl9pbWFnZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTk7XHJcbiAgICAgICAgdGhpcy5idG5PcmlnaW5hbFNpemUgPSB0aGlzLmJ0blNpemVBbmltYXRpb247XHJcbiAgICAgICAgdGhpcy5vcmlnbmFsUG9zID0geyB4OiBwb3NYLCB5OiBwb3NZIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucmV0cnlfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24sIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA8IDAuMTkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiArIDAuMDAwNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMub3JpZ25hbFBvcy54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5vcmlnbmFsUG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgaXNJbnNpZGUgPSBpc0NsaWNrSW5zaWRlQnV0dG9uKHhDbGljaywgeUNsaWNrLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdHJ1ZSAvLyBCdXR0b24gaXMgY2lyY3VsYXJcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpc0luc2lkZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE4O1xyXG4gICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLnBvc1ggKyAxO1xyXG4gICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLnBvc1kgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNJbnNpZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaXNDbGlja0luc2lkZUJ1dHRvbiwgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IFlFU19CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgWWVzQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgeWVzX2J1dHRvbl9pbWFnZTtcclxuICAgIGJ0blNpemVBbmltYXRpb247XHJcbiAgICBidG5PcmlnaW5hbFNpemU7XHJcbiAgICBvcmlnbmFsUG9zO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWCAtIDU7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIGxvYWRJbWFnZXMoeyB5ZXNfYnV0dG9uX2ltYWdlOiBZRVNfQlROX0lNRyB9LCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMueWVzX2J1dHRvbl9pbWFnZSA9IGltYWdlc1tcInllc19idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjIwNTtcclxuICAgICAgICB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgICAgICB0aGlzLm9yaWduYWxQb3MgPSB7IHg6IHRoaXMucG9zWCwgeTogdGhpcy5wb3NZIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMueWVzX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjIwNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gdGhpcy5idG5TaXplQW5pbWF0aW9uICsgMC4wMDA1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5vcmlnbmFsUG9zLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLm9yaWduYWxQb3MueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBpc0luc2lkZSA9IGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0cnVlIC8vIEJ1dHRvbiBpcyBjaXJjdWxhclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlzSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMucG9zWCArIDE7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMucG9zWSArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc0luc2lkZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBoaWRlRWxlbWVudCB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBGZWVkYmFja1RleHRFZmZlY3RzIHtcclxuICAgIGZlZWRiYWNrVGV4dEVsZW1lbnQ7XHJcbiAgICBoaWRlVGltZW91dElkO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZWVkYmFjay10ZXh0XCIpO1xyXG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0ZlZWRiYWNrRWxlbWVudEF2YWlsYWJsZSgpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpc0ZlZWRiYWNrRWxlbWVudEF2YWlsYWJsZSgpIHtcclxuICAgICAgICByZXR1cm4gISF0aGlzLmZlZWRiYWNrVGV4dEVsZW1lbnQ7XHJcbiAgICB9XHJcbiAgICB3cmFwVGV4dCh0ZXh0KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzRmVlZGJhY2tFbGVtZW50QXZhaWxhYmxlKCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0O1xyXG4gICAgICAgIGhpZGVFbGVtZW50KGZhbHNlLCB0aGlzLmZlZWRiYWNrVGV4dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuc2V0SGlkZVRpbWVvdXQoKTtcclxuICAgIH1cclxuICAgIHNldEhpZGVUaW1lb3V0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhpZGVUaW1lb3V0SWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuaGlkZVRpbWVvdXRJZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaGlkZVRpbWVvdXRJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgaGlkZUVsZW1lbnQodHJ1ZSwgdGhpcy5mZWVkYmFja1RleHRFbGVtZW50KTtcclxuICAgICAgICAgICAgdGhpcy5oaWRlVGltZW91dElkID0gbnVsbDtcclxuICAgICAgICB9LCA0MDAwKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgQkFSX0VNUFRZLCBCQVJfRlVMTCwgTEVWRUxfSU5ESUNBVE9SIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSBcIkBldmVudHNcIjtcclxuZXhwb3J0IGNsYXNzIExldmVsSW5kaWNhdG9ycyBleHRlbmRzIEV2ZW50TWFuYWdlciB7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgYWN0aXZlSW5kaWNhdG9ycztcclxuICAgIGltYWdlcztcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBhY3RpdmVJbmRpY2F0b3JzKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVTdG9uZURyb3AoZXZlbnQpLFxyXG4gICAgICAgICAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlTG9hZFB1enpsZShldmVudClcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kaWNhdG9ycyA9IGFjdGl2ZUluZGljYXRvcnM7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGxldmVsX2luZGljYXRvcjogTEVWRUxfSU5ESUNBVE9SLFxyXG4gICAgICAgICAgICBiYXJfZW1wdHk6IEJBUl9FTVBUWSxcclxuICAgICAgICAgICAgYmFyX2Z1bGw6IEJBUl9GVUxMXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2V0SW5kaWNhdG9ycyhpbmRpY2F0b3JDb3VudCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kaWNhdG9ycyA9IGluZGljYXRvckNvdW50O1xyXG4gICAgfVxyXG4gICAgYWRkRHJvcFN0b25lRXZlbnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcHN0b25lJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0SW5kaWNhdG9ycygyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMubGV2ZWxfaW5kaWNhdG9yLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUsIDAsIHRoaXMuY2FudmFzLndpZHRoICogMC4zNSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmJhcl9lbXB0eSwgKCh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUpIC8gNykgKiAoaSArIDEpICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUsICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDIgLSAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyA2LCAodGhpcy5jYW52YXMud2lkdGggKiAwLjM1KSAvIDEwLCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYWN0aXZlSW5kaWNhdG9yczsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmJhcl9mdWxsLCAoKHRoaXMuY2FudmFzLndpZHRoICogMC4zNSkgLyA3KSAqIChpICsgMSkgKyB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUsICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDIgLSAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyA2LCAodGhpcy5jYW52YXMud2lkdGggKiAwLjM1KSAvIDEwLCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSB7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5zZXRJbmRpY2F0b3JzKGV2ZW50LmRldGFpbC5jb3VudGVyKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiQGV2ZW50c1wiO1xyXG5pbXBvcnQgeyBSaXZlTW9uc3RlckNvbXBvbmVudCB9IGZyb20gXCIuL3JpdmVNb25zdGVyXCI7XHJcbmV4cG9ydCBjbGFzcyBNb25zdGVyIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIHppbmRleDtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICBmcHM7XHJcbiAgICBjYW52YXNTdGFjaztcclxuICAgIGNhbnZhc0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgZ2FtZTtcclxuICAgIG1vbnN0ZXJQaGFzZTtcclxuICAgIHJpdmVNb25zdGVyOyAvLyBOb3cgdXNpbmcgdGhlIFJpdmVNb25zdGVyQ29tcG9uZW50XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBtb25zdGVyUGhhc2UsIGNhbGxCYWNrRnVuY3Rpb24pIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZVN0b25lRHJvcChldmVudCksXHJcbiAgICAgICAgICAgIGxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVMb2FkUHV6emxlKGV2ZW50KSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMubW9uc3RlclBoYXNlID0gbW9uc3RlclBoYXNlO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmdhbWUud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmdhbWUuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicml2ZWNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZS53aWR0aCAvIDIgLSB0aGlzLmdhbWUud2lkdGggKiAwLjI0MztcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWUud2lkdGggLyAzO1xyXG4gICAgICAgIHRoaXMuZnBzID0gMTA7XHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBSaXZlIE1vbnN0ZXJcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVSaXZlTW9uc3RlcigpO1xyXG4gICAgICAgIC8vIENhbGwgY2FsbGJhY2sgaWYgcHJvdmlkZWQgYWZ0ZXIgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICBpZiAoY2FsbEJhY2tGdW5jdGlvbikge1xyXG4gICAgICAgICAgICBjYWxsQmFja0Z1bmN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZVJpdmVNb25zdGVyKCkge1xyXG4gICAgICAgIC8vIEluaXRpYWxpemUgdGhlIFJpdmVNb25zdGVyQ29tcG9uZW50IGluc3RlYWQgb2YgZGlyZWN0bHkgdXNpbmcgUml2ZVxyXG4gICAgICAgIHRoaXMucml2ZU1vbnN0ZXIgPSBuZXcgUml2ZU1vbnN0ZXJDb21wb25lbnQoe1xyXG4gICAgICAgICAgICBzcmM6IFwiLi9hc3NldHMvbW9uc3RlcnJpdmUucml2XCIsXHJcbiAgICAgICAgICAgIGNhbnZhczogdGhpcy5jYW52YXNFbGVtZW50LFxyXG4gICAgICAgICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgICAgICAgc3RhdGVNYWNoaW5lczogXCJTdGF0ZSBNYWNoaW5lIDFcIixcclxuICAgICAgICAgICAgZml0OiBcImNvbnRhaW5cIixcclxuICAgICAgICAgICAgYWxpZ25tZW50OiBcInRvcENlbnRlclwiLFxyXG4gICAgICAgICAgICB3aWR0aDogdGhpcy5jYW52YXNFbGVtZW50LndpZHRoLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuY2FudmFzRWxlbWVudC5oZWlnaHQsXHJcbiAgICAgICAgICAgIG9uTG9hZDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaXZlTW9uc3Rlci5wbGF5KFwiRWF0IEhhcHB5XCIpOyAvLyBTdGFydCB3aXRoIHRoZSBcIklkbGVcIiBhbmltYXRpb25cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RvcFJpdmVNb25zdGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJpdmVNb25zdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucml2ZU1vbnN0ZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJpdmUgTW9uc3RlciBhbmltYXRpb24gc3RvcHBlZC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gVXBkYXRlIGZ1bmN0aW9uIChpZiBuZWVkZWQgZm9yIGN1c3RvbSBsb2dpYylcclxuICAgIHVwZGF0ZShkZWx0YVRpbWUpIHtcclxuICAgICAgICAvLyBDdXN0b20gdXBkYXRlIGxvZ2ljIGhlcmVcclxuICAgIH1cclxuICAgIC8vIERyYXdpbmcgaXMgbm93IGhhbmRsZWQgYnkgUml2ZSBhdXRvbWF0aWNhbGx5LCBubyBuZWVkIGZvciBjdXN0b20gZHJhdyBsb2dpY1xyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnRHJhd2luZyBSaXZlIEFuaW1hdGlvbicpO1xyXG4gICAgICAgIC8vIFJpdmUgdGFrZXMgY2FyZSBvZiB0aGUgcmVuZGVyaW5nLCBubyBtYW51YWwgZHJhdyBjYWxsIG5lZWRlZFxyXG4gICAgfVxyXG4gICAgLy8gU3dpdGNoIGFuaW1hdGlvbiBzdGF0ZXMgZm9yIGRpZmZlcmVudCBiZWhhdmlvcnNcclxuICAgIGNoYW5nZVRvRHJhZ0FuaW1hdGlvbigpIHtcclxuICAgICAgICB0aGlzLnJpdmVNb25zdGVyLnBsYXkoXCJPcGVuaW5nIE1vdXRoIEVhdFwiKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVRvRWF0QW5pbWF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMucml2ZU1vbnN0ZXIucGxheShcIkVhdCBIYXBweVwiKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVRvSWRsZUFuaW1hdGlvbigpIHtcclxuICAgICAgICB0aGlzLnJpdmVNb25zdGVyLnBsYXkoXCJJZGxlXCIpO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlVG9TcGl0QW5pbWF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMucml2ZU1vbnN0ZXIucGxheShcIkVhdCBEaXNndXN0XCIpO1xyXG4gICAgfVxyXG4gICAgLy8gRXZlbnQgaGFuZGxlcnMgZm9yIHB1enpsZSBhbmQgc3RvbmUgZHJvcFxyXG4gICAgaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5pc0NvcnJlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUb0VhdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUb1NwaXRBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgIH1cclxuICAgIC8vIENsZWFudXBcclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9wUml2ZU1vbnN0ZXIoKTtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICAvLyBFeGFtcGxlIGNsaWNrIGhhbmRsZXJcclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy54IC0gdGhpcy53aWR0aCAvIDQpICogKHhDbGljayAtIHRoaXMueCAtIHRoaXMud2lkdGggLyA0KSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIuMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMueSAtIHRoaXMuaGVpZ2h0IC8gMi4yKSk7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDEwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ2xvc2VCdXR0b24sIENhbmNlbEJ1dHRvbiwgUmV0cnlCdXR0b24gfSBmcm9tIFwiQGJ1dHRvbnNcIjtcclxuaW1wb3J0IHsgQ0xJQ0ssIGxhbmcsIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgQXJlWW91U3VyZVBvcFVwIGZyb20gXCJAcG9wdXBzL3N1cmUtcG9wdXBcIjtcclxuaW1wb3J0IHsgQVVESU9fQVJFX1lPVV9TVVJFLCBQT1BVUF9CR19JTUcgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXVzZVBvcFVwIHtcclxuICAgIGNhbnZhcztcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW5jZWxCdXR0b247XHJcbiAgICByZXRyeUJ1dHRvbjtcclxuICAgIGNsb3NlQnV0dG9uO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBwb3BfdXBfaW1hZ2U7XHJcbiAgICBjYWxsYmFjaztcclxuICAgIHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICByZWxvYWRTY2VuZTtcclxuICAgIGdhbWVwbGF5RGF0YTtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgcmV0cnlTdXJlUG9wdXA7XHJcbiAgICBDbG9zZVN1cmVQb3B1cDtcclxuICAgIGlzUmV0cnlCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICBpc0Nsb3NlQnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBjYWxsYmFjaywgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgcmVsb2FkU2NlbmUsIGdhbWVwbGF5RGF0YSkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLmdhbWVwbGF5RGF0YSA9IGdhbWVwbGF5RGF0YTtcclxuICAgICAgICB0aGlzLnN3aXRjaFRvTGV2ZWxTZWxlY3Rpb24gPSBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgICAgIHRoaXMucmVsb2FkU2NlbmUgPSByZWxvYWRTY2VuZTtcclxuICAgICAgICBjb25zdCBzZWxmSWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gc2VsZklkRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uID0gbmV3IENhbmNlbEJ1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzKTtcclxuICAgICAgICB0aGlzLnJldHJ5QnV0dG9uID0gbmV3IFJldHJ5QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC41NSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjQgLVxyXG4gICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VCdXR0b24gPSBuZXcgQ2xvc2VCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjI1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIgK1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNCAtXHJcbiAgICAgICAgICAgICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMik7XHJcbiAgICAgICAgbG9hZEltYWdlcyh7IHBvcF91cF9pbWFnZTogUE9QVVBfQkdfSU1HIH0sIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2UgPSBpbWFnZXNbXCJwb3BfdXBfaW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnJldHJ5U3VyZVBvcHVwID0gbmV3IEFyZVlvdVN1cmVQb3BVcCh0aGlzLmNhbnZhcywgdGhpcy55ZXNSZXRyeUNhbGxiYWNrLCB0aGlzLm5vUmV0cnlDYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5DbG9zZVN1cmVQb3B1cCA9IG5ldyBBcmVZb3VTdXJlUG9wVXAodGhpcy5jYW52YXMsIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgdGhpcy5ub0Nsb3NlQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgeWVzUmV0cnlDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSh0aGlzLmdhbWVwbGF5RGF0YSwgXCJHYW1lUGxheVwiKTtcclxuICAgIH07XHJcbiAgICBub1JldHJ5Q2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZXRyeUJ1dHRvbkNsaWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG5vQ2xvc2VDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlQnV0dG9uQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzQ2xvc2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYWRkTGlzdG5lciA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZU1vdXNlQ2xpY2sgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLmNhbmNlbEJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5yZXRyeUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nID09IFwiZW5nbGlzaFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNSZXRyeUJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXRyeVN1cmVQb3B1cC5hZGRMaXN0bmVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlBcmVZb3VTdXJlU291bmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSh0aGlzLmdhbWVwbGF5RGF0YSwgXCJHYW1lUGxheVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jbG9zZUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nID09IFwiZW5nbGlzaFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNDbG9zZUJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5DbG9zZVN1cmVQb3B1cC5hZGRMaXN0bmVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlBcmVZb3VTdXJlU291bmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uKFwiR2FtZVBsYXlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiYSgwLDAsMCwwLjUpXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnBvcF91cF9pbWFnZSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjEsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiwgdGhpcy5jYW52YXMud2lkdGggKiAwLjgsIHRoaXMuY2FudmFzLndpZHRoICogMC44KTtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5QnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmV0cnlCdXR0b25DbGlja2VkID09IHRydWUgJiYgbGFuZyA9PSBcImVuZ2xpc2hcIilcclxuICAgICAgICAgICAgICAgIHRoaXMucmV0cnlTdXJlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Nsb3NlQnV0dG9uQ2xpY2tlZCA9PSB0cnVlICYmIGxhbmcgPT0gXCJlbmdsaXNoXCIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlU3VyZVBvcHVwLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5Q2xpY2tTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKCk7XHJcbiAgICB9O1xyXG4gICAgcGxheUFyZVlvdVN1cmVTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19BUkVfWU9VX1NVUkUpO1xyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQ0xJQ0ssIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBZZXNCdXR0b24sIE5vQnV0dG9uIH0gZnJvbSBcIkBidXR0b25zXCI7XHJcbmltcG9ydCB7IFBPUFVQX0JHX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyZVlvdVN1cmVQb3BVcCB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgeWVzQnV0dG9uO1xyXG4gICAgbm9CdXR0b247XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHBvcF91cF9pbWFnZTtcclxuICAgIHllc0NhbGxiYWNrO1xyXG4gICAgbm9DYWxsYmFjaztcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCB5ZXNDYWxsYmFjaywgbm9DYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMueWVzQ2FsbGJhY2sgPSB5ZXNDYWxsYmFjaztcclxuICAgICAgICB0aGlzLm5vQ2FsbGJhY2sgPSBub0NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy55ZXNCdXR0b24gPSBuZXcgWWVzQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC41NSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjQgLVxyXG4gICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpO1xyXG4gICAgICAgIHRoaXMubm9CdXR0b24gPSBuZXcgTm9CdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjI1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIgK1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNCAtXHJcbiAgICAgICAgICAgICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMik7XHJcbiAgICAgICAgbG9hZEltYWdlcyh7IHBvcF91cF9pbWFnZTogUE9QVVBfQkdfSU1HIH0sIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2UgPSBpbWFnZXNbXCJwb3BfdXBfaW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFkZExpc3RuZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHRoaXMueWVzQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy55ZXNDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5ub0J1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9DYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2JhKDAsMCwwLDAuNSlcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucG9wX3VwX2ltYWdlLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuOCwgdGhpcy5jYW52YXMud2lkdGggKiAwLjgpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0WSA9IHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArIDgwO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IFwiMjRweCBBcmlhbFwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoXCJBcmUgeW91IHN1cmU/XCIsIHRoaXMuY2FudmFzLndpZHRoIC8gMiwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMi44KTtcclxuICAgICAgICAgICAgdGhpcy55ZXNCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLm5vQnV0dG9uLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5Q2xpY2tTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKCk7XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSBcIkBldmVudHNcIjtcclxuaW1wb3J0IHsgVXRpbHMsIGZvbnQsIFZJU0lCSUxJVFlfQ0hBTkdFIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiQGNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgUFJPTVBUX1BMQVlfQlVUVE9OLCBQUk9NUFRfVEVYVF9CRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBQcm9tcHRUZXh0IGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgbGV2ZWxEYXRhO1xyXG4gICAgY3VycmVudFByb21wdFRleHQ7XHJcbiAgICBjdXJyZW50UHV6emxlRGF0YTtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgcHJvbXB0X2ltYWdlO1xyXG4gICAgdGFyZ2V0U3RvbmVzO1xyXG4gICAgcmlnaHRUb0xlZnQ7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgaXNTdG9uZURyb3BwZWQgPSBmYWxzZTtcclxuICAgIGRyb3BwZWRTdG9uZXMgPSAwO1xyXG4gICAgdGltZSA9IDA7XHJcbiAgICBwcm9tcHRJbWFnZVdpZHRoID0gMDtcclxuICAgIGlzQXBwRm9yZWdyb3VuZCA9IHRydWU7XHJcbiAgICBzY2FsZSA9IDE7XHJcbiAgICBpc1NjYWxpbmdVcCA9IHRydWU7XHJcbiAgICBzY2FsZUZhY3RvciA9IDAuMDAwNTA7XHJcbiAgICBwcm9tcHRJbWFnZUhlaWdodCA9IDA7XHJcbiAgICBwcm9tcHRQbGF5QnV0dG9uO1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgY3VycmVudFB1enpsZURhdGEsIGxldmVsRGF0YSwgcmlnaHRUb0xlZnQpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZVN0b25lRHJvcChldmVudCksXHJcbiAgICAgICAgICAgIGxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVMb2FkUHV6emxlKGV2ZW50KVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLmxldmVsRGF0YSA9IGxldmVsRGF0YTtcclxuICAgICAgICB0aGlzLnJpZ2h0VG9MZWZ0ID0gcmlnaHRUb0xlZnQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHJvbXB0VGV4dCA9IGN1cnJlbnRQdXp6bGVEYXRhLnByb21wdC5wcm9tcHRUZXh0O1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEgPSBjdXJyZW50UHV6emxlRGF0YTtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzO1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucHJlbG9hZFByb21wdEF1ZGlvKHRoaXMuZ2V0UHJvbXB0QXVkaW9VcmwoKSk7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRfaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnByb21wdFBsYXlCdXR0b24gPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmxvYWRJbWFnZXMoKTtcclxuICAgICAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMucHJvbXB0SW1hZ2VXaWR0aCA9IHRoaXMud2lkdGggKiAwLjY1O1xyXG4gICAgICAgIHRoaXMucHJvbXB0SW1hZ2VIZWlnaHQgPSB0aGlzLmhlaWdodCAqIDAuMztcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGhhbmRsZU1vdXNlRG93biA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmIChzZWxmLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5U291bmQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZ2V0UHJvbXB0QXVkaW9VcmwgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIFV0aWxzLmdldENvbnZlcnRlZERldlByb2RVUkwodGhpcy5jdXJyZW50UHV6emxlRGF0YS5wcm9tcHQucHJvbXB0QXVkaW8pO1xyXG4gICAgfTtcclxuICAgIHBsYXlTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc0FwcEZvcmVncm91bmQpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5UHJvbXB0QXVkaW8oVXRpbHMuZ2V0Q29udmVydGVkRGV2UHJvZFVSTCh0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnByb21wdC5wcm9tcHRBdWRpbykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh4Q2xpY2sgLSB0aGlzLndpZHRoIC8gMykgPCAxMiAmJiBNYXRoLnNxcnQoeUNsaWNrIC0gdGhpcy5oZWlnaHQgLyA1LjUpIDwgMTA7XHJcbiAgICB9XHJcbiAgICBzZXRDdXJycmVudFB1enpsZURhdGEoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFByb21wdFRleHQgPSBkYXRhLnByb21wdC5wcm9tcHRUZXh0O1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXM7XHJcbiAgICB9XHJcbiAgICBkcmF3UlRMTGFuZygpIHtcclxuICAgICAgICB2YXIgeCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmhlaWdodCAqIDAuMjY7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgdmFyIGZvbnRTaXplID0gdGhpcy5jYWxjdWxhdGVGb250KCk7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnByb21wdEltYWdlV2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gdGhpcy5wcm9tcHRJbWFnZUhlaWdodDtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplfXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbFR5cGUgPT0gXCJMZXR0ZXJJbldvcmRcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxldHRlckluV29yZCA9IHRoaXMuY3VycmVudFByb21wdFRleHQucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzWzBdLCBcImdcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy50YXJnZXRTdG9uZXNbMF0sIHggKyB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQobGV0dGVySW5Xb3JkKS53aWR0aCAvIDIsIHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChsZXR0ZXJJbldvcmQsIHggLSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50YXJnZXRTdG9uZXNbMF0pLndpZHRoIC8gMiwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMTUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsVHlwZSA9PSBcIldvcmRcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgeCA9IHggLSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy5jdXJyZW50UHJvbXB0VGV4dCkud2lkdGggKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50YXJnZXRTdG9uZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wcGVkU3RvbmVzID4gaSB8fCB0aGlzLmRyb3BwZWRTdG9uZXMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLnRhcmdldFN0b25lc1tpXSwgeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMudGFyZ2V0U3RvbmVzW2ldLCB4LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHggKyB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50YXJnZXRTdG9uZXNbaV0pLndpZHRoICsgNTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4xNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlID09IFwiYXVkaW9QbGF5ZXJXb3JkXCIpIHtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9ICh0aGlzLndpZHRoIC0gc2NhbGVkV2lkdGgpICogMS4yNTtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9ICh0aGlzLmhlaWdodCAtIHNjYWxlZEhlaWdodCkgKiAwLjMzO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgb2Zmc2V0WCwgb2Zmc2V0WSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEucHJvdG9UeXBlID09IFwiVmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQsIHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjE1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd090aGVycygpIHtcclxuICAgICAgICBjb25zdCBwcm9tcHRUZXh0TGV0dGVycyA9IHRoaXMuY3VycmVudFByb21wdFRleHQuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgY29uc3QgeCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmhlaWdodCAqIDAuMjg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnByb21wdEltYWdlV2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gdGhpcy5wcm9tcHRJbWFnZUhlaWdodDtcclxuICAgICAgICB2YXIgZm9udFNpemUgPSB0aGlzLmNhbGN1bGF0ZUZvbnQoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplfXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgbGV0IHN0YXJ0UHJvbXB0dGV4dFggPSB0aGlzLndpZHRoIC8gMiAtXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLmN1cnJlbnRQcm9tcHRUZXh0KS53aWR0aCAvIDI7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRXb3JkV2lkdGggPSAwO1xyXG4gICAgICAgIHZhciBsZXR0ZXJIaWdobGlnaHQgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lc1swXS5zcGxpdChcIlwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb21wdFRleHRMZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxldHRlckluV29yZFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxldHRlckhpZ2hsaWdodC5pbmNsdWRlcyhwcm9tcHRUZXh0TGV0dGVyc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHRlckhpZ2hsaWdodCA9IGxldHRlckhpZ2hsaWdodC5zbGljZSgxLCBsZXR0ZXJIaWdobGlnaHQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHByb21wdFRleHRMZXR0ZXJzW2ldLCBzdGFydFByb21wdHRleHRYLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjI1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXb3JkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wcGVkU3RvbmVzID4gaSB8fCB0aGlzLmRyb3BwZWRTdG9uZXMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHByb21wdFRleHRMZXR0ZXJzW2ldLCBzdGFydFByb21wdHRleHRYLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHByb21wdFRleHRMZXR0ZXJzW2ldLCBzdGFydFByb21wdHRleHRYLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4yNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU291bmRXb3JkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMjUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQsIHRoaXMud2lkdGggLyAyLjEsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4yNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudFdvcmRXaWR0aCA9ICh0aGlzLmNvbnRleHQubWVhc3VyZVRleHQocHJvbXB0VGV4dExldHRlcnNbaV0pLndpZHRoICsgdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHByb21wdFRleHRMZXR0ZXJzW2kgKyAxXSkud2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgc3RhcnRQcm9tcHR0ZXh0WCArPSBjdXJyZW50V29yZFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsaW5nKCk7XHJcbiAgICAgICAgdGhpcy50aW1lID0gKGRlbHRhVGltZSA8IDE3KSA/IHRoaXMudGltZSArIE1hdGguZmxvb3IoZGVsdGFUaW1lKSA6IHRoaXMudGltZSArIDE2O1xyXG4gICAgICAgIGlmIChNYXRoLmZsb29yKHRoaXMudGltZSkgPj0gMTkxMCAmJiBNYXRoLmZsb29yKHRoaXMudGltZSkgPD0gMTkyNikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlTb3VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNTdG9uZURyb3BwZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnByb21wdEltYWdlV2lkdGggKiB0aGlzLnNjYWxlO1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSB0aGlzLnByb21wdEltYWdlSGVpZ2h0ICogdGhpcy5zY2FsZTtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9ICh0aGlzLndpZHRoIC0gc2NhbGVkV2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9ICh0aGlzLmhlaWdodCAtIHNjYWxlZEhlaWdodCkgLyA1O1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0X2ltYWdlLCBvZmZzZXRYLCBvZmZzZXRZLCBzY2FsZWRXaWR0aCwgc2NhbGVkSGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgdGhpcy5yaWdodFRvTGVmdFxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmRyYXdSVExMYW5nKClcclxuICAgICAgICAgICAgICAgIDogdGhpcy5kcmF3T3RoZXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pc1N0b25lRHJvcHBlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kcm9wcGVkU3RvbmVzID0gMDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhID0gdGhpcy5sZXZlbERhdGEucHV6emxlc1tldmVudC5kZXRhaWwuY291bnRlcl07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHJvbXB0VGV4dCA9IHRoaXMuY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy50YXJnZXRTdG9uZXMgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcztcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnByZWxvYWRQcm9tcHRBdWRpbyh0aGlzLmdldFByb21wdEF1ZGlvVXJsKCkpO1xyXG4gICAgICAgIHRoaXMuaXNTdG9uZURyb3BwZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICBkcm9wcGVkU3RvbmVJbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZFN0b25lcyA9IGluZGV4O1xyXG4gICAgfVxyXG4gICAgY2FsY3VsYXRlRm9udCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucHJvbXB0SW1hZ2VXaWR0aCAvIHRoaXMuY3VycmVudFByb21wdFRleHQubGVuZ3RoID4gMzUpID8gMzUgOiB0aGlzLndpZHRoICogMC42NSAvIHRoaXMuY3VycmVudFByb21wdFRleHQubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlU2NhbGluZygpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1NjYWxpbmdVcCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlICs9IHRoaXMuc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlID49IDEuMDUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTY2FsaW5nVXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZSAtPSB0aGlzLnNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zY2FsZSA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTY2FsaW5nVXAgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09IFwiaGlkZGVuXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBcHBGb3JlZ3JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0FwcEZvcmVncm91bmQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBhc3luYyBsb2FkSW1hZ2VzKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlMVByb21pc2UgPSB0aGlzLmxvYWRJbWFnZSh0aGlzLnByb21wdF9pbWFnZSwgUFJPTVBUX1RFWFRfQkcpO1xyXG4gICAgICAgIGNvbnN0IGltYWdlMlByb21pc2UgPSB0aGlzLmxvYWRJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIFBST01QVF9QTEFZX0JVVFRPTik7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW2ltYWdlMVByb21pc2UsIGltYWdlMlByb21pc2VdKTtcclxuICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gWW91IGNhbiBkbyBhZGRpdGlvbmFsIGFjdGlvbnMgaGVyZSBhZnRlciBib3RoIGltYWdlcyBhcmUgbG9hZGVkLlxyXG4gICAgfVxyXG4gICAgbG9hZEltYWdlKGltYWdlLCBzcmMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IHNyYztcclxuICAgICAgICAgICAgaW1hZ2Uub25lcnJvciA9IChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBSaXZlLCBMYXlvdXQsIEZpdCwgQWxpZ25tZW50IH0gZnJvbSAnQHJpdmUtYXBwL2NhbnZhcyc7XHJcbmV4cG9ydCBjbGFzcyBSaXZlTW9uc3RlckNvbXBvbmVudCB7XHJcbiAgICBwcm9wcztcclxuICAgIHJpdmVJbnN0YW5jZTtcclxuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIC8vIEluaXRpYWxpemUgUml2ZVxyXG4gICAgICAgIHRoaXMucml2ZUluc3RhbmNlID0gbmV3IFJpdmUoe1xyXG4gICAgICAgICAgICBzcmM6IHRoaXMucHJvcHMuc3JjLFxyXG4gICAgICAgICAgICBjYW52YXM6IHRoaXMucHJvcHMuY2FudmFzLFxyXG4gICAgICAgICAgICBhdXRvcGxheTogdGhpcy5wcm9wcy5hdXRvcGxheSxcclxuICAgICAgICAgICAgc3RhdGVNYWNoaW5lczogdGhpcy5wcm9wcy5zdGF0ZU1hY2hpbmVzIHx8IFwiXCIsXHJcbiAgICAgICAgICAgIGxheW91dDogbmV3IExheW91dCh7XHJcbiAgICAgICAgICAgICAgICBmaXQ6IEZpdFt0aGlzLnByb3BzLmZpdCB8fCBcIkNvbnRhaW5cIl0sXHJcbiAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IEFsaWdubWVudFt0aGlzLnByb3BzLmFsaWdubWVudCB8fCBcIlRvcENlbnRlclwiXSxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG9uTG9hZDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMub25Mb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5vbkxvYWQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHBsYXkoYW5pbWF0aW9uTmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnJpdmVJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJpdmVJbnN0YW5jZS5wbGF5KGFuaW1hdGlvbk5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucml2ZUluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucml2ZUluc3RhbmNlLnN0b3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RvbmVDb25maWcsIFZJU0lCSUxJVFlfQ0hBTkdFLCBVdGlscyB9IGZyb20gJ0Bjb21tb24nO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiQGV2ZW50c1wiO1xyXG5pbXBvcnQgeyBUdXRvcmlhbCwgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiQGNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIkBkYXRhXCI7XHJcbmltcG9ydCB7IEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9NT05TVEVSX1NQSVQsIEFVRElPX1BBVEhfTU9OU1RFUl9ESVNTQVBPSU5URUQsIEFVRElPX1BBVEhfUE9JTlRTX0FERCwgQVVESU9fUEFUSF9DT1JSRUNUX1NUT05FLCBBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMsIEFTU0VUU19QQVRIX1NUT05FX1BJTktfQkcgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdG9uZUhhbmRsZXIgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGN1cnJlbnRQdXp6bGVEYXRhO1xyXG4gICAgdGFyZ2V0U3RvbmVzO1xyXG4gICAgc3RvbmVQb3M7XHJcbiAgICBwaWNrZWRTdG9uZTtcclxuICAgIGZvaWxTdG9uZXMgPSBuZXcgQXJyYXkoKTtcclxuICAgIGFuc3dlciA9IFwiXCI7XHJcbiAgICBwdXp6bGVOdW1iZXI7XHJcbiAgICBsZXZlbERhdGE7XHJcbiAgICBjb3JyZWN0QW5zd2VyO1xyXG4gICAgcHV6emxlU3RhcnRUaW1lO1xyXG4gICAgc2hvd1R1dG9yaWFsID0gR2FtZVNjb3JlLmdldERhdGFmcm9tU3RvcmFnZSgpLmxlbmd0aCA9PSB1bmRlZmluZWQgPyB0cnVlIDogZmFsc2U7XHJcbiAgICBjb3JyZWN0U3RvbmVBdWRpbztcclxuICAgIHR1dG9yaWFsO1xyXG4gICAgY29ycmVjdFRhcmdldFN0b25lO1xyXG4gICAgc3RvbmViZztcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgZmVlZGJhY2tBdWRpb3M7XHJcbiAgICB0aW1lclRpY2tpbmdJbnN0YW5jZTtcclxuICAgIGlzR2FtZVBhdXNlZCA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwdXp6bGVOdW1iZXIsIGxldmVsRGF0YSwgZmVlZGJhY2tBdWRpb3MsIHRpbWVyVGlja2luZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVTdG9uZURyb3AoZXZlbnQpLFxyXG4gICAgICAgICAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlTG9hZFB1enpsZShldmVudCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLnB1enpsZU51bWJlciA9IHB1enpsZU51bWJlcjtcclxuICAgICAgICB0aGlzLmxldmVsRGF0YSA9IGxldmVsRGF0YTtcclxuICAgICAgICB0aGlzLnNldFRhcmdldFN0b25lKHRoaXMucHV6emxlTnVtYmVyKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVTdG9uZVBvcygpO1xyXG4gICAgICAgIHRoaXMuY29ycmVjdFN0b25lQXVkaW8gPSBuZXcgQXVkaW8oQVVESU9fUEFUSF9DT1JSRUNUX1NUT05FKTtcclxuICAgICAgICB0aGlzLmNvcnJlY3RTdG9uZUF1ZGlvLmxvb3AgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrQXVkaW9zID0gdGhpcy5jb252ZXJ0RmVlZEJhY2tBdWRpb3NUb0xpc3QoZmVlZGJhY2tBdWRpb3MpO1xyXG4gICAgICAgIHRoaXMucHV6emxlU3RhcnRUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsID0gbmV3IFR1dG9yaWFsKGNvbnRleHQsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCwgcHV6emxlTnVtYmVyKTtcclxuICAgICAgICB0aGlzLnN0b25lYmcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnN0b25lYmcuc3JjID0gQVNTRVRTX1BBVEhfU1RPTkVfUElOS19CRztcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdG9uZWJnLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlU3RvbmVzKHRoaXMuc3RvbmViZyk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmdJbnN0YW5jZSA9IHRpbWVyVGlja2luZ0luc3RhbmNlO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlU3RvbmVzKGltZykge1xyXG4gICAgICAgIGNvbnN0IGZvaWxTdG9uZXMgPSB0aGlzLmdldEZvaWxTdG9uZXMoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZvaWxTdG9uZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGZvaWxTdG9uZXNbaV0gPT0gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHV0b3JpYWwudXBkYXRlVGFyZ2V0U3RvbmVQb3NpdGlvbnModGhpcy5zdG9uZVBvc1tpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5mb2lsU3RvbmVzLnB1c2gobmV3IFN0b25lQ29uZmlnKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCwgZm9pbFN0b25lc1tpXSwgdGhpcy5zdG9uZVBvc1tpXVswXSwgdGhpcy5zdG9uZVBvc1tpXVsxXSwgaW1nLCB0aGlzLnRpbWVyVGlja2luZ0luc3RhbmNlLCBpID09IGZvaWxTdG9uZXMubGVuZ3RoIC0gMSA/IHRoaXMudHV0b3JpYWwgOiBudWxsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZm9pbFN0b25lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLmZvaWxTdG9uZXNbaV0uZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5mb2lsU3RvbmVzW3RoaXMuZm9pbFN0b25lcy5sZW5ndGggLSAxXS5mcmFtZSA+PSAxMDAgJiZcclxuICAgICAgICAgICAgIXRoaXMuaXNHYW1lUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd1dvcmRQdXp6bGVMZXR0ZXJzKGRlbHRhVGltZSwgc2hvdWxkSGlkZVN0b25lQ2hlY2tlciwgZ3JvdXBlZExldHRlcnMpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZm9pbFN0b25lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkSGlkZVN0b25lQ2hlY2tlcihpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2lsU3RvbmVzW2ldLmRyYXcoZGVsdGFUaW1lLCBPYmplY3Qua2V5cyhncm91cGVkTGV0dGVycykubGVuZ3RoID4gMSAmJiBncm91cGVkTGV0dGVyc1tpXSAhPT0gdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5mb2lsU3RvbmVzW3RoaXMuZm9pbFN0b25lcy5sZW5ndGggLSAxXS5mcmFtZSA+PSAxMDAgJiZcclxuICAgICAgICAgICAgIXRoaXMuaXNHYW1lUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZVN0b25lUG9zKCkge1xyXG4gICAgICAgIGxldCBvZmZzZXRDb29yZGluYXRlVmFsdWUgPSAzMjtcclxuICAgICAgICB0aGlzLnN0b25lUG9zID0gW1xyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDUgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjkgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMTUgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMy41ICsgdGhpcy5jYW52YXMud2lkdGggLyAyIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4yIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDQgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjI4IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDcgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjUgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMi4zICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIuMSAtXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS45IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIuMyArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLjEgLVxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuNDIgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gNiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMuc3RvbmVQb3MgPSB0aGlzLnN0b25lUG9zLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSk7XHJcbiAgICB9XHJcbiAgICBzZXRUYXJnZXRTdG9uZShwdXp6bGVOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhID0gdGhpcy5sZXZlbERhdGEucHV6emxlc1twdXp6bGVOdW1iZXJdO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gWy4uLnRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzXTtcclxuICAgICAgICB0aGlzLmNvcnJlY3RUYXJnZXRTdG9uZSA9IHRoaXMudGFyZ2V0U3RvbmVzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSBbXTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFB1enpsZU51bWJlcihldmVudC5kZXRhaWwuY291bnRlcik7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSBldmVudC5kZXRhaWwuY291bnRlcjtcclxuICAgICAgICB0aGlzLnNldFRhcmdldFN0b25lKHRoaXMucHV6emxlTnVtYmVyKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVTdG9uZVBvcygpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3RvbmVzKHRoaXMuc3RvbmViZyk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdChkcm9wcGVkU3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVG8gRG86IE5lZWQgdG8gcmVmYWN0b3Igb3IgcmV2b21lIHRoaXMgY29tcGxldGVseSBhbmQgcGxhY2Ugc29tZXRoaW5nXHJcbiAgICAgICAgICogdGhhdCBpcyB0YWlsb3JlZCB0byBzaW5nbGUgbGV0dGVyIHB1enpsZSBzaW5jZSB3b3JkIHB1enpsZSBubyBsb25nZXIgdXNlcyB0aGlzLlxyXG4gICAgICAgICAqIFdpbGwgbGVhdmUgdGhpcyBmb3Igbm93IHRvIGF2b2lkIG1lc3Npbmcgd2l0aHQgdGhlIHNpbmdsZSBsZXR0ZXIgcHV6emxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGlzTGV0dGVyRHJvcENvcnJlY3QgPSBpc1dvcmRcclxuICAgICAgICAgICAgPyBkcm9wcGVkU3RvbmUgPT0gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmUuc3Vic3RyaW5nKDAsIGRyb3BwZWRTdG9uZS5sZW5ndGgpXHJcbiAgICAgICAgICAgIDogZHJvcHBlZFN0b25lID09IHRoaXMuY29ycmVjdFRhcmdldFN0b25lO1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc0xldHRlckRyb3BGZWVkYmFja0F1ZGlvKGZlZWRCYWNrSW5kZXgsIGlzTGV0dGVyRHJvcENvcnJlY3QsIGlzV29yZCwgZHJvcHBlZFN0b25lKTtcclxuICAgICAgICByZXR1cm4gaXNMZXR0ZXJEcm9wQ29ycmVjdDtcclxuICAgIH1cclxuICAgIHByb2Nlc3NMZXR0ZXJEcm9wRmVlZGJhY2tBdWRpbyhmZWVkQmFja0luZGV4LCBpc0xldHRlckRyb3BDb3JyZWN0LCBpc1dvcmQsIGRyb3BwZWRTdG9uZSkge1xyXG4gICAgICAgIGlmIChpc0xldHRlckRyb3BDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGlzV29yZFxyXG4gICAgICAgICAgICAgICAgPyBkcm9wcGVkU3RvbmUgPT09IHRoaXMuZ2V0Q29ycmVjdFRhcmdldFN0b25lKCkgLy8gY29uZGl0aW9uIGZvciB3b3JkIHB1enpsZVxyXG4gICAgICAgICAgICAgICAgOiBpc0xldHRlckRyb3BDb3JyZWN0OyAvLyBmb3IgbGV0dGVyIGFuZCBsZXR0ZXIgZm9yIHdvcmQgcHV6emxlXHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5RmVlZGJhY2tBdWRpb3MoZmFsc2UsIEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DKDIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5RmVlZGJhY2tBdWRpb3MoZmFsc2UsIEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9NT05TVEVSX1NQSVQsIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPiAwID8gQVVESU9fUEFUSF9NT05TVEVSX0RJU1NBUE9JTlRFRCA6IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldENvcnJlY3RUYXJnZXRTdG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmU7XHJcbiAgICB9XHJcbiAgICBnZXRGb2lsU3RvbmVzKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuaW5kZXhPZihlKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCB0b3RhbFN0b25lc0NvdW50ID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXMubGVuZ3RoICtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLmxlbmd0aDtcclxuICAgICAgICBpZiAodG90YWxTdG9uZXNDb3VudCA+IDgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXh0cmFTdG9uZXNDb3VudCA9IHRvdGFsU3RvbmVzQ291bnQgLSA4O1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc3BsaWNlKDAsIGV4dHJhU3RvbmVzQ291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcy5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEuZm9pbFN0b25lcy5wdXNoKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpby5wYXVzZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnZlcnRGZWVkQmFja0F1ZGlvc1RvTGlzdChmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGZlZWRiYWNrQXVkaW9zW1wiZmFudGFzdGljXCJdLFxyXG4gICAgICAgICAgICBmZWVkYmFja0F1ZGlvc1tcImdyZWF0XCJdLFxyXG4gICAgICAgICAgICBmZWVkYmFja0F1ZGlvc1tcImFtYXppbmdcIl1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgc2V0R2FtZVBhdXNlKGlzR2FtZVBhdXNlZCkge1xyXG4gICAgICAgIHRoaXMuaXNHYW1lUGF1c2VkID0gaXNHYW1lUGF1c2VkO1xyXG4gICAgfVxyXG4gICAgcGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kKGZlZWRCYWNrSW5kZXgpIHtcclxuICAgICAgICBjb25zdCByYW5kb21OdW1iZXIgPSBVdGlscy5nZXRSYW5kb21OdW1iZXIoMSwgMykudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlGZWVkYmFja0F1ZGlvcyhmYWxzZSwgQVVESU9fUEFUSF9FQVRTLCBBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMocmFuZG9tTnVtYmVyKSwgQVVESU9fUEFUSF9QT0lOVFNfQURELCBVdGlscy5nZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHRoaXMuZmVlZGJhY2tBdWRpb3NbZmVlZEJhY2tJbmRleF0pKTtcclxuICAgICAgICAvLyB0byBwbGF5IHRoZSBhdWRpbyBwYXJyYWxsZWx5LlxyXG4gICAgICAgIHRoaXMuY29ycmVjdFN0b25lQXVkaW8ucGxheSgpO1xyXG4gICAgfVxyXG4gICAgcmVzZXRTdG9uZVBvc2l0aW9uKHdpZHRoLCBwaWNrZWRTdG9uZSwgcGlja2VkU3RvbmVPYmplY3QpIHtcclxuICAgICAgICBjb25zdCBzdG9uZSA9IHBpY2tlZFN0b25lO1xyXG4gICAgICAgIGNvbnN0IHN0b25lT2JqID0gcGlja2VkU3RvbmVPYmplY3Q7XHJcbiAgICAgICAgLy9SZXNldHMgdGhlIHByZXZpb3VzIHN0b25lIGxldHRlciB0byBpdHMgb3JpZ2luYWwgcG9zaXRpb24uXHJcbiAgICAgICAgaWYgKHN0b25lICYmXHJcbiAgICAgICAgICAgIHN0b25lT2JqICYmXHJcbiAgICAgICAgICAgIHN0b25lLnRleHQgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHN0b25lT2JqLm9yaWd4ID09PSBcIm51bWJlclwiICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBzdG9uZU9iai5vcmlneSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBjb25zdCB4TGltaXQgPSA1MDtcclxuICAgICAgICAgICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggLyAyO1xyXG4gICAgICAgICAgICBzdG9uZS54ID0gc3RvbmUudGV4dC5sZW5ndGggPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgc3RvbmVPYmoub3JpZ3ggPCB4TGltaXQgJiZcclxuICAgICAgICAgICAgICAgIHN0b25lT2JqLm9yaWd4IDwgaGFsZldpZHRoXHJcbiAgICAgICAgICAgICAgICA/IHN0b25lT2JqLm9yaWd4ICsgMjVcclxuICAgICAgICAgICAgICAgIDogc3RvbmVPYmoub3JpZ3g7XHJcbiAgICAgICAgICAgIHN0b25lLnkgPSBzdG9uZU9iai5vcmlneTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0b25lO1xyXG4gICAgfVxyXG4gICAgY29tcHV0ZUN1cnNvckRpc3RhbmNlKHBvc1gsIHBvc1ksIHNjKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCgocG9zWCAtIHNjLngpICoqIDIgKyAocG9zWSAtIHNjLnkpICoqIDIpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlUGlja1N0b25lVXAocG9zWCwgcG9zWSkge1xyXG4gICAgICAgIGxldCBzdG9uZUxldHRlciA9IG51bGw7XHJcbiAgICAgICAgbGV0IGN0ciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgc2Mgb2YgdGhpcy5mb2lsU3RvbmVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5jb21wdXRlQ3Vyc29yRGlzdGFuY2UocG9zWCwgcG9zWSwgc2MpO1xyXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPD0gNDApIHtcclxuICAgICAgICAgICAgICAgIHN0b25lTGV0dGVyID0gc2M7XHJcbiAgICAgICAgICAgICAgICAvKiBBZGRzIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8gdGVsbCB3aGljaCBsZXR0ZXIgaXMgd2hpY2ggaW4gY2FzZSB0aGVyZSBhcmUgdHdvIG9yIG1vcmUgb2YgdGhlIHNhbWUgbGV0dGVyLiovXHJcbiAgICAgICAgICAgICAgICBzdG9uZUxldHRlclsnZm9pbFN0b25lSW5kZXgnXSA9IGN0cjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN0cisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgcmV0dXJuIHN0b25lTGV0dGVyO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlSG92ZXJpbmdUb0Fub3RoZXJTdG9uZShwb3NYLCBwb3NZLCBzaG91bGRHcm91cExldHRlcikge1xyXG4gICAgICAgIC8qIEhhbmRsZSBob3ZlcmluZyBvZiBzdG9uZXMgZm9yIHdvcmQgcHV6emxlIG11bHRpLWxldHRlciBzZWxlY3QuKi9cclxuICAgICAgICBsZXQgc3RvbmVMZXR0ZXIgPSBudWxsO1xyXG4gICAgICAgIGxldCBjdHIgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IHNjIG9mIHRoaXMuZm9pbFN0b25lcykge1xyXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRoaXMuY29tcHV0ZUN1cnNvckRpc3RhbmNlKHBvc1gsIHBvc1ksIHNjKTtcclxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDQwICYmIHNob3VsZEdyb3VwTGV0dGVyKHNjLnRleHQsIGN0cikpIHtcclxuICAgICAgICAgICAgICAgIHN0b25lTGV0dGVyID0gc2M7XHJcbiAgICAgICAgICAgICAgICAvKiBBZGRzIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8gdGVsbCB3aGljaCBsZXR0ZXIgaXMgd2hpY2ggaW4gY2FzZSB0aGVyZSBhcmUgdHdvIG9yIG1vcmUgb2YgdGhlIHNhbWUgbGV0dGVyLiovXHJcbiAgICAgICAgICAgICAgICBzdG9uZUxldHRlclsnZm9pbFN0b25lSW5kZXgnXSA9IGN0cjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN0cisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgcmV0dXJuIHN0b25lTGV0dGVyO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW92aW5nU3RvbmVMZXR0ZXIoZHJhZ2dpbmdTdG9uZSwgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRTdG9uZUNvb3JkaW5hdGVzID0gZHJhZ2dpbmdTdG9uZTtcclxuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdXBkYXRlZFN0b25lQ29vcmRpbmF0ZXMueCA9IHBvc1ggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgdXBkYXRlZFN0b25lQ29vcmRpbmF0ZXMueSA9IHBvc1kgLSByZWN0LnRvcDtcclxuICAgICAgICByZXR1cm4gdXBkYXRlZFN0b25lQ29vcmRpbmF0ZXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCJAZXZlbnRzXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFRJTUVSX0VNUFRZLCBST1RBVElOR19DTE9DSywgVElNRVJfRlVMTCwgQVVESU9fVElNRU9VVCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBUaW1lclRpY2tpbmcgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICB0aW1lcldpZHRoO1xyXG4gICAgdGltZXJIZWlnaHQ7XHJcbiAgICB3aWR0aFRvQ2xlYXI7XHJcbiAgICB0aW1lcjtcclxuICAgIGlzVGltZXJTdGFydGVkO1xyXG4gICAgaXNUaW1lckVuZGVkO1xyXG4gICAgaXNUaW1lclJ1bm5pbmdPdXQ7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIHRpbWVyX2Z1bGw7XHJcbiAgICBwYXVzZUJ1dHRvbkNsaWNrZWQ7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBjYWxsYmFjaztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgc3RhcnRNeVRpbWVyID0gdHJ1ZTtcclxuICAgIGlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgIGlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIHBsYXlMZXZlbEVuZEF1ZGlvT25jZSA9IHRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGhUb0NsZWFyID0gdGhpcy53aWR0aCAvIDMuNDtcclxuICAgICAgICB0aGlzLnRpbWVySGVpZ2h0ID0gMTEyO1xyXG4gICAgICAgIHRoaXMudGltZXJXaWR0aCA9IDg4ODtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnRpbWVyID0gMDtcclxuICAgICAgICB0aGlzLmlzVGltZXJTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1RpbWVyRW5kZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzVGltZXJSdW5uaW5nT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgdGltZXJfZW1wdHk6IFRJTUVSX0VNUFRZLFxyXG4gICAgICAgICAgICByb3RhdGluZ19jbG9jazogUk9UQVRJTkdfQ0xPQ0ssXHJcbiAgICAgICAgICAgIHRpbWVyX2Z1bGw6IFRJTUVSX0ZVTExcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGFydFRpbWVyKCkge1xyXG4gICAgICAgIC8vIGl0IHdpbGwgc3RhcnQgdGltZXIgaW1tZWRpYXRseVxyXG4gICAgICAgIHRoaXMucmVhZHlUaW1lcigpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRNeVRpbWVyID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJlYWR5VGltZXIoKSB7XHJcbiAgICAgICAgLy8gbWFrZSB0aW1lciBsb29rIGZ1bGwgc28gYXMgaXQgZ2V0IHN0YXJ0IHNpZ25hbC4uLi4uIGl0IHdpbGwgc3RhcnQgZGVjcmVhc2luZ1xyXG4gICAgICAgIHRoaXMudGltZXIgPSAwO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0TXlUaW1lciAmJiAhdGhpcy5pc1N0b25lRHJvcHBlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyICs9IGRlbHRhVGltZSAqIDAuMDA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5mbG9vcih0aGlzLndpZHRoICogMC44NyAtICh0aGlzLndpZHRoICogMC44NyAqIHRoaXMudGltZXIgKiAwLjAxKSkgPT0gNDAgJiYgIXRoaXMuaXNNeVRpbWVyT3Zlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlMZXZlbEVuZEF1ZGlvT25jZSA/IHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX1RJTUVPVVQpIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5TGV2ZWxFbmRBdWRpb09uY2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh0aGlzLndpZHRoICogMC44NyAtICh0aGlzLndpZHRoICogMC44NyAqIHRoaXMudGltZXIgKiAwLjAxKSkgPCAwICYmICF0aGlzLmlzTXlUaW1lck92ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc015VGltZXJPdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnRpbWVyX2VtcHR5LCAwLCB0aGlzLmhlaWdodCAqIDAuMSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjA1KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5yb3RhdGluZ19jbG9jaywgMCwgdGhpcy5oZWlnaHQgKiAwLjA5LCB0aGlzLndpZHRoICogMC4xNCwgdGhpcy5oZWlnaHQgKiAwLjA2NSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMudGltZXJfZnVsbCwgMCwgMCwgdGhpcy50aW1lcldpZHRoIC0gKHRoaXMudGltZXJXaWR0aCAqIHRoaXMudGltZXIgKiAwLjAxKSwgdGhpcy50aW1lckhlaWdodCwgdGhpcy53aWR0aCAqIDAuMTQsIHRoaXMuaGVpZ2h0ICogMC4wOTksIHRoaXMud2lkdGggKiAwLjg3IC0gKHRoaXMud2lkdGggKiAwLjg3ICogdGhpcy50aW1lciAqIDAuMDEpLCB0aGlzLmhlaWdodCAqIDAuMDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcChldmVudCkge1xyXG4gICAgICAgIHRoaXMuaXNTdG9uZURyb3BwZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZFB1enpsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWVyKCk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFpbEVmZmVjdCB7XHJcbiAgICBjdHg7XHJcbiAgICBwYXJ0aWNsZXM7XHJcbiAgICBtb3VzZTtcclxuICAgIGlzRGlhbW9uZDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcykge1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMubW91c2UgPSB7XHJcbiAgICAgICAgICAgIHg6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgeTogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmlzRGlhbW9uZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgdGhpcy5kcmF3VHJhaWwoKTtcclxuICAgICAgICBsZXQgdGVtcCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXJ0aWNsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFydGljbGVzW2ldLnRpbWUgPD0gdGhpcy5wYXJ0aWNsZXNbaV0udHRsKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wLnB1c2godGhpcy5wYXJ0aWNsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFydGljbGVzID0gdGVtcDtcclxuICAgIH1cclxuICAgIGRyYXdUcmFpbCgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFydGljbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzW2ldLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmlzRGlhbW9uZCA9ICF0aGlzLmlzRGlhbW9uZDtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXNbaV0uZHJhdyh0aGlzLmlzRGlhbW9uZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkVHJhaWxQYXJ0aWNsZXNPbk1vdmUoeCwgeSkge1xyXG4gICAgICAgIHRoaXMubW91c2UueCA9IHg7XHJcbiAgICAgICAgdGhpcy5tb3VzZS55ID0geTtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZXModGhpcy5jdHgsIHRoaXMubW91c2UpKTtcclxuICAgIH1cclxuICAgIHJlc2V0UGFydGljbGVzKCkge1xyXG4gICAgICAgIHRoaXMubW91c2UueCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLm1vdXNlLnkgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuO1xyXG5jbGFzcyBQYXJ0aWNsZXMge1xyXG4gICAgY3R4O1xyXG4gICAgc3RhcnQ7XHJcbiAgICBlbmQ7XHJcbiAgICBzaXplO1xyXG4gICAgc3R5bGU7XHJcbiAgICB0aW1lO1xyXG4gICAgdHRsO1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICByZ2I7XHJcbiAgICBoeXA7XHJcbiAgICBzdGFyWDtcclxuICAgIHN0YXJZO1xyXG4gICAgc3RhckFuZ2xlO1xyXG4gICAgY29uc3RydWN0b3IoY3R4LCBtb3VzZSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zWCA9IHRoaXMuZGV0ZXJtaW5lVmFsdWVCeVNjcmVlbldpZHRoKDMwLCAxNSk7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRQb3NZID0gdGhpcy5kZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgoMzAsIDE1KTtcclxuICAgICAgICBjb25zdCBlbmRQb3NYID0gdGhpcy5kZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgoMywgMC41KTtcclxuICAgICAgICBjb25zdCBlbmRQb3NZID0gdGhpcy5kZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgoMiwgMC41KTtcclxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgICAgICB0aGlzLnJnYiA9IFtcclxuICAgICAgICAgICAgXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXHJcbiAgICAgICAgICAgIFwicmdiKDI0OSwyMTcsMTcwKVwiLFxyXG4gICAgICAgICAgICBcInJnYigyNDQsMTgyLDgxKVwiLFxyXG4gICAgICAgICAgICBcInJnYigyNDQsMTU5LDM0KVwiLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5zdGFydCA9IHtcclxuICAgICAgICAgICAgeDogbW91c2UueCArIHRoaXMuZ2V0UmFuZG9tSW50KC1zdGFydFBvc1gsIHN0YXJ0UG9zWCksXHJcbiAgICAgICAgICAgIHk6IG1vdXNlLnkgKyB0aGlzLmdldFJhbmRvbUludCgtc3RhcnRQb3NZLCBzdGFydFBvc1kpLFxyXG4gICAgICAgICAgICBzaXplOiB0aGlzLmRldGVybWluZVZhbHVlQnlTY3JlZW5XaWR0aCgzLCAyKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5lbmQgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuc3RhcnQueCArIHRoaXMuZ2V0UmFuZG9tSW50KC1lbmRQb3NYLCBlbmRQb3NYKSxcclxuICAgICAgICAgICAgeTogdGhpcy5zdGFydC55ICsgdGhpcy5nZXRSYW5kb21JbnQoLWVuZFBvc1ksIGVuZFBvc1kpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnggPSB0aGlzLnN0YXJ0Lng7XHJcbiAgICAgICAgdGhpcy55ID0gdGhpcy5zdGFydC55O1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuc3RhcnQuc2l6ZTtcclxuICAgICAgICB0aGlzLnN0eWxlID0gdGhpcy5yZ2JbdGhpcy5nZXRSYW5kb21JbnQoMCwgdGhpcy5yZ2IubGVuZ3RoIC0gMSldO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy50dGwgPSA3NTtcclxuICAgICAgICB0aGlzLmh5cCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFyWCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFyWSA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFyQW5nbGUgPSAwO1xyXG4gICAgfVxyXG4gICAgZGV0ZXJtaW5lVmFsdWVCeVNjcmVlbldpZHRoKGJnU2NyZWVuVmFsLCBzbWFsbFNjcmVlblZhbCkge1xyXG4gICAgICAgIC8qIDc2OCBpcyB0aGUgbG93ZXN0IHdpZHRoIHNpemUgb2YgdGFibGV0ICovXHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ud2lkdGggPiA3NjggPyBiZ1NjcmVlblZhbCA6IHNtYWxsU2NyZWVuVmFsO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWUgPD0gdGhpcy50dGwpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSAxIC0gKHRoaXMudHRsIC0gdGhpcy50aW1lKSAvIHRoaXMudHRsO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSB0aGlzLnN0YXJ0LnNpemUgKiAoMSAtIHRoaXMuZWFzZU91dFF1YXJ0KHByb2dyZXNzKSk7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueCArICh0aGlzLmVuZC54IC0gdGhpcy54KSAqIDAuMDE7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMueSArICh0aGlzLmVuZC55IC0gdGhpcy55KSAqIDAuMDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGltZSsrO1xyXG4gICAgfVxyXG4gICAgZHJhdyhpc0RyYXdEaWFtb25kKSB7XHJcbiAgICAgICAgaWYgKGlzRHJhd0RpYW1vbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFyUGFydGljbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2lyY2xlUGFydGljbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgfVxyXG4gICAgY2lyY2xlUGFydGljbGUoKSB7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5zdHlsZTtcclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMuc2l6ZSwgMCwgTWF0aC5QSSAqIDIpO1xyXG4gICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIHN0YXJQYXJ0aWNsZSgpIHtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLnN0eWxlO1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh0aGlzLngsIHRoaXMueSAtIHRoaXMuc2l6ZSk7IC8vIFRvcCBwb2ludFxyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyh0aGlzLnggKyB0aGlzLnNpemUsIHRoaXMueSk7IC8vIFJpZ2h0IHBvaW50XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHRoaXMueCwgdGhpcy55ICsgdGhpcy5zaXplKTsgLy8gQm90dG9tIHBvaW50XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHRoaXMueCAtIHRoaXMuc2l6ZSwgdGhpcy55KTsgLy8gTGVmdCBwb2ludFxyXG4gICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIGdldFJhbmRvbUludChtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBlYXNlT3V0UXVhcnQoeCkge1xyXG4gICAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHgsIDQpO1xyXG4gICAgfVxyXG59XHJcbjtcclxuIiwiaW1wb3J0IHsgY3JlYXRlUmlwcGxlRWZmZWN0IH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgVFVUT1JJQUxfSEFORCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCJAZGF0YVwiO1xyXG5leHBvcnQgY2xhc3MgVHV0b3JpYWwge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgdHV0b3JpYWxJbWc7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHRhcmdldFN0b25lUG9zaXRpb25zO1xyXG4gICAgc3RhcnR4O1xyXG4gICAgc3RhcnR5O1xyXG4gICAgZW5keDtcclxuICAgIGVuZHk7XHJcbiAgICBlbmRUdXRvcmlhbCA9IGZhbHNlO1xyXG4gICAgcHV6emxlTnVtYmVyO1xyXG4gICAgcGxheU1uc3RyQ2xrVHRybEFuaW0gPSB0cnVlO1xyXG4gICAgdG90YWxUaW1lID0gMDtcclxuICAgIG1vbnN0ZXJTdG9uZURpZmZlcmVuY2UgPSAwO1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICBkeDtcclxuICAgIGR5O1xyXG4gICAgYWJzZHg7XHJcbiAgICBhYnNkeTtcclxuICAgIHN0YXJ0UmlwcGxlID0gZmFsc2U7XHJcbiAgICBkcmF3UmlwcGxlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgcHV6emxlTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5zdGFydHggPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnR5ID0gMDtcclxuICAgICAgICB0aGlzLmVuZHggPSB0aGlzLndpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLmVuZHkgPSB0aGlzLmhlaWdodCAvIDI7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSAocHV6emxlTnVtYmVyID49IDApID8gcHV6emxlTnVtYmVyIDogbnVsbDtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsSW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbEltZy5zcmMgPSBUVVRPUklBTF9IQU5EO1xyXG4gICAgICAgIHRoaXMuZHJhd1JpcHBsZSA9IGNyZWF0ZVJpcHBsZUVmZmVjdCh0aGlzLmNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWxJbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVRhcmdldFN0b25lUG9zaXRpb25zKHRhcmdldFN0b25lUG9zaXRpb24pIHtcclxuICAgICAgICB0aGlzLnN0YXJ0eCA9IHRhcmdldFN0b25lUG9zaXRpb25bMF0gLSAyMjtcclxuICAgICAgICB0aGlzLnN0YXJ0eSA9IHRhcmdldFN0b25lUG9zaXRpb25bMV0gLSA1MDtcclxuICAgICAgICB0aGlzLm1vbnN0ZXJTdG9uZURpZmZlcmVuY2UgPSBNYXRoLnNxcnQoKHRoaXMuc3RhcnR4IC0gdGhpcy5lbmR4KSAqICh0aGlzLnN0YXJ0eCAtIHRoaXMuZW5keCkgKyAodGhpcy5zdGFydHkgLSB0aGlzLmVuZHkpICogKHRoaXMuc3RhcnR5IC0gdGhpcy5lbmR5KSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlSW1hZ2UoKTtcclxuICAgIH1cclxuICAgIGlzTW9iaWxlKCkge1xyXG4gICAgICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICB9XHJcbiAgICBzZXRUdXRvcmlhbEVuZChlbmRUdXRvcmlhbCkge1xyXG4gICAgICAgIHRoaXMuZW5kVHV0b3JpYWwgPSBlbmRUdXRvcmlhbDtcclxuICAgIH1cclxuICAgIGFuaW1hdGVJbWFnZSgpIHtcclxuICAgICAgICB0aGlzLnggPSB0aGlzLnN0YXJ0eDtcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLnN0YXJ0eTtcclxuICAgICAgICB0aGlzLmR4ID0gKHRoaXMuZW5keCAtIHRoaXMuc3RhcnR4KSAvIDUwMDA7XHJcbiAgICAgICAgdGhpcy5keSA9ICh0aGlzLmVuZHkgLSB0aGlzLnN0YXJ0eSkgLyA1MDAwO1xyXG4gICAgICAgIHRoaXMuYWJzZHggPSB0aGlzLmlzTW9iaWxlKCkgPyBNYXRoLmFicyh0aGlzLmR4KSAqIDMgOiBNYXRoLmFicyh0aGlzLmR4KTtcclxuICAgICAgICB0aGlzLmFic2R5ID0gdGhpcy5pc01vYmlsZSgpID8gTWF0aC5hYnModGhpcy5keSkgKiAzIDogTWF0aC5hYnModGhpcy5keSk7XHJcbiAgICAgICAgdGhpcy5zZXRUdXRvcmlhbEVuZChmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBkcmF3KGRlbHRhVGltZSwgaW1nLCBpbWFnZVNpemUpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQgJiYgIXRoaXMuZW5kVHV0b3JpYWwgJiYgdGhpcy5zaG91bGRQbGF5VHV0b3JpYWwoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnggPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5keCA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnggKyB0aGlzLmFic2R4ICogZGVsdGFUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnggLSB0aGlzLmFic2R4ICogZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICB0aGlzLnkgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5keSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnkgKyB0aGlzLmFic2R5ICogZGVsdGFUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnkgLSB0aGlzLmFic2R5ICogZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICBjb25zdCBkaXN4ID0gdGhpcy54IC0gdGhpcy5lbmR4ICsgdGhpcy5hYnNkeDtcclxuICAgICAgICAgICAgY29uc3QgZGlzeSA9IHRoaXMueSAtIHRoaXMuZW5keSArIHRoaXMuYWJzZHk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGRpc3ggKiBkaXN4ICsgZGlzeSAqIGRpc3kpO1xyXG4gICAgICAgICAgICBsZXQgbW9uc3RlclN0b25lRGlmZmVyZW5jZUluUGVyY2VudGFnZSA9ICgxMDAgKiBkaXN0YW5jZSAvIHRoaXMubW9uc3RlclN0b25lRGlmZmVyZW5jZSk7XHJcbiAgICAgICAgICAgIGlmIChtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlIDwgMTUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uKGRlbHRhVGltZSwgdGhpcy5lbmR4LCB0aGlzLmVuZHkgKyAzMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLnN0YXJ0eDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnN0YXJ0eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlID4gODApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uKGRlbHRhVGltZSwgdGhpcy5zdGFydHggKyAxNSwgdGhpcy5zdGFydHkgKyAxMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzQWxwaGEgPSB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAwLjQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKGltZywgdGhpcy54LCB0aGlzLnkgKyAyMCwgaW1hZ2VTaXplLCBpbWFnZVNpemUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gcHJldmlvdXNBbHBoYTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy50dXRvcmlhbEltZywgdGhpcy54ICsgMTUsIHRoaXMueSArIDEwKTsgLy9kcmF3cyB0aGUgaGFuZCBzdG9uZSBkcmFnIGFuaW1hdGlvbiFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNyZWF0ZUhhbmRTY2FsZUFuaW1hdGlvbihkZWx0YVRpbWUsIG9mZnNldFgsIG9mZnNldFksIHNob3VsZENyZWF0ZVJpcHBsZSkge1xyXG4gICAgICAgIHRoaXMudG90YWxUaW1lICs9IE1hdGguZmxvb3IoZGVsdGFUaW1lKTtcclxuICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSA1MDA7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVGYWN0b3IgPSB0aGlzLnNpbnVzb2lkYWxJbnRlcnBvbGF0aW9uKHRoaXMudG90YWxUaW1lLCAxLCAxLjUsIHRyYW5zaXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnR1dG9yaWFsSW1nLndpZHRoICogc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gdGhpcy50dXRvcmlhbEltZy5oZWlnaHQgKiBzY2FsZUZhY3RvcjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMudHV0b3JpYWxJbWcsIG9mZnNldFgsIG9mZnNldFksIHNjYWxlZFdpZHRoLCBzY2FsZWRIZWlnaHQpO1xyXG4gICAgICAgIHNob3VsZENyZWF0ZVJpcHBsZSA/IChudWxsKSA6ICh0aGlzLmRyYXdSaXBwbGUob2Zmc2V0WCArIHRoaXMud2lkdGggKiAwLjAyLCBvZmZzZXRZICsgdGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAyLCBmYWxzZSkpO1xyXG4gICAgfVxyXG4gICAgc2ludXNvaWRhbEludGVycG9sYXRpb24odGltZSwgbWluU2NhbGUsIG1heFNjYWxlLCBkdXJhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGFtcGxpdHVkZSA9IChtYXhTY2FsZSAtIG1pblNjYWxlKSAvIDI7XHJcbiAgICAgICAgY29uc3QgZnJlcXVlbmN5ID0gTWF0aC5QSSAvIGR1cmF0aW9uO1xyXG4gICAgICAgIHJldHVybiBtaW5TY2FsZSArIGFtcGxpdHVkZSAqIE1hdGguc2luKGZyZXF1ZW5jeSAqIHRpbWUpO1xyXG4gICAgfVxyXG4gICAgY2xpY2tPbk1vbnN0ZXJUdXRvcmlhbChkZWx0YVRpbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRQbGF5TW9uc3RlckNsaWNrVHV0b3JpYWxBbmltYXRpb24oKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSAyMDAwO1xyXG4gICAgICAgICAgICBjb25zdCBib3R0b21Qb3NpdGlvbiA9IHRoaXMuaGVpZ2h0IC8gMS45ICsgKHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0IC8gMC44KTtcclxuICAgICAgICAgICAgY29uc3QgdG9wUG9zaXRpb24gPSB0aGlzLmhlaWdodCAvIDEuOSArICh0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDAuOCkgLSB0aGlzLnR1dG9yaWFsSW1nLmhlaWdodDtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRPZmZzZXRZO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gdGhpcy5lbmR4O1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b3RhbFRpbWUgPCB0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50T2Zmc2V0WSA9IHRvcFBvc2l0aW9uICsgKHRoaXMudG90YWxUaW1lIC8gKHRyYW5zaXRpb25EdXJhdGlvbiAvIDIpKSAqIChib3R0b21Qb3NpdGlvbiAtIHRvcFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JpcHBsZShvZmZzZXRYLCB0aGlzLmhlaWdodCAvIDEuOSArICh0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDEuNSksIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE9mZnNldFkgPSBib3R0b21Qb3NpdGlvbiAtICgodGhpcy50b3RhbFRpbWUgLSB0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSAvICh0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSkgKiAoYm90dG9tUG9zaXRpb24gLSB0b3BQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdSaXBwbGUob2Zmc2V0WCwgdGhpcy5oZWlnaHQgLyAxLjkgKyAodGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAxLjIpICsgdGhpcy50dXRvcmlhbEltZy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy50dXRvcmlhbEltZywgb2Zmc2V0WCwgY3VycmVudE9mZnNldFksIHRoaXMudHV0b3JpYWxJbWcud2lkdGgsIHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRPZmZzZXRZIDw9IHRvcFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsVGltZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50b3RhbFRpbWUgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3VsZFBsYXlUdXRvcmlhbCgpIHtcclxuICAgICAgICBsZXQgcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZSA9IEdhbWVTY29yZS5nZXRBbGxHYW1lTGV2ZWxJbmZvKCkubGVuZ3RoIDw9IDAgJiYgdGhpcy5wdXp6bGVOdW1iZXIgPT0gMDtcclxuICAgICAgICByZXR1cm4gcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZTtcclxuICAgIH1cclxuICAgIHNob3VsZFBsYXlNb25zdGVyQ2xpY2tUdXRvcmlhbEFuaW1hdGlvbigpIHtcclxuICAgICAgICBsZXQgcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZSA9IEdhbWVTY29yZS5nZXRBbGxHYW1lTGV2ZWxJbmZvKCkubGVuZ3RoIDw9IDAgJiYgdGhpcy5wbGF5TW5zdHJDbGtUdHJsQW5pbTtcclxuICAgICAgICByZXR1cm4gcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZTtcclxuICAgIH1cclxuICAgIHNldFB1enpsZU51bWJlcihwdXp6bGVOdW1lcikge1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtZXI7XHJcbiAgICB9XHJcbiAgICBzZXRQbGF5TW9uc3RlckNsaWNrQW5pbWF0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5TW5zdHJDbGtUdHJsQW5pbSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IHN5bmNMb2FkaW5nSW1hZ2VzIH0gZnJvbSAnQGNvbW1vbic7XHJcbmltcG9ydCB7IERFRkFVTFRfQkdfR1JPVVBfSU1HUywgQVVUVU1OX0JHX0dST1VQX0lNR1MsIFdJTlRFUl9CR19HUk9VUF9JTUdTIH0gZnJvbSAnQGNvbnN0YW50cyc7XHJcbmV4cG9ydCBjb25zdCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QgPSB7XHJcbiAgICBzdW1tZXI6IHsgQkdfR1JPVVBfSU1HUzogREVGQVVMVF9CR19HUk9VUF9JTUdTLCBkcmF3OiBkZWZhdWx0QmdEcmF3aW5nIH0sXHJcbiAgICBhdXR1bW46IHsgQkdfR1JPVVBfSU1HUzogQVVUVU1OX0JHX0dST1VQX0lNR1MsIGRyYXc6IGF1dHVtQmdEcmF3aW5nIH0sXHJcbiAgICB3aW50ZXI6IHsgQkdfR1JPVVBfSU1HUzogV0lOVEVSX0JHX0dST1VQX0lNR1MsIGRyYXc6IHdpbnRlckJnRHJhd2luZyB9LFxyXG59O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQmFja2dyb3VuZChjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiYWNrZ3JvdW5kSW1nLCBkcmF3TWV0aG9kKSB7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSB7IC4uLmF3YWl0IHN5bmNMb2FkaW5nSW1hZ2VzKGJhY2tncm91bmRJbWcpIH07XHJcbiAgICBjb25zdCBvYmogPSB7XHJcbiAgICAgICAgLi4uZHJhd01ldGhvZChjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBsb2FkZWRJbWFnZXMpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuICh7IC4uLm9iaiB9KTtcclxufVxyXG47XHJcbmV4cG9ydCBjb25zdCBsb2FkRHluYW1pY0JnQXNzZXRzID0gKGxldmVsTnVtYmVyLCBhc3NldHNMaXN0KSA9PiB7XHJcbiAgICBjb25zdCBhcnIgPSBPYmplY3Qua2V5cyhhc3NldHNMaXN0KTsgLy9hdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXNcclxuICAgIGxldCBiYWNrZ3JvdW5kVHlwZSA9IE1hdGguZmxvb3IobGV2ZWxOdW1iZXIgLyAxMCkgJSBhcnIubGVuZ3RoO1xyXG4gICAgaWYgKGxldmVsTnVtYmVyID49IDMwKSB7XHJcbiAgICAgICAgYmFja2dyb3VuZFR5cGUgPSBiYWNrZ3JvdW5kVHlwZSAlIDM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyAuLi5hc3NldHNMaXN0W2FycltiYWNrZ3JvdW5kVHlwZV1dIH07XHJcbn07XHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0QmdEcmF3aW5nKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGJnSW1hZ2VzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRyYXc6ICgpID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkRFRkFVTFRfQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkFTU0VUU19QQVRIX1RPVEVNLCB3aWR0aCAqIDAuNiwgaGVpZ2h0IC8gNiwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uQVNTRVRTX1BBVEhfRkVOQ0UsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gMywgd2lkdGgsIGhlaWdodCAvIDMpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uQVNTRVRTX1BBVEhfSElMTCwgLXdpZHRoICogMC4yNSwgaGVpZ2h0IC8gMiwgd2lkdGggKiAxLjUsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuO1xyXG5leHBvcnQgZnVuY3Rpb24gYXV0dW1CZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuQVVUVU1OX1BJTExBUl8xLCB3aWR0aCAqIDAuMzgsIGhlaWdodCAvIDYsIHdpZHRoIC8gMS4yLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuQVVUVU1OX0ZFTkNFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gNCwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fSElMTF8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiB3aW50ZXJCZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuV0lOVEVSX1BJTExBUl8xLCB3aWR0aCAqIDAuMzgsIGhlaWdodCAvIDYsIHdpZHRoIC8gMS4yLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuV0lOVEVSX0ZFTkNFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gNCwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfSElMTF8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiBsZXZlbFNlbGVjdEJnRHJhd2luZyhjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiZ0ltYWdlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkcmF3OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzPy5MRVZFTF9TRUxFQ1RJT05fQkFDS0dST1VORCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbiIsImltcG9ydCB7IE1BUF9JQ09OX0lNRywgTUFQX0lDT05fU1BFQ0lBTF9JTUcsIE1BUF9MT0NLX0lNRywgU1RBUl9JTUcsIFNQRUNJQUxfTEVWRUxTLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IHN5bmNMb2FkaW5nSW1hZ2VzIH0gZnJvbSAnQGNvbW1vbic7XHJcbmNvbnN0IGlzU3BlY2lhbExldmVsID0gKGluZGV4KSA9PiBTUEVDSUFMX0xFVkVMUy5pbmNsdWRlcyhpbmRleCk7XHJcbmV4cG9ydCBjb25zdCBnZXRkZWZhdWx0Q2xvdWRCdG5zUG9zID0gKGNhbnZhcykgPT4ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDEwLFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCAvIDEwXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxMFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggLyAzICsgY2FudmFzLndpZHRoIC8gMi44LFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCAvIDEwLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggLyAxMCxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAzXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAzXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDMgKyBjYW52YXMud2lkdGggLyAyLjgsXHJcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0IC8gMyxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gMTAsXHJcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0IC8gMS44XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxLjhcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gMyArIGNhbnZhcy53aWR0aCAvIDIuOCxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxLjgsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxLjNcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdLFxyXG4gICAgXTtcclxufTtcclxuZXhwb3J0IGNvbnN0IGxvYWRMZXZlbEltYWdlcyA9ICgpID0+IHtcclxuICAgIHJldHVybiBzeW5jTG9hZGluZ0ltYWdlcyh7XHJcbiAgICAgICAgYmFsbG9vbkltZzogTUFQX0lDT05fSU1HLFxyXG4gICAgICAgIHNwZWNpYWxCbG9vbkltZzogTUFQX0lDT05fU1BFQ0lBTF9JTUcsXHJcbiAgICAgICAgbG9ja0ltZzogTUFQX0xPQ0tfSU1HLFxyXG4gICAgICAgIHN0YXJJbWc6IFNUQVJfSU1HXHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxldmVsT2JqZWN0KHhQb3MsIHlQb3MsIGluZGV4LCBpbWFnZXMpIHtcclxuICAgIGNvbnN0IGlzU3BlY2lhbCA9IGlzU3BlY2lhbExldmVsKGluZGV4KTtcclxuICAgIGNvbnN0IG9iaiA9IHtcclxuICAgICAgICB4OiB4UG9zLFxyXG4gICAgICAgIHk6IHlQb3MsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgaXNTcGVjaWFsLFxyXG4gICAgICAgIC4uLmltYWdlcyxcclxuICAgICAgICBiYWxsb29uSW1nOiBpc1NwZWNpYWwgPyBpbWFnZXM/LnNwZWNpYWxCbG9vbkltZyA6IGltYWdlcz8uYmFsbG9vbkltZ1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoeyAuLi5vYmogfSk7XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IEZpcmViYXNlVXNlckNsaWNrZWQgPSBcInVzZXJfY2xpY2tlZFwiO1xyXG5leHBvcnQgY29uc3QgRmlyZWJhc2VVc2VySW5zdGFsbCA9IFwidXNlcl9pbnN0YWxsZWRcIjtcclxuZXhwb3J0IGNvbnN0IFBXQUluc3RhbGxTdGF0dXMgPSBcInB3YV9pbnN0YWxsZWRfc3RhdHVzXCI7XHJcbmV4cG9ydCBjb25zdCBVc2VyQ2FuY2VsbGVkID0gXCJ1c2VyX2NhbmNlbF9pbnN0YWxsYXRpb25cIjtcclxuZXhwb3J0IGNvbnN0IE5hdGl2ZVBsYXlCdXR0b24gPSBcIm5hdGl2ZV9wbGF5YnV0dG9uX2NsaWNrZWRcIjtcclxuZXhwb3J0IGNvbnN0IFByZXZpb3VzUGxheWVkTGV2ZWwgPSBcInN0b3JlUHJldmlvdXNQbGF5ZWRMZXZlbFwiO1xyXG5leHBvcnQgY29uc3QgU3RvcmVNb25zdGVyUGhhc2VOdW1iZXIgPSBcInN0b3JlTW9uc3RlclBoYXNlTnVtYmVyXCI7XHJcbmV4cG9ydCBjb25zdCBJc0NhY2hlZCA9IFwiaXNfY2FjaGVkXCI7XHJcbmV4cG9ydCBjb25zdCBNb25zdGVyQXVkaW8gPSBcIm1vbnN0ZXJfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IEZlZWRiYWNrQXVkaW8gPSBcImZlZWRiYWNrX2F1ZGlvXCI7XHJcbmV4cG9ydCBjb25zdCBJbnRyb011c2ljID0gXCJpbnRyb19tdXNpY1wiO1xyXG5leHBvcnQgY29uc3QgUHJvbXB0QXVkaW8gPSBcInByb21wdF9hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgQnV0dG9uQ2xpY2sgPSBcImJ1dHRvbl9jbGlja1wiO1xyXG5leHBvcnQgY29uc3QgVGltZU92ZXIgPSBcInRpbWVfb3ZlclwiO1xyXG5leHBvcnQgY29uc3QgU3RvbmVNdXNpYyA9IFwic3RvbmVfbXVzaWNcIjtcclxuZXhwb3J0IGNvbnN0IFBocmFzZUF1ZGlvID0gXCJwaHJhc2VfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IExldmVsRW5kQXVkaW8gPSBcImxldmVsX2VuZF9hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgVXJsU3Vic3RyaW5nID0gXCIvZmVlZHRoZW1vbnN0ZXJcIjtcclxuZXhwb3J0IGNvbnN0IERldmVsb3BtZW50U2VydmVyID0gXCJodHRwczovL2ZlZWR0aGVtb25zdGVyZGV2LmN1cmlvdXNjb250ZW50Lm9yZ1wiO1xyXG5leHBvcnQgY29uc3QgU3RhcnRTY2VuZTEgPSBcIlN0YXJ0U2NlbmUxXCI7XHJcbmV4cG9ydCBjb25zdCBMZXZlbFNlbGVjdGlvbjEgPSBcIkxldmVsU2VsZWN0aW9uMVwiO1xyXG5leHBvcnQgY29uc3QgR2FtZVNjZW5lMSA9IFwiR2FtZVNjZW5lMVwiO1xyXG5leHBvcnQgY29uc3QgRW5kU2NlbmUxID0gXCJFbmRTY2VuZTFcIjtcclxuZXhwb3J0IGNvbnN0IEZPTlRfQkFTRV9QQVRIID0gJy4vYXNzZXRzL2ZvbnRzLyc7XHJcbi8vQXVkaW8gcGF0aHNcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfRUFUUyA9IFwiLi9hc3NldHMvYXVkaW9zL0VhdC5tcDNcIjtcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfTU9OU1RFUl9TUElUID0gXCIuL2Fzc2V0cy9hdWRpb3MvTW9uc3RlclNwaXQubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVEID0gXCIuL2Fzc2V0cy9hdWRpb3MvRGlzYXBvaW50ZWQtMDUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX1BPSU5UU19BREQgPSBcImFzc2V0cy9hdWRpb3MvUG9pbnRzQWRkLndhdlwiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9DT1JSRUNUX1NUT05FID0gXCJhc3NldHMvYXVkaW9zL0NvcnJlY3RTdG9uZUZpbmFsLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DID0gKHJhbmRvbU51bWJlcikgPT4gYC4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wJHtyYW5kb21OdW1iZXJ9Lm1wM2A7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX0JUTl9DTElDSyA9IFwiLi9hc3NldHMvYXVkaW9zL0J1dHRvbkNsaWNrLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9PTl9EUkFHID0gXCIuL2Fzc2V0cy9hdWRpb3Mvb25EcmFnLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fQVJFX1lPVV9TVVJFID0gXCIuL2Fzc2V0cy9hdWRpb3MvYXJlLXlvdS1zdXJlLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fVElNRU9VVCA9IFwiLi9hc3NldHMvYXVkaW9zL3RpbWVvdXQubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19JTlRSTyA9IFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fTEVWRUxfTE9TRSA9IFwiLi9hc3NldHMvYXVkaW9zL0xldmVsTG9zZUZhbmZhcmUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19MRVZFTF9XSU4gPSBcIi4vYXNzZXRzL2F1ZGlvcy9MZXZlbFdpbkZhbmZhcmUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19VUkxfUFJFTE9BRCA9IFtcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3MvQ2hlZXJpbmctMDIubXAzXCIsXHJcbiAgICBcIi4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wMy5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0NoZWVyaW5nLTAxLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3Mvb25EcmFnLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3MvdGltZW91dC5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0xldmVsV2luRmFuZmFyZS5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0xldmVsTG9zZUZhbmZhcmUubXAzXCIsXHJcbiAgICBcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL01vbnN0ZXIgU3BpdHMgd3Jvbmcgc3RvbmVzLTAxLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3MvRGlzYXBvaW50ZWQtMDUubXAzXCIsXHJcbiAgICBcIi4vYXNzZXRzL2F1ZGlvcy9Nb25zdGVyU3BpdC5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0VhdC5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL1BvaW50c0FkZC53YXZcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL2FyZS15b3Utc3VyZS5tcDNcIixcclxuXTtcclxuLy9JbWFnZSBwYXRoc1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfU1RPTkVfUElOS19CRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3N0b25lX3Bpbmsud2VicFwiOyAvL3N0b25lX3BpbmtfdjAyLnBuZ1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfVE9URU0gPSBcIi4vYXNzZXRzL2ltYWdlcy9Ub3RlbV92MDJfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0JHXzAxID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmdfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0hJTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy9oaWxsX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9GRU5DRSA9IFwiLi9hc3NldHMvaW1hZ2VzL2ZlbmNlX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUgPSBcIi4vYXNzZXRzL2ltYWdlcy9pZGxlNC5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQkFDS0dST1VORF8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmdfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9CQUNLR1JPVU5EXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fYmdfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9ISUxMXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5faGlsbF92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX1BJTExBUl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvQXV0dW1uX3NpZ25fdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9TSUdOXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fc2lnbl92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX0ZFTkNFXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fZmVuY2VfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9CQUNLR1JPVU5EXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfYmdfMDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgV0lOVEVSX0hJTExfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1dpbnRlcl9oaWxsX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfU0lHTl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX3NpZ25fdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9GRU5DRV8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX2ZlbmNlX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfUElMTEFSXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfc2lnbl92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgTEVWRUxfU0VMRUNUSU9OX0JBQ0tHUk9VTkQgPSBcIi4vYXNzZXRzL2ltYWdlcy9tYXAud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUFJPTVBUX1RFWFRfQkcgPSBcIi4vYXNzZXRzL2ltYWdlcy9wcm9tcHRUZXh0Qmcud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUFJPTVBUX1BMQVlfQlVUVE9OID0gXCIuL2Fzc2V0cy9pbWFnZXMvcHJvbXB0UGxheUJ1dHRvbi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBMRVZFTF9JTkRJQ0FUT1IgPSBcIi4vYXNzZXRzL2ltYWdlcy9sZXZlbHNfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEJBUl9FTVBUWSA9IFwiLi9hc3NldHMvaW1hZ2VzL2Jhcl9lbXB0eV92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQkFSX0ZVTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy9iYXJfZnVsbF92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgVElNRVJfRU1QVFkgPSBcIi4vYXNzZXRzL2ltYWdlcy90aW1lcl9lbXB0eS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBST1RBVElOR19DTE9DSyA9IFwiLi9hc3NldHMvaW1hZ2VzL3RpbWVyLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFRJTUVSX0ZVTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy90aW1lcl9mdWxsLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgVFVUT1JJQUxfSEFORCA9IFwiLi9hc3NldHMvaW1hZ2VzL3R1dG9yaWFsX2hhbmQud2VicFwiO1xyXG5leHBvcnQgY29uc3QgV0lOX0JHID0gXCIuL2Fzc2V0cy9pbWFnZXMvV0lOX3NjcmVlbl9iZy53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBQSU5fU1RBUl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvcGluU3RhcjEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUElOX1NUQVJfMiA9IFwiLi9hc3NldHMvaW1hZ2VzL3BpblN0YXIyLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFBJTl9TVEFSXzMgPSBcIi4vYXNzZXRzL2ltYWdlcy9waW5TdGFyMy53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBDTE9VRF82ID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBDTE9VRF83ID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDIucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBDTE9VRF84ID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDMucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBQTEFZX0JUTl9JTUcgPSBcIi4vYXNzZXRzL2ltYWdlcy9QbGF5X2J1dHRvbi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBQQVVTRV9CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvcGF1c2VfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IE1BUF9CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwX2J0bi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBNQVBfSUNPTl9JTUcgPSBcIi4vYXNzZXRzL2ltYWdlcy9tYXBJY29uLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IE1BUF9JQ09OX1NQRUNJQUxfSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwX2ljb25fbW9uc3Rlcl9sZXZlbF92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgTUFQX0xPQ0tfSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwTG9jay53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBTVEFSX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3N0YXIud2VicFwiO1xyXG5leHBvcnQgY29uc3QgTkVYVF9CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbmV4dF9idG4ud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQkFDS19CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmFja19idG4ud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUkVUUllfQlROX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3JldHJ5X2J0bi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBDQU5DRUxfQlROX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL2Nsb3NlX2J0bi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBZRVNfQlROX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL2NvbmZpcm1fYnRuLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFBPUFVQX0JHX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3BvcHVwX2JnX3YwMS53ZWJwXCI7XHJcbi8vQmFja2dyb3VuZCBHcm91cCBJbWFnZXNcclxuZXhwb3J0IGNvbnN0IEdBTUVQTEFZX0JHX0dST1VQX0lNR1MgPSB7XHJcbiAgICBBU1NFVFNfUEFUSF9UT1RFTSxcclxuICAgIERFRkFVTFRfQkFDS0dST1VORF8xLFxyXG4gICAgQVNTRVRTX1BBVEhfSElMTCxcclxuICAgIEFTU0VUU19QQVRIX0ZFTkNFLFxyXG4gICAgQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFLFxyXG59O1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICBBU1NFVFNfUEFUSF9ISUxMLFxyXG4gICAgQVNTRVRTX1BBVEhfVE9URU0sXHJcbiAgICBBU1NFVFNfUEFUSF9GRU5DRSxcclxufTtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgQVVUVU1OX0JBQ0tHUk9VTkRfMSxcclxuICAgIEFVVFVNTl9ISUxMXzEsXHJcbiAgICBBVVRVTU5fUElMTEFSXzEsXHJcbiAgICBBVVRVTU5fU0lHTl8xLFxyXG4gICAgQVVUVU1OX0ZFTkNFXzEsXHJcbn07XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfQkdfR1JPVVBfSU1HUyA9IHtcclxuICAgIFdJTlRFUl9CQUNLR1JPVU5EXzEsXHJcbiAgICBXSU5URVJfSElMTF8xLFxyXG4gICAgV0lOVEVSX1NJR05fMSxcclxuICAgIFdJTlRFUl9GRU5DRV8xLFxyXG4gICAgV0lOVEVSX1BJTExBUl8xLFxyXG59O1xyXG4vL1NjZW5lIE5hbWVzXHJcbmV4cG9ydCBjb25zdCBTQ0VORV9OQU1FX1NUQVJUID0gXCJTdGFydFNjZW5lXCI7XHJcbmV4cG9ydCBjb25zdCBTQ0VORV9OQU1FX0xFVkVMX1NFTEVDVCA9IFwiTGV2ZWxTZWxlY3Rpb25cIjtcclxuZXhwb3J0IGNvbnN0IFNDRU5FX05BTUVfR0FNRV9QTEFZID0gXCJHYW1lUGxheVwiO1xyXG5leHBvcnQgY29uc3QgU0NFTkVfTkFNRV9MRVZFTF9FTkQgPSBcIkxldmVsRW5kXCI7XHJcbi8vTGV2ZWxzXHJcbmV4cG9ydCBjb25zdCBTUEVDSUFMX0xFVkVMUyA9IFs1LCAxMywgMjAsIDMwLCA0Ml07XHJcbiIsImltcG9ydCB7IGxhbmcgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5leHBvcnQgY29uc3QgVVJMID0gXCIuL2xhbmcvXCIgKyBsYW5nICsgXCIvZnRtX1wiICsgbGFuZyArIFwiLmpzb25cIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ0bURhdGEoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goVVJMLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9KSk7XHJcbn1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERhdGEoKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgZ2V0RnRtRGF0YSgpO1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBjdXN0b21Gb250cyA9IHtcclxuICAgIGRlZmF1bHQ6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgZW5nbGlzaDogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBzd2FoaWxpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHdvbG9mOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHRhamlrOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIG1hcmF0aGk6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgYW1oYXJpYzogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBwdW5qYWJpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHRhbWlsOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHNlcGVkaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBndWphcmF0aTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICB0ZWx1Z3U6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgdHNvbmdhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIG1hbGF5OiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIG5kZWJlbGU6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgdmVuZGE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgc2lzd2F0aTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICB0c3dhbmE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgdGhhaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBmdWxhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIGZhcnNpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIGJ1cm1lc2U6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgYmVuZ2FsaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBBemVyYmFpamFuaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBTZXNvdGhvOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEdlb3JnaWFuOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEJyYXppbGlhblBvcnR1Z3Vlc2U6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgU29tYWxpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEhhdXNhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIElnYm86IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgSGF0aWFuQ3Jlb2xlOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIE9yb21vOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEx1Z2FuZGE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgWW9ydWJhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEtobWVyOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEphdmFuZXNlOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIFVyZHU6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgS2lueWFyd2FuZGE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgU2hvbmE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgS3VyZGlzaDogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBGcmVuY2g6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgaXNpWGhvc2E6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgQWZyaWthYW5zOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIE5lcGFsaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBVa3JhaW5pYW46IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgSGluZGk6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgVGFnYWxvZzogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBWaWV0bmFtZXNlOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIFBhc2h0bzogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBUd2k6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgQXJhYmljOiBcIkF0bWEtU2VtaUJvbGRcIixcclxufTtcclxuIiwiZXhwb3J0IGNsYXNzIERhdGFNb2RhbCB7XHJcbiAgICB0aXRsZTtcclxuICAgIG90aGVyQXVkaW9zO1xyXG4gICAgbGV2ZWxzO1xyXG4gICAgRmVlZGJhY2tUZXh0cztcclxuICAgIEZlZWRiYWNrQXVkaW9zO1xyXG4gICAgcmlnaHRUb0xlZnQ7XHJcbiAgICBtYWpWZXJzaW9uO1xyXG4gICAgbWluVmVyc2lvbjtcclxuICAgIHZlcnNpb247XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgb3RoZXJBdWRpb3MsIGxldmVscywgZmVlZGJhY2tUZXh0cywgcmlnaHRUb0xlZnQsIGZlZWRiYWNrQXVkaW9zLCBtYWpWZXJzaW9uLCBtaW5WZXJzaW9uLCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMub3RoZXJBdWRpb3MgPSBuZXcgT3RoZXJBdWRpb3Mob3RoZXJBdWRpb3MpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzID0gdGhpcy5nZXRMZXZlbHMobGV2ZWxzKTtcclxuICAgICAgICB0aGlzLkZlZWRiYWNrVGV4dHMgPSBuZXcgRmVlZGJhY2tUZXh0cyhmZWVkYmFja1RleHRzKTtcclxuICAgICAgICB0aGlzLkZlZWRiYWNrQXVkaW9zID0gbmV3IEZlZWRiYWNrQXVkaW9zKGZlZWRiYWNrQXVkaW9zKTtcclxuICAgICAgICB0aGlzLnJpZ2h0VG9MZWZ0ID0gcmlnaHRUb0xlZnQ7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gbWFqVmVyc2lvbjtcclxuICAgICAgICB0aGlzLm1pblZlcnNpb24gPSBtaW5WZXJzaW9uO1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcbiAgICB9XHJcbiAgICBnZXRMZXZlbHMobGV2ZWxzKSB7XHJcbiAgICAgICAgbGV0IGxldmVsQXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXZlbEFycmF5LnB1c2gobmV3IExldmVscyhsZXZlbHNbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxldmVsQXJyYXk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIE90aGVyQXVkaW9zIHtcclxuICAgIHNlbGN0WW91clBsYXllcjtcclxuICAgIHdhdGNoTWVHcm93O1xyXG4gICAgYXJlWW91U3VyZTtcclxuICAgIGNvbnN0cnVjdG9yKG90aGVyQXVkaW9zKSB7XHJcbiAgICAgICAgdGhpcy5zZWxjdFlvdXJQbGF5ZXIgPSBvdGhlckF1ZGlvc1tcIlNlbGVjdCB5b3VyIHBsYXllclwiXTtcclxuICAgICAgICB0aGlzLndhdGNoTWVHcm93ID0gb3RoZXJBdWRpb3NbXCJXYXRjaCBtZSBncm93XCJdO1xyXG4gICAgICAgIHRoaXMuYXJlWW91U3VyZSA9IG90aGVyQXVkaW9zW1wiQXJlIHlvdSBzdXJlXCJdO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGZWVkYmFja1RleHRzIHtcclxuICAgIGZhbnRhc3RpYztcclxuICAgIGdyZWF0O1xyXG4gICAgYW1hemluZztcclxuICAgIGNvbnN0cnVjdG9yKGZlZWRiYWNrVGV4dHMpIHtcclxuICAgICAgICBpZiAoZmVlZGJhY2tUZXh0cy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmZhbnRhc3RpYyA9IGZlZWRiYWNrVGV4dHNbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmZWVkYmFja1RleHRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JlYXQgPSBmZWVkYmFja1RleHRzWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmVlZGJhY2tUZXh0cy5sZW5ndGggPj0gMykge1xyXG4gICAgICAgICAgICB0aGlzLmFtYXppbmcgPSBmZWVkYmFja1RleHRzWzJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgRmVlZGJhY2tBdWRpb3Mge1xyXG4gICAgZmFudGFzdGljO1xyXG4gICAgZ3JlYXQ7XHJcbiAgICBhbWF6aW5nO1xyXG4gICAgY29uc3RydWN0b3IoZmVlZGJhY2tBdWRpb3MpIHtcclxuICAgICAgICBpZiAoZmVlZGJhY2tBdWRpb3MubGVuZ3RoID49IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5mYW50YXN0aWMgPSBmZWVkYmFja0F1ZGlvc1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZlZWRiYWNrQXVkaW9zLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JlYXQgPSBmZWVkYmFja0F1ZGlvc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZlZWRiYWNrQXVkaW9zLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW1hemluZyA9IGZlZWRiYWNrQXVkaW9zWzJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTGV2ZWxzIHtcclxuICAgIHB1enpsZXM7XHJcbiAgICBsZXZlbE1ldGE7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKGxldmVscykge1xyXG4gICAgICAgIHRoaXMucHV6emxlcyA9IHRoaXMuZ2V0UHV6emxlRGF0YShsZXZlbHMpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxNZXRhID0gbmV3IExldmVsTWV0YShsZXZlbHMuTGV2ZWxNZXRhKTtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxzLkxldmVsTnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZ2V0UHV6emxlRGF0YShsZXZlbHMpIHtcclxuICAgICAgICBsZXQgcHV6emxlT2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIGxldmVscy5QdXp6bGVzLm1hcCgocHV6emxlRGF0YSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcHV6emxlT2JqZWN0cy5wdXNoKG5ldyBQdXp6bGVzKHB1enpsZURhdGEpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHV6emxlT2JqZWN0cztcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgUHV6emxlcyB7XHJcbiAgICBzZWdtZW50TnVtYmVyO1xyXG4gICAgcHJvbXB0O1xyXG4gICAgZm9pbFN0b25lcztcclxuICAgIHRhcmdldFN0b25lcztcclxuICAgIGNvbnN0cnVjdG9yKHB1enpsZSkge1xyXG4gICAgICAgIHRoaXMuc2VnbWVudE51bWJlciA9IHB1enpsZS5TZWdtZW50TnVtYmVyO1xyXG4gICAgICAgIHRoaXMucHJvbXB0ID0gbmV3IFByb21wdChwdXp6bGUucHJvbXB0KTtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSB0aGlzLmdldEZvaWxTdG9uZXMocHV6emxlKTtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IHRoaXMuZ2V0VGFyZ2V0U3RvbmVzKHB1enpsZSk7XHJcbiAgICB9XHJcbiAgICBnZXRGb2lsU3RvbmVzKHB1enpsZSkge1xyXG4gICAgICAgIGxldCBmb2lsU3RvbmVBcnJheSA9IFtdO1xyXG4gICAgICAgIHB1enpsZS5mb2lsc3RvbmVzLm1hcCgoc3RvbmVzLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBmb2lsU3RvbmVBcnJheS5wdXNoKHN0b25lcy5TdG9uZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmb2lsU3RvbmVBcnJheTtcclxuICAgIH1cclxuICAgIGdldFRhcmdldFN0b25lcyhwdXp6bGUpIHtcclxuICAgICAgICBsZXQgdGFyZ2V0U3RvbmVBcnJheSA9IFtdO1xyXG4gICAgICAgIHB1enpsZS50YXJnZXRzdG9uZXMubWFwKChzdG9uZXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHRhcmdldFN0b25lQXJyYXkucHVzaChzdG9uZXMuU3RvbmVUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0U3RvbmVBcnJheTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgRm9pbFN0b25lIHtcclxuICAgIHN0b25lVGV4dDtcclxuICAgIGNvbnN0cnVjdG9yKHN0b25lVGV4dCkge1xyXG4gICAgICAgIHRoaXMuc3RvbmVUZXh0ID0gc3RvbmVUZXh0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBUYXJnZXRTdG9uZSB7XHJcbiAgICBzdG9uZVRleHQ7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnN0b25lVGV4dDtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgUHJvbXB0IHtcclxuICAgIHByb21wdFRleHQ7XHJcbiAgICBwcm9tcHRBdWRpbztcclxuICAgIGNvbnN0cnVjdG9yKHByb21wdCkge1xyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dCA9IHByb21wdC5Qcm9tcHRUZXh0O1xyXG4gICAgICAgIHRoaXMucHJvbXB0QXVkaW8gPSBwcm9tcHQuUHJvbXB0QXVkaW87XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIExldmVsTWV0YSB7XHJcbiAgICBwcm9tcHRGYWRlT3V0O1xyXG4gICAgbGV0dGVyR3JvdXA7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIHByb3RvVHlwZTtcclxuICAgIGxldmVsVHlwZTtcclxuICAgIGNvbnN0cnVjdG9yKGxldmVsTWV0YSkge1xyXG4gICAgICAgIHRoaXMucHJvbXB0RmFkZU91dCA9IGxldmVsTWV0YS5Qcm9tcHRGYWRlb3V0O1xyXG4gICAgICAgIHRoaXMubGV0dGVyR3JvdXAgPSBsZXZlbE1ldGEuTGV0dGVyR3JvdXA7XHJcbiAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTWV0YS5MZXZlbE51bWJlcjtcclxuICAgICAgICB0aGlzLnByb3RvVHlwZSA9IGxldmVsTWV0YS5Qcm9tcHRUeXBlO1xyXG4gICAgICAgIHRoaXMubGV2ZWxUeXBlID0gbGV2ZWxNZXRhLkxldmVsVHlwZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEZWJ1Z2dlciwgbGFuZyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBHYW1lU2NvcmUge1xyXG4gICAgc3RhdGljIGN1cnJlbnRsYW5ndWFnZSA9IGxhbmc7XHJcbiAgICBzdGF0aWMgc2V0R2FtZUxldmVsU2NvcmUoY3VycmVudExldmVsSW5mbywgc2NvcmUpIHtcclxuICAgICAgICBsZXQgc3RhcnNHYWluZWQgPSB0aGlzLmNhbGN1bGF0ZVN0YXJDb3VudChzY29yZSk7XHJcbiAgICAgICAgbGV0IGxldmVsUGxheWVkSW5mbyA9IHtcclxuICAgICAgICAgICAgbGV2ZWxOYW1lOiBjdXJyZW50TGV2ZWxJbmZvLmxldmVsTWV0YS5sZXZlbFR5cGUsXHJcbiAgICAgICAgICAgIGxldmVsTnVtYmVyOiBjdXJyZW50TGV2ZWxJbmZvLmxldmVsTWV0YS5sZXZlbE51bWJlcixcclxuICAgICAgICAgICAgc2NvcmU6IHNjb3JlLFxyXG4gICAgICAgICAgICBzdGFyQ291bnQ6IHN0YXJzR2FpbmVkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zZXRUb3RhbFN0YXJDb3VudChzdGFyc0dhaW5lZCk7XHJcbiAgICAgICAgbGV0IGFsbEdhbWVsZXZlbEluZm8gPSB0aGlzLmdldEFsbEdhbWVMZXZlbEluZm8oKTtcclxuICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEdhbWVsZXZlbEluZm8ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFsbEdhbWVsZXZlbEluZm9baV0ubGV2ZWxOdW1iZXIgPT09IGxldmVsUGxheWVkSW5mby5sZXZlbE51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSAmJiBsZXZlbFBsYXllZEluZm8uc2NvcmUgPiBhbGxHYW1lbGV2ZWxJbmZvW2luZGV4XS5zY29yZSkge1xyXG4gICAgICAgICAgICBhbGxHYW1lbGV2ZWxJbmZvW2luZGV4XSA9IGxldmVsUGxheWVkSW5mbztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFsbEdhbWVsZXZlbEluZm8ucHVzaChsZXZlbFBsYXllZEluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmN1cnJlbnRsYW5ndWFnZSArIFwiZ2FtZVBsYXllZEluZm9cIiwgSlNPTi5zdHJpbmdpZnkoYWxsR2FtZWxldmVsSW5mbykpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEFsbEdhbWVMZXZlbEluZm8oKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuY3VycmVudGxhbmd1YWdlICsgXCJnYW1lUGxheWVkSW5mb1wiKTtcclxuICAgICAgICByZXR1cm4gZGF0YSA9PSB1bmRlZmluZWQgPyBbXSA6IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc2V0VG90YWxTdGFyQ291bnQoc3RhcnNHYWluZWQpIHtcclxuICAgICAgICBsZXQgc3RhckNvdW50ID0gdGhpcy5nZXRUb3RhbFN0YXJDb3VudCgpO1xyXG4gICAgICAgIGxldCB0b3RhbFN0YXJDb3VudCA9IHN0YXJDb3VudCArIHN0YXJzR2FpbmVkO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuY3VycmVudGxhbmd1YWdlICsgXCJ0b3RhbFN0YXJDb3VudFwiLCB0b3RhbFN0YXJDb3VudCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0VG90YWxTdGFyQ291bnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhckNvdW50ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5jdXJyZW50bGFuZ3VhZ2UgKyBcInRvdGFsU3RhckNvdW50XCIpO1xyXG4gICAgICAgIHJldHVybiBzdGFyQ291bnQgPT0gdW5kZWZpbmVkID8gMCA6IHBhcnNlSW50KHN0YXJDb3VudCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY2FsY3VsYXRlU3RhckNvdW50KHNjb3JlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNjb3JlID09IDIwMFxyXG4gICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgOiBzY29yZSA9PSAzMDBcclxuICAgICAgICAgICAgICAgID8gMlxyXG4gICAgICAgICAgICAgICAgOiBzY29yZSA9PSA0MDBcclxuICAgICAgICAgICAgICAgICAgICA/IDJcclxuICAgICAgICAgICAgICAgICAgICA6IHNjb3JlID09IDUwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldERhdGFmcm9tU3RvcmFnZSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsYW5nICsgXCJQcm9maWxlRGVidWdcIikgfHwgXCJ7fVwiKVxyXG4gICAgICAgICAgICA6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0obGFuZyArIFwiUHJvZmlsZVwiKSB8fCBcInt9XCIpO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBsYW5ndWFnZUZvbnRNYXBwaW5nID0ge1xyXG4gICAgZW5nbGlzaDogXCJDb25zb2xhc1wiLFxyXG4gICAgc3dhaGlsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgd29sb2Y6IFwiQ29uc29sYXNcIixcclxuICAgIHRhamlrOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBtYXJhdGhpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBhbWhhcmljOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBwdW5qYWJpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0YW1pbDogXCJDb25zb2xhc1wiLFxyXG4gICAgc2VwZWRpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBndWphcmF0aTogXCJDb25zb2xhc1wiLFxyXG4gICAgdGVsdWd1OiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0c29uZ2E6IFwiQ29uc29sYXNcIixcclxuICAgIG1hbGF5OiBcIkNvbnNvbGFzXCIsXHJcbiAgICBuZGViZWxlOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB2ZW5kYTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBzaXN3YXRpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0c3dhbmE6IFwiQ29uc29sYXNcIixcclxuICAgIHRoYWk6IFwiQ29uc29sYXNcIixcclxuICAgIGZ1bGE6IFwiQ29uc29sYXNcIixcclxuICAgIGZhcnNpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBidXJtZXNlOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBiZW5nYWxpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBBemVyYmFpamFuaTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBTZXNvdGhvOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBHZW9yZ2lhbjogXCJDb25zb2xhc1wiLFxyXG4gICAgQnJhemlsaWFuUG9ydHVndWVzZTogXCJDb25zb2xhc1wiLFxyXG4gICAgU29tYWxpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBIYXVzYTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBJZ2JvOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBIYXRpYW5DcmVvbGU6IFwiQ29uc29sYXNcIixcclxuICAgIE9yb21vOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBMdWdhbmRhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBZb3J1YmE6IFwiQ29uc29sYXNcIixcclxuICAgIEtobWVyOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBKYXZhbmVzZTogXCJDb25zb2xhc1wiLFxyXG4gICAgVXJkdTogXCJDb25zb2xhc1wiLFxyXG4gICAgS2lueWFyd2FuZGE6IFwiQ29uc29sYXNcIixcclxuICAgIFNob25hOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBLdXJkaXNoOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBGcmVuY2g6IFwiQ29uc29sYXNcIixcclxuICAgIGlzaVhob3NhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBBZnJpa2FhbnM6IFwiQ29uc29sYXNcIixcclxuICAgIE5lcGFsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgVWtyYWluaWFuOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBIaW5kaTogXCJDb25zb2xhc1wiLFxyXG4gICAgVGFnYWxvZzogXCJDb25zb2xhc1wiLFxyXG4gICAgVmlldG5hbWVzZTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBQYXNodG86IFwiQ29uc29sYXNcIixcclxuICAgIFR3aTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBBcmFiaWM6IFwiQWRvYmUtQXJhYmljLUJvbGRcIlxyXG59O1xyXG4iLCJpbXBvcnQgeyBMT0FEUFVaWkxFLCBTVE9ORURST1AgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI7XHJcbiAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyO1xyXG4gICAgY29uc3RydWN0b3IoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgdGhpcy5zdG9uZURyb3BDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLnN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihTVE9ORURST1AsIHRoaXMuaGFuZGxlU3RvbmVEcm9wcGVkRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKExPQURQVVpaTEUsIHRoaXMuaGFuZGxlTG9hZFB1enpsZUV2ZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3BwZWRFdmVudCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyKGV2ZW50KTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlRXZlbnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIoZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIHVucmVnaXN0ZXJFdmVudExpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoU1RPTkVEUk9QLCB0aGlzLmhhbmRsZVN0b25lRHJvcHBlZEV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihMT0FEUFVaWkxFLCB0aGlzLmhhbmRsZUxvYWRQdXp6bGVFdmVudCwgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JkUHV6emxlTG9naWMge1xyXG4gICAgLyoqXHJcbiAgICAgICAgcHV6emxlTnVtYmVyIC0gUHV6emxlIHN0YWdlIGxldmVsIG9mIGN1cnJlbnQgKFVwIHRvIDUgc3RhZ2UgbGV2ZWxzKSBnYW1lIGxldmVsLlxyXG4gICAgICAgIGdyb3VwZWRMZXR0ZXJzIC0gU3RyaW5nIHNlcXVlbmNlIG9mIGxldHRlcnMgd2hlbiBwZXJmb3JtaW5nIHRoZSBtdWx0aS1sZXR0ZXIgc2VsZWNpdG9uLlxyXG4gICAgICAgIGRyb3BwZWRMZXR0ZXJzIC0gU3RyaW5nIHNlcXVlbmNlIG9mIGxldHRlcnMgd2hlbiBncm91cCBvZiBsZXR0ZXJzIHdhcyBmZWQgdG8gdGhlIG1vbnN0ZXIuXHJcbiAgICAgICAgZ3JvdXBlZE9iaiAtIE9iamVjdCB3aXRoIGtleSBwcm9wZXJ0aWVzIG9mIHN0b25lIGxldHRlciBpbmRleCwgdXNlZCBmb3IgdmFsaWRhdGluZyBkdXBsaWNhdGUgbGV0dGVycyB3aGlsZSBob3ZlcmluZy5cclxuICAgICAgICBkcm9wcGVkSGlzdG9yeSAtIE9iamVjdCB3aXRoIGtleSBwcm9wZXJ0aWVzIG9mIHN0b25lIGxldHRlciBpbmRleCB0aGF0IHdhcyBmZWQgdG8gdGhlIG1vbnN0ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVzZWQgdG8gcHJlc2VydmUgdGhlIGxpc3QgZm9yIGhpZGluZyB0aGUgc3RvbmUgbGV0dGVycy5cclxuICAgICAgICBoaWRlTGlzdE9iaiAtIE9iamVjdCB3aXRoIGtleSBwcm9wZXJ0aWVzIG9mIHN0b25lIGxldHRlciBpbmRleC5cclxuICAgICAgICAgICAgICAgICAgICBVc2VkIHRvIGhpZGUgc3RvbmVzIHRoYXQgaXMgcGFydCBvZiB0aGUgZ3JvdXAgb3Igc3RvbmVzIHRoYXQgd2FzIGFscmVhZHkgZmVkIHRvIHRoZSBtb25zdGVyLlxyXG4gICAgKiovXHJcbiAgICBsZXZlbERhdGE7XHJcbiAgICBwdXp6bGVOdW1iZXI7XHJcbiAgICBncm91cGVkTGV0dGVycztcclxuICAgIGRyb3BwZWRMZXR0ZXJzO1xyXG4gICAgZ3JvdXBlZE9iajtcclxuICAgIGRyb3BwZWRIaXN0b3J5O1xyXG4gICAgaGlkZUxpc3RPYmo7XHJcbiAgICBjb25zdHJ1Y3RvcihsZXZlbERhdGEsIHB1enpsZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuZ3JvdXBlZExldHRlcnMgPSAnJztcclxuICAgICAgICB0aGlzLmRyb3BwZWRMZXR0ZXJzID0gJyc7XHJcbiAgICAgICAgdGhpcy5ncm91cGVkT2JqID0ge307XHJcbiAgICAgICAgdGhpcy5kcm9wcGVkSGlzdG9yeSA9IHt9O1xyXG4gICAgICAgIHRoaXMuaGlkZUxpc3RPYmogPSB7fTtcclxuICAgIH1cclxuICAgIGdldFRhcmdldFdvcmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxEYXRhLnB1enpsZXNbdGhpcy5wdXp6bGVOdW1iZXJdPy5wcm9tcHQ/LnByb21wdFRleHQ7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ3JvdXBlZExldHRlcnM6IHRoaXMuZ3JvdXBlZExldHRlcnMsXHJcbiAgICAgICAgICAgIGRyb3BwZWRMZXR0ZXJzOiB0aGlzLmRyb3BwZWRMZXR0ZXJzLFxyXG4gICAgICAgICAgICBncm91cGVkT2JqOiB7IC4uLnRoaXMuZ3JvdXBlZE9iaiB9LFxyXG4gICAgICAgICAgICBkcm9wcGVkSGlzdG9yeTogeyAuLi50aGlzLmRyb3BwZWRIaXN0b3J5IH0sXHJcbiAgICAgICAgICAgIGhpZGVMaXN0T2JqOiB7IC4uLnRoaXMuaGlkZUxpc3RPYmogfSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc1dvcmRQdXp6bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxEYXRhPy5sZXZlbE1ldGE/LmxldmVsVHlwZSA9PT0gJ1dvcmQnO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlUHV6emxlTGV2ZWwocHV6emxlTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckFsbFZhbHVlcygpO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtYmVyO1xyXG4gICAgfVxyXG4gICAgY2xlYXJQaWNrZWRVcCgpIHtcclxuICAgICAgICB0aGlzLmdyb3VwZWRMZXR0ZXJzID0gJyc7XHJcbiAgICAgICAgdGhpcy5ncm91cGVkT2JqID0ge307XHJcbiAgICAgICAgdGhpcy5oaWRlTGlzdE9iaiA9IHsgLi4udGhpcy5kcm9wcGVkSGlzdG9yeSB9O1xyXG4gICAgfVxyXG4gICAgY2xlYXJBbGxWYWx1ZXMoKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cGVkTGV0dGVycyA9ICcnO1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZExldHRlcnMgPSAnJztcclxuICAgICAgICB0aGlzLmdyb3VwZWRPYmogPSB7fTtcclxuICAgICAgICB0aGlzLmRyb3BwZWRIaXN0b3J5ID0ge307XHJcbiAgICAgICAgdGhpcy5oaWRlTGlzdE9iaiA9IHt9O1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gMDtcclxuICAgIH1cclxuICAgIHZhbGlkYXRlU2hvdWxkSGlkZUxldHRlcihmb2lsU3RvbmVJbmRleCkge1xyXG4gICAgICAgIC8vSWYgc3RvbmUga2V5IGluZGV4IGlzIGxpc3RlZCBpbiBoaWRlTGlzdE9iaiBpdCBzaG91bGQgbm90IGJlIGRyYXduLlxyXG4gICAgICAgIHJldHVybiAhdGhpcy5oaWRlTGlzdE9ialtmb2lsU3RvbmVJbmRleF07XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDaGVja0hvdmVyZWRTdG9uZShmb2lsU3RvbmVUZXh0LCBmb2lsU3RvbmVJbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGNvbWJpbmVkTGV0dGVycyA9IHRoaXMuZ3JvdXBlZExldHRlcnM7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0V29yZCA9IHRoaXMuZ2V0VGFyZ2V0V29yZCgpO1xyXG4gICAgICAgIC8qIEdvZXMgaW5zaWRlIGhlcmUgaWYgdGhlcmUgYXJlIG5vIHByZXZpb3VzIGxldHRlcihzKSB3ZXJlIGRyb3BwZWRcclxuICAgICAgICBhbmQgZ3JvdXBpbmcgb2YgbGV0dGVycyBzdGFydHMgaW4gYSBpbmNvcnJlY3QgbGV0dGVyLiAqL1xyXG4gICAgICAgIGlmICgoIXRoaXMuZHJvcHBlZExldHRlcnMubGVuZ3RoICYmIHRhcmdldFdvcmRbMF0gIT09IGNvbWJpbmVkTGV0dGVyc1swXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlzTGV0dGVyQWxyZWFkeUFkZGVkIC0gSWYgdGhlIG5ldyBzdG9uZSB0ZXh0IGlzIE5PVCBhbHJlYWR5IGluY2x1ZGVkXHJcbiAgICAgICAgaXNTYW1lTGV0dGVyVW5pcXVlIC1JZiB0aGVyZSBpcyBhbHJlYWR5IG9mIHRoZSBzYW1lIGxldHRlciBleGlzdCBpbiBncm91cCwgdmFsaWRhdGUgdXNpbmcgdW5pcWUgaWRlbnRpZmllciB3aGljaCBpcyB0aGUgYXJyYXkgaW5kZXgga2V5IGluIGdyb3VwIG9iamVjdC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGlzTGV0dGVyQWxyZWFkeUFkZGVkID0gIWNvbWJpbmVkTGV0dGVycy5pbmNsdWRlcyhmb2lsU3RvbmVUZXh0KTtcclxuICAgICAgICBjb25zdCBpc1NhbWVMZXR0ZXJVbmlxdWUgPSAhdGhpcy5ncm91cGVkT2JqW2ZvaWxTdG9uZUluZGV4XTtcclxuICAgICAgICBjb25zdCBpc01hdGNoVGFyZ2V0V29yZCA9IHRhcmdldFdvcmQuaW5jbHVkZXMoYCR7dGhpcy5kcm9wcGVkTGV0dGVyc30ke2NvbWJpbmVkTGV0dGVyc30ke2ZvaWxTdG9uZVRleHR9YCk7XHJcbiAgICAgICAgcmV0dXJuIGlzTWF0Y2hUYXJnZXRXb3JkICYmIChpc0xldHRlckFscmVhZHlBZGRlZCB8fCBpc1NhbWVMZXR0ZXJVbmlxdWUpO1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVGZWRMZXR0ZXJzKCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldFdvcmQgPSB0aGlzLmdldFRhcmdldFdvcmQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kcm9wcGVkTGV0dGVycyA9PT0gdGFyZ2V0V29yZC5zdWJzdHJpbmcoMCwgdGhpcy5kcm9wcGVkTGV0dGVycy5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVXb3JkUHV6emxlKCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldFdvcmQgPSB0aGlzLmdldFRhcmdldFdvcmQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kcm9wcGVkTGV0dGVycyA9PT0gdGFyZ2V0V29yZDtcclxuICAgIH1cclxuICAgIHNldEdyb3VwVG9Ecm9wcGVkKCkge1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZExldHRlcnMgPSBgJHt0aGlzLmRyb3BwZWRMZXR0ZXJzfSR7dGhpcy5ncm91cGVkTGV0dGVyc31gO1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZEhpc3RvcnkgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuZHJvcHBlZEhpc3RvcnksXHJcbiAgICAgICAgICAgIC4uLnRoaXMuZ3JvdXBlZE9ialxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBzZXRQaWNrVXBMZXR0ZXIobGV0dGVyLCBhcnJGb2lsU3RvbmVJbmRleCkge1xyXG4gICAgICAgIHRoaXMuaGlkZUxpc3RPYmogPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuaGlkZUxpc3RPYmosXHJcbiAgICAgICAgICAgIC4uLnRoaXMuZ3JvdXBlZE9ialxyXG4gICAgICAgIH07IC8vSGlkZSB0aGUgcHJldmlvdXMgbGV0dGVycyBleGNlcHQgdGhlIG5ldyBvbmUuXHJcbiAgICAgICAgdGhpcy5ncm91cGVkTGV0dGVycyA9IGAke3RoaXMuZ3JvdXBlZExldHRlcnN9JHtsZXR0ZXJ9YDtcclxuICAgICAgICB0aGlzLmdyb3VwZWRPYmpbYXJyRm9pbFN0b25lSW5kZXhdID0gbGV0dGVyO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXJ0U2NlbmUsIExldmVsU2VsZWN0aW9uU2NyZWVuLCBHYW1lcGxheVNjZW5lLCBMb2FkaW5nU2NlbmUsIExldmVsRW5kU2NlbmUsIH0gZnJvbSBcIkBzY2VuZXNcIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIkBkYXRhXCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgU0NFTkVfTkFNRV9TVEFSVCwgU0NFTkVfTkFNRV9MRVZFTF9TRUxFQ1QsIFNDRU5FX05BTUVfR0FNRV9QTEFZLCBTQ0VORV9OQU1FX0xFVkVMX0VORCwgUFdBSW5zdGFsbFN0YXR1cywgU3RhcnRTY2VuZTEsIExldmVsU2VsZWN0aW9uMSwgR2FtZVNjZW5lMSwgRW5kU2NlbmUxLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBTY2VuZUhhbmRsZXIge1xyXG4gICAgY2FudmFzO1xyXG4gICAgZGF0YTtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgc3RhcnRTY2VuZTtcclxuICAgIGxldmVsU2VsZWN0aW9uU2NlbmU7XHJcbiAgICBnYW1lcGxheVNjZW5lO1xyXG4gICAgbGV2ZWxFbmRTY2VuZTtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgc3RhdGljIFNjZW5lTmFtZTtcclxuICAgIGxvYWRpbmdTY3JlZW47XHJcbiAgICBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICBsYXN0VGltZSA9IDA7XHJcbiAgICB0b2dnbGVCdG47XHJcbiAgICB0aXRsZVRleHRFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbmF2c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlLWJ0blwiKTtcclxuICAgICAgICB0aGlzLnRpdGxlVGV4dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCB0aGlzLmhhbmRsZUluc3RhbGxQcm9tcHQpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5zdGFydFNjZW5lID0gbmV3IFN0YXJ0U2NlbmUoY2FudmFzLCBkYXRhLCB0aGlzLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbik7XHJcbiAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IFN0YXJ0U2NlbmUxO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NjcmVlbiA9IG5ldyBMb2FkaW5nU2NlbmUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMucmVtb3ZlTG9hZGluZyk7XHJcbiAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbkxvb3AoKTtcclxuICAgIH1cclxuICAgIHN0YXJ0QW5pbWF0aW9uTG9vcCgpIHtcclxuICAgICAgICBjb25zdCBhbmltYXRlID0gKHRpbWVTdGFtcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbih0aW1lU3RhbXApO1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICB9XHJcbiAgICBkZXZUb2dnbGUoKSB7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVCdG4uY2xhc3NMaXN0LnRvZ2dsZShcIm9uXCIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b2dnbGVCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwib25cIikpIHtcclxuICAgICAgICAgICAgICAgIERlYnVnZ2VyLkRlYnVnTW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjaGVja01vbnN0ZXJQaGFzZVVwZGF0aW9uKCkge1xyXG4gICAgICAgIGxldCB0b3RhbFN0YXJDb3VudCA9IEdhbWVTY29yZS5nZXRUb3RhbFN0YXJDb3VudCgpO1xyXG4gICAgICAgIGxldCBtb25zdGVyUGhhc2VOdW1iZXIgPSBNYXRoLmZsb29yKHRvdGFsU3RhckNvdW50IC8gMTIpICsgMSB8fCAxO1xyXG4gICAgICAgIHJldHVybiBtb25zdGVyUGhhc2VOdW1iZXIgPD0gNCA/IG1vbnN0ZXJQaGFzZU51bWJlciA6IDQ7XHJcbiAgICB9XHJcbiAgICBhbmltYXRpb24gPSAodGltZVN0YW1wKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlbHRhVGltZSA9IHRpbWVTdGFtcCAtIHRoaXMubGFzdFRpbWU7XHJcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPyB0aGlzLmxvYWRpbmdTY3JlZW4uZHJhdyhkZWx0YVRpbWUpIDogbnVsbDtcclxuICAgICAgICBpZiAoU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9PT0gU3RhcnRTY2VuZTEpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNjZW5lLmFuaW1hdGlvbihkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBMZXZlbFNlbGVjdGlvbjEpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lLmRyYXdMZXZlbFNlbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBHYW1lU2NlbmUxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZS5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPT09IEVuZFNjZW5lMSkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsRW5kU2NlbmUuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzd2l0Y2hTY2VuZVRvR2FtZXBsYXkgPSAoZ2FtZVBsYXlEYXRhLCBjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZShjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKTtcclxuICAgICAgICBsZXQganNvblZlcnNpb25OdW1iZXIgPSAhIXRoaXMuZGF0YS5tYWpWZXJzaW9uICYmICEhdGhpcy5kYXRhLm1pblZlcnNpb25cclxuICAgICAgICAgICAgPyB0aGlzLmRhdGEubWFqVmVyc2lvbi50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgIFwiLlwiICtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5taW5WZXJzaW9uLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgOiBcIlwiO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVwbGF5U2NlbmUgPSBuZXcgR2FtZXBsYXlTY2VuZSh0aGlzLmNhbnZhcywgZ2FtZVBsYXlEYXRhLmN1cnJlbnRMZXZlbERhdGEsIHRoaXMuY2hlY2tNb25zdGVyUGhhc2VVcGRhdGlvbigpLCB0aGlzLmRhdGEuRmVlZGJhY2tUZXh0cywgdGhpcy5kYXRhLnJpZ2h0VG9MZWZ0LCB0aGlzLnN3aXRjaFNjZW5lVG9FbmRMZXZlbCwgZ2FtZVBsYXlEYXRhLnNlbGVjdGVkTGV2ZWxOdW1iZXIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKFNDRU5FX05BTUVfR0FNRV9QTEFZKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXksIGpzb25WZXJzaW9uTnVtYmVyLCB0aGlzLmRhdGEuRmVlZGJhY2tBdWRpb3MpO1xyXG4gICAgICAgICAgICBTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID0gR2FtZVNjZW5lMTtcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuICAgIHN3aXRjaFNjZW5lVG9FbmRMZXZlbCA9IChzdGFyQ291bnQsIG1vbnN0ZXJQaGFzZU51bWJlciwgY3VycmVudExldmVsTnVtYmVyLCBpc1RpbWVyRW5kZWQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTY3JlZW4uaW5pdENsb3VkKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZShTQ0VORV9OQU1FX0dBTUVfUExBWSk7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxFbmRTY2VuZSA9IG5ldyBMZXZlbEVuZFNjZW5lKHRoaXMuY2FudmFzLCB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCwgdGhpcy5jb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbE51bWJlciwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXksIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uLCB0aGlzLmRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcik7XHJcbiAgICAgICAgICAgIFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPSBFbmRTY2VuZTE7XHJcbiAgICAgICAgfSwgaXNUaW1lckVuZGVkID8gMCA6IDQwMDApO1xyXG4gICAgfTtcclxuICAgIHN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbiA9IChjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZShjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lID0gbmV3IExldmVsU2VsZWN0aW9uU2NyZWVuKHRoaXMuY2FudmFzLCB0aGlzLmRhdGEsIHRoaXMuc3dpdGNoU2NlbmVUb0dhbWVwbGF5KTtcclxuICAgICAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IExldmVsU2VsZWN0aW9uMTtcclxuICAgICAgICAgICAgdGhpcy50aXRsZVRleHRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAobGFzdFNjZW5lTmFtZSkgPT4ge1xyXG4gICAgICAgIGlmIChsYXN0U2NlbmVOYW1lID09IFNDRU5FX05BTUVfTEVWRUxfU0VMRUNUKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25TY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhc3RTY2VuZU5hbWUgPT09IFNDRU5FX05BTUVfR0FNRV9QTEFZKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhc3RTY2VuZU5hbWUgPT09IFNDRU5FX05BTUVfU1RBUlQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNjZW5lLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFzdFNjZW5lTmFtZSA9PSBTQ0VORV9OQU1FX0xFVkVMX0VORCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsRW5kU2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzaG93TG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTY3JlZW4uaW5pdENsb3VkKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdcIikuc3R5bGUuekluZGV4ID0gXCIzXCI7XHJcbiAgICB9O1xyXG4gICAgcmVtb3ZlTG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdcIikuc3R5bGUuekluZGV4ID0gXCItMVwiO1xyXG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZUluc3RhbGxQcm9tcHQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAvL2N1cnJlbnRseSBub3QgaW4gdXNlXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzLCBcImZhbHNlXCIpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBNb25zdGVyLCBUaW1lclRpY2tpbmcsIFByb21wdFRleHQsIFBhdXNlQnV0dG9uLCBMZXZlbEluZGljYXRvcnMsIFN0b25lSGFuZGxlciwgVHV0b3JpYWwsIEZlZWRiYWNrVGV4dEVmZmVjdHMsIEF1ZGlvUGxheWVyLCBUcmFpbEVmZmVjdCwgfSBmcm9tIFwiQGNvbXBvbmVudHNcIjtcclxuaW1wb3J0IFBhdXNlUG9wVXAgZnJvbSBcIkBwb3B1cHMvcGF1c2UtcG9wdXBcIjtcclxuaW1wb3J0IHsgbG9hZEltYWdlcywgQ0xJQ0ssIExPQURQVVpaTEUsIE1PVVNFRE9XTiwgTU9VU0VNT1ZFLCBNT1VTRVVQLCBTVE9ORURST1AsIFRPVUNIRU5ELCBUT1VDSE1PVkUsIFRPVUNIU1RBUlQsIFZJU0lCSUxJVFlfQ0hBTkdFLCBEZWJ1Z2dlciwgbGFuZywgcHNldWRvSWQsIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIkBkYXRhXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi4vRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgQVVESU9fUEFUSF9PTl9EUkFHLCBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUsIFByZXZpb3VzUGxheWVkTGV2ZWwsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzLCB9IGZyb20gXCJAY29tcG9zaXRpb25zXCI7XHJcbmltcG9ydCB7IFdvcmRQdXp6bGVMb2dpYyB9IGZyb20gJ0BnYW1lcHV6emxlcyc7XHJcbmV4cG9ydCBjbGFzcyBHYW1lcGxheVNjZW5lIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgbW9uc3RlcjtcclxuICAgIGpzb25WZXJzaW9uTnVtYmVyO1xyXG4gICAgY2FudmFzO1xyXG4gICAgbGV2ZWxEYXRhO1xyXG4gICAgdGltZXJUaWNraW5nO1xyXG4gICAgcHJvbXB0VGV4dDtcclxuICAgIHBhdXNlQnV0dG9uO1xyXG4gICAgdHV0b3JpYWw7XHJcbiAgICBwdXp6bGVEYXRhO1xyXG4gICAgaWQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgbGV2ZWxJbmRpY2F0b3JzO1xyXG4gICAgc3RvbmVzQ291bnQgPSAxO1xyXG4gICAgbW9uc3RlclBoYXNlTnVtYmVyO1xyXG4gICAgcGlja2VkU3RvbmU7XHJcbiAgICBwdXp6bGVTdGFydFRpbWU7XHJcbiAgICBzaG93VHV0b3JpYWw7XHJcbiAgICBmZWVkQmFja1RleHRzO1xyXG4gICAgaXNQdXp6bGVDb21wbGV0ZWQ7XHJcbiAgICByaWdodFRvTGVmdDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgc3dpdGNoU2NlbmVUb0VuZDtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgc3RvbmVIYW5kbGVyO1xyXG4gICAgY291bnRlciA9IDA7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBoYW5kbGVyO1xyXG4gICAgcGlja2VkU3RvbmVPYmplY3Q7XHJcbiAgICBwYXVzZVBvcHVwO1xyXG4gICAgaXNQYXVzZUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgIGJhY2tncm91bmQ7XHJcbiAgICBmZWVkQmFja1RleHRDYW5hdnNFbGVtZW50O1xyXG4gICAgZmVlZGJhY2tUZXh0RWZmZWN0cztcclxuICAgIGlzR2FtZVN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIHRpbWUgPSAwO1xyXG4gICAgc2NvcmUgPSAwO1xyXG4gICAgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgIHJlbG9hZFNjZW5lO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgc3RhcnRUaW1lO1xyXG4gICAgcHV6emxlVGltZTtcclxuICAgIGlzRGlzcG9zaW5nO1xyXG4gICAgcmVzZXRBbmltYXRpb25JRDtcclxuICAgIHRyYWlsUGFydGljbGVzO1xyXG4gICAgY2xpY2tUcmFpbFRvZ2dsZTtcclxuICAgIGhhc0ZlZDtcclxuICAgIHdvcmRQdXp6bGVMb2dpYztcclxuICAgIHJpdmVNb25zdGVyRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgbGV2ZWxEYXRhLCBtb25zdGVyUGhhc2VOdW1iZXIsIGZlZWRCYWNrVGV4dHMsIHJpZ2h0VG9MZWZ0LCBzd2l0Y2hTY2VuZVRvRW5kLCBsZXZlbE51bWJlciwgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgcmVsb2FkU2NlbmUsIGpzb25WZXJzaW9uTnVtYmVyLCBmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgPSByaWdodFRvTGVmdDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiwgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy50cmFpbFBhcnRpY2xlcyA9IG5ldyBUcmFpbEVmZmVjdChjYW52YXMpO1xyXG4gICAgICAgIHRoaXMubW9uc3RlclBoYXNlTnVtYmVyID0gbW9uc3RlclBoYXNlTnVtYmVyIHx8IDE7XHJcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgPSBsZXZlbERhdGE7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hTY2VuZVRvRW5kID0gc3dpdGNoU2NlbmVUb0VuZDtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uID0gc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgICAgICB0aGlzLnJlbG9hZFNjZW5lID0gcmVsb2FkU2NlbmU7XHJcbiAgICAgICAgdGhpcy5qc29uVmVyc2lvbk51bWJlciA9IGpzb25WZXJzaW9uTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuc3RhcnRHYW1lVGltZSgpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRQdXp6bGVUaW1lKCk7XHJcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGF1c2VCdXR0b24gPSBuZXcgUGF1c2VCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcyk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcgPSBuZXcgVGltZXJUaWNraW5nKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmxvYWRQdXp6bGUpO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyID0gbmV3IFN0b25lSGFuZGxlcih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNvdW50ZXIsIHRoaXMubGV2ZWxEYXRhLCBmZWVkYmFja0F1ZGlvcywgdGhpcy50aW1lclRpY2tpbmcpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWwgPSBuZXcgVHV0b3JpYWwodGhpcy5jb250ZXh0LCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMucml2ZU1vbnN0ZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaXZlY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dCA9IG5ldyBQcm9tcHRUZXh0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmxldmVsRGF0YS5wdXp6bGVzW3RoaXMuY291bnRlcl0sIHRoaXMubGV2ZWxEYXRhLCB0aGlzLnJpZ2h0VG9MZWZ0KTtcclxuICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9ycyA9IG5ldyBMZXZlbEluZGljYXRvcnModGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgMCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuc2V0SW5kaWNhdG9ycyh0aGlzLmNvdW50ZXIpO1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCB0aGlzLm1vbnN0ZXJQaGFzZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5wYXVzZVBvcHVwID0gbmV3IFBhdXNlUG9wVXAodGhpcy5jYW52YXMsIHRoaXMucmVzdW1lR2FtZSwgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCB0aGlzLnJlbG9hZFNjZW5lLCB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IGxldmVsRGF0YSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRMZXZlbE51bWJlcjogbGV2ZWxOdW1iZXIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMgPSBuZXcgRmVlZGJhY2tUZXh0RWZmZWN0cygpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLnB1enpsZURhdGEgPSBsZXZlbERhdGEucHV6emxlcztcclxuICAgICAgICB0aGlzLmZlZWRCYWNrVGV4dHMgPSBmZWVkQmFja1RleHRzO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0ge1xyXG4gICAgICAgICAgICBwcm9maWxlTW9uc3RlcjogQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcHJldmlvdXNQbGF5ZWRMZXZlbCA9IHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbE51bWJlcjtcclxuICAgICAgICBEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgPyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQcmV2aW91c1BsYXllZExldmVsICsgbGFuZyArIFwiRGVidWdcIiwgcHJldmlvdXNQbGF5ZWRMZXZlbClcclxuICAgICAgICAgICAgOiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQcmV2aW91c1BsYXllZExldmVsICsgbGFuZywgcHJldmlvdXNQbGF5ZWRMZXZlbCk7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMucmVzZXRBbmltYXRpb25JRCA9IDA7XHJcbiAgICAgICAgLy8gdGhpcy5zZXR1cEJnKCk7XHJcbiAgICAgICAgdGhpcy50cmFpbFBhcnRpY2xlcz8uaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tUcmFpbFRvZ2dsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGFzRmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5yaXZlTW9uc3RlckVsZW1lbnQuc3R5bGUuekluZGV4ID0gXCI0XCI7XHJcbiAgICAgICAgdGhpcy53b3JkUHV6emxlTG9naWMgPSBuZXcgV29yZFB1enpsZUxvZ2ljKGxldmVsRGF0YSwgdGhpcy5jb3VudGVyKTtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBCR19HUk9VUF9JTUdTLCBkcmF3IH0gPSBsb2FkRHluYW1pY0JnQXNzZXRzKHRoaXMubGV2ZWxEYXRhLmxldmVsTnVtYmVyLCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgQkdfR1JPVVBfSU1HUywgZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgcmVzdW1lR2FtZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLnNldEdhbWVQYXVzZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wYXVzZVBvcHVwLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgICBnZXRSYW5kb21GZWVkQmFja1RleHQocmFuZG9tSW5kZXgpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5mZWVkQmFja1RleHRzKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZEtleSA9IGtleXNbcmFuZG9tSW5kZXhdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZlZWRCYWNrVGV4dHNbc2VsZWN0ZWRLZXldO1xyXG4gICAgfVxyXG4gICAgZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XHJcbiAgICAgICAgY29uc3QgZmVlZGJhY2tWYWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuZmVlZEJhY2tUZXh0cyk7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lZFZhbHVlc01heENvdW50ID0gZmVlZGJhY2tWYWx1ZXMuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgIT0gdW5kZWZpbmVkKS5sZW5ndGggLSAxO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGVmaW5lZFZhbHVlc01heENvdW50IC0gbWluICsgMSkpICsgbWluO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VVcCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBsb2dnaW5nXHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjbGljayBpcyB3aXRoaW4gcmFuZ2Ugb2YgdGhlIG1vbnN0ZXJcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeCAtIHRoaXMubW9uc3Rlci54IC0gdGhpcy5jYW52YXMud2lkdGggLyA0KSAqKiAyICtcclxuICAgICAgICAgICAgKHkgLSB0aGlzLm1vbnN0ZXIueSAtIHRoaXMuY2FudmFzLmhlaWdodCAvIDIuMikgKiogMik7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDEwMCAmJiB0aGlzLnBpY2tlZFN0b25lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdGV4dCB9ID0gdGhpcy5waWNrZWRTdG9uZTsgLy8gVXNlIGRlc3RydWN0dXJpbmcgZm9yIGNsYXJpdHlcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTGV0dGVyT25seVwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxldHRlckluV29yZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV0dGVyUHV6emxlKHRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIldvcmRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTb3VuZFdvcmRcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRQdXp6bGUodGhpcy5waWNrZWRTdG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgTm90ZTogVE8gRE86IFNob3VsZCB1c2Ugc3RvbmUtaGFuZGxlci50cyBtZXRob2QgcmVzZXRTdG9uZVBvc2l0aW9uLlxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5waWNrZWRTdG9uZSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZU9iamVjdCAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS50ZXh0ICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5waWNrZWRTdG9uZU9iamVjdC5vcmlneCA9PT0gXCJudW1iZXJcIiAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3kgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhMaW1pdCA9IDUwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFsZldpZHRoID0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lLnggPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmUudGV4dC5sZW5ndGggPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4IDwgeExpbWl0ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3ggPCBoYWxmV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4ICsgMjVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS55ID0gdGhpcy5waWNrZWRTdG9uZU9iamVjdC5vcmlneTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gbnVsbDtcclxuICAgICAgICB0aGlzLndvcmRQdXp6bGVMb2dpYy5jbGVhclBpY2tlZFVwKCk7XHJcbiAgICAgICAgdGhpcy5jbGlja1RyYWlsVG9nZ2xlID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLy8gRXZlbnQgdG8gaWRlbnRpZnkgbW91c2UgbW92ZWQgZG93biBvbiB0aGUgY2FudmFzXHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKCF0aGlzLndvcmRQdXp6bGVMb2dpYy5jaGVja0lzV29yZFB1enpsZSgpKSB7XHJcbiAgICAgICAgICAgIC8qVG8gRG86IE1vdmUgYWxsIGxvZ2ljIHJlbGF0aW5nIHRvIHN0b25lIGhhbmRsaW5nIGluY2x1ZGluZyB1cGRhdGluZyBpdHMgY29vcmRuYXRlcyB0byBzdG9uZS1oYW5kbGVyLnRzXHJcbiAgICAgICAgICAgICAgTm90ZTogV2lsbCBoYXZlIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgYW5kIHVzZSB0aGUgaGFuZGxlUGlja1N0b25lVXAgaW4gc3RvbmUtaGFuZGxlci50c1xyXG4gICAgICAgICAgICAgIFdpbGwgbGVhdmUgdGhpcyBmb3Igbm93IHRvIGF2b2lkIGFmZmVjdGluZyBMZXR0ZXIgT25seSBwdXp6bGVzIHdpdGggV29yZCBwbGF5IHB1enpsZXMgaW1wbGVtZW50YXRpb24gb2YgbXVsdGktbGV0dGVyIGZlYXR1cmUuXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZvciAobGV0IHNjIG9mIHRoaXMuc3RvbmVIYW5kbGVyLmZvaWxTdG9uZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4IC0gc2MueCkgKiogMiArICh5IC0gc2MueSkgKiogMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPD0gNDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lT2JqZWN0ID0gc2M7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IHNjO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX1BBVEhfT05fRFJBRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGlja2VkVXAoeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xpY2tUcmFpbFRvZ2dsZSA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgc2V0UGlja2VkVXAoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHN0b25lTGV0dGVyID0gdGhpcy5zdG9uZUhhbmRsZXIuaGFuZGxlUGlja1N0b25lVXAoeCwgeSk7XHJcbiAgICAgICAgaWYgKHN0b25lTGV0dGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmVPYmplY3QgPSBzdG9uZUxldHRlcjtcclxuICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IHN0b25lTGV0dGVyO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19QQVRIX09OX0RSQUcpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGE/LmxldmVsTWV0YT8ubGV2ZWxUeXBlID09PSAnV29yZCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud29yZFB1enpsZUxvZ2ljLnNldFBpY2tVcExldHRlcihzdG9uZUxldHRlcj8udGV4dCwgc3RvbmVMZXR0ZXI/LmZvaWxTdG9uZUluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZU1vdXNlTW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCB0cmFpbFggPSBldmVudC5jbGllbnRYO1xyXG4gICAgICAgIGxldCB0cmFpbFkgPSBldmVudC5jbGllbnRZO1xyXG4gICAgICAgIGlmICh0aGlzLnBpY2tlZFN0b25lKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53b3JkUHV6emxlTG9naWMuY2hlY2tJc1dvcmRQdXp6bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgLypUbyBEbzogTW92ZSBhbGwgbG9naWMgcmVsYXRpbmcgdG8gc3RvbmUgaGFuZGxpbmcgaW5jbHVkaW5nIHVwZGF0aW5nIGl0cyBjb29yZG5hdGVzIHRvIHN0b25lLWhhbmRsZXIudHNcclxuICAgICAgICAgICAgICAgICBOb3RlOiBXaWxsIGhhdmUgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBhbmQgdXNlIHRoZSBoYW5kbGVNb3ZpbmdTdG9uZUxldHRlciBpbiBzdG9uZS1oYW5kbGVyLnRzXHJcbiAgICAgICAgICAgICAgICAgV2lsbCBsZWF2ZSB0aGlzIGZvciBub3cgdG8gYXZvaWQgYWZmZWN0aW5nIExldHRlciBPbmx5IHB1enpsZXMgd2l0aCBXb3JkIHBsYXkgcHV6emxlcyBpbXBsZW1lbnRhdGlvbiBvZiBtdWx0aS1sZXR0ZXIgZmVhdHVyZS5cclxuICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXIuY2hhbmdlVG9EcmFnQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lLnggPSB4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS55ID0geTtcclxuICAgICAgICAgICAgICAgIHRyYWlsWCA9IHg7XHJcbiAgICAgICAgICAgICAgICB0cmFpbFkgPSB5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U3RvbmVDb29yZGluYXRlcyA9IHRoaXMuc3RvbmVIYW5kbGVyLmhhbmRsZU1vdmluZ1N0b25lTGV0dGVyKHRoaXMucGlja2VkU3RvbmUsIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IG5ld1N0b25lQ29vcmRpbmF0ZXM7XHJcbiAgICAgICAgICAgICAgICB0cmFpbFggPSBuZXdTdG9uZUNvb3JkaW5hdGVzLng7XHJcbiAgICAgICAgICAgICAgICB0cmFpbFkgPSBuZXdTdG9uZUNvb3JkaW5hdGVzLnk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53b3JkUHV6emxlTG9naWMuY2hlY2tJc1dvcmRQdXp6bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0b25lTGV0dGVyID0gdGhpcy5zdG9uZUhhbmRsZXIuaGFuZGxlSG92ZXJpbmdUb0Fub3RoZXJTdG9uZSh0cmFpbFgsIHRyYWlsWSwgKGZvaWxTdG9uZVRleHQsIGZvaWxTdG9uZUluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndvcmRQdXp6bGVMb2dpYy5oYW5kbGVDaGVja0hvdmVyZWRTdG9uZShmb2lsU3RvbmVUZXh0LCBmb2lsU3RvbmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1N0b25lTGV0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZFB1enpsZUxvZ2ljLnNldFBpY2tVcExldHRlcihuZXdTdG9uZUxldHRlcj8udGV4dCwgbmV3U3RvbmVMZXR0ZXI/LmZvaWxTdG9uZUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IHRoaXMuc3RvbmVIYW5kbGVyLnJlc2V0U3RvbmVQb3NpdGlvbih0aGlzLndpZHRoLCB0aGlzLnBpY2tlZFN0b25lLCB0aGlzLnBpY2tlZFN0b25lT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9BZnRlciByZXNldHRpbmcgaXRzIG9yaWdpbmFsIHBvc2l0aW9uIHJlcGxhY2UgaXQgd2l0aCB0aGUgbmV3IGxldHRlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZU9iamVjdCA9IG5ld1N0b25lTGV0dGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gbmV3U3RvbmVMZXR0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0RyYWdBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGlja1RyYWlsVG9nZ2xlICYmXHJcbiAgICAgICAgICAgIHRoaXMudHJhaWxQYXJ0aWNsZXM/LmFkZFRyYWlsUGFydGljbGVzT25Nb3ZlKHRyYWlsWCwgdHJhaWxZKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZUNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLm1vbnN0ZXIub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmlzR2FtZVN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFBsYXlNb25zdGVyQ2xpY2tBbmltYXRpb24oZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wYXVzZUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUdhbWVQbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb21wdFRleHQub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEV2ZW50IHRvIGlkZW50aWZ5IHRvdWNoIG9uIHRoZSBjYW52YXNcclxuICAgIGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd24oeyBjbGllbnRYOiB0b3VjaC5jbGllbnRYLCBjbGllbnRZOiB0b3VjaC5jbGllbnRZIH0pO1xyXG4gICAgICAgIHRoaXMudHJhaWxQYXJ0aWNsZXM/LnJlc2V0UGFydGljbGVzKCk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlVG91Y2hNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VNb3ZlKHsgY2xpZW50WDogdG91Y2guY2xpZW50WCwgY2xpZW50WTogdG91Y2guY2xpZW50WSB9KTtcclxuICAgICAgICB0aGlzLnRyYWlsUGFydGljbGVzPy5hZGRUcmFpbFBhcnRpY2xlc09uTW92ZSh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVUb3VjaEVuZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZVVwKHsgY2xpZW50WDogdG91Y2guY2xpZW50WCwgY2xpZW50WTogdG91Y2guY2xpZW50WSB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzRmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50cmFpbFBhcnRpY2xlcz8ucmVzZXRQYXJ0aWNsZXMoKTtcclxuICAgIH07XHJcbiAgICBkcmF3KGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0dhbWVTdGFydGVkICYmICF0aGlzLmlzUGF1c2VCdXR0b25DbGlja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZSA+PSA1MDAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzR2FtZVN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMudHV0b3JpYWwuc2V0UGxheU1vbnN0ZXJDbGlja0FuaW1hdGlvbihmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZD8uZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhdXNlQnV0dG9uLmRyYXcoKTtcclxuICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9ycy5kcmF3KCk7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRUZXh0LmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcuZHJhdygpO1xyXG4gICAgICAgIHRoaXMudHJhaWxQYXJ0aWNsZXM/LmRyYXcoKTtcclxuICAgICAgICBpZiAodGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiB0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVTdG9uZUxldHRlckRyYXdpbmcoZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZVBvcHVwLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VCdXR0b25DbGlja2VkICYmICF0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb3VudGVyID09IDBcclxuICAgICAgICAgICAgICAgID8gdGhpcy50dXRvcmlhbC5jbGlja09uTW9uc3RlclR1dG9yaWFsKGRlbHRhVGltZSlcclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiAhdGhpcy5pc0dhbWVTdGFydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VQb3B1cC5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiB0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVTdG9uZUxldHRlckRyYXdpbmcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZUxldHRlckRyYXdpbmcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud29yZFB1enpsZUxvZ2ljLmNoZWNrSXNXb3JkUHV6emxlKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBncm91cGVkT2JqIH0gPSB0aGlzLndvcmRQdXp6bGVMb2dpYy5nZXRWYWx1ZXMoKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuZHJhd1dvcmRQdXp6bGVMZXR0ZXJzKGRlbHRhVGltZSwgKGZvaWxTdG9uZUluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53b3JkUHV6emxlTG9naWMudmFsaWRhdGVTaG91bGRIaWRlTGV0dGVyKGZvaWxTdG9uZUluZGV4KTtcclxuICAgICAgICAgICAgfSwgZ3JvdXBlZE9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lSGFuZGxlci5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoTU9VU0VVUCwgdGhpcy5oYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoTU9VU0VNT1ZFLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKE1PVVNFRE9XTiwgdGhpcy5oYW5kbGVNb3VzZURvd24sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSFNUQVJULCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSE1PVkUsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoVE9VQ0hFTkQsIHRoaXMuaGFuZGxlVG91Y2hFbmQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihWSVNJQklMSVRZX0NIQU5HRSwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICAvLyBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBkZWZpbmVkIGZ1bmN0aW9uc1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5oYW5kbGVUb3VjaEVuZCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgbG9hZFB1enpsZSA9IChpc1RpbWVyRW5kZWQpID0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5zdG9uZXNDb3VudCA9IDE7XHJcbiAgICAgICAgY29uc3QgdGltZXJFbmRlZCA9IEJvb2xlYW4oaXNUaW1lckVuZGVkKTtcclxuICAgICAgICBpZiAodGltZXJFbmRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ1B1enpsZUVuZEZpcmViYXNlRXZlbnQoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvdW50ZXIgKz0gMTsgLy9pbmNyZW1lbnQgUHV6emxlXHJcbiAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gdGhpcy5sZXZlbERhdGEucHV6emxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuc2V0SW5kaWNhdG9ycyh0aGlzLmNvdW50ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0xldmVsRW5kRmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgICAgICBHYW1lU2NvcmUuc2V0R2FtZUxldmVsU2NvcmUodGhpcy5sZXZlbERhdGEsIHRoaXMuc2NvcmUpO1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFNjZW5lVG9FbmQoR2FtZVNjb3JlLmNhbGN1bGF0ZVN0YXJDb3VudCh0aGlzLnNjb3JlKSwgdGhpcy5tb25zdGVyUGhhc2VOdW1iZXIsIHRoaXMubGV2ZWxOdW1iZXIsIHRpbWVyRW5kZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbG9hZFB1enpsZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KExPQURQVVpaTEUsIHtcclxuICAgICAgICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXI6IHRoaXMuY291bnRlcixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc3Bvc2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE5ld1B1enpsZShsb2FkUHV6emxlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aW1lckVuZGVkID8gMCA6IDQ1MDApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaXNEaXNwb3NpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMubW9uc3Rlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3JzLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnN0b25lSGFuZGxlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRUZXh0LmRpc3Bvc2UoKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9O1xyXG4gICAgY2hlY2tTdG9uZURyb3BwZWQoc3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5oYXNGZWQgPSB0cnVlOyAvL1RvIHByZXZlbnQgaWRsZSBhbmltYXRpb24gZnJvbSBmaXJpbmcgd2hlbiBzdG9uZSBpcyBkcm9wcGVkLlxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b25lSGFuZGxlci5pc1N0b25lTGV0dGVyRHJvcENvcnJlY3Qoc3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCk7XHJcbiAgICB9XHJcbiAgICBsZXR0ZXJQdXp6bGUoZHJvcHBlZFN0b25lKSB7XHJcbiAgICAgICAgY29uc3QgZmVlZEJhY2tJbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMuY2hlY2tTdG9uZURyb3BwZWQoZHJvcHBlZFN0b25lLCBmZWVkQmFja0luZGV4KTtcclxuICAgICAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29ycmVjdFN0b25lRHJvcChmZWVkQmFja0luZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5oYW5kbGVTdG9uZURyb3BFbmQoaXNDb3JyZWN0KTtcclxuICAgIH1cclxuICAgIHdvcmRQdXp6bGUoZHJvcHBlZFN0b25lSW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BGZWVkYmFja0F1ZGlvKCk7XHJcbiAgICAgICAgZHJvcHBlZFN0b25lSW5zdGFuY2UueCA9IC05OTk7XHJcbiAgICAgICAgZHJvcHBlZFN0b25lSW5zdGFuY2UueSA9IC05OTk7XHJcbiAgICAgICAgY29uc3QgZmVlZEJhY2tJbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEpO1xyXG4gICAgICAgIHRoaXMuaGFzRmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLndvcmRQdXp6bGVMb2dpYy5zZXRHcm91cFRvRHJvcHBlZCgpO1xyXG4gICAgICAgIGNvbnN0IHsgZHJvcHBlZExldHRlcnMgfSA9IHRoaXMud29yZFB1enpsZUxvZ2ljLmdldFZhbHVlcygpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMud29yZFB1enpsZUxvZ2ljLnZhbGlkYXRlRmVkTGV0dGVycygpO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLnByb2Nlc3NMZXR0ZXJEcm9wRmVlZGJhY2tBdWRpbyhmZWVkQmFja0luZGV4LCBpc0NvcnJlY3QsIHRydWUsIGRyb3BwZWRMZXR0ZXJzKTtcclxuICAgICAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndvcmRQdXp6bGVMb2dpYy52YWxpZGF0ZVdvcmRQdXp6bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDb3JyZWN0U3RvbmVEcm9wKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdG9uZURyb3BFbmQoaXNDb3JyZWN0LCBcIldvcmRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRpbWVyVGlja2luZy5zdGFydFRpbWVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0VhdEFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQuZHJvcHBlZFN0b25lSW5kZXgobGFuZyA9PSBcImFyYWJpY1wiXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuc3RvbmVzQ291bnRcclxuICAgICAgICAgICAgICAgIDogZHJvcHBlZExldHRlcnMubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZXNDb3VudCsrO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0VG9JZGxlQW5pbWF0aW9uKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFzRmVkID0gZmFsc2U7IC8vcmUtZW5hYmxlcyBpZGxlIHJlc2V0IHdoZW4gc3RvbmVzIGFyZSBub3QgZmVkLlxyXG4gICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RvbmVEcm9wRW5kKGlzQ29ycmVjdCwgXCJXb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXNldFRvSWRsZUFuaW1hdGlvbihjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNldEFuaW1hdGlvbklEICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzZXRBbmltYXRpb25JRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRBbmltYXRpb25JRCA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcEVuZChpc0NvcnJlY3QsIHB1enpsZVR5cGUgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5sb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50KGlzQ29ycmVjdCwgcHV6emxlVHlwZSk7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN0b25lRHJvcEV2ZW50KGlzQ29ycmVjdCk7XHJcbiAgICAgICAgdGhpcy5sb2FkUHV6emxlKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDb3JyZWN0U3RvbmVEcm9wID0gKGZlZWRiYWNrSW5kZXgpID0+IHtcclxuICAgICAgICB0aGlzLnNjb3JlICs9IDEwMDtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMud3JhcFRleHQodGhpcy5nZXRSYW5kb21GZWVkQmFja1RleHQoZmVlZGJhY2tJbmRleCkpO1xyXG4gICAgfTtcclxuICAgIGRpc3BhdGNoU3RvbmVEcm9wRXZlbnQoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgY29uc3QgZHJvcFN0b25lRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoU1RPTkVEUk9QLCB7XHJcbiAgICAgICAgICAgIGRldGFpbDogeyBpc0NvcnJlY3Q6IGlzQ29ycmVjdCB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZHJvcFN0b25lRXZlbnQpO1xyXG4gICAgfVxyXG4gICAgaW5pdE5ld1B1enpsZShsb2FkUHV6emxlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICB0aGlzLndvcmRQdXp6bGVMb2dpYy51cGRhdGVQdXp6bGVMZXZlbChsb2FkUHV6emxlRXZlbnQ/LmRldGFpbD8uY291bnRlcik7XHJcbiAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IG51bGw7XHJcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChsb2FkUHV6emxlRXZlbnQpO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UHV6emxlVGltZSgpO1xyXG4gICAgICAgIHRoaXMuaGFzRmVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBsb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50KGlzQ29ycmVjdCwgcHV6emxlVHlwZSkge1xyXG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCB7IGRyb3BwZWRMZXR0ZXJzIH0gPSB0aGlzLndvcmRQdXp6bGVMb2dpYy5nZXRWYWx1ZXMoKTtcclxuICAgICAgICBjb25zdCBwdXp6bGVDb21wbGV0ZWREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogdGhpcy5qc29uVmVyc2lvbk51bWJlcixcclxuICAgICAgICAgICAgc3VjY2Vzc19vcl9mYWlsdXJlOiBpc0NvcnJlY3QgPyBcInN1Y2Nlc3NcIiA6IFwiZmFpbHVyZVwiLFxyXG4gICAgICAgICAgICBsZXZlbF9udW1iZXI6IHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbE51bWJlcixcclxuICAgICAgICAgICAgcHV6emxlX251bWJlcjogdGhpcy5jb3VudGVyLFxyXG4gICAgICAgICAgICBpdGVtX3NlbGVjdGVkOiBwdXp6bGVUeXBlID09IFwiV29yZFwiXHJcbiAgICAgICAgICAgICAgICA/IGRyb3BwZWRMZXR0ZXJzID09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgICAgICBkcm9wcGVkTGV0dGVycyA9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA/IFwiVElNRU9VVFwiXHJcbiAgICAgICAgICAgICAgICAgICAgOiBkcm9wcGVkTGV0dGVyc1xyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnBpY2tlZFN0b25lID09IG51bGwgfHwgdGhpcy5waWNrZWRTdG9uZSA9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA/IFwiVElNRU9VVFwiXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnBpY2tlZFN0b25lPy50ZXh0LFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuc3RvbmVIYW5kbGVyLmdldENvcnJlY3RUYXJnZXRTdG9uZSgpLFxyXG4gICAgICAgICAgICBmb2lsczogdGhpcy5zdG9uZUhhbmRsZXIuZ2V0Rm9pbFN0b25lcygpLFxyXG4gICAgICAgICAgICByZXNwb25zZV90aW1lOiAoZW5kVGltZSAtIHRoaXMucHV6emxlVGltZSkgLyAxMDAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRQdXp6bGVDb21wbGV0ZWRFdmVudChwdXp6bGVDb21wbGV0ZWREYXRhKTtcclxuICAgIH1cclxuICAgIGxvZ0xldmVsRW5kRmlyZWJhc2VFdmVudCgpIHtcclxuICAgICAgICBsZXQgZW5kVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgbGV2ZWxDb21wbGV0ZWREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogdGhpcy5qc29uVmVyc2lvbk51bWJlcixcclxuICAgICAgICAgICAgc3VjY2Vzc19vcl9mYWlsdXJlOiBHYW1lU2NvcmUuY2FsY3VsYXRlU3RhckNvdW50KHRoaXMuc2NvcmUpID49IDMgPyBcInN1Y2Nlc3NcIiA6IFwiZmFpbHVyZVwiLFxyXG4gICAgICAgICAgICBudW1iZXJfb2Zfc3VjY2Vzc2Z1bF9wdXp6bGVzOiB0aGlzLnNjb3JlIC8gMTAwLFxyXG4gICAgICAgICAgICBsZXZlbF9udW1iZXI6IHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbE51bWJlcixcclxuICAgICAgICAgICAgZHVyYXRpb246IChlbmRUaW1lIC0gdGhpcy5zdGFydFRpbWUpIC8gMTAwMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kTGV2ZWxDb21wbGV0ZWRFdmVudChsZXZlbENvbXBsZXRlZERhdGEpO1xyXG4gICAgfVxyXG4gICAgc3RhcnRHYW1lVGltZSgpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICB9XHJcbiAgICBzdGFydFB1enpsZVRpbWUoKSB7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuICAgIHBhdXNlR2FtZVBsYXkgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLnNldEdhbWVQYXVzZSh0cnVlKTtcclxuICAgICAgICB0aGlzLnBhdXNlUG9wdXAuYWRkTGlzdG5lcigpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZUdhbWVQbGF5KCk7XHJcbiAgICB9O1xyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyLCBsYW5nLCBwc2V1ZG9JZCwgbG9hZEltYWdlcywgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBnZXREYXRhLCBHYW1lU2NvcmUgfSBmcm9tIFwiQGRhdGFcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCYWNrZ3JvdW5kLCBsZXZlbFNlbGVjdEJnRHJhd2luZywgY3JlYXRlTGV2ZWxPYmplY3QsIGdldGRlZmF1bHRDbG91ZEJ0bnNQb3MsIGxvYWRMZXZlbEltYWdlcyB9IGZyb20gXCJAY29tcG9zaXRpb25zXCI7XHJcbmltcG9ydCB7IFByZXZpb3VzUGxheWVkTGV2ZWwsIExFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5ELCBORVhUX0JUTl9JTUcsIEJBQ0tfQlROX0lNRywgQVVESU9fSU5UUk8sIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgTGV2ZWxCbG9vbkJ1dHRvbiB9IGZyb20gJ0BidXR0b25zJztcclxuZXhwb3J0IGNsYXNzIExldmVsU2VsZWN0aW9uU2NyZWVuIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGNhbnZhc0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgbGV2ZWxzO1xyXG4gICAgZ2FtZUxldmVsRGF0YTtcclxuICAgIGNhbGxCYWNrO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHhEb3duO1xyXG4gICAgeURvd247XHJcbiAgICBwcmV2aW91c1BsYXllZExldmVsTnVtYmVyO1xyXG4gICAgbGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPSAwO1xyXG4gICAgbGV2ZWxOdW1iZXI7XHJcbiAgICBsZXZlbHNTZWN0aW9uQ291bnQ7XHJcbiAgICB1bmxvY2tMZXZlbEluZGV4O1xyXG4gICAgbWFqVmVyc2lvbjtcclxuICAgIG1pblZlcnNpb247XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIHJpZ2h0QnRuU2l6ZTtcclxuICAgIHJpZ2h0QnRuWDtcclxuICAgIHJpZ2h0QnRuWTtcclxuICAgIGxlZnRCdG5TaXplO1xyXG4gICAgbGVmdEJ0blg7XHJcbiAgICBsZWZ0QnRuWTtcclxuICAgIGxldmVsQnV0dG9ucztcclxuICAgIHJpdmVNb25zdGVyRWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgZGF0YSwgY2FsbEJhY2spIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICB0aGlzLmNhbGxCYWNrID0gY2FsbEJhY2s7XHJcbiAgICAgICAgdGhpcy5sZXZlbHNTZWN0aW9uQ291bnQgPVxyXG4gICAgICAgICAgICBzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwID4gTWF0aC5mbG9vcihzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwKVxyXG4gICAgICAgICAgICAgICAgPyBNYXRoLmZsb29yKHNlbGYuZGF0YS5sZXZlbHMubGVuZ3RoIC8gMTApICsgMVxyXG4gICAgICAgICAgICAgICAgOiBNYXRoLmZsb29yKHNlbGYuZGF0YS5sZXZlbHMubGVuZ3RoIC8gMTApO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzID0gW107XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB0aGlzLnJpdmVNb25zdGVyRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicml2ZWNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlTGV2ZWxCdXR0b25zKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lTGV2ZWxEYXRhID0gR2FtZVNjb3JlLmdldEFsbEdhbWVMZXZlbEluZm8oKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy51bmxvY2tMZXZlbEluZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1BsYXllZExldmVsTnVtYmVyID1cclxuICAgICAgICAgICAgcGFyc2VJbnQoRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgICAgICA/IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFByZXZpb3VzUGxheWVkTGV2ZWwgKyBsYW5nICsgXCJEZWJ1Z1wiKVxyXG4gICAgICAgICAgICAgICAgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShQcmV2aW91c1BsYXllZExldmVsICsgbGFuZykpIHwgMDtcclxuICAgICAgICBpZiAodGhpcy5wcmV2aW91c1BsYXllZExldmVsTnVtYmVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9XHJcbiAgICAgICAgICAgICAgICAxMCAqIE1hdGguZmxvb3IodGhpcy5wcmV2aW91c1BsYXllZExldmVsTnVtYmVyIC8gMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldHVwQmcoKTtcclxuICAgICAgICB0aGlzLnJpdmVNb25zdGVyRWxlbWVudC5zdHlsZS56SW5kZXggPSBcIi0xXCI7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIG5leHRidG46IE5FWFRfQlROX0lNRyxcclxuICAgICAgICAgICAgYmFja2J0bjogQkFDS19CVE5fSU1HLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX0lOVFJPKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5yaWdodEJ0blNpemUgPSAxMDtcclxuICAgICAgICB0aGlzLnJpZ2h0QnRuWCA9IDAuNzM7XHJcbiAgICAgICAgdGhpcy5yaWdodEJ0blkgPSAxLjM7XHJcbiAgICAgICAgdGhpcy5sZWZ0QnRuU2l6ZSA9IDEwO1xyXG4gICAgICAgIHRoaXMubGVmdEJ0blggPSAxMDtcclxuICAgICAgICB0aGlzLmxlZnRCdG5ZID0gMS4zO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RGF0YSgpO1xyXG4gICAgICAgIHRoaXMubWFqVmVyc2lvbiA9IGRhdGEubWFqdmVyc2lvbjtcclxuICAgICAgICB0aGlzLm1pblZlcnNpb24gPSBkYXRhLm1pbnZlcnNpb247XHJcbiAgICB9XHJcbiAgICBzZXR1cEJnID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgeyBMRVZFTF9TRUxFQ1RJT05fQkFDS0dST1VORCB9LCBsZXZlbFNlbGVjdEJnRHJhd2luZyk7XHJcbiAgICB9O1xyXG4gICAgYXN5bmMgY3JlYXRlTGV2ZWxCdXR0b25zKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlcyA9IGF3YWl0IGxvYWRMZXZlbEltYWdlcygpO1xyXG4gICAgICAgIGNvbnN0IHBvc3MgPSBnZXRkZWZhdWx0Q2xvdWRCdG5zUG9zKHRoaXMuY2FudmFzKTtcclxuICAgICAgICBjb25zdCBsZXZlbHNBcnIgPSBwb3NzWzBdLm1hcCgoY29vcmRpbmF0ZXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMZXZlbE9iamVjdChjb29yZGluYXRlc1swXSwgY29vcmRpbmF0ZXNbMV0sIGluZGV4ICsgMSwgaW1hZ2VzKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmxldmVscyA9IGF3YWl0IFByb21pc2UuYWxsKGxldmVsc0Fycik7XHJcbiAgICAgICAgdGhpcy5sZXZlbEJ1dHRvbnMgPSB0aGlzLmxldmVscy5tYXAoYnRuQ29vcmRpbmF0ZXMgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IExldmVsQmxvb25CdXR0b24odGhpcy5jYW52YXMsIHRoaXMuY29udGV4dCwgeyAuLi5idG5Db29yZGluYXRlcyB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFkZExpc3RlbmVycygpIHtcclxuICAgICAgICAvLyBuZXh0IHByZXYgYnV0dG9uIGxpc3RuZXIgIzFcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5oYW5kbGVNb3VzZURvd24sIGZhbHNlKTtcclxuICAgICAgICAvLyB3aGVuIGFwcCBnb2VzIGJhY2tncm91bmQgIzJcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnBhdXNlUGxheUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgICAgIC8vLyBzd2lwZSBsaXN0ZW5lciAjM1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LCBmYWxzZSk7XHJcbiAgICAgICAgLy8gIzRcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5oYW5kbGVUb3VjaE1vdmUsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHBhdXNlUGxheUF1ZGlvcyA9ICgpID0+IHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19JTlRSTyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZ2V0VG91Y2hlcyhldnQpIHtcclxuICAgICAgICByZXR1cm4gKGV2dC50b3VjaGVzIHx8IC8vIGJyb3dzZXIgQVBJXHJcbiAgICAgICAgICAgIGV2dC5vcmlnaW5hbEV2ZW50LnRvdWNoZXMpOyAvLyBqUXVlcnlcclxuICAgIH1cclxuICAgIGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgY29uc3QgZmlyc3RUb3VjaCA9IHRoaXMuZ2V0VG91Y2hlcyhldnQpWzBdO1xyXG4gICAgICAgIHRoaXMueERvd24gPSBmaXJzdFRvdWNoLmNsaWVudFg7XHJcbiAgICAgICAgdGhpcy55RG93biA9IGZpcnN0VG91Y2guY2xpZW50WTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVUb3VjaE1vdmUgPSAoZXZ0KSA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnhEb3duIHx8ICF0aGlzLnlEb3duKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHhVcCA9IGV2dC50b3VjaGVzWzBdLmNsaWVudFg7XHJcbiAgICAgICAgbGV0IHlVcCA9IGV2dC50b3VjaGVzWzBdLmNsaWVudFk7XHJcbiAgICAgICAgbGV0IHhEaWZmID0gdGhpcy54RG93biAtIHhVcDtcclxuICAgICAgICBsZXQgeURpZmYgPSB0aGlzLnlEb3duIC0geVVwO1xyXG4gICAgICAgIGlmIChNYXRoLmFicyh4RGlmZikgPiBNYXRoLmFicyh5RGlmZikpIHtcclxuICAgICAgICAgICAgLyptb3N0IHNpZ25pZmljYW50Ki9cclxuICAgICAgICAgICAgaWYgKHhEaWZmID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggIT0gdGhpcy5sZXZlbHNTZWN0aW9uQ291bnQgKiAxMCAtIDEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9IHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggKyAxMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvd25CdXR0b24odGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvKiByaWdodCBzd2lwZSAqL1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggIT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPSB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMTA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25CdXR0b24odGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAvKiBsZWZ0IHN3aXBlICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLyogcmVzZXQgdmFsdWVzICovXHJcbiAgICAgICAgdGhpcy54RG93biA9IG51bGw7XHJcbiAgICAgICAgdGhpcy55RG93biA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgcmVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgY29uc3QgaXNXaXRoaW5CdXR0b25BcmVhID0gKGJ0blgsIGJ0blkgPSAxLjMpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICh4ID49IGJ0blggJiZcclxuICAgICAgICAgICAgICAgIHggPCBidG5YICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTAgJiZcclxuICAgICAgICAgICAgICAgIHkgPiB0aGlzLmNhbnZhcy5oZWlnaHQgLyBidG5ZICYmXHJcbiAgICAgICAgICAgICAgICB5IDwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gYnRuWSArIHRoaXMuY2FudmFzLmhlaWdodCAvIDEwKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGlzUmlnaHQgPSBpc1dpdGhpbkJ1dHRvbkFyZWEodGhpcy5jYW52YXMud2lkdGggKiAwLjcpO1xyXG4gICAgICAgIGNvbnN0IGlzTGVmdCA9IGlzV2l0aGluQnV0dG9uQXJlYSh0aGlzLmNhbnZhcy53aWR0aCAvIDEwKTtcclxuICAgICAgICBpZiAoaXNMZWZ0IHx8IGlzUmlnaHQpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleDtcclxuICAgICAgICAgICAgaWYgKGlzUmlnaHQgJiYgcGFnZUluZGV4ICE9IHRoaXMubGV2ZWxzU2VjdGlvbkNvdW50ICogMTAgLSAxMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9IHBhZ2VJbmRleCArIDEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodEJ0blNpemUgPSAxMC41O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yaWdodEJ0blkgPSAxLjI5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChpc0xlZnQgJiYgcGFnZUluZGV4ICE9IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPSBwYWdlSW5kZXggLSAxMDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdEJ0blNpemUgPSAxMC4zO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sZWZ0QnRuWSA9IDEuMjk5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgYnRuIG9mIHRoaXMubGV2ZWxCdXR0b25zKSB7XHJcbiAgICAgICAgICAgIGJ0bi5vbkNsaWNrKHgsIHksIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxLCB0aGlzLnVubG9ja0xldmVsSW5kZXggKyAxLCAoaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxOdW1iZXIgPSBpbmRleCArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydEdhbWUodGhpcy5sZXZlbE51bWJlcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkcmF3TGV2ZWwobGV2ZWxCdG4sIGdhbWVMZXZlbERhdGEpIHtcclxuICAgICAgICBjb25zdCBjdXJyZW50TGV2ZWxJbmRleCA9IGxldmVsQnRuLmxldmVsRGF0YS5pbmRleCArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXg7XHJcbiAgICAgICAgY29uc3QgY3VycmVudExldmVsID0gY3VycmVudExldmVsSW5kZXggLSAxO1xyXG4gICAgICAgIGNvbnN0IG5leHRMZXZlbFBsYXkgPSB0aGlzLnVubG9ja0xldmVsSW5kZXggKyAxO1xyXG4gICAgICAgIGlmIChuZXh0TGV2ZWxQbGF5ID09PSBjdXJyZW50TGV2ZWwpIHtcclxuICAgICAgICAgICAgbGV2ZWxCdG4uYXBwbHlQdWxzZUVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3VycmVudExldmVsSW5kZXggPD0gdGhpcy5kYXRhLmxldmVscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1VubG9ja2VkTGV2ZWwoZ2FtZUxldmVsRGF0YSk7XHJcbiAgICAgICAgICAgIGxldmVsQnRuLmRyYXcodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCwgdGhpcy51bmxvY2tMZXZlbEluZGV4LCBnYW1lTGV2ZWxEYXRhLCB0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIERlYnVnZ2VyLkRlYnVnTW9kZVxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5kYXRhLmxldmVsc1tjdXJyZW50TGV2ZWxJbmRleCAtIDFdXHJcbiAgICAgICAgICAgICAgICAgICAgLmxldmVsTWV0YS5sZXZlbFR5cGUsIGxldmVsQnRuLmxldmVsRGF0YS54ICsgbGV2ZWxCdG4uYnRuU2l6ZSAvIDMuNSwgbGV2ZWxCdG4ubGV2ZWxEYXRhLnkgKyBsZXZlbEJ0bi5idG5TaXplIC8gMS4zKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbGV2ZWxCdG4gb2YgdGhpcy5sZXZlbEJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3TGV2ZWwobGV2ZWxCdG4sIHRoaXMuZ2FtZUxldmVsRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZG93bkJ1dHRvbihsZXZlbCkge1xyXG4gICAgICAgIGlmIChsZXZlbCAhPSB0aGlzLmxldmVsc1NlY3Rpb25Db3VudCAqIDEwIC0gMTApIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5uZXh0YnRuLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMucmlnaHRCdG5YLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnJpZ2h0QnRuWSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gdGhpcy5yaWdodEJ0blNpemUsIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMucmlnaHRCdG5TaXplKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRCdG5TaXplID4gMTApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRCdG5TaXplID0gdGhpcy5yaWdodEJ0blNpemUgLSAwLjAyNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0QnRuWSA9IHRoaXMucmlnaHRCdG5TaXplID4gMTAgPyAxLjI5OSA6IDEuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRCdG5TaXplID0gMTA7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRCdG5YID0gMC43O1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0QnRuWSA9IDEuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxldmVsICE9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYWNrYnRuLCB0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMubGVmdEJ0blgsIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMubGVmdEJ0blksIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMubGVmdEJ0blNpemUsIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMubGVmdEJ0blNpemUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0QnRuU2l6ZSA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRCdG5TaXplID0gdGhpcy5sZWZ0QnRuU2l6ZSAtIDAuMDI1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGVmdEJ0blkgPSB0aGlzLmxlZnRCdG5TaXplID4gMTAgPyAxLjI5OSA6IDEuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdEJ0blNpemUgPSAxMDtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0QnRuWCA9IDEwO1xyXG4gICAgICAgICAgICB0aGlzLmxlZnRCdG5ZID0gMS4zO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNoZWNrVW5sb2NrZWRMZXZlbChnYW1lTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgaWYgKGdhbWVMZXZlbERhdGEubGVuZ3RoICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBnYW1lIG9mIGdhbWVMZXZlbERhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVubG9ja0xldmVsSW5kZXggPCBwYXJzZUludChnYW1lLmxldmVsTnVtYmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWUuc3RhckNvdW50ID49IDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAodGhpcy51bmxvY2tMZXZlbEluZGV4ID0gcGFyc2VJbnQoZ2FtZS5sZXZlbE51bWJlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0R2FtZShsZXZlbF9udW1iZXIpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICBjb25zdCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0YS5sZXZlbHNbbGV2ZWxfbnVtYmVyXSxcclxuICAgICAgICAgICAgICAgIGxldmVsTnVtYmVyOiBsZXZlbF9udW1iZXIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IGxldmVsX251bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubG9nU2VsZWN0ZWRMZXZlbEV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayhnYW1lUGxheURhdGEsIFwiTGV2ZWxTZWxlY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBsb2dTZWxlY3RlZExldmVsRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRMZXZlbHREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb25cclxuICAgICAgICAgICAgICAgID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICA6IFwiXCIsXHJcbiAgICAgICAgICAgIGxldmVsX3NlbGVjdGVkOiB0aGlzLmxldmVsTnVtYmVyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRTZWxlY3RlZExldmVsRXZlbnQoc2VsZWN0ZWRMZXZlbHREYXRhKTtcclxuICAgIH1cclxuICAgIGRyYXdMZXZlbFNlbGVjdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLmRvd25CdXR0b24odGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5oYW5kbGVNb3VzZURvd24sIGZhbHNlKTtcclxuICAgICAgICAvLyB3aGVuIGFwcCBnb2VzIGJhY2tncm91bmQgIzJcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnBhdXNlUGxheUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgICAgIC8vLyBzd2lwZSBsaXN0ZW5lciAjM1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LCBmYWxzZSk7XHJcbiAgICAgICAgLy8gIzRcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5oYW5kbGVUb3VjaE1vdmUsIGZhbHNlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzLCBDTElDSywgaXNEb2N1bWVudFZpc2libGUgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciwgTW9uc3RlciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBDbG9zZUJ1dHRvbiwgTmV4dEJ1dHRvbiwgUmV0cnlCdXR0b24gfSBmcm9tIFwiQGJ1dHRvbnNcIjtcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzLCB9IGZyb20gXCJAY29tcG9zaXRpb25zXCI7XHJcbmltcG9ydCB7IEFVRElPX0lOVFJPLCBBVURJT19MRVZFTF9MT1NFLCBBVURJT19MRVZFTF9XSU4sIERFRkFVTFRfQkFDS0dST1VORF8xLCBQSU5fU1RBUl8xLCBQSU5fU1RBUl8yLCBQSU5fU1RBUl8zLCBXSU5fQkcsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGNsYXNzIExldmVsRW5kU2NlbmUge1xyXG4gICAgY2FudmFzO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgd2lkdGg7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQ7XHJcbiAgICBpZDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBtb25zdGVyO1xyXG4gICAgY2xvc2VCdXR0b247XHJcbiAgICByZXRyeUJ1dHRvbjtcclxuICAgIG5leHRCdXR0b247XHJcbiAgICBzdGFyQ291bnQ7XHJcbiAgICBjdXJyZW50TGV2ZWw7XHJcbiAgICBzd2l0Y2hUb0dhbWVwbGF5Q0I7XHJcbiAgICBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0I7XHJcbiAgICBkYXRhO1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgdGltZW91dHM7XHJcbiAgICBzdGFyRHJhd25Db3VudDtcclxuICAgIGlzTGFzdExldmVsO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBoZWlnaHQsIHdpZHRoLCBjb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbCwgc3dpdGNoVG9HYW1lcGxheUNCLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IsIGRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCBtb25zdGVyUGhhc2VOdW1iZXIsIHRoaXMuc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbik7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IgPSBzd2l0Y2hUb0dhbWVwbGF5Q0I7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IgPSBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0I7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnN0YXJEcmF3bkNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gbmV3IENsb3NlQnV0dG9uKGNvbnRleHQsIGNhbnZhcywgdGhpcy53aWR0aCAqIDAuMiAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMucmV0cnlCdXR0b24gPSBuZXcgUmV0cnlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy53aWR0aCAqIDAuNSAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBOZXh0QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGggKiAwLjggLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgLyAxLjI1KTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdGFyQ291bnQgPSBzdGFyQ291bnQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWc6IFdJTl9CRyxcclxuICAgICAgICAgICAgc3RhcjFJbWc6IFBJTl9TVEFSXzEsXHJcbiAgICAgICAgICAgIHN0YXIySW1nOiBQSU5fU1RBUl8yLFxyXG4gICAgICAgICAgICBzdGFyM0ltZzogUElOX1NUQVJfMyxcclxuICAgICAgICAgICAgd2luQmFja2dyb3VuZEltZzogREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJBbmltYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cEJnKCk7XHJcbiAgICAgICAgdGhpcy5pc0xhc3RMZXZlbCA9XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExldmVsICE9PVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmxldmVsc1t0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCAtIDFdLmxldmVsTWV0YS5sZXZlbE51bWJlciAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyQ291bnQgPj0gMjtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBCR19HUk9VUF9JTUdTLCBkcmF3IH0gPSBsb2FkRHluYW1pY0JnQXNzZXRzKHRoaXMuY3VycmVudExldmVsLCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgQkdfR1JPVVBfSU1HUywgZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGFyQ291bnQgPD0gMSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEb2N1bWVudFZpc2libGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oQVVESU9fTEVWRUxfTE9TRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvU3BpdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlzRG9jdW1lbnRWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX0xFVkVMX1dJTik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19JTlRSTyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmFja2dyb3VuZEltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKyB0aGlzLmhlaWdodCAqIDAuMTIpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5QnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXN0TGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFyQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIHsgZGVsYXk6IDUwMCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTAwMCwgY291bnQ6IDIgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTUwMCwgY291bnQ6IDMgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMudGltZW91dHMgPSBhbmltYXRpb25zLm1hcCgoYW5pbWF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPSBhbmltYXRpb24uY291bnQ7XHJcbiAgICAgICAgICAgIH0sIGFuaW1hdGlvbi5kZWxheSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3U3RhcnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDEgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjFJbWcsIHRoaXMud2lkdGggKiAwLjIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJDb3VudCA8PSAzICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJDb3VudCA+IDEgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyRHJhd25Db3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjJJbWcsIHRoaXMud2lkdGggKiAwLjUgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoICogMC4xOSwgdGhpcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDMgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5zdGFyM0ltZywgdGhpcy53aWR0aCAqIDAuODIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFRvTGV2ZWxTZWxlY3Rpb25DQihcIkxldmVsRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5yZXRyeUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgbGV0IGdhbWVQbGF5RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGEubGV2ZWxzW3RoaXMuY3VycmVudExldmVsXSxcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbE51bWJlcjogdGhpcy5jdXJyZW50TGV2ZWwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRMZXZlbE51bWJlcjogdGhpcy5jdXJyZW50TGV2ZWwsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIHBhc3Mgc2FtZSBkYXRhIGFzIGxldmVsIGlzIHNhbWVcclxuICAgICAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IoZ2FtZVBsYXlEYXRhLCBcIkxldmVsRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0xhc3RMZXZlbCAmJlxyXG4gICAgICAgICAgICB0aGlzLm5leHRCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgIGxldCBuZXh0ID0gTnVtYmVyKHRoaXMuY3VycmVudExldmVsKSArIDE7XHJcbiAgICAgICAgICAgIGxldCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiB7IC4uLnRoaXMuZGF0YS5sZXZlbHNbbmV4dF0sIGxldmVsTnVtYmVyOiBuZXh0IH0sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZExldmVsTnVtYmVyOiBuZXh0LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFRvR2FtZXBsYXlDQihnYW1lUGxheURhdGEsIFwiTGV2ZWxFbmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHBhdXNlQXVkaW9zID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChpc0RvY3VtZW50VmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJDb3VudCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19JTlRSTyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubW9uc3Rlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0cy5mb3JFYWNoKCh0aW1lb3V0KSA9PiBjbGVhclRpbWVvdXQodGltZW91dCkpO1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgQ0xPVURfNiwgQ0xPVURfNywgQ0xPVURfOCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBMb2FkaW5nU2NlbmUge1xyXG4gICAgY2FudmFzO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgd2lkdGg7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkO1xyXG4gICAgY2xvdWRYUG9zaXRpb24gPSAtNTAwO1xyXG4gICAgc3RvcENsb3VkTW92aW5nID0gZmFsc2U7XHJcbiAgICBjbG91ZE1vdmluZ1RpbWVPdXQgPSAwO1xyXG4gICAgcmVtb3ZlTG9hZGluZztcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHJlbW92ZUxvYWRpbmcpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZ1wiKTtcclxuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nID0gcmVtb3ZlTG9hZGluZztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGNsb3VkNjogQ0xPVURfNixcclxuICAgICAgICAgICAgY2xvdWQ3OiBDTE9VRF83LFxyXG4gICAgICAgICAgICBjbG91ZDg6IENMT1VEXzgsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmNsb3VkWFBvc2l0aW9uICs9IGRlbHRhVGltZSAqIDAuNzU7XHJcbiAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkTW92aW5nVGltZU91dCA+IDI5ODMpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjUgJiYgIXRoaXMuc3RvcENsb3VkTW92aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ICs9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ID4gMjAwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQ2xvdWRNb3ZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG91ZFhQb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdG9wQ2xvdWRNb3ZpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IDAgPyAwIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjYsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gMCA/IDAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuMDVcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjA1XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC42XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNlxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjVcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC40LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNywgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gLXRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gLXRoaXMud2lkdGggKiAwLjJcclxuICAgICAgICAgICAgICAgICAgICA/IC10aGlzLndpZHRoICogMC4yXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIDAgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMud2lkdGggKiAwLjQgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCAwICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgLXRoaXMud2lkdGggKiAwLjQgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLndpZHRoICogMC4wNSArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIC10aGlzLndpZHRoICogMC42ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLndpZHRoICogMC41ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC40KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCAtdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNiwgLXRoaXMud2lkdGggKiAwLjIgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdENsb3VkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2xvdWRYUG9zaXRpb24gPSAtNTAwO1xyXG4gICAgICAgIHRoaXMuc3RvcENsb3VkTW92aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgPSAwO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBQbGF5QnV0dG9uIH0gZnJvbSBcIkBidXR0b25zXCI7XHJcbmltcG9ydCB7IHRvZ2dsZURlYnVnTW9kZSwgVXRpbHMsIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCYWNrZ3JvdW5kLCBkZWZhdWx0QmdEcmF3aW5nIH0gZnJvbSBcIkBjb21wb3NpdGlvbnNcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VVc2VyQ2xpY2tlZCwgUFdBSW5zdGFsbFN0YXR1cywgREVGQVVMVF9CR19HUk9VUF9JTUdTLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IFJpdmVNb25zdGVyQ29tcG9uZW50IH0gZnJvbSBcIkBjb21wb25lbnRzL3JpdmVNb25zdGVyXCI7XHJcbmV4cG9ydCBjbGFzcyBTdGFydFNjZW5lIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBwaWNrZWRTdG9uZTtcclxuICAgIHB3YV9zdGF0dXM7XHJcbiAgICBmaXJlYmFzZV9hbmFseXRpY3M7XHJcbiAgICBpZDtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICByaXZlTW9uc3RlckVsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgYnV0dG9uQ29udGV4dDtcclxuICAgIHBsYXlCdXR0b247XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdGF0aWMgU2NlbmVOYW1lO1xyXG4gICAgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgdG9nZ2xlQnRuO1xyXG4gICAgcHdhX2luc3RhbGxfc3RhdHVzO1xyXG4gICAgdGl0bGVUZXh0RWxlbWVudDtcclxuICAgIHJpdmVNb25zdGVyO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBkYXRhLCBzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMucml2ZU1vbnN0ZXJFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyaXZlY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1idG5cIik7XHJcbiAgICAgICAgdGhpcy5yaXZlTW9uc3RlciA9IG5ldyBSaXZlTW9uc3RlckNvbXBvbmVudCh7XHJcbiAgICAgICAgICAgIHNyYzogXCIuL2Fzc2V0cy9tb25zdGVycml2ZS5yaXZcIixcclxuICAgICAgICAgICAgY2FudmFzOiB0aGlzLnJpdmVNb25zdGVyRWxlbWVudCxcclxuICAgICAgICAgICAgYXV0b3BsYXk6IHRydWUsXHJcbiAgICAgICAgICAgIHN0YXRlTWFjaGluZXM6IFwiU3RhdGUgTWFjaGluZSAxXCIsXHJcbiAgICAgICAgICAgIGZpdDogXCJjb250YWluXCIsXHJcbiAgICAgICAgICAgIGFsaWdubWVudDogXCJ0b3BDZW50ZXJcIixcclxuICAgICAgICAgICAgd2lkdGg6IHRoaXMuY2FuYXZzRWxlbWVudC53aWR0aCxcclxuICAgICAgICAgICAgaGVpZ2h0OiB0aGlzLmNhbmF2c0VsZW1lbnQuaGVpZ2h0LFxyXG4gICAgICAgICAgICBvbkxvYWQ6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucml2ZU1vbnN0ZXIucGxheShcIklkbGVcIik7IC8vIFN0YXJ0IHdpdGggdGhlIFwiSWRsZVwiIGFuaW1hdGlvblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24gPSBzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMucHdhX3N0YXR1cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBXQUluc3RhbGxTdGF0dXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuZGV2VG9nZ2xlKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVpbnN0YWxscHJvbXB0XCIsIHRoaXMuaGFuZGxlckluc3RhbGxQcm9tcHQpO1xyXG4gICAgICAgIHRoaXMuc2V0dXBCZygpO1xyXG4gICAgICAgIHRoaXMudGl0bGVUZXh0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVcIik7XHJcbiAgICAgICAgdGhpcy5nZW5lcmF0ZUdhbWVUaXRsZSgpO1xyXG4gICAgICAgIHRoaXMucml2ZU1vbnN0ZXJFbGVtZW50LnN0eWxlLnpJbmRleCA9ICc2JztcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBERUZBVUxUX0JHX0dST1VQX0lNR1MsIGRlZmF1bHRCZ0RyYXdpbmcpO1xyXG4gICAgfTtcclxuICAgIGRldlRvZ2dsZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdG9nZ2xlRGVidWdNb2RlKHRoaXMudG9nZ2xlQnRuKSk7XHJcbiAgICB9O1xyXG4gICAgZ2VuZXJhdGVHYW1lVGl0bGUgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy50aXRsZVRleHRFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5kYXRhLnRpdGxlO1xyXG4gICAgfTtcclxuICAgIGFuaW1hdGlvbiA9IChkZWx0YVRpbWUpID0+IHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmQ/LmRyYXcoKTtcclxuICAgICAgICAvLyB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy5wbGF5QnV0dG9uLmRyYXcoKTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVQbGF5QnV0dG9uKCkge1xyXG4gICAgICAgIHRoaXMucGxheUJ1dHRvbiA9IG5ldyBQbGF5QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC4zNSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gNyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGNvbnN0IHsgZXhjbHVkZVgsIGV4Y2x1ZGVZIH0gPSBVdGlscy5nZXRFeGNsdWRlZENvb3JkaW5hdGVzKHNlbGZFbGVtZW50LCAxNSk7XHJcbiAgICAgICAgaWYgKCEoeCA8IGV4Y2x1ZGVYICYmIHkgPCBleGNsdWRlWSkpIHtcclxuICAgICAgICAgICAgRmlyZWJhc2VJbnRlZ3JhdGlvbi5nZXRJbnN0YW5jZSgpLnNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50KCk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZmJxKFwidHJhY2tDdXN0b21cIiwgRmlyZWJhc2VVc2VyQ2xpY2tlZCwge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IFwiY2xpY2tcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICBzZWxmLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbihcIlN0YXJ0U2NlbmVcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgLy8gdGhpcy5tb25zdGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCB0aGlzLmhhbmRsZXJJbnN0YWxsUHJvbXB0LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVySW5zdGFsbFByb21wdCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5wd2FfaW5zdGFsbF9zdGF0dXMgPSBldmVudDtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzLCBcImZhbHNlXCIpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBBU1NFVFNfUEFUSF9GRU5DRSwgQVNTRVRTX1BBVEhfSElMTCwgQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFLCBBU1NFVFNfUEFUSF9UT1RFTSwgREVGQVVMVF9CQUNLR1JPVU5EXzEsIEZpcmViYXNlVXNlckNsaWNrZWQsIFBXQUluc3RhbGxTdGF0dXMsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgTGV2ZWxJbmRpY2F0b3JzLCBQcm9tcHRUZXh0LCBUaW1lclRpY2tpbmcsIFN0b25lSGFuZGxlciwgTW9uc3RlciwgfSBmcm9tIFwiQGNvbXBvbmVudHNcIjtcclxuaW1wb3J0IHsgUGxheUJ1dHRvbiB9IGZyb20gXCJAYnV0dG9uc1wiO1xyXG5pbXBvcnQgeyBsb2FkSW1hZ2VzLCB0b2dnbGVEZWJ1Z01vZGUgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5jb25zdCB0b2dnbGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1idG5cIik7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCAoZSkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oUFdBSW5zdGFsbFN0YXR1cywgXCJmYWxzZVwiKTtcclxufSk7XHJcbmV4cG9ydCBjbGFzcyBUZXN0R2FtZXBsYXlTY2VuZSB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBkYXRhO1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBtb25zdGVyO1xyXG4gICAgbGV2ZWxJbmRpY2F0b3I7XHJcbiAgICBwcm9tcHRUZXh0O1xyXG4gICAgdGltZXJUaWNraW5nO1xyXG4gICAgc3RvbmVIYW5kbGVyO1xyXG4gICAgcGlja2VkU3RvbmU7XHJcbiAgICBwd2Ffc3RhdHVzO1xyXG4gICAgZmlyZWJhc2VfYW5hbHl0aWNzO1xyXG4gICAgaWQ7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIGJ1dHRvbkNvbnRleHQ7XHJcbiAgICBvdXRjb21lO1xyXG4gICAgcGxheUJ1dHRvbjtcclxuICAgIGxldmVsU2VsZWN0aW9uU2NlbmU7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdGF0aWMgU2NlbmVOYW1lO1xyXG4gICAgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgY291bnRlciA9IDA7XHJcbiAgICB0dXRvcmlhbDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgZGF0YSwgZmlyZWJhc2VfYW5hbHl0aWNzLCBzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyID0gbmV3IE1vbnN0ZXIodGhpcy5jYW52YXMsIDApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKERhdGUubm93LCBcIiA6OjogXCIsIHBlcmZvcm1hbmNlLm5vdyk7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24gPSBzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIgPSBuZXcgU3RvbmVIYW5kbGVyKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIDIsIHRoaXMuZGF0YS5sZXZlbHNbOTJdLCB0aGlzLmRhdGEuZmVlZGJhY2tBdWRpb3MsIHRoaXMudGltZXJUaWNraW5nKTtcclxuICAgICAgICAvLy8gdGVzdGluZyBwcm9tcHRleHJcclxuICAgICAgICB0aGlzLnByb21wdFRleHQgPSBuZXcgUHJvbXB0VGV4dCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5kYXRhLmxldmVsc1s5Ml0ucHV6emxlc1syXSwgdGhpcy5kYXRhLmxldmVsc1s5Ml0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZyA9IG5ldyBUaW1lclRpY2tpbmcodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMudGltZU92ZXJDYWxsYmFjayk7XHJcbiAgICAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vL2VuZFxyXG4gICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3IgPSBuZXcgTGV2ZWxJbmRpY2F0b3JzKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIDApO1xyXG4gICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3Iuc2V0SW5kaWNhdG9ycygzKTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsLnVwZGF0ZVRhcmdldFN0b25lUG9zaXRpb25zKFsxMDAsIDEwMF0pO1xyXG4gICAgICAgIHRoaXMucHdhX3N0YXR1cyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFBXQUluc3RhbGxTdGF0dXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuZGV2VG9nZ2xlKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVQbGF5QnV0dG9uKCk7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZV9hbmFseXRpY3MgPSBmaXJlYmFzZV9hbmFseXRpY3M7XHJcbiAgICAgICAgdGhpcy5hbmltYXRpb24oMCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIHBpbGxlckltZzogQVNTRVRTX1BBVEhfVE9URU0sXHJcbiAgICAgICAgICAgIGJnSW1nOiBERUZBVUxUX0JBQ0tHUk9VTkRfMSxcclxuICAgICAgICAgICAgaGlsbEltZzogQVNTRVRTX1BBVEhfSElMTCxcclxuICAgICAgICAgICAgZmVuY2hJbWc6IEFTU0VUU19QQVRIX0ZFTkNFLFxyXG4gICAgICAgICAgICBwcm9maWxlTW9uc3RlcjogQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHRpbWVPdmVyQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gdGltZSB0byBsb2FkIG5ldyBwdXp6bGVcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZy5yZWFkeVRpbWVyKCk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcuc3RhcnRUaW1lcigpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nLmlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5jb3VudGVyID09IDUpXHJcbiAgICAgICAgICAgIHRoaXMuY291bnRlciA9IDA7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvci5zZXRJbmRpY2F0b3JzKHRoaXMuY291bnRlcisrKTtcclxuICAgIH07XHJcbiAgICBkZXZUb2dnbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgdG9nZ2xlQnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB0b2dnbGVEZWJ1Z01vZGUodG9nZ2xlQnRuKSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VVcCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHZhciByZWN0ID0gc2VsZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBpZiAoTWF0aC5zcXJ0KCh4IC0gc2VsZi5tb25zdGVyLnggLSBzZWxmLmNhbnZhcy53aWR0aCAvIDQpICpcclxuICAgICAgICAgICAgKHggLSBzZWxmLm1vbnN0ZXIueCAtIHNlbGYuY2FudmFzLndpZHRoIC8gNCkgK1xyXG4gICAgICAgICAgICAoeSAtIHNlbGYubW9uc3Rlci55IC0gc2VsZi5jYW52YXMuaGVpZ2h0IC8gMi43KSAqXHJcbiAgICAgICAgICAgICAgICAoeSAtIHNlbGYubW9uc3Rlci55IC0gc2VsZi5jYW52YXMuaGVpZ2h0IC8gMi43KSkgPD0gNjApIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHNlbGYubW9uc3Rlci5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2VsZi5waWNrZWRTdG9uZSA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIC8vLy8vLy8vLyBzZW5kaW5nIGRhdGEgdG8gc3RvbmUgY29uZmlnXHJcbiAgICAgICAgZm9yIChsZXQgc2Mgb2Ygc2VsZi5zdG9uZUhhbmRsZXIuZm9pbFN0b25lcykge1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5zcXJ0KCh4IC0gc2MueCkgKiAoeCAtIHNjLngpICsgKHkgLSBzYy55KSAqICh5IC0gc2MueSkpIDw9IDQwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gc2M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8vLy8vLyBlbmQgb2Ygc3RvbmUgZGF0YSBzZW5kaW5nXHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmIChzZWxmLnBpY2tlZFN0b25lKSB7XHJcbiAgICAgICAgICAgIHNlbGYubW9uc3Rlci5jaGFuZ2VUb0RyYWdBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgc2VsZi5waWNrZWRTdG9uZS54ID0geDtcclxuICAgICAgICAgICAgc2VsZi5waWNrZWRTdG9uZS55ID0geTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYW5pbWF0aW9uID0gKGRlbHRhVGltZSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmJnSW1nLCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMucGlsbGVySW1nLCB0aGlzLndpZHRoICogMC42LCB0aGlzLmhlaWdodCAvIDYsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuZmVuY2hJbWcsIC10aGlzLndpZHRoICogMC40LCB0aGlzLmhlaWdodCAvIDMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuaGlsbEltZywgLXRoaXMud2lkdGggKiAwLjI1LCB0aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gXCJib2xkIDQwcHggQXJpYWxcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChcIlRlc3RpbmcgR2FtZXBsYXlcIiwgdGhpcy53aWR0aCAqIDAuNSwgdGhpcy5oZWlnaHQgLyAxMCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci51cGRhdGUoZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgdGhpcy5wcm9tcHRUZXh0LmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9yLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy50aW1lclRpY2tpbmcudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoKSB7IH1cclxuICAgIGNyZWF0ZVBsYXlCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5wbGF5QnV0dG9uID0gbmV3IFBsYXlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjM1LCB0aGlzLmNhbnZhcy5oZWlnaHQgLyA3KTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgdG91Y2ggPSBlLnRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgIHZhciBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoXCJtb3VzZWRvd25cIiwge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50WDogdG91Y2guY2xpZW50WCxcclxuICAgICAgICAgICAgICAgIGNsaWVudFk6IHRvdWNoLmNsaWVudFksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKS5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICB2YXIgdG91Y2ggPSBlLnRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgIHZhciBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoXCJtb3VzZW1vdmVcIiwge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50WDogdG91Y2guY2xpZW50WCxcclxuICAgICAgICAgICAgICAgIGNsaWVudFk6IHRvdWNoLmNsaWVudFksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKS5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICAgICAgICAgIHZhciBtb3VzZUV2ZW50ID0gbmV3IE1vdXNlRXZlbnQoXCJtb3VzZXVwXCIsIHtcclxuICAgICAgICAgICAgICAgIGNsaWVudFg6IHRvdWNoLmNsaWVudFgsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRZOiB0b3VjaC5jbGllbnRZLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikuZGlzcGF0Y2hFdmVudChtb3VzZUV2ZW50KTtcclxuICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmIChzZWxmLnBsYXlCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICBzZWxmLmZpcmViYXNlX2FuYWx5dGljc1xyXG4gICAgICAgICAgICAgICAgPyBzZWxmLmZpcmViYXNlX2FuYWx5dGljcy5sb2dFdmVudChGaXJlYmFzZVVzZXJDbGlja2VkLCBcImNsaWNrXCIpXHJcbiAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZmJxKFwidHJhY2tDdXN0b21cIiwgRmlyZWJhc2VVc2VyQ2xpY2tlZCwge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IFwiY2xpY2tcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRvZ2dsZUJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHNlbGYuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBfZ2V0UHJvdmlkZXIsIGdldEFwcCwgX3JlZ2lzdGVyQ29tcG9uZW50LCByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuaW1wb3J0IHsgRXJyb3JGYWN0b3J5LCBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzLCBGaXJlYmFzZUVycm9yLCBpc0luZGV4ZWREQkF2YWlsYWJsZSwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgaXNCcm93c2VyRXh0ZW5zaW9uLCBhcmVDb29raWVzRW5hYmxlZCwgZ2V0TW9kdWxhckluc3RhbmNlLCBkZWVwRXF1YWwgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCAnQGZpcmViYXNlL2luc3RhbGxhdGlvbnMnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVHlwZSBjb25zdGFudCBmb3IgRmlyZWJhc2UgQW5hbHl0aWNzLlxyXG4gKi9cclxuY29uc3QgQU5BTFlUSUNTX1RZUEUgPSAnYW5hbHl0aWNzJztcclxuLy8gS2V5IHRvIGF0dGFjaCBGSUQgdG8gaW4gZ3RhZyBwYXJhbXMuXHJcbmNvbnN0IEdBX0ZJRF9LRVkgPSAnZmlyZWJhc2VfaWQnO1xyXG5jb25zdCBPUklHSU5fS0VZID0gJ29yaWdpbic7XHJcbmNvbnN0IEZFVENIX1RJTUVPVVRfTUlMTElTID0gNjAgKiAxMDAwO1xyXG5jb25zdCBEWU5BTUlDX0NPTkZJR19VUkwgPSAnaHR0cHM6Ly9maXJlYmFzZS5nb29nbGVhcGlzLmNvbS92MWFscGhhL3Byb2plY3RzLy0vYXBwcy97YXBwLWlkfS93ZWJDb25maWcnO1xyXG5jb25zdCBHVEFHX1VSTCA9ICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignQGZpcmViYXNlL2FuYWx5dGljcycpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBFUlJPUlMgPSB7XHJcbiAgICBbXCJhbHJlYWR5LWV4aXN0c1wiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfRVhJU1RTICovXTogJ0EgRmlyZWJhc2UgQW5hbHl0aWNzIGluc3RhbmNlIHdpdGggdGhlIGFwcElkIHskaWR9ICcgK1xyXG4gICAgICAgICcgYWxyZWFkeSBleGlzdHMuICcgK1xyXG4gICAgICAgICdPbmx5IG9uZSBGaXJlYmFzZSBBbmFseXRpY3MgaW5zdGFuY2UgY2FuIGJlIGNyZWF0ZWQgZm9yIGVhY2ggYXBwSWQuJyxcclxuICAgIFtcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEICovXTogJ2luaXRpYWxpemVBbmFseXRpY3MoKSBjYW5ub3QgYmUgY2FsbGVkIGFnYWluIHdpdGggZGlmZmVyZW50IG9wdGlvbnMgdGhhbiB0aG9zZSAnICtcclxuICAgICAgICAnaXQgd2FzIGluaXRpYWxseSBjYWxsZWQgd2l0aC4gSXQgY2FuIGJlIGNhbGxlZCBhZ2FpbiB3aXRoIHRoZSBzYW1lIG9wdGlvbnMgdG8gJyArXHJcbiAgICAgICAgJ3JldHVybiB0aGUgZXhpc3RpbmcgaW5zdGFuY2UsIG9yIGdldEFuYWx5dGljcygpIGNhbiBiZSB1c2VkICcgK1xyXG4gICAgICAgICd0byBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIGFscmVhZHktaW50aWFsaXplZCBpbnN0YW5jZS4nLFxyXG4gICAgW1wiYWxyZWFkeS1pbml0aWFsaXplZC1zZXR0aW5nc1wiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfSU5JVElBTElaRURfU0VUVElOR1MgKi9dOiAnRmlyZWJhc2UgQW5hbHl0aWNzIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQuJyArXHJcbiAgICAgICAgJ3NldHRpbmdzKCkgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGluaXRpYWxpemluZyBhbnkgQW5hbHl0aWNzIGluc3RhbmNlJyArXHJcbiAgICAgICAgJ29yIGl0IHdpbGwgaGF2ZSBubyBlZmZlY3QuJyxcclxuICAgIFtcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBBbmFseXRpY3NFcnJvci5JTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovXTogJ0ZpcmViYXNlIEFuYWx5dGljcyBJbnRlcm9wIENvbXBvbmVudCBmYWlsZWQgdG8gaW5zdGFudGlhdGU6IHskcmVhc29ufScsXHJcbiAgICBbXCJpbnZhbGlkLWFuYWx5dGljcy1jb250ZXh0XCIgLyogQW5hbHl0aWNzRXJyb3IuSU5WQUxJRF9BTkFMWVRJQ1NfQ09OVEVYVCAqL106ICdGaXJlYmFzZSBBbmFseXRpY3MgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50LiAnICtcclxuICAgICAgICAnV3JhcCBpbml0aWFsaXphdGlvbiBvZiBhbmFseXRpY3MgaW4gYW5hbHl0aWNzLmlzU3VwcG9ydGVkKCkgJyArXHJcbiAgICAgICAgJ3RvIHByZXZlbnQgaW5pdGlhbGl6YXRpb24gaW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnRzLiBEZXRhaWxzOiB7JGVycm9ySW5mb30nLFxyXG4gICAgW1wiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5ERVhFRERCX1VOQVZBSUxBQkxFICovXTogJ0luZGV4ZWREQiB1bmF2YWlsYWJsZSBvciByZXN0cmljdGVkIGluIHRoaXMgZW52aXJvbm1lbnQuICcgK1xyXG4gICAgICAgICdXcmFwIGluaXRpYWxpemF0aW9uIG9mIGFuYWx5dGljcyBpbiBhbmFseXRpY3MuaXNTdXBwb3J0ZWQoKSAnICtcclxuICAgICAgICAndG8gcHJldmVudCBpbml0aWFsaXphdGlvbiBpbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudHMuIERldGFpbHM6IHskZXJyb3JJbmZvfScsXHJcbiAgICBbXCJmZXRjaC10aHJvdHRsZVwiIC8qIEFuYWx5dGljc0Vycm9yLkZFVENIX1RIUk9UVExFICovXTogJ1RoZSBjb25maWcgZmV0Y2ggcmVxdWVzdCB0aW1lZCBvdXQgd2hpbGUgaW4gYW4gZXhwb25lbnRpYWwgYmFja29mZiBzdGF0ZS4nICtcclxuICAgICAgICAnIFVuaXggdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyB3aGVuIGZldGNoIHJlcXVlc3QgdGhyb3R0bGluZyBlbmRzOiB7JHRocm90dGxlRW5kVGltZU1pbGxpc30uJyxcclxuICAgIFtcImNvbmZpZy1mZXRjaC1mYWlsZWRcIiAvKiBBbmFseXRpY3NFcnJvci5DT05GSUdfRkVUQ0hfRkFJTEVEICovXTogJ0R5bmFtaWMgY29uZmlnIGZldGNoIGZhaWxlZDogW3skaHR0cFN0YXR1c31dIHskcmVzcG9uc2VNZXNzYWdlfScsXHJcbiAgICBbXCJuby1hcGkta2V5XCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBJX0tFWSAqL106ICdUaGUgXCJhcGlLZXlcIiBmaWVsZCBpcyBlbXB0eSBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBGaXJlYmFzZSBBbmFseXRpY3MgcmVxdWlyZXMgdGhpcyBmaWVsZCB0bycgK1xyXG4gICAgICAgICdjb250YWluIGEgdmFsaWQgQVBJIGtleS4nLFxyXG4gICAgW1wibm8tYXBwLWlkXCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBQX0lEICovXTogJ1RoZSBcImFwcElkXCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gRmlyZWJhc2UgQW5hbHl0aWNzIHJlcXVpcmVzIHRoaXMgZmllbGQgdG8nICtcclxuICAgICAgICAnY29udGFpbiBhIHZhbGlkIGFwcCBJRC4nLFxyXG4gICAgW1wibm8tY2xpZW50LWlkXCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQ0xJRU5UX0lEICovXTogJ1RoZSBcImNsaWVudF9pZFwiIGZpZWxkIGlzIGVtcHR5LicsXHJcbiAgICBbXCJpbnZhbGlkLWd0YWctcmVzb3VyY2VcIiAvKiBBbmFseXRpY3NFcnJvci5JTlZBTElEX0dUQUdfUkVTT1VSQ0UgKi9dOiAnVHJ1c3RlZCBUeXBlcyBkZXRlY3RlZCBhbiBpbnZhbGlkIGd0YWcgcmVzb3VyY2U6IHskZ3RhZ1VSTH0uJ1xyXG59O1xyXG5jb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeSgnYW5hbHl0aWNzJywgJ0FuYWx5dGljcycsIEVSUk9SUyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBWZXJpZmllcyBhbmQgY3JlYXRlcyBhIFRydXN0ZWRTY3JpcHRVUkwuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVHdGFnVHJ1c3RlZFR5cGVzU2NyaXB0VVJMKHVybCkge1xyXG4gICAgaWYgKCF1cmwuc3RhcnRzV2l0aChHVEFHX1VSTCkpIHtcclxuICAgICAgICBjb25zdCBlcnIgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtZ3RhZy1yZXNvdXJjZVwiIC8qIEFuYWx5dGljc0Vycm9yLklOVkFMSURfR1RBR19SRVNPVVJDRSAqLywge1xyXG4gICAgICAgICAgICBndGFnVVJMOiB1cmxcclxuICAgICAgICB9KTtcclxuICAgICAgICBsb2dnZXIud2FybihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybDtcclxufVxyXG4vKipcclxuICogTWFrZXNoaWZ0IHBvbHlmaWxsIGZvciBQcm9taXNlLmFsbFNldHRsZWQoKS4gUmVzb2x2ZXMgd2hlbiBhbGwgcHJvbWlzZXNcclxuICogaGF2ZSBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBwcm9taXNlcyBBcnJheSBvZiBwcm9taXNlcyB0byB3YWl0IGZvci5cclxuICovXHJcbmZ1bmN0aW9uIHByb21pc2VBbGxTZXR0bGVkKHByb21pc2VzKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMubWFwKHByb21pc2UgPT4gcHJvbWlzZS5jYXRjaChlID0+IGUpKSk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBUcnVzdGVkVHlwZVBvbGljeSBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBydWxlcyBwYXNzZWQgYXMgcG9saWN5T3B0aW9ucy5cclxuICpcclxuICogQHBhcmFtIHBvbGljeU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcG9saWN5XHJcbiAqIEBwYXJhbSBwb2xpY3lPcHRpb25zIE9iamVjdCBjb250YWluaW5nIGltcGxlbWVudGF0aW9ucyBvZiBpbnN0YW5jZSBtZXRob2RzIGZvciBUcnVzdGVkVHlwZXNQb2xpY3ksIHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RydXN0ZWRUeXBlUG9saWN5I2luc3RhbmNlX21ldGhvZHNcclxuICogfCB0aGUgVHJ1c3RlZFR5cGVQb2xpY3kgcmVmZXJlbmNlIGRvY3VtZW50YXRpb259LlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5KHBvbGljeU5hbWUsIHBvbGljeU9wdGlvbnMpIHtcclxuICAgIC8vIENyZWF0ZSBhIFRydXN0ZWRUeXBlcyBwb2xpY3kgdGhhdCB3ZSBjYW4gdXNlIGZvciB1cGRhdGluZyBzcmNcclxuICAgIC8vIHByb3BlcnRpZXNcclxuICAgIGxldCB0cnVzdGVkVHlwZXNQb2xpY3k7XHJcbiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xyXG4gICAgICAgIHRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHBvbGljeU5hbWUsIHBvbGljeU9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydXN0ZWRUeXBlc1BvbGljeTtcclxufVxyXG4vKipcclxuICogSW5zZXJ0cyBndGFnIHNjcmlwdCB0YWcgaW50byB0aGUgcGFnZSB0byBhc3luY2hyb25vdXNseSBkb3dubG9hZCBndGFnLlxyXG4gKiBAcGFyYW0gZGF0YUxheWVyTmFtZSBOYW1lIG9mIGRhdGFsYXllciAobW9zdCBvZnRlbiB0aGUgZGVmYXVsdCwgXCJfZGF0YUxheWVyXCIpLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5zZXJ0U2NyaXB0VGFnKGRhdGFMYXllck5hbWUsIG1lYXN1cmVtZW50SWQpIHtcclxuICAgIGNvbnN0IHRydXN0ZWRUeXBlc1BvbGljeSA9IGNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSgnZmlyZWJhc2UtanMtc2RrLXBvbGljeScsIHtcclxuICAgICAgICBjcmVhdGVTY3JpcHRVUkw6IGNyZWF0ZUd0YWdUcnVzdGVkVHlwZXNTY3JpcHRVUkxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAvLyBXZSBhcmUgbm90IHByb3ZpZGluZyBhbiBhbmFseXRpY3NJZCBpbiB0aGUgVVJMIGJlY2F1c2UgaXQgd291bGQgdHJpZ2dlciBhIGBwYWdlX3ZpZXdgXHJcbiAgICAvLyB3aXRob3V0IGZpZC4gV2Ugd2lsbCBpbml0aWFsaXplIGdhLWlkIHVzaW5nIGd0YWcgKGNvbmZpZykgY29tbWFuZCB0b2dldGhlciB3aXRoIGZpZC5cclxuICAgIGNvbnN0IGd0YWdTY3JpcHRVUkwgPSBgJHtHVEFHX1VSTH0/bD0ke2RhdGFMYXllck5hbWV9JmlkPSR7bWVhc3VyZW1lbnRJZH1gO1xyXG4gICAgc2NyaXB0LnNyYyA9IHRydXN0ZWRUeXBlc1BvbGljeVxyXG4gICAgICAgID8gdHJ1c3RlZFR5cGVzUG9saWN5ID09PSBudWxsIHx8IHRydXN0ZWRUeXBlc1BvbGljeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZVNjcmlwdFVSTChndGFnU2NyaXB0VVJMKVxyXG4gICAgICAgIDogZ3RhZ1NjcmlwdFVSTDtcclxuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbn1cclxuLyoqXHJcbiAqIEdldCByZWZlcmVuY2UgdG8sIG9yIGNyZWF0ZSwgZ2xvYmFsIGRhdGFsYXllci5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBkYXRhbGF5ZXIgKG1vc3Qgb2Z0ZW4gdGhlIGRlZmF1bHQsIFwiX2RhdGFMYXllclwiKS5cclxuICovXHJcbmZ1bmN0aW9uIGdldE9yQ3JlYXRlRGF0YUxheWVyKGRhdGFMYXllck5hbWUpIHtcclxuICAgIC8vIENoZWNrIGZvciBleGlzdGluZyBkYXRhTGF5ZXIgYW5kIGNyZWF0ZSBpZiBuZWVkZWQuXHJcbiAgICBsZXQgZGF0YUxheWVyID0gW107XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh3aW5kb3dbZGF0YUxheWVyTmFtZV0pKSB7XHJcbiAgICAgICAgZGF0YUxheWVyID0gd2luZG93W2RhdGFMYXllck5hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93W2RhdGFMYXllck5hbWVdID0gZGF0YUxheWVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGFMYXllcjtcclxufVxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGxvZ2ljIHdoZW4gZ3RhZyBpcyBjYWxsZWQgd2l0aCAnY29uZmlnJyBjb21tYW5kLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0NvcmUgQmFzaWMgZ3RhZyBmdW5jdGlvbiB0aGF0IGp1c3QgYXBwZW5kcyB0byBkYXRhTGF5ZXIuXHJcbiAqIEBwYXJhbSBpbml0aWFsaXphdGlvblByb21pc2VzTWFwIE1hcCBvZiBhcHBJZHMgdG8gdGhlaXIgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0IEFycmF5IG9mIGR5bmFtaWMgY29uZmlnIGZldGNoIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZFRvQXBwSWQgTWFwIG9mIEdBIG1lYXN1cmVtZW50SURzIHRvIGNvcnJlc3BvbmRpbmcgRmlyZWJhc2UgYXBwSWQuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkIEdBIE1lYXN1cmVtZW50IElEIHRvIHNldCBjb25maWcgZm9yLlxyXG4gKiBAcGFyYW0gZ3RhZ1BhcmFtcyBHdGFnIGNvbmZpZyBwYXJhbXMgdG8gc2V0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ3RhZ09uQ29uZmlnKGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcykge1xyXG4gICAgLy8gSWYgY29uZmlnIGlzIGFscmVhZHkgZmV0Y2hlZCwgd2Uga25vdyB0aGUgYXBwSWQgYW5kIGNhbiB1c2UgaXQgdG8gbG9vayB1cCB3aGF0IEZJRCBwcm9taXNlIHdlXHJcbiAgICAvLy8gYXJlIHdhaXRpbmcgZm9yLCBhbmQgd2FpdCBvbmx5IG9uIHRoYXQgb25lLlxyXG4gICAgY29uc3QgY29ycmVzcG9uZGluZ0FwcElkID0gbWVhc3VyZW1lbnRJZFRvQXBwSWRbbWVhc3VyZW1lbnRJZF07XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmIChjb3JyZXNwb25kaW5nQXBwSWQpIHtcclxuICAgICAgICAgICAgYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFtjb3JyZXNwb25kaW5nQXBwSWRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgY29uZmlnIGlzIG5vdCBmZXRjaGVkIHlldCwgd2FpdCBmb3IgYWxsIGNvbmZpZ3MgKHdlIGRvbid0IGtub3cgd2hpY2ggb25lIHdlIG5lZWQpIGFuZFxyXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBhcHBJZCAoaWYgYW55KSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgbWVhc3VyZW1lbnRJZC4gSWYgdGhlcmUgaXMgb25lLCB3YWl0IG9uXHJcbiAgICAgICAgICAgIC8vIHRoYXQgYXBwSWQncyBpbml0aWFsaXphdGlvbiBwcm9taXNlLiBJZiB0aGVyZSBpcyBub25lLCBwcm9taXNlIHJlc29sdmVzIGFuZCBndGFnXHJcbiAgICAgICAgICAgIC8vIGNhbGwgZ29lcyB0aHJvdWdoLlxyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljQ29uZmlnUmVzdWx0cyA9IGF3YWl0IHByb21pc2VBbGxTZXR0bGVkKGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QpO1xyXG4gICAgICAgICAgICBjb25zdCBmb3VuZENvbmZpZyA9IGR5bmFtaWNDb25maWdSZXN1bHRzLmZpbmQoY29uZmlnID0+IGNvbmZpZy5tZWFzdXJlbWVudElkID09PSBtZWFzdXJlbWVudElkKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kQ29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2ZvdW5kQ29uZmlnLmFwcElkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgfVxyXG4gICAgZ3RhZ0NvcmUoXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMpO1xyXG59XHJcbi8qKlxyXG4gKiBXcmFwcGVkIGd0YWcgbG9naWMgd2hlbiBndGFnIGlzIGNhbGxlZCB3aXRoICdldmVudCcgY29tbWFuZC5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWQgR0EgTWVhc3VyZW1lbnQgSUQgdG8gbG9nIGV2ZW50IHRvLlxyXG4gKiBAcGFyYW0gZ3RhZ1BhcmFtcyBQYXJhbXMgdG8gbG9nIHdpdGggdGhpcyBldmVudC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGd0YWdPbkV2ZW50KGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGxldCBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yID0gW107XHJcbiAgICAgICAgLy8gSWYgdGhlcmUncyBhICdzZW5kX3RvJyBwYXJhbSwgY2hlY2sgaWYgYW55IElEIHNwZWNpZmllZCBtYXRjaGVzXHJcbiAgICAgICAgLy8gYW4gaW5pdGlhbGl6ZUlkcygpIHByb21pc2Ugd2UgYXJlIHdhaXRpbmcgZm9yLlxyXG4gICAgICAgIGlmIChndGFnUGFyYW1zICYmIGd0YWdQYXJhbXNbJ3NlbmRfdG8nXSkge1xyXG4gICAgICAgICAgICBsZXQgZ2FTZW5kVG9MaXN0ID0gZ3RhZ1BhcmFtc1snc2VuZF90byddO1xyXG4gICAgICAgICAgICAvLyBNYWtlIGl0IGFuIGFycmF5IGlmIGlzIGlzbid0LCBzbyBpdCBjYW4gYmUgZGVhbHQgd2l0aCB0aGUgc2FtZSB3YXkuXHJcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShnYVNlbmRUb0xpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICBnYVNlbmRUb0xpc3QgPSBbZ2FTZW5kVG9MaXN0XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBDaGVja2luZyAnc2VuZF90bycgZmllbGRzIHJlcXVpcmVzIGhhdmluZyBhbGwgbWVhc3VyZW1lbnQgSUQgcmVzdWx0cyBiYWNrIGZyb21cclxuICAgICAgICAgICAgLy8gdGhlIGR5bmFtaWMgY29uZmlnIGZldGNoLlxyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljQ29uZmlnUmVzdWx0cyA9IGF3YWl0IHByb21pc2VBbGxTZXR0bGVkKGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbmRUb0lkIG9mIGdhU2VuZFRvTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQW55IGZldGNoZWQgZHluYW1pYyBtZWFzdXJlbWVudCBJRCB0aGF0IG1hdGNoZXMgdGhpcyAnc2VuZF90bycgSURcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kQ29uZmlnID0gZHluYW1pY0NvbmZpZ1Jlc3VsdHMuZmluZChjb25maWcgPT4gY29uZmlnLm1lYXN1cmVtZW50SWQgPT09IHNlbmRUb0lkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxpemF0aW9uUHJvbWlzZSA9IGZvdW5kQ29uZmlnICYmIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbZm91bmRDb25maWcuYXBwSWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxpemF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IucHVzaChpbml0aWFsaXphdGlvblByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm91bmQgYW4gaXRlbSBpbiAnc2VuZF90bycgdGhhdCBpcyBub3QgYXNzb2NpYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpcmVjdGx5IHdpdGggYW4gRklELCBwb3NzaWJseSBhIGdyb3VwLiAgRW1wdHkgdGhpcyBhcnJheSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBleGl0IHRoZSBsb29wIGVhcmx5LCBhbmQgbGV0IGl0IGdldCBwb3B1bGF0ZWQgYmVsb3cuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSB1bnBvcHVsYXRlZCBpZiB0aGVyZSB3YXMgbm8gJ3NlbmRfdG8nIGZpZWxkICwgb3JcclxuICAgICAgICAvLyBpZiBub3QgYWxsIGVudHJpZXMgaW4gdGhlICdzZW5kX3RvJyBmaWVsZCBjb3VsZCBiZSBtYXBwZWQgdG9cclxuICAgICAgICAvLyBhIEZJRC4gSW4gdGhlc2UgY2FzZXMsIHdhaXQgb24gYWxsIHBlbmRpbmcgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAgICAgICAgaWYgKGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IgPSBPYmplY3QudmFsdWVzKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSdW4gY29yZSBndGFnIGZ1bmN0aW9uIHdpdGggYXJncyBhZnRlciBhbGwgcmVsZXZhbnQgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICAvLyBwcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQuXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvcik7XHJcbiAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cDovL2IvMTQxMzcwNDQ5IC0gdGhpcmQgYXJndW1lbnQgY2Fubm90IGJlIHVuZGVmaW5lZC5cclxuICAgICAgICBndGFnQ29yZShcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8sIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMgfHwge30pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFdyYXBzIGEgc3RhbmRhcmQgZ3RhZyBmdW5jdGlvbiB3aXRoIGV4dHJhIGNvZGUgdG8gd2FpdCBmb3IgY29tcGxldGlvbiBvZlxyXG4gKiByZWxldmFudCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBiZWZvcmUgc2VuZGluZyByZXF1ZXN0cy5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcEd0YWcoZ3RhZ0NvcmUsIFxyXG4vKipcclxuICogQWxsb3dzIHdyYXBwZWQgZ3RhZyBjYWxscyB0byB3YWl0IG9uIHdoaWNoZXZlciBpbnRpYWxpemF0aW9uIHByb21pc2VzIGFyZSByZXF1aXJlZCxcclxuICogZGVwZW5kaW5nIG9uIHRoZSBjb250ZW50cyBvZiB0aGUgZ3RhZyBwYXJhbXMnIGBzZW5kX3RvYCBmaWVsZCwgaWYgYW55LlxyXG4gKi9cclxuaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgXHJcbi8qKlxyXG4gKiBXcmFwcGVkIGd0YWcgY2FsbHMgc29tZXRpbWVzIHJlcXVpcmUgYWxsIGR5bmFtaWMgY29uZmlnIGZldGNoZXMgdG8gaGF2ZSByZXR1cm5lZFxyXG4gKiBiZWZvcmUgZGV0ZXJtaW5pbmcgd2hhdCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyAod2hpY2ggaW5jbHVkZSBGSURzKSB0byB3YWl0IGZvci5cclxuICovXHJcbmR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIFxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGNvbmZpZyBjYWxscyBjYW4gbmFycm93IGRvd24gd2hpY2ggaW5pdGlhbGl6YXRpb24gcHJvbWlzZSAod2l0aCBGSUQpXHJcbiAqIHRvIHdhaXQgZm9yIGlmIHRoZSBtZWFzdXJlbWVudElkIGlzIGFscmVhZHkgZmV0Y2hlZCwgYnkgZ2V0dGluZyB0aGUgY29ycmVzcG9uZGluZyBhcHBJZCxcclxuICogd2hpY2ggaXMgdGhlIGtleSBmb3IgdGhlIGluaXRpYWxpemF0aW9uIHByb21pc2VzIG1hcC5cclxuICovXHJcbm1lYXN1cmVtZW50SWRUb0FwcElkKSB7XHJcbiAgICAvKipcclxuICAgICAqIFdyYXBwZXIgYXJvdW5kIGd0YWcgdGhhdCBlbnN1cmVzIEZJRCBpcyBzZW50IHdpdGggZ3RhZyBjYWxscy5cclxuICAgICAqIEBwYXJhbSBjb21tYW5kIEd0YWcgY29tbWFuZCB0eXBlLlxyXG4gICAgICogQHBhcmFtIGlkT3JOYW1lT3JQYXJhbXMgTWVhc3VyZW1lbnQgSUQgaWYgY29tbWFuZCBpcyBFVkVOVC9DT05GSUcsIHBhcmFtcyBpZiBjb21tYW5kIGlzIFNFVC5cclxuICAgICAqIEBwYXJhbSBndGFnUGFyYW1zIFBhcmFtcyBpZiBldmVudCBpcyBFVkVOVC9DT05GSUcuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGd0YWdXcmFwcGVyKGNvbW1hbmQsIC4uLmFyZ3MpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBJZiBldmVudCwgY2hlY2sgdGhhdCByZWxldmFudCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBoYXZlIGNvbXBsZXRlZC5cclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09IFwiZXZlbnRcIiAvKiBHdGFnQ29tbWFuZC5FVkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW21lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXNdID0gYXJncztcclxuICAgICAgICAgICAgICAgIC8vIElmIEVWRU5ULCBzZWNvbmQgYXJnIG11c3QgYmUgbWVhc3VyZW1lbnRJZC5cclxuICAgICAgICAgICAgICAgIGF3YWl0IGd0YWdPbkV2ZW50KGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcImNvbmZpZ1wiIC8qIEd0YWdDb21tYW5kLkNPTkZJRyAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW21lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXNdID0gYXJncztcclxuICAgICAgICAgICAgICAgIC8vIElmIENPTkZJRywgc2Vjb25kIGFyZyBtdXN0IGJlIG1lYXN1cmVtZW50SWQuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBndGFnT25Db25maWcoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcImNvbnNlbnRcIiAvKiBHdGFnQ29tbWFuZC5DT05TRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbZ3RhZ1BhcmFtc10gPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgZ3RhZ0NvcmUoXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLywgJ3VwZGF0ZScsIGd0YWdQYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiZ2V0XCIgLyogR3RhZ0NvbW1hbmQuR0VUICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbbWVhc3VyZW1lbnRJZCwgZmllbGROYW1lLCBjYWxsYmFja10gPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgZ3RhZ0NvcmUoXCJnZXRcIiAvKiBHdGFnQ29tbWFuZC5HRVQgKi8sIG1lYXN1cmVtZW50SWQsIGZpZWxkTmFtZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1hbmQgPT09IFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbY3VzdG9tUGFyYW1zXSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBTRVQsIHNlY29uZCBhcmcgbXVzdCBiZSBwYXJhbXMuXHJcbiAgICAgICAgICAgICAgICBndGFnQ29yZShcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgY3VzdG9tUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKGNvbW1hbmQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ3RhZ1dyYXBwZXI7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gb3Igd3JhcHMgZXhpc3Rpbmcgb25lIGlmIGZvdW5kLlxyXG4gKiBUaGlzIHdyYXBwZWQgZnVuY3Rpb24gYXR0YWNoZXMgRmlyZWJhc2UgaW5zdGFuY2UgSUQgKEZJRCkgdG8gZ3RhZyAnY29uZmlnJyBhbmRcclxuICogJ2V2ZW50JyBjYWxscyB0aGF0IGJlbG9uZyB0byB0aGUgR0FJRCBhc3NvY2lhdGVkIHdpdGggdGhpcyBGaXJlYmFzZSBpbnN0YW5jZS5cclxuICpcclxuICogQHBhcmFtIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgTWFwIG9mIGFwcElkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXAgb2YgR0EgbWVhc3VyZW1lbnRJRHMgdG8gY29ycmVzcG9uZGluZyBGaXJlYmFzZSBhcHBJZC5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBnbG9iYWwgR0EgZGF0YWxheWVyIGFycmF5LlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uTmFtZSBOYW1lIG9mIGdsb2JhbCBndGFnIGZ1bmN0aW9uIChcImd0YWdcIiBpZiBub3QgdXNlci1zcGVjaWZpZWQpLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcE9yQ3JlYXRlR3RhZyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgZGF0YUxheWVyTmFtZSwgZ3RhZ0Z1bmN0aW9uTmFtZSkge1xyXG4gICAgLy8gQ3JlYXRlIGEgYmFzaWMgY29yZSBndGFnIGZ1bmN0aW9uXHJcbiAgICBsZXQgZ3RhZ0NvcmUgPSBmdW5jdGlvbiAoLi4uX2FyZ3MpIHtcclxuICAgICAgICAvLyBNdXN0IHB1c2ggSUFyZ3VtZW50cyBvYmplY3QsIG5vdCBhbiBhcnJheS5cclxuICAgICAgICB3aW5kb3dbZGF0YUxheWVyTmFtZV0ucHVzaChhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICAgIC8vIFJlcGxhY2UgaXQgd2l0aCBleGlzdGluZyBvbmUgaWYgZm91bmRcclxuICAgIGlmICh3aW5kb3dbZ3RhZ0Z1bmN0aW9uTmFtZV0gJiZcclxuICAgICAgICB0eXBlb2Ygd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGd0YWdDb3JlID0gd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdO1xyXG4gICAgfVxyXG4gICAgd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdID0gd3JhcEd0YWcoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ3RhZ0NvcmUsXHJcbiAgICAgICAgd3JhcHBlZEd0YWc6IHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc2NyaXB0IHRhZyBpbiB0aGUgRE9NIG1hdGNoaW5nIGJvdGggdGhlIGd0YWcgdXJsIHBhdHRlcm5cclxuICogYW5kIHRoZSBwcm92aWRlZCBkYXRhIGxheWVyIG5hbWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kR3RhZ1NjcmlwdE9uUGFnZShkYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICBjb25zdCBzY3JpcHRUYWdzID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgIGZvciAoY29uc3QgdGFnIG9mIE9iamVjdC52YWx1ZXMoc2NyaXB0VGFncykpIHtcclxuICAgICAgICBpZiAodGFnLnNyYyAmJlxyXG4gICAgICAgICAgICB0YWcuc3JjLmluY2x1ZGVzKEdUQUdfVVJMKSAmJlxyXG4gICAgICAgICAgICB0YWcuc3JjLmluY2x1ZGVzKGRhdGFMYXllck5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEJhY2tvZmYgZmFjdG9yIGZvciA1MDMgZXJyb3JzLCB3aGljaCB3ZSB3YW50IHRvIGJlIGNvbnNlcnZhdGl2ZSBhYm91dFxyXG4gKiB0byBhdm9pZCBvdmVybG9hZGluZyBzZXJ2ZXJzLiBFYWNoIHJldHJ5IGludGVydmFsIHdpbGwgYmVcclxuICogQkFTRV9JTlRFUlZBTF9NSUxMSVMgKiBMT05HX1JFVFJZX0ZBQ1RPUiBeIHJldHJ5Q291bnQsIHNvIHRoZSBzZWNvbmQgb25lXHJcbiAqIHdpbGwgYmUgfjMwIHNlY29uZHMgKHdpdGggZnV6emluZykuXHJcbiAqL1xyXG5jb25zdCBMT05HX1JFVFJZX0ZBQ1RPUiA9IDMwO1xyXG4vKipcclxuICogQmFzZSB3YWl0IGludGVydmFsIHRvIG11bHRpcGxpZWQgYnkgYmFja29mZkZhY3Rvcl5iYWNrb2ZmQ291bnQuXHJcbiAqL1xyXG5jb25zdCBCQVNFX0lOVEVSVkFMX01JTExJUyA9IDEwMDA7XHJcbi8qKlxyXG4gKiBTdHViYmFibGUgcmV0cnkgZGF0YSBzdG9yYWdlIGNsYXNzLlxyXG4gKi9cclxuY2xhc3MgUmV0cnlEYXRhIHtcclxuICAgIGNvbnN0cnVjdG9yKHRocm90dGxlTWV0YWRhdGEgPSB7fSwgaW50ZXJ2YWxNaWxsaXMgPSBCQVNFX0lOVEVSVkFMX01JTExJUykge1xyXG4gICAgICAgIHRoaXMudGhyb3R0bGVNZXRhZGF0YSA9IHRocm90dGxlTWV0YWRhdGE7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbE1pbGxpcyA9IGludGVydmFsTWlsbGlzO1xyXG4gICAgfVxyXG4gICAgZ2V0VGhyb3R0bGVNZXRhZGF0YShhcHBJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdO1xyXG4gICAgfVxyXG4gICAgc2V0VGhyb3R0bGVNZXRhZGF0YShhcHBJZCwgbWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdID0gbWV0YWRhdGE7XHJcbiAgICB9XHJcbiAgICBkZWxldGVUaHJvdHRsZU1ldGFkYXRhKGFwcElkKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMudGhyb3R0bGVNZXRhZGF0YVthcHBJZF07XHJcbiAgICB9XHJcbn1cclxuY29uc3QgZGVmYXVsdFJldHJ5RGF0YSA9IG5ldyBSZXRyeURhdGEoKTtcclxuLyoqXHJcbiAqIFNldCBHRVQgcmVxdWVzdCBoZWFkZXJzLlxyXG4gKiBAcGFyYW0gYXBpS2V5IEFwcCBBUEkga2V5LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGVhZGVycyhhcGlLZXkpIHtcclxuICAgIHJldHVybiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3gtZ29vZy1hcGkta2V5JzogYXBpS2V5XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogRmV0Y2hlcyBkeW5hbWljIGNvbmZpZyBmcm9tIGJhY2tlbmQuXHJcbiAqIEBwYXJhbSBhcHAgRmlyZWJhc2UgYXBwIHRvIGZldGNoIGNvbmZpZyBmb3IuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBmZXRjaER5bmFtaWNDb25maWcoYXBwRmllbGRzKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCB7IGFwcElkLCBhcGlLZXkgfSA9IGFwcEZpZWxkcztcclxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiBnZXRIZWFkZXJzKGFwaUtleSlcclxuICAgIH07XHJcbiAgICBjb25zdCBhcHBVcmwgPSBEWU5BTUlDX0NPTkZJR19VUkwucmVwbGFjZSgne2FwcC1pZH0nLCBhcHBJZCk7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwcFVybCwgcmVxdWVzdCk7XHJcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzICE9PSAzMDQpIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJyc7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCBhbnkgZXJyb3IgbWVzc2FnZSB0ZXh0IGZyb20gc2VydmVyIHJlc3BvbnNlLlxyXG4gICAgICAgICAgICBjb25zdCBqc29uUmVzcG9uc2UgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcclxuICAgICAgICAgICAgaWYgKChfYSA9IGpzb25SZXNwb25zZS5lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGpzb25SZXNwb25zZS5lcnJvci5tZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChfaWdub3JlZCkgeyB9XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJjb25maWctZmV0Y2gtZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQ09ORklHX0ZFVENIX0ZBSUxFRCAqLywge1xyXG4gICAgICAgICAgICBodHRwU3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZTogZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG59XHJcbi8qKlxyXG4gKiBGZXRjaGVzIGR5bmFtaWMgY29uZmlnIGZyb20gYmFja2VuZCwgcmV0cnlpbmcgaWYgZmFpbGVkLlxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcCB0byBmZXRjaCBjb25maWcgZm9yLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KGFwcCwgXHJcbi8vIHJldHJ5RGF0YSBhbmQgdGltZW91dE1pbGxpcyBhcmUgcGFyYW1ldGVyaXplZCB0byBhbGxvdyBwYXNzaW5nIGEgZGlmZmVyZW50IHZhbHVlIGZvciB0ZXN0aW5nLlxyXG5yZXRyeURhdGEgPSBkZWZhdWx0UmV0cnlEYXRhLCB0aW1lb3V0TWlsbGlzKSB7XHJcbiAgICBjb25zdCB7IGFwcElkLCBhcGlLZXksIG1lYXN1cmVtZW50SWQgfSA9IGFwcC5vcHRpb25zO1xyXG4gICAgaWYgKCFhcHBJZCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwLWlkXCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBQX0lEICovKTtcclxuICAgIH1cclxuICAgIGlmICghYXBpS2V5KSB7XHJcbiAgICAgICAgaWYgKG1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50SWQsXHJcbiAgICAgICAgICAgICAgICBhcHBJZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwaS1rZXlcIiAvKiBBbmFseXRpY3NFcnJvci5OT19BUElfS0VZICovKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRocm90dGxlTWV0YWRhdGEgPSByZXRyeURhdGEuZ2V0VGhyb3R0bGVNZXRhZGF0YShhcHBJZCkgfHwge1xyXG4gICAgICAgIGJhY2tvZmZDb3VudDogMCxcclxuICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXM6IERhdGUubm93KClcclxuICAgIH07XHJcbiAgICBjb25zdCBzaWduYWwgPSBuZXcgQW5hbHl0aWNzQWJvcnRTaWduYWwoKTtcclxuICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIC8vIE5vdGUgYSB2ZXJ5IGxvdyBkZWxheSwgZWcgPCAxMG1zLCBjYW4gZWxhcHNlIGJlZm9yZSBsaXN0ZW5lcnMgYXJlIGluaXRpYWxpemVkLlxyXG4gICAgICAgIHNpZ25hbC5hYm9ydCgpO1xyXG4gICAgfSwgdGltZW91dE1pbGxpcyAhPT0gdW5kZWZpbmVkID8gdGltZW91dE1pbGxpcyA6IEZFVENIX1RJTUVPVVRfTUlMTElTKTtcclxuICAgIHJldHVybiBhdHRlbXB0RmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KHsgYXBwSWQsIGFwaUtleSwgbWVhc3VyZW1lbnRJZCB9LCB0aHJvdHRsZU1ldGFkYXRhLCBzaWduYWwsIHJldHJ5RGF0YSk7XHJcbn1cclxuLyoqXHJcbiAqIFJ1bnMgb25lIHJldHJ5IGF0dGVtcHQuXHJcbiAqIEBwYXJhbSBhcHBGaWVsZHMgTmVjZXNzYXJ5IGFwcCBjb25maWcgZmllbGRzLlxyXG4gKiBAcGFyYW0gdGhyb3R0bGVNZXRhZGF0YSBPbmdvaW5nIG1ldGFkYXRhIHRvIGRldGVybWluZSB0aHJvdHRsaW5nIHRpbWVzLlxyXG4gKiBAcGFyYW0gc2lnbmFsIEFib3J0IHNpZ25hbC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwRmllbGRzLCB7IHRocm90dGxlRW5kVGltZU1pbGxpcywgYmFja29mZkNvdW50IH0sIHNpZ25hbCwgcmV0cnlEYXRhID0gZGVmYXVsdFJldHJ5RGF0YSAvLyBmb3IgdGVzdGluZ1xyXG4pIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHsgYXBwSWQsIG1lYXN1cmVtZW50SWQgfSA9IGFwcEZpZWxkcztcclxuICAgIC8vIFN0YXJ0cyB3aXRoIGEgKHBvdGVudGlhbGx5IHplcm8pIHRpbWVvdXQgdG8gc3VwcG9ydCByZXN1bXB0aW9uIGZyb20gc3RvcmVkIHN0YXRlLlxyXG4gICAgLy8gRW5zdXJlcyB0aGUgdGhyb3R0bGUgZW5kIHRpbWUgaXMgaG9ub3JlZCBpZiB0aGUgbGFzdCBhdHRlbXB0IHRpbWVkIG91dC5cclxuICAgIC8vIE5vdGUgdGhlIFNESyB3aWxsIG5ldmVyIG1ha2UgYSByZXF1ZXN0IGlmIHRoZSBmZXRjaCB0aW1lb3V0IGV4cGlyZXMgYXQgdGhpcyBwb2ludC5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgc2V0QWJvcnRhYmxlVGltZW91dChzaWduYWwsIHRocm90dGxlRW5kVGltZU1pbGxpcyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChtZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGBUaW1lZCBvdXQgZmV0Y2hpbmcgdGhpcyBGaXJlYmFzZSBhcHAncyBtZWFzdXJlbWVudCBJRCBmcm9tIHRoZSBzZXJ2ZXIuYCArXHJcbiAgICAgICAgICAgICAgICBgIEZhbGxpbmcgYmFjayB0byB0aGUgbWVhc3VyZW1lbnQgSUQgJHttZWFzdXJlbWVudElkfWAgK1xyXG4gICAgICAgICAgICAgICAgYCBwcm92aWRlZCBpbiB0aGUgXCJtZWFzdXJlbWVudElkXCIgZmllbGQgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gWyR7ZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2V9XWApO1xyXG4gICAgICAgICAgICByZXR1cm4geyBhcHBJZCwgbWVhc3VyZW1lbnRJZCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoRHluYW1pY0NvbmZpZyhhcHBGaWVsZHMpO1xyXG4gICAgICAgIC8vIE5vdGUgdGhlIFNESyBvbmx5IGNsZWFycyB0aHJvdHRsZSBzdGF0ZSBpZiByZXNwb25zZSBpcyBzdWNjZXNzIG9yIG5vbi1yZXRyaWFibGUuXHJcbiAgICAgICAgcmV0cnlEYXRhLmRlbGV0ZVRocm90dGxlTWV0YWRhdGEoYXBwSWQpO1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBlO1xyXG4gICAgICAgIGlmICghaXNSZXRyaWFibGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgcmV0cnlEYXRhLmRlbGV0ZVRocm90dGxlTWV0YWRhdGEoYXBwSWQpO1xyXG4gICAgICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYEZhaWxlZCB0byBmZXRjaCB0aGlzIEZpcmViYXNlIGFwcCdzIG1lYXN1cmVtZW50IElEIGZyb20gdGhlIHNlcnZlci5gICtcclxuICAgICAgICAgICAgICAgICAgICBgIEZhbGxpbmcgYmFjayB0byB0aGUgbWVhc3VyZW1lbnQgSUQgJHttZWFzdXJlbWVudElkfWAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAgcHJvdmlkZWQgaW4gdGhlIFwibWVhc3VyZW1lbnRJZFwiIGZpZWxkIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFske2Vycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlfV1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGFwcElkLCBtZWFzdXJlbWVudElkIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJhY2tvZmZNaWxsaXMgPSBOdW1iZXIoKF9hID0gZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLmN1c3RvbURhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5odHRwU3RhdHVzKSA9PT0gNTAzXHJcbiAgICAgICAgICAgID8gY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIHJldHJ5RGF0YS5pbnRlcnZhbE1pbGxpcywgTE9OR19SRVRSWV9GQUNUT1IpXHJcbiAgICAgICAgICAgIDogY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIHJldHJ5RGF0YS5pbnRlcnZhbE1pbGxpcyk7XHJcbiAgICAgICAgLy8gSW5jcmVtZW50cyBiYWNrb2ZmIHN0YXRlLlxyXG4gICAgICAgIGNvbnN0IHRocm90dGxlTWV0YWRhdGEgPSB7XHJcbiAgICAgICAgICAgIHRocm90dGxlRW5kVGltZU1pbGxpczogRGF0ZS5ub3coKSArIGJhY2tvZmZNaWxsaXMsXHJcbiAgICAgICAgICAgIGJhY2tvZmZDb3VudDogYmFja29mZkNvdW50ICsgMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gUGVyc2lzdHMgc3RhdGUuXHJcbiAgICAgICAgcmV0cnlEYXRhLnNldFRocm90dGxlTWV0YWRhdGEoYXBwSWQsIHRocm90dGxlTWV0YWRhdGEpO1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgQ2FsbGluZyBhdHRlbXB0RmV0Y2ggYWdhaW4gaW4gJHtiYWNrb2ZmTWlsbGlzfSBtaWxsaXNgKTtcclxuICAgICAgICByZXR1cm4gYXR0ZW1wdEZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeShhcHBGaWVsZHMsIHRocm90dGxlTWV0YWRhdGEsIHNpZ25hbCwgcmV0cnlEYXRhKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU3VwcG9ydHMgd2FpdGluZyBvbiBhIGJhY2tvZmYgYnk6XHJcbiAqXHJcbiAqIDx1bD5cclxuICogICA8bGk+UHJvbWlzaWZ5aW5nIHNldFRpbWVvdXQsIHNvIHdlIGNhbiBzZXQgYSB0aW1lb3V0IGluIG91ciBQcm9taXNlIGNoYWluPC9saT5cclxuICogICA8bGk+TGlzdGVuaW5nIG9uIGEgc2lnbmFsIGJ1cyBmb3IgYWJvcnQgZXZlbnRzLCBqdXN0IGxpa2UgdGhlIEZldGNoIEFQSTwvbGk+XHJcbiAqICAgPGxpPkZhaWxpbmcgaW4gdGhlIHNhbWUgd2F5IHRoZSBGZXRjaCBBUEkgZmFpbHMsIHNvIHRpbWluZyBvdXQgYSBsaXZlIHJlcXVlc3QgYW5kIGEgdGhyb3R0bGVkXHJcbiAqICAgICAgIHJlcXVlc3QgYXBwZWFyIHRoZSBzYW1lLjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRBYm9ydGFibGVUaW1lb3V0KHNpZ25hbCwgdGhyb3R0bGVFbmRUaW1lTWlsbGlzKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIC8vIERlcml2ZXMgYmFja29mZiBmcm9tIGdpdmVuIGVuZCB0aW1lLCBub3JtYWxpemluZyBuZWdhdGl2ZSBudW1iZXJzIHRvIHplcm8uXHJcbiAgICAgICAgY29uc3QgYmFja29mZk1pbGxpcyA9IE1hdGgubWF4KHRocm90dGxlRW5kVGltZU1pbGxpcyAtIERhdGUubm93KCksIDApO1xyXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KHJlc29sdmUsIGJhY2tvZmZNaWxsaXMpO1xyXG4gICAgICAgIC8vIEFkZHMgbGlzdGVuZXIsIHJhdGhlciB0aGFuIHNldHMgb25hYm9ydCwgYmVjYXVzZSBzaWduYWwgaXMgYSBzaGFyZWQgb2JqZWN0LlxyXG4gICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCgpID0+IHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMgYmVmb3JlIHRoaXMgdGltZW91dCwgdGhlIHJlamVjdGlvbiBoYXMgbm8gZWZmZWN0LlxyXG4gICAgICAgICAgICByZWplY3QoRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJmZXRjaC10aHJvdHRsZVwiIC8qIEFuYWx5dGljc0Vycm9yLkZFVENIX1RIUk9UVExFICovLCB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXNcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUge0BsaW5rIEVycm9yfSBpbmRpY2F0ZXMgYSBmZXRjaCByZXF1ZXN0IG1heSBzdWNjZWVkIGxhdGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZXRyaWFibGVFcnJvcihlKSB7XHJcbiAgICBpZiAoIShlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikgfHwgIWUuY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIFVzZXMgc3RyaW5nIGluZGV4IGRlZmluZWQgYnkgRXJyb3JEYXRhLCB3aGljaCBGaXJlYmFzZUVycm9yIGltcGxlbWVudHMuXHJcbiAgICBjb25zdCBodHRwU3RhdHVzID0gTnVtYmVyKGUuY3VzdG9tRGF0YVsnaHR0cFN0YXR1cyddKTtcclxuICAgIHJldHVybiAoaHR0cFN0YXR1cyA9PT0gNDI5IHx8XHJcbiAgICAgICAgaHR0cFN0YXR1cyA9PT0gNTAwIHx8XHJcbiAgICAgICAgaHR0cFN0YXR1cyA9PT0gNTAzIHx8XHJcbiAgICAgICAgaHR0cFN0YXR1cyA9PT0gNTA0KTtcclxufVxyXG4vKipcclxuICogU2hpbXMgYSBtaW5pbWFsIEFib3J0U2lnbmFsIChjb3BpZWQgZnJvbSBSZW1vdGUgQ29uZmlnKS5cclxuICpcclxuICogPHA+QWJvcnRDb250cm9sbGVyJ3MgQWJvcnRTaWduYWwgY29udmVuaWVudGx5IGRlY291cGxlcyBmZXRjaCB0aW1lb3V0IGxvZ2ljIGZyb20gb3RoZXIgYXNwZWN0c1xyXG4gKiBvZiBuZXR3b3JraW5nLCBzdWNoIGFzIHJldHJpZXMuIEZpcmViYXNlIGRvZXNuJ3QgdXNlIEFib3J0Q29udHJvbGxlciBlbm91Z2ggdG8ganVzdGlmeSBhXHJcbiAqIHBvbHlmaWxsIHJlY29tbWVuZGF0aW9uLCBsaWtlIHdlIGRvIHdpdGggdGhlIEZldGNoIEFQSSwgYnV0IHRoaXMgbWluaW1hbCBzaGltIGNhbiBlYXNpbHkgYmVcclxuICogc3dhcHBlZCBvdXQgaWYvd2hlbiB3ZSBkby5cclxuICovXHJcbmNsYXNzIEFuYWx5dGljc0Fib3J0U2lnbmFsIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICBhYm9ydCgpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFdmVudCBwYXJhbWV0ZXJzIHRvIHNldCBvbiAnZ3RhZycgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxyXG4gKi9cclxubGV0IGRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0O1xyXG4vKipcclxuICogTG9ncyBhbiBhbmFseXRpY3MgZXZlbnQgdGhyb3VnaCB0aGUgRmlyZWJhc2UgU0RLLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBldmVudE5hbWUgR29vZ2xlIEFuYWx5dGljcyBldmVudCBuYW1lLCBjaG9vc2UgZnJvbSBzdGFuZGFyZCBsaXN0IG9yIHVzZSBhIGN1c3RvbSBzdHJpbmcuXHJcbiAqIEBwYXJhbSBldmVudFBhcmFtcyBBbmFseXRpY3MgZXZlbnQgcGFyYW1ldGVycy5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGxvZ0V2ZW50JDEoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiZXZlbnRcIiAvKiBHdGFnQ29tbWFuZC5FVkVOVCAqLywgZXZlbnROYW1lLCBldmVudFBhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV2ZW50UGFyYW1zKSwgeyAnc2VuZF90byc6IG1lYXN1cmVtZW50SWQgfSk7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiZXZlbnRcIiAvKiBHdGFnQ29tbWFuZC5FVkVOVCAqLywgZXZlbnROYW1lLCBwYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZXQgc2NyZWVuX25hbWUgcGFyYW1ldGVyIGZvciB0aGlzIEdvb2dsZSBBbmFseXRpY3MgSUQuXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgbG9nRXZlbnR9IHdpdGggYGV2ZW50TmFtZWAgYXMgJ3NjcmVlbl92aWV3JyBhbmQgYWRkIHJlbGV2YW50IGBldmVudFBhcmFtc2AuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvYW5hbHl0aWNzL3NjcmVlbnZpZXdzIHwgVHJhY2sgU2NyZWVudmlld3N9LlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBzY3JlZW5OYW1lIFNjcmVlbiBuYW1lIHN0cmluZyB0byBzZXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzZXRDdXJyZW50U2NyZWVuJDEoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIHNjcmVlbk5hbWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCB7ICdzY3JlZW5fbmFtZSc6IHNjcmVlbk5hbWUgfSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAnc2NyZWVuX25hbWUnOiBzY3JlZW5OYW1lXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFNldCB1c2VyX2lkIHBhcmFtZXRlciBmb3IgdGhpcyBHb29nbGUgQW5hbHl0aWNzIElELlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBpZCBVc2VyIElEIHN0cmluZyB0byBzZXRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldFVzZXJJZCQxKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBpZCwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpIHtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIHsgJ3VzZXJfaWQnOiBpZCB9KTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBtZWFzdXJlbWVudElkID0gYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImNvbmZpZ1wiIC8qIEd0YWdDb21tYW5kLkNPTkZJRyAqLywgbWVhc3VyZW1lbnRJZCwge1xyXG4gICAgICAgICAgICB1cGRhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICd1c2VyX2lkJzogaWRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2V0IGFsbCBvdGhlciB1c2VyIHByb3BlcnRpZXMgb3RoZXIgdGhhbiB1c2VyX2lkIGFuZCBzY3JlZW5fbmFtZS5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gcHJvcGVydGllcyBNYXAgb2YgdXNlciBwcm9wZXJ0aWVzIHRvIHNldFxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0VXNlclByb3BlcnRpZXMkMShndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSwgcHJvcGVydGllcywgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpIHtcclxuICAgICAgICBjb25zdCBmbGF0UHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIHVzZSBkb3Qgbm90YXRpb24gZm9yIG1lcmdlIGJlaGF2aW9yIGluIGd0YWcuanNcclxuICAgICAgICAgICAgZmxhdFByb3BlcnRpZXNbYHVzZXJfcHJvcGVydGllcy4ke2tleX1gXSA9IHByb3BlcnRpZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCBmbGF0UHJvcGVydGllcyk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAndXNlcl9wcm9wZXJ0aWVzJzogcHJvcGVydGllc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYSB1bmlxdWUgR29vZ2xlIEFuYWx5dGljcyBpZGVudGlmaWVyIGZvciB0aGUgd2ViIGNsaWVudC5cclxuICogU2VlIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vZ2E0L3JlZmVyZW5jZS9jb25maWcjY2xpZW50X2lkIHwgY2xpZW50X2lkfS5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gaW50ZXJuYWxHZXRHb29nbGVBbmFseXRpY3NDbGllbnRJZChndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSkge1xyXG4gICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiZ2V0XCIgLyogR3RhZ0NvbW1hbmQuR0VUICovLCBtZWFzdXJlbWVudElkLCAnY2xpZW50X2lkJywgKGNsaWVudElkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghY2xpZW50SWQpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWNsaWVudC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0NMSUVOVF9JRCAqLykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUoY2xpZW50SWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldCB3aGV0aGVyIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBJRC5cclxuICpcclxuICogQHBhcmFtIGVuYWJsZWQgSWYgdHJ1ZSwgY29sbGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIElELlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQkMShpbml0aWFsaXphdGlvblByb21pc2UsIGVuYWJsZWQpIHtcclxuICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICB3aW5kb3dbYGdhLWRpc2FibGUtJHttZWFzdXJlbWVudElkfWBdID0gIWVuYWJsZWQ7XHJcbn1cclxuLyoqXHJcbiAqIENvbnNlbnQgcGFyYW1ldGVycyB0byBkZWZhdWx0IHRvIGR1cmluZyAnZ3RhZycgaW5pdGlhbGl6YXRpb24uXHJcbiAqL1xyXG5sZXQgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQ7XHJcbi8qKlxyXG4gKiBTZXRzIHRoZSB2YXJpYWJsZSB7QGxpbmsgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXR9IGZvciB1c2UgaW4gdGhlIGluaXRpYWxpemF0aW9uIG9mXHJcbiAqIGFuYWx5dGljcy5cclxuICpcclxuICogQHBhcmFtIGNvbnNlbnRTZXR0aW5ncyBNYXBzIHRoZSBhcHBsaWNhYmxlIGVuZCB1c2VyIGNvbnNlbnQgc3RhdGUgZm9yIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0KGNvbnNlbnRTZXR0aW5ncykge1xyXG4gICAgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQgPSBjb25zZW50U2V0dGluZ3M7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgdGhlIHZhcmlhYmxlIGBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdGAgZm9yIHVzZSBpbiB0aGUgaW5pdGlhbGl6YXRpb24gb2ZcclxuICogYW5hbHl0aWNzLlxyXG4gKlxyXG4gKiBAcGFyYW0gY3VzdG9tUGFyYW1zIEFueSBjdXN0b20gcGFyYW1zIHRoZSB1c2VyIG1heSBwYXNzIHRvIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQoY3VzdG9tUGFyYW1zKSB7XHJcbiAgICBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdCA9IGN1c3RvbVBhcmFtcztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQigpIHtcclxuICAgIGlmICghaXNJbmRleGVkREJBdmFpbGFibGUoKSkge1xyXG4gICAgICAgIGxvZ2dlci53YXJuKEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5ERVhFRERCX1VOQVZBSUxBQkxFICovLCB7XHJcbiAgICAgICAgICAgIGVycm9ySW5mbzogJ0luZGV4ZWREQiBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuJ1xyXG4gICAgICAgIH0pLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbmRleGVkZGItdW5hdmFpbGFibGVcIiAvKiBBbmFseXRpY3NFcnJvci5JTkRFWEVEREJfVU5BVkFJTEFCTEUgKi8sIHtcclxuICAgICAgICAgICAgICAgIGVycm9ySW5mbzogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgfSkubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgYW5hbHl0aWNzIGluc3RhbmNlIGluIGd0YWcuanMgYnkgY2FsbGluZyBjb25maWcgY29tbWFuZCB3aXRoIGZpZC5cclxuICpcclxuICogTk9URTogV2UgY29tYmluZSBhbmFseXRpY3MgaW5pdGlhbGl6YXRpb24gYW5kIHNldHRpbmcgZmlkIHRvZ2V0aGVyIGJlY2F1c2Ugd2Ugd2FudCBmaWQgdG8gYmVcclxuICogcGFydCBvZiB0aGUgYHBhZ2Vfdmlld2AgZXZlbnQgdGhhdCdzIHNlbnQgZHVyaW5nIHRoZSBpbml0aWFsaXphdGlvblxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcFxyXG4gKiBAcGFyYW0gZ3RhZ0NvcmUgVGhlIGd0YWcgZnVuY3Rpb24gdGhhdCdzIG5vdCB3cmFwcGVkLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBhbGwgZHluYW1pYyBjb25maWcgcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXBzIG1lYXN1cmVtZW50SUQgdG8gYXBwSUQuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIF9GaXJlYmFzZUluc3RhbGxhdGlvbnNJbnRlcm5hbCBpbnN0YW5jZS5cclxuICpcclxuICogQHJldHVybnMgTWVhc3VyZW1lbnQgSUQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfaW5pdGlhbGl6ZUFuYWx5dGljcyhhcHAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBpbnN0YWxsYXRpb25zLCBndGFnQ29yZSwgZGF0YUxheWVyTmFtZSwgb3B0aW9ucykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgZHluYW1pY0NvbmZpZ1Byb21pc2UgPSBmZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwKTtcclxuICAgIC8vIE9uY2UgZmV0Y2hlZCwgbWFwIG1lYXN1cmVtZW50SWRzIHRvIGFwcElkLCBmb3IgZWFzZSBvZiBsb29rdXAgaW4gd3JhcHBlZCBndGFnIGZ1bmN0aW9uLlxyXG4gICAgZHluYW1pY0NvbmZpZ1Byb21pc2VcclxuICAgICAgICAudGhlbihjb25maWcgPT4ge1xyXG4gICAgICAgIG1lYXN1cmVtZW50SWRUb0FwcElkW2NvbmZpZy5tZWFzdXJlbWVudElkXSA9IGNvbmZpZy5hcHBJZDtcclxuICAgICAgICBpZiAoYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCAmJlxyXG4gICAgICAgICAgICBjb25maWcubWVhc3VyZW1lbnRJZCAhPT0gYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihgVGhlIG1lYXN1cmVtZW50IElEIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcgKCR7YXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZH0pYCArXHJcbiAgICAgICAgICAgICAgICBgIGRvZXMgbm90IG1hdGNoIHRoZSBtZWFzdXJlbWVudCBJRCBmZXRjaGVkIGZyb20gdGhlIHNlcnZlciAoJHtjb25maWcubWVhc3VyZW1lbnRJZH0pLmAgK1xyXG4gICAgICAgICAgICAgICAgYCBUbyBlbnN1cmUgYW5hbHl0aWNzIGV2ZW50cyBhcmUgYWx3YXlzIHNlbnQgdG8gdGhlIGNvcnJlY3QgQW5hbHl0aWNzIHByb3BlcnR5LGAgK1xyXG4gICAgICAgICAgICAgICAgYCB1cGRhdGUgdGhlYCArXHJcbiAgICAgICAgICAgICAgICBgIG1lYXN1cmVtZW50IElEIGZpZWxkIGluIHRoZSBsb2NhbCBjb25maWcgb3IgcmVtb3ZlIGl0IGZyb20gdGhlIGxvY2FsIGNvbmZpZy5gKTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbiAgICAvLyBBZGQgdG8gbGlzdCB0byB0cmFjayBzdGF0ZSBvZiBhbGwgZHluYW1pYyBjb25maWcgcHJvbWlzZXMuXHJcbiAgICBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LnB1c2goZHluYW1pY0NvbmZpZ1Byb21pc2UpO1xyXG4gICAgY29uc3QgZmlkUHJvbWlzZSA9IHZhbGlkYXRlSW5kZXhlZERCKCkudGhlbihlbnZJc1ZhbGlkID0+IHtcclxuICAgICAgICBpZiAoZW52SXNWYWxpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFsbGF0aW9ucy5nZXRJZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IFtkeW5hbWljQ29uZmlnLCBmaWRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgIGR5bmFtaWNDb25maWdQcm9taXNlLFxyXG4gICAgICAgIGZpZFByb21pc2VcclxuICAgIF0pO1xyXG4gICAgLy8gRGV0ZWN0IGlmIHVzZXIgaGFzIGFscmVhZHkgcHV0IHRoZSBndGFnIDxzY3JpcHQ+IHRhZyBvbiB0aGlzIHBhZ2Ugd2l0aCB0aGUgcGFzc2VkIGluXHJcbiAgICAvLyBkYXRhIGxheWVyIG5hbWUuXHJcbiAgICBpZiAoIWZpbmRHdGFnU2NyaXB0T25QYWdlKGRhdGFMYXllck5hbWUpKSB7XHJcbiAgICAgICAgaW5zZXJ0U2NyaXB0VGFnKGRhdGFMYXllck5hbWUsIGR5bmFtaWNDb25maWcubWVhc3VyZW1lbnRJZCk7XHJcbiAgICB9XHJcbiAgICAvLyBEZXRlY3RzIGlmIHRoZXJlIGFyZSBjb25zZW50IHNldHRpbmdzIHRoYXQgbmVlZCB0byBiZSBjb25maWd1cmVkLlxyXG4gICAgaWYgKGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0KSB7XHJcbiAgICAgICAgZ3RhZ0NvcmUoXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLywgJ2RlZmF1bHQnLCBkZWZhdWx0Q29uc2VudFNldHRpbmdzRm9ySW5pdCk7XHJcbiAgICAgICAgX3NldENvbnNlbnREZWZhdWx0Rm9ySW5pdCh1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gICAgLy8gVGhpcyBjb21tYW5kIGluaXRpYWxpemVzIGd0YWcuanMgYW5kIG9ubHkgbmVlZHMgdG8gYmUgY2FsbGVkIG9uY2UgZm9yIHRoZSBlbnRpcmUgd2ViIGFwcCxcclxuICAgIC8vIGJ1dCBzaW5jZSBpdCBpcyBpZGVtcG90ZW50LCB3ZSBjYW4gY2FsbCBpdCBtdWx0aXBsZSB0aW1lcy5cclxuICAgIC8vIFdlIGtlZXAgaXQgdG9nZXRoZXIgd2l0aCBvdGhlciBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgYmV0dGVyIGNvZGUgc3RydWN0dXJlLlxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIGd0YWdDb3JlKCdqcycsIG5ldyBEYXRlKCkpO1xyXG4gICAgLy8gVXNlciBjb25maWcgYWRkZWQgZmlyc3QuIFdlIGRvbid0IHdhbnQgdXNlcnMgdG8gYWNjaWRlbnRhbGx5IG92ZXJ3cml0ZVxyXG4gICAgLy8gYmFzZSBGaXJlYmFzZSBjb25maWcgcHJvcGVydGllcy5cclxuICAgIGNvbnN0IGNvbmZpZ1Byb3BlcnRpZXMgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZmlnKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcclxuICAgIC8vIGd1YXJkIGFnYWluc3QgZGV2ZWxvcGVycyBhY2NpZGVudGFsbHkgc2V0dGluZyBwcm9wZXJ0aWVzIHdpdGggcHJlZml4IGBmaXJlYmFzZV9gXHJcbiAgICBjb25maWdQcm9wZXJ0aWVzW09SSUdJTl9LRVldID0gJ2ZpcmViYXNlJztcclxuICAgIGNvbmZpZ1Byb3BlcnRpZXMudXBkYXRlID0gdHJ1ZTtcclxuICAgIGlmIChmaWQgIT0gbnVsbCkge1xyXG4gICAgICAgIGNvbmZpZ1Byb3BlcnRpZXNbR0FfRklEX0tFWV0gPSBmaWQ7XHJcbiAgICB9XHJcbiAgICAvLyBJdCBzaG91bGQgYmUgdGhlIGZpcnN0IGNvbmZpZyBjb21tYW5kIGNhbGxlZCBvbiB0aGlzIEdBLUlEXHJcbiAgICAvLyBJbml0aWFsaXplIHRoaXMgR0EtSUQgYW5kIHNldCBGSUQgb24gaXQgdXNpbmcgdGhlIGd0YWcgY29uZmlnIEFQSS5cclxuICAgIC8vIE5vdGU6IFRoaXMgd2lsbCB0cmlnZ2VyIGEgcGFnZV92aWV3IGV2ZW50IHVubGVzcyAnc2VuZF9wYWdlX3ZpZXcnIGlzIHNldCB0byBmYWxzZSBpblxyXG4gICAgLy8gYGNvbmZpZ1Byb3BlcnRpZXNgLlxyXG4gICAgZ3RhZ0NvcmUoXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIGR5bmFtaWNDb25maWcubWVhc3VyZW1lbnRJZCwgY29uZmlnUHJvcGVydGllcyk7XHJcbiAgICAvLyBEZXRlY3RzIGlmIHRoZXJlIGlzIGRhdGEgdGhhdCB3aWxsIGJlIHNldCBvbiBldmVyeSBldmVudCBsb2dnZWQgZnJvbSB0aGUgU0RLLlxyXG4gICAgaWYgKGRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KSB7XHJcbiAgICAgICAgZ3RhZ0NvcmUoXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIGRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KTtcclxuICAgICAgICBfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQodW5kZWZpbmVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkeW5hbWljQ29uZmlnLm1lYXN1cmVtZW50SWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFuYWx5dGljcyBTZXJ2aWNlIGNsYXNzLlxyXG4gKi9cclxuY2xhc3MgQW5hbHl0aWNzU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgIH1cclxuICAgIF9kZWxldGUoKSB7XHJcbiAgICAgICAgZGVsZXRlIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbdGhpcy5hcHAub3B0aW9ucy5hcHBJZF07XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBNYXBzIGFwcElkIHRvIGZ1bGwgaW5pdGlhbGl6YXRpb24gcHJvbWlzZS4gV3JhcHBlZCBndGFnIGNhbGxzIG11c3Qgd2FpdCBvblxyXG4gKiBhbGwgb3Igc29tZSBvZiB0aGVzZSwgZGVwZW5kaW5nIG9uIHRoZSBjYWxsJ3MgYHNlbmRfdG9gIHBhcmFtIGFuZCB0aGUgc3RhdHVzXHJcbiAqIG9mIHRoZSBkeW5hbWljIGNvbmZpZyBmZXRjaGVzIChzZWUgYmVsb3cpLlxyXG4gKi9cclxubGV0IGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgPSB7fTtcclxuLyoqXHJcbiAqIExpc3Qgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuIEluIGNlcnRhaW4gY2FzZXMsIHdyYXBwZWQgZ3RhZyBjYWxsc1xyXG4gKiB3YWl0IG9uIGFsbCB0aGVzZSB0byBiZSBjb21wbGV0ZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgaWYgaXQgY2FuIHNlbGVjdGl2ZWx5XHJcbiAqIHdhaXQgZm9yIG9ubHkgY2VydGFpbiBpbml0aWFsaXphdGlvbiAoRklEKSBwcm9taXNlcyBvciBpZiBpdCBtdXN0IHdhaXQgZm9yIGFsbC5cclxuICovXHJcbmxldCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0ID0gW107XHJcbi8qKlxyXG4gKiBNYXBzIGZldGNoZWQgbWVhc3VyZW1lbnRJZHMgdG8gYXBwSWQuIFBvcHVsYXRlZCB3aGVuIHRoZSBhcHAncyBkeW5hbWljIGNvbmZpZ1xyXG4gKiBmZXRjaCBjb21wbGV0ZXMuIElmIGFscmVhZHkgcG9wdWxhdGVkLCBndGFnIGNvbmZpZyBjYWxscyBjYW4gdXNlIHRoaXMgdG9cclxuICogc2VsZWN0aXZlbHkgd2FpdCBmb3Igb25seSB0aGlzIGFwcCdzIGluaXRpYWxpemF0aW9uIHByb21pc2UgKEZJRCkgaW5zdGVhZCBvZiBhbGxcclxuICogaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqL1xyXG5jb25zdCBtZWFzdXJlbWVudElkVG9BcHBJZCA9IHt9O1xyXG4vKipcclxuICogTmFtZSBmb3Igd2luZG93IGdsb2JhbCBkYXRhIGxheWVyIGFycmF5IHVzZWQgYnkgR0E6IGRlZmF1bHRzIHRvICdkYXRhTGF5ZXInLlxyXG4gKi9cclxubGV0IGRhdGFMYXllck5hbWUgPSAnZGF0YUxheWVyJztcclxuLyoqXHJcbiAqIE5hbWUgZm9yIHdpbmRvdyBnbG9iYWwgZ3RhZyBmdW5jdGlvbiB1c2VkIGJ5IEdBOiBkZWZhdWx0cyB0byAnZ3RhZycuXHJcbiAqL1xyXG5sZXQgZ3RhZ05hbWUgPSAnZ3RhZyc7XHJcbi8qKlxyXG4gKiBSZXByb2R1Y3Rpb24gb2Ygc3RhbmRhcmQgZ3RhZyBmdW5jdGlvbiBvciByZWZlcmVuY2UgdG8gZXhpc3RpbmdcclxuICogZ3RhZyBmdW5jdGlvbiBvbiB3aW5kb3cgb2JqZWN0LlxyXG4gKi9cclxubGV0IGd0YWdDb3JlRnVuY3Rpb247XHJcbi8qKlxyXG4gKiBXcmFwcGVyIGFyb3VuZCBndGFnIGZ1bmN0aW9uIHRoYXQgZW5zdXJlcyBGSUQgaXMgc2VudCB3aXRoIGFsbFxyXG4gKiByZWxldmFudCBldmVudCBhbmQgY29uZmlnIGNhbGxzLlxyXG4gKi9cclxubGV0IHdyYXBwZWRHdGFnRnVuY3Rpb247XHJcbi8qKlxyXG4gKiBGbGFnIHRvIGVuc3VyZSBwYWdlIGluaXRpYWxpemF0aW9uIHN0ZXBzIChjcmVhdGlvbiBvciB3cmFwcGluZyBvZlxyXG4gKiBkYXRhTGF5ZXIgYW5kIGd0YWcgc2NyaXB0KSBhcmUgb25seSBydW4gb25jZSBwZXIgcGFnZSBsb2FkLlxyXG4gKi9cclxubGV0IGdsb2JhbEluaXREb25lID0gZmFsc2U7XHJcbi8qKlxyXG4gKiBDb25maWd1cmVzIEZpcmViYXNlIEFuYWx5dGljcyB0byB1c2UgY3VzdG9tIGBndGFnYCBvciBgZGF0YUxheWVyYCBuYW1lcy5cclxuICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpZiBgZ3RhZy5qc2Agc2NyaXB0IGhhcyBiZWVuIGluc3RhbGxlZCBvblxyXG4gKiB0aGlzIHBhZ2UgaW5kZXBlbmRlbnRseSBvZiBGaXJlYmFzZSBBbmFseXRpY3MsIGFuZCBpcyB1c2luZyBub24tZGVmYXVsdFxyXG4gKiBuYW1lcyBmb3IgZWl0aGVyIHRoZSBgZ3RhZ2AgZnVuY3Rpb24gb3IgZm9yIGBkYXRhTGF5ZXJgLlxyXG4gKiBNdXN0IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgZ2V0QW5hbHl0aWNzKClgIG9yIGl0IHdvbid0XHJcbiAqIGhhdmUgYW55IGVmZmVjdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEN1c3RvbSBndGFnIGFuZCBkYXRhTGF5ZXIgbmFtZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXR0aW5ncyhvcHRpb25zKSB7XHJcbiAgICBpZiAoZ2xvYmFsSW5pdERvbmUpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEICovKTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmRhdGFMYXllck5hbWUpIHtcclxuICAgICAgICBkYXRhTGF5ZXJOYW1lID0gb3B0aW9ucy5kYXRhTGF5ZXJOYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuZ3RhZ05hbWUpIHtcclxuICAgICAgICBndGFnTmFtZSA9IG9wdGlvbnMuZ3RhZ05hbWU7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBubyBlbnZpcm9ubWVudCBtaXNtYXRjaCBpcyBmb3VuZC5cclxuICogSWYgZW52aXJvbm1lbnQgbWlzbWF0Y2hlcyBhcmUgZm91bmQsIHRocm93cyBhbiBJTlZBTElEX0FOQUxZVElDU19DT05URVhUXHJcbiAqIGVycm9yIHRoYXQgYWxzbyBsaXN0cyBkZXRhaWxzIGZvciBlYWNoIG1pc21hdGNoIGZvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gd2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCgpIHtcclxuICAgIGNvbnN0IG1pc21hdGNoZWRFbnZNZXNzYWdlcyA9IFtdO1xyXG4gICAgaWYgKGlzQnJvd3NlckV4dGVuc2lvbigpKSB7XHJcbiAgICAgICAgbWlzbWF0Y2hlZEVudk1lc3NhZ2VzLnB1c2goJ1RoaXMgaXMgYSBicm93c2VyIGV4dGVuc2lvbiBlbnZpcm9ubWVudC4nKTtcclxuICAgIH1cclxuICAgIGlmICghYXJlQ29va2llc0VuYWJsZWQoKSkge1xyXG4gICAgICAgIG1pc21hdGNoZWRFbnZNZXNzYWdlcy5wdXNoKCdDb29raWVzIGFyZSBub3QgYXZhaWxhYmxlLicpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1pc21hdGNoZWRFbnZNZXNzYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IG1pc21hdGNoZWRFbnZNZXNzYWdlc1xyXG4gICAgICAgICAgICAubWFwKChtZXNzYWdlLCBpbmRleCkgPT4gYCgke2luZGV4ICsgMX0pICR7bWVzc2FnZX1gKVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgICAgIGNvbnN0IGVyciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1hbmFseXRpY3MtY29udGV4dFwiIC8qIEFuYWx5dGljc0Vycm9yLklOVkFMSURfQU5BTFlUSUNTX0NPTlRFWFQgKi8sIHtcclxuICAgICAgICAgICAgZXJyb3JJbmZvOiBkZXRhaWxzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbmFseXRpY3MgaW5zdGFuY2UgZmFjdG9yeS5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBmYWN0b3J5KGFwcCwgaW5zdGFsbGF0aW9ucywgb3B0aW9ucykge1xyXG4gICAgd2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCgpO1xyXG4gICAgY29uc3QgYXBwSWQgPSBhcHAub3B0aW9ucy5hcHBJZDtcclxuICAgIGlmICghYXBwSWQpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQUF9JRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5vcHRpb25zLmFwaUtleSkge1xyXG4gICAgICAgIGlmIChhcHAub3B0aW9ucy5tZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGBUaGUgXCJhcGlLZXlcIiBmaWVsZCBpcyBlbXB0eSBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBUaGlzIGlzIG5lZWRlZCB0byBmZXRjaCB0aGUgbGF0ZXN0YCArXHJcbiAgICAgICAgICAgICAgICBgIG1lYXN1cmVtZW50IElEIGZvciB0aGlzIEZpcmViYXNlIGFwcC4gRmFsbGluZyBiYWNrIHRvIHRoZSBtZWFzdXJlbWVudCBJRCAke2FwcC5vcHRpb25zLm1lYXN1cmVtZW50SWR9YCArXHJcbiAgICAgICAgICAgICAgICBgIHByb3ZpZGVkIGluIHRoZSBcIm1lYXN1cmVtZW50SWRcIiBmaWVsZCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcGkta2V5XCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBJX0tFWSAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdICE9IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFscmVhZHktZXhpc3RzXCIgLyogQW5hbHl0aWNzRXJyb3IuQUxSRUFEWV9FWElTVFMgKi8sIHtcclxuICAgICAgICAgICAgaWQ6IGFwcElkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWdsb2JhbEluaXREb25lKSB7XHJcbiAgICAgICAgLy8gU3RlcHMgaGVyZSBzaG91bGQgb25seSBiZSBkb25lIG9uY2UgcGVyIHBhZ2U6IGNyZWF0aW9uIG9yIHdyYXBwaW5nXHJcbiAgICAgICAgLy8gb2YgZGF0YUxheWVyIGFuZCBnbG9iYWwgZ3RhZyBmdW5jdGlvbi5cclxuICAgICAgICBnZXRPckNyZWF0ZURhdGFMYXllcihkYXRhTGF5ZXJOYW1lKTtcclxuICAgICAgICBjb25zdCB7IHdyYXBwZWRHdGFnLCBndGFnQ29yZSB9ID0gd3JhcE9yQ3JlYXRlR3RhZyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgZGF0YUxheWVyTmFtZSwgZ3RhZ05hbWUpO1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24gPSB3cmFwcGVkR3RhZztcclxuICAgICAgICBndGFnQ29yZUZ1bmN0aW9uID0gZ3RhZ0NvcmU7XHJcbiAgICAgICAgZ2xvYmFsSW5pdERvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gQXN5bmMgYnV0IG5vbi1ibG9ja2luZy5cclxuICAgIC8vIFRoaXMgbWFwIHJlZmxlY3RzIHRoZSBjb21wbGV0aW9uIHN0YXRlIG9mIGFsbCBwcm9taXNlcyBmb3IgZWFjaCBhcHBJZC5cclxuICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdID0gX2luaXRpYWxpemVBbmFseXRpY3MoYXBwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgaW5zdGFsbGF0aW9ucywgZ3RhZ0NvcmVGdW5jdGlvbiwgZGF0YUxheWVyTmFtZSwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBhbmFseXRpY3NJbnN0YW5jZSA9IG5ldyBBbmFseXRpY3NTZXJ2aWNlKGFwcCk7XHJcbiAgICByZXR1cm4gYW5hbHl0aWNzSW5zdGFuY2U7XHJcbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xyXG4vKipcclxuICogUmV0dXJucyBhbiB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGFwcC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSB0byB1c2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBbmFseXRpY3MoYXBwID0gZ2V0QXBwKCkpIHtcclxuICAgIGFwcCA9IGdldE1vZHVsYXJJbnN0YW5jZShhcHApO1xyXG4gICAgLy8gRGVwZW5kZW5jaWVzXHJcbiAgICBjb25zdCBhbmFseXRpY3NQcm92aWRlciA9IF9nZXRQcm92aWRlcihhcHAsIEFOQUxZVElDU19UWVBFKTtcclxuICAgIGlmIChhbmFseXRpY3NQcm92aWRlci5pc0luaXRpYWxpemVkKCkpIHtcclxuICAgICAgICByZXR1cm4gYW5hbHl0aWNzUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5pdGlhbGl6ZUFuYWx5dGljcyhhcHApO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIHtAbGluayBBbmFseXRpY3N9IGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gYXBwLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IHRvIHVzZS5cclxuICovXHJcbmZ1bmN0aW9uIGluaXRpYWxpemVBbmFseXRpY3MoYXBwLCBvcHRpb25zID0ge30pIHtcclxuICAgIC8vIERlcGVuZGVuY2llc1xyXG4gICAgY29uc3QgYW5hbHl0aWNzUHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCBBTkFMWVRJQ1NfVFlQRSk7XHJcbiAgICBpZiAoYW5hbHl0aWNzUHJvdmlkZXIuaXNJbml0aWFsaXplZCgpKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IGFuYWx5dGljc1Byb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgYW5hbHl0aWNzUHJvdmlkZXIuZ2V0T3B0aW9ucygpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdJbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYWxyZWFkeS1pbml0aWFsaXplZFwiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfSU5JVElBTElaRUQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGFuYWx5dGljc0luc3RhbmNlID0gYW5hbHl0aWNzUHJvdmlkZXIuaW5pdGlhbGl6ZSh7IG9wdGlvbnMgfSk7XHJcbiAgICByZXR1cm4gYW5hbHl0aWNzSW5zdGFuY2U7XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgaXMgYSBwdWJsaWMgc3RhdGljIG1ldGhvZCBwcm92aWRlZCB0byB1c2VycyB0aGF0IHdyYXBzIGZvdXIgZGlmZmVyZW50IGNoZWNrczpcclxuICpcclxuICogMS4gQ2hlY2sgaWYgaXQncyBub3QgYSBicm93c2VyIGV4dGVuc2lvbiBlbnZpcm9ubWVudC5cclxuICogMi4gQ2hlY2sgaWYgY29va2llcyBhcmUgZW5hYmxlZCBpbiBjdXJyZW50IGJyb3dzZXIuXHJcbiAqIDMuIENoZWNrIGlmIEluZGV4ZWREQiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQuXHJcbiAqIDQuIENoZWNrIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgY29udGV4dCBpcyB2YWxpZCBmb3IgdXNpbmcgYEluZGV4ZWREQi5vcGVuKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcclxuICAgIGlmIChpc0Jyb3dzZXJFeHRlbnNpb24oKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghYXJlQ29va2llc0VuYWJsZWQoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghaXNJbmRleGVkREJBdmFpbGFibGUoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgaXNEQk9wZW5hYmxlID0gYXdhaXQgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpO1xyXG4gICAgICAgIHJldHVybiBpc0RCT3BlbmFibGU7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFVzZSBndGFnIGBjb25maWdgIGNvbW1hbmQgdG8gc2V0IGBzY3JlZW5fbmFtZWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBsb2dFdmVudH0gd2l0aCBgZXZlbnROYW1lYCBhcyAnc2NyZWVuX3ZpZXcnIGFuZCBhZGQgcmVsZXZhbnQgYGV2ZW50UGFyYW1zYC5cclxuICogU2VlIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9hbmFseXRpY3Mvc2NyZWVudmlld3MgfCBUcmFjayBTY3JlZW52aWV3c30uXHJcbiAqXHJcbiAqIEBwYXJhbSBhbmFseXRpY3NJbnN0YW5jZSAtIFRoZSB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHNjcmVlbk5hbWUgLSBTY3JlZW4gbmFtZSB0byBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRDdXJyZW50U2NyZWVuKGFuYWx5dGljc0luc3RhbmNlLCBzY3JlZW5OYW1lLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRDdXJyZW50U2NyZWVuJDEod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthbmFseXRpY3NJbnN0YW5jZS5hcHAub3B0aW9ucy5hcHBJZF0sIHNjcmVlbk5hbWUsIG9wdGlvbnMpLmNhdGNoKGUgPT4gbG9nZ2VyLmVycm9yKGUpKTtcclxufVxyXG4vKipcclxuICogUmV0cmlldmVzIGEgdW5pcXVlIEdvb2dsZSBBbmFseXRpY3MgaWRlbnRpZmllciBmb3IgdGhlIHdlYiBjbGllbnQuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhNC9yZWZlcmVuY2UvY29uZmlnI2NsaWVudF9pZCB8IGNsaWVudF9pZH0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gdG8gdXNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQoYW5hbHl0aWNzSW5zdGFuY2UpIHtcclxuICAgIGFuYWx5dGljc0luc3RhbmNlID0gZ2V0TW9kdWxhckluc3RhbmNlKGFuYWx5dGljc0luc3RhbmNlKTtcclxuICAgIHJldHVybiBpbnRlcm5hbEdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdKTtcclxufVxyXG4vKipcclxuICogVXNlIGd0YWcgYGNvbmZpZ2AgY29tbWFuZCB0byBzZXQgYHVzZXJfaWRgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhbmFseXRpY3NJbnN0YW5jZSAtIFRoZSB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGlkIC0gVXNlciBJRCB0byBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRVc2VySWQoYW5hbHl0aWNzSW5zdGFuY2UsIGlkLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRVc2VySWQkMSh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSwgaWQsIG9wdGlvbnMpLmNhdGNoKGUgPT4gbG9nZ2VyLmVycm9yKGUpKTtcclxufVxyXG4vKipcclxuICogVXNlIGd0YWcgYGNvbmZpZ2AgY29tbWFuZCB0byBzZXQgYWxsIHBhcmFtcyBzcGVjaWZpZWQuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHNldFVzZXJQcm9wZXJ0aWVzKGFuYWx5dGljc0luc3RhbmNlLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRVc2VyUHJvcGVydGllcyQxKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBwcm9wZXJ0aWVzLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgd2hldGhlciBHb29nbGUgQW5hbHl0aWNzIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBhcHAgb24gdGhpcyBkZXZpY2UuXHJcbiAqIFNldHMgZ2xvYmFsIGB3aW5kb3dbJ2dhLWRpc2FibGUtYW5hbHl0aWNzSWQnXSA9IHRydWU7YFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhbmFseXRpY3NJbnN0YW5jZSAtIFRoZSB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGVuYWJsZWQgLSBJZiB0cnVlLCBlbmFibGVzIGNvbGxlY3Rpb24sIGlmIGZhbHNlLCBkaXNhYmxlcyBpdC5cclxuICovXHJcbmZ1bmN0aW9uIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGFuYWx5dGljc0luc3RhbmNlLCBlbmFibGVkKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZCQxKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBlbmFibGVkKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIEFkZHMgZGF0YSB0aGF0IHdpbGwgYmUgc2V0IG9uIGV2ZXJ5IGV2ZW50IGxvZ2dlZCBmcm9tIHRoZSBTREssIGluY2x1ZGluZyBhdXRvbWF0aWMgb25lcy5cclxuICogV2l0aCBndGFnJ3MgXCJzZXRcIiBjb21tYW5kLCB0aGUgdmFsdWVzIHBhc3NlZCBwZXJzaXN0IG9uIHRoZSBjdXJyZW50IHBhZ2UgYW5kIGFyZSBwYXNzZWQgd2l0aFxyXG4gKiBhbGwgc3Vic2VxdWVudCBldmVudHMuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIGN1c3RvbVBhcmFtcyAtIEFueSBjdXN0b20gcGFyYW1zIHRoZSB1c2VyIG1heSBwYXNzIHRvIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzKGN1c3RvbVBhcmFtcykge1xyXG4gICAgLy8gQ2hlY2sgaWYgcmVmZXJlbmNlIHRvIGV4aXN0aW5nIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdCBleGlzdHNcclxuICAgIGlmICh3cmFwcGVkR3RhZ0Z1bmN0aW9uKSB7XHJcbiAgICAgICAgd3JhcHBlZEd0YWdGdW5jdGlvbihcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgY3VzdG9tUGFyYW1zKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIF9zZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdChjdXN0b21QYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZW5kcyBhIEdvb2dsZSBBbmFseXRpY3MgZXZlbnQgd2l0aCBnaXZlbiBgZXZlbnRQYXJhbXNgLiBUaGlzIG1ldGhvZFxyXG4gKiBhdXRvbWF0aWNhbGx5IGFzc29jaWF0ZXMgdGhpcyBsb2dnZWQgZXZlbnQgd2l0aCB0aGlzIEZpcmViYXNlIHdlYlxyXG4gKiBhcHAgaW5zdGFuY2Ugb24gdGhpcyBkZXZpY2UuXHJcbiAqIExpc3Qgb2Ygb2ZmaWNpYWwgZXZlbnQgcGFyYW1ldGVycyBjYW4gYmUgZm91bmQgaW4gdGhlIGd0YWcuanNcclxuICogcmVmZXJlbmNlIGRvY3VtZW50YXRpb246XHJcbiAqIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9ndGFnanMvcmVmZXJlbmNlL2dhNC1ldmVudHNcclxuICogfCB0aGUgR0E0IHJlZmVyZW5jZSBkb2N1bWVudGF0aW9ufS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gbG9nRXZlbnQoYW5hbHl0aWNzSW5zdGFuY2UsIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgIGFuYWx5dGljc0luc3RhbmNlID0gZ2V0TW9kdWxhckluc3RhbmNlKGFuYWx5dGljc0luc3RhbmNlKTtcclxuICAgIGxvZ0V2ZW50JDEod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthbmFseXRpY3NJbnN0YW5jZS5hcHAub3B0aW9ucy5hcHBJZF0sIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpLmNhdGNoKGUgPT4gbG9nZ2VyLmVycm9yKGUpKTtcclxufVxyXG4vKipcclxuICogU2V0cyB0aGUgYXBwbGljYWJsZSBlbmQgdXNlciBjb25zZW50IHN0YXRlIGZvciB0aGlzIHdlYiBhcHAgYWNyb3NzIGFsbCBndGFnIHJlZmVyZW5jZXMgb25jZVxyXG4gKiBGaXJlYmFzZSBBbmFseXRpY3MgaXMgaW5pdGlhbGl6ZWQuXHJcbiAqXHJcbiAqIFVzZSB0aGUge0BsaW5rIENvbnNlbnRTZXR0aW5nc30gdG8gc3BlY2lmeSBpbmRpdmlkdWFsIGNvbnNlbnQgdHlwZSB2YWx1ZXMuIEJ5IGRlZmF1bHQgY29uc2VudFxyXG4gKiB0eXBlcyBhcmUgc2V0IHRvIFwiZ3JhbnRlZFwiLlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSBjb25zZW50U2V0dGluZ3MgLSBNYXBzIHRoZSBhcHBsaWNhYmxlIGVuZCB1c2VyIGNvbnNlbnQgc3RhdGUgZm9yIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRDb25zZW50KGNvbnNlbnRTZXR0aW5ncykge1xyXG4gICAgLy8gQ2hlY2sgaWYgcmVmZXJlbmNlIHRvIGV4aXN0aW5nIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdCBleGlzdHNcclxuICAgIGlmICh3cmFwcGVkR3RhZ0Z1bmN0aW9uKSB7XHJcbiAgICAgICAgd3JhcHBlZEd0YWdGdW5jdGlvbihcImNvbnNlbnRcIiAvKiBHdGFnQ29tbWFuZC5DT05TRU5UICovLCAndXBkYXRlJywgY29uc2VudFNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIF9zZXRDb25zZW50RGVmYXVsdEZvckluaXQoY29uc2VudFNldHRpbmdzKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBuYW1lID0gXCJAZmlyZWJhc2UvYW5hbHl0aWNzXCI7XG5jb25zdCB2ZXJzaW9uID0gXCIwLjEwLjBcIjtcblxuLyoqXHJcbiAqIEZpcmViYXNlIEFuYWx5dGljc1xyXG4gKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQW5hbHl0aWNzKCkge1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoQU5BTFlUSUNTX1RZUEUsIChjb250YWluZXIsIHsgb3B0aW9uczogYW5hbHl0aWNzT3B0aW9ucyB9KSA9PiB7XHJcbiAgICAgICAgLy8gZ2V0SW1tZWRpYXRlIGZvciBGaXJlYmFzZUFwcCB3aWxsIGFsd2F5cyBzdWNjZWVkXHJcbiAgICAgICAgY29uc3QgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25zID0gY29udGFpbmVyXHJcbiAgICAgICAgICAgIC5nZXRQcm92aWRlcignaW5zdGFsbGF0aW9ucy1pbnRlcm5hbCcpXHJcbiAgICAgICAgICAgIC5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICByZXR1cm4gZmFjdG9yeShhcHAsIGluc3RhbGxhdGlvbnMsIGFuYWx5dGljc09wdGlvbnMpO1xyXG4gICAgfSwgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FuYWx5dGljcy1pbnRlcm5hbCcsIGludGVybmFsRmFjdG9yeSwgXCJQUklWQVRFXCIgLyogQ29tcG9uZW50VHlwZS5QUklWQVRFICovKSk7XHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbik7XHJcbiAgICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdlc20yMDE3Jyk7XHJcbiAgICBmdW5jdGlvbiBpbnRlcm5hbEZhY3RvcnkoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgYW5hbHl0aWNzID0gY29udGFpbmVyLmdldFByb3ZpZGVyKEFOQUxZVElDU19UWVBFKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGxvZ0V2ZW50OiAoZXZlbnROYW1lLCBldmVudFBhcmFtcywgb3B0aW9ucykgPT4gbG9nRXZlbnQoYW5hbHl0aWNzLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBBbmFseXRpY3NFcnJvci5JTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovLCB7XHJcbiAgICAgICAgICAgICAgICByZWFzb246IGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyQW5hbHl0aWNzKCk7XG5cbmV4cG9ydCB7IGdldEFuYWx5dGljcywgZ2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQsIGluaXRpYWxpemVBbmFseXRpY3MsIGlzU3VwcG9ydGVkLCBsb2dFdmVudCwgc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQsIHNldENvbnNlbnQsIHNldEN1cnJlbnRTY3JlZW4sIHNldERlZmF1bHRFdmVudFBhcmFtZXRlcnMsIHNldFVzZXJJZCwgc2V0VXNlclByb3BlcnRpZXMsIHNldHRpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2dlciwgc2V0VXNlckxvZ0hhbmRsZXIsIHNldExvZ0xldmVsIGFzIHNldExvZ0xldmVsJDEgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgZ2V0RGVmYXVsdEFwcENvbmZpZywgZGVlcEVxdWFsLCBGaXJlYmFzZUVycm9yLCBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZywgaXNJbmRleGVkREJBdmFpbGFibGUsIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5leHBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgb3BlbkRCIH0gZnJvbSAnaWRiJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8vIEluIGluaXRpYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgaW5zdGFsbGF0aW9ucyBvblxyXG4gICAgLy8gYXV0aCB0b2tlbiByZWZyZXNoLCBhbmQgaW5zdGFsbGF0aW9ucyB3aWxsIHNlbmQgdGhpcyBzdHJpbmcuXHJcbiAgICBnZXRQbGF0Zm9ybUluZm9TdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXJzKCk7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHByb3ZpZGVycyBhbmQgZ2V0IGxpYnJhcnkvdmVyc2lvbiBwYWlycyBmcm9tIGFueSB0aGF0IGFyZVxyXG4gICAgICAgIC8vIHZlcnNpb24gY29tcG9uZW50cy5cclxuICAgICAgICByZXR1cm4gcHJvdmlkZXJzXHJcbiAgICAgICAgICAgIC5tYXAocHJvdmlkZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IHByb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3NlcnZpY2UubGlicmFyeX0vJHtzZXJ2aWNlLnZlcnNpb259YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihsb2dTdHJpbmcgPT4gbG9nU3RyaW5nKVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvdmlkZXIgY2hlY2sgaWYgdGhpcyBwcm92aWRlciBwcm92aWRlcyBhIFZlcnNpb25TZXJ2aWNlXHJcbiAqXHJcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxyXG4gKiBwcm92aWRlcyBWZXJzaW9uU2VydmljZS4gVGhlIHByb3ZpZGVyIGlzIG5vdCBuZWNlc3NhcmlseSBhICdhcHAtdmVyc2lvbidcclxuICogcHJvdmlkZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIocHJvdmlkZXIpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHByb3ZpZGVyLmdldENvbXBvbmVudCgpO1xyXG4gICAgcmV0dXJuIChjb21wb25lbnQgPT09IG51bGwgfHwgY29tcG9uZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb21wb25lbnQudHlwZSkgPT09IFwiVkVSU0lPTlwiIC8qIENvbXBvbmVudFR5cGUuVkVSU0lPTiAqLztcclxufVxuXG5jb25zdCBuYW1lJG8gPSBcIkBmaXJlYmFzZS9hcHBcIjtcbmNvbnN0IHZlcnNpb24kMSA9IFwiMC45LjE1XCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hcHAnKTtcblxuY29uc3QgbmFtZSRuID0gXCJAZmlyZWJhc2UvYXBwLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJG0gPSBcIkBmaXJlYmFzZS9hbmFseXRpY3MtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkbCA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xuXG5jb25zdCBuYW1lJGsgPSBcIkBmaXJlYmFzZS9hcHAtY2hlY2stY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkaiA9IFwiQGZpcmViYXNlL2FwcC1jaGVja1wiO1xuXG5jb25zdCBuYW1lJGkgPSBcIkBmaXJlYmFzZS9hdXRoXCI7XG5cbmNvbnN0IG5hbWUkaCA9IFwiQGZpcmViYXNlL2F1dGgtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkZyA9IFwiQGZpcmViYXNlL2RhdGFiYXNlXCI7XG5cbmNvbnN0IG5hbWUkZiA9IFwiQGZpcmViYXNlL2RhdGFiYXNlLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGUgPSBcIkBmaXJlYmFzZS9mdW5jdGlvbnNcIjtcblxuY29uc3QgbmFtZSRkID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGMgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zXCI7XG5cbmNvbnN0IG5hbWUkYiA9IFwiQGZpcmViYXNlL2luc3RhbGxhdGlvbnMtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkYSA9IFwiQGZpcmViYXNlL21lc3NhZ2luZ1wiO1xuXG5jb25zdCBuYW1lJDkgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmctY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkOCA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlXCI7XG5cbmNvbnN0IG5hbWUkNyA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDYgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnXCI7XG5cbmNvbnN0IG5hbWUkNSA9IFwiQGZpcmViYXNlL3JlbW90ZS1jb25maWctY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkNCA9IFwiQGZpcmViYXNlL3N0b3JhZ2VcIjtcblxuY29uc3QgbmFtZSQzID0gXCJAZmlyZWJhc2Uvc3RvcmFnZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSQyID0gXCJAZmlyZWJhc2UvZmlyZXN0b3JlXCI7XG5cbmNvbnN0IG5hbWUkMSA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbmNvbnN0IHZlcnNpb24gPSBcIjEwLjEuMFwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgYXBwIG5hbWVcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcclxuY29uc3QgUExBVEZPUk1fTE9HX1NUUklORyA9IHtcclxuICAgIFtuYW1lJG9dOiAnZmlyZS1jb3JlJyxcclxuICAgIFtuYW1lJG5dOiAnZmlyZS1jb3JlLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRsXTogJ2ZpcmUtYW5hbHl0aWNzJyxcclxuICAgIFtuYW1lJG1dOiAnZmlyZS1hbmFseXRpY3MtY29tcGF0JyxcclxuICAgIFtuYW1lJGpdOiAnZmlyZS1hcHAtY2hlY2snLFxyXG4gICAgW25hbWUka106ICdmaXJlLWFwcC1jaGVjay1jb21wYXQnLFxyXG4gICAgW25hbWUkaV06ICdmaXJlLWF1dGgnLFxyXG4gICAgW25hbWUkaF06ICdmaXJlLWF1dGgtY29tcGF0JyxcclxuICAgIFtuYW1lJGddOiAnZmlyZS1ydGRiJyxcclxuICAgIFtuYW1lJGZdOiAnZmlyZS1ydGRiLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRlXTogJ2ZpcmUtZm4nLFxyXG4gICAgW25hbWUkZF06ICdmaXJlLWZuLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRjXTogJ2ZpcmUtaWlkJyxcclxuICAgIFtuYW1lJGJdOiAnZmlyZS1paWQtY29tcGF0JyxcclxuICAgIFtuYW1lJGFdOiAnZmlyZS1mY20nLFxyXG4gICAgW25hbWUkOV06ICdmaXJlLWZjbS1jb21wYXQnLFxyXG4gICAgW25hbWUkOF06ICdmaXJlLXBlcmYnLFxyXG4gICAgW25hbWUkN106ICdmaXJlLXBlcmYtY29tcGF0JyxcclxuICAgIFtuYW1lJDZdOiAnZmlyZS1yYycsXHJcbiAgICBbbmFtZSQ1XTogJ2ZpcmUtcmMtY29tcGF0JyxcclxuICAgIFtuYW1lJDRdOiAnZmlyZS1nY3MnLFxyXG4gICAgW25hbWUkM106ICdmaXJlLWdjcy1jb21wYXQnLFxyXG4gICAgW25hbWUkMl06ICdmaXJlLWZzdCcsXHJcbiAgICBbbmFtZSQxXTogJ2ZpcmUtZnN0LWNvbXBhdCcsXHJcbiAgICAnZmlyZS1qcyc6ICdmaXJlLWpzJyxcclxuICAgIFtuYW1lXTogJ2ZpcmUtanMtYWxsJ1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBfYXBwcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIFJlZ2lzdGVyZWQgY29tcG9uZW50cy5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBfY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIEBwYXJhbSBjb21wb25lbnQgLSB0aGUgY29tcG9uZW50IGJlaW5nIGFkZGVkIHRvIHRoaXMgYXBwJ3MgY29udGFpbmVyXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhcHAuY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmYWlsZWQgdG8gcmVnaXN0ZXIgd2l0aCBGaXJlYmFzZUFwcCAke2FwcC5uYW1lfWAsIGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgYXBwLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCB0byByZWdpc3RlclxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX3JlZ2lzdGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5uYW1lO1xyXG4gICAgaWYgKF9jb21wb25lbnRzLmhhcyhjb21wb25lbnROYW1lKSkge1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgJHtjb21wb25lbnROYW1lfS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBfY29tcG9uZW50cy5zZXQoY29tcG9uZW50TmFtZSwgY29tcG9uZW50KTtcclxuICAgIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcclxuICAgIGZvciAoY29uc3QgYXBwIG9mIF9hcHBzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqXHJcbiAqIEByZXR1cm5zIHRoZSBwcm92aWRlciBmb3IgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpIHtcclxuICAgIGNvbnN0IGhlYXJ0YmVhdENvbnRyb2xsZXIgPSBhcHAuY29udGFpbmVyXHJcbiAgICAgICAgLmdldFByb3ZpZGVyKCdoZWFydGJlYXQnKVxyXG4gICAgICAgIC5nZXRJbW1lZGlhdGUoeyBvcHRpb25hbDogdHJ1ZSB9KTtcclxuICAgIGlmIChoZWFydGJlYXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdm9pZCBoZWFydGJlYXRDb250cm9sbGVyLnRyaWdnZXJIZWFydGJlYXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcHAuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gRmlyZWJhc2VBcHAgaW5zdGFuY2VcclxuICogQHBhcmFtIG5hbWUgLSBzZXJ2aWNlIG5hbWVcclxuICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciAtIHNlcnZpY2UgaW5zdGFuY2UgaWRlbnRpZmllciBpbiBjYXNlIHRoZSBzZXJ2aWNlIHN1cHBvcnRzIG11bHRpcGxlIGluc3RhbmNlc1xyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UoYXBwLCBuYW1lLCBpbnN0YW5jZUlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpLmNsZWFySW5zdGFuY2UoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxufVxyXG4vKipcclxuICogVGVzdCBvbmx5XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2NsZWFyQ29tcG9uZW50cygpIHtcclxuICAgIF9jb21wb25lbnRzLmNsZWFyKCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgRVJST1JTID0ge1xyXG4gICAgW1wibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovXTogXCJObyBGaXJlYmFzZSBBcHAgJ3skYXBwTmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXHJcbiAgICAgICAgJ2NhbGwgaW5pdGlhbGl6ZUFwcCgpIGZpcnN0JyxcclxuICAgIFtcImJhZC1hcHAtbmFtZVwiIC8qIEFwcEVycm9yLkJBRF9BUFBfTkFNRSAqL106IFwiSWxsZWdhbCBBcHAgbmFtZTogJ3skYXBwTmFtZX1cIixcclxuICAgIFtcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovXTogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZXhpc3RzIHdpdGggZGlmZmVyZW50IG9wdGlvbnMgb3IgY29uZmlnXCIsXHJcbiAgICBbXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovXTogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZGVsZXRlZFwiLFxyXG4gICAgW1wibm8tb3B0aW9uc1wiIC8qIEFwcEVycm9yLk5PX09QVElPTlMgKi9dOiAnTmVlZCB0byBwcm92aWRlIG9wdGlvbnMsIHdoZW4gbm90IGJlaW5nIGRlcGxveWVkIHRvIGhvc3RpbmcgdmlhIHNvdXJjZS4nLFxyXG4gICAgW1wiaW52YWxpZC1hcHAtYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVCAqL106ICdmaXJlYmFzZS57JGFwcE5hbWV9KCkgdGFrZXMgZWl0aGVyIG5vIGFyZ3VtZW50IG9yIGEgJyArXHJcbiAgICAgICAgJ0ZpcmViYXNlIEFwcCBpbnN0YW5jZS4nLFxyXG4gICAgW1wiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVCAqL106ICdGaXJzdCBhcmd1bWVudCB0byBgb25Mb2dgIG11c3QgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLicsXHJcbiAgICBbXCJpZGItb3BlblwiIC8qIEFwcEVycm9yLklEQl9PUEVOICovXTogJ0Vycm9yIHRocm93biB3aGVuIG9wZW5pbmcgSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIFtcImlkYi1nZXRcIiAvKiBBcHBFcnJvci5JREJfR0VUICovXTogJ0Vycm9yIHRocm93biB3aGVuIHJlYWRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgW1wiaWRiLXNldFwiIC8qIEFwcEVycm9yLklEQl9XUklURSAqL106ICdFcnJvciB0aHJvd24gd2hlbiB3cml0aW5nIHRvIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBbXCJpZGItZGVsZXRlXCIgLyogQXBwRXJyb3IuSURCX0RFTEVURSAqL106ICdFcnJvciB0aHJvd24gd2hlbiBkZWxldGluZyBmcm9tIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LidcclxufTtcclxuY29uc3QgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FwcCcsICdGaXJlYmFzZScsIEVSUk9SUyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIEZpcmViYXNlQXBwSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPVxyXG4gICAgICAgICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQobmV3IENvbXBvbmVudCgnYXBwJywgKCkgPT4gdGhpcywgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgIH1cclxuICAgIHNldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQodmFsKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcclxuICAgIH1cclxuICAgIGdldCBjb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XHJcbiAgICB9XHJcbiAgICBnZXQgY29udGFpbmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNEZWxldGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RlbGV0ZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgaXNEZWxldGVkKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBjaGVja0Rlc3Ryb3llZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovLCB7IGFwcE5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBTREsgdmVyc2lvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgU0RLX1ZFUlNJT04gPSB2ZXJzaW9uO1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQXBwKF9vcHRpb25zLCByYXdDb25maWcgPSB7fSkge1xyXG4gICAgbGV0IG9wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgIGlmICh0eXBlb2YgcmF3Q29uZmlnICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSByYXdDb25maWc7XHJcbiAgICAgICAgcmF3Q29uZmlnID0geyBuYW1lIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb25maWcgPSBPYmplY3QuYXNzaWduKHsgbmFtZTogREVGQVVMVF9FTlRSWV9OQU1FLCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IGZhbHNlIH0sIHJhd0NvbmZpZyk7XHJcbiAgICBjb25zdCBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBBcHBFcnJvci5CQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0gZ2V0RGVmYXVsdEFwcENvbmZpZygpKTtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tb3B0aW9uc1wiIC8qIEFwcEVycm9yLk5PX09QVElPTlMgKi8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhpc3RpbmdBcHAgPSBfYXBwcy5nZXQobmFtZSk7XHJcbiAgICBpZiAoZXhpc3RpbmdBcHApIHtcclxuICAgICAgICAvLyByZXR1cm4gdGhlIGV4aXN0aW5nIGFwcCBpZiBvcHRpb25zIGFuZCBjb25maWcgZGVlcCBlcXVhbCB0aGUgb25lcyBpbiB0aGUgZXhpc3RpbmcgYXBwLlxyXG4gICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgZXhpc3RpbmdBcHAub3B0aW9ucykgJiZcclxuICAgICAgICAgICAgZGVlcEVxdWFsKGNvbmZpZywgZXhpc3RpbmdBcHAuY29uZmlnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBcHA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGFpbmVyID0gbmV3IENvbXBvbmVudENvbnRhaW5lcihuYW1lKTtcclxuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIF9jb21wb25lbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3QXBwID0gbmV3IEZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcik7XHJcbiAgICBfYXBwcy5zZXQobmFtZSwgbmV3QXBwKTtcclxuICAgIHJldHVybiBuZXdBcHA7XHJcbn1cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICpcclxuICogV2hlbiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC4gV2hlbiBhbiBhcHAgbmFtZVxyXG4gKiBpcyBwcm92aWRlZCwgdGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cclxuICpcclxuICogQW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiB0aGUgYXBwIGJlaW5nIHJldHJpZXZlZCBoYXMgbm90IHlldCBiZWVuXHJcbiAqIGluaXRpYWxpemVkLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiB0aGUgZGVmYXVsdCBhcHBcclxuICogY29uc3QgYXBwID0gZ2V0QXBwKCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiBhIG5hbWVkIGFwcFxyXG4gKiBjb25zdCBvdGhlckFwcCA9IGdldEFwcChcIm90aGVyQXBwXCIpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIG5hbWUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBhcHAgdG8gcmV0dXJuLiBJZiBubyBuYW1lIGlzXHJcbiAqICAgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIGBcIltERUZBVUxUXVwiYC5cclxuICpcclxuICogQHJldHVybnMgVGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm92aWRlZCBhcHAgbmFtZS5cclxuICogICBJZiBubyBhcHAgbmFtZSBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQgYXBwIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHAobmFtZSA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgY29uc3QgYXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKCFhcHAgJiYgbmFtZSA9PT0gREVGQVVMVF9FTlRSWV9OQU1FICYmIGdldERlZmF1bHRBcHBDb25maWcoKSkge1xyXG4gICAgICAgIHJldHVybiBpbml0aWFsaXplQXBwKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwO1xyXG59XHJcbi8qKlxyXG4gKiBBIChyZWFkLW9ubHkpIGFycmF5IG9mIGFsbCBpbml0aWFsaXplZCBhcHBzLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHBzKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oX2FwcHMudmFsdWVzKCkpO1xyXG59XHJcbi8qKlxyXG4gKiBSZW5kZXJzIHRoaXMgYXBwIHVudXNhYmxlIGFuZCBmcmVlcyB0aGUgcmVzb3VyY2VzIG9mIGFsbCBhc3NvY2lhdGVkXHJcbiAqIHNlcnZpY2VzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGRlbGV0ZUFwcChhcHApXHJcbiAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcIkFwcCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWxldGluZyBhcHA6XCIsIGVycm9yKTtcclxuICogICB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFwcChhcHApIHtcclxuICAgIGNvbnN0IG5hbWUgPSBhcHAubmFtZTtcclxuICAgIGlmIChfYXBwcy5oYXMobmFtZSkpIHtcclxuICAgICAgICBfYXBwcy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYXBwLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXJzKClcclxuICAgICAgICAgICAgLm1hcChwcm92aWRlciA9PiBwcm92aWRlci5kZWxldGUoKSkpO1xyXG4gICAgICAgIGFwcC5pc0RlbGV0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYSBsaWJyYXJ5J3MgbmFtZSBhbmQgdmVyc2lvbiBmb3IgcGxhdGZvcm0gbG9nZ2luZyBwdXJwb3Nlcy5cclxuICogQHBhcmFtIGxpYnJhcnkgLSBOYW1lIG9mIDFwIG9yIDNwIGxpYnJhcnkgKGUuZy4gZmlyZXN0b3JlLCBhbmd1bGFyZmlyZSlcclxuICogQHBhcmFtIHZlcnNpb24gLSBDdXJyZW50IHZlcnNpb24gb2YgdGhhdCBsaWJyYXJ5LlxyXG4gKiBAcGFyYW0gdmFyaWFudCAtIEJ1bmRsZSB2YXJpYW50LCBlLmcuLCBub2RlLCBybiwgZXRjLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclZlcnNpb24obGlicmFyeUtleU9yTmFtZSwgdmVyc2lvbiwgdmFyaWFudCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgLy8gVE9ETzogV2UgY2FuIHVzZSB0aGlzIGNoZWNrIHRvIHdoaXRlbGlzdCBzdHJpbmdzIHdoZW4vaWYgd2Ugc2V0IHVwXHJcbiAgICAvLyBhIGdvb2Qgd2hpdGVsaXN0IHN5c3RlbS5cclxuICAgIGxldCBsaWJyYXJ5ID0gKF9hID0gUExBVEZPUk1fTE9HX1NUUklOR1tsaWJyYXJ5S2V5T3JOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbGlicmFyeUtleU9yTmFtZTtcclxuICAgIGlmICh2YXJpYW50KSB7XHJcbiAgICAgICAgbGlicmFyeSArPSBgLSR7dmFyaWFudH1gO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbGlicmFyeU1pc21hdGNoID0gbGlicmFyeS5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgY29uc3QgdmVyc2lvbk1pc21hdGNoID0gdmVyc2lvbi5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgaWYgKGxpYnJhcnlNaXNtYXRjaCB8fCB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICBjb25zdCB3YXJuaW5nID0gW1xyXG4gICAgICAgICAgICBgVW5hYmxlIHRvIHJlZ2lzdGVyIGxpYnJhcnkgXCIke2xpYnJhcnl9XCIgd2l0aCB2ZXJzaW9uIFwiJHt2ZXJzaW9ufVwiOmBcclxuICAgICAgICBdO1xyXG4gICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKGBsaWJyYXJ5IG5hbWUgXCIke2xpYnJhcnl9XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFwiL1wiKWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoICYmIHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goJ2FuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmcucHVzaChgdmVyc2lvbiBuYW1lIFwiJHt2ZXJzaW9ufVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nZ2VyLndhcm4od2FybmluZy5qb2luKCcgJykpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KGAke2xpYnJhcnl9LXZlcnNpb25gLCAoKSA9PiAoeyBsaWJyYXJ5LCB2ZXJzaW9uIH0pLCBcIlZFUlNJT05cIiAvKiBDb21wb25lbnRUeXBlLlZFUlNJT04gKi8pKTtcclxufVxyXG4vKipcclxuICogU2V0cyBsb2cgaGFuZGxlciBmb3IgYWxsIEZpcmViYXNlIFNES3MuXHJcbiAqIEBwYXJhbSBsb2dDYWxsYmFjayAtIEFuIG9wdGlvbmFsIGN1c3RvbSBsb2cgaGFuZGxlciB0aGF0IGV4ZWN1dGVzIHVzZXIgY29kZSB3aGVuZXZlclxyXG4gKiB0aGUgRmlyZWJhc2UgU0RLIG1ha2VzIGEgbG9nZ2luZyBjYWxsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBvbkxvZyhsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgaWYgKGxvZ0NhbGxiYWNrICE9PSBudWxsICYmIHR5cGVvZiBsb2dDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVCAqLyk7XHJcbiAgICB9XHJcbiAgICBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgbG9nIGxldmVsIGZvciBhbGwgRmlyZWJhc2UgU0RLcy5cclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIGFyZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYGluZm9gLCBlcnJvcnMgYXJlIGxvZ2dlZCwgYnV0IGBkZWJ1Z2AgYW5kXHJcbiAqIGB2ZXJib3NlYCBsb2dzIGFyZSBub3QpLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsb2dMZXZlbCkge1xyXG4gICAgc2V0TG9nTGV2ZWwkMShsb2dMZXZlbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREJfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtZGF0YWJhc2UnO1xyXG5jb25zdCBEQl9WRVJTSU9OID0gMTtcclxuY29uc3QgU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtc3RvcmUnO1xyXG5sZXQgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTiwge1xyXG4gICAgICAgICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHVzZSAnYnJlYWsnIGluIHRoaXMgc3dpdGNoIHN0YXRlbWVudCwgdGhlIGZhbGwtdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgd2hhdCB3ZSB3YW50LCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhvc2UgdmVyc2lvbnMgdG8gcnVuLCBub3Qgb25seSB0aGUgbGFzdCBvbmUuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLW9wZW5cIiAvKiBBcHBFcnJvci5JREJfT1BFTiAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYlByb21pc2U7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gcmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCKGFwcCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiXHJcbiAgICAgICAgICAgIC50cmFuc2FjdGlvbihTVE9SRV9OQU1FKVxyXG4gICAgICAgICAgICAub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSlcclxuICAgICAgICAgICAgLmdldChjb21wdXRlS2V5KGFwcCkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihlLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaWRiR2V0RXJyb3IgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1nZXRcIiAvKiBBcHBFcnJvci5JREJfR0VUICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5hc3luYyBmdW5jdGlvbiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQihhcHAsIGhlYXJ0YmVhdE9iamVjdCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSk7XHJcbiAgICAgICAgYXdhaXQgb2JqZWN0U3RvcmUucHV0KGhlYXJ0YmVhdE9iamVjdCwgY29tcHV0ZUtleShhcHApKTtcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItc2V0XCIgLyogQXBwRXJyb3IuSURCX1dSSVRFICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlS2V5KGFwcCkge1xyXG4gICAgcmV0dXJuIGAke2FwcC5uYW1lfSEke2FwcC5vcHRpb25zLmFwcElkfWA7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgTUFYX0hFQURFUl9CWVRFUyA9IDEwMjQ7XHJcbi8vIDMwIGRheXNcclxuY29uc3QgU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUyA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMDtcclxuY2xhc3MgSGVhcnRiZWF0U2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW4tbWVtb3J5IGNhY2hlIGZvciBoZWFydGJlYXRzLCB1c2VkIGJ5IGdldEhlYXJ0YmVhdHNIZWFkZXIoKSB0byBnZW5lcmF0ZVxyXG4gICAgICAgICAqIHRoZSBoZWFkZXIgc3RyaW5nLlxyXG4gICAgICAgICAqIFN0b3JlcyBvbmUgcmVjb3JkIHBlciBkYXRlLiBUaGlzIHdpbGwgYmUgY29uc29saWRhdGVkIGludG8gdGhlIHN0YW5kYXJkXHJcbiAgICAgICAgICogZm9ybWF0IG9mIG9uZSByZWNvcmQgcGVyIHVzZXIgYWdlbnQgc3RyaW5nIGJlZm9yZSBiZWluZyBzZW50IGFzIGEgaGVhZGVyLlxyXG4gICAgICAgICAqIFBvcHVsYXRlZCBmcm9tIGluZGV4ZWREQiB3aGVuIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkXHJcbiAgICAgICAgICogYmUga2VwdCBpbiBzeW5jIHdpdGggaW5kZXhlZERCLlxyXG4gICAgICAgICAqIExlYXZlIHB1YmxpYyBmb3IgZWFzaWVyIHRlc3RpbmcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBIZWFydGJlYXRTdG9yYWdlSW1wbChhcHApO1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2UgPSB0aGlzLl9zdG9yYWdlLnJlYWQoKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHRvIHJlcG9ydCBhIGhlYXJ0YmVhdC4gVGhlIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGVcclxuICAgICAqIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IG9iamVjdCwgdXBkYXRlIGhlYXJ0YmVhdHNDYWNoZSwgYW5kIHBlcnNpc3QgaXRcclxuICAgICAqIHRvIEluZGV4ZWREQi5cclxuICAgICAqIE5vdGUgdGhhdCB3ZSBvbmx5IHN0b3JlIG9uZSBoZWFydGJlYXQgcGVyIGRheS4gU28gaWYgYSBoZWFydGJlYXQgZm9yIHRvZGF5IGlzXHJcbiAgICAgKiBhbHJlYWR5IGxvZ2dlZCwgc3Vic2VxdWVudCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIGluIHRoZSBzYW1lIGRheSB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHRyaWdnZXJIZWFydGJlYXQoKSB7XHJcbiAgICAgICAgY29uc3QgcGxhdGZvcm1Mb2dnZXIgPSB0aGlzLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpXHJcbiAgICAgICAgICAgIC5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBcIkZpcmViYXNlIHVzZXIgYWdlbnRcIiBzdHJpbmcgZnJvbSB0aGUgcGxhdGZvcm0gbG9nZ2VyXHJcbiAgICAgICAgLy8gc2VydmljZSwgbm90IHRoZSBicm93c2VyIHVzZXIgYWdlbnQuXHJcbiAgICAgICAgY29uc3QgYWdlbnQgPSBwbGF0Zm9ybUxvZ2dlci5nZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90IHN0b3JlIGEgaGVhcnRiZWF0IGlmIG9uZSBpcyBhbHJlYWR5IHN0b3JlZCBmb3IgdGhpcyBkYXlcclxuICAgICAgICAvLyBvciBpZiBhIGhlYWRlciBoYXMgYWxyZWFkeSBiZWVuIHNlbnQgdG9kYXkuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPT09IGRhdGUgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuc29tZShzaW5nbGVEYXRlSGVhcnRiZWF0ID0+IHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSA9PT0gZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gZW50cnkgZm9yIHRoaXMgZGF0ZS4gQ3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMucHVzaCh7IGRhdGUsIGFnZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgZW50cmllcyBvbGRlciB0aGFuIDMwIGRheXMuXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5maWx0ZXIoc2luZ2xlRGF0ZUhlYXJ0YmVhdCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhiVGltZXN0YW1wID0gbmV3IERhdGUoc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBub3cgLSBoYlRpbWVzdGFtcCA8PSBTVE9SRURfSEVBUlRCRUFUX1JFVEVOVElPTl9NQVhfTUlMTElTO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHdoaWNoIGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgaGVhcnRiZWF0LXNwZWNpZmljIGhlYWRlciBkaXJlY3RseS5cclxuICAgICAqIEl0IGFsc28gY2xlYXJzIGFsbCBoZWFydGJlYXRzIGZyb20gbWVtb3J5IGFzIHdlbGwgYXMgaW4gSW5kZXhlZERCLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IENvbnN1bWluZyBwcm9kdWN0IFNES3Mgc2hvdWxkIG5vdCBzZW5kIHRoZSBoZWFkZXIgaWYgdGhpcyBtZXRob2RcclxuICAgICAqIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRIZWFydGJlYXRzSGVhZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgaXQncyBzdGlsbCBudWxsIG9yIHRoZSBhcnJheSBpcyBlbXB0eSwgdGhlcmUgaXMgbm8gZGF0YSB0byBzZW5kLlxyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcclxuICAgICAgICAvLyBFeHRyYWN0IGFzIG1hbnkgaGVhcnRiZWF0cyBmcm9tIHRoZSBjYWNoZSBhcyB3aWxsIGZpdCB1bmRlciB0aGUgc2l6ZSBsaW1pdC5cclxuICAgICAgICBjb25zdCB7IGhlYXJ0YmVhdHNUb1NlbmQsIHVuc2VudEVudHJpZXMgfSA9IGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzKTtcclxuICAgICAgICBjb25zdCBoZWFkZXJTdHJpbmcgPSBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNUb1NlbmQgfSkpO1xyXG4gICAgICAgIC8vIFN0b3JlIGxhc3Qgc2VudCBkYXRlIHRvIHByZXZlbnQgYW5vdGhlciBiZWluZyBsb2dnZWQvc2VudCBmb3IgdGhlIHNhbWUgZGF5LlxyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPSBkYXRlO1xyXG4gICAgICAgIGlmICh1bnNlbnRFbnRyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gU3RvcmUgYW55IHVuc2VudCBlbnRyaWVzIGlmIHRoZXkgZXhpc3QuXHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdW5zZW50RW50cmllcztcclxuICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyBtb3JlIGxpa2VseSB0aGFuIGVtcHR5aW5nIHRoZSBhcnJheSAoYmVsb3cpIHRvIGxlYWQgdG8gc29tZSBvZGQgc3RhdGVcclxuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGNhY2hlIGlzbid0IGVtcHR5IGFuZCB0aGlzIHdpbGwgYmUgY2FsbGVkIGFnYWluIG9uIHRoZSBuZXh0IHJlcXVlc3QsXHJcbiAgICAgICAgICAgIC8vIGFuZCBpcyBwcm9iYWJseSBzYWZlc3QgaWYgd2UgYXdhaXQgaXQuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBEbyBub3Qgd2FpdCBmb3IgdGhpcywgdG8gcmVkdWNlIGxhdGVuY3kuXHJcbiAgICAgICAgICAgIHZvaWQgdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlclN0cmluZztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRVVENEYXRlU3RyaW5nKCkge1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgLy8gUmV0dXJucyBkYXRlIGZvcm1hdCAnWVlZWS1NTS1ERCdcclxuICAgIHJldHVybiB0b2RheS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIoaGVhcnRiZWF0c0NhY2hlLCBtYXhTaXplID0gTUFYX0hFQURFUl9CWVRFUykge1xyXG4gICAgLy8gSGVhcnRiZWF0cyBncm91cGVkIGJ5IHVzZXIgYWdlbnQgaW4gdGhlIHN0YW5kYXJkIGZvcm1hdCB0byBiZSBzZW50IGluXHJcbiAgICAvLyB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0c1RvU2VuZCA9IFtdO1xyXG4gICAgLy8gU2luZ2xlIGRhdGUgZm9ybWF0IGhlYXJ0YmVhdHMgdGhhdCBhcmUgbm90IHNlbnQuXHJcbiAgICBsZXQgdW5zZW50RW50cmllcyA9IGhlYXJ0YmVhdHNDYWNoZS5zbGljZSgpO1xyXG4gICAgZm9yIChjb25zdCBzaW5nbGVEYXRlSGVhcnRiZWF0IG9mIGhlYXJ0YmVhdHNDYWNoZSkge1xyXG4gICAgICAgIC8vIExvb2sgZm9yIGFuIGV4aXN0aW5nIGVudHJ5IHdpdGggdGhlIHNhbWUgdXNlciBhZ2VudC5cclxuICAgICAgICBjb25zdCBoZWFydGJlYXRFbnRyeSA9IGhlYXJ0YmVhdHNUb1NlbmQuZmluZChoYiA9PiBoYi5hZ2VudCA9PT0gc2luZ2xlRGF0ZUhlYXJ0YmVhdC5hZ2VudCk7XHJcbiAgICAgICAgaWYgKCFoZWFydGJlYXRFbnRyeSkge1xyXG4gICAgICAgICAgICAvLyBJZiBubyBlbnRyeSBmb3IgdGhpcyB1c2VyIGFnZW50IGV4aXN0cywgY3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGFnZW50OiBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50LFxyXG4gICAgICAgICAgICAgICAgZGF0ZXM6IFtzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGVdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoY291bnRCeXRlcyhoZWFydGJlYXRzVG9TZW5kKSA+IG1heFNpemUpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGhlYXJ0YmVhdFxyXG4gICAgICAgICAgICAgICAgLy8gZW50cnkgYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzVG9TZW5kLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhlYXJ0YmVhdEVudHJ5LmRhdGVzLnB1c2goc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGhlYWRlciB3b3VsZCBleGNlZWQgbWF4IHNpemUsIHJlbW92ZSB0aGUgYWRkZWQgZGF0ZVxyXG4gICAgICAgICAgICAvLyBhbmQgc3RvcCBhZGRpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgICAgICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBvcCB1bnNlbnQgZW50cnkgZnJvbSBxdWV1ZS4gKFNraXBwZWQgaWYgYWRkaW5nIHRoZSBlbnRyeSBleGNlZWRlZFxyXG4gICAgICAgIC8vIHF1b3RhIGFuZCB0aGUgbG9vcCBicmVha3MgZWFybHkuKVxyXG4gICAgICAgIHVuc2VudEVudHJpZXMgPSB1bnNlbnRFbnRyaWVzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFydGJlYXRzVG9TZW5kLFxyXG4gICAgICAgIHVuc2VudEVudHJpZXNcclxuICAgIH07XHJcbn1cclxuY2xhc3MgSGVhcnRiZWF0U3RvcmFnZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZSA9IHRoaXMucnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpIHtcclxuICAgICAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGFsbCBoZWFydGJlYXRzLlxyXG4gICAgICovXHJcbiAgICBhc3luYyByZWFkKCkge1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgaGVhcnRiZWF0czogW10gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkhlYXJ0YmVhdE9iamVjdCA9IGF3YWl0IHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQih0aGlzLmFwcCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpZGJIZWFydGJlYXRPYmplY3QgfHwgeyBoZWFydGJlYXRzOiBbXSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG92ZXJ3cml0ZSB0aGUgc3RvcmFnZSB3aXRoIHRoZSBwcm92aWRlZCBoZWFydGJlYXRzXHJcbiAgICBhc3luYyBvdmVyd3JpdGUoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IGF3YWl0IHRoaXMucmVhZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIodGhpcy5hcHAsIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTZW50SGVhcnRiZWF0RGF0ZTogKF9hID0gaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUsXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBoZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gYWRkIGhlYXJ0YmVhdHNcclxuICAgIGFzeW5jIGFkZChoZWFydGJlYXRzT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0ID0gYXdhaXQgdGhpcy5yZWFkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQih0aGlzLmFwcCwge1xyXG4gICAgICAgICAgICAgICAgbGFzdFNlbnRIZWFydGJlYXREYXRlOiAoX2EgPSBoZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSxcclxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QuaGVhcnRiZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAuLi5oZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgYnl0ZXMgb2YgYSBIZWFydGJlYXRzQnlVc2VyQWdlbnQgYXJyYXkgYWZ0ZXIgYmVpbmcgd3JhcHBlZFxyXG4gKiBpbiBhIHBsYXRmb3JtIGxvZ2dpbmcgaGVhZGVyIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCwgYW5kIGNvbnZlcnRlZFxyXG4gKiB0byBiYXNlIDY0LlxyXG4gKi9cclxuZnVuY3Rpb24gY291bnRCeXRlcyhoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgIC8vIGJhc2U2NCBoYXMgYSByZXN0cmljdGVkIHNldCBvZiBjaGFyYWN0ZXJzLCBhbGwgb2Ygd2hpY2ggc2hvdWxkIGJlIDEgYnl0ZS5cclxuICAgIHJldHVybiBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhcclxuICAgIC8vIGhlYXJ0YmVhdHNDYWNoZSB3cmFwcGVyIHByb3BlcnRpZXNcclxuICAgIEpTT04uc3RyaW5naWZ5KHsgdmVyc2lvbjogMiwgaGVhcnRiZWF0czogaGVhcnRiZWF0c0NhY2hlIH0pKS5sZW5ndGg7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyh2YXJpYW50KSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgY29udGFpbmVyID0+IG5ldyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2hlYXJ0YmVhdCcsIGNvbnRhaW5lciA9PiBuZXcgSGVhcnRiZWF0U2VydmljZUltcGwoY29udGFpbmVyKSwgXCJQUklWQVRFXCIgLyogQ29tcG9uZW50VHlwZS5QUklWQVRFICovKSk7XHJcbiAgICAvLyBSZWdpc3RlciBgYXBwYCBwYWNrYWdlLlxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUkbywgdmVyc2lvbiQxLCB2YXJpYW50KTtcclxuICAgIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSRvLCB2ZXJzaW9uJDEsICdlc20yMDE3Jyk7XHJcbiAgICAvLyBSZWdpc3RlciBwbGF0Zm9ybSBTREsgaWRlbnRpZmllciAobm8gdmVyc2lvbikuXHJcbiAgICByZWdpc3RlclZlcnNpb24oJ2ZpcmUtanMnLCAnJyk7XHJcbn1cblxuLyoqXHJcbiAqIEZpcmViYXNlIEFwcFxyXG4gKlxyXG4gKiBAcmVtYXJrcyBUaGlzIHBhY2thZ2UgY29vcmRpbmF0ZXMgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgZGlmZmVyZW50IEZpcmViYXNlIGNvbXBvbmVudHNcclxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXHJcbiAqL1xyXG5yZWdpc3RlckNvcmVDb21wb25lbnRzKCcnKTtcblxuZXhwb3J0IHsgU0RLX1ZFUlNJT04sIERFRkFVTFRfRU5UUllfTkFNRSBhcyBfREVGQVVMVF9FTlRSWV9OQU1FLCBfYWRkQ29tcG9uZW50LCBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQsIF9hcHBzLCBfY2xlYXJDb21wb25lbnRzLCBfY29tcG9uZW50cywgX2dldFByb3ZpZGVyLCBfcmVnaXN0ZXJDb21wb25lbnQsIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UsIGRlbGV0ZUFwcCwgZ2V0QXBwLCBnZXRBcHBzLCBpbml0aWFsaXplQXBwLCBvbkxvZywgcmVnaXN0ZXJWZXJzaW9uLCBzZXRMb2dMZXZlbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IERlZmVycmVkIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKipcclxuICogQ29tcG9uZW50IGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50IHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBwdWJsaWMgc2VydmljZSBuYW1lLCBlLmcuIGFwcCwgYXV0aCwgZmlyZXN0b3JlLCBkYXRhYmFzZVxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlRmFjdG9yeSBTZXJ2aWNlIGZhY3RvcnkgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBwdWJsaWMgaW50ZXJmYWNlXHJcbiAgICAgKiBAcGFyYW0gdHlwZSB3aGV0aGVyIHRoZSBzZXJ2aWNlIHByb3ZpZGVkIGJ5IHRoZSBjb21wb25lbnQgaXMgcHVibGljIG9yIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgaW5zdGFuY2VGYWN0b3J5LCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlRmFjdG9yeSA9IGluc3RhbmNlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzZXJ2aWNlIG5hbWVzcGFjZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IFwiTEFaWVwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkxBWlkgKi87XHJcbiAgICAgICAgdGhpcy5vbkluc3RhbmNlQ3JlYXRlZCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBzZXRJbnN0YW50aWF0aW9uTW9kZShtb2RlKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IG1vZGU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRNdWx0aXBsZUluc3RhbmNlcyhtdWx0aXBsZUluc3RhbmNlcykge1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBtdWx0aXBsZUluc3RhbmNlcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHNldFNlcnZpY2VQcm9wcyhwcm9wcykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayhjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBjYWxsYmFjaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVyIGZvciBpbnN0YW5jZSBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gJ2F1dGgnLCAnYXV0aC1pbnRlcm5hbCdcclxuICogTmFtZVNlcnZpY2VNYXBwaW5nW1RdIGlzIGFuIGFsaWFzIGZvciB0aGUgdHlwZSBvZiB0aGUgaW5zdGFuY2VcclxuICovXHJcbmNsYXNzIFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBIHByb3ZpZGVyIGNhbiBwcm92aWRlIG11bGl0cGxlIGluc3RhbmNlcyBvZiBhIHNlcnZpY2VcclxuICAgICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXHJcbiAgICAgKi9cclxuICAgIGdldChpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGVJbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBkZWZhdWx0IG5hbWVcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5oYXMobm9ybWFsaXplZElkZW50aWZpZXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBkZWZlcnJlZCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQobm9ybWFsaXplZElkZW50aWZpZXIpIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgdGhlIHNlcnZpY2UgaWYgaXQgY2FuIGJlIGF1dG8taW5pdGlhbGl6ZWRcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyBnZXQoKSwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgcmV0dXJuIHRoZSB1bnJlc29sdmVkIHByb21pc2UgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmdldChub3JtYWxpemVkSWRlbnRpZmllcikucHJvbWlzZTtcclxuICAgIH1cclxuICAgIGdldEltbWVkaWF0ZShvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaWRlbnRpZmllcik7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uYWwgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub3B0aW9uYWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQobm9ybWFsaXplZElkZW50aWZpZXIpIHx8XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSW4gY2FzZSBhIGNvbXBvbmVudCBpcyBub3QgaW5pdGlhbGl6ZWQgYW5kIHNob3VsZC9jYW4gbm90IGJlIGF1dG8taW5pdGlhbGl6ZWQgYXQgdGhlIG1vbWVudCwgcmV0dXJuIG51bGwgaWYgdGhlIG9wdGlvbmFsIGZsYWcgaXMgc2V0LCBvciB0aHJvd1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFNlcnZpY2UgJHt0aGlzLm5hbWV9IGlzIG5vdCBhdmFpbGFibGVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldENvbXBvbmVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQ7XHJcbiAgICB9XHJcbiAgICBzZXRDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudC5uYW1lICE9PSB0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYE1pc21hdGNoaW5nIENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmb3IgUHJvdmlkZXIgJHt0aGlzLm5hbWV9LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENvbXBvbmVudCBmb3IgJHt0aGlzLm5hbWV9IGhhcyBhbHJlYWR5IGJlZW4gcHJvdmlkZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgLy8gcmV0dXJuIGVhcmx5IHdpdGhvdXQgYXR0ZW1wdGluZyB0byBpbml0aWFsaXplIHRoZSBjb21wb25lbnQgaWYgdGhlIGNvbXBvbmVudCByZXF1aXJlcyBleHBsaWNpdCBpbml0aWFsaXphdGlvbiAoY2FsbGluZyBgUHJvdmlkZXIuaW5pdGlhbGl6ZSgpYClcclxuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHRoZSBzZXJ2aWNlIGlzIGVhZ2VyLCBpbml0aWFsaXplIHRoZSBkZWZhdWx0IGluc3RhbmNlXHJcbiAgICAgICAgaWYgKGlzQ29tcG9uZW50RWFnZXIoY29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHsgaW5zdGFuY2VJZGVudGlmaWVyOiBERUZBVUxUX0VOVFJZX05BTUUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgZm9yIGFuIGVhZ2VyIENvbXBvbmVudCB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyB0aGUgZWFnZXJcclxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemF0aW9uLCBpdCBzaG91bGQgbm90IGNhdXNlIGEgZmF0YWwgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbnZlc3RpZ2F0ZSBpZiB3ZSBuZWVkIHRvIG1ha2UgaXQgY29uZmlndXJhYmxlLCBiZWNhdXNlIHNvbWUgY29tcG9uZW50IG1heSB3YW50IHRvIGNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yIGluIHRoaXMgY2FzZT9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDcmVhdGUgc2VydmljZSBpbnN0YW5jZXMgZm9yIHRoZSBwZW5kaW5nIHByb21pc2VzIGFuZCByZXNvbHZlIHRoZW1cclxuICAgICAgICAvLyBOT1RFOiBpZiB0aGlzLm11bHRpcGxlSW5zdGFuY2VzIGlzIGZhbHNlLCBvbmx5IHRoZSBkZWZhdWx0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZFxyXG4gICAgICAgIC8vIGFuZCBhbGwgcHJvbWlzZXMgd2l0aCByZXNvbHZlIHdpdGggaXQgcmVnYXJkbGVzcyBvZiB0aGUgaWRlbnRpZmllci5cclxuICAgICAgICBmb3IgKGNvbnN0IFtpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlRGVmZXJyZWRdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIGBnZXRPckluaXRpYWxpemVTZXJ2aWNlKClgIHNob3VsZCBhbHdheXMgcmV0dXJuIGEgdmFsaWQgaW5zdGFuY2Ugc2luY2UgYSBjb21wb25lbnQgaXMgZ3VhcmFudGVlZC4gdXNlICEgdG8gbWFrZSB0eXBlc2NyaXB0IGhhcHB5LlxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VEZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uLCBpdCBzaG91bGQgbm90IGNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IGxlYXZlIHRoZSBwcm9taXNlIHVucmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjbGVhckluc3RhbmNlKGlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuZGVsZXRlKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIC8vIGFwcC5kZWxldGUoKSB3aWxsIGNhbGwgdGhpcyBtZXRob2Qgb24gZXZlcnkgcHJvdmlkZXIgdG8gZGVsZXRlIHRoZSBzZXJ2aWNlc1xyXG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIG1hcmsgdGhlIHByb3ZpZGVyIGFzIGRlbGV0ZWQ/XHJcbiAgICBhc3luYyBkZWxldGUoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmljZXMgPSBBcnJheS5mcm9tKHRoaXMuaW5zdGFuY2VzLnZhbHVlcygpKTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIC4uLnNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHNlcnZpY2UgPT4gJ0lOVEVSTkFMJyBpbiBzZXJ2aWNlKSAvLyBsZWdhY3kgc2VydmljZXNcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAubWFwKHNlcnZpY2UgPT4gc2VydmljZS5JTlRFUk5BTC5kZWxldGUoKSksXHJcbiAgICAgICAgICAgIC4uLnNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHNlcnZpY2UgPT4gJ19kZWxldGUnIGluIHNlcnZpY2UpIC8vIG1vZHVsYXJpemVkIHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgLm1hcChzZXJ2aWNlID0+IHNlcnZpY2UuX2RlbGV0ZSgpKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgaXNDb21wb25lbnRTZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XHJcbiAgICB9XHJcbiAgICBpc0luaXRpYWxpemVkKGlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXMuaGFzKGlkZW50aWZpZXIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3B0aW9ucyhpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzT3B0aW9ucy5nZXQoaWRlbnRpZmllcikgfHwge307XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKG9wdHMgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyA9IHt9IH0gPSBvcHRzO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIob3B0cy5pbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQobm9ybWFsaXplZElkZW50aWZpZXIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGAke3RoaXMubmFtZX0oJHtub3JtYWxpemVkSWRlbnRpZmllcn0pIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENvbXBvbmVudCAke3RoaXMubmFtZX0gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgeWV0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllcixcclxuICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHJlc29sdmUgYW55IHBlbmRpbmcgcHJvbWlzZSB3YWl0aW5nIGZvciB0aGUgc2VydmljZSBpbnN0YW5jZVxyXG4gICAgICAgIGZvciAoY29uc3QgW2luc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2VEZWZlcnJlZF0gb2YgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZERlZmVycmVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkSWRlbnRpZmllciA9PT0gbm9ybWFsaXplZERlZmVycmVkSWRlbnRpZmllcikge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VEZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkICBhZnRlciB0aGUgcHJvdmlkZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYnkgY2FsbGluZyBwcm92aWRlci5pbml0aWFsaXplKCkuXHJcbiAgICAgKiBUaGUgZnVuY3Rpb24gaXMgaW52b2tlZCBTWU5DSFJPTk9VU0xZLCBzbyBpdCBzaG91bGQgbm90IGV4ZWN1dGUgYW55IGxvbmdydW5uaW5nIHRhc2tzIGluIG9yZGVyIHRvIG5vdCBibG9jayB0aGUgcHJvZ3JhbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBbiBvcHRpb25hbCBpbnN0YW5jZSBpZGVudGlmaWVyXHJcbiAgICAgKiBAcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgdGhlIGNhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIG9uSW5pdChjYWxsYmFjaywgaWRlbnRpZmllcikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2FsbGJhY2tzID0gKF9hID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFNldCgpO1xyXG4gICAgICAgIGV4aXN0aW5nQ2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5vbkluaXRDYWxsYmFja3Muc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBleGlzdGluZ0NhbGxiYWNrcyk7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChub3JtYWxpemVkSWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXhpc3RpbmdJbnN0YW5jZSwgbm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBleGlzdGluZ0NhbGxiYWNrcy5kZWxldGUoY2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZSBvbkluaXQgY2FsbGJhY2tzIHN5bmNocm9ub3VzbHlcclxuICAgICAqIEBwYXJhbSBpbnN0YW5jZSB0aGUgc2VydmljZSBpbnN0YW5jZWBcclxuICAgICAqL1xyXG4gICAgaW52b2tlT25Jbml0Q2FsbGJhY2tzKGluc3RhbmNlLCBpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICghY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGluc3RhbmNlLCBpZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvcnMgaW4gdGhlIG9uSW5pdCBjYWxsYmFja1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0T3JJbml0aWFsaXplU2VydmljZSh7IGluc3RhbmNlSWRlbnRpZmllciwgb3B0aW9ucyA9IHt9IH0pIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlICYmIHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gdGhpcy5jb21wb25lbnQuaW5zdGFuY2VGYWN0b3J5KHRoaXMuY29udGFpbmVyLCB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5KGluc3RhbmNlSWRlbnRpZmllciksXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEludm9rZSBvbkluaXQgbGlzdGVuZXJzLlxyXG4gICAgICAgICAgICAgKiBOb3RlIHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkIGlzIGRpZmZlcmVudCwgd2hpY2ggaXMgdXNlZCBieSB0aGUgY29tcG9uZW50IGNyZWF0b3IsXHJcbiAgICAgICAgICAgICAqIHdoaWxlIG9uSW5pdCBsaXN0ZW5lcnMgYXJlIHJlZ2lzdGVyZWQgYnkgY29uc3VtZXJzIG9mIHRoZSBwcm92aWRlci5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuaW52b2tlT25Jbml0Q2FsbGJhY2tzKGluc3RhbmNlLCBpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogT3JkZXIgaXMgaW1wb3J0YW50XHJcbiAgICAgICAgICAgICAqIG9uSW5zdGFuY2VDcmVhdGVkKCkgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciB0aGlzLmluc3RhbmNlcy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7IHdoaWNoXHJcbiAgICAgICAgICAgICAqIG1ha2VzIGBpc0luaXRpYWxpemVkKClgIHJldHVybiB0cnVlLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkKHRoaXMuY29udGFpbmVyLCBpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvcnMgaW4gdGhlIG9uSW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2UgfHwgbnVsbDtcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyA/IGlkZW50aWZpZXIgOiBERUZBVUxUX0VOVFJZX05BTUU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaWRlbnRpZmllcjsgLy8gYXNzdW1lIG11bHRpcGxlIGluc3RhbmNlcyBhcmUgc3VwcG9ydGVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHByb3ZpZGVkLlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3VsZEF1dG9Jbml0aWFsaXplKCkge1xyXG4gICAgICAgIHJldHVybiAoISF0aGlzLmNvbXBvbmVudCAmJlxyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSAhPT0gXCJFWFBMSUNJVFwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkVYUExJQ0lUICovKTtcclxuICAgIH1cclxufVxyXG4vLyB1bmRlZmluZWQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgc2VydmljZSBmYWN0b3J5IGZvciB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG5mdW5jdGlvbiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpZGVudGlmaWVyKSB7XHJcbiAgICByZXR1cm4gaWRlbnRpZmllciA9PT0gREVGQVVMVF9FTlRSWV9OQU1FID8gdW5kZWZpbmVkIDogaWRlbnRpZmllcjtcclxufVxyXG5mdW5jdGlvbiBpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSA9PT0gXCJFQUdFUlwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkVBR0VSICovO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb21wb25lbnRDb250YWluZXIgdGhhdCBwcm92aWRlcyBQcm92aWRlcnMgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG5jbGFzcyBDb21wb25lbnRDb250YWluZXIge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50IENvbXBvbmVudCBiZWluZyBhZGRlZFxyXG4gICAgICogQHBhcmFtIG92ZXJ3cml0ZSBXaGVuIGEgY29tcG9uZW50IHdpdGggdGhlIHNhbWUgbmFtZSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsXHJcbiAgICAgKiBpZiBvdmVyd3JpdGUgaXMgdHJ1ZTogb3ZlcndyaXRlIHRoZSBleGlzdGluZyBjb21wb25lbnQgd2l0aCB0aGUgbmV3IGNvbXBvbmVudCBhbmQgY3JlYXRlIGEgbmV3XHJcbiAgICAgKiBwcm92aWRlciB3aXRoIHRoZSBuZXcgY29tcG9uZW50LiBJdCBjYW4gYmUgdXNlZnVsIGluIHRlc3RzIHdoZXJlIHlvdSB3YW50IHRvIHVzZSBkaWZmZXJlbnQgbW9ja3NcclxuICAgICAqIGZvciBkaWZmZXJlbnQgdGVzdHMuXHJcbiAgICAgKiBpZiBvdmVyd3JpdGUgaXMgZmFsc2U6IHRocm93IGFuIGV4Y2VwdGlvblxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCAke3RoaXMubmFtZX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdmlkZXIuc2V0Q29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICBhZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIGlmIChwcm92aWRlci5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgZXhpc3RpbmcgcHJvdmlkZXIgZnJvbSB0aGUgY29udGFpbmVyLCBzbyB3ZSBjYW4gcmVnaXN0ZXIgdGhlIG5ldyBjb21wb25lbnRcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuZGVsZXRlKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2V0UHJvdmlkZXIgcHJvdmlkZXMgYSB0eXBlIHNhZmUgaW50ZXJmYWNlIHdoZXJlIGl0IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgZmllbGQgbmFtZVxyXG4gICAgICogcHJlc2VudCBpbiBOYW1lU2VydmljZU1hcHBpbmcgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEZpcmViYXNlIFNES3MgcHJvdmlkaW5nIHNlcnZpY2VzIHNob3VsZCBleHRlbmQgTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZSB0byByZWdpc3RlclxyXG4gICAgICogdGhlbXNlbHZlcy5cclxuICAgICAqL1xyXG4gICAgZ2V0UHJvdmlkZXIobmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVycy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3JlYXRlIGEgUHJvdmlkZXIgZm9yIGEgc2VydmljZSB0aGF0IGhhc24ndCByZWdpc3RlcmVkIHdpdGggRmlyZWJhc2VcclxuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBQcm92aWRlcihuYW1lLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcclxuICAgIH1cclxuICAgIGdldFByb3ZpZGVycygpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnByb3ZpZGVycy52YWx1ZXMoKSk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb250YWluZXIsIFByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiaW1wb3J0IHsgX2dldFByb3ZpZGVyLCBnZXRBcHAsIF9yZWdpc3RlckNvbXBvbmVudCwgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYic7XG5cbmNvbnN0IG5hbWUgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zXCI7XG5jb25zdCB2ZXJzaW9uID0gXCIwLjYuNFwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBQRU5ESU5HX1RJTUVPVVRfTVMgPSAxMDAwMDtcclxuY29uc3QgUEFDS0FHRV9WRVJTSU9OID0gYHc6JHt2ZXJzaW9ufWA7XHJcbmNvbnN0IElOVEVSTkFMX0FVVEhfVkVSU0lPTiA9ICdGSVNfdjInO1xyXG5jb25zdCBJTlNUQUxMQVRJT05TX0FQSV9VUkwgPSAnaHR0cHM6Ly9maXJlYmFzZWluc3RhbGxhdGlvbnMuZ29vZ2xlYXBpcy5jb20vdjEnO1xyXG5jb25zdCBUT0tFTl9FWFBJUkFUSU9OX0JVRkZFUiA9IDYwICogNjAgKiAxMDAwOyAvLyBPbmUgaG91clxyXG5jb25zdCBTRVJWSUNFID0gJ2luc3RhbGxhdGlvbnMnO1xyXG5jb25zdCBTRVJWSUNFX05BTUUgPSAnSW5zdGFsbGF0aW9ucyc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEVSUk9SX0RFU0NSSVBUSU9OX01BUCA9IHtcclxuICAgIFtcIm1pc3NpbmctYXBwLWNvbmZpZy12YWx1ZXNcIiAvKiBFcnJvckNvZGUuTUlTU0lOR19BUFBfQ09ORklHX1ZBTFVFUyAqL106ICdNaXNzaW5nIEFwcCBjb25maWd1cmF0aW9uIHZhbHVlOiBcInskdmFsdWVOYW1lfVwiJyxcclxuICAgIFtcIm5vdC1yZWdpc3RlcmVkXCIgLyogRXJyb3JDb2RlLk5PVF9SRUdJU1RFUkVEICovXTogJ0ZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyBub3QgcmVnaXN0ZXJlZC4nLFxyXG4gICAgW1wiaW5zdGFsbGF0aW9uLW5vdC1mb3VuZFwiIC8qIEVycm9yQ29kZS5JTlNUQUxMQVRJT05fTk9UX0ZPVU5EICovXTogJ0ZpcmViYXNlIEluc3RhbGxhdGlvbiBub3QgZm91bmQuJyxcclxuICAgIFtcInJlcXVlc3QtZmFpbGVkXCIgLyogRXJyb3JDb2RlLlJFUVVFU1RfRkFJTEVEICovXTogJ3skcmVxdWVzdE5hbWV9IHJlcXVlc3QgZmFpbGVkIHdpdGggZXJyb3IgXCJ7JHNlcnZlckNvZGV9IHskc2VydmVyU3RhdHVzfTogeyRzZXJ2ZXJNZXNzYWdlfVwiJyxcclxuICAgIFtcImFwcC1vZmZsaW5lXCIgLyogRXJyb3JDb2RlLkFQUF9PRkZMSU5FICovXTogJ0NvdWxkIG5vdCBwcm9jZXNzIHJlcXVlc3QuIEFwcGxpY2F0aW9uIG9mZmxpbmUuJyxcclxuICAgIFtcImRlbGV0ZS1wZW5kaW5nLXJlZ2lzdHJhdGlvblwiIC8qIEVycm9yQ29kZS5ERUxFVEVfUEVORElOR19SRUdJU1RSQVRJT04gKi9dOiBcIkNhbid0IGRlbGV0ZSBpbnN0YWxsYXRpb24gd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIHJlZ2lzdHJhdGlvbiByZXF1ZXN0LlwiXHJcbn07XHJcbmNvbnN0IEVSUk9SX0ZBQ1RPUlkgPSBuZXcgRXJyb3JGYWN0b3J5KFNFUlZJQ0UsIFNFUlZJQ0VfTkFNRSwgRVJST1JfREVTQ1JJUFRJT05fTUFQKTtcclxuLyoqIFJldHVybnMgdHJ1ZSBpZiBlcnJvciBpcyBhIEZpcmViYXNlRXJyb3IgdGhhdCBpcyBiYXNlZCBvbiBhbiBlcnJvciBmcm9tIHRoZSBzZXJ2ZXIuICovXHJcbmZ1bmN0aW9uIGlzU2VydmVyRXJyb3IoZXJyb3IpIHtcclxuICAgIHJldHVybiAoZXJyb3IgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yICYmXHJcbiAgICAgICAgZXJyb3IuY29kZS5pbmNsdWRlcyhcInJlcXVlc3QtZmFpbGVkXCIgLyogRXJyb3JDb2RlLlJFUVVFU1RfRkFJTEVEICovKSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KHsgcHJvamVjdElkIH0pIHtcclxuICAgIHJldHVybiBgJHtJTlNUQUxMQVRJT05TX0FQSV9VUkx9L3Byb2plY3RzLyR7cHJvamVjdElkfS9pbnN0YWxsYXRpb25zYDtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0b2tlbjogcmVzcG9uc2UudG9rZW4sXHJcbiAgICAgICAgcmVxdWVzdFN0YXR1czogMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLyxcclxuICAgICAgICBleHBpcmVzSW46IGdldEV4cGlyZXNJbkZyb21SZXNwb25zZUV4cGlyZXNJbihyZXNwb25zZS5leHBpcmVzSW4pLFxyXG4gICAgICAgIGNyZWF0aW9uVGltZTogRGF0ZS5ub3coKVxyXG4gICAgfTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBnZXRFcnJvckZyb21SZXNwb25zZShyZXF1ZXN0TmFtZSwgcmVzcG9uc2UpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IGVycm9yRGF0YSA9IHJlc3BvbnNlSnNvbi5lcnJvcjtcclxuICAgIHJldHVybiBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcInJlcXVlc3QtZmFpbGVkXCIgLyogRXJyb3JDb2RlLlJFUVVFU1RfRkFJTEVEICovLCB7XHJcbiAgICAgICAgcmVxdWVzdE5hbWUsXHJcbiAgICAgICAgc2VydmVyQ29kZTogZXJyb3JEYXRhLmNvZGUsXHJcbiAgICAgICAgc2VydmVyTWVzc2FnZTogZXJyb3JEYXRhLm1lc3NhZ2UsXHJcbiAgICAgICAgc2VydmVyU3RhdHVzOiBlcnJvckRhdGEuc3RhdHVzXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJzKHsgYXBpS2V5IH0pIHtcclxuICAgIHJldHVybiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAneC1nb29nLWFwaS1rZXknOiBhcGlLZXlcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEhlYWRlcnNXaXRoQXV0aChhcHBDb25maWcsIHsgcmVmcmVzaFRva2VuIH0pIHtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKGFwcENvbmZpZyk7XHJcbiAgICBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsIGdldEF1dGhvcml6YXRpb25IZWFkZXIocmVmcmVzaFRva2VuKSk7XHJcbiAgICByZXR1cm4gaGVhZGVycztcclxufVxyXG4vKipcclxuICogQ2FsbHMgdGhlIHBhc3NlZCBpbiBmZXRjaCB3cmFwcGVyIGFuZCByZXR1cm5zIHRoZSByZXNwb25zZS5cclxuICogSWYgdGhlIHJldHVybmVkIHJlc3BvbnNlIGhhcyBhIHN0YXR1cyBvZiA1eHgsIHJlLXJ1bnMgdGhlIGZ1bmN0aW9uIG9uY2UgYW5kXHJcbiAqIHJldHVybnMgdGhlIHJlc3BvbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmV0cnlJZlNlcnZlckVycm9yKGZuKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xyXG4gICAgaWYgKHJlc3VsdC5zdGF0dXMgPj0gNTAwICYmIHJlc3VsdC5zdGF0dXMgPCA2MDApIHtcclxuICAgICAgICAvLyBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuIFJldHJ5IHJlcXVlc3QuXHJcbiAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGdldEV4cGlyZXNJbkZyb21SZXNwb25zZUV4cGlyZXNJbihyZXNwb25zZUV4cGlyZXNJbikge1xyXG4gICAgLy8gVGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBzZXJ2ZXIgd2lsbCBuZXZlciByZXNwb25kIHdpdGggZnJhY3Rpb25zIG9mIGEgc2Vjb25kLlxyXG4gICAgcmV0dXJuIE51bWJlcihyZXNwb25zZUV4cGlyZXNJbi5yZXBsYWNlKCdzJywgJzAwMCcpKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikge1xyXG4gICAgcmV0dXJuIGAke0lOVEVSTkFMX0FVVEhfVkVSU0lPTn0gJHtyZWZyZXNoVG9rZW59YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KHsgYXBwQ29uZmlnLCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIgfSwgeyBmaWQgfSkge1xyXG4gICAgY29uc3QgZW5kcG9pbnQgPSBnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKGFwcENvbmZpZyk7XHJcbiAgICAvLyBJZiBoZWFydGJlYXQgc2VydmljZSBleGlzdHMsIGFkZCB0aGUgaGVhcnRiZWF0IHN0cmluZyB0byB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0U2VydmljZSA9IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlci5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIGlmIChoZWFydGJlYXRTZXJ2aWNlKSB7XHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0c0hlYWRlciA9IGF3YWl0IGhlYXJ0YmVhdFNlcnZpY2UuZ2V0SGVhcnRiZWF0c0hlYWRlcigpO1xyXG4gICAgICAgIGlmIChoZWFydGJlYXRzSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCd4LWZpcmViYXNlLWNsaWVudCcsIGhlYXJ0YmVhdHNIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgICAgZmlkLFxyXG4gICAgICAgIGF1dGhWZXJzaW9uOiBJTlRFUk5BTF9BVVRIX1ZFUlNJT04sXHJcbiAgICAgICAgYXBwSWQ6IGFwcENvbmZpZy5hcHBJZCxcclxuICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT05cclxuICAgIH07XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcclxuICAgIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJldHJ5SWZTZXJ2ZXJFcnJvcigoKSA9PiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VWYWx1ZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBjb25zdCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGZpZDogcmVzcG9uc2VWYWx1ZS5maWQgfHwgZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDIgLyogUmVxdWVzdFN0YXR1cy5DT01QTEVURUQgKi8sXHJcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogcmVzcG9uc2VWYWx1ZS5yZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgICAgIGF1dGhUb2tlbjogZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2VWYWx1ZS5hdXRoVG9rZW4pXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgYXdhaXQgZ2V0RXJyb3JGcm9tUmVzcG9uc2UoJ0NyZWF0ZSBJbnN0YWxsYXRpb24nLCByZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgZ2l2ZW4gdGltZSBwYXNzZXMuICovXHJcbmZ1bmN0aW9uIHNsZWVwKG1zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBidWZmZXJUb0Jhc2U2NFVybFNhZmUoYXJyYXkpIHtcclxuICAgIGNvbnN0IGI2NCA9IGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZSguLi5hcnJheSkpO1xyXG4gICAgcmV0dXJuIGI2NC5yZXBsYWNlKC9cXCsvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJ18nKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBWQUxJRF9GSURfUEFUVEVSTiA9IC9eW2NkZWZdW1xcdy1dezIxfSQvO1xyXG5jb25zdCBJTlZBTElEX0ZJRCA9ICcnO1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgbmV3IEZJRCB1c2luZyByYW5kb20gdmFsdWVzIGZyb20gV2ViIENyeXB0byBBUEkuXHJcbiAqIFJldHVybnMgYW4gZW1wdHkgc3RyaW5nIGlmIEZJRCBnZW5lcmF0aW9uIGZhaWxzIGZvciBhbnkgcmVhc29uLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVGaWQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEEgdmFsaWQgRklEIGhhcyBleGFjdGx5IDIyIGJhc2U2NCBjaGFyYWN0ZXJzLCB3aGljaCBpcyAxMzIgYml0cywgb3IgMTYuNVxyXG4gICAgICAgIC8vIGJ5dGVzLiBvdXIgaW1wbGVtZW50YXRpb24gZ2VuZXJhdGVzIGEgMTcgYnl0ZSBhcnJheSBpbnN0ZWFkLlxyXG4gICAgICAgIGNvbnN0IGZpZEJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KDE3KTtcclxuICAgICAgICBjb25zdCBjcnlwdG8gPSBzZWxmLmNyeXB0byB8fCBzZWxmLm1zQ3J5cHRvO1xyXG4gICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoZmlkQnl0ZUFycmF5KTtcclxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBmaXJzdCA0IHJhbmRvbSBiaXRzIHdpdGggdGhlIGNvbnN0YW50IEZJRCBoZWFkZXIgb2YgMGIwMTExLlxyXG4gICAgICAgIGZpZEJ5dGVBcnJheVswXSA9IDBiMDExMTAwMDAgKyAoZmlkQnl0ZUFycmF5WzBdICUgMGIwMDAxMDAwMCk7XHJcbiAgICAgICAgY29uc3QgZmlkID0gZW5jb2RlKGZpZEJ5dGVBcnJheSk7XHJcbiAgICAgICAgcmV0dXJuIFZBTElEX0ZJRF9QQVRURVJOLnRlc3QoZmlkKSA/IGZpZCA6IElOVkFMSURfRklEO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgLy8gRklEIGdlbmVyYXRpb24gZXJyb3JlZFxyXG4gICAgICAgIHJldHVybiBJTlZBTElEX0ZJRDtcclxuICAgIH1cclxufVxyXG4vKiogQ29udmVydHMgYSBGSUQgVWludDhBcnJheSB0byBhIGJhc2U2NCBzdHJpbmcgcmVwcmVzZW50YXRpb24uICovXHJcbmZ1bmN0aW9uIGVuY29kZShmaWRCeXRlQXJyYXkpIHtcclxuICAgIGNvbnN0IGI2NFN0cmluZyA9IGJ1ZmZlclRvQmFzZTY0VXJsU2FmZShmaWRCeXRlQXJyYXkpO1xyXG4gICAgLy8gUmVtb3ZlIHRoZSAyM3JkIGNoYXJhY3RlciB0aGF0IHdhcyBhZGRlZCBiZWNhdXNlIG9mIHRoZSBleHRyYSA0IGJpdHMgYXQgdGhlXHJcbiAgICAvLyBlbmQgb2Ygb3VyIDE3IGJ5dGUgYXJyYXksIGFuZCB0aGUgJz0nIHBhZGRpbmcuXHJcbiAgICByZXR1cm4gYjY0U3RyaW5nLnN1YnN0cigwLCAyMik7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFJldHVybnMgYSBzdHJpbmcga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGFwcC4gKi9cclxuZnVuY3Rpb24gZ2V0S2V5KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIGAke2FwcENvbmZpZy5hcHBOYW1lfSEke2FwcENvbmZpZy5hcHBJZH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGZpZENoYW5nZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIENhbGxzIHRoZSBvbklkQ2hhbmdlIGNhbGxiYWNrcyB3aXRoIHRoZSBuZXcgRklEIHZhbHVlLCBhbmQgYnJvYWRjYXN0cyB0aGVcclxuICogY2hhbmdlIHRvIG90aGVyIHRhYnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaWRDaGFuZ2VkKGFwcENvbmZpZywgZmlkKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3Moa2V5LCBmaWQpO1xyXG4gICAgYnJvYWRjYXN0RmlkQ2hhbmdlKGtleSwgZmlkKTtcclxufVxyXG5mdW5jdGlvbiBhZGRDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBPcGVuIHRoZSBicm9hZGNhc3QgY2hhbm5lbCBpZiBpdCdzIG5vdCBhbHJlYWR5IG9wZW4sXHJcbiAgICAvLyB0byBiZSBhYmxlIHRvIGxpc3RlbiB0byBjaGFuZ2UgZXZlbnRzIGZyb20gb3RoZXIgdGFicy5cclxuICAgIGdldEJyb2FkY2FzdENoYW5uZWwoKTtcclxuICAgIGNvbnN0IGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgbGV0IGNhbGxiYWNrU2V0ID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja1NldCkge1xyXG4gICAgICAgIGNhbGxiYWNrU2V0ID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGZpZENoYW5nZUNhbGxiYWNrcy5zZXQoa2V5LCBjYWxsYmFja1NldCk7XHJcbiAgICB9XHJcbiAgICBjYWxsYmFja1NldC5hZGQoY2FsbGJhY2spO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUNhbGxiYWNrKGFwcENvbmZpZywgY2FsbGJhY2spIHtcclxuICAgIGNvbnN0IGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgY29uc3QgY2FsbGJhY2tTZXQgPSBmaWRDaGFuZ2VDYWxsYmFja3MuZ2V0KGtleSk7XHJcbiAgICBpZiAoIWNhbGxiYWNrU2V0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY2FsbGJhY2tTZXQuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgIGlmIChjYWxsYmFja1NldC5zaXplID09PSAwKSB7XHJcbiAgICAgICAgZmlkQ2hhbmdlQ2FsbGJhY2tzLmRlbGV0ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgLy8gQ2xvc2UgYnJvYWRjYXN0IGNoYW5uZWwgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY2FsbGJhY2tzLlxyXG4gICAgY2xvc2VCcm9hZGNhc3RDaGFubmVsKCk7XHJcbn1cclxuZnVuY3Rpb24gY2FsbEZpZENoYW5nZUNhbGxiYWNrcyhrZXksIGZpZCkge1xyXG4gICAgY29uc3QgY2FsbGJhY2tzID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGNhbGxiYWNrcykge1xyXG4gICAgICAgIGNhbGxiYWNrKGZpZCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYnJvYWRjYXN0RmlkQ2hhbmdlKGtleSwgZmlkKSB7XHJcbiAgICBjb25zdCBjaGFubmVsID0gZ2V0QnJvYWRjYXN0Q2hhbm5lbCgpO1xyXG4gICAgaWYgKGNoYW5uZWwpIHtcclxuICAgICAgICBjaGFubmVsLnBvc3RNZXNzYWdlKHsga2V5LCBmaWQgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUJyb2FkY2FzdENoYW5uZWwoKTtcclxufVxyXG5sZXQgYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XHJcbi8qKiBPcGVucyBhbmQgcmV0dXJucyBhIEJyb2FkY2FzdENoYW5uZWwgaWYgaXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLiAqL1xyXG5mdW5jdGlvbiBnZXRCcm9hZGNhc3RDaGFubmVsKCkge1xyXG4gICAgaWYgKCFicm9hZGNhc3RDaGFubmVsICYmICdCcm9hZGNhc3RDaGFubmVsJyBpbiBzZWxmKSB7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKCdbRmlyZWJhc2VdIEZJRCBDaGFuZ2UnKTtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsLm9ubWVzc2FnZSA9IGUgPT4ge1xyXG4gICAgICAgICAgICBjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzKGUuZGF0YS5rZXksIGUuZGF0YS5maWQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnJvYWRjYXN0Q2hhbm5lbDtcclxufVxyXG5mdW5jdGlvbiBjbG9zZUJyb2FkY2FzdENoYW5uZWwoKSB7XHJcbiAgICBpZiAoZmlkQ2hhbmdlQ2FsbGJhY2tzLnNpemUgPT09IDAgJiYgYnJvYWRjYXN0Q2hhbm5lbCkge1xyXG4gICAgICAgIGJyb2FkY2FzdENoYW5uZWwuY2xvc2UoKTtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsID0gbnVsbDtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBEQVRBQkFTRV9OQU1FID0gJ2ZpcmViYXNlLWluc3RhbGxhdGlvbnMtZGF0YWJhc2UnO1xyXG5jb25zdCBEQVRBQkFTRV9WRVJTSU9OID0gMTtcclxuY29uc3QgT0JKRUNUX1NUT1JFX05BTUUgPSAnZmlyZWJhc2UtaW5zdGFsbGF0aW9ucy1zdG9yZSc7XHJcbmxldCBkYlByb21pc2UgPSBudWxsO1xyXG5mdW5jdGlvbiBnZXREYlByb21pc2UoKSB7XHJcbiAgICBpZiAoIWRiUHJvbWlzZSkge1xyXG4gICAgICAgIGRiUHJvbWlzZSA9IG9wZW5EQihEQVRBQkFTRV9OQU1FLCBEQVRBQkFTRV9WRVJTSU9OLCB7XHJcbiAgICAgICAgICAgIHVwZ3JhZGU6IChkYiwgb2xkVmVyc2lvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXNlICdicmVhaycgaW4gdGhpcyBzd2l0Y2ggc3RhdGVtZW50LCB0aGUgZmFsbC10aHJvdWdoXHJcbiAgICAgICAgICAgICAgICAvLyBiZWhhdmlvciBpcyB3aGF0IHdlIHdhbnQsIGJlY2F1c2UgaWYgdGhlcmUgYXJlIG11bHRpcGxlIHZlcnNpb25zIGJldHdlZW5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBvbGQgdmVyc2lvbiBhbmQgdGhlIGN1cnJlbnQgdmVyc2lvbiwgd2Ugd2FudCBBTEwgdGhlIG1pZ3JhdGlvbnNcclxuICAgICAgICAgICAgICAgIC8vIHRoYXQgY29ycmVzcG9uZCB0byB0aG9zZSB2ZXJzaW9ucyB0byBydW4sIG5vdCBvbmx5IHRoZSBsYXN0IG9uZS5cclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZWZhdWx0LWNhc2VcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGJQcm9taXNlO1xyXG59XHJcbi8qKiBBc3NpZ25zIG9yIG92ZXJ3cml0ZXMgdGhlIHJlY29yZCBmb3IgdGhlIGdpdmVuIGtleSB3aXRoIHRoZSBnaXZlbiB2YWx1ZS4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0KGFwcENvbmZpZywgdmFsdWUpIHtcclxuICAgIGNvbnN0IGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgY29uc3QgZGIgPSBhd2FpdCBnZXREYlByb21pc2UoKTtcclxuICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oT0JKRUNUX1NUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSAoYXdhaXQgb2JqZWN0U3RvcmUuZ2V0KGtleSkpO1xyXG4gICAgYXdhaXQgb2JqZWN0U3RvcmUucHV0KHZhbHVlLCBrZXkpO1xyXG4gICAgYXdhaXQgdHguZG9uZTtcclxuICAgIGlmICghb2xkVmFsdWUgfHwgb2xkVmFsdWUuZmlkICE9PSB2YWx1ZS5maWQpIHtcclxuICAgICAgICBmaWRDaGFuZ2VkKGFwcENvbmZpZywgdmFsdWUuZmlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4vKiogUmVtb3ZlcyByZWNvcmQocykgZnJvbSB0aGUgb2JqZWN0U3RvcmUgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4ga2V5LiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZW1vdmUoYXBwQ29uZmlnKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICBhd2FpdCB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSkuZGVsZXRlKGtleSk7XHJcbiAgICBhd2FpdCB0eC5kb25lO1xyXG59XHJcbi8qKlxyXG4gKiBBdG9taWNhbGx5IHVwZGF0ZXMgYSByZWNvcmQgd2l0aCB0aGUgcmVzdWx0IG9mIHVwZGF0ZUZuLCB3aGljaCBnZXRzXHJcbiAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlLiBJZiBuZXdWYWx1ZSBpcyB1bmRlZmluZWQsIHRoZSByZWNvcmQgaXNcclxuICogZGVsZXRlZCBpbnN0ZWFkLlxyXG4gKiBAcmV0dXJuIFVwZGF0ZWQgdmFsdWVcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZShhcHBDb25maWcsIHVwZGF0ZUZuKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gKGF3YWl0IHN0b3JlLmdldChrZXkpKTtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gdXBkYXRlRm4ob2xkVmFsdWUpO1xyXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhd2FpdCBzdG9yZS5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IHN0b3JlLnB1dChuZXdWYWx1ZSwga2V5KTtcclxuICAgIH1cclxuICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICBpZiAobmV3VmFsdWUgJiYgKCFvbGRWYWx1ZSB8fCBvbGRWYWx1ZS5maWQgIT09IG5ld1ZhbHVlLmZpZCkpIHtcclxuICAgICAgICBmaWRDaGFuZ2VkKGFwcENvbmZpZywgbmV3VmFsdWUuZmlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdWYWx1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXBkYXRlcyBhbmQgcmV0dXJucyB0aGUgSW5zdGFsbGF0aW9uRW50cnkgZnJvbSB0aGUgZGF0YWJhc2UuXHJcbiAqIEFsc28gdHJpZ2dlcnMgYSByZWdpc3RyYXRpb24gcmVxdWVzdCBpZiBpdCBpcyBuZWNlc3NhcnkgYW5kIHBvc3NpYmxlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9uRW50cnkoaW5zdGFsbGF0aW9ucykge1xyXG4gICAgbGV0IHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25FbnRyeSA9IGF3YWl0IHVwZGF0ZShpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbGxhdGlvbkVudHJ5ID0gdXBkYXRlT3JDcmVhdGVJbnN0YWxsYXRpb25FbnRyeShvbGRFbnRyeSk7XHJcbiAgICAgICAgY29uc3QgZW50cnlXaXRoUHJvbWlzZSA9IHRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeShpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IGVudHJ5V2l0aFByb21pc2UucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICByZXR1cm4gZW50cnlXaXRoUHJvbWlzZS5pbnN0YWxsYXRpb25FbnRyeTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGluc3RhbGxhdGlvbkVudHJ5LmZpZCA9PT0gSU5WQUxJRF9GSUQpIHtcclxuICAgICAgICAvLyBGSUQgZ2VuZXJhdGlvbiBmYWlsZWQuIFdhaXRpbmcgZm9yIHRoZSBGSUQgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICAgIHJldHVybiB7IGluc3RhbGxhdGlvbkVudHJ5OiBhd2FpdCByZWdpc3RyYXRpb25Qcm9taXNlIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluc3RhbGxhdGlvbkVudHJ5LFxyXG4gICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2VcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgSW5zdGFsbGF0aW9uIEVudHJ5IGlmIG9uZSBkb2VzIG5vdCBleGlzdC5cclxuICogQWxzbyBjbGVhcnMgdGltZWQgb3V0IHBlbmRpbmcgcmVxdWVzdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVPckNyZWF0ZUluc3RhbGxhdGlvbkVudHJ5KG9sZEVudHJ5KSB7XHJcbiAgICBjb25zdCBlbnRyeSA9IG9sZEVudHJ5IHx8IHtcclxuICAgICAgICBmaWQ6IGdlbmVyYXRlRmlkKCksXHJcbiAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi9cclxuICAgIH07XHJcbiAgICByZXR1cm4gY2xlYXJUaW1lZE91dFJlcXVlc3QoZW50cnkpO1xyXG59XHJcbi8qKlxyXG4gKiBJZiB0aGUgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGlzIG5vdCByZWdpc3RlcmVkIHlldCwgdGhpcyB3aWxsIHRyaWdnZXIgdGhlXHJcbiAqIHJlZ2lzdHJhdGlvbiBhbmQgcmV0dXJuIGFuIEluUHJvZ3Jlc3NJbnN0YWxsYXRpb25FbnRyeS5cclxuICpcclxuICogSWYgcmVnaXN0cmF0aW9uUHJvbWlzZSBkb2VzIG5vdCBleGlzdCwgdGhlIGluc3RhbGxhdGlvbkVudHJ5IGlzIGd1YXJhbnRlZWRcclxuICogdG8gYmUgcmVnaXN0ZXJlZC5cclxuICovXHJcbmZ1bmN0aW9uIHRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeShpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgaWYgKGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovKSB7XHJcbiAgICAgICAgaWYgKCFuYXZpZ2F0b3Iub25MaW5lKSB7XHJcbiAgICAgICAgICAgIC8vIFJlZ2lzdHJhdGlvbiByZXF1aXJlZCBidXQgYXBwIGlzIG9mZmxpbmUuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3IgPSBQcm9taXNlLnJlamVjdChFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFwcC1vZmZsaW5lXCIgLyogRXJyb3JDb2RlLkFQUF9PRkZMSU5FICovKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3JcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJ5IHJlZ2lzdGVyaW5nLiBDaGFuZ2Ugc3RhdHVzIHRvIElOX1BST0dSRVNTLlxyXG4gICAgICAgIGNvbnN0IGluUHJvZ3Jlc3NFbnRyeSA9IHtcclxuICAgICAgICAgICAgZmlkOiBpbnN0YWxsYXRpb25FbnRyeS5maWQsXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25UaW1lOiBEYXRlLm5vdygpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCByZWdpc3RyYXRpb25Qcm9taXNlID0gcmVnaXN0ZXJJbnN0YWxsYXRpb24oaW5zdGFsbGF0aW9ucywgaW5Qcm9ncmVzc0VudHJ5KTtcclxuICAgICAgICByZXR1cm4geyBpbnN0YWxsYXRpb25FbnRyeTogaW5Qcm9ncmVzc0VudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5LFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlOiB3YWl0VW50aWxGaWRSZWdpc3RyYXRpb24oaW5zdGFsbGF0aW9ucylcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5zdGFsbGF0aW9uRW50cnkgfTtcclxuICAgIH1cclxufVxyXG4vKiogVGhpcyB3aWxsIGJlIGV4ZWN1dGVkIG9ubHkgb25jZSBmb3IgZWFjaCBuZXcgRmlyZWJhc2UgSW5zdGFsbGF0aW9uLiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZWdpc3Rlckluc3RhbGxhdGlvbihpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkgPSBhd2FpdCBjcmVhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGluc3RhbGxhdGlvbnMsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICByZXR1cm4gc2V0KGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnLCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoaXNTZXJ2ZXJFcnJvcihlKSAmJiBlLmN1c3RvbURhdGEuc2VydmVyQ29kZSA9PT0gNDA5KSB7XHJcbiAgICAgICAgICAgIC8vIFNlcnZlciByZXR1cm5lZCBhIFwiRklEIGNhbiBub3QgYmUgdXNlZFwiIGVycm9yLlxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgIGF3YWl0IHJlbW92ZShpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBSZWdpc3RyYXRpb24gZmFpbGVkLiBTZXQgRklEIGFzIG5vdCByZWdpc3RlcmVkLlxyXG4gICAgICAgICAgICBhd2FpdCBzZXQoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIHtcclxuICAgICAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi9cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuLyoqIENhbGwgaWYgRklEIHJlZ2lzdHJhdGlvbiBpcyBwZW5kaW5nIGluIGFub3RoZXIgcmVxdWVzdC4gKi9cclxuYXN5bmMgZnVuY3Rpb24gd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnMpIHtcclxuICAgIC8vIFVuZm9ydHVuYXRlbHksIHRoZXJlIGlzIG5vIHdheSBvZiByZWxpYWJseSBvYnNlcnZpbmcgd2hlbiBhIHZhbHVlIGluXHJcbiAgICAvLyBJbmRleGVkREIgY2hhbmdlcyAoeWV0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvaW5kZXhlZC1kYi1vYnNlcnZlcnMpLFxyXG4gICAgLy8gc28gd2UgbmVlZCB0byBwb2xsLlxyXG4gICAgbGV0IGVudHJ5ID0gYXdhaXQgdXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICB3aGlsZSAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAvLyBjcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdCBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICBhd2FpdCBzbGVlcCgxMDApO1xyXG4gICAgICAgIGVudHJ5ID0gYXdhaXQgdXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBpZiAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAvLyBUaGUgcmVxdWVzdCB0aW1lZCBvdXQgb3IgZmFpbGVkIGluIGEgZGlmZmVyZW50IGNhbGwuIFRyeSBhZ2Fpbi5cclxuICAgICAgICBjb25zdCB7IGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlIH0gPSBhd2FpdCBnZXRJbnN0YWxsYXRpb25FbnRyeShpbnN0YWxsYXRpb25zKTtcclxuICAgICAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHJlZ2lzdHJhdGlvblByb21pc2UsIGVudHJ5IGlzIHJlZ2lzdGVyZWQuXHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25FbnRyeTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxlZCBvbmx5IGlmIHRoZXJlIGlzIGEgQ3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFVwZGF0ZXMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGluIHRoZSBEQiBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZVxyXG4gKiBDcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdC5cclxuICpcclxuICogUmV0dXJucyB0aGUgdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gdXBkYXRlKGFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGlmICghb2xkRW50cnkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnN0YWxsYXRpb24tbm90LWZvdW5kXCIgLyogRXJyb3JDb2RlLklOU1RBTExBVElPTl9OT1RfRk9VTkQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xlYXJUaW1lZE91dFJlcXVlc3Qob2xkRW50cnkpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXJUaW1lZE91dFJlcXVlc3QoZW50cnkpIHtcclxuICAgIGlmIChoYXNJbnN0YWxsYXRpb25SZXF1ZXN0VGltZWRPdXQoZW50cnkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZmlkOiBlbnRyeS5maWQsXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRyeTtcclxufVxyXG5mdW5jdGlvbiBoYXNJbnN0YWxsYXRpb25SZXF1ZXN0VGltZWRPdXQoaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHJldHVybiAoaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25UaW1lICsgUEVORElOR19USU1FT1VUX01TIDwgRGF0ZS5ub3coKSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVBdXRoVG9rZW5SZXF1ZXN0KHsgYXBwQ29uZmlnLCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIgfSwgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAvLyBJZiBoZWFydGJlYXQgc2VydmljZSBleGlzdHMsIGFkZCB0aGUgaGVhcnRiZWF0IHN0cmluZyB0byB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0U2VydmljZSA9IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlci5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIGlmIChoZWFydGJlYXRTZXJ2aWNlKSB7XHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0c0hlYWRlciA9IGF3YWl0IGhlYXJ0YmVhdFNlcnZpY2UuZ2V0SGVhcnRiZWF0c0hlYWRlcigpO1xyXG4gICAgICAgIGlmIChoZWFydGJlYXRzSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCd4LWZpcmViYXNlLWNsaWVudCcsIGhlYXJ0YmVhdHNIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgICAgaW5zdGFsbGF0aW9uOiB7XHJcbiAgICAgICAgICAgIHNka1ZlcnNpb246IFBBQ0tBR0VfVkVSU0lPTixcclxuICAgICAgICAgICAgYXBwSWQ6IGFwcENvbmZpZy5hcHBJZFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcclxuICAgIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJldHJ5SWZTZXJ2ZXJFcnJvcigoKSA9PiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VWYWx1ZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBjb25zdCBjb21wbGV0ZWRBdXRoVG9rZW4gPSBleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZShyZXNwb25zZVZhbHVlKTtcclxuICAgICAgICByZXR1cm4gY29tcGxldGVkQXV0aFRva2VuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgYXdhaXQgZ2V0RXJyb3JGcm9tUmVzcG9uc2UoJ0dlbmVyYXRlIEF1dGggVG9rZW4nLCByZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludChhcHBDb25maWcsIHsgZmlkIH0pIHtcclxuICAgIHJldHVybiBgJHtnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKX0vJHtmaWR9L2F1dGhUb2tlbnM6Z2VuZXJhdGVgO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgdmFsaWQgYXV0aGVudGljYXRpb24gdG9rZW4gZm9yIHRoZSBpbnN0YWxsYXRpb24uIEdlbmVyYXRlcyBhIG5ld1xyXG4gKiB0b2tlbiBpZiBvbmUgZG9lc24ndCBleGlzdCwgaXMgZXhwaXJlZCBvciBhYm91dCB0byBleHBpcmUuXHJcbiAqXHJcbiAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGlzIHJlZ2lzdGVyZWQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgdG9rZW5Qcm9taXNlO1xyXG4gICAgY29uc3QgZW50cnkgPSBhd2FpdCB1cGRhdGUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBpZiAoIWlzRW50cnlSZWdpc3RlcmVkKG9sZEVudHJ5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vdC1yZWdpc3RlcmVkXCIgLyogRXJyb3JDb2RlLk5PVF9SRUdJU1RFUkVEICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb2xkQXV0aFRva2VuID0gb2xkRW50cnkuYXV0aFRva2VuO1xyXG4gICAgICAgIGlmICghZm9yY2VSZWZyZXNoICYmIGlzQXV0aFRva2VuVmFsaWQob2xkQXV0aFRva2VuKSkge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBpcyBhIHZhbGlkIHRva2VuIGluIHRoZSBEQi5cclxuICAgICAgICAgICAgcmV0dXJuIG9sZEVudHJ5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvbGRBdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlIGFscmVhZHkgaXMgYSB0b2tlbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gICAgICAgICAgICB0b2tlblByb21pc2UgPSB3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0KGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE5vIHRva2VuIG9yIHRva2VuIGV4cGlyZWQuXHJcbiAgICAgICAgICAgIGlmICghbmF2aWdhdG9yLm9uTGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaW5Qcm9ncmVzc0VudHJ5ID0gbWFrZUF1dGhUb2tlblJlcXVlc3RJblByb2dyZXNzRW50cnkob2xkRW50cnkpO1xyXG4gICAgICAgICAgICB0b2tlblByb21pc2UgPSBmZXRjaEF1dGhUb2tlbkZyb21TZXJ2ZXIoaW5zdGFsbGF0aW9ucywgaW5Qcm9ncmVzc0VudHJ5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGluUHJvZ3Jlc3NFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGF1dGhUb2tlbiA9IHRva2VuUHJvbWlzZVxyXG4gICAgICAgID8gYXdhaXQgdG9rZW5Qcm9taXNlXHJcbiAgICAgICAgOiBlbnRyeS5hdXRoVG9rZW47XHJcbiAgICByZXR1cm4gYXV0aFRva2VuO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsIG9ubHkgaWYgRklEIGlzIHJlZ2lzdGVyZWQgYW5kIEF1dGggVG9rZW4gcmVxdWVzdCBpcyBpbiBwcm9ncmVzcy5cclxuICpcclxuICogV2FpdHMgdW50aWwgdGhlIGN1cnJlbnQgcGVuZGluZyByZXF1ZXN0IGZpbmlzaGVzLiBJZiB0aGUgcmVxdWVzdCB0aW1lcyBvdXQsXHJcbiAqIHRyaWVzIG9uY2UgaW4gdGhpcyB0aHJlYWQgYXMgd2VsbC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHdhaXRVbnRpbEF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucywgZm9yY2VSZWZyZXNoKSB7XHJcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGVyZSBpcyBubyB3YXkgb2YgcmVsaWFibHkgb2JzZXJ2aW5nIHdoZW4gYSB2YWx1ZSBpblxyXG4gICAgLy8gSW5kZXhlZERCIGNoYW5nZXMgKHlldCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2luZGV4ZWQtZGItb2JzZXJ2ZXJzKSxcclxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9sbC5cclxuICAgIGxldCBlbnRyeSA9IGF3YWl0IHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgd2hpbGUgKGVudHJ5LmF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAvLyBnZW5lcmF0ZUF1dGhUb2tlbiBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICBhd2FpdCBzbGVlcCgxMDApO1xyXG4gICAgICAgIGVudHJ5ID0gYXdhaXQgdXBkYXRlQXV0aFRva2VuUmVxdWVzdChpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhdXRoVG9rZW4gPSBlbnRyeS5hdXRoVG9rZW47XHJcbiAgICBpZiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IHRpbWVkIG91dCBvciBmYWlsZWQgaW4gYSBkaWZmZXJlbnQgY2FsbC4gVHJ5IGFnYWluLlxyXG4gICAgICAgIHJldHVybiByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXV0aFRva2VuO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb25seSBpZiB0aGVyZSBpcyBhIEdlbmVyYXRlQXV0aFRva2VuIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFVwZGF0ZXMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGluIHRoZSBEQiBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZVxyXG4gKiBHZW5lcmF0ZUF1dGhUb2tlbiByZXF1ZXN0LlxyXG4gKlxyXG4gKiBSZXR1cm5zIHRoZSB1cGRhdGVkIEluc3RhbGxhdGlvbkVudHJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQXV0aFRva2VuUmVxdWVzdChhcHBDb25maWcpIHtcclxuICAgIHJldHVybiB1cGRhdGUoYXBwQ29uZmlnLCBvbGRFbnRyeSA9PiB7XHJcbiAgICAgICAgaWYgKCFpc0VudHJ5UmVnaXN0ZXJlZChvbGRFbnRyeSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJub3QtcmVnaXN0ZXJlZFwiIC8qIEVycm9yQ29kZS5OT1RfUkVHSVNURVJFRCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9sZEF1dGhUb2tlbiA9IG9sZEVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICBpZiAoaGFzQXV0aFRva2VuUmVxdWVzdFRpbWVkT3V0KG9sZEF1dGhUb2tlbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb2xkRW50cnkpLCB7IGF1dGhUb2tlbjogeyByZXF1ZXN0U3RhdHVzOiAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8gfSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9sZEVudHJ5O1xyXG4gICAgfSk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hBdXRoVG9rZW5Gcm9tU2VydmVyKGluc3RhbGxhdGlvbnMsIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IGF3YWl0IGdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdChpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuIH0pO1xyXG4gICAgICAgIGF3YWl0IHNldChpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICByZXR1cm4gYXV0aFRva2VuO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoaXNTZXJ2ZXJFcnJvcihlKSAmJlxyXG4gICAgICAgICAgICAoZS5jdXN0b21EYXRhLnNlcnZlckNvZGUgPT09IDQwMSB8fCBlLmN1c3RvbURhdGEuc2VydmVyQ29kZSA9PT0gNDA0KSkge1xyXG4gICAgICAgICAgICAvLyBTZXJ2ZXIgcmV0dXJuZWQgYSBcIkZJRCBub3QgZm91bmRcIiBvciBhIFwiSW52YWxpZCBhdXRoZW50aWNhdGlvblwiIGVycm9yLlxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgIGF3YWl0IHJlbW92ZShpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnkgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluc3RhbGxhdGlvbkVudHJ5KSwgeyBhdXRoVG9rZW46IHsgcmVxdWVzdFN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovIH0gfSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNldChpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VudHJ5UmVnaXN0ZXJlZChpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIChpbnN0YWxsYXRpb25FbnRyeSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAyIC8qIFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEICovKTtcclxufVxyXG5mdW5jdGlvbiBpc0F1dGhUb2tlblZhbGlkKGF1dGhUb2tlbikge1xyXG4gICAgcmV0dXJuIChhdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLyAmJlxyXG4gICAgICAgICFpc0F1dGhUb2tlbkV4cGlyZWQoYXV0aFRva2VuKSk7XHJcbn1cclxuZnVuY3Rpb24gaXNBdXRoVG9rZW5FeHBpcmVkKGF1dGhUb2tlbikge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIHJldHVybiAobm93IDwgYXV0aFRva2VuLmNyZWF0aW9uVGltZSB8fFxyXG4gICAgICAgIGF1dGhUb2tlbi5jcmVhdGlvblRpbWUgKyBhdXRoVG9rZW4uZXhwaXJlc0luIDwgbm93ICsgVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIpO1xyXG59XHJcbi8qKiBSZXR1cm5zIGFuIHVwZGF0ZWQgSW5zdGFsbGF0aW9uRW50cnkgd2l0aCBhbiBJblByb2dyZXNzQXV0aFRva2VuLiAqL1xyXG5mdW5jdGlvbiBtYWtlQXV0aFRva2VuUmVxdWVzdEluUHJvZ3Jlc3NFbnRyeShvbGRFbnRyeSkge1xyXG4gICAgY29uc3QgaW5Qcm9ncmVzc0F1dGhUb2tlbiA9IHtcclxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8sXHJcbiAgICAgICAgcmVxdWVzdFRpbWU6IERhdGUubm93KClcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvbGRFbnRyeSksIHsgYXV0aFRva2VuOiBpblByb2dyZXNzQXV0aFRva2VuIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChhdXRoVG9rZW4pIHtcclxuICAgIHJldHVybiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLyAmJlxyXG4gICAgICAgIGF1dGhUb2tlbi5yZXF1ZXN0VGltZSArIFBFTkRJTkdfVElNRU9VVF9NUyA8IERhdGUubm93KCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGlmIHRoZXJlIGlzbid0IG9uZSBmb3IgdGhlIGFwcCBhbmRcclxuICogcmV0dXJucyB0aGUgSW5zdGFsbGF0aW9uIElELlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyAtIFRoZSBgSW5zdGFsbGF0aW9uc2AgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldElkKGluc3RhbGxhdGlvbnMpIHtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbXBsID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGNvbnN0IHsgaW5zdGFsbGF0aW9uRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2UgfSA9IGF3YWl0IGdldEluc3RhbGxhdGlvbkVudHJ5KGluc3RhbGxhdGlvbnNJbXBsKTtcclxuICAgIGlmIChyZWdpc3RyYXRpb25Qcm9taXNlKSB7XHJcbiAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIElmIHRoZSBpbnN0YWxsYXRpb24gaXMgYWxyZWFkeSByZWdpc3RlcmVkLCB1cGRhdGUgdGhlIGF1dGhlbnRpY2F0aW9uXHJcbiAgICAgICAgLy8gdG9rZW4gaWYgbmVlZGVkLlxyXG4gICAgICAgIHJlZnJlc2hBdXRoVG9rZW4oaW5zdGFsbGF0aW9uc0ltcGwpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluc3RhbGxhdGlvbkVudHJ5LmZpZDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBhIEZpcmViYXNlIEluc3RhbGxhdGlvbnMgYXV0aCB0b2tlbiwgaWRlbnRpZnlpbmcgdGhlIGN1cnJlbnRcclxuICogRmlyZWJhc2UgSW5zdGFsbGF0aW9uLlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyAtIFRoZSBgSW5zdGFsbGF0aW9uc2AgaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBmb3JjZVJlZnJlc2ggLSBGb3JjZSByZWZyZXNoIHJlZ2FyZGxlc3Mgb2YgdG9rZW4gZXhwaXJhdGlvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0VG9rZW4oaW5zdGFsbGF0aW9ucywgZm9yY2VSZWZyZXNoID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbXBsID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGF3YWl0IGNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnNJbXBsKTtcclxuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgZWl0aGVyIGhhdmUgYSBSZWdpc3RlcmVkIEluc3RhbGxhdGlvbiBpbiB0aGUgREIsIG9yIHdlJ3ZlXHJcbiAgICAvLyBhbHJlYWR5IHRocm93biBhbiBlcnJvci5cclxuICAgIGNvbnN0IGF1dGhUb2tlbiA9IGF3YWl0IHJlZnJlc2hBdXRoVG9rZW4oaW5zdGFsbGF0aW9uc0ltcGwsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICByZXR1cm4gYXV0aFRva2VuLnRva2VuO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnMpIHtcclxuICAgIGNvbnN0IHsgcmVnaXN0cmF0aW9uUHJvbWlzZSB9ID0gYXdhaXQgZ2V0SW5zdGFsbGF0aW9uRW50cnkoaW5zdGFsbGF0aW9ucyk7XHJcbiAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgIC8vIEEgY3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MuIFdhaXQgdW50aWwgaXQgZmluaXNoZXMuXHJcbiAgICAgICAgYXdhaXQgcmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0RGVsZXRlRW5kcG9pbnQoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVyc1dpdGhBdXRoKGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgIGhlYWRlcnNcclxuICAgIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJldHJ5SWZTZXJ2ZXJFcnJvcigoKSA9PiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IGF3YWl0IGdldEVycm9yRnJvbVJlc3BvbnNlKCdEZWxldGUgSW5zdGFsbGF0aW9uJywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldERlbGV0ZUVuZHBvaW50KGFwcENvbmZpZywgeyBmaWQgfSkge1xyXG4gICAgcmV0dXJuIGAke2dldEluc3RhbGxhdGlvbnNFbmRwb2ludChhcHBDb25maWcpfS8ke2ZpZH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWxldGVzIHRoZSBGaXJlYmFzZSBJbnN0YWxsYXRpb24gYW5kIGFsbCBhc3NvY2lhdGVkIGRhdGEuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIC0gVGhlIGBJbnN0YWxsYXRpb25zYCBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlSW5zdGFsbGF0aW9ucyhpbnN0YWxsYXRpb25zKSB7XHJcbiAgICBjb25zdCB7IGFwcENvbmZpZyB9ID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgdXBkYXRlKGFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGlmIChvbGRFbnRyeSAmJiBvbGRFbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgICAgICAvLyBEZWxldGUgdGhlIHVucmVnaXN0ZXJlZCBlbnRyeSB3aXRob3V0IHNlbmRpbmcgYSBkZWxldGVJbnN0YWxsYXRpb24gcmVxdWVzdC5cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9sZEVudHJ5O1xyXG4gICAgfSk7XHJcbiAgICBpZiAoZW50cnkpIHtcclxuICAgICAgICBpZiAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAgICAgLy8gQ2FuJ3QgZGVsZXRlIHdoaWxlIHRyeWluZyB0byByZWdpc3Rlci5cclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkZWxldGUtcGVuZGluZy1yZWdpc3RyYXRpb25cIiAvKiBFcnJvckNvZGUuREVMRVRFX1BFTkRJTkdfUkVHSVNUUkFUSU9OICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAyIC8qIFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEICovKSB7XHJcbiAgICAgICAgICAgIGlmICghbmF2aWdhdG9yLm9uTGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkZWxldGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZywgZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcmVtb3ZlKGFwcENvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFNldHMgYSBuZXcgY2FsbGJhY2sgdGhhdCB3aWxsIGdldCBjYWxsZWQgd2hlbiBJbnN0YWxsYXRpb24gSUQgY2hhbmdlcy5cclxuICogUmV0dXJucyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVtb3ZlIHRoZSBjYWxsYmFjayB3aGVuIGNhbGxlZC5cclxuICogQHBhcmFtIGluc3RhbGxhdGlvbnMgLSBUaGUgYEluc3RhbGxhdGlvbnNgIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBpbnZva2VkIHdoZW4gRklEIGNoYW5nZXMuXHJcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgY2FsbGVkIHRvIHVuc3Vic2NyaWJlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBvbklkQ2hhbmdlKGluc3RhbGxhdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCB7IGFwcENvbmZpZyB9ID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGFkZENhbGxiYWNrKGFwcENvbmZpZywgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICByZW1vdmVDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEluc3RhbGxhdGlvbnN9IGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW5cclxuICoge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9ucyhhcHAgPSBnZXRBcHAoKSkge1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uc0ltcGwgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnaW5zdGFsbGF0aW9ucycpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgcmV0dXJuIGluc3RhbGxhdGlvbnNJbXBsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RBcHBDb25maWcoYXBwKSB7XHJcbiAgICBpZiAoIWFwcCB8fCAhYXBwLm9wdGlvbnMpIHtcclxuICAgICAgICB0aHJvdyBnZXRNaXNzaW5nVmFsdWVFcnJvcignQXBwIENvbmZpZ3VyYXRpb24nKTtcclxuICAgIH1cclxuICAgIGlmICghYXBwLm5hbWUpIHtcclxuICAgICAgICB0aHJvdyBnZXRNaXNzaW5nVmFsdWVFcnJvcignQXBwIE5hbWUnKTtcclxuICAgIH1cclxuICAgIC8vIFJlcXVpcmVkIGFwcCBjb25maWcga2V5c1xyXG4gICAgY29uc3QgY29uZmlnS2V5cyA9IFtcclxuICAgICAgICAncHJvamVjdElkJyxcclxuICAgICAgICAnYXBpS2V5JyxcclxuICAgICAgICAnYXBwSWQnXHJcbiAgICBdO1xyXG4gICAgZm9yIChjb25zdCBrZXlOYW1lIG9mIGNvbmZpZ0tleXMpIHtcclxuICAgICAgICBpZiAoIWFwcC5vcHRpb25zW2tleU5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRocm93IGdldE1pc3NpbmdWYWx1ZUVycm9yKGtleU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwTmFtZTogYXBwLm5hbWUsXHJcbiAgICAgICAgcHJvamVjdElkOiBhcHAub3B0aW9ucy5wcm9qZWN0SWQsXHJcbiAgICAgICAgYXBpS2V5OiBhcHAub3B0aW9ucy5hcGlLZXksXHJcbiAgICAgICAgYXBwSWQ6IGFwcC5vcHRpb25zLmFwcElkXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldE1pc3NpbmdWYWx1ZUVycm9yKHZhbHVlTmFtZSkge1xyXG4gICAgcmV0dXJuIEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibWlzc2luZy1hcHAtY29uZmlnLXZhbHVlc1wiIC8qIEVycm9yQ29kZS5NSVNTSU5HX0FQUF9DT05GSUdfVkFMVUVTICovLCB7XHJcbiAgICAgICAgdmFsdWVOYW1lXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBJTlNUQUxMQVRJT05TX05BTUUgPSAnaW5zdGFsbGF0aW9ucyc7XHJcbmNvbnN0IElOU1RBTExBVElPTlNfTkFNRV9JTlRFUk5BTCA9ICdpbnN0YWxsYXRpb25zLWludGVybmFsJztcclxuY29uc3QgcHVibGljRmFjdG9yeSA9IChjb250YWluZXIpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAvLyBUaHJvd3MgaWYgYXBwIGlzbid0IGNvbmZpZ3VyZWQgcHJvcGVybHkuXHJcbiAgICBjb25zdCBhcHBDb25maWcgPSBleHRyYWN0QXBwQ29uZmlnKGFwcCk7XHJcbiAgICBjb25zdCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnaGVhcnRiZWF0Jyk7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zSW1wbCA9IHtcclxuICAgICAgICBhcHAsXHJcbiAgICAgICAgYXBwQ29uZmlnLFxyXG4gICAgICAgIGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlcixcclxuICAgICAgICBfZGVsZXRlOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgfTtcclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25zSW1wbDtcclxufTtcclxuY29uc3QgaW50ZXJuYWxGYWN0b3J5ID0gKGNvbnRhaW5lcikgPT4ge1xyXG4gICAgY29uc3QgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgIC8vIEludGVybmFsIEZJUyBpbnN0YW5jZSByZWxpZXMgb24gcHVibGljIEZJUyBpbnN0YW5jZS5cclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnMgPSBfZ2V0UHJvdmlkZXIoYXBwLCBJTlNUQUxMQVRJT05TX05BTUUpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uc0ludGVybmFsID0ge1xyXG4gICAgICAgIGdldElkOiAoKSA9PiBnZXRJZChpbnN0YWxsYXRpb25zKSxcclxuICAgICAgICBnZXRUb2tlbjogKGZvcmNlUmVmcmVzaCkgPT4gZ2V0VG9rZW4oaW5zdGFsbGF0aW9ucywgZm9yY2VSZWZyZXNoKVxyXG4gICAgfTtcclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25zSW50ZXJuYWw7XHJcbn07XHJcbmZ1bmN0aW9uIHJlZ2lzdGVySW5zdGFsbGF0aW9ucygpIHtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KElOU1RBTExBVElPTlNfTkFNRSwgcHVibGljRmFjdG9yeSwgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoSU5TVEFMTEFUSU9OU19OQU1FX0lOVEVSTkFMLCBpbnRlcm5hbEZhY3RvcnksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG59XG5cbi8qKlxyXG4gKiBGaXJlYmFzZSBJbnN0YWxsYXRpb25zXHJcbiAqXHJcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxyXG4gKi9cclxucmVnaXN0ZXJJbnN0YWxsYXRpb25zKCk7XHJcbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uKTtcclxuLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cclxucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdlc20yMDE3Jyk7XG5cbmV4cG9ydCB7IGRlbGV0ZUluc3RhbGxhdGlvbnMsIGdldElkLCBnZXRJbnN0YWxsYXRpb25zLCBnZXRUb2tlbiwgb25JZENoYW5nZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IHcgYXMgd3JhcCwgciBhcyByZXBsYWNlVHJhcHMgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcbmV4cG9ydCB7IHUgYXMgdW53cmFwLCB3IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKVxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xuICAgIG9wZW5Qcm9taXNlXG4gICAgICAgIC50aGVuKChkYikgPT4ge1xuICAgICAgICBpZiAodGVybWluYXRlZClcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4gdGVybWluYXRlZCgpKTtcbiAgICAgICAgaWYgKGJsb2NraW5nKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsICgpID0+IGJsb2NraW5nKCkpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKVxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbn1cblxuY29uc3QgcmVhZE1ldGhvZHMgPSBbJ2dldCcsICdnZXRLZXknLCAnZ2V0QWxsJywgJ2dldEFsbEtleXMnLCAnY291bnQnXTtcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xuICAgIGNvbnN0IHRhcmdldEZ1bmNOYW1lID0gcHJvcC5yZXBsYWNlKC9Gcm9tSW5kZXgkLywgJycpO1xuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XG4gICAgaWYgKFxuICAgIC8vIEJhaWwgaWYgdGhlIHRhcmdldCBkb2Vzbid0IGV4aXN0IG9uIHRoZSB0YXJnZXQuIEVnLCBnZXRBbGwgaXNuJ3QgaW4gRWRnZS5cbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcbiAgICAgICAgIShpc1dyaXRlIHx8IHJlYWRNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6IHVuZGVmaW5lZCBnemlwcHMgYmV0dGVyLCBidXQgZmFpbHMgaW4gRWRnZSA6KFxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR4LnN0b3JlO1xuICAgICAgICBpZiAodXNlSW5kZXgpXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgLy8gTXVzdCByZWplY3QgaWYgb3AgcmVqZWN0cy5cbiAgICAgICAgLy8gSWYgaXQncyBhIHdyaXRlIG9wZXJhdGlvbiwgbXVzdCByZWplY3QgaWYgdHguZG9uZSByZWplY3RzLlxuICAgICAgICAvLyBNdXN0IHJlamVjdCB3aXRoIG9wIHJlamVjdGlvbiBmaXJzdC5cbiAgICAgICAgLy8gTXVzdCByZXNvbHZlIHdpdGggb3AgdmFsdWUuXG4gICAgICAgIC8vIE11c3QgaGFuZGxlIGJvdGggcHJvbWlzZXMgKG5vIHVuaGFuZGxlZCByZWplY3Rpb25zKVxuICAgICAgICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRGdW5jTmFtZV0oLi4uYXJncyksXG4gICAgICAgICAgICBpc1dyaXRlICYmIHR4LmRvbmUsXG4gICAgICAgIF0pKVswXTtcbiAgICB9O1xuICAgIGNhY2hlZE1ldGhvZHMuc2V0KHByb3AsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcbn0pKTtcblxuZXhwb3J0IHsgZGVsZXRlREIsIG9wZW5EQiB9O1xuIiwiY29uc3QgaW5zdGFuY2VPZkFueSA9IChvYmplY3QsIGNvbnN0cnVjdG9ycykgPT4gY29uc3RydWN0b3JzLnNvbWUoKGMpID0+IG9iamVjdCBpbnN0YW5jZW9mIGMpO1xuXG5sZXQgaWRiUHJveHlhYmxlVHlwZXM7XG5sZXQgY3Vyc29yQWR2YW5jZU1ldGhvZHM7XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldElkYlByb3h5YWJsZVR5cGVzKCkge1xuICAgIHJldHVybiAoaWRiUHJveHlhYmxlVHlwZXMgfHxcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xuICAgICAgICAgICAgSURCRGF0YWJhc2UsXG4gICAgICAgICAgICBJREJPYmplY3RTdG9yZSxcbiAgICAgICAgICAgIElEQkluZGV4LFxuICAgICAgICAgICAgSURCQ3Vyc29yLFxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24sXG4gICAgICAgIF0pKTtcbn1cbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIChjdXJzb3JBZHZhbmNlTWV0aG9kcyB8fFxuICAgICAgICAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgPSBbXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZVByaW1hcnlLZXksXG4gICAgICAgIF0pKTtcbn1cbmNvbnN0IGN1cnNvclJlcXVlc3RNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXAocmVxdWVzdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG4gICAgcHJvbWlzZVxuICAgICAgICAudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgLy8gU2luY2UgY3Vyc29yaW5nIHJldXNlcyB0aGUgSURCUmVxdWVzdCAoKnNpZ2gqKSwgd2UgY2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbFxuICAgICAgICAvLyAoc2VlIHdyYXBGdW5jdGlvbikuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xuICAgICAgICAgICAgY3Vyc29yUmVxdWVzdE1hcC5zZXQodmFsdWUsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb2JqZWN0U3RvcmVOYW1lcycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm9iamVjdFN0b3JlTmFtZXMgfHwgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0eC5zdG9yZSByZXR1cm4gdGhlIG9ubHkgc3RvcmUgaW4gdGhlIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgYXJlIG1hbnkuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogcmVjZWl2ZXIub2JqZWN0U3RvcmUocmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB0cmFuc2Zvcm0gd2hhdGV2ZXIgd2UgZ2V0IGJhY2suXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxuICAgICAgICAgICAgKHByb3AgPT09ICdkb25lJyB8fCBwcm9wID09PSAnc3RvcmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0O1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVwbGFjZVRyYXBzKGNhbGxiYWNrKSB7XG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xufVxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxuICAgIC8vIG9ubHkgY3JlYXRlIG9uZSBuZXcgZnVuYyBwZXIgZnVuYy5cbiAgICAvLyBFZGdlIGRvZXNuJ3Qgc3VwcG9ydCBvYmplY3RTdG9yZU5hbWVzIChib29vKSwgc28gd2UgcG9seWZpbGwgaXQgaGVyZS5cbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXG4gICAgICAgICEoJ29iamVjdFN0b3JlTmFtZXMnIGluIElEQlRyYW5zYWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZU5hbWVzLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLnNldCh0eCwgc3RvcmVOYW1lcy5zb3J0ID8gc3RvcmVOYW1lcy5zb3J0KCkgOiBbc3RvcmVOYW1lc10pO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAodHgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDdXJzb3IgbWV0aG9kcyBhcmUgc3BlY2lhbCwgYXMgdGhlIGJlaGF2aW91ciBpcyBhIGxpdHRsZSBtb3JlIGRpZmZlcmVudCB0byBzdGFuZGFyZCBJREIuIEluXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcbiAgICAvLyBjdXJzb3IuIEl0J3Mga2luZGEgbGlrZSBhIHByb21pc2UgdGhhdCBjYW4gcmVzb2x2ZSB3aXRoIG1hbnkgdmFsdWVzLiBUaGF0IGRvZXNuJ3QgbWFrZSBzZW5zZVxuICAgIC8vIHdpdGggcmVhbCBwcm9taXNlcywgc28gZWFjaCBhZHZhbmNlIG1ldGhvZHMgcmV0dXJucyBhIG5ldyBwcm9taXNlIGZvciB0aGUgY3Vyc29yIG9iamVjdCwgb3JcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgaWYgKGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkuaW5jbHVkZXMoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHdyYXBGdW5jdGlvbih2YWx1ZSk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcbiAgICAvLyB3aGljaCBpcyBsYXRlciByZXR1cm5lZCBmb3IgdHJhbnNhY3Rpb24uZG9uZSAoc2VlIGlkYk9iamVjdEhhbmRsZXIpLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKVxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIGlmIChpbnN0YW5jZU9mQW55KHZhbHVlLCBnZXRJZGJQcm94eWFibGVUeXBlcygpKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh2YWx1ZSwgaWRiUHJveHlUcmFwcyk7XG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgLy8gV2Ugc29tZXRpbWVzIGdlbmVyYXRlIG11bHRpcGxlIHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdCAoZWcgd2hlbiBjdXJzb3JpbmcpLCBiZWNhdXNlXG4gICAgLy8gSURCIGlzIHdlaXJkIGFuZCBhIHNpbmdsZSBJREJSZXF1ZXN0IGNhbiB5aWVsZCBtYW55IHJlc3BvbnNlcywgc28gdGhlc2UgY2FuJ3QgYmUgY2FjaGVkLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHZhbHVlKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHRyYW5zZm9ybWVkIHRoaXMgdmFsdWUgYmVmb3JlLCByZXVzZSB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cbiAgICBpZiAodHJhbnNmb3JtQ2FjaGUuaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcbiAgICAvLyBOb3QgYWxsIHR5cGVzIGFyZSB0cmFuc2Zvcm1lZC5cbiAgICAvLyBUaGVzZSBtYXkgYmUgcHJpbWl0aXZlIHR5cGVzLCBzbyB0aGV5IGNhbid0IGJlIFdlYWtNYXAga2V5cy5cbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRyYW5zZm9ybUNhY2hlLnNldCh2YWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KG5ld1ZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBhcyBhLCBpbnN0YW5jZU9mQW55IGFzIGksIHJlcGxhY2VUcmFwcyBhcyByLCB1bndyYXAgYXMgdSwgd3JhcCBhcyB3IH07XG4iLCIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xyXG4gKi9cclxuY29uc3QgaW5zdGFuY2VzID0gW107XHJcbi8qKlxyXG4gKiBUaGUgSlMgU0RLIHN1cHBvcnRzIDUgbG9nIGxldmVscyBhbmQgYWxzbyBhbGxvd3MgYSB1c2VyIHRoZSBhYmlsaXR5IHRvXHJcbiAqIHNpbGVuY2UgdGhlIGxvZ3MgYWx0b2dldGhlci5cclxuICpcclxuICogVGhlIG9yZGVyIGlzIGEgZm9sbG93czpcclxuICogREVCVUcgPCBWRVJCT1NFIDwgSU5GTyA8IFdBUk4gPCBFUlJPUlxyXG4gKlxyXG4gKiBBbGwgb2YgdGhlIGxvZyB0eXBlcyBhYm92ZSB0aGUgY3VycmVudCBsb2cgbGV2ZWwgd2lsbCBiZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYElORk9gLCBlcnJvcnMgd2lsbCBzdGlsbCBiZSBsb2dnZWQsIGJ1dCBgREVCVUdgIGFuZFxyXG4gKiBgVkVSQk9TRWAgbG9ncyB3aWxsIG5vdClcclxuICovXHJcbnZhciBMb2dMZXZlbDtcclxuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJERUJVR1wiXSA9IDBdID0gXCJERUJVR1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJWRVJCT1NFXCJdID0gMV0gPSBcIlZFUkJPU0VcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSU5GT1wiXSA9IDJdID0gXCJJTkZPXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIldBUk5cIl0gPSAzXSA9IFwiV0FSTlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IDRdID0gXCJFUlJPUlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJTSUxFTlRcIl0gPSA1XSA9IFwiU0lMRU5UXCI7XHJcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XHJcbmNvbnN0IGxldmVsU3RyaW5nVG9FbnVtID0ge1xyXG4gICAgJ2RlYnVnJzogTG9nTGV2ZWwuREVCVUcsXHJcbiAgICAndmVyYm9zZSc6IExvZ0xldmVsLlZFUkJPU0UsXHJcbiAgICAnaW5mbyc6IExvZ0xldmVsLklORk8sXHJcbiAgICAnd2Fybic6IExvZ0xldmVsLldBUk4sXHJcbiAgICAnZXJyb3InOiBMb2dMZXZlbC5FUlJPUixcclxuICAgICdzaWxlbnQnOiBMb2dMZXZlbC5TSUxFTlRcclxufTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBsZXZlbFxyXG4gKi9cclxuY29uc3QgZGVmYXVsdExvZ0xldmVsID0gTG9nTGV2ZWwuSU5GTztcclxuLyoqXHJcbiAqIEJ5IGRlZmF1bHQsIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgZGlzcGxheWVkIGluIHRoZSBkZXZlbG9wZXIgY29uc29sZSAoaW5cclxuICogY2hyb21lKS4gVG8gYXZvaWQgZm9yY2luZyB1c2VycyB0byBoYXZlIHRvIG9wdC1pbiB0byB0aGVzZSBsb2dzIHR3aWNlXHJcbiAqIChpLmUuIG9uY2UgZm9yIGZpcmViYXNlLCBhbmQgb25jZSBpbiB0aGUgY29uc29sZSksIHdlIGFyZSBzZW5kaW5nIGBERUJVR2BcclxuICogbG9ncyB0byB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbi5cclxuICovXHJcbmNvbnN0IENvbnNvbGVNZXRob2QgPSB7XHJcbiAgICBbTG9nTGV2ZWwuREVCVUddOiAnbG9nJyxcclxuICAgIFtMb2dMZXZlbC5WRVJCT1NFXTogJ2xvZycsXHJcbiAgICBbTG9nTGV2ZWwuSU5GT106ICdpbmZvJyxcclxuICAgIFtMb2dMZXZlbC5XQVJOXTogJ3dhcm4nLFxyXG4gICAgW0xvZ0xldmVsLkVSUk9SXTogJ2Vycm9yJ1xyXG59O1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGhhbmRsZXIgd2lsbCBmb3J3YXJkIERFQlVHLCBWRVJCT1NFLCBJTkZPLCBXQVJOLCBhbmQgRVJST1JcclxuICogbWVzc2FnZXMgb24gdG8gdGhlaXIgY29ycmVzcG9uZGluZyBjb25zb2xlIGNvdW50ZXJwYXJ0cyAoaWYgdGhlIGxvZyBtZXRob2RcclxuICogaXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGxvZyBsZXZlbClcclxuICovXHJcbmNvbnN0IGRlZmF1bHRMb2dIYW5kbGVyID0gKGluc3RhbmNlLCBsb2dUeXBlLCAuLi5hcmdzKSA9PiB7XHJcbiAgICBpZiAobG9nVHlwZSA8IGluc3RhbmNlLmxvZ0xldmVsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgY29uc3QgbWV0aG9kID0gQ29uc29sZU1ldGhvZFtsb2dUeXBlXTtcclxuICAgIGlmIChtZXRob2QpIHtcclxuICAgICAgICBjb25zb2xlW21ldGhvZF0oYFske25vd31dICAke2luc3RhbmNlLm5hbWV9OmAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gbG9nIGEgbWVzc2FnZSB3aXRoIGFuIGludmFsaWQgbG9nVHlwZSAodmFsdWU6ICR7bG9nVHlwZX0pYCk7XHJcbiAgICB9XHJcbn07XHJcbmNsYXNzIExvZ2dlciB7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVzIHlvdSBhbiBpbnN0YW5jZSBvZiBhIExvZ2dlciB0byBjYXB0dXJlIG1lc3NhZ2VzIGFjY29yZGluZyB0b1xyXG4gICAgICogRmlyZWJhc2UncyBsb2dnaW5nIHNjaGVtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0aGF0IHRoZSBsb2dzIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGdpdmVuIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFpbiAoaW50ZXJuYWwpIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqIENhbiBiZSBzZXQgdG8gYSBuZXcgZnVuY3Rpb24gaW4gaW50ZXJuYWwgcGFja2FnZSBjb2RlIGJ1dCBub3QgYnkgdXNlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gZGVmYXVsdExvZ0hhbmRsZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9wdGlvbmFsLCBhZGRpdGlvbmFsLCB1c2VyLWRlZmluZWQgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhcHR1cmUgdGhlIGN1cnJlbnQgaW5zdGFuY2UgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGxvZ0xldmVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2dMZXZlbDtcclxuICAgIH1cclxuICAgIHNldCBsb2dMZXZlbCh2YWwpIHtcclxuICAgICAgICBpZiAoISh2YWwgaW4gTG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgdmFsdWUgXCIke3ZhbH1cIiBhc3NpZ25lZCB0byBcXGBsb2dMZXZlbFxcYGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8vIFdvcmthcm91bmQgZm9yIHNldHRlci9nZXR0ZXIgaGF2aW5nIHRvIGJlIHRoZSBzYW1lIHR5cGUuXHJcbiAgICBzZXRMb2dMZXZlbCh2YWwpIHtcclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gbGV2ZWxTdHJpbmdUb0VudW1bdmFsXSA6IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBsb2dIYW5kbGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2dIYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgc2V0IGxvZ0hhbmRsZXIodmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IHVzZXJMb2dIYW5kbGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyTG9nSGFuZGxlcjtcclxuICAgIH1cclxuICAgIHNldCB1c2VyTG9nSGFuZGxlcih2YWwpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZ1bmN0aW9ucyBiZWxvdyBhcmUgYWxsIGJhc2VkIG9uIHRoZSBgY29uc29sZWAgaW50ZXJmYWNlXHJcbiAgICAgKi9cclxuICAgIGRlYnVnKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5ERUJVRywgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5ERUJVRywgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBsb2coLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmXHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLlZFUkJPU0UsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuVkVSQk9TRSwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBpbmZvKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5JTkZPLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgd2FybiguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5XQVJOLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGVycm9yKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5FUlJPUiwgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5FUlJPUiwgLi4uYXJncyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcclxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGluc3QgPT4ge1xyXG4gICAgICAgIGluc3Quc2V0TG9nTGV2ZWwobGV2ZWwpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XHJcbiAgICAgICAgbGV0IGN1c3RvbUxvZ0xldmVsID0gbnVsbDtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxldmVsKSB7XHJcbiAgICAgICAgICAgIGN1c3RvbUxvZ0xldmVsID0gbGV2ZWxTdHJpbmdUb0VudW1bb3B0aW9ucy5sZXZlbF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2dDYWxsYmFjayA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IChpbnN0YW5jZSwgbGV2ZWwsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChhcmcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihhcmcgPT4gYXJnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPj0gKGN1c3RvbUxvZ0xldmVsICE9PSBudWxsICYmIGN1c3RvbUxvZ0xldmVsICE9PSB2b2lkIDAgPyBjdXN0b21Mb2dMZXZlbCA6IGluc3RhbmNlLmxvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ0NhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IExvZ0xldmVsW2xldmVsXS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnN0YW5jZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IExvZ0xldmVsLCBMb2dnZXIsIHNldExvZ0xldmVsLCBzZXRVc2VyTG9nSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjEwLjEuMFwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgdyBhcyB3cmFwLCByIGFzIHJlcGxhY2VUcmFwcyB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuZXhwb3J0IHsgdSBhcyB1bndyYXAsIHcgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbiksIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZykge1xuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsIChldmVudCkgPT4gYmxvY2tpbmcoZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwidHJ5e3NlbGZbXCJ3b3JrYm94OndpbmRvdzo0LjMuMVwiXSYmXygpfWNhdGNoKG4pe312YXIgbj1mdW5jdGlvbihuLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihpKXt2YXIgZT1uZXcgTWVzc2FnZUNoYW5uZWw7ZS5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24obil7cmV0dXJuIGkobi5kYXRhKX0sbi5wb3N0TWVzc2FnZSh0LFtlLnBvcnQyXSl9KX07ZnVuY3Rpb24gdChuLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgZT10W2ldO2UuZW51bWVyYWJsZT1lLmVudW1lcmFibGV8fCExLGUuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGUmJihlLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixlLmtleSxlKX19ZnVuY3Rpb24gaShuKXtpZih2b2lkIDA9PT1uKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gbn10cnl7c2VsZltcIndvcmtib3g6Y29yZTo0LjMuMVwiXSYmXygpfWNhdGNoKG4pe312YXIgZT1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5wcm9taXNlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsaSl7bi5yZXNvbHZlPXQsbi5yZWplY3Q9aX0pfSxyPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5ldyBVUkwobixsb2NhdGlvbikuaHJlZj09PW5ldyBVUkwodCxsb2NhdGlvbikuaHJlZn0sbz1mdW5jdGlvbihuLHQpe09iamVjdC5hc3NpZ24odGhpcyx0LHt0eXBlOm59KX07ZnVuY3Rpb24gdShuKXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10saT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspdFtpXT1hcmd1bWVudHNbaV07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUobi5hcHBseSh0aGlzLHQpKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fX1mdW5jdGlvbiBhKG4sdCxpKXtyZXR1cm4gaT90P3Qobik6bjoobiYmbi50aGVufHwobj1Qcm9taXNlLnJlc29sdmUobikpLHQ/bi50aGVuKHQpOm4pfWZ1bmN0aW9uIHMoKXt9dmFyIGM9ZnVuY3Rpb24oYyl7dmFyIGYsaDtmdW5jdGlvbiB2KG4sdCl7dmFyIHI7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSwocj1jLmNhbGwodGhpcyl8fHRoaXMpLnQ9bixyLmk9dCxyLm89MCxyLnU9bmV3IGUsci5zPW5ldyBlLHIuaD1uZXcgZSxyLnY9ci52LmJpbmQoaShpKHIpKSksci5sPXIubC5iaW5kKGkoaShyKSkpLHIuZz1yLmcuYmluZChpKGkocikpKSxyLm09ci5tLmJpbmQoaShpKHIpKSkscn1oPWMsKGY9dikucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoaC5wcm90b3R5cGUpLGYucHJvdG90eXBlLmNvbnN0cnVjdG9yPWYsZi5fX3Byb3RvX189aDt2YXIgbCx3LGcsZD12LnByb3RvdHlwZTtyZXR1cm4gZC5yZWdpc3Rlcj11KGZ1bmN0aW9uKG4pe3ZhciB0LGksZT10aGlzLHU9KHZvaWQgMD09PW4/e306bikuaW1tZWRpYXRlLGM9dm9pZCAwIT09dSYmdTtyZXR1cm4gdD1mdW5jdGlvbigpe3JldHVybiBlLnA9Qm9vbGVhbihuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSxlLlA9ZS5SKCksYShlLmsoKSxmdW5jdGlvbihuKXtlLkI9bixlLlAmJihlLk89ZS5QLGUucy5yZXNvbHZlKGUuUCksZS5oLnJlc29sdmUoZS5QKSxlLmooZS5QKSxlLlAuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsZS5sLHtvbmNlOiEwfSkpO3ZhciB0PWUuQi53YWl0aW5nO3JldHVybiB0JiZyKHQuc2NyaXB0VVJMLGUudCkmJihlLk89dCxQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7ZS5kaXNwYXRjaEV2ZW50KG5ldyBvKFwid2FpdGluZ1wiLHtzdzp0LHdhc1dhaXRpbmdCZWZvcmVSZWdpc3RlcjohMH0pKX0pKSxlLk8mJmUudS5yZXNvbHZlKGUuTyksZS5CLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuZyksbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRyb2xsZXJjaGFuZ2VcIixlLm0se29uY2U6ITB9KSxcIkJyb2FkY2FzdENoYW5uZWxcImluIHNlbGYmJihlLkM9bmV3IEJyb2FkY2FzdENoYW5uZWwoXCJ3b3JrYm94XCIpLGUuQy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUudikpLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZS52KSxlLkJ9KX0sKGk9ZnVuY3Rpb24oKXtpZighYyYmXCJjb21wbGV0ZVwiIT09ZG9jdW1lbnQucmVhZHlTdGF0ZSlyZXR1cm4gZnVuY3Rpb24obix0KXtpZighdClyZXR1cm4gbiYmbi50aGVuP24udGhlbihzKTpQcm9taXNlLnJlc29sdmUoKX0obmV3IFByb21pc2UoZnVuY3Rpb24obil7cmV0dXJuIGFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsbil9KSl9KCkpJiZpLnRoZW4/aS50aGVuKHQpOnQoaSl9KSxkLmdldFNXPXUoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5PfHx0aGlzLnUucHJvbWlzZX0pLGQubWVzc2FnZVNXPXUoZnVuY3Rpb24odCl7cmV0dXJuIGEodGhpcy5nZXRTVygpLGZ1bmN0aW9uKGkpe3JldHVybiBuKGksdCl9KX0pLGQuUj1mdW5jdGlvbigpe3ZhciBuPW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXI7aWYobiYmcihuLnNjcmlwdFVSTCx0aGlzLnQpKXJldHVybiBufSxkLms9dShmdW5jdGlvbigpe3ZhciBuPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG4sdCl7dHJ5e3ZhciBpPW4oKX1jYXRjaChuKXtyZXR1cm4gdChuKX1yZXR1cm4gaSYmaS50aGVuP2kudGhlbih2b2lkIDAsdCk6aX0oZnVuY3Rpb24oKXtyZXR1cm4gYShuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihuLnQsbi5pKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5MPXBlcmZvcm1hbmNlLm5vdygpLHR9KX0sZnVuY3Rpb24obil7dGhyb3cgbn0pfSksZC5qPWZ1bmN0aW9uKHQpe24odCx7dHlwZTpcIldJTkRPV19SRUFEWVwiLG1ldGE6XCJ3b3JrYm94LXdpbmRvd1wifSl9LGQuZz1mdW5jdGlvbigpe3ZhciBuPXRoaXMuQi5pbnN0YWxsaW5nO3RoaXMubz4wfHwhcihuLnNjcmlwdFVSTCx0aGlzLnQpfHxwZXJmb3JtYW5jZS5ub3coKT50aGlzLkwrNmU0Pyh0aGlzLlc9bix0aGlzLkIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWZvdW5kXCIsdGhpcy5nKSk6KHRoaXMuTz1uLHRoaXMudS5yZXNvbHZlKG4pKSwrK3RoaXMubyxuLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLHRoaXMubCl9LGQubD1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGk9bi50YXJnZXQsZT1pLnN0YXRlLHI9aT09PXRoaXMuVyx1PXI/XCJleHRlcm5hbFwiOlwiXCIsYT17c3c6aSxvcmlnaW5hbEV2ZW50Om59OyFyJiZ0aGlzLnAmJihhLmlzVXBkYXRlPSEwKSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IG8odStlLGEpKSxcImluc3RhbGxlZFwiPT09ZT90aGlzLl89c2V0VGltZW91dChmdW5jdGlvbigpe1wiaW5zdGFsbGVkXCI9PT1lJiZ0LkIud2FpdGluZz09PWkmJnQuZGlzcGF0Y2hFdmVudChuZXcgbyh1K1wid2FpdGluZ1wiLGEpKX0sMjAwKTpcImFjdGl2YXRpbmdcIj09PWUmJihjbGVhclRpbWVvdXQodGhpcy5fKSxyfHx0aGlzLnMucmVzb2x2ZShpKSl9LGQubT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLk87dD09PW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXImJih0aGlzLmRpc3BhdGNoRXZlbnQobmV3IG8oXCJjb250cm9sbGluZ1wiLHtzdzp0LG9yaWdpbmFsRXZlbnQ6bn0pKSx0aGlzLmgucmVzb2x2ZSh0KSl9LGQudj1mdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBvKFwibWVzc2FnZVwiLHtkYXRhOnQsb3JpZ2luYWxFdmVudDpufSkpfSxsPXYsKHc9W3trZXk6XCJhY3RpdmVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zLnByb21pc2V9fSx7a2V5OlwiY29udHJvbGxpbmdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oLnByb21pc2V9fV0pJiZ0KGwucHJvdG90eXBlLHcpLGcmJnQobCxnKSx2fShmdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt0aGlzLkQ9e319dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIHQuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihuLHQpe3RoaXMuVChuKS5hZGQodCl9LHQucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihuLHQpe3RoaXMuVChuKS5kZWxldGUodCl9LHQuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihuKXtuLnRhcmdldD10aGlzLHRoaXMuVChuLnR5cGUpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQobil9KX0sdC5UPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLkRbbl09dGhpcy5EW25dfHxuZXcgU2V0fSxufSgpKTtleHBvcnR7YyBhcyBXb3JrYm94LG4gYXMgbWVzc2FnZVNXfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmtib3gtd2luZG93LnByb2QuZXM1Lm1qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IGdldERhdGEsIERhdGFNb2RhbCwgY3VzdG9tRm9udHMgfSBmcm9tIFwiQGRhdGFcIjtcclxuaW1wb3J0IHsgU2NlbmVIYW5kbGVyIH0gZnJvbSBcIkBzY2VuZUhhbmRsZXJcIjtcclxuaW1wb3J0IHsgQVVESU9fVVJMX1BSRUxPQUQsIElzQ2FjaGVkLCBQcmV2aW91c1BsYXllZExldmVsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgV29ya2JveCB9IGZyb20gXCJ3b3JrYm94LXdpbmRvd1wiO1xyXG5pbXBvcnQgeyBGaXJlYmFzZUludGVncmF0aW9uIH0gZnJvbSBcIi4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWludGVncmF0aW9uXCI7XHJcbmltcG9ydCB7IFV0aWxzLCBWSVNJQklMSVRZX0NIQU5HRSwgRGVidWdnZXIsIGxhbmcsIHBzZXVkb0lkLCBpc0RvY3VtZW50VmlzaWJsZSwgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBVUkwgfSBmcm9tIFwiQGRhdGFcIjtcclxuY2xhc3MgQXBwIHtcclxuICAgIGNhbnZhcztcclxuICAgIHZlcnNpb25JbmZvRWxlbWVudDtcclxuICAgIGxhbmc7XHJcbiAgICBpc19jYWNoZWQ7XHJcbiAgICBwcm9ncmVzc0JhcjtcclxuICAgIHByb2dyZXNzQmFyQ29udGFpbmVyO1xyXG4gICAgY2hhbm5lbDtcclxuICAgIHNjZW5lSGFuZGxlcjtcclxuICAgIGxvYWRpbmdFbGVtZW50O1xyXG4gICAgbWFqVmVyc2lvbjtcclxuICAgIG1pblZlcnNpb247XHJcbiAgICBkYXRhTW9kYWw7XHJcbiAgICBzdGFydFNlc3Npb25UaW1lO1xyXG4gICAgdGl0bGVUZXh0RWxlbWVudDtcclxuICAgIGZlZWRCYWNrVGV4dEVsZW1lbnQ7XHJcbiAgICBjdXJyZW50UHJvZ3Jlc3M7XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgY29uc3RydWN0b3IobGFuZykge1xyXG4gICAgICAgIHRoaXMubGFuZyA9IGxhbmc7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHJvZ3Jlc3MgPSAxMDsgLy8gSW5pdGlhbGl6ZSBwcm9ncmVzcyB0byAwXHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbChcIm15LWNoYW5uZWxcIik7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvZ3Jlc3MtYmFyXCIpO1xyXG4gICAgICAgIHRoaXMudGl0bGVUZXh0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGl0bGVcIik7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZWVkYmFjay10ZXh0XCIpO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2dyZXNzLWJhci1jb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZlcnNpb24taW5mby1pZFwiKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkaW5nLXNjcmVlblwiKTtcclxuICAgICAgICB0aGlzLmlzX2NhY2hlZCA9IHRoaXMuaW5pdGlhbGl6ZUNhY2hlZERhdGEoKTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24gPSBuZXcgRmlyZWJhc2VJbnRlZ3JhdGlvbigpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRTZXNzaW9uVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMuaGFuZGxlQmVmb3JlVW5sb2FkKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBjb25zdCBmb250ID0gYXdhaXQgVXRpbHMuZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQodGhpcy5sYW5nKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRBbmRDYWNoZUZvbnQoZm9udCwgYC4vYXNzZXRzL2ZvbnRzLyR7Zm9udH0udHRmYCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkVGl0bGVGZWVkYmFja0N1c3RvbUZvbnQoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnByZWxvYWRHYW1lQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVMb2FkaW5nU2NyZWVuKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cENhbnZhcygpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gZGF0YS5tYWp2ZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IGRhdGEubWludmVyc2lvbjtcclxuICAgICAgICB0aGlzLmRhdGFNb2RhbCA9IHRoaXMuY3JlYXRlRGF0YU1vZGFsKGRhdGEpO1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsSW5pdGlhbGl6YXRpb24oZGF0YSk7XHJcbiAgICAgICAgdGhpcy5sb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlc2l6ZSh0aGlzLmRhdGFNb2RhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgcGxheWVkSW5mbyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMubGFuZyArIFwiZ2FtZVBsYXllZEluZm9cIik7XHJcbiAgICAgICAgY29uc3QgbmV4dFBsYXlhYmxlTGV2ZWwgPSBwbGF5ZWRJbmZvID8gSlNPTi5wYXJzZShwbGF5ZWRJbmZvKS5sZW5ndGggLSAxIDogMDtcclxuICAgICAgICBjb25zdCBzdG9yYWdlS2V5ID0gRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgID8gUHJldmlvdXNQbGF5ZWRMZXZlbCArIHRoaXMubGFuZyArIFwiRGVidWdcIlxyXG4gICAgICAgICAgICA6IFByZXZpb3VzUGxheWVkTGV2ZWwgKyB0aGlzLmxhbmc7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oc3RvcmFnZUtleSwgbmV4dFBsYXlhYmxlTGV2ZWwudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfY2FjaGVkLmhhcyh0aGlzLmxhbmcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FjaGVkU2NlbmFyaW8odGhpcy5kYXRhTW9kYWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZ2lzdGVyV29ya2JveCgpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgbG9hZFRpdGxlRmVlZGJhY2tDdXN0b21Gb250KCkge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbVRpdGxlRmVlZGJhY2tGb250ID0gY3VzdG9tRm9udHNbdGhpcy5sYW5nXSB8fCBjdXN0b21Gb250cy5kZWZhdWx0O1xyXG4gICAgICAgIGNvbnN0IGZvbnRGYW1pbHkgPSBgJyR7Y3VzdG9tVGl0bGVGZWVkYmFja0ZvbnR9Jywgc2Fucy1zZXJpZmA7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQW5kQ2FjaGVGb250KGN1c3RvbVRpdGxlRmVlZGJhY2tGb250LCBgLi9hc3NldHMvZm9udHMvJHtjdXN0b21UaXRsZUZlZWRiYWNrRm9udH0udHRmYCk7XHJcbiAgICAgICAgW3RoaXMudGl0bGVUZXh0RWxlbWVudCwgdGhpcy5mZWVkQmFja1RleHRFbGVtZW50XS5mb3JFYWNoKGVsZW1lbnQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5mb250RmFtaWx5ID0gZm9udEZhbWlseTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgbG9nU2Vzc2lvblN0YXJ0RmlyZWJhc2VFdmVudCgpIHtcclxuICAgICAgICBsZXQgbGFzdFNlc3Npb25FbmRUaW1lID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJsYXN0U2Vzc2lvbkVuZFRpbWVcIik7XHJcbiAgICAgICAgbGV0IGxhc3RUaW1lID0gMDtcclxuICAgICAgICB0aGlzLnN0YXJ0U2Vzc2lvblRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICBpZiAobGFzdFNlc3Npb25FbmRUaW1lKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJzZWRUaW1lc3RhbXAgPSBwYXJzZUludChsYXN0U2Vzc2lvbkVuZFRpbWUpO1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWVzdGFtcCkpIHtcclxuICAgICAgICAgICAgICAgIGxhc3RUaW1lID0gTWF0aC5hYnMobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBwYXJzZWRUaW1lc3RhbXApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRheXNTaW5jZUxhc3QgPSBsYXN0VGltZSA/IGxhc3RUaW1lIC8gKDEwMDAgKiA2MCAqIDYwICogMjQpIDogMDtcclxuICAgICAgICBjb25zdCByb3VuZGVkRGF5c1NpbmNlTGFzdCA9IHBhcnNlRmxvYXQoZGF5c1NpbmNlTGFzdC50b0ZpeGVkKDMpKTtcclxuICAgICAgICBjb25zdCBzZXNzaW9uU3RhcnREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IHRoaXMudmVyc2lvbkluZm9FbGVtZW50LmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb25cclxuICAgICAgICAgICAgICAgID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICA6IFwiXCIsXHJcbiAgICAgICAgICAgIGRheXNfc2luY2VfbGFzdDogcm91bmRlZERheXNTaW5jZUxhc3QsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFNlc3Npb25TdGFydEV2ZW50KHNlc3Npb25TdGFydERhdGEpO1xyXG4gICAgfVxyXG4gICAgbG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkVuZERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvblxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgIDogXCJcIixcclxuICAgICAgICAgICAgZHVyYXRpb246IChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRTZXNzaW9uVGltZSkgLyAxMDAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJsYXN0U2Vzc2lvbkVuZFRpbWVcIiwgbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRTZXNzaW9uRW5kRXZlbnQoc2Vzc2lvbkVuZERhdGEpO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZUNhY2hlZERhdGEoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmVkRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKElzQ2FjaGVkKTtcclxuICAgICAgICByZXR1cm4gc3RvcmVkRGF0YSA/IG5ldyBNYXAoSlNPTi5wYXJzZShzdG9yZWREYXRhKSkgOiBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBsb2FkQW5kQ2FjaGVGb250KGZvbnROYW1lLCBmb250UGF0aCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgY2FjaGVzLm9wZW4oXCJmb250Q2FjaGVcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgY2FjaGUubWF0Y2goZm9udFBhdGgpO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb250UmVzcG9uc2UgPSBhd2FpdCBmZXRjaChmb250UGF0aCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb250QmxvYiA9IGF3YWl0IGZvbnRSZXNwb25zZS5ibG9iKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBjYWNoZS5wdXQoZm9udFBhdGgsIG5ldyBSZXNwb25zZShmb250QmxvYikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGZvbnQgPSBuZXcgRm9udEZhY2UoZm9udE5hbWUsIGB1cmwoJHtmb250UGF0aH0pIGZvcm1hdCgndHJ1ZXR5cGUnKWApO1xyXG4gICAgICAgICAgICBhd2FpdCBmb250LmxvYWQoKTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZm9udHMuYWRkKGZvbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIGxvYWQgYW5kIGNhY2hlIGZvbnQ6ICR7ZXJyb3J9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZGluZ1NjcmVlbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc19jYWNoZWQuZ2V0KGxhbmcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQuc3R5bGUuekluZGV4ID0gXCItMVwiO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gXCIxMCVcIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYXN5bmMgcmVnaXN0ZXJXb3JrYm94KCkge1xyXG4gICAgICAgIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdiID0gbmV3IFdvcmtib3goXCIuL3N3LmpzXCIsIHt9KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHdiLnJlZ2lzdGVyKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWwucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiBcIkNhY2hlXCIsIGRhdGE6IHRoaXMubGFuZyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoKFVSTCArIFwiP2NhY2hlLWJ1c3Q9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDYWNoZS1Db250cm9sXCI6IFwibm8tc3RvcmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IFwibm8tc3RvcmVcIixcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBmZXRjaCB0aGUgY29udGVudCBmaWxlIGZyb20gdGhlIHNlcnZlciFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGVudEZpbGVEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhaGVhZENvbnRlbnRWZXJzaW9uID0gbmV3Q29udGVudEZpbGVEYXRhW1wibWFqdmVyc2lvblwiXSArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDb250ZW50RmlsZURhdGFbXCJtaW52ZXJzaW9uXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYWNoZWRWZXJzaW9uID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJ2ZXJzaW9uXCIgKyBsYW5nLnRvTG93ZXJDYXNlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNoZWNrIGhlcmUgZm9yIHRoZSBjb250ZW50IHZlcnNpb24gdXBkYXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGVyZSdzIGEgbmV3IGNvbnRlbnQgdmVyc2lvbiwgd2UgbmVlZCB0byByZW1vdmUgdGhlIGNhY2hlZCBjb250ZW50IGFuZCByZWxvYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgYXJlIGNvbXBhcmluZyBoZXJlIHRoZSBjb250ZW50VmVyc2lvbiB3aXRoIHRoZSBhaGVhZENvbnRlbnRWZXJzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhaGVhZENvbnRlbnRWZXJzaW9uICYmIGNhY2hlZFZlcnNpb24gIT0gYWhlYWRDb250ZW50VmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb250ZW50IHZlcnNpb24gbWlzbWF0Y2ghIFJlbG9hZGluZy4uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZWRJdGVtID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImlzX2NhY2hlZFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnQgbGFuZyAgXCIgKyBsYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDYWNoZWRJdGVtID0gY2FjaGVkSXRlbS5maWx0ZXIoKGUpID0+ICFlLnRvU3RyaW5nKCkuaW5jbHVkZXMobGFuZykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oSXNDYWNoZWQsIEpTT04uc3RyaW5naWZ5KG5ld0NhY2hlZEl0ZW0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFwidmVyc2lvblwiICsgbGFuZy50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBjYWNoZSBmb3IgdGh0IHBhcnRpY3VsYXIgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVzLmRlbGV0ZShsYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBmZXRjaGluZyB0aGUgY29udGVudCBmaWxlOiBcIiArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyOiAke2Vycm9yfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0dXBDYW52YXMoKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aCA+IDEwODAgPyA3NjggOiB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIH1cclxuICAgIGNyZWF0ZURhdGFNb2RhbChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhTW9kYWwoZGF0YS50aXRsZSwgZGF0YS5PdGhlckF1ZGlvcywgZGF0YS5MZXZlbHMsIGRhdGEuRmVlZGJhY2tUZXh0cywgZGF0YS5SaWdodFRvTGVmdCwgZGF0YS5GZWVkYmFja0F1ZGlvcywgZGF0YS5tYWp2ZXJzaW9uLCBkYXRhLm1pbnZlcnNpb24sIGRhdGEudmVyc2lvbik7XHJcbiAgICB9XHJcbiAgICBnbG9iYWxJbml0aWFsaXphdGlvbihkYXRhKSB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5hYm91dENvbXBhbnkgPSBkYXRhLmFib3V0Q29tcGFueTtcclxuICAgICAgICBnbG9iYWxUaGlzLmRlc2NyaXB0aW9uVGV4dCA9IGRhdGEuZGVzY3JpcHRpb25UZXh0O1xyXG4gICAgfVxyXG4gICAgaGFuZGxlUmVzaXplKGRhdGFNb2RhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX2NhY2hlZC5oYXModGhpcy5sYW5nKSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudChkYXRhTW9kYWwpO1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwQ2FudmFzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVpbml0aWFsaXplU2NlbmVIYW5kbGVyKGRhdGFNb2RhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdXBkYXRlVmVyc2lvbkluZm9FbGVtZW50KGRhdGFNb2RhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX2NhY2hlZC5oYXModGhpcy5sYW5nKSAmJiBEZWJ1Z2dlci5EZXZlbG9wbWVudExpbmspIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFNb2RhbC5tYWpWZXJzaW9uICYmIGRhdGFNb2RhbC5taW5WZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwgKz0gYC9qLnYke2RhdGFNb2RhbC5tYWpWZXJzaW9ufS4ke2RhdGFNb2RhbC5taW5WZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YU1vZGFsLnZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbkluZm9FbGVtZW50LmlubmVySFRNTCArPSBgL2oudiR7ZGF0YU1vZGFsLnZlcnNpb259YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1idG5cIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZWluaXRpYWxpemVTY2VuZUhhbmRsZXIoZGF0YU1vZGFsKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuc2NlbmVIYW5kbGVyO1xyXG4gICAgICAgIHRoaXMuc2NlbmVIYW5kbGVyID0gbmV3IFNjZW5lSGFuZGxlcih0aGlzLmNhbnZhcywgZGF0YU1vZGFsKTtcclxuICAgICAgICB0aGlzLnBhc3NpbmdEYXRhVG9Db250YWluZXIoKTtcclxuICAgIH1cclxuICAgIGhhbmRsZUNhY2hlZFNjZW5hcmlvKGRhdGFNb2RhbCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlVmVyc2lvbkluZm9FbGVtZW50KGRhdGFNb2RhbCk7XHJcbiAgICAgICAgdGhpcy5zY2VuZUhhbmRsZXIgPSBuZXcgU2NlbmVIYW5kbGVyKHRoaXMuY2FudmFzLCBkYXRhTW9kYWwpO1xyXG4gICAgICAgIHRoaXMucGFzc2luZ0RhdGFUb0NvbnRhaW5lcigpO1xyXG4gICAgfVxyXG4gICAgcGFzc2luZ0RhdGFUb0NvbnRhaW5lciA9ICgpID0+IHtcclxuICAgICAgICBpZiAod2luZG93LkFuZHJvaWQpIHtcclxuICAgICAgICAgICAgd2luZG93LkFuZHJvaWQuY2FjaGVkU3RhdHVzKHRoaXMuaXNfY2FjaGVkLmdldCh0aGlzLmxhbmcpID09IHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRDb250YWluZXJBcHBPcmllbnRhdGlvbigpIHtcclxuICAgICAgICBpZiAod2luZG93LkFuZHJvaWQpIHtcclxuICAgICAgICAgICAgd2luZG93LkFuZHJvaWQuc2V0Q29udGFpbmVyQXBwT3JpZW50YXRpb24oXCJwb3J0cmFpdFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVVcGRhdGVGb3VuZE1lc3NhZ2UoKSB7XHJcbiAgICAgICAgbGV0IHRleHQgPSBcIlVwZGF0ZSBGb3VuZFxcblByZXNzIG9rIHRvIHVwZGF0ZVwiO1xyXG4gICAgICAgIGNvbnN0IHVzZXJDb25maXJtZWQgPSBjb25maXJtKHRleHQpO1xyXG4gICAgICAgIGlmICh1c2VyQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkaW5nTWVzc2FnZSA9IChkYXRhKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIgJiYgdGhpcy5wcm9ncmVzc0Jhcikge1xyXG4gICAgICAgICAgICB0aGlzLnNob3dQcm9ncmVzc0JhcigpO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9ncmVzc1ZhbHVlID0gTWF0aC5taW4oMTAwLCBNYXRoLm1heCgwLCBkYXRhLmRhdGEpKTsgLy8gRW5zdXJlIHByb2dyZXNzIGlzIGJldHdlZW4gMCBhbmQgMTAwXHJcbiAgICAgICAgICAgIC8vIE9ubHkgdXBkYXRlIGlmIG5ldyBwcm9ncmVzcyBpcyBncmVhdGVyIHRoYW4gdGhlIGN1cnJlbnQgcHJvZ3Jlc3NcclxuICAgICAgICAgICAgaWYgKHByb2dyZXNzVmFsdWUgPiB0aGlzLmN1cnJlbnRQcm9ncmVzcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHJvZ3Jlc3MgPSBwcm9ncmVzc1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IGAke3RoaXMuY3VycmVudFByb2dyZXNzfSVgO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIENoZWNrIGlmIGRvd25sb2FkIGNvbXBsZXRlZFxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Rvd25sb2FkQ29tcGxldGVkKHRoaXMuY3VycmVudFByb2dyZXNzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZUxhbmd1YWdlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRDb21wbGV0aW9uRXZlbnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGlkZUxvYWRpbmdTY3JlZW4oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvL1Nob3dzIHRoZSBwcm9ncmVzcyBiYXIuXHJcbiAgICBzaG93UHJvZ3Jlc3NCYXIoKSB7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyLmNsYXNzTGlzdC5hZGQoXCJ2aXNpYmxlXCIpO1xyXG4gICAgfVxyXG4gICAgLy9DaGVja3MgaWYgZG93bmxvYWQgaXMgY29tcGxldGVkLlxyXG4gICAgaXNEb3dubG9hZENvbXBsZXRlZChwcm9ncmVzcykge1xyXG4gICAgICAgIHJldHVybiBwcm9ncmVzcyA9PT0gMTAwICYmICF0aGlzLmlzX2NhY2hlZC5nZXQodGhpcy5sYW5nKTtcclxuICAgIH1cclxuICAgIC8vSGFuZGxlcyBjYWNoaW5nLlxyXG4gICAgY2FjaGVMYW5ndWFnZSgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmlzX2NhY2hlZC5zZXQodGhpcy5sYW5nLCB0cnVlKTtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oSXNDYWNoZWQsIEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20odGhpcy5pc19jYWNoZWQuZW50cmllcygpKSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGNhY2hpbmcgbGFuZ3VhZ2U6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBIYW5kbGVzIEV2ZW50IHNlbmRpbmcuXHJcbiAgICBzZW5kQ29tcGxldGlvbkV2ZW50KCkge1xyXG4gICAgICAgIGNvbnN0IGRvd25sb2FkQ29tcGxldGVkID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IHRoaXMudmVyc2lvbkluZm9FbGVtZW50LmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogdGhpcy5nZXRKc29uVmVyc2lvbk51bWJlcigpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmREb3dubG9hZENvbXBsZXRlZEV2ZW50KGRvd25sb2FkQ29tcGxldGVkKTtcclxuICAgIH1cclxuICAgIGdldEpzb25WZXJzaW9uTnVtYmVyKCkge1xyXG4gICAgICAgIHJldHVybiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvblxyXG4gICAgICAgICAgICA/IHRoaXMubWFqVmVyc2lvbiArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uXHJcbiAgICAgICAgICAgIDogXCJcIjtcclxuICAgIH1cclxuICAgIC8vSGlkZXMgdGhlIGxvYWRpbmcgc2NyZWVuLlxyXG4gICAgaGlkZUxvYWRpbmdTY3JlZW4oKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ2ZXJzaW9uXCIgKyB0aGlzLmxhbmcsIHRoaXMuZ2V0SnNvblZlcnNpb25OdW1iZXIoKSk7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlc2l6ZSh0aGlzLmRhdGFNb2RhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaGlkaW5nIGxvYWRpbmcgc2NyZWVuOlwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQuZGF0YS5tc2cgPT09IFwiTG9hZGluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTG9hZGluZ01lc3NhZ2UoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmRhdGEubXNnID09PSBcIlVwZGF0ZSBGb3VuZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlzRG9jdW1lbnRWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ1Nlc3Npb25FbmRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZUJlZm9yZVVubG9hZCA9IGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQoKTtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgICBwcmVsb2FkR2FtZUF1ZGlvcyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBsZXQgYXVkaW9VcmxzID0gQVVESU9fVVJMX1BSRUxPQUQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlbG9hZFByb21pc2VzID0gYXVkaW9VcmxzLm1hcCgoYXVkaW9TcmMpID0+IG5ldyBBdWRpb1BsYXllcigpLnByZWxvYWRHYW1lQXVkaW8oYXVkaW9TcmMpKTtcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJlbG9hZFByb21pc2VzKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByZWxvYWRpbmcgYXVkaW86XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIEFkZCB0aGUgZGlzcG9zZSBtZXRob2RcclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMuaGFuZGxlQmVmb3JlVW5sb2FkKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVTZXJ2aWNlV29ya2VyTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBlcmZvcm0gYWRkaXRpb25hbCBjbGVhbnVwIGlmIG5lY2Vzc2FyeVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IGFwcCA9IG5ldyBBcHAobGFuZyk7XHJcbiJdLCJuYW1lcyI6WyJDT05TVEFOVFMiLCJOT0RFX0NMSUVOVCIsIk5PREVfQURNSU4iLCJTREtfVkVSU0lPTiIsImFzc2VydCIsImFzc2VydGlvbiIsIm1lc3NhZ2UiLCJhc3NlcnRpb25FcnJvciIsIkVycm9yIiwic3RyaW5nVG9CeXRlQXJyYXkkMSIsInN0ciIsIm91dCIsInAiLCJpIiwibGVuZ3RoIiwiYyIsImNoYXJDb2RlQXQiLCJiYXNlNjQiLCJieXRlVG9DaGFyTWFwXyIsImNoYXJUb0J5dGVNYXBfIiwiYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIiwiY2hhclRvQnl0ZU1hcFdlYlNhZmVfIiwiRU5DT0RFRF9WQUxTX0JBU0UiLCJFTkNPREVEX1ZBTFMiLCJ0aGlzIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5wdXQiLCJ3ZWJTYWZlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5pdF8iLCJieXRlVG9DaGFyTWFwIiwib3V0cHV0IiwiYnl0ZTEiLCJoYXZlQnl0ZTIiLCJieXRlMiIsImhhdmVCeXRlMyIsImJ5dGUzIiwib3V0Qnl0ZTEiLCJvdXRCeXRlMiIsIm91dEJ5dGUzIiwib3V0Qnl0ZTQiLCJwdXNoIiwiam9pbiIsImVuY29kZVN0cmluZyIsImJ0b2EiLCJkZWNvZGVTdHJpbmciLCJieXRlcyIsInBvcyIsImMxIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYzIiLCJ1IiwiYzMiLCJieXRlQXJyYXlUb1N0cmluZyIsImRlY29kZVN0cmluZ1RvQnl0ZUFycmF5IiwiY2hhclRvQnl0ZU1hcCIsImNoYXJBdCIsImJ5dGU0IiwiRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYXJndW1lbnRzIiwibmFtZSIsImJhc2U2NEVuY29kZSIsInV0ZjhCeXRlcyIsImJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nIiwicmVwbGFjZSIsImJhc2U2NERlY29kZSIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJkZWVwQ29weSIsInZhbHVlIiwiZGVlcEV4dGVuZCIsInVuZGVmaW5lZCIsInRhcmdldCIsInNvdXJjZSIsIk9iamVjdCIsIkRhdGUiLCJnZXRUaW1lIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiZ2V0R2xvYmFsIiwic2VsZiIsIndpbmRvdyIsImciLCJnZXREZWZhdWx0cyIsIl9fRklSRUJBU0VfREVGQVVMVFNfXyIsInByb2Nlc3MiLCJlbnYiLCJkZWZhdWx0c0pzb25TdHJpbmciLCJKU09OIiwicGFyc2UiLCJnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSIsImRvY3VtZW50IiwibWF0Y2giLCJjb29raWUiLCJkZWNvZGVkIiwiZ2V0RGVmYXVsdHNGcm9tQ29va2llIiwiaW5mbyIsImdldERlZmF1bHRFbXVsYXRvckhvc3QiLCJwcm9kdWN0TmFtZSIsIl9hIiwiX2IiLCJlbXVsYXRvckhvc3RzIiwiZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0IiwiaG9zdCIsInNlcGFyYXRvckluZGV4IiwibGFzdEluZGV4T2YiLCJwb3J0IiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJnZXREZWZhdWx0QXBwQ29uZmlnIiwiY29uZmlnIiwiZ2V0RXhwZXJpbWVudGFsU2V0dGluZyIsIkRlZmVycmVkIiwicmVqZWN0IiwicmVzb2x2ZSIsInByb21pc2UiLCJQcm9taXNlIiwid3JhcENhbGxiYWNrIiwiY2FsbGJhY2siLCJjYXRjaCIsImNyZWF0ZU1vY2tVc2VyVG9rZW4iLCJ0b2tlbiIsInByb2plY3RJZCIsInVpZCIsInByb2plY3QiLCJpYXQiLCJzdWIiLCJ1c2VyX2lkIiwicGF5bG9hZCIsImFzc2lnbiIsImlzcyIsImF1ZCIsImV4cCIsImF1dGhfdGltZSIsImZpcmViYXNlIiwic2lnbl9pbl9wcm92aWRlciIsImlkZW50aXRpZXMiLCJzdHJpbmdpZnkiLCJhbGciLCJ0eXBlIiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJpc01vYmlsZUNvcmRvdmEiLCJ0ZXN0IiwiaXNOb2RlIiwiZm9yY2VFbnZpcm9ubWVudCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImlzQnJvd3NlciIsImlzQnJvd3NlckV4dGVuc2lvbiIsInJ1bnRpbWUiLCJjaHJvbWUiLCJicm93c2VyIiwiaWQiLCJpc1JlYWN0TmF0aXZlIiwiaXNFbGVjdHJvbiIsImluZGV4T2YiLCJpc0lFIiwidWEiLCJpc1VXUCIsImlzTm9kZVNkayIsImlzU2FmYXJpIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0luZGV4ZWREQkF2YWlsYWJsZSIsImluZGV4ZWREQiIsInZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUiLCJwcmVFeGlzdCIsIkRCX0NIRUNLX05BTUUiLCJyZXF1ZXN0Iiwib3BlbiIsIm9uc3VjY2VzcyIsInJlc3VsdCIsImNsb3NlIiwiZGVsZXRlRGF0YWJhc2UiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbmVycm9yIiwiYXJlQ29va2llc0VuYWJsZWQiLCJjb29raWVFbmFibGVkIiwiRmlyZWJhc2VFcnJvciIsImNvZGUiLCJjdXN0b21EYXRhIiwic2V0UHJvdG90eXBlT2YiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkVycm9yRmFjdG9yeSIsImNyZWF0ZSIsInNlcnZpY2UiLCJzZXJ2aWNlTmFtZSIsImVycm9ycyIsImRhdGEiLCJmdWxsQ29kZSIsInRlbXBsYXRlIiwiUEFUVEVSTiIsIl8iLCJrZXkiLCJyZXBsYWNlVGVtcGxhdGUiLCJmdWxsTWVzc2FnZSIsImpzb25FdmFsIiwiZGVjb2RlIiwiaGVhZGVyIiwiY2xhaW1zIiwic2lnbmF0dXJlIiwicGFydHMiLCJzcGxpdCIsImlzVmFsaWRUaW1lc3RhbXAiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJ2YWxpZFNpbmNlIiwidmFsaWRVbnRpbCIsImlzc3VlZEF0VGltZSIsImlzVmFsaWRGb3JtYXQiLCJpc0FkbWluIiwiY29udGFpbnMiLCJvYmoiLCJzYWZlR2V0IiwiaXNFbXB0eSIsIm1hcCIsImZuIiwiY29udGV4dE9iaiIsInJlcyIsImRlZXBFcXVhbCIsImEiLCJiIiwiYUtleXMiLCJrZXlzIiwiYktleXMiLCJrIiwiYVByb3AiLCJiUHJvcCIsImlzT2JqZWN0IiwidGhpbmciLCJwcm9taXNlV2l0aFRpbWVvdXQiLCJ0aW1lSW5NUyIsImRlZmVycmVkUHJvbWlzZSIsInNldFRpbWVvdXQiLCJ0aGVuIiwicXVlcnlzdHJpbmciLCJxdWVyeXN0cmluZ1BhcmFtcyIsInBhcmFtcyIsImVudHJpZXMiLCJmb3JFYWNoIiwiYXJyYXlWYWwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZ0RlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImV4dHJhY3RRdWVyeXN0cmluZyIsInVybCIsInF1ZXJ5U3RhcnQiLCJmcmFnbWVudFN0YXJ0IiwiU2hhMSIsImNoYWluXyIsImJ1Zl8iLCJXXyIsInBhZF8iLCJpbmJ1Zl8iLCJ0b3RhbF8iLCJibG9ja1NpemUiLCJyZXNldCIsImNvbXByZXNzXyIsImJ1ZiIsIm9mZnNldCIsIlciLCJ0IiwiZiIsImQiLCJ1cGRhdGUiLCJsZW5ndGhNaW51c0Jsb2NrIiwibiIsImluYnVmIiwiZGlnZXN0IiwidG90YWxCaXRzIiwiaiIsImNyZWF0ZVN1YnNjcmliZSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsInByb3h5IiwiT2JzZXJ2ZXJQcm94eSIsInN1YnNjcmliZSIsImJpbmQiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsIm5leHQiLCJmb3JFYWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsImNvbXBsZXRlIiwibmV4dE9yT2JzZXJ2ZXIiLCJtZXRob2RzIiwibWV0aG9kIiwiaW1wbGVtZW50c0FueU1ldGhvZHMiLCJub29wIiwidW5zdWIiLCJ1bnN1YnNjcmliZU9uZSIsImZpbmFsRXJyb3IiLCJzZW5kT25lIiwiZXJyIiwiYXN5bmMiLCJvbkVycm9yIiwiYXJncyIsInZhbGlkYXRlQXJnQ291bnQiLCJmbk5hbWUiLCJtaW5Db3VudCIsIm1heENvdW50IiwiYXJnQ291bnQiLCJhcmdFcnJvciIsImVycm9yUHJlZml4IiwiYXJnTmFtZSIsInZhbGlkYXRlTmFtZXNwYWNlIiwibmFtZXNwYWNlIiwib3B0aW9uYWwiLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiYXJndW1lbnROYW1lIiwidmFsaWRhdGVDb250ZXh0T2JqZWN0IiwiY29udGV4dCIsInN0cmluZ1RvQnl0ZUFycmF5IiwiaGlnaCIsInN0cmluZ0xlbmd0aCIsInV1aWR2NCIsInIiLCJyYW5kb20iLCJERUZBVUxUX0lOVEVSVkFMX01JTExJUyIsIkRFRkFVTFRfQkFDS09GRl9GQUNUT1IiLCJNQVhfVkFMVUVfTUlMTElTIiwiUkFORE9NX0ZBQ1RPUiIsImNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMiLCJiYWNrb2ZmQ291bnQiLCJpbnRlcnZhbE1pbGxpcyIsImJhY2tvZmZGYWN0b3IiLCJjdXJyQmFzZVZhbHVlIiwicG93IiwicmFuZG9tV2FpdCIsInJvdW5kIiwibWluIiwib3JkaW5hbCIsIk51bWJlciIsImlzRmluaXRlIiwiYWJzIiwiY2VudCIsImRlYyIsImluZGljYXRvciIsImdldE1vZHVsYXJJbnN0YW5jZSIsIl9kZWxlZ2F0ZSIsImZhY3RvcnkiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18iLCJfc2NyaXB0RGlyIiwiUml2ZSIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJtb2R1bGVBcmciLCJhYSIsImVhIiwibSIsImZhIiwiTWFwIiwibCIsIm9iIiwiVGIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImRlbGV0ZSIsInNpemUiLCJSYiIsImJvZHkiLCJyZW1vdmUiLCJjcmVhdGVFbGVtZW50Iiwic3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwb3NpdGlvbiIsInJpZ2h0IiwidG9wIiwiY29sb3IiLCJwYWRkaW5nIiwiaW5uZXJIVE1MIiwidG9GaXhlZCIsImFwcGVuZENoaWxkIiwicGVyZm9ybWFuY2UiLCJPYiIsImhhIiwiaGFzIiwiY2xlYXJUaW1lb3V0IiwiZ2V0IiwibWF4IiwicmVhZHkiLCJpYSIsIm9uUnVudGltZUluaXRpYWxpemVkIiwiZGVjb2RlQXVkaW8iLCJkZWNvZGVGb250IiwiRmlsZUFzc2V0TG9hZGVyIiwicHRyVG9Bc3NldCIsInB0clRvRmlsZUFzc2V0IiwiaXNJbWFnZSIsInB0clRvSW1hZ2VBc3NldCIsImlzRm9udCIsInB0clRvRm9udEFzc2V0IiwiaXNBdWRpbyIsInB0clRvQXVkaW9Bc3NldCIsIkN1c3RvbUZpbGVBc3NldExvYWRlciIsImV4dGVuZCIsIl9fY29uc3RydWN0IiwibG9hZENvbnRlbnRzIiwiX19wYXJlbnQiLCJHYiIsIkNETkZpbGVBc3NldExvYWRlciIsImNkblV1aWQiLCJjZG5CYXNlVXJsIiwiWE1MSHR0cFJlcXVlc3QiLCJyZXNwb25zZVR5cGUiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiVWludDhBcnJheSIsInJlc3BvbnNlIiwic2VuZCIsIkZhbGxiYWNrRmlsZUFzc2V0TG9hZGVyIiwia2IiLCJhZGRMb2FkZXIiLCJqYSIsImthIiwiYWxwaGEiLCJkZXB0aCIsInN0ZW5jaWwiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJwcmVmZXJMb3dQb3dlclRvSGlnaFBlcmZvcm1hbmNlIiwiZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsImVuYWJsZUV4dGVuc2lvbnNCeURlZmF1bHQiLCJleHBsaWNpdFN3YXBDb250cm9sIiwicmVuZGVyVmlhT2Zmc2NyZWVuQmFja0J1ZmZlciIsImdldENvbnRleHQiLCJsb2ciLCJBIiwiRCIsInciLCJNIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlckluZm9Mb2ciLCJhdHRhY2hTaGFkZXIiLCJQcm94eSIsImlzQ29udGV4dExvc3QiLCJhcHBseSIsImdldFBhcmFtZXRlciIsIk1BWF9SRU5ERVJCVUZGRVJfU0laRSIsIk1BWF9URVhUVVJFX1NJWkUiLCJjcmVhdGVQcm9ncmFtIiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsImJpbmRBdHRyaWJMb2NhdGlvbiIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ0cmltIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwidXNlUHJvZ3JhbSIsImJpbmRCdWZmZXIiLCJBUlJBWV9CVUZGRVIiLCJjcmVhdGVCdWZmZXIiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsIkVMRU1FTlRfQVJSQVlfQlVGRkVSIiwidW5pZm9ybTFpIiwicGl4ZWxTdG9yZWkiLCJVTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wiLCJoYyIsIk1iIiwiZGVsZXRlVGV4dHVyZSIsIkxiIiwiY3JlYXRlVGV4dHVyZSIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInRleEltYWdlMkQiLCJSR0JBIiwiVU5TSUdORURfQllURSIsInRleFBhcmFtZXRlcmkiLCJURVhUVVJFX1dSQVBfUyIsIkNMQU1QX1RPX0VER0UiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIkxJTkVBUiIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIkxJTkVBUl9NSVBNQVBfTElORUFSIiwiZ2VuZXJhdGVNaXBtYXAiLCJ2IiwieCIsIlFiIiwiY2FudmFzIiwiVCIsIndpZHRoIiwiaGVpZ2h0Iiwidmlld3BvcnQiLCJkaXNhYmxlIiwiU0NJU1NPUl9URVNUIiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsImVuYWJsZSIsInNvcnQiLCJGIiwiYmEiLCJ3YiIsImJ1ZmZlckRhdGEiLCJEWU5BTUlDX0RSQVciLCJidWZmZXJTdWJEYXRhIiwiVGEiLCJjYSIsIkRiIiwicmEiLCJpbmRpY2VzIiwiaW1hZ2UiLCJLYSIsIkphIiwibWMiLCJzY2lzc29yIiwiWWEiLCJaYSIsImpiIiwiQWMiLCJ1bmlmb3JtNGYiLCJCYSIsIkNhIiwidW5pZm9ybTJmIiwiaWMiLCJqYyIsInZlcnRleEF0dHJpYlBvaW50ZXIiLCJGTE9BVCIsImRyYXdFbGVtZW50cyIsIlRSSUFOR0xFUyIsIlVOU0lHTkVEX1NIT1JUIiwibGEiLCJxIiwic3JjT3ZlciIsInNjcmVlbiIsIm92ZXJsYXkiLCJkYXJrZW4iLCJsaWdodGVuIiwiY29sb3JEb2RnZSIsImNvbG9yQnVybiIsImhhcmRMaWdodCIsInNvZnRMaWdodCIsImRpZmZlcmVuY2UiLCJleGNsdXNpb24iLCJtdWx0aXBseSIsImh1ZSIsInNhdHVyYXRpb24iLCJsdW1pbm9zaXR5IiwiZHJhd1dpZHRoIiwiZHJhd0hlaWdodCIsInoiLCJIIiwiUmVuZGVyUGFpbnRTdHlsZSIsIlJlbmRlclBhdGgiLCJSZW5kZXJQYWludCIsIlJlbmRlcmVyIiwiU3Ryb2tlQ2FwIiwiU3Ryb2tlSm9pbiIsIkJsZW5kTW9kZSIsImZpbGwiLCJzdHJva2UiLCJGaWxsUnVsZSIsImV2ZW5PZGQiLCJSZW5kZXJJbWFnZSIsInhhIiwiX19kZXN0cnVjdCIsIlVSTCIsInJldm9rZU9iamVjdFVSTCIsIldhIiwiRyIsIkltYWdlIiwiY3JlYXRlT2JqZWN0VVJMIiwiQmxvYiIsIm9ubG9hZCIsIkZiIiwiUGF0aDJEIiwicmV3aW5kIiwiYWRkUGF0aCIsIkMiLCJJIiwiSiIsIksiLCJYIiwiUSIsIkRPTU1hdHJpeCIsImZpbGxSdWxlIiwiVmEiLCJtb3ZlVG8iLCJsaW5lVG8iLCJjdWJpY1RvIiwiYmV6aWVyQ3VydmVUbyIsImNsb3NlUGF0aCIsIlhhIiwidGhpY2tuZXNzIiwiSWIiLCJtaXRlciIsIklhIiwiYmV2ZWwiLCJjYXAiLCJidXR0IiwiSGEiLCJzcXVhcmUiLCJIYiIsImJsZW5kTW9kZSIsIkViIiwiY2xlYXJHcmFkaWVudCIsImxpbmVhckdyYWRpZW50IiwieWIiLCJ6YiIsImJiIiwiY2IiLCJSYSIsInJhZGlhbEdyYWRpZW50IiwiZWMiLCJhZGRTdG9wIiwic3RvcCIsImNvbXBsZXRlR3JhZGllbnQiLCJkcmF3IiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiY3JlYXRlUmFkaWFsR3JhZGllbnQiLCJzcXJ0IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJkYSIsIlIiLCJhZGRDb2xvclN0b3AiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImxpbmVDYXAiLCJsaW5lSm9pbiIsImZpbGxTdHlsZSIsIlNldCIsIkNhbnZhc1JlbmRlcmVyIiwiUyIsIlVhIiwic2F2ZSIsInNsaWNlIiwicmVzdG9yZSIsInNwbGljZSIsInRyYW5zZm9ybSIsInJvdGF0ZSIsInNpbiIsImNvcyIsIl9kcmF3UGF0aCIsIl9kcmF3Uml2ZUltYWdlIiwiZ2xvYmFsQWxwaGEiLCJkcmF3SW1hZ2UiLCJfZ2V0TWF0cml4IiwiX2RyYXdJbWFnZU1lc2giLCJZYiIsIlpiIiwiR2EiLCJzYSIsImNlaWwiLCJ0YSIsIkR5bmFtaWNSZWN0YW5pemVyIiwiYWRkUmVjdCIsImFkZCIsIiRiIiwiYWMiLCJGbG9hdDMyQXJyYXkiLCJVaW50MTZBcnJheSIsInphIiwicWQiLCJyZXNldFRyYW5zZm9ybSIsImJjIiwiX2NsaXBQYXRoIiwiY2xpcCIsImNsZWFyUmVjdCIsImZsdXNoIiwidHJhbnNsYXRlIiwibWFrZVJlbmRlcmVyIiwiZGVjb2RlSW1hZ2UiLCJyZW5kZXJGYWN0b3J5IiwibWFrZVJlbmRlclBhaW50IiwibWFrZVJlbmRlclBhdGgiLCJtYWtlUmVuZGVySW1hZ2UiLCJ0b3RhbCIsImxvYWRlZCIsImxvYWQiLCJlbmFibGVGUFNDb3VudGVyIiwiZGlzYWJsZUZQU0NvdW50ZXIiLCJyZXNvbHZlQW5pbWF0aW9uRnJhbWUiLCJjbGVhbnVwIiwidmEiLCJtYSIsIm5hIiwib2EiLCJwYSIsImltcG9ydFNjcmlwdHMiLCJxYSIsImxvY2F0aW9uIiwiaHJlZiIsInN1YnN0ciIsInlhIiwid2EiLCJwcmludCIsInByaW50RXJyIiwidGhpc1Byb2dyYW0iLCJ3YXNtQmluYXJ5Iiwibm9FeGl0UnVudGltZSIsIldlYkFzc2VtYmx5IiwiQWEiLCJ5IiwiQiIsIkUiLCJEYSIsIkVhIiwiTCIsIk4iLCJGYSIsImJ1ZmZlciIsIkhFQVA4IiwiSW50OEFycmF5IiwiSEVBUDE2IiwiSW50MTZBcnJheSIsIkhFQVAzMiIsIkludDMyQXJyYXkiLCJIRUFQVTgiLCJIRUFQVTE2IiwiSEVBUFUzMiIsIlVpbnQzMkFycmF5IiwiSEVBUEYzMiIsIkhFQVBGNjQiLCJGbG9hdDY0QXJyYXkiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInByZVJ1biIsInNoaWZ0IiwidW5zaGlmdCIsIlBhIiwiUWEiLCJvbkFib3J0IiwiUnVudGltZUVycm9yIiwiU2EiLCJzdGFydHNXaXRoIiwibG9jYXRlRmlsZSIsImZldGNoIiwiY3JlZGVudGlhbHMiLCJvayIsImFycmF5QnVmZmVyIiwiaW5zdGFudGlhdGUiLCIkYSIsImRiIiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiaCIsImNhcHR1cmUiLCJnYSIsInN0b3BwZWQiLCJ4YiIsInljIiwiQ2IiLCJwb3AiLCJTYyIsIkJiIiwidW5sb2NrIiwic3RhdGUiLCJyZXN1bWUiLCJhYiIsInBiIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJtZWRpYURldmljZXMiLCJnZXRVc2VyTWVkaWEiLCJzYW1wbGVSYXRlIiwic3VzcGVuZCIsIloiLCJjcmVhdGVTY3JpcHRQcm9jZXNzb3IiLCJvbmF1ZGlvcHJvY2VzcyIsImlucHV0QnVmZmVyIiwiZ2V0Q2hhbm5lbERhdGEiLCJvdXRwdXRCdWZmZXIiLCJudW1iZXJPZkNoYW5uZWxzIiwiYXVkaW8iLCJ2aWRlbyIsImNyZWF0ZU1lZGlhU3RyZWFtU291cmNlIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwiZGlzY29ubmVjdCIsImViIiwiZmIiLCJnYiIsImZpbHRlciIsImhiIiwiZXhlYyIsImliIiwiY3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwibGIiLCJUeXBlRXJyb3IiLCJtYiIsIlRleHREZWNvZGVyIiwibmIiLCJzdWJhcnJheSIsInFiIiwicmIiLCJzYiIsInRiIiwiViIsInViIiwidmIiLCJub2RlIiwiTyIsInMiLCJzZWVrYWJsZSIsInJlYWQiLCJ0aW1lc3RhbXAiLCJ3cml0ZSIsInByb21wdCIsInJlYWRsaW5lIiwiRmMiLCJIYyIsIkVjIiwiR2MiLCJEYyIsImNjIiwiZGMiLCJVYiIsIlAiLCJVIiwiY3JlYXRlTm9kZSIsImRpciIsIlkiLCJBYiIsInN0cmVhbSIsImZpbGUiLCJsaW5rIiwibW9kZSIsIktjIiwiSmMiLCJNYyIsIk9jIiwiTGMiLCJCYyIsIk5jIiwiSWMiLCJKYiIsIkNjIiwicGFyZW50IiwiYnl0ZU9mZnNldCIsIm8iLCJwYXRoIiwicm9vdCIsIktiIiwiTmIiLCJsYyIsIlBiIiwiVmIiLCJkZWZpbmVQcm9wZXJ0aWVzIiwib2JqZWN0IiwiZmxhZ3MiLCJTYiIsIldiIiwiUWMiLCJrYyIsIlhiIiwiemMiLCJsb2dSZWFkRmlsZXMiLCJmYyIsImdjIiwicGMiLCJzdGFjayIsIm5jIiwib2MiLCJxYyIsInJjIiwic2MiLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwiY291bnQiLCJQYyIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwidW5yZWdpc3RlciIsInJlZ2lzdGVyIiwiUmMiLCJmcm9tV2lyZVR5cGUiLCJUYyIsIlVjIiwiVmMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJiZCIsImNkIiwiZGQiLCJlZCIsImZkIiwiY2xvbmUiLCJnZCIsImhkIiwidG9XaXJlVHlwZSIsImpkIiwia2QiLCJsZCIsImNvbmNhdCIsIm1kIiwibmQiLCJvZCIsInBkIiwicmQiLCJzZCIsInRkIiwidWQiLCJ2ZCIsIndkIiwieGQiLCJ5ZCIsInpkIiwiQWQiLCJCZCIsIkNkIiwiRGQiLCJFZCIsIkZkIiwiTWQiLCJHZCIsIkpkIiwiS2QiLCJMZCIsIk5kIiwiVVNFUiIsIkxPR05BTUUiLCJQQVRIIiwiUFdEIiwiSE9NRSIsIkxBTkciLCJsYW5ndWFnZXMiLCJPZCIsIlBkIiwiUWQiLCJieXRlTGVuZ3RoIiwiQmluZGluZ0Vycm9yIiwiY291bnRfZW12YWxfaGFuZGxlcyIsIlB1cmVWaXJ0dWFsRXJyb3IiLCJTZCIsIlRkIiwiZ2V0SW5oZXJpdGVkSW5zdGFuY2VDb3VudCIsImdldExpdmVJbmhlcml0ZWRJbnN0YW5jZXMiLCJmbHVzaFBlbmRpbmdEZWxldGVzIiwic2V0RGVsYXlGdW5jdGlvbiIsIkludGVybmFsRXJyb3IiLCJpc0FsaWFzT2YiLCJnZXRQcm90b3R5cGVPZiIsImlzRGVsZXRlZCIsImRlbGV0ZUxhdGVyIiwiYXJnUGFja0FkdmFuY2UiLCJyZWFkVmFsdWVGcm9tUG9pbnRlciIsImRlbGV0ZU9iamVjdCIsInBvaW50ZXJUeXBlIiwiVW5ib3VuZFR5cGVFcnJvciIsIldkIiwiX19zeXNjYWxsX2ZjbnRsNjQiLCJVZCIsIl9fc3lzY2FsbF9pb2N0bCIsIl9fc3lzY2FsbF9vcGVuYXQiLCJfZW1iaW5kX2NyZWF0ZV9pbmhlcml0aW5nX2NvbnN0cnVjdG9yIiwiZGVmaW5lUHJvcGVydHkiLCJpbXBsZW1lbnQiLCJub3RpZnlPbkRlc3RydWN0aW9uIiwiX2VtYmluZF9maW5hbGl6ZV92YWx1ZV9vYmplY3QiLCJfZW1iaW5kX3JlZ2lzdGVyX2JpZ2ludCIsIl9lbWJpbmRfcmVnaXN0ZXJfYm9vbCIsIl9lbWJpbmRfcmVnaXN0ZXJfY2xhc3MiLCIkIiwiX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jbGFzc19mdW5jdGlvbiIsIlN5bWJvbCIsIl9lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfY2xhc3NfcHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwiX2VtYmluZF9yZWdpc3Rlcl9jbGFzc19jb25zdHJ1Y3RvciIsIl9lbWJpbmRfcmVnaXN0ZXJfY2xhc3NfZnVuY3Rpb24iLCJjbGFzc05hbWUiLCJfZW1iaW5kX3JlZ2lzdGVyX2NsYXNzX3Byb3BlcnR5IiwiX2VtYmluZF9yZWdpc3Rlcl9lbXZhbCIsIl9lbWJpbmRfcmVnaXN0ZXJfZW51bSIsInZhbHVlcyIsIl9lbWJpbmRfcmVnaXN0ZXJfZW51bV92YWx1ZSIsIl9lbWJpbmRfcmVnaXN0ZXJfZmxvYXQiLCJfZW1iaW5kX3JlZ2lzdGVyX2Z1bmN0aW9uIiwiX2VtYmluZF9yZWdpc3Rlcl9pbnRlZ2VyIiwiX2VtYmluZF9yZWdpc3Rlcl9tZW1vcnlfdmlldyIsIl9lbWJpbmRfcmVnaXN0ZXJfc3RkX3N0cmluZyIsIkFycmF5QnVmZmVyIiwiVWludDhDbGFtcGVkQXJyYXkiLCJWZCIsIl9lbWJpbmRfcmVnaXN0ZXJfc3RkX3dzdHJpbmciLCJfZW1iaW5kX3JlZ2lzdGVyX3ZhbHVlX29iamVjdCIsIl9lbWJpbmRfcmVnaXN0ZXJfdmFsdWVfb2JqZWN0X2ZpZWxkIiwiX2VtYmluZF9yZWdpc3Rlcl92b2lkIiwiX2Vtc2NyaXB0ZW5fZ2V0X25vd19pc19tb25vdG9uaWMiLCJfZW12YWxfYXMiLCJfZW12YWxfY2FsbF9tZXRob2QiLCJfZW12YWxfY2FsbF92b2lkX21ldGhvZCIsIl9lbXZhbF9kZWNyZWYiLCJfZW12YWxfZ2V0X21ldGhvZF9jYWxsZXIiLCJJZCIsIkhkIiwiX2VtdmFsX2dldF9tb2R1bGVfcHJvcGVydHkiLCJfZW12YWxfZ2V0X3Byb3BlcnR5IiwiX2VtdmFsX2luY3JlZiIsIl9lbXZhbF9uZXdfY3N0cmluZyIsIl9lbXZhbF9uZXdfb2JqZWN0IiwiX2VtdmFsX3J1bl9kZXN0cnVjdG9ycyIsIl9lbXZhbF9zZXRfcHJvcGVydHkiLCJfZW12YWxfdGFrZV92YWx1ZSIsImFib3J0IiwiZW1zY3JpcHRlbl9hc21fY29uc3RfaW50IiwiZW1zY3JpcHRlbl9kYXRlX25vdyIsImVtc2NyaXB0ZW5fZ2V0X25vdyIsImVtc2NyaXB0ZW5fbWVtY3B5X2JpZyIsImNvcHlXaXRoaW4iLCJlbXNjcmlwdGVuX3Jlc2l6ZV9oZWFwIiwiZ3JvdyIsImVudmlyb25fZ2V0IiwiZW52aXJvbl9zaXplc19nZXQiLCJmZF9jbG9zZSIsImZkX3JlYWQiLCJmZF9zZWVrIiwiTmFOIiwiaXNOYU4iLCJmZF93cml0ZSIsInN0cmZ0aW1lX2wiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF0ZSIsImdldERheSIsInNldERhdGUiLCJzZXRNb250aCIsInNldEZ1bGxZZWFyIiwiUmVnRXhwIiwiUmQiLCJleHBvcnRzIiwibWVtb3J5IiwiX19pbmRpcmVjdF9mdW5jdGlvbl90YWJsZSIsIl9fd2FzbV9jYWxsX2N0b3JzIiwibW9uaXRvclJ1bkRlcGVuZGVuY2llcyIsImNsZWFySW50ZXJ2YWwiLCJ3YXNpX3NuYXBzaG90X3ByZXZpZXcxIiwiaW5zdGFudGlhdGVXYXNtIiwiaW5zdGFudGlhdGVTdHJlYW1pbmciLCJpbnN0YW5jZSIsImZyZWUiLCJtYWxsb2MiLCJfbWFfZGV2aWNlX19vbl9ub3RpZmljYXRpb25fdW5sb2NrZWQiLCJtYV9kZXZpY2VfX29uX25vdGlmaWNhdGlvbl91bmxvY2tlZCIsIl9tYV9tYWxsb2NfZW1zY3JpcHRlbiIsIm1hX21hbGxvY19lbXNjcmlwdGVuIiwiX21hX2ZyZWVfZW1zY3JpcHRlbiIsIm1hX2ZyZWVfZW1zY3JpcHRlbiIsIlhkIiwiX21hX2RldmljZV9wcm9jZXNzX3BjbV9mcmFtZXNfY2FwdHVyZV9fd2ViYXVkaW8iLCJtYV9kZXZpY2VfcHJvY2Vzc19wY21fZnJhbWVzX2NhcHR1cmVfX3dlYmF1ZGlvIiwiX21hX2RldmljZV9wcm9jZXNzX3BjbV9mcmFtZXNfcGxheWJhY2tfX3dlYmF1ZGlvIiwibWFfZGV2aWNlX3Byb2Nlc3NfcGNtX2ZyYW1lc19wbGF5YmFja19fd2ViYXVkaW8iLCJfX2Vycm5vX2xvY2F0aW9uIiwiX19nZXRUeXBlTmFtZSIsIlpkIiwiY2FsbGVkUnVuIiwibm9GU0luaXQiLCJzdGRpbiIsInN0ZG91dCIsInN0ZGVyciIsInBvc3RSdW4iLCJzZXRTdGF0dXMiLCJfX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzIiwiX2VtYmluZF9pbml0aWFsaXplX2JpbmRpbmdzIiwiZHluQ2FsbF9paWppIiwiZHluQ2FsbF9qaWppIiwiZHluQ2FsbF9paWlqaSIsImR5bkNhbGxfaWlqIiwiZHluQ2FsbF9qaWkiLCJkeW5DYWxsX3ZpaWppaSIsImR5bkNhbGxfaWlpaWlqIiwiZHluQ2FsbF9paWlpaWpqIiwiZHluQ2FsbF9paWlpaWlqaiIsIllkIiwicHJlSW5pdCIsIl9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fIiwibW9kdWxlIiwiX191bnVzZWRfd2VicGFja19tb2R1bGUiLCJBbmltYXRpb24iLCJfQW5pbWF0aW9uX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJhbmltYXRpb24iLCJhcnRib2FyZCIsInBsYXlpbmciLCJsb29wQ291bnQiLCJzY3J1YlRvIiwiTGluZWFyQW5pbWF0aW9uSW5zdGFuY2UiLCJ0aW1lIiwibG9vcFZhbHVlIiwiYWR2YW5jZSIsIm1peCIsIkJMQU5LX1VSTCIsIl9zYW5pdGl6ZVVybF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fIiwicmVnaXN0ZXJUb3VjaEludGVyYWN0aW9ucyIsIl9yZWdpc3RlclRvdWNoSW50ZXJhY3Rpb25zX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJzYW5pdGl6ZVVybCIsInN0YXRlTWFjaGluZXMiLCJyZW5kZXJlciIsInJpdmUiLCJmaXQiLCJhbGlnbm1lbnQiLCJfYyIsImlzVG91Y2hTY3JvbGxFbmFibGVkIiwiX3ByZXZFdmVudFR5cGUiLCJfc3ludGhldGljRXZlbnRzQWN0aXZlIiwiZXZlbnQiLCJNb3VzZUV2ZW50IiwiYm91bmRpbmdSZWN0IiwiY3VycmVudFRhcmdldCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJwcmV2ZW50RGVmYXVsdCIsImNsaWVudFgiLCJjbGllbnRZIiwiY2hhbmdlZFRvdWNoZXMiLCJnZXRDbGllbnRDb29yZGluYXRlcyIsImNhbnZhc1giLCJsZWZ0IiwiY2FudmFzWSIsImZvcndhcmRNYXRyaXgiLCJjb21wdXRlQWxpZ25tZW50IiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImJvdW5kcyIsImludmVydGVkTWF0cml4IiwiTWF0MkQiLCJpbnZlcnQiLCJjYW52YXNDb29yZGluYXRlc1ZlY3RvciIsIlZlYzJEIiwidHJhbnNmb3JtZWRWZWN0b3IiLCJtYXBYWSIsInRyYW5zZm9ybWVkWCIsInRyYW5zZm9ybWVkWSIsIl9pIiwic3RhdGVNYWNoaW5lc18xIiwicG9pbnRlck1vdmUiLCJzdGF0ZU1hY2hpbmVzXzIiLCJzdGF0ZU1hY2hpbmVzXzMiLCJwb2ludGVyRG93biIsIl9kIiwic3RhdGVNYWNoaW5lc180IiwicG9pbnRlclVwIiwicGFzc2l2ZSIsImludmFsaWRQcm90b2NvbFJlZ2V4IiwiaHRtbEVudGl0aWVzUmVnZXgiLCJodG1sQ3RybEVudGl0eVJlZ2V4IiwiY3RybENoYXJhY3RlcnNSZWdleCIsInVybFNjaGVtZVJlZ2V4IiwicmVsYXRpdmVGaXJzdENoYXJhY3RlcnMiLCJzYW5pdGl6ZWRVcmwiLCJpc1JlbGF0aXZlVXJsV2l0aG91dFByb3RvY29sIiwidXJsU2NoZW1lUGFyc2VSZXN1bHRzIiwidXJsU2NoZW1lIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJkZWZpbml0aW9uIiwidG9TdHJpbmdUYWciLCJBbGlnbm1lbnQiLCJFdmVudFR5cGUiLCJGaXQiLCJMYXlvdXQiLCJMb29wVHlwZSIsIlJpdmVFdmVudFR5cGUiLCJSaXZlRmlsZSIsIlJ1bnRpbWVMb2FkZXIiLCJTdGF0ZU1hY2hpbmVJbnB1dCIsIlN0YXRlTWFjaGluZUlucHV0VHlwZSIsIlRlc3RpbmciLCJleHRlbmRTdGF0aWNzIiwiX3JpdmVfYWR2YW5jZWRfbWpzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJwYWNrYWdlX2pzb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9hbmltYXRpb25fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyIsIl91dGlsc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fIiwiX19leHRlbmRzIiwiX19wcm90b19fIiwiX18iLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsImdlbmVyYXRvciIsImZ1bGZpbGxlZCIsInN0ZXAiLCJyZWplY3RlZCIsImRvbmUiLCJfX2dlbmVyYXRvciIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwiaXRlcmF0b3IiLCJvcCIsIl9lIiwiX2YiLCJDb250YWluIiwiQ2VudGVyIiwibmV3Iiwid2FybiIsImNvcHlXaXRoIiwicnVudGltZUZpdCIsImNhY2hlZFJ1bnRpbWVGaXQiLCJDb3ZlciIsImNvdmVyIiwiY29udGFpbiIsIkZpbGwiLCJGaXRXaWR0aCIsImZpdFdpZHRoIiwiRml0SGVpZ2h0IiwiZml0SGVpZ2h0IiwiU2NhbGVEb3duIiwic2NhbGVEb3duIiwibm9uZSIsInJ1bnRpbWVBbGlnbm1lbnQiLCJjYWNoZWRSdW50aW1lQWxpZ25tZW50IiwiVG9wTGVmdCIsInRvcExlZnQiLCJUb3BDZW50ZXIiLCJ0b3BDZW50ZXIiLCJUb3BSaWdodCIsInRvcFJpZ2h0IiwiQ2VudGVyTGVmdCIsImNlbnRlckxlZnQiLCJDZW50ZXJSaWdodCIsImNlbnRlclJpZ2h0IiwiQm90dG9tTGVmdCIsImJvdHRvbUxlZnQiLCJCb3R0b21DZW50ZXIiLCJib3R0b21DZW50ZXIiLCJCb3R0b21SaWdodCIsImJvdHRvbVJpZ2h0IiwiY2VudGVyIiwibG9hZFJ1bnRpbWUiLCJ3YXNtVVJMIiwiY2FsbEJhY2tRdWV1ZSIsImJhY2t1cEpzZGVsaXZyVXJsIiwidmVyc2lvbiIsInRvTG93ZXJDYXNlIiwic2V0V2FzbVVybCIsImdldEluc3RhbmNlIiwiaXNMb2FkaW5nIiwiYXdhaXRJbnN0YW5jZSIsInJ1bnRpbWVJbnB1dCIsImZpcmUiLCJUcmlnZ2VyIiwiU3RhdGVNYWNoaW5lIiwic3RhdGVNYWNoaW5lIiwiaW5wdXRzIiwiU3RhdGVNYWNoaW5lSW5zdGFuY2UiLCJpbml0SW5wdXRzIiwibmFtZXMiLCJzdGF0ZUNoYW5nZWRDb3VudCIsInN0YXRlQ2hhbmdlZE5hbWVCeUluZGV4IiwicmVwb3J0ZWRFdmVudENvdW50IiwicmVwb3J0ZWRFdmVudEF0IiwiaW5wdXRDb3VudCIsIm1hcFJ1bnRpbWVJbnB1dCIsIlNNSUlucHV0IiwiYm9vbCIsIkJvb2xlYW4iLCJhc0Jvb2wiLCJudW1iZXIiLCJhc051bWJlciIsInRyaWdnZXIiLCJhc1RyaWdnZXIiLCJBbmltYXRvciIsImV2ZW50TWFuYWdlciIsImFuaW1hdGlvbnMiLCJhbmltYXRhYmxlcyIsImZpcmVFdmVudCIsIm1hcFRvU3RyaW5nQXJyYXkiLCJpbnN0YW5jZWRBbmltYXRpb25OYW1lcyIsImluc3RhbmNlZE1hY2hpbmVOYW1lcyIsImFJbmRleCIsIm1JbmRleCIsImFuaW0iLCJhbmltYXRpb25CeU5hbWUiLCJuZXdBbmltYXRpb24iLCJzbSIsInN0YXRlTWFjaGluZUJ5TmFtZSIsIm5ld1N0YXRlTWFjaGluZSIsIlBsYXkiLCJQYXVzZSIsInBhdXNlZCIsImluaXRMaW5lYXJBbmltYXRpb25zIiwiaW5pdFN0YXRlTWFjaGluZXMiLCJpbnN0YW5jZWRTdGF0ZU1hY2hpbmVOYW1lcyIsInBsYXkiLCJwYXVzZSIsInNjcnViIiwiZm9yU2NydWJiaW5nIiwiX3RoaXMiLCJyZW1vdmVkTmFtZXMiLCJhbmltYXRpb25zVG9SZW1vdmUiLCJtYWNoaW5lc1RvUmVtb3ZlIiwiU3RvcCIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJpc1BsYXlpbmciLCJhdExlYXN0T25lIiwiaW5zdGFuY2VkTmFtZSIsImFuaW1hdGlvbkNvdW50IiwiYW5pbWF0aW9uQnlJbmRleCIsInN0YXRlTWFjaGluZUNvdW50Iiwic3RhdGVNYWNoaW5lQnlJbmRleCIsImhhbmRsZUxvb3BpbmciLCJMb29wIiwiUGluZ1BvbmciLCJoYW5kbGVTdGF0ZUNoYW5nZXMiLCJzdGF0ZXNDaGFuZ2VkIiwiU3RhdGVDaGFuZ2UiLCJoYW5kbGVBZHZhbmNpbmciLCJBZHZhbmNlIiwiU3lzdGVtQXVkaW9TdGF0dXMiLCJFdmVudE1hbmFnZXIiLCJsaXN0ZW5lcnMiLCJnZXRMaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImN1cnJlbnRMaXN0ZW5lciIsInJlbW92ZUFsbCIsIlRhc2tRdWV1ZU1hbmFnZXIiLCJxdWV1ZSIsImFjdGlvbiIsIkF1ZGlvTWFuYWdlciIsIl9zdXBlciIsIl9zdGFydGVkIiwiX2VuYWJsZWQiLCJfc3RhdHVzIiwiVU5BVkFJTEFCTEUiLCJkZWxheSIsInRpbWVvdXQiLCJyZXBvcnRUb0xpc3RlbmVycyIsIkF1ZGlvU3RhdHVzQ2hhbmdlIiwiZW5hYmxlQXVkaW8iLCJBVkFJTEFCTEUiLCJ0ZXN0QXVkaW8iLCJfYXVkaW9Db250ZXh0IiwicmFjZSIsIl9lc3RhYmxpc2hBdWRpbyIsImxpc3RlbkZvclVzZXJBY3Rpb24iLCJvbmNlIiwiZXN0YWJsaXNoQXVkaW8iLCJhdWRpb01hbmFnZXIiLCJGYWtlUmVzaXplT2JzZXJ2ZXIiLCJvYnNlcnZlIiwidW5vYnNlcnZlIiwiTXlSZXNpemVPYnNlcnZlciIsImdsb2JhbFRoaXMiLCJSZXNpemVPYnNlcnZlciIsIk9iamVjdE9ic2VydmVycyIsIl9lbGVtZW50c01hcCIsIl9vbk9ic2VydmVkRW50cnkiLCJlbnRyeSIsIm9ic2VydmVkIiwib25SZXNpemUiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIl9yZXNpemVPYnNlcnZlciIsIl9vbk9ic2VydmVkIiwiZWxlbWVudCIsImVuYWJsZVJpdmVBc3NldENETiIsInJlZmVyZW5jZUNvdW50IiwiYXNzZXRMb2FkZXIiLCJvbkxvYWQiLCJvbiIsIkxvYWQiLCJvbkxvYWRFcnJvciIsIkxvYWRFcnJvciIsImluaXREYXRhIiwibG9hZGVyIiwibG9hZFJpdmVGaWxlIiwiZmlsZUxvYWRFcnJvck1lc3NhZ2UiLCJpbml0IiwibWlzc2luZ0Vycm9yTWVzc2FnZSIsIm9mZiIsInJlbW92ZUFsbFJpdmVFdmVudExpc3RlbmVycyIsInJlYWR5Rm9yUGxheWluZyIsImV2ZW50Q2xlYW51cCIsInNob3VsZERpc2FibGVSaXZlTGlzdGVuZXJzIiwiYXV0b21hdGljYWxseUhhbmRsZUV2ZW50cyIsIl92b2x1bWUiLCJfaGFzWmVyb1NpemUiLCJkdXJhdGlvbnMiLCJmcmFtZVRpbWVzIiwiZnJhbWVDb3VudCIsIm9uQ2FudmFzUmVzaXplIiwiaGFzWmVyb1NpemUiLCJfbGF5b3V0IiwicmVzaXplVG9DYW52YXMiLCJyZW5kZXJTZWNvbmRUaW1lciIsIkhUTUxDYW52YXNFbGVtZW50IiwiX29ic2VydmVkIiwicml2ZUZpbGUiLCJsYXlvdXQiLCJvblBsYXkiLCJvblBhdXNlIiwib25TdG9wIiwib25Mb29wIiwib25TdGF0ZUNoYW5nZSIsIm9uQWR2YW5jZSIsIm9ubG9hZGVycm9yIiwib25wbGF5Iiwib25wYXVzZSIsIm9uc3RvcCIsIm9ubG9vcCIsIm9uc3RhdGVjaGFuZ2UiLCJ0YXNrUXVldWUiLCJhdXRvcGxheSIsInVzZU9mZnNjcmVlblJlbmRlcmVyIiwib25TeXN0ZW1BdWRpb0NoYW5nZWQiLCJ2b2x1bWUiLCJzdGFydGluZ0FuaW1hdGlvbk5hbWVzIiwic3RhcnRpbmdTdGF0ZU1hY2hpbmVOYW1lcyIsInJlc2l6ZURyYXdpbmdTdXJmYWNlVG9DYW52YXMiLCJzZXR1cFJpdmVMaXN0ZW5lcnMiLCJyaXZlTGlzdGVuZXJPcHRpb25zIiwiYWN0aXZlU3RhdGVNYWNoaW5lcyIsImFuaW1hdG9yIiwiaGFzTGlzdGVuZXJzIiwidG91Y2hTY3JvbGxFbmFibGVkT3B0aW9uIiwicmVtb3ZlUml2ZUxpc3RlbmVycyIsImluaXRpYWxpemVBdWRpbyIsImhhc0F1ZGlvIiwiYXJ0Ym9hcmROYW1lIiwiYW5pbWF0aW9uTmFtZXMiLCJzdGF0ZU1hY2hpbmVOYW1lcyIsIm1zZyIsImluaXRBcnRib2FyZCIsImRyYXdGcmFtZSIsImluc3RhbmNlTmFtZXMiLCJyb290QXJ0Ym9hcmQiLCJhcnRib2FyZEJ5TmFtZSIsImRlZmF1bHRBcnRib2FyZCIsInN5c3RlbVZvbHVtZSIsInN0YXJ0UmVuZGVyaW5nIiwib25TZWNvbmQiLCJmcmFtZVJlcXVlc3RJZCIsImJlZm9yZSIsImxhc3RSZW5kZXJUaW1lIiwiZWxhcHNlZFRpbWUiLCJhY3RpdmVBbmltYXRpb25zXzEiLCJuZWVkc1NjcnViIiwiZmlyc3QiLCJkaWRMb29wIiwiYWN0aXZlU3RhdGVNYWNoaW5lc18xIiwibnVtRXZlbnRzUmVwb3J0ZWQiLCJldmVudF8xIiwiT3BlblVybCIsIlJpdmVFdmVudCIsIm5ld0FuY2hvclRhZyIsInNldEF0dHJpYnV0ZSIsImNsaWNrIiwiYWxpZ25SZW5kZXJlciIsImFmdGVyIiwiaXNQYXVzZWQiLCJpc1N0b3BwZWQiLCJhbGlnbiIsInN0b3BSZW5kZXJpbmciLCJjbGVhbnVwSW5zdGFuY2VzIiwiZGVsZXRlUml2ZVJlbmRlcmVyIiwicmV0cmlldmVUZXh0UnVuIiwidGV4dFJ1bk5hbWUiLCJ0ZXh0UnVuIiwiZ2V0VGV4dFJ1blZhbHVlIiwidGV4dCIsInNldFRleHRSdW5WYWx1ZSIsInRleHRSdW5WYWx1ZSIsImFydEJvYXJkTmFtZSIsImN1c3RvbURldmljZVBpeGVsUmF0aW8iLCJkcHIiLCJkZXZpY2VQaXhlbFJhdGlvIiwic3RhdGVNYWNoaW5lSW5wdXRzIiwiZmluZCIsInJldHJpZXZlSW5wdXRBdFBhdGgiLCJpbnB1dEJ5UGF0aCIsInNldEJvb2xlYW5TdGF0ZUF0UGF0aCIsImlucHV0TmFtZSIsInNldE51bWJlclN0YXRlQXRQYXRoIiwiZmlyZVN0YXRlQXRQYXRoIiwicmV0cmlldmVUZXh0QXRQYXRoIiwidGV4dEJ5UGF0aCIsImdldFRleHRSdW5WYWx1ZUF0UGF0aCIsInRleHROYW1lIiwicnVuIiwic2V0VGV4dFJ1blZhbHVlQXRQYXRoIiwidW5zdWJzY3JpYmUiLCJ1bnN1YnNjcmliZUFsbCIsImZwc0NhbGxiYWNrIiwicml2ZUNvbnRlbnRzIiwiYXJ0Ym9hcmRzIiwiYXJ0Ym9hcmRDb3VudCIsImFydGJvYXJkQnlJbmRleCIsImFydGJvYXJkQ29udGVudHMiLCJuYW1lXzEiLCJpbnB1dENvbnRlbnRzIiwicmVxIiwiUmVxdWVzdCIsIkJhc2VGaXJlYmFzZUludGVncmF0aW9uIiwiZmlyZWJhc2VBcHAiLCJhbmFseXRpY3MiLCJpbml0aWFsaXplRmlyZWJhc2UiLCJjdXN0b21FdmVudHMiLCJldmVudE5hbWUiLCJsb2dFdmVudCIsInNlc3Npb25FbmQiLCJvbkxpbmUiLCJpbml0aWFsaXplQXBwIiwiZmlyZWJhc2VDb25maWciLCJnZXRBbmFseXRpY3MiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJGaXJlYmFzZUludGVncmF0aW9uIiwic3RhdGljIiwic2VuZFNlc3Npb25TdGFydEV2ZW50Iiwic2VuZFNlc3Npb25FbmRFdmVudCIsInNlbmRTZWxlY3RlZExldmVsRXZlbnQiLCJzZW5kVGFwcGVkU3RhcnRFdmVudCIsInNlbmRQdXp6bGVDb21wbGV0ZWRFdmVudCIsInNlbmRMZXZlbENvbXBsZXRlZEV2ZW50Iiwic2VuZFVzZXJDbGlja2VkT25QbGF5RXZlbnQiLCJzZW5kRG93bmxvYWRDb21wbGV0ZWRFdmVudCIsIkxPQURQVVpaTEUiLCJTVE9ORURST1AiLCJNT1VTRU1PVkUiLCJNT1VTRURPV04iLCJNT1VTRVVQIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiQ0xJQ0siLCJWSVNJQklMSVRZX0NIQU5HRSIsInVybFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsInNlYXJjaCIsInBzZXVkb0lkIiwibGFuZyIsImZvbnQiLCJVdGlscyIsImdldExhbmd1YWdlU3BlY2lmaWNGb250IiwiRGVidWdnZXIiLCJEZXZlbG9wbWVudExpbmsiLCJEZXZlbG9wbWVudFNlcnZlciIsIkRlYnVnTW9kZSIsIlN0b25lQ29uZmlnIiwib3JpZ3giLCJvcmlneSIsImltZyIsImltYWdlU2l6ZSIsInRleHRGb250U2l6ZSIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiaW1hZ2VDZW50ZXJPZmZzZXRYIiwiaW1hZ2VDZW50ZXJPZmZzZXRZIiwidHV0b3JpYWxJbnN0YW5jZSIsInRpbWVyVGlja2luZ0luc3RhbmNlIiwiZnJhbWUiLCJzdG9uZUxldHRlciIsInhQb3MiLCJ5UG9zIiwiY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSIsIm1lYXN1cmVUZXh0IiwiZ2V0RWFzZSIsImN1cnJlbnRQcm9ncmVzcyIsInN0YXJ0IiwiZGlzdGFuY2UiLCJzdGVwcyIsIlBJIiwiZ2V0WCIsImdldFkiLCJhZGp1c3RTaXplIiwic2hvdWxkUmVzaXplIiwibnVtIiwiZGVsdGFUaW1lIiwic2hhZG93Q29sb3IiLCJzaGFkb3dCbHVyIiwic2hhZG93T2Zmc2V0WCIsInNoYWRvd09mZnNldFkiLCJ0ZXh0QWxpZ24iLCJmaWxsVGV4dCIsImdldENvbnZlcnRlZERldlByb2RVUkwiLCJVcmxTdWJzdHJpbmciLCJsYW5ndWFnZSIsImxvd2VyQ2FzZUxhbmd1YWdlIiwibGFuZ3VhZ2VGb250TWFwcGluZyIsImdldFJhbmRvbU51bWJlciIsImdldEV4Y2x1ZGVkQ29vcmRpbmF0ZXMiLCJleGNsdXNpb25QZXJjZW50YWdlIiwiZXhjbHVkZVgiLCJleGNsdWRlWSIsImNyZWF0ZVJpcHBsZUVmZmVjdCIsImN0eCIsImNlbnRlclgiLCJjZW50ZXJZIiwib3V0ZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsInJlc3RhcnQiLCJiZWdpblBhdGgiLCJhcmMiLCJsb2FkSW1hZ2VzIiwic291cmNlcyIsImltYWdlcyIsImxvYWRlZEltYWdlcyIsIm51bUltYWdlcyIsInN5bmNMb2FkaW5nSW1hZ2VzIiwibG9hZEltZ1Byb21pc2VzIiwiYXJyS2V5IiwibmV3SW1hZ2UiLCJjcmVhdGVJbWciLCJhbGwiLCJhY2N1bXVsYXRvciIsImN1cnJlbnQiLCJpc0NsaWNrSW5zaWRlQnV0dG9uIiwieENsaWNrIiwieUNsaWNrIiwiYnV0dG9uWCIsImJ1dHRvblkiLCJidXR0b25XaWR0aCIsImJ1dHRvbkhlaWdodCIsImlzQ2lyY3VsYXIiLCJpc0RvY3VtZW50VmlzaWJsZSIsInZpc2liaWxpdHlTdGF0ZSIsInRvZ2dsZURlYnVnTW9kZSIsInRvZ2dsZUJ0biIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImlzT24iLCJpbm5lclRleHQiLCJoaWRlRWxlbWVudCIsImlzSGlkZSIsIkF1ZGlvUGxheWVyIiwiYXVkaW9Db250ZXh0Iiwic291cmNlTm9kZSIsImF1ZGlvUXVldWUiLCJwcm9tcHRBdWRpb0J1ZmZlciIsImNsaWNrU291bmRCdWZmZXIiLCJhdWRpb1NvdXJjcyIsImlzQ2xpY2tTb3VuZExvYWRlZCIsIkF1ZGlvQ29udGV4dE1hbmFnZXIiLCJnZXRBdWRpb0NvbnRleHQiLCJwbGF5QnV0dG9uQ2xpY2tTb3VuZCIsImF1ZGlvU3JjIiwiQVVESU9fUEFUSF9CVE5fQ0xJQ0siLCJsb2FkQW5kRGVjb2RlQXVkaW8iLCJhdWRpb0J1ZmZlcnMiLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJkZWNvZGVBdWRpb0RhdGEiLCJwcmVsb2FkUHJvbXB0QXVkaW8iLCJhdWRpb0J1ZmZlciIsInByZWxvYWRHYW1lQXVkaW8iLCJwbGF5QXVkaW8iLCJwbGF5RmVlZGJhY2tBdWRpb3MiLCJsb29wIiwiZmlsZVVybCIsInBsYXlGZXRjaCIsInBsYXlQcm9tcHRBdWRpbyIsInN0b3BGZWVkYmFja0F1ZGlvIiwic3RvcEFsbEF1ZGlvcyIsImluZGV4Iiwib25lbmRlZCIsImhhbmRsZUF1ZGlvRW5kZWQiLCJiZ0ltZyIsIkRFRkFVTFRfQkFDS0dST1VORF8xIiwiaGlsbEltZyIsIkFTU0VUU19QQVRIX0hJTEwiLCJwaWxsZXJJbWciLCJBU1NFVFNfUEFUSF9UT1RFTSIsImZlbmNoSW1nIiwiQVNTRVRTX1BBVEhfRkVOQ0UiLCJhdXR1bW5CZ0ltZyIsIkFVVFVNTl9CQUNLR1JPVU5EXzEiLCJhdXR1bW5IaWxsSW1nIiwiQVVUVU1OX0hJTExfMSIsImF1dHVtblBpbGxlckltZyIsIkFVVFVNTl9QSUxMQVJfMSIsImF1dHVtblNpZ25JbWciLCJBVVRVTU5fU0lHTl8xIiwiYXV0dW1uRmVuY2VJbWciLCJBVVRVTU5fRkVOQ0VfMSIsIndpbnRlckJnSW1nIiwiV0lOVEVSX0JBQ0tHUk9VTkRfMSIsIndpbnRlckhpbGxJbWciLCJXSU5URVJfSElMTF8xIiwid2ludGVyU2lnbkltZyIsIldJTlRFUl9TSUdOXzEiLCJ3aW50ZXJGZW5jZUltZyIsIldJTlRFUl9GRU5DRV8xIiwid2ludGVyUGlsbGVySW1nIiwiV0lOVEVSX1BJTExBUl8xIiwiQmFja2dyb3VuZCIsImltYWdlc0xvYWRlZCIsImxldmVsTnVtYmVyIiwiYXZhaWxhYmxlQmFja2dyb3VuZFR5cGVzIiwiYmFja2dyb3VuZFR5cGUiLCJDYW5jZWxCdXR0b24iLCJwb3NYIiwicG9zWSIsImNhbmNlbF9idXR0b25faW1hZ2UiLCJidG5TaXplQW5pbWF0aW9uIiwiYnRuT3JpZ2luYWxTaXplIiwib3JpZ25hbFBvcyIsIkNBTkNFTF9CVE5fSU1HIiwib25DbGljayIsImlzSW5zaWRlIiwiQ2xvc2VCdXR0b24iLCJjbG9zZV9idXR0b25faW1hZ2UiLCJNQVBfQlROX0lNRyIsIkxldmVsQmxvb25CdXR0b24iLCJsZXZlbERhdGEiLCJvcmlnaW5hbFBvc1giLCJvcmlnaW5hbFBvc1kiLCJyYWRpdXNPZmZTZXQiLCJibG9vblNpemUiLCJidG5TaXplIiwibG9ja1NpemUiLCJpc0xldmVsU3BlY2lhbCIsImlzU3BlY2lhbExldmVsIiwiU1BFQ0lBTF9MRVZFTFMiLCJpc1NwZWNpYWwiLCJsZXZlbFNlbGVjdGlvblBhZ2VJbmRleCIsInVubG9ja0xldmVsSW5kZXgiLCJnYW1lTGV2ZWxEYXRhIiwidG90YWxHYW1lTGV2ZWxzIiwiYmFsbG9vbkltZyIsImRyYXdJY29ucyIsImFwcGx5UHVsc2VFZmZlY3QiLCJHcm93UGhhc2VUaHJlc2hvbGQiLCJhbmltYXRpb25Qcm9ncmVzcyIsImdyb3dQaGFzZSIsInByb2dyZXNzIiwic2hhZG93U2l6ZSIsInNoYWRvd09wYWNpdHkiLCJzY2FsZVgiLCJzY2FsZVkiLCJyYWRpdXMiLCJzY2FsZVJhZGl1cyIsInBhZ2VJbmRleCIsImRyYXdMb2NrIiwiY2hlY2tTdGFycyIsInN0YXJDb3VudCIsImxvY2tJbWciLCJkcmF3U3RhciIsInN0YXJJbWciLCJjYWxsQmFjayIsIk5leHRCdXR0b24iLCJuZXh0X2J1dHRvbl9pbWFnZSIsIk5FWFRfQlROX0lNRyIsIk5vQnV0dG9uIiwibm9fYnV0dG9uX2ltYWdlIiwiUGF1c2VCdXR0b24iLCJwYXVzZV9idXR0b25faW1hZ2UiLCJQQVVTRV9CVE5fSU1HIiwiUGxheUJ1dHRvbiIsIm1halZlcnNpb24iLCJtaW5WZXJzaW9uIiwiZmlyZWJhc2VJbnRlZ3JhdGlvbiIsIlBMQVlfQlROX0lNRyIsImdldERhdGEiLCJtYWp2ZXJzaW9uIiwibWludmVyc2lvbiIsImxvZ1RhcHBlZFN0YXJ0RmlyZWJhc2VFdmVudCIsInRhcHBlZFN0YXJ0RGF0YSIsImNyX3VzZXJfaWQiLCJmdG1fbGFuZ3VhZ2UiLCJwcm9maWxlX251bWJlciIsInZlcnNpb25fbnVtYmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJqc29uX3ZlcnNpb25fbnVtYmVyIiwiUmV0cnlCdXR0b24iLCJyZXRyeV9idXR0b25faW1hZ2UiLCJSRVRSWV9CVE5fSU1HIiwiWWVzQnV0dG9uIiwieWVzX2J1dHRvbl9pbWFnZSIsIllFU19CVE5fSU1HIiwiRmVlZGJhY2tUZXh0RWZmZWN0cyIsImZlZWRiYWNrVGV4dEVsZW1lbnQiLCJoaWRlVGltZW91dElkIiwiaW5pdGlhbGl6ZSIsImlzRmVlZGJhY2tFbGVtZW50QXZhaWxhYmxlIiwid3JhcFRleHQiLCJ0ZXh0Q29udGVudCIsInNldEhpZGVUaW1lb3V0IiwiTGV2ZWxJbmRpY2F0b3JzIiwiYWN0aXZlSW5kaWNhdG9ycyIsInN0b25lRHJvcENhbGxiYWNrSGFuZGxlciIsImhhbmRsZVN0b25lRHJvcCIsImxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIiLCJoYW5kbGVMb2FkUHV6emxlIiwibGV2ZWxfaW5kaWNhdG9yIiwiTEVWRUxfSU5ESUNBVE9SIiwiYmFyX2VtcHR5IiwiQkFSX0VNUFRZIiwiYmFyX2Z1bGwiLCJCQVJfRlVMTCIsInNldEluZGljYXRvcnMiLCJpbmRpY2F0b3JDb3VudCIsImFkZERyb3BTdG9uZUV2ZW50IiwiZGlzcG9zZSIsInVucmVnaXN0ZXJFdmVudExpc3RlbmVyIiwiZGV0YWlsIiwiY291bnRlciIsIk1vbnN0ZXIiLCJ6aW5kZXgiLCJmcHMiLCJjYW52YXNTdGFjayIsImNhbnZhc0VsZW1lbnQiLCJnYW1lIiwibW9uc3RlclBoYXNlIiwicml2ZU1vbnN0ZXIiLCJjYWxsQmFja0Z1bmN0aW9uIiwiaW5pdGlhbGl6ZVJpdmVNb25zdGVyIiwiUml2ZU1vbnN0ZXJDb21wb25lbnQiLCJzdG9wUml2ZU1vbnN0ZXIiLCJjaGFuZ2VUb0RyYWdBbmltYXRpb24iLCJjaGFuZ2VUb0VhdEFuaW1hdGlvbiIsImNoYW5nZVRvSWRsZUFuaW1hdGlvbiIsImNoYW5nZVRvU3BpdEFuaW1hdGlvbiIsImlzQ29ycmVjdCIsIlBhdXNlUG9wVXAiLCJjYW5jZWxCdXR0b24iLCJyZXRyeUJ1dHRvbiIsImNsb3NlQnV0dG9uIiwicG9wX3VwX2ltYWdlIiwic3dpdGNoVG9MZXZlbFNlbGVjdGlvbiIsInJlbG9hZFNjZW5lIiwiZ2FtZXBsYXlEYXRhIiwiYXVkaW9QbGF5ZXIiLCJyZXRyeVN1cmVQb3B1cCIsIkNsb3NlU3VyZVBvcHVwIiwiaXNSZXRyeUJ1dHRvbkNsaWNrZWQiLCJpc0Nsb3NlQnV0dG9uQ2xpY2tlZCIsInNlbGZJZEVsZW1lbnQiLCJQT1BVUF9CR19JTUciLCJ5ZXNSZXRyeUNhbGxiYWNrIiwibm9SZXRyeUNhbGxiYWNrIiwibm9DbG9zZUNhbGxiYWNrIiwicGxheUNsaWNrU291bmQiLCJhZGRMaXN0bmVyIiwiaGFuZGxlTW91c2VDbGljayIsInNlbGZFbGVtZW50IiwicmVjdCIsInBsYXlBcmVZb3VTdXJlU291bmQiLCJmaWxsUmVjdCIsIkFVRElPX0FSRV9ZT1VfU1VSRSIsIkFyZVlvdVN1cmVQb3BVcCIsInllc0J1dHRvbiIsIm5vQnV0dG9uIiwieWVzQ2FsbGJhY2siLCJub0NhbGxiYWNrIiwiUHJvbXB0VGV4dCIsImN1cnJlbnRQcm9tcHRUZXh0IiwiY3VycmVudFB1enpsZURhdGEiLCJjYW5hdnNFbGVtZW50IiwicHJvbXB0X2ltYWdlIiwidGFyZ2V0U3RvbmVzIiwicmlnaHRUb0xlZnQiLCJpc1N0b25lRHJvcHBlZCIsImRyb3BwZWRTdG9uZXMiLCJwcm9tcHRJbWFnZVdpZHRoIiwiaXNBcHBGb3JlZ3JvdW5kIiwic2NhbGUiLCJpc1NjYWxpbmdVcCIsInNjYWxlRmFjdG9yIiwicHJvbXB0SW1hZ2VIZWlnaHQiLCJwcm9tcHRQbGF5QnV0dG9uIiwicHJvbXB0VGV4dCIsImdldFByb21wdEF1ZGlvVXJsIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsImhhbmRsZU1vdXNlRG93biIsInBsYXlTb3VuZCIsInByb21wdEF1ZGlvIiwic2V0Q3VycnJlbnRQdXp6bGVEYXRhIiwiZHJhd1JUTExhbmciLCJmb250U2l6ZSIsImNhbGN1bGF0ZUZvbnQiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsImxldmVsTWV0YSIsImxldmVsVHlwZSIsInByb3RvVHlwZSIsImxldHRlckluV29yZCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZHJhd090aGVycyIsInByb21wdFRleHRMZXR0ZXJzIiwic3RhcnRQcm9tcHR0ZXh0WCIsImN1cnJlbnRXb3JkV2lkdGgiLCJsZXR0ZXJIaWdobGlnaHQiLCJ1cGRhdGVTY2FsaW5nIiwicHV6emxlcyIsImRyb3BwZWRTdG9uZUluZGV4IiwiaW1hZ2UxUHJvbWlzZSIsImxvYWRJbWFnZSIsIlBST01QVF9URVhUX0JHIiwiaW1hZ2UyUHJvbWlzZSIsIlBST01QVF9QTEFZX0JVVFRPTiIsInByb3BzIiwicml2ZUluc3RhbmNlIiwiYW5pbWF0aW9uTmFtZSIsIlN0b25lSGFuZGxlciIsInN0b25lUG9zIiwicGlja2VkU3RvbmUiLCJmb2lsU3RvbmVzIiwiYW5zd2VyIiwicHV6emxlTnVtYmVyIiwiY29ycmVjdEFuc3dlciIsInB1enpsZVN0YXJ0VGltZSIsInNob3dUdXRvcmlhbCIsIkdhbWVTY29yZSIsImdldERhdGFmcm9tU3RvcmFnZSIsImNvcnJlY3RTdG9uZUF1ZGlvIiwidHV0b3JpYWwiLCJjb3JyZWN0VGFyZ2V0U3RvbmUiLCJzdG9uZWJnIiwiZmVlZGJhY2tBdWRpb3MiLCJpc0dhbWVQYXVzZWQiLCJzZXRUYXJnZXRTdG9uZSIsImluaXRpYWxpemVTdG9uZVBvcyIsIkF1ZGlvIiwiQVVESU9fUEFUSF9DT1JSRUNUX1NUT05FIiwiY29udmVydEZlZWRCYWNrQXVkaW9zVG9MaXN0IiwiVHV0b3JpYWwiLCJBU1NFVFNfUEFUSF9TVE9ORV9QSU5LX0JHIiwiY3JlYXRlU3RvbmVzIiwiZ2V0Rm9pbFN0b25lcyIsInVwZGF0ZVRhcmdldFN0b25lUG9zaXRpb25zIiwiZHJhd1dvcmRQdXp6bGVMZXR0ZXJzIiwic2hvdWxkSGlkZVN0b25lQ2hlY2tlciIsImdyb3VwZWRMZXR0ZXJzIiwib2Zmc2V0Q29vcmRpbmF0ZVZhbHVlIiwic2V0UHV6emxlTnVtYmVyIiwiaXNTdG9uZUxldHRlckRyb3BDb3JyZWN0IiwiZHJvcHBlZFN0b25lIiwiZmVlZEJhY2tJbmRleCIsImlzV29yZCIsImlzTGV0dGVyRHJvcENvcnJlY3QiLCJwcm9jZXNzTGV0dGVyRHJvcEZlZWRiYWNrQXVkaW8iLCJnZXRDb3JyZWN0VGFyZ2V0U3RvbmUiLCJwbGF5Q29ycmVjdEFuc3dlckZlZWRiYWNrU291bmQiLCJBVURJT19QQVRIX0VBVFMiLCJBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMiLCJBVURJT19QQVRIX01PTlNURVJfU1BJVCIsIkFVRElPX1BBVEhfTU9OU1RFUl9ESVNTQVBPSU5URUQiLCJ0b3RhbFN0b25lc0NvdW50IiwiZXh0cmFTdG9uZXNDb3VudCIsInNldEdhbWVQYXVzZSIsInJhbmRvbU51bWJlciIsIkFVRElPX1BBVEhfUE9JTlRTX0FERCIsInJlc2V0U3RvbmVQb3NpdGlvbiIsInBpY2tlZFN0b25lT2JqZWN0Iiwic3RvbmUiLCJzdG9uZU9iaiIsInhMaW1pdCIsImhhbGZXaWR0aCIsImNvbXB1dGVDdXJzb3JEaXN0YW5jZSIsImhhbmRsZVBpY2tTdG9uZVVwIiwiY3RyIiwiaGFuZGxlSG92ZXJpbmdUb0Fub3RoZXJTdG9uZSIsInNob3VsZEdyb3VwTGV0dGVyIiwiaGFuZGxlTW92aW5nU3RvbmVMZXR0ZXIiLCJkcmFnZ2luZ1N0b25lIiwidXBkYXRlZFN0b25lQ29vcmRpbmF0ZXMiLCJUaW1lclRpY2tpbmciLCJ0aW1lcldpZHRoIiwidGltZXJIZWlnaHQiLCJ3aWR0aFRvQ2xlYXIiLCJ0aW1lciIsImlzVGltZXJTdGFydGVkIiwiaXNUaW1lckVuZGVkIiwiaXNUaW1lclJ1bm5pbmdPdXQiLCJ0aW1lcl9mdWxsIiwicGF1c2VCdXR0b25DbGlja2VkIiwic3RhcnRNeVRpbWVyIiwiaXNNeVRpbWVyT3ZlciIsInBsYXlMZXZlbEVuZEF1ZGlvT25jZSIsInRpbWVyX2VtcHR5IiwiVElNRVJfRU1QVFkiLCJyb3RhdGluZ19jbG9jayIsIlJPVEFUSU5HX0NMT0NLIiwiVElNRVJfRlVMTCIsInN0YXJ0VGltZXIiLCJyZWFkeVRpbWVyIiwiQVVESU9fVElNRU9VVCIsIlRyYWlsRWZmZWN0IiwicGFydGljbGVzIiwibW91c2UiLCJpc0RpYW1vbmQiLCJkcmF3VHJhaWwiLCJ0ZW1wIiwidHRsIiwiYWRkVHJhaWxQYXJ0aWNsZXNPbk1vdmUiLCJQYXJ0aWNsZXMiLCJyZXNldFBhcnRpY2xlcyIsImVuZCIsInJnYiIsImh5cCIsInN0YXJYIiwic3RhclkiLCJzdGFyQW5nbGUiLCJzdGFydFBvc1giLCJkZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgiLCJzdGFydFBvc1kiLCJlbmRQb3NYIiwiZW5kUG9zWSIsImdldFJhbmRvbUludCIsImJnU2NyZWVuVmFsIiwic21hbGxTY3JlZW5WYWwiLCJlYXNlT3V0UXVhcnQiLCJpc0RyYXdEaWFtb25kIiwic3RhclBhcnRpY2xlIiwiY2lyY2xlUGFydGljbGUiLCJ0dXRvcmlhbEltZyIsInRhcmdldFN0b25lUG9zaXRpb25zIiwic3RhcnR4Iiwic3RhcnR5IiwiZW5keCIsImVuZHkiLCJlbmRUdXRvcmlhbCIsInBsYXlNbnN0ckNsa1R0cmxBbmltIiwidG90YWxUaW1lIiwibW9uc3RlclN0b25lRGlmZmVyZW5jZSIsImR4IiwiZHkiLCJhYnNkeCIsImFic2R5Iiwic3RhcnRSaXBwbGUiLCJkcmF3UmlwcGxlIiwiVFVUT1JJQUxfSEFORCIsInRhcmdldFN0b25lUG9zaXRpb24iLCJhbmltYXRlSW1hZ2UiLCJpc01vYmlsZSIsInNldFR1dG9yaWFsRW5kIiwic2hvdWxkUGxheVR1dG9yaWFsIiwiZGlzeCIsImRpc3kiLCJtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlIiwiY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uIiwicHJldmlvdXNBbHBoYSIsInNob3VsZENyZWF0ZVJpcHBsZSIsInNpbnVzb2lkYWxJbnRlcnBvbGF0aW9uIiwibWluU2NhbGUiLCJtYXhTY2FsZSIsImR1cmF0aW9uIiwiYW1wbGl0dWRlIiwiZnJlcXVlbmN5IiwiY2xpY2tPbk1vbnN0ZXJUdXRvcmlhbCIsInNob3VsZFBsYXlNb25zdGVyQ2xpY2tUdXRvcmlhbEFuaW1hdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsImJvdHRvbVBvc2l0aW9uIiwidG9wUG9zaXRpb24iLCJjdXJyZW50T2Zmc2V0WSIsImdldEFsbEdhbWVMZXZlbEluZm8iLCJwdXp6bGVOdW1lciIsInNldFBsYXlNb25zdGVyQ2xpY2tBbmltYXRpb24iLCJCQUNLR1JPVU5EX0FTU0VUX0xJU1QiLCJzdW1tZXIiLCJCR19HUk9VUF9JTUdTIiwiREVGQVVMVF9CR19HUk9VUF9JTUdTIiwiZGVmYXVsdEJnRHJhd2luZyIsImF1dHVtbiIsIkFVVFVNTl9CR19HUk9VUF9JTUdTIiwiYXV0dW1CZ0RyYXdpbmciLCJ3aW50ZXIiLCJXSU5URVJfQkdfR1JPVVBfSU1HUyIsIndpbnRlckJnRHJhd2luZyIsImNyZWF0ZUJhY2tncm91bmQiLCJiYWNrZ3JvdW5kSW1nIiwiZHJhd01ldGhvZCIsImxvYWREeW5hbWljQmdBc3NldHMiLCJhc3NldHNMaXN0IiwiYXJyIiwiYmdJbWFnZXMiLCJsZXZlbFNlbGVjdEJnRHJhd2luZyIsIkxFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5EIiwiZ2V0ZGVmYXVsdENsb3VkQnRuc1BvcyIsImxvYWRMZXZlbEltYWdlcyIsIk1BUF9JQ09OX0lNRyIsInNwZWNpYWxCbG9vbkltZyIsIk1BUF9JQ09OX1NQRUNJQUxfSU1HIiwiTUFQX0xPQ0tfSU1HIiwiU1RBUl9JTUciLCJjcmVhdGVMZXZlbE9iamVjdCIsIkZpcmViYXNlVXNlckNsaWNrZWQiLCJGaXJlYmFzZVVzZXJJbnN0YWxsIiwiUFdBSW5zdGFsbFN0YXR1cyIsIlVzZXJDYW5jZWxsZWQiLCJOYXRpdmVQbGF5QnV0dG9uIiwiUHJldmlvdXNQbGF5ZWRMZXZlbCIsIlN0b3JlTW9uc3RlclBoYXNlTnVtYmVyIiwiSXNDYWNoZWQiLCJNb25zdGVyQXVkaW8iLCJGZWVkYmFja0F1ZGlvIiwiSW50cm9NdXNpYyIsIlByb21wdEF1ZGlvIiwiQnV0dG9uQ2xpY2siLCJUaW1lT3ZlciIsIlN0b25lTXVzaWMiLCJQaHJhc2VBdWRpbyIsIkxldmVsRW5kQXVkaW8iLCJTdGFydFNjZW5lMSIsIkxldmVsU2VsZWN0aW9uMSIsIkdhbWVTY2VuZTEiLCJFbmRTY2VuZTEiLCJGT05UX0JBU0VfUEFUSCIsIkFVRElPX1BBVEhfT05fRFJBRyIsIkFVRElPX0lOVFJPIiwiQVVESU9fTEVWRUxfTE9TRSIsIkFVRElPX0xFVkVMX1dJTiIsIkFVRElPX1VSTF9QUkVMT0FEIiwiQVNTRVRTX1BBVEhfQkdfMDEiLCJBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUiLCJXSU5fQkciLCJQSU5fU1RBUl8xIiwiUElOX1NUQVJfMiIsIlBJTl9TVEFSXzMiLCJDTE9VRF82IiwiQ0xPVURfNyIsIkNMT1VEXzgiLCJCQUNLX0JUTl9JTUciLCJHQU1FUExBWV9CR19HUk9VUF9JTUdTIiwiU0NFTkVfTkFNRV9TVEFSVCIsIlNDRU5FX05BTUVfTEVWRUxfU0VMRUNUIiwiU0NFTkVfTkFNRV9HQU1FX1BMQVkiLCJTQ0VORV9OQU1FX0xFVkVMX0VORCIsImdldEZ0bURhdGEiLCJoZWFkZXJzIiwianNvbiIsImN1c3RvbUZvbnRzIiwiZGVmYXVsdCIsImVuZ2xpc2giLCJzd2FoaWxpIiwid29sb2YiLCJ0YWppayIsIm1hcmF0aGkiLCJhbWhhcmljIiwicHVuamFiaSIsInRhbWlsIiwic2VwZWRpIiwiZ3VqYXJhdGkiLCJ0ZWx1Z3UiLCJ0c29uZ2EiLCJtYWxheSIsIm5kZWJlbGUiLCJ2ZW5kYSIsInNpc3dhdGkiLCJ0c3dhbmEiLCJ0aGFpIiwiZnVsYSIsImZhcnNpIiwiYnVybWVzZSIsImJlbmdhbGkiLCJBemVyYmFpamFuaSIsIlNlc290aG8iLCJHZW9yZ2lhbiIsIkJyYXppbGlhblBvcnR1Z3Vlc2UiLCJTb21hbGkiLCJIYXVzYSIsIklnYm8iLCJIYXRpYW5DcmVvbGUiLCJPcm9tbyIsIkx1Z2FuZGEiLCJZb3J1YmEiLCJLaG1lciIsIkphdmFuZXNlIiwiVXJkdSIsIktpbnlhcndhbmRhIiwiU2hvbmEiLCJLdXJkaXNoIiwiRnJlbmNoIiwiaXNpWGhvc2EiLCJBZnJpa2FhbnMiLCJOZXBhbGkiLCJVa3JhaW5pYW4iLCJIaW5kaSIsIlRhZ2Fsb2ciLCJWaWV0bmFtZXNlIiwiUGFzaHRvIiwiVHdpIiwiQXJhYmljIiwiRGF0YU1vZGFsIiwidGl0bGUiLCJvdGhlckF1ZGlvcyIsImxldmVscyIsIkZlZWRiYWNrVGV4dHMiLCJGZWVkYmFja0F1ZGlvcyIsImZlZWRiYWNrVGV4dHMiLCJPdGhlckF1ZGlvcyIsImdldExldmVscyIsImxldmVsQXJyYXkiLCJMZXZlbHMiLCJzZWxjdFlvdXJQbGF5ZXIiLCJ3YXRjaE1lR3JvdyIsImFyZVlvdVN1cmUiLCJmYW50YXN0aWMiLCJncmVhdCIsImFtYXppbmciLCJnZXRQdXp6bGVEYXRhIiwiTGV2ZWxNZXRhIiwiTGV2ZWxOdW1iZXIiLCJwdXp6bGVPYmplY3RzIiwiUHV6emxlcyIsInB1enpsZURhdGEiLCJzZWdtZW50TnVtYmVyIiwicHV6emxlIiwiU2VnbWVudE51bWJlciIsIlByb21wdCIsImdldFRhcmdldFN0b25lcyIsImZvaWxTdG9uZUFycmF5IiwiZm9pbHN0b25lcyIsInN0b25lcyIsIlN0b25lVGV4dCIsInRhcmdldFN0b25lQXJyYXkiLCJ0YXJnZXRzdG9uZXMiLCJGb2lsU3RvbmUiLCJzdG9uZVRleHQiLCJUYXJnZXRTdG9uZSIsInByb21wdEZhZGVPdXQiLCJsZXR0ZXJHcm91cCIsIlByb21wdEZhZGVvdXQiLCJMZXR0ZXJHcm91cCIsIlByb21wdFR5cGUiLCJMZXZlbFR5cGUiLCJzZXRHYW1lTGV2ZWxTY29yZSIsImN1cnJlbnRMZXZlbEluZm8iLCJzY29yZSIsInN0YXJzR2FpbmVkIiwiY2FsY3VsYXRlU3RhckNvdW50IiwibGV2ZWxQbGF5ZWRJbmZvIiwibGV2ZWxOYW1lIiwic2V0VG90YWxTdGFyQ291bnQiLCJhbGxHYW1lbGV2ZWxJbmZvIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImN1cnJlbnRsYW5ndWFnZSIsImdldEl0ZW0iLCJ0b3RhbFN0YXJDb3VudCIsImdldFRvdGFsU3RhckNvdW50IiwiaGFuZGxlciIsImhhbmRsZVN0b25lRHJvcHBlZEV2ZW50IiwiaGFuZGxlTG9hZFB1enpsZUV2ZW50IiwiV29yZFB1enpsZUxvZ2ljIiwiZHJvcHBlZExldHRlcnMiLCJncm91cGVkT2JqIiwiZHJvcHBlZEhpc3RvcnkiLCJoaWRlTGlzdE9iaiIsImdldFRhcmdldFdvcmQiLCJnZXRWYWx1ZXMiLCJjaGVja0lzV29yZFB1enpsZSIsInVwZGF0ZVB1enpsZUxldmVsIiwiY2xlYXJBbGxWYWx1ZXMiLCJjbGVhclBpY2tlZFVwIiwidmFsaWRhdGVTaG91bGRIaWRlTGV0dGVyIiwiZm9pbFN0b25lSW5kZXgiLCJoYW5kbGVDaGVja0hvdmVyZWRTdG9uZSIsImZvaWxTdG9uZVRleHQiLCJjb21iaW5lZExldHRlcnMiLCJ0YXJnZXRXb3JkIiwiaXNMZXR0ZXJBbHJlYWR5QWRkZWQiLCJpc1NhbWVMZXR0ZXJVbmlxdWUiLCJ2YWxpZGF0ZUZlZExldHRlcnMiLCJ2YWxpZGF0ZVdvcmRQdXp6bGUiLCJzZXRHcm91cFRvRHJvcHBlZCIsInNldFBpY2tVcExldHRlciIsImxldHRlciIsImFyckZvaWxTdG9uZUluZGV4IiwiU2NlbmVIYW5kbGVyIiwic3RhcnRTY2VuZSIsImxldmVsU2VsZWN0aW9uU2NlbmUiLCJnYW1lcGxheVNjZW5lIiwibGV2ZWxFbmRTY2VuZSIsImxvYWRpbmdTY3JlZW4iLCJsb2FkaW5nIiwibGFzdFRpbWUiLCJ0aXRsZVRleHRFbGVtZW50IiwiaGFuZGxlSW5zdGFsbFByb21wdCIsIlN0YXJ0U2NlbmUiLCJzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24iLCJTY2VuZU5hbWUiLCJMb2FkaW5nU2NlbmUiLCJyZW1vdmVMb2FkaW5nIiwic3RhcnRBbmltYXRpb25Mb29wIiwiYW5pbWF0ZSIsInRpbWVTdGFtcCIsImRldlRvZ2dsZSIsImNoZWNrTW9uc3RlclBoYXNlVXBkYXRpb24iLCJtb25zdGVyUGhhc2VOdW1iZXIiLCJkcmF3TGV2ZWxTZWxlY3Rpb24iLCJzd2l0Y2hTY2VuZVRvR2FtZXBsYXkiLCJnYW1lUGxheURhdGEiLCJjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tIiwic2hvd0xvYWRpbmciLCJqc29uVmVyc2lvbk51bWJlciIsIkdhbWVwbGF5U2NlbmUiLCJjdXJyZW50TGV2ZWxEYXRhIiwic3dpdGNoU2NlbmVUb0VuZExldmVsIiwic2VsZWN0ZWRMZXZlbE51bWJlciIsImN1cnJlbnRMZXZlbE51bWJlciIsImluaXRDbG91ZCIsIkxldmVsRW5kU2NlbmUiLCJMZXZlbFNlbGVjdGlvblNjcmVlbiIsImRpc3BsYXkiLCJsYXN0U2NlbmVOYW1lIiwiekluZGV4IiwibW9uc3RlciIsInRpbWVyVGlja2luZyIsInBhdXNlQnV0dG9uIiwibGV2ZWxJbmRpY2F0b3JzIiwic3RvbmVzQ291bnQiLCJmZWVkQmFja1RleHRzIiwiaXNQdXp6bGVDb21wbGV0ZWQiLCJzd2l0Y2hTY2VuZVRvRW5kIiwic3RvbmVIYW5kbGVyIiwicGF1c2VQb3B1cCIsImlzUGF1c2VCdXR0b25DbGlja2VkIiwiYmFja2dyb3VuZCIsImZlZWRCYWNrVGV4dENhbmF2c0VsZW1lbnQiLCJmZWVkYmFja1RleHRFZmZlY3RzIiwiaXNHYW1lU3RhcnRlZCIsInN0YXJ0VGltZSIsInB1enpsZVRpbWUiLCJpc0Rpc3Bvc2luZyIsInJlc2V0QW5pbWF0aW9uSUQiLCJ0cmFpbFBhcnRpY2xlcyIsImNsaWNrVHJhaWxUb2dnbGUiLCJoYXNGZWQiLCJ3b3JkUHV6emxlTG9naWMiLCJyaXZlTW9uc3RlckVsZW1lbnQiLCJ3aWxsUmVhZEZyZXF1ZW50bHkiLCJzdGFydEdhbWVUaW1lIiwic3RhcnRQdXp6bGVUaW1lIiwibG9hZFB1enpsZSIsInJlc3VtZUdhbWUiLCJwcm9maWxlTW9uc3RlciIsInByZXZpb3VzUGxheWVkTGV2ZWwiLCJhZGRFdmVudExpc3RlbmVycyIsInNldHVwQmciLCJnZXRSYW5kb21GZWVkQmFja1RleHQiLCJyYW5kb21JbmRleCIsInNlbGVjdGVkS2V5IiwiZGVmaW5lZFZhbHVlc01heENvdW50IiwiaGFuZGxlTW91c2VVcCIsImxldHRlclB1enpsZSIsIndvcmRQdXp6bGUiLCJzZXRQaWNrZWRVcCIsImhhbmRsZU1vdXNlTW92ZSIsInRyYWlsWCIsInRyYWlsWSIsIm5ld1N0b25lQ29vcmRpbmF0ZXMiLCJuZXdTdG9uZUxldHRlciIsInBhdXNlR2FtZVBsYXkiLCJoYW5kbGVUb3VjaFN0YXJ0IiwidG91Y2giLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsImhhbmRsZVN0b25lTGV0dGVyRHJhd2luZyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwidGltZXJFbmRlZCIsImxvZ1B1enpsZUVuZEZpcmViYXNlRXZlbnQiLCJsb2dMZXZlbEVuZEZpcmViYXNlRXZlbnQiLCJsb2FkUHV6emxlRXZlbnQiLCJDdXN0b21FdmVudCIsImluaXROZXdQdXp6bGUiLCJjaGVja1N0b25lRHJvcHBlZCIsImhhbmRsZUNvcnJlY3RTdG9uZURyb3AiLCJoYW5kbGVTdG9uZURyb3BFbmQiLCJkcm9wcGVkU3RvbmVJbnN0YW5jZSIsInJlc2V0VG9JZGxlQW5pbWF0aW9uIiwicHV6emxlVHlwZSIsImRpc3BhdGNoU3RvbmVEcm9wRXZlbnQiLCJmZWVkYmFja0luZGV4IiwiZHJvcFN0b25lRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZW5kVGltZSIsInB1enpsZUNvbXBsZXRlZERhdGEiLCJzdWNjZXNzX29yX2ZhaWx1cmUiLCJsZXZlbF9udW1iZXIiLCJwdXp6bGVfbnVtYmVyIiwiaXRlbV9zZWxlY3RlZCIsImZvaWxzIiwicmVzcG9uc2VfdGltZSIsImxldmVsQ29tcGxldGVkRGF0YSIsIm51bWJlcl9vZl9zdWNjZXNzZnVsX3B1enpsZXMiLCJ4RG93biIsInlEb3duIiwicHJldmlvdXNQbGF5ZWRMZXZlbE51bWJlciIsImxldmVsc1NlY3Rpb25Db3VudCIsInJpZ2h0QnRuU2l6ZSIsInJpZ2h0QnRuWCIsInJpZ2h0QnRuWSIsImxlZnRCdG5TaXplIiwibGVmdEJ0blgiLCJsZWZ0QnRuWSIsImxldmVsQnV0dG9ucyIsImNyZWF0ZUxldmVsQnV0dG9ucyIsIm5leHRidG4iLCJiYWNrYnRuIiwiYWRkTGlzdGVuZXJzIiwibGV2ZWxzQXJyIiwiY29vcmRpbmF0ZXMiLCJidG5Db29yZGluYXRlcyIsInBhdXNlUGxheUF1ZGlvcyIsImdldFRvdWNoZXMiLCJldnQiLCJvcmlnaW5hbEV2ZW50IiwiZmlyc3RUb3VjaCIsInhVcCIsInlVcCIsInhEaWZmIiwieURpZmYiLCJkb3duQnV0dG9uIiwiaXNXaXRoaW5CdXR0b25BcmVhIiwiYnRuWCIsImJ0blkiLCJpc1JpZ2h0IiwiaXNMZWZ0IiwiYnRuIiwic3RhcnRHYW1lIiwiZHJhd0xldmVsIiwibGV2ZWxCdG4iLCJjdXJyZW50TGV2ZWxJbmRleCIsImN1cnJlbnRMZXZlbCIsImNoZWNrVW5sb2NrZWRMZXZlbCIsImxldmVsIiwibG9nU2VsZWN0ZWRMZXZlbEV2ZW50Iiwic2VsZWN0ZWRMZXZlbHREYXRhIiwibGV2ZWxfc2VsZWN0ZWQiLCJuZXh0QnV0dG9uIiwic3dpdGNoVG9HYW1lcGxheUNCIiwic3dpdGNoVG9MZXZlbFNlbGVjdGlvbkNCIiwidGltZW91dHMiLCJzdGFyRHJhd25Db3VudCIsImlzTGFzdExldmVsIiwic3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbiIsInN0YXIxSW1nIiwic3RhcjJJbWciLCJzdGFyM0ltZyIsIndpbkJhY2tncm91bmRJbWciLCJzdGFyQW5pbWF0aW9uIiwiZHJhd1N0YXJzIiwicGF1c2VBdWRpb3MiLCJjbG91ZFhQb3NpdGlvbiIsInN0b3BDbG91ZE1vdmluZyIsImNsb3VkTW92aW5nVGltZU91dCIsImNsb3VkNiIsImNsb3VkNyIsImNsb3VkOCIsInB3YV9zdGF0dXMiLCJmaXJlYmFzZV9hbmFseXRpY3MiLCJidXR0b25Db250ZXh0IiwicGxheUJ1dHRvbiIsInB3YV9pbnN0YWxsX3N0YXR1cyIsImNyZWF0ZVBsYXlCdXR0b24iLCJoYW5kbGVySW5zdGFsbFByb21wdCIsImdlbmVyYXRlR2FtZVRpdGxlIiwiZmJxIiwiVGVzdEdhbWVwbGF5U2NlbmUiLCJsZXZlbEluZGljYXRvciIsIm91dGNvbWUiLCJ0aW1lT3ZlckNhbGxiYWNrIiwibW91c2VFdmVudCIsIkFOQUxZVElDU19UWVBFIiwiR0FfRklEX0tFWSIsIk9SSUdJTl9LRVkiLCJGRVRDSF9USU1FT1VUX01JTExJUyIsIkRZTkFNSUNfQ09ORklHX1VSTCIsIkdUQUdfVVJMIiwibG9nZ2VyIiwiTG9nZ2VyIiwiRVJST1JTIiwiRVJST1JfRkFDVE9SWSIsImNyZWF0ZUd0YWdUcnVzdGVkVHlwZXNTY3JpcHRVUkwiLCJndGFnVVJMIiwicHJvbWlzZUFsbFNldHRsZWQiLCJwcm9taXNlcyIsImluc2VydFNjcmlwdFRhZyIsImRhdGFMYXllck5hbWUiLCJ0cnVzdGVkVHlwZXNQb2xpY3kiLCJwb2xpY3lOYW1lIiwicG9saWN5T3B0aW9ucyIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSIsImNyZWF0ZVNjcmlwdFVSTCIsInNjcmlwdCIsImd0YWdTY3JpcHRVUkwiLCJoZWFkIiwid3JhcEd0YWciLCJndGFnQ29yZSIsImluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAiLCJkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0IiwibWVhc3VyZW1lbnRJZFRvQXBwSWQiLCJjb21tYW5kIiwiZ3RhZ1BhcmFtcyIsImluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IiLCJnYVNlbmRUb0xpc3QiLCJkeW5hbWljQ29uZmlnUmVzdWx0cyIsInNlbmRUb0lkIiwiZm91bmRDb25maWciLCJpbml0aWFsaXphdGlvblByb21pc2UiLCJndGFnT25FdmVudCIsImNvcnJlc3BvbmRpbmdBcHBJZCIsImd0YWdPbkNvbmZpZyIsImZpZWxkTmFtZSIsImN1c3RvbVBhcmFtcyIsIkxPTkdfUkVUUllfRkFDVE9SIiwiZGVmYXVsdFJldHJ5RGF0YSIsInRocm90dGxlTWV0YWRhdGEiLCJnZXRUaHJvdHRsZU1ldGFkYXRhIiwic2V0VGhyb3R0bGVNZXRhZGF0YSIsIm1ldGFkYXRhIiwiZGVsZXRlVGhyb3R0bGVNZXRhZGF0YSIsImdldEhlYWRlcnMiLCJIZWFkZXJzIiwiQWNjZXB0IiwiZmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5IiwiYXBwIiwicmV0cnlEYXRhIiwidGltZW91dE1pbGxpcyIsIm9wdGlvbnMiLCJ0aHJvdHRsZUVuZFRpbWVNaWxsaXMiLCJzaWduYWwiLCJBbmFseXRpY3NBYm9ydFNpZ25hbCIsImF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkiLCJhcHBGaWVsZHMiLCJiYWNrb2ZmTWlsbGlzIiwic2V0QWJvcnRhYmxlVGltZW91dCIsImFwcFVybCIsImVycm9yTWVzc2FnZSIsImpzb25SZXNwb25zZSIsIl9pZ25vcmVkIiwiaHR0cFN0YXR1cyIsInJlc3BvbnNlTWVzc2FnZSIsImZldGNoRHluYW1pY0NvbmZpZyIsImlzUmV0cmlhYmxlRXJyb3IiLCJkZWJ1ZyIsImRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0IiwiZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQiLCJfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0IiwiY29uc2VudFNldHRpbmdzIiwiX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0IiwiX2luaXRpYWxpemVBbmFseXRpY3MiLCJpbnN0YWxsYXRpb25zIiwiZHluYW1pY0NvbmZpZ1Byb21pc2UiLCJmaWRQcm9taXNlIiwiZXJyb3JJbmZvIiwidmFsaWRhdGVJbmRleGVkREIiLCJlbnZJc1ZhbGlkIiwiZ2V0SWQiLCJkeW5hbWljQ29uZmlnIiwiZmlkIiwic2NyaXB0VGFncyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnIiwiZmluZEd0YWdTY3JpcHRPblBhZ2UiLCJjb25maWdQcm9wZXJ0aWVzIiwiQW5hbHl0aWNzU2VydmljZSIsIl9kZWxldGUiLCJndGFnQ29yZUZ1bmN0aW9uIiwid3JhcHBlZEd0YWdGdW5jdGlvbiIsImd0YWdOYW1lIiwiZ2xvYmFsSW5pdERvbmUiLCJzZXR0aW5ncyIsIm1pc21hdGNoZWRFbnZNZXNzYWdlcyIsImRldGFpbHMiLCJ3YXJuT25Ccm93c2VyQ29udGV4dE1pc21hdGNoIiwiZGF0YUxheWVyIiwiZ2V0T3JDcmVhdGVEYXRhTGF5ZXIiLCJ3cmFwcGVkR3RhZyIsImd0YWdGdW5jdGlvbk5hbWUiLCJfYXJncyIsIndyYXBPckNyZWF0ZUd0YWciLCJnZXRBcHAiLCJhbmFseXRpY3NQcm92aWRlciIsIl9nZXRQcm92aWRlciIsImlzSW5pdGlhbGl6ZWQiLCJnZXRJbW1lZGlhdGUiLCJpbml0aWFsaXplQW5hbHl0aWNzIiwiZXhpc3RpbmdJbnN0YW5jZSIsImdldE9wdGlvbnMiLCJpc1N1cHBvcnRlZCIsInNldEN1cnJlbnRTY3JlZW4iLCJhbmFseXRpY3NJbnN0YW5jZSIsInNjcmVlbk5hbWUiLCJndGFnRnVuY3Rpb24iLCJnbG9iYWwiLCJzZXRDdXJyZW50U2NyZWVuJDEiLCJnZXRHb29nbGVBbmFseXRpY3NDbGllbnRJZCIsImNsaWVudElkIiwiaW50ZXJuYWxHZXRHb29nbGVBbmFseXRpY3NDbGllbnRJZCIsInNldFVzZXJJZCIsInNldFVzZXJJZCQxIiwic2V0VXNlclByb3BlcnRpZXMiLCJwcm9wZXJ0aWVzIiwiZmxhdFByb3BlcnRpZXMiLCJzZXRVc2VyUHJvcGVydGllcyQxIiwic2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQiLCJlbmFibGVkIiwic2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQkMSIsInNldERlZmF1bHRFdmVudFBhcmFtZXRlcnMiLCJldmVudFBhcmFtcyIsImxvZ0V2ZW50JDEiLCJzZXRDb25zZW50IiwiX3JlZ2lzdGVyQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiY29udGFpbmVyIiwiYW5hbHl0aWNzT3B0aW9ucyIsImdldFByb3ZpZGVyIiwicmVhc29uIiwicmVnaXN0ZXJWZXJzaW9uIiwiUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbCIsImdldFBsYXRmb3JtSW5mb1N0cmluZyIsImdldFByb3ZpZGVycyIsInByb3ZpZGVyIiwiY29tcG9uZW50IiwiZ2V0Q29tcG9uZW50IiwiaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyIiwibGlicmFyeSIsImxvZ1N0cmluZyIsIm5hbWUkbyIsInZlcnNpb24kMSIsIm5hbWUkbiIsIm5hbWUkbSIsIm5hbWUkbCIsIm5hbWUkayIsIm5hbWUkaiIsIm5hbWUkaSIsIm5hbWUkaCIsIm5hbWUkZyIsIm5hbWUkZiIsIm5hbWUkZSIsIm5hbWUkZCIsIm5hbWUkYyIsIm5hbWUkYiIsIm5hbWUkYSIsIm5hbWUkOSIsIm5hbWUkOCIsIm5hbWUkNyIsIm5hbWUkNiIsIm5hbWUkNSIsIm5hbWUkNCIsIm5hbWUkMyIsIm5hbWUkMiIsIm5hbWUkMSIsIkRFRkFVTFRfRU5UUllfTkFNRSIsIlBMQVRGT1JNX0xPR19TVFJJTkciLCJfYXBwcyIsIl9jb21wb25lbnRzIiwiX2FkZENvbXBvbmVudCIsImFkZENvbXBvbmVudCIsIl9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsImFkZE9yT3ZlcndyaXRlQ29tcG9uZW50IiwiY29tcG9uZW50TmFtZSIsImhlYXJ0YmVhdENvbnRyb2xsZXIiLCJ0cmlnZ2VySGVhcnRiZWF0IiwiX3JlbW92ZVNlcnZpY2VJbnN0YW5jZSIsImluc3RhbmNlSWRlbnRpZmllciIsImNsZWFySW5zdGFuY2UiLCJfY2xlYXJDb21wb25lbnRzIiwiRmlyZWJhc2VBcHBJbXBsIiwiX2lzRGVsZXRlZCIsIl9vcHRpb25zIiwiX2NvbmZpZyIsIl9uYW1lIiwiX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIl9jb250YWluZXIiLCJjaGVja0Rlc3Ryb3llZCIsInZhbCIsImFwcE5hbWUiLCJyYXdDb25maWciLCJleGlzdGluZ0FwcCIsIkNvbXBvbmVudENvbnRhaW5lciIsIm5ld0FwcCIsImdldEFwcHMiLCJmcm9tIiwiZGVsZXRlQXBwIiwibGlicmFyeUtleU9yTmFtZSIsInZhcmlhbnQiLCJsaWJyYXJ5TWlzbWF0Y2giLCJ2ZXJzaW9uTWlzbWF0Y2giLCJ3YXJuaW5nIiwib25Mb2ciLCJsb2dDYWxsYmFjayIsInNldFVzZXJMb2dIYW5kbGVyIiwic2V0TG9nTGV2ZWwiLCJsb2dMZXZlbCIsIkRCX05BTUUiLCJEQl9WRVJTSU9OIiwiU1RPUkVfTkFNRSIsImRiUHJvbWlzZSIsImdldERiUHJvbWlzZSIsIm9wZW5EQiIsInVwZ3JhZGUiLCJvbGRWZXJzaW9uIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJvcmlnaW5hbEVycm9yTWVzc2FnZSIsIndyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCIiwiaGVhcnRiZWF0T2JqZWN0IiwidHgiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwicHV0IiwiY29tcHV0ZUtleSIsImlkYkdldEVycm9yIiwiSGVhcnRiZWF0U2VydmljZUltcGwiLCJfaGVhcnRiZWF0c0NhY2hlIiwiX3N0b3JhZ2UiLCJIZWFydGJlYXRTdG9yYWdlSW1wbCIsIl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlIiwiYWdlbnQiLCJkYXRlIiwiZ2V0VVRDRGF0ZVN0cmluZyIsImxhc3RTZW50SGVhcnRiZWF0RGF0ZSIsImhlYXJ0YmVhdHMiLCJzb21lIiwic2luZ2xlRGF0ZUhlYXJ0YmVhdCIsImhiVGltZXN0YW1wIiwidmFsdWVPZiIsIm92ZXJ3cml0ZSIsImdldEhlYXJ0YmVhdHNIZWFkZXIiLCJoZWFydGJlYXRzVG9TZW5kIiwidW5zZW50RW50cmllcyIsImhlYXJ0YmVhdHNDYWNoZSIsIm1heFNpemUiLCJoZWFydGJlYXRFbnRyeSIsImRhdGVzIiwiY291bnRCeXRlcyIsImV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyIiwiaGVhZGVyU3RyaW5nIiwidG9JU09TdHJpbmciLCJfY2FuVXNlSW5kZXhlZERCUHJvbWlzZSIsInJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2siLCJyZWFkSGVhcnRiZWF0c0Zyb21JbmRleGVkREIiLCJoZWFydGJlYXRzT2JqZWN0IiwiZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0IiwiaW5zdGFuY2VGYWN0b3J5IiwibXVsdGlwbGVJbnN0YW5jZXMiLCJzZXJ2aWNlUHJvcHMiLCJpbnN0YW50aWF0aW9uTW9kZSIsIm9uSW5zdGFuY2VDcmVhdGVkIiwic2V0SW5zdGFudGlhdGlvbk1vZGUiLCJzZXRNdWx0aXBsZUluc3RhbmNlcyIsInNldFNlcnZpY2VQcm9wcyIsInNldEluc3RhbmNlQ3JlYXRlZENhbGxiYWNrIiwiUHJvdmlkZXIiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZXNEZWZlcnJlZCIsImluc3RhbmNlc09wdGlvbnMiLCJvbkluaXRDYWxsYmFja3MiLCJpZGVudGlmaWVyIiwibm9ybWFsaXplZElkZW50aWZpZXIiLCJub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIiLCJkZWZlcnJlZCIsInNob3VsZEF1dG9Jbml0aWFsaXplIiwiZ2V0T3JJbml0aWFsaXplU2VydmljZSIsInNldENvbXBvbmVudCIsImlzQ29tcG9uZW50RWFnZXIiLCJpbnN0YW5jZURlZmVycmVkIiwic2VydmljZXMiLCJJTlRFUk5BTCIsImlzQ29tcG9uZW50U2V0Iiwib3B0cyIsIm9uSW5pdCIsImV4aXN0aW5nQ2FsbGJhY2tzIiwiaW52b2tlT25Jbml0Q2FsbGJhY2tzIiwiY2FsbGJhY2tzIiwicHJvdmlkZXJzIiwiUEVORElOR19USU1FT1VUX01TIiwiUEFDS0FHRV9WRVJTSU9OIiwiSU5URVJOQUxfQVVUSF9WRVJTSU9OIiwiSU5TVEFMTEFUSU9OU19BUElfVVJMIiwiVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIiLCJFUlJPUl9ERVNDUklQVElPTl9NQVAiLCJpc1NlcnZlckVycm9yIiwiZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50IiwiZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UiLCJyZXF1ZXN0U3RhdHVzIiwiZXhwaXJlc0luIiwicmVzcG9uc2VFeHBpcmVzSW4iLCJjcmVhdGlvblRpbWUiLCJnZXRFcnJvckZyb21SZXNwb25zZSIsInJlcXVlc3ROYW1lIiwiZXJyb3JEYXRhIiwic2VydmVyQ29kZSIsInNlcnZlck1lc3NhZ2UiLCJzZXJ2ZXJTdGF0dXMiLCJnZXRIZWFkZXJzV2l0aEF1dGgiLCJhcHBDb25maWciLCJyZWZyZXNoVG9rZW4iLCJhcHBlbmQiLCJnZXRBdXRob3JpemF0aW9uSGVhZGVyIiwicmV0cnlJZlNlcnZlckVycm9yIiwic2xlZXAiLCJtcyIsIlZBTElEX0ZJRF9QQVRURVJOIiwiSU5WQUxJRF9GSUQiLCJnZW5lcmF0ZUZpZCIsImZpZEJ5dGVBcnJheSIsIm1zQ3J5cHRvIiwiYjY0U3RyaW5nIiwiYXJyYXkiLCJlbmNvZGUiLCJnZXRLZXkiLCJmaWRDaGFuZ2VDYWxsYmFja3MiLCJmaWRDaGFuZ2VkIiwiY2FsbEZpZENoYW5nZUNhbGxiYWNrcyIsImNoYW5uZWwiLCJnZXRCcm9hZGNhc3RDaGFubmVsIiwicG9zdE1lc3NhZ2UiLCJjbG9zZUJyb2FkY2FzdENoYW5uZWwiLCJicm9hZGNhc3RGaWRDaGFuZ2UiLCJicm9hZGNhc3RDaGFubmVsIiwiQnJvYWRjYXN0Q2hhbm5lbCIsIm9ubWVzc2FnZSIsIkRBVEFCQVNFX05BTUUiLCJEQVRBQkFTRV9WRVJTSU9OIiwiT0JKRUNUX1NUT1JFX05BTUUiLCJvbGRWYWx1ZSIsInVwZGF0ZUZuIiwic3RvcmUiLCJuZXdWYWx1ZSIsImdldEluc3RhbGxhdGlvbkVudHJ5IiwicmVnaXN0cmF0aW9uUHJvbWlzZSIsImluc3RhbGxhdGlvbkVudHJ5Iiwib2xkRW50cnkiLCJyZWdpc3RyYXRpb25TdGF0dXMiLCJjbGVhclRpbWVkT3V0UmVxdWVzdCIsInVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkiLCJlbnRyeVdpdGhQcm9taXNlIiwiaW5Qcm9ncmVzc0VudHJ5IiwicmVnaXN0cmF0aW9uVGltZSIsInJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeSIsImhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlciIsImVuZHBvaW50IiwiaGVhcnRiZWF0U2VydmljZSIsImhlYXJ0YmVhdHNIZWFkZXIiLCJhdXRoVmVyc2lvbiIsInNka1ZlcnNpb24iLCJyZXNwb25zZVZhbHVlIiwiYXV0aFRva2VuIiwiY3JlYXRlSW5zdGFsbGF0aW9uUmVxdWVzdCIsInJlZ2lzdGVySW5zdGFsbGF0aW9uIiwid2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uIiwidHJpZ2dlclJlZ2lzdHJhdGlvbklmTmVjZXNzYXJ5IiwidXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdCIsImdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdCIsImdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQiLCJpbnN0YWxsYXRpb24iLCJyZWZyZXNoQXV0aFRva2VuIiwiZm9yY2VSZWZyZXNoIiwidG9rZW5Qcm9taXNlIiwiaXNFbnRyeVJlZ2lzdGVyZWQiLCJvbGRBdXRoVG9rZW4iLCJpc0F1dGhUb2tlbkV4cGlyZWQiLCJpc0F1dGhUb2tlblZhbGlkIiwidXBkYXRlQXV0aFRva2VuUmVxdWVzdCIsIndhaXRVbnRpbEF1dGhUb2tlblJlcXVlc3QiLCJpblByb2dyZXNzQXV0aFRva2VuIiwicmVxdWVzdFRpbWUiLCJtYWtlQXV0aFRva2VuUmVxdWVzdEluUHJvZ3Jlc3NFbnRyeSIsInVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSIsImZldGNoQXV0aFRva2VuRnJvbVNlcnZlciIsImluc3RhbGxhdGlvbnNJbXBsIiwiZ2V0VG9rZW4iLCJjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbiIsImRlbGV0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJnZXREZWxldGVFbmRwb2ludCIsImRlbGV0ZUluc3RhbGxhdGlvbnMiLCJvbklkQ2hhbmdlIiwiY2FsbGJhY2tTZXQiLCJhZGRDYWxsYmFjayIsInJlbW92ZUNhbGxiYWNrIiwiZ2V0SW5zdGFsbGF0aW9ucyIsImdldE1pc3NpbmdWYWx1ZUVycm9yIiwidmFsdWVOYW1lIiwiSU5TVEFMTEFUSU9OU19OQU1FIiwicHVibGljRmFjdG9yeSIsImNvbmZpZ0tleXMiLCJrZXlOYW1lIiwiZXh0cmFjdEFwcENvbmZpZyIsImludGVybmFsRmFjdG9yeSIsImJsb2NrZWQiLCJibG9ja2luZyIsInRlcm1pbmF0ZWQiLCJvcGVuUHJvbWlzZSIsIm5ld1ZlcnNpb24iLCJkZWxldGVEQiIsInJlYWRNZXRob2RzIiwid3JpdGVNZXRob2RzIiwiY2FjaGVkTWV0aG9kcyIsImdldE1ldGhvZCIsIklEQkRhdGFiYXNlIiwidGFyZ2V0RnVuY05hbWUiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJJREJJbmRleCIsIklEQk9iamVjdFN0b3JlIiwic3RvcmVOYW1lIiwib2xkVHJhcHMiLCJyZWNlaXZlciIsImluc3RhbmNlT2ZBbnkiLCJjb25zdHJ1Y3RvcnMiLCJpZGJQcm94eWFibGVUeXBlcyIsImN1cnNvckFkdmFuY2VNZXRob2RzIiwiY3Vyc29yUmVxdWVzdE1hcCIsIldlYWtNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJ3cmFwIiwicmVwbGFjZVRyYXBzIiwid3JhcEZ1bmN0aW9uIiwiZnVuYyIsIklEQkN1cnNvciIsImNvbnRpbnVlIiwiY29udGludWVQcmltYXJ5S2V5IiwidW53cmFwIiwic3RvcmVOYW1lcyIsInRyYW5zZm9ybUNhY2hhYmxlVmFsdWUiLCJ1bmxpc3RlbiIsIkRPTUV4Y2VwdGlvbiIsImNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbiIsIklEQlJlcXVlc3QiLCJzdWNjZXNzIiwicHJvbWlzaWZ5UmVxdWVzdCIsIkxvZ0xldmVsIiwibGV2ZWxTdHJpbmdUb0VudW0iLCJERUJVRyIsIlZFUkJPU0UiLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZGVmYXVsdExvZ0xldmVsIiwiQ29uc29sZU1ldGhvZCIsImRlZmF1bHRMb2dIYW5kbGVyIiwibG9nVHlwZSIsIl9sb2dMZXZlbCIsIl9sb2dIYW5kbGVyIiwiX3VzZXJMb2dIYW5kbGVyIiwibG9nSGFuZGxlciIsInVzZXJMb2dIYW5kbGVyIiwiaW5zdCIsImN1c3RvbUxvZ0xldmVsIiwiYXJnIiwiaWdub3JlZCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsIndyaXRhYmxlIiwiUmVmZXJlbmNlRXJyb3IiLCJpbW1lZGlhdGUiLCJzZXJ2aWNlV29ya2VyIiwiY29udHJvbGxlciIsIndhaXRpbmciLCJzY3JpcHRVUkwiLCJzdyIsIndhc1dhaXRpbmdCZWZvcmVSZWdpc3RlciIsImdldFNXIiwibWVzc2FnZVNXIiwibWV0YSIsImluc3RhbGxpbmciLCJpc1VwZGF0ZSIsIl9fd2VicGFja19yZXF1aXJlX18iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiRnVuY3Rpb24iLCJ2ZXJzaW9uSW5mb0VsZW1lbnQiLCJpc19jYWNoZWQiLCJwcm9ncmVzc0JhciIsInByb2dyZXNzQmFyQ29udGFpbmVyIiwic2NlbmVIYW5kbGVyIiwibG9hZGluZ0VsZW1lbnQiLCJkYXRhTW9kYWwiLCJzdGFydFNlc3Npb25UaW1lIiwiZmVlZEJhY2tUZXh0RWxlbWVudCIsImluaXRpYWxpemVDYWNoZWREYXRhIiwiaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UiLCJoYW5kbGVCZWZvcmVVbmxvYWQiLCJoYW5kbGVSZXNpemUiLCJsb2FkQW5kQ2FjaGVGb250IiwibG9hZFRpdGxlRmVlZGJhY2tDdXN0b21Gb250IiwicHJlbG9hZEdhbWVBdWRpb3MiLCJoYW5kbGVMb2FkaW5nU2NyZWVuIiwic2V0dXBDYW52YXMiLCJjcmVhdGVEYXRhTW9kYWwiLCJnbG9iYWxJbml0aWFsaXphdGlvbiIsImxvZ1Nlc3Npb25TdGFydEZpcmViYXNlRXZlbnQiLCJwbGF5ZWRJbmZvIiwibmV4dFBsYXlhYmxlTGV2ZWwiLCJzdG9yYWdlS2V5IiwiaGFuZGxlQ2FjaGVkU2NlbmFyaW8iLCJyZWdpc3Rlcldvcmtib3giLCJjdXN0b21UaXRsZUZlZWRiYWNrRm9udCIsImZvbnRGYW1pbHkiLCJsYXN0U2Vzc2lvbkVuZFRpbWUiLCJwYXJzZWRUaW1lc3RhbXAiLCJyb3VuZGVkRGF5c1NpbmNlTGFzdCIsInBhcnNlRmxvYXQiLCJzZXNzaW9uU3RhcnREYXRhIiwiZGF5c19zaW5jZV9sYXN0IiwibG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQiLCJzZXNzaW9uRW5kRGF0YSIsInN0b3JlZERhdGEiLCJmb250TmFtZSIsImZvbnRQYXRoIiwiY2FjaGUiLCJjYWNoZXMiLCJmb250UmVzcG9uc2UiLCJmb250QmxvYiIsImJsb2IiLCJSZXNwb25zZSIsIkZvbnRGYWNlIiwiZm9udHMiLCJXb3JrYm94IiwibmV3Q29udGVudEZpbGVEYXRhIiwiYWhlYWRDb250ZW50VmVyc2lvbiIsImNhY2hlZFZlcnNpb24iLCJjYWNoZWRJdGVtIiwibmV3Q2FjaGVkSXRlbSIsInJlbW92ZUl0ZW0iLCJoYW5kbGVVcGRhdGVGb3VuZE1lc3NhZ2UiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJSaWdodFRvTGVmdCIsImFib3V0Q29tcGFueSIsImRlc2NyaXB0aW9uVGV4dCIsInVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudCIsInJlaW5pdGlhbGl6ZVNjZW5lSGFuZGxlciIsInBhc3NpbmdEYXRhVG9Db250YWluZXIiLCJBbmRyb2lkIiwiY2FjaGVkU3RhdHVzIiwic2V0Q29udGFpbmVyQXBwT3JpZW50YXRpb24iLCJjb25maXJtIiwicmVsb2FkIiwiaGFuZGxlTG9hZGluZ01lc3NhZ2UiLCJzaG93UHJvZ3Jlc3NCYXIiLCJwcm9ncmVzc1ZhbHVlIiwiaXNEb3dubG9hZENvbXBsZXRlZCIsImNhY2hlTGFuZ3VhZ2UiLCJzZW5kQ29tcGxldGlvbkV2ZW50IiwiaGlkZUxvYWRpbmdTY3JlZW4iLCJkb3dubG9hZENvbXBsZXRlZCIsImdldEpzb25WZXJzaW9uTnVtYmVyIiwiYXVkaW9VcmxzIiwicHJlbG9hZFByb21pc2VzIl0sInNvdXJjZVJvb3QiOiIifQ==