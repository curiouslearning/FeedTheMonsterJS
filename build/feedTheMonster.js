/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var t={"./node_modules/@firebase/util/dist/index.esm2017.js":(t,e,i)=>{i.r(e),i.d(e,{CONSTANTS:()=>s,DecodeBase64StringError:()=>h,Deferred:()=>S,ErrorFactory:()=>N,FirebaseError:()=>M,MAX_VALUE_MILLIS:()=>vt,RANDOM_FACTOR:()=>bt,Sha1:()=>it,areCookiesEnabled:()=>O,assert:()=>n,assertionError:()=>a,async:()=>at,base64:()=>r,base64Decode:()=>d,base64Encode:()=>l,base64urlEncodeWithoutPadding:()=>c,calculateBackoffMillis:()=>wt,contains:()=>X,createMockUserToken:()=>I,createSubscribe:()=>st,decode:()=>j,deepCopy:()=>u,deepEqual:()=>q,deepExtend:()=>m,errorPrefix:()=>ht,extractQuerystring:()=>et,getDefaultAppConfig:()=>b,getDefaultEmulatorHost:()=>f,getDefaultEmulatorHostnameAndPort:()=>v,getDefaults:()=>p,getExperimentalSetting:()=>w,getGlobal:()=>g,getModularInstance:()=>It,getUA:()=>y,isAdmin:()=>Y,isBrowser:()=>x,isBrowserExtension:()=>T,isElectron:()=>L,isEmpty:()=>$,isIE:()=>C,isIndexedDBAvailable:()=>k,isMobileCordova:()=>_,isNode:()=>E,isNodeSdk:()=>D,isReactNative:()=>A,isSafari:()=>B,isUWP:()=>P,isValidFormat:()=>V,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>R,map:()=>K,ordinal:()=>St,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>tt,safeGet:()=>W,stringLength:()=>mt,stringToByteArray:()=>ut,stringify:()=>F,uuidv4:()=>gt,validateArgCount:()=>rt,validateCallback:()=>ct,validateContextObject:()=>dt,validateIndexedDBOpenable:()=>z,validateNamespace:()=>lt});const s={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},n=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+s.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},o=function(t){const e=[];let i=0;for(let s=0;s<t.length;s++){let n=t.charCodeAt(s);n<128?e[i++]=n:n<2048?(e[i++]=n>>6|192,e[i++]=63&n|128):55296==(64512&n)&&s+1<t.length&&56320==(64512&t.charCodeAt(s+1))?(n=65536+((1023&n)<<10)+(1023&t.charCodeAt(++s)),e[i++]=n>>18|240,e[i++]=n>>12&63|128,e[i++]=n>>6&63|128,e[i++]=63&n|128):(e[i++]=n>>12|224,e[i++]=n>>6&63|128,e[i++]=63&n|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const i=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let e=0;e<t.length;e+=3){const n=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,h=r?t[e+2]:0,l=n>>2,c=(3&n)<<4|o>>4;let d=(15&o)<<2|h>>6,u=63&h;r||(u=64,a||(d=64)),s.push(i[l],i[c],i[d],i[u])}return s.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(o(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let i=0,s=0;for(;i<t.length;){const n=t[i++];if(n<128)e[s++]=String.fromCharCode(n);else if(n>191&&n<224){const a=t[i++];e[s++]=String.fromCharCode((31&n)<<6|63&a)}else if(n>239&&n<365){const a=((7&n)<<18|(63&t[i++])<<12|(63&t[i++])<<6|63&t[i++])-65536;e[s++]=String.fromCharCode(55296+(a>>10)),e[s++]=String.fromCharCode(56320+(1023&a))}else{const a=t[i++],o=t[i++];e[s++]=String.fromCharCode((15&n)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const i=e?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let e=0;e<t.length;){const n=i[t.charAt(e++)],a=e<t.length?i[t.charAt(e)]:0;++e;const o=e<t.length?i[t.charAt(e)]:64;++e;const r=e<t.length?i[t.charAt(e)]:64;if(++e,null==n||null==a||null==o||null==r)throw new h;const l=n<<2|a>>4;if(s.push(l),64!==o){const t=a<<4&240|o>>2;if(s.push(t),64!==r){const t=o<<6&192|r;s.push(t)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class h extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const l=function(t){const e=o(t);return r.encodeByteArray(e,!0)},c=function(t){return l(t).replace(/\./g,"")},d=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function u(t){return m(void 0,t)}function m(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(const i in e)e.hasOwnProperty(i)&&"__proto__"!==i&&(t[i]=m(t[i],e[i]));return t}function g(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw new Error("Unable to locate global object.")}const p=()=>{try{return g().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&d(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},f=t=>{var e,i;return null===(i=null===(e=p())||void 0===e?void 0:e.emulatorHosts)||void 0===i?void 0:i[t]},v=t=>{const e=f(t);if(!e)return;const i=e.lastIndexOf(":");if(i<=0||i+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const s=parseInt(e.substring(i+1),10);return"["===e[0]?[e.substring(1,i-1),s]:[e.substring(0,i),s]},b=()=>{var t;return null===(t=p())||void 0===t?void 0:t.config},w=t=>{var e;return null===(e=p())||void 0===e?void 0:e[`_${t}`]};class S{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,i)=>{e?this.reject(e):this.resolve(i),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,i))}}}function I(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const i=e||"demo-project",s=t.iat||0,n=t.sub||t.user_id;if(!n)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${i}`,aud:i,iat:s,exp:s+3600,auth_time:s,sub:n,user_id:n,firebase:{sign_in_provider:"custom",identities:{}}},t);return[c(JSON.stringify({alg:"none",type:"JWT"})),c(JSON.stringify(a)),""].join(".")}function y(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function _(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(y())}function E(){var t;const e=null===(t=p())||void 0===t?void 0:t.forceEnvironment;if("node"===e)return!0;if("browser"===e)return!1;try{return"[object process]"===Object.prototype.toString.call(i.g.process)}catch(t){return!1}}function x(){return"object"==typeof self&&self.self===self}function T(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function A(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function L(){return y().indexOf("Electron/")>=0}function C(){const t=y();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function P(){return y().indexOf("MSAppHost/")>=0}function D(){return!0===s.NODE_CLIENT||!0===s.NODE_ADMIN}function B(){return!E()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function k(){try{return"object"==typeof indexedDB}catch(t){return!1}}function z(){return new Promise(((t,e)=>{try{let i=!0;const s="validate-browser-context-for-indexeddb-analytics-module",n=self.indexedDB.open(s);n.onsuccess=()=>{n.result.close(),i||self.indexedDB.deleteDatabase(s),t(!0)},n.onupgradeneeded=()=>{i=!1},n.onerror=()=>{var t;e((null===(t=n.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function O(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class M extends Error{constructor(t,e,i){super(e),this.code=t,this.customData=i,this.name="FirebaseError",Object.setPrototypeOf(this,M.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,N.prototype.create)}}class N{constructor(t,e,i){this.service=t,this.serviceName=e,this.errors=i}create(t,...e){const i=e[0]||{},s=`${this.service}/${t}`,n=this.errors[t],a=n?function(t,e){return t.replace(U,((t,i)=>{const s=e[i];return null!=s?String(s):`<${i}?>`}))}(n,i):"Error",o=`${this.serviceName}: ${a} (${s}).`;return new M(s,o,i)}}const U=/\{\$([^}]+)}/g;function R(t){return JSON.parse(t)}function F(t){return JSON.stringify(t)}const j=function(t){let e={},i={},s={},n="";try{const a=t.split(".");e=R(d(a[0])||""),i=R(d(a[1])||""),n=a[2],s=i.d||{},delete i.d}catch(t){}return{header:e,claims:i,data:s,signature:n}},H=function(t){const e=j(t).claims,i=Math.floor((new Date).getTime()/1e3);let s=0,n=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?s=e.nbf:e.hasOwnProperty("iat")&&(s=e.iat),n=e.hasOwnProperty("exp")?e.exp:s+86400),!!i&&!!s&&!!n&&i>=s&&i<=n},G=function(t){const e=j(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},V=function(t){const e=j(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},Y=function(t){const e=j(t).claims;return"object"==typeof e&&!0===e.admin};function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function W(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function $(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function K(t,e,i){const s={};for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&(s[n]=e.call(i,t[n],n,t));return s}function q(t,e){if(t===e)return!0;const i=Object.keys(t),s=Object.keys(e);for(const n of i){if(!s.includes(n))return!1;const i=t[n],a=e[n];if(J(i)&&J(a)){if(!q(i,a))return!1}else if(i!==a)return!1}for(const t of s)if(!i.includes(t))return!1;return!0}function J(t){return null!==t&&"object"==typeof t}function Z(t,e=2e3){const i=new S;return setTimeout((()=>i.reject("timeout!")),e),t.then(i.resolve,i.reject),i.promise}function Q(t){const e=[];for(const[i,s]of Object.entries(t))Array.isArray(s)?s.forEach((t=>{e.push(encodeURIComponent(i)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(i)+"="+encodeURIComponent(s));return e.length?"&"+e.join("&"):""}function tt(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[i,s]=t.split("=");e[decodeURIComponent(i)]=decodeURIComponent(s)}})),e}function et(t){const e=t.indexOf("?");if(!e)return"";const i=t.indexOf("#",e);return t.substring(e,i>0?i:void 0)}class it{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(t,e){e||(e=0);const i=this.W_;if("string"==typeof t)for(let s=0;s<16;s++)i[s]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(let s=0;s<16;s++)i[s]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(let t=16;t<80;t++){const e=i[t-3]^i[t-8]^i[t-14]^i[t-16];i[t]=4294967295&(e<<1|e>>>31)}let s,n,a=this.chain_[0],o=this.chain_[1],r=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(let t=0;t<80;t++){t<40?t<20?(s=h^o&(r^h),n=1518500249):(s=o^r^h,n=1859775393):t<60?(s=o&r|h&(o|r),n=2400959708):(s=o^r^h,n=3395469782);const e=(a<<5|a>>>27)+s+l+n+i[t]&4294967295;l=h,h=r,r=4294967295&(o<<30|o>>>2),o=a,a=e}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295}update(t,e){if(null==t)return;void 0===e&&(e=t.length);const i=e-this.blockSize;let s=0;const n=this.buf_;let a=this.inbuf_;for(;s<e;){if(0===a)for(;s<=i;)this.compress_(t,s),s+=this.blockSize;if("string"==typeof t){for(;s<e;)if(n[a]=t.charCodeAt(s),++a,++s,a===this.blockSize){this.compress_(n),a=0;break}}else for(;s<e;)if(n[a]=t[s],++a,++s,a===this.blockSize){this.compress_(n),a=0;break}}this.inbuf_=a,this.total_+=e}digest(){const t=[];let e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let t=this.blockSize-1;t>=56;t--)this.buf_[t]=255&e,e/=256;this.compress_(this.buf_);let i=0;for(let e=0;e<5;e++)for(let s=24;s>=0;s-=8)t[i]=this.chain_[e]>>s&255,++i;return t}}function st(t,e){const i=new nt(t,e);return i.subscribe.bind(i)}class nt{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,i){let s;if(void 0===t&&void 0===e&&void 0===i)throw new Error("Missing Observer.");s=function(t,e){if("object"!=typeof t||null===t)return!1;for(const i of e)if(i in t&&"function"==typeof t[i])return!0;return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:i},void 0===s.next&&(s.next=ot),void 0===s.error&&(s.error=ot),void 0===s.complete&&(s.complete=ot);const n=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?s.error(this.finalError):s.complete()}catch(t){}})),this.observers.push(s),n}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function at(t,e){return(...i)=>{Promise.resolve(!0).then((()=>{t(...i)})).catch((t=>{e&&e(t)}))}}function ot(){}const rt=function(t,e,i,s){let n;if(s<e?n="at least "+e:s>i&&(n=0===i?"none":"no more than "+i),n){throw new Error(t+" failed: Was called with "+s+(1===s?" argument.":" arguments.")+" Expects "+n+".")}};function ht(t,e){return`${t} failed: ${e} argument `}function lt(t,e,i){if((!i||e)&&"string"!=typeof e)throw new Error(ht(t,"namespace")+"must be a valid firebase namespace.")}function ct(t,e,i,s){if((!s||i)&&"function"!=typeof i)throw new Error(ht(t,e)+"must be a valid function.")}function dt(t,e,i,s){if((!s||i)&&("object"!=typeof i||null===i))throw new Error(ht(t,e)+"must be a valid context object.")}const ut=function(t){const e=[];let i=0;for(let s=0;s<t.length;s++){let a=t.charCodeAt(s);if(a>=55296&&a<=56319){const e=a-55296;s++,n(s<t.length,"Surrogate pair missing trail surrogate.");a=65536+(e<<10)+(t.charCodeAt(s)-56320)}a<128?e[i++]=a:a<2048?(e[i++]=a>>6|192,e[i++]=63&a|128):a<65536?(e[i++]=a>>12|224,e[i++]=a>>6&63|128,e[i++]=63&a|128):(e[i++]=a>>18|240,e[i++]=a>>12&63|128,e[i++]=a>>6&63|128,e[i++]=63&a|128)}return e},mt=function(t){let e=0;for(let i=0;i<t.length;i++){const s=t.charCodeAt(i);s<128?e++:s<2048?e+=2:s>=55296&&s<=56319?(e+=4,i++):e+=3}return e},gt=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))},pt=1e3,ft=2,vt=144e5,bt=.5;function wt(t,e=pt,i=ft){const s=e*Math.pow(i,t),n=Math.round(bt*s*(Math.random()-.5)*2);return Math.min(vt,s+n)}function St(t){return Number.isFinite(t)?t+function(t){t=Math.abs(t);const e=t%100;if(e>=10&&e<=20)return"th";const i=t%10;if(1===i)return"st";if(2===i)return"nd";if(3===i)return"rd";return"th"}(t):`${t}`}function It(t){return t&&t._delegate?t._delegate:t}},"./src/Firebase/base-firebase-integration.ts":(t,e,i)=>{i.r(e),i.d(e,{BaseFirebaseIntegration:()=>r});var s=i("./node_modules/firebase/app/dist/esm/index.esm.js"),n=i("./node_modules/firebase/analytics/dist/esm/index.esm.js"),a=i("./src/Firebase/firebase-config.ts"),o=i("./src/common/index.ts");class r{firebaseApp;analytics;constructor(){this.initializeFirebase(),console.log(" source : ",o.source," and  campaign_id: ",o.campaign_id),null==o.source&&null==o.campaign_id||this.setUserProperty(o.source,o.campaign_id)}customEvents(t,e){try{(0,n.logEvent)(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,n.logEvent)(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}setUserProperty(t,e){try{(0,n.setUserProperties)(this.analytics,{source:t,campaign_id:e},{global:!0}),console.log("User properties set: ",{source:t,campaignId:e})}catch(t){console.error("Error while setting user properties:",t)}}initializeFirebase(){try{this.firebaseApp=(0,s.initializeApp)(a.firebaseConfig),this.analytics=(0,n.getAnalytics)(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}},"./src/Firebase/firebase-config.ts":(t,e,i)=>{i.r(e),i.d(e,{firebaseConfig:()=>s});const s={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(t,e,i)=>{i.r(e),i.d(e,{FirebaseIntegration:()=>n});var s=i("./src/Firebase/base-firebase-integration.ts");class n extends s.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return n.instance||(n.instance=new n),n.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}},"./src/common/event-names.ts":(t,e,i)=>{i.r(e),i.d(e,{CLICK:()=>d,LOADPUZZLE:()=>s,MOUSEDOWN:()=>o,MOUSEMOVE:()=>a,MOUSEUP:()=>r,STONEDROP:()=>n,TOUCHEND:()=>c,TOUCHMOVE:()=>l,TOUCHSTART:()=>h,VISIBILITY_CHANGE:()=>u});const s="loadpuzzle",n="stonesdropped",a="mousemove",o="mousedown",r="mouseup",h="touchstart",l="touchmove",c="touchend",d="click",u="visibilitychange"},"./src/common/global-variables.ts":(t,e,i)=>{i.r(e),i.d(e,{Debugger:()=>d,campaign_id:()=>h,font:()=>c,lang:()=>l,pseudoId:()=>o,source:()=>r});var s=i("./src/constants/index.ts"),n=i("./src/common/index.ts");const a=new URLSearchParams(window.location.search);var o=a.get("cr_user_id"),r=null==a.get("source")?null:a.get("source"),h=null==a.get("campaign_id")?null:a.get("campaign_id"),l=null==a.get("cr_lang")?"english":a.get("cr_lang");const c=n.Utils.getLanguageSpecificFont(l),d={DevelopmentLink:!!window.location.href.includes(s.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(t,e,i)=>{i.r(e),i.d(e,{CLICK:()=>o.CLICK,Debugger:()=>a.Debugger,LOADPUZZLE:()=>o.LOADPUZZLE,MOUSEDOWN:()=>o.MOUSEDOWN,MOUSEMOVE:()=>o.MOUSEMOVE,MOUSEUP:()=>o.MOUSEUP,STONEDROP:()=>o.STONEDROP,StoneConfig:()=>s.StoneConfig,TOUCHEND:()=>o.TOUCHEND,TOUCHMOVE:()=>o.TOUCHMOVE,TOUCHSTART:()=>o.TOUCHSTART,Utils:()=>n.Utils,VISIBILITY_CHANGE:()=>o.VISIBILITY_CHANGE,campaign_id:()=>a.campaign_id,createRippleEffect:()=>n.createRippleEffect,font:()=>a.font,hideElement:()=>n.hideElement,isClickInsideButton:()=>n.isClickInsideButton,isDocumentVisible:()=>n.isDocumentVisible,lang:()=>a.lang,loadImages:()=>n.loadImages,pseudoId:()=>a.pseudoId,source:()=>a.source,syncLoadingImages:()=>n.syncLoadingImages,toggleDebugMode:()=>n.toggleDebugMode});var s=i("./src/common/stone-config.ts"),n=i("./src/common/utils.ts"),a=i("./src/common/global-variables.ts"),o=i("./src/common/event-names.ts")},"./src/common/stone-config.ts":(t,e,i)=>{i.r(e),i.d(e,{StoneConfig:()=>n});var s=i("./src/common/index.ts");class n{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,i,s,n,a,o,r,h){this.x=n,this.y=a,this.origx=n,this.origy=a,this.canvasWidth=e,this.canvasHeight=i,this.tutorialInstance=h,this.text=s,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,i,s)=>-i/2*(Math.cos(Math.PI*t/s)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);adjustSize(t,e){return t?1.25*e:e}draw(t,e=!1){const i=this.getX()-this.adjustSize(e,this.imageCenterOffsetX),n=this.getY()-this.adjustSize(e,this.imageCenterOffsetY);this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,i,n,this.adjustSize(e,this.imageSize),this.adjustSize(e,this.imageSize)),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${s.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}},"./src/common/utils.ts":(t,e,i)=>{i.r(e),i.d(e,{Utils:()=>a,createRippleEffect:()=>o,hideElement:()=>u,isClickInsideButton:()=>l,isDocumentVisible:()=>c,loadImages:()=>r,syncLoadingImages:()=>h,toggleDebugMode:()=>d});var s=i("./src/common/index.ts"),n=i("./src/data/i18-font-mapping.ts");class a{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return s.Debugger.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in n.languageFontMapping)if(t.toLowerCase()===e)return n.languageFontMapping[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function o(t){const e=t;if(!e)throw new Error("Canvas context is null");let i=0,s=0;let n=10,a=10;return function(t,o,r){r&&(n=0,a=0),i=t,s=o,e.beginPath(),e.arc(i,s,n,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(i,s,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),n+=.5,a+=.5,(n>=60||a>=60)&&(n=10,a=10)}}function r(t,e){const i={};let s=0;const n=Object.keys(t).length;for(let a in t)i[a]=new Image,i[a].onload=function(){++s>=n&&e(i)},i[a].src=t[a]}const h=async t=>{const e=Object.keys(t).map((async e=>{const i=await(async t=>{const e=new Image;return new Promise((i=>{e.onload=()=>i(e),e.src=t}))})(t[e]);return{[e]:i}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})};function l(t,e,i,s,n,a,o=!1){if(o){return Math.sqrt((t-(i+n/2))**2+(e-(s+a/2))**2)<n/2}return t>=i&&t<=i+n&&e>=s&&e<=s+a}const c=()=>"visible"===document.visibilityState,d=t=>{t.classList.toggle("on");const e=t.classList.contains("on");s.Debugger.DebugMode=e,t.innerText="Dev"},u=(t=!1,e)=>{t?e.classList.remove("show"):e.classList.add("show")}},"./src/components/audio-player.ts":(t,e,i)=>{i.r(e),i.d(e,{AudioPlayer:()=>n});var s=i("./src/constants/index.ts");class n{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=a.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const t=s.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(t),n.audioBuffers.set(t,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(t){return void console.error("Error loading or decoding click sound:",t)}if(this.clickSoundBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.clickSoundBuffer,t.connect(this.audioContext.destination),t.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(t){return new Promise((async(e,i)=>{try{const i=await fetch(t),s=await i.arrayBuffer();e(await this.audioContext.decodeAudioData(s))}catch(t){console.error("Error loading or decoding audio:",t),i(t)}}))}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(n.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&n.audioBuffers.set(t,e)}playAudio(t){const e=n.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((i=>{this.audioContext?.decodeAudioData(i,(i=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=i,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)}}class a{static instance=null;static getAudioContext(){return a.instance||(a.instance=new(window.AudioContext||window.webkitAudioContext)),a.instance}}},"./src/components/background.ts":(t,e,i)=>{i.r(e),i.d(e,{Background:()=>o});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts"),a={bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.ASSETS_PATH_HILL,pillerImg:n.ASSETS_PATH_TOTEM,fenchImg:n.ASSETS_PATH_FENCE,autumnBgImg:n.AUTUMN_BACKGROUND_1,autumnHillImg:n.AUTUMN_HILL_1,autumnPillerImg:n.AUTUMN_PILLAR_1,autumnSignImg:n.AUTUMN_SIGN_1,autumnFenceImg:n.AUTUMN_FENCE_1,winterBgImg:n.WINTER_BACKGROUND_1,winterHillImg:n.WINTER_HILL_1,winterSignImg:n.WINTER_SIGN_1,winterFenceImg:n.WINTER_FENCE_1,winterPillerImg:n.WINTER_PILLAR_1};class o{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,e,i,n){this.width=e,this.height=i,this.context=t,this.levelNumber=n,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,s.loadImages)(a,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,(0,s.loadImages)({cancel_button_image:n.CANCEL_BTN_IMG},(t=>{this.cancel_button_image=t.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/close-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i,this.posY=a,this.context=t,this.canvas=e,(0,s.loadImages)({close_button_image:n.MAP_BTN_IMG},(t=>{this.close_button_image=t.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:a}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/index.ts":(t,e,i)=>{i.r(e),i.d(e,{CancelButton:()=>n.default,CloseButton:()=>s.default,LevelBloonButton:()=>d.default,NextButton:()=>a.default,NoButton:()=>o.default,PauseButton:()=>r.default,PlayButton:()=>c.default,RetryButton:()=>h.default,YesButton:()=>l.default});var s=i("./src/components/buttons/close-button.ts"),n=i("./src/components/buttons/cancel-button.ts"),a=i("./src/components/buttons/next-button.ts"),o=i("./src/components/buttons/no-button.ts"),r=i("./src/components/buttons/pause-button.ts"),h=i("./src/components/buttons/retry-button.ts"),l=i("./src/components/buttons/yes-button.ts"),c=i("./src/components/buttons/play-button.ts"),d=i("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(t,e,i){this.context=e,this.levelData=i,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=t.height/5,this.radiusOffSet=t.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=t.height/13,this.textFontSize=this.size/6}isSpecialLevel(t){return n.SPECIAL_LEVELS.includes(t)}isLevelSpecial(t){return this.levelData?.isSpecial?.9*t:t}draw(t,e,i,n){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${s.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+t}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${s.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(t,e,i,n)}applyPulseEffect(){const t=.7,e=Date.now()%1500/1500,i=e<=t,s=i?e/t:(e-t)/(i?t:.30000000000000004),n=i?15*s:15+45*s,a=i?.5*(1-s):0;if(a<=0)return;const{x:o,y:r,radius:h}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},l=this.posX+this.btnSize/o,c=this.posY+this.btnSize/r,d=this.btnSize/h+n;this.context.save(),this.context.beginPath(),this.context.arc(l,c,d,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${a})`,this.context.fill(),this.context.restore()}drawIcons(t,e,i,n){const a=this.levelData.index;if(s.Debugger.DebugMode||a+t-1>e+1&&this.drawLock(),i.length&&a+t<=n)for(let e=0;e<i.length;e++)if(a-1+t===parseInt(i[e].levelNumber)){this.checkStars(i[e].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(t){const e=this.levelData.x,i=this.levelData.y,s=this.size;t>=1&&this.drawStar(e,i-.01*s),t>1&&this.drawStar(e+s/2.5,i-.01*s),3===t&&this.drawStar(e+s/5,i-.1*s)}drawStar(t,e){this.context.drawImage(this.levelData?.starImg,t,e,this.size/5,this.size/5)}onClick(t,e,i,n,a){Math.sqrt((t-this.levelData.x-this.radiusOffSet)*(t-this.levelData.x-this.radiusOffSet)+(e-this.levelData.y-this.radiusOffSet)*(e-this.levelData.y-this.radiusOffSet))<45&&(s.Debugger.DebugMode||this.levelData.index+i<=n)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,a(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a,o){this.posX=a,this.posY=o,this.context=t,this.width=e,this.height=i,(0,s.loadImages)({next_button_image:n.NEXT_BTN_IMG},(t=>{this.next_button_image=t.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/no-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i+5,this.posY=a+10,this.context=t,this.canvas=e,(0,s.loadImages)({no_button_image:n.CANCEL_BTN_IMG},(t=>{this.no_button_image=t.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/pause-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,(0,s.loadImages)({pause_button_image:n.PAUSE_BTN_IMG},(t=>{this.pause_button_image=t.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9),i}}},"./src/components/buttons/play-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});var s=i("./src/constants/index.ts"),n=i("./src/Firebase/firebase-integration.ts"),a=i("./src/common/index.ts"),o=i("./src/data/index.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,i,o){this.posX=i,this.posY=o,this.context=t,this.canvas=e,this.firebaseIntegration=new n.FirebaseIntegration,this.init(),this.images={pause_button_image:s.PLAY_BTN_IMG},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await(0,o.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const i=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),i<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}},"./src/components/buttons/retry-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i,this.posY=a,this.context=t,this.canvas=e,(0,s.loadImages)({retry_button_image:n.RETRY_BTN_IMG},(t=>{this.retry_button_image=t.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:a}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/yes-button.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i-5,this.posY=a,this.context=t,this.canvas=e,(0,s.loadImages)({yes_button_image:n.YES_BTN_IMG},(t=>{this.yes_button_image=t.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,s.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/feedback-text/index.ts":(t,e,i)=>{i.r(e),i.d(e,{FeedbackTextEffects:()=>n});var s=i("./src/common/index.ts");class n{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(t){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=t,(0,s.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,s.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(t,e,i)=>{i.r(e),i.d(e,{AudioPlayer:()=>u.AudioPlayer,Background:()=>c.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>n.LevelIndicators,Monster:()=>h.Monster,PauseButton:()=>s.default,PromptText:()=>a.PromptText,StoneHandler:()=>o.default,TimerTicking:()=>l.TimerTicking,TrailEffect:()=>m.default,Tutorial:()=>r.Tutorial});var s=i("./src/components/buttons/pause-button.ts"),n=i("./src/components/level-indicator.ts"),a=i("./src/components/prompt-text.ts"),o=i("./src/components/stone-handler.ts"),r=i("./src/components/tutorial.ts"),h=i("./src/components/monster.ts"),l=i("./src/components/timer-ticking.ts"),c=i("./src/components/background.ts"),d=i("./src/components/feedback-text/index.ts"),u=i("./src/components/audio-player.ts"),m=i("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(t,e,i)=>{i.r(e),i.d(e,{LevelIndicators:()=>o});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts"),a=i("./src/events/index.ts");class o extends a.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=i,this.images={level_indicator:n.LEVEL_INDICATOR,bar_empty:n.BAR_EMPTY,bar_full:n.BAR_FULL},(0,s.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}},"./src/components/monster.ts":(t,e,i)=>{i.r(e),i.d(e,{Monster:()=>a});var s=i("./src/common/index.ts"),n=i("./src/events/index.ts");class a extends n.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,s.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.changeToIdleAnimation(),this.imagesLoaded=!0,i&&i()}))}update(t){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=t,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(t){this.image.src=t}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>h});var s=i("./src/components/buttons/index.ts"),n=i("./src/common/index.ts"),a=i("./src/components/index.ts"),o=i("./src/components/popups/sure-popup.ts"),r=i("./src/constants/index.ts");class h{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,i,h,l){this.canvas=t,this.callback=e,this.gameplayData=l,this.switchToLevelSelection=i,this.reloadScene=h;const c=document.getElementById("canvas");this.context=c.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.cancelButton=new s.CancelButton(this.context,this.canvas),this.retryButton=new s.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new s.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,n.loadImages)({pop_up_image:r.POPUP_BG_IMG},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new o.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new o.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const s=t.clientX-i.left,a=t.clientY-i.top;this.cancelButton.onClick(s,a)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(s,a)&&("english"==n.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(s,a)&&("english"==n.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==n.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==n.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(r.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>r});var s=i("./src/common/index.ts"),n=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/constants/index.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,i){this.canvas=t,this.yesCallback=e,this.noCallback=i,this.context=this.canvas.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.yesButton=new a.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new a.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,s.loadImages)({pop_up_image:o.POPUP_BG_IMG},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(s.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const s=t.clientX-i.left,n=t.clientY-i.top;this.yesButton.onClick(s,n)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(s,n)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(s.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(t,e,i)=>{i.r(e),i.d(e,{PromptText:()=>r});var s=i("./src/events/index.ts"),n=i("./src/common/index.ts"),a=i("./src/components/index.ts"),o=i("./src/constants/index.ts");class r extends s.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;droppedStoneCount=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,i,s,o){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=s,this.rightToLeft=o,this.currentPromptText=i.prompt.promptText,this.currentPuzzleData=i,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const s=t.clientX-i.left,n=t.clientY-i.top;this.onClick(s,n)&&this.playSound()};getPromptAudioUrl=()=>n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var i=this.calculateFont();const s=this.promptImageWidth,a=this.promptImageHeight;if(this.context.font=`${i}px ${n.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var o=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(o).width/2,e),this.context.fillStyle="black",this.context.fillText(o,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,s/4,a/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let i=this.targetStones.length-1;i>=0;i--)this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[i],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[i],t,e)),t=t+this.context.measureText(this.targetStones[i]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,s/4,a/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-s),e=.33*(this.height-a);this.context.drawImage(this.promptPlayButton,t,e,s/4,a/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,s/4,a/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),i=this.promptImageWidth,s=this.promptImageHeight;var a=this.calculateFont();this.context.font=`${a}px ${n.font}, monospace`;let o=this.width/2-this.context.measureText(this.currentPromptText).width/2,r=0;var h=this.currentPuzzleData.targetStones[0].split("");for(let n=0;n<t.length;n++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){h.includes(t[n])?(h=h.slice(1,h.length),this.context.fillStyle="red",this.context.fillText(t[n],o,e)):(this.context.fillStyle="black",this.context.fillText(t[n],o,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){if(this.targetStones.length!=this.currentPromptText.length){this.targetStones.length>n&&(this.context.fillStyle=this.droppedStoneCount>n||null==this.droppedStoneCount?"black":"red",this.context.fillText(this.targetStones[n],o+o/10,e));break}this.context.fillStyle=this.droppedStones>n||null==this.droppedStones?"black":"red",this.context.fillText(t[n],o,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4)}r=(this.context.measureText(t[n]).width+this.context.measureText(t[n+1]).width)/2,o+=r}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,i=(this.width-t)/2,s=(this.height-e)/5;this.context.drawImage(this.prompt_image,i,s,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.droppedStoneCount=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t,this.droppedStoneCount++}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,o.PROMPT_TEXT_BG),e=this.loadImage(this.promptPlayButton,o.PROMPT_PLAY_BUTTON);await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((i,s)=>{t.onload=()=>{i()},t.src=e,t.onerror=t=>{s(t)}}))}}},"./src/components/stone-handler.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>h});var s=i("./src/common/index.ts"),n=i("./src/events/index.ts"),a=i("./src/components/index.ts"),o=i("./src/data/index.ts"),r=i("./src/constants/index.ts");class h extends n.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==o.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,i,n,o,h){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=i,this.levelData=n,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(r.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(o),this.puzzleStartTime=new Date,this.tutorial=new a.Tutorial(t,e.width,e.height,i),this.stonebg=new Image,this.stonebg.src=r.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new a.AudioPlayer,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new a.AudioPlayer,this.timerTickingInstance=h,document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(t){const e=this.getFoilStones();for(let i=0;i<e.length;i++)e[i]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[i]),this.foilStones.push(new s.StoneConfig(this.context,this.canvas.width,this.canvas.height,e[i],this.stonePos[i][0],this.stonePos[i][1],t,this.timerTickingInstance,i==e.length-1?this.tutorial:null))}draw(t){this.foilStones.length>0&&(this.foilStones.forEach((e=>{e&&void 0!==e.frame&&e.draw(t)})),this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t))}drawWordPuzzleLetters(t,e,i){for(let s=0;s<this.foilStones.length;s++)e(s)&&this.foilStones[s].draw(t,Object.keys(i).length>1&&void 0!==i[s]);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,i=!1){const s=i?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,s,i,t),s}processLetterDropFeedbackAudio(t,e,i,s){if(e){(i?s===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,r.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?r.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=s.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(e),r.AUDIO_PATH_POINTS_ADD,s.Utils.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}resetStonePosition(t,e,i){const s=e,n=i;if(s&&n&&s.text&&"number"==typeof n.origx&&"number"==typeof n.origy){const e=50,i=t/2;s.x=s.text.length<=3&&n.origx<e&&n.origx<i?n.origx+25:n.origx,s.y=n.origy}return s}computeCursorDistance(t,e,i){return Math.sqrt((t-i.x)**2+(e-i.y)**2)}handlePickStoneUp(t,e){let i=null,s=0;for(let n of this.foilStones){if(this.computeCursorDistance(t,e,n)<=40){i=n,i.foilStoneIndex=s;break}s++}return i}handleHoveringToAnotherStone(t,e,i){let s=null,n=0;for(let a of this.foilStones){if(this.computeCursorDistance(t,e,a)<=40&&i(a.text,n)){s=a,s.foilStoneIndex=n;break}n++}return s}handleMovingStoneLetter(t,e,i){const s=t,n=this.canvas.getBoundingClientRect();return s.x=e-n.left,s.y=i-n.top,s}}},"./src/components/timer-ticking.ts":(t,e,i)=>{i.r(e),i.d(e,{TimerTicking:()=>r});var s=i("./src/common/index.ts"),n=i("./src/events/index.ts"),a=i("./src/components/index.ts"),o=i("./src/constants/index.ts");class r extends n.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=i,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new a.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:o.TIMER_EMPTY,rotating_clock:o.ROTATING_CLOCK,timer_full:o.TIMER_FULL},(0,s.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(o.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});class s{ctx;particles;mouse;isDiamond;constructor(t){this.ctx=t.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1}init(){this.draw()}draw(){this.drawTrail();let t=[];for(let e=0;e<this.particles.length;e++)this.particles[e].time<=this.particles[e].ttl&&t.push(this.particles[e]);this.particles=t}drawTrail(){for(let t=0;t<this.particles.length;t++)this.particles[t].update(),this.isDiamond=!this.isDiamond,this.particles[t].draw(this.isDiamond)}addTrailParticlesOnMove(t,e){this.mouse.x=t,this.mouse.y=e,this.particles.push(new n(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class n{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(t,e){const i=this.determineValueByScreenWidth(30,15),s=this.determineValueByScreenWidth(30,15),n=this.determineValueByScreenWidth(3,.5),a=this.determineValueByScreenWidth(2,.5);this.ctx=t,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:e.x+this.getRandomInt(-i,i),y:e.y+this.getRandomInt(-s,s),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-n,n),y:this.start.y+this.getRandomInt(-a,a)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(t,e){return window.screen.width>768?t:e}update(){if(this.time<=this.ttl){const t=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(t)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(t){t?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(t,e){return Math.round(Math.random()*(e-t))+t}easeOutQuart(t){return 1-Math.pow(1-t,4)}}},"./src/components/tutorial.ts":(t,e,i)=>{i.r(e),i.d(e,{Tutorial:()=>o});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts"),a=i("./src/data/index.ts");class o{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,i,a){this.width=e,this.height=i,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=a>=0?a:null,this.tutorialImg=new Image,this.tutorialImg.src=n.TUTORIAL_HAND,this.drawRipple=(0,s.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,i){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const s=this.x-this.endx+this.absdx,n=this.y-this.endy+this.absdy;let a=100*Math.sqrt(s*s+n*n)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,i,i),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,i,s){this.totalTime+=Math.floor(t);const n=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*n,o=this.tutorialImg.height*n;this.context.drawImage(this.tutorialImg,e,i,a,o),!s&&this.drawRipple(e+.02*this.width,i+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,i,s){const n=(i-e)/2,a=Math.PI/s;return e+n*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,i=this.height/1.9+this.tutorialImg.height/.8,s=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let n;const a=this.endx;this.totalTime<e/2?(n=s+this.totalTime/(e/2)*(i-s),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(n=i-(this.totalTime-e/2)/(e/2)*(i-s),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,n,this.tutorialImg.width,this.tutorialImg.height),n<=s&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return a.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return a.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}},"./src/compositions/background.ts":(t,e,i)=>{i.r(e),i.d(e,{BACKGROUND_ASSET_LIST:()=>a,autumBgDrawing:()=>l,createBackground:()=>o,defaultBgDrawing:()=>h,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>c});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");const a={summer:{BG_GROUP_IMGS:n.DEFAULT_BG_GROUP_IMGS,draw:h},autumn:{BG_GROUP_IMGS:n.AUTUMN_BG_GROUP_IMGS,draw:l},winter:{BG_GROUP_IMGS:n.WINTER_BG_GROUP_IMGS,draw:c}};async function o(t,e,i,n,a){return{...{...a(t,e,i,{...await(0,s.syncLoadingImages)(n)})}}}const r=(t,e)=>{const i=Object.keys(e);let s=Math.floor(t/10)%i.length;return t>=30&&(s%=3),{...e[i[s]]}};function h(t,e,i,s){return{draw:()=>{t.drawImage(s?.DEFAULT_BACKGROUND_1,0,0,e,i),t.drawImage(s?.ASSETS_PATH_TOTEM,.6*e,i/6,e,i/2),t.drawImage(s?.ASSETS_PATH_FENCE,.4*-e,i/3,e,i/3),t.drawImage(s?.ASSETS_PATH_HILL,.25*-e,i/2,1.5*e,i/2)}}}function l(t,e,i,s){return{draw:()=>{t.drawImage(s.AUTUMN_BACKGROUND_1,0,0,e,i),t.drawImage(s.AUTUMN_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(s.AUTUMN_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(s.AUTUMN_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}function c(t,e,i,s){return{draw:()=>{t.drawImage(s.WINTER_BACKGROUND_1,0,0,e,i),t.drawImage(s.WINTER_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(s.WINTER_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(s.WINTER_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}function d(t,e,i,s){return{draw:()=>{t.drawImage(s?.LEVEL_SELECTION_BACKGROUND,0,0,e,i)}}}},"./src/compositions/index.ts":(t,e,i)=>{i.r(e),i.d(e,{BACKGROUND_ASSET_LIST:()=>s.BACKGROUND_ASSET_LIST,autumBgDrawing:()=>s.autumBgDrawing,createBackground:()=>s.createBackground,createLevelObject:()=>n.createLevelObject,defaultBgDrawing:()=>s.defaultBgDrawing,getdefaultCloudBtnsPos:()=>n.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>s.levelSelectBgDrawing,loadDynamicBgAssets:()=>s.loadDynamicBgAssets,loadLevelImages:()=>n.loadLevelImages,winterBgDrawing:()=>s.winterBgDrawing});var s=i("./src/compositions/background.ts"),n=i("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(t,e,i)=>{i.r(e),i.d(e,{createLevelObject:()=>h,getdefaultCloudBtnsPos:()=>o,loadLevelImages:()=>r});var s=i("./src/constants/index.ts"),n=i("./src/common/index.ts");const a=t=>s.SPECIAL_LEVELS.includes(t),o=t=>[[[t.width/10,t.height/10],[t.width/2.5,t.height/10],[t.width/3+t.width/2.8,t.height/10],[t.width/10,t.height/3],[t.width/2.5,t.height/3],[t.width/3+t.width/2.8,t.height/3],[t.width/10,t.height/1.8],[t.width/2.5,t.height/1.8],[t.width/3+t.width/2.8,t.height/1.8],[t.width/2.5,t.height/1.3]]],r=()=>(0,n.syncLoadingImages)({balloonImg:s.MAP_ICON_IMG,specialBloonImg:s.MAP_ICON_SPECIAL_IMG,lockImg:s.MAP_LOCK_IMG,starImg:s.STAR_IMG});async function h(t,e,i,s){const n=a(i);return{...{x:t,y:e,index:i,isSpecial:n,...s,balloonImg:n?s?.specialBloonImg:s?.balloonImg}}}},"./src/constants/index.ts":(t,e,i)=>{i.r(e),i.d(e,{ASSETS_PATH_BG_01:()=>G,ASSETS_PATH_FENCE:()=>Y,ASSETS_PATH_HILL:()=>V,ASSETS_PATH_MONSTER_IDLE:()=>X,ASSETS_PATH_STONE_PINK_BG:()=>j,ASSETS_PATH_TOTEM:()=>H,AUDIO_ARE_YOU_SURE:()=>O,AUDIO_INTRO:()=>N,AUDIO_LEVEL_LOSE:()=>U,AUDIO_LEVEL_WIN:()=>R,AUDIO_PATH_BTN_CLICK:()=>k,AUDIO_PATH_CHEERING_FUNC:()=>B,AUDIO_PATH_CORRECT_STONE:()=>D,AUDIO_PATH_EATS:()=>A,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>C,AUDIO_PATH_MONSTER_SPIT:()=>L,AUDIO_PATH_ON_DRAG:()=>z,AUDIO_PATH_POINTS_ADD:()=>P,AUDIO_TIMEOUT:()=>M,AUDIO_URL_PRELOAD:()=>F,AUTUMN_BACKGROUND_1:()=>$,AUTUMN_BG_GROUP_IMGS:()=>Mt,AUTUMN_FENCE_1:()=>Z,AUTUMN_HILL_1:()=>K,AUTUMN_PILLAR_1:()=>q,AUTUMN_SIGN_1:()=>J,BACK_BTN_IMG:()=>Ct,BAR_EMPTY:()=>ht,BAR_FULL:()=>lt,ButtonClick:()=>p,CANCEL_BTN_IMG:()=>Dt,CLOUD_6:()=>bt,CLOUD_7:()=>wt,CLOUD_8:()=>St,DEFAULT_BACKGROUND_1:()=>W,DEFAULT_BG_GROUP_IMGS:()=>Ot,DevelopmentServer:()=>I,EndScene1:()=>x,FONT_BASE_PATH:()=>T,FeedbackAudio:()=>u,FirebaseUserClicked:()=>s,FirebaseUserInstall:()=>n,GAMEPLAY_BG_GROUP_IMGS:()=>zt,GameScene1:()=>E,IntroMusic:()=>m,IsCached:()=>c,LEVEL_INDICATOR:()=>rt,LEVEL_SELECTION_BACKGROUND:()=>nt,LevelEndAudio:()=>w,LevelSelection1:()=>_,MAP_BTN_IMG:()=>_t,MAP_ICON_IMG:()=>Et,MAP_ICON_SPECIAL_IMG:()=>xt,MAP_LOCK_IMG:()=>Tt,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>Lt,NativePlayButton:()=>r,PAUSE_BTN_IMG:()=>yt,PIN_STAR_1:()=>pt,PIN_STAR_2:()=>ft,PIN_STAR_3:()=>vt,PLAY_BTN_IMG:()=>It,POPUP_BG_IMG:()=>kt,PROMPT_PLAY_BUTTON:()=>ot,PROMPT_TEXT_BG:()=>at,PWAInstallStatus:()=>a,PhraseAudio:()=>b,PreviousPlayedLevel:()=>h,PromptAudio:()=>g,RETRY_BTN_IMG:()=>Pt,ROTATING_CLOCK:()=>dt,SCENE_NAME_GAME_PLAY:()=>Ft,SCENE_NAME_LEVEL_END:()=>jt,SCENE_NAME_LEVEL_SELECT:()=>Rt,SCENE_NAME_START:()=>Ut,SPECIAL_LEVELS:()=>Ht,STAR_IMG:()=>At,StartScene1:()=>y,StoneMusic:()=>v,StoreMonsterPhaseNumber:()=>l,TIMER_EMPTY:()=>ct,TIMER_FULL:()=>ut,TUTORIAL_HAND:()=>mt,TimeOver:()=>f,UrlSubstring:()=>S,UserCancelled:()=>o,WINTER_BACKGROUND_1:()=>Q,WINTER_BG_GROUP_IMGS:()=>Nt,WINTER_FENCE_1:()=>it,WINTER_HILL_1:()=>tt,WINTER_PILLAR_1:()=>st,WINTER_SIGN_1:()=>et,WIN_BG:()=>gt,YES_BTN_IMG:()=>Bt});const s="user_clicked",n="user_installed",a="pwa_installed_status",o="user_cancel_installation",r="native_playbutton_clicked",h="storePreviousPlayedLevel",l="storeMonsterPhaseNumber",c="is_cached",d="monster_audio",u="feedback_audio",m="intro_music",g="prompt_audio",p="button_click",f="time_over",v="stone_music",b="phrase_audio",w="level_end_audio",S="/feedthemonster",I="https://feedthemonsterdev.curiouscontent.org",y="StartScene1",_="LevelSelection1",E="GameScene1",x="EndScene1",T="./assets/fonts/",A="./assets/audios/Eat.mp3",L="./assets/audios/MonsterSpit.mp3",C="./assets/audios/Disapointed-05.mp3",P="assets/audios/PointsAdd.wav",D="assets/audios/CorrectStoneFinal.mp3",B=t=>`./assets/audios/Cheering-0${t}.mp3`,k="./assets/audios/ButtonClick.mp3",z="./assets/audios/onDrag.mp3",O="./assets/audios/are-you-sure.mp3",M="./assets/audios/timeout.mp3",N="./assets/audios/intro.mp3",U="./assets/audios/LevelLoseFanfare.mp3",R="./assets/audios/LevelWinFanfare.mp3",F=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],j="./assets/images/stone_pink.webp",H="./assets/images/Totem_v02_v01.webp",G="./assets/images/bg_v01.webp",V="./assets/images/hill_v01.webp",Y="./assets/images/fence_v01.webp",X="./assets/images/idle4.png",W="./assets/images/bg_v01.webp",$="./assets/images/Autumn_bg_v01.webp",K="./assets/images/Autumn_hill_v01.webp",q="./assets/images/Autumn_sign_v01.webp",J="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_fence_v01.webp",Q="./assets/images/Winter_bg_01.webp",tt="./assets/images/Winter_hill_v01.webp",et="./assets/images/Winter_sign_v01.webp",it="./assets/images/Winter_fence_v01.webp",st="./assets/images/Winter_sign_v01.webp",nt="./assets/images/map.webp",at="./assets/images/promptTextBg.webp",ot="./assets/images/promptPlayButton.webp",rt="./assets/images/levels_v01.webp",ht="./assets/images/bar_empty_v01.webp",lt="./assets/images/bar_full_v01.webp",ct="./assets/images/timer_empty.webp",dt="./assets/images/timer.webp",ut="./assets/images/timer_full.png",mt="./assets/images/tutorial_hand.webp",gt="./assets/images/WIN_screen_bg.webp",pt="./assets/images/pinStar1.webp",ft="./assets/images/pinStar2.webp",vt="./assets/images/pinStar3.webp",bt="./assets/images/cloud_01.png",wt="./assets/images/cloud_02.png",St="./assets/images/cloud_03.png",It="./assets/images/Play_button.webp",yt="./assets/images/pause_v01.webp",_t="./assets/images/map_btn.webp",Et="./assets/images/mapIcon.webp",xt="./assets/images/map_icon_monster_level_v01.webp",Tt="./assets/images/mapLock.webp",At="./assets/images/star.webp",Lt="./assets/images/next_btn.webp",Ct="./assets/images/back_btn.webp",Pt="./assets/images/retry_btn.webp",Dt="./assets/images/close_btn.webp",Bt="./assets/images/confirm_btn.webp",kt="./assets/images/popup_bg_v01.webp",zt={ASSETS_PATH_TOTEM:H,DEFAULT_BACKGROUND_1:W,ASSETS_PATH_HILL:V,ASSETS_PATH_FENCE:Y,ASSETS_PATH_MONSTER_IDLE:X},Ot={DEFAULT_BACKGROUND_1:W,ASSETS_PATH_HILL:V,ASSETS_PATH_TOTEM:H,ASSETS_PATH_FENCE:Y},Mt={AUTUMN_BACKGROUND_1:$,AUTUMN_HILL_1:K,AUTUMN_PILLAR_1:q,AUTUMN_SIGN_1:J,AUTUMN_FENCE_1:Z},Nt={WINTER_BACKGROUND_1:Q,WINTER_HILL_1:tt,WINTER_SIGN_1:et,WINTER_FENCE_1:it,WINTER_PILLAR_1:st},Ut="StartScene",Rt="LevelSelection",Ft="GamePlay",jt="LevelEnd",Ht=[5,13,20,30,42]},"./src/data/api-data.ts":(t,e,i)=>{i.r(e),i.d(e,{URL:()=>n,getData:()=>o,getFtmData:()=>a});var s=i("./src/common/index.ts");const n="./lang/"+s.lang+"/ftm_"+s.lang+".json";function a(){return fetch(n,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}async function o(){return await a()}},"./src/data/custom-fonts.ts":(t,e,i)=>{i.r(e),i.d(e,{customFonts:()=>s});const s={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"}},"./src/data/data-modal.ts":(t,e,i)=>{i.r(e),i.d(e,{DataModal:()=>s,FeedbackAudios:()=>o,FeedbackTexts:()=>a,FoilStone:()=>l,LevelMeta:()=>u,Levels:()=>r,OtherAudios:()=>n,Prompt:()=>d,Puzzles:()=>h,TargetStone:()=>c});class s{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,i,s,r,h,l,c,d){this.title=t,this.otherAudios=new n(e),this.levels=this.getLevels(i),this.FeedbackTexts=new a(s),this.FeedbackAudios=new o(h),this.rightToLeft=r,this.majVersion=l,this.minVersion=c,this.version=d}getLevels(t){let e=[];for(let i=0;i<t.length;i++)e.push(new r(t[i]));return e}}class n{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class a{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class o{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class r{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new u(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,i)=>{e.push(new h(t))})),e}}class h{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new d(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,i)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,i)=>{e.push(t.StoneText)})),e}}class l{stoneText;constructor(t){this.stoneText=t}}class c{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class u{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}},"./src/data/game-score.ts":(t,e,i)=>{i.r(e),i.d(e,{GameScore:()=>n});var s=i("./src/common/index.ts");class n{static currentlanguage=s.lang;static setGameLevelScore(t,e){let i=this.calculateStarCount(e),s={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:i};this.setTotalStarCount(i);let n=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<n.length;t++)if(n[t].levelNumber===s.levelNumber){a=t;break}-1!==a&&s.score>n[a].score?n[a]=s:n.push(s),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(n))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return s.Debugger.DebugMode?JSON.parse(localStorage.getItem(s.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(s.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(t,e,i)=>{i.r(e),i.d(e,{languageFontMapping:()=>s});const s={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(t,e,i)=>{i.r(e),i.d(e,{DataModal:()=>n.DataModal,FeedbackAudios:()=>n.FeedbackAudios,FeedbackTexts:()=>n.FeedbackTexts,FoilStone:()=>n.FoilStone,GameScore:()=>a.GameScore,LevelMeta:()=>n.LevelMeta,Levels:()=>n.Levels,OtherAudios:()=>n.OtherAudios,Prompt:()=>n.Prompt,Puzzles:()=>n.Puzzles,TargetStone:()=>n.TargetStone,URL:()=>s.URL,customFonts:()=>r.customFonts,getData:()=>s.getData,getFtmData:()=>s.getFtmData,languageFontMapping:()=>o.languageFontMapping});var s=i("./src/data/api-data.ts"),n=i("./src/data/data-modal.ts"),a=i("./src/data/game-score.ts"),o=i("./src/data/i18-font-mapping.ts"),r=i("./src/data/custom-fonts.ts")},"./src/events/index.ts":(t,e,i)=>{i.r(e),i.d(e,{EventManager:()=>n});var s=i("./src/common/index.ts");class n{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(s.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(s.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(s.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(s.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/gamepuzzles/index.ts":(t,e,i)=>{i.r(e),i.d(e,{WordPuzzleLogic:()=>s.default});var s=i("./src/gamepuzzles/wordPuzzleLogic.ts")},"./src/gamepuzzles/wordPuzzleLogic.ts":(t,e,i)=>{i.r(e),i.d(e,{default:()=>s});class s{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(t,e){this.levelData=t,this.puzzleNumber=e,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(t){this.clearAllValues(),this.puzzleNumber=t}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(t){return!this.hideListObj[t]}handleCheckHoveredStone(t,e){const i=this.groupedLetters,s=this.getTargetWord();if(!this.droppedLetters.length&&s[0]!==i[0])return!1;const n=!i.includes(t),a=!this.groupedObj[e];return s.includes(`${this.droppedLetters}${i}${t}`)&&(n||a)}validateFedLetters(){const t=this.getTargetWord();return this.droppedLetters===t.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const t=this.getTargetWord();return this.droppedLetters===t}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(t,e){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${t}`,this.groupedObj[e]=t}}},"./src/sceneHandler/index.ts":(t,e,i)=>{i.r(e),i.d(e,{SceneHandler:()=>r});var s=i("./src/scenes/index.ts"),n=i("./src/data/index.ts"),a=i("./src/common/index.ts"),o=i("./src/constants/index.ts");class r{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(t,e){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new s.StartScene(t,e,this.switchSceneToLevelSelection),r.SceneName=o.StartScene1,this.loadingScreen=new s.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let t=n.GameScore.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),r.SceneName===o.StartScene1?this.startScene.animation(e):r.SceneName===o.LevelSelection1?this.levelSelectionScene.drawLevelSelection():r.SceneName===o.GameScene1?this.gameplayScene.draw(e):r.SceneName===o.EndScene1&&this.levelEndScene.draw(e)};switchSceneToGameplay=(t,e)=>{this.showLoading(),this.dispose(e);let i=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new s.GameplayScene(this.canvas,t.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,t.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(o.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,i,this.data.FeedbackAudios),r.SceneName=o.GameScene1}),800)};switchSceneToEndLevel=(t,e,i,n)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(o.SCENE_NAME_GAME_PLAY),this.levelEndScene=new s.LevelEndScene(this.canvas,this.height,this.width,this.context,t,i,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),r.SceneName=o.EndScene1}),n?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new s.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),r.SceneName=o.LevelSelection1,this.titleTextElement.style.display="none"}),800)};dispose=t=>{t==o.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():t===o.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():t===o.SCENE_NAME_START?this.startScene.dispose():t==o.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),localStorage.setItem(o.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(t,e,i)=>{i.r(e),i.d(e,{GameplayScene:()=>d});var s=i("./src/components/index.ts"),n=i("./src/components/popups/pause-popup.ts"),a=i("./src/common/index.ts"),o=i("./src/data/index.ts"),r=i("./src/Firebase/firebase-integration.ts"),h=i("./src/constants/index.ts"),l=i("./src/compositions/index.ts"),c=i("./src/gamepuzzles/index.ts");class d{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;hasFed;wordPuzzleLogic;constructor(t,e,i,o,l,d,u,m,g,p,f){this.width=t.width,this.height=t.height,this.rightToLeft=l,this.canvas=t,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new s.TrailEffect(t),this.monsterPhaseNumber=i||1,this.levelData=e,this.switchSceneToEnd=d,this.levelNumber=u,this.switchToLevelSelection=m,this.reloadScene=g,this.jsonVersionNumber=p,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new s.PauseButton(this.context,this.canvas),this.timerTicking=new s.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new s.StoneHandler(this.context,this.canvas,this.counter,this.levelData,f,this.timerTicking),this.tutorial=new s.Tutorial(this.context,t.width,t.height),this.promptText=new s.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new s.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new s.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new n.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:e,selectedLevelNumber:u}),this.firebaseIntegration=new r.FirebaseIntegration,this.feedbackTextEffects=new s.FeedbackTextEffects,this.audioPlayer=new s.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=e.puzzles,this.feedBackTexts=o,this.images={profileMonster:h.ASSETS_PATH_MONSTER_IDLE},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}));var v=this.levelData.levelMeta.levelNumber;a.Debugger.DebugMode?localStorage.setItem(h.PreviousPlayedLevel+a.lang+"Debug",v):localStorage.setItem(h.PreviousPlayedLevel+a.lang,v),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1,this.hasFed=!1,this.wordPuzzleLogic=new c.WordPuzzleLogic(e,this.counter)}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,l.loadDynamicBgAssets)(this.levelData.levelNumber,l.BACKGROUND_ASSET_LIST);this.background=await(0,l.createBackground)(this.context,this.width,this.height,t,e)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const i=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(i-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;if(Math.sqrt((i-this.monster.x-this.canvas.width/4)**2+(s-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),this.clickTrailToggle=!1};handleMouseDown=t=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(i,s);else for(let t of this.stoneHandler.foilStones){if(Math.sqrt((i-t.x)**2+(s-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(h.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};setPickedUp(t,e){if(this.pickedStone&&this.pickedStone.frame<=99)return;const i=this.stoneHandler.handlePickStoneUp(t,e);i&&(this.pickedStoneObject=i,this.pickedStone=i,this.audioPlayer.playAudio(h.AUDIO_PATH_ON_DRAG),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(i?.text,i?.foilStoneIndex))}handleMouseMove=t=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;let e=t.clientX,i=t.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const s=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,t.clientX,t.clientY);if(this.pickedStone=s,e=s.x,i=s.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const t=this.stoneHandler.handleHoveringToAnotherStone(e,i,((t,e)=>this.wordPuzzleLogic.handleCheckHoveredStone(t,e)));t&&(this.wordPuzzleLogic.setPickUpLetter(t?.text,t?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=t,this.pickedStone=t)}}else{let s=this.canvas.getBoundingClientRect();const n=t.clientX-s.left,a=t.clientY-s.top;this.monster.changeToDragAnimation(),this.pickedStone.x=n,this.pickedStone.y=a,e=n,i=a}this.monster.changeToDragAnimation()}this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(e,i)};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;this.monster.onClick(i,s)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(i,s)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(i,s)&&this.promptText.playSound()};handleTouchStart=t=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY}),this.hasFed||this.monster.changeToIdleAnimation(),this.trailParticles?.resetParticles()};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.monster.update(t),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(t),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(t)}handleStoneLetterDrawing(t){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const{groupedObj:e}=this.wordPuzzleLogic.getValues();this.stoneHandler.drawWordPuzzleLetters(t,(t=>this.wordPuzzleLogic.validateShouldHideLetter(t)),e)}else this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener(a.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(a.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(a.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(a.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(a.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(a.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(a.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(a.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(t,e,i=!1){return this.hasFed=!0,this.stoneHandler.isStoneLetterDropCorrect(t,e,i)}letterPuzzle(t){if(this.pickedStone&&this.pickedStone.frame<=99)return;const e=this.getRandomInt(0,1),i=this.checkStoneDropped(t,e);i&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(i)}wordPuzzle(t){if(t.frame<=99)return;this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const e=this.getRandomInt(0,1);this.hasFed=!0,this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:i}=this.wordPuzzleLogic.getValues(),s=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(e,s,!0,i),s){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(s,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==a.lang?this.stonesCount:i.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation(),this.hasFed=!1}),2e3)}else this.handleStoneDropEnd(s,"Word"),this.stonesCount=1}resetToIdleAnimation(t,e){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(t,e)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t))};dispatchStoneDropEvent(t){const e=new CustomEvent(a.STONEDROP,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(t?.detail?.counter),this.pickedStone=null,document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime(),this.hasFed=!1}logPuzzleEndFirebaseEvent(t,e){let i=Date.now();const{droppedLetters:s}=this.wordPuzzleLogic.getValues(),n={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==s||null==s?"TIMEOUT":s:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(i-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(n)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(t,e,i)=>{i.r(e),i.d(e,{GameplayScene:()=>s.GameplayScene,LevelEndScene:()=>a.LevelEndScene,LevelSelectionScreen:()=>n.LevelSelectionScreen,LoadingScene:()=>o.LoadingScene,StartScene:()=>r.StartScene,TestGameplayScene:()=>h.TestGameplayScene});var s=i("./src/scenes/gameplay-scene.ts"),n=i("./src/scenes/level-selection-scene.ts"),a=i("./src/scenes/levelend-scene.ts"),o=i("./src/scenes/loading-scene.ts"),r=i("./src/scenes/start-scene.ts"),h=i("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(t,e,i)=>{i.r(e),i.d(e,{LevelSelectionScreen:()=>c});var s=i("./src/common/index.ts"),n=i("./src/components/index.ts"),a=i("./src/data/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/compositions/index.ts"),h=i("./src/constants/index.ts"),l=i("./src/components/buttons/index.ts");class c{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let r=this;this.callBack=i,this.levelsSectionCount=r.data.levels.length/10>Math.floor(r.data.levels.length/10)?Math.floor(r.data.levels.length/10)+1:Math.floor(r.data.levels.length/10),this.levels=[],this.firebaseIntegration=new o.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=a.GameScore.getAllGameLevelInfo(),this.audioPlayer=new n.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(s.Debugger.DebugMode?localStorage.getItem(h.PreviousPlayedLevel+s.lang+"Debug"):localStorage.getItem(h.PreviousPlayedLevel+s.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={nextbtn:h.NEXT_BTN_IMG,backbtn:h.BACK_BTN_IMG},(0,s.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(h.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const t=await(0,a.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:h.LEVEL_SELECTION_BACKGROUND},r.levelSelectBgDrawing)};async createLevelButtons(){const t=await(0,r.loadLevelImages)(),e=(0,r.getdefaultCloudBtnsPos)(this.canvas)[0].map(((e,i)=>(0,r.createLevelObject)(e[0],e[1],i+1,t)));this.levels=await Promise.all(e),this.levelButtons=this.levels.map((t=>new l.LevelBloonButton(this.canvas,this.context,{...t})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(h.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,i=t.touches[0].clientY,s=this.xDown-e,n=this.yDown-i;Math.abs(s)>Math.abs(n)&&(s>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top,n=(t,e=1.3)=>i>=t&&i<t+this.canvas.height/10&&s>this.canvas.height/e&&s<this.canvas.height/e+this.canvas.height/10,a=n(.7*this.canvas.width),o=n(this.canvas.width/10);if(o||a){const t=this.levelSelectionPageIndex;a&&t!=10*this.levelsSectionCount-10?(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):o&&0!=t&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let t of this.levelButtons)t.onClick(i,s,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(t=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=t+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(t,e){const i=t.levelData.index+this.levelSelectionPageIndex,n=i-1;this.unlockLevelIndex+1===n&&t.applyPulseEffect(),i<=this.data.levels.length&&(this.checkUnlockedLevel(e),t.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,e,this.data.levels.length),s.Debugger.DebugMode&&this.context.fillText(this.data.levels[i-1].levelMeta.levelType,t.levelData.x+t.btnSize/3.5,t.levelData.y+t.btnSize/1.3))}draw(){for(let t of this.levelButtons)this.drawLevel(t,this.gameLevelData)}downButton(t){t!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=t?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber))}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.logSelectedLevelEvent(),this.callBack(e,"LevelSelection")}logSelectedLevelEvent(){const t={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(t,e,i)=>{i.r(e),i.d(e,{LevelEndScene:()=>h});var s=i("./src/common/index.ts"),n=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/compositions/index.ts"),r=i("./src/constants/index.ts");class h{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(t,e,i,o,h,l,c,d,u,m){this.canvas=t,this.height=e,this.width=i,this.context=o,this.monster=new n.Monster(this.canvas,m,this.switchToReactionAnimation),this.switchToGameplayCB=c,this.switchToLevelSelectionCB=d,this.data=u,this.starDrawnCount=0,this.closeButton=new a.CloseButton(o,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new a.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new a.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new n.AudioPlayer,this.starCount=h,this.currentLevel=l,this.images={backgroundImg:r.WIN_BG,star1Img:r.PIN_STAR_1,star2Img:r.PIN_STAR_2,star3Img:r.PIN_STAR_3,winBackgroundImg:r.DEFAULT_BACKGROUND_1},(0,s.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new n.AudioPlayer,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,o.loadDynamicBgAssets)(this.currentLevel,o.BACKGROUND_ASSET_LIST);this.background=await(0,o.createBackground)(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?((0,s.isDocumentVisible)()&&this.audioPlayer.playAudio(r.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,s.isDocumentVisible)()&&(this.audioPlayer.playAudio(r.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(r.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(t),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(s.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;if(this.closeButton.onClick(i,s)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(i,s)){this.audioPlayer.playButtonClickSound();let t={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(t,"LevelEnd")}if(this.isLastLevel&&this.nextButton.onClick(i,s)){this.audioPlayer.playButtonClickSound();let t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.switchToGameplayCB(e,"LevelEnd")}};pauseAudios=()=>{(0,s.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(s.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(t,e,i)=>{i.r(e),i.d(e,{LoadingScene:()=>a});var s=i("./src/common/index.ts"),n=i("./src/constants/index.ts");class a{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,i){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=i,this.context=this.canvas.getContext("2d"),this.images={cloud6:n.CLOUD_6,cloud7:n.CLOUD_7,cloud8:n.CLOUD_8},(0,s.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(t,e,i)=>{i.r(e),i.d(e,{StartScene:()=>l});var s=i("./src/components/index.ts"),n=i("./src/components/buttons/index.ts"),a=i("./src/common/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/compositions/index.ts"),h=i("./src/constants/index.ts");class l{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new s.Monster(this.canvas,4),this.switchSceneToLevelSelection=i,this.audioPlayer=new s.AudioPlayer,this.pwa_status=localStorage.getItem(h.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle()}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,h.DEFAULT_BG_GROUP_IMGS,r.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,a.toggleDebugMode)(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=t=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.monster.update(t),this.playButton.draw()};createPlayButton(){this.playButton=new n.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var s=i.getBoundingClientRect();const n=t.clientX-s.left,r=t.clientY-s.top,{excludeX:l,excludeY:c}=a.Utils.getExcludedCoordinates(i,15);n<l&&r<c||(o.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",h.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(h.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(t,e,i)=>{i.r(e),i.d(e,{TestGameplayScene:()=>h});var s=i("./src/constants/index.ts"),n=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/common/index.ts");const r=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),localStorage.setItem(s.PWAInstallStatus,"false")}));class h{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(t,e,i,a){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new n.Monster(this.canvas,0),console.log(Date.now," ::: ",performance.now),this.switchSceneToLevelSelection=a,this.stoneHandler=new n.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new n.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new n.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new n.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(s.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=i,this.animation(0),this.images={pillerImg:s.ASSETS_PATH_TOTEM,bgImg:s.DEFAULT_BACKGROUND_1,hillImg:s.ASSETS_PATH_HILL,fenchImg:s.ASSETS_PATH_FENCE,profileMonster:s.ASSETS_PATH_MONSTER_IDLE},(0,o.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{r.addEventListener("click",(()=>(0,o.toggleDebugMode)(r)))};handleMouseUp=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-i.left,n=t.clientY-i.top;Math.sqrt((s-e.monster.x-e.canvas.width/4)*(s-e.monster.x-e.canvas.width/4)+(n-e.monster.y-e.canvas.height/2.7)*(n-e.monster.y-e.canvas.height/2.7))<=60||e.monster.changeToIdleAnimation(),e.pickedStone=null};handleMouseDown=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-i.left,n=t.clientY-i.top;for(let t of e.stoneHandler.foilStones)Math.sqrt((s-t.x)*(s-t.x)+(n-t.y)*(n-t.y))<=40&&(this.pickedStone=t)};handleMouseMove=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-i.left,n=t.clientY-i.top;e.pickedStone&&(e.monster.changeToDragAnimation(),e.pickedStone.x=s,e.pickedStone.y=n)};animation=t=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(t),this.promptText.draw(t),this.stoneHandler.draw(t),this.levelIndicator.draw(),this.timerTicking.update(t))};draw(){}createPlayButton=()=>{this.playButton=new a.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(t){var e=t.touches[0],i=new MouseEvent("mousedown",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchmove",(function(t){var e=t.touches[0],i=new MouseEvent("mousemove",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchend",(function(t){var e=t.changedTouches[0],i=new MouseEvent("mouseup",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1)};handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var n=i.getBoundingClientRect();const a=t.clientX-n.left,o=t.clientY-n.top;e.playButton.onClick(a,o)&&(e.firebase_analytics&&e.firebase_analytics.logEvent(s.FirebaseUserClicked,"click"),fbq("trackCustom",s.FirebaseUserClicked,{event:"click"}),r.style.display="none",e.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(t,e,i)=>{i.r(e),i.d(e,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>G,isSupported:()=>V,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>Y,setDefaultEventParameters:()=>q,setUserId:()=>W,setUserProperties:()=>$,settings:()=>F});var s=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js");i("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",h="firebase_id",l="origin",c=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",u="https://www.googletagmanager.com/gtag/js",m=new n.Logger("@firebase/analytics"),g={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},p=new a.ErrorFactory("analytics","Analytics",g);function f(t){if(!t.startsWith(u)){const e=p.create("invalid-gtag-resource",{gtagURL:t});return m.warn(e.message),""}return t}function v(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function b(t,e){const i=function(t,e){let i;return window.trustedTypes&&(i=window.trustedTypes.createPolicy(t,e)),i}("firebase-js-sdk-policy",{createScriptURL:f}),s=document.createElement("script"),n=`${u}?l=${t}&id=${e}`;s.src=i?null==i?void 0:i.createScriptURL(n):n,s.async=!0,document.head.appendChild(s)}function w(t,e,i,s){return async function(n,...a){try{if("event"===n){const[s,n]=a;await async function(t,e,i,s,n){try{let a=[];if(n&&n.send_to){let t=n.send_to;Array.isArray(t)||(t=[t]);const s=await v(i);for(const i of t){const t=s.find((t=>t.measurementId===i)),n=t&&e[t.appId];if(!n){a=[];break}a.push(n)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",s,n||{})}catch(t){m.error(t)}}(t,e,i,s,n)}else if("config"===n){const[n,o]=a;await async function(t,e,i,s,n,a){const o=s[n];try{if(o)await e[o];else{const t=(await v(i)).find((t=>t.measurementId===n));t&&await e[t.appId]}}catch(t){m.error(t)}t("config",n,a)}(t,e,i,s,n,o)}else if("consent"===n){const[e]=a;t("consent","update",e)}else if("get"===n){const[e,i,s]=a;t("get",e,i,s)}else if("set"===n){const[e]=a;t("set",e)}else t(n,...a)}catch(t){m.error(t)}}}const S=30;const I=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function y(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function _(t,e=I,i){const{appId:s,apiKey:n,measurementId:a}=t.options;if(!s)throw p.create("no-app-id");if(!n){if(a)return{measurementId:a,appId:s};throw p.create("no-api-key")}const o=e.getThrottleMetadata(s)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new x;return setTimeout((async()=>{r.abort()}),void 0!==i?i:c),E({appId:s,apiKey:n,measurementId:a},o,r,e)}async function E(t,{throttleEndTimeMillis:e,backoffCount:i},s,n=I){var o;const{appId:r,measurementId:h}=t;try{await function(t,e){return new Promise(((i,s)=>{const n=Math.max(e-Date.now(),0),a=setTimeout(i,n);t.addEventListener((()=>{clearTimeout(a),s(p.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(s,e)}catch(t){if(h)return m.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:r,measurementId:h};throw t}try{const e=await async function(t){var e;const{appId:i,apiKey:s}=t,n={method:"GET",headers:y(s)},a=d.replace("{app-id}",i),o=await fetch(a,n);if(200!==o.status&&304!==o.status){let t="";try{const i=await o.json();(null===(e=i.error)||void 0===e?void 0:e.message)&&(t=i.error.message)}catch(t){}throw p.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return n.deleteThrottleMetadata(r),e}catch(e){const l=e;if(!function(t){if(!(t instanceof a.FirebaseError&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(l)){if(n.deleteThrottleMetadata(r),h)return m.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==l?void 0:l.message}]`),{appId:r,measurementId:h};throw e}const c=503===Number(null===(o=null==l?void 0:l.customData)||void 0===o?void 0:o.httpStatus)?(0,a.calculateBackoffMillis)(i,n.intervalMillis,S):(0,a.calculateBackoffMillis)(i,n.intervalMillis),d={throttleEndTimeMillis:Date.now()+c,backoffCount:i+1};return n.setThrottleMetadata(r,d),m.debug(`Calling attemptFetch again in ${c} millis`),E(t,d,s,n)}}class x{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let T,A;function L(t){A=t}function C(t){T=t}async function P(t,e,i,s,n,o,r){var c;const d=_(t);d.then((e=>{i[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&m.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>m.error(t))),e.push(d);const g=async function(){if(!(0,a.isIndexedDBAvailable)())return m.warn(p.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,a.validateIndexedDBOpenable)()}catch(t){return m.warn(p.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?s.getId():void 0)),[f,v]=await Promise.all([d,g]);(function(t){const e=window.document.getElementsByTagName("script");for(const i of Object.values(e))if(i.src&&i.src.includes(u)&&i.src.includes(t))return i;return null})(o)||b(o,f.measurementId),A&&(n("consent","default",A),L(void 0)),n("js",new Date);const w=null!==(c=null==r?void 0:r.config)&&void 0!==c?c:{};return w[l]="firebase",w.update=!0,null!=v&&(w[h]=v),n("config",f.measurementId,w),T&&(n("set",T),C(void 0)),f.measurementId}class D{constructor(t){this.app=t}_delete(){return delete B[this.app.options.appId],Promise.resolve()}}let B={},k=[];const z={};let O,M,N="dataLayer",U="gtag",R=!1;function F(t){if(R)throw p.create("already-initialized");t.dataLayerName&&(N=t.dataLayerName),t.gtagName&&(U=t.gtagName)}function j(t,e,i){!function(){const t=[];if((0,a.isBrowserExtension)()&&t.push("This is a browser extension environment."),(0,a.areCookiesEnabled)()||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),i=p.create("invalid-analytics-context",{errorInfo:e});m.warn(i.message)}}();const s=t.options.appId;if(!s)throw p.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw p.create("no-api-key");m.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=B[s])throw p.create("already-exists",{id:s});if(!R){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(N);const{wrappedGtag:t,gtagCore:e}=function(t,e,i,s,n){let a=function(...t){window[s].push(arguments)};return window[n]&&"function"==typeof window[n]&&(a=window[n]),window[n]=w(a,t,e,i),{gtagCore:a,wrappedGtag:window[n]}}(B,k,z,N,U);M=t,O=e,R=!0}B[s]=P(t,k,z,e,O,N,i);return new D(t)}function H(t=(0,s.getApp)()){t=(0,a.getModularInstance)(t);const e=(0,s._getProvider)(t,r);return e.isInitialized()?e.getImmediate():G(t)}function G(t,e={}){const i=(0,s._getProvider)(t,r);if(i.isInitialized()){const t=i.getImmediate();if((0,a.deepEqual)(e,i.getOptions()))return t;throw p.create("already-initialized")}return i.initialize({options:e})}async function V(){if((0,a.isBrowserExtension)())return!1;if(!(0,a.areCookiesEnabled)())return!1;if(!(0,a.isIndexedDBAvailable)())return!1;try{return await(0,a.validateIndexedDBOpenable)()}catch(t){return!1}}function Y(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,s){if(s&&s.global)return t("set",{screen_name:i}),Promise.resolve();t("config",await e,{update:!0,screen_name:i})}(M,B[t.app.options.appId],e,i).catch((t=>m.error(t)))}async function X(t){return t=(0,a.getModularInstance)(t),async function(t,e){const i=await e;return new Promise(((e,s)=>{t("get",i,"client_id",(t=>{t||s(p.create("no-client-id")),e(t)}))}))}(M,B[t.app.options.appId])}function W(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,s){if(s&&s.global)return t("set",{user_id:i}),Promise.resolve();t("config",await e,{update:!0,user_id:i})}(M,B[t.app.options.appId],e,i).catch((t=>m.error(t)))}function $(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,s){if(s&&s.global){const e={};for(const t of Object.keys(i))e[`user_properties.${t}`]=i[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:i})}(M,B[t.app.options.appId],e,i).catch((t=>m.error(t)))}function K(t,e){t=(0,a.getModularInstance)(t),async function(t,e){const i=await t;window[`ga-disable-${i}`]=!e}(B[t.app.options.appId],e).catch((t=>m.error(t)))}function q(t){M?M("set",t):C(t)}function J(t,e,i,s){t=(0,a.getModularInstance)(t),async function(t,e,i,s,n){if(n&&n.global)t("event",i,s);else{const n=await e;t("event",i,Object.assign(Object.assign({},s),{send_to:n}))}}(M,B[t.app.options.appId],e,i,s).catch((t=>m.error(t)))}function Z(t){M?M("consent","update",t):L(t)}const Q="@firebase/analytics",tt="0.10.0";(0,s._registerComponent)(new o.Component(r,((t,{options:e})=>j(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),(0,s._registerComponent)(new o.Component("analytics-internal",(function(t){try{const e=t.getProvider(r).getImmediate();return{logEvent:(t,i,s)=>J(e,t,i,s)}}catch(t){throw p.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),(0,s.registerVersion)(Q,tt),(0,s.registerVersion)(Q,tt,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(t,e,i)=>{i.r(e),i.d(e,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>O,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>N,_clearComponents:()=>V,_components:()=>U,_getProvider:()=>H,_registerComponent:()=>j,_removeServiceInstance:()=>G,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>tt,registerVersion:()=>Q,setLogLevel:()=>et});var s=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/idb/build/index.js");class r{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const h="@firebase/app",l="0.9.15",c=new n.Logger("@firebase/app"),d="@firebase/app-compat",u="@firebase/analytics-compat",m="@firebase/analytics",g="@firebase/app-check-compat",p="@firebase/app-check",f="@firebase/auth",v="@firebase/auth-compat",b="@firebase/database",w="@firebase/database-compat",S="@firebase/functions",I="@firebase/functions-compat",y="@firebase/installations",_="@firebase/installations-compat",E="@firebase/messaging",x="@firebase/messaging-compat",T="@firebase/performance",A="@firebase/performance-compat",L="@firebase/remote-config",C="@firebase/remote-config-compat",P="@firebase/storage",D="@firebase/storage-compat",B="@firebase/firestore",k="@firebase/firestore-compat",z="firebase",O="[DEFAULT]",M={[h]:"fire-core",[d]:"fire-core-compat",[m]:"fire-analytics",[u]:"fire-analytics-compat",[p]:"fire-app-check",[g]:"fire-app-check-compat",[f]:"fire-auth",[v]:"fire-auth-compat",[b]:"fire-rtdb",[w]:"fire-rtdb-compat",[S]:"fire-fn",[I]:"fire-fn-compat",[y]:"fire-iid",[_]:"fire-iid-compat",[E]:"fire-fcm",[x]:"fire-fcm-compat",[T]:"fire-perf",[A]:"fire-perf-compat",[L]:"fire-rc",[C]:"fire-rc-compat",[P]:"fire-gcs",[D]:"fire-gcs-compat",[B]:"fire-fst",[k]:"fire-fst-compat","fire-js":"fire-js",[z]:"fire-js-all"},N=new Map,U=new Map;function R(t,e){try{t.container.addComponent(e)}catch(i){c.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,i)}}function F(t,e){t.container.addOrOverwriteComponent(e)}function j(t){const e=t.name;if(U.has(e))return c.debug(`There were multiple attempts to register component ${e}.`),!1;U.set(e,t);for(const e of N.values())R(e,t);return!0}function H(t,e){const i=t.container.getProvider("heartbeat").getImmediate({optional:!0});return i&&i.triggerHeartbeat(),t.container.getProvider(e)}function G(t,e,i=O){H(t,e).clearInstance(i)}function V(){U.clear()}const Y={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new a.ErrorFactory("app","Firebase",Y);class W{constructor(t,e,i){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=i,this.container.addComponent(new s.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(t,e={}){let i=t;if("object"!=typeof e){e={name:e}}const n=Object.assign({name:O,automaticDataCollectionEnabled:!1},e),o=n.name;if("string"!=typeof o||!o)throw X.create("bad-app-name",{appName:String(o)});if(i||(i=(0,a.getDefaultAppConfig)()),!i)throw X.create("no-options");const r=N.get(o);if(r){if((0,a.deepEqual)(i,r.options)&&(0,a.deepEqual)(n,r.config))return r;throw X.create("duplicate-app",{appName:o})}const h=new s.ComponentContainer(o);for(const t of U.values())h.addComponent(t);const l=new W(i,n,h);return N.set(o,l),l}function q(t=O){const e=N.get(t);if(!e&&t===O&&(0,a.getDefaultAppConfig)())return K();if(!e)throw X.create("no-app",{appName:t});return e}function J(){return Array.from(N.values())}async function Z(t){const e=t.name;N.has(e)&&(N.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function Q(t,e,i){var n;let a=null!==(n=M[t])&&void 0!==n?n:t;i&&(a+=`-${i}`);const o=a.match(/\s|\//),r=e.match(/\s|\//);if(o||r){const t=[`Unable to register library "${a}" with version "${e}":`];return o&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&r&&t.push("and"),r&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void c.warn(t.join(" "))}j(new s.Component(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}function tt(t,e){if(null!==t&&"function"!=typeof t)throw X.create("invalid-log-argument");(0,n.setUserLogHandler)(t,e)}function et(t){(0,n.setLogLevel)(t)}const it="firebase-heartbeat-database",st=1,nt="firebase-heartbeat-store";let at=null;function ot(){return at||(at=(0,o.openDB)(it,st,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(nt)}}).catch((t=>{throw X.create("idb-open",{originalErrorMessage:t.message})}))),at}async function rt(t,e){try{const i=(await ot()).transaction(nt,"readwrite"),s=i.objectStore(nt);await s.put(e,ht(t)),await i.done}catch(t){if(t instanceof a.FirebaseError)c.warn(t.message);else{const e=X.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});c.warn(e.message)}}}function ht(t){return`${t.name}!${t.options.appId}`}class lt{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new dt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=ct();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=ct(),{heartbeatsToSend:e,unsentEntries:i}=function(t,e=1024){const i=[];let s=t.slice();for(const n of t){const t=i.find((t=>t.agent===n.agent));if(t){if(t.dates.push(n.date),ut(i)>e){t.dates.pop();break}}else if(i.push({agent:n.agent,dates:[n.date]}),ut(i)>e){i.pop();break}s=s.slice(1)}return{heartbeatsToSend:i,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function ct(){return(new Date).toISOString().substring(0,10)}class dt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.isIndexedDBAvailable)()&&(0,a.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(t){try{const e=await ot();return await e.transaction(nt).objectStore(nt).get(ht(t))}catch(t){if(t instanceof a.FirebaseError)c.warn(t.message);else{const e=X.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});c.warn(e.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:[...i.heartbeats,...t.heartbeats]})}}}function ut(t){return(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t})).length}var mt;mt="",j(new s.Component("platform-logger",(t=>new r(t)),"PRIVATE")),j(new s.Component("heartbeat",(t=>new lt(t)),"PRIVATE")),Q(h,l,mt),Q(h,l,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(t,e,i)=>{i.r(e),i.d(e,{Component:()=>n,ComponentContainer:()=>r,Provider:()=>o});var s=i("./node_modules/@firebase/util/dist/index.esm2017.js");class n{constructor(t,e,i){this.name=t,this.instanceFactory=e,this.type=i,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const a="[DEFAULT]";class o{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new s.Deferred;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const i=this.getOrInitializeService({instanceIdentifier:e});i&&t.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const i=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),s=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(i)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:i})}catch(t){if(s)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:a})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const i=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:i});e.resolve(t)}catch(t){}}}}clearInstance(t=a){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=a){return this.instances.has(t)}getOptions(t=a){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,i=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(i))throw Error(`${this.name}(${i}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:i,options:e});for(const[t,e]of this.instancesDeferred.entries()){i===this.normalizeInstanceIdentifier(t)&&e.resolve(s)}return s}onInit(t,e){var i;const s=this.normalizeInstanceIdentifier(e),n=null!==(i=this.onInitCallbacks.get(s))&&void 0!==i?i:new Set;n.add(t),this.onInitCallbacks.set(s,n);const a=this.instances.get(s);return a&&t(a,s),()=>{n.delete(t)}}invokeOnInitCallbacks(t,e){const i=this.onInitCallbacks.get(e);if(i)for(const s of i)try{s(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let i=this.instances.get(t);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(s=t,s===a?void 0:s),options:e}),this.instances.set(t,i),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(i,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,i)}catch(t){}var s;return i||null}normalizeInstanceIdentifier(t=a){return this.component?this.component.multipleInstances?t:a:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new o(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(t,e,i)=>{i.r(e),i.d(e,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>et,getToken:()=>J,onIdChange:()=>tt});var s=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",h="0.6.4",l=1e4,c=`w:${h}`,d="FIS_v2",u="https://firebaseinstallations.googleapis.com/v1",m=36e5,g={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},p=new a.ErrorFactory("installations","Installations",g);function f(t){return t instanceof a.FirebaseError&&t.code.includes("request-failed")}function v({projectId:t}){return`${u}/projects/${t}/installations`}function b(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function w(t,e){const i=(await e.json()).error;return p.create("request-failed",{requestName:t,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})}function S({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function I(t,{refreshToken:e}){const i=S(t);return i.append("Authorization",function(t){return`${d} ${t}`}(e)),i}async function y(t){const e=await t();return e.status>=500&&e.status<600?t():e}function _(t){return new Promise((e=>{setTimeout(e,t)}))}const E=/^[cdef][\w-]{21}$/,x="";function T(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(i=t,btoa(String.fromCharCode(...i)).replace(/\+/g,"-").replace(/\//g,"_"));var i;return e.substr(0,22)}(t);return E.test(e)?e:x}catch(t){return x}}function A(t){return`${t.appName}!${t.appId}`}const L=new Map;function C(t,e){const i=A(t);P(i,e),function(t,e){const i=B();i&&i.postMessage({key:t,fid:e});k()}(i,e)}function P(t,e){const i=L.get(t);if(i)for(const t of i)t(e)}let D=null;function B(){return!D&&"BroadcastChannel"in self&&(D=new BroadcastChannel("[Firebase] FID Change"),D.onmessage=t=>{P(t.data.key,t.data.fid)}),D}function k(){0===L.size&&D&&(D.close(),D=null)}const z="firebase-installations-database",O=1,M="firebase-installations-store";let N=null;function U(){return N||(N=(0,o.openDB)(z,O,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(M)}})),N}async function R(t,e){const i=A(t),s=(await U()).transaction(M,"readwrite"),n=s.objectStore(M),a=await n.get(i);return await n.put(e,i),await s.done,a&&a.fid===e.fid||C(t,e.fid),e}async function F(t){const e=A(t),i=(await U()).transaction(M,"readwrite");await i.objectStore(M).delete(e),await i.done}async function j(t,e){const i=A(t),s=(await U()).transaction(M,"readwrite"),n=s.objectStore(M),a=await n.get(i),o=e(a);return void 0===o?await n.delete(i):await n.put(o,i),await s.done,!o||a&&a.fid===o.fid||C(t,o.fid),o}async function H(t){let e;const i=await j(t.appConfig,(i=>{const s=function(t){const e=t||{fid:T(),registrationStatus:0};return Y(e)}(i),n=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(p.create("app-offline"))}}const i={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},s=async function(t,e){try{const i=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:i}){const s=v(t),n=S(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={fid:i,authVersion:d,appId:t.appId,sdkVersion:c},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await y((()=>fetch(s,r)));if(h.ok){const t=await h.json();return{fid:t.fid||i,registrationStatus:2,refreshToken:t.refreshToken,authToken:b(t.authToken)}}throw await w("Create Installation",h)}(t,e);return R(t.appConfig,i)}catch(i){throw f(i)&&409===i.customData.serverCode?await F(t.appConfig):await R(t.appConfig,{fid:e.fid,registrationStatus:0}),i}}(t,i);return{installationEntry:i,registrationPromise:s}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:G(t)}:{installationEntry:e}}(t,s);return e=n.registrationPromise,n.installationEntry}));return i.fid===x?{installationEntry:await e}:{installationEntry:i,registrationPromise:e}}async function G(t){let e=await V(t.appConfig);for(;1===e.registrationStatus;)await _(100),e=await V(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:i}=await H(t);return i||e}return e}function V(t){return j(t,(t=>{if(!t)throw p.create("installation-not-found");return Y(t)}))}function Y(t){return 1===(e=t).registrationStatus&&e.registrationTime+l<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function X({appConfig:t,heartbeatServiceProvider:e},i){const s=function(t,{fid:e}){return`${v(t)}/${e}/authTokens:generate`}(t,i),n=I(t,i),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={installation:{sdkVersion:c,appId:t.appId}},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await y((()=>fetch(s,r)));if(h.ok){return b(await h.json())}throw await w("Generate Auth Token",h)}async function W(t,e=!1){let i;const s=await j(t.appConfig,(s=>{if(!K(s))throw p.create("not-registered");const n=s.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+m}(t)}(n))return s;if(1===n.requestStatus)return i=async function(t,e){let i=await $(t.appConfig);for(;1===i.authToken.requestStatus;)await _(100),i=await $(t.appConfig);const s=i.authToken;return 0===s.requestStatus?W(t,e):s}(t,e),s;{if(!navigator.onLine)throw p.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(s);return i=async function(t,e){try{const i=await X(t,e),s=Object.assign(Object.assign({},e),{authToken:i});return await R(t.appConfig,s),i}catch(i){if(!f(i)||401!==i.customData.serverCode&&404!==i.customData.serverCode){const i=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await R(t.appConfig,i)}else await F(t.appConfig);throw i}}(t,e),e}}));return i?await i:s.authToken}function $(t){return j(t,(t=>{if(!K(t))throw p.create("not-registered");const e=t.authToken;return 1===(i=e).requestStatus&&i.requestTime+l<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var i}))}function K(t){return void 0!==t&&2===t.registrationStatus}async function q(t){const e=t,{installationEntry:i,registrationPromise:s}=await H(e);return s?s.catch(console.error):W(e).catch(console.error),i.fid}async function J(t,e=!1){const i=t;await async function(t){const{registrationPromise:e}=await H(t);e&&await e}(i);return(await W(i,e)).token}async function Z(t,e){const i=function(t,{fid:e}){return`${v(t)}/${e}`}(t,e),s={method:"DELETE",headers:I(t,e)},n=await y((()=>fetch(i,s)));if(!n.ok)throw await w("Delete Installation",n)}async function Q(t){const{appConfig:e}=t,i=await j(e,(t=>{if(!t||0!==t.registrationStatus)return t}));if(i){if(1===i.registrationStatus)throw p.create("delete-pending-registration");if(2===i.registrationStatus){if(!navigator.onLine)throw p.create("app-offline");await Z(e,i),await F(e)}}}function tt(t,e){const{appConfig:i}=t;return function(t,e){B();const i=A(t);let s=L.get(i);s||(s=new Set,L.set(i,s)),s.add(e)}(i,e),()=>{!function(t,e){const i=A(t),s=L.get(i);s&&(s.delete(e),0===s.size&&L.delete(i),k())}(i,e)}}function et(t=(0,s.getApp)()){return(0,s._getProvider)(t,"installations").getImmediate()}function it(t){return p.create("missing-app-config-values",{valueName:t})}const st="installations",nt=t=>{const e=t.getProvider("app").getImmediate(),i=function(t){if(!t||!t.options)throw it("App Configuration");if(!t.name)throw it("App Name");const e=["projectId","apiKey","appId"];for(const i of e)if(!t.options[i])throw it(i);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:i,heartbeatServiceProvider:(0,s._getProvider)(e,"heartbeat"),_delete:()=>Promise.resolve()}},at=t=>{const e=t.getProvider("app").getImmediate(),i=(0,s._getProvider)(e,st).getImmediate();return{getId:()=>q(i),getToken:t=>J(i,t)}};(0,s._registerComponent)(new n.Component(st,nt,"PUBLIC")),(0,s._registerComponent)(new n.Component("installations-internal",at,"PRIVATE")),(0,s.registerVersion)(r,h),(0,s.registerVersion)(r,h,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(t,e,i)=>{i.r(e),i.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>s.u,wrap:()=>s.w});var s=i("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:i,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,s.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,s.w)(r.result),t.oldVersion,t.newVersion,(0,s.w)(r.transaction))})),i&&r.addEventListener("blocked",(()=>i())),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const i=indexedDB.deleteDatabase(t);return e&&i.addEventListener("blocked",(()=>e())),(0,s.w)(i).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function l(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const i=e.replace(/FromIndex$/,""),s=e!==i,n=r.includes(i);if(!(i in(s?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return s&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,s.r)((t=>({...t,get:(e,i,s)=>l(e,i)||t.get(e,i,s),has:(e,i)=>!!l(e,i)||t.has(e,i)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(t,e,i)=>{i.r(e),i.d(e,{a:()=>c,i:()=>s,r:()=>u,u:()=>f,w:()=>p});const s=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,l=new WeakMap,c=new WeakMap;let d={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return p(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function m(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...i){const s=t.call(f(this),e,...i);return h.set(s,e.sort?e.sort():[e]),p(s)}}function g(t){return"function"==typeof t?m(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),s()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),s()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),s(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),s()},a=()=>{i(t.error),s()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),c.set(e,t),e}(t);if(l.has(t))return l.get(t);const e=g(t);return e!==t&&(l.set(t,e),c.set(e,t)),e}const f=t=>c.get(t)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(t,e,i)=>{i.r(e),i.d(e,{LogLevel:()=>n,Logger:()=>l,setLogLevel:()=>c,setUserLogHandler:()=>d});const s=[];var n;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(n||(n={}));const a={debug:n.DEBUG,verbose:n.VERBOSE,info:n.INFO,warn:n.WARN,error:n.ERROR,silent:n.SILENT},o=n.INFO,r={[n.DEBUG]:"log",[n.VERBOSE]:"log",[n.INFO]:"info",[n.WARN]:"warn",[n.ERROR]:"error"},h=(t,e,...i)=>{if(e<t.logLevel)return;const s=(new Date).toISOString(),n=r[e];if(!n)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[n](`[${s}]  ${t.name}:`,...i)};class l{constructor(t){this.name=t,this._logLevel=o,this._logHandler=h,this._userLogHandler=null,s.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in n))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,n.DEBUG,...t),this._logHandler(this,n.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,n.VERBOSE,...t),this._logHandler(this,n.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,n.INFO,...t),this._logHandler(this,n.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,n.WARN,...t),this._logHandler(this,n.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,n.ERROR,...t),this._logHandler(this,n.ERROR,...t)}}function c(t){s.forEach((e=>{e.setLogLevel(t)}))}function d(t,e){for(const i of s){let s=null;e&&e.level&&(s=a[e.level]),i.userLogHandler=null===t?null:(e,i,...a)=>{const o=a.map((t=>{if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((t=>t)).join(" ");i>=(null!=s?s:e.logLevel)&&t({level:n[i].toLowerCase(),message:o,args:a,type:e.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(t,e,i)=>{i.r(e),i.d(e,{getAnalytics:()=>s.getAnalytics,getGoogleAnalyticsClientId:()=>s.getGoogleAnalyticsClientId,initializeAnalytics:()=>s.initializeAnalytics,isSupported:()=>s.isSupported,logEvent:()=>s.logEvent,setAnalyticsCollectionEnabled:()=>s.setAnalyticsCollectionEnabled,setConsent:()=>s.setConsent,setCurrentScreen:()=>s.setCurrentScreen,setDefaultEventParameters:()=>s.setDefaultEventParameters,setUserId:()=>s.setUserId,setUserProperties:()=>s.setUserProperties,settings:()=>s.settings});var s=i("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(t,e,i)=>{i.r(e),i.d(e,{FirebaseError:()=>s.FirebaseError,SDK_VERSION:()=>s.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>s._DEFAULT_ENTRY_NAME,_addComponent:()=>s._addComponent,_addOrOverwriteComponent:()=>s._addOrOverwriteComponent,_apps:()=>s._apps,_clearComponents:()=>s._clearComponents,_components:()=>s._components,_getProvider:()=>s._getProvider,_registerComponent:()=>s._registerComponent,_removeServiceInstance:()=>s._removeServiceInstance,deleteApp:()=>s.deleteApp,getApp:()=>s.getApp,getApps:()=>s.getApps,initializeApp:()=>s.initializeApp,onLog:()=>s.onLog,registerVersion:()=>s.registerVersion,setLogLevel:()=>s.setLogLevel});var s=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,s.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(t,e,i)=>{i.r(e),i.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>s.u,wrap:()=>s.w});var s=i("./node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:i,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,s.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,s.w)(r.result),t.oldVersion,t.newVersion,(0,s.w)(r.transaction),t)})),i&&r.addEventListener("blocked",(t=>i(t.oldVersion,t.newVersion,t))),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const i=indexedDB.deleteDatabase(t);return e&&i.addEventListener("blocked",(t=>e(t.oldVersion,t))),(0,s.w)(i).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function l(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const i=e.replace(/FromIndex$/,""),s=e!==i,n=r.includes(i);if(!(i in(s?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return s&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,s.r)((t=>({...t,get:(e,i,s)=>l(e,i)||t.get(e,i,s),has:(e,i)=>!!l(e,i)||t.has(e,i)})))},"./node_modules/idb/build/wrap-idb-value.js":(t,e,i)=>{i.r(e),i.d(e,{a:()=>c,i:()=>s,r:()=>u,u:()=>f,w:()=>p});const s=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,l=new WeakMap,c=new WeakMap;let d={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return p(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function m(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...i){const s=t.call(f(this),e,...i);return h.set(s,e.sort?e.sort():[e]),p(s)}}function g(t){return"function"==typeof t?m(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),s()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),s()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),s(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),s()},a=()=>{i(t.error),s()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),c.set(e,t),e}(t);if(l.has(t))return l.get(t);const e=g(t);return e!==t&&(l.set(t,e),c.set(e,t)),e}const f=t=>c.get(t)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(t,e,i)=>{i.r(e),i.d(e,{Workbox:()=>u,messageSW:()=>s});try{self["workbox:window:4.3.1"]&&_()}catch(s){}var s=function(t,e){return new Promise((function(i){var s=new MessageChannel;s.port1.onmessage=function(t){return i(t.data)},t.postMessage(e,[s.port2])}))};function n(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(s){}var o=function(){var t=this;this.promise=new Promise((function(e,i){t.resolve=e,t.reject=i}))},r=function(t,e){return new URL(t,location).href===new URL(e,location).href},h=function(t,e){Object.assign(this,e,{type:t})};function l(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function c(t,e,i){return i?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function d(){}var u=function(t){var e,i;function u(e,i){var s;return void 0===i&&(i={}),(s=t.call(this)||this).t=e,s.i=i,s.o=0,s.u=new o,s.s=new o,s.h=new o,s.v=s.v.bind(a(a(s))),s.l=s.l.bind(a(a(s))),s.g=s.g.bind(a(a(s))),s.m=s.m.bind(a(a(s))),s}i=t,(e=u).prototype=Object.create(i.prototype),e.prototype.constructor=e,e.__proto__=i;var m,g,p=u.prototype;return p.register=l((function(t){var e,i,s=this,n=(void 0===t?{}:t).immediate,a=void 0!==n&&n;return e=function(){return s.p=Boolean(navigator.serviceWorker.controller),s.P=s.R(),c(s.k(),(function(t){s.B=t,s.P&&(s.O=s.P,s.s.resolve(s.P),s.h.resolve(s.P),s.j(s.P),s.P.addEventListener("statechange",s.l,{once:!0}));var e=s.B.waiting;return e&&r(e.scriptURL,s.t)&&(s.O=e,Promise.resolve().then((function(){s.dispatchEvent(new h("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),s.O&&s.u.resolve(s.O),s.B.addEventListener("updatefound",s.g),navigator.serviceWorker.addEventListener("controllerchange",s.m,{once:!0}),"BroadcastChannel"in self&&(s.C=new BroadcastChannel("workbox"),s.C.addEventListener("message",s.v)),navigator.serviceWorker.addEventListener("message",s.v),s.B}))},(i=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(d):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&i.then?i.then(e):e()})),p.getSW=l((function(){return this.O||this.u.promise})),p.messageSW=l((function(t){return c(this.getSW(),(function(e){return s(e,t)}))})),p.R=function(){var t=navigator.serviceWorker.controller;if(t&&r(t.scriptURL,this.t))return t},p.k=l((function(){var t=this;return function(t,e){try{var i=t()}catch(t){return e(t)}return i&&i.then?i.then(void 0,e):i}((function(){return c(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),p.j=function(t){s(t,{type:"WINDOW_READY",meta:"workbox-window"})},p.g=function(){var t=this.B.installing;this.o>0||!r(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},p.l=function(t){var e=this,i=t.target,s=i.state,n=i===this.W,a=n?"external":"",o={sw:i,originalEvent:t};!n&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new h(a+s,o)),"installed"===s?this._=setTimeout((function(){"installed"===s&&e.B.waiting===i&&e.dispatchEvent(new h(a+"waiting",o))}),200):"activating"===s&&(clearTimeout(this._),n||this.s.resolve(i))},p.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new h("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},p.v=function(t){var e=t.data;this.dispatchEvent(new h("message",{data:e,originalEvent:t}))},m=u,(g=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&n(m.prototype,g),u}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}())}},e={};function i(s){var n=e[s];if(void 0!==n)return n.exports;var a=e[s]={exports:{}};return t[s](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var s in e)i.o(e,s)&&!i.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:e[s]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var s={};(()=>{i.r(s);var t=i("./src/data/index.ts"),e=i("./src/sceneHandler/index.ts"),n=i("./src/constants/index.ts"),a=i("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/common/index.ts"),h=i("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(t){this.lang=t,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new o.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const e=await r.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),await this.loadTitleFeedbackCustomFont(),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const i=await(0,t.getData)();this.majVersion=i.majversion,this.minVersion=i.minversion,this.dataModal=this.createDataModal(i),this.globalInitialization(i),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)}));const s=localStorage.getItem(this.lang+"gamePlayedInfo"),a=s?JSON.parse(s).length-1:0,o=r.Debugger.DebugMode?n.PreviousPlayedLevel+this.lang+"Debug":n.PreviousPlayedLevel+this.lang;localStorage.setItem(o,a.toString()),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}async loadTitleFeedbackCustomFont(){const e=t.customFonts[this.lang]||t.customFonts.default,i=`'${e}', sans-serif`;await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((t=>{t&&(t.style.fontFamily=i)}))}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let i=parseInt(t);isNaN(i)||(e=Math.abs((new Date).getTime()-i))}const i=parseFloat((e?e/864e5:0).toFixed(3)),s={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:i};this.firebaseIntegration.sendSessionStartEvent(s)}logSessionEndFirebaseEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(n.IsCached);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const i=await caches.open("fontCache");if(!await i.match(e)){const t=await fetch(e),s=await t.blob();await i.put(e,new Response(s))}const s=new FontFace(t,`url(${e}) format('truetype')`);await s.load(),document.fonts.add(s)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const e=new a.Workbox("./sw.js",{});await e.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(t.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async t=>{if(!t.ok)return void console.error("Failed to fetch the content file from the server!");const e=await t.json(),i=e.majversion+"."+e.minversion,s=localStorage.getItem("version"+r.lang.toLowerCase());if(i&&s!=i){console.log("Content version mismatch! Reloading...");var a=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+r.lang);var o=a.filter((t=>!t.toString().includes(r.lang)));localStorage.setItem(n.IsCached,JSON.stringify(o)),localStorage.removeItem("version"+r.lang.toLowerCase()),caches.delete(r.lang),this.handleUpdateFoundMessage()}})).catch((t=>{console.error("Error fetching the content file: "+t)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(e){return new t.DataModal(e.title,e.OtherAudios,e.Levels,e.FeedbackTexts,e.RightToLeft,e.FeedbackAudios,e.majversion,e.minversion,e.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const e=Math.min(100,Math.max(0,t.data));e>this.currentProgress&&(this.currentProgress=e,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(t){return 100===t&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(n.IsCached,JSON.stringify(Array.from(this.is_cached.entries())))}catch(t){console.error("Error caching language:",t)}}sendCompletionEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(t)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(t){console.error("Error hiding loading screen:",t)}}handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,r.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=n.AUDIO_URL_PRELOAD;return new Promise(((e,i)=>{const s=t.map((t=>(new h.AudioPlayer).preloadGameAudio(t)));Promise.all(s).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),i(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,