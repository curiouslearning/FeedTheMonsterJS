/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var t={"./node_modules/@firebase/util/dist/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{CONSTANTS:()=>i,DecodeBase64StringError:()=>h,Deferred:()=>I,ErrorFactory:()=>z,FirebaseError:()=>O,MAX_VALUE_MILLIS:()=>vt,RANDOM_FACTOR:()=>wt,Sha1:()=>st,areCookiesEnabled:()=>N,assert:()=>n,assertionError:()=>a,async:()=>at,base64:()=>r,base64Decode:()=>d,base64Encode:()=>c,base64urlEncodeWithoutPadding:()=>l,calculateBackoffMillis:()=>bt,contains:()=>X,createMockUserToken:()=>y,createSubscribe:()=>it,decode:()=>j,deepCopy:()=>u,deepEqual:()=>q,deepExtend:()=>g,errorPrefix:()=>ht,extractQuerystring:()=>et,getDefaultAppConfig:()=>w,getDefaultEmulatorHost:()=>f,getDefaultEmulatorHostnameAndPort:()=>v,getDefaults:()=>p,getExperimentalSetting:()=>b,getGlobal:()=>m,getModularInstance:()=>yt,getUA:()=>S,isAdmin:()=>V,isBrowser:()=>x,isBrowserExtension:()=>T,isElectron:()=>P,isEmpty:()=>Y,isIE:()=>L,isIndexedDBAvailable:()=>B,isMobileCordova:()=>_,isNode:()=>E,isNodeSdk:()=>D,isReactNative:()=>C,isSafari:()=>k,isUWP:()=>A,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>F,map:()=>K,ordinal:()=>It,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>tt,safeGet:()=>$,stringLength:()=>gt,stringToByteArray:()=>ut,stringify:()=>R,uuidv4:()=>mt,validateArgCount:()=>rt,validateCallback:()=>lt,validateContextObject:()=>dt,validateIndexedDBOpenable:()=>M,validateNamespace:()=>ct});const i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},n=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},o=function(t){const e=[];let s=0;for(let i=0;i<t.length;i++){let n=t.charCodeAt(i);n<128?e[s++]=n:n<2048?(e[s++]=n>>6|192,e[s++]=63&n|128):55296==(64512&n)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(n=65536+((1023&n)<<10)+(1023&t.charCodeAt(++i)),e[s++]=n>>18|240,e[s++]=n>>12&63|128,e[s++]=n>>6&63|128,e[s++]=63&n|128):(e[s++]=n>>12|224,e[s++]=n>>6&63|128,e[s++]=63&n|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const s=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let e=0;e<t.length;e+=3){const n=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,h=r?t[e+2]:0,c=n>>2,l=(3&n)<<4|o>>4;let d=(15&o)<<2|h>>6,u=63&h;r||(u=64,a||(d=64)),i.push(s[c],s[l],s[d],s[u])}return i.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(o(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let s=0,i=0;for(;s<t.length;){const n=t[s++];if(n<128)e[i++]=String.fromCharCode(n);else if(n>191&&n<224){const a=t[s++];e[i++]=String.fromCharCode((31&n)<<6|63&a)}else if(n>239&&n<365){const a=((7&n)<<18|(63&t[s++])<<12|(63&t[s++])<<6|63&t[s++])-65536;e[i++]=String.fromCharCode(55296+(a>>10)),e[i++]=String.fromCharCode(56320+(1023&a))}else{const a=t[s++],o=t[s++];e[i++]=String.fromCharCode((15&n)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const s=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let e=0;e<t.length;){const n=s[t.charAt(e++)],a=e<t.length?s[t.charAt(e)]:0;++e;const o=e<t.length?s[t.charAt(e)]:64;++e;const r=e<t.length?s[t.charAt(e)]:64;if(++e,null==n||null==a||null==o||null==r)throw new h;const c=n<<2|a>>4;if(i.push(c),64!==o){const t=a<<4&240|o>>2;if(i.push(t),64!==r){const t=o<<6&192|r;i.push(t)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class h extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const c=function(t){const e=o(t);return r.encodeByteArray(e,!0)},l=function(t){return c(t).replace(/\./g,"")},d=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function u(t){return g(void 0,t)}function g(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(const s in e)e.hasOwnProperty(s)&&"__proto__"!==s&&(t[s]=g(t[s],e[s]));return t}function m(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s.g)return s.g;throw new Error("Unable to locate global object.")}const p=()=>{try{return m().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&d(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},f=t=>{var e,s;return null===(s=null===(e=p())||void 0===e?void 0:e.emulatorHosts)||void 0===s?void 0:s[t]},v=t=>{const e=f(t);if(!e)return;const s=e.lastIndexOf(":");if(s<=0||s+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const i=parseInt(e.substring(s+1),10);return"["===e[0]?[e.substring(1,s-1),i]:[e.substring(0,s),i]},w=()=>{var t;return null===(t=p())||void 0===t?void 0:t.config},b=t=>{var e;return null===(e=p())||void 0===e?void 0:e[`_${t}`]};class I{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,s)=>{e?this.reject(e):this.resolve(s),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,s))}}}function y(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const s=e||"demo-project",i=t.iat||0,n=t.sub||t.user_id;if(!n)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${s}`,aud:s,iat:i,exp:i+3600,auth_time:i,sub:n,user_id:n,firebase:{sign_in_provider:"custom",identities:{}}},t);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(a)),""].join(".")}function S(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function _(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(S())}function E(){var t;const e=null===(t=p())||void 0===t?void 0:t.forceEnvironment;if("node"===e)return!0;if("browser"===e)return!1;try{return"[object process]"===Object.prototype.toString.call(s.g.process)}catch(t){return!1}}function x(){return"object"==typeof self&&self.self===self}function T(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function P(){return S().indexOf("Electron/")>=0}function L(){const t=S();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function A(){return S().indexOf("MSAppHost/")>=0}function D(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN}function k(){return!E()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function B(){try{return"object"==typeof indexedDB}catch(t){return!1}}function M(){return new Promise(((t,e)=>{try{let s=!0;const i="validate-browser-context-for-indexeddb-analytics-module",n=self.indexedDB.open(i);n.onsuccess=()=>{n.result.close(),s||self.indexedDB.deleteDatabase(i),t(!0)},n.onupgradeneeded=()=>{s=!1},n.onerror=()=>{var t;e((null===(t=n.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function N(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class O extends Error{constructor(t,e,s){super(e),this.code=t,this.customData=s,this.name="FirebaseError",Object.setPrototypeOf(this,O.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(t,e,s){this.service=t,this.serviceName=e,this.errors=s}create(t,...e){const s=e[0]||{},i=`${this.service}/${t}`,n=this.errors[t],a=n?function(t,e){return t.replace(U,((t,s)=>{const i=e[s];return null!=i?String(i):`<${s}?>`}))}(n,s):"Error",o=`${this.serviceName}: ${a} (${i}).`;return new O(i,o,s)}}const U=/\{\$([^}]+)}/g;function F(t){return JSON.parse(t)}function R(t){return JSON.stringify(t)}const j=function(t){let e={},s={},i={},n="";try{const a=t.split(".");e=F(d(a[0])||""),s=F(d(a[1])||""),n=a[2],i=s.d||{},delete s.d}catch(t){}return{header:e,claims:s,data:i,signature:n}},H=function(t){const e=j(t).claims,s=Math.floor((new Date).getTime()/1e3);let i=0,n=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?i=e.nbf:e.hasOwnProperty("iat")&&(i=e.iat),n=e.hasOwnProperty("exp")?e.exp:i+86400),!!s&&!!i&&!!n&&s>=i&&s<=n},G=function(t){const e=j(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},W=function(t){const e=j(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},V=function(t){const e=j(t).claims;return"object"==typeof e&&!0===e.admin};function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function $(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function Y(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function K(t,e,s){const i={};for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=e.call(s,t[n],n,t));return i}function q(t,e){if(t===e)return!0;const s=Object.keys(t),i=Object.keys(e);for(const n of s){if(!i.includes(n))return!1;const s=t[n],a=e[n];if(J(s)&&J(a)){if(!q(s,a))return!1}else if(s!==a)return!1}for(const t of i)if(!s.includes(t))return!1;return!0}function J(t){return null!==t&&"object"==typeof t}function Z(t,e=2e3){const s=new I;return setTimeout((()=>s.reject("timeout!")),e),t.then(s.resolve,s.reject),s.promise}function Q(t){const e=[];for(const[s,i]of Object.entries(t))Array.isArray(i)?i.forEach((t=>{e.push(encodeURIComponent(s)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(s)+"="+encodeURIComponent(i));return e.length?"&"+e.join("&"):""}function tt(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[s,i]=t.split("=");e[decodeURIComponent(s)]=decodeURIComponent(i)}})),e}function et(t){const e=t.indexOf("?");if(!e)return"";const s=t.indexOf("#",e);return t.substring(e,s>0?s:void 0)}class st{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(t,e){e||(e=0);const s=this.W_;if("string"==typeof t)for(let i=0;i<16;i++)s[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(let i=0;i<16;i++)s[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(let t=16;t<80;t++){const e=s[t-3]^s[t-8]^s[t-14]^s[t-16];s[t]=4294967295&(e<<1|e>>>31)}let i,n,a=this.chain_[0],o=this.chain_[1],r=this.chain_[2],h=this.chain_[3],c=this.chain_[4];for(let t=0;t<80;t++){t<40?t<20?(i=h^o&(r^h),n=1518500249):(i=o^r^h,n=1859775393):t<60?(i=o&r|h&(o|r),n=2400959708):(i=o^r^h,n=3395469782);const e=(a<<5|a>>>27)+i+c+n+s[t]&4294967295;c=h,h=r,r=4294967295&(o<<30|o>>>2),o=a,a=e}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295}update(t,e){if(null==t)return;void 0===e&&(e=t.length);const s=e-this.blockSize;let i=0;const n=this.buf_;let a=this.inbuf_;for(;i<e;){if(0===a)for(;i<=s;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(n[a]=t.charCodeAt(i),++a,++i,a===this.blockSize){this.compress_(n),a=0;break}}else for(;i<e;)if(n[a]=t[i],++a,++i,a===this.blockSize){this.compress_(n),a=0;break}}this.inbuf_=a,this.total_+=e}digest(){const t=[];let e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let t=this.blockSize-1;t>=56;t--)this.buf_[t]=255&e,e/=256;this.compress_(this.buf_);let s=0;for(let e=0;e<5;e++)for(let i=24;i>=0;i-=8)t[s]=this.chain_[e]>>i&255,++s;return t}}function it(t,e){const s=new nt(t,e);return s.subscribe.bind(s)}class nt{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,s){let i;if(void 0===t&&void 0===e&&void 0===s)throw new Error("Missing Observer.");i=function(t,e){if("object"!=typeof t||null===t)return!1;for(const s of e)if(s in t&&"function"==typeof t[s])return!0;return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:s},void 0===i.next&&(i.next=ot),void 0===i.error&&(i.error=ot),void 0===i.complete&&(i.complete=ot);const n=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?i.error(this.finalError):i.complete()}catch(t){}})),this.observers.push(i),n}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function at(t,e){return(...s)=>{Promise.resolve(!0).then((()=>{t(...s)})).catch((t=>{e&&e(t)}))}}function ot(){}const rt=function(t,e,s,i){let n;if(i<e?n="at least "+e:i>s&&(n=0===s?"none":"no more than "+s),n){throw new Error(t+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+n+".")}};function ht(t,e){return`${t} failed: ${e} argument `}function ct(t,e,s){if((!s||e)&&"string"!=typeof e)throw new Error(ht(t,"namespace")+"must be a valid firebase namespace.")}function lt(t,e,s,i){if((!i||s)&&"function"!=typeof s)throw new Error(ht(t,e)+"must be a valid function.")}function dt(t,e,s,i){if((!i||s)&&("object"!=typeof s||null===s))throw new Error(ht(t,e)+"must be a valid context object.")}const ut=function(t){const e=[];let s=0;for(let i=0;i<t.length;i++){let a=t.charCodeAt(i);if(a>=55296&&a<=56319){const e=a-55296;i++,n(i<t.length,"Surrogate pair missing trail surrogate.");a=65536+(e<<10)+(t.charCodeAt(i)-56320)}a<128?e[s++]=a:a<2048?(e[s++]=a>>6|192,e[s++]=63&a|128):a<65536?(e[s++]=a>>12|224,e[s++]=a>>6&63|128,e[s++]=63&a|128):(e[s++]=a>>18|240,e[s++]=a>>12&63|128,e[s++]=a>>6&63|128,e[s++]=63&a|128)}return e},gt=function(t){let e=0;for(let s=0;s<t.length;s++){const i=t.charCodeAt(s);i<128?e++:i<2048?e+=2:i>=55296&&i<=56319?(e+=4,s++):e+=3}return e},mt=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))},pt=1e3,ft=2,vt=144e5,wt=.5;function bt(t,e=pt,s=ft){const i=e*Math.pow(s,t),n=Math.round(wt*i*(Math.random()-.5)*2);return Math.min(vt,i+n)}function It(t){return Number.isFinite(t)?t+function(t){t=Math.abs(t);const e=t%100;if(e>=10&&e<=20)return"th";const s=t%10;if(1===s)return"st";if(2===s)return"nd";if(3===s)return"rd";return"th"}(t):`${t}`}function yt(t){return t&&t._delegate?t._delegate:t}},"./global-variables.ts":(t,e,s)=>{s.r(e),s.d(e,{Debugger:()=>c,font:()=>h,lang:()=>r,pseudoId:()=>o});var i=s("./src/common/common.ts"),n=s("./src/common/utils.ts");const a=new URLSearchParams(window.location.search);var o=a.get("cr_user_id"),r=null==a.get("cr_lang")?"english":a.get("cr_lang");const h=n.Utils.getLanguageSpecificFont(r),c={DevelopmentLink:!!window.location.href.includes(i.DevelopmentServer),DebugMode:!1};window.feedbackTextWorkerPath="./workers/feedback-text-worker.js"},"./src/Firebase/base-firebase-integration.ts":(t,e,s)=>{s.r(e),s.d(e,{BaseFirebaseIntegration:()=>o});var i=s("./node_modules/firebase/app/dist/esm/index.esm.js"),n=s("./node_modules/firebase/analytics/dist/esm/index.esm.js"),a=s("./src/Firebase/firebase-config.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(t,e){try{(0,n.logEvent)(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,n.logEvent)(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}initializeFirebase(){try{this.firebaseApp=(0,i.initializeApp)(a.firebaseConfig),this.analytics=(0,n.getAnalytics)(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}},"./src/Firebase/firebase-config.ts":(t,e,s)=>{s.r(e),s.d(e,{firebaseConfig:()=>i});const i={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(t,e,s)=>{s.r(e),s.d(e,{FirebaseIntegration:()=>n});var i=s("./src/Firebase/base-firebase-integration.ts");class n extends i.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return n.instance||(n.instance=new n),n.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}},"./src/common/common.ts":(t,e,s)=>{function i(t,e){const s={};let i=0;const n=Object.keys(t).length;for(let a in t)s[a]=new Image,s[a].onload=function(){++i>=n&&e(s)},s[a].src=t[a]}s.r(e),s.d(e,{ButtonClick:()=>f,DevelopmentServer:()=>S,EndScene1:()=>T,FeedbackAudio:()=>g,FirebaseUserClicked:()=>n,FirebaseUserInstall:()=>a,GameScene1:()=>x,IntroMusic:()=>m,IsCached:()=>d,LevelEndAudio:()=>I,LevelSelection1:()=>E,MonsterAudio:()=>u,NativePlayButton:()=>h,PWAInstallStatus:()=>o,PhraseAudio:()=>b,PreviousPlayedLevel:()=>c,PromptAudio:()=>p,StartScene1:()=>_,StoneMusic:()=>w,StoreMonsterPhaseNumber:()=>l,TimeOver:()=>v,UrlSubstring:()=>y,UserCancelled:()=>r,loadImages:()=>i});const n="user_clicked",a="user_installed",o="pwa_installed_status",r="user_cancel_installation",h="native_playbutton_clicked",c="storePreviousPlayedLevel",l="storeMonsterPhaseNumber",d="is_cached",u="monster_audio",g="feedback_audio",m="intro_music",p="prompt_audio",f="button_click",v="time_over",w="stone_music",b="phrase_audio",I="level_end_audio",y="/feedthemonster",S="https://feedthemonsterdev.curiouscontent.org",_="StartScene1",E="LevelSelection1",x="GameScene1",T="EndScene1"},"./src/common/event-names.ts":(t,e,s)=>{s.r(e),s.d(e,{CLICK:()=>d,LOADPUZZLE:()=>i,MOUSEDOWN:()=>o,MOUSEMOVE:()=>a,MOUSEUP:()=>r,STONEDROP:()=>n,TOUCHEND:()=>l,TOUCHMOVE:()=>c,TOUCHSTART:()=>h,VISIBILITY_CHANGE:()=>u});const i="loadpuzzle",n="stonesdropped",a="mousemove",o="mousedown",r="mouseup",h="touchstart",c="touchmove",l="touchend",d="click",u="visibilitychange"},"./src/common/index.ts":(t,e,s)=>{s.r(e),s.d(e,{CLICK:()=>o.CLICK,LOADPUZZLE:()=>o.LOADPUZZLE,MOUSEDOWN:()=>o.MOUSEDOWN,MOUSEMOVE:()=>o.MOUSEMOVE,MOUSEUP:()=>o.MOUSEUP,PreviousPlayedLevel:()=>i.PreviousPlayedLevel,STONEDROP:()=>o.STONEDROP,StoneConfig:()=>n.StoneConfig,TOUCHEND:()=>o.TOUCHEND,TOUCHMOVE:()=>o.TOUCHMOVE,TOUCHSTART:()=>o.TOUCHSTART,Utils:()=>a.Utils,VISIBILITY_CHANGE:()=>o.VISIBILITY_CHANGE,loadImages:()=>i.loadImages});var i=s("./src/common/common.ts"),n=s("./src/common/stone-config.ts"),a=s("./src/common/utils.ts"),o=s("./src/common/event-names.ts")},"./src/common/level-config.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelConfig:()=>i});class i{x;y;index;drawready;img;constructor(t,e,s){this.x=t,this.y=e,this.index=s,this.drawready=!1,this.img=new Image,this.img.src="./assets/images/mapIcon.png",this.img.onload=function(){}}}},"./src/common/stone-config.ts":(t,e,s)=>{s.r(e),s.d(e,{StoneConfig:()=>n});var i=s("./global-variables.ts");class n{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,s,i,n,a,o,r,h){this.x=n,this.y=a,this.origx=n,this.origy=a,this.canvasWidth=e,this.canvasHeight=s,this.tutorialInstance=h,this.text=i,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/13?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+25)):(this.imageSize=this.canvasHeight/13,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,s,i)=>-s/2*(Math.cos(Math.PI*t/i)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(t){this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}},"./src/common/utils.ts":(t,e,s)=>{s.r(e),s.d(e,{Utils:()=>a,createRippleEffect:()=>o});var i=s("./global-variables.ts"),n=s("./src/data/i18-font-mapping.ts");class a{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return i.Debugger.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in n.default)if(t.toLowerCase()===e)return n.default[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function o(t){const e=t;if(!e)throw new Error("Canvas context is null");let s=0,i=0;let n=10,a=10;return function(t,o,r){r&&(n=0,a=0),s=t,i=o,e.beginPath(),e.arc(s,i,n,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(s,i,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),n+=.5,a+=.5,(n>=60||a>=60)&&(n=10,a=10)}}},"./src/components/audio-player.ts":(t,e,s)=>{s.r(e),s.d(e,{AudioPlayer:()=>i});class i{audioContext;sourceNode;audioQueue;promptAudioBuffer;static audioBuffers=new Map;audioSourcs=[];constructor(){this.audioContext=n.getAudioContext(),this.sourceNode=null,this.audioQueue=[]}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(i.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&i.audioBuffers.set(t,e)}playAudio(t){const e=i.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};playButtonClickSound=t=>{const e=i.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((s=>{this.audioContext?.decodeAudioData(s,(s=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=s,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)};async loadAndDecodeAudio(t){return new Promise((async(e,s)=>{try{const s=await fetch(t),i=await s.arrayBuffer();e(await this.audioContext.decodeAudioData(i))}catch(t){console.error("Error loading or decoding audio:",t),s(t)}}))}}class n{static instance=null;static getAudioContext(){return n.instance||(n.instance=new(window.AudioContext||window.webkitAudioContext)),n.instance}}},"./src/components/background.ts":(t,e,s)=>{s.r(e),s.d(e,{Background:()=>o});var i=s("./src/common/common.ts"),n=s("./src/constants/index.ts"),a={bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.HILL_IMAGE_1,pillerImg:n.PILLAR_IMAGE_1,fenchImg:n.FENCE_IMAGE_1,autumnBgImg:n.AUTUMN_BACKGROUND_1,autumnHillImg:n.AUTUMN_HILL_1,autumnPillerImg:n.AUTUMN_PILLAR_1,autumnSignImg:n.AUTUMN_SIGN_1,autumnFenceImg:n.AUTUMN_FENCE_1,winterBgImg:n.WINTER_BACKGROUND_1,winterHillImg:n.WINTER_HILL_1,winterSignImg:n.WINTER_SIGN_1,winterFenceImg:n.WINTER_FENCE_1,winterPillerImg:n.WINTER_PILLAR_1};class o{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,e,s,n){this.width=e,this.height=s,this.context=t,this.levelNumber=n,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,i.loadImages)(a,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,this.cancel_button_image=new Image,this.cancel_button_image.src="./assets/images/close_btn.png",this.cancel_button_image.onload=t=>{this.imagesLoaded=!0,this.cancel_button_image=this.cancel_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.cancel_button_image,this.posX,this.posY,.15*this.canvas.width,.15*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/close-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.close_button_image=new Image,this.close_button_image.src="./assets/images/map_btn.png",this.close_button_image.onload=t=>{this.imagesLoaded=!0,this.close_button_image=this.close_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.close_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/next-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;constructor(t,e,s,i,n){this.posX=i,this.posY=n,this.context=t,this.width=e,this.height=s,this.next_button_image=new Image,this.next_button_image.src="./assets/images/next_btn.png",this.next_button_image.onload=t=>{this.imagesLoaded=!0,this.next_button_image=this.next_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.next_button_image,this.posX,this.posY,.19*this.width,.19*this.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.width/2)*(t-this.posX-.19*this.width/2)+(e-this.posY-.19*this.width/2)*(e-this.posY-.19*this.width/2))<.19*this.width/2)return!0}}},"./src/components/buttons/no-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.no_button_image=new Image,this.no_button_image.src="./assets/images/close_btn.png",this.no_button_image.onload=t=>{this.imagesLoaded=!0,this.no_button_image=this.no_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.no_button_image,this.posX+5,this.posY+10,.18*this.canvas.width,.18*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/pause-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,this.pause_button_image=new Image,this.pause_button_image.src="./assets/images/pause_v01.png",this.pause_button_image.onload=t=>{this.imagesLoaded=!0,this.pause_button_image=this.pause_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.pause_button_image,this.posX,this.posY,.09*this.canvas.height,.09*this.canvas.height)}onClick(t,e){if(Math.sqrt((t-this.posX-.09*this.canvas.height/2)*(t-this.posX-.09*this.canvas.height/2)+(e-this.posY-.09*this.canvas.height/2)*(e-this.posY-.09*this.canvas.height/2))<.09*this.canvas.height/2)return!0}}},"./src/components/buttons/retry-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.retry_button_image=new Image,this.retry_button_image.src="./assets/images/retry_btn.png",this.retry_button_image.onload=t=>{this.imagesLoaded=!0,this.retry_button_image=this.retry_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.retry_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/yes-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.yes_button_image=new Image,this.yes_button_image.src="./assets/images/confirm_btn.png",this.yes_button_image.onload=t=>{this.imagesLoaded=!0,this.yes_button_image=this.yes_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.yes_button_image,this.posX-5,this.posY,.2*this.canvas.width,.2*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/feedback-particle-effect/feedback-text-effects.ts":(t,e,s)=>{s.r(e),s.d(e,{FeedbackTextEffects:()=>a});var i=s("./src/components/feedback-particle-effect/text-particle.ts"),n=s("./global-variables.ts");class a{context;canvasWidth;canvasHeight;textX;textY;fontSize;lineHeight;maxTextWidth;particleDuration;startTime;particles;gap;mouse;textWorker;constructor(t,e,s){this.context=t,this.canvasWidth=e,this.canvasHeight=s,this.textX=this.canvasWidth/1.8,this.textY=this.canvasHeight/2,this.fontSize=this.canvasWidth/7.5,this.lineHeight=.8*this.fontSize,this.maxTextWidth=5*this.canvasWidth,this.particleDuration=5e3,this.startTime=null,this.particles=[],this.gap=3,this.mouse={radius:2e3,x:0,y:0},this.textWorker=new Worker(window.feedbackTextWorkerPath),this.textWorker.addEventListener("message",this.handleTextWorkerMessage.bind(this))}wrapText(t){const e=this.context.createLinearGradient(0,0,this.canvasWidth,this.canvasHeight);e.addColorStop(.3,"#F8E218"),e.addColorStop(.5,"#F8E218"),e.addColorStop(.7,"#E39D37"),this.context.fillStyle=e,this.context.textAlign="center",this.context.textBaseline="middle",this.context.lineWidth=3,this.context.strokeStyle="#A46225",this.context.font=`${this.fontSize-.3*t.length}px ${n.font}, monospace`;let s=[],i=t.split(" "),a=0,o="";for(let t=0;t<i.length;t++){let e=o+i[t]+" ";this.context.measureText(e).width>this.maxTextWidth?(o=i[t]+"",a++):o=e,s[a]=o}let r=this.lineHeight*a;this.textY=this.canvasHeight/4.2-r/2;t=t.trim(),s.forEach(((t,e)=>{let s=t.lastIndexOf(" ",t.lastIndexOf(" ")-1);if(this.fontSize*t.length>1.7*this.canvasWidth&&-1!=s){let i=t.slice(0,s),n=" "+t.slice(s+1);this.context.fillText(i,this.textX,this.textY+e*this.lineHeight),this.context.fillText(n,this.textX,this.textY+e*this.lineHeight+this.canvasHeight/12)}else this.context.fillText(t,this.textX,this.textY+e*this.lineHeight)})),this.convertToParticle()}handleTextWorkerMessage(t){this.particles=t.data.map((({x:t,y:e,color:s})=>new i.TextParticle(this,t,e,s)))}convertToParticle(){const t=this.context.getImageData(0,0,this.canvasWidth,this.canvasHeight);this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.textWorker.postMessage({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,gap:this.gap,pixels:t.data})}render(){this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.particles.forEach((t=>{t.draw(),t.update()}))}updateParticles(){this.textWorker.postMessage({particles:this.particles,particleDuration:this.particleDuration,startTime:this.startTime})}clearParticle(){this.particles=[]}unregisterEventListener(){this.textWorker.removeEventListener("message",this.handleTextWorkerMessage),this.textWorker.terminate()}}},"./src/components/feedback-particle-effect/sure-popup.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/common/event-names.ts"),n=s("./src/components/audio-player.ts"),a=s("./src/components/buttons/yes-button.ts"),o=s("./src/components/buttons/no-button.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,s){this.canvas=t,this.yesCallback=e,this.noCallback=s,this.context=this.canvas.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.yesButton=new a.default(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new o.default(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0}}addListner=()=>{this.canvas.addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.yesButton.onClick(i,n)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(i,n)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};dispose=()=>{this.canvas.removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/feedback-particle-effect/text-particle.ts":(t,e,s)=>{s.r(e),s.d(e,{TextParticle:()=>i});class i{feedbackTextEffects;x;y;color;originX;originY;size;ease;constructor(t,e,s,i){this.feedbackTextEffects=t,this.x=Math.random()*this.feedbackTextEffects.canvasWidth,this.y=0,this.color=i,this.originX=e,this.originY=s,this.size=this.feedbackTextEffects.gap,this.ease=.1*Math.random()+.055}draw(){this.feedbackTextEffects.context.fillStyle=this.color,this.feedbackTextEffects.context.fillRect(this.x,this.y,this.size,this.size)}update(){this.x+=(this.originX-this.x)*this.ease,this.y+=this.originY-this.y}}},"./src/components/index.ts":(t,e,s)=>{s.r(e),s.d(e,{AudioPlayer:()=>g.AudioPlayer,Background:()=>d.Background,FeedbackTextEffects:()=>u.FeedbackTextEffects,LevelIndicators:()=>n.LevelIndicators,Monster:()=>c.Monster,PauseButton:()=>i.default,PausePopUp:()=>a.default,PromptText:()=>o.PromptText,StoneHandler:()=>r.default,TimerTicking:()=>l.TimerTicking,Tutorial:()=>h.Tutorial});var i=s("./src/components/buttons/pause-button.ts"),n=s("./src/components/level-indicator.ts"),a=s("./src/components/pause-popup.ts"),o=s("./src/components/prompt-text.ts"),r=s("./src/components/stone-handler.ts"),h=s("./src/components/tutorial.ts"),c=s("./src/components/monster.ts"),l=s("./src/components/timer-ticking.ts"),d=s("./src/components/background.ts"),u=s("./src/components/feedback-particle-effect/feedback-text-effects.ts"),g=s("./src/components/audio-player.ts")},"./src/components/level-indicator.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelIndicators:()=>a});var i=s("./src/common/common.ts"),n=s("./src/events/EventManager.ts");class a extends n.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=s,this.images={level_indicator:"./assets/images/levels_v01.png",bar_empty:"./assets/images/bar_empty_v01.png",bar_full:"./assets/images/bar_full_v01.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}},"./src/components/monster.ts":(t,e,s)=>{s.r(e),s.d(e,{Monster:()=>a});var i=s("./src/common/common.ts"),n=s("./src/events/EventManager.ts");class a extends n.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.changeToIdleAnimation(),this.imagesLoaded=!0,s&&s()}))}update(t){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=t,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(t){this.image.src=t}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}},"./src/components/pause-popup.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./src/components/buttons/cancel-button.ts"),n=s("./src/components/buttons/close-button.ts"),a=s("./src/components/buttons/retry-button.ts"),o=s("./src/common/event-names.ts"),r=s("./src/components/audio-player.ts"),h=s("./src/components/feedback-particle-effect/sure-popup.ts"),c=s("./global-variables.ts");class l{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,s,o,c){this.canvas=t,this.callback=e,this.gameplayData=c,this.switchToLevelSelection=s,this.reloadScene=o;const l=document.getElementById("canvas");this.context=l.getContext("2d"),this.audioPlayer=new r.AudioPlayer,this.cancelButton=new i.default(this.context,this.canvas),this.retryButton=new a.default(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new n.default(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0},this.retrySurePopup=new h.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new h.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(o.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.cancelButton.onClick(i,n)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(i,n)&&("english"==c.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(i,n)&&("english"==c.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==c.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==c.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};playAreYouSureSound=()=>{this.audioPlayer.playAudio("./assets/audios/are-you-sure.mp3")};dispose=()=>{document.getElementById("canvas").removeEventListener(o.CLICK,this.handleMouseClick,!1)}}},"./src/components/play-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/common/common.ts"),n=s("./src/Firebase/firebase-integration.ts"),a=s("./global-variables.ts"),o=s("./src/data/api-data.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,s,a){this.posX=s,this.posY=a,this.context=t,this.canvas=e,this.firebaseIntegration=new n.FirebaseIntegration,this.init(),this.images={pause_button_image:"./assets/images/Play_button.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await(0,o.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const s=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),s<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}},"./src/components/prompt-text.ts":(t,e,s)=>{s.r(e),s.d(e,{PromptText:()=>h});var i=s("./src/events/EventManager.ts"),n=s("./src/common/utils.ts"),a=s("./src/components/audio-player.ts"),o=s("./src/common/event-names.ts"),r=s("./global-variables.ts");class h extends i.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,s,i,n){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=i,this.rightToLeft=n,this.currentPromptText=s.prompt.promptText,this.currentPuzzleData=s,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.onClick(i,n)&&this.playSound()};getPromptAudioUrl=()=>n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var s=this.calculateFont();const i=this.promptImageWidth,n=this.promptImageHeight;if(this.context.font=`${s}px ${r.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var a=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(a).width/2,e),this.context.fillStyle="black",this.context.fillText(a,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,n/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let s=this.targetStones.length-1;s>=0;s--)this.droppedStones>s||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[s],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[s],t,e)),t=t+this.context.measureText(this.targetStones[s]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,n/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-i),e=.33*(this.height-n);this.context.drawImage(this.promptPlayButton,t,e,i/4,n/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,n/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),s=this.promptImageWidth,i=this.promptImageHeight;var n=this.calculateFont();this.context.font=`${n}px ${r.font}, monospace`;let a=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var h=this.currentPuzzleData.targetStones[0].split("");for(let n=0;n<t.length;n++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){h.includes(t[n])?(h=h.slice(1,h.length),this.context.fillStyle="red",this.context.fillText(t[n],a,e)):(this.context.fillStyle="black",this.context.fillText(t[n],a,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>n||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(t[n],a,e)):(this.context.fillStyle="red",this.context.fillText(t[n],a,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4)}o=(this.context.measureText(t[n]).width+this.context.measureText(t[n+1]).width)/2,a+=o}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,s=(this.width-t)/2,i=(this.height-e)/5;this.context.drawImage(this.prompt_image,s,i,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,"./assets/images/promptTextBg.png"),e=this.loadImage(this.promptPlayButton,"./assets/images/promptPlayButton.png");await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((s,i)=>{t.onload=()=>{s()},t.src=e,t.onerror=t=>{i(t)}}))}}},"./src/components/stone-handler.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>c});var i=s("./src/common/index.ts"),n=s("./src/events/EventManager.ts"),a=s("./src/components/tutorial.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/data/game-score.ts"),h=s("./src/constants/index.ts");class c extends n.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==r.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,s,n,r,c){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=s,this.levelData=n,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(h.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(r),this.puzzleStartTime=new Date,this.tutorial=new a.Tutorial(t,e.width,e.height,s),this.stonebg=new Image,this.stonebg.src=h.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new o.AudioPlayer,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new o.AudioPlayer,this.timerTickingInstance=c,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(t){const e=this.getFoilStones();for(let s=0;s<e.length;s++)e[s]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[s]),this.foilStones.push(new i.StoneConfig(this.context,this.canvas.width,this.canvas.height,e[s],this.stonePos[s][0],this.stonePos[s][1],t,this.timerTickingInstance,s==e.length-1?this.tutorial:null))}draw(t){for(let e=0;e<this.foilStones.length;e++)this.foilStones[e].draw(t);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}isDroppedStoneCorrect(t){return t==this.correctTargetStone}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,s=!1){const i=s?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,i,s,t),i}processLetterDropFeedbackAudio(t,e,s,i){if(e){(s?i===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,h.AUDIO_PATH_EATS,(0,h.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,h.AUDIO_PATH_EATS,h.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?h.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=i.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,h.AUDIO_PATH_EATS,(0,h.AUDIO_PATH_CHEERING_FUNC)(e),h.AUDIO_PATH_POINTS_ADD,i.Utils.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}}},"./src/components/timer-ticking.ts":(t,e,s)=>{s.r(e),s.d(e,{TimerTicking:()=>o});var i=s("./src/common/common.ts"),n=s("./src/events/EventManager.ts"),a=s("./src/components/audio-player.ts");class o extends n.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=s,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new a.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:"./assets/images/timer_empty.png",rotating_clock:"./assets/images/timer.png",timer_full:"./assets/images/timer_full.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio("./assets/audios/timeout.mp3"),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,5,.09*this.height,.12*this.width,.06*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/tutorial.ts":(t,e,s)=>{s.r(e),s.d(e,{Tutorial:()=>a});var i=s("./src/common/utils.ts"),n=s("./src/data/game-score.ts");class a{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,s,n){this.width=e,this.height=s,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=n>=0?n:null,this.tutorialImg=new Image,this.tutorialImg.src="./assets/images/tutorial_hand.png",this.drawRipple=(0,i.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,s){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const i=this.x-this.endx+this.absdx,n=this.y-this.endy+this.absdy;let a=100*Math.sqrt(i*i+n*n)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,s,s),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,s,i){this.totalTime+=Math.floor(t);const n=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*n,o=this.tutorialImg.height*n;this.context.drawImage(this.tutorialImg,e,s,a,o),!i&&this.drawRipple(e+.02*this.width,s+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,s,i){const n=(s-e)/2,a=Math.PI/i;return e+n*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,s=this.height/1.9+this.tutorialImg.height/.8,i=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let n;const a=this.endx;this.totalTime<e/2?(n=i+this.totalTime/(e/2)*(s-i),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(n=s-(this.totalTime-e/2)/(e/2)*(s-i),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,n,this.tutorialImg.width,this.tutorialImg.height),n<=i&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return n.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return n.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}},"./src/compositions/background/index.ts":(t,e,s)=>{s.r(e),s.d(e,{BACKGROUND_ASSET_LIST:()=>a,autumBgDrawing:()=>c,createBackground:()=>o,defaultBgDrawing:()=>h,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>l});var i=s("./src/util/util.ts"),n=s("./src/constants/index.ts");const a={summer:{BG_GROUP_IMGS:n.DEFAULT_BG_GROUP_IMGS,draw:h},autumn:{BG_GROUP_IMGS:n.AUTUMN_BG_GROUP_IMGS,draw:c},winter:{BG_GROUP_IMGS:n.WINTER_BG_GROUP_IMGS,draw:l}};async function o(t,e,s,n,a){return{...{...a(t,e,s,{...await(0,i.loadImages)(n)})}}}const r=(t,e)=>{const s=Object.keys(e);let i=Math.floor(t/10)%s.length;return t>=30&&(i%=3),{...e[s[i]]}};function h(t,e,s,i){return{draw:()=>{t.drawImage(i?.DEFAULT_BACKGROUND_1,0,0,e,s),t.drawImage(i?.PILLAR_IMAGE_1,.6*e,s/6,e,s/2),t.drawImage(i?.FENCE_IMAGE_1,.4*-e,s/3,e,s/3),t.drawImage(i?.HILL_IMAGE_1,.25*-e,s/2,1.5*e,s/2)}}}function c(t,e,s,i){return{draw:()=>{t.drawImage(i.AUTUMN_BACKGROUND_1,0,0,e,s),t.drawImage(i.AUTUMN_PILLAR_1,.38*e,s/6,e/1.2,s/2),t.drawImage(i.AUTUMN_FENCE_1,.4*-e,s/4,e,s/2),t.drawImage(i.AUTUMN_HILL_1,.25*-e,s/2,1.5*e,s/2)}}}function l(t,e,s,i){return{draw:()=>{t.drawImage(i.WINTER_BACKGROUND_1,0,0,e,s),t.drawImage(i.WINTER_PILLAR_1,.38*e,s/6,e/1.2,s/2),t.drawImage(i.WINTER_FENCE_1,.4*-e,s/4,e,s/2),t.drawImage(i.WINTER_HILL_1,.25*-e,s/2,1.5*e,s/2)}}}function d(t,e,s,i){return{draw:()=>{t.drawImage(i?.LEVEL_SELECTION_BACKGROUND,0,0,e,s)}}}},"./src/constants/index.ts":(t,e,s)=>{s.r(e),s.d(e,{ASSETS_PATH_BG_01:()=>g,ASSETS_PATH_FENCE:()=>p,ASSETS_PATH_HILL:()=>m,ASSETS_PATH_MONSTER_IDLE:()=>f,ASSETS_PATH_STONE_PINK_BG:()=>d,ASSETS_PATH_TOTEM:()=>u,AUDIO_PATH_BTN_CLICK:()=>c,AUDIO_PATH_CHEERING_FUNC:()=>h,AUDIO_PATH_CORRECT_STONE:()=>r,AUDIO_PATH_EATS:()=>i,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>a,AUDIO_PATH_MONSTER_SPIT:()=>n,AUDIO_PATH_ON_DRAG:()=>l,AUDIO_PATH_POINTS_ADD:()=>o,AUTUMN_BACKGROUND_1:()=>y,AUTUMN_BG_GROUP_IMGS:()=>M,AUTUMN_FENCE_1:()=>x,AUTUMN_HILL_1:()=>S,AUTUMN_PILLAR_1:()=>_,AUTUMN_SIGN_1:()=>E,DEFAULT_BACKGROUND_1:()=>v,DEFAULT_BG_GROUP_IMGS:()=>B,FENCE_IMAGE_1:()=>I,GAMEPLAY_BG_GROUP_IMGS:()=>k,HILL_IMAGE_1:()=>w,LEVEL_SELECTION_BACKGROUND:()=>D,PILLAR_IMAGE_1:()=>b,SCENE_NAME_GAME_PLAY:()=>U,SCENE_NAME_LEVEL_END:()=>F,SCENE_NAME_LEVEL_SELECT:()=>z,SCENE_NAME_START:()=>O,WINTER_BACKGROUND_1:()=>T,WINTER_BG_GROUP_IMGS:()=>N,WINTER_FENCE_1:()=>L,WINTER_HILL_1:()=>C,WINTER_PILLAR_1:()=>A,WINTER_SIGN_1:()=>P});const i="./assets/audios/Eat.mp3",n="./assets/audios/MonsterSpit.mp3",a="./assets/audios/Disapointed-05.mp3",o="assets/audios/PointsAdd.wav",r="assets/audios/CorrectStoneFinal.mp3",h=t=>`./assets/audios/Cheering-0${t}.mp3`,c="./assets/audios/ButtonClick.mp3",l="./assets/audios/onDrag.mp3",d="./assets/images/stone_pink_v02.png",u="./assets/images/Totem_v02_v01.png",g="./assets/images/bg_v01.jpg",m="./assets/images/hill_v01.png",p="./assets/images/fence_v01.png",f="./assets/images/idle4.png",v="./assets/images/bg_v01.jpg",w="./assets/images/hill_v01.png",b="./assets/images/Totem_v02_v01.png",I="./assets/images/fence_v01.png",y="./assets/images/Autumn_bg_v01.jpg",S="./assets/images/Autumn_hill_v01.png",_="./assets/images/Autumn_sign_v01.png",E="./assets/images/Autumn_sign_v01.png",x="./assets/images/Autumn_fence_v01.png",T="./assets/images/Winter_bg_01.jpg",C="./assets/images/Winter_hill_v01.png",P="./assets/images/Winter_sign_v01.png",L="./assets/images/Winter_fence_v01.png",A="./assets/images/Winter_sign_v01.png",D="./assets/images/map.jpg",k={ASSETS_PATH_TOTEM:u,ASSETS_PATH_BG_01:g,ASSETS_PATH_HILL:m,ASSETS_PATH_FENCE:p,ASSETS_PATH_MONSTER_IDLE:f},B={DEFAULT_BACKGROUND_1:v,HILL_IMAGE_1:w,PILLAR_IMAGE_1:b,FENCE_IMAGE_1:I},M={AUTUMN_BACKGROUND_1:y,AUTUMN_HILL_1:S,AUTUMN_PILLAR_1:_,AUTUMN_SIGN_1:E,AUTUMN_FENCE_1:x},N={WINTER_BACKGROUND_1:T,WINTER_HILL_1:C,WINTER_SIGN_1:P,WINTER_FENCE_1:L,WINTER_PILLAR_1:A},O="StartScene",z="LevelSelection",U="GamePlay",F="LevelEnd"},"./src/data/api-data.ts":(t,e,s)=>{s.r(e),s.d(e,{getData:()=>o,getFtmData:()=>a});var i=s("./global-variables.ts");const n="./lang/"+i.lang+"/ftm_"+i.lang+".json";function a(){return fetch(n,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}async function o(){return await a()}},"./src/data/data-modal.ts":(t,e,s)=>{s.r(e),s.d(e,{DataModal:()=>i,FeedbackAudios:()=>o,FeedbackTexts:()=>a,FoilStone:()=>c,LevelMeta:()=>u,Levels:()=>r,OtherAudios:()=>n,Prompt:()=>d,Puzzles:()=>h,TargetStone:()=>l});class i{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,s,i,r,h,c,l,d){this.title=t,this.otherAudios=new n(e),this.levels=this.getLevels(s),this.FeedbackTexts=new a(i),this.FeedbackAudios=new o(h),this.rightToLeft=r,this.majVersion=c,this.minVersion=l,this.version=d}getLevels(t){let e=[];for(let s=0;s<t.length;s++)e.push(new r(t[s]));return e}}class n{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class a{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class o{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class r{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new u(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,s)=>{e.push(new h(t))})),e}}class h{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new d(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,s)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,s)=>{e.push(t.StoneText)})),e}}class c{stoneText;constructor(t){this.stoneText=t}}class l{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class u{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}},"./src/data/game-score.ts":(t,e,s)=>{s.r(e),s.d(e,{GameScore:()=>n});var i=s("./global-variables.ts");class n{static currentlanguage=i.lang;static setGameLevelScore(t,e){let s=this.calculateStarCount(e),i={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:s};this.setTotalStarCount(s);let n=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<n.length;t++)if(n[t].levelNumber===i.levelNumber){a=t;break}-1!==a&&i.score>n[a].score?n[a]=i:n.push(i),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(n))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return i.Debugger.DebugMode?JSON.parse(localStorage.getItem(i.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(i.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/events/EventManager.ts":(t,e,s)=>{s.r(e),s.d(e,{EventManager:()=>n});var i=s("./src/common/event-names.ts");class n{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/sceneHandler/scene-handler.ts":(t,e,s)=>{s.r(e),s.d(e,{SceneHandler:()=>u});var i=s("./src/common/common.ts"),n=s("./src/scenes/start-scene.ts"),a=s("./src/scenes/level-selection-scene.ts"),o=s("./global-variables.ts"),r=s("./src/scenes/gameplay-scene.ts"),h=s("./src/data/game-score.ts"),c=s("./src/scenes/loading-scene.ts"),l=s("./src/scenes/levelend-scene.ts"),d=s("./src/constants/index.ts");class u{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;pwa_install_status;toggleBtn;constructor(t,e){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("this.toggleBtn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new n.StartScene(t,e,this.switchSceneToLevelSelection),u.SceneName=i.StartScene1,this.loadingScreen=new c.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),o.Debugger.DebugMode=this.toggleBtn.classList.contains("on"),this.toggleBtn.innerText="Dev"}))}checkMonsterPhaseUpdation(){let t=h.GameScore.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),u.SceneName===i.StartScene1?this.startScene.animation(e):u.SceneName===i.LevelSelection1?this.levelSelectionScene.drawLevelSelection():u.SceneName===i.GameScene1?this.gameplayScene.draw(e):u.SceneName===i.EndScene1&&this.levelEndScene.draw(e)};switchSceneToGameplay=(t,e)=>{this.showLoading(),this.dispose(e);let s=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new r.GameplayScene(this.canvas,t.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,t.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(d.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,s,this.data.FeedbackAudios),u.SceneName=i.GameScene1}),800)};switchSceneToEndLevel=(t,e,s,n)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(d.SCENE_NAME_GAME_PLAY),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new l.LevelEndScene(this.canvas,this.height,this.width,this.context,t,s,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),u.SceneName=i.EndScene1}),n?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new a.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),u.SceneName=i.LevelSelection1}),800)};dispose=t=>{t==d.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():t===d.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():t===d.SCENE_NAME_START?this.startScene.dispose():t==d.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(i.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{GameplayScene:()=>l});var i=s("./src/components/index.ts"),n=s("./src/common/index.ts"),a=s("./global-variables.ts"),o=s("./src/data/game-score.ts"),r=s("./src/Firebase/firebase-integration.ts"),h=s("./src/constants/index.ts"),c=s("./src/compositions/background/index.ts");class l{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;constructor(t,e,s,o,c,l,d,u,g,m,p){this.width=t.width,this.height=t.height,this.rightToLeft=c,this.canvas=t,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.monsterPhaseNumber=s||1,this.levelData=e,this.switchSceneToEnd=l,this.levelNumber=d,this.switchToLevelSelection=u,this.reloadScene=g,this.jsonVersionNumber=m,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new i.PauseButton(this.context,this.canvas),this.timerTicking=new i.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new i.StoneHandler(this.context,this.canvas,this.counter,this.levelData,p,this.timerTicking),this.tutorial=new i.Tutorial(this.context,t.width,t.height),this.promptText=new i.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new i.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new i.PausePopUp(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:e,selectedLevelNumber:d}),this.firebaseIntegration=new r.FirebaseIntegration,this.feedBackTextCanavsElement=document.getElementById("feedback-text"),this.feedBackTextCanavsElement.height=this.height,this.feedBackTextCanavsElement.width=this.width,this.feedbackTextEffects=new i.FeedbackTextEffects(this.feedBackTextCanavsElement.getContext("2d",{willReadFrequently:!0}),this.width,this.height),this.audioPlayer=new i.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=e.puzzles,this.feedBackTexts=o,this.images={profileMonster:h.ASSETS_PATH_MONSTER_IDLE},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}));var f=this.levelData.levelMeta.levelNumber;a.Debugger.DebugMode?localStorage.setItem(n.PreviousPlayedLevel+a.lang+"Debug",f):localStorage.setItem(n.PreviousPlayedLevel+a.lang,f),this.addEventListeners(),this.resetAnimationID=0,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,c.loadDynamicBgAssets)(this.levelData.levelNumber,c.BACKGROUND_ASSET_LIST);this.background=await(0,c.createBackground)(this.context,this.width,this.height,t,e)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const s=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(s-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;if(Math.sqrt((s-this.monster.x-this.canvas.width/4)**2+(i-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(t,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;for(let t of this.stoneHandler.foilStones){if(Math.sqrt((s-t.x)**2+(i-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(h.AUDIO_PATH_ON_DRAG);break}}};handleMouseMove=t=>{if(this.pickedStone){let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=i}};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;this.monster.onClick(s,i)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound(h.AUDIO_PATH_BTN_CLICK),this.pauseGamePlay()),this.promptText.onClick(s,i)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY})};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY})};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY})};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.monster.update(t),this.timerTicking.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||(this.feedbackTextEffects.render(),0==this.counter&&this.tutorial.clickOnMonsterTutorial(t)),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener(n.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(n.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(n.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(n.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(n.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(n.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(n.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(n.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.feedbackTextEffects.unregisterEventListener(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};letterPuzzle(t){const e=this.getRandomInt(0,1),s=this.stoneHandler.isStoneLetterDropCorrect(t,e);s&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(s)}wordPuzzle(t,e){this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const s=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+t;const i=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,s,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&i)return this.handleCorrectStoneDrop(s),this.handleStoneDropEnd(i,"Word"),void(this.stonesCount=1);i?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==a.lang?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation()}),2e3)):(this.handleStoneDropEnd(i,"Word"),this.stonesCount=1)}resetToIdleAnimation(t,e){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(t,e)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t)),this.feedBackTextCanavsElement.style.zIndex="2"};dispatchStoneDropEvent(t){const e=new CustomEvent(n.STONEDROP,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,this.feedbackTextEffects.clearParticle(),this.feedBackTextCanavsElement.style.zIndex="0",document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(t,e){let s=Date.now();const i={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(s-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/level-selection-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelSelectionScreen:()=>u});var i=s("./global-variables.ts"),n=s("./src/common/common.ts"),a=s("./src/common/level-config.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/data/api-data.ts"),h=s("./src/data/game-score.ts"),c=s("./src/Firebase/firebase-integration.ts"),l=s("./src/compositions/background/index.ts"),d=s("./src/constants/index.ts");class u{canvas;data;width;height;levelButtonPos;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let a=this;this.callBack=s,this.levelsSectionCount=a.data.levels.length/10>Math.floor(a.data.levels.length/10)?Math.floor(a.data.levels.length/10)+1:Math.floor(a.data.levels.length/10),this.initialiseButtonPos(),this.levels=[],this.firebaseIntegration=new c.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(this.levelButtonPos),this.gameLevelData=h.GameScore.getAllGameLevelInfo(),this.audioPlayer=new o.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(i.Debugger.DebugMode?localStorage.getItem(n.PreviousPlayedLevel+i.lang+"Debug"):localStorage.getItem(n.PreviousPlayedLevel+i.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={mapIcon:"./assets/images/mapIcon.png",mapIconSpecial:"./assets/images/map_icon_monster_level_v01.png",mapLock:"./assets/images/mapLock.png",star:"./assets/images/star.png",nextbtn:"./assets/images/next_btn.png",backbtn:"./assets/images/back_btn.png"},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/intro.mp3")})),this.addListeners()}async init(){const t=await(0,r.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await(0,l.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:d.LEVEL_SELECTION_BACKGROUND},l.levelSelectBgDrawing)};initialiseButtonPos(){this.levelButtonPos=[[[this.canvas.width/10,this.canvas.height/10],[this.canvas.width/2.5,this.canvas.height/10],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/10],[this.canvas.width/10,this.canvas.height/3],[this.canvas.width/2.5,this.canvas.height/3],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/3],[this.canvas.width/10,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.8],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.3]]]}createLevelButtons(t){let e=t[0],s=0;for(let t=0;t<10;t++){let t=new a.LevelConfig(e[s][0],e[s][1],s+1);this.levels.push(t),s+=1}}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,s=t.touches[0].clientY,i=this.xDown-e,n=this.yDown-s;Math.abs(i)>Math.abs(n)&&(i>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-e.left,n=t.clientY-e.top;s>=.7*this.canvas.width&&s<.7*this.canvas.width+this.canvas.height/10&&n>this.canvas.height/1.3&&n<this.canvas.height/1.3+this.canvas.height/10&&this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)),s>=this.canvas.width/10&&s<this.canvas.width/10+this.canvas.height/10&&n>this.canvas.height/1.3&&n<this.canvas.height/1.3+this.canvas.height/10&&(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex));for(let t of this.levels)Math.sqrt((s-t.x-this.canvas.height/20)*(s-t.x-this.canvas.height/20)+(n-t.y-this.canvas.height/20)*(n-t.y-this.canvas.height/20))<45&&(i.Debugger.DebugMode||t.index+this.levelSelectionPageIndex-1<=this.unlockLevelIndex+1)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.levelNumber=t.index+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber))};drawLevel(t,e){let s=e.height/5,n=s/6;const a=[5,13,20,30,42];if(t.index+this.levelSelectionPageIndex<=this.data.levels.length){const e=t.index+this.levelSelectionPageIndex,o=a.includes(e);this.context.drawImage(o?this.loadedImages.mapIconSpecial:this.loadedImages.mapIcon,t.x,t.y,o?.9*s:s,o?.9*s:s),this.context.fillStyle="white",this.context.font=n+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(t.index+this.levelSelectionPageIndex,t.x+s/3.5,t.y+s/3),this.context.font=n-s/30+`px ${i.font}, monospace`,i.Debugger.DebugMode&&this.context.fillText(this.data.levels[t.index+this.levelSelectionPageIndex-1].levelMeta.levelType,t.x+s/3.5,t.y+s/1.3)}}draw(){for(let t of this.levels)this.drawLevel(t,this.canvas)}downButton(t){let e=this.canvas.height/10;t!=10*this.levelsSectionCount-10&&this.context.drawImage(this.loadedImages.nextbtn,.7*this.canvas.width,this.canvas.height/1.3,e,e),0!=t&&this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/10,this.canvas.height/1.3,e,e)}drawStars(t){if(null!=t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber));for(let e of this.levels)if(e.index+this.levelSelectionPageIndex<=this.data.levels.length){i.Debugger.DebugMode||e.index+this.levelSelectionPageIndex-1>this.unlockLevelIndex+1&&this.context.drawImage(this.loadedImages.mapLock,e.x,e.y,this.canvas.height/13,this.canvas.height/13);for(let s=0;s<t.length;s++)if(e.index-1+this.levelSelectionPageIndex==parseInt(t[s].levelNumber)){this.drawStar(e,this.canvas,t[s].starCount,this.context);break}}}}drawStar(t,e,s,i){let n=e.height/5;s>=1&&i.drawImage(this.loadedImages.star,t.x,t.y-.01*n,n/5,n/5),s>1&&i.drawImage(this.loadedImages.star,t.x+n/2.5,t.y-.01*n,n/5,n/5),3==s&&i.drawImage(this.loadedImages.star,t.x+n/5,t.y-.1*n,n/5,n/5)}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.logSelectedLevelEvent(),this.callBack(e,"LevelSelection")}logSelectedLevelEvent(){const t={cr_user_id:i.pseudoId,ftm_language:i.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex),this.drawStars(this.gameLevelData))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelEndScene:()=>d});var i=s("./src/common/common.ts"),n=s("./src/common/event-names.ts"),a=s("./src/components/audio-player.ts"),o=s("./src/components/buttons/close-button.ts"),r=s("./src/components/buttons/next-button.ts"),h=s("./src/components/buttons/retry-button.ts"),c=s("./src/components/monster.ts"),l=s("./src/compositions/background/index.ts");class d{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(t,e,s,n,l,d,u,g,m,p){this.canvas=t,this.height=e,this.width=s,this.context=n,this.monster=new c.Monster(this.canvas,p,this.switchToReactionAnimation),this.switchToGameplayCB=u,this.switchToLevelSelectionCB=g,this.data=m,this.starDrawnCount=0,this.closeButton=new o.default(n,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new h.default(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new r.default(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new a.AudioPlayer,this.starCount=l,this.currentLevel=d,this.images={backgroundImg:"./assets/images/WIN_screen_bg.png",star1Img:"./assets/images/pinStar1.png",star2Img:"./assets/images/pinStar2.png",star3Img:"./assets/images/pinStar3.png",winBackgroundImg:"./assets/images/bg_v01.jpg"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new a.AudioPlayer,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,l.loadDynamicBgAssets)(this.currentLevel,l.BACKGROUND_ASSET_LIST);this.background=await(0,l.createBackground)(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?("visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/LevelLoseFanfare.mp3"),this.monster.changeToSpitAnimation()):("visible"===document.visibilityState&&(this.audioPlayer.playAudio("./assets/audios/LevelWinFanfare.mp3"),this.audioPlayer.playAudio("./assets/audios/intro.mp3")),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(t),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;if(this.closeButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(s,i)){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let t={currentLevelData:this.data.levels[this.currentLevel],selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(t,"LevelEnd")}if(this.nextButton.onClick(s,i)&&this.starCount>=2){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.switchToGameplayCB(e,"LevelEnd")}};pauseAudios=()=>{"visible"===document.visibilityState?this.starCount>=2&&this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LoadingScene:()=>n});var i=s("./src/common/common.ts");class n{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,s){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=s,this.context=this.canvas.getContext("2d"),this.images={cloud6:"./assets/images/cloud_01.png",cloud7:"./assets/images/cloud_02.png",cloud8:"./assets/images/cloud_03.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{StartScene:()=>u});var i=s("./src/common/common.ts"),n=s("./src/components/monster.ts"),a=s("./global-variables.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/Firebase/firebase-integration.ts"),h=s("./src/common/utils.ts"),c=s("./src/components/play-button.ts"),l=s("./src/compositions/background/index.ts"),d=s("./src/constants/index.ts");class u{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background;audioPlayer;toggleBtn;pwa_install_status;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new n.Monster(this.canvas,4),this.switchSceneToLevelSelection=s,this.audioPlayer=new o.AudioPlayer,this.pwa_status=localStorage.getItem(i.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg()}setupBg=async()=>{this.background=await(0,l.createBackground)(this.context,this.width,this.height,d.DEFAULT_BG_GROUP_IMGS,l.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))};animation=t=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.context.font=`${this.titleFont}px ${a.font}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(t),this.playButton.draw()};createPlayButton(){this.playButton=new c.default(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const s=document.getElementById("canvas");t.preventDefault();var n=s.getBoundingClientRect();const a=t.clientX-n.left,o=t.clientY-n.top,{excludeX:c,excludeY:l}=h.Utils.getExcludedCoordinates(s,15);a<c&&o<l||(r.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",i.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data.title.length}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(i.PWAInstallStatus,"false")}}},"./src/util/util.ts":(t,e,s)=>{s.r(e),s.d(e,{loadImages:()=>i});const i=async t=>{const e=Object.keys(t).map((async e=>{const s=await(async t=>{const e=new Image;return new Promise((s=>{e.onload=()=>s(e),e.src=t}))})(t[e]);return{[e]:s}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>V,setDefaultEventParameters:()=>q,setUserId:()=>$,setUserProperties:()=>Y,settings:()=>R});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js");s("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",h="firebase_id",c="origin",l=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",u="https://www.googletagmanager.com/gtag/js",g=new n.Logger("@firebase/analytics"),m={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},p=new a.ErrorFactory("analytics","Analytics",m);function f(t){if(!t.startsWith(u)){const e=p.create("invalid-gtag-resource",{gtagURL:t});return g.warn(e.message),""}return t}function v(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function w(t,e){const s=function(t,e){let s;return window.trustedTypes&&(s=window.trustedTypes.createPolicy(t,e)),s}("firebase-js-sdk-policy",{createScriptURL:f}),i=document.createElement("script"),n=`${u}?l=${t}&id=${e}`;i.src=s?null==s?void 0:s.createScriptURL(n):n,i.async=!0,document.head.appendChild(i)}function b(t,e,s,i){return async function(n,...a){try{if("event"===n){const[i,n]=a;await async function(t,e,s,i,n){try{let a=[];if(n&&n.send_to){let t=n.send_to;Array.isArray(t)||(t=[t]);const i=await v(s);for(const s of t){const t=i.find((t=>t.measurementId===s)),n=t&&e[t.appId];if(!n){a=[];break}a.push(n)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",i,n||{})}catch(t){g.error(t)}}(t,e,s,i,n)}else if("config"===n){const[n,o]=a;await async function(t,e,s,i,n,a){const o=i[n];try{if(o)await e[o];else{const t=(await v(s)).find((t=>t.measurementId===n));t&&await e[t.appId]}}catch(t){g.error(t)}t("config",n,a)}(t,e,s,i,n,o)}else if("consent"===n){const[e]=a;t("consent","update",e)}else if("get"===n){const[e,s,i]=a;t("get",e,s,i)}else if("set"===n){const[e]=a;t("set",e)}else t(n,...a)}catch(t){g.error(t)}}}const I=30;const y=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function S(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function _(t,e=y,s){const{appId:i,apiKey:n,measurementId:a}=t.options;if(!i)throw p.create("no-app-id");if(!n){if(a)return{measurementId:a,appId:i};throw p.create("no-api-key")}const o=e.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new x;return setTimeout((async()=>{r.abort()}),void 0!==s?s:l),E({appId:i,apiKey:n,measurementId:a},o,r,e)}async function E(t,{throttleEndTimeMillis:e,backoffCount:s},i,n=y){var o;const{appId:r,measurementId:h}=t;try{await function(t,e){return new Promise(((s,i)=>{const n=Math.max(e-Date.now(),0),a=setTimeout(s,n);t.addEventListener((()=>{clearTimeout(a),i(p.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(i,e)}catch(t){if(h)return g.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:r,measurementId:h};throw t}try{const e=await async function(t){var e;const{appId:s,apiKey:i}=t,n={method:"GET",headers:S(i)},a=d.replace("{app-id}",s),o=await fetch(a,n);if(200!==o.status&&304!==o.status){let t="";try{const s=await o.json();(null===(e=s.error)||void 0===e?void 0:e.message)&&(t=s.error.message)}catch(t){}throw p.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return n.deleteThrottleMetadata(r),e}catch(e){const c=e;if(!function(t){if(!(t instanceof a.FirebaseError&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(c)){if(n.deleteThrottleMetadata(r),h)return g.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==c?void 0:c.message}]`),{appId:r,measurementId:h};throw e}const l=503===Number(null===(o=null==c?void 0:c.customData)||void 0===o?void 0:o.httpStatus)?(0,a.calculateBackoffMillis)(s,n.intervalMillis,I):(0,a.calculateBackoffMillis)(s,n.intervalMillis),d={throttleEndTimeMillis:Date.now()+l,backoffCount:s+1};return n.setThrottleMetadata(r,d),g.debug(`Calling attemptFetch again in ${l} millis`),E(t,d,i,n)}}class x{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let T,C;function P(t){C=t}function L(t){T=t}async function A(t,e,s,i,n,o,r){var l;const d=_(t);d.then((e=>{s[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&g.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>g.error(t))),e.push(d);const m=async function(){if(!(0,a.isIndexedDBAvailable)())return g.warn(p.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,a.validateIndexedDBOpenable)()}catch(t){return g.warn(p.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?i.getId():void 0)),[f,v]=await Promise.all([d,m]);(function(t){const e=window.document.getElementsByTagName("script");for(const s of Object.values(e))if(s.src&&s.src.includes(u)&&s.src.includes(t))return s;return null})(o)||w(o,f.measurementId),C&&(n("consent","default",C),P(void 0)),n("js",new Date);const b=null!==(l=null==r?void 0:r.config)&&void 0!==l?l:{};return b[c]="firebase",b.update=!0,null!=v&&(b[h]=v),n("config",f.measurementId,b),T&&(n("set",T),L(void 0)),f.measurementId}class D{constructor(t){this.app=t}_delete(){return delete k[this.app.options.appId],Promise.resolve()}}let k={},B=[];const M={};let N,O,z="dataLayer",U="gtag",F=!1;function R(t){if(F)throw p.create("already-initialized");t.dataLayerName&&(z=t.dataLayerName),t.gtagName&&(U=t.gtagName)}function j(t,e,s){!function(){const t=[];if((0,a.isBrowserExtension)()&&t.push("This is a browser extension environment."),(0,a.areCookiesEnabled)()||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),s=p.create("invalid-analytics-context",{errorInfo:e});g.warn(s.message)}}();const i=t.options.appId;if(!i)throw p.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw p.create("no-api-key");g.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=k[i])throw p.create("already-exists",{id:i});if(!F){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(z);const{wrappedGtag:t,gtagCore:e}=function(t,e,s,i,n){let a=function(...t){window[i].push(arguments)};return window[n]&&"function"==typeof window[n]&&(a=window[n]),window[n]=b(a,t,e,s),{gtagCore:a,wrappedGtag:window[n]}}(k,B,M,z,U);O=t,N=e,F=!0}k[i]=A(t,B,M,e,N,z,s);return new D(t)}function H(t=(0,i.getApp)()){t=(0,a.getModularInstance)(t);const e=(0,i._getProvider)(t,r);return e.isInitialized()?e.getImmediate():G(t)}function G(t,e={}){const s=(0,i._getProvider)(t,r);if(s.isInitialized()){const t=s.getImmediate();if((0,a.deepEqual)(e,s.getOptions()))return t;throw p.create("already-initialized")}return s.initialize({options:e})}async function W(){if((0,a.isBrowserExtension)())return!1;if(!(0,a.areCookiesEnabled)())return!1;if(!(0,a.isIndexedDBAvailable)())return!1;try{return await(0,a.validateIndexedDBOpenable)()}catch(t){return!1}}function V(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global)return t("set",{screen_name:s}),Promise.resolve();t("config",await e,{update:!0,screen_name:s})}(O,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}async function X(t){return t=(0,a.getModularInstance)(t),async function(t,e){const s=await e;return new Promise(((e,i)=>{t("get",s,"client_id",(t=>{t||i(p.create("no-client-id")),e(t)}))}))}(O,k[t.app.options.appId])}function $(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global)return t("set",{user_id:s}),Promise.resolve();t("config",await e,{update:!0,user_id:s})}(O,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}function Y(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global){const e={};for(const t of Object.keys(s))e[`user_properties.${t}`]=s[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:s})}(O,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}function K(t,e){t=(0,a.getModularInstance)(t),async function(t,e){const s=await t;window[`ga-disable-${s}`]=!e}(k[t.app.options.appId],e).catch((t=>g.error(t)))}function q(t){O?O("set",t):L(t)}function J(t,e,s,i){t=(0,a.getModularInstance)(t),async function(t,e,s,i,n){if(n&&n.global)t("event",s,i);else{const n=await e;t("event",s,Object.assign(Object.assign({},i),{send_to:n}))}}(O,k[t.app.options.appId],e,s,i).catch((t=>g.error(t)))}function Z(t){O?O("consent","update",t):P(t)}const Q="@firebase/analytics",tt="0.10.0";(0,i._registerComponent)(new o.Component(r,((t,{options:e})=>j(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),(0,i._registerComponent)(new o.Component("analytics-internal",(function(t){try{const e=t.getProvider(r).getImmediate();return{logEvent:(t,s,i)=>J(e,t,s,i)}}catch(t){throw p.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),(0,i.registerVersion)(Q,tt),(0,i.registerVersion)(Q,tt,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>Y,_DEFAULT_ENTRY_NAME:()=>N,_addComponent:()=>F,_addOrOverwriteComponent:()=>R,_apps:()=>z,_clearComponents:()=>W,_components:()=>U,_getProvider:()=>H,_registerComponent:()=>j,_removeServiceInstance:()=>G,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>tt,registerVersion:()=>Q,setLogLevel:()=>et});var i=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/idb/build/index.js");class r{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const h="@firebase/app",c="0.9.15",l=new n.Logger("@firebase/app"),d="@firebase/app-compat",u="@firebase/analytics-compat",g="@firebase/analytics",m="@firebase/app-check-compat",p="@firebase/app-check",f="@firebase/auth",v="@firebase/auth-compat",w="@firebase/database",b="@firebase/database-compat",I="@firebase/functions",y="@firebase/functions-compat",S="@firebase/installations",_="@firebase/installations-compat",E="@firebase/messaging",x="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",P="@firebase/remote-config",L="@firebase/remote-config-compat",A="@firebase/storage",D="@firebase/storage-compat",k="@firebase/firestore",B="@firebase/firestore-compat",M="firebase",N="[DEFAULT]",O={[h]:"fire-core",[d]:"fire-core-compat",[g]:"fire-analytics",[u]:"fire-analytics-compat",[p]:"fire-app-check",[m]:"fire-app-check-compat",[f]:"fire-auth",[v]:"fire-auth-compat",[w]:"fire-rtdb",[b]:"fire-rtdb-compat",[I]:"fire-fn",[y]:"fire-fn-compat",[S]:"fire-iid",[_]:"fire-iid-compat",[E]:"fire-fcm",[x]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[P]:"fire-rc",[L]:"fire-rc-compat",[A]:"fire-gcs",[D]:"fire-gcs-compat",[k]:"fire-fst",[B]:"fire-fst-compat","fire-js":"fire-js",[M]:"fire-js-all"},z=new Map,U=new Map;function F(t,e){try{t.container.addComponent(e)}catch(s){l.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,s)}}function R(t,e){t.container.addOrOverwriteComponent(e)}function j(t){const e=t.name;if(U.has(e))return l.debug(`There were multiple attempts to register component ${e}.`),!1;U.set(e,t);for(const e of z.values())F(e,t);return!0}function H(t,e){const s=t.container.getProvider("heartbeat").getImmediate({optional:!0});return s&&s.triggerHeartbeat(),t.container.getProvider(e)}function G(t,e,s=N){H(t,e).clearInstance(s)}function W(){U.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new a.ErrorFactory("app","Firebase",V);class ${constructor(t,e,s){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=s,this.container.addComponent(new i.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const Y="10.1.0";function K(t,e={}){let s=t;if("object"!=typeof e){e={name:e}}const n=Object.assign({name:N,automaticDataCollectionEnabled:!1},e),o=n.name;if("string"!=typeof o||!o)throw X.create("bad-app-name",{appName:String(o)});if(s||(s=(0,a.getDefaultAppConfig)()),!s)throw X.create("no-options");const r=z.get(o);if(r){if((0,a.deepEqual)(s,r.options)&&(0,a.deepEqual)(n,r.config))return r;throw X.create("duplicate-app",{appName:o})}const h=new i.ComponentContainer(o);for(const t of U.values())h.addComponent(t);const c=new $(s,n,h);return z.set(o,c),c}function q(t=N){const e=z.get(t);if(!e&&t===N&&(0,a.getDefaultAppConfig)())return K();if(!e)throw X.create("no-app",{appName:t});return e}function J(){return Array.from(z.values())}async function Z(t){const e=t.name;z.has(e)&&(z.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function Q(t,e,s){var n;let a=null!==(n=O[t])&&void 0!==n?n:t;s&&(a+=`-${s}`);const o=a.match(/\s|\//),r=e.match(/\s|\//);if(o||r){const t=[`Unable to register library "${a}" with version "${e}":`];return o&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&r&&t.push("and"),r&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void l.warn(t.join(" "))}j(new i.Component(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}function tt(t,e){if(null!==t&&"function"!=typeof t)throw X.create("invalid-log-argument");(0,n.setUserLogHandler)(t,e)}function et(t){(0,n.setLogLevel)(t)}const st="firebase-heartbeat-database",it=1,nt="firebase-heartbeat-store";let at=null;function ot(){return at||(at=(0,o.openDB)(st,it,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(nt)}}).catch((t=>{throw X.create("idb-open",{originalErrorMessage:t.message})}))),at}async function rt(t,e){try{const s=(await ot()).transaction(nt,"readwrite"),i=s.objectStore(nt);await i.put(e,ht(t)),await s.done}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=X.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}function ht(t){return`${t.name}!${t.options.appId}`}class ct{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new dt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=lt();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=lt(),{heartbeatsToSend:e,unsentEntries:s}=function(t,e=1024){const s=[];let i=t.slice();for(const n of t){const t=s.find((t=>t.agent===n.agent));if(t){if(t.dates.push(n.date),ut(s)>e){t.dates.pop();break}}else if(s.push({agent:n.agent,dates:[n.date]}),ut(s)>e){s.pop();break}i=i.slice(1)}return{heartbeatsToSend:s,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,s.length>0?(this._heartbeatsCache.heartbeats=s,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function lt(){return(new Date).toISOString().substring(0,10)}class dt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.isIndexedDBAvailable)()&&(0,a.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(t){try{const e=await ot();return await e.transaction(nt).objectStore(nt).get(ht(t))}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=X.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const s=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:s.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const s=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:s.lastSentHeartbeatDate,heartbeats:[...s.heartbeats,...t.heartbeats]})}}}function ut(t){return(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t})).length}var gt;gt="",j(new i.Component("platform-logger",(t=>new r(t)),"PRIVATE")),j(new i.Component("heartbeat",(t=>new ct(t)),"PRIVATE")),Q(h,c,gt),Q(h,c,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{Component:()=>n,ComponentContainer:()=>r,Provider:()=>o});var i=s("./node_modules/@firebase/util/dist/index.esm2017.js");class n{constructor(t,e,s){this.name=t,this.instanceFactory=e,this.type=s,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const a="[DEFAULT]";class o{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new i.Deferred;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const s=this.getOrInitializeService({instanceIdentifier:e});s&&t.resolve(s)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const s=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(s)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:s})}catch(t){if(i)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:a})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const s=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:s});e.resolve(t)}catch(t){}}}}clearInstance(t=a){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=a){return this.instances.has(t)}getOptions(t=a){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,s=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(s))throw Error(`${this.name}(${s}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:s,options:e});for(const[t,e]of this.instancesDeferred.entries()){s===this.normalizeInstanceIdentifier(t)&&e.resolve(i)}return i}onInit(t,e){var s;const i=this.normalizeInstanceIdentifier(e),n=null!==(s=this.onInitCallbacks.get(i))&&void 0!==s?s:new Set;n.add(t),this.onInitCallbacks.set(i,n);const a=this.instances.get(i);return a&&t(a,i),()=>{n.delete(t)}}invokeOnInitCallbacks(t,e){const s=this.onInitCallbacks.get(e);if(s)for(const i of s)try{i(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let s=this.instances.get(t);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(i=t,i===a?void 0:i),options:e}),this.instances.set(t,s),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(s,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,s)}catch(t){}var i;return s||null}normalizeInstanceIdentifier(t=a){return this.component?this.component.multipleInstances?t:a:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new o(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>et,getToken:()=>J,onIdChange:()=>tt});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",h="0.6.4",c=1e4,l=`w:${h}`,d="FIS_v2",u="https://firebaseinstallations.googleapis.com/v1",g=36e5,m={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},p=new a.ErrorFactory("installations","Installations",m);function f(t){return t instanceof a.FirebaseError&&t.code.includes("request-failed")}function v({projectId:t}){return`${u}/projects/${t}/installations`}function w(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function b(t,e){const s=(await e.json()).error;return p.create("request-failed",{requestName:t,serverCode:s.code,serverMessage:s.message,serverStatus:s.status})}function I({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function y(t,{refreshToken:e}){const s=I(t);return s.append("Authorization",function(t){return`${d} ${t}`}(e)),s}async function S(t){const e=await t();return e.status>=500&&e.status<600?t():e}function _(t){return new Promise((e=>{setTimeout(e,t)}))}const E=/^[cdef][\w-]{21}$/,x="";function T(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(s=t,btoa(String.fromCharCode(...s)).replace(/\+/g,"-").replace(/\//g,"_"));var s;return e.substr(0,22)}(t);return E.test(e)?e:x}catch(t){return x}}function C(t){return`${t.appName}!${t.appId}`}const P=new Map;function L(t,e){const s=C(t);A(s,e),function(t,e){const s=k();s&&s.postMessage({key:t,fid:e});B()}(s,e)}function A(t,e){const s=P.get(t);if(s)for(const t of s)t(e)}let D=null;function k(){return!D&&"BroadcastChannel"in self&&(D=new BroadcastChannel("[Firebase] FID Change"),D.onmessage=t=>{A(t.data.key,t.data.fid)}),D}function B(){0===P.size&&D&&(D.close(),D=null)}const M="firebase-installations-database",N=1,O="firebase-installations-store";let z=null;function U(){return z||(z=(0,o.openDB)(M,N,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(O)}})),z}async function F(t,e){const s=C(t),i=(await U()).transaction(O,"readwrite"),n=i.objectStore(O),a=await n.get(s);return await n.put(e,s),await i.done,a&&a.fid===e.fid||L(t,e.fid),e}async function R(t){const e=C(t),s=(await U()).transaction(O,"readwrite");await s.objectStore(O).delete(e),await s.done}async function j(t,e){const s=C(t),i=(await U()).transaction(O,"readwrite"),n=i.objectStore(O),a=await n.get(s),o=e(a);return void 0===o?await n.delete(s):await n.put(o,s),await i.done,!o||a&&a.fid===o.fid||L(t,o.fid),o}async function H(t){let e;const s=await j(t.appConfig,(s=>{const i=function(t){const e=t||{fid:T(),registrationStatus:0};return V(e)}(s),n=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(p.create("app-offline"))}}const s={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(t,e){try{const s=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:s}){const i=v(t),n=I(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={fid:s,authVersion:d,appId:t.appId,sdkVersion:l},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await S((()=>fetch(i,r)));if(h.ok){const t=await h.json();return{fid:t.fid||s,registrationStatus:2,refreshToken:t.refreshToken,authToken:w(t.authToken)}}throw await b("Create Installation",h)}(t,e);return F(t.appConfig,s)}catch(s){throw f(s)&&409===s.customData.serverCode?await R(t.appConfig):await F(t.appConfig,{fid:e.fid,registrationStatus:0}),s}}(t,s);return{installationEntry:s,registrationPromise:i}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:G(t)}:{installationEntry:e}}(t,i);return e=n.registrationPromise,n.installationEntry}));return s.fid===x?{installationEntry:await e}:{installationEntry:s,registrationPromise:e}}async function G(t){let e=await W(t.appConfig);for(;1===e.registrationStatus;)await _(100),e=await W(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:s}=await H(t);return s||e}return e}function W(t){return j(t,(t=>{if(!t)throw p.create("installation-not-found");return V(t)}))}function V(t){return 1===(e=t).registrationStatus&&e.registrationTime+c<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function X({appConfig:t,heartbeatServiceProvider:e},s){const i=function(t,{fid:e}){return`${v(t)}/${e}/authTokens:generate`}(t,s),n=y(t,s),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={installation:{sdkVersion:l,appId:t.appId}},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await S((()=>fetch(i,r)));if(h.ok){return w(await h.json())}throw await b("Generate Auth Token",h)}async function $(t,e=!1){let s;const i=await j(t.appConfig,(i=>{if(!K(i))throw p.create("not-registered");const n=i.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+g}(t)}(n))return i;if(1===n.requestStatus)return s=async function(t,e){let s=await Y(t.appConfig);for(;1===s.authToken.requestStatus;)await _(100),s=await Y(t.appConfig);const i=s.authToken;return 0===i.requestStatus?$(t,e):i}(t,e),i;{if(!navigator.onLine)throw p.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(i);return s=async function(t,e){try{const s=await X(t,e),i=Object.assign(Object.assign({},e),{authToken:s});return await F(t.appConfig,i),s}catch(s){if(!f(s)||401!==s.customData.serverCode&&404!==s.customData.serverCode){const s=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await F(t.appConfig,s)}else await R(t.appConfig);throw s}}(t,e),e}}));return s?await s:i.authToken}function Y(t){return j(t,(t=>{if(!K(t))throw p.create("not-registered");const e=t.authToken;return 1===(s=e).requestStatus&&s.requestTime+c<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var s}))}function K(t){return void 0!==t&&2===t.registrationStatus}async function q(t){const e=t,{installationEntry:s,registrationPromise:i}=await H(e);return i?i.catch(console.error):$(e).catch(console.error),s.fid}async function J(t,e=!1){const s=t;await async function(t){const{registrationPromise:e}=await H(t);e&&await e}(s);return(await $(s,e)).token}async function Z(t,e){const s=function(t,{fid:e}){return`${v(t)}/${e}`}(t,e),i={method:"DELETE",headers:y(t,e)},n=await S((()=>fetch(s,i)));if(!n.ok)throw await b("Delete Installation",n)}async function Q(t){const{appConfig:e}=t,s=await j(e,(t=>{if(!t||0!==t.registrationStatus)return t}));if(s){if(1===s.registrationStatus)throw p.create("delete-pending-registration");if(2===s.registrationStatus){if(!navigator.onLine)throw p.create("app-offline");await Z(e,s),await R(e)}}}function tt(t,e){const{appConfig:s}=t;return function(t,e){k();const s=C(t);let i=P.get(s);i||(i=new Set,P.set(s,i)),i.add(e)}(s,e),()=>{!function(t,e){const s=C(t),i=P.get(s);i&&(i.delete(e),0===i.size&&P.delete(s),B())}(s,e)}}function et(t=(0,i.getApp)()){return(0,i._getProvider)(t,"installations").getImmediate()}function st(t){return p.create("missing-app-config-values",{valueName:t})}const it="installations",nt=t=>{const e=t.getProvider("app").getImmediate(),s=function(t){if(!t||!t.options)throw st("App Configuration");if(!t.name)throw st("App Name");const e=["projectId","apiKey","appId"];for(const s of e)if(!t.options[s])throw st(s);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:s,heartbeatServiceProvider:(0,i._getProvider)(e,"heartbeat"),_delete:()=>Promise.resolve()}},at=t=>{const e=t.getProvider("app").getImmediate(),s=(0,i._getProvider)(e,it).getImmediate();return{getId:()=>q(s),getToken:t=>J(s,t)}};(0,i._registerComponent)(new n.Component(it,nt,"PUBLIC")),(0,i._registerComponent)(new n.Component("installations-internal",at,"PRIVATE")),(0,i.registerVersion)(r,h),(0,i.registerVersion)(r,h,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(t,e,s)=>{s.r(e),s.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:s,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,i.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,i.w)(r.result),t.oldVersion,t.newVersion,(0,i.w)(r.transaction))})),s&&r.addEventListener("blocked",(()=>s())),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);return e&&s.addEventListener("blocked",(()=>e())),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function c(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const s=e.replace(/FromIndex$/,""),i=e!==s,n=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(s))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(e.shift())),(await Promise.all([o[s](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,i.r)((t=>({...t,get:(e,s,i)=>c(e,s)||t.get(e,s,i),has:(e,s)=>!!c(e,s)||t.has(e,s)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(t,e,s)=>{s.r(e),s.d(e,{a:()=>l,i:()=>i,r:()=>u,u:()=>f,w:()=>p});const i=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,c=new WeakMap,l=new WeakMap;let d={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return p(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function g(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...s){const i=t.call(f(this),e,...s);return h.set(i,e.sort?e.sort():[e]),p(i)}}function m(t){return"function"==typeof t?g(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),i()},a=()=>{s(t.error||new DOMException("AbortError","AbortError")),i()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),i(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),i()},a=()=>{s(t.error),i()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(c.has(t))return c.get(t);const e=m(t);return e!==t&&(c.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{LogLevel:()=>n,Logger:()=>c,setLogLevel:()=>l,setUserLogHandler:()=>d});const i=[];var n;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(n||(n={}));const a={debug:n.DEBUG,verbose:n.VERBOSE,info:n.INFO,warn:n.WARN,error:n.ERROR,silent:n.SILENT},o=n.INFO,r={[n.DEBUG]:"log",[n.VERBOSE]:"log",[n.INFO]:"info",[n.WARN]:"warn",[n.ERROR]:"error"},h=(t,e,...s)=>{if(e<t.logLevel)return;const i=(new Date).toISOString(),n=r[e];if(!n)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[n](`[${i}]  ${t.name}:`,...s)};class c{constructor(t){this.name=t,this._logLevel=o,this._logHandler=h,this._userLogHandler=null,i.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in n))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,n.DEBUG,...t),this._logHandler(this,n.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,n.VERBOSE,...t),this._logHandler(this,n.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,n.INFO,...t),this._logHandler(this,n.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,n.WARN,...t),this._logHandler(this,n.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,n.ERROR,...t),this._logHandler(this,n.ERROR,...t)}}function l(t){i.forEach((e=>{e.setLogLevel(t)}))}function d(t,e){for(const s of i){let i=null;e&&e.level&&(i=a[e.level]),s.userLogHandler=null===t?null:(e,s,...a)=>{const o=a.map((t=>{if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((t=>t)).join(" ");s>=(null!=i?i:e.logLevel)&&t({level:n[s].toLowerCase(),message:o,args:a,type:e.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(t,e,s)=>{s.r(e),s.d(e,{getAnalytics:()=>i.getAnalytics,getGoogleAnalyticsClientId:()=>i.getGoogleAnalyticsClientId,initializeAnalytics:()=>i.initializeAnalytics,isSupported:()=>i.isSupported,logEvent:()=>i.logEvent,setAnalyticsCollectionEnabled:()=>i.setAnalyticsCollectionEnabled,setConsent:()=>i.setConsent,setCurrentScreen:()=>i.setCurrentScreen,setDefaultEventParameters:()=>i.setDefaultEventParameters,setUserId:()=>i.setUserId,setUserProperties:()=>i.setUserProperties,settings:()=>i.settings});var i=s("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(t,e,s)=>{s.r(e),s.d(e,{FirebaseError:()=>i.FirebaseError,SDK_VERSION:()=>i.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>i._DEFAULT_ENTRY_NAME,_addComponent:()=>i._addComponent,_addOrOverwriteComponent:()=>i._addOrOverwriteComponent,_apps:()=>i._apps,_clearComponents:()=>i._clearComponents,_components:()=>i._components,_getProvider:()=>i._getProvider,_registerComponent:()=>i._registerComponent,_removeServiceInstance:()=>i._removeServiceInstance,deleteApp:()=>i.deleteApp,getApp:()=>i.getApp,getApps:()=>i.getApps,initializeApp:()=>i.initializeApp,onLog:()=>i.onLog,registerVersion:()=>i.registerVersion,setLogLevel:()=>i.setLogLevel});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,i.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(t,e,s)=>{s.r(e),s.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:s,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,i.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,i.w)(r.result),t.oldVersion,t.newVersion,(0,i.w)(r.transaction),t)})),s&&r.addEventListener("blocked",(t=>s(t.oldVersion,t.newVersion,t))),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);return e&&s.addEventListener("blocked",(t=>e(t.oldVersion,t))),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function c(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const s=e.replace(/FromIndex$/,""),i=e!==s,n=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(s))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(e.shift())),(await Promise.all([o[s](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,i.r)((t=>({...t,get:(e,s,i)=>c(e,s)||t.get(e,s,i),has:(e,s)=>!!c(e,s)||t.has(e,s)})))},"./node_modules/idb/build/wrap-idb-value.js":(t,e,s)=>{s.r(e),s.d(e,{a:()=>l,i:()=>i,r:()=>u,u:()=>f,w:()=>p});const i=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,c=new WeakMap,l=new WeakMap;let d={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return p(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function g(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...s){const i=t.call(f(this),e,...s);return h.set(i,e.sort?e.sort():[e]),p(i)}}function m(t){return"function"==typeof t?g(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),i()},a=()=>{s(t.error||new DOMException("AbortError","AbortError")),i()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),i(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),i()},a=()=>{s(t.error),i()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(c.has(t))return c.get(t);const e=m(t);return e!==t&&(c.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(t,e,s)=>{s.r(e),s.d(e,{Workbox:()=>u,messageSW:()=>i});try{self["workbox:window:4.3.1"]&&_()}catch(i){}var i=function(t,e){return new Promise((function(s){var i=new MessageChannel;i.port1.onmessage=function(t){return s(t.data)},t.postMessage(e,[i.port2])}))};function n(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(i){}var o=function(){var t=this;this.promise=new Promise((function(e,s){t.resolve=e,t.reject=s}))},r=function(t,e){return new URL(t,location).href===new URL(e,location).href},h=function(t,e){Object.assign(this,e,{type:t})};function c(t){return function(){for(var e=[],s=0;s<arguments.length;s++)e[s]=arguments[s];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function l(t,e,s){return s?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function d(){}var u=function(t){var e,s;function u(e,s){var i;return void 0===s&&(s={}),(i=t.call(this)||this).t=e,i.i=s,i.o=0,i.u=new o,i.s=new o,i.h=new o,i.v=i.v.bind(a(a(i))),i.l=i.l.bind(a(a(i))),i.g=i.g.bind(a(a(i))),i.m=i.m.bind(a(a(i))),i}s=t,(e=u).prototype=Object.create(s.prototype),e.prototype.constructor=e,e.__proto__=s;var g,m,p=u.prototype;return p.register=c((function(t){var e,s,i=this,n=(void 0===t?{}:t).immediate,a=void 0!==n&&n;return e=function(){return i.p=Boolean(navigator.serviceWorker.controller),i.P=i.R(),l(i.k(),(function(t){i.B=t,i.P&&(i.O=i.P,i.s.resolve(i.P),i.h.resolve(i.P),i.j(i.P),i.P.addEventListener("statechange",i.l,{once:!0}));var e=i.B.waiting;return e&&r(e.scriptURL,i.t)&&(i.O=e,Promise.resolve().then((function(){i.dispatchEvent(new h("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),i.O&&i.u.resolve(i.O),i.B.addEventListener("updatefound",i.g),navigator.serviceWorker.addEventListener("controllerchange",i.m,{once:!0}),"BroadcastChannel"in self&&(i.C=new BroadcastChannel("workbox"),i.C.addEventListener("message",i.v)),navigator.serviceWorker.addEventListener("message",i.v),i.B}))},(s=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(d):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&s.then?s.then(e):e()})),p.getSW=c((function(){return this.O||this.u.promise})),p.messageSW=c((function(t){return l(this.getSW(),(function(e){return i(e,t)}))})),p.R=function(){var t=navigator.serviceWorker.controller;if(t&&r(t.scriptURL,this.t))return t},p.k=c((function(){var t=this;return function(t,e){try{var s=t()}catch(t){return e(t)}return s&&s.then?s.then(void 0,e):s}((function(){return l(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),p.j=function(t){i(t,{type:"WINDOW_READY",meta:"workbox-window"})},p.g=function(){var t=this.B.installing;this.o>0||!r(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},p.l=function(t){var e=this,s=t.target,i=s.state,n=s===this.W,a=n?"external":"",o={sw:s,originalEvent:t};!n&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new h(a+i,o)),"installed"===i?this._=setTimeout((function(){"installed"===i&&e.B.waiting===s&&e.dispatchEvent(new h(a+"waiting",o))}),200):"activating"===i&&(clearTimeout(this._),n||this.s.resolve(s))},p.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new h("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},p.v=function(t){var e=t.data;this.dispatchEvent(new h("message",{data:e,originalEvent:t}))},g=u,(m=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&n(g.prototype,m),u}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}())}},e={};function s(i){var n=e[i];if(void 0!==n)return n.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,s),a.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{s.r(i);var t=s("./src/data/api-data.ts"),e=s("./src/data/data-modal.ts"),n=s("./src/sceneHandler/scene-handler.ts"),a=s("./src/common/common.ts"),o=s("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),r=s("./global-variables.ts"),h=s("./src/Firebase/firebase-integration.ts"),c=s("./src/common/utils.ts"),l=s("./src/components/audio-player.ts"),d=s("./src/common/event-names.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;startSessionTime;firebaseIntegration;constructor(t){this.lang=t,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new h.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(d.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const e=c.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.registerWorkbox(),this.setupCanvas();const s=await(0,t.getData)();this.majVersion=s.majversion,this.minVersion=s.minversion;const i=this.createDataModal(s);this.globalInitialization(s),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(i)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(i)}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let s=parseInt(t);isNaN(s)||(e=Math.abs((new Date).getTime()-s))}const s=parseFloat((e?e/864e5:0).toFixed(3)),i={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:s};this.firebaseIntegration.sendSessionStartEvent(i)}logSessionEndFirebaseEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(a.IsCached);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const s=await caches.open("fontCache");if(!await s.match(e)){const t=await fetch(e),i=await t.blob();await s.put(e,new Response(i))}const i=new FontFace(t,`url(${e}) format('truetype')`);await i.load(),document.fonts.add(i)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new o.Workbox("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)||this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new n.SceneHandler(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new n.SceneHandler(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${t.data}%`),t.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(a.IsCached,JSON.stringify(Array.from(this.is_cached.entries())));const e={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(e),localStorage.setItem("version"+this.lang,t.version),window.location.reload()}this.progressBar.style.width=`${t.data}%`}};handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{"visible"===document.visibilityState?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"];return new Promise(((e,s)=>{const i=t.map((t=>(new l.AudioPlayer).preloadGameAudio(t)));Promise.all(i).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),s(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(d.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cUNBQ0Esa0NBQ0EsMEJBQ0EsZ0NBQ0Esb0NBRUosT0FBTyxJQUFJbnZELFNBQVEsQ0FBQ0YsRUFBU0QsS0FDekIsTUFBTXV2RCxFQUFrQkQsRUFBVTdvRCxLQUFLc1MsSUFBYSxJQUFJLEVBQUFWLGFBQWNhLGlCQUFpQkgsS0FDdkY1WSxRQUFRZ3FCLElBQUlvbEMsR0FDUDNuRCxNQUFLLElBQU0zSCxNQUNYSyxPQUFPcEQsSUFDUkQsUUFBUUMsTUFBTSwwQkFBMkJBLEdBQ3pDOEMsRUFBTzlDLEVBQU0sR0FDZixHQUNKLEVBR04sT0FBQWtsQixHQUNJcm9CLEtBQUswa0QsUUFBUTM5QixvQkFBb0IsVUFBVy9tQixLQUFLK3hELDRCQUNqRDl0RCxPQUFPOGlCLG9CQUFvQixlQUFnQi9tQixLQUFLZ3lELG9CQUNoRHJ0RCxTQUFTb2lCLG9CQUFvQixFQUFBN00sa0JBQW1CbGEsS0FBS3d1Qix3QkFDckR2cUIsT0FBTzhpQixvQkFBb0IsU0FBVS9tQixLQUFLaXlELGNBQ3RDcHFELFVBQVV1bkQsZUFDVnZuRCxVQUFVdW5ELGNBQWNyb0Msb0JBQW9CLFVBQVcvbUIsS0FBSyt4RCwyQkFHcEUsR0FFZ0IsRUFBQS84QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9nbG9iYWwtdmFyaWFibGVzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvRmlyZWJhc2UvYmFzZS1maXJlYmFzZS1pbnRlZ3JhdGlvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWNvbmZpZy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWludGVncmF0aW9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbW1vbi9ldmVudC1uYW1lcy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbW1vbi9sZXZlbC1jb25maWcudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21tb24vc3RvbmUtY29uZmlnLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL3V0aWxzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9hdWRpby1wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvY2FuY2VsLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9jbG9zZS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvbmV4dC1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvbm8tYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL3BhdXNlLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9yZXRyeS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMveWVzLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvZmVlZGJhY2stcGFydGljbGUtZWZmZWN0L2ZlZWRiYWNrLXRleHQtZWZmZWN0cy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvZmVlZGJhY2stcGFydGljbGUtZWZmZWN0L3N1cmUtcG9wdXAudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2ZlZWRiYWNrLXBhcnRpY2xlLWVmZmVjdC90ZXh0LXBhcnRpY2xlLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9sZXZlbC1pbmRpY2F0b3IudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL21vbnN0ZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3BhdXNlLXBvcHVwLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9wbGF5LWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvcHJvbXB0LXRleHQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3N0b25lLWhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3RpbWVyLXRpY2tpbmcudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3R1dG9yaWFsLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9zaXRpb25zL2JhY2tncm91bmQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9kYXRhL2FwaS1kYXRhLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9kYXRhLW1vZGFsLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9nYW1lLXNjb3JlLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9pMTgtZm9udC1tYXBwaW5nLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZXZlbnRzL0V2ZW50TWFuYWdlci50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lSGFuZGxlci9zY2VuZS1oYW5kbGVyLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL2dhbWVwbGF5LXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL2xldmVsLXNlbGVjdGlvbi1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9sZXZlbGVuZC1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9sb2FkaW5nLXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL3N0YXJ0LXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvdXRpbC91dGlsLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FuYWx5dGljcy9kaXN0L2VzbS9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2FwcC9kaXN0L2VzbS9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2NvbXBvbmVudC9kaXN0L2VzbS9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2luc3RhbGxhdGlvbnMvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL3dyYXAtaWRiLXZhbHVlLmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2xvZ2dlci9kaXN0L2VzbS9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvZXNtL2luZGV4LmVzbS5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC9pbmRleC5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL2lkYi9idWlsZC93cmFwLWlkYi12YWx1ZS5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL3dvcmtib3gtd2luZG93L2J1aWxkL3dvcmtib3gtd2luZG93LnByb2QuZXM1Lm1qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9mZWVkVGhlTW9uc3Rlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBGaXJlYmFzZSBjb25zdGFudHMuICBTb21lIG9mIHRoZXNlIChAZGVmaW5lcykgY2FuIGJlIG92ZXJyaWRkZW4gYXQgY29tcGlsZS10aW1lLlxyXG4gKi9cclxuY29uc3QgQ09OU1RBTlRTID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIGNsaWVudCBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9DTElFTlQ6IGZhbHNlLFxyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVmaW5lIHtib29sZWFufSBXaGV0aGVyIHRoaXMgaXMgdGhlIEFkbWluIE5vZGUuanMgU0RLLlxyXG4gICAgICovXHJcbiAgICBOT0RFX0FETUlOOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogRmlyZWJhc2UgU0RLIFZlcnNpb25cclxuICAgICAqL1xyXG4gICAgU0RLX1ZFUlNJT046ICcke0pTQ09SRV9WRVJTSU9OfSdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgcHJvdmlkZWQgYXNzZXJ0aW9uIGlzIGZhbHN5XHJcbiAqL1xyXG5jb25zdCBhc3NlcnQgPSBmdW5jdGlvbiAoYXNzZXJ0aW9uLCBtZXNzYWdlKSB7XHJcbiAgICBpZiAoIWFzc2VydGlvbikge1xyXG4gICAgICAgIHRocm93IGFzc2VydGlvbkVycm9yKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBFcnJvciBvYmplY3Qgc3VpdGFibGUgZm9yIHRocm93aW5nLlxyXG4gKi9cclxuY29uc3QgYXNzZXJ0aW9uRXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcignRmlyZWJhc2UgRGF0YWJhc2UgKCcgK1xyXG4gICAgICAgIENPTlNUQU5UUy5TREtfVkVSU0lPTiArXHJcbiAgICAgICAgJykgSU5URVJOQUwgQVNTRVJUIEZBSUxFRDogJyArXHJcbiAgICAgICAgbWVzc2FnZSk7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IHN0cmluZ1RvQnl0ZUFycmF5JDEgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAvLyBUT0RPKHVzZXIpOiBVc2UgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBpZi93aGVuIGF2YWlsYWJsZVxyXG4gICAgY29uc3Qgb3V0ID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgoYyAmIDB4ZmMwMCkgPT09IDB4ZDgwMCAmJlxyXG4gICAgICAgICAgICBpICsgMSA8IHN0ci5sZW5ndGggJiZcclxuICAgICAgICAgICAgKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArICgoYyAmIDB4MDNmZikgPDwgMTApICsgKHN0ci5jaGFyQ29kZUF0KCsraSkgJiAweDAzZmYpO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gMTIpIHwgMjI0O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG4vKipcclxuICogVHVybnMgYW4gYXJyYXkgb2YgbnVtYmVycyBpbnRvIHRoZSBzdHJpbmcgZ2l2ZW4gYnkgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlXHJcbiAqIGNoYXJhY3RlcnMgdG8gd2hpY2ggdGhlIG51bWJlcnMgY29ycmVzcG9uZC5cclxuICogQHBhcmFtIGJ5dGVzIEFycmF5IG9mIG51bWJlcnMgcmVwcmVzZW50aW5nIGNoYXJhY3RlcnMuXHJcbiAqIEByZXR1cm4gU3RyaW5naWZpY2F0aW9uIG9mIHRoZSBhcnJheS5cclxuICovXHJcbmNvbnN0IGJ5dGVBcnJheVRvU3RyaW5nID0gZnVuY3Rpb24gKGJ5dGVzKSB7XHJcbiAgICAvLyBUT0RPKHVzZXIpOiBVc2UgbmF0aXZlIGltcGxlbWVudGF0aW9ucyBpZi93aGVuIGF2YWlsYWJsZVxyXG4gICAgY29uc3Qgb3V0ID0gW107XHJcbiAgICBsZXQgcG9zID0gMCwgYyA9IDA7XHJcbiAgICB3aGlsZSAocG9zIDwgYnl0ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgY29uc3QgYzEgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgaWYgKGMxIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMxID4gMTkxICYmIGMxIDwgMjI0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoKChjMSAmIDMxKSA8PCA2KSB8IChjMiAmIDYzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMxID4gMjM5ICYmIGMxIDwgMzY1KSB7XHJcbiAgICAgICAgICAgIC8vIFN1cnJvZ2F0ZSBQYWlyXHJcbiAgICAgICAgICAgIGNvbnN0IGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCBjMyA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzQgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IHUgPSAoKChjMSAmIDcpIDw8IDE4KSB8ICgoYzIgJiA2MykgPDwgMTIpIHwgKChjMyAmIDYzKSA8PCA2KSB8IChjNCAmIDYzKSkgLVxyXG4gICAgICAgICAgICAgICAgMHgxMDAwMDtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDB4ZDgwMCArICh1ID4+IDEwKSk7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGRjMDAgKyAodSAmIDEwMjMpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGMyID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCBjMyA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAxNSkgPDwgMTIpIHwgKChjMiAmIDYzKSA8PCA2KSB8IChjMyAmIDYzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dC5qb2luKCcnKTtcclxufTtcclxuLy8gV2UgZGVmaW5lIGl0IGFzIGFuIG9iamVjdCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjbGFzcyBiZWNhdXNlIGEgY2xhc3MgY29tcGlsZWQgZG93biB0byBlczUgY2FuJ3RcclxuLy8gYmUgdHJlZXNoYWtlZC4gaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzE2OTFcclxuLy8gU3RhdGljIGxvb2t1cCBtYXBzLCBsYXppbHkgcG9wdWxhdGVkIGJ5IGluaXRfKClcclxuY29uc3QgYmFzZTY0ID0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGJ5dGVzIHRvIGNoYXJhY3RlcnMuXHJcbiAgICAgKi9cclxuICAgIGJ5dGVUb0NoYXJNYXBfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIGNoYXJUb0J5dGVNYXBfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXBzIGJ5dGVzIHRvIHdlYnNhZmUgY2hhcmFjdGVycy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGJ5dGVUb0NoYXJNYXBXZWJTYWZlXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyB3ZWJzYWZlIGNoYXJhY3RlcnMgdG8gYnl0ZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LCBzaGFyZWQgYmV0d2VlblxyXG4gICAgICogRU5DT0RFRF9WQUxTIGFuZCBFTkNPREVEX1ZBTFNfV0VCU0FGRVxyXG4gICAgICovXHJcbiAgICBFTkNPREVEX1ZBTFNfQkFTRTogJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaJyArICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicgKyAnMDEyMzQ1Njc4OScsXHJcbiAgICAvKipcclxuICAgICAqIE91ciBkZWZhdWx0IGFscGhhYmV0LiBWYWx1ZSA2NCAoPSkgaXMgc3BlY2lhbDsgaXQgbWVhbnMgXCJub3RoaW5nLlwiXHJcbiAgICAgKi9cclxuICAgIGdldCBFTkNPREVEX1ZBTFMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnKy89JztcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIE91ciB3ZWJzYWZlIGFscGhhYmV0LlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTX1dFQlNBRkUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UgKyAnLV8uJztcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIFdoZXRoZXIgdGhpcyBicm93c2VyIHN1cHBvcnRzIHRoZSBhdG9iIGFuZCBidG9hIGZ1bmN0aW9ucy4gVGhpcyBleHRlbnNpb25cclxuICAgICAqIHN0YXJ0ZWQgYXQgTW96aWxsYSBidXQgaXMgbm93IGltcGxlbWVudGVkIGJ5IG1hbnkgYnJvd3NlcnMuIFdlIHVzZSB0aGVcclxuICAgICAqIEFTU1VNRV8qIHZhcmlhYmxlcyB0byBhdm9pZCBwdWxsaW5nIGluIHRoZSBmdWxsIHVzZXJhZ2VudCBkZXRlY3Rpb24gbGlicmFyeVxyXG4gICAgICogYnV0IHN0aWxsIGFsbG93aW5nIHRoZSBzdGFuZGFyZCBwZXItYnJvd3NlciBjb21waWxhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBIQVNfTkFUSVZFX1NVUFBPUlQ6IHR5cGVvZiBhdG9iID09PSAnZnVuY3Rpb24nLFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGFuIGFycmF5IG9mIGJ5dGVzLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBbiBhcnJheSBvZiBieXRlcyAobnVtYmVycyB3aXRoXHJcbiAgICAgKiAgICAgdmFsdWUgaW4gWzAsIDI1NV0pIHRvIGVuY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIEJvb2xlYW4gaW5kaWNhdGluZyB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVCeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdlbmNvZGVCeXRlQXJyYXkgdGFrZXMgYW4gYXJyYXkgYXMgYSBwYXJhbWV0ZXInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbml0XygpO1xyXG4gICAgICAgIGNvbnN0IGJ5dGVUb0NoYXJNYXAgPSB3ZWJTYWZlXHJcbiAgICAgICAgICAgID8gdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9cclxuICAgICAgICAgICAgOiB0aGlzLmJ5dGVUb0NoYXJNYXBfO1xyXG4gICAgICAgIGNvbnN0IG91dHB1dCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDMpIHtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTEgPSBpbnB1dFtpXTtcclxuICAgICAgICAgICAgY29uc3QgaGF2ZUJ5dGUyID0gaSArIDEgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gaW5wdXRbaSArIDFdIDogMDtcclxuICAgICAgICAgICAgY29uc3QgaGF2ZUJ5dGUzID0gaSArIDIgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUzID0gaGF2ZUJ5dGUzID8gaW5wdXRbaSArIDJdIDogMDtcclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTEgPSBieXRlMSA+PiAyO1xyXG4gICAgICAgICAgICBjb25zdCBvdXRCeXRlMiA9ICgoYnl0ZTEgJiAweDAzKSA8PCA0KSB8IChieXRlMiA+PiA0KTtcclxuICAgICAgICAgICAgbGV0IG91dEJ5dGUzID0gKChieXRlMiAmIDB4MGYpIDw8IDIpIHwgKGJ5dGUzID4+IDYpO1xyXG4gICAgICAgICAgICBsZXQgb3V0Qnl0ZTQgPSBieXRlMyAmIDB4M2Y7XHJcbiAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUzKSB7XHJcbiAgICAgICAgICAgICAgICBvdXRCeXRlNCA9IDY0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCFoYXZlQnl0ZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICBvdXRCeXRlMyA9IDY0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTFdLCBieXRlVG9DaGFyTWFwW291dEJ5dGUyXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlM10sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTRdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dC5qb2luKCcnKTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEJhc2U2NC1lbmNvZGUgYSBzdHJpbmcuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IEEgc3RyaW5nIHRvIGVuY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIElmIHRydWUsIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIFRoZSBiYXNlNjQgZW5jb2RlZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIGVuY29kZVN0cmluZyhpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XHJcbiAgICAgICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxyXG4gICAgICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhd2ViU2FmZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYnRvYShpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZUJ5dGVBcnJheShzdHJpbmdUb0J5dGVBcnJheSQxKGlucHV0KSwgd2ViU2FmZSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCB0byBkZWNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBUcnVlIGlmIHdlIHNob3VsZCB1c2UgdGhlXHJcbiAgICAgKiAgICAgYWx0ZXJuYXRpdmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRlY29kZWQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIGRlY29kZVN0cmluZyhpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIC8vIFNob3J0Y3V0IGZvciBNb3ppbGxhIGJyb3dzZXJzIHRoYXQgaW1wbGVtZW50XHJcbiAgICAgICAgLy8gYSBuYXRpdmUgYmFzZTY0IGVuY29kZXIgaW4gdGhlIGZvcm0gb2YgXCJidG9hL2F0b2JcIlxyXG4gICAgICAgIGlmICh0aGlzLkhBU19OQVRJVkVfU1VQUE9SVCAmJiAhd2ViU2FmZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXRvYihpbnB1dCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBieXRlQXJyYXlUb1N0cmluZyh0aGlzLmRlY29kZVN0cmluZ1RvQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZGVjb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEluIGJhc2UtNjQgZGVjb2RpbmcsIGdyb3VwcyBvZiBmb3VyIGNoYXJhY3RlcnMgYXJlIGNvbnZlcnRlZCBpbnRvIHRocmVlXHJcbiAgICAgKiBieXRlcy4gIElmIHRoZSBlbmNvZGVyIGRpZCBub3QgYXBwbHkgcGFkZGluZywgdGhlIGlucHV0IGxlbmd0aCBtYXkgbm90XHJcbiAgICAgKiBiZSBhIG11bHRpcGxlIG9mIDQuXHJcbiAgICAgKlxyXG4gICAgICogSW4gdGhpcyBjYXNlLCB0aGUgbGFzdCBncm91cCB3aWxsIGhhdmUgZmV3ZXIgdGhhbiA0IGNoYXJhY3RlcnMsIGFuZFxyXG4gICAgICogcGFkZGluZyB3aWxsIGJlIGluZmVycmVkLiAgSWYgdGhlIGdyb3VwIGhhcyBvbmUgb3IgdHdvIGNoYXJhY3RlcnMsIGl0IGRlY29kZXNcclxuICAgICAqIHRvIG9uZSBieXRlLiAgSWYgdGhlIGdyb3VwIGhhcyB0aHJlZSBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzIHRvIHR3byBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgSW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZSB3ZWItc2FmZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gYnl0ZXMgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkge1xyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICBjb25zdCBjaGFyVG9CeXRlTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5jaGFyVG9CeXRlTWFwXztcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDspIHtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTEgPSBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKyspXTtcclxuICAgICAgICAgICAgY29uc3QgaGF2ZUJ5dGUyID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTIgPSBoYXZlQnl0ZTIgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiAwO1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUzID0gaGF2ZUJ5dGUzID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgY29uc3QgaGF2ZUJ5dGU0ID0gaSA8IGlucHV0Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTQgPSBoYXZlQnl0ZTQgPyBjaGFyVG9CeXRlTWFwW2lucHV0LmNoYXJBdChpKV0gOiA2NDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZTEgPT0gbnVsbCB8fCBieXRlMiA9PSBudWxsIHx8IGJ5dGUzID09IG51bGwgfHwgYnl0ZTQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IERlY29kZUJhc2U2NFN0cmluZ0Vycm9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTEgPSAoYnl0ZTEgPDwgMikgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIG91dHB1dC5wdXNoKG91dEJ5dGUxKTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUzICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUyIDw8IDQpICYgMHhmMCkgfCAoYnl0ZTMgPj4gMik7XHJcbiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnl0ZTQgIT09IDY0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTMgPSAoKGJ5dGUzIDw8IDYpICYgMHhjMCkgfCBieXRlNDtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIExhenkgc3RhdGljIGluaXRpYWxpemF0aW9uIGZ1bmN0aW9uLiBDYWxsZWQgYmVmb3JlXHJcbiAgICAgKiBhY2Nlc3NpbmcgYW55IG9mIHRoZSBzdGF0aWMgbWFwIHZhcmlhYmxlcy5cclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGluaXRfKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5ieXRlVG9DaGFyTWFwXykge1xyXG4gICAgICAgICAgICB0aGlzLmJ5dGVUb0NoYXJNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV8gPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwV2ViU2FmZV8gPSB7fTtcclxuICAgICAgICAgICAgLy8gV2Ugd2FudCBxdWljayBtYXBwaW5ncyBiYWNrIGFuZCBmb3J0aCwgc28gd2UgcHJlY29tcHV0ZSB0d28gbWFwcy5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLkVOQ09ERURfVkFMUy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwX1tpXSA9IHRoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5ieXRlVG9DaGFyTWFwX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwV2ViU2FmZV9baV0gPSB0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldXSA9IGk7XHJcbiAgICAgICAgICAgICAgICAvLyBCZSBmb3JnaXZpbmcgd2hlbiBkZWNvZGluZyBhbmQgY29ycmVjdGx5IGRlY29kZSBib3RoIGVuY29kaW5ncy5cclxuICAgICAgICAgICAgICAgIGlmIChpID49IHRoaXMuRU5DT0RFRF9WQUxTX0JBU0UubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFyVG9CeXRlTWFwX1t0aGlzLkVOQ09ERURfVkFMU19XRUJTQUZFLmNoYXJBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfW3RoaXMuRU5DT0RFRF9WQUxTLmNoYXJBdChpKV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogQW4gZXJyb3IgZW5jb3VudGVyZWQgd2hpbGUgZGVjb2RpbmcgYmFzZTY0IHN0cmluZy5cclxuICovXHJcbmNsYXNzIERlY29kZUJhc2U2NFN0cmluZ0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSAnRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3InO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZW5jb2RpbmdcclxuICovXHJcbmNvbnN0IGJhc2U2NEVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGNvbnN0IHV0ZjhCeXRlcyA9IHN0cmluZ1RvQnl0ZUFycmF5JDEoc3RyKTtcclxuICAgIHJldHVybiBiYXNlNjQuZW5jb2RlQnl0ZUFycmF5KHV0ZjhCeXRlcywgdHJ1ZSk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZW5jb2RpbmcgKHdpdGhvdXQgXCIuXCIgcGFkZGluZyBpbiB0aGUgZW5kKS5cclxuICogZS5nLiBVc2VkIGluIEpTT04gV2ViIFRva2VuIChKV1QpIHBhcnRzLlxyXG4gKi9cclxuY29uc3QgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAvLyBVc2UgYmFzZTY0dXJsIGVuY29kaW5nIGFuZCByZW1vdmUgcGFkZGluZyBpbiB0aGUgZW5kIChkb3QgY2hhcmFjdGVycykuXHJcbiAgICByZXR1cm4gYmFzZTY0RW5jb2RlKHN0cikucmVwbGFjZSgvXFwuL2csICcnKTtcclxufTtcclxuLyoqXHJcbiAqIFVSTC1zYWZlIGJhc2U2NCBkZWNvZGluZ1xyXG4gKlxyXG4gKiBOT1RFOiBETyBOT1QgdXNlIHRoZSBnbG9iYWwgYXRvYigpIGZ1bmN0aW9uIC0gaXQgZG9lcyBOT1Qgc3VwcG9ydCB0aGVcclxuICogYmFzZTY0VXJsIHZhcmlhbnQgZW5jb2RpbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSBzdHIgVG8gYmUgZGVjb2RlZFxyXG4gKiBAcmV0dXJuIERlY29kZWQgcmVzdWx0LCBpZiBwb3NzaWJsZVxyXG4gKi9cclxuY29uc3QgYmFzZTY0RGVjb2RlID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICByZXR1cm4gYmFzZTY0LmRlY29kZVN0cmluZyhzdHIsIHRydWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdiYXNlNjREZWNvZGUgZmFpbGVkOiAnLCBlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRG8gYSBkZWVwLWNvcHkgb2YgYmFzaWMgSmF2YVNjcmlwdCBPYmplY3RzIG9yIEFycmF5cy5cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBDb3B5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gZGVlcEV4dGVuZCh1bmRlZmluZWQsIHZhbHVlKTtcclxufVxyXG4vKipcclxuICogQ29weSBwcm9wZXJ0aWVzIGZyb20gc291cmNlIHRvIHRhcmdldCAocmVjdXJzaXZlbHkgYWxsb3dzIGV4dGVuc2lvblxyXG4gKiBvZiBPYmplY3RzIGFuZCBBcnJheXMpLiAgU2NhbGFyIHZhbHVlcyBpbiB0aGUgdGFyZ2V0IGFyZSBvdmVyLXdyaXR0ZW4uXHJcbiAqIElmIHRhcmdldCBpcyB1bmRlZmluZWQsIGFuIG9iamVjdCBvZiB0aGUgYXBwcm9wcmlhdGUgdHlwZSB3aWxsIGJlIGNyZWF0ZWRcclxuICogKGFuZCByZXR1cm5lZCkuXHJcbiAqXHJcbiAqIFdlIHJlY3Vyc2l2ZWx5IGNvcHkgYWxsIGNoaWxkIHByb3BlcnRpZXMgb2YgcGxhaW4gT2JqZWN0cyBpbiB0aGUgc291cmNlLSBzb1xyXG4gKiB0aGF0IG5hbWVzcGFjZS0gbGlrZSBkaWN0aW9uYXJpZXMgYXJlIG1lcmdlZC5cclxuICpcclxuICogTm90ZSB0aGF0IHRoZSB0YXJnZXQgY2FuIGJlIGEgZnVuY3Rpb24sIGluIHdoaWNoIGNhc2UgdGhlIHByb3BlcnRpZXMgaW5cclxuICogdGhlIHNvdXJjZSBPYmplY3QgYXJlIGNvcGllZCBvbnRvIGl0IGFzIHN0YXRpYyBwcm9wZXJ0aWVzIG9mIHRoZSBGdW5jdGlvbi5cclxuICpcclxuICogTm90ZTogd2UgZG9uJ3QgbWVyZ2UgX19wcm90b19fIHRvIHByZXZlbnQgcHJvdG90eXBlIHBvbGx1dGlvblxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEV4dGVuZCh0YXJnZXQsIHNvdXJjZSkge1xyXG4gICAgaWYgKCEoc291cmNlIGluc3RhbmNlb2YgT2JqZWN0KSkge1xyXG4gICAgICAgIHJldHVybiBzb3VyY2U7XHJcbiAgICB9XHJcbiAgICBzd2l0Y2ggKHNvdXJjZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgIGNhc2UgRGF0ZTpcclxuICAgICAgICAgICAgLy8gVHJlYXQgRGF0ZXMgbGlrZSBzY2FsYXJzOyBpZiB0aGUgdGFyZ2V0IGRhdGUgb2JqZWN0IGhhZCBhbnkgY2hpbGRcclxuICAgICAgICAgICAgLy8gcHJvcGVydGllcyAtIHRoZXkgd2lsbCBiZSBsb3N0IVxyXG4gICAgICAgICAgICBjb25zdCBkYXRlVmFsdWUgPSBzb3VyY2U7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlVmFsdWUuZ2V0VGltZSgpKTtcclxuICAgICAgICBjYXNlIE9iamVjdDpcclxuICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlIEFycmF5OlxyXG4gICAgICAgICAgICAvLyBBbHdheXMgY29weSB0aGUgYXJyYXkgc291cmNlIGFuZCBvdmVyd3JpdGUgdGhlIHRhcmdldC5cclxuICAgICAgICAgICAgdGFyZ2V0ID0gW107XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIC8vIE5vdCBhIHBsYWluIE9iamVjdCAtIHRyZWF0IGl0IGFzIGEgc2NhbGFyLlxyXG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHNvdXJjZSkge1xyXG4gICAgICAgIC8vIHVzZSBpc1ZhbGlkS2V5IHRvIGd1YXJkIGFnYWluc3QgcHJvdG90eXBlIHBvbGx1dGlvbi4gU2VlIGh0dHBzOi8vc255ay5pby92dWxuL1NOWUstSlMtTE9EQVNILTQ1MDIwMlxyXG4gICAgICAgIGlmICghc291cmNlLmhhc093blByb3BlcnR5KHByb3ApIHx8ICFpc1ZhbGlkS2V5KHByb3ApKSB7XHJcbiAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0YXJnZXRbcHJvcF0gPSBkZWVwRXh0ZW5kKHRhcmdldFtwcm9wXSwgc291cmNlW3Byb3BdKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0YXJnZXQ7XHJcbn1cclxuZnVuY3Rpb24gaXNWYWxpZEtleShrZXkpIHtcclxuICAgIHJldHVybiBrZXkgIT09ICdfX3Byb3RvX18nO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQb2x5ZmlsbCBmb3IgYGdsb2JhbFRoaXNgIG9iamVjdC5cclxuICogQHJldHVybnMgdGhlIGBnbG9iYWxUaGlzYCBvYmplY3QgZm9yIHRoZSBnaXZlbiBlbnZpcm9ubWVudC5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xyXG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBzZWxmO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdztcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBnbG9iYWw7XHJcbiAgICB9XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdC4nKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21HbG9iYWwgPSAoKSA9PiBnZXRHbG9iYWwoKS5fX0ZJUkVCQVNFX0RFRkFVTFRTX187XHJcbi8qKlxyXG4gKiBBdHRlbXB0IHRvIHJlYWQgZGVmYXVsdHMgZnJvbSBhIEpTT04gc3RyaW5nIHByb3ZpZGVkIHRvXHJcbiAqIHByb2Nlc3MoLillbnYoLilfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb3IgYSBKU09OIGZpbGUgd2hvc2UgcGF0aCBpcyBpblxyXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19QQVRIX19cclxuICogVGhlIGRvdHMgYXJlIGluIHBhcmVucyBiZWNhdXNlIGNlcnRhaW4gY29tcGlsZXJzIChWaXRlPykgY2Fubm90XHJcbiAqIGhhbmRsZSBzZWVpbmcgdGhhdCB2YXJpYWJsZSBpbiBjb21tZW50cy5cclxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maXJlYmFzZS9maXJlYmFzZS1qcy1zZGsvaXNzdWVzLzY4MzhcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRzRnJvbUVudlZhcmlhYmxlID0gKCkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcHJvY2Vzcy5lbnYgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVmYXVsdHNKc29uU3RyaW5nID0gcHJvY2Vzcy5lbnYuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4gICAgaWYgKGRlZmF1bHRzSnNvblN0cmluZykge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRlZmF1bHRzSnNvblN0cmluZyk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGdldERlZmF1bHRzRnJvbUNvb2tpZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IG1hdGNoO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaCgvX19GSVJFQkFTRV9ERUZBVUxUU19fPShbXjtdKykvKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgLy8gU29tZSBlbnZpcm9ubWVudHMgc3VjaCBhcyBBbmd1bGFyIFVuaXZlcnNhbCBTU1IgaGF2ZSBhXHJcbiAgICAgICAgLy8gYGRvY3VtZW50YCBvYmplY3QgYnV0IGVycm9yIG9uIGFjY2Vzc2luZyBgZG9jdW1lbnQuY29va2llYC5cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBkZWNvZGVkID0gbWF0Y2ggJiYgYmFzZTY0RGVjb2RlKG1hdGNoWzFdKTtcclxuICAgIHJldHVybiBkZWNvZGVkICYmIEpTT04ucGFyc2UoZGVjb2RlZCk7XHJcbn07XHJcbi8qKlxyXG4gKiBHZXQgdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3QuIEl0IGNoZWNrcyBpbiBvcmRlcjpcclxuICogKDEpIGlmIHN1Y2ggYW4gb2JqZWN0IGV4aXN0cyBhcyBhIHByb3BlcnR5IG9mIGBnbG9iYWxUaGlzYFxyXG4gKiAoMikgaWYgc3VjaCBhbiBvYmplY3Qgd2FzIHByb3ZpZGVkIG9uIGEgc2hlbGwgZW52aXJvbm1lbnQgdmFyaWFibGVcclxuICogKDMpIGlmIHN1Y2ggYW4gb2JqZWN0IGV4aXN0cyBpbiBhIGNvb2tpZVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0cyA9ICgpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIChnZXREZWZhdWx0c0Zyb21HbG9iYWwoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSgpIHx8XHJcbiAgICAgICAgICAgIGdldERlZmF1bHRzRnJvbUNvb2tpZSgpKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ2F0Y2gtYWxsIGZvciBiZWluZyB1bmFibGUgdG8gZ2V0IF9fRklSRUJBU0VfREVGQVVMVFNfXyBkdWVcclxuICAgICAgICAgKiB0byBhbnkgZW52aXJvbm1lbnQgY2FzZSB3ZSBoYXZlIG5vdCBhY2NvdW50ZWQgZm9yLiBMb2cgdG9cclxuICAgICAgICAgKiBpbmZvIGluc3RlYWQgb2Ygc3dhbGxvd2luZyBzbyB3ZSBjYW4gZmluZCB0aGVzZSB1bmtub3duIGNhc2VzXHJcbiAgICAgICAgICogYW5kIGFkZCBwYXRocyBmb3IgdGhlbSBpZiBuZWVkZWQuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgY29uc29sZS5pbmZvKGBVbmFibGUgdG8gZ2V0IF9fRklSRUJBU0VfREVGQVVMVFNfXyBkdWUgdG86ICR7ZX1gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGVtdWxhdG9yIGhvc3Qgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0XHJcbiAqIGZvciB0aGUgZ2l2ZW4gcHJvZHVjdC5cclxuICogQHJldHVybnMgYSBVUkwgaG9zdCBmb3JtYXR0ZWQgbGlrZSBgMTI3LjAuMC4xOjk5OTlgIG9yIGBbOjoxXTo0MDAwYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCA9IChwcm9kdWN0TmFtZSkgPT4geyB2YXIgX2EsIF9iOyByZXR1cm4gKF9iID0gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmVtdWxhdG9ySG9zdHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYltwcm9kdWN0TmFtZV07IH07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGVtdWxhdG9yIGhvc3RuYW1lIGFuZCBwb3J0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgcGFpciBvZiBob3N0bmFtZSBhbmQgcG9ydCBsaWtlIGBbXCI6OjFcIiwgNDAwMF1gIGlmIGF2YWlsYWJsZVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0RW11bGF0b3JIb3N0bmFtZUFuZFBvcnQgPSAocHJvZHVjdE5hbWUpID0+IHtcclxuICAgIGNvbnN0IGhvc3QgPSBnZXREZWZhdWx0RW11bGF0b3JIb3N0KHByb2R1Y3ROYW1lKTtcclxuICAgIGlmICghaG9zdCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzZXBhcmF0b3JJbmRleCA9IGhvc3QubGFzdEluZGV4T2YoJzonKTsgLy8gRmluZGluZyB0aGUgbGFzdCBzaW5jZSBJUHY2IGFkZHIgYWxzbyBoYXMgY29sb25zLlxyXG4gICAgaWYgKHNlcGFyYXRvckluZGV4IDw9IDAgfHwgc2VwYXJhdG9ySW5kZXggKyAxID09PSBob3N0Lmxlbmd0aCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBob3N0ICR7aG9zdH0gd2l0aCBubyBzZXBhcmF0ZSBob3N0bmFtZSBhbmQgcG9ydCFgKTtcclxuICAgIH1cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcclxuICAgIGNvbnN0IHBvcnQgPSBwYXJzZUludChob3N0LnN1YnN0cmluZyhzZXBhcmF0b3JJbmRleCArIDEpLCAxMCk7XHJcbiAgICBpZiAoaG9zdFswXSA9PT0gJ1snKSB7XHJcbiAgICAgICAgLy8gQnJhY2tldC1xdW90ZWQgYFtpcHY2YWRkcl06cG9ydGAgPT4gcmV0dXJuIFwiaXB2NmFkZHJcIiAod2l0aG91dCBicmFja2V0cykuXHJcbiAgICAgICAgcmV0dXJuIFtob3N0LnN1YnN0cmluZygxLCBzZXBhcmF0b3JJbmRleCAtIDEpLCBwb3J0XTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMCwgc2VwYXJhdG9ySW5kZXgpLCBwb3J0XTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgRmlyZWJhc2UgYXBwIGNvbmZpZyBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3QuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRBcHBDb25maWcgPSAoKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb25maWc7IH07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGV4cGVyaW1lbnRhbCBzZXR0aW5nIG9uIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0IChwcm9wZXJ0aWVzXHJcbiAqIHByZWZpeGVkIGJ5IFwiX1wiKVxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXRFeHBlcmltZW50YWxTZXR0aW5nID0gKG5hbWUpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hW2BfJHtuYW1lfWBdOyB9O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBEZWZlcnJlZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnJlamVjdCA9ICgpID0+IHsgfTtcclxuICAgICAgICB0aGlzLnJlc29sdmUgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5wcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnJlc29sdmUgPSByZXNvbHZlO1xyXG4gICAgICAgICAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogT3VyIEFQSSBpbnRlcm5hbHMgYXJlIG5vdCBwcm9taXNlaWZpZWQgYW5kIGNhbm5vdCBiZWNhdXNlIG91ciBjYWxsYmFjayBBUElzIGhhdmUgc3VidGxlIGV4cGVjdGF0aW9ucyBhcm91bmRcclxuICAgICAqIGludm9raW5nIHByb21pc2VzIGlubGluZSwgd2hpY2ggUHJvbWlzZXMgYXJlIGZvcmJpZGRlbiB0byBkby4gVGhpcyBtZXRob2QgYWNjZXB0cyBhbiBvcHRpb25hbCBub2RlLXN0eWxlIGNhbGxiYWNrXHJcbiAgICAgKiBhbmQgcmV0dXJucyBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgd2hpY2ggd2lsbCByZXNvbHZlIG9yIHJlamVjdCB0aGUgRGVmZXJyZWQncyBwcm9taXNlLlxyXG4gICAgICovXHJcbiAgICB3cmFwQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm4gKGVycm9yLCB2YWx1ZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzb2x2ZSh2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgLy8gQXR0YWNoaW5nIG5vb3AgaGFuZGxlciBqdXN0IGluIGNhc2UgZGV2ZWxvcGVyIHdhc24ndCBleHBlY3RpbmdcclxuICAgICAgICAgICAgICAgIC8vIHByb21pc2VzXHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb21pc2UuY2F0Y2goKCkgPT4geyB9KTtcclxuICAgICAgICAgICAgICAgIC8vIFNvbWUgb2Ygb3VyIGNhbGxiYWNrcyBkb24ndCBleHBlY3QgYSB2YWx1ZSBhbmQgb3VyIG93biB0ZXN0c1xyXG4gICAgICAgICAgICAgICAgLy8gYXNzZXJ0IHRoYXQgdGhlIHBhcmFtZXRlciBsZW5ndGggaXMgMVxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZU1vY2tVc2VyVG9rZW4odG9rZW4sIHByb2plY3RJZCkge1xyXG4gICAgaWYgKHRva2VuLnVpZCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIFwidWlkXCIgZmllbGQgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCBieSBtb2NrVXNlclRva2VuLiBQbGVhc2UgdXNlIFwic3ViXCIgaW5zdGVhZCBmb3IgRmlyZWJhc2UgQXV0aCBVc2VyIElELicpO1xyXG4gICAgfVxyXG4gICAgLy8gVW5zZWN1cmVkIEpXVHMgdXNlIFwibm9uZVwiIGFzIHRoZSBhbGdvcml0aG0uXHJcbiAgICBjb25zdCBoZWFkZXIgPSB7XHJcbiAgICAgICAgYWxnOiAnbm9uZScsXHJcbiAgICAgICAgdHlwZTogJ0pXVCdcclxuICAgIH07XHJcbiAgICBjb25zdCBwcm9qZWN0ID0gcHJvamVjdElkIHx8ICdkZW1vLXByb2plY3QnO1xyXG4gICAgY29uc3QgaWF0ID0gdG9rZW4uaWF0IHx8IDA7XHJcbiAgICBjb25zdCBzdWIgPSB0b2tlbi5zdWIgfHwgdG9rZW4udXNlcl9pZDtcclxuICAgIGlmICghc3ViKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibW9ja1VzZXJUb2tlbiBtdXN0IGNvbnRhaW4gJ3N1Yicgb3IgJ3VzZXJfaWQnIGZpZWxkIVwiKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHBheWxvYWQgPSBPYmplY3QuYXNzaWduKHsgXHJcbiAgICAgICAgLy8gU2V0IGFsbCByZXF1aXJlZCBmaWVsZHMgdG8gZGVjZW50IGRlZmF1bHRzXHJcbiAgICAgICAgaXNzOiBgaHR0cHM6Ly9zZWN1cmV0b2tlbi5nb29nbGUuY29tLyR7cHJvamVjdH1gLCBhdWQ6IHByb2plY3QsIGlhdCwgZXhwOiBpYXQgKyAzNjAwLCBhdXRoX3RpbWU6IGlhdCwgc3ViLCB1c2VyX2lkOiBzdWIsIGZpcmViYXNlOiB7XHJcbiAgICAgICAgICAgIHNpZ25faW5fcHJvdmlkZXI6ICdjdXN0b20nLFxyXG4gICAgICAgICAgICBpZGVudGl0aWVzOiB7fVxyXG4gICAgICAgIH0gfSwgdG9rZW4pO1xyXG4gICAgLy8gVW5zZWN1cmVkIEpXVHMgdXNlIHRoZSBlbXB0eSBzdHJpbmcgYXMgYSBzaWduYXR1cmUuXHJcbiAgICBjb25zdCBzaWduYXR1cmUgPSAnJztcclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoSlNPTi5zdHJpbmdpZnkoaGVhZGVyKSksXHJcbiAgICAgICAgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoSlNPTi5zdHJpbmdpZnkocGF5bG9hZCkpLFxyXG4gICAgICAgIHNpZ25hdHVyZVxyXG4gICAgXS5qb2luKCcuJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgbmF2aWdhdG9yLnVzZXJBZ2VudCBzdHJpbmcgb3IgJycgaWYgaXQncyBub3QgZGVmaW5lZC5cclxuICogQHJldHVybiB1c2VyIGFnZW50IHN0cmluZ1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0VUEoKSB7XHJcbiAgICBpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICB0eXBlb2YgbmF2aWdhdG9yWyd1c2VyQWdlbnQnXSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICByZXR1cm4gbmF2aWdhdG9yWyd1c2VyQWdlbnQnXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogRGV0ZWN0IENvcmRvdmEgLyBQaG9uZUdhcCAvIElvbmljIGZyYW1ld29ya3Mgb24gYSBtb2JpbGUgZGV2aWNlLlxyXG4gKlxyXG4gKiBEZWxpYmVyYXRlbHkgZG9lcyBub3QgcmVseSBvbiBjaGVja2luZyBgZmlsZTovL2AgVVJMcyAoYXMgdGhpcyBmYWlscyBQaG9uZUdhcFxyXG4gKiBpbiB0aGUgUmlwcGxlIGVtdWxhdG9yKSBub3IgQ29yZG92YSBgb25EZXZpY2VSZWFkeWAsIHdoaWNoIHdvdWxkIG5vcm1hbGx5XHJcbiAqIHdhaXQgZm9yIGEgY2FsbGJhY2suXHJcbiAqL1xyXG5mdW5jdGlvbiBpc01vYmlsZUNvcmRvdmEoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZSBTZXR0aW5nIHVwIGFuIGJyb2FkbHkgYXBwbGljYWJsZSBpbmRleCBzaWduYXR1cmUgZm9yIFdpbmRvd1xyXG4gICAgICAgIC8vIGp1c3QgdG8gZGVhbCB3aXRoIHRoaXMgY2FzZSB3b3VsZCBwcm9iYWJseSBiZSBhIGJhZCBpZGVhLlxyXG4gICAgICAgICEhKHdpbmRvd1snY29yZG92YSddIHx8IHdpbmRvd1sncGhvbmVnYXAnXSB8fCB3aW5kb3dbJ1Bob25lR2FwJ10pICYmXHJcbiAgICAgICAgL2lvc3xpcGhvbmV8aXBvZHxpcGFkfGFuZHJvaWR8YmxhY2tiZXJyeXxpZW1vYmlsZS9pLnRlc3QoZ2V0VUEoKSkpO1xyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgTm9kZS5qcy5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIE5vZGUuanMgZW52aXJvbm1lbnQgaXMgZGV0ZWN0ZWQgb3Igc3BlY2lmaWVkLlxyXG4gKi9cclxuLy8gTm9kZSBkZXRlY3Rpb24gbG9naWMgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2lsaWFrYW4vZGV0ZWN0LW5vZGUvXHJcbmZ1bmN0aW9uIGlzTm9kZSgpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IGZvcmNlRW52aXJvbm1lbnQgPSAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZm9yY2VFbnZpcm9ubWVudDtcclxuICAgIGlmIChmb3JjZUVudmlyb25tZW50ID09PSAnbm9kZScpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGZvcmNlRW52aXJvbm1lbnQgPT09ICdicm93c2VyJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXScpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBCcm93c2VyIEVudmlyb25tZW50XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0Jyb3dzZXIoKSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHNlbGYgPT09ICdvYmplY3QnICYmIHNlbGYuc2VsZiA9PT0gc2VsZjtcclxufVxyXG5mdW5jdGlvbiBpc0Jyb3dzZXJFeHRlbnNpb24oKSB7XHJcbiAgICBjb25zdCBydW50aW1lID0gdHlwZW9mIGNocm9tZSA9PT0gJ29iamVjdCdcclxuICAgICAgICA/IGNocm9tZS5ydW50aW1lXHJcbiAgICAgICAgOiB0eXBlb2YgYnJvd3NlciA9PT0gJ29iamVjdCdcclxuICAgICAgICAgICAgPyBicm93c2VyLnJ1bnRpbWVcclxuICAgICAgICAgICAgOiB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gdHlwZW9mIHJ1bnRpbWUgPT09ICdvYmplY3QnICYmIHJ1bnRpbWUuaWQgIT09IHVuZGVmaW5lZDtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IFJlYWN0IE5hdGl2ZS5cclxuICpcclxuICogQHJldHVybiB0cnVlIGlmIFJlYWN0TmF0aXZlIGVudmlyb25tZW50IGlzIGRldGVjdGVkLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZWFjdE5hdGl2ZSgpIHtcclxuICAgIHJldHVybiAodHlwZW9mIG5hdmlnYXRvciA9PT0gJ29iamVjdCcgJiYgbmF2aWdhdG9yWydwcm9kdWN0J10gPT09ICdSZWFjdE5hdGl2ZScpO1xyXG59XHJcbi8qKiBEZXRlY3RzIEVsZWN0cm9uIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzRWxlY3Ryb24oKSB7XHJcbiAgICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdFbGVjdHJvbi8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIEludGVybmV0IEV4cGxvcmVyLiAqL1xyXG5mdW5jdGlvbiBpc0lFKCkge1xyXG4gICAgY29uc3QgdWEgPSBnZXRVQSgpO1xyXG4gICAgcmV0dXJuIHVhLmluZGV4T2YoJ01TSUUgJykgPj0gMCB8fCB1YS5pbmRleE9mKCdUcmlkZW50LycpID49IDA7XHJcbn1cclxuLyoqIERldGVjdHMgVW5pdmVyc2FsIFdpbmRvd3MgUGxhdGZvcm0gYXBwcy4gKi9cclxuZnVuY3Rpb24gaXNVV1AoKSB7XHJcbiAgICByZXR1cm4gZ2V0VUEoKS5pbmRleE9mKCdNU0FwcEhvc3QvJykgPj0gMDtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgU0RLIGJ1aWxkIGlzIHRoZSBOb2RlIHZlcnNpb24uXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpdCdzIHRoZSBOb2RlIFNESyBidWlsZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzTm9kZVNkaygpIHtcclxuICAgIHJldHVybiBDT05TVEFOVFMuTk9ERV9DTElFTlQgPT09IHRydWUgfHwgQ09OU1RBTlRTLk5PREVfQURNSU4gPT09IHRydWU7XHJcbn1cclxuLyoqIFJldHVybnMgdHJ1ZSBpZiB3ZSBhcmUgcnVubmluZyBpbiBTYWZhcmkuICovXHJcbmZ1bmN0aW9uIGlzU2FmYXJpKCkge1xyXG4gICAgcmV0dXJuICghaXNOb2RlKCkgJiZcclxuICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdTYWZhcmknKSAmJlxyXG4gICAgICAgICFuYXZpZ2F0b3IudXNlckFnZW50LmluY2x1ZGVzKCdDaHJvbWUnKSk7XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBpbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IGN1cnJlbnQgYnJvd3Nlci9zZXJ2aWNlIHdvcmtlciBjb250ZXh0XHJcbiAqL1xyXG5mdW5jdGlvbiBpc0luZGV4ZWREQkF2YWlsYWJsZSgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBpbmRleGVkREIgPT09ICdvYmplY3QnO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgbWV0aG9kIHZhbGlkYXRlcyBicm93c2VyL3N3IGNvbnRleHQgZm9yIGluZGV4ZWREQiBieSBvcGVuaW5nIGEgZHVtbXkgaW5kZXhlZERCIGRhdGFiYXNlIGFuZCByZWplY3RcclxuICogaWYgZXJyb3JzIG9jY3VyIGR1cmluZyB0aGUgZGF0YWJhc2Ugb3BlbiBvcGVyYXRpb24uXHJcbiAqXHJcbiAqIEB0aHJvd3MgZXhjZXB0aW9uIGlmIGN1cnJlbnQgYnJvd3Nlci9zdyBjb250ZXh0IGNhbid0IHJ1biBpZGIub3BlbiAoZXg6IFNhZmFyaSBpZnJhbWUsIEZpcmVmb3hcclxuICogcHJpdmF0ZSBicm93c2luZylcclxuICovXHJcbmZ1bmN0aW9uIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGxldCBwcmVFeGlzdCA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IERCX0NIRUNLX05BTUUgPSAndmFsaWRhdGUtYnJvd3Nlci1jb250ZXh0LWZvci1pbmRleGVkZGItYW5hbHl0aWNzLW1vZHVsZSc7XHJcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3QgPSBzZWxmLmluZGV4ZWREQi5vcGVuKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlcXVlc3QucmVzdWx0LmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBkZWxldGUgZGF0YWJhc2Ugb25seSB3aGVuIGl0IGRvZXNuJ3QgcHJlLWV4aXN0XHJcbiAgICAgICAgICAgICAgICBpZiAoIXByZUV4aXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pbmRleGVkREIuZGVsZXRlRGF0YWJhc2UoREJfQ0hFQ0tfTkFNRSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKHRydWUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHByZUV4aXN0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJlcXVlc3Qub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYTtcclxuICAgICAgICAgICAgICAgIHJlamVjdCgoKF9hID0gcmVxdWVzdC5lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2UpIHx8ICcnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIFRoaXMgbWV0aG9kIGNoZWNrcyB3aGV0aGVyIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcclxuICogQHJldHVybiB0cnVlIGlmIGNvb2tpZSBpcyBlbmFibGVkIHdpdGhpbiBjdXJyZW50IGJyb3dzZXJcclxuICovXHJcbmZ1bmN0aW9uIGFyZUNvb2tpZXNFbmFibGVkKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnIHx8ICFuYXZpZ2F0b3IuY29va2llRW5hYmxlZCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFN0YW5kYXJkaXplZCBGaXJlYmFzZSBFcnJvci5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqXHJcbiAqICAgLy8gVHlwZXNjcmlwdCBzdHJpbmcgbGl0ZXJhbHMgZm9yIHR5cGUtc2FmZSBjb2Rlc1xyXG4gKiAgIHR5cGUgRXJyID1cclxuICogICAgICd1bmtub3duJyB8XHJcbiAqICAgICAnb2JqZWN0LW5vdC1mb3VuZCdcclxuICogICAgIDtcclxuICpcclxuICogICAvLyBDbG9zdXJlIGVudW0gZm9yIHR5cGUtc2FmZSBlcnJvciBjb2Rlc1xyXG4gKiAgIC8vIGF0LWVudW0ge3N0cmluZ31cclxuICogICB2YXIgRXJyID0ge1xyXG4gKiAgICAgVU5LTk9XTjogJ3Vua25vd24nLFxyXG4gKiAgICAgT0JKRUNUX05PVF9GT1VORDogJ29iamVjdC1ub3QtZm91bmQnLFxyXG4gKiAgIH1cclxuICpcclxuICogICBsZXQgZXJyb3JzOiBNYXA8RXJyLCBzdHJpbmc+ID0ge1xyXG4gKiAgICAgJ2dlbmVyaWMtZXJyb3InOiBcIlVua25vd24gZXJyb3JcIixcclxuICogICAgICdmaWxlLW5vdC1mb3VuZCc6IFwiQ291bGQgbm90IGZpbmQgZmlsZTogeyRmaWxlfVwiLFxyXG4gKiAgIH07XHJcbiAqXHJcbiAqICAgLy8gVHlwZS1zYWZlIGZ1bmN0aW9uIC0gbXVzdCBwYXNzIGEgdmFsaWQgZXJyb3IgY29kZSBhcyBwYXJhbS5cclxuICogICBsZXQgZXJyb3IgPSBuZXcgRXJyb3JGYWN0b3J5PEVycj4oJ3NlcnZpY2UnLCAnU2VydmljZScsIGVycm9ycyk7XHJcbiAqXHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5HRU5FUklDKTtcclxuICogICAuLi5cclxuICogICB0aHJvdyBlcnJvci5jcmVhdGUoRXJyLkZJTEVfTk9UX0ZPVU5ELCB7J2ZpbGUnOiBmaWxlTmFtZX0pO1xyXG4gKiAgIC4uLlxyXG4gKiAgIC8vIFNlcnZpY2U6IENvdWxkIG5vdCBmaWxlIGZpbGU6IGZvby50eHQgKHNlcnZpY2UvZmlsZS1ub3QtZm91bmQpLlxyXG4gKlxyXG4gKiAgIGNhdGNoIChlKSB7XHJcbiAqICAgICBhc3NlcnQoZS5tZXNzYWdlID09PSBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IGZvby50eHQuXCIpO1xyXG4gKiAgICAgaWYgKChlIGFzIEZpcmViYXNlRXJyb3IpPy5jb2RlID09PSAnc2VydmljZS9maWxlLW5vdC1mb3VuZCcpIHtcclxuICogICAgICAgY29uc29sZS5sb2coXCJDb3VsZCBub3QgcmVhZCBmaWxlOiBcIiArIGVbJ2ZpbGUnXSk7XHJcbiAqICAgICB9XHJcbiAqICAgfVxyXG4gKi9cclxuY29uc3QgRVJST1JfTkFNRSA9ICdGaXJlYmFzZUVycm9yJztcclxuLy8gQmFzZWQgb24gY29kZSBmcm9tOlxyXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9FcnJvciNDdXN0b21fRXJyb3JfVHlwZXNcclxuY2xhc3MgRmlyZWJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgLyoqIFRoZSBlcnJvciBjb2RlIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY29kZSwgbWVzc2FnZSwgXHJcbiAgICAvKiogQ3VzdG9tIGRhdGEgZm9yIHRoaXMgZXJyb3IuICovXHJcbiAgICBjdXN0b21EYXRhKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcclxuICAgICAgICB0aGlzLmN1c3RvbURhdGEgPSBjdXN0b21EYXRhO1xyXG4gICAgICAgIC8qKiBUaGUgY3VzdG9tIG5hbWUgZm9yIGFsbCBGaXJlYmFzZUVycm9ycy4gKi9cclxuICAgICAgICB0aGlzLm5hbWUgPSBFUlJPUl9OQU1FO1xyXG4gICAgICAgIC8vIEZpeCBGb3IgRVM1XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0LXdpa2kvYmxvYi9tYXN0ZXIvQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcclxuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgRmlyZWJhc2VFcnJvci5wcm90b3R5cGUpO1xyXG4gICAgICAgIC8vIE1haW50YWlucyBwcm9wZXIgc3RhY2sgdHJhY2UgZm9yIHdoZXJlIG91ciBlcnJvciB3YXMgdGhyb3duLlxyXG4gICAgICAgIC8vIE9ubHkgYXZhaWxhYmxlIG9uIFY4LlxyXG4gICAgICAgIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xyXG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBFcnJvckZhY3RvcnkucHJvdG90eXBlLmNyZWF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmNsYXNzIEVycm9yRmFjdG9yeSB7XHJcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlLCBzZXJ2aWNlTmFtZSwgZXJyb3JzKSB7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gc2VydmljZTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XHJcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUoY29kZSwgLi4uZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGN1c3RvbURhdGEgPSBkYXRhWzBdIHx8IHt9O1xyXG4gICAgICAgIGNvbnN0IGZ1bGxDb2RlID0gYCR7dGhpcy5zZXJ2aWNlfS8ke2NvZGV9YDtcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IHRoaXMuZXJyb3JzW2NvZGVdO1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0ZW1wbGF0ZSA/IHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgY3VzdG9tRGF0YSkgOiAnRXJyb3InO1xyXG4gICAgICAgIC8vIFNlcnZpY2UgTmFtZTogRXJyb3IgbWVzc2FnZSAoc2VydmljZS9jb2RlKS5cclxuICAgICAgICBjb25zdCBmdWxsTWVzc2FnZSA9IGAke3RoaXMuc2VydmljZU5hbWV9OiAke21lc3NhZ2V9ICgke2Z1bGxDb2RlfSkuYDtcclxuICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBGaXJlYmFzZUVycm9yKGZ1bGxDb2RlLCBmdWxsTWVzc2FnZSwgY3VzdG9tRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGVycm9yO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZSh0ZW1wbGF0ZSwgZGF0YSkge1xyXG4gICAgcmV0dXJuIHRlbXBsYXRlLnJlcGxhY2UoUEFUVEVSTiwgKF8sIGtleSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YVtrZXldO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsID8gU3RyaW5nKHZhbHVlKSA6IGA8JHtrZXl9Pz5gO1xyXG4gICAgfSk7XHJcbn1cclxuY29uc3QgUEFUVEVSTiA9IC9cXHtcXCQoW159XSspfS9nO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZhbHVhdGVzIGEgSlNPTiBzdHJpbmcgaW50byBhIGphdmFzY3JpcHQgb2JqZWN0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEEgc3RyaW5nIGNvbnRhaW5pbmcgSlNPTi5cclxuICogQHJldHVybiB7Kn0gVGhlIGphdmFzY3JpcHQgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIEpTT04uXHJcbiAqL1xyXG5mdW5jdGlvbiBqc29uRXZhbChzdHIpIHtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKHN0cik7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgSlNPTiByZXByZXNlbnRpbmcgYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICogQHBhcmFtIHsqfSBkYXRhIEphdmFzY3JpcHQgb2JqZWN0IHRvIGJlIHN0cmluZ2lmaWVkLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBKU09OIGNvbnRlbnRzIG9mIHRoZSBvYmplY3QuXHJcbiAqL1xyXG5mdW5jdGlvbiBzdHJpbmdpZnkoZGF0YSkge1xyXG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGRhdGEpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gaW50byBjb25zdGl0dWVudCBwYXJ0cy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiB3aXRoIGludmFsaWQgLyBpbmNvbXBsZXRlIGNsYWltcyBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGRlY29kZSA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgbGV0IGhlYWRlciA9IHt9LCBjbGFpbXMgPSB7fSwgZGF0YSA9IHt9LCBzaWduYXR1cmUgPSAnJztcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xyXG4gICAgICAgIGhlYWRlciA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1swXSkgfHwgJycpO1xyXG4gICAgICAgIGNsYWltcyA9IGpzb25FdmFsKGJhc2U2NERlY29kZShwYXJ0c1sxXSkgfHwgJycpO1xyXG4gICAgICAgIHNpZ25hdHVyZSA9IHBhcnRzWzJdO1xyXG4gICAgICAgIGRhdGEgPSBjbGFpbXNbJ2QnXSB8fCB7fTtcclxuICAgICAgICBkZWxldGUgY2xhaW1zWydkJ107XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkgeyB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGhlYWRlcixcclxuICAgICAgICBjbGFpbXMsXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIH07XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIGNoZWNrcyB0aGUgdmFsaWRpdHkgb2YgaXRzIHRpbWUtYmFzZWQgY2xhaW1zLiBXaWxsIHJldHVybiB0cnVlIGlmIHRoZVxyXG4gKiB0b2tlbiBpcyB3aXRoaW4gdGhlIHRpbWUgd2luZG93IGF1dGhvcml6ZWQgYnkgdGhlICduYmYnIChub3QtYmVmb3JlKSBhbmQgJ2lhdCcgKGlzc3VlZC1hdCkgY2xhaW1zLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIGEgZmFsc2UgbmVnYXRpdmUgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBpc1ZhbGlkVGltZXN0YW1wID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGNvbnN0IG5vdyA9IE1hdGguZmxvb3IobmV3IERhdGUoKS5nZXRUaW1lKCkgLyAxMDAwKTtcclxuICAgIGxldCB2YWxpZFNpbmNlID0gMCwgdmFsaWRVbnRpbCA9IDA7XHJcbiAgICBpZiAodHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCduYmYnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWyduYmYnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY2xhaW1zLmhhc093blByb3BlcnR5KCdpYXQnKSkge1xyXG4gICAgICAgICAgICB2YWxpZFNpbmNlID0gY2xhaW1zWydpYXQnXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHtcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IGNsYWltc1snZXhwJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyB0b2tlbiB3aWxsIGV4cGlyZSBhZnRlciAyNGggYnkgZGVmYXVsdFxyXG4gICAgICAgICAgICB2YWxpZFVudGlsID0gdmFsaWRTaW5jZSArIDg2NDAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAoISFub3cgJiZcclxuICAgICAgICAhIXZhbGlkU2luY2UgJiZcclxuICAgICAgICAhIXZhbGlkVW50aWwgJiZcclxuICAgICAgICBub3cgPj0gdmFsaWRTaW5jZSAmJlxyXG4gICAgICAgIG5vdyA8PSB2YWxpZFVudGlsKTtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgcmV0dXJucyBpdHMgaXNzdWVkIGF0IHRpbWUgaWYgdmFsaWQsIG51bGwgb3RoZXJ3aXNlLlxyXG4gKlxyXG4gKiBOb3RlczpcclxuICogLSBNYXkgcmV0dXJuIG51bGwgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBpc3N1ZWRBdFRpbWUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICByZXR1cm4gY2xhaW1zWydpYXQnXTtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyBmb3JtYXQuIEV4cGVjdHMgYSB2YWxpZCBpc3N1ZWQtYXQgdGltZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZEZvcm1hdCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgZGVjb2RlZCA9IGRlY29kZSh0b2tlbiksIGNsYWltcyA9IGRlY29kZWQuY2xhaW1zO1xyXG4gICAgcmV0dXJuICEhY2xhaW1zICYmIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0Jyk7XHJcbn07XHJcbi8qKlxyXG4gKiBBdHRlbXB0cyB0byBwZWVyIGludG8gYW4gYXV0aCB0b2tlbiBhbmQgZGV0ZXJtaW5lIGlmIGl0J3MgYW4gYWRtaW4gYXV0aCB0b2tlbiBieSBsb29raW5nIGF0IHRoZSBjbGFpbXMgcG9ydGlvbi5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNBZG1pbiA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICByZXR1cm4gdHlwZW9mIGNsYWltcyA9PT0gJ29iamVjdCcgJiYgY2xhaW1zWydhZG1pbiddID09PSB0cnVlO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjb250YWlucyhvYmosIGtleSkge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XHJcbn1cclxuZnVuY3Rpb24gc2FmZUdldChvYmosIGtleSkge1xyXG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGlzRW1wdHkob2JqKSB7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gbWFwKG9iaiwgZm4sIGNvbnRleHRPYmopIHtcclxuICAgIGNvbnN0IHJlcyA9IHt9O1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmVzW2tleV0gPSBmbi5jYWxsKGNvbnRleHRPYmosIG9ialtrZXldLCBrZXksIG9iaik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlcztcclxufVxyXG4vKipcclxuICogRGVlcCBlcXVhbCB0d28gb2JqZWN0cy4gU3VwcG9ydCBBcnJheXMgYW5kIE9iamVjdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwRXF1YWwoYSwgYikge1xyXG4gICAgaWYgKGEgPT09IGIpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGNvbnN0IGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XHJcbiAgICBjb25zdCBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xyXG4gICAgZm9yIChjb25zdCBrIG9mIGFLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFiS2V5cy5pbmNsdWRlcyhrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGFQcm9wID0gYVtrXTtcclxuICAgICAgICBjb25zdCBiUHJvcCA9IGJba107XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KGFQcm9wKSAmJiBpc09iamVjdChiUHJvcCkpIHtcclxuICAgICAgICAgICAgaWYgKCFkZWVwRXF1YWwoYVByb3AsIGJQcm9wKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFQcm9wICE9PSBiUHJvcCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBrIG9mIGJLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFhS2V5cy5pbmNsdWRlcyhrKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuZnVuY3Rpb24gaXNPYmplY3QodGhpbmcpIHtcclxuICAgIHJldHVybiB0aGluZyAhPT0gbnVsbCAmJiB0eXBlb2YgdGhpbmcgPT09ICdvYmplY3QnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZWplY3RzIGlmIHRoZSBnaXZlbiBwcm9taXNlIGRvZXNuJ3QgcmVzb2x2ZSBpbiB0aW1lSW5NUyBtaWxsaXNlY29uZHMuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gcHJvbWlzZVdpdGhUaW1lb3V0KHByb21pc2UsIHRpbWVJbk1TID0gMjAwMCkge1xyXG4gICAgY29uc3QgZGVmZXJyZWRQcm9taXNlID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IGRlZmVycmVkUHJvbWlzZS5yZWplY3QoJ3RpbWVvdXQhJyksIHRpbWVJbk1TKTtcclxuICAgIHByb21pc2UudGhlbihkZWZlcnJlZFByb21pc2UucmVzb2x2ZSwgZGVmZXJyZWRQcm9taXNlLnJlamVjdCk7XHJcbiAgICByZXR1cm4gZGVmZXJyZWRQcm9taXNlLnByb21pc2U7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBxdWVyeXN0cmluZy1mb3JtYXR0ZWQgc3RyaW5nIChlLmcuICZhcmc9dmFsJmFyZzI9dmFsMikgZnJvbSBhXHJcbiAqIHBhcmFtcyBvYmplY3QgKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqIE5vdGU6IFlvdSBtdXN0IHByZXBlbmQgaXQgd2l0aCA/IHdoZW4gYWRkaW5nIGl0IHRvIGEgVVJMLlxyXG4gKi9cclxuZnVuY3Rpb24gcXVlcnlzdHJpbmcocXVlcnlzdHJpbmdQYXJhbXMpIHtcclxuICAgIGNvbnN0IHBhcmFtcyA9IFtdO1xyXG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocXVlcnlzdHJpbmdQYXJhbXMpKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHZhbHVlLmZvckVhY2goYXJyYXlWYWwgPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQoYXJyYXlWYWwpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwYXJhbXMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID8gJyYnICsgcGFyYW1zLmpvaW4oJyYnKSA6ICcnO1xyXG59XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgcXVlcnlzdHJpbmcgKGUuZy4gP2FyZz12YWwmYXJnMj12YWwyKSBpbnRvIGEgcGFyYW1zIG9iamVjdFxyXG4gKiAoZS5nLiB7YXJnOiAndmFsJywgYXJnMjogJ3ZhbDInfSlcclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nRGVjb2RlKHF1ZXJ5c3RyaW5nKSB7XHJcbiAgICBjb25zdCBvYmogPSB7fTtcclxuICAgIGNvbnN0IHRva2VucyA9IHF1ZXJ5c3RyaW5nLnJlcGxhY2UoL15cXD8vLCAnJykuc3BsaXQoJyYnKTtcclxuICAgIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcclxuICAgICAgICBpZiAodG9rZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgW2tleSwgdmFsdWVdID0gdG9rZW4uc3BsaXQoJz0nKTtcclxuICAgICAgICAgICAgb2JqW2RlY29kZVVSSUNvbXBvbmVudChrZXkpXSA9IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbi8qKlxyXG4gKiBFeHRyYWN0IHRoZSBxdWVyeSBzdHJpbmcgcGFydCBvZiBhIFVSTCwgaW5jbHVkaW5nIHRoZSBsZWFkaW5nIHF1ZXN0aW9uIG1hcmsgKGlmIHByZXNlbnQpLlxyXG4gKi9cclxuZnVuY3Rpb24gZXh0cmFjdFF1ZXJ5c3RyaW5nKHVybCkge1xyXG4gICAgY29uc3QgcXVlcnlTdGFydCA9IHVybC5pbmRleE9mKCc/Jyk7XHJcbiAgICBpZiAoIXF1ZXJ5U3RhcnQpIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgICBjb25zdCBmcmFnbWVudFN0YXJ0ID0gdXJsLmluZGV4T2YoJyMnLCBxdWVyeVN0YXJ0KTtcclxuICAgIHJldHVybiB1cmwuc3Vic3RyaW5nKHF1ZXJ5U3RhcnQsIGZyYWdtZW50U3RhcnQgPiAwID8gZnJhZ21lbnRTdGFydCA6IHVuZGVmaW5lZCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgU0hBLTEgY3J5cHRvZ3JhcGhpYyBoYXNoLlxyXG4gKiBWYXJpYWJsZSBuYW1lcyBmb2xsb3cgdGhlIG5vdGF0aW9uIGluIEZJUFMgUFVCIDE4MC0zOlxyXG4gKiBodHRwOi8vY3NyYy5uaXN0Lmdvdi9wdWJsaWNhdGlvbnMvZmlwcy9maXBzMTgwLTMvZmlwczE4MC0zX2ZpbmFsLnBkZi5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqICAgdmFyIHNoYTEgPSBuZXcgc2hhMSgpO1xyXG4gKiAgIHNoYTEudXBkYXRlKGJ5dGVzKTtcclxuICogICB2YXIgaGFzaCA9IHNoYTEuZGlnZXN0KCk7XHJcbiAqXHJcbiAqIFBlcmZvcm1hbmNlOlxyXG4gKiAgIENocm9tZSAyMzogICB+NDAwIE1iaXQvc1xyXG4gKiAgIEZpcmVmb3ggMTY6ICB+MjUwIE1iaXQvc1xyXG4gKlxyXG4gKi9cclxuLyoqXHJcbiAqIFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaCBjb25zdHJ1Y3Rvci5cclxuICpcclxuICogVGhlIHByb3BlcnRpZXMgZGVjbGFyZWQgaGVyZSBhcmUgZGlzY3Vzc2VkIGluIHRoZSBhYm92ZSBhbGdvcml0aG0gZG9jdW1lbnQuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAZmluYWxcclxuICogQHN0cnVjdFxyXG4gKi9cclxuY2xhc3MgU2hhMSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBIb2xkcyB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIGFjY3VtdWxhdGVkIHZhcmlhYmxlcyBhLWUgaW4gdGhlIGNvbXByZXNzX1xyXG4gICAgICAgICAqIGZ1bmN0aW9uLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5jaGFpbl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBIGJ1ZmZlciBob2xkaW5nIHRoZSBwYXJ0aWFsbHkgY29tcHV0ZWQgaGFzaCByZXN1bHQuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmJ1Zl8gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBBbiBhcnJheSBvZiA4MCBieXRlcywgZWFjaCBhIHBhcnQgb2YgdGhlIG1lc3NhZ2UgdG8gYmUgaGFzaGVkLiAgUmVmZXJyZWQgdG9cclxuICAgICAgICAgKiBhcyB0aGUgbWVzc2FnZSBzY2hlZHVsZSBpbiB0aGUgZG9jcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuV18gPSBbXTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDb250YWlucyBkYXRhIG5lZWRlZCB0byBwYWQgbWVzc2FnZXMgbGVzcyB0aGFuIDY0IGJ5dGVzLlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5wYWRfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByaXZhdGUge251bWJlcn1cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnRvdGFsXyA9IDA7XHJcbiAgICAgICAgdGhpcy5ibG9ja1NpemUgPSA1MTIgLyA4O1xyXG4gICAgICAgIHRoaXMucGFkX1swXSA9IDEyODtcclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuYmxvY2tTaXplOyArK2kpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWRfW2ldID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgfVxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAweDY3NDUyMzAxO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzFdID0gMHhlZmNkYWI4OTtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9IDB4OThiYWRjZmU7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAweDEwMzI1NDc2O1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzRdID0gMHhjM2QyZTFmMDtcclxuICAgICAgICB0aGlzLmluYnVmXyA9IDA7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnRlcm5hbCBjb21wcmVzcyBoZWxwZXIgZnVuY3Rpb24uXHJcbiAgICAgKiBAcGFyYW0gYnVmIEJsb2NrIHRvIGNvbXByZXNzLlxyXG4gICAgICogQHBhcmFtIG9mZnNldCBPZmZzZXQgb2YgdGhlIGJsb2NrIGluIHRoZSBidWZmZXIuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBjb21wcmVzc18oYnVmLCBvZmZzZXQpIHtcclxuICAgICAgICBpZiAoIW9mZnNldCkge1xyXG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBXID0gdGhpcy5XXztcclxuICAgICAgICAvLyBnZXQgMTYgYmlnIGVuZGlhbiB3b3Jkc1xyXG4gICAgICAgIGlmICh0eXBlb2YgYnVmID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8odXNlcik6IFtidWcgODE0MDEyMl0gUmVjZW50IHZlcnNpb25zIG9mIFNhZmFyaSBmb3IgTWFjIE9TIGFuZCBpT1NcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSBidWcgdGhhdCB0dXJucyB0aGUgcG9zdC1pbmNyZW1lbnQgKysgb3BlcmF0b3IgaW50byBwcmUtaW5jcmVtZW50XHJcbiAgICAgICAgICAgICAgICAvLyBkdXJpbmcgSklUIGNvbXBpbGF0aW9uLiAgV2UgaGF2ZSBjb2RlIHRoYXQgZGVwZW5kcyBoZWF2aWx5IG9uIFNIQS0xIGZvclxyXG4gICAgICAgICAgICAgICAgLy8gY29ycmVjdG5lc3MgYW5kIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgYnVnLCBzbyBJJ3ZlIHJlbW92ZWQgYWxsIHVzZXNcclxuICAgICAgICAgICAgICAgIC8vIG9mIHBvc3QtaW5jcmVtZW50ICsrIGluIHdoaWNoIHRoZSByZXN1bHQgdmFsdWUgaXMgdXNlZC4gIFdlIGNhbiByZXZlcnRcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2hhbmdlIG9uY2UgdGhlIFNhZmFyaSBidWdcclxuICAgICAgICAgICAgICAgIC8vIChodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTA5MDM2KSBoYXMgYmVlbiBmaXhlZCBhbmRcclxuICAgICAgICAgICAgICAgIC8vIG1vc3QgY2xpZW50cyBoYXZlIGJlZW4gdXBkYXRlZC5cclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQpIDw8IDI0KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWYuY2hhckNvZGVBdChvZmZzZXQgKyAxKSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWYuY2hhckNvZGVBdChvZmZzZXQgKyAzKTtcclxuICAgICAgICAgICAgICAgIG9mZnNldCArPSA0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIFdbaV0gPVxyXG4gICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0XSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDFdIDw8IDE2KSB8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChidWZbb2Zmc2V0ICsgMl0gPDwgOCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidWZbb2Zmc2V0ICsgM107XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBleHBhbmQgdG8gODAgd29yZHNcclxuICAgICAgICBmb3IgKGxldCBpID0gMTY7IGkgPCA4MDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBXW2kgLSAzXSBeIFdbaSAtIDhdIF4gV1tpIC0gMTRdIF4gV1tpIC0gMTZdO1xyXG4gICAgICAgICAgICBXW2ldID0gKCh0IDw8IDEpIHwgKHQgPj4+IDMxKSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgYSA9IHRoaXMuY2hhaW5fWzBdO1xyXG4gICAgICAgIGxldCBiID0gdGhpcy5jaGFpbl9bMV07XHJcbiAgICAgICAgbGV0IGMgPSB0aGlzLmNoYWluX1syXTtcclxuICAgICAgICBsZXQgZCA9IHRoaXMuY2hhaW5fWzNdO1xyXG4gICAgICAgIGxldCBlID0gdGhpcy5jaGFpbl9bNF07XHJcbiAgICAgICAgbGV0IGYsIGs7XHJcbiAgICAgICAgLy8gVE9ETyh1c2VyKTogVHJ5IHRvIHVucm9sbCB0aGlzIGxvb3AgdG8gc3BlZWQgdXAgdGhlIGNvbXB1dGF0aW9uLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoaSA8IDQwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDIwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGQgXiAoYiAmIChjIF4gZCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDVhODI3OTk5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg2ZWQ5ZWJhMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChpIDwgNjApIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gKGIgJiBjKSB8IChkICYgKGIgfCBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4OGYxYmJjZGM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmID0gYiBeIGMgXiBkO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweGNhNjJjMWQ2O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSAoKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBmICsgZSArIGsgKyBXW2ldKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGUgPSBkO1xyXG4gICAgICAgICAgICBkID0gYztcclxuICAgICAgICAgICAgYyA9ICgoYiA8PCAzMCkgfCAoYiA+Pj4gMikpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICAgICAgYiA9IGE7XHJcbiAgICAgICAgICAgIGEgPSB0O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNoYWluX1swXSA9ICh0aGlzLmNoYWluX1swXSArIGEpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9ICh0aGlzLmNoYWluX1sxXSArIGIpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1syXSA9ICh0aGlzLmNoYWluX1syXSArIGMpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1szXSA9ICh0aGlzLmNoYWluX1szXSArIGQpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9ICh0aGlzLmNoYWluX1s0XSArIGUpICYgMHhmZmZmZmZmZjtcclxuICAgIH1cclxuICAgIHVwZGF0ZShieXRlcywgbGVuZ3RoKSB7XHJcbiAgICAgICAgLy8gVE9ETyhqb2hubGVueik6IHRpZ2h0ZW4gdGhlIGZ1bmN0aW9uIHNpZ25hdHVyZSBhbmQgcmVtb3ZlIHRoaXMgY2hlY2tcclxuICAgICAgICBpZiAoYnl0ZXMgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZW5ndGggPSBieXRlcy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGxlbmd0aE1pbnVzQmxvY2sgPSBsZW5ndGggLSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgLy8gVXNpbmcgbG9jYWwgaW5zdGVhZCBvZiBtZW1iZXIgdmFyaWFibGVzIGdpdmVzIH41JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYuXHJcbiAgICAgICAgY29uc3QgYnVmID0gdGhpcy5idWZfO1xyXG4gICAgICAgIGxldCBpbmJ1ZiA9IHRoaXMuaW5idWZfO1xyXG4gICAgICAgIC8vIFRoZSBvdXRlciB3aGlsZSBsb29wIHNob3VsZCBleGVjdXRlIGF0IG1vc3QgdHdpY2UuXHJcbiAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gV2hlbiB3ZSBoYXZlIG5vIGRhdGEgaW4gdGhlIGJsb2NrIHRvIHRvcCB1cCwgd2UgY2FuIGRpcmVjdGx5IHByb2Nlc3MgdGhlXHJcbiAgICAgICAgICAgIC8vIGlucHV0IGJ1ZmZlciAoYXNzdW1pbmcgaXQgY29udGFpbnMgc3VmZmljaWVudCBkYXRhKS4gVGhpcyBnaXZlcyB+MjUlXHJcbiAgICAgICAgICAgIC8vIHNwZWVkdXAgb24gQ2hyb21lIDIzIGFuZCB+MTUlIHNwZWVkdXAgb24gRmlyZWZveCAxNiwgYnV0IHJlcXVpcmVzIHRoYXRcclxuICAgICAgICAgICAgLy8gdGhlIGRhdGEgaXMgcHJvdmlkZWQgaW4gbGFyZ2UgY2h1bmtzIChvciBpbiBtdWx0aXBsZXMgb2YgNjQgYnl0ZXMpLlxyXG4gICAgICAgICAgICBpZiAoaW5idWYgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDw9IGxlbmd0aE1pbnVzQmxvY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhieXRlcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbiArPSB0aGlzLmJsb2NrU2l6ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXMuY2hhckNvZGVBdChuKTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8IGxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZltpbmJ1Zl0gPSBieXRlc1tuXTtcclxuICAgICAgICAgICAgICAgICAgICArK2luYnVmO1xyXG4gICAgICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5idWYgPT09IHRoaXMuYmxvY2tTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcHJlc3NfKGJ1Zik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluYnVmID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSnVtcCB0byB0aGUgb3V0ZXIgbG9vcCBzbyB3ZSB1c2UgdGhlIGZ1bGwtYmxvY2sgb3B0aW1pemF0aW9uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSBpbmJ1ZjtcclxuICAgICAgICB0aGlzLnRvdGFsXyArPSBsZW5ndGg7XHJcbiAgICB9XHJcbiAgICAvKiogQG92ZXJyaWRlICovXHJcbiAgICBkaWdlc3QoKSB7XHJcbiAgICAgICAgY29uc3QgZGlnZXN0ID0gW107XHJcbiAgICAgICAgbGV0IHRvdGFsQml0cyA9IHRoaXMudG90YWxfICogODtcclxuICAgICAgICAvLyBBZGQgcGFkIDB4ODAgMHgwMCouXHJcbiAgICAgICAgaWYgKHRoaXMuaW5idWZfIDwgNTYpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUodGhpcy5wYWRfLCA1NiAtIHRoaXMuaW5idWZfKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgdGhpcy5ibG9ja1NpemUgLSAodGhpcy5pbmJ1Zl8gLSA1NikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBZGQgIyBiaXRzLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSB0aGlzLmJsb2NrU2l6ZSAtIDE7IGkgPj0gNTY7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1Zl9baV0gPSB0b3RhbEJpdHMgJiAyNTU7XHJcbiAgICAgICAgICAgIHRvdGFsQml0cyAvPSAyNTY7IC8vIERvbid0IHVzZSBiaXQtc2hpZnRpbmcgaGVyZSFcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wcmVzc18odGhpcy5idWZfKTtcclxuICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDI0OyBqID49IDA7IGogLT0gOCkge1xyXG4gICAgICAgICAgICAgICAgZGlnZXN0W25dID0gKHRoaXMuY2hhaW5fW2ldID4+IGopICYgMjU1O1xyXG4gICAgICAgICAgICAgICAgKytuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkaWdlc3Q7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEhlbHBlciB0byBtYWtlIGEgU3Vic2NyaWJlIGZ1bmN0aW9uIChqdXN0IGxpa2UgUHJvbWlzZSBoZWxwcyBtYWtlIGFcclxuICogVGhlbmFibGUpLlxyXG4gKlxyXG4gKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICogICAgIGFzIGEgcHJveHkuXHJcbiAqIEBwYXJhbSBvbk5vT2JzZXJ2ZXJzIENhbGxiYWNrIHdoZW4gY291bnQgb2YgT2JzZXJ2ZXJzIGdvZXMgdG8gemVyby5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVN1YnNjcmliZShleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgT2JzZXJ2ZXJQcm94eShleGVjdXRvciwgb25Ob09ic2VydmVycyk7XHJcbiAgICByZXR1cm4gcHJveHkuc3Vic2NyaWJlLmJpbmQocHJveHkpO1xyXG59XHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgZmFuLW91dCBmb3IgYW55IG51bWJlciBvZiBPYnNlcnZlcnMgYXR0YWNoZWQgdmlhIGEgc3Vic2NyaWJlXHJcbiAqIGZ1bmN0aW9uLlxyXG4gKi9cclxuY2xhc3MgT2JzZXJ2ZXJQcm94eSB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBleGVjdXRvciBGdW5jdGlvbiB3aGljaCBjYW4gbWFrZSBjYWxscyB0byBhIHNpbmdsZSBPYnNlcnZlclxyXG4gICAgICogICAgIGFzIGEgcHJveHkuXHJcbiAgICAgKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGV4ZWN1dG9yLCBvbk5vT2JzZXJ2ZXJzKSB7XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCA9IDA7XHJcbiAgICAgICAgLy8gTWljcm8tdGFzayBzY2hlZHVsaW5nIGJ5IGNhbGxpbmcgdGFzay50aGVuKCkuXHJcbiAgICAgICAgdGhpcy50YXNrID0gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgdGhpcy5maW5hbGl6ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uTm9PYnNlcnZlcnMgPSBvbk5vT2JzZXJ2ZXJzO1xyXG4gICAgICAgIC8vIENhbGwgdGhlIGV4ZWN1dG9yIGFzeW5jaHJvbm91c2x5IHNvIHN1YnNjcmliZXJzIHRoYXQgYXJlIGNhbGxlZFxyXG4gICAgICAgIC8vIHN5bmNocm9ub3VzbHkgYWZ0ZXIgdGhlIGNyZWF0aW9uIG9mIHRoZSBzdWJzY3JpYmUgZnVuY3Rpb25cclxuICAgICAgICAvLyBjYW4gc3RpbGwgcmVjZWl2ZSB0aGUgdmVyeSBmaXJzdCB2YWx1ZSBnZW5lcmF0ZWQgaW4gdGhlIGV4ZWN1dG9yLlxyXG4gICAgICAgIHRoaXMudGFza1xyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGV4ZWN1dG9yKHRoaXMpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5lcnJvcihlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIG5leHQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlcnJvcihlcnJvcikge1xyXG4gICAgICAgIHRoaXMuZm9yRWFjaE9ic2VydmVyKChvYnNlcnZlcikgPT4ge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZShlcnJvcik7XHJcbiAgICB9XHJcbiAgICBjb21wbGV0ZSgpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNsb3NlKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkIHRvIGFkZCBhbiBPYnNlcnZlciB0byB0aGUgZmFuLW91dCBsaXN0LlxyXG4gICAgICpcclxuICAgICAqIC0gV2UgcmVxdWlyZSB0aGF0IG5vIGV2ZW50IGlzIHNlbnQgdG8gYSBzdWJzY3JpYmVyIHN5Y2hyb25vdXNseSB0byB0aGVpclxyXG4gICAgICogICBjYWxsIHRvIHN1YnNjcmliZSgpLlxyXG4gICAgICovXHJcbiAgICBzdWJzY3JpYmUobmV4dE9yT2JzZXJ2ZXIsIGVycm9yLCBjb21wbGV0ZSkge1xyXG4gICAgICAgIGxldCBvYnNlcnZlcjtcclxuICAgICAgICBpZiAobmV4dE9yT2JzZXJ2ZXIgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBlcnJvciA9PT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgICAgIGNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIE9ic2VydmVyLicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBBc3NlbWJsZSBhbiBPYnNlcnZlciBvYmplY3Qgd2hlbiBwYXNzZWQgYXMgY2FsbGJhY2sgZnVuY3Rpb25zLlxyXG4gICAgICAgIGlmIChpbXBsZW1lbnRzQW55TWV0aG9kcyhuZXh0T3JPYnNlcnZlciwgW1xyXG4gICAgICAgICAgICAnbmV4dCcsXHJcbiAgICAgICAgICAgICdlcnJvcicsXHJcbiAgICAgICAgICAgICdjb21wbGV0ZSdcclxuICAgICAgICBdKSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IG5leHRPck9ic2VydmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0OiBuZXh0T3JPYnNlcnZlcixcclxuICAgICAgICAgICAgICAgIGVycm9yLFxyXG4gICAgICAgICAgICAgICAgY29tcGxldGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLm5leHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0ID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmVycm9yID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob2JzZXJ2ZXIuY29tcGxldGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHVuc3ViID0gdGhpcy51bnN1YnNjcmliZU9uZS5iaW5kKHRoaXMsIHRoaXMub2JzZXJ2ZXJzLmxlbmd0aCk7XHJcbiAgICAgICAgLy8gQXR0ZW1wdCB0byBzdWJzY3JpYmUgdG8gYSB0ZXJtaW5hdGVkIE9ic2VydmFibGUgLSB3ZVxyXG4gICAgICAgIC8vIGp1c3QgcmVzcG9uZCB0byB0aGUgT2JzZXJ2ZXIgd2l0aCB0aGUgZmluYWwgZXJyb3Igb3IgY29tcGxldGVcclxuICAgICAgICAvLyBldmVudC5cclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmFsRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IodGhpcy5maW5hbEVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcclxuICAgICAgICByZXR1cm4gdW5zdWI7XHJcbiAgICB9XHJcbiAgICAvLyBVbnN1YnNjcmliZSBpcyBzeW5jaHJvbm91cyAtIHdlIGd1YXJhbnRlZSB0aGF0IG5vIGV2ZW50cyBhcmUgc2VudCB0b1xyXG4gICAgLy8gYW55IHVuc3Vic2NyaWJlZCBPYnNlcnZlci5cclxuICAgIHVuc3Vic2NyaWJlT25lKGkpIHtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlcnMgPT09IHVuZGVmaW5lZCB8fCB0aGlzLm9ic2VydmVyc1tpXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGVsZXRlIHRoaXMub2JzZXJ2ZXJzW2ldO1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJDb3VudCAtPSAxO1xyXG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyQ291bnQgPT09IDAgJiYgdGhpcy5vbk5vT2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzKHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvckVhY2hPYnNlcnZlcihmbikge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICAvLyBBbHJlYWR5IGNsb3NlZCBieSBwcmV2aW91cyBldmVudC4uLi5qdXN0IGVhdCB0aGUgYWRkaXRpb25hbCB2YWx1ZXMuXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gU2luY2Ugc2VuZE9uZSBjYWxscyBhc3luY2hyb25vdXNseSAtIHRoZXJlIGlzIG5vIGNoYW5jZSB0aGF0XHJcbiAgICAgICAgLy8gdGhpcy5vYnNlcnZlcnMgd2lsbCBiZWNvbWUgdW5kZWZpbmVkLlxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vYnNlcnZlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5zZW5kT25lKGksIGZuKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBDYWxsIHRoZSBPYnNlcnZlciB2aWEgb25lIG9mIGl0J3MgY2FsbGJhY2sgZnVuY3Rpb24uIFdlIGFyZSBjYXJlZnVsIHRvXHJcbiAgICAvLyBjb25maXJtIHRoYXQgdGhlIG9ic2VydmUgaGFzIG5vdCBiZWVuIHVuc3Vic2NyaWJlZCBzaW5jZSB0aGlzIGFzeW5jaHJvbm91c1xyXG4gICAgLy8gZnVuY3Rpb24gaGFkIGJlZW4gcXVldWVkLlxyXG4gICAgc2VuZE9uZShpLCBmbikge1xyXG4gICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrIGFzeW5jaHJvbm91c2x5XHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzICE9PSB1bmRlZmluZWQgJiYgdGhpcy5vYnNlcnZlcnNbaV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBmbih0aGlzLm9ic2VydmVyc1tpXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIElnbm9yZSBleGNlcHRpb25zIHJhaXNlZCBpbiBPYnNlcnZlcnMgb3IgbWlzc2luZyBtZXRob2RzIG9mIGFuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT2JzZXJ2ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gTG9nIGVycm9yIHRvIGNvbnNvbGUuIGIvMzE0MDQ4MDZcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNsb3NlKGVycikge1xyXG4gICAgICAgIGlmICh0aGlzLmZpbmFsaXplZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gdHJ1ZTtcclxuICAgICAgICBpZiAoZXJyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5maW5hbEVycm9yID0gZXJyO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQcm94eSBpcyBubyBsb25nZXIgbmVlZGVkIC0gZ2FyYmFnZSBjb2xsZWN0IHJlZmVyZW5jZXNcclxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWZsb2F0aW5nLXByb21pc2VzXHJcbiAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKiBUdXJuIHN5bmNocm9ub3VzIGZ1bmN0aW9uIGludG8gb25lIGNhbGxlZCBhc3luY2hyb25vdXNseS4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcclxuZnVuY3Rpb24gYXN5bmMoZm4sIG9uRXJyb3IpIHtcclxuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xyXG4gICAgICAgIFByb21pc2UucmVzb2x2ZSh0cnVlKVxyXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGZuKC4uLmFyZ3MpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIG9uRXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgb2JqZWN0IHBhc3NlZCBpbiBpbXBsZW1lbnRzIGFueSBvZiB0aGUgbmFtZWQgbWV0aG9kcy5cclxuICovXHJcbmZ1bmN0aW9uIGltcGxlbWVudHNBbnlNZXRob2RzKG9iaiwgbWV0aG9kcykge1xyXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgbWV0aG9kIG9mIG1ldGhvZHMpIHtcclxuICAgICAgICBpZiAobWV0aG9kIGluIG9iaiAmJiB0eXBlb2Ygb2JqW21ldGhvZF0gPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcbmZ1bmN0aW9uIG5vb3AoKSB7XHJcbiAgICAvLyBkbyBub3RoaW5nXHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIENoZWNrIHRvIG1ha2Ugc3VyZSB0aGUgYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgZm9yIGEgcHVibGljIGZ1bmN0aW9uLlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgaXQgZmFpbHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIG1pbkNvdW50IFRoZSBtaW5pbXVtIG51bWJlciBvZiBhcmd1bWVudHMgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSBtYXhDb3VudCBUaGUgbWF4aW11bSBudW1iZXIgb2YgYXJndW1lbnQgdG8gYWxsb3cgZm9yIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAqIEBwYXJhbSBhcmdDb3VudCBUaGUgYWN0dWFsIG51bWJlciBvZiBhcmd1bWVudHMgcHJvdmlkZWQuXHJcbiAqL1xyXG5jb25zdCB2YWxpZGF0ZUFyZ0NvdW50ID0gZnVuY3Rpb24gKGZuTmFtZSwgbWluQ291bnQsIG1heENvdW50LCBhcmdDb3VudCkge1xyXG4gICAgbGV0IGFyZ0Vycm9yO1xyXG4gICAgaWYgKGFyZ0NvdW50IDwgbWluQ291bnQpIHtcclxuICAgICAgICBhcmdFcnJvciA9ICdhdCBsZWFzdCAnICsgbWluQ291bnQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChhcmdDb3VudCA+IG1heENvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSBtYXhDb3VudCA9PT0gMCA/ICdub25lJyA6ICdubyBtb3JlIHRoYW4gJyArIG1heENvdW50O1xyXG4gICAgfVxyXG4gICAgaWYgKGFyZ0Vycm9yKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBmbk5hbWUgK1xyXG4gICAgICAgICAgICAnIGZhaWxlZDogV2FzIGNhbGxlZCB3aXRoICcgK1xyXG4gICAgICAgICAgICBhcmdDb3VudCArXHJcbiAgICAgICAgICAgIChhcmdDb3VudCA9PT0gMSA/ICcgYXJndW1lbnQuJyA6ICcgYXJndW1lbnRzLicpICtcclxuICAgICAgICAgICAgJyBFeHBlY3RzICcgK1xyXG4gICAgICAgICAgICBhcmdFcnJvciArXHJcbiAgICAgICAgICAgICcuJztcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgc3RyaW5nIHRvIHByZWZpeCBhbiBlcnJvciBtZXNzYWdlIGFib3V0IGZhaWxlZCBhcmd1bWVudCB2YWxpZGF0aW9uXHJcbiAqXHJcbiAqIEBwYXJhbSBmbk5hbWUgVGhlIGZ1bmN0aW9uIG5hbWVcclxuICogQHBhcmFtIGFyZ05hbWUgVGhlIG5hbWUgb2YgdGhlIGFyZ3VtZW50XHJcbiAqIEByZXR1cm4gVGhlIHByZWZpeCB0byBhZGQgdG8gdGhlIGVycm9yIHRocm93biBmb3IgdmFsaWRhdGlvbi5cclxuICovXHJcbmZ1bmN0aW9uIGVycm9yUHJlZml4KGZuTmFtZSwgYXJnTmFtZSkge1xyXG4gICAgcmV0dXJuIGAke2ZuTmFtZX0gZmFpbGVkOiAke2FyZ05hbWV9IGFyZ3VtZW50IGA7XHJcbn1cclxuLyoqXHJcbiAqIEBwYXJhbSBmbk5hbWVcclxuICogQHBhcmFtIGFyZ3VtZW50TnVtYmVyXHJcbiAqIEBwYXJhbSBuYW1lc3BhY2VcclxuICogQHBhcmFtIG9wdGlvbmFsXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWVzcGFjZShmbk5hbWUsIG5hbWVzcGFjZSwgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhbmFtZXNwYWNlKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgLy9UT0RPOiBJIHNob3VsZCBkbyBtb3JlIHZhbGlkYXRpb24gaGVyZS4gV2Ugb25seSBhbGxvdyBjZXJ0YWluIGNoYXJzIGluIG5hbWVzcGFjZXMuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgJ25hbWVzcGFjZScpICsgJ211c3QgYmUgYSB2YWxpZCBmaXJlYmFzZSBuYW1lc3BhY2UuJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDYWxsYmFjayhmbk5hbWUsIGFyZ3VtZW50TmFtZSwgXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmNhbGxiYWNrLCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjYWxsYmFjaykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBmdW5jdGlvbi4nKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbnRleHRPYmplY3QoZm5OYW1lLCBhcmd1bWVudE5hbWUsIGNvbnRleHQsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIWNvbnRleHQpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNvbnRleHQgIT09ICdvYmplY3QnIHx8IGNvbnRleHQgPT09IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JQcmVmaXgoZm5OYW1lLCBhcmd1bWVudE5hbWUpICsgJ211c3QgYmUgYSB2YWxpZCBjb250ZXh0IG9iamVjdC4nKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vLyBDb2RlIG9yaWdpbmFsbHkgY2FtZSBmcm9tIGdvb2cuY3J5cHQuc3RyaW5nVG9VdGY4Qnl0ZUFycmF5LCBidXQgZm9yIHNvbWUgcmVhc29uIHRoZXlcclxuLy8gYXV0b21hdGljYWxseSByZXBsYWNlZCAnXFxyXFxuJyB3aXRoICdcXG4nLCBhbmQgdGhleSBkaWRuJ3QgaGFuZGxlIHN1cnJvZ2F0ZSBwYWlycyxcclxuLy8gc28gaXQncyBiZWVuIG1vZGlmaWVkLlxyXG4vLyBOb3RlIHRoYXQgbm90IGFsbCBVbmljb2RlIGNoYXJhY3RlcnMgYXBwZWFyIGFzIHNpbmdsZSBjaGFyYWN0ZXJzIGluIEphdmFTY3JpcHQgc3RyaW5ncy5cclxuLy8gZnJvbUNoYXJDb2RlIHJldHVybnMgdGhlIFVURi0xNiBlbmNvZGluZyBvZiBhIGNoYXJhY3RlciAtIHNvIHNvbWUgVW5pY29kZSBjaGFyYWN0ZXJzXHJcbi8vIHVzZSAyIGNoYXJhY3RlcnMgaW4gSmF2YXNjcmlwdC4gIEFsbCA0LWJ5dGUgVVRGLTggY2hhcmFjdGVycyBiZWdpbiB3aXRoIGEgZmlyc3RcclxuLy8gY2hhcmFjdGVyIGluIHRoZSByYW5nZSAweEQ4MDAgLSAweERCRkYgKHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYSBzby1jYWxsZWQgc3Vycm9nYXRlXHJcbi8vIHBhaXIpLlxyXG4vLyBTZWUgaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTE1LjEuM1xyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICovXHJcbmNvbnN0IHN0cmluZ1RvQnl0ZUFycmF5ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgY29uc3Qgb3V0ID0gW107XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGxldCBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gSXMgdGhpcyB0aGUgbGVhZCBzdXJyb2dhdGUgaW4gYSBzdXJyb2dhdGUgcGFpcj9cclxuICAgICAgICBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgY29uc3QgaGlnaCA9IGMgLSAweGQ4MDA7IC8vIHRoZSBoaWdoIDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgYXNzZXJ0KGkgPCBzdHIubGVuZ3RoLCAnU3Vycm9nYXRlIHBhaXIgbWlzc2luZyB0cmFpbCBzdXJyb2dhdGUuJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGxvdyA9IHN0ci5jaGFyQ29kZUF0KGkpIC0gMHhkYzAwOyAvLyB0aGUgbG93IDEwIGJpdHMuXHJcbiAgICAgICAgICAgIGMgPSAweDEwMDAwICsgKGhpZ2ggPDwgMTApICsgbG93O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IGM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgPj4gNikgfCAxOTI7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCA2NTUzNikge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDE4KSB8IDI0MDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gMTIpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9ICgoYyA+PiA2KSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG4vKipcclxuICogQ2FsY3VsYXRlIGxlbmd0aCB3aXRob3V0IGFjdHVhbGx5IGNvbnZlcnRpbmc7IHVzZWZ1bCBmb3IgZG9pbmcgY2hlYXBlciB2YWxpZGF0aW9uLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcbmNvbnN0IHN0cmluZ0xlbmd0aCA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGxldCBwID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIHArKztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgcCArPSAyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjID49IDB4ZDgwMCAmJiBjIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICAvLyBMZWFkIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLiAgVGhlIHBhaXIgdG9nZXRoZXIgd2lsbCB0YWtlIDQgYnl0ZXMgdG8gcmVwcmVzZW50LlxyXG4gICAgICAgICAgICBwICs9IDQ7XHJcbiAgICAgICAgICAgIGkrKzsgLy8gc2tpcCB0cmFpbCBzdXJyb2dhdGUuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwICs9IDM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHA7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMiBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb3BpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyM1xyXG4gKiBHZW5lcmF0ZXMgYSBuZXcgdXVpZC5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgdXVpZHY0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuICd4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHgnLnJlcGxhY2UoL1t4eV0vZywgYyA9PiB7XHJcbiAgICAgICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCwgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XHJcbiAgICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xyXG4gICAgfSk7XHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBleHBvbmVudGlhbGx5IGluY3JlYXNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogVGhlIGZhY3RvciB0byBiYWNrb2ZmIGJ5LlxyXG4gKiBTaG91bGQgYmUgYSBudW1iZXIgZ3JlYXRlciB0aGFuIDEuXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SID0gMjtcclxuLyoqXHJcbiAqIFRoZSBtYXhpbXVtIG1pbGxpc2Vjb25kcyB0byBpbmNyZWFzZSB0by5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgTUFYX1ZBTFVFX01JTExJUyA9IDQgKiA2MCAqIDYwICogMTAwMDsgLy8gRm91ciBob3VycywgbGlrZSBpT1MgYW5kIEFuZHJvaWQuXHJcbi8qKlxyXG4gKiBUaGUgcGVyY2VudGFnZSBvZiBiYWNrb2ZmIHRpbWUgdG8gcmFuZG9taXplIGJ5LlxyXG4gKiBTZWVcclxuICogaHR0cDovL2dvL3NhZmUtY2xpZW50LWJlaGF2aW9yI3N0ZXAtMS1kZXRlcm1pbmUtdGhlLWFwcHJvcHJpYXRlLXJldHJ5LWludGVydmFsLXRvLWhhbmRsZS1zcGlrZS10cmFmZmljXHJcbiAqIGZvciBjb250ZXh0LlxyXG4gKlxyXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nXHJcbiAqL1xyXG5jb25zdCBSQU5ET01fRkFDVE9SID0gMC41O1xyXG4vKipcclxuICogQmFzZWQgb24gdGhlIGJhY2tvZmYgbWV0aG9kIGZyb21cclxuICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWxpYnJhcnkvYmxvYi9tYXN0ZXIvY2xvc3VyZS9nb29nL21hdGgvZXhwb25lbnRpYWxiYWNrb2ZmLmpzLlxyXG4gKiBFeHRyYWN0ZWQgaGVyZSBzbyB3ZSBkb24ndCBuZWVkIHRvIHBhc3MgbWV0YWRhdGEgYW5kIGEgc3RhdGVmdWwgRXhwb25lbnRpYWxCYWNrb2ZmIG9iamVjdCBhcm91bmQuXHJcbiAqL1xyXG5mdW5jdGlvbiBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzKGJhY2tvZmZDb3VudCwgaW50ZXJ2YWxNaWxsaXMgPSBERUZBVUxUX0lOVEVSVkFMX01JTExJUywgYmFja29mZkZhY3RvciA9IERFRkFVTFRfQkFDS09GRl9GQUNUT1IpIHtcclxuICAgIC8vIENhbGN1bGF0ZXMgYW4gZXhwb25lbnRpYWxseSBpbmNyZWFzaW5nIHZhbHVlLlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjYWxjdWxhdGVzIHZhbHVlIGZyb20gY291bnQgYW5kIGEgY29uc3RhbnQgaW50ZXJ2YWwsIHNvIHdlIG9ubHkgbmVlZCB0byBzYXZlIHZhbHVlXHJcbiAgICAvLyBhbmQgY291bnQgdG8gcmVzdG9yZSBzdGF0ZS5cclxuICAgIGNvbnN0IGN1cnJCYXNlVmFsdWUgPSBpbnRlcnZhbE1pbGxpcyAqIE1hdGgucG93KGJhY2tvZmZGYWN0b3IsIGJhY2tvZmZDb3VudCk7XHJcbiAgICAvLyBBIHJhbmRvbSBcImZ1enpcIiB0byBhdm9pZCB3YXZlcyBvZiByZXRyaWVzLlxyXG4gICAgLy8gRGV2aWF0aW9uOiByYW5kb21GYWN0b3IgaXMgcmVxdWlyZWQuXHJcbiAgICBjb25zdCByYW5kb21XYWl0ID0gTWF0aC5yb3VuZChcclxuICAgIC8vIEEgZnJhY3Rpb24gb2YgdGhlIGJhY2tvZmYgdmFsdWUgdG8gYWRkL3N1YnRyYWN0LlxyXG4gICAgLy8gRGV2aWF0aW9uOiBjaGFuZ2VzIG11bHRpcGxpY2F0aW9uIG9yZGVyIHRvIGltcHJvdmUgcmVhZGFiaWxpdHkuXHJcbiAgICBSQU5ET01fRkFDVE9SICpcclxuICAgICAgICBjdXJyQmFzZVZhbHVlICpcclxuICAgICAgICAvLyBBIHJhbmRvbSBmbG9hdCAocm91bmRlZCB0byBpbnQgYnkgTWF0aC5yb3VuZCBhYm92ZSkgaW4gdGhlIHJhbmdlIFstMSwgMV0uIERldGVybWluZXNcclxuICAgICAgICAvLyBpZiB3ZSBhZGQgb3Igc3VidHJhY3QuXHJcbiAgICAgICAgKE1hdGgucmFuZG9tKCkgLSAwLjUpICpcclxuICAgICAgICAyKTtcclxuICAgIC8vIExpbWl0cyBiYWNrb2ZmIHRvIG1heCB0byBhdm9pZCBlZmZlY3RpdmVseSBwZXJtYW5lbnQgYmFja29mZi5cclxuICAgIHJldHVybiBNYXRoLm1pbihNQVhfVkFMVUVfTUlMTElTLCBjdXJyQmFzZVZhbHVlICsgcmFuZG9tV2FpdCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGUgRW5nbGlzaCBvcmRpbmFsIGxldHRlcnMgYWZ0ZXIgYSBudW1iZXJcclxuICovXHJcbmZ1bmN0aW9uIG9yZGluYWwoaSkge1xyXG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUoaSkpIHtcclxuICAgICAgICByZXR1cm4gYCR7aX1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGkgKyBpbmRpY2F0b3IoaSk7XHJcbn1cclxuZnVuY3Rpb24gaW5kaWNhdG9yKGkpIHtcclxuICAgIGkgPSBNYXRoLmFicyhpKTtcclxuICAgIGNvbnN0IGNlbnQgPSBpICUgMTAwO1xyXG4gICAgaWYgKGNlbnQgPj0gMTAgJiYgY2VudCA8PSAyMCkge1xyXG4gICAgICAgIHJldHVybiAndGgnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjID0gaSAlIDEwO1xyXG4gICAgaWYgKGRlYyA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiAnc3QnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMikge1xyXG4gICAgICAgIHJldHVybiAnbmQnO1xyXG4gICAgfVxyXG4gICAgaWYgKGRlYyA9PT0gMykge1xyXG4gICAgICAgIHJldHVybiAncmQnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICd0aCc7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0TW9kdWxhckluc3RhbmNlKHNlcnZpY2UpIHtcclxuICAgIGlmIChzZXJ2aWNlICYmIHNlcnZpY2UuX2RlbGVnYXRlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2UuX2RlbGVnYXRlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ09OU1RBTlRTLCBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciwgRGVmZXJyZWQsIEVycm9yRmFjdG9yeSwgRmlyZWJhc2VFcnJvciwgTUFYX1ZBTFVFX01JTExJUywgUkFORE9NX0ZBQ1RPUiwgU2hhMSwgYXJlQ29va2llc0VuYWJsZWQsIGFzc2VydCwgYXNzZXJ0aW9uRXJyb3IsIGFzeW5jLCBiYXNlNjQsIGJhc2U2NERlY29kZSwgYmFzZTY0RW5jb2RlLCBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZywgY2FsY3VsYXRlQmFja29mZk1pbGxpcywgY29udGFpbnMsIGNyZWF0ZU1vY2tVc2VyVG9rZW4sIGNyZWF0ZVN1YnNjcmliZSwgZGVjb2RlLCBkZWVwQ29weSwgZGVlcEVxdWFsLCBkZWVwRXh0ZW5kLCBlcnJvclByZWZpeCwgZXh0cmFjdFF1ZXJ5c3RyaW5nLCBnZXREZWZhdWx0QXBwQ29uZmlnLCBnZXREZWZhdWx0RW11bGF0b3JIb3N0LCBnZXREZWZhdWx0RW11bGF0b3JIb3N0bmFtZUFuZFBvcnQsIGdldERlZmF1bHRzLCBnZXRFeHBlcmltZW50YWxTZXR0aW5nLCBnZXRHbG9iYWwsIGdldE1vZHVsYXJJbnN0YW5jZSwgZ2V0VUEsIGlzQWRtaW4sIGlzQnJvd3NlciwgaXNCcm93c2VyRXh0ZW5zaW9uLCBpc0VsZWN0cm9uLCBpc0VtcHR5LCBpc0lFLCBpc0luZGV4ZWREQkF2YWlsYWJsZSwgaXNNb2JpbGVDb3Jkb3ZhLCBpc05vZGUsIGlzTm9kZVNkaywgaXNSZWFjdE5hdGl2ZSwgaXNTYWZhcmksIGlzVVdQLCBpc1ZhbGlkRm9ybWF0LCBpc1ZhbGlkVGltZXN0YW1wLCBpc3N1ZWRBdFRpbWUsIGpzb25FdmFsLCBtYXAsIG9yZGluYWwsIHByb21pc2VXaXRoVGltZW91dCwgcXVlcnlzdHJpbmcsIHF1ZXJ5c3RyaW5nRGVjb2RlLCBzYWZlR2V0LCBzdHJpbmdMZW5ndGgsIHN0cmluZ1RvQnl0ZUFycmF5LCBzdHJpbmdpZnksIHV1aWR2NCwgdmFsaWRhdGVBcmdDb3VudCwgdmFsaWRhdGVDYWxsYmFjaywgdmFsaWRhdGVDb250ZXh0T2JqZWN0LCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlLCB2YWxpZGF0ZU5hbWVzcGFjZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7XHJcbmltcG9ydCB7IERldmVsb3BtZW50U2VydmVyIH0gZnJvbSBcIi4vc3JjL2NvbW1vbi9jb21tb25cIjtcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi9zcmMvY29tbW9uL3V0aWxzXCI7XHJcbmV4cG9ydCB2YXIgcHNldWRvSWQgPSB1cmxQYXJhbXMuZ2V0KFwiY3JfdXNlcl9pZFwiKTtcclxuZXhwb3J0IHZhciBsYW5nID0gdXJsUGFyYW1zLmdldChcImNyX2xhbmdcIikgPT0gbnVsbCA/IFwiZW5nbGlzaFwiIDogdXJsUGFyYW1zLmdldChcImNyX2xhbmdcIik7XHJcbmV4cG9ydCBjb25zdCBmb250ID0gVXRpbHMuZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQobGFuZyk7XHJcbmV4cG9ydCBjb25zdCBEZWJ1Z2dlciA9IHtcclxuICAgIERldmVsb3BtZW50TGluazogd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoRGV2ZWxvcG1lbnRTZXJ2ZXIpXHJcbiAgICAgICAgPyB0cnVlXHJcbiAgICAgICAgOiBmYWxzZSxcclxuICAgIERlYnVnTW9kZTogZmFsc2UsXHJcbn07XHJcbndpbmRvdy5mZWVkYmFja1RleHRXb3JrZXJQYXRoID0gJy4vd29ya2Vycy9mZWVkYmFjay10ZXh0LXdvcmtlci5qcyc7XHJcbiIsImltcG9ydCB7IGluaXRpYWxpemVBcHAgfSBmcm9tIFwiZmlyZWJhc2UvYXBwXCI7XHJcbmltcG9ydCB7IGdldEFuYWx5dGljcywgbG9nRXZlbnQgfSBmcm9tIFwiZmlyZWJhc2UvYW5hbHl0aWNzXCI7XHJcbmltcG9ydCB7IGZpcmViYXNlQ29uZmlnIH0gZnJvbSBcIi4vZmlyZWJhc2UtY29uZmlnXCI7XHJcbmV4cG9ydCBjbGFzcyBCYXNlRmlyZWJhc2VJbnRlZ3JhdGlvbiB7XHJcbiAgICBmaXJlYmFzZUFwcDtcclxuICAgIGFuYWx5dGljcztcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZUZpcmViYXNlKCk7XHJcbiAgICB9XHJcbiAgICBjdXN0b21FdmVudHMoZXZlbnROYW1lLCBldmVudCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coYFNlbmRpbmcgY3VzdG9tIGV2ZW50ICR7ZXZlbnROYW1lfSB3aXRoIGRhdGE6YCwgZXZlbnQpO1xyXG4gICAgICAgICAgICBsb2dFdmVudCh0aGlzLmFuYWx5dGljcywgZXZlbnROYW1lLCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbG9nZ2luZyBjdXN0b20gZXZlbnQ6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXNzaW9uRW5kKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iub25MaW5lICYmIHRoaXMuYW5hbHl0aWNzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxvZ0V2ZW50KHRoaXMuYW5hbHl0aWNzLCBcInNlc3Npb25fZW5kXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3Igd2hpbGUgbG9nZ2luZyBzZXNzaW9uX2VuZCBldmVudDpcIiwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluaXRpYWxpemVGaXJlYmFzZSgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmZpcmViYXNlQXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzID0gZ2V0QW5hbHl0aWNzKHRoaXMuZmlyZWJhc2VBcHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIGluaXRpYWxpemluZyBGaXJlYmFzZTpcIiwgZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY29uc3QgZmlyZWJhc2VDb25maWcgPSB7XHJcbiAgICBhcGlLZXk6IFwiQUl6YVN5QjhjMmxCVmkyNnU3WVJMOXN4T1A5N1VhcTN5TjhoVGw0XCIsXHJcbiAgICBhdXRoRG9tYWluOiBcImZ0bS1iOWQ5OS5maXJlYmFzZWFwcC5jb21cIixcclxuICAgIGRhdGFiYXNlVVJMOiBcImh0dHBzOi8vZnRtLWI5ZDk5LmZpcmViYXNlaW8uY29tXCIsXHJcbiAgICBwcm9qZWN0SWQ6IFwiZnRtLWI5ZDk5XCIsXHJcbiAgICBzdG9yYWdlQnVja2V0OiBcImZ0bS1iOWQ5OS5hcHBzcG90LmNvbVwiLFxyXG4gICAgbWVzc2FnaW5nU2VuZGVySWQ6IFwiNjAyNDAyMzg3OTQxXCIsXHJcbiAgICBhcHBJZDogXCIxOjYwMjQwMjM4Nzk0MTp3ZWI6YTYzZjRlYWRkYzk0OWY1MzlkZTEwY1wiLFxyXG4gICAgbWVhc3VyZW1lbnRJZDogXCJHLUZWTFNON0Q3Tk1cIixcclxufTtcclxuIiwiaW1wb3J0IHsgQmFzZUZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi9iYXNlLWZpcmViYXNlLWludGVncmF0aW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBGaXJlYmFzZUludGVncmF0aW9uIGV4dGVuZHMgQmFzZUZpcmViYXNlSW50ZWdyYXRpb24ge1xyXG4gICAgc3RhdGljIGluc3RhbmNlO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpIHtcclxuICAgICAgICBpZiAoIUZpcmViYXNlSW50ZWdyYXRpb24uaW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgRmlyZWJhc2VJbnRlZ3JhdGlvbi5pbnN0YW5jZSA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBGaXJlYmFzZUludGVncmF0aW9uLmluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgc2VuZFNlc3Npb25TdGFydEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcInNlc3Npb25fc3RhcnRcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kU2Vzc2lvbkVuZEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcInNlc3Npb25fZW5kXCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZFNlbGVjdGVkTGV2ZWxFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJzZWxlY3RlZF9sZXZlbFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRUYXBwZWRTdGFydEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcInRhcHBlZF9zdGFydFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRQdXp6bGVDb21wbGV0ZWRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJwdXp6bGVfY29tcGxldGVkXCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZExldmVsQ29tcGxldGVkRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwibGV2ZWxfY29tcGxldGVkXCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZFVzZXJDbGlja2VkT25QbGF5RXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoJ3VzZXJfY2xpY2tlZCcsIHsgY2xpY2s6ICdDbGljaycgfSk7XHJcbiAgICB9XHJcbiAgICBzZW5kRG93bmxvYWRDb21wbGV0ZWRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoJ2Rvd25sb2FkX2NvbXBsZXRlZCcsIGRhdGEpO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBsb2FkSW1hZ2VzKHNvdXJjZXMsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBpbWFnZXMgPSB7fTtcclxuICAgIGxldCBsb2FkZWRJbWFnZXMgPSAwO1xyXG4gICAgY29uc3QgbnVtSW1hZ2VzID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgc3JjIGluIHNvdXJjZXMpIHtcclxuICAgICAgICBpbWFnZXNbc3JjXSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlc1tzcmNdLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCsrbG9hZGVkSW1hZ2VzID49IG51bUltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW1hZ2VzW3NyY10uc3JjID0gc291cmNlc1tzcmNdO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjb25zdCBGaXJlYmFzZVVzZXJDbGlja2VkID0gXCJ1c2VyX2NsaWNrZWRcIjtcclxuZXhwb3J0IGNvbnN0IEZpcmViYXNlVXNlckluc3RhbGwgPSBcInVzZXJfaW5zdGFsbGVkXCI7XHJcbmV4cG9ydCBjb25zdCBQV0FJbnN0YWxsU3RhdHVzID0gXCJwd2FfaW5zdGFsbGVkX3N0YXR1c1wiO1xyXG5leHBvcnQgY29uc3QgVXNlckNhbmNlbGxlZCA9IFwidXNlcl9jYW5jZWxfaW5zdGFsbGF0aW9uXCI7XHJcbmV4cG9ydCBjb25zdCBOYXRpdmVQbGF5QnV0dG9uID0gXCJuYXRpdmVfcGxheWJ1dHRvbl9jbGlja2VkXCI7XHJcbmV4cG9ydCBjb25zdCBQcmV2aW91c1BsYXllZExldmVsID0gXCJzdG9yZVByZXZpb3VzUGxheWVkTGV2ZWxcIjtcclxuZXhwb3J0IGNvbnN0IFN0b3JlTW9uc3RlclBoYXNlTnVtYmVyID0gXCJzdG9yZU1vbnN0ZXJQaGFzZU51bWJlclwiO1xyXG5leHBvcnQgY29uc3QgSXNDYWNoZWQgPSBcImlzX2NhY2hlZFwiO1xyXG5leHBvcnQgY29uc3QgTW9uc3RlckF1ZGlvID0gXCJtb25zdGVyX2F1ZGlvXCI7XHJcbmV4cG9ydCBjb25zdCBGZWVkYmFja0F1ZGlvID0gXCJmZWVkYmFja19hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgSW50cm9NdXNpYyA9IFwiaW50cm9fbXVzaWNcIjtcclxuZXhwb3J0IGNvbnN0IFByb21wdEF1ZGlvID0gXCJwcm9tcHRfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IEJ1dHRvbkNsaWNrID0gXCJidXR0b25fY2xpY2tcIjtcclxuZXhwb3J0IGNvbnN0IFRpbWVPdmVyID0gXCJ0aW1lX292ZXJcIjtcclxuZXhwb3J0IGNvbnN0IFN0b25lTXVzaWMgPSBcInN0b25lX211c2ljXCI7XHJcbmV4cG9ydCBjb25zdCBQaHJhc2VBdWRpbyA9IFwicGhyYXNlX2F1ZGlvXCI7XHJcbmV4cG9ydCBjb25zdCBMZXZlbEVuZEF1ZGlvID0gXCJsZXZlbF9lbmRfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IFVybFN1YnN0cmluZyA9IFwiL2ZlZWR0aGVtb25zdGVyXCI7XHJcbmV4cG9ydCBjb25zdCBEZXZlbG9wbWVudFNlcnZlciA9IFwiaHR0cHM6Ly9mZWVkdGhlbW9uc3RlcmRldi5jdXJpb3VzY29udGVudC5vcmdcIjtcclxuZXhwb3J0IGNvbnN0IFN0YXJ0U2NlbmUxID0gXCJTdGFydFNjZW5lMVwiO1xyXG5leHBvcnQgY29uc3QgTGV2ZWxTZWxlY3Rpb24xID0gXCJMZXZlbFNlbGVjdGlvbjFcIjtcclxuZXhwb3J0IGNvbnN0IEdhbWVTY2VuZTEgPSBcIkdhbWVTY2VuZTFcIjtcclxuZXhwb3J0IGNvbnN0IEVuZFNjZW5lMSA9IFwiRW5kU2NlbmUxXCI7XHJcbiIsIi8vIGN1c3RvbSBFdmVudHNcclxuZXhwb3J0IGNvbnN0IExPQURQVVpaTEUgPSBcImxvYWRwdXp6bGVcIjtcclxuZXhwb3J0IGNvbnN0IFNUT05FRFJPUCA9IFwic3RvbmVzZHJvcHBlZFwiO1xyXG4vLyBkZWZhdWx0IEV2ZW50c1xyXG5leHBvcnQgY29uc3QgTU9VU0VNT1ZFID0gXCJtb3VzZW1vdmVcIjtcclxuZXhwb3J0IGNvbnN0IE1PVVNFRE9XTiA9IFwibW91c2Vkb3duXCI7XHJcbmV4cG9ydCBjb25zdCBNT1VTRVVQID0gXCJtb3VzZXVwXCI7XHJcbmV4cG9ydCBjb25zdCBUT1VDSFNUQVJUID0gXCJ0b3VjaHN0YXJ0XCI7XHJcbmV4cG9ydCBjb25zdCBUT1VDSE1PVkUgPSBcInRvdWNobW92ZVwiO1xyXG5leHBvcnQgY29uc3QgVE9VQ0hFTkQgPSBcInRvdWNoZW5kXCI7XHJcbmV4cG9ydCBjb25zdCBDTElDSyA9IFwiY2xpY2tcIjtcclxuZXhwb3J0IGNvbnN0IFZJU0lCSUxJVFlfQ0hBTkdFID0gXCJ2aXNpYmlsaXR5Y2hhbmdlXCI7XHJcbiIsImV4cG9ydCBjbGFzcyBMZXZlbENvbmZpZyB7XHJcbiAgICB4O1xyXG4gICAgeTtcclxuICAgIGluZGV4O1xyXG4gICAgZHJhd3JlYWR5O1xyXG4gICAgaW1nO1xyXG4gICAgY29uc3RydWN0b3IoeFBvcywgeVBvcywgaW5kZXgpIHtcclxuICAgICAgICB0aGlzLnggPSB4UG9zO1xyXG4gICAgICAgIHRoaXMueSA9IHlQb3M7XHJcbiAgICAgICAgdGhpcy5pbmRleCA9IGluZGV4O1xyXG4gICAgICAgIHRoaXMuZHJhd3JlYWR5ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmltZy5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9tYXBJY29uLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMuaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJtYXBJY29uIGxvYWRlZGVkZWRcIik7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBmb250IH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGNsYXNzIFN0b25lQ29uZmlnIHtcclxuICAgIHg7XHJcbiAgICB5O1xyXG4gICAgb3JpZ3g7XHJcbiAgICBvcmlneTtcclxuICAgIHRleHQ7XHJcbiAgICBpbWc7XHJcbiAgICBpbWFnZVNpemU7XHJcbiAgICB0ZXh0Rm9udFNpemU7XHJcbiAgICBjYW52YXNXaWR0aDtcclxuICAgIGNhbnZhc0hlaWdodDtcclxuICAgIGltYWdlQ2VudGVyT2Zmc2V0WDtcclxuICAgIGltYWdlQ2VudGVyT2Zmc2V0WTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICB0dXRvcmlhbEluc3RhbmNlO1xyXG4gICAgdGltZXJUaWNraW5nSW5zdGFuY2U7XHJcbiAgICBmcmFtZSA9IDA7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0LCBzdG9uZUxldHRlciwgeFBvcywgeVBvcywgaW1nLCB0aW1lclRpY2tpbmdJbnN0YW5jZSwgdHV0b3JpYWxJbnN0YW5jZSkge1xyXG4gICAgICAgIHRoaXMueCA9IHhQb3M7XHJcbiAgICAgICAgdGhpcy55ID0geVBvcztcclxuICAgICAgICB0aGlzLm9yaWd4ID0geFBvcztcclxuICAgICAgICB0aGlzLm9yaWd5ID0geVBvcztcclxuICAgICAgICB0aGlzLmNhbnZhc1dpZHRoID0gY2FudmFzV2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXNIZWlnaHQgPSBjYW52YXNIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbEluc3RhbmNlID0gdHV0b3JpYWxJbnN0YW5jZTtcclxuICAgICAgICB0aGlzLnRleHQgPSBzdG9uZUxldHRlcjtcclxuICAgICAgICB0aGlzLmltZyA9IGltZztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSgpO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRYID0gdGhpcy5pbWFnZVNpemUgLyAyLjM7XHJcbiAgICAgICAgdGhpcy5pbWFnZUNlbnRlck9mZnNldFkgPSB0aGlzLmltYWdlU2l6ZSAvIDEuNTtcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZ0luc3RhbmNlID0gdGltZXJUaWNraW5nSW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBjYWxjdWxhdGVJbWFnZUFuZEZvbnRTaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50ZXh0KS53aWR0aCAqIDEuNCA+XHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzSGVpZ2h0IC8gMTMpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZVNpemUgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50ZXh0KS53aWR0aCAqIDEuMTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Rm9udFNpemUgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDI1O1xyXG4gICAgICAgICAgICBpZiAodGhpcy50ZXh0Lmxlbmd0aCA+PSAzICYmIHRoaXMub3JpZ3ggPCA1MCAmJiB0aGlzLm9yaWd4IDwgdGhpcy5jYW52YXNXaWR0aCAvIDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueCA9IHRoaXMub3JpZ3ggKyAyNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZVNpemUgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDEzO1xyXG4gICAgICAgICAgICB0aGlzLnRleHRGb250U2l6ZSA9IHRoaXMuY2FudmFzSGVpZ2h0IC8gMjA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0RWFzZSA9IChjdXJyZW50UHJvZ3Jlc3MsIHN0YXJ0LCBkaXN0YW5jZSwgc3RlcHMpID0+IHtcclxuICAgICAgICByZXR1cm4gLWRpc3RhbmNlIC8gMiAqIChNYXRoLmNvcyhNYXRoLlBJICogY3VycmVudFByb2dyZXNzIC8gc3RlcHMpIC0gMSkgKyBzdGFydDtcclxuICAgIH07XHJcbiAgICBnZXRYID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lID49IDEwMCkge1xyXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaGFzIGVuZGVkLCByZXR1cm4gdGhlIGZpbmFsIHN0b25lIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLng7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEVhc2UodGhpcy5mcmFtZSwgMCwgdGhpcy54LCAxMDApO1xyXG4gICAgfTtcclxuICAgIGdldFkgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWUgPj0gMTAwKSB7XHJcbiAgICAgICAgICAgIC8vIEFuaW1hdGlvbiBoYXMgZW5kZWQsIHJldHVybiB0aGUgZmluYWwgc3RvbmUgcG9zaXRpb25cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWFzZSh0aGlzLmZyYW1lLCAwLCB0aGlzLnksIDEwMCk7XHJcbiAgICB9O1xyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1nLCB0aGlzLmdldFgoKSAtIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRYLCB0aGlzLmdldFkoKSAtIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRZLCB0aGlzLmltYWdlU2l6ZSwgdGhpcy5pbWFnZVNpemUpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSB0aGlzLnRleHRGb250U2l6ZSArIGBweCAke2ZvbnR9LCBtb25vc3BhY2VgO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLnRleHQsIHRoaXMuZ2V0WCgpLCB0aGlzLmdldFkoKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWUgPCAxMDApIHtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZSA9IHRoaXMuZnJhbWUgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLnR1dG9yaWFsSW5zdGFuY2UgIT0gbnVsbCB8fCB0aGlzLnR1dG9yaWFsSW5zdGFuY2UgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHV0b3JpYWxJbnN0YW5jZS5kcmF3KGRlbHRhVGltZSwgdGhpcy5pbWcsIHRoaXMuaW1hZ2VTaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRGVidWdnZXIgfSBmcm9tIFwiLi4vLi4vZ2xvYmFsLXZhcmlhYmxlc1wiO1xyXG5pbXBvcnQgbGFuZ3VhZ2VGb250TWFwcGluZyBmcm9tIFwiLi4vZGF0YS9pMTgtZm9udC1tYXBwaW5nXCI7XHJcbmV4cG9ydCBjbGFzcyBVdGlscyB7XHJcbiAgICBzdGF0aWMgVXJsU3Vic3RyaW5nID0gXCIvZmVlZHRoZW1vbnN0ZXJcIjtcclxuICAgIHN0YXRpYyBnZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHVybCkge1xyXG4gICAgICAgIHJldHVybiBEZWJ1Z2dlci5EZXZlbG9wbWVudExpbmtcclxuICAgICAgICAgICAgPyB1cmwuc2xpY2UoMCwgdXJsLmluZGV4T2YodGhpcy5VcmxTdWJzdHJpbmcpICsgdGhpcy5VcmxTdWJzdHJpbmcubGVuZ3RoKSArXHJcbiAgICAgICAgICAgICAgICBcImRldlwiICtcclxuICAgICAgICAgICAgICAgIHVybC5zbGljZSh1cmwuaW5kZXhPZih0aGlzLlVybFN1YnN0cmluZykgKyB0aGlzLlVybFN1YnN0cmluZy5sZW5ndGgpXHJcbiAgICAgICAgICAgIDogdXJsO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldExhbmd1YWdlU3BlY2lmaWNGb250KGxhbmd1YWdlKSB7XHJcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlTGFuZ3VhZ2UgPSBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxhbmd1YWdlRm9udE1hcHBpbmcpIHtcclxuICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBsb3dlckNhc2VMYW5ndWFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhbmd1YWdlRm9udE1hcHBpbmdba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zb2xlLmxvZyhgRm9udCBub3QgZm91bmQgZm9yIGxhbmd1YWdlOiAke2xhbmd1YWdlfWApO1xyXG4gICAgICAgIHJldHVybiBcIk5vdG9TYW5zLVJlZ3VsYXJcIjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRSYW5kb21OdW1iZXIobWluLCBtYXgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKSArIG1pbjtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRFeGNsdWRlZENvb3JkaW5hdGVzKGNhbnZhcywgZXhjbHVzaW9uUGVyY2VudGFnZSkge1xyXG4gICAgICAgIGNvbnN0IGV4Y2x1ZGVkQXJlYVdpZHRoID0gY2FudmFzLndpZHRoICogKGV4Y2x1c2lvblBlcmNlbnRhZ2UgLyAxMDApO1xyXG4gICAgICAgIGNvbnN0IGV4Y2x1ZGVkQXJlYUhlaWdodCA9IGNhbnZhcy5oZWlnaHQgKiAoZXhjbHVzaW9uUGVyY2VudGFnZSAvIDEwMCk7XHJcbiAgICAgICAgcmV0dXJuIHsgZXhjbHVkZVg6IGV4Y2x1ZGVkQXJlYVdpZHRoLCBleGNsdWRlWTogZXhjbHVkZWRBcmVhSGVpZ2h0IH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJpcHBsZUVmZmVjdChjb250ZXh0KSB7XHJcbiAgICBjb25zdCBjdHggPSBjb250ZXh0O1xyXG4gICAgaWYgKCFjdHgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW52YXMgY29udGV4dCBpcyBudWxsXCIpO1xyXG4gICAgfVxyXG4gICAgbGV0IGNlbnRlclggPSAwO1xyXG4gICAgbGV0IGNlbnRlclkgPSAwO1xyXG4gICAgY29uc3QgaW5pdGlhbE91dGVyUmFkaXVzID0gMTA7XHJcbiAgICBjb25zdCBpbml0aWFsSW5uZXJSYWRpdXMgPSAxMDtcclxuICAgIGNvbnN0IG1heFJhZGl1cyA9IDYwO1xyXG4gICAgbGV0IGluY3JlbWVudCA9IDAuNTtcclxuICAgIGxldCBvdXRlclJhZGl1cyA9IGluaXRpYWxPdXRlclJhZGl1cztcclxuICAgIGxldCBpbm5lclJhZGl1cyA9IGluaXRpYWxJbm5lclJhZGl1cztcclxuICAgIGZ1bmN0aW9uIGRyYXdSaXBwbGUoeCwgeSwgcmVzdGFydCkge1xyXG4gICAgICAgIGlmIChyZXN0YXJ0KSB7XHJcbiAgICAgICAgICAgIG91dGVyUmFkaXVzID0gMDtcclxuICAgICAgICAgICAgaW5uZXJSYWRpdXMgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjZW50ZXJYID0geDtcclxuICAgICAgICBjZW50ZXJZID0geTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCBvdXRlclJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gMjtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHguYXJjKGNlbnRlclgsIGNlbnRlclksIGlubmVyUmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgb3V0ZXJSYWRpdXMgKz0gaW5jcmVtZW50O1xyXG4gICAgICAgIGlubmVyUmFkaXVzICs9IGluY3JlbWVudDtcclxuICAgICAgICBpZiAob3V0ZXJSYWRpdXMgPj0gbWF4UmFkaXVzIHx8IGlubmVyUmFkaXVzID49IG1heFJhZGl1cykge1xyXG4gICAgICAgICAgICBvdXRlclJhZGl1cyA9IGluaXRpYWxPdXRlclJhZGl1cztcclxuICAgICAgICAgICAgaW5uZXJSYWRpdXMgPSBpbml0aWFsSW5uZXJSYWRpdXM7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRyYXdSaXBwbGU7XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIEF1ZGlvUGxheWVyIHtcclxuICAgIGF1ZGlvQ29udGV4dDtcclxuICAgIHNvdXJjZU5vZGU7XHJcbiAgICBhdWRpb1F1ZXVlO1xyXG4gICAgcHJvbXB0QXVkaW9CdWZmZXI7XHJcbiAgICBzdGF0aWMgYXVkaW9CdWZmZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgYXVkaW9Tb3VyY3MgPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gQXVkaW9Db250ZXh0TWFuYWdlci5nZXRBdWRpb0NvbnRleHQoKTtcclxuICAgICAgICB0aGlzLnNvdXJjZU5vZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IFtdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcHJlbG9hZFByb21wdEF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBbmREZWNvZGVBdWRpbyhhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvbXB0QXVkaW9CdWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3luYyBwcmVsb2FkR2FtZUF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgaWYgKEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5oYXMoYXVkaW9TcmMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBbmREZWNvZGVBdWRpbyhhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5zZXQoYXVkaW9TcmMsIGF1ZGlvQnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5QXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5nZXQoYXVkaW9TcmMpO1xyXG4gICAgICAgIGlmIChhdWRpb0J1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gYXVkaW9CdWZmZXI7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MucHVzaChzb3VyY2VOb2RlKTtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlGZWVkYmFja0F1ZGlvcyA9IChsb29wID0gZmFsc2UsIC4uLmZpbGVVcmwpID0+IHtcclxuICAgICAgICBpZiAoZmlsZVVybC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IGZpbGVVcmw7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUZldGNoKDAsIGxvb3ApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBwbGF5UHJvbXB0QXVkaW8gPSAoYXVkaW9TcmMpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wcm9tcHRBdWRpb0J1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gdGhpcy5wcm9tcHRBdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1NvdXJjcy5wdXNoKHNvdXJjZU5vZGUpO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHBsYXlCdXR0b25DbGlja1NvdW5kID0gKGF1ZGlvU3JjKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBBdWRpb1BsYXllci5hdWRpb0J1ZmZlcnMuZ2V0KGF1ZGlvU3JjKTtcclxuICAgICAgICBpZiAoYXVkaW9CdWZmZXIpIHtcclxuICAgICAgICAgICAgY29uc3Qgc291cmNlTm9kZSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHN0b3BGZWVkYmFja0F1ZGlvID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdWRpb1F1ZXVlID0gW107XHJcbiAgICB9O1xyXG4gICAgc3RvcEFsbEF1ZGlvcyA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MuZm9yRWFjaCgoc291cmNlTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmF1ZGlvU291cmNzID0gW107XHJcbiAgICB9O1xyXG4gICAgcGxheUZldGNoID0gKGluZGV4LCBsb29wKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMuYXVkaW9RdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wRmVlZGJhY2tBdWRpbygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvUXVldWVbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgIGZldGNoKHRoaXMuYXVkaW9RdWV1ZVtpbmRleF0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dD8uZGVjb2RlQXVkaW9EYXRhKGJ1ZmZlciwgKGF1ZGlvQnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQ/LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dD8uZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5sb29wID0gbG9vcDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUub25lbmRlZCA9ICgpID0+IHRoaXMuaGFuZGxlQXVkaW9FbmRlZChpbmRleCwgbG9vcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZUF1ZGlvRW5kZWQgPSAoaW5kZXgsIGxvb3ApID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5vbmVuZGVkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wbGF5RmV0Y2goaW5kZXggKyAxLCBsb29wKTtcclxuICAgIH07XHJcbiAgICBhc3luYyBsb2FkQW5kRGVjb2RlQXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhdWRpb1NyYyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IHRoaXMuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShhcnJheUJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGF1ZGlvQnVmZmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgb3IgZGVjb2RpbmcgYXVkaW86JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIEF1ZGlvQ29udGV4dE1hbmFnZXIge1xyXG4gICAgc3RhdGljIGluc3RhbmNlID0gbnVsbDtcclxuICAgIHN0YXRpYyBnZXRBdWRpb0NvbnRleHQoKSB7XHJcbiAgICAgICAgaWYgKCFBdWRpb0NvbnRleHRNYW5hZ2VyLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIEF1ZGlvQ29udGV4dE1hbmFnZXIuaW5zdGFuY2UgPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEF1ZGlvQ29udGV4dE1hbmFnZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vY29tbW9uXCI7XHJcbmltcG9ydCB7IERFRkFVTFRfQkFDS0dST1VORF8xLCBISUxMX0lNQUdFXzEsIFBJTExBUl9JTUFHRV8xLCBGRU5DRV9JTUFHRV8xLCBBVVRVTU5fQkFDS0dST1VORF8xLCBBVVRVTU5fSElMTF8xLCBBVVRVTU5fUElMTEFSXzEsIEFVVFVNTl9TSUdOXzEsIEFVVFVNTl9GRU5DRV8xLCBXSU5URVJfQkFDS0dST1VORF8xLCBXSU5URVJfSElMTF8xLCBXSU5URVJfU0lHTl8xLCBXSU5URVJfRkVOQ0VfMSwgV0lOVEVSX1BJTExBUl8xIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuLy8gdG8gZG8gbmVlZCB0byBvcHRpbWl6ZSBtb3JlXHJcbnZhciBpbWFnZXMgPSB7XHJcbiAgICBiZ0ltZzogREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICBoaWxsSW1nOiBISUxMX0lNQUdFXzEsXHJcbiAgICBwaWxsZXJJbWc6IFBJTExBUl9JTUFHRV8xLFxyXG4gICAgZmVuY2hJbWc6IEZFTkNFX0lNQUdFXzEsXHJcbiAgICBhdXR1bW5CZ0ltZzogQVVUVU1OX0JBQ0tHUk9VTkRfMSxcclxuICAgIGF1dHVtbkhpbGxJbWc6IEFVVFVNTl9ISUxMXzEsXHJcbiAgICBhdXR1bW5QaWxsZXJJbWc6IEFVVFVNTl9QSUxMQVJfMSxcclxuICAgIGF1dHVtblNpZ25JbWc6IEFVVFVNTl9TSUdOXzEsXHJcbiAgICBhdXR1bW5GZW5jZUltZzogQVVUVU1OX0ZFTkNFXzEsXHJcbiAgICB3aW50ZXJCZ0ltZzogV0lOVEVSX0JBQ0tHUk9VTkRfMSxcclxuICAgIHdpbnRlckhpbGxJbWc6IFdJTlRFUl9ISUxMXzEsXHJcbiAgICB3aW50ZXJTaWduSW1nOiBXSU5URVJfU0lHTl8xLFxyXG4gICAgd2ludGVyRmVuY2VJbWc6IFdJTlRFUl9GRU5DRV8xLFxyXG4gICAgd2ludGVyUGlsbGVySW1nOiBXSU5URVJfUElMTEFSXzEsXHJcbn07XHJcbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgY29udGV4dDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgbGV2ZWxOdW1iZXI7XHJcbiAgICBhdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXMgPSBbXCJTdW1tZXJcIiwgXCJBdXR1bW5cIiwgXCJXaW50ZXJcIl07XHJcbiAgICBiYWNrZ3JvdW5kVHlwZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGxldmVsTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZFR5cGUgPVxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKHRoaXMubGV2ZWxOdW1iZXIgLyAxMCkgJVxyXG4gICAgICAgICAgICAgICAgdGhpcy5hdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXMubGVuZ3RoO1xyXG4gICAgICAgIGlmICh0aGlzLmxldmVsTnVtYmVyID49IDMwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZFR5cGUgPSB0aGlzLmJhY2tncm91bmRUeXBlICUgMztcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9hZEltYWdlcyhpbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuYXZhaWxhYmxlQmFja2dyb3VuZFR5cGVzW3RoaXMuYmFja2dyb3VuZFR5cGVdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV2ludGVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLndpbnRlckJnSW1nLCAwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVyUGlsbGVySW1nLCB0aGlzLndpZHRoICogMC4zOCwgdGhpcy5oZWlnaHQgLyA2LCB0aGlzLndpZHRoIC8gMS4yLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLndpbnRlckZlbmNlSW1nLCAtdGhpcy53aWR0aCAqIDAuNCwgdGhpcy5oZWlnaHQgLyA0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLndpbnRlckhpbGxJbWcsIC10aGlzLndpZHRoICogMC4yNSwgdGhpcy5oZWlnaHQgLyAyLCB0aGlzLndpZHRoICogMS41LCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJBdXR1bW5cIjpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYXV0dW1uQmdJbWcsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5QaWxsZXJJbWcsIHRoaXMud2lkdGggKiAwLjM4LCB0aGlzLmhlaWdodCAvIDYsIHRoaXMud2lkdGggLyAxLjIsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYXV0dW1uRmVuY2VJbWcsIC10aGlzLndpZHRoICogMC40LCB0aGlzLmhlaWdodCAvIDQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYXV0dW1uSGlsbEltZywgLXRoaXMud2lkdGggKiAwLjI1LCB0aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmdJbWcsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5waWxsZXJJbWcsIHRoaXMud2lkdGggKiAwLjYsIHRoaXMuaGVpZ2h0IC8gNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5mZW5jaEltZywgLXRoaXMud2lkdGggKiAwLjQsIHRoaXMuaGVpZ2h0IC8gMywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5oaWxsSW1nLCAtdGhpcy53aWR0aCAqIDAuMjUsIHRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCAqIDEuNSwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FuY2VsQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgY2FuY2VsX2J1dHRvbl9pbWFnZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcykge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IGNhbnZhcy53aWR0aCAqIDAuMSArIChjYW52YXMud2lkdGggKiAwLjE1KSAvIDI7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gY2FudmFzLmhlaWdodCAqIDAuMjtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsX2J1dHRvbl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuY2FuY2VsX2J1dHRvbl9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9jbG9zZV9idG4ucG5nXCI7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlID0gdGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuY2FuY2VsX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogMC4xNSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIENsb3NlQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgY2xvc2VfYnV0dG9uX2ltYWdlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWDtcclxuICAgICAgICB0aGlzLnBvc1kgPSBwb3NZO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9idXR0b25faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLmNsb3NlX2J1dHRvbl9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9tYXBfYnRuLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfYnV0dG9uX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZV9idXR0b25faW1hZ2UgPSB0aGlzLmNsb3NlX2J1dHRvbl9pbWFnZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmNsb3NlX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogMC4xOSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vIGltcG9ydCB7IEdhbWUgfSBmcm9tIFwiLi4vLi4vLi4vc2NlbmVzL2dhbWVcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV4dEJ1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgbmV4dF9idXR0b25faW1hZ2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWDtcclxuICAgICAgICB0aGlzLnBvc1kgPSBwb3NZO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMubmV4dF9idXR0b25faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLm5leHRfYnV0dG9uX2ltYWdlLnNyYyA9IFwiLi9hc3NldHMvaW1hZ2VzL25leHRfYnRuLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMubmV4dF9idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm5leHRfYnV0dG9uX2ltYWdlID0gdGhpcy5uZXh0X2J1dHRvbl9pbWFnZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLm5leHRfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy53aWR0aCAqIDAuMTksIHRoaXMud2lkdGggKiAwLjE5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMikgK1xyXG4gICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gKHRoaXMud2lkdGggKiAwLjE5KSAvIDIpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLndpZHRoICogMC4xOSkgLyAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBOb0J1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIG5vX2J1dHRvbl9pbWFnZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMubm9fYnV0dG9uX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5ub19idXR0b25faW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvc2VfYnRuLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMubm9fYnV0dG9uX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5ub19idXR0b25faW1hZ2UgPSB0aGlzLm5vX2J1dHRvbl9pbWFnZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLm5vX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYICsgNSwgdGhpcy5wb3NZICsgMTAsIHRoaXMuY2FudmFzLndpZHRoICogMC4xOCwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE4KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdXNlQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgcGF1c2VfYnV0dG9uX2ltYWdlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gY2FudmFzLndpZHRoIC0gY2FudmFzLmhlaWdodCAqIDAuMDk7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gMDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMucGF1c2VfYnV0dG9uX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZV9idXR0b25faW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvcGF1c2VfdjAxLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMucGF1c2VfYnV0dG9uX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZV9idXR0b25faW1hZ2UgPSB0aGlzLnBhdXNlX2J1dHRvbl9pbWFnZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnBhdXNlX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDksIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMikgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMikgK1xyXG4gICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBSZXRyeUJ1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHJldHJ5X2J1dHRvbl9pbWFnZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMucmV0cnlfYnV0dG9uX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5yZXRyeV9idXR0b25faW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvcmV0cnlfYnRuLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMucmV0cnlfYnV0dG9uX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5yZXRyeV9idXR0b25faW1hZ2UgPSB0aGlzLnJldHJ5X2J1dHRvbl9pbWFnZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnJldHJ5X2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogMC4xOSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE5KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFllc0J1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHllc19idXR0b25faW1hZ2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLnllc19idXR0b25faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnllc19idXR0b25faW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvY29uZmlybV9idG4ucG5nXCI7XHJcbiAgICAgICAgdGhpcy55ZXNfYnV0dG9uX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy55ZXNfYnV0dG9uX2ltYWdlID0gdGhpcy55ZXNfYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMueWVzX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYIC0gNSwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMiwgdGhpcy5jYW52YXMud2lkdGggKiAwLjIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVGV4dFBhcnRpY2xlIH0gZnJvbSBcIi4vdGV4dC1wYXJ0aWNsZVwiO1xyXG5pbXBvcnQgeyBmb250IH0gZnJvbSBcIi4uLy4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGNsYXNzIEZlZWRiYWNrVGV4dEVmZmVjdHMge1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhc1dpZHRoO1xyXG4gICAgY2FudmFzSGVpZ2h0O1xyXG4gICAgdGV4dFg7XHJcbiAgICB0ZXh0WTtcclxuICAgIGZvbnRTaXplO1xyXG4gICAgbGluZUhlaWdodDtcclxuICAgIG1heFRleHRXaWR0aDtcclxuICAgIHBhcnRpY2xlRHVyYXRpb247XHJcbiAgICBzdGFydFRpbWU7XHJcbiAgICBwYXJ0aWNsZXM7XHJcbiAgICBnYXA7XHJcbiAgICBtb3VzZTtcclxuICAgIHRleHRXb3JrZXI7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXNXaWR0aCwgY2FudmFzSGVpZ2h0KSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhc1dpZHRoID0gY2FudmFzV2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXNIZWlnaHQgPSBjYW52YXNIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy50ZXh0WCA9IHRoaXMuY2FudmFzV2lkdGggLyAxLjg7XHJcbiAgICAgICAgdGhpcy50ZXh0WSA9IHRoaXMuY2FudmFzSGVpZ2h0IC8gMjtcclxuICAgICAgICB0aGlzLmZvbnRTaXplID0gdGhpcy5jYW52YXNXaWR0aCAvIDcuNTtcclxuICAgICAgICB0aGlzLmxpbmVIZWlnaHQgPSB0aGlzLmZvbnRTaXplICogMC44O1xyXG4gICAgICAgIHRoaXMubWF4VGV4dFdpZHRoID0gdGhpcy5jYW52YXNXaWR0aCAqIDU7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNsZUR1cmF0aW9uID0gNTAwMDtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmdhcCA9IDM7XHJcbiAgICAgICAgdGhpcy5tb3VzZSA9IHsgcmFkaXVzOiAyMDAwLCB4OiAwLCB5OiAwIH07XHJcbiAgICAgICAgdGhpcy50ZXh0V29ya2VyID0gbmV3IFdvcmtlcih3aW5kb3cuZmVlZGJhY2tUZXh0V29ya2VyUGF0aCk7XHJcbiAgICAgICAgdGhpcy50ZXh0V29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlVGV4dFdvcmtlck1lc3NhZ2UuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcbiAgICB3cmFwVGV4dCh0ZXh0KSB7XHJcbiAgICAgICAgY29uc3QgZ3JhZGllbnQgPSB0aGlzLmNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgMCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQpO1xyXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjMsIFwiI0Y4RTIxOFwiKTtcclxuICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMC41LCBcIiNGOEUyMThcIik7XHJcbiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAuNywgXCIjRTM5RDM3XCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudDtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gMztcclxuICAgICAgICB0aGlzLmNvbnRleHQuc3Ryb2tlU3R5bGUgPSBcIiNBNDYyMjVcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke3RoaXMuZm9udFNpemUgLSB0ZXh0Lmxlbmd0aCAqIDAuM31weCAke2ZvbnR9LCBtb25vc3BhY2VgO1xyXG4gICAgICAgIC8vIGJyZWFrIG11bHRpbGluZSB0ZXh0XHJcbiAgICAgICAgbGV0IGxpbmVBcnJheSA9IFtdO1xyXG4gICAgICAgIGxldCB3b3JkcyA9IHRleHQuc3BsaXQoXCIgXCIpO1xyXG4gICAgICAgIGxldCBsaW5lQ291bnRlciA9IDA7XHJcbiAgICAgICAgbGV0IGxpbmUgPSBcIlwiO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgd29yZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IHRlc3RMaW5lID0gbGluZSArIHdvcmRzW2ldICsgXCIgXCI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGVzdExpbmUpLndpZHRoID4gdGhpcy5tYXhUZXh0V2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIGxpbmUgPSB3b3Jkc1tpXSArIFwiXCI7XHJcbiAgICAgICAgICAgICAgICBsaW5lQ291bnRlcisrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IHRlc3RMaW5lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxpbmVBcnJheVtsaW5lQ291bnRlcl0gPSBsaW5lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgdGV4dEhlaWdodCA9IHRoaXMubGluZUhlaWdodCAqIGxpbmVDb3VudGVyO1xyXG4gICAgICAgIHRoaXMudGV4dFkgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDQuMiAtIHRleHRIZWlnaHQgLyAyO1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxYID0gNTA7XHJcbiAgICAgICAgLy8gY29uc3Qgc3BhY2luZyA9IDAuMztcclxuICAgICAgICB0ZXh0ID0gdGV4dC50cmltKCk7XHJcbiAgICAgICAgbGluZUFycmF5LmZvckVhY2goKHRleHQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBsYXN0U3BhY2VJbmRleCA9IHRleHQubGFzdEluZGV4T2YoXCIgXCIsIHRleHQubGFzdEluZGV4T2YoXCIgXCIpIC0gMSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZvbnRTaXplICogdGV4dC5sZW5ndGggPiB0aGlzLmNhbnZhc1dpZHRoICogMS43ICYmIGxhc3RTcGFjZUluZGV4ICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaW5pdGlhbFRleHQgPSB0ZXh0LnNsaWNlKDAsIGxhc3RTcGFjZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIGxldCBsYXN0VGV4dCA9IFwiIFwiICsgdGV4dC5zbGljZShsYXN0U3BhY2VJbmRleCArIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KGluaXRpYWxUZXh0LCB0aGlzLnRleHRYLCB0aGlzLnRleHRZICsgaW5kZXggKiB0aGlzLmxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KGxhc3RUZXh0LCB0aGlzLnRleHRYLCB0aGlzLnRleHRZICsgaW5kZXggKiB0aGlzLmxpbmVIZWlnaHQgKyB0aGlzLmNhbnZhc0hlaWdodCAvIDEyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0ZXh0LCB0aGlzLnRleHRYLCB0aGlzLnRleHRZICsgaW5kZXggKiB0aGlzLmxpbmVIZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXJ0aWNsZSgpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlVGV4dFdvcmtlck1lc3NhZ2UoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IGV2ZW50LmRhdGEubWFwKCh7IHgsIHksIGNvbG9yIH0pID0+IG5ldyBUZXh0UGFydGljbGUodGhpcywgeCwgeSwgY29sb3IpKTtcclxuICAgIH1cclxuICAgIGNvbnZlcnRUb1BhcnRpY2xlKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IHRoaXMuY29udGV4dC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMudGV4dFdvcmtlci5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgIGNhbnZhc1dpZHRoOiB0aGlzLmNhbnZhc1dpZHRoLFxyXG4gICAgICAgICAgICBjYW52YXNIZWlnaHQ6IHRoaXMuY2FudmFzSGVpZ2h0LFxyXG4gICAgICAgICAgICBnYXA6IHRoaXMuZ2FwLFxyXG4gICAgICAgICAgICBwaXhlbHM6IGltYWdlRGF0YS5kYXRhLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXNXaWR0aCwgdGhpcy5jYW52YXNIZWlnaHQpO1xyXG4gICAgICAgIHRoaXMucGFydGljbGVzLmZvckVhY2gocGFydGljbGUgPT4ge1xyXG4gICAgICAgICAgICBwYXJ0aWNsZS5kcmF3KCk7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLnVwZGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlUGFydGljbGVzKCkge1xyXG4gICAgICAgIHRoaXMudGV4dFdvcmtlci5wb3N0TWVzc2FnZSh7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlczogdGhpcy5wYXJ0aWNsZXMsXHJcbiAgICAgICAgICAgIHBhcnRpY2xlRHVyYXRpb246IHRoaXMucGFydGljbGVEdXJhdGlvbixcclxuICAgICAgICAgICAgc3RhcnRUaW1lOiB0aGlzLnN0YXJ0VGltZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGNsZWFyUGFydGljbGUoKSB7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMgPSBbXTtcclxuICAgIH1cclxuICAgIHVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIHRoaXMudGV4dFdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLmhhbmRsZVRleHRXb3JrZXJNZXNzYWdlKTtcclxuICAgICAgICB0aGlzLnRleHRXb3JrZXIudGVybWluYXRlKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQ0xJQ0sgfSBmcm9tIFwiLi4vLi4vY29tbW9uL2V2ZW50LW5hbWVzXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIi4uL2F1ZGlvLXBsYXllclwiO1xyXG5pbXBvcnQgWWVzQnV0dG9uIGZyb20gXCIuLi9idXR0b25zL3llcy1idXR0b25cIjtcclxuaW1wb3J0IE5vQnV0dG9uIGZyb20gXCIuLi9idXR0b25zL25vLWJ1dHRvblwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcmVZb3VTdXJlUG9wVXAge1xyXG4gICAgY2FudmFzO1xyXG4gICAgY29udGV4dDtcclxuICAgIHllc0J1dHRvbjtcclxuICAgIG5vQnV0dG9uO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBwb3BfdXBfaW1hZ2U7XHJcbiAgICB5ZXNDYWxsYmFjaztcclxuICAgIG5vQ2FsbGJhY2s7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgeWVzQ2FsbGJhY2ssIG5vQ2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLnllc0NhbGxiYWNrID0geWVzQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5ub0NhbGxiYWNrID0gbm9DYWxsYmFjaztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMueWVzQnV0dG9uID0gbmV3IFllc0J1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNTUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICogMC40IC1cclxuICAgICAgICAgICAgKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKTtcclxuICAgICAgICB0aGlzLm5vQnV0dG9uID0gbmV3IE5vQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC4yNSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjQgLVxyXG4gICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpO1xyXG4gICAgICAgIHRoaXMucG9wX3VwX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvcG9wdXBfYmdfdjAxLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMucG9wX3VwX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucG9wX3VwX2ltYWdlID0gdGhpcy5wb3BfdXBfaW1hZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgYWRkTGlzdG5lciA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmNhbnZhc1xyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHRoaXMueWVzQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgWWVzIGJ1dHRvbiBjbGlja2VkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnllc0NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm5vQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgTm8gYnV0dG9uIGNsaWNrZWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9DYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2JhKDAsMCwwLDAuNSlcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucG9wX3VwX2ltYWdlLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuOCwgdGhpcy5jYW52YXMud2lkdGggKiAwLjgpO1xyXG4gICAgICAgICAgICBjb25zdCB0ZXh0WSA9IHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArIDgwO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IFwiMjRweCBBcmlhbFwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoXCJBcmUgeW91IHN1cmU/XCIsIHRoaXMuY2FudmFzLndpZHRoIC8gMiwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMi44KTtcclxuICAgICAgICAgICAgdGhpcy55ZXNCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLm5vQnV0dG9uLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5Q2xpY2tTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKFwiLi9hc3NldHMvYXVkaW9zL0J1dHRvbkNsaWNrLm1wM1wiKTtcclxuICAgIH07XHJcbiAgICBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2FudmFzXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH07XHJcbn1cclxuIiwiZXhwb3J0IGNsYXNzIFRleHRQYXJ0aWNsZSB7XHJcbiAgICBmZWVkYmFja1RleHRFZmZlY3RzO1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICBjb2xvcjtcclxuICAgIG9yaWdpblg7XHJcbiAgICBvcmlnaW5ZO1xyXG4gICAgc2l6ZTtcclxuICAgIGVhc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihmZWVkYmFja1RleHRFZmZlY3RzLCB4LCB5LCBjb2xvcikge1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cyA9IGZlZWRiYWNrVGV4dEVmZmVjdHM7XHJcbiAgICAgICAgdGhpcy54ID0gTWF0aC5yYW5kb20oKSAqIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cy5jYW52YXNXaWR0aDtcclxuICAgICAgICB0aGlzLnkgPSAwO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcclxuICAgICAgICB0aGlzLm9yaWdpblggPSB4O1xyXG4gICAgICAgIHRoaXMub3JpZ2luWSA9IHk7XHJcbiAgICAgICAgdGhpcy5zaXplID0gdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzLmdhcDtcclxuICAgICAgICB0aGlzLmVhc2UgPSBNYXRoLnJhbmRvbSgpICogMC4xICsgMC4wNTU7XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cy5jb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuY29sb3I7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzLmNvbnRleHQuZmlsbFJlY3QodGhpcy54LCB0aGlzLnksIHRoaXMuc2l6ZSwgdGhpcy5zaXplKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZSgpIHtcclxuICAgICAgICB0aGlzLnggKz0gKHRoaXMub3JpZ2luWCAtIHRoaXMueCkgKiB0aGlzLmVhc2U7XHJcbiAgICAgICAgdGhpcy55ICs9IHRoaXMub3JpZ2luWSAtIHRoaXMueTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzIH0gZnJvbSBcIi4uL2NvbW1vbi9jb21tb25cIjtcclxuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSBcIi4uL2V2ZW50cy9FdmVudE1hbmFnZXJcIjtcclxuZXhwb3J0IGNsYXNzIExldmVsSW5kaWNhdG9ycyBleHRlbmRzIEV2ZW50TWFuYWdlciB7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgYWN0aXZlSW5kaWNhdG9ycztcclxuICAgIGltYWdlcztcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBhY3RpdmVJbmRpY2F0b3JzKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVTdG9uZURyb3AoZXZlbnQpLFxyXG4gICAgICAgICAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlTG9hZFB1enpsZShldmVudClcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kaWNhdG9ycyA9IGFjdGl2ZUluZGljYXRvcnM7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGxldmVsX2luZGljYXRvcjogXCIuL2Fzc2V0cy9pbWFnZXMvbGV2ZWxzX3YwMS5wbmdcIixcclxuICAgICAgICAgICAgYmFyX2VtcHR5OiBcIi4vYXNzZXRzL2ltYWdlcy9iYXJfZW1wdHlfdjAxLnBuZ1wiLFxyXG4gICAgICAgICAgICBiYXJfZnVsbDogXCIuL2Fzc2V0cy9pbWFnZXMvYmFyX2Z1bGxfdjAxLnBuZ1wiXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc2V0SW5kaWNhdG9ycyhpbmRpY2F0b3JDb3VudCkge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kaWNhdG9ycyA9IGluZGljYXRvckNvdW50O1xyXG4gICAgfVxyXG4gICAgYWRkRHJvcFN0b25lRXZlbnQoKSB7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZHJvcHN0b25lJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiWWVlZSByZWNpdmVkIGZyb20gbGV2ZWwtaW5kaWNhdG9yXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnNldEluZGljYXRvcnMoMik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmxldmVsX2luZGljYXRvciwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCAwLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYXJfZW1wdHksICgodGhpcy5jYW52YXMud2lkdGggKiAwLjM1KSAvIDcpICogKGkgKyAxKSArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gNiwgKHRoaXMuY2FudmFzLndpZHRoICogMC4zNSkgLyAxMCwgKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFjdGl2ZUluZGljYXRvcnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYXJfZnVsbCwgKCh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUpIC8gNykgKiAoaSArIDEpICsgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gNiwgKHRoaXMuY2FudmFzLndpZHRoICogMC4zNSkgLyAxMCwgKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcChldmVudCkge1xyXG4gICAgICAgIC8vIHRoaXMuaXNTdG9uZURyb3BwZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZFB1enpsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0SW5kaWNhdG9ycyhldmVudC5kZXRhaWwuY291bnRlcik7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcywgfSBmcm9tIFwiLi4vY29tbW9uL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiLi4vZXZlbnRzL0V2ZW50TWFuYWdlclwiO1xyXG5leHBvcnQgY2xhc3MgTW9uc3RlciBleHRlbmRzIEV2ZW50TWFuYWdlciB7XHJcbiAgICB6aW5kZXg7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGltYWdlO1xyXG4gICAgZnJhbWVYO1xyXG4gICAgZnJhbWVZO1xyXG4gICAgbWF4RnJhbWU7XHJcbiAgICB4O1xyXG4gICAgeTtcclxuICAgIGZwcztcclxuICAgIGNvdW50RnJhbWU7XHJcbiAgICBmcmFtZUludGVydmFsO1xyXG4gICAgZnJhbWVUaW1lcjtcclxuICAgIGNhbnZhc1N0YWNrO1xyXG4gICAgY2FuYXZzRWxlbWVudDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBnYW1lO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBtb25zdGVyUGhhc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihnYW1lLCBtb25zdGVyUGhhc2UsIGNhbGxCYWNrRnVuY3Rpb24pIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZVN0b25lRHJvcChldmVudCksXHJcbiAgICAgICAgICAgIGxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVMb2FkUHV6emxlKGV2ZW50KSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xyXG4gICAgICAgIHRoaXMubW9uc3RlclBoYXNlID0gbW9uc3RlclBoYXNlO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmdhbWUud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmdhbWUuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibW9uc3RlclwiKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmltYWdlKTtcclxuICAgICAgICB0aGlzLmZyYW1lWCA9IDA7XHJcbiAgICAgICAgdGhpcy5mcmFtZVkgPSAwO1xyXG4gICAgICAgIHRoaXMubWF4RnJhbWUgPSA2O1xyXG4gICAgICAgIHRoaXMueCA9IHRoaXMuZ2FtZS53aWR0aCAvIDIgLSB0aGlzLmdhbWUud2lkdGggKiAwLjI0MztcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLmdhbWUud2lkdGggLyAzO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMueCx0aGlzLnkpOyBcclxuICAgICAgICB0aGlzLmZwcyA9IDEwO1xyXG4gICAgICAgIHRoaXMuY291bnRGcmFtZSA9IDA7XHJcbiAgICAgICAgdGhpcy5mcmFtZUludGVydmFsID0gMTAwMCAvIHRoaXMuZnBzO1xyXG4gICAgICAgIHRoaXMuZnJhbWVUaW1lciA9IDA7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGVhdEltZzogXCIuL2Fzc2V0cy9pbWFnZXMvZWF0MVwiICsgdGhpcy5tb25zdGVyUGhhc2UgKyBcIi5wbmdcIixcclxuICAgICAgICAgICAgaWRsZUltZzogXCIuL2Fzc2V0cy9pbWFnZXMvaWRsZTFcIiArIHRoaXMubW9uc3RlclBoYXNlICsgXCIucG5nXCIsXHJcbiAgICAgICAgICAgIHNwaXRJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL3NwaXQxXCIgKyB0aGlzLm1vbnN0ZXJQaGFzZSArIFwiLnBuZ1wiLFxyXG4gICAgICAgICAgICBkcmFnSW1nOiBcIi4vYXNzZXRzL2ltYWdlcy9kcmFnMVwiICsgdGhpcy5tb25zdGVyUGhhc2UgKyBcIi5wbmdcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVRvSWRsZUFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChjYWxsQmFja0Z1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmltYWdlc0xvYWRlZCk7XHJcbiAgICAgICAgICAgICAgICBjYWxsQmFja0Z1bmN0aW9uKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHVwZGF0ZShkZWx0YVRpbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZVRpbWVyID49IHRoaXMuZnJhbWVJbnRlcnZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lVGltZXIgPSAwO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mcmFtZVggPCB0aGlzLm1heEZyYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lWCsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZVggPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZyYW1lVGltZXIgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgNzcwICogdGhpcy5mcmFtZVgsIDEzODYgKiB0aGlzLmZyYW1lWSwgNzY4LCAxMzg2LCB0aGlzLnggKiAwLjUsIHRoaXMueSAqIDAuMSwgKHRoaXMud2lkdGggLyAyKSAqIDEuNSwgKHRoaXMuaGVpZ2h0IC8gMS41KSAqIDEuNSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2hhbmdlSW1hZ2Uoc3JjKSB7XHJcbiAgICAgICAgdGhpcy5pbWFnZS5zcmMgPSBzcmM7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VUb0RyYWdBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDY7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IHRoaXMubG9hZGVkSW1hZ2VzLmRyYWdJbWc7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VUb0VhdEFuaW1hdGlvbigpIHtcclxuICAgICAgICB0aGlzLm1heEZyYW1lID0gMTI7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IHRoaXMubG9hZGVkSW1hZ2VzLmVhdEltZztcclxuICAgIH1cclxuICAgIGNoYW5nZVRvSWRsZUFuaW1hdGlvbigpIHtcclxuICAgICAgICB0aGlzLm1heEZyYW1lID0gNjtcclxuICAgICAgICB0aGlzLmltYWdlID0gdGhpcy5sb2FkZWRJbWFnZXMuaWRsZUltZztcclxuICAgIH1cclxuICAgIGNoYW5nZVRvU3BpdEFuaW1hdGlvbigpIHtcclxuICAgICAgICB0aGlzLm1heEZyYW1lID0gMTI7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IHRoaXMubG9hZGVkSW1hZ2VzLnNwaXRJbWc7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICBpZiAoZXZlbnQuZGV0YWlsLmlzQ29ycmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5nZVRvU3BpdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmNoYW5nZVRvSWRsZUFuaW1hdGlvbigpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMueCAtIHRoaXMud2lkdGggLyA0KSAqICh4Q2xpY2sgLSB0aGlzLnggLSB0aGlzLndpZHRoIC8gNCkgK1xyXG4gICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy55IC0gdGhpcy5oZWlnaHQgLyAyLjIpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIuMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8PSAxMDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBDYW5jZWxCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9jYW5jZWwtYnV0dG9uXCI7XHJcbmltcG9ydCBDbG9zZUJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9idXR0b25zL2Nsb3NlLWJ1dHRvblwiO1xyXG5pbXBvcnQgUmV0cnlCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9yZXRyeS1idXR0b25cIjtcclxuaW1wb3J0IHsgQ0xJQ0sgfSBmcm9tIFwiLi4vY29tbW9uL2V2ZW50LW5hbWVzXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIi4vYXVkaW8tcGxheWVyXCI7XHJcbmltcG9ydCBBcmVZb3VTdXJlUG9wVXAgZnJvbSBcIi4vZmVlZGJhY2stcGFydGljbGUtZWZmZWN0L3N1cmUtcG9wdXBcIjtcclxuaW1wb3J0IHsgbGFuZyB9IGZyb20gXCIuLi8uLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdXNlUG9wVXAge1xyXG4gICAgY2FudmFzO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbmNlbEJ1dHRvbjtcclxuICAgIHJldHJ5QnV0dG9uO1xyXG4gICAgY2xvc2VCdXR0b247XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHBvcF91cF9pbWFnZTtcclxuICAgIGNhbGxiYWNrO1xyXG4gICAgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgIHJlbG9hZFNjZW5lO1xyXG4gICAgZ2FtZXBsYXlEYXRhO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICByZXRyeVN1cmVQb3B1cDtcclxuICAgIENsb3NlU3VyZVBvcHVwO1xyXG4gICAgaXNSZXRyeUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgIGlzQ2xvc2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGNhbGxiYWNrLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCByZWxvYWRTY2VuZSwgZ2FtZXBsYXlEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuZ2FtZXBsYXlEYXRhID0gZ2FtZXBsYXlEYXRhO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiA9IHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSA9IHJlbG9hZFNjZW5lO1xyXG4gICAgICAgIGNvbnN0IHNlbGZJZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBzZWxmSWRFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24gPSBuZXcgQ2FuY2VsQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMpO1xyXG4gICAgICAgIHRoaXMucmV0cnlCdXR0b24gPSBuZXcgUmV0cnlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjU1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIgK1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNCAtXHJcbiAgICAgICAgICAgICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMik7XHJcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9IG5ldyBDbG9zZUJ1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMjUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICogMC40IC1cclxuICAgICAgICAgICAgKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKTtcclxuICAgICAgICB0aGlzLnBvcF91cF9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMucG9wX3VwX2ltYWdlLnNyYyA9IFwiLi9hc3NldHMvaW1hZ2VzL3BvcHVwX2JnX3YwMS5wbmdcIjtcclxuICAgICAgICB0aGlzLnBvcF91cF9pbWFnZS5vbmxvYWQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBvcF91cF9pbWFnZSA9IHRoaXMucG9wX3VwX2ltYWdlO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnJldHJ5U3VyZVBvcHVwID0gbmV3IEFyZVlvdVN1cmVQb3BVcCh0aGlzLmNhbnZhcywgdGhpcy55ZXNSZXRyeUNhbGxiYWNrLCB0aGlzLm5vUmV0cnlDYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5DbG9zZVN1cmVQb3B1cCA9IG5ldyBBcmVZb3VTdXJlUG9wVXAodGhpcy5jYW52YXMsIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgdGhpcy5ub0Nsb3NlQ2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgeWVzUmV0cnlDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCIgcmV0cnkgYnV0dG9uIGNsaWNrZWRcIik7XHJcbiAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSh0aGlzLmdhbWVwbGF5RGF0YSwgXCJHYW1lUGxheVwiKTtcclxuICAgIH07XHJcbiAgICBub1JldHJ5Q2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSZXRyeUJ1dHRvbkNsaWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG5vQ2xvc2VDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc0Nsb3NlQnV0dG9uQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzQ2xvc2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYWRkTGlzdG5lciA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZU1vdXNlQ2xpY2sgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLmNhbmNlbEJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIGNhbmNlbCBidXR0b24gY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJldHJ5QnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcgPT0gXCJlbmdsaXNoXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiByZXRyeSBidXR0b24gY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmV0cnlTdXJlUG9wdXAuYWRkTGlzdG5lcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5QXJlWW91U3VyZVNvdW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIHJldHJ5IGJ1dHRvbiBjbGlja2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSh0aGlzLmdhbWVwbGF5RGF0YSwgXCJHYW1lUGxheVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jbG9zZUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIGlmIChsYW5nID09IFwiZW5nbGlzaFwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNDbG9zZUJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5DbG9zZVN1cmVQb3B1cC5hZGRMaXN0bmVyKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiBjbG9zZSBidXR0b24gY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUFyZVlvdVN1cmVTb3VuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiBjbG9zZSBidXR0b24gY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbihcIkdhbWVQbGF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJnYmEoMCwwLDAsMC41KVwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wb3BfdXBfaW1hZ2UsIHRoaXMuY2FudmFzLndpZHRoICogMC4xLCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIsIHRoaXMuY2FudmFzLndpZHRoICogMC44LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuOCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FuY2VsQnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy5yZXRyeUJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCA9PSB0cnVlICYmIGxhbmcgPT0gXCJlbmdsaXNoXCIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJldHJ5U3VyZVBvcHVwLmRyYXcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDbG9zZUJ1dHRvbkNsaWNrZWQgPT0gdHJ1ZSAmJiBsYW5nID09IFwiZW5nbGlzaFwiKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5DbG9zZVN1cmVQb3B1cC5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGxheUNsaWNrU291bmQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICB9O1xyXG4gICAgcGxheUFyZVlvdVN1cmVTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhcIi4vYXNzZXRzL2F1ZGlvcy9hcmUteW91LXN1cmUubXAzXCIpO1xyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vY29tbW9uXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi4vRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgbGFuZywgcHNldWRvSWQgfSBmcm9tIFwiLi4vLi4vZ2xvYmFsLXZhcmlhYmxlc1wiO1xyXG5pbXBvcnQgeyBnZXREYXRhIH0gZnJvbSBcIi4uL2RhdGEvYXBpLWRhdGFcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheUJ1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgZmlyZWJhc2VJbnRlZ3JhdGlvbjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIHBhdXNlX2J1dHRvbl9pbWFnZTogXCIuL2Fzc2V0cy9pbWFnZXMvUGxheV9idXR0b24ucG5nXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gZGF0YS5tYWp2ZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IGRhdGEubWludmVyc2lvbjtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMucGF1c2VfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggLyAzLCB0aGlzLmNhbnZhcy53aWR0aCAvIDMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gdGhpcy5jYW52YXMud2lkdGggLyA2KSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSB0aGlzLmNhbnZhcy53aWR0aCAvIDYpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtIHRoaXMuY2FudmFzLndpZHRoIC8gNikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtIHRoaXMuY2FudmFzLndpZHRoIC8gNikpO1xyXG4gICAgICAgIHRoaXMubG9nVGFwcGVkU3RhcnRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgdGhpcy5jYW52YXMud2lkdGggLyA4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGxvZ1RhcHBlZFN0YXJ0RmlyZWJhc2VFdmVudCgpIHtcclxuICAgICAgICBsZXQgZW5kVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgdGFwcGVkU3RhcnREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb24gPyB0aGlzLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uLnRvU3RyaW5nKCkgOiBcIlwiLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRUYXBwZWRTdGFydEV2ZW50KHRhcHBlZFN0YXJ0RGF0YSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSBcIi4uL2V2ZW50cy9FdmVudE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxzXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIi4vYXVkaW8tcGxheWVyXCI7XHJcbmltcG9ydCB7IFZJU0lCSUxJVFlfQ0hBTkdFIH0gZnJvbSBcIi4uL2NvbW1vbi9ldmVudC1uYW1lc1wiO1xyXG5pbXBvcnQgeyBmb250IH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGNsYXNzIFByb21wdFRleHQgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBsZXZlbERhdGE7XHJcbiAgICBjdXJyZW50UHJvbXB0VGV4dDtcclxuICAgIGN1cnJlbnRQdXp6bGVEYXRhO1xyXG4gICAgY2FuYXZzRWxlbWVudDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBwcm9tcHRfaW1hZ2U7XHJcbiAgICB0YXJnZXRTdG9uZXM7XHJcbiAgICByaWdodFRvTGVmdDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBpc1N0b25lRHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgZHJvcHBlZFN0b25lcyA9IDA7XHJcbiAgICB0aW1lID0gMDtcclxuICAgIHByb21wdEltYWdlV2lkdGggPSAwO1xyXG4gICAgaXNBcHBGb3JlZ3JvdW5kID0gdHJ1ZTtcclxuICAgIHNjYWxlID0gMTtcclxuICAgIGlzU2NhbGluZ1VwID0gdHJ1ZTtcclxuICAgIHNjYWxlRmFjdG9yID0gMC4wMDA1MDtcclxuICAgIHByb21wdEltYWdlSGVpZ2h0ID0gMDtcclxuICAgIHByb21wdFBsYXlCdXR0b247XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBjdXJyZW50UHV6emxlRGF0YSwgbGV2ZWxEYXRhLCByaWdodFRvTGVmdCkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgPSByaWdodFRvTGVmdDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9tcHRUZXh0ID0gY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YSA9IGN1cnJlbnRQdXp6bGVEYXRhO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXM7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wcmVsb2FkUHJvbXB0QXVkaW8odGhpcy5nZXRQcm9tcHRBdWRpb1VybCgpKTtcclxuICAgICAgICB0aGlzLnByb21wdF9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0UGxheUJ1dHRvbiA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMubG9hZEltYWdlcygpO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRJbWFnZVdpZHRoID0gdGhpcy53aWR0aCAqIDAuNjU7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRJbWFnZUhlaWdodCA9IHRoaXMuaGVpZ2h0ICogMC4zO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHNlbGYub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlTb3VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBnZXRQcm9tcHRBdWRpb1VybCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZ2V0Q29udmVydGVkRGV2UHJvZFVSTCh0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnByb21wdC5wcm9tcHRBdWRpbyk7XHJcbiAgICB9O1xyXG4gICAgcGxheVNvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdQcm9tcHRBdWRpbycsICBVdGlscy5nZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHRoaXMuY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdEF1ZGlvKSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBcHBGb3JlZ3JvdW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheVByb21wdEF1ZGlvKFV0aWxzLmdldENvbnZlcnRlZERldlByb2RVUkwodGhpcy5jdXJyZW50UHV6emxlRGF0YS5wcm9tcHQucHJvbXB0QXVkaW8pKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoeENsaWNrIC0gdGhpcy53aWR0aCAvIDMpIDwgMTIgJiYgTWF0aC5zcXJ0KHlDbGljayAtIHRoaXMuaGVpZ2h0IC8gNS41KSA8IDEwO1xyXG4gICAgfVxyXG4gICAgc2V0Q3VycnJlbnRQdXp6bGVEYXRhKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9tcHRUZXh0ID0gZGF0YS5wcm9tcHQucHJvbXB0VGV4dDtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzO1xyXG4gICAgfVxyXG4gICAgZHJhd1JUTExhbmcoKSB7XHJcbiAgICAgICAgdmFyIHggPSB0aGlzLndpZHRoIC8gMjtcclxuICAgICAgICBjb25zdCB5ID0gdGhpcy5oZWlnaHQgKiAwLjI2O1xyXG4gICAgICAgIHRoaXMuY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuY2FsY3VsYXRlRm9udCgpO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gdGhpcy5wcm9tcHRJbWFnZVdpZHRoO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IHRoaXMucHJvbXB0SW1hZ2VIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSBgJHtmb250U2l6ZX1weCAke2ZvbnR9LCBtb25vc3BhY2VgO1xyXG4gICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlID09IFwiTGV0dGVySW5Xb3JkXCIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsZXR0ZXJJbldvcmQgPSB0aGlzLmN1cnJlbnRQcm9tcHRUZXh0LnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lc1swXSwgXCJnXCIpLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMudGFyZ2V0U3RvbmVzWzBdLCB4ICsgdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KGxldHRlckluV29yZCkud2lkdGggLyAyLCB5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQobGV0dGVySW5Xb3JkLCB4IC0gdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMudGFyZ2V0U3RvbmVzWzBdKS53aWR0aCAvIDIsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjE1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbFR5cGUgPT0gXCJXb3JkXCIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHggPSB4IC0gdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQpLndpZHRoICogMC41O1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMudGFyZ2V0U3RvbmVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZHJvcHBlZFN0b25lcyA+IGkgfHwgdGhpcy5kcm9wcGVkU3RvbmVzID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy50YXJnZXRTdG9uZXNbaV0sIHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLnRhcmdldFN0b25lc1tpXSwgeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHggPSB4ICsgdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMudGFyZ2V0U3RvbmVzW2ldKS53aWR0aCArIDU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMTUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsVHlwZSA9PSBcImF1ZGlvUGxheWVyV29yZFwiKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IG9mZnNldFggPSAodGhpcy53aWR0aCAtIHNjYWxlZFdpZHRoKSAvIDI7XHJcbiAgICAgICAgICAgIC8vIGNvbnN0IG9mZnNldFkgPSAodGhpcy5oZWlnaHQgLSBzY2FsZWRIZWlnaHQpIC8gNTtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9ICh0aGlzLndpZHRoIC0gc2NhbGVkV2lkdGgpICogMS4yNTtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9ICh0aGlzLmhlaWdodCAtIHNjYWxlZEhlaWdodCkgKiAwLjMzO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgb2Zmc2V0WCwgb2Zmc2V0WSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEucHJvdG9UeXBlID09IFwiVmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQsIHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjE1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd090aGVycygpIHtcclxuICAgICAgICBjb25zdCBwcm9tcHRUZXh0TGV0dGVycyA9IHRoaXMuY3VycmVudFByb21wdFRleHQuc3BsaXQoXCJcIik7XHJcbiAgICAgICAgY29uc3QgeCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmhlaWdodCAqIDAuMjg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnByb21wdEltYWdlV2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gdGhpcy5wcm9tcHRJbWFnZUhlaWdodDtcclxuICAgICAgICB2YXIgZm9udFNpemUgPSB0aGlzLmNhbGN1bGF0ZUZvbnQoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplfXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgbGV0IHN0YXJ0UHJvbXB0dGV4dFggPSB0aGlzLndpZHRoIC8gMiAtXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLmN1cnJlbnRQcm9tcHRUZXh0KS53aWR0aCAvIDI7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRXb3JkV2lkdGggPSAwO1xyXG4gICAgICAgIHZhciBsZXR0ZXJIaWdobGlnaHQgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lc1swXS5zcGxpdChcIlwiKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb21wdFRleHRMZXR0ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxldHRlckluV29yZFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxldHRlckhpZ2hsaWdodC5pbmNsdWRlcyhwcm9tcHRUZXh0TGV0dGVyc1tpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHRlckhpZ2hsaWdodCA9IGxldHRlckhpZ2hsaWdodC5zbGljZSgxLCBsZXR0ZXJIaWdobGlnaHQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHByb21wdFRleHRMZXR0ZXJzW2ldLCBzdGFydFByb21wdHRleHRYLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjI1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXb3JkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wcGVkU3RvbmVzID4gaSB8fCB0aGlzLmRyb3BwZWRTdG9uZXMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHByb21wdFRleHRMZXR0ZXJzW2ldLCBzdGFydFByb21wdHRleHRYLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHByb21wdFRleHRMZXR0ZXJzW2ldLCBzdGFydFByb21wdHRleHRYLCB5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4yNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU291bmRXb3JkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMjUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQsIHRoaXMud2lkdGggLyAyLjEsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4yNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3VycmVudFdvcmRXaWR0aCA9ICh0aGlzLmNvbnRleHQubWVhc3VyZVRleHQocHJvbXB0VGV4dExldHRlcnNbaV0pLndpZHRoICsgdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHByb21wdFRleHRMZXR0ZXJzW2kgKyAxXSkud2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgc3RhcnRQcm9tcHR0ZXh0WCArPSBjdXJyZW50V29yZFdpZHRoO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVTY2FsaW5nKCk7XHJcbiAgICAgICAgdGhpcy50aW1lID0gKGRlbHRhVGltZSA8IDE3KSA/IHRoaXMudGltZSArIE1hdGguZmxvb3IoZGVsdGFUaW1lKSA6IHRoaXMudGltZSArIDE2O1xyXG4gICAgICAgIGlmIChNYXRoLmZsb29yKHRoaXMudGltZSkgPj0gMTkxMCAmJiBNYXRoLmZsb29yKHRoaXMudGltZSkgPD0gMTkyNikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlTb3VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNTdG9uZURyb3BwZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnByb21wdEltYWdlV2lkdGggKiB0aGlzLnNjYWxlO1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSB0aGlzLnByb21wdEltYWdlSGVpZ2h0ICogdGhpcy5zY2FsZTtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9ICh0aGlzLndpZHRoIC0gc2NhbGVkV2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9ICh0aGlzLmhlaWdodCAtIHNjYWxlZEhlaWdodCkgLyA1O1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0X2ltYWdlLCBvZmZzZXRYLCBvZmZzZXRZLCBzY2FsZWRXaWR0aCwgc2NhbGVkSGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgdGhpcy5yaWdodFRvTGVmdFxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmRyYXdSVExMYW5nKClcclxuICAgICAgICAgICAgICAgIDogdGhpcy5kcmF3T3RoZXJzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pc1N0b25lRHJvcHBlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kcm9wcGVkU3RvbmVzID0gMDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhID0gdGhpcy5sZXZlbERhdGEucHV6emxlc1tldmVudC5kZXRhaWwuY291bnRlcl07XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHJvbXB0VGV4dCA9IHRoaXMuY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy50YXJnZXRTdG9uZXMgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcztcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnByZWxvYWRQcm9tcHRBdWRpbyh0aGlzLmdldFByb21wdEF1ZGlvVXJsKCkpO1xyXG4gICAgICAgIHRoaXMuaXNTdG9uZURyb3BwZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICBkcm9wcGVkU3RvbmVJbmRleChpbmRleCkge1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZFN0b25lcyA9IGluZGV4O1xyXG4gICAgfVxyXG4gICAgY2FsY3VsYXRlRm9udCgpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMucHJvbXB0SW1hZ2VXaWR0aCAvIHRoaXMuY3VycmVudFByb21wdFRleHQubGVuZ3RoID4gMzUpID8gMzUgOiB0aGlzLndpZHRoICogMC42NSAvIHRoaXMuY3VycmVudFByb21wdFRleHQubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlU2NhbGluZygpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1NjYWxpbmdVcCkge1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlICs9IHRoaXMuc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlID49IDEuMDUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTY2FsaW5nVXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zY2FsZSAtPSB0aGlzLnNjYWxlRmFjdG9yO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zY2FsZSA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjYWxlID0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNTY2FsaW5nVXAgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09IFwiaGlkZGVuXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXNBcHBGb3JlZ3JvdW5kID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0FwcEZvcmVncm91bmQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBhc3luYyBsb2FkSW1hZ2VzKCkge1xyXG4gICAgICAgIGNvbnN0IGltYWdlMVByb21pc2UgPSB0aGlzLmxvYWRJbWFnZSh0aGlzLnByb21wdF9pbWFnZSwgXCIuL2Fzc2V0cy9pbWFnZXMvcHJvbXB0VGV4dEJnLnBuZ1wiKTtcclxuICAgICAgICBjb25zdCBpbWFnZTJQcm9taXNlID0gdGhpcy5sb2FkSW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCBcIi4vYXNzZXRzL2ltYWdlcy9wcm9tcHRQbGF5QnV0dG9uLnBuZ1wiKTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbaW1hZ2UxUHJvbWlzZSwgaW1hZ2UyUHJvbWlzZV0pO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBZb3UgY2FuIGRvIGFkZGl0aW9uYWwgYWN0aW9ucyBoZXJlIGFmdGVyIGJvdGggaW1hZ2VzIGFyZSBsb2FkZWQuXHJcbiAgICB9XHJcbiAgICBsb2FkSW1hZ2UoaW1hZ2UsIHNyYykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0b25lQ29uZmlnLCBWSVNJQklMSVRZX0NIQU5HRSwgVXRpbHMgfSBmcm9tICcuLi9jb21tb24nO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiLi4vZXZlbnRzL0V2ZW50TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBUdXRvcmlhbCB9IGZyb20gXCIuL3R1dG9yaWFsXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIi4vYXVkaW8tcGxheWVyXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCIuLi9kYXRhL2dhbWUtc2NvcmVcIjtcclxuaW1wb3J0IHsgQVVESU9fUEFUSF9FQVRTLCBBVURJT19QQVRIX01PTlNURVJfU1BJVCwgQVVESU9fUEFUSF9NT05TVEVSX0RJU1NBUE9JTlRFRCwgQVVESU9fUEFUSF9QT0lOVFNfQURELCBBVURJT19QQVRIX0NPUlJFQ1RfU1RPTkUsIEFVRElPX1BBVEhfQ0hFRVJJTkdfRlVOQywgQVNTRVRTX1BBVEhfU1RPTkVfUElOS19CRyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b25lSGFuZGxlciBleHRlbmRzIEV2ZW50TWFuYWdlciB7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgY3VycmVudFB1enpsZURhdGE7XHJcbiAgICB0YXJnZXRTdG9uZXM7XHJcbiAgICBzdG9uZVBvcztcclxuICAgIHBpY2tlZFN0b25lO1xyXG4gICAgZm9pbFN0b25lcyA9IG5ldyBBcnJheSgpO1xyXG4gICAgYW5zd2VyID0gXCJcIjtcclxuICAgIHB1enpsZU51bWJlcjtcclxuICAgIGxldmVsRGF0YTtcclxuICAgIGNvcnJlY3RBbnN3ZXI7XHJcbiAgICBwdXp6bGVTdGFydFRpbWU7XHJcbiAgICBzaG93VHV0b3JpYWwgPSBHYW1lU2NvcmUuZ2V0RGF0YWZyb21TdG9yYWdlKCkubGVuZ3RoID09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTtcclxuICAgIGNvcnJlY3RTdG9uZUF1ZGlvO1xyXG4gICAgdHV0b3JpYWw7XHJcbiAgICBjb3JyZWN0VGFyZ2V0U3RvbmU7XHJcbiAgICBzdG9uZWJnO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBmZWVkYmFja0F1ZGlvcztcclxuICAgIHRpbWVyVGlja2luZ0luc3RhbmNlO1xyXG4gICAgaXNHYW1lUGF1c2VkID0gZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMsIHB1enpsZU51bWJlciwgbGV2ZWxEYXRhLCBmZWVkYmFja0F1ZGlvcywgdGltZXJUaWNraW5nSW5zdGFuY2UpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZVN0b25lRHJvcChldmVudCksXHJcbiAgICAgICAgICAgIGxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVMb2FkUHV6emxlKGV2ZW50KSxcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtYmVyO1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMuc2V0VGFyZ2V0U3RvbmUodGhpcy5wdXp6bGVOdW1iZXIpO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZVN0b25lUG9zKCk7XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpbyA9IG5ldyBBdWRpbyhBVURJT19QQVRIX0NPUlJFQ1RfU1RPTkUpO1xyXG4gICAgICAgIHRoaXMuY29ycmVjdFN0b25lQXVkaW8ubG9vcCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tBdWRpb3MgPSB0aGlzLmNvbnZlcnRGZWVkQmFja0F1ZGlvc1RvTGlzdChmZWVkYmFja0F1ZGlvcyk7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVTdGFydFRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWwgPSBuZXcgVHV0b3JpYWwoY29udGV4dCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0LCBwdXp6bGVOdW1iZXIpO1xyXG4gICAgICAgIHRoaXMuc3RvbmViZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuc3RvbmViZy5zcmMgPSBBU1NFVFNfUEFUSF9TVE9ORV9QSU5LX0JHO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnN0b25lYmcub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVTdG9uZXModGhpcy5zdG9uZWJnKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZ0luc3RhbmNlID0gdGltZXJUaWNraW5nSW5zdGFuY2U7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihWSVNJQklMSVRZX0NIQU5HRSwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVTdG9uZXMoaW1nKSB7XHJcbiAgICAgICAgY29uc3QgZm9pbFN0b25lcyA9IHRoaXMuZ2V0Rm9pbFN0b25lcygpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9pbFN0b25lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZm9pbFN0b25lc1tpXSA9PSB0aGlzLmNvcnJlY3RUYXJnZXRTdG9uZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dXRvcmlhbC51cGRhdGVUYXJnZXRTdG9uZVBvc2l0aW9ucyh0aGlzLnN0b25lUG9zW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmZvaWxTdG9uZXMucHVzaChuZXcgU3RvbmVDb25maWcodGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0LCBmb2lsU3RvbmVzW2ldLCB0aGlzLnN0b25lUG9zW2ldWzBdLCB0aGlzLnN0b25lUG9zW2ldWzFdLCBpbWcsIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UsIGkgPT0gZm9pbFN0b25lcy5sZW5ndGggLSAxID8gdGhpcy50dXRvcmlhbCA6IG51bGwpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3KGRlbHRhVGltZSkge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5mb2lsU3RvbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZm9pbFN0b25lc1tpXS5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmZvaWxTdG9uZXNbdGhpcy5mb2lsU3RvbmVzLmxlbmd0aCAtIDFdLmZyYW1lID49IDEwMCAmJlxyXG4gICAgICAgICAgICAhdGhpcy5pc0dhbWVQYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lclRpY2tpbmdJbnN0YW5jZS51cGRhdGUoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplU3RvbmVQb3MoKSB7XHJcbiAgICAgICAgbGV0IG9mZnNldENvb3JkaW5hdGVWYWx1ZSA9IDMyO1xyXG4gICAgICAgIHRoaXMuc3RvbmVQb3MgPSBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gNSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuOSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4xNSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAzLjUgKyB0aGlzLmNhbnZhcy53aWR0aCAvIDIgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjIgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gNCAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMjggLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gNyAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuNSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLjMgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMi4xIC1cclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjkgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMi4zICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIuMSAtXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS40MiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyA2IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4xIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5zdG9uZVBvcyA9IHRoaXMuc3RvbmVQb3Muc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuICAgIH1cclxuICAgIHNldFRhcmdldFN0b25lKHB1enpsZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEgPSB0aGlzLmxldmVsRGF0YS5wdXp6bGVzW3B1enpsZU51bWJlcl07XHJcbiAgICAgICAgdGhpcy50YXJnZXRTdG9uZXMgPSBbLi4udGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXNdO1xyXG4gICAgICAgIHRoaXMuY29ycmVjdFRhcmdldFN0b25lID0gdGhpcy50YXJnZXRTdG9uZXMuam9pbihcIlwiKTtcclxuICAgIH1cclxuICAgIGlzRHJvcHBlZFN0b25lQ29ycmVjdChkcm9wcGVkU3RvbmUpIHtcclxuICAgICAgICByZXR1cm4gZHJvcHBlZFN0b25lID09IHRoaXMuY29ycmVjdFRhcmdldFN0b25lO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5mb2lsU3RvbmVzID0gW107XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5mb2lsU3RvbmVzID0gW107XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbC5zZXRQdXp6bGVOdW1iZXIoZXZlbnQuZGV0YWlsLmNvdW50ZXIpO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gZXZlbnQuZGV0YWlsLmNvdW50ZXI7XHJcbiAgICAgICAgdGhpcy5zZXRUYXJnZXRTdG9uZSh0aGlzLnB1enpsZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplU3RvbmVQb3MoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVN0b25lcyh0aGlzLnN0b25lYmcpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICBpc1N0b25lTGV0dGVyRHJvcENvcnJlY3QoZHJvcHBlZFN0b25lLCBmZWVkQmFja0luZGV4LCBpc1dvcmQgPSBmYWxzZSkge1xyXG4gICAgICAgIGNvbnN0IGlzTGV0dGVyRHJvcENvcnJlY3QgPSBpc1dvcmRcclxuICAgICAgICAgICAgPyBkcm9wcGVkU3RvbmUgPT0gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmUuc3Vic3RyaW5nKDAsIGRyb3BwZWRTdG9uZS5sZW5ndGgpXHJcbiAgICAgICAgICAgIDogZHJvcHBlZFN0b25lID09IHRoaXMuY29ycmVjdFRhcmdldFN0b25lO1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc0xldHRlckRyb3BGZWVkYmFja0F1ZGlvKGZlZWRCYWNrSW5kZXgsIGlzTGV0dGVyRHJvcENvcnJlY3QsIGlzV29yZCwgZHJvcHBlZFN0b25lKTtcclxuICAgICAgICByZXR1cm4gaXNMZXR0ZXJEcm9wQ29ycmVjdDtcclxuICAgIH1cclxuICAgIHByb2Nlc3NMZXR0ZXJEcm9wRmVlZGJhY2tBdWRpbyhmZWVkQmFja0luZGV4LCBpc0xldHRlckRyb3BDb3JyZWN0LCBpc1dvcmQsIGRyb3BwZWRTdG9uZSkge1xyXG4gICAgICAgIGlmIChpc0xldHRlckRyb3BDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGlzV29yZFxyXG4gICAgICAgICAgICAgICAgPyBkcm9wcGVkU3RvbmUgPT09IHRoaXMuZ2V0Q29ycmVjdFRhcmdldFN0b25lKCkgLy8gY29uZGl0aW9uIGZvciB3b3JkIHB1enpsZVxyXG4gICAgICAgICAgICAgICAgOiBpc0xldHRlckRyb3BDb3JyZWN0OyAvLyBmb3IgbGV0dGVyIGFuZCBsZXR0ZXIgZm9yIHdvcmQgcHV6emxlXHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5RmVlZGJhY2tBdWRpb3MoZmFsc2UsIEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DKDIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5RmVlZGJhY2tBdWRpb3MoZmFsc2UsIEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9NT05TVEVSX1NQSVQsIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPiAwID8gQVVESU9fUEFUSF9NT05TVEVSX0RJU1NBUE9JTlRFRCA6IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldENvcnJlY3RUYXJnZXRTdG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmU7XHJcbiAgICB9XHJcbiAgICBnZXRGb2lsU3RvbmVzKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuaW5kZXhPZihlKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCB0b3RhbFN0b25lc0NvdW50ID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXMubGVuZ3RoICtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLmxlbmd0aDtcclxuICAgICAgICBpZiAodG90YWxTdG9uZXNDb3VudCA+IDgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXh0cmFTdG9uZXNDb3VudCA9IHRvdGFsU3RvbmVzQ291bnQgLSA4O1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc3BsaWNlKDAsIGV4dHJhU3RvbmVzQ291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcy5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEuZm9pbFN0b25lcy5wdXNoKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpby5wYXVzZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnZlcnRGZWVkQmFja0F1ZGlvc1RvTGlzdChmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGZlZWRiYWNrQXVkaW9zW1wiZmFudGFzdGljXCJdLFxyXG4gICAgICAgICAgICBmZWVkYmFja0F1ZGlvc1tcImdyZWF0XCJdLFxyXG4gICAgICAgICAgICBmZWVkYmFja0F1ZGlvc1tcImFtYXppbmdcIl1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgc2V0R2FtZVBhdXNlKGlzR2FtZVBhdXNlZCkge1xyXG4gICAgICAgIHRoaXMuaXNHYW1lUGF1c2VkID0gaXNHYW1lUGF1c2VkO1xyXG4gICAgfVxyXG4gICAgcGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kKGZlZWRCYWNrSW5kZXgpIHtcclxuICAgICAgICBjb25zdCByYW5kb21OdW1iZXIgPSBVdGlscy5nZXRSYW5kb21OdW1iZXIoMSwgMykudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlGZWVkYmFja0F1ZGlvcyhmYWxzZSwgQVVESU9fUEFUSF9FQVRTLCBBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMocmFuZG9tTnVtYmVyKSwgQVVESU9fUEFUSF9QT0lOVFNfQURELCBVdGlscy5nZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHRoaXMuZmVlZGJhY2tBdWRpb3NbZmVlZEJhY2tJbmRleF0pKTtcclxuICAgICAgICAvLyB0byBwbGF5IHRoZSBhdWRpbyBwYXJyYWxsZWx5LlxyXG4gICAgICAgIHRoaXMuY29ycmVjdFN0b25lQXVkaW8ucGxheSgpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGxvYWRJbWFnZXMgfSBmcm9tIFwiLi4vY29tbW9uL2NvbW1vblwiO1xyXG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiLi4vZXZlbnRzL0V2ZW50TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCIuL2F1ZGlvLXBsYXllclwiO1xyXG5leHBvcnQgY2xhc3MgVGltZXJUaWNraW5nIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgdGltZXJXaWR0aDtcclxuICAgIHRpbWVySGVpZ2h0O1xyXG4gICAgd2lkdGhUb0NsZWFyO1xyXG4gICAgdGltZXI7XHJcbiAgICBpc1RpbWVyU3RhcnRlZDtcclxuICAgIGlzVGltZXJFbmRlZDtcclxuICAgIGlzVGltZXJSdW5uaW5nT3V0O1xyXG4gICAgY2FuYXZzRWxlbWVudDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICB0aW1lcl9mdWxsO1xyXG4gICAgcGF1c2VCdXR0b25DbGlja2VkO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgY2FsbGJhY2s7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHN0YXJ0TXlUaW1lciA9IHRydWU7XHJcbiAgICBpc015VGltZXJPdmVyID0gZmFsc2U7XHJcbiAgICBpc1N0b25lRHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBwbGF5TGV2ZWxFbmRBdWRpb09uY2UgPSB0cnVlO1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgY2FsbGJhY2spIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIHN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZVN0b25lRHJvcChldmVudCksXHJcbiAgICAgICAgICAgIGxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVMb2FkUHV6emxlKGV2ZW50KVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoVG9DbGVhciA9IHRoaXMud2lkdGggLyAzLjQ7XHJcbiAgICAgICAgdGhpcy50aW1lckhlaWdodCA9IDExMjtcclxuICAgICAgICB0aGlzLnRpbWVyV2lkdGggPSA4ODg7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IDA7XHJcbiAgICAgICAgdGhpcy5pc1RpbWVyU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaXNUaW1lckVuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1RpbWVyUnVubmluZ091dCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnBsYXlMZXZlbEVuZEF1ZGlvT25jZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIHRpbWVyX2VtcHR5OiBcIi4vYXNzZXRzL2ltYWdlcy90aW1lcl9lbXB0eS5wbmdcIixcclxuICAgICAgICAgICAgcm90YXRpbmdfY2xvY2s6IFwiLi9hc3NldHMvaW1hZ2VzL3RpbWVyLnBuZ1wiLFxyXG4gICAgICAgICAgICB0aW1lcl9mdWxsOiBcIi4vYXNzZXRzL2ltYWdlcy90aW1lcl9mdWxsLnBuZ1wiXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgc3RhcnRUaW1lcigpIHtcclxuICAgICAgICAvLyBpdCB3aWxsIHN0YXJ0IHRpbWVyIGltbWVkaWF0bHlcclxuICAgICAgICB0aGlzLnJlYWR5VGltZXIoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0TXlUaW1lciA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc015VGltZXJPdmVyID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZWFkeVRpbWVyKCkge1xyXG4gICAgICAgIC8vIG1ha2UgdGltZXIgbG9vayBmdWxsIHNvIGFzIGl0IGdldCBzdGFydCBzaWduYWwuLi4uLiBpdCB3aWxsIHN0YXJ0IGRlY3JlYXNpbmdcclxuICAgICAgICB0aGlzLnRpbWVyID0gMDtcclxuICAgIH1cclxuICAgIHVwZGF0ZShkZWx0YVRpbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGFydE15VGltZXIgJiYgIXRoaXMuaXNTdG9uZURyb3BwZWQpIHtcclxuICAgICAgICAgICAgdGhpcy50aW1lciArPSBkZWx0YVRpbWUgKiAwLjAwODtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodGhpcy53aWR0aCAqIDAuODcgLSAodGhpcy53aWR0aCAqIDAuODcgKiB0aGlzLnRpbWVyICogMC4wMSkpID09IDQwICYmICF0aGlzLmlzTXlUaW1lck92ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5TGV2ZWxFbmRBdWRpb09uY2UgPyB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbygnLi9hc3NldHMvYXVkaW9zL3RpbWVvdXQubXAzJykgOiBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlMZXZlbEVuZEF1ZGlvT25jZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoKHRoaXMud2lkdGggKiAwLjg3IC0gKHRoaXMud2lkdGggKiAwLjg3ICogdGhpcy50aW1lciAqIDAuMDEpKSA8IDAgJiYgIXRoaXMuaXNNeVRpbWVyT3Zlcikge1xyXG4gICAgICAgICAgICB0aGlzLmlzTXlUaW1lck92ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMudGltZXJfZW1wdHksIDAsIHRoaXMuaGVpZ2h0ICogMC4xLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuMDUpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnJvdGF0aW5nX2Nsb2NrLCA1LCB0aGlzLmhlaWdodCAqIDAuMDksIHRoaXMud2lkdGggKiAwLjEyLCB0aGlzLmhlaWdodCAqIDAuMDYpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnRpbWVyX2Z1bGwsIDAsIDAsIHRoaXMudGltZXJXaWR0aCAtICh0aGlzLnRpbWVyV2lkdGggKiB0aGlzLnRpbWVyICogMC4wMSksIHRoaXMudGltZXJIZWlnaHQsIHRoaXMud2lkdGggKiAwLjE0LCB0aGlzLmhlaWdodCAqIDAuMDk5LCB0aGlzLndpZHRoICogMC44NyAtICh0aGlzLndpZHRoICogMC44NyAqIHRoaXMudGltZXIgKiAwLjAxKSwgdGhpcy5oZWlnaHQgKiAwLjA1KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmlzU3RvbmVEcm9wcGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBsYXlMZXZlbEVuZEF1ZGlvT25jZSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5pc1N0b25lRHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lcigpO1xyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgY3JlYXRlUmlwcGxlRWZmZWN0IH0gZnJvbSBcIi4uL2NvbW1vbi91dGlsc1wiO1xyXG5pbXBvcnQgeyBHYW1lU2NvcmUgfSBmcm9tIFwiLi4vZGF0YS9nYW1lLXNjb3JlXCI7XHJcbmV4cG9ydCBjbGFzcyBUdXRvcmlhbCB7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICB0dXRvcmlhbEltZztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgdGFyZ2V0U3RvbmVQb3NpdGlvbnM7XHJcbiAgICBzdGFydHg7XHJcbiAgICBzdGFydHk7XHJcbiAgICBlbmR4O1xyXG4gICAgZW5keTtcclxuICAgIGVuZFR1dG9yaWFsID0gZmFsc2U7XHJcbiAgICBwdXp6bGVOdW1iZXI7XHJcbiAgICBwbGF5TW5zdHJDbGtUdHJsQW5pbSA9IHRydWU7XHJcbiAgICB0b3RhbFRpbWUgPSAwO1xyXG4gICAgbW9uc3RlclN0b25lRGlmZmVyZW5jZSA9IDA7XHJcbiAgICB4O1xyXG4gICAgeTtcclxuICAgIGR4O1xyXG4gICAgZHk7XHJcbiAgICBhYnNkeDtcclxuICAgIGFic2R5O1xyXG4gICAgc3RhcnRSaXBwbGUgPSBmYWxzZTtcclxuICAgIGRyYXdSaXBwbGU7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBwdXp6bGVOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLnN0YXJ0eCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFydHkgPSAwO1xyXG4gICAgICAgIHRoaXMuZW5keCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIHRoaXMuZW5keSA9IHRoaXMuaGVpZ2h0IC8gMjtcclxuICAgICAgICB0aGlzLnB1enpsZU51bWJlciA9IChwdXp6bGVOdW1iZXIgPj0gMCkgPyBwdXp6bGVOdW1iZXIgOiBudWxsO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWxJbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsSW1nLnNyYyA9IFwiLi9hc3NldHMvaW1hZ2VzL3R1dG9yaWFsX2hhbmQucG5nXCI7XHJcbiAgICAgICAgdGhpcy5kcmF3UmlwcGxlID0gY3JlYXRlUmlwcGxlRWZmZWN0KHRoaXMuY29udGV4dCk7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbEltZy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgdXBkYXRlVGFyZ2V0U3RvbmVQb3NpdGlvbnModGFyZ2V0U3RvbmVQb3NpdGlvbikge1xyXG4gICAgICAgIHRoaXMuc3RhcnR4ID0gdGFyZ2V0U3RvbmVQb3NpdGlvblswXSAtIDIyO1xyXG4gICAgICAgIHRoaXMuc3RhcnR5ID0gdGFyZ2V0U3RvbmVQb3NpdGlvblsxXSAtIDUwO1xyXG4gICAgICAgIHRoaXMubW9uc3RlclN0b25lRGlmZmVyZW5jZSA9IE1hdGguc3FydCgodGhpcy5zdGFydHggLSB0aGlzLmVuZHgpICogKHRoaXMuc3RhcnR4IC0gdGhpcy5lbmR4KSArICh0aGlzLnN0YXJ0eSAtIHRoaXMuZW5keSkgKiAodGhpcy5zdGFydHkgLSB0aGlzLmVuZHkpKTtcclxuICAgICAgICB0aGlzLmFuaW1hdGVJbWFnZSgpO1xyXG4gICAgfVxyXG4gICAgaXNNb2JpbGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUGFkfGlQb2R8QmxhY2tCZXJyeXxJRU1vYmlsZXxPcGVyYSBNaW5pL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcclxuICAgIH1cclxuICAgIHNldFR1dG9yaWFsRW5kKGVuZFR1dG9yaWFsKSB7XHJcbiAgICAgICAgdGhpcy5lbmRUdXRvcmlhbCA9IGVuZFR1dG9yaWFsO1xyXG4gICAgfVxyXG4gICAgYW5pbWF0ZUltYWdlKCkge1xyXG4gICAgICAgIHRoaXMueCA9IHRoaXMuc3RhcnR4O1xyXG4gICAgICAgIHRoaXMueSA9IHRoaXMuc3RhcnR5O1xyXG4gICAgICAgIHRoaXMuZHggPSAodGhpcy5lbmR4IC0gdGhpcy5zdGFydHgpIC8gNTAwMDtcclxuICAgICAgICB0aGlzLmR5ID0gKHRoaXMuZW5keSAtIHRoaXMuc3RhcnR5KSAvIDUwMDA7XHJcbiAgICAgICAgdGhpcy5hYnNkeCA9IHRoaXMuaXNNb2JpbGUoKSA/IE1hdGguYWJzKHRoaXMuZHgpICogMyA6IE1hdGguYWJzKHRoaXMuZHgpO1xyXG4gICAgICAgIHRoaXMuYWJzZHkgPSB0aGlzLmlzTW9iaWxlKCkgPyBNYXRoLmFicyh0aGlzLmR5KSAqIDMgOiBNYXRoLmFicyh0aGlzLmR5KTtcclxuICAgICAgICB0aGlzLnNldFR1dG9yaWFsRW5kKGZhbHNlKTtcclxuICAgIH1cclxuICAgIGRyYXcoZGVsdGFUaW1lLCBpbWcsIGltYWdlU2l6ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCAmJiAhdGhpcy5lbmRUdXRvcmlhbCAmJiB0aGlzLnNob3VsZFBsYXlUdXRvcmlhbCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmR4ID49IDBcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMueCArIHRoaXMuYWJzZHggKiBkZWx0YVRpbWVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMueCAtIHRoaXMuYWJzZHggKiBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgIHRoaXMueSA9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmR5ID49IDBcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMueSArIHRoaXMuYWJzZHkgKiBkZWx0YVRpbWVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMueSAtIHRoaXMuYWJzZHkgKiBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3ggPSB0aGlzLnggLSB0aGlzLmVuZHggKyB0aGlzLmFic2R4O1xyXG4gICAgICAgICAgICBjb25zdCBkaXN5ID0gdGhpcy55IC0gdGhpcy5lbmR5ICsgdGhpcy5hYnNkeTtcclxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoZGlzeCAqIGRpc3ggKyBkaXN5ICogZGlzeSk7XHJcbiAgICAgICAgICAgIGxldCBtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlID0gKDEwMCAqIGRpc3RhbmNlIC8gdGhpcy5tb25zdGVyU3RvbmVEaWZmZXJlbmNlKTtcclxuICAgICAgICAgICAgaWYgKG1vbnN0ZXJTdG9uZURpZmZlcmVuY2VJblBlcmNlbnRhZ2UgPCAxNSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vbnN0ZXJTdG9uZURpZmZlcmVuY2VJblBlcmNlbnRhZ2UgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVIYW5kU2NhbGVBbmltYXRpb24oZGVsdGFUaW1lLCB0aGlzLmVuZHgsIHRoaXMuZW5keSArIDMwLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueCA9IHRoaXMuc3RhcnR4O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMueSA9IHRoaXMuc3RhcnR5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG1vbnN0ZXJTdG9uZURpZmZlcmVuY2VJblBlcmNlbnRhZ2UgPiA4MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVIYW5kU2NhbGVBbmltYXRpb24oZGVsdGFUaW1lLCB0aGlzLnN0YXJ0eCArIDE1LCB0aGlzLnN0YXJ0eSArIDEwLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJldmlvdXNBbHBoYSA9IHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IDAuNDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UoaW1nLCB0aGlzLngsIHRoaXMueSArIDIwLCBpbWFnZVNpemUsIGltYWdlU2l6ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSBwcmV2aW91c0FscGhhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnR1dG9yaWFsSW1nLCB0aGlzLnggKyAxNSwgdGhpcy55ICsgMTApOyAvL2RyYXdzIHRoZSBoYW5kIHN0b25lIGRyYWcgYW5pbWF0aW9uIVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uKGRlbHRhVGltZSwgb2Zmc2V0WCwgb2Zmc2V0WSwgc2hvdWxkQ3JlYXRlUmlwcGxlKSB7XHJcbiAgICAgICAgdGhpcy50b3RhbFRpbWUgKz0gTWF0aC5mbG9vcihkZWx0YVRpbWUpO1xyXG4gICAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IDUwMDtcclxuICAgICAgICBjb25zdCBzY2FsZUZhY3RvciA9IHRoaXMuc2ludXNvaWRhbEludGVycG9sYXRpb24odGhpcy50b3RhbFRpbWUsIDEsIDEuNSwgdHJhbnNpdGlvbkR1cmF0aW9uKTtcclxuICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHRoaXMudHV0b3JpYWxJbWcud2lkdGggKiBzY2FsZUZhY3RvcjtcclxuICAgICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSB0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAqIHNjYWxlRmFjdG9yO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy50dXRvcmlhbEltZywgb2Zmc2V0WCwgb2Zmc2V0WSwgc2NhbGVkV2lkdGgsIHNjYWxlZEhlaWdodCk7XHJcbiAgICAgICAgc2hvdWxkQ3JlYXRlUmlwcGxlID8gKG51bGwpIDogKHRoaXMuZHJhd1JpcHBsZShvZmZzZXRYICsgdGhpcy53aWR0aCAqIDAuMDIsIG9mZnNldFkgKyB0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDIsIGZhbHNlKSk7XHJcbiAgICB9XHJcbiAgICBzaW51c29pZGFsSW50ZXJwb2xhdGlvbih0aW1lLCBtaW5TY2FsZSwgbWF4U2NhbGUsIGR1cmF0aW9uKSB7XHJcbiAgICAgICAgY29uc3QgYW1wbGl0dWRlID0gKG1heFNjYWxlIC0gbWluU2NhbGUpIC8gMjtcclxuICAgICAgICBjb25zdCBmcmVxdWVuY3kgPSBNYXRoLlBJIC8gZHVyYXRpb247XHJcbiAgICAgICAgcmV0dXJuIG1pblNjYWxlICsgYW1wbGl0dWRlICogTWF0aC5zaW4oZnJlcXVlbmN5ICogdGltZSk7XHJcbiAgICB9XHJcbiAgICBjbGlja09uTW9uc3RlclR1dG9yaWFsKGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnNob3VsZFBsYXlNb25zdGVyQ2xpY2tUdXRvcmlhbEFuaW1hdGlvbigpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IDIwMDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvdHRvbVBvc2l0aW9uID0gdGhpcy5oZWlnaHQgLyAxLjkgKyAodGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAwLjgpO1xyXG4gICAgICAgICAgICBjb25zdCB0b3BQb3NpdGlvbiA9IHRoaXMuaGVpZ2h0IC8gMS45ICsgKHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0IC8gMC44KSAtIHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0O1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudE9mZnNldFk7XHJcbiAgICAgICAgICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLmVuZHg7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvdGFsVGltZSA8IHRyYW5zaXRpb25EdXJhdGlvbiAvIDIpIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRPZmZzZXRZID0gdG9wUG9zaXRpb24gKyAodGhpcy50b3RhbFRpbWUgLyAodHJhbnNpdGlvbkR1cmF0aW9uIC8gMikpICogKGJvdHRvbVBvc2l0aW9uIC0gdG9wUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3UmlwcGxlKG9mZnNldFgsIHRoaXMuaGVpZ2h0IC8gMS45ICsgKHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0IC8gMS41KSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50T2Zmc2V0WSA9IGJvdHRvbVBvc2l0aW9uIC0gKCh0aGlzLnRvdGFsVGltZSAtIHRyYW5zaXRpb25EdXJhdGlvbiAvIDIpIC8gKHRyYW5zaXRpb25EdXJhdGlvbiAvIDIpKSAqIChib3R0b21Qb3NpdGlvbiAtIHRvcFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JpcHBsZShvZmZzZXRYLCB0aGlzLmhlaWdodCAvIDEuOSArICh0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDEuMikgKyB0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnR1dG9yaWFsSW1nLCBvZmZzZXRYLCBjdXJyZW50T2Zmc2V0WSwgdGhpcy50dXRvcmlhbEltZy53aWR0aCwgdGhpcy50dXRvcmlhbEltZy5oZWlnaHQpO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudE9mZnNldFkgPD0gdG9wUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxUaW1lID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRvdGFsVGltZSArPSBkZWx0YVRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2hvdWxkUGxheVR1dG9yaWFsKCkge1xyXG4gICAgICAgIGxldCBwbGF5RHJhZ0FuaW1hdGlvbkZvckZpcnN0UHV6emxlID0gR2FtZVNjb3JlLmdldEFsbEdhbWVMZXZlbEluZm8oKS5sZW5ndGggPD0gMCAmJiB0aGlzLnB1enpsZU51bWJlciA9PSAwO1xyXG4gICAgICAgIHJldHVybiBwbGF5RHJhZ0FuaW1hdGlvbkZvckZpcnN0UHV6emxlO1xyXG4gICAgfVxyXG4gICAgc2hvdWxkUGxheU1vbnN0ZXJDbGlja1R1dG9yaWFsQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIGxldCBwbGF5RHJhZ0FuaW1hdGlvbkZvckZpcnN0UHV6emxlID0gR2FtZVNjb3JlLmdldEFsbEdhbWVMZXZlbEluZm8oKS5sZW5ndGggPD0gMCAmJiB0aGlzLnBsYXlNbnN0ckNsa1R0cmxBbmltO1xyXG4gICAgICAgIHJldHVybiBwbGF5RHJhZ0FuaW1hdGlvbkZvckZpcnN0UHV6emxlO1xyXG4gICAgfVxyXG4gICAgc2V0UHV6emxlTnVtYmVyKHB1enpsZU51bWVyKSB7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSBwdXp6bGVOdW1lcjtcclxuICAgIH1cclxuICAgIHNldFBsYXlNb25zdGVyQ2xpY2tBbmltYXRpb24odmFsdWUpIHtcclxuICAgICAgICB0aGlzLnBsYXlNbnN0ckNsa1R0cmxBbmltID0gdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XHJcbmltcG9ydCB7IERFRkFVTFRfQkdfR1JPVVBfSU1HUywgQVVUVU1OX0JHX0dST1VQX0lNR1MsIFdJTlRFUl9CR19HUk9VUF9JTUdTIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzLyc7XHJcbmV4cG9ydCBjb25zdCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QgPSB7XHJcbiAgICBzdW1tZXI6IHsgQkdfR1JPVVBfSU1HUzogREVGQVVMVF9CR19HUk9VUF9JTUdTLCBkcmF3OiBkZWZhdWx0QmdEcmF3aW5nIH0sXHJcbiAgICBhdXR1bW46IHsgQkdfR1JPVVBfSU1HUzogQVVUVU1OX0JHX0dST1VQX0lNR1MsIGRyYXc6IGF1dHVtQmdEcmF3aW5nIH0sXHJcbiAgICB3aW50ZXI6IHsgQkdfR1JPVVBfSU1HUzogV0lOVEVSX0JHX0dST1VQX0lNR1MsIGRyYXc6IHdpbnRlckJnRHJhd2luZyB9LFxyXG59O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQmFja2dyb3VuZChjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiYWNrZ3JvdW5kSW1nLCBkcmF3TWV0aG9kKSB7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSB7IC4uLmF3YWl0IGxvYWRJbWFnZXMoYmFja2dyb3VuZEltZykgfTtcclxuICAgIGNvbnN0IG9iaiA9IHtcclxuICAgICAgICAuLi5kcmF3TWV0aG9kKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGxvYWRlZEltYWdlcylcclxuICAgIH07XHJcbiAgICByZXR1cm4gKHsgLi4ub2JqIH0pO1xyXG59XHJcbjtcclxuZXhwb3J0IGNvbnN0IGxvYWREeW5hbWljQmdBc3NldHMgPSAobGV2ZWxOdW1iZXIsIGFzc2V0c0xpc3QpID0+IHtcclxuICAgIGNvbnN0IGFyciA9IE9iamVjdC5rZXlzKGFzc2V0c0xpc3QpOyAvL2F2YWlsYWJsZUJhY2tncm91bmRUeXBlc1xyXG4gICAgbGV0IGJhY2tncm91bmRUeXBlID0gTWF0aC5mbG9vcihsZXZlbE51bWJlciAvIDEwKSAlIGFyci5sZW5ndGg7XHJcbiAgICBpZiAobGV2ZWxOdW1iZXIgPj0gMzApIHtcclxuICAgICAgICBiYWNrZ3JvdW5kVHlwZSA9IGJhY2tncm91bmRUeXBlICUgMztcclxuICAgIH1cclxuICAgIHJldHVybiB7IC4uLmFzc2V0c0xpc3RbYXJyW2JhY2tncm91bmRUeXBlXV0gfTtcclxufTtcclxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRCZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uREVGQVVMVF9CQUNLR1JPVU5EXzEsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uUElMTEFSX0lNQUdFXzEsIHdpZHRoICogMC42LCBoZWlnaHQgLyA2LCB3aWR0aCwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzPy5GRU5DRV9JTUFHRV8xLCAtd2lkdGggKiAwLjQsIGhlaWdodCAvIDMsIHdpZHRoLCBoZWlnaHQgLyAzKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkhJTExfSU1BR0VfMSwgLXdpZHRoICogMC4yNSwgaGVpZ2h0IC8gMiwgd2lkdGggKiAxLjUsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuO1xyXG5leHBvcnQgZnVuY3Rpb24gYXV0dW1CZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuQVVUVU1OX1BJTExBUl8xLCB3aWR0aCAqIDAuMzgsIGhlaWdodCAvIDYsIHdpZHRoIC8gMS4yLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuQVVUVU1OX0ZFTkNFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gNCwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fSElMTF8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiB3aW50ZXJCZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuV0lOVEVSX1BJTExBUl8xLCB3aWR0aCAqIDAuMzgsIGhlaWdodCAvIDYsIHdpZHRoIC8gMS4yLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuV0lOVEVSX0ZFTkNFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gNCwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfSElMTF8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiBsZXZlbFNlbGVjdEJnRHJhd2luZyhjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiZ0ltYWdlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkcmF3OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzPy5MRVZFTF9TRUxFQ1RJT05fQkFDS0dST1VORCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbiIsIi8vQXVkaW8gcGF0aHNcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfRUFUUyA9IFwiLi9hc3NldHMvYXVkaW9zL0VhdC5tcDNcIjtcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfTU9OU1RFUl9TUElUID0gXCIuL2Fzc2V0cy9hdWRpb3MvTW9uc3RlclNwaXQubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVEID0gXCIuL2Fzc2V0cy9hdWRpb3MvRGlzYXBvaW50ZWQtMDUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX1BPSU5UU19BREQgPSBcImFzc2V0cy9hdWRpb3MvUG9pbnRzQWRkLndhdlwiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9DT1JSRUNUX1NUT05FID0gXCJhc3NldHMvYXVkaW9zL0NvcnJlY3RTdG9uZUZpbmFsLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DID0gKHJhbmRvbU51bWJlcikgPT4gYC4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wJHtyYW5kb21OdW1iZXJ9Lm1wM2A7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX0JUTl9DTElDSyA9IFwiLi9hc3NldHMvYXVkaW9zL0J1dHRvbkNsaWNrLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9PTl9EUkFHID0gXCIuL2Fzc2V0cy9hdWRpb3Mvb25EcmFnLm1wM1wiO1xyXG4vL0ltYWdlIHBhdGhzXHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9TVE9ORV9QSU5LX0JHID0gXCIuL2Fzc2V0cy9pbWFnZXMvc3RvbmVfcGlua192MDIucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9UT1RFTSA9IFwiLi9hc3NldHMvaW1hZ2VzL1RvdGVtX3YwMl92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9CR18wMSA9IFwiLi9hc3NldHMvaW1hZ2VzL2JnX3YwMS5qcGdcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0hJTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy9oaWxsX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0ZFTkNFID0gXCIuL2Fzc2V0cy9pbWFnZXMvZmVuY2VfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFID0gXCIuL2Fzc2V0cy9pbWFnZXMvaWRsZTQucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0JBQ0tHUk9VTkRfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL2JnX3YwMS5qcGdcIjtcclxuZXhwb3J0IGNvbnN0IEhJTExfSU1BR0VfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL2hpbGxfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgUElMTEFSX0lNQUdFXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9Ub3RlbV92MDJfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgRkVOQ0VfSU1BR0VfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL2ZlbmNlX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9CQUNLR1JPVU5EXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fYmdfdjAxLmpwZ1wiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX0hJTExfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL0F1dHVtbl9oaWxsX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9QSUxMQVJfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL0F1dHVtbl9zaWduX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9TSUdOXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fc2lnbl92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBBVVRVTU5fRkVOQ0VfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL0F1dHVtbl9mZW5jZV92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfQkFDS0dST1VORF8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX2JnXzAxLmpwZ1wiO1xyXG5leHBvcnQgY29uc3QgV0lOVEVSX0hJTExfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1dpbnRlcl9oaWxsX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9TSUdOXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfc2lnbl92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfRkVOQ0VfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1dpbnRlcl9mZW5jZV92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfUElMTEFSXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfc2lnbl92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBMRVZFTF9TRUxFQ1RJT05fQkFDS0dST1VORCA9IFwiLi9hc3NldHMvaW1hZ2VzL21hcC5qcGdcIjtcclxuLy9CYWNrZ3JvdW5kIEdyb3VwIEltYWdlc1xyXG5leHBvcnQgY29uc3QgR0FNRVBMQVlfQkdfR1JPVVBfSU1HUyA9IHtcclxuICAgIEFTU0VUU19QQVRIX1RPVEVNLFxyXG4gICAgQVNTRVRTX1BBVEhfQkdfMDEsXHJcbiAgICBBU1NFVFNfUEFUSF9ISUxMLFxyXG4gICAgQVNTRVRTX1BBVEhfRkVOQ0UsXHJcbiAgICBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEVcclxufTtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQkdfR1JPVVBfSU1HUyA9IHtcclxuICAgIERFRkFVTFRfQkFDS0dST1VORF8xLFxyXG4gICAgSElMTF9JTUFHRV8xLFxyXG4gICAgUElMTEFSX0lNQUdFXzEsXHJcbiAgICBGRU5DRV9JTUFHRV8xXHJcbn07XHJcbmV4cG9ydCBjb25zdCBBVVRVTU5fQkdfR1JPVVBfSU1HUyA9IHtcclxuICAgIEFVVFVNTl9CQUNLR1JPVU5EXzEsXHJcbiAgICBBVVRVTU5fSElMTF8xLFxyXG4gICAgQVVUVU1OX1BJTExBUl8xLFxyXG4gICAgQVVUVU1OX1NJR05fMSxcclxuICAgIEFVVFVNTl9GRU5DRV8xXHJcbn07XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfQkdfR1JPVVBfSU1HUyA9IHtcclxuICAgIFdJTlRFUl9CQUNLR1JPVU5EXzEsXHJcbiAgICBXSU5URVJfSElMTF8xLFxyXG4gICAgV0lOVEVSX1NJR05fMSxcclxuICAgIFdJTlRFUl9GRU5DRV8xLFxyXG4gICAgV0lOVEVSX1BJTExBUl8xXHJcbn07XHJcbi8vU2NlbmUgTmFtZXNcclxuZXhwb3J0IGNvbnN0IFNDRU5FX05BTUVfU1RBUlQgPSBcIlN0YXJ0U2NlbmVcIjtcclxuZXhwb3J0IGNvbnN0IFNDRU5FX05BTUVfTEVWRUxfU0VMRUNUID0gXCJMZXZlbFNlbGVjdGlvblwiO1xyXG5leHBvcnQgY29uc3QgU0NFTkVfTkFNRV9HQU1FX1BMQVkgPSBcIkdhbWVQbGF5XCI7XHJcbmV4cG9ydCBjb25zdCBTQ0VORV9OQU1FX0xFVkVMX0VORCA9IFwiTGV2ZWxFbmRcIjtcclxuIiwiaW1wb3J0IHsgbGFuZyB9IGZyb20gXCIuLi8uLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmNvbnN0IFVSTCA9IFwiLi9sYW5nL1wiICsgbGFuZyArIFwiL2Z0bV9cIiArIGxhbmcgKyBcIi5qc29uXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGdG1EYXRhKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKFVSTCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSkpO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREYXRhKCkge1xyXG4gICAgLy8gbGV0IGQgPSB7XHJcbiAgICAvLyAgICAgXCJPdGhlckF1ZGlvc1wiOiBudWxsLFxyXG4gICAgLy8gICAgIFwiRmVlZGJhY2tUZXh0c1wiOiBudWxsLFxyXG4gICAgLy8gICAgIFwiTGV2ZWxzXCI6IG51bGwsXHJcbiAgICAvLyAgICAgXCJGZWVkYmFja0F1ZGlvc1wiOiBudWxsLFxyXG4gICAgLy8gICAgIFwiUmlnaHRUb0xlZnRcIjogbnVsbFxyXG4gICAgLy8gfVxyXG4gICAgcmV0dXJuIGF3YWl0IGdldEZ0bURhdGEoKTtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRGF0YU1vZGFsIHtcclxuICAgIHRpdGxlO1xyXG4gICAgb3RoZXJBdWRpb3M7XHJcbiAgICBsZXZlbHM7XHJcbiAgICBGZWVkYmFja1RleHRzO1xyXG4gICAgRmVlZGJhY2tBdWRpb3M7XHJcbiAgICByaWdodFRvTGVmdDtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgdmVyc2lvbjtcclxuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBvdGhlckF1ZGlvcywgbGV2ZWxzLCBmZWVkYmFja1RleHRzLCByaWdodFRvTGVmdCwgZmVlZGJhY2tBdWRpb3MsIG1halZlcnNpb24sIG1pblZlcnNpb24sIHZlcnNpb24pIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5vdGhlckF1ZGlvcyA9IG5ldyBPdGhlckF1ZGlvcyhvdGhlckF1ZGlvcyk7XHJcbiAgICAgICAgdGhpcy5sZXZlbHMgPSB0aGlzLmdldExldmVscyhsZXZlbHMpO1xyXG4gICAgICAgIHRoaXMuRmVlZGJhY2tUZXh0cyA9IG5ldyBGZWVkYmFja1RleHRzKGZlZWRiYWNrVGV4dHMpO1xyXG4gICAgICAgIHRoaXMuRmVlZGJhY2tBdWRpb3MgPSBuZXcgRmVlZGJhY2tBdWRpb3MoZmVlZGJhY2tBdWRpb3MpO1xyXG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgPSByaWdodFRvTGVmdDtcclxuICAgICAgICB0aGlzLm1halZlcnNpb24gPSBtYWpWZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IG1pblZlcnNpb247XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuICAgIH1cclxuICAgIGdldExldmVscyhsZXZlbHMpIHtcclxuICAgICAgICBsZXQgbGV2ZWxBcnJheSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldmVsQXJyYXkucHVzaChuZXcgTGV2ZWxzKGxldmVsc1tpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGV2ZWxBcnJheTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgT3RoZXJBdWRpb3Mge1xyXG4gICAgc2VsY3RZb3VyUGxheWVyO1xyXG4gICAgd2F0Y2hNZUdyb3c7XHJcbiAgICBhcmVZb3VTdXJlO1xyXG4gICAgY29uc3RydWN0b3Iob3RoZXJBdWRpb3MpIHtcclxuICAgICAgICB0aGlzLnNlbGN0WW91clBsYXllciA9IG90aGVyQXVkaW9zW1wiU2VsZWN0IHlvdXIgcGxheWVyXCJdO1xyXG4gICAgICAgIHRoaXMud2F0Y2hNZUdyb3cgPSBvdGhlckF1ZGlvc1tcIldhdGNoIG1lIGdyb3dcIl07XHJcbiAgICAgICAgdGhpcy5hcmVZb3VTdXJlID0gb3RoZXJBdWRpb3NbXCJBcmUgeW91IHN1cmVcIl07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZlZWRiYWNrVGV4dHMge1xyXG4gICAgZmFudGFzdGljO1xyXG4gICAgZ3JlYXQ7XHJcbiAgICBhbWF6aW5nO1xyXG4gICAgY29uc3RydWN0b3IoZmVlZGJhY2tUZXh0cykge1xyXG4gICAgICAgIGlmIChmZWVkYmFja1RleHRzLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFudGFzdGljID0gZmVlZGJhY2tUZXh0c1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZlZWRiYWNrVGV4dHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmVhdCA9IGZlZWRiYWNrVGV4dHNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmZWVkYmFja1RleHRzLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW1hemluZyA9IGZlZWRiYWNrVGV4dHNbMl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGZWVkYmFja0F1ZGlvcyB7XHJcbiAgICBmYW50YXN0aWM7XHJcbiAgICBncmVhdDtcclxuICAgIGFtYXppbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIGlmIChmZWVkYmFja0F1ZGlvcy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmZhbnRhc3RpYyA9IGZlZWRiYWNrQXVkaW9zWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmVlZGJhY2tBdWRpb3MubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmVhdCA9IGZlZWRiYWNrQXVkaW9zWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmVlZGJhY2tBdWRpb3MubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgdGhpcy5hbWF6aW5nID0gZmVlZGJhY2tBdWRpb3NbMl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBMZXZlbHMge1xyXG4gICAgcHV6emxlcztcclxuICAgIGxldmVsTWV0YTtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IobGV2ZWxzKSB7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVzID0gdGhpcy5nZXRQdXp6bGVEYXRhKGxldmVscyk7XHJcbiAgICAgICAgdGhpcy5sZXZlbE1ldGEgPSBuZXcgTGV2ZWxNZXRhKGxldmVscy5MZXZlbE1ldGEpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxOdW1iZXIgPSBsZXZlbHMuTGV2ZWxOdW1iZXI7XHJcbiAgICB9XHJcbiAgICBnZXRQdXp6bGVEYXRhKGxldmVscykge1xyXG4gICAgICAgIGxldCBwdXp6bGVPYmplY3RzID0gW107XHJcbiAgICAgICAgbGV2ZWxzLlB1enpsZXMubWFwKChwdXp6bGVEYXRhLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBwdXp6bGVPYmplY3RzLnB1c2gobmV3IFB1enpsZXMocHV6emxlRGF0YSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwdXp6bGVPYmplY3RzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQdXp6bGVzIHtcclxuICAgIHNlZ21lbnROdW1iZXI7XHJcbiAgICBwcm9tcHQ7XHJcbiAgICBmb2lsU3RvbmVzO1xyXG4gICAgdGFyZ2V0U3RvbmVzO1xyXG4gICAgY29uc3RydWN0b3IocHV6emxlKSB7XHJcbiAgICAgICAgdGhpcy5zZWdtZW50TnVtYmVyID0gcHV6emxlLlNlZ21lbnROdW1iZXI7XHJcbiAgICAgICAgdGhpcy5wcm9tcHQgPSBuZXcgUHJvbXB0KHB1enpsZS5wcm9tcHQpO1xyXG4gICAgICAgIHRoaXMuZm9pbFN0b25lcyA9IHRoaXMuZ2V0Rm9pbFN0b25lcyhwdXp6bGUpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gdGhpcy5nZXRUYXJnZXRTdG9uZXMocHV6emxlKTtcclxuICAgIH1cclxuICAgIGdldEZvaWxTdG9uZXMocHV6emxlKSB7XHJcbiAgICAgICAgbGV0IGZvaWxTdG9uZUFycmF5ID0gW107XHJcbiAgICAgICAgcHV6emxlLmZvaWxzdG9uZXMubWFwKChzdG9uZXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGZvaWxTdG9uZUFycmF5LnB1c2goc3RvbmVzLlN0b25lVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGZvaWxTdG9uZUFycmF5O1xyXG4gICAgfVxyXG4gICAgZ2V0VGFyZ2V0U3RvbmVzKHB1enpsZSkge1xyXG4gICAgICAgIGxldCB0YXJnZXRTdG9uZUFycmF5ID0gW107XHJcbiAgICAgICAgcHV6emxlLnRhcmdldHN0b25lcy5tYXAoKHN0b25lcywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgdGFyZ2V0U3RvbmVBcnJheS5wdXNoKHN0b25lcy5TdG9uZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRTdG9uZUFycmF5O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGb2lsU3RvbmUge1xyXG4gICAgc3RvbmVUZXh0O1xyXG4gICAgY29uc3RydWN0b3Ioc3RvbmVUZXh0KSB7XHJcbiAgICAgICAgdGhpcy5zdG9uZVRleHQgPSBzdG9uZVRleHQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFRhcmdldFN0b25lIHtcclxuICAgIHN0b25lVGV4dDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc3RvbmVUZXh0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQcm9tcHQge1xyXG4gICAgcHJvbXB0VGV4dDtcclxuICAgIHByb21wdEF1ZGlvO1xyXG4gICAgY29uc3RydWN0b3IocHJvbXB0KSB7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRUZXh0ID0gcHJvbXB0LlByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRBdWRpbyA9IHByb21wdC5Qcm9tcHRBdWRpbztcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTGV2ZWxNZXRhIHtcclxuICAgIHByb21wdEZhZGVPdXQ7XHJcbiAgICBsZXR0ZXJHcm91cDtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgcHJvdG9UeXBlO1xyXG4gICAgbGV2ZWxUeXBlO1xyXG4gICAgY29uc3RydWN0b3IobGV2ZWxNZXRhKSB7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRGYWRlT3V0ID0gbGV2ZWxNZXRhLlByb21wdEZhZGVvdXQ7XHJcbiAgICAgICAgdGhpcy5sZXR0ZXJHcm91cCA9IGxldmVsTWV0YS5MZXR0ZXJHcm91cDtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxNZXRhLkxldmVsTnVtYmVyO1xyXG4gICAgICAgIHRoaXMucHJvdG9UeXBlID0gbGV2ZWxNZXRhLlByb21wdFR5cGU7XHJcbiAgICAgICAgdGhpcy5sZXZlbFR5cGUgPSBsZXZlbE1ldGEuTGV2ZWxUeXBlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyLCBsYW5nIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGNsYXNzIEdhbWVTY29yZSB7XHJcbiAgICBzdGF0aWMgY3VycmVudGxhbmd1YWdlID0gbGFuZztcclxuICAgIHN0YXRpYyBzZXRHYW1lTGV2ZWxTY29yZShjdXJyZW50TGV2ZWxJbmZvLCBzY29yZSkge1xyXG4gICAgICAgIGxldCBzdGFyc0dhaW5lZCA9IHRoaXMuY2FsY3VsYXRlU3RhckNvdW50KHNjb3JlKTtcclxuICAgICAgICBsZXQgbGV2ZWxQbGF5ZWRJbmZvID0ge1xyXG4gICAgICAgICAgICBsZXZlbE5hbWU6IGN1cnJlbnRMZXZlbEluZm8ubGV2ZWxNZXRhLmxldmVsVHlwZSxcclxuICAgICAgICAgICAgbGV2ZWxOdW1iZXI6IGN1cnJlbnRMZXZlbEluZm8ubGV2ZWxNZXRhLmxldmVsTnVtYmVyLFxyXG4gICAgICAgICAgICBzY29yZTogc2NvcmUsXHJcbiAgICAgICAgICAgIHN0YXJDb3VudDogc3RhcnNHYWluZWQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNldFRvdGFsU3RhckNvdW50KHN0YXJzR2FpbmVkKTtcclxuICAgICAgICBsZXQgYWxsR2FtZWxldmVsSW5mbyA9IHRoaXMuZ2V0QWxsR2FtZUxldmVsSW5mbygpO1xyXG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsR2FtZWxldmVsSW5mby5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYWxsR2FtZWxldmVsSW5mb1tpXS5sZXZlbE51bWJlciA9PT0gbGV2ZWxQbGF5ZWRJbmZvLmxldmVsTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xICYmIGxldmVsUGxheWVkSW5mby5zY29yZSA+IGFsbEdhbWVsZXZlbEluZm9baW5kZXhdLnNjb3JlKSB7XHJcbiAgICAgICAgICAgIGFsbEdhbWVsZXZlbEluZm9baW5kZXhdID0gbGV2ZWxQbGF5ZWRJbmZvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWxsR2FtZWxldmVsSW5mby5wdXNoKGxldmVsUGxheWVkSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuY3VycmVudGxhbmd1YWdlICsgXCJnYW1lUGxheWVkSW5mb1wiLCBKU09OLnN0cmluZ2lmeShhbGxHYW1lbGV2ZWxJbmZvKSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0QWxsR2FtZUxldmVsSW5mbygpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5jdXJyZW50bGFuZ3VhZ2UgKyBcImdhbWVQbGF5ZWRJbmZvXCIpO1xyXG4gICAgICAgIHJldHVybiBkYXRhID09IHVuZGVmaW5lZCA/IFtdIDogSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzZXRUb3RhbFN0YXJDb3VudChzdGFyc0dhaW5lZCkge1xyXG4gICAgICAgIGxldCBzdGFyQ291bnQgPSB0aGlzLmdldFRvdGFsU3RhckNvdW50KCk7XHJcbiAgICAgICAgbGV0IHRvdGFsU3RhckNvdW50ID0gc3RhckNvdW50ICsgc3RhcnNHYWluZWQ7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5jdXJyZW50bGFuZ3VhZ2UgKyBcInRvdGFsU3RhckNvdW50XCIsIHRvdGFsU3RhckNvdW50KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRUb3RhbFN0YXJDb3VudCgpIHtcclxuICAgICAgICBjb25zdCBzdGFyQ291bnQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmN1cnJlbnRsYW5ndWFnZSArIFwidG90YWxTdGFyQ291bnRcIik7XHJcbiAgICAgICAgcmV0dXJuIHN0YXJDb3VudCA9PSB1bmRlZmluZWQgPyAwIDogcGFyc2VJbnQoc3RhckNvdW50KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjYWxjdWxhdGVTdGFyQ291bnQoc2NvcmUpIHtcclxuICAgICAgICByZXR1cm4gc2NvcmUgPT0gMjAwXHJcbiAgICAgICAgICAgID8gMVxyXG4gICAgICAgICAgICA6IHNjb3JlID09IDMwMFxyXG4gICAgICAgICAgICAgICAgPyAyXHJcbiAgICAgICAgICAgICAgICA6IHNjb3JlID09IDQwMFxyXG4gICAgICAgICAgICAgICAgICAgID8gMlxyXG4gICAgICAgICAgICAgICAgICAgIDogc2NvcmUgPT0gNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RGF0YWZyb21TdG9yYWdlKCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxhbmcgKyBcIlByb2ZpbGVEZWJ1Z1wiKSB8fCBcInt9XCIpXHJcbiAgICAgICAgICAgIDogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsYW5nICsgXCJQcm9maWxlXCIpIHx8IFwie31cIik7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn1cclxuIiwiY29uc3QgbGFuZ3VhZ2VGb250TWFwcGluZyA9IHtcclxuICAgIGVuZ2xpc2g6IFwiQ29uc29sYXNcIixcclxuICAgIHN3YWhpbGk6IFwiQ29uc29sYXNcIixcclxuICAgIHdvbG9mOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0YWppazogXCJDb25zb2xhc1wiLFxyXG4gICAgbWFyYXRoaTogXCJDb25zb2xhc1wiLFxyXG4gICAgYW1oYXJpYzogXCJDb25zb2xhc1wiLFxyXG4gICAgcHVuamFiaTogXCJDb25zb2xhc1wiLFxyXG4gICAgdGFtaWw6IFwiQ29uc29sYXNcIixcclxuICAgIHNlcGVkaTogXCJDb25zb2xhc1wiLFxyXG4gICAgZ3VqYXJhdGk6IFwiQ29uc29sYXNcIixcclxuICAgIHRlbHVndTogXCJDb25zb2xhc1wiLFxyXG4gICAgdHNvbmdhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBtYWxheTogXCJDb25zb2xhc1wiLFxyXG4gICAgbmRlYmVsZTogXCJDb25zb2xhc1wiLFxyXG4gICAgdmVuZGE6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgc2lzd2F0aTogXCJDb25zb2xhc1wiLFxyXG4gICAgdHN3YW5hOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0aGFpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBmdWxhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBmYXJzaTogXCJDb25zb2xhc1wiLFxyXG4gICAgYnVybWVzZTogXCJDb25zb2xhc1wiLFxyXG4gICAgYmVuZ2FsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgQXplcmJhaWphbmk6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgU2Vzb3RobzogXCJDb25zb2xhc1wiLFxyXG4gICAgR2VvcmdpYW46IFwiQ29uc29sYXNcIixcclxuICAgIEJyYXppbGlhblBvcnR1Z3Vlc2U6IFwiQ29uc29sYXNcIixcclxuICAgIFNvbWFsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgSGF1c2E6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgSWdibzogXCJDb25zb2xhc1wiLFxyXG4gICAgSGF0aWFuQ3Jlb2xlOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBPcm9tbzogXCJDb25zb2xhc1wiLFxyXG4gICAgTHVnYW5kYTogXCJDb25zb2xhc1wiLFxyXG4gICAgWW9ydWJhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBLaG1lcjogXCJDb25zb2xhc1wiLFxyXG4gICAgSmF2YW5lc2U6IFwiQ29uc29sYXNcIixcclxuICAgIFVyZHU6IFwiQ29uc29sYXNcIixcclxuICAgIEtpbnlhcndhbmRhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBTaG9uYTogXCJDb25zb2xhc1wiLFxyXG4gICAgS3VyZGlzaDogXCJDb25zb2xhc1wiLFxyXG4gICAgRnJlbmNoOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBpc2lYaG9zYTogXCJDb25zb2xhc1wiLFxyXG4gICAgQWZyaWthYW5zOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBOZXBhbGk6IFwiQ29uc29sYXNcIixcclxuICAgIFVrcmFpbmlhbjogXCJDb25zb2xhc1wiLFxyXG4gICAgSGluZGk6IFwiQ29uc29sYXNcIixcclxuICAgIFRhZ2Fsb2c6IFwiQ29uc29sYXNcIixcclxuICAgIFZpZXRuYW1lc2U6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgUGFzaHRvOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBUd2k6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgQXJhYmljOiBcIkFkb2JlLUFyYWJpYy1Cb2xkXCJcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgbGFuZ3VhZ2VGb250TWFwcGluZztcclxuIiwiaW1wb3J0IHsgTE9BRFBVWlpMRSwgU1RPTkVEUk9QIH0gZnJvbSBcIi4uL2NvbW1vbi9ldmVudC1uYW1lc1wiO1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI7XHJcbiAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyO1xyXG4gICAgY29uc3RydWN0b3IoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgdGhpcy5zdG9uZURyb3BDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLnN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihTVE9ORURST1AsIHRoaXMuaGFuZGxlU3RvbmVEcm9wcGVkRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKExPQURQVVpaTEUsIHRoaXMuaGFuZGxlTG9hZFB1enpsZUV2ZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3BwZWRFdmVudCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyKGV2ZW50KTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlRXZlbnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIoZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIHVucmVnaXN0ZXJFdmVudExpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoU1RPTkVEUk9QLCB0aGlzLmhhbmRsZVN0b25lRHJvcHBlZEV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihMT0FEUFVaWkxFLCB0aGlzLmhhbmRsZUxvYWRQdXp6bGVFdmVudCwgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBQV0FJbnN0YWxsU3RhdHVzLCBTdGFydFNjZW5lMSwgTGV2ZWxTZWxlY3Rpb24xLCBHYW1lU2NlbmUxLCBFbmRTY2VuZTEsIH0gZnJvbSBcIi4uL2NvbW1vbi9jb21tb25cIjtcclxuaW1wb3J0IHsgU3RhcnRTY2VuZSB9IGZyb20gXCIuLi9zY2VuZXMvc3RhcnQtc2NlbmVcIjtcclxuaW1wb3J0IHsgTGV2ZWxTZWxlY3Rpb25TY3JlZW4gfSBmcm9tIFwiLi4vc2NlbmVzL2xldmVsLXNlbGVjdGlvbi1zY2VuZVwiO1xyXG5pbXBvcnQgeyBEZWJ1Z2dlciB9IGZyb20gXCIuLi8uLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmltcG9ydCB7IEdhbWVwbGF5U2NlbmUgfSBmcm9tIFwiLi4vc2NlbmVzL2dhbWVwbGF5LXNjZW5lXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCIuLi9kYXRhL2dhbWUtc2NvcmVcIjtcclxuaW1wb3J0IHsgTG9hZGluZ1NjZW5lIH0gZnJvbSBcIi4uL3NjZW5lcy9sb2FkaW5nLXNjZW5lXCI7XHJcbmltcG9ydCB7IExldmVsRW5kU2NlbmUgfSBmcm9tIFwiLi4vc2NlbmVzL2xldmVsZW5kLXNjZW5lXCI7XHJcbmltcG9ydCB7IFNDRU5FX05BTUVfU1RBUlQsIFNDRU5FX05BTUVfTEVWRUxfU0VMRUNULCBTQ0VORV9OQU1FX0dBTUVfUExBWSwgU0NFTkVfTkFNRV9MRVZFTF9FTkQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5leHBvcnQgY2xhc3MgU2NlbmVIYW5kbGVyIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIHN0YXJ0U2NlbmU7XHJcbiAgICBsZXZlbFNlbGVjdGlvblNjZW5lO1xyXG4gICAgZ2FtZXBsYXlTY2VuZTtcclxuICAgIGxldmVsRW5kU2NlbmU7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIHN0YXRpYyBTY2VuZU5hbWU7XHJcbiAgICBsb2FkaW5nU2NyZWVuO1xyXG4gICAgbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgbGFzdFRpbWUgPSAwO1xyXG4gICAgcHdhX2luc3RhbGxfc3RhdHVzO1xyXG4gICAgdG9nZ2xlQnRuO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbmF2c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGhpcy50b2dnbGVCdG5cIik7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmVpbnN0YWxscHJvbXB0XCIsIHRoaXMuaGFuZGxlSW5zdGFsbFByb21wdCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnN0YXJ0U2NlbmUgPSBuZXcgU3RhcnRTY2VuZShjYW52YXMsIGRhdGEsIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKTtcclxuICAgICAgICBTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID0gU3RhcnRTY2VuZTE7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2NyZWVuID0gbmV3IExvYWRpbmdTY2VuZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5yZW1vdmVMb2FkaW5nKTtcclxuICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uTG9vcCgpO1xyXG4gICAgfVxyXG4gICAgc3RhcnRBbmltYXRpb25Mb29wKCkge1xyXG4gICAgICAgIGNvbnN0IGFuaW1hdGUgPSAodGltZVN0YW1wKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uKHRpbWVTdGFtcCk7XHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuICAgIH1cclxuICAgIGRldlRvZ2dsZSgpIHtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwib25cIik7XHJcbiAgICAgICAgICAgIERlYnVnZ2VyLkRlYnVnTW9kZSA9IHRoaXMudG9nZ2xlQnRuLmNsYXNzTGlzdC5jb250YWlucyhcIm9uXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2hlY2tNb25zdGVyUGhhc2VVcGRhdGlvbigpIHtcclxuICAgICAgICBsZXQgdG90YWxTdGFyQ291bnQgPSBHYW1lU2NvcmUuZ2V0VG90YWxTdGFyQ291bnQoKTtcclxuICAgICAgICBsZXQgbW9uc3RlclBoYXNlTnVtYmVyID0gTWF0aC5mbG9vcih0b3RhbFN0YXJDb3VudCAvIDEyKSArIDEgfHwgMTtcclxuICAgICAgICByZXR1cm4gbW9uc3RlclBoYXNlTnVtYmVyIDw9IDQgPyBtb25zdGVyUGhhc2VOdW1iZXIgOiA0O1xyXG4gICAgfVxyXG4gICAgYW5pbWF0aW9uID0gKHRpbWVTdGFtcCkgPT4ge1xyXG4gICAgICAgIGxldCBkZWx0YVRpbWUgPSB0aW1lU3RhbXAgLSB0aGlzLmxhc3RUaW1lO1xyXG4gICAgICAgIHRoaXMubGFzdFRpbWUgPSB0aW1lU3RhbXA7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nID8gdGhpcy5sb2FkaW5nU2NyZWVuLmRyYXcoZGVsdGFUaW1lKSA6IG51bGw7XHJcbiAgICAgICAgaWYgKFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPT09IFN0YXJ0U2NlbmUxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTY2VuZS5hbmltYXRpb24oZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9PT0gTGV2ZWxTZWxlY3Rpb24xKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25TY2VuZS5kcmF3TGV2ZWxTZWxlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9PT0gR2FtZVNjZW5lMSkge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVwbGF5U2NlbmUuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBFbmRTY2VuZTEpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbEVuZFNjZW5lLmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoU2NlbmVUb0dhbWVwbGF5ID0gKGdhbWVQbGF5RGF0YSwgY2hhbmdlU2NlbmVSZXF1ZXN0RnJvbSkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcoKTtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoY2hhbmdlU2NlbmVSZXF1ZXN0RnJvbSk7XHJcbiAgICAgICAgbGV0IGpzb25WZXJzaW9uTnVtYmVyID0gISF0aGlzLmRhdGEubWFqVmVyc2lvbiAmJiAhIXRoaXMuZGF0YS5taW5WZXJzaW9uID8gdGhpcy5kYXRhLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5kYXRhLm1pblZlcnNpb24udG9TdHJpbmcoKSA6IFwiXCI7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZSA9IG5ldyBHYW1lcGxheVNjZW5lKHRoaXMuY2FudmFzLCBnYW1lUGxheURhdGEuY3VycmVudExldmVsRGF0YSwgdGhpcy5jaGVja01vbnN0ZXJQaGFzZVVwZGF0aW9uKCksIHRoaXMuZGF0YS5GZWVkYmFja1RleHRzLCB0aGlzLmRhdGEucmlnaHRUb0xlZnQsIHRoaXMuc3dpdGNoU2NlbmVUb0VuZExldmVsLCBnYW1lUGxheURhdGEuc2VsZWN0ZWRMZXZlbE51bWJlciwgKCkgPT4geyB0aGlzLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbihTQ0VORV9OQU1FX0dBTUVfUExBWSk7IH0sIHRoaXMuc3dpdGNoU2NlbmVUb0dhbWVwbGF5LCBqc29uVmVyc2lvbk51bWJlciwgdGhpcy5kYXRhLkZlZWRiYWNrQXVkaW9zKTtcclxuICAgICAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IEdhbWVTY2VuZTE7XHJcbiAgICAgICAgfSwgODAwKTtcclxuICAgIH07XHJcbiAgICBzd2l0Y2hTY2VuZVRvRW5kTGV2ZWwgPSAoc3RhckNvdW50LCBtb25zdGVyUGhhc2VOdW1iZXIsIGN1cnJlbnRMZXZlbE51bWJlciwgaXNUaW1lckVuZGVkKSA9PiB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nU2NyZWVuLmluaXRDbG91ZCgpO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UoU0NFTkVfTkFNRV9HQU1FX1BMQVkpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZlZWRiYWNrLXRleHRcIikuc3R5bGUuekluZGV4ID0gXCIwXCI7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxFbmRTY2VuZSA9IG5ldyBMZXZlbEVuZFNjZW5lKHRoaXMuY2FudmFzLCB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCwgdGhpcy5jb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbE51bWJlciwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXksIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uLCB0aGlzLmRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcik7XHJcbiAgICAgICAgICAgIFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPSBFbmRTY2VuZTE7XHJcbiAgICAgICAgfSwgaXNUaW1lckVuZGVkID8gMCA6IDQwMDApO1xyXG4gICAgfTtcclxuICAgIHN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbiA9IChjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZShjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lID0gbmV3IExldmVsU2VsZWN0aW9uU2NyZWVuKHRoaXMuY2FudmFzLCB0aGlzLmRhdGEsIHRoaXMuc3dpdGNoU2NlbmVUb0dhbWVwbGF5KTtcclxuICAgICAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IExldmVsU2VsZWN0aW9uMTtcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAobGFzdFNjZW5lTmFtZSkgPT4ge1xyXG4gICAgICAgIGlmIChsYXN0U2NlbmVOYW1lID09IFNDRU5FX05BTUVfTEVWRUxfU0VMRUNUKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25TY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhc3RTY2VuZU5hbWUgPT09IFNDRU5FX05BTUVfR0FNRV9QTEFZKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhc3RTY2VuZU5hbWUgPT09IFNDRU5FX05BTUVfU1RBUlQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNjZW5lLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFzdFNjZW5lTmFtZSA9PSBTQ0VORV9OQU1FX0xFVkVMX0VORCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsRW5kU2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzaG93TG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTY3JlZW4uaW5pdENsb3VkKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdcIikuc3R5bGUuekluZGV4ID0gXCIzXCI7XHJcbiAgICB9O1xyXG4gICAgcmVtb3ZlTG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdcIikuc3R5bGUuekluZGV4ID0gXCItMVwiO1xyXG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZUluc3RhbGxQcm9tcHQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAvL2N1cnJlbnRseSBub3QgaW4gdXNlXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLnB3YV9pbnN0YWxsX3N0YXR1cyA9IGV2ZW50O1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBXQUluc3RhbGxTdGF0dXMsIFwiZmFsc2VcIik7XHJcbiAgICB9O1xyXG59XHJcbiIsImltcG9ydCB7IE1vbnN0ZXIsIFRpbWVyVGlja2luZywgUHJvbXB0VGV4dCwgUGF1c2VCdXR0b24sIExldmVsSW5kaWNhdG9ycywgU3RvbmVIYW5kbGVyLCBUdXRvcmlhbCwgUGF1c2VQb3BVcCwgRmVlZGJhY2tUZXh0RWZmZWN0cywgQXVkaW9QbGF5ZXIgfSBmcm9tICcuLi9jb21wb25lbnRzLyc7XHJcbmltcG9ydCB7IGxvYWRJbWFnZXMsIFByZXZpb3VzUGxheWVkTGV2ZWwsIENMSUNLLCBMT0FEUFVaWkxFLCBNT1VTRURPV04sIE1PVVNFTU9WRSwgTU9VU0VVUCwgU1RPTkVEUk9QLCBUT1VDSEVORCwgVE9VQ0hNT1ZFLCBUT1VDSFNUQVJULCBWSVNJQklMSVRZX0NIQU5HRSwgfSBmcm9tIFwiLi4vY29tbW9uL1wiO1xyXG5pbXBvcnQgeyBEZWJ1Z2dlciwgbGFuZywgcHNldWRvSWQgfSBmcm9tIFwiLi4vLi4vZ2xvYmFsLXZhcmlhYmxlc1wiO1xyXG5pbXBvcnQgeyBHYW1lU2NvcmUgfSBmcm9tIFwiLi4vZGF0YS9nYW1lLXNjb3JlXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi4vRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgQVVESU9fUEFUSF9CVE5fQ0xJQ0ssIEFVRElPX1BBVEhfT05fRFJBRywgQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzIH0gZnJvbSAnLi4vY29tcG9zaXRpb25zL2JhY2tncm91bmQnO1xyXG5leHBvcnQgY2xhc3MgR2FtZXBsYXlTY2VuZSB7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBqc29uVmVyc2lvbk51bWJlcjtcclxuICAgIGNhbnZhcztcclxuICAgIGxldmVsRGF0YTtcclxuICAgIHRpbWVyVGlja2luZztcclxuICAgIHByb21wdFRleHQ7XHJcbiAgICBwYXVzZUJ1dHRvbjtcclxuICAgIHR1dG9yaWFsO1xyXG4gICAgcHV6emxlRGF0YTtcclxuICAgIGlkO1xyXG4gICAgY29udGV4dDtcclxuICAgIGxldmVsSW5kaWNhdG9ycztcclxuICAgIHN0b25lc0NvdW50ID0gMTtcclxuICAgIG1vbnN0ZXJQaGFzZU51bWJlcjtcclxuICAgIHBpY2tlZFN0b25lO1xyXG4gICAgcHV6emxlU3RhcnRUaW1lO1xyXG4gICAgc2hvd1R1dG9yaWFsO1xyXG4gICAgZmVlZEJhY2tUZXh0cztcclxuICAgIGlzUHV6emxlQ29tcGxldGVkO1xyXG4gICAgcmlnaHRUb0xlZnQ7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHN3aXRjaFNjZW5lVG9FbmQ7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIHN0b25lSGFuZGxlcjtcclxuICAgIGNvdW50ZXIgPSAwO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgaGFuZGxlcjtcclxuICAgIHBpY2tlZFN0b25lT2JqZWN0O1xyXG4gICAgcGF1c2VQb3B1cDtcclxuICAgIGlzUGF1c2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICBiYWNrZ3JvdW5kO1xyXG4gICAgZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudDtcclxuICAgIGZlZWRiYWNrVGV4dEVmZmVjdHM7XHJcbiAgICBpc0dhbWVTdGFydGVkID0gZmFsc2U7XHJcbiAgICB0aW1lID0gMDtcclxuICAgIHNjb3JlID0gMDtcclxuICAgIHRlbXBXb3JkZm9yV29yZFB1enpsZSA9IFwiXCI7XHJcbiAgICBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgcmVsb2FkU2NlbmU7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIGZpcmViYXNlSW50ZWdyYXRpb247XHJcbiAgICBzdGFydFRpbWU7XHJcbiAgICBwdXp6bGVUaW1lO1xyXG4gICAgaXNEaXNwb3Npbmc7XHJcbiAgICByZXNldEFuaW1hdGlvbklEO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBsZXZlbERhdGEsIG1vbnN0ZXJQaGFzZU51bWJlciwgZmVlZEJhY2tUZXh0cywgcmlnaHRUb0xlZnQsIHN3aXRjaFNjZW5lVG9FbmQsIGxldmVsTnVtYmVyLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCByZWxvYWRTY2VuZSwganNvblZlcnNpb25OdW1iZXIsIGZlZWRiYWNrQXVkaW9zKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGNhbnZhcy53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5yaWdodFRvTGVmdCA9IHJpZ2h0VG9MZWZ0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXJQaGFzZU51bWJlciA9IG1vbnN0ZXJQaGFzZU51bWJlciB8fCAxO1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0VuZCA9IHN3aXRjaFNjZW5lVG9FbmQ7XHJcbiAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiA9IHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSA9IHJlbG9hZFNjZW5lO1xyXG4gICAgICAgIHRoaXMuanNvblZlcnNpb25OdW1iZXIgPSBqc29uVmVyc2lvbk51bWJlcjtcclxuICAgICAgICB0aGlzLnN0YXJ0R2FtZVRpbWUoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UHV6emxlVGltZSgpO1xyXG4gICAgICAgIHRoaXMuaXNEaXNwb3NpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlQnV0dG9uID0gbmV3IFBhdXNlQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nID0gbmV3IFRpbWVyVGlja2luZyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sb2FkUHV6emxlKTtcclxuICAgICAgICB0aGlzLnN0b25lSGFuZGxlciA9IG5ldyBTdG9uZUhhbmRsZXIodGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jb3VudGVyLCB0aGlzLmxldmVsRGF0YSwgZmVlZGJhY2tBdWRpb3MsIHRoaXMudGltZXJUaWNraW5nKTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsID0gbmV3IFR1dG9yaWFsKHRoaXMuY29udGV4dCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnByb21wdFRleHQgPSBuZXcgUHJvbXB0VGV4dCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sZXZlbERhdGEucHV6emxlc1t0aGlzLmNvdW50ZXJdLCB0aGlzLmxldmVsRGF0YSwgdGhpcy5yaWdodFRvTGVmdCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMgPSBuZXcgTGV2ZWxJbmRpY2F0b3JzKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIDApO1xyXG4gICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3JzLnNldEluZGljYXRvcnModGhpcy5jb3VudGVyKTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIgPSBuZXcgTW9uc3Rlcih0aGlzLmNhbnZhcywgdGhpcy5tb25zdGVyUGhhc2VOdW1iZXIpO1xyXG4gICAgICAgIHRoaXMucGF1c2VQb3B1cCA9IG5ldyBQYXVzZVBvcFVwKHRoaXMuY2FudmFzLCB0aGlzLnJlc3VtZUdhbWUsIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgdGhpcy5yZWxvYWRTY2VuZSwge1xyXG4gICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiBsZXZlbERhdGEsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IGxldmVsTnVtYmVyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRDYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZWVkYmFjay10ZXh0XCIpO1xyXG4gICAgICAgIHRoaXMuZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmZlZWRCYWNrVGV4dENhbmF2c0VsZW1lbnQud2lkdGggPSB0aGlzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cyA9IG5ldyBGZWVkYmFja1RleHRFZmZlY3RzKHRoaXMuZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIiwgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVEYXRhID0gbGV2ZWxEYXRhLnB1enpsZXM7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRzID0gZmVlZEJhY2tUZXh0cztcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgcHJvZmlsZU1vbnN0ZXI6IEFTU0VUU19QQVRIX01PTlNURVJfSURMRSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHByZXZpb3VzUGxheWVkTGV2ZWwgPSB0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxOdW1iZXI7XHJcbiAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oUHJldmlvdXNQbGF5ZWRMZXZlbCArIGxhbmcgKyBcIkRlYnVnXCIsIHByZXZpb3VzUGxheWVkTGV2ZWwpXHJcbiAgICAgICAgICAgIDogbG9jYWxTdG9yYWdlLnNldEl0ZW0oUHJldmlvdXNQbGF5ZWRMZXZlbCArIGxhbmcsIHByZXZpb3VzUGxheWVkTGV2ZWwpO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLnJlc2V0QW5pbWF0aW9uSUQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2V0dXBCZygpO1xyXG4gICAgfVxyXG4gICAgc2V0dXBCZyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB7IEJHX0dST1VQX0lNR1MsIGRyYXcgfSA9IGxvYWREeW5hbWljQmdBc3NldHModGhpcy5sZXZlbERhdGEubGV2ZWxOdW1iZXIsIEJBQ0tHUk9VTkRfQVNTRVRfTElTVCk7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBCR19HUk9VUF9JTUdTLCBkcmF3KTtcclxuICAgIH07XHJcbiAgICByZXN1bWVHYW1lID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLmlzUGF1c2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuc2V0R2FtZVBhdXNlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLnBhdXNlUG9wdXAuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICAgIGdldFJhbmRvbUZlZWRCYWNrVGV4dChyYW5kb21JbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmZlZWRCYWNrVGV4dHMpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkS2V5ID0ga2V5c1tyYW5kb21JbmRleF07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmVlZEJhY2tUZXh0c1tzZWxlY3RlZEtleV07XHJcbiAgICB9XHJcbiAgICBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcclxuICAgICAgICBjb25zdCBmZWVkYmFja1ZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcy5mZWVkQmFja1RleHRzKTtcclxuICAgICAgICBjb25zdCBkZWZpbmVkVmFsdWVzTWF4Q291bnQgPSAoZmVlZGJhY2tWYWx1ZXMuZmlsdGVyKHZhbHVlID0+IHZhbHVlICE9IHVuZGVmaW5lZCkubGVuZ3RoKSAtIDE7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChkZWZpbmVkVmFsdWVzTWF4Q291bnQgLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBoYW5kbGVNb3VzZVVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IGxvZ2dpbmdcclxuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrIGlzIHdpdGhpbiByYW5nZSBvZiB0aGUgbW9uc3RlclxyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4IC0gdGhpcy5tb25zdGVyLnggLSB0aGlzLmNhbnZhcy53aWR0aCAvIDQpICoqIDIgK1xyXG4gICAgICAgICAgICAoeSAtIHRoaXMubW9uc3Rlci55IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMi4yKSAqKiAyKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMTAwICYmIHRoaXMucGlja2VkU3RvbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgeyB0ZXh0IH0gPSB0aGlzLnBpY2tlZFN0b25lOyAvLyBVc2UgZGVzdHJ1Y3R1cmluZyBmb3IgY2xhcml0eVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJMZXR0ZXJPbmx5XCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTGV0dGVySW5Xb3JkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXR0ZXJQdXp6bGUodGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV29yZFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNvdW5kV29yZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud29yZFB1enpsZSh0ZXh0LCB0aGlzLnBpY2tlZFN0b25lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGlja2VkU3RvbmUgJiYgdGhpcy5waWNrZWRTdG9uZU9iamVjdCAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS50ZXh0ICYmIHR5cGVvZiB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4ID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3kgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4TGltaXQgPSA1MDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS54ID0gKHRoaXMucGlja2VkU3RvbmUudGV4dC5sZW5ndGggPD0gMyAmJiB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4IDwgeExpbWl0ICYmIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3ggPCBoYWxmV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4ICsgMjVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3g7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lLnkgPSB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGlja2VkU3RvbmUgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIC8vIEV2ZW50IHRvIGlkZW50aWZ5IG1vdXNlIG1vdmVkIGRvd24gb24gdGhlIGNhbnZhc1xyXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGZvciAobGV0IHNjIG9mIHRoaXMuc3RvbmVIYW5kbGVyLmZvaWxTdG9uZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHggLSBzYy54KSAqKiAyICsgKHkgLSBzYy55KSAqKiAyKTtcclxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDQwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lT2JqZWN0ID0gc2M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gc2M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19QQVRIX09OX0RSQUcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucGlja2VkU3RvbmUpIHtcclxuICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0RyYWdBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS54ID0geDtcclxuICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS55ID0geTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBpZiAodGhpcy5tb25zdGVyLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICAgICAgdGhpcy50dXRvcmlhbC5zZXRQbGF5TW9uc3RlckNsaWNrQW5pbWF0aW9uKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGF1c2VCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKEFVRElPX1BBVEhfQlROX0NMSUNLKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUdhbWVQbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb21wdFRleHQub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEV2ZW50IHRvIGlkZW50aWZ5IHRvdWNoIG9uIHRoZSBjYW52YXNcclxuICAgIGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd24oeyBjbGllbnRYOiB0b3VjaC5jbGllbnRYLCBjbGllbnRZOiB0b3VjaC5jbGllbnRZIH0pO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVRvdWNoTW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcclxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZSh7IGNsaWVudFg6IHRvdWNoLmNsaWVudFgsIGNsaWVudFk6IHRvdWNoLmNsaWVudFkgfSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlVG91Y2hFbmQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VVcCh7IGNsaWVudFg6IHRvdWNoLmNsaWVudFgsIGNsaWVudFk6IHRvdWNoLmNsaWVudFkgfSk7XHJcbiAgICB9O1xyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNHYW1lU3RhcnRlZCAmJiAhdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWUgPSB0aGlzLnRpbWUgKyBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWUgPj0gNTAwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFBsYXlNb25zdGVyQ2xpY2tBbmltYXRpb24oZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQ/LmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYXVzZUJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuZHJhdygpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dC5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nLmRyYXcoKTtcclxuICAgICAgICBpZiAodGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiB0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgJiYgIXRoaXMuaXNHYW1lU3RhcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICh0aGlzLmNvdW50ZXIgPT0gMCkgPyB0aGlzLnR1dG9yaWFsLmNsaWNrT25Nb25zdGVyVHV0b3JpYWwoZGVsdGFUaW1lKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgJiYgIXRoaXMuaXNHYW1lU3RhcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgJiYgdGhpcy5pc0dhbWVTdGFydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihNT1VTRVVQLCB0aGlzLmhhbmRsZU1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihNT1VTRU1PVkUsIHRoaXMuaGFuZGxlTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoTU9VU0VET1dOLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFRPVUNIU1RBUlQsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFRPVUNITU9WRSwgdGhpcy5oYW5kbGVUb3VjaE1vdmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSEVORCwgdGhpcy5oYW5kbGVUb3VjaEVuZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNpbmcgdGhlIGRlZmluZWQgZnVuY3Rpb25zXHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZU1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmhhbmRsZVRvdWNoRW5kLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBsb2FkUHV6emxlID0gKGlzVGltZXJFbmRlZCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICBjb25zdCB0aW1lckVuZGVkID0gQm9vbGVhbihpc1RpbWVyRW5kZWQpO1xyXG4gICAgICAgIGlmICh0aW1lckVuZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nUHV6emxlRW5kRmlyZWJhc2VFdmVudChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY291bnRlciArPSAxOyAvL2luY3JlbWVudCBQdXp6bGVcclxuICAgICAgICB0aGlzLmlzR2FtZVN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5jb3VudGVyID09PSB0aGlzLmxldmVsRGF0YS5wdXp6bGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9ycy5zZXRJbmRpY2F0b3JzKHRoaXMuY291bnRlcik7XHJcbiAgICAgICAgICAgIHRoaXMubG9nTGV2ZWxFbmRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgICAgIEdhbWVTY29yZS5zZXRHYW1lTGV2ZWxTY29yZSh0aGlzLmxldmVsRGF0YSwgdGhpcy5zY29yZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0VuZChHYW1lU2NvcmUuY2FsY3VsYXRlU3RhckNvdW50KHRoaXMuc2NvcmUpLCB0aGlzLm1vbnN0ZXJQaGFzZU51bWJlciwgdGhpcy5sZXZlbE51bWJlciwgdGltZXJFbmRlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsb2FkUHV6emxlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoTE9BRFBVWlpMRSwge1xyXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRlcjogdGhpcy5jb3VudGVyLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0TmV3UHV6emxlKGxvYWRQdXp6bGVFdmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRpbWVyRW5kZWQgPyAwIDogNDUwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2luZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZy5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnByb21wdFRleHQuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH07XHJcbiAgICBsZXR0ZXJQdXp6bGUoZHJvcHBlZFN0b25lKSB7XHJcbiAgICAgICAgY29uc3QgZmVlZEJhY2tJbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMuc3RvbmVIYW5kbGVyLmlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdChkcm9wcGVkU3RvbmUsIGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgIGlmIChpc0NvcnJlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVDb3JyZWN0U3RvbmVEcm9wKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRsZVN0b25lRHJvcEVuZChpc0NvcnJlY3QpO1xyXG4gICAgfVxyXG4gICAgd29yZFB1enpsZShkcm9wcGVkU3RvbmUsIGRyb3BwZWRTdG9uZUluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wRmVlZGJhY2tBdWRpbygpO1xyXG4gICAgICAgIGRyb3BwZWRTdG9uZUluc3RhbmNlLnggPSAtOTk5O1xyXG4gICAgICAgIGRyb3BwZWRTdG9uZUluc3RhbmNlLnkgPSAtOTk5O1xyXG4gICAgICAgIGNvbnN0IGZlZWRCYWNrSW5kZXggPSB0aGlzLmdldFJhbmRvbUludCgwLCAxKTtcclxuICAgICAgICB0aGlzLnRlbXBXb3JkZm9yV29yZFB1enpsZSA9IHRoaXMudGVtcFdvcmRmb3JXb3JkUHV6emxlICsgZHJvcHBlZFN0b25lO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMuc3RvbmVIYW5kbGVyLmlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdCh0aGlzLnRlbXBXb3JkZm9yV29yZFB1enpsZSwgZmVlZEJhY2tJbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvbmVIYW5kbGVyLmdldENvcnJlY3RUYXJnZXRTdG9uZSgpID09IHRoaXMudGVtcFdvcmRmb3JXb3JkUHV6emxlICYmXHJcbiAgICAgICAgICAgIGlzQ29ycmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNvcnJlY3RTdG9uZURyb3AoZmVlZEJhY2tJbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RvbmVEcm9wRW5kKGlzQ29ycmVjdCwgXCJXb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJUaWNraW5nLnN0YXJ0VGltZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvbXB0VGV4dC5kcm9wcGVkU3RvbmVJbmRleChsYW5nID09IFwiYXJhYmljXCJcclxuICAgICAgICAgICAgICAgID8gdGhpcy5zdG9uZXNDb3VudFxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnRlbXBXb3JkZm9yV29yZFB1enpsZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50Kys7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRUb0lkbGVBbmltYXRpb24oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvSWRsZUFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RvbmVEcm9wRW5kKGlzQ29ycmVjdCwgXCJXb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXNldFRvSWRsZUFuaW1hdGlvbihjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNldEFuaW1hdGlvbklEICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzZXRBbmltYXRpb25JRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRBbmltYXRpb25JRCA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcEVuZChpc0NvcnJlY3QsIHB1enpsZVR5cGUgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5sb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50KGlzQ29ycmVjdCwgcHV6emxlVHlwZSk7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN0b25lRHJvcEV2ZW50KGlzQ29ycmVjdCk7XHJcbiAgICAgICAgdGhpcy5sb2FkUHV6emxlKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDb3JyZWN0U3RvbmVEcm9wID0gKGZlZWRiYWNrSW5kZXgpID0+IHtcclxuICAgICAgICB0aGlzLnNjb3JlICs9IDEwMDtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMud3JhcFRleHQodGhpcy5nZXRSYW5kb21GZWVkQmFja1RleHQoZmVlZGJhY2tJbmRleCkpO1xyXG4gICAgICAgIHRoaXMuZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudC5zdHlsZS56SW5kZXggPSBcIjJcIjtcclxuICAgIH07XHJcbiAgICBkaXNwYXRjaFN0b25lRHJvcEV2ZW50KGlzQ29ycmVjdCkge1xyXG4gICAgICAgIGNvbnN0IGRyb3BTdG9uZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFNUT05FRFJPUCwge1xyXG4gICAgICAgICAgICBkZXRhaWw6IHsgaXNDb3JyZWN0OiBpc0NvcnJlY3QgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGRyb3BTdG9uZUV2ZW50KTtcclxuICAgIH1cclxuICAgIGluaXROZXdQdXp6bGUobG9hZFB1enpsZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuaXNHYW1lU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy50ZW1wV29yZGZvcldvcmRQdXp6bGUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMucGlja2VkU3RvbmUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cy5jbGVhclBhcnRpY2xlKCk7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRDYW5hdnNFbGVtZW50LnN0eWxlLnpJbmRleCA9IFwiMFwiO1xyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobG9hZFB1enpsZUV2ZW50KTtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydFB1enpsZVRpbWUoKTtcclxuICAgIH1cclxuICAgIGxvZ1B1enpsZUVuZEZpcmViYXNlRXZlbnQoaXNDb3JyZWN0LCBwdXp6bGVUeXBlKSB7XHJcbiAgICAgICAgbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGNvbnN0IHB1enpsZUNvbXBsZXRlZERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZXJzaW9uLWluZm8taWRcIikuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiB0aGlzLmpzb25WZXJzaW9uTnVtYmVyLFxyXG4gICAgICAgICAgICBzdWNjZXNzX29yX2ZhaWx1cmU6IGlzQ29ycmVjdCA/IFwic3VjY2Vzc1wiIDogXCJmYWlsdXJlXCIsXHJcbiAgICAgICAgICAgIGxldmVsX251bWJlcjogdGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsTnVtYmVyLFxyXG4gICAgICAgICAgICBwdXp6bGVfbnVtYmVyOiB0aGlzLmNvdW50ZXIsXHJcbiAgICAgICAgICAgIGl0ZW1fc2VsZWN0ZWQ6IHB1enpsZVR5cGUgPT0gXCJXb3JkXCJcclxuICAgICAgICAgICAgICAgID8gKHRoaXMudGVtcFdvcmRmb3JXb3JkUHV6emxlID09IG51bGwgfHwgdGhpcy50ZW1wV29yZGZvcldvcmRQdXp6bGUgPT0gdW5kZWZpbmVkKSA/IFwiVElNRU9VVFwiIDogdGhpcy50ZW1wV29yZGZvcldvcmRQdXp6bGVcclxuICAgICAgICAgICAgICAgIDogKHRoaXMucGlja2VkU3RvbmUgPT0gbnVsbCB8fCB0aGlzLnBpY2tlZFN0b25lID09IHVuZGVmaW5lZCkgPyBcIlRJTUVPVVRcIiA6IHRoaXMucGlja2VkU3RvbmU/LnRleHQsXHJcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5zdG9uZUhhbmRsZXIuZ2V0Q29ycmVjdFRhcmdldFN0b25lKCksXHJcbiAgICAgICAgICAgIGZvaWxzOiB0aGlzLnN0b25lSGFuZGxlci5nZXRGb2lsU3RvbmVzKCksXHJcbiAgICAgICAgICAgIHJlc3BvbnNlX3RpbWU6IChlbmRUaW1lIC0gdGhpcy5wdXp6bGVUaW1lKSAvIDEwMDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFB1enpsZUNvbXBsZXRlZEV2ZW50KHB1enpsZUNvbXBsZXRlZERhdGEpO1xyXG4gICAgfVxyXG4gICAgbG9nTGV2ZWxFbmRGaXJlYmFzZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCBsZXZlbENvbXBsZXRlZERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZXJzaW9uLWluZm8taWRcIikuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiB0aGlzLmpzb25WZXJzaW9uTnVtYmVyLFxyXG4gICAgICAgICAgICBzdWNjZXNzX29yX2ZhaWx1cmU6IEdhbWVTY29yZS5jYWxjdWxhdGVTdGFyQ291bnQodGhpcy5zY29yZSkgPj0gMyA/IFwic3VjY2Vzc1wiIDogXCJmYWlsdXJlXCIsXHJcbiAgICAgICAgICAgIG51bWJlcl9vZl9zdWNjZXNzZnVsX3B1enpsZXM6IHRoaXMuc2NvcmUgLyAxMDAsXHJcbiAgICAgICAgICAgIGxldmVsX251bWJlcjogdGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsTnVtYmVyLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogKGVuZFRpbWUgLSB0aGlzLnN0YXJ0VGltZSkgLyAxMDAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRMZXZlbENvbXBsZXRlZEV2ZW50KGxldmVsQ29tcGxldGVkRGF0YSk7XHJcbiAgICB9XHJcbiAgICBzdGFydEdhbWVUaW1lKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuICAgIHN0YXJ0UHV6emxlVGltZSgpIHtcclxuICAgICAgICB0aGlzLnB1enpsZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG4gICAgcGF1c2VHYW1lUGxheSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuc2V0R2FtZVBhdXNlKHRydWUpO1xyXG4gICAgICAgIHRoaXMucGF1c2VQb3B1cC5hZGRMaXN0bmVyKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLnBhdXNlR2FtZVBsYXkoKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgRGVidWdnZXIsIGZvbnQsIGxhbmcsIHBzZXVkb0lkIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgUHJldmlvdXNQbGF5ZWRMZXZlbCwgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vY29tbW9uXCI7XHJcbmltcG9ydCB7IExldmVsQ29uZmlnIH0gZnJvbSBcIi4uL2NvbW1vbi9sZXZlbC1jb25maWdcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgZ2V0RGF0YSB9IGZyb20gXCIuLi9kYXRhL2FwaS1kYXRhXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCIuLi9kYXRhL2dhbWUtc2NvcmVcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCYWNrZ3JvdW5kLCBsZXZlbFNlbGVjdEJnRHJhd2luZyB9IGZyb20gJy4uL2NvbXBvc2l0aW9ucy9iYWNrZ3JvdW5kJztcclxuaW1wb3J0IHsgTEVWRUxfU0VMRUNUSU9OX0JBQ0tHUk9VTkQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5leHBvcnQgY2xhc3MgTGV2ZWxTZWxlY3Rpb25TY3JlZW4ge1xyXG4gICAgY2FudmFzO1xyXG4gICAgZGF0YTtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgbGV2ZWxCdXR0b25Qb3M7XHJcbiAgICBjYW52YXNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIGxldmVscztcclxuICAgIGdhbWVMZXZlbERhdGE7XHJcbiAgICBjYWxsQmFjaztcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICB4RG93bjtcclxuICAgIHlEb3duO1xyXG4gICAgcHJldmlvdXNQbGF5ZWRMZXZlbE51bWJlcjtcclxuICAgIGxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gMDtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgbGV2ZWxzU2VjdGlvbkNvdW50O1xyXG4gICAgdW5sb2NrTGV2ZWxJbmRleDtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgZmlyZWJhc2VJbnRlZ3JhdGlvbjtcclxuICAgIGJhY2tncm91bmQ7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGRhdGEsIGNhbGxCYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayA9IGNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzU2VjdGlvbkNvdW50ID1cclxuICAgICAgICAgICAgc2VsZi5kYXRhLmxldmVscy5sZW5ndGggLyAxMCA+IE1hdGguZmxvb3Ioc2VsZi5kYXRhLmxldmVscy5sZW5ndGggLyAxMClcclxuICAgICAgICAgICAgICAgID8gTWF0aC5mbG9vcihzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwKSArIDFcclxuICAgICAgICAgICAgICAgIDogTWF0aC5mbG9vcihzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpc2VCdXR0b25Qb3MoKTtcclxuICAgICAgICB0aGlzLmxldmVscyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5jYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxldmVsQnV0dG9ucyh0aGlzLmxldmVsQnV0dG9uUG9zKTtcclxuICAgICAgICB0aGlzLmdhbWVMZXZlbERhdGEgPSBHYW1lU2NvcmUuZ2V0QWxsR2FtZUxldmVsSW5mbygpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnVubG9ja0xldmVsSW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLnByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIgPVxyXG4gICAgICAgICAgICBwYXJzZUludChEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlLmdldEl0ZW0oUHJldmlvdXNQbGF5ZWRMZXZlbCArIGxhbmcgKyBcIkRlYnVnXCIpXHJcbiAgICAgICAgICAgICAgICA6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFByZXZpb3VzUGxheWVkTGV2ZWwgKyBsYW5nKSkgfCAwO1xyXG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID1cclxuICAgICAgICAgICAgICAgIDEwICogTWF0aC5mbG9vcih0aGlzLnByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIgLyAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0dXBCZygpO1xyXG4gICAgICAgIC8vIGxvYWRpbmcgaW1hZ2VzXHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIG1hcEljb246IFwiLi9hc3NldHMvaW1hZ2VzL21hcEljb24ucG5nXCIsXHJcbiAgICAgICAgICAgIG1hcEljb25TcGVjaWFsOiBcIi4vYXNzZXRzL2ltYWdlcy9tYXBfaWNvbl9tb25zdGVyX2xldmVsX3YwMS5wbmdcIixcclxuICAgICAgICAgICAgbWFwTG9jazogXCIuL2Fzc2V0cy9pbWFnZXMvbWFwTG9jay5wbmdcIixcclxuICAgICAgICAgICAgc3RhcjogXCIuL2Fzc2V0cy9pbWFnZXMvc3Rhci5wbmdcIixcclxuICAgICAgICAgICAgbmV4dGJ0bjogXCIuL2Fzc2V0cy9pbWFnZXMvbmV4dF9idG4ucG5nXCIsXHJcbiAgICAgICAgICAgIGJhY2tidG46IFwiLi9hc3NldHMvaW1hZ2VzL2JhY2tfYnRuLnBuZ1wiLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gZGF0YS5tYWp2ZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IGRhdGEubWludmVyc2lvbjtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7IExFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5EIH0sIGxldmVsU2VsZWN0QmdEcmF3aW5nKTtcclxuICAgIH07XHJcbiAgICBpbml0aWFsaXNlQnV0dG9uUG9zKCkge1xyXG4gICAgICAgIHRoaXMubGV2ZWxCdXR0b25Qb3MgPSBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIFt0aGlzLmNhbnZhcy53aWR0aCAvIDEwLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMF0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAyLjUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDEwXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDMgKyB0aGlzLmNhbnZhcy53aWR0aCAvIDIuOCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAxMCwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gM10sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAyLjUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDNdLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMyArIHRoaXMuY2FudmFzLndpZHRoIC8gMi44LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDMsXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW3RoaXMuY2FudmFzLndpZHRoIC8gMTAsIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuOF0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAyLjUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuOF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAzICsgdGhpcy5jYW52YXMud2lkdGggLyAyLjgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS44LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFt0aGlzLmNhbnZhcy53aWR0aCAvIDIuNSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4zXSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlTGV2ZWxCdXR0b25zKGxldmVsQnV0dG9ucG9zKSB7XHJcbiAgICAgICAgbGV0IHBvc3MgPSBsZXZlbEJ1dHRvbnBvc1swXTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCAxMDsgcysrKSB7XHJcbiAgICAgICAgICAgIGxldCBucyA9IG5ldyBMZXZlbENvbmZpZyhwb3NzW2ldWzBdLCBwb3NzW2ldWzFdLCBpICsgMSk7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxzLnB1c2gobnMpO1xyXG4gICAgICAgICAgICBpICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIC8vIG5leHQgcHJldiBidXR0b24gbGlzdG5lciAjMVxyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIC8vIHdoZW4gYXBwIGdvZXMgYmFja2dyb3VuZCAjMlxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMucGF1c2VQbGF5QXVkaW9zLCBmYWxzZSk7XHJcbiAgICAgICAgLy8vIHN3aXBlIGxpc3RlbmVyICMzXHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICAvLyAjNFxyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgcGF1c2VQbGF5QXVkaW9zID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBnZXRUb3VjaGVzKGV2dCkge1xyXG4gICAgICAgIHJldHVybiAoZXZ0LnRvdWNoZXMgfHwgLy8gYnJvd3NlciBBUElcclxuICAgICAgICAgICAgZXZ0Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyk7IC8vIGpRdWVyeVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVG91Y2hTdGFydCA9IChldnQpID0+IHtcclxuICAgICAgICBjb25zdCBmaXJzdFRvdWNoID0gdGhpcy5nZXRUb3VjaGVzKGV2dClbMF07XHJcbiAgICAgICAgdGhpcy54RG93biA9IGZpcnN0VG91Y2guY2xpZW50WDtcclxuICAgICAgICB0aGlzLnlEb3duID0gZmlyc3RUb3VjaC5jbGllbnRZO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVRvdWNoTW92ZSA9IChldnQpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMueERvd24gfHwgIXRoaXMueURvd24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeFVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgICBsZXQgeVVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuICAgICAgICBsZXQgeERpZmYgPSB0aGlzLnhEb3duIC0geFVwO1xyXG4gICAgICAgIGxldCB5RGlmZiA9IHRoaXMueURvd24gLSB5VXA7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHhEaWZmKSA+IE1hdGguYWJzKHlEaWZmKSkge1xyXG4gICAgICAgICAgICAvKm1vc3Qgc2lnbmlmaWNhbnQqL1xyXG4gICAgICAgICAgICBpZiAoeERpZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSB0aGlzLmxldmVsc1NlY3Rpb25Db3VudCAqIDEwIC0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCArIDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qIHJpZ2h0IHN3aXBlICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9IHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIC8qIGxlZnQgc3dpcGUgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiByZXNldCB2YWx1ZXMgKi9cclxuICAgICAgICB0aGlzLnhEb3duID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlEb3duID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgcmVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHggPj0gdGhpcy5jYW52YXMud2lkdGggKiAwLjcgJiZcclxuICAgICAgICAgICAgeCA8IHRoaXMuY2FudmFzLndpZHRoICogMC43ICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTAgJiZcclxuICAgICAgICAgICAgeSA+IHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMyAmJlxyXG4gICAgICAgICAgICB5IDwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4zICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggIT0gdGhpcy5sZXZlbHNTZWN0aW9uQ291bnQgKiAxMCAtIDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCArIDEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb3duQnV0dG9uKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh4ID49IHRoaXMuY2FudmFzLndpZHRoIC8gMTAgJiZcclxuICAgICAgICAgICAgeCA8IHRoaXMuY2FudmFzLndpZHRoIC8gMTAgKyB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCAmJlxyXG4gICAgICAgICAgICB5ID4gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4zICYmXHJcbiAgICAgICAgICAgIHkgPCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjMgKyB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAtIDEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgcyBvZiB0aGlzLmxldmVscykge1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5zcXJ0KCh4IC0gcy54IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjApICpcclxuICAgICAgICAgICAgICAgICh4IC0gcy54IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjApICtcclxuICAgICAgICAgICAgICAgICh5IC0gcy55IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjApICpcclxuICAgICAgICAgICAgICAgICAgICAoeSAtIHMueSAtIHRoaXMuY2FudmFzLmhlaWdodCAvIDIwKSkgPCA0NSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKERlYnVnZ2VyLkRlYnVnTW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoXCIuL2Fzc2V0cy9hdWRpb3MvQnV0dG9uQ2xpY2subXAzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxOdW1iZXIgPSBzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEdhbWUodGhpcy5sZXZlbE51bWJlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAtIDEgPD1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVubG9ja0xldmVsSW5kZXggKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IHMuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0R2FtZSh0aGlzLmxldmVsTnVtYmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkcmF3TGV2ZWwocywgY2FudmFzKSB7XHJcbiAgICAgICAgbGV0IGltYWdlU2l6ZSA9IGNhbnZhcy5oZWlnaHQgLyA1O1xyXG4gICAgICAgIGxldCB0ZXh0Rm9udFNpemUgPSBpbWFnZVNpemUgLyA2O1xyXG4gICAgICAgIGNvbnN0IHNwZWNpYWxMZXZlbHMgPSBbNSwgMTMsIDIwLCAzMCwgNDJdO1xyXG4gICAgICAgIGlmIChzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA8PSB0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBsZXZlbE51bWJlciA9IHMuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4O1xyXG4gICAgICAgICAgICBjb25zdCBpc1NwZWNpYWxMZXZlbCA9IHNwZWNpYWxMZXZlbHMuaW5jbHVkZXMobGV2ZWxOdW1iZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKGlzU3BlY2lhbExldmVsID8gdGhpcy5sb2FkZWRJbWFnZXMubWFwSWNvblNwZWNpYWwgOiB0aGlzLmxvYWRlZEltYWdlcy5tYXBJY29uLCBzLngsIHMueSwgaXNTcGVjaWFsTGV2ZWwgPyBpbWFnZVNpemUgKiAwLjkgOiBpbWFnZVNpemUsIGlzU3BlY2lhbExldmVsID8gaW1hZ2VTaXplICogMC45IDogaW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPVxyXG4gICAgICAgICAgICAgICAgdGV4dEZvbnRTaXplICsgYHB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocy5pbmRleCArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgsIHMueCArIGltYWdlU2l6ZSAvIDMuNSwgcy55ICsgaW1hZ2VTaXplIC8gMyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5mb250ID1cclxuICAgICAgICAgICAgICAgIHRleHRGb250U2l6ZSAtXHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplIC8gMzAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBweCAke2ZvbnR9LCBtb25vc3BhY2VgO1xyXG4gICAgICAgICAgICBEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgICAgID8gdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMuZGF0YS5sZXZlbHNbcy5pbmRleCArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxXVxyXG4gICAgICAgICAgICAgICAgICAgIC5sZXZlbE1ldGEubGV2ZWxUeXBlLCBzLnggKyBpbWFnZVNpemUgLyAzLjUsIHMueSArIGltYWdlU2l6ZSAvIDEuMylcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGZvciAobGV0IHMgb2YgdGhpcy5sZXZlbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3TGV2ZWwocywgdGhpcy5jYW52YXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRvd25CdXR0b24obGV2ZWwpIHtcclxuICAgICAgICBsZXQgaW1hZ2VTaXplID0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTA7XHJcbiAgICAgICAgaWYgKGxldmVsICE9IHRoaXMubGV2ZWxzU2VjdGlvbkNvdW50ICogMTAgLSAxMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLm5leHRidG4sIHRoaXMuY2FudmFzLndpZHRoICogMC43LCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjMsIGltYWdlU2l6ZSwgaW1hZ2VTaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxldmVsICE9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYWNrYnRuLCB0aGlzLmNhbnZhcy53aWR0aCAvIDEwLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjMsIGltYWdlU2l6ZSwgaW1hZ2VTaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBkcmF3IHN0YXJzIG9uIHRvcCBvZiBsZXZlbCBudW1iZXJcclxuICAgIGRyYXdTdGFycyhnYW1lTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgaWYgKGdhbWVMZXZlbERhdGEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZUxldmVsRGF0YS5sZW5ndGggIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBnYW1lIG9mIGdhbWVMZXZlbERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51bmxvY2tMZXZlbEluZGV4IDwgcGFyc2VJbnQoZ2FtZS5sZXZlbE51bWJlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5zdGFyQ291bnQgPj0gMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodGhpcy51bmxvY2tMZXZlbEluZGV4ID0gcGFyc2VJbnQoZ2FtZS5sZXZlbE51bWJlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHMgb2YgdGhpcy5sZXZlbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA8PSB0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghRGVidWdnZXIuRGVidWdNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVubG9ja0xldmVsSW5kZXggKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMubWFwTG9jaywgcy54LCBzLnksIHRoaXMuY2FudmFzLmhlaWdodCAvIDEzLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYW1lTGV2ZWxEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmluZGV4IC0gMSArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPT1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGdhbWVMZXZlbERhdGFbaV0ubGV2ZWxOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdTdGFyKHMsIHRoaXMuY2FudmFzLCBnYW1lTGV2ZWxEYXRhW2ldLnN0YXJDb3VudCwgdGhpcy5jb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd1N0YXIocywgY2FudmFzLCBzdGFyQ291bnQsIGNvbnRleHQpIHtcclxuICAgICAgICBsZXQgaW1hZ2VTaXplID0gY2FudmFzLmhlaWdodCAvIDU7XHJcbiAgICAgICAgaWYgKHN0YXJDb3VudCA+PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnN0YXIsIHMueCwgcy55IC0gaW1hZ2VTaXplICogMC4wMSwgaW1hZ2VTaXplIC8gNSwgaW1hZ2VTaXplIC8gNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnN0YXIsIHMueCArIGltYWdlU2l6ZSAvIDIuNSwgcy55IC0gaW1hZ2VTaXplICogMC4wMSwgaW1hZ2VTaXplIC8gNSwgaW1hZ2VTaXplIC8gNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPT0gMykge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5zdGFyLCBzLnggKyBpbWFnZVNpemUgLyA1LCBzLnkgLSBpbWFnZVNpemUgKiAwLjEsIGltYWdlU2l6ZSAvIDUsIGltYWdlU2l6ZSAvIDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0R2FtZShsZXZlbF9udW1iZXIpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICBjb25zdCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0YS5sZXZlbHNbbGV2ZWxfbnVtYmVyXSxcclxuICAgICAgICAgICAgICAgIGxldmVsTnVtYmVyOiBsZXZlbF9udW1iZXIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IGxldmVsX251bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubG9nU2VsZWN0ZWRMZXZlbEV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayhnYW1lUGxheURhdGEsIFwiTGV2ZWxTZWxlY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBsb2dTZWxlY3RlZExldmVsRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRMZXZlbHREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb24gPyB0aGlzLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uLnRvU3RyaW5nKCkgOiBcIlwiLFxyXG4gICAgICAgICAgICBsZXZlbF9zZWxlY3RlZDogdGhpcy5sZXZlbE51bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kU2VsZWN0ZWRMZXZlbEV2ZW50KHNlbGVjdGVkTGV2ZWx0RGF0YSk7XHJcbiAgICB9XHJcbiAgICBkcmF3TGV2ZWxTZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZD8uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy5kb3duQnV0dG9uKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFycyh0aGlzLmdhbWVMZXZlbERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICAgICAgLy8gd2hlbiBhcHAgZ29lcyBiYWNrZ3JvdW5kICMyXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZVBsYXlBdWRpb3MsIGZhbHNlKTtcclxuICAgICAgICAvLy8gc3dpcGUgbGlzdGVuZXIgIzNcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgICAgIC8vICM0XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vY29tbW9uXCI7XHJcbmltcG9ydCB7IENMSUNLIH0gZnJvbSBcIi4uL2NvbW1vbi9ldmVudC1uYW1lc1wiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCIuLi9jb21wb25lbnRzL2F1ZGlvLXBsYXllclwiO1xyXG5pbXBvcnQgQ2xvc2VCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9jbG9zZS1idXR0b25cIjtcclxuaW1wb3J0IE5leHRCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9uZXh0LWJ1dHRvblwiO1xyXG5pbXBvcnQgUmV0cnlCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9yZXRyeS1idXR0b25cIjtcclxuaW1wb3J0IHsgTW9uc3RlciB9IGZyb20gXCIuLi9jb21wb25lbnRzL21vbnN0ZXJcIjtcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzIH0gZnJvbSAnLi4vY29tcG9zaXRpb25zL2JhY2tncm91bmQnO1xyXG5leHBvcnQgY2xhc3MgTGV2ZWxFbmRTY2VuZSB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICB3aWR0aDtcclxuICAgIGltYWdlcztcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIGltYWdlc0xvYWRlZDtcclxuICAgIGlkO1xyXG4gICAgY29udGV4dDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBjbG9zZUJ1dHRvbjtcclxuICAgIHJldHJ5QnV0dG9uO1xyXG4gICAgbmV4dEJ1dHRvbjtcclxuICAgIHN0YXJDb3VudDtcclxuICAgIGN1cnJlbnRMZXZlbDtcclxuICAgIHN3aXRjaFRvR2FtZXBsYXlDQjtcclxuICAgIHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb25DQjtcclxuICAgIGRhdGE7XHJcbiAgICBiYWNrZ3JvdW5kO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICB0aW1lb3V0cztcclxuICAgIHN0YXJEcmF3bkNvdW50O1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBoZWlnaHQsIHdpZHRoLCBjb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbCwgc3dpdGNoVG9HYW1lcGxheUNCLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IsIGRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCBtb25zdGVyUGhhc2VOdW1iZXIsIHRoaXMuc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbik7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IgPSBzd2l0Y2hUb0dhbWVwbGF5Q0I7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IgPSBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0I7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnN0YXJEcmF3bkNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gbmV3IENsb3NlQnV0dG9uKGNvbnRleHQsIGNhbnZhcywgdGhpcy53aWR0aCAqIDAuMiAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMucmV0cnlCdXR0b24gPSBuZXcgUmV0cnlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy53aWR0aCAqIDAuNSAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBOZXh0QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGggKiAwLjggLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgLyAxLjI1KTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdGFyQ291bnQgPSBzdGFyQ291bnQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL1dJTl9zY3JlZW5fYmcucG5nXCIsXHJcbiAgICAgICAgICAgIHN0YXIxSW1nOiBcIi4vYXNzZXRzL2ltYWdlcy9waW5TdGFyMS5wbmdcIixcclxuICAgICAgICAgICAgc3RhcjJJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL3BpblN0YXIyLnBuZ1wiLFxyXG4gICAgICAgICAgICBzdGFyM0ltZzogXCIuL2Fzc2V0cy9pbWFnZXMvcGluU3RhcjMucG5nXCIsXHJcbiAgICAgICAgICAgIHdpbkJhY2tncm91bmRJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL2JnX3YwMS5qcGdcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhckFuaW1hdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnNldHVwQmcoKTtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBCR19HUk9VUF9JTUdTLCBkcmF3IH0gPSBsb2FkRHluYW1pY0JnQXNzZXRzKHRoaXMuY3VycmVudExldmVsLCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgQkdfR1JPVVBfSU1HUywgZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGFyQ291bnQgPD0gMSkge1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oXCIuL2Fzc2V0cy9hdWRpb3MvTGV2ZWxMb3NlRmFuZmFyZS5tcDNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvU3BpdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL0xldmVsV2luRmFuZmFyZS5tcDNcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhcIi4vYXNzZXRzL2F1ZGlvcy9pbnRyby5tcDNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmFja2dyb3VuZEltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKyB0aGlzLmhlaWdodCAqIDAuMTIpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5QnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFyQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIHsgZGVsYXk6IDUwMCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTAwMCwgY291bnQ6IDIgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTUwMCwgY291bnQ6IDMgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMudGltZW91dHMgPSBhbmltYXRpb25zLm1hcCgoYW5pbWF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPSBhbmltYXRpb24uY291bnQ7XHJcbiAgICAgICAgICAgIH0sIGFuaW1hdGlvbi5kZWxheSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3U3RhcnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDEgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjFJbWcsIHRoaXMud2lkdGggKiAwLjIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJDb3VudCA8PSAzICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJDb3VudCA+IDEgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyRHJhd25Db3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjJJbWcsIHRoaXMud2lkdGggKiAwLjUgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoICogMC4xOSwgdGhpcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDMgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5zdGFyM0ltZywgdGhpcy53aWR0aCAqIDAuODIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIGxldmVsZW5kIG1vdXNlY2xpY2sgXCIpO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbkNCKFwiTGV2ZWxFbmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJldHJ5QnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIGxldCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiB0aGlzLmRhdGEubGV2ZWxzW3RoaXMuY3VycmVudExldmVsXSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IHRoaXMuY3VycmVudExldmVsLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBwYXNzIHNhbWUgZGF0YSBhcyBsZXZlbCBpcyBzYW1lXHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoVG9HYW1lcGxheUNCKGdhbWVQbGF5RGF0YSwgXCJMZXZlbEVuZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubmV4dEJ1dHRvbi5vbkNsaWNrKHgsIHkpICYmIHRoaXMuc3RhckNvdW50ID49IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIGxldCBuZXh0ID0gTnVtYmVyKHRoaXMuY3VycmVudExldmVsKSArIDE7XHJcbiAgICAgICAgICAgIGxldCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiB7IC4uLnRoaXMuZGF0YS5sZXZlbHNbbmV4dF0sIGxldmVsTnVtYmVyOiBuZXh0LCB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRMZXZlbE51bWJlcjogbmV4dCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IoZ2FtZVBsYXlEYXRhLCBcIkxldmVsRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBwYXVzZUF1ZGlvcyA9ICgpID0+IHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFyQ291bnQgPj0gMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oXCIuL2Fzc2V0cy9hdWRpb3MvaW50cm8ubXAzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMudGltZW91dHMuZm9yRWFjaCgodGltZW91dCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpKTtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMucGF1c2VBdWRpb3MsIGZhbHNlKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vY29tbW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBMb2FkaW5nU2NlbmUge1xyXG4gICAgY2FudmFzO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgd2lkdGg7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkO1xyXG4gICAgY2xvdWRYUG9zaXRpb24gPSAtNTAwO1xyXG4gICAgc3RvcENsb3VkTW92aW5nID0gZmFsc2U7XHJcbiAgICBjbG91ZE1vdmluZ1RpbWVPdXQgPSAwO1xyXG4gICAgcmVtb3ZlTG9hZGluZztcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHJlbW92ZUxvYWRpbmcpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZ1wiKTtcclxuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nID0gcmVtb3ZlTG9hZGluZztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGNsb3VkNjogXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDEucG5nXCIsXHJcbiAgICAgICAgICAgIGNsb3VkNzogXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDIucG5nXCIsXHJcbiAgICAgICAgICAgIGNsb3VkODogXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDMucG5nXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmNsb3VkWFBvc2l0aW9uICs9IGRlbHRhVGltZSAqIDAuNzU7XHJcbiAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkTW92aW5nVGltZU91dCA+IDI5ODMpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjUgJiYgIXRoaXMuc3RvcENsb3VkTW92aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ICs9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ID4gMjAwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQ2xvdWRNb3ZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG91ZFhQb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdG9wQ2xvdWRNb3ZpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IDAgPyAwIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjYsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gMCA/IDAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuMDVcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjA1XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC42XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNlxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjVcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC40LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNywgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gLXRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gLXRoaXMud2lkdGggKiAwLjJcclxuICAgICAgICAgICAgICAgICAgICA/IC10aGlzLndpZHRoICogMC4yXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIDAgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMud2lkdGggKiAwLjQgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCAwICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgLXRoaXMud2lkdGggKiAwLjQgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLndpZHRoICogMC4wNSArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIC10aGlzLndpZHRoICogMC42ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLndpZHRoICogMC41ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC40KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCAtdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNiwgLXRoaXMud2lkdGggKiAwLjIgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdENsb3VkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2xvdWRYUG9zaXRpb24gPSAtNTAwO1xyXG4gICAgICAgIHRoaXMuc3RvcENsb3VkTW92aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgPSAwO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBGaXJlYmFzZVVzZXJDbGlja2VkLCBQV0FJbnN0YWxsU3RhdHVzLCB9IGZyb20gXCIuLi9jb21tb24vY29tbW9uXCI7XHJcbmltcG9ydCB7IE1vbnN0ZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb25zdGVyXCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyLCBmb250IH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi9jb21tb24vdXRpbHNcIjtcclxuaW1wb3J0IFBsYXlCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGxheS1idXR0b25cIjtcclxuaW1wb3J0IHsgY3JlYXRlQmFja2dyb3VuZCwgZGVmYXVsdEJnRHJhd2luZyB9IGZyb20gJy4uL2NvbXBvc2l0aW9ucy9iYWNrZ3JvdW5kJztcclxuaW1wb3J0IHsgREVGQVVMVF9CR19HUk9VUF9JTUdTIH0gZnJvbSAnLi4vY29uc3RhbnRzLyc7XHJcbmV4cG9ydCBjbGFzcyBTdGFydFNjZW5lIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBwaWNrZWRTdG9uZTtcclxuICAgIHB3YV9zdGF0dXM7XHJcbiAgICBmaXJlYmFzZV9hbmFseXRpY3M7XHJcbiAgICBpZDtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgYnV0dG9uQ29udGV4dDtcclxuICAgIHBsYXlCdXR0b247XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdGF0aWMgU2NlbmVOYW1lO1xyXG4gICAgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgdGl0bGVGb250O1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgdG9nZ2xlQnRuO1xyXG4gICAgcHdhX2luc3RhbGxfc3RhdHVzO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBkYXRhLCBzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1idG5cIik7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyID0gbmV3IE1vbnN0ZXIodGhpcy5jYW52YXMsIDQpO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uID0gc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnB3YV9zdGF0dXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmRldlRvZ2dsZSgpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCB0aGlzLmhhbmRsZXJJbnN0YWxsUHJvbXB0KTtcclxuICAgICAgICB0aGlzLnNldHVwQmcoKTtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBERUZBVUxUX0JHX0dST1VQX0lNR1MsIGRlZmF1bHRCZ0RyYXdpbmcpO1xyXG4gICAgfTtcclxuICAgIGRldlRvZ2dsZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwib25cIik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvZ2dsZUJ0bi5jbGFzc0xpc3QuY29udGFpbnMoXCJvblwiKSkge1xyXG4gICAgICAgICAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLmlubmVyVGV4dCA9IFwiRGV2XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBEZWJ1Z2dlci5EZWJ1Z01vZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLmlubmVyVGV4dCA9IFwiRGV2XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBhbmltYXRpb24gPSAoZGVsdGFUaW1lKSA9PiB7XHJcbiAgICAgICAgdGhpcy50aXRsZUZvbnQgPSB0aGlzLmdldEZvbnRXaWR0aE9mVGl0bGUoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmQ/LmRyYXcoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke3RoaXMudGl0bGVGb250fXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5kYXRhLnRpdGxlLCB0aGlzLndpZHRoICogMC41LCB0aGlzLmhlaWdodCAvIDEwKTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy5wbGF5QnV0dG9uLmRyYXcoKTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVQbGF5QnV0dG9uKCkge1xyXG4gICAgICAgIHRoaXMucGxheUJ1dHRvbiA9IG5ldyBQbGF5QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC4zNSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gNyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGNvbnN0IHsgZXhjbHVkZVgsIGV4Y2x1ZGVZIH0gPSBVdGlscy5nZXRFeGNsdWRlZENvb3JkaW5hdGVzKHNlbGZFbGVtZW50LCAxNSk7XHJcbiAgICAgICAgaWYgKCEoeCA8IGV4Y2x1ZGVYICYmIHkgPCBleGNsdWRlWSkpIHtcclxuICAgICAgICAgICAgRmlyZWJhc2VJbnRlZ3JhdGlvbi5nZXRJbnN0YW5jZSgpLnNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50KCk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZmJxKFwidHJhY2tDdXN0b21cIiwgRmlyZWJhc2VVc2VyQ2xpY2tlZCwge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IFwiY2xpY2tcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIHNlbGYuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKFwiU3RhcnRTY2VuZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmVpbnN0YWxscHJvbXB0XCIsIHRoaXMuaGFuZGxlckluc3RhbGxQcm9tcHQsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGdldEZvbnRXaWR0aE9mVGl0bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLndpZHRoICsgMjAwKSAvIHRoaXMuZGF0YS50aXRsZS5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVySW5zdGFsbFByb21wdCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5wd2FfaW5zdGFsbF9zdGF0dXMgPSBldmVudDtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzLCBcImZhbHNlXCIpO1xyXG4gICAgfTtcclxufVxyXG4iLCJjb25zdCBjcmVhdGVJbWcgPSBhc3luYyAoaW1hZ2UpID0+IHtcclxuICAgIGNvbnN0IG5ld0ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICBuZXdJbWFnZS5vbmxvYWQgPSAoKSA9PiByZXNvbHZlKG5ld0ltYWdlKTtcclxuICAgICAgICBuZXdJbWFnZS5zcmMgPSBpbWFnZTtcclxuICAgIH0pO1xyXG59O1xyXG5leHBvcnQgY29uc3QgbG9hZEltYWdlcyA9IGFzeW5jIChpbWFnZXMpID0+IHtcclxuICAgIGNvbnN0IGxvYWRJbWdQcm9taXNlcyA9IE9iamVjdC5rZXlzKGltYWdlcykubWFwKGFzeW5jIChhcnJLZXkpID0+IHtcclxuICAgICAgICBjb25zdCBpbWcgPSBhd2FpdCBjcmVhdGVJbWcoaW1hZ2VzW2FycktleV0pO1xyXG4gICAgICAgIHJldHVybiB7IFthcnJLZXldOiBpbWcgfTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRJbWFnZSA9IGF3YWl0IFByb21pc2UuYWxsKGxvYWRJbWdQcm9taXNlcyk7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSByZXNvbHZlZEltYWdlLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQpID0+IHtcclxuICAgICAgICByZXR1cm4geyAuLi5hY2N1bXVsYXRvciwgLi4uY3VycmVudCB9O1xyXG4gICAgfSwge30pO1xyXG4gICAgcmV0dXJuIGxvYWRlZEltYWdlcztcclxufTtcclxuIiwiaW1wb3J0IHsgX2dldFByb3ZpZGVyLCBnZXRBcHAsIF9yZWdpc3RlckNvbXBvbmVudCwgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgY2FsY3VsYXRlQmFja29mZk1pbGxpcywgRmlyZWJhc2VFcnJvciwgaXNJbmRleGVkREJBdmFpbGFibGUsIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUsIGlzQnJvd3NlckV4dGVuc2lvbiwgYXJlQ29va2llc0VuYWJsZWQsIGdldE1vZHVsYXJJbnN0YW5jZSwgZGVlcEVxdWFsIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgJ0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFR5cGUgY29uc3RhbnQgZm9yIEZpcmViYXNlIEFuYWx5dGljcy5cclxuICovXHJcbmNvbnN0IEFOQUxZVElDU19UWVBFID0gJ2FuYWx5dGljcyc7XHJcbi8vIEtleSB0byBhdHRhY2ggRklEIHRvIGluIGd0YWcgcGFyYW1zLlxyXG5jb25zdCBHQV9GSURfS0VZID0gJ2ZpcmViYXNlX2lkJztcclxuY29uc3QgT1JJR0lOX0tFWSA9ICdvcmlnaW4nO1xyXG5jb25zdCBGRVRDSF9USU1FT1VUX01JTExJUyA9IDYwICogMTAwMDtcclxuY29uc3QgRFlOQU1JQ19DT05GSUdfVVJMID0gJ2h0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlYXBpcy5jb20vdjFhbHBoYS9wcm9qZWN0cy8tL2FwcHMve2FwcC1pZH0vd2ViQ29uZmlnJztcclxuY29uc3QgR1RBR19VUkwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcyc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hbmFseXRpY3MnKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgRVJST1JTID0ge1xyXG4gICAgW1wiYWxyZWFkeS1leGlzdHNcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0VYSVNUUyAqL106ICdBIEZpcmViYXNlIEFuYWx5dGljcyBpbnN0YW5jZSB3aXRoIHRoZSBhcHBJZCB7JGlkfSAnICtcclxuICAgICAgICAnIGFscmVhZHkgZXhpc3RzLiAnICtcclxuICAgICAgICAnT25seSBvbmUgRmlyZWJhc2UgQW5hbHl0aWNzIGluc3RhbmNlIGNhbiBiZSBjcmVhdGVkIGZvciBlYWNoIGFwcElkLicsXHJcbiAgICBbXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQUxSRUFEWV9JTklUSUFMSVpFRCAqL106ICdpbml0aWFsaXplQW5hbHl0aWNzKCkgY2Fubm90IGJlIGNhbGxlZCBhZ2FpbiB3aXRoIGRpZmZlcmVudCBvcHRpb25zIHRoYW4gdGhvc2UgJyArXHJcbiAgICAgICAgJ2l0IHdhcyBpbml0aWFsbHkgY2FsbGVkIHdpdGguIEl0IGNhbiBiZSBjYWxsZWQgYWdhaW4gd2l0aCB0aGUgc2FtZSBvcHRpb25zIHRvICcgK1xyXG4gICAgICAgICdyZXR1cm4gdGhlIGV4aXN0aW5nIGluc3RhbmNlLCBvciBnZXRBbmFseXRpY3MoKSBjYW4gYmUgdXNlZCAnICtcclxuICAgICAgICAndG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBhbHJlYWR5LWludGlhbGl6ZWQgaW5zdGFuY2UuJyxcclxuICAgIFtcImFscmVhZHktaW5pdGlhbGl6ZWQtc2V0dGluZ3NcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEX1NFVFRJTkdTICovXTogJ0ZpcmViYXNlIEFuYWx5dGljcyBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkLicgK1xyXG4gICAgICAgICdzZXR0aW5ncygpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBpbml0aWFsaXppbmcgYW55IEFuYWx5dGljcyBpbnN0YW5jZScgK1xyXG4gICAgICAgICdvciBpdCB3aWxsIGhhdmUgbm8gZWZmZWN0LicsXHJcbiAgICBbXCJpbnRlcm9wLWNvbXBvbmVudC1yZWctZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5URVJPUF9DT01QT05FTlRfUkVHX0ZBSUxFRCAqL106ICdGaXJlYmFzZSBBbmFseXRpY3MgSW50ZXJvcCBDb21wb25lbnQgZmFpbGVkIHRvIGluc3RhbnRpYXRlOiB7JHJlYXNvbn0nLFxyXG4gICAgW1wiaW52YWxpZC1hbmFseXRpY3MtY29udGV4dFwiIC8qIEFuYWx5dGljc0Vycm9yLklOVkFMSURfQU5BTFlUSUNTX0NPTlRFWFQgKi9dOiAnRmlyZWJhc2UgQW5hbHl0aWNzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC4gJyArXHJcbiAgICAgICAgJ1dyYXAgaW5pdGlhbGl6YXRpb24gb2YgYW5hbHl0aWNzIGluIGFuYWx5dGljcy5pc1N1cHBvcnRlZCgpICcgK1xyXG4gICAgICAgICd0byBwcmV2ZW50IGluaXRpYWxpemF0aW9uIGluIHVuc3VwcG9ydGVkIGVudmlyb25tZW50cy4gRGV0YWlsczogeyRlcnJvckluZm99JyxcclxuICAgIFtcImluZGV4ZWRkYi11bmF2YWlsYWJsZVwiIC8qIEFuYWx5dGljc0Vycm9yLklOREVYRUREQl9VTkFWQUlMQUJMRSAqL106ICdJbmRleGVkREIgdW5hdmFpbGFibGUgb3IgcmVzdHJpY3RlZCBpbiB0aGlzIGVudmlyb25tZW50LiAnICtcclxuICAgICAgICAnV3JhcCBpbml0aWFsaXphdGlvbiBvZiBhbmFseXRpY3MgaW4gYW5hbHl0aWNzLmlzU3VwcG9ydGVkKCkgJyArXHJcbiAgICAgICAgJ3RvIHByZXZlbnQgaW5pdGlhbGl6YXRpb24gaW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnRzLiBEZXRhaWxzOiB7JGVycm9ySW5mb30nLFxyXG4gICAgW1wiZmV0Y2gtdGhyb3R0bGVcIiAvKiBBbmFseXRpY3NFcnJvci5GRVRDSF9USFJPVFRMRSAqL106ICdUaGUgY29uZmlnIGZldGNoIHJlcXVlc3QgdGltZWQgb3V0IHdoaWxlIGluIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYgc3RhdGUuJyArXHJcbiAgICAgICAgJyBVbml4IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMgd2hlbiBmZXRjaCByZXF1ZXN0IHRocm90dGxpbmcgZW5kczogeyR0aHJvdHRsZUVuZFRpbWVNaWxsaXN9LicsXHJcbiAgICBbXCJjb25maWctZmV0Y2gtZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQ09ORklHX0ZFVENIX0ZBSUxFRCAqL106ICdEeW5hbWljIGNvbmZpZyBmZXRjaCBmYWlsZWQ6IFt7JGh0dHBTdGF0dXN9XSB7JHJlc3BvbnNlTWVzc2FnZX0nLFxyXG4gICAgW1wibm8tYXBpLWtleVwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQSV9LRVkgKi9dOiAnVGhlIFwiYXBpS2V5XCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gRmlyZWJhc2UgQW5hbHl0aWNzIHJlcXVpcmVzIHRoaXMgZmllbGQgdG8nICtcclxuICAgICAgICAnY29udGFpbiBhIHZhbGlkIEFQSSBrZXkuJyxcclxuICAgIFtcIm5vLWFwcC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQUF9JRCAqL106ICdUaGUgXCJhcHBJZFwiIGZpZWxkIGlzIGVtcHR5IGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIEZpcmViYXNlIEFuYWx5dGljcyByZXF1aXJlcyB0aGlzIGZpZWxkIHRvJyArXHJcbiAgICAgICAgJ2NvbnRhaW4gYSB2YWxpZCBhcHAgSUQuJyxcclxuICAgIFtcIm5vLWNsaWVudC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0NMSUVOVF9JRCAqL106ICdUaGUgXCJjbGllbnRfaWRcIiBmaWVsZCBpcyBlbXB0eS4nLFxyXG4gICAgW1wiaW52YWxpZC1ndGFnLXJlc291cmNlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5WQUxJRF9HVEFHX1JFU09VUkNFICovXTogJ1RydXN0ZWQgVHlwZXMgZGV0ZWN0ZWQgYW4gaW52YWxpZCBndGFnIHJlc291cmNlOiB7JGd0YWdVUkx9LidcclxufTtcclxuY29uc3QgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FuYWx5dGljcycsICdBbmFseXRpY3MnLCBFUlJPUlMpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVmVyaWZpZXMgYW5kIGNyZWF0ZXMgYSBUcnVzdGVkU2NyaXB0VVJMLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlR3RhZ1RydXN0ZWRUeXBlc1NjcmlwdFVSTCh1cmwpIHtcclxuICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoR1RBR19VUkwpKSB7XHJcbiAgICAgICAgY29uc3QgZXJyID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnZhbGlkLWd0YWctcmVzb3VyY2VcIiAvKiBBbmFseXRpY3NFcnJvci5JTlZBTElEX0dUQUdfUkVTT1VSQ0UgKi8sIHtcclxuICAgICAgICAgICAgZ3RhZ1VSTDogdXJsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB1cmw7XHJcbn1cclxuLyoqXHJcbiAqIE1ha2VzaGlmdCBwb2x5ZmlsbCBmb3IgUHJvbWlzZS5hbGxTZXR0bGVkKCkuIFJlc29sdmVzIHdoZW4gYWxsIHByb21pc2VzXHJcbiAqIGhhdmUgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvbWlzZXMgQXJyYXkgb2YgcHJvbWlzZXMgdG8gd2FpdCBmb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBwcm9taXNlQWxsU2V0dGxlZChwcm9taXNlcykge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzLm1hcChwcm9taXNlID0+IHByb21pc2UuY2F0Y2goZSA9PiBlKSkpO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgVHJ1c3RlZFR5cGVQb2xpY3kgb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgcnVsZXMgcGFzc2VkIGFzIHBvbGljeU9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBwb2xpY3lOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHBvbGljeVxyXG4gKiBAcGFyYW0gcG9saWN5T3B0aW9ucyBPYmplY3QgY29udGFpbmluZyBpbXBsZW1lbnRhdGlvbnMgb2YgaW5zdGFuY2UgbWV0aG9kcyBmb3IgVHJ1c3RlZFR5cGVzUG9saWN5LCBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UcnVzdGVkVHlwZVBvbGljeSNpbnN0YW5jZV9tZXRob2RzXHJcbiAqIHwgdGhlIFRydXN0ZWRUeXBlUG9saWN5IHJlZmVyZW5jZSBkb2N1bWVudGF0aW9ufS5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeShwb2xpY3lOYW1lLCBwb2xpY3lPcHRpb25zKSB7XHJcbiAgICAvLyBDcmVhdGUgYSBUcnVzdGVkVHlwZXMgcG9saWN5IHRoYXQgd2UgY2FuIHVzZSBmb3IgdXBkYXRpbmcgc3JjXHJcbiAgICAvLyBwcm9wZXJ0aWVzXHJcbiAgICBsZXQgdHJ1c3RlZFR5cGVzUG9saWN5O1xyXG4gICAgaWYgKHdpbmRvdy50cnVzdGVkVHlwZXMpIHtcclxuICAgICAgICB0cnVzdGVkVHlwZXNQb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeShwb2xpY3lOYW1lLCBwb2xpY3lPcHRpb25zKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVzdGVkVHlwZXNQb2xpY3k7XHJcbn1cclxuLyoqXHJcbiAqIEluc2VydHMgZ3RhZyBzY3JpcHQgdGFnIGludG8gdGhlIHBhZ2UgdG8gYXN5bmNocm9ub3VzbHkgZG93bmxvYWQgZ3RhZy5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBkYXRhbGF5ZXIgKG1vc3Qgb2Z0ZW4gdGhlIGRlZmF1bHQsIFwiX2RhdGFMYXllclwiKS5cclxuICovXHJcbmZ1bmN0aW9uIGluc2VydFNjcmlwdFRhZyhkYXRhTGF5ZXJOYW1lLCBtZWFzdXJlbWVudElkKSB7XHJcbiAgICBjb25zdCB0cnVzdGVkVHlwZXNQb2xpY3kgPSBjcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3koJ2ZpcmViYXNlLWpzLXNkay1wb2xpY3knLCB7XHJcbiAgICAgICAgY3JlYXRlU2NyaXB0VVJMOiBjcmVhdGVHdGFnVHJ1c3RlZFR5cGVzU2NyaXB0VVJMXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgLy8gV2UgYXJlIG5vdCBwcm92aWRpbmcgYW4gYW5hbHl0aWNzSWQgaW4gdGhlIFVSTCBiZWNhdXNlIGl0IHdvdWxkIHRyaWdnZXIgYSBgcGFnZV92aWV3YFxyXG4gICAgLy8gd2l0aG91dCBmaWQuIFdlIHdpbGwgaW5pdGlhbGl6ZSBnYS1pZCB1c2luZyBndGFnIChjb25maWcpIGNvbW1hbmQgdG9nZXRoZXIgd2l0aCBmaWQuXHJcbiAgICBjb25zdCBndGFnU2NyaXB0VVJMID0gYCR7R1RBR19VUkx9P2w9JHtkYXRhTGF5ZXJOYW1lfSZpZD0ke21lYXN1cmVtZW50SWR9YDtcclxuICAgIHNjcmlwdC5zcmMgPSB0cnVzdGVkVHlwZXNQb2xpY3lcclxuICAgICAgICA/IHRydXN0ZWRUeXBlc1BvbGljeSA9PT0gbnVsbCB8fCB0cnVzdGVkVHlwZXNQb2xpY3kgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVTY3JpcHRVUkwoZ3RhZ1NjcmlwdFVSTClcclxuICAgICAgICA6IGd0YWdTY3JpcHRVUkw7XHJcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgcmVmZXJlbmNlIHRvLCBvciBjcmVhdGUsIGdsb2JhbCBkYXRhbGF5ZXIuXHJcbiAqIEBwYXJhbSBkYXRhTGF5ZXJOYW1lIE5hbWUgb2YgZGF0YWxheWVyIChtb3N0IG9mdGVuIHRoZSBkZWZhdWx0LCBcIl9kYXRhTGF5ZXJcIikuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRPckNyZWF0ZURhdGFMYXllcihkYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICAvLyBDaGVjayBmb3IgZXhpc3RpbmcgZGF0YUxheWVyIGFuZCBjcmVhdGUgaWYgbmVlZGVkLlxyXG4gICAgbGV0IGRhdGFMYXllciA9IFtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkod2luZG93W2RhdGFMYXllck5hbWVdKSkge1xyXG4gICAgICAgIGRhdGFMYXllciA9IHdpbmRvd1tkYXRhTGF5ZXJOYW1lXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHdpbmRvd1tkYXRhTGF5ZXJOYW1lXSA9IGRhdGFMYXllcjtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhTGF5ZXI7XHJcbn1cclxuLyoqXHJcbiAqIFdyYXBwZWQgZ3RhZyBsb2dpYyB3aGVuIGd0YWcgaXMgY2FsbGVkIHdpdGggJ2NvbmZpZycgY29tbWFuZC5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZCBHQSBNZWFzdXJlbWVudCBJRCB0byBzZXQgY29uZmlnIGZvci5cclxuICogQHBhcmFtIGd0YWdQYXJhbXMgR3RhZyBjb25maWcgcGFyYW1zIHRvIHNldC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGd0YWdPbkNvbmZpZyhndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMpIHtcclxuICAgIC8vIElmIGNvbmZpZyBpcyBhbHJlYWR5IGZldGNoZWQsIHdlIGtub3cgdGhlIGFwcElkIGFuZCBjYW4gdXNlIGl0IHRvIGxvb2sgdXAgd2hhdCBGSUQgcHJvbWlzZSB3ZVxyXG4gICAgLy8vIGFyZSB3YWl0aW5nIGZvciwgYW5kIHdhaXQgb25seSBvbiB0aGF0IG9uZS5cclxuICAgIGNvbnN0IGNvcnJlc3BvbmRpbmdBcHBJZCA9IG1lYXN1cmVtZW50SWRUb0FwcElkW21lYXN1cmVtZW50SWRdO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoY29ycmVzcG9uZGluZ0FwcElkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbY29ycmVzcG9uZGluZ0FwcElkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIElmIGNvbmZpZyBpcyBub3QgZmV0Y2hlZCB5ZXQsIHdhaXQgZm9yIGFsbCBjb25maWdzICh3ZSBkb24ndCBrbm93IHdoaWNoIG9uZSB3ZSBuZWVkKSBhbmRcclxuICAgICAgICAgICAgLy8gZmluZCB0aGUgYXBwSWQgKGlmIGFueSkgY29ycmVzcG9uZGluZyB0byB0aGlzIG1lYXN1cmVtZW50SWQuIElmIHRoZXJlIGlzIG9uZSwgd2FpdCBvblxyXG4gICAgICAgICAgICAvLyB0aGF0IGFwcElkJ3MgaW5pdGlhbGl6YXRpb24gcHJvbWlzZS4gSWYgdGhlcmUgaXMgbm9uZSwgcHJvbWlzZSByZXNvbHZlcyBhbmQgZ3RhZ1xyXG4gICAgICAgICAgICAvLyBjYWxsIGdvZXMgdGhyb3VnaC5cclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0NvbmZpZ1Jlc3VsdHMgPSBhd2FpdCBwcm9taXNlQWxsU2V0dGxlZChkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0KTtcclxuICAgICAgICAgICAgY29uc3QgZm91bmRDb25maWcgPSBkeW5hbWljQ29uZmlnUmVzdWx0cy5maW5kKGNvbmZpZyA9PiBjb25maWcubWVhc3VyZW1lbnRJZCA9PT0gbWVhc3VyZW1lbnRJZCk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFtmb3VuZENvbmZpZy5hcHBJZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGxvZ2dlci5lcnJvcihlKTtcclxuICAgIH1cclxuICAgIGd0YWdDb3JlKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxufVxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGxvZ2ljIHdoZW4gZ3RhZyBpcyBjYWxsZWQgd2l0aCAnZXZlbnQnIGNvbW1hbmQuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnQ29yZSBCYXNpYyBndGFnIGZ1bmN0aW9uIHRoYXQganVzdCBhcHBlbmRzIHRvIGRhdGFMYXllci5cclxuICogQHBhcmFtIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgTWFwIG9mIGFwcElkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkIEdBIE1lYXN1cmVtZW50IElEIHRvIGxvZyBldmVudCB0by5cclxuICogQHBhcmFtIGd0YWdQYXJhbXMgUGFyYW1zIHRvIGxvZyB3aXRoIHRoaXMgZXZlbnQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBndGFnT25FdmVudChndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvciA9IFtdO1xyXG4gICAgICAgIC8vIElmIHRoZXJlJ3MgYSAnc2VuZF90bycgcGFyYW0sIGNoZWNrIGlmIGFueSBJRCBzcGVjaWZpZWQgbWF0Y2hlc1xyXG4gICAgICAgIC8vIGFuIGluaXRpYWxpemVJZHMoKSBwcm9taXNlIHdlIGFyZSB3YWl0aW5nIGZvci5cclxuICAgICAgICBpZiAoZ3RhZ1BhcmFtcyAmJiBndGFnUGFyYW1zWydzZW5kX3RvJ10pIHtcclxuICAgICAgICAgICAgbGV0IGdhU2VuZFRvTGlzdCA9IGd0YWdQYXJhbXNbJ3NlbmRfdG8nXTtcclxuICAgICAgICAgICAgLy8gTWFrZSBpdCBhbiBhcnJheSBpZiBpcyBpc24ndCwgc28gaXQgY2FuIGJlIGRlYWx0IHdpdGggdGhlIHNhbWUgd2F5LlxyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZ2FTZW5kVG9MaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgZ2FTZW5kVG9MaXN0ID0gW2dhU2VuZFRvTGlzdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQ2hlY2tpbmcgJ3NlbmRfdG8nIGZpZWxkcyByZXF1aXJlcyBoYXZpbmcgYWxsIG1lYXN1cmVtZW50IElEIHJlc3VsdHMgYmFjayBmcm9tXHJcbiAgICAgICAgICAgIC8vIHRoZSBkeW5hbWljIGNvbmZpZyBmZXRjaC5cclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0NvbmZpZ1Jlc3VsdHMgPSBhd2FpdCBwcm9taXNlQWxsU2V0dGxlZChkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzZW5kVG9JZCBvZiBnYVNlbmRUb0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFueSBmZXRjaGVkIGR5bmFtaWMgbWVhc3VyZW1lbnQgSUQgdGhhdCBtYXRjaGVzIHRoaXMgJ3NlbmRfdG8nIElEXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZENvbmZpZyA9IGR5bmFtaWNDb25maWdSZXN1bHRzLmZpbmQoY29uZmlnID0+IGNvbmZpZy5tZWFzdXJlbWVudElkID09PSBzZW5kVG9JZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsaXphdGlvblByb21pc2UgPSBmb3VuZENvbmZpZyAmJiBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2ZvdW5kQ29uZmlnLmFwcElkXTtcclxuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yLnB1c2goaW5pdGlhbGl6YXRpb25Qcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIGl0ZW0gaW4gJ3NlbmRfdG8nIHRoYXQgaXMgbm90IGFzc29jaWF0ZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBkaXJlY3RseSB3aXRoIGFuIEZJRCwgcG9zc2libHkgYSBncm91cC4gIEVtcHR5IHRoaXMgYXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhpdCB0aGUgbG9vcCBlYXJseSwgYW5kIGxldCBpdCBnZXQgcG9wdWxhdGVkIGJlbG93LlxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdW5wb3B1bGF0ZWQgaWYgdGhlcmUgd2FzIG5vICdzZW5kX3RvJyBmaWVsZCAsIG9yXHJcbiAgICAgICAgLy8gaWYgbm90IGFsbCBlbnRyaWVzIGluIHRoZSAnc2VuZF90bycgZmllbGQgY291bGQgYmUgbWFwcGVkIHRvXHJcbiAgICAgICAgLy8gYSBGSUQuIEluIHRoZXNlIGNhc2VzLCB3YWl0IG9uIGFsbCBwZW5kaW5nIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gICAgICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yID0gT2JqZWN0LnZhbHVlcyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUnVuIGNvcmUgZ3RhZyBmdW5jdGlvbiB3aXRoIGFyZ3MgYWZ0ZXIgYWxsIHJlbGV2YW50IGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgLy8gcHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkLlxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IpO1xyXG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHA6Ly9iLzE0MTM3MDQ0OSAtIHRoaXJkIGFyZ3VtZW50IGNhbm5vdCBiZSB1bmRlZmluZWQuXHJcbiAgICAgICAgZ3RhZ0NvcmUoXCJldmVudFwiIC8qIEd0YWdDb21tYW5kLkVWRU5UICovLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zIHx8IHt9KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBXcmFwcyBhIHN0YW5kYXJkIGd0YWcgZnVuY3Rpb24gd2l0aCBleHRyYSBjb2RlIHRvIHdhaXQgZm9yIGNvbXBsZXRpb24gb2ZcclxuICogcmVsZXZhbnQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgYmVmb3JlIHNlbmRpbmcgcmVxdWVzdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnQ29yZSBCYXNpYyBndGFnIGZ1bmN0aW9uIHRoYXQganVzdCBhcHBlbmRzIHRvIGRhdGFMYXllci5cclxuICogQHBhcmFtIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgTWFwIG9mIGFwcElkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXAgb2YgR0EgbWVhc3VyZW1lbnRJRHMgdG8gY29ycmVzcG9uZGluZyBGaXJlYmFzZSBhcHBJZC5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBHdGFnKGd0YWdDb3JlLCBcclxuLyoqXHJcbiAqIEFsbG93cyB3cmFwcGVkIGd0YWcgY2FsbHMgdG8gd2FpdCBvbiB3aGljaGV2ZXIgaW50aWFsaXphdGlvbiBwcm9taXNlcyBhcmUgcmVxdWlyZWQsXHJcbiAqIGRlcGVuZGluZyBvbiB0aGUgY29udGVudHMgb2YgdGhlIGd0YWcgcGFyYW1zJyBgc2VuZF90b2AgZmllbGQsIGlmIGFueS5cclxuICovXHJcbmluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIFxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGNhbGxzIHNvbWV0aW1lcyByZXF1aXJlIGFsbCBkeW5hbWljIGNvbmZpZyBmZXRjaGVzIHRvIGhhdmUgcmV0dXJuZWRcclxuICogYmVmb3JlIGRldGVybWluaW5nIHdoYXQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgKHdoaWNoIGluY2x1ZGUgRklEcykgdG8gd2FpdCBmb3IuXHJcbiAqL1xyXG5keW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBcclxuLyoqXHJcbiAqIFdyYXBwZWQgZ3RhZyBjb25maWcgY2FsbHMgY2FuIG5hcnJvdyBkb3duIHdoaWNoIGluaXRpYWxpemF0aW9uIHByb21pc2UgKHdpdGggRklEKVxyXG4gKiB0byB3YWl0IGZvciBpZiB0aGUgbWVhc3VyZW1lbnRJZCBpcyBhbHJlYWR5IGZldGNoZWQsIGJ5IGdldHRpbmcgdGhlIGNvcnJlc3BvbmRpbmcgYXBwSWQsXHJcbiAqIHdoaWNoIGlzIHRoZSBrZXkgZm9yIHRoZSBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBtYXAuXHJcbiAqL1xyXG5tZWFzdXJlbWVudElkVG9BcHBJZCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBXcmFwcGVyIGFyb3VuZCBndGFnIHRoYXQgZW5zdXJlcyBGSUQgaXMgc2VudCB3aXRoIGd0YWcgY2FsbHMuXHJcbiAgICAgKiBAcGFyYW0gY29tbWFuZCBHdGFnIGNvbW1hbmQgdHlwZS5cclxuICAgICAqIEBwYXJhbSBpZE9yTmFtZU9yUGFyYW1zIE1lYXN1cmVtZW50IElEIGlmIGNvbW1hbmQgaXMgRVZFTlQvQ09ORklHLCBwYXJhbXMgaWYgY29tbWFuZCBpcyBTRVQuXHJcbiAgICAgKiBAcGFyYW0gZ3RhZ1BhcmFtcyBQYXJhbXMgaWYgZXZlbnQgaXMgRVZFTlQvQ09ORklHLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBmdW5jdGlvbiBndGFnV3JhcHBlcihjb21tYW5kLCAuLi5hcmdzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gSWYgZXZlbnQsIGNoZWNrIHRoYXQgcmVsZXZhbnQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgaGF2ZSBjb21wbGV0ZWQuXHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFttZWFzdXJlbWVudElkLCBndGFnUGFyYW1zXSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBFVkVOVCwgc2Vjb25kIGFyZyBtdXN0IGJlIG1lYXN1cmVtZW50SWQuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBndGFnT25FdmVudChndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFttZWFzdXJlbWVudElkLCBndGFnUGFyYW1zXSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBDT05GSUcsIHNlY29uZCBhcmcgbXVzdCBiZSBtZWFzdXJlbWVudElkLlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgZ3RhZ09uQ29uZmlnKGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2d0YWdQYXJhbXNdID0gYXJncztcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKFwiY29uc2VudFwiIC8qIEd0YWdDb21tYW5kLkNPTlNFTlQgKi8sICd1cGRhdGUnLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcImdldFwiIC8qIEd0YWdDb21tYW5kLkdFVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW21lYXN1cmVtZW50SWQsIGZpZWxkTmFtZSwgY2FsbGJhY2tdID0gYXJncztcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKFwiZ2V0XCIgLyogR3RhZ0NvbW1hbmQuR0VUICovLCBtZWFzdXJlbWVudElkLCBmaWVsZE5hbWUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2N1c3RvbVBhcmFtc10gPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgU0VULCBzZWNvbmQgYXJnIG11c3QgYmUgcGFyYW1zLlxyXG4gICAgICAgICAgICAgICAgZ3RhZ0NvcmUoXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIGN1c3RvbVBhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBndGFnQ29yZShjb21tYW5kLCAuLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGd0YWdXcmFwcGVyO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGdsb2JhbCBndGFnIGZ1bmN0aW9uIG9yIHdyYXBzIGV4aXN0aW5nIG9uZSBpZiBmb3VuZC5cclxuICogVGhpcyB3cmFwcGVkIGZ1bmN0aW9uIGF0dGFjaGVzIEZpcmViYXNlIGluc3RhbmNlIElEIChGSUQpIHRvIGd0YWcgJ2NvbmZpZycgYW5kXHJcbiAqICdldmVudCcgY2FsbHMgdGhhdCBiZWxvbmcgdG8gdGhlIEdBSUQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgRmlyZWJhc2UgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBpbml0aWFsaXphdGlvblByb21pc2VzTWFwIE1hcCBvZiBhcHBJZHMgdG8gdGhlaXIgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0IEFycmF5IG9mIGR5bmFtaWMgY29uZmlnIGZldGNoIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZFRvQXBwSWQgTWFwIG9mIEdBIG1lYXN1cmVtZW50SURzIHRvIGNvcnJlc3BvbmRpbmcgRmlyZWJhc2UgYXBwSWQuXHJcbiAqIEBwYXJhbSBkYXRhTGF5ZXJOYW1lIE5hbWUgb2YgZ2xvYmFsIEdBIGRhdGFsYXllciBhcnJheS5cclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbk5hbWUgTmFtZSBvZiBnbG9iYWwgZ3RhZyBmdW5jdGlvbiAoXCJndGFnXCIgaWYgbm90IHVzZXItc3BlY2lmaWVkKS5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBPckNyZWF0ZUd0YWcoaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGRhdGFMYXllck5hbWUsIGd0YWdGdW5jdGlvbk5hbWUpIHtcclxuICAgIC8vIENyZWF0ZSBhIGJhc2ljIGNvcmUgZ3RhZyBmdW5jdGlvblxyXG4gICAgbGV0IGd0YWdDb3JlID0gZnVuY3Rpb24gKC4uLl9hcmdzKSB7XHJcbiAgICAgICAgLy8gTXVzdCBwdXNoIElBcmd1bWVudHMgb2JqZWN0LCBub3QgYW4gYXJyYXkuXHJcbiAgICAgICAgd2luZG93W2RhdGFMYXllck5hbWVdLnB1c2goYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgICAvLyBSZXBsYWNlIGl0IHdpdGggZXhpc3Rpbmcgb25lIGlmIGZvdW5kXHJcbiAgICBpZiAod2luZG93W2d0YWdGdW5jdGlvbk5hbWVdICYmXHJcbiAgICAgICAgdHlwZW9mIHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBndGFnQ29yZSA9IHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXTtcclxuICAgIH1cclxuICAgIHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXSA9IHdyYXBHdGFnKGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGd0YWdDb3JlLFxyXG4gICAgICAgIHdyYXBwZWRHdGFnOiB3aW5kb3dbZ3RhZ0Z1bmN0aW9uTmFtZV1cclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHNjcmlwdCB0YWcgaW4gdGhlIERPTSBtYXRjaGluZyBib3RoIHRoZSBndGFnIHVybCBwYXR0ZXJuXHJcbiAqIGFuZCB0aGUgcHJvdmlkZWQgZGF0YSBsYXllciBuYW1lLlxyXG4gKi9cclxuZnVuY3Rpb24gZmluZEd0YWdTY3JpcHRPblBhZ2UoZGF0YUxheWVyTmFtZSkge1xyXG4gICAgY29uc3Qgc2NyaXB0VGFncyA9IHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBPYmplY3QudmFsdWVzKHNjcmlwdFRhZ3MpKSB7XHJcbiAgICAgICAgaWYgKHRhZy5zcmMgJiZcclxuICAgICAgICAgICAgdGFnLnNyYy5pbmNsdWRlcyhHVEFHX1VSTCkgJiZcclxuICAgICAgICAgICAgdGFnLnNyYy5pbmNsdWRlcyhkYXRhTGF5ZXJOYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBCYWNrb2ZmIGZhY3RvciBmb3IgNTAzIGVycm9ycywgd2hpY2ggd2Ugd2FudCB0byBiZSBjb25zZXJ2YXRpdmUgYWJvdXRcclxuICogdG8gYXZvaWQgb3ZlcmxvYWRpbmcgc2VydmVycy4gRWFjaCByZXRyeSBpbnRlcnZhbCB3aWxsIGJlXHJcbiAqIEJBU0VfSU5URVJWQUxfTUlMTElTICogTE9OR19SRVRSWV9GQUNUT1IgXiByZXRyeUNvdW50LCBzbyB0aGUgc2Vjb25kIG9uZVxyXG4gKiB3aWxsIGJlIH4zMCBzZWNvbmRzICh3aXRoIGZ1enppbmcpLlxyXG4gKi9cclxuY29uc3QgTE9OR19SRVRSWV9GQUNUT1IgPSAzMDtcclxuLyoqXHJcbiAqIEJhc2Ugd2FpdCBpbnRlcnZhbCB0byBtdWx0aXBsaWVkIGJ5IGJhY2tvZmZGYWN0b3JeYmFja29mZkNvdW50LlxyXG4gKi9cclxuY29uc3QgQkFTRV9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogU3R1YmJhYmxlIHJldHJ5IGRhdGEgc3RvcmFnZSBjbGFzcy5cclxuICovXHJcbmNsYXNzIFJldHJ5RGF0YSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aHJvdHRsZU1ldGFkYXRhID0ge30sIGludGVydmFsTWlsbGlzID0gQkFTRV9JTlRFUlZBTF9NSUxMSVMpIHtcclxuICAgICAgICB0aGlzLnRocm90dGxlTWV0YWRhdGEgPSB0aHJvdHRsZU1ldGFkYXRhO1xyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWxNaWxsaXMgPSBpbnRlcnZhbE1pbGxpcztcclxuICAgIH1cclxuICAgIGdldFRocm90dGxlTWV0YWRhdGEoYXBwSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aHJvdHRsZU1ldGFkYXRhW2FwcElkXTtcclxuICAgIH1cclxuICAgIHNldFRocm90dGxlTWV0YWRhdGEoYXBwSWQsIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy50aHJvdHRsZU1ldGFkYXRhW2FwcElkXSA9IG1ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlVGhyb3R0bGVNZXRhZGF0YShhcHBJZCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGRlZmF1bHRSZXRyeURhdGEgPSBuZXcgUmV0cnlEYXRhKCk7XHJcbi8qKlxyXG4gKiBTZXQgR0VUIHJlcXVlc3QgaGVhZGVycy5cclxuICogQHBhcmFtIGFwaUtleSBBcHAgQVBJIGtleS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEhlYWRlcnMoYXBpS2V5KSB7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICd4LWdvb2ctYXBpLWtleSc6IGFwaUtleVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIEZldGNoZXMgZHluYW1pYyBjb25maWcgZnJvbSBiYWNrZW5kLlxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcCB0byBmZXRjaCBjb25maWcgZm9yLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEeW5hbWljQ29uZmlnKGFwcEZpZWxkcykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyBhcHBJZCwgYXBpS2V5IH0gPSBhcHBGaWVsZHM7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczogZ2V0SGVhZGVycyhhcGlLZXkpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgYXBwVXJsID0gRFlOQU1JQ19DT05GSUdfVVJMLnJlcGxhY2UoJ3thcHAtaWR9JywgYXBwSWQpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcHBVcmwsIHJlcXVlc3QpO1xyXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyAhPT0gMzA0KSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFRyeSB0byBnZXQgYW55IGVycm9yIG1lc3NhZ2UgdGV4dCBmcm9tIHNlcnZlciByZXNwb25zZS5cclxuICAgICAgICAgICAgY29uc3QganNvblJlc3BvbnNlID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XHJcbiAgICAgICAgICAgIGlmICgoX2EgPSBqc29uUmVzcG9uc2UuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBqc29uUmVzcG9uc2UuZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2lnbm9yZWQpIHsgfVxyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiY29uZmlnLWZldGNoLWZhaWxlZFwiIC8qIEFuYWx5dGljc0Vycm9yLkNPTkZJR19GRVRDSF9GQUlMRUQgKi8sIHtcclxuICAgICAgICAgICAgaHR0cFN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxyXG4gICAgICAgICAgICByZXNwb25zZU1lc3NhZ2U6IGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG4vKipcclxuICogRmV0Y2hlcyBkeW5hbWljIGNvbmZpZyBmcm9tIGJhY2tlbmQsIHJldHJ5aW5nIGlmIGZhaWxlZC5cclxuICogQHBhcmFtIGFwcCBGaXJlYmFzZSBhcHAgdG8gZmV0Y2ggY29uZmlnIGZvci5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeShhcHAsIFxyXG4vLyByZXRyeURhdGEgYW5kIHRpbWVvdXRNaWxsaXMgYXJlIHBhcmFtZXRlcml6ZWQgdG8gYWxsb3cgcGFzc2luZyBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgdGVzdGluZy5cclxucmV0cnlEYXRhID0gZGVmYXVsdFJldHJ5RGF0YSwgdGltZW91dE1pbGxpcykge1xyXG4gICAgY29uc3QgeyBhcHBJZCwgYXBpS2V5LCBtZWFzdXJlbWVudElkIH0gPSBhcHAub3B0aW9ucztcclxuICAgIGlmICghYXBwSWQpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQUF9JRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwaUtleSkge1xyXG4gICAgICAgIGlmIChtZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtZWFzdXJlbWVudElkLFxyXG4gICAgICAgICAgICAgICAgYXBwSWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcGkta2V5XCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBJX0tFWSAqLyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aHJvdHRsZU1ldGFkYXRhID0gcmV0cnlEYXRhLmdldFRocm90dGxlTWV0YWRhdGEoYXBwSWQpIHx8IHtcclxuICAgICAgICBiYWNrb2ZmQ291bnQ6IDAsXHJcbiAgICAgICAgdGhyb3R0bGVFbmRUaW1lTWlsbGlzOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2lnbmFsID0gbmV3IEFuYWx5dGljc0Fib3J0U2lnbmFsKCk7XHJcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgICAvLyBOb3RlIGEgdmVyeSBsb3cgZGVsYXksIGVnIDwgMTBtcywgY2FuIGVsYXBzZSBiZWZvcmUgbGlzdGVuZXJzIGFyZSBpbml0aWFsaXplZC5cclxuICAgICAgICBzaWduYWwuYWJvcnQoKTtcclxuICAgIH0sIHRpbWVvdXRNaWxsaXMgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXRNaWxsaXMgOiBGRVRDSF9USU1FT1VUX01JTExJUyk7XHJcbiAgICByZXR1cm4gYXR0ZW1wdEZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeSh7IGFwcElkLCBhcGlLZXksIG1lYXN1cmVtZW50SWQgfSwgdGhyb3R0bGVNZXRhZGF0YSwgc2lnbmFsLCByZXRyeURhdGEpO1xyXG59XHJcbi8qKlxyXG4gKiBSdW5zIG9uZSByZXRyeSBhdHRlbXB0LlxyXG4gKiBAcGFyYW0gYXBwRmllbGRzIE5lY2Vzc2FyeSBhcHAgY29uZmlnIGZpZWxkcy5cclxuICogQHBhcmFtIHRocm90dGxlTWV0YWRhdGEgT25nb2luZyBtZXRhZGF0YSB0byBkZXRlcm1pbmUgdGhyb3R0bGluZyB0aW1lcy5cclxuICogQHBhcmFtIHNpZ25hbCBBYm9ydCBzaWduYWwuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBhdHRlbXB0RmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KGFwcEZpZWxkcywgeyB0aHJvdHRsZUVuZFRpbWVNaWxsaXMsIGJhY2tvZmZDb3VudCB9LCBzaWduYWwsIHJldHJ5RGF0YSA9IGRlZmF1bHRSZXRyeURhdGEgLy8gZm9yIHRlc3RpbmdcclxuKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCB7IGFwcElkLCBtZWFzdXJlbWVudElkIH0gPSBhcHBGaWVsZHM7XHJcbiAgICAvLyBTdGFydHMgd2l0aCBhIChwb3RlbnRpYWxseSB6ZXJvKSB0aW1lb3V0IHRvIHN1cHBvcnQgcmVzdW1wdGlvbiBmcm9tIHN0b3JlZCBzdGF0ZS5cclxuICAgIC8vIEVuc3VyZXMgdGhlIHRocm90dGxlIGVuZCB0aW1lIGlzIGhvbm9yZWQgaWYgdGhlIGxhc3QgYXR0ZW1wdCB0aW1lZCBvdXQuXHJcbiAgICAvLyBOb3RlIHRoZSBTREsgd2lsbCBuZXZlciBtYWtlIGEgcmVxdWVzdCBpZiB0aGUgZmV0Y2ggdGltZW91dCBleHBpcmVzIGF0IHRoaXMgcG9pbnQuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IHNldEFib3J0YWJsZVRpbWVvdXQoc2lnbmFsLCB0aHJvdHRsZUVuZFRpbWVNaWxsaXMpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihgVGltZWQgb3V0IGZldGNoaW5nIHRoaXMgRmlyZWJhc2UgYXBwJ3MgbWVhc3VyZW1lbnQgSUQgZnJvbSB0aGUgc2VydmVyLmAgK1xyXG4gICAgICAgICAgICAgICAgYCBGYWxsaW5nIGJhY2sgdG8gdGhlIG1lYXN1cmVtZW50IElEICR7bWVhc3VyZW1lbnRJZH1gICtcclxuICAgICAgICAgICAgICAgIGAgcHJvdmlkZWQgaW4gdGhlIFwibWVhc3VyZW1lbnRJZFwiIGZpZWxkIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFske2UgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tZXNzYWdlfV1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHsgYXBwSWQsIG1lYXN1cmVtZW50SWQgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaER5bmFtaWNDb25maWcoYXBwRmllbGRzKTtcclxuICAgICAgICAvLyBOb3RlIHRoZSBTREsgb25seSBjbGVhcnMgdGhyb3R0bGUgc3RhdGUgaWYgcmVzcG9uc2UgaXMgc3VjY2VzcyBvciBub24tcmV0cmlhYmxlLlxyXG4gICAgICAgIHJldHJ5RGF0YS5kZWxldGVUaHJvdHRsZU1ldGFkYXRhKGFwcElkKTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gZTtcclxuICAgICAgICBpZiAoIWlzUmV0cmlhYmxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgIHJldHJ5RGF0YS5kZWxldGVUaHJvdHRsZU1ldGFkYXRhKGFwcElkKTtcclxuICAgICAgICAgICAgaWYgKG1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGBGYWlsZWQgdG8gZmV0Y2ggdGhpcyBGaXJlYmFzZSBhcHAncyBtZWFzdXJlbWVudCBJRCBmcm9tIHRoZSBzZXJ2ZXIuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYCBGYWxsaW5nIGJhY2sgdG8gdGhlIG1lYXN1cmVtZW50IElEICR7bWVhc3VyZW1lbnRJZH1gICtcclxuICAgICAgICAgICAgICAgICAgICBgIHByb3ZpZGVkIGluIHRoZSBcIm1lYXN1cmVtZW50SWRcIiBmaWVsZCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBbJHtlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZX1dYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBhcHBJZCwgbWVhc3VyZW1lbnRJZCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBiYWNrb2ZmTWlsbGlzID0gTnVtYmVyKChfYSA9IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5jdXN0b21EYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaHR0cFN0YXR1cykgPT09IDUwM1xyXG4gICAgICAgICAgICA/IGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMoYmFja29mZkNvdW50LCByZXRyeURhdGEuaW50ZXJ2YWxNaWxsaXMsIExPTkdfUkVUUllfRkFDVE9SKVxyXG4gICAgICAgICAgICA6IGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMoYmFja29mZkNvdW50LCByZXRyeURhdGEuaW50ZXJ2YWxNaWxsaXMpO1xyXG4gICAgICAgIC8vIEluY3JlbWVudHMgYmFja29mZiBzdGF0ZS5cclxuICAgICAgICBjb25zdCB0aHJvdHRsZU1ldGFkYXRhID0ge1xyXG4gICAgICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXM6IERhdGUubm93KCkgKyBiYWNrb2ZmTWlsbGlzLFxyXG4gICAgICAgICAgICBiYWNrb2ZmQ291bnQ6IGJhY2tvZmZDb3VudCArIDFcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFBlcnNpc3RzIHN0YXRlLlxyXG4gICAgICAgIHJldHJ5RGF0YS5zZXRUaHJvdHRsZU1ldGFkYXRhKGFwcElkLCB0aHJvdHRsZU1ldGFkYXRhKTtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYENhbGxpbmcgYXR0ZW1wdEZldGNoIGFnYWluIGluICR7YmFja29mZk1pbGxpc30gbWlsbGlzYCk7XHJcbiAgICAgICAgcmV0dXJuIGF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwRmllbGRzLCB0aHJvdHRsZU1ldGFkYXRhLCBzaWduYWwsIHJldHJ5RGF0YSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFN1cHBvcnRzIHdhaXRpbmcgb24gYSBiYWNrb2ZmIGJ5OlxyXG4gKlxyXG4gKiA8dWw+XHJcbiAqICAgPGxpPlByb21pc2lmeWluZyBzZXRUaW1lb3V0LCBzbyB3ZSBjYW4gc2V0IGEgdGltZW91dCBpbiBvdXIgUHJvbWlzZSBjaGFpbjwvbGk+XHJcbiAqICAgPGxpPkxpc3RlbmluZyBvbiBhIHNpZ25hbCBidXMgZm9yIGFib3J0IGV2ZW50cywganVzdCBsaWtlIHRoZSBGZXRjaCBBUEk8L2xpPlxyXG4gKiAgIDxsaT5GYWlsaW5nIGluIHRoZSBzYW1lIHdheSB0aGUgRmV0Y2ggQVBJIGZhaWxzLCBzbyB0aW1pbmcgb3V0IGEgbGl2ZSByZXF1ZXN0IGFuZCBhIHRocm90dGxlZFxyXG4gKiAgICAgICByZXF1ZXN0IGFwcGVhciB0aGUgc2FtZS48L2xpPlxyXG4gKiA8L3VsPlxyXG4gKlxyXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0QWJvcnRhYmxlVGltZW91dChzaWduYWwsIHRocm90dGxlRW5kVGltZU1pbGxpcykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAvLyBEZXJpdmVzIGJhY2tvZmYgZnJvbSBnaXZlbiBlbmQgdGltZSwgbm9ybWFsaXppbmcgbmVnYXRpdmUgbnVtYmVycyB0byB6ZXJvLlxyXG4gICAgICAgIGNvbnN0IGJhY2tvZmZNaWxsaXMgPSBNYXRoLm1heCh0aHJvdHRsZUVuZFRpbWVNaWxsaXMgLSBEYXRlLm5vdygpLCAwKTtcclxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChyZXNvbHZlLCBiYWNrb2ZmTWlsbGlzKTtcclxuICAgICAgICAvLyBBZGRzIGxpc3RlbmVyLCByYXRoZXIgdGhhbiBzZXRzIG9uYWJvcnQsIGJlY2F1c2Ugc2lnbmFsIGlzIGEgc2hhcmVkIG9iamVjdC5cclxuICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3QgY29tcGxldGVzIGJlZm9yZSB0aGlzIHRpbWVvdXQsIHRoZSByZWplY3Rpb24gaGFzIG5vIGVmZmVjdC5cclxuICAgICAgICAgICAgcmVqZWN0KEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZmV0Y2gtdGhyb3R0bGVcIiAvKiBBbmFseXRpY3NFcnJvci5GRVRDSF9USFJPVFRMRSAqLywge1xyXG4gICAgICAgICAgICAgICAgdGhyb3R0bGVFbmRUaW1lTWlsbGlzXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHtAbGluayBFcnJvcn0gaW5kaWNhdGVzIGEgZmV0Y2ggcmVxdWVzdCBtYXkgc3VjY2VlZCBsYXRlci5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmV0cmlhYmxlRXJyb3IoZSkge1xyXG4gICAgaWYgKCEoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHx8ICFlLmN1c3RvbURhdGEpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBVc2VzIHN0cmluZyBpbmRleCBkZWZpbmVkIGJ5IEVycm9yRGF0YSwgd2hpY2ggRmlyZWJhc2VFcnJvciBpbXBsZW1lbnRzLlxyXG4gICAgY29uc3QgaHR0cFN0YXR1cyA9IE51bWJlcihlLmN1c3RvbURhdGFbJ2h0dHBTdGF0dXMnXSk7XHJcbiAgICByZXR1cm4gKGh0dHBTdGF0dXMgPT09IDQyOSB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwMCB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwMyB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwNCk7XHJcbn1cclxuLyoqXHJcbiAqIFNoaW1zIGEgbWluaW1hbCBBYm9ydFNpZ25hbCAoY29waWVkIGZyb20gUmVtb3RlIENvbmZpZykuXHJcbiAqXHJcbiAqIDxwPkFib3J0Q29udHJvbGxlcidzIEFib3J0U2lnbmFsIGNvbnZlbmllbnRseSBkZWNvdXBsZXMgZmV0Y2ggdGltZW91dCBsb2dpYyBmcm9tIG90aGVyIGFzcGVjdHNcclxuICogb2YgbmV0d29ya2luZywgc3VjaCBhcyByZXRyaWVzLiBGaXJlYmFzZSBkb2Vzbid0IHVzZSBBYm9ydENvbnRyb2xsZXIgZW5vdWdoIHRvIGp1c3RpZnkgYVxyXG4gKiBwb2x5ZmlsbCByZWNvbW1lbmRhdGlvbiwgbGlrZSB3ZSBkbyB3aXRoIHRoZSBGZXRjaCBBUEksIGJ1dCB0aGlzIG1pbmltYWwgc2hpbSBjYW4gZWFzaWx5IGJlXHJcbiAqIHN3YXBwZWQgb3V0IGlmL3doZW4gd2UgZG8uXHJcbiAqL1xyXG5jbGFzcyBBbmFseXRpY3NBYm9ydFNpZ25hbCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgYWJvcnQoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZlbnQgcGFyYW1ldGVycyB0byBzZXQgb24gJ2d0YWcnIGR1cmluZyBpbml0aWFsaXphdGlvbi5cclxuICovXHJcbmxldCBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdDtcclxuLyoqXHJcbiAqIExvZ3MgYW4gYW5hbHl0aWNzIGV2ZW50IHRocm91Z2ggdGhlIEZpcmViYXNlIFNESy5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gZXZlbnROYW1lIEdvb2dsZSBBbmFseXRpY3MgZXZlbnQgbmFtZSwgY2hvb3NlIGZyb20gc3RhbmRhcmQgbGlzdCBvciB1c2UgYSBjdXN0b20gc3RyaW5nLlxyXG4gKiBAcGFyYW0gZXZlbnRQYXJhbXMgQW5hbHl0aWNzIGV2ZW50IHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBsb2dFdmVudCQxKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8sIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBldmVudFBhcmFtcyksIHsgJ3NlbmRfdG8nOiBtZWFzdXJlbWVudElkIH0pO1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8sIGV2ZW50TmFtZSwgcGFyYW1zKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2V0IHNjcmVlbl9uYW1lIHBhcmFtZXRlciBmb3IgdGhpcyBHb29nbGUgQW5hbHl0aWNzIElELlxyXG4gKlxyXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGxvZ0V2ZW50fSB3aXRoIGBldmVudE5hbWVgIGFzICdzY3JlZW5fdmlldycgYW5kIGFkZCByZWxldmFudCBgZXZlbnRQYXJhbXNgLlxyXG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2FuYWx5dGljcy9zY3JlZW52aWV3cyB8IFRyYWNrIFNjcmVlbnZpZXdzfS5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gc2NyZWVuTmFtZSBTY3JlZW4gbmFtZSBzdHJpbmcgdG8gc2V0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0Q3VycmVudFNjcmVlbiQxKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBzY3JlZW5OYW1lLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgeyAnc2NyZWVuX25hbWUnOiBzY3JlZW5OYW1lIH0pO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBtZWFzdXJlbWVudElkLCB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgJ3NjcmVlbl9uYW1lJzogc2NyZWVuTmFtZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZXQgdXNlcl9pZCBwYXJhbWV0ZXIgZm9yIHRoaXMgR29vZ2xlIEFuYWx5dGljcyBJRC5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gaWQgVXNlciBJRCBzdHJpbmcgdG8gc2V0XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzZXRVc2VySWQkMShndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSwgaWQsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCB7ICd1c2VyX2lkJzogaWQgfSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAndXNlcl9pZCc6IGlkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFNldCBhbGwgb3RoZXIgdXNlciBwcm9wZXJ0aWVzIG90aGVyIHRoYW4gdXNlcl9pZCBhbmQgc2NyZWVuX25hbWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICogQHBhcmFtIHByb3BlcnRpZXMgTWFwIG9mIHVzZXIgcHJvcGVydGllcyB0byBzZXRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldFVzZXJQcm9wZXJ0aWVzJDEoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgY29uc3QgZmxhdFByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICAvLyB1c2UgZG90IG5vdGF0aW9uIGZvciBtZXJnZSBiZWhhdmlvciBpbiBndGFnLmpzXHJcbiAgICAgICAgICAgIGZsYXRQcm9wZXJ0aWVzW2B1c2VyX3Byb3BlcnRpZXMuJHtrZXl9YF0gPSBwcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgZmxhdFByb3BlcnRpZXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBtZWFzdXJlbWVudElkLCB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgJ3VzZXJfcHJvcGVydGllcyc6IHByb3BlcnRpZXNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmV0cmlldmVzIGEgdW5pcXVlIEdvb2dsZSBBbmFseXRpY3MgaWRlbnRpZmllciBmb3IgdGhlIHdlYiBjbGllbnQuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhNC9yZWZlcmVuY2UvY29uZmlnI2NsaWVudF9pZCB8IGNsaWVudF9pZH0uXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGludGVybmFsR2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UpIHtcclxuICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImdldFwiIC8qIEd0YWdDb21tYW5kLkdFVCAqLywgbWVhc3VyZW1lbnRJZCwgJ2NsaWVudF9pZCcsIChjbGllbnRJZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWNsaWVudElkKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1jbGllbnQtaWRcIiAvKiBBbmFseXRpY3NFcnJvci5OT19DTElFTlRfSUQgKi8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKGNsaWVudElkKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTZXQgd2hldGhlciBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBlbmFibGVkIElmIHRydWUsIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBJRC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkJDEoaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBlbmFibGVkKSB7XHJcbiAgICBjb25zdCBtZWFzdXJlbWVudElkID0gYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgd2luZG93W2BnYS1kaXNhYmxlLSR7bWVhc3VyZW1lbnRJZH1gXSA9ICFlbmFibGVkO1xyXG59XHJcbi8qKlxyXG4gKiBDb25zZW50IHBhcmFtZXRlcnMgdG8gZGVmYXVsdCB0byBkdXJpbmcgJ2d0YWcnIGluaXRpYWxpemF0aW9uLlxyXG4gKi9cclxubGV0IGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0O1xyXG4vKipcclxuICogU2V0cyB0aGUgdmFyaWFibGUge0BsaW5rIGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0fSBmb3IgdXNlIGluIHRoZSBpbml0aWFsaXphdGlvbiBvZlxyXG4gKiBhbmFseXRpY3MuXHJcbiAqXHJcbiAqIEBwYXJhbSBjb25zZW50U2V0dGluZ3MgTWFwcyB0aGUgYXBwbGljYWJsZSBlbmQgdXNlciBjb25zZW50IHN0YXRlIGZvciBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gX3NldENvbnNlbnREZWZhdWx0Rm9ySW5pdChjb25zZW50U2V0dGluZ3MpIHtcclxuICAgIGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0ID0gY29uc2VudFNldHRpbmdzO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIHRoZSB2YXJpYWJsZSBgZGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXRgIGZvciB1c2UgaW4gdGhlIGluaXRpYWxpemF0aW9uIG9mXHJcbiAqIGFuYWx5dGljcy5cclxuICpcclxuICogQHBhcmFtIGN1c3RvbVBhcmFtcyBBbnkgY3VzdG9tIHBhcmFtcyB0aGUgdXNlciBtYXkgcGFzcyB0byBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KGN1c3RvbVBhcmFtcykge1xyXG4gICAgZGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQgPSBjdXN0b21QYXJhbXM7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVJbmRleGVkREIoKSB7XHJcbiAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICBsb2dnZXIud2FybihFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImluZGV4ZWRkYi11bmF2YWlsYWJsZVwiIC8qIEFuYWx5dGljc0Vycm9yLklOREVYRUREQl9VTkFWQUlMQUJMRSAqLywge1xyXG4gICAgICAgICAgICBlcnJvckluZm86ICdJbmRleGVkREIgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LidcclxuICAgICAgICB9KS5tZXNzYWdlKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5ERVhFRERCX1VOQVZBSUxBQkxFICovLCB7XHJcbiAgICAgICAgICAgICAgICBlcnJvckluZm86IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS50b1N0cmluZygpXHJcbiAgICAgICAgICAgIH0pLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgdGhlIGFuYWx5dGljcyBpbnN0YW5jZSBpbiBndGFnLmpzIGJ5IGNhbGxpbmcgY29uZmlnIGNvbW1hbmQgd2l0aCBmaWQuXHJcbiAqXHJcbiAqIE5PVEU6IFdlIGNvbWJpbmUgYW5hbHl0aWNzIGluaXRpYWxpemF0aW9uIGFuZCBzZXR0aW5nIGZpZCB0b2dldGhlciBiZWNhdXNlIHdlIHdhbnQgZmlkIHRvIGJlXHJcbiAqIHBhcnQgb2YgdGhlIGBwYWdlX3ZpZXdgIGV2ZW50IHRoYXQncyBzZW50IGR1cmluZyB0aGUgaW5pdGlhbGl6YXRpb25cclxuICogQHBhcmFtIGFwcCBGaXJlYmFzZSBhcHBcclxuICogQHBhcmFtIGd0YWdDb3JlIFRoZSBndGFnIGZ1bmN0aW9uIHRoYXQncyBub3Qgd3JhcHBlZC5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgYWxsIGR5bmFtaWMgY29uZmlnIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZFRvQXBwSWQgTWFwcyBtZWFzdXJlbWVudElEIHRvIGFwcElELlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyBfRmlyZWJhc2VJbnN0YWxsYXRpb25zSW50ZXJuYWwgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEByZXR1cm5zIE1lYXN1cmVtZW50IElELlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2luaXRpYWxpemVBbmFseXRpY3MoYXBwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgaW5zdGFsbGF0aW9ucywgZ3RhZ0NvcmUsIGRhdGFMYXllck5hbWUsIG9wdGlvbnMpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IGR5bmFtaWNDb25maWdQcm9taXNlID0gZmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KGFwcCk7XHJcbiAgICAvLyBPbmNlIGZldGNoZWQsIG1hcCBtZWFzdXJlbWVudElkcyB0byBhcHBJZCwgZm9yIGVhc2Ugb2YgbG9va3VwIGluIHdyYXBwZWQgZ3RhZyBmdW5jdGlvbi5cclxuICAgIGR5bmFtaWNDb25maWdQcm9taXNlXHJcbiAgICAgICAgLnRoZW4oY29uZmlnID0+IHtcclxuICAgICAgICBtZWFzdXJlbWVudElkVG9BcHBJZFtjb25maWcubWVhc3VyZW1lbnRJZF0gPSBjb25maWcuYXBwSWQ7XHJcbiAgICAgICAgaWYgKGFwcC5vcHRpb25zLm1lYXN1cmVtZW50SWQgJiZcclxuICAgICAgICAgICAgY29uZmlnLm1lYXN1cmVtZW50SWQgIT09IGFwcC5vcHRpb25zLm1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFRoZSBtZWFzdXJlbWVudCBJRCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnICgke2FwcC5vcHRpb25zLm1lYXN1cmVtZW50SWR9KWAgK1xyXG4gICAgICAgICAgICAgICAgYCBkb2VzIG5vdCBtYXRjaCB0aGUgbWVhc3VyZW1lbnQgSUQgZmV0Y2hlZCBmcm9tIHRoZSBzZXJ2ZXIgKCR7Y29uZmlnLm1lYXN1cmVtZW50SWR9KS5gICtcclxuICAgICAgICAgICAgICAgIGAgVG8gZW5zdXJlIGFuYWx5dGljcyBldmVudHMgYXJlIGFsd2F5cyBzZW50IHRvIHRoZSBjb3JyZWN0IEFuYWx5dGljcyBwcm9wZXJ0eSxgICtcclxuICAgICAgICAgICAgICAgIGAgdXBkYXRlIHRoZWAgK1xyXG4gICAgICAgICAgICAgICAgYCBtZWFzdXJlbWVudCBJRCBmaWVsZCBpbiB0aGUgbG9jYWwgY29uZmlnIG9yIHJlbW92ZSBpdCBmcm9tIHRoZSBsb2NhbCBjb25maWcuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiBsb2dnZXIuZXJyb3IoZSkpO1xyXG4gICAgLy8gQWRkIHRvIGxpc3QgdG8gdHJhY2sgc3RhdGUgb2YgYWxsIGR5bmFtaWMgY29uZmlnIHByb21pc2VzLlxyXG4gICAgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdC5wdXNoKGR5bmFtaWNDb25maWdQcm9taXNlKTtcclxuICAgIGNvbnN0IGZpZFByb21pc2UgPSB2YWxpZGF0ZUluZGV4ZWREQigpLnRoZW4oZW52SXNWYWxpZCA9PiB7XHJcbiAgICAgICAgaWYgKGVudklzVmFsaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbGxhdGlvbnMuZ2V0SWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBbZHluYW1pY0NvbmZpZywgZmlkXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBkeW5hbWljQ29uZmlnUHJvbWlzZSxcclxuICAgICAgICBmaWRQcm9taXNlXHJcbiAgICBdKTtcclxuICAgIC8vIERldGVjdCBpZiB1c2VyIGhhcyBhbHJlYWR5IHB1dCB0aGUgZ3RhZyA8c2NyaXB0PiB0YWcgb24gdGhpcyBwYWdlIHdpdGggdGhlIHBhc3NlZCBpblxyXG4gICAgLy8gZGF0YSBsYXllciBuYW1lLlxyXG4gICAgaWYgKCFmaW5kR3RhZ1NjcmlwdE9uUGFnZShkYXRhTGF5ZXJOYW1lKSkge1xyXG4gICAgICAgIGluc2VydFNjcmlwdFRhZyhkYXRhTGF5ZXJOYW1lLCBkeW5hbWljQ29uZmlnLm1lYXN1cmVtZW50SWQpO1xyXG4gICAgfVxyXG4gICAgLy8gRGV0ZWN0cyBpZiB0aGVyZSBhcmUgY29uc2VudCBzZXR0aW5ncyB0aGF0IG5lZWQgdG8gYmUgY29uZmlndXJlZC5cclxuICAgIGlmIChkZWZhdWx0Q29uc2VudFNldHRpbmdzRm9ySW5pdCkge1xyXG4gICAgICAgIGd0YWdDb3JlKFwiY29uc2VudFwiIC8qIEd0YWdDb21tYW5kLkNPTlNFTlQgKi8sICdkZWZhdWx0JywgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQpO1xyXG4gICAgICAgIF9zZXRDb25zZW50RGVmYXVsdEZvckluaXQodW5kZWZpbmVkKTtcclxuICAgIH1cclxuICAgIC8vIFRoaXMgY29tbWFuZCBpbml0aWFsaXplcyBndGFnLmpzIGFuZCBvbmx5IG5lZWRzIHRvIGJlIGNhbGxlZCBvbmNlIGZvciB0aGUgZW50aXJlIHdlYiBhcHAsXHJcbiAgICAvLyBidXQgc2luY2UgaXQgaXMgaWRlbXBvdGVudCwgd2UgY2FuIGNhbGwgaXQgbXVsdGlwbGUgdGltZXMuXHJcbiAgICAvLyBXZSBrZWVwIGl0IHRvZ2V0aGVyIHdpdGggb3RoZXIgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGJldHRlciBjb2RlIHN0cnVjdHVyZS5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBndGFnQ29yZSgnanMnLCBuZXcgRGF0ZSgpKTtcclxuICAgIC8vIFVzZXIgY29uZmlnIGFkZGVkIGZpcnN0LiBXZSBkb24ndCB3YW50IHVzZXJzIHRvIGFjY2lkZW50YWxseSBvdmVyd3JpdGVcclxuICAgIC8vIGJhc2UgRmlyZWJhc2UgY29uZmlnIHByb3BlcnRpZXMuXHJcbiAgICBjb25zdCBjb25maWdQcm9wZXJ0aWVzID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbmZpZykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XHJcbiAgICAvLyBndWFyZCBhZ2FpbnN0IGRldmVsb3BlcnMgYWNjaWRlbnRhbGx5IHNldHRpbmcgcHJvcGVydGllcyB3aXRoIHByZWZpeCBgZmlyZWJhc2VfYFxyXG4gICAgY29uZmlnUHJvcGVydGllc1tPUklHSU5fS0VZXSA9ICdmaXJlYmFzZSc7XHJcbiAgICBjb25maWdQcm9wZXJ0aWVzLnVwZGF0ZSA9IHRydWU7XHJcbiAgICBpZiAoZmlkICE9IG51bGwpIHtcclxuICAgICAgICBjb25maWdQcm9wZXJ0aWVzW0dBX0ZJRF9LRVldID0gZmlkO1xyXG4gICAgfVxyXG4gICAgLy8gSXQgc2hvdWxkIGJlIHRoZSBmaXJzdCBjb25maWcgY29tbWFuZCBjYWxsZWQgb24gdGhpcyBHQS1JRFxyXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGlzIEdBLUlEIGFuZCBzZXQgRklEIG9uIGl0IHVzaW5nIHRoZSBndGFnIGNvbmZpZyBBUEkuXHJcbiAgICAvLyBOb3RlOiBUaGlzIHdpbGwgdHJpZ2dlciBhIHBhZ2VfdmlldyBldmVudCB1bmxlc3MgJ3NlbmRfcGFnZV92aWV3JyBpcyBzZXQgdG8gZmFsc2UgaW5cclxuICAgIC8vIGBjb25maWdQcm9wZXJ0aWVzYC5cclxuICAgIGd0YWdDb3JlKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBkeW5hbWljQ29uZmlnLm1lYXN1cmVtZW50SWQsIGNvbmZpZ1Byb3BlcnRpZXMpO1xyXG4gICAgLy8gRGV0ZWN0cyBpZiB0aGVyZSBpcyBkYXRhIHRoYXQgd2lsbCBiZSBzZXQgb24gZXZlcnkgZXZlbnQgbG9nZ2VkIGZyb20gdGhlIFNESy5cclxuICAgIGlmIChkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdCkge1xyXG4gICAgICAgIGd0YWdDb3JlKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdCk7XHJcbiAgICAgICAgX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZHluYW1pY0NvbmZpZy5tZWFzdXJlbWVudElkO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbmFseXRpY3MgU2VydmljZSBjbGFzcy5cclxuICovXHJcbmNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICB9XHJcbiAgICBfZGVsZXRlKCkge1xyXG4gICAgICAgIGRlbGV0ZSBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW3RoaXMuYXBwLm9wdGlvbnMuYXBwSWRdO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogTWFwcyBhcHBJZCB0byBmdWxsIGluaXRpYWxpemF0aW9uIHByb21pc2UuIFdyYXBwZWQgZ3RhZyBjYWxscyBtdXN0IHdhaXQgb25cclxuICogYWxsIG9yIHNvbWUgb2YgdGhlc2UsIGRlcGVuZGluZyBvbiB0aGUgY2FsbCdzIGBzZW5kX3RvYCBwYXJhbSBhbmQgdGhlIHN0YXR1c1xyXG4gKiBvZiB0aGUgZHluYW1pYyBjb25maWcgZmV0Y2hlcyAoc2VlIGJlbG93KS5cclxuICovXHJcbmxldCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwID0ge307XHJcbi8qKlxyXG4gKiBMaXN0IG9mIGR5bmFtaWMgY29uZmlnIGZldGNoIHByb21pc2VzLiBJbiBjZXJ0YWluIGNhc2VzLCB3cmFwcGVkIGd0YWcgY2FsbHNcclxuICogd2FpdCBvbiBhbGwgdGhlc2UgdG8gYmUgY29tcGxldGUgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIGl0IGNhbiBzZWxlY3RpdmVseVxyXG4gKiB3YWl0IGZvciBvbmx5IGNlcnRhaW4gaW5pdGlhbGl6YXRpb24gKEZJRCkgcHJvbWlzZXMgb3IgaWYgaXQgbXVzdCB3YWl0IGZvciBhbGwuXHJcbiAqL1xyXG5sZXQgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCA9IFtdO1xyXG4vKipcclxuICogTWFwcyBmZXRjaGVkIG1lYXN1cmVtZW50SWRzIHRvIGFwcElkLiBQb3B1bGF0ZWQgd2hlbiB0aGUgYXBwJ3MgZHluYW1pYyBjb25maWdcclxuICogZmV0Y2ggY29tcGxldGVzLiBJZiBhbHJlYWR5IHBvcHVsYXRlZCwgZ3RhZyBjb25maWcgY2FsbHMgY2FuIHVzZSB0aGlzIHRvXHJcbiAqIHNlbGVjdGl2ZWx5IHdhaXQgZm9yIG9ubHkgdGhpcyBhcHAncyBpbml0aWFsaXphdGlvbiBwcm9taXNlIChGSUQpIGluc3RlYWQgb2YgYWxsXHJcbiAqIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKi9cclxuY29uc3QgbWVhc3VyZW1lbnRJZFRvQXBwSWQgPSB7fTtcclxuLyoqXHJcbiAqIE5hbWUgZm9yIHdpbmRvdyBnbG9iYWwgZGF0YSBsYXllciBhcnJheSB1c2VkIGJ5IEdBOiBkZWZhdWx0cyB0byAnZGF0YUxheWVyJy5cclxuICovXHJcbmxldCBkYXRhTGF5ZXJOYW1lID0gJ2RhdGFMYXllcic7XHJcbi8qKlxyXG4gKiBOYW1lIGZvciB3aW5kb3cgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gdXNlZCBieSBHQTogZGVmYXVsdHMgdG8gJ2d0YWcnLlxyXG4gKi9cclxubGV0IGd0YWdOYW1lID0gJ2d0YWcnO1xyXG4vKipcclxuICogUmVwcm9kdWN0aW9uIG9mIHN0YW5kYXJkIGd0YWcgZnVuY3Rpb24gb3IgcmVmZXJlbmNlIHRvIGV4aXN0aW5nXHJcbiAqIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdC5cclxuICovXHJcbmxldCBndGFnQ29yZUZ1bmN0aW9uO1xyXG4vKipcclxuICogV3JhcHBlciBhcm91bmQgZ3RhZyBmdW5jdGlvbiB0aGF0IGVuc3VyZXMgRklEIGlzIHNlbnQgd2l0aCBhbGxcclxuICogcmVsZXZhbnQgZXZlbnQgYW5kIGNvbmZpZyBjYWxscy5cclxuICovXHJcbmxldCB3cmFwcGVkR3RhZ0Z1bmN0aW9uO1xyXG4vKipcclxuICogRmxhZyB0byBlbnN1cmUgcGFnZSBpbml0aWFsaXphdGlvbiBzdGVwcyAoY3JlYXRpb24gb3Igd3JhcHBpbmcgb2ZcclxuICogZGF0YUxheWVyIGFuZCBndGFnIHNjcmlwdCkgYXJlIG9ubHkgcnVuIG9uY2UgcGVyIHBhZ2UgbG9hZC5cclxuICovXHJcbmxldCBnbG9iYWxJbml0RG9uZSA9IGZhbHNlO1xyXG4vKipcclxuICogQ29uZmlndXJlcyBGaXJlYmFzZSBBbmFseXRpY3MgdG8gdXNlIGN1c3RvbSBgZ3RhZ2Agb3IgYGRhdGFMYXllcmAgbmFtZXMuXHJcbiAqIEludGVuZGVkIHRvIGJlIHVzZWQgaWYgYGd0YWcuanNgIHNjcmlwdCBoYXMgYmVlbiBpbnN0YWxsZWQgb25cclxuICogdGhpcyBwYWdlIGluZGVwZW5kZW50bHkgb2YgRmlyZWJhc2UgQW5hbHl0aWNzLCBhbmQgaXMgdXNpbmcgbm9uLWRlZmF1bHRcclxuICogbmFtZXMgZm9yIGVpdGhlciB0aGUgYGd0YWdgIGZ1bmN0aW9uIG9yIGZvciBgZGF0YUxheWVyYC5cclxuICogTXVzdCBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGdldEFuYWx5dGljcygpYCBvciBpdCB3b24ndFxyXG4gKiBoYXZlIGFueSBlZmZlY3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgLSBDdXN0b20gZ3RhZyBhbmQgZGF0YUxheWVyIG5hbWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0dGluZ3Mob3B0aW9ucykge1xyXG4gICAgaWYgKGdsb2JhbEluaXREb25lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQUxSRUFEWV9JTklUSUFMSVpFRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5kYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICAgICAgZGF0YUxheWVyTmFtZSA9IG9wdGlvbnMuZGF0YUxheWVyTmFtZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmd0YWdOYW1lKSB7XHJcbiAgICAgICAgZ3RhZ05hbWUgPSBvcHRpb25zLmd0YWdOYW1lO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgbm8gZW52aXJvbm1lbnQgbWlzbWF0Y2ggaXMgZm91bmQuXHJcbiAqIElmIGVudmlyb25tZW50IG1pc21hdGNoZXMgYXJlIGZvdW5kLCB0aHJvd3MgYW4gSU5WQUxJRF9BTkFMWVRJQ1NfQ09OVEVYVFxyXG4gKiBlcnJvciB0aGF0IGFsc28gbGlzdHMgZGV0YWlscyBmb3IgZWFjaCBtaXNtYXRjaCBmb3VuZC5cclxuICovXHJcbmZ1bmN0aW9uIHdhcm5PbkJyb3dzZXJDb250ZXh0TWlzbWF0Y2goKSB7XHJcbiAgICBjb25zdCBtaXNtYXRjaGVkRW52TWVzc2FnZXMgPSBbXTtcclxuICAgIGlmIChpc0Jyb3dzZXJFeHRlbnNpb24oKSkge1xyXG4gICAgICAgIG1pc21hdGNoZWRFbnZNZXNzYWdlcy5wdXNoKCdUaGlzIGlzIGEgYnJvd3NlciBleHRlbnNpb24gZW52aXJvbm1lbnQuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFyZUNvb2tpZXNFbmFibGVkKCkpIHtcclxuICAgICAgICBtaXNtYXRjaGVkRW52TWVzc2FnZXMucHVzaCgnQ29va2llcyBhcmUgbm90IGF2YWlsYWJsZS4nKTtcclxuICAgIH1cclxuICAgIGlmIChtaXNtYXRjaGVkRW52TWVzc2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGRldGFpbHMgPSBtaXNtYXRjaGVkRW52TWVzc2FnZXNcclxuICAgICAgICAgICAgLm1hcCgobWVzc2FnZSwgaW5kZXgpID0+IGAoJHtpbmRleCArIDF9KSAke21lc3NhZ2V9YClcclxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICBjb25zdCBlcnIgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtYW5hbHl0aWNzLWNvbnRleHRcIiAvKiBBbmFseXRpY3NFcnJvci5JTlZBTElEX0FOQUxZVElDU19DT05URVhUICovLCB7XHJcbiAgICAgICAgICAgIGVycm9ySW5mbzogZGV0YWlsc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxvZ2dlci53YXJuKGVyci5tZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW5hbHl0aWNzIGluc3RhbmNlIGZhY3RvcnkuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gZmFjdG9yeShhcHAsIGluc3RhbGxhdGlvbnMsIG9wdGlvbnMpIHtcclxuICAgIHdhcm5PbkJyb3dzZXJDb250ZXh0TWlzbWF0Y2goKTtcclxuICAgIGNvbnN0IGFwcElkID0gYXBwLm9wdGlvbnMuYXBwSWQ7XHJcbiAgICBpZiAoIWFwcElkKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcHAtaWRcIiAvKiBBbmFseXRpY3NFcnJvci5OT19BUFBfSUQgKi8pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhcHAub3B0aW9ucy5hcGlLZXkpIHtcclxuICAgICAgICBpZiAoYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihgVGhlIFwiYXBpS2V5XCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gVGhpcyBpcyBuZWVkZWQgdG8gZmV0Y2ggdGhlIGxhdGVzdGAgK1xyXG4gICAgICAgICAgICAgICAgYCBtZWFzdXJlbWVudCBJRCBmb3IgdGhpcyBGaXJlYmFzZSBhcHAuIEZhbGxpbmcgYmFjayB0byB0aGUgbWVhc3VyZW1lbnQgSUQgJHthcHAub3B0aW9ucy5tZWFzdXJlbWVudElkfWAgK1xyXG4gICAgICAgICAgICAgICAgYCBwcm92aWRlZCBpbiB0aGUgXCJtZWFzdXJlbWVudElkXCIgZmllbGQgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBpLWtleVwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQSV9LRVkgKi8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FwcElkXSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhbHJlYWR5LWV4aXN0c1wiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfRVhJU1RTICovLCB7XHJcbiAgICAgICAgICAgIGlkOiBhcHBJZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFnbG9iYWxJbml0RG9uZSkge1xyXG4gICAgICAgIC8vIFN0ZXBzIGhlcmUgc2hvdWxkIG9ubHkgYmUgZG9uZSBvbmNlIHBlciBwYWdlOiBjcmVhdGlvbiBvciB3cmFwcGluZ1xyXG4gICAgICAgIC8vIG9mIGRhdGFMYXllciBhbmQgZ2xvYmFsIGd0YWcgZnVuY3Rpb24uXHJcbiAgICAgICAgZ2V0T3JDcmVhdGVEYXRhTGF5ZXIoZGF0YUxheWVyTmFtZSk7XHJcbiAgICAgICAgY29uc3QgeyB3cmFwcGVkR3RhZywgZ3RhZ0NvcmUgfSA9IHdyYXBPckNyZWF0ZUd0YWcoaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGRhdGFMYXllck5hbWUsIGd0YWdOYW1lKTtcclxuICAgICAgICB3cmFwcGVkR3RhZ0Z1bmN0aW9uID0gd3JhcHBlZEd0YWc7XHJcbiAgICAgICAgZ3RhZ0NvcmVGdW5jdGlvbiA9IGd0YWdDb3JlO1xyXG4gICAgICAgIGdsb2JhbEluaXREb25lID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIEFzeW5jIGJ1dCBub24tYmxvY2tpbmcuXHJcbiAgICAvLyBUaGlzIG1hcCByZWZsZWN0cyB0aGUgY29tcGxldGlvbiBzdGF0ZSBvZiBhbGwgcHJvbWlzZXMgZm9yIGVhY2ggYXBwSWQuXHJcbiAgICBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FwcElkXSA9IF9pbml0aWFsaXplQW5hbHl0aWNzKGFwcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGluc3RhbGxhdGlvbnMsIGd0YWdDb3JlRnVuY3Rpb24sIGRhdGFMYXllck5hbWUsIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgYW5hbHl0aWNzSW5zdGFuY2UgPSBuZXcgQW5hbHl0aWNzU2VydmljZShhcHApO1xyXG4gICAgcmV0dXJuIGFuYWx5dGljc0luc3RhbmNlO1xyXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYW4ge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBhcHAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gdG8gdXNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QW5hbHl0aWNzKGFwcCA9IGdldEFwcCgpKSB7XHJcbiAgICBhcHAgPSBnZXRNb2R1bGFySW5zdGFuY2UoYXBwKTtcclxuICAgIC8vIERlcGVuZGVuY2llc1xyXG4gICAgY29uc3QgYW5hbHl0aWNzUHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCBBTkFMWVRJQ1NfVFlQRSk7XHJcbiAgICBpZiAoYW5hbHl0aWNzUHJvdmlkZXIuaXNJbml0aWFsaXplZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGFuYWx5dGljc1Byb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluaXRpYWxpemVBbmFseXRpY3MoYXBwKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhbiB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGFwcC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSB0byB1c2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQW5hbHl0aWNzKGFwcCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAvLyBEZXBlbmRlbmNpZXNcclxuICAgIGNvbnN0IGFuYWx5dGljc1Byb3ZpZGVyID0gX2dldFByb3ZpZGVyKGFwcCwgQU5BTFlUSUNTX1RZUEUpO1xyXG4gICAgaWYgKGFuYWx5dGljc1Byb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSkge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5zdGFuY2UgPSBhbmFseXRpY3NQcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICBpZiAoZGVlcEVxdWFsKG9wdGlvbnMsIGFuYWx5dGljc1Byb3ZpZGVyLmdldE9wdGlvbnMoKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nSW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEICovKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBhbmFseXRpY3NJbnN0YW5jZSA9IGFuYWx5dGljc1Byb3ZpZGVyLmluaXRpYWxpemUoeyBvcHRpb25zIH0pO1xyXG4gICAgcmV0dXJuIGFuYWx5dGljc0luc3RhbmNlO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgcHVibGljIHN0YXRpYyBtZXRob2QgcHJvdmlkZWQgdG8gdXNlcnMgdGhhdCB3cmFwcyBmb3VyIGRpZmZlcmVudCBjaGVja3M6XHJcbiAqXHJcbiAqIDEuIENoZWNrIGlmIGl0J3Mgbm90IGEgYnJvd3NlciBleHRlbnNpb24gZW52aXJvbm1lbnQuXHJcbiAqIDIuIENoZWNrIGlmIGNvb2tpZXMgYXJlIGVuYWJsZWQgaW4gY3VycmVudCBicm93c2VyLlxyXG4gKiAzLiBDaGVjayBpZiBJbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyIGVudmlyb25tZW50LlxyXG4gKiA0LiBDaGVjayBpZiB0aGUgY3VycmVudCBicm93c2VyIGNvbnRleHQgaXMgdmFsaWQgZm9yIHVzaW5nIGBJbmRleGVkREIub3BlbigpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICBpZiAoaXNCcm93c2VyRXh0ZW5zaW9uKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFyZUNvb2tpZXNFbmFibGVkKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGlzREJPcGVuYWJsZSA9IGF3YWl0IHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKTtcclxuICAgICAgICByZXR1cm4gaXNEQk9wZW5hYmxlO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBVc2UgZ3RhZyBgY29uZmlnYCBjb21tYW5kIHRvIHNldCBgc2NyZWVuX25hbWVgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgbG9nRXZlbnR9IHdpdGggYGV2ZW50TmFtZWAgYXMgJ3NjcmVlbl92aWV3JyBhbmQgYWRkIHJlbGV2YW50IGBldmVudFBhcmFtc2AuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvYW5hbHl0aWNzL3NjcmVlbnZpZXdzIHwgVHJhY2sgU2NyZWVudmlld3N9LlxyXG4gKlxyXG4gKiBAcGFyYW0gYW5hbHl0aWNzSW5zdGFuY2UgLSBUaGUge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBzY3JlZW5OYW1lIC0gU2NyZWVuIG5hbWUgdG8gc2V0LlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0Q3VycmVudFNjcmVlbihhbmFseXRpY3NJbnN0YW5jZSwgc2NyZWVuTmFtZSwgb3B0aW9ucykge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0Q3VycmVudFNjcmVlbiQxKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBzY3JlZW5OYW1lLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHVuaXF1ZSBHb29nbGUgQW5hbHl0aWNzIGlkZW50aWZpZXIgZm9yIHRoZSB3ZWIgY2xpZW50LlxyXG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9nYTQvcmVmZXJlbmNlL2NvbmZpZyNjbGllbnRfaWQgfCBjbGllbnRfaWR9LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IHRvIHVzZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkKGFuYWx5dGljc0luc3RhbmNlKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICByZXR1cm4gaW50ZXJuYWxHZXRHb29nbGVBbmFseXRpY3NDbGllbnRJZCh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSk7XHJcbn1cclxuLyoqXHJcbiAqIFVzZSBndGFnIGBjb25maWdgIGNvbW1hbmQgdG8gc2V0IGB1c2VyX2lkYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYW5hbHl0aWNzSW5zdGFuY2UgLSBUaGUge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBpZCAtIFVzZXIgSUQgdG8gc2V0LlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0VXNlcklkKGFuYWx5dGljc0luc3RhbmNlLCBpZCwgb3B0aW9ucykge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0VXNlcklkJDEod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthbmFseXRpY3NJbnN0YW5jZS5hcHAub3B0aW9ucy5hcHBJZF0sIGlkLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFVzZSBndGFnIGBjb25maWdgIGNvbW1hbmQgdG8gc2V0IGFsbCBwYXJhbXMgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRVc2VyUHJvcGVydGllcyhhbmFseXRpY3NJbnN0YW5jZSwgcHJvcGVydGllcywgb3B0aW9ucykge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0VXNlclByb3BlcnRpZXMkMSh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSwgcHJvcGVydGllcywgb3B0aW9ucykuY2F0Y2goZSA9PiBsb2dnZXIuZXJyb3IoZSkpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIHdoZXRoZXIgR29vZ2xlIEFuYWx5dGljcyBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgYXBwIG9uIHRoaXMgZGV2aWNlLlxyXG4gKiBTZXRzIGdsb2JhbCBgd2luZG93WydnYS1kaXNhYmxlLWFuYWx5dGljc0lkJ10gPSB0cnVlO2BcclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYW5hbHl0aWNzSW5zdGFuY2UgLSBUaGUge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBlbmFibGVkIC0gSWYgdHJ1ZSwgZW5hYmxlcyBjb2xsZWN0aW9uLCBpZiBmYWxzZSwgZGlzYWJsZXMgaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZChhbmFseXRpY3NJbnN0YW5jZSwgZW5hYmxlZCkge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQkMShpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSwgZW5hYmxlZCkuY2F0Y2goZSA9PiBsb2dnZXIuZXJyb3IoZSkpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGRhdGEgdGhhdCB3aWxsIGJlIHNldCBvbiBldmVyeSBldmVudCBsb2dnZWQgZnJvbSB0aGUgU0RLLCBpbmNsdWRpbmcgYXV0b21hdGljIG9uZXMuXHJcbiAqIFdpdGggZ3RhZydzIFwic2V0XCIgY29tbWFuZCwgdGhlIHZhbHVlcyBwYXNzZWQgcGVyc2lzdCBvbiB0aGUgY3VycmVudCBwYWdlIGFuZCBhcmUgcGFzc2VkIHdpdGhcclxuICogYWxsIHN1YnNlcXVlbnQgZXZlbnRzLlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSBjdXN0b21QYXJhbXMgLSBBbnkgY3VzdG9tIHBhcmFtcyB0aGUgdXNlciBtYXkgcGFzcyB0byBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVycyhjdXN0b21QYXJhbXMpIHtcclxuICAgIC8vIENoZWNrIGlmIHJlZmVyZW5jZSB0byBleGlzdGluZyBndGFnIGZ1bmN0aW9uIG9uIHdpbmRvdyBvYmplY3QgZXhpc3RzXHJcbiAgICBpZiAod3JhcHBlZEd0YWdGdW5jdGlvbikge1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24oXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIGN1c3RvbVBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQoY3VzdG9tUGFyYW1zKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2VuZHMgYSBHb29nbGUgQW5hbHl0aWNzIGV2ZW50IHdpdGggZ2l2ZW4gYGV2ZW50UGFyYW1zYC4gVGhpcyBtZXRob2RcclxuICogYXV0b21hdGljYWxseSBhc3NvY2lhdGVzIHRoaXMgbG9nZ2VkIGV2ZW50IHdpdGggdGhpcyBGaXJlYmFzZSB3ZWJcclxuICogYXBwIGluc3RhbmNlIG9uIHRoaXMgZGV2aWNlLlxyXG4gKiBMaXN0IG9mIG9mZmljaWFsIGV2ZW50IHBhcmFtZXRlcnMgY2FuIGJlIGZvdW5kIGluIHRoZSBndGFnLmpzXHJcbiAqIHJlZmVyZW5jZSBkb2N1bWVudGF0aW9uOlxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZ3RhZ2pzL3JlZmVyZW5jZS9nYTQtZXZlbnRzXHJcbiAqIHwgdGhlIEdBNCByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGxvZ0V2ZW50KGFuYWx5dGljc0luc3RhbmNlLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBsb2dFdmVudCQxKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgdGhlIGFwcGxpY2FibGUgZW5kIHVzZXIgY29uc2VudCBzdGF0ZSBmb3IgdGhpcyB3ZWIgYXBwIGFjcm9zcyBhbGwgZ3RhZyByZWZlcmVuY2VzIG9uY2VcclxuICogRmlyZWJhc2UgQW5hbHl0aWNzIGlzIGluaXRpYWxpemVkLlxyXG4gKlxyXG4gKiBVc2UgdGhlIHtAbGluayBDb25zZW50U2V0dGluZ3N9IHRvIHNwZWNpZnkgaW5kaXZpZHVhbCBjb25zZW50IHR5cGUgdmFsdWVzLiBCeSBkZWZhdWx0IGNvbnNlbnRcclxuICogdHlwZXMgYXJlIHNldCB0byBcImdyYW50ZWRcIi5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gY29uc2VudFNldHRpbmdzIC0gTWFwcyB0aGUgYXBwbGljYWJsZSBlbmQgdXNlciBjb25zZW50IHN0YXRlIGZvciBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0Q29uc2VudChjb25zZW50U2V0dGluZ3MpIHtcclxuICAgIC8vIENoZWNrIGlmIHJlZmVyZW5jZSB0byBleGlzdGluZyBndGFnIGZ1bmN0aW9uIG9uIHdpbmRvdyBvYmplY3QgZXhpc3RzXHJcbiAgICBpZiAod3JhcHBlZEd0YWdGdW5jdGlvbikge1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24oXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLywgJ3VwZGF0ZScsIGNvbnNlbnRTZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0KGNvbnNlbnRTZXR0aW5ncyk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgbmFtZSA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xuY29uc3QgdmVyc2lvbiA9IFwiMC4xMC4wXCI7XG5cbi8qKlxyXG4gKiBGaXJlYmFzZSBBbmFseXRpY3NcclxuICpcclxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlckFuYWx5dGljcygpIHtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KEFOQUxZVElDU19UWVBFLCAoY29udGFpbmVyLCB7IG9wdGlvbnM6IGFuYWx5dGljc09wdGlvbnMgfSkgPT4ge1xyXG4gICAgICAgIC8vIGdldEltbWVkaWF0ZSBmb3IgRmlyZWJhc2VBcHAgd2lsbCBhbHdheXMgc3VjY2VlZFxyXG4gICAgICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgY29uc3QgaW5zdGFsbGF0aW9ucyA9IGNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ2luc3RhbGxhdGlvbnMtaW50ZXJuYWwnKVxyXG4gICAgICAgICAgICAuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoYXBwLCBpbnN0YWxsYXRpb25zLCBhbmFseXRpY3NPcHRpb25zKTtcclxuICAgIH0sIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KCdhbmFseXRpY3MtaW50ZXJuYWwnLCBpbnRlcm5hbEZhY3RvcnksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24pO1xyXG4gICAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnZXNtMjAxNycpO1xyXG4gICAgZnVuY3Rpb24gaW50ZXJuYWxGYWN0b3J5KGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuYWx5dGljcyA9IGNvbnRhaW5lci5nZXRQcm92aWRlcihBTkFMWVRJQ1NfVFlQRSkuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsb2dFdmVudDogKGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpID0+IGxvZ0V2ZW50KGFuYWx5dGljcywgZXZlbnROYW1lLCBldmVudFBhcmFtcywgb3B0aW9ucylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnRlcm9wLWNvbXBvbmVudC1yZWctZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5URVJPUF9DT01QT05FTlRfUkVHX0ZBSUxFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgcmVhc29uOiBlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5yZWdpc3RlckFuYWx5dGljcygpO1xuXG5leHBvcnQgeyBnZXRBbmFseXRpY3MsIGdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkLCBpbml0aWFsaXplQW5hbHl0aWNzLCBpc1N1cHBvcnRlZCwgbG9nRXZlbnQsIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkLCBzZXRDb25zZW50LCBzZXRDdXJyZW50U2NyZWVuLCBzZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzLCBzZXRVc2VySWQsIHNldFVzZXJQcm9wZXJ0aWVzLCBzZXR0aW5ncyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyIH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dnZXIsIHNldFVzZXJMb2dIYW5kbGVyLCBzZXRMb2dMZXZlbCBhcyBzZXRMb2dMZXZlbCQxIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIGdldERlZmF1bHRBcHBDb25maWcsIGRlZXBFcXVhbCwgRmlyZWJhc2VFcnJvciwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGlzSW5kZXhlZERCQXZhaWxhYmxlLCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuZXhwb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYic7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIFBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB9XHJcbiAgICAvLyBJbiBpbml0aWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGJ5IGluc3RhbGxhdGlvbnMgb25cclxuICAgIC8vIGF1dGggdG9rZW4gcmVmcmVzaCwgYW5kIGluc3RhbGxhdGlvbnMgd2lsbCBzZW5kIHRoaXMgc3RyaW5nLlxyXG4gICAgZ2V0UGxhdGZvcm1JbmZvU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVycygpO1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBwcm92aWRlcnMgYW5kIGdldCBsaWJyYXJ5L3ZlcnNpb24gcGFpcnMgZnJvbSBhbnkgdGhhdCBhcmVcclxuICAgICAgICAvLyB2ZXJzaW9uIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc1xyXG4gICAgICAgICAgICAubWFwKHByb3ZpZGVyID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzVmVyc2lvblNlcnZpY2VQcm92aWRlcihwcm92aWRlcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzZXJ2aWNlLmxpYnJhcnl9LyR7c2VydmljZS52ZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIobG9nU3RyaW5nID0+IGxvZ1N0cmluZylcclxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHByb3ZpZGVyIGNoZWNrIGlmIHRoaXMgcHJvdmlkZXIgcHJvdmlkZXMgYSBWZXJzaW9uU2VydmljZVxyXG4gKlxyXG4gKiBOT1RFOiBVc2luZyBQcm92aWRlcjwnYXBwLXZlcnNpb24nPiBpcyBhIGhhY2sgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcHJvdmlkZXJcclxuICogcHJvdmlkZXMgVmVyc2lvblNlcnZpY2UuIFRoZSBwcm92aWRlciBpcyBub3QgbmVjZXNzYXJpbHkgYSAnYXBwLXZlcnNpb24nXHJcbiAqIHByb3ZpZGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcclxuICAgIHJldHVybiAoY29tcG9uZW50ID09PSBudWxsIHx8IGNvbXBvbmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcG9uZW50LnR5cGUpID09PSBcIlZFUlNJT05cIiAvKiBDb21wb25lbnRUeXBlLlZFUlNJT04gKi87XHJcbn1cblxuY29uc3QgbmFtZSRvID0gXCJAZmlyZWJhc2UvYXBwXCI7XG5jb25zdCB2ZXJzaW9uJDEgPSBcIjAuOS4xNVwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXBwJyk7XG5cbmNvbnN0IG5hbWUkbiA9IFwiQGZpcmViYXNlL2FwcC1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRtID0gXCJAZmlyZWJhc2UvYW5hbHl0aWNzLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGwgPSBcIkBmaXJlYmFzZS9hbmFseXRpY3NcIjtcblxuY29uc3QgbmFtZSRrID0gXCJAZmlyZWJhc2UvYXBwLWNoZWNrLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGogPSBcIkBmaXJlYmFzZS9hcHAtY2hlY2tcIjtcblxuY29uc3QgbmFtZSRpID0gXCJAZmlyZWJhc2UvYXV0aFwiO1xuXG5jb25zdCBuYW1lJGggPSBcIkBmaXJlYmFzZS9hdXRoLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGcgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZVwiO1xuXG5jb25zdCBuYW1lJGYgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRlID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zXCI7XG5cbmNvbnN0IG5hbWUkZCA9IFwiQGZpcmViYXNlL2Z1bmN0aW9ucy1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRjID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuXG5jb25zdCBuYW1lJGIgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGEgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmdcIjtcblxuY29uc3QgbmFtZSQ5ID0gXCJAZmlyZWJhc2UvbWVzc2FnaW5nLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDggPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZVwiO1xuXG5jb25zdCBuYW1lJDcgPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSQ2ID0gXCJAZmlyZWJhc2UvcmVtb3RlLWNvbmZpZ1wiO1xuXG5jb25zdCBuYW1lJDUgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDQgPSBcIkBmaXJlYmFzZS9zdG9yYWdlXCI7XG5cbmNvbnN0IG5hbWUkMyA9IFwiQGZpcmViYXNlL3N0b3JhZ2UtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkMiA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG5jb25zdCBuYW1lJDEgPSBcIkBmaXJlYmFzZS9maXJlc3RvcmUtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUgPSBcImZpcmViYXNlXCI7XG5jb25zdCB2ZXJzaW9uID0gXCIxMC4xLjBcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGFwcCBuYW1lXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XHJcbmNvbnN0IFBMQVRGT1JNX0xPR19TVFJJTkcgPSB7XHJcbiAgICBbbmFtZSRvXTogJ2ZpcmUtY29yZScsXHJcbiAgICBbbmFtZSRuXTogJ2ZpcmUtY29yZS1jb21wYXQnLFxyXG4gICAgW25hbWUkbF06ICdmaXJlLWFuYWx5dGljcycsXHJcbiAgICBbbmFtZSRtXTogJ2ZpcmUtYW5hbHl0aWNzLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRqXTogJ2ZpcmUtYXBwLWNoZWNrJyxcclxuICAgIFtuYW1lJGtdOiAnZmlyZS1hcHAtY2hlY2stY29tcGF0JyxcclxuICAgIFtuYW1lJGldOiAnZmlyZS1hdXRoJyxcclxuICAgIFtuYW1lJGhdOiAnZmlyZS1hdXRoLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRnXTogJ2ZpcmUtcnRkYicsXHJcbiAgICBbbmFtZSRmXTogJ2ZpcmUtcnRkYi1jb21wYXQnLFxyXG4gICAgW25hbWUkZV06ICdmaXJlLWZuJyxcclxuICAgIFtuYW1lJGRdOiAnZmlyZS1mbi1jb21wYXQnLFxyXG4gICAgW25hbWUkY106ICdmaXJlLWlpZCcsXHJcbiAgICBbbmFtZSRiXTogJ2ZpcmUtaWlkLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRhXTogJ2ZpcmUtZmNtJyxcclxuICAgIFtuYW1lJDldOiAnZmlyZS1mY20tY29tcGF0JyxcclxuICAgIFtuYW1lJDhdOiAnZmlyZS1wZXJmJyxcclxuICAgIFtuYW1lJDddOiAnZmlyZS1wZXJmLWNvbXBhdCcsXHJcbiAgICBbbmFtZSQ2XTogJ2ZpcmUtcmMnLFxyXG4gICAgW25hbWUkNV06ICdmaXJlLXJjLWNvbXBhdCcsXHJcbiAgICBbbmFtZSQ0XTogJ2ZpcmUtZ2NzJyxcclxuICAgIFtuYW1lJDNdOiAnZmlyZS1nY3MtY29tcGF0JyxcclxuICAgIFtuYW1lJDJdOiAnZmlyZS1mc3QnLFxyXG4gICAgW25hbWUkMV06ICdmaXJlLWZzdC1jb21wYXQnLFxyXG4gICAgJ2ZpcmUtanMnOiAnZmlyZS1qcycsXHJcbiAgICBbbmFtZV06ICdmaXJlLWpzLWFsbCdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgX2FwcHMgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBSZWdpc3RlcmVkIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuY29uc3QgX2NvbXBvbmVudHMgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCBiZWluZyBhZGRlZCB0byB0aGlzIGFwcCdzIGNvbnRhaW5lclxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXBwLmNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgJHthcHAubmFtZX1gLCBlKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoYXBwLCBjb21wb25lbnQpIHtcclxuICAgIGFwcC5jb250YWluZXIuYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGNvbXBvbmVudCAtIHRoZSBjb21wb25lbnQgdG8gcmVnaXN0ZXJcclxuICogQHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9yZWdpc3RlckNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQubmFtZTtcclxuICAgIGlmIChfY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYFRoZXJlIHdlcmUgbXVsdGlwbGUgYXR0ZW1wdHMgdG8gcmVnaXN0ZXIgY29tcG9uZW50ICR7Y29tcG9uZW50TmFtZX0uYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgX2NvbXBvbmVudHMuc2V0KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudCk7XHJcbiAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCB0byBleGlzdGluZyBhcHAgaW5zdGFuY2VzXHJcbiAgICBmb3IgKGNvbnN0IGFwcCBvZiBfYXBwcy52YWx1ZXMoKSkge1xyXG4gICAgICAgIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBGaXJlYmFzZUFwcCBpbnN0YW5jZVxyXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB0aGUgcHJvdmlkZXIgZm9yIHRoZSBzZXJ2aWNlIHdpdGggdGhlIG1hdGNoaW5nIG5hbWVcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKSB7XHJcbiAgICBjb25zdCBoZWFydGJlYXRDb250cm9sbGVyID0gYXBwLmNvbnRhaW5lclxyXG4gICAgICAgIC5nZXRQcm92aWRlcignaGVhcnRiZWF0JylcclxuICAgICAgICAuZ2V0SW1tZWRpYXRlKHsgb3B0aW9uYWw6IHRydWUgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0Q29udHJvbGxlcikge1xyXG4gICAgICAgIHZvaWQgaGVhcnRiZWF0Q29udHJvbGxlci50cmlnZ2VySGVhcnRiZWF0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqIEBwYXJhbSBpbnN0YW5jZUlkZW50aWZpZXIgLSBzZXJ2aWNlIGluc3RhbmNlIGlkZW50aWZpZXIgaW4gY2FzZSB0aGUgc2VydmljZSBzdXBwb3J0cyBtdWx0aXBsZSBpbnN0YW5jZXNcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfcmVtb3ZlU2VydmljZUluc3RhbmNlKGFwcCwgbmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKS5jbGVhckluc3RhbmNlKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbn1cclxuLyoqXHJcbiAqIFRlc3Qgb25seVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9jbGVhckNvbXBvbmVudHMoKSB7XHJcbiAgICBfY29tcG9uZW50cy5jbGVhcigpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEVSUk9SUyA9IHtcclxuICAgIFtcIm5vLWFwcFwiIC8qIEFwcEVycm9yLk5PX0FQUCAqL106IFwiTm8gRmlyZWJhc2UgQXBwICd7JGFwcE5hbWV9JyBoYXMgYmVlbiBjcmVhdGVkIC0gXCIgK1xyXG4gICAgICAgICdjYWxsIGluaXRpYWxpemVBcHAoKSBmaXJzdCcsXHJcbiAgICBbXCJiYWQtYXBwLW5hbWVcIiAvKiBBcHBFcnJvci5CQURfQVBQX05BTUUgKi9dOiBcIklsbGVnYWwgQXBwIG5hbWU6ICd7JGFwcE5hbWV9XCIsXHJcbiAgICBbXCJkdXBsaWNhdGUtYXBwXCIgLyogQXBwRXJyb3IuRFVQTElDQVRFX0FQUCAqL106IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGV4aXN0cyB3aXRoIGRpZmZlcmVudCBvcHRpb25zIG9yIGNvbmZpZ1wiLFxyXG4gICAgW1wiYXBwLWRlbGV0ZWRcIiAvKiBBcHBFcnJvci5BUFBfREVMRVRFRCAqL106IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGRlbGV0ZWRcIixcclxuICAgIFtcIm5vLW9wdGlvbnNcIiAvKiBBcHBFcnJvci5OT19PUFRJT05TICovXTogJ05lZWQgdG8gcHJvdmlkZSBvcHRpb25zLCB3aGVuIG5vdCBiZWluZyBkZXBsb3llZCB0byBob3N0aW5nIHZpYSBzb3VyY2UuJyxcclxuICAgIFtcImludmFsaWQtYXBwLWFyZ3VtZW50XCIgLyogQXBwRXJyb3IuSU5WQUxJRF9BUFBfQVJHVU1FTlQgKi9dOiAnZmlyZWJhc2UueyRhcHBOYW1lfSgpIHRha2VzIGVpdGhlciBubyBhcmd1bWVudCBvciBhICcgK1xyXG4gICAgICAgICdGaXJlYmFzZSBBcHAgaW5zdGFuY2UuJyxcclxuICAgIFtcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogQXBwRXJyb3IuSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi9dOiAnRmlyc3QgYXJndW1lbnQgdG8gYG9uTG9nYCBtdXN0IGJlIG51bGwgb3IgYSBmdW5jdGlvbi4nLFxyXG4gICAgW1wiaWRiLW9wZW5cIiAvKiBBcHBFcnJvci5JREJfT1BFTiAqL106ICdFcnJvciB0aHJvd24gd2hlbiBvcGVuaW5nIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBbXCJpZGItZ2V0XCIgLyogQXBwRXJyb3IuSURCX0dFVCAqL106ICdFcnJvciB0aHJvd24gd2hlbiByZWFkaW5nIGZyb20gSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIFtcImlkYi1zZXRcIiAvKiBBcHBFcnJvci5JREJfV1JJVEUgKi9dOiAnRXJyb3IgdGhyb3duIHdoZW4gd3JpdGluZyB0byBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgW1wiaWRiLWRlbGV0ZVwiIC8qIEFwcEVycm9yLklEQl9ERUxFVEUgKi9dOiAnRXJyb3IgdGhyb3duIHdoZW4gZGVsZXRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nXHJcbn07XHJcbmNvbnN0IEVSUk9SX0ZBQ1RPUlkgPSBuZXcgRXJyb3JGYWN0b3J5KCdhcHAnLCAnRmlyZWJhc2UnLCBFUlJPUlMpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBGaXJlYmFzZUFwcEltcGwge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgY29uZmlnLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLl9pc0RlbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKTtcclxuICAgICAgICB0aGlzLl9uYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkID1cclxuICAgICAgICAgICAgY29uZmlnLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FwcCcsICgpID0+IHRoaXMsIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pKTtcclxuICAgIH1cclxuICAgIGdldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkKHZhbCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgbmFtZSgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcbiAgICBnZXQgb3B0aW9ucygpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBnZXQgY29uZmlnKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbnRhaW5lcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzRGVsZXRlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNEZWxldGVkO1xyXG4gICAgfVxyXG4gICAgc2V0IGlzRGVsZXRlZCh2YWwpIHtcclxuICAgICAgICB0aGlzLl9pc0RlbGV0ZWQgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBhbiBFcnJvciBpZiB0aGUgQXBwIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZCAtXHJcbiAgICAgKiB1c2UgYmVmb3JlIHBlcmZvcm1pbmcgQVBJIGFjdGlvbnMgb24gdGhlIEFwcC5cclxuICAgICAqL1xyXG4gICAgY2hlY2tEZXN0cm95ZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLWRlbGV0ZWRcIiAvKiBBcHBFcnJvci5BUFBfREVMRVRFRCAqLywgeyBhcHBOYW1lOiB0aGlzLl9uYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGN1cnJlbnQgU0RLIHZlcnNpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IFNES19WRVJTSU9OID0gdmVyc2lvbjtcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChfb3B0aW9ucywgcmF3Q29uZmlnID0ge30pIHtcclxuICAgIGxldCBvcHRpb25zID0gX29wdGlvbnM7XHJcbiAgICBpZiAodHlwZW9mIHJhd0NvbmZpZyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICBjb25zdCBuYW1lID0gcmF3Q29uZmlnO1xyXG4gICAgICAgIHJhd0NvbmZpZyA9IHsgbmFtZSB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7IG5hbWU6IERFRkFVTFRfRU5UUllfTkFNRSwgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkOiBmYWxzZSB9LCByYXdDb25maWcpO1xyXG4gICAgY29uc3QgbmFtZSA9IGNvbmZpZy5uYW1lO1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCAhbmFtZSkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYmFkLWFwcC1uYW1lXCIgLyogQXBwRXJyb3IuQkFEX0FQUF9OQU1FICovLCB7XHJcbiAgICAgICAgICAgIGFwcE5hbWU6IFN0cmluZyhuYW1lKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IGdldERlZmF1bHRBcHBDb25maWcoKSk7XHJcbiAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLW9wdGlvbnNcIiAvKiBBcHBFcnJvci5OT19PUFRJT05TICovKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGV4aXN0aW5nQXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKGV4aXN0aW5nQXBwKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBleGlzdGluZyBhcHAgaWYgb3B0aW9ucyBhbmQgY29uZmlnIGRlZXAgZXF1YWwgdGhlIG9uZXMgaW4gdGhlIGV4aXN0aW5nIGFwcC5cclxuICAgICAgICBpZiAoZGVlcEVxdWFsKG9wdGlvbnMsIGV4aXN0aW5nQXBwLm9wdGlvbnMpICYmXHJcbiAgICAgICAgICAgIGRlZXBFcXVhbChjb25maWcsIGV4aXN0aW5nQXBwLmNvbmZpZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQXBwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkdXBsaWNhdGUtYXBwXCIgLyogQXBwRXJyb3IuRFVQTElDQVRFX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBDb21wb25lbnRDb250YWluZXIobmFtZSk7XHJcbiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBfY29tcG9uZW50cy52YWx1ZXMoKSkge1xyXG4gICAgICAgIGNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5ld0FwcCA9IG5ldyBGaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBjb250YWluZXIpO1xyXG4gICAgX2FwcHMuc2V0KG5hbWUsIG5ld0FwcCk7XHJcbiAgICByZXR1cm4gbmV3QXBwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIFdoZW4gY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCB0aGUgZGVmYXVsdCBhcHAgaXMgcmV0dXJuZWQuIFdoZW4gYW4gYXBwIG5hbWVcclxuICogaXMgcHJvdmlkZWQsIHRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGF0IG5hbWUgaXMgcmV0dXJuZWQuXHJcbiAqXHJcbiAqIEFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgdGhlIGFwcCBiZWluZyByZXRyaWV2ZWQgaGFzIG5vdCB5ZXQgYmVlblxyXG4gKiBpbml0aWFsaXplZC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgYXBwXHJcbiAqIGNvbnN0IGFwcCA9IGdldEFwcCgpO1xyXG4gKiBgYGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBSZXR1cm4gYSBuYW1lZCBhcHBcclxuICogY29uc3Qgb3RoZXJBcHAgPSBnZXRBcHAoXCJvdGhlckFwcFwiKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgYXBwIHRvIHJldHVybi4gSWYgbm8gbmFtZSBpc1xyXG4gKiAgIHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBpcyBgXCJbREVGQVVMVF1cImAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIFRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgYXBwIG5hbWUuXHJcbiAqICAgSWYgbm8gYXBwIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXBwKG5hbWUgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgIGNvbnN0IGFwcCA9IF9hcHBzLmdldChuYW1lKTtcclxuICAgIGlmICghYXBwICYmIG5hbWUgPT09IERFRkFVTFRfRU5UUllfTkFNRSAmJiBnZXREZWZhdWx0QXBwQ29uZmlnKCkpIHtcclxuICAgICAgICByZXR1cm4gaW5pdGlhbGl6ZUFwcCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhcHApIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcFwiIC8qIEFwcEVycm9yLk5PX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFwcDtcclxufVxyXG4vKipcclxuICogQSAocmVhZC1vbmx5KSBhcnJheSBvZiBhbGwgaW5pdGlhbGl6ZWQgYXBwcy5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXBwcygpIHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKF9hcHBzLnZhbHVlcygpKTtcclxufVxyXG4vKipcclxuICogUmVuZGVycyB0aGlzIGFwcCB1bnVzYWJsZSBhbmQgZnJlZXMgdGhlIHJlc291cmNlcyBvZiBhbGwgYXNzb2NpYXRlZFxyXG4gKiBzZXJ2aWNlcy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiBkZWxldGVBcHAoYXBwKVxyXG4gKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJBcHAgZGVsZXRlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICogICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgZGVsZXRpbmcgYXBwOlwiLCBlcnJvcik7XHJcbiAqICAgfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVBcHAoYXBwKSB7XHJcbiAgICBjb25zdCBuYW1lID0gYXBwLm5hbWU7XHJcbiAgICBpZiAoX2FwcHMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgX2FwcHMuZGVsZXRlKG5hbWUpO1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGFwcC5jb250YWluZXJcclxuICAgICAgICAgICAgLmdldFByb3ZpZGVycygpXHJcbiAgICAgICAgICAgIC5tYXAocHJvdmlkZXIgPT4gcHJvdmlkZXIuZGVsZXRlKCkpKTtcclxuICAgICAgICBhcHAuaXNEZWxldGVkID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmVnaXN0ZXJzIGEgbGlicmFyeSdzIG5hbWUgYW5kIHZlcnNpb24gZm9yIHBsYXRmb3JtIGxvZ2dpbmcgcHVycG9zZXMuXHJcbiAqIEBwYXJhbSBsaWJyYXJ5IC0gTmFtZSBvZiAxcCBvciAzcCBsaWJyYXJ5IChlLmcuIGZpcmVzdG9yZSwgYW5ndWxhcmZpcmUpXHJcbiAqIEBwYXJhbSB2ZXJzaW9uIC0gQ3VycmVudCB2ZXJzaW9uIG9mIHRoYXQgbGlicmFyeS5cclxuICogQHBhcmFtIHZhcmlhbnQgLSBCdW5kbGUgdmFyaWFudCwgZS5nLiwgbm9kZSwgcm4sIGV0Yy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJWZXJzaW9uKGxpYnJhcnlLZXlPck5hbWUsIHZlcnNpb24sIHZhcmlhbnQpIHtcclxuICAgIHZhciBfYTtcclxuICAgIC8vIFRPRE86IFdlIGNhbiB1c2UgdGhpcyBjaGVjayB0byB3aGl0ZWxpc3Qgc3RyaW5ncyB3aGVuL2lmIHdlIHNldCB1cFxyXG4gICAgLy8gYSBnb29kIHdoaXRlbGlzdCBzeXN0ZW0uXHJcbiAgICBsZXQgbGlicmFyeSA9IChfYSA9IFBMQVRGT1JNX0xPR19TVFJJTkdbbGlicmFyeUtleU9yTmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGxpYnJhcnlLZXlPck5hbWU7XHJcbiAgICBpZiAodmFyaWFudCkge1xyXG4gICAgICAgIGxpYnJhcnkgKz0gYC0ke3ZhcmlhbnR9YDtcclxuICAgIH1cclxuICAgIGNvbnN0IGxpYnJhcnlNaXNtYXRjaCA9IGxpYnJhcnkubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgIGNvbnN0IHZlcnNpb25NaXNtYXRjaCA9IHZlcnNpb24ubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggfHwgdmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgY29uc3Qgd2FybmluZyA9IFtcclxuICAgICAgICAgICAgYFVuYWJsZSB0byByZWdpc3RlciBsaWJyYXJ5IFwiJHtsaWJyYXJ5fVwiIHdpdGggdmVyc2lvbiBcIiR7dmVyc2lvbn1cIjpgXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmcucHVzaChgbGlicmFyeSBuYW1lIFwiJHtsaWJyYXJ5fVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCAmJiB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKCdhbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goYHZlcnNpb24gbmFtZSBcIiR7dmVyc2lvbn1cIiBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMgKHdoaXRlc3BhY2Ugb3IgXCIvXCIpYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZ2dlci53YXJuKHdhcm5pbmcuam9pbignICcpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudChgJHtsaWJyYXJ5fS12ZXJzaW9uYCwgKCkgPT4gKHsgbGlicmFyeSwgdmVyc2lvbiB9KSwgXCJWRVJTSU9OXCIgLyogQ29tcG9uZW50VHlwZS5WRVJTSU9OICovKSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgbG9nIGhhbmRsZXIgZm9yIGFsbCBGaXJlYmFzZSBTREtzLlxyXG4gKiBAcGFyYW0gbG9nQ2FsbGJhY2sgLSBBbiBvcHRpb25hbCBjdXN0b20gbG9nIGhhbmRsZXIgdGhhdCBleGVjdXRlcyB1c2VyIGNvZGUgd2hlbmV2ZXJcclxuICogdGhlIEZpcmViYXNlIFNESyBtYWtlcyBhIGxvZ2dpbmcgY2FsbC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gb25Mb2cobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgIGlmIChsb2dDYWxsYmFjayAhPT0gbnVsbCAmJiB0eXBlb2YgbG9nQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogQXBwRXJyb3IuSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi8pO1xyXG4gICAgfVxyXG4gICAgc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIGxvZyBsZXZlbCBmb3IgYWxsIEZpcmViYXNlIFNES3MuXHJcbiAqXHJcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCBhcmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBpbmZvYCwgZXJyb3JzIGFyZSBsb2dnZWQsIGJ1dCBgZGVidWdgIGFuZFxyXG4gKiBgdmVyYm9zZWAgbG9ncyBhcmUgbm90KS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobG9nTGV2ZWwpIHtcclxuICAgIHNldExvZ0xldmVsJDEobG9nTGV2ZWwpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IERCX05BTUUgPSAnZmlyZWJhc2UtaGVhcnRiZWF0LWRhdGFiYXNlJztcclxuY29uc3QgREJfVkVSU0lPTiA9IDE7XHJcbmNvbnN0IFNUT1JFX05BTUUgPSAnZmlyZWJhc2UtaGVhcnRiZWF0LXN0b3JlJztcclxubGV0IGRiUHJvbWlzZSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldERiUHJvbWlzZSgpIHtcclxuICAgIGlmICghZGJQcm9taXNlKSB7XHJcbiAgICAgICAgZGJQcm9taXNlID0gb3BlbkRCKERCX05BTUUsIERCX1ZFUlNJT04sIHtcclxuICAgICAgICAgICAgdXBncmFkZTogKGRiLCBvbGRWZXJzaW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB1c2UgJ2JyZWFrJyBpbiB0aGlzIHN3aXRjaCBzdGF0ZW1lbnQsIHRoZSBmYWxsLXRocm91Z2hcclxuICAgICAgICAgICAgICAgIC8vIGJlaGF2aW9yIGlzIHdoYXQgd2Ugd2FudCwgYmVjYXVzZSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgYmV0d2VlblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIG9sZCB2ZXJzaW9uIGFuZCB0aGUgY3VycmVudCB2ZXJzaW9uLCB3ZSB3YW50IEFMTCB0aGUgbWlncmF0aW9uc1xyXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBjb3JyZXNwb25kIHRvIHRob3NlIHZlcnNpb25zIHRvIHJ1biwgbm90IG9ubHkgdGhlIGxhc3Qgb25lLlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShTVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1vcGVuXCIgLyogQXBwRXJyb3IuSURCX09QRU4gKi8sIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGJQcm9taXNlO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQihhcHApIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXREYlByb21pc2UoKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlxyXG4gICAgICAgICAgICAudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSlcclxuICAgICAgICAgICAgLm9iamVjdFN0b3JlKFNUT1JFX05BTUUpXHJcbiAgICAgICAgICAgIC5nZXQoY29tcHV0ZUtleShhcHApKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItZ2V0XCIgLyogQXBwRXJyb3IuSURCX0dFVCAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihpZGJHZXRFcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIoYXBwLCBoZWFydGJlYXRPYmplY3QpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXREYlByb21pc2UoKTtcclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFNUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICBjb25zdCBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgIGF3YWl0IG9iamVjdFN0b3JlLnB1dChoZWFydGJlYXRPYmplY3QsIGNvbXB1dGVLZXkoYXBwKSk7XHJcbiAgICAgICAgYXdhaXQgdHguZG9uZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGUubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpZGJHZXRFcnJvciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLXNldFwiIC8qIEFwcEVycm9yLklEQl9XUklURSAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihpZGJHZXRFcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY29tcHV0ZUtleShhcHApIHtcclxuICAgIHJldHVybiBgJHthcHAubmFtZX0hJHthcHAub3B0aW9ucy5hcHBJZH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IE1BWF9IRUFERVJfQllURVMgPSAxMDI0O1xyXG4vLyAzMCBkYXlzXHJcbmNvbnN0IFNUT1JFRF9IRUFSVEJFQVRfUkVURU5USU9OX01BWF9NSUxMSVMgPSAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XHJcbmNsYXNzIEhlYXJ0YmVhdFNlcnZpY2VJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluLW1lbW9yeSBjYWNoZSBmb3IgaGVhcnRiZWF0cywgdXNlZCBieSBnZXRIZWFydGJlYXRzSGVhZGVyKCkgdG8gZ2VuZXJhdGVcclxuICAgICAgICAgKiB0aGUgaGVhZGVyIHN0cmluZy5cclxuICAgICAgICAgKiBTdG9yZXMgb25lIHJlY29yZCBwZXIgZGF0ZS4gVGhpcyB3aWxsIGJlIGNvbnNvbGlkYXRlZCBpbnRvIHRoZSBzdGFuZGFyZFxyXG4gICAgICAgICAqIGZvcm1hdCBvZiBvbmUgcmVjb3JkIHBlciB1c2VyIGFnZW50IHN0cmluZyBiZWZvcmUgYmVpbmcgc2VudCBhcyBhIGhlYWRlci5cclxuICAgICAgICAgKiBQb3B1bGF0ZWQgZnJvbSBpbmRleGVkREIgd2hlbiB0aGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZFxyXG4gICAgICAgICAqIGJlIGtlcHQgaW4gc3luYyB3aXRoIGluZGV4ZWREQi5cclxuICAgICAgICAgKiBMZWF2ZSBwdWJsaWMgZm9yIGVhc2llciB0ZXN0aW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgYXBwID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXIoJ2FwcCcpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBuZXcgSGVhcnRiZWF0U3RvcmFnZUltcGwoYXBwKTtcclxuICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlID0gdGhpcy5fc3RvcmFnZS5yZWFkKCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB0byByZXBvcnQgYSBoZWFydGJlYXQuIFRoZSBmdW5jdGlvbiB3aWxsIGdlbmVyYXRlXHJcbiAgICAgKiBhIEhlYXJ0YmVhdHNCeVVzZXJBZ2VudCBvYmplY3QsIHVwZGF0ZSBoZWFydGJlYXRzQ2FjaGUsIGFuZCBwZXJzaXN0IGl0XHJcbiAgICAgKiB0byBJbmRleGVkREIuXHJcbiAgICAgKiBOb3RlIHRoYXQgd2Ugb25seSBzdG9yZSBvbmUgaGVhcnRiZWF0IHBlciBkYXkuIFNvIGlmIGEgaGVhcnRiZWF0IGZvciB0b2RheSBpc1xyXG4gICAgICogYWxyZWFkeSBsb2dnZWQsIHN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBpbiB0aGUgc2FtZSBkYXkgd2lsbCBiZSBpZ25vcmVkLlxyXG4gICAgICovXHJcbiAgICBhc3luYyB0cmlnZ2VySGVhcnRiZWF0KCkge1xyXG4gICAgICAgIGNvbnN0IHBsYXRmb3JtTG9nZ2VyID0gdGhpcy5jb250YWluZXJcclxuICAgICAgICAgICAgLmdldFByb3ZpZGVyKCdwbGF0Zm9ybS1sb2dnZXInKVxyXG4gICAgICAgICAgICAuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgXCJGaXJlYmFzZSB1c2VyIGFnZW50XCIgc3RyaW5nIGZyb20gdGhlIHBsYXRmb3JtIGxvZ2dlclxyXG4gICAgICAgIC8vIHNlcnZpY2UsIG5vdCB0aGUgYnJvd3NlciB1c2VyIGFnZW50LlxyXG4gICAgICAgIGNvbnN0IGFnZW50ID0gcGxhdGZvcm1Mb2dnZXIuZ2V0UGxhdGZvcm1JbmZvU3RyaW5nKCk7XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcclxuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IGF3YWl0IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERvIG5vdCBzdG9yZSBhIGhlYXJ0YmVhdCBpZiBvbmUgaXMgYWxyZWFkeSBzdG9yZWQgZm9yIHRoaXMgZGF5XHJcbiAgICAgICAgLy8gb3IgaWYgYSBoZWFkZXIgaGFzIGFscmVhZHkgYmVlbiBzZW50IHRvZGF5LlxyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID09PSBkYXRlIHx8XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLnNvbWUoc2luZ2xlRGF0ZUhlYXJ0YmVhdCA9PiBzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGUgPT09IGRhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIGRhdGUuIENyZWF0ZSBvbmUuXHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLnB1c2goeyBkYXRlLCBhZ2VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVtb3ZlIGVudHJpZXMgb2xkZXIgdGhhbiAzMCBkYXlzLlxyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuZmlsdGVyKHNpbmdsZURhdGVIZWFydGJlYXQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBoYlRpbWVzdGFtcCA9IG5ldyBEYXRlKHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSkudmFsdWVPZigpO1xyXG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICByZXR1cm4gbm93IC0gaGJUaW1lc3RhbXAgPD0gU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUztcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB3aGljaCBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlIGhlYXJ0YmVhdC1zcGVjaWZpYyBoZWFkZXIgZGlyZWN0bHkuXHJcbiAgICAgKiBJdCBhbHNvIGNsZWFycyBhbGwgaGVhcnRiZWF0cyBmcm9tIG1lbW9yeSBhcyB3ZWxsIGFzIGluIEluZGV4ZWREQi5cclxuICAgICAqXHJcbiAgICAgKiBOT1RFOiBDb25zdW1pbmcgcHJvZHVjdCBTREtzIHNob3VsZCBub3Qgc2VuZCB0aGUgaGVhZGVyIGlmIHRoaXMgbWV0aG9kXHJcbiAgICAgKiByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0SGVhcnRiZWF0c0hlYWRlcigpIHtcclxuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIGl0J3Mgc3RpbGwgbnVsbCBvciB0aGUgYXJyYXkgaXMgZW1wdHksIHRoZXJlIGlzIG5vIGRhdGEgdG8gc2VuZC5cclxuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBnZXRVVENEYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgLy8gRXh0cmFjdCBhcyBtYW55IGhlYXJ0YmVhdHMgZnJvbSB0aGUgY2FjaGUgYXMgd2lsbCBmaXQgdW5kZXIgdGhlIHNpemUgbGltaXQuXHJcbiAgICAgICAgY29uc3QgeyBoZWFydGJlYXRzVG9TZW5kLCB1bnNlbnRFbnRyaWVzIH0gPSBleHRyYWN0SGVhcnRiZWF0c0ZvckhlYWRlcih0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyU3RyaW5nID0gYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoSlNPTi5zdHJpbmdpZnkoeyB2ZXJzaW9uOiAyLCBoZWFydGJlYXRzOiBoZWFydGJlYXRzVG9TZW5kIH0pKTtcclxuICAgICAgICAvLyBTdG9yZSBsYXN0IHNlbnQgZGF0ZSB0byBwcmV2ZW50IGFub3RoZXIgYmVpbmcgbG9nZ2VkL3NlbnQgZm9yIHRoZSBzYW1lIGRheS5cclxuICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID0gZGF0ZTtcclxuICAgICAgICBpZiAodW5zZW50RW50cmllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIFN0b3JlIGFueSB1bnNlbnQgZW50cmllcyBpZiB0aGV5IGV4aXN0LlxyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IHVuc2VudEVudHJpZXM7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgc2VlbXMgbW9yZSBsaWtlbHkgdGhhbiBlbXB0eWluZyB0aGUgYXJyYXkgKGJlbG93KSB0byBsZWFkIHRvIHNvbWUgb2RkIHN0YXRlXHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjYWNoZSBpc24ndCBlbXB0eSBhbmQgdGhpcyB3aWxsIGJlIGNhbGxlZCBhZ2FpbiBvbiB0aGUgbmV4dCByZXF1ZXN0LFxyXG4gICAgICAgICAgICAvLyBhbmQgaXMgcHJvYmFibHkgc2FmZXN0IGlmIHdlIGF3YWl0IGl0LlxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSBbXTtcclxuICAgICAgICAgICAgLy8gRG8gbm90IHdhaXQgZm9yIHRoaXMsIHRvIHJlZHVjZSBsYXRlbmN5LlxyXG4gICAgICAgICAgICB2b2lkIHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoZWFkZXJTdHJpbmc7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VVRDRGF0ZVN0cmluZygpIHtcclxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgIC8vIFJldHVybnMgZGF0ZSBmb3JtYXQgJ1lZWVktTU0tREQnXHJcbiAgICByZXR1cm4gdG9kYXkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKGhlYXJ0YmVhdHNDYWNoZSwgbWF4U2l6ZSA9IE1BWF9IRUFERVJfQllURVMpIHtcclxuICAgIC8vIEhlYXJ0YmVhdHMgZ3JvdXBlZCBieSB1c2VyIGFnZW50IGluIHRoZSBzdGFuZGFyZCBmb3JtYXQgdG8gYmUgc2VudCBpblxyXG4gICAgLy8gdGhlIGhlYWRlci5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdHNUb1NlbmQgPSBbXTtcclxuICAgIC8vIFNpbmdsZSBkYXRlIGZvcm1hdCBoZWFydGJlYXRzIHRoYXQgYXJlIG5vdCBzZW50LlxyXG4gICAgbGV0IHVuc2VudEVudHJpZXMgPSBoZWFydGJlYXRzQ2FjaGUuc2xpY2UoKTtcclxuICAgIGZvciAoY29uc3Qgc2luZ2xlRGF0ZUhlYXJ0YmVhdCBvZiBoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgICAgICAvLyBMb29rIGZvciBhbiBleGlzdGluZyBlbnRyeSB3aXRoIHRoZSBzYW1lIHVzZXIgYWdlbnQuXHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0RW50cnkgPSBoZWFydGJlYXRzVG9TZW5kLmZpbmQoaGIgPT4gaGIuYWdlbnQgPT09IHNpbmdsZURhdGVIZWFydGJlYXQuYWdlbnQpO1xyXG4gICAgICAgIGlmICghaGVhcnRiZWF0RW50cnkpIHtcclxuICAgICAgICAgICAgLy8gSWYgbm8gZW50cnkgZm9yIHRoaXMgdXNlciBhZ2VudCBleGlzdHMsIGNyZWF0ZSBvbmUuXHJcbiAgICAgICAgICAgIGhlYXJ0YmVhdHNUb1NlbmQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBhZ2VudDogc2luZ2xlRGF0ZUhlYXJ0YmVhdC5hZ2VudCxcclxuICAgICAgICAgICAgICAgIGRhdGVzOiBbc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaGVhZGVyIHdvdWxkIGV4Y2VlZCBtYXggc2l6ZSwgcmVtb3ZlIHRoZSBhZGRlZCBoZWFydGJlYXRcclxuICAgICAgICAgICAgICAgIC8vIGVudHJ5IGFuZCBzdG9wIGFkZGluZyB0byB0aGUgaGVhZGVyLlxyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wdXNoKHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGRhdGVcclxuICAgICAgICAgICAgLy8gYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgIGlmIChjb3VudEJ5dGVzKGhlYXJ0YmVhdHNUb1NlbmQpID4gbWF4U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0RW50cnkuZGF0ZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQb3AgdW5zZW50IGVudHJ5IGZyb20gcXVldWUuIChTa2lwcGVkIGlmIGFkZGluZyB0aGUgZW50cnkgZXhjZWVkZWRcclxuICAgICAgICAvLyBxdW90YSBhbmQgdGhlIGxvb3AgYnJlYWtzIGVhcmx5LilcclxuICAgICAgICB1bnNlbnRFbnRyaWVzID0gdW5zZW50RW50cmllcy5zbGljZSgxKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhcnRiZWF0c1RvU2VuZCxcclxuICAgICAgICB1bnNlbnRFbnRyaWVzXHJcbiAgICB9O1xyXG59XHJcbmNsYXNzIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgICAgIHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2UgPSB0aGlzLnJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2soKTtcclxuICAgIH1cclxuICAgIGFzeW5jIHJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2soKSB7XHJcbiAgICAgICAgaWYgKCFpc0luZGV4ZWREQkF2YWlsYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRydWUpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhbGwgaGVhcnRiZWF0cy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVhZCgpIHtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGhlYXJ0YmVhdHM6IFtdIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpZGJIZWFydGJlYXRPYmplY3QgPSBhd2FpdCByZWFkSGVhcnRiZWF0c0Zyb21JbmRleGVkREIodGhpcy5hcHApO1xyXG4gICAgICAgICAgICByZXR1cm4gaWRiSGVhcnRiZWF0T2JqZWN0IHx8IHsgaGVhcnRiZWF0czogW10gfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvdmVyd3JpdGUgdGhlIHN0b3JhZ2Ugd2l0aCB0aGUgcHJvdmlkZWQgaGVhcnRiZWF0c1xyXG4gICAgYXN5bmMgb3ZlcndyaXRlKGhlYXJ0YmVhdHNPYmplY3QpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgY2FuVXNlSW5kZXhlZERCID0gYXdhaXQgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZTtcclxuICAgICAgICBpZiAoIWNhblVzZUluZGV4ZWREQikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QgPSBhd2FpdCB0aGlzLnJlYWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCKHRoaXMuYXBwLCB7XHJcbiAgICAgICAgICAgICAgICBsYXN0U2VudEhlYXJ0YmVhdERhdGU6IChfYSA9IGhlYXJ0YmVhdHNPYmplY3QubGFzdFNlbnRIZWFydGJlYXREYXRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QubGFzdFNlbnRIZWFydGJlYXREYXRlLFxyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0czogaGVhcnRiZWF0c09iamVjdC5oZWFydGJlYXRzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGFkZCBoZWFydGJlYXRzXHJcbiAgICBhc3luYyBhZGQoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IGF3YWl0IHRoaXMucmVhZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIodGhpcy5hcHAsIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTZW50SGVhcnRiZWF0RGF0ZTogKF9hID0gaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUsXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uaGVhcnRiZWF0c09iamVjdC5oZWFydGJlYXRzXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlIGJ5dGVzIG9mIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IGFycmF5IGFmdGVyIGJlaW5nIHdyYXBwZWRcclxuICogaW4gYSBwbGF0Zm9ybSBsb2dnaW5nIGhlYWRlciBKU09OIG9iamVjdCwgc3RyaW5naWZpZWQsIGFuZCBjb252ZXJ0ZWRcclxuICogdG8gYmFzZSA2NC5cclxuICovXHJcbmZ1bmN0aW9uIGNvdW50Qnl0ZXMoaGVhcnRiZWF0c0NhY2hlKSB7XHJcbiAgICAvLyBiYXNlNjQgaGFzIGEgcmVzdHJpY3RlZCBzZXQgb2YgY2hhcmFjdGVycywgYWxsIG9mIHdoaWNoIHNob3VsZCBiZSAxIGJ5dGUuXHJcbiAgICByZXR1cm4gYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoXHJcbiAgICAvLyBoZWFydGJlYXRzQ2FjaGUgd3JhcHBlciBwcm9wZXJ0aWVzXHJcbiAgICBKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNDYWNoZSB9KSkubGVuZ3RoO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQ29yZUNvbXBvbmVudHModmFyaWFudCkge1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ3BsYXRmb3JtLWxvZ2dlcicsIGNvbnRhaW5lciA9PiBuZXcgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbChjb250YWluZXIpLCBcIlBSSVZBVEVcIiAvKiBDb21wb25lbnRUeXBlLlBSSVZBVEUgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KCdoZWFydGJlYXQnLCBjb250YWluZXIgPT4gbmV3IEhlYXJ0YmVhdFNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgLy8gUmVnaXN0ZXIgYGFwcGAgcGFja2FnZS5cclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lJG8sIHZlcnNpb24kMSwgdmFyaWFudCk7XHJcbiAgICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUkbywgdmVyc2lvbiQxLCAnZXNtMjAxNycpO1xyXG4gICAgLy8gUmVnaXN0ZXIgcGxhdGZvcm0gU0RLIGlkZW50aWZpZXIgKG5vIHZlcnNpb24pLlxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKCdmaXJlLWpzJywgJycpO1xyXG59XG5cbi8qKlxyXG4gKiBGaXJlYmFzZSBBcHBcclxuICpcclxuICogQHJlbWFya3MgVGhpcyBwYWNrYWdlIGNvb3JkaW5hdGVzIHRoZSBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGhlIGRpZmZlcmVudCBGaXJlYmFzZSBjb21wb25lbnRzXHJcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxyXG4gKi9cclxucmVnaXN0ZXJDb3JlQ29tcG9uZW50cygnJyk7XG5cbmV4cG9ydCB7IFNES19WRVJTSU9OLCBERUZBVUxUX0VOVFJZX05BTUUgYXMgX0RFRkFVTFRfRU5UUllfTkFNRSwgX2FkZENvbXBvbmVudCwgX2FkZE9yT3ZlcndyaXRlQ29tcG9uZW50LCBfYXBwcywgX2NsZWFyQ29tcG9uZW50cywgX2NvbXBvbmVudHMsIF9nZXRQcm92aWRlciwgX3JlZ2lzdGVyQ29tcG9uZW50LCBfcmVtb3ZlU2VydmljZUluc3RhbmNlLCBkZWxldGVBcHAsIGdldEFwcCwgZ2V0QXBwcywgaW5pdGlhbGl6ZUFwcCwgb25Mb2csIHJlZ2lzdGVyVmVyc2lvbiwgc2V0TG9nTGV2ZWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXHJcbiAqIENvbXBvbmVudCBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gYGF1dGhgLCBgYXV0aC1pbnRlcm5hbGBcclxuICovXHJcbmNsYXNzIENvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgcHVibGljIHNlcnZpY2UgbmFtZSwgZS5nLiBhcHAsIGF1dGgsIGZpcmVzdG9yZSwgZGF0YWJhc2VcclxuICAgICAqIEBwYXJhbSBpbnN0YW5jZUZhY3RvcnkgU2VydmljZSBmYWN0b3J5IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgcHVibGljIGludGVyZmFjZVxyXG4gICAgICogQHBhcmFtIHR5cGUgd2hldGhlciB0aGUgc2VydmljZSBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50IGlzIHB1YmxpYyBvciBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGluc3RhbmNlRmFjdG9yeSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZUZhY3RvcnkgPSBpbnN0YW5jZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgc2VydmljZSBuYW1lc3BhY2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBcIkxBWllcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5MQVpZICovO1xyXG4gICAgICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFudGlhdGlvbk1vZGUobW9kZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0TXVsdGlwbGVJbnN0YW5jZXMobXVsdGlwbGVJbnN0YW5jZXMpIHtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gbXVsdGlwbGVJbnN0YW5jZXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRTZXJ2aWNlUHJvcHMocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLm9uSW5zdGFuY2VDcmVhdGVkID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgaW5zdGFuY2UgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuICdhdXRoJywgJ2F1dGgtaW50ZXJuYWwnXHJcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXHJcbiAqL1xyXG5jbGFzcyBQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm9uSW5pdENhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXHJcbiAgICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxyXG4gICAgICovXHJcbiAgICBnZXQoaWRlbnRpZmllcikge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuaGFzKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZGVmZXJyZWQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzZXJ2aWNlIGlmIGl0IGNhbiBiZSBhdXRvLWluaXRpYWxpemVkXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgZ2V0KCksIGl0IHNob3VsZCBub3QgY2F1c2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IHJldHVybiB0aGUgdW5yZXNvbHZlZCBwcm9taXNlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpLnByb21pc2U7XHJcbiAgICB9XHJcbiAgICBnZXRJbW1lZGlhdGUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlkZW50aWZpZXIpO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbmFsID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9wdGlvbmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBTZXJ2aWNlICR7dGhpcy5uYW1lfSBpcyBub3QgYXZhaWxhYmxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50O1xyXG4gICAgfVxyXG4gICAgc2V0Q29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBNaXNtYXRjaGluZyBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZm9yIFByb3ZpZGVyICR7dGhpcy5uYW1lfS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgZm9yICR7dGhpcy5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHByb3ZpZGVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIC8vIHJldHVybiBlYXJseSB3aXRob3V0IGF0dGVtcHRpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IGlmIHRoZSBjb21wb25lbnQgcmVxdWlyZXMgZXhwbGljaXQgaW5pdGlhbGl6YXRpb24gKGNhbGxpbmcgYFByb3ZpZGVyLmluaXRpYWxpemUoKWApXHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBlYWdlciwgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG4gICAgICAgIGlmIChpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7IGluc3RhbmNlSWRlbnRpZmllcjogREVGQVVMVF9FTlRSWV9OQU1FIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IGZvciBhbiBlYWdlciBDb21wb25lbnQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgdGhlIGVhZ2VyXHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXphdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZSBhIGZhdGFsIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvciBpbiB0aGlzIGNhc2U/XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ3JlYXRlIHNlcnZpY2UgaW5zdGFuY2VzIGZvciB0aGUgcGVuZGluZyBwcm9taXNlcyBhbmQgcmVzb2x2ZSB0aGVtXHJcbiAgICAgICAgLy8gTk9URTogaWYgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyBpcyBmYWxzZSwgb25seSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWRcclxuICAgICAgICAvLyBhbmQgYWxsIHByb21pc2VzIHdpdGggcmVzb2x2ZSB3aXRoIGl0IHJlZ2FyZGxlc3Mgb2YgdGhlIGlkZW50aWZpZXIuXHJcbiAgICAgICAgZm9yIChjb25zdCBbaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZURlZmVycmVkXSBvZiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBgZ2V0T3JJbml0aWFsaXplU2VydmljZSgpYCBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbGlkIGluc3RhbmNlIHNpbmNlIGEgY29tcG9uZW50IGlzIGd1YXJhbnRlZWQuIHVzZSAhIHRvIG1ha2UgdHlwZXNjcmlwdCBoYXBweS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvci4gV2UganVzdCBsZWF2ZSB0aGUgcHJvbWlzZSB1bnJlc29sdmVkLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xlYXJJbnN0YW5jZShpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcy5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICB9XHJcbiAgICAvLyBhcHAuZGVsZXRlKCkgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIG9uIGV2ZXJ5IHByb3ZpZGVyIHRvIGRlbGV0ZSB0aGUgc2VydmljZXNcclxuICAgIC8vIFRPRE86IHNob3VsZCB3ZSBtYXJrIHRoZSBwcm92aWRlciBhcyBkZWxldGVkP1xyXG4gICAgYXN5bmMgZGVsZXRlKCkge1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdJTlRFUk5BTCcgaW4gc2VydmljZSkgLy8gbGVnYWN5IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgLm1hcChzZXJ2aWNlID0+IHNlcnZpY2UuSU5URVJOQUwuZGVsZXRlKCkpLFxyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdfZGVsZXRlJyBpbiBzZXJ2aWNlKSAvLyBtb2R1bGFyaXplZCBzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIC5tYXAoc2VydmljZSA9PiBzZXJ2aWNlLl9kZWxldGUoKSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGlzQ29tcG9uZW50U2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCAhPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaXNJbml0aWFsaXplZChpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmhhcyhpZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIGdldE9wdGlvbnMoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc09wdGlvbnMuZ2V0KGlkZW50aWZpZXIpIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZShvcHRzID0ge30pIHtcclxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgPSB7fSB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHt0aGlzLm5hbWV9KCR7bm9ybWFsaXplZElkZW50aWZpZXJ9KSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgJHt0aGlzLm5hbWV9IGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIHlldGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XHJcbiAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXIsXHJcbiAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyByZXNvbHZlIGFueSBwZW5kaW5nIHByb21pc2Ugd2FpdGluZyBmb3IgdGhlIHNlcnZpY2UgaW5zdGFuY2VcclxuICAgICAgICBmb3IgKGNvbnN0IFtpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlRGVmZXJyZWRdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZElkZW50aWZpZXIgPT09IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCAgYWZ0ZXIgdGhlIHByb3ZpZGVyIGhhcyBiZWVuIGluaXRpYWxpemVkIGJ5IGNhbGxpbmcgcHJvdmlkZXIuaW5pdGlhbGl6ZSgpLlxyXG4gICAgICogVGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgU1lOQ0hST05PVVNMWSwgc28gaXQgc2hvdWxkIG5vdCBleGVjdXRlIGFueSBsb25ncnVubmluZyB0YXNrcyBpbiBvcmRlciB0byBub3QgYmxvY2sgdGhlIHByb2dyYW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQW4gb3B0aW9uYWwgaW5zdGFuY2UgaWRlbnRpZmllclxyXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBvbkluaXQoY2FsbGJhY2ssIGlkZW50aWZpZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0NhbGxiYWNrcyA9IChfYSA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChub3JtYWxpemVkSWRlbnRpZmllcikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBTZXQoKTtcclxuICAgICAgICBleGlzdGluZ0NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZXhpc3RpbmdDYWxsYmFja3MpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2Ugb25Jbml0IGNhbGxiYWNrcyBzeW5jaHJvbm91c2x5XHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgdGhlIHNlcnZpY2UgaW5zdGFuY2VgXHJcbiAgICAgKi9cclxuICAgIGludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaWRlbnRpZmllcikge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnN0YW5jZSwgaWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluaXQgY2FsbGJhY2tcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoeyBpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMgPSB7fSB9KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZXMuZ2V0KGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSAmJiB0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpbnN0YW5jZUlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbnZva2Ugb25Jbml0IGxpc3RlbmVycy5cclxuICAgICAgICAgICAgICogTm90ZSB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCBpcyBkaWZmZXJlbnQsIHdoaWNoIGlzIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBjcmVhdG9yLFxyXG4gICAgICAgICAgICAgKiB3aGlsZSBvbkluaXQgbGlzdGVuZXJzIGFyZSByZWdpc3RlcmVkIGJ5IGNvbnN1bWVycyBvZiB0aGUgcHJvdmlkZXIuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIE9yZGVyIGlzIGltcG9ydGFudFxyXG4gICAgICAgICAgICAgKiBvbkluc3RhbmNlQ3JlYXRlZCgpIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpOyB3aGljaFxyXG4gICAgICAgICAgICAgKiBtYWtlcyBgaXNJbml0aWFsaXplZCgpYCByZXR1cm4gdHJ1ZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCh0aGlzLmNvbnRhaW5lciwgaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluc3RhbmNlQ3JlYXRlZENhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG91bGRBdXRvSW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICByZXR1cm4gKCEhdGhpcy5jb21wb25lbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgIT09IFwiRVhQTElDSVRcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5FWFBMSUNJVCAqLyk7XHJcbiAgICB9XHJcbn1cclxuLy8gdW5kZWZpbmVkIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHNlcnZpY2UgZmFjdG9yeSBmb3IgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcikge1xyXG4gICAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpIHtcclxuICAgIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IFwiRUFHRVJcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5FQUdFUiAqLztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29tcG9uZW50Q29udGFpbmVyIHRoYXQgcHJvdmlkZXMgUHJvdmlkZXJzIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcclxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIHRydWU6IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgY29tcG9uZW50IHdpdGggdGhlIG5ldyBjb21wb25lbnQgYW5kIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXHJcbiAgICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIGZhbHNlOiB0aHJvdyBhbiBleGNlcHRpb25cclxuICAgICAqL1xyXG4gICAgYWRkQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIHdpdGggJHt0aGlzLm5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICAvLyBkZWxldGUgdGhlIGV4aXN0aW5nIHByb3ZpZGVyIGZyb20gdGhlIGNvbnRhaW5lciwgc28gd2UgY2FuIHJlZ2lzdGVyIHRoZSBuZXcgY29tcG9uZW50XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLmRlbGV0ZShjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcclxuICAgICAqIHByZXNlbnQgaW4gTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcclxuICAgICAqIHRoZW1zZWx2ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldFByb3ZpZGVyKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm92aWRlcnMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIFByb3ZpZGVyIGZvciBhIHNlcnZpY2UgdGhhdCBoYXNuJ3QgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlXHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICBnZXRQcm92aWRlcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyLCBQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IF9nZXRQcm92aWRlciwgZ2V0QXBwLCBfcmVnaXN0ZXJDb21wb25lbnQsIHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xuXG5jb25zdCBuYW1lID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuY29uc3QgdmVyc2lvbiA9IFwiMC42LjRcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgUEVORElOR19USU1FT1VUX01TID0gMTAwMDA7XHJcbmNvbnN0IFBBQ0tBR0VfVkVSU0lPTiA9IGB3OiR7dmVyc2lvbn1gO1xyXG5jb25zdCBJTlRFUk5BTF9BVVRIX1ZFUlNJT04gPSAnRklTX3YyJztcclxuY29uc3QgSU5TVEFMTEFUSU9OU19BUElfVVJMID0gJ2h0dHBzOi8vZmlyZWJhc2VpbnN0YWxsYXRpb25zLmdvb2dsZWFwaXMuY29tL3YxJztcclxuY29uc3QgVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIgPSA2MCAqIDYwICogMTAwMDsgLy8gT25lIGhvdXJcclxuY29uc3QgU0VSVklDRSA9ICdpbnN0YWxsYXRpb25zJztcclxuY29uc3QgU0VSVklDRV9OQU1FID0gJ0luc3RhbGxhdGlvbnMnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBFUlJPUl9ERVNDUklQVElPTl9NQVAgPSB7XHJcbiAgICBbXCJtaXNzaW5nLWFwcC1jb25maWctdmFsdWVzXCIgLyogRXJyb3JDb2RlLk1JU1NJTkdfQVBQX0NPTkZJR19WQUxVRVMgKi9dOiAnTWlzc2luZyBBcHAgY29uZmlndXJhdGlvbiB2YWx1ZTogXCJ7JHZhbHVlTmFtZX1cIicsXHJcbiAgICBbXCJub3QtcmVnaXN0ZXJlZFwiIC8qIEVycm9yQ29kZS5OT1RfUkVHSVNURVJFRCAqL106ICdGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgbm90IHJlZ2lzdGVyZWQuJyxcclxuICAgIFtcImluc3RhbGxhdGlvbi1ub3QtZm91bmRcIiAvKiBFcnJvckNvZGUuSU5TVEFMTEFUSU9OX05PVF9GT1VORCAqL106ICdGaXJlYmFzZSBJbnN0YWxsYXRpb24gbm90IGZvdW5kLicsXHJcbiAgICBbXCJyZXF1ZXN0LWZhaWxlZFwiIC8qIEVycm9yQ29kZS5SRVFVRVNUX0ZBSUxFRCAqL106ICd7JHJlcXVlc3ROYW1lfSByZXF1ZXN0IGZhaWxlZCB3aXRoIGVycm9yIFwieyRzZXJ2ZXJDb2RlfSB7JHNlcnZlclN0YXR1c306IHskc2VydmVyTWVzc2FnZX1cIicsXHJcbiAgICBbXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqL106ICdDb3VsZCBub3QgcHJvY2VzcyByZXF1ZXN0LiBBcHBsaWNhdGlvbiBvZmZsaW5lLicsXHJcbiAgICBbXCJkZWxldGUtcGVuZGluZy1yZWdpc3RyYXRpb25cIiAvKiBFcnJvckNvZGUuREVMRVRFX1BFTkRJTkdfUkVHSVNUUkFUSU9OICovXTogXCJDYW4ndCBkZWxldGUgaW5zdGFsbGF0aW9uIHdoaWxlIHRoZXJlIGlzIGEgcGVuZGluZyByZWdpc3RyYXRpb24gcmVxdWVzdC5cIlxyXG59O1xyXG5jb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeShTRVJWSUNFLCBTRVJWSUNFX05BTUUsIEVSUk9SX0RFU0NSSVBUSU9OX01BUCk7XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgZXJyb3IgaXMgYSBGaXJlYmFzZUVycm9yIHRoYXQgaXMgYmFzZWQgb24gYW4gZXJyb3IgZnJvbSB0aGUgc2VydmVyLiAqL1xyXG5mdW5jdGlvbiBpc1NlcnZlckVycm9yKGVycm9yKSB7XHJcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvciAmJlxyXG4gICAgICAgIGVycm9yLmNvZGUuaW5jbHVkZXMoXCJyZXF1ZXN0LWZhaWxlZFwiIC8qIEVycm9yQ29kZS5SRVFVRVNUX0ZBSUxFRCAqLykpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbnNFbmRwb2ludCh7IHByb2plY3RJZCB9KSB7XHJcbiAgICByZXR1cm4gYCR7SU5TVEFMTEFUSU9OU19BUElfVVJMfS9wcm9qZWN0cy8ke3Byb2plY3RJZH0vaW5zdGFsbGF0aW9uc2A7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9rZW46IHJlc3BvbnNlLnRva2VuLFxyXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6IDIgLyogUmVxdWVzdFN0YXR1cy5DT01QTEVURUQgKi8sXHJcbiAgICAgICAgZXhwaXJlc0luOiBnZXRFeHBpcmVzSW5Gcm9tUmVzcG9uc2VFeHBpcmVzSW4ocmVzcG9uc2UuZXhwaXJlc0luKSxcclxuICAgICAgICBjcmVhdGlvblRpbWU6IERhdGUubm93KClcclxuICAgIH07XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZ2V0RXJyb3JGcm9tUmVzcG9uc2UocmVxdWVzdE5hbWUsIHJlc3BvbnNlKSB7XHJcbiAgICBjb25zdCByZXNwb25zZUpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSByZXNwb25zZUpzb24uZXJyb3I7XHJcbiAgICByZXR1cm4gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJyZXF1ZXN0LWZhaWxlZFwiIC8qIEVycm9yQ29kZS5SRVFVRVNUX0ZBSUxFRCAqLywge1xyXG4gICAgICAgIHJlcXVlc3ROYW1lLFxyXG4gICAgICAgIHNlcnZlckNvZGU6IGVycm9yRGF0YS5jb2RlLFxyXG4gICAgICAgIHNlcnZlck1lc3NhZ2U6IGVycm9yRGF0YS5tZXNzYWdlLFxyXG4gICAgICAgIHNlcnZlclN0YXR1czogZXJyb3JEYXRhLnN0YXR1c1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0SGVhZGVycyh7IGFwaUtleSB9KSB7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3gtZ29vZy1hcGkta2V5JzogYXBpS2V5XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCB7IHJlZnJlc2hUb2tlbiB9KSB7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikpO1xyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxzIHRoZSBwYXNzZWQgaW4gZmV0Y2ggd3JhcHBlciBhbmQgcmV0dXJucyB0aGUgcmVzcG9uc2UuXHJcbiAqIElmIHRoZSByZXR1cm5lZCByZXNwb25zZSBoYXMgYSBzdGF0dXMgb2YgNXh4LCByZS1ydW5zIHRoZSBmdW5jdGlvbiBvbmNlIGFuZFxyXG4gKiByZXR1cm5zIHRoZSByZXNwb25zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJldHJ5SWZTZXJ2ZXJFcnJvcihmbikge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcclxuICAgIGlmIChyZXN1bHQuc3RhdHVzID49IDUwMCAmJiByZXN1bHQuc3RhdHVzIDwgNjAwKSB7XHJcbiAgICAgICAgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yLiBSZXRyeSByZXF1ZXN0LlxyXG4gICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBnZXRFeHBpcmVzSW5Gcm9tUmVzcG9uc2VFeHBpcmVzSW4ocmVzcG9uc2VFeHBpcmVzSW4pIHtcclxuICAgIC8vIFRoaXMgd29ya3MgYmVjYXVzZSB0aGUgc2VydmVyIHdpbGwgbmV2ZXIgcmVzcG9uZCB3aXRoIGZyYWN0aW9ucyBvZiBhIHNlY29uZC5cclxuICAgIHJldHVybiBOdW1iZXIocmVzcG9uc2VFeHBpcmVzSW4ucmVwbGFjZSgncycsICcwMDAnKSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QXV0aG9yaXphdGlvbkhlYWRlcihyZWZyZXNoVG9rZW4pIHtcclxuICAgIHJldHVybiBgJHtJTlRFUk5BTF9BVVRIX1ZFUlNJT059ICR7cmVmcmVzaFRva2VufWA7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlSW5zdGFsbGF0aW9uUmVxdWVzdCh7IGFwcENvbmZpZywgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyIH0sIHsgZmlkIH0pIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KGFwcENvbmZpZyk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgLy8gSWYgaGVhcnRiZWF0IHNlcnZpY2UgZXhpc3RzLCBhZGQgdGhlIGhlYXJ0YmVhdCBzdHJpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdFNlcnZpY2UgPSBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKHtcclxuICAgICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0U2VydmljZSkge1xyXG4gICAgICAgIGNvbnN0IGhlYXJ0YmVhdHNIZWFkZXIgPSBhd2FpdCBoZWFydGJlYXRTZXJ2aWNlLmdldEhlYXJ0YmVhdHNIZWFkZXIoKTtcclxuICAgICAgICBpZiAoaGVhcnRiZWF0c0hlYWRlcikge1xyXG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgneC1maXJlYmFzZS1jbGllbnQnLCBoZWFydGJlYXRzSGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICAgIGZpZCxcclxuICAgICAgICBhdXRoVmVyc2lvbjogSU5URVJOQUxfQVVUSF9WRVJTSU9OLFxyXG4gICAgICAgIGFwcElkOiBhcHBDb25maWcuYXBwSWQsXHJcbiAgICAgICAgc2RrVmVyc2lvbjogUEFDS0FHRV9WRVJTSU9OXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXRyeUlmU2VydmVyRXJyb3IoKCkgPT4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpKTtcclxuICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVmFsdWUgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5ID0ge1xyXG4gICAgICAgICAgICBmaWQ6IHJlc3BvbnNlVmFsdWUuZmlkIHx8IGZpZCxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAyIC8qIFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEICovLFxyXG4gICAgICAgICAgICByZWZyZXNoVG9rZW46IHJlc3BvbnNlVmFsdWUucmVmcmVzaFRva2VuLFxyXG4gICAgICAgICAgICBhdXRoVG9rZW46IGV4dHJhY3RBdXRoVG9rZW5JbmZvRnJvbVJlc3BvbnNlKHJlc3BvbnNlVmFsdWUuYXV0aFRva2VuKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IGF3YWl0IGdldEVycm9yRnJvbVJlc3BvbnNlKCdDcmVhdGUgSW5zdGFsbGF0aW9uJywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIGdpdmVuIHRpbWUgcGFzc2VzLiAqL1xyXG5mdW5jdGlvbiBzbGVlcChtcykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpO1xyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gYnVmZmVyVG9CYXNlNjRVcmxTYWZlKGFycmF5KSB7XHJcbiAgICBjb25zdCBiNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uYXJyYXkpKTtcclxuICAgIHJldHVybiBiNjQucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgVkFMSURfRklEX1BBVFRFUk4gPSAvXltjZGVmXVtcXHctXXsyMX0kLztcclxuY29uc3QgSU5WQUxJRF9GSUQgPSAnJztcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG5ldyBGSUQgdXNpbmcgcmFuZG9tIHZhbHVlcyBmcm9tIFdlYiBDcnlwdG8gQVBJLlxyXG4gKiBSZXR1cm5zIGFuIGVtcHR5IHN0cmluZyBpZiBGSUQgZ2VuZXJhdGlvbiBmYWlscyBmb3IgYW55IHJlYXNvbi5cclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRmlkKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBBIHZhbGlkIEZJRCBoYXMgZXhhY3RseSAyMiBiYXNlNjQgY2hhcmFjdGVycywgd2hpY2ggaXMgMTMyIGJpdHMsIG9yIDE2LjVcclxuICAgICAgICAvLyBieXRlcy4gb3VyIGltcGxlbWVudGF0aW9uIGdlbmVyYXRlcyBhIDE3IGJ5dGUgYXJyYXkgaW5zdGVhZC5cclxuICAgICAgICBjb25zdCBmaWRCeXRlQXJyYXkgPSBuZXcgVWludDhBcnJheSgxNyk7XHJcbiAgICAgICAgY29uc3QgY3J5cHRvID0gc2VsZi5jcnlwdG8gfHwgc2VsZi5tc0NyeXB0bztcclxuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGZpZEJ5dGVBcnJheSk7XHJcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgZmlyc3QgNCByYW5kb20gYml0cyB3aXRoIHRoZSBjb25zdGFudCBGSUQgaGVhZGVyIG9mIDBiMDExMS5cclxuICAgICAgICBmaWRCeXRlQXJyYXlbMF0gPSAwYjAxMTEwMDAwICsgKGZpZEJ5dGVBcnJheVswXSAlIDBiMDAwMTAwMDApO1xyXG4gICAgICAgIGNvbnN0IGZpZCA9IGVuY29kZShmaWRCeXRlQXJyYXkpO1xyXG4gICAgICAgIHJldHVybiBWQUxJRF9GSURfUEFUVEVSTi50ZXN0KGZpZCkgPyBmaWQgOiBJTlZBTElEX0ZJRDtcclxuICAgIH1cclxuICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgIC8vIEZJRCBnZW5lcmF0aW9uIGVycm9yZWRcclxuICAgICAgICByZXR1cm4gSU5WQUxJRF9GSUQ7XHJcbiAgICB9XHJcbn1cclxuLyoqIENvbnZlcnRzIGEgRklEIFVpbnQ4QXJyYXkgdG8gYSBiYXNlNjQgc3RyaW5nIHJlcHJlc2VudGF0aW9uLiAqL1xyXG5mdW5jdGlvbiBlbmNvZGUoZmlkQnl0ZUFycmF5KSB7XHJcbiAgICBjb25zdCBiNjRTdHJpbmcgPSBidWZmZXJUb0Jhc2U2NFVybFNhZmUoZmlkQnl0ZUFycmF5KTtcclxuICAgIC8vIFJlbW92ZSB0aGUgMjNyZCBjaGFyYWN0ZXIgdGhhdCB3YXMgYWRkZWQgYmVjYXVzZSBvZiB0aGUgZXh0cmEgNCBiaXRzIGF0IHRoZVxyXG4gICAgLy8gZW5kIG9mIG91ciAxNyBieXRlIGFycmF5LCBhbmQgdGhlICc9JyBwYWRkaW5nLlxyXG4gICAgcmV0dXJuIGI2NFN0cmluZy5zdWJzdHIoMCwgMjIpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKiBSZXR1cm5zIGEgc3RyaW5nIGtleSB0aGF0IGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IHRoZSBhcHAuICovXHJcbmZ1bmN0aW9uIGdldEtleShhcHBDb25maWcpIHtcclxuICAgIHJldHVybiBgJHthcHBDb25maWcuYXBwTmFtZX0hJHthcHBDb25maWcuYXBwSWR9YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBmaWRDaGFuZ2VDYWxsYmFja3MgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBDYWxscyB0aGUgb25JZENoYW5nZSBjYWxsYmFja3Mgd2l0aCB0aGUgbmV3IEZJRCB2YWx1ZSwgYW5kIGJyb2FkY2FzdHMgdGhlXHJcbiAqIGNoYW5nZSB0byBvdGhlciB0YWJzLlxyXG4gKi9cclxuZnVuY3Rpb24gZmlkQ2hhbmdlZChhcHBDb25maWcsIGZpZCkge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzKGtleSwgZmlkKTtcclxuICAgIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjaykge1xyXG4gICAgLy8gT3BlbiB0aGUgYnJvYWRjYXN0IGNoYW5uZWwgaWYgaXQncyBub3QgYWxyZWFkeSBvcGVuLFxyXG4gICAgLy8gdG8gYmUgYWJsZSB0byBsaXN0ZW4gdG8gY2hhbmdlIGV2ZW50cyBmcm9tIG90aGVyIHRhYnMuXHJcbiAgICBnZXRCcm9hZGNhc3RDaGFubmVsKCk7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGxldCBjYWxsYmFja1NldCA9IGZpZENoYW5nZUNhbGxiYWNrcy5nZXQoa2V5KTtcclxuICAgIGlmICghY2FsbGJhY2tTZXQpIHtcclxuICAgICAgICBjYWxsYmFja1NldCA9IG5ldyBTZXQoKTtcclxuICAgICAgICBmaWRDaGFuZ2VDYWxsYmFja3Muc2V0KGtleSwgY2FsbGJhY2tTZXQpO1xyXG4gICAgfVxyXG4gICAgY2FsbGJhY2tTZXQuYWRkKGNhbGxiYWNrKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmVDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGNhbGxiYWNrU2V0ID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja1NldCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNhbGxiYWNrU2V0LmRlbGV0ZShjYWxsYmFjayk7XHJcbiAgICBpZiAoY2FsbGJhY2tTZXQuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgIGZpZENoYW5nZUNhbGxiYWNrcy5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIC8vIENsb3NlIGJyb2FkY2FzdCBjaGFubmVsIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNhbGxiYWNrcy5cclxuICAgIGNsb3NlQnJvYWRjYXN0Q2hhbm5lbCgpO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3Moa2V5LCBmaWQpIHtcclxuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGZpZENoYW5nZUNhbGxiYWNrcy5nZXQoa2V5KTtcclxuICAgIGlmICghY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIHtcclxuICAgICAgICBjYWxsYmFjayhmaWQpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCkge1xyXG4gICAgY29uc3QgY2hhbm5lbCA9IGdldEJyb2FkY2FzdENoYW5uZWwoKTtcclxuICAgIGlmIChjaGFubmVsKSB7XHJcbiAgICAgICAgY2hhbm5lbC5wb3N0TWVzc2FnZSh7IGtleSwgZmlkIH0pO1xyXG4gICAgfVxyXG4gICAgY2xvc2VCcm9hZGNhc3RDaGFubmVsKCk7XHJcbn1cclxubGV0IGJyb2FkY2FzdENoYW5uZWwgPSBudWxsO1xyXG4vKiogT3BlbnMgYW5kIHJldHVybnMgYSBCcm9hZGNhc3RDaGFubmVsIGlmIGl0IGlzIHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci4gKi9cclxuZnVuY3Rpb24gZ2V0QnJvYWRjYXN0Q2hhbm5lbCgpIHtcclxuICAgIGlmICghYnJvYWRjYXN0Q2hhbm5lbCAmJiAnQnJvYWRjYXN0Q2hhbm5lbCcgaW4gc2VsZikge1xyXG4gICAgICAgIGJyb2FkY2FzdENoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCgnW0ZpcmViYXNlXSBGSUQgQ2hhbmdlJyk7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbC5vbm1lc3NhZ2UgPSBlID0+IHtcclxuICAgICAgICAgICAgY2FsbEZpZENoYW5nZUNhbGxiYWNrcyhlLmRhdGEua2V5LCBlLmRhdGEuZmlkKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJyb2FkY2FzdENoYW5uZWw7XHJcbn1cclxuZnVuY3Rpb24gY2xvc2VCcm9hZGNhc3RDaGFubmVsKCkge1xyXG4gICAgaWYgKGZpZENoYW5nZUNhbGxiYWNrcy5zaXplID09PSAwICYmIGJyb2FkY2FzdENoYW5uZWwpIHtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsLmNsb3NlKCk7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREFUQUJBU0VfTkFNRSA9ICdmaXJlYmFzZS1pbnN0YWxsYXRpb25zLWRhdGFiYXNlJztcclxuY29uc3QgREFUQUJBU0VfVkVSU0lPTiA9IDE7XHJcbmNvbnN0IE9CSkVDVF9TVE9SRV9OQU1FID0gJ2ZpcmViYXNlLWluc3RhbGxhdGlvbnMtc3RvcmUnO1xyXG5sZXQgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBvcGVuREIoREFUQUJBU0VfTkFNRSwgREFUQUJBU0VfVkVSU0lPTiwge1xyXG4gICAgICAgICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHVzZSAnYnJlYWsnIGluIHRoaXMgc3dpdGNoIHN0YXRlbWVudCwgdGhlIGZhbGwtdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgd2hhdCB3ZSB3YW50LCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhvc2UgdmVyc2lvbnMgdG8gcnVuLCBub3Qgb25seSB0aGUgbGFzdCBvbmUuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRiUHJvbWlzZTtcclxufVxyXG4vKiogQXNzaWducyBvciBvdmVyd3JpdGVzIHRoZSByZWNvcmQgZm9yIHRoZSBnaXZlbiBrZXkgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldChhcHBDb25maWcsIHZhbHVlKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICBjb25zdCBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gKGF3YWl0IG9iamVjdFN0b3JlLmdldChrZXkpKTtcclxuICAgIGF3YWl0IG9iamVjdFN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcclxuICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICBpZiAoIW9sZFZhbHVlIHx8IG9sZFZhbHVlLmZpZCAhPT0gdmFsdWUuZmlkKSB7XHJcbiAgICAgICAgZmlkQ2hhbmdlZChhcHBDb25maWcsIHZhbHVlLmZpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuLyoqIFJlbW92ZXMgcmVjb3JkKHMpIGZyb20gdGhlIG9iamVjdFN0b3JlIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIGtleS4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVtb3ZlKGFwcENvbmZpZykge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgYXdhaXQgdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpLmRlbGV0ZShrZXkpO1xyXG4gICAgYXdhaXQgdHguZG9uZTtcclxufVxyXG4vKipcclxuICogQXRvbWljYWxseSB1cGRhdGVzIGEgcmVjb3JkIHdpdGggdGhlIHJlc3VsdCBvZiB1cGRhdGVGbiwgd2hpY2ggZ2V0c1xyXG4gKiBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB2YWx1ZS4gSWYgbmV3VmFsdWUgaXMgdW5kZWZpbmVkLCB0aGUgcmVjb3JkIGlzXHJcbiAqIGRlbGV0ZWQgaW5zdGVhZC5cclxuICogQHJldHVybiBVcGRhdGVkIHZhbHVlXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB1cGRhdGUoYXBwQ29uZmlnLCB1cGRhdGVGbikge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSk7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IChhd2FpdCBzdG9yZS5nZXQoa2V5KSk7XHJcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHVwZGF0ZUZuKG9sZFZhbHVlKTtcclxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYXdhaXQgc3RvcmUuZGVsZXRlKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQobmV3VmFsdWUsIGtleSk7XHJcbiAgICB9XHJcbiAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgaWYgKG5ld1ZhbHVlICYmICghb2xkVmFsdWUgfHwgb2xkVmFsdWUuZmlkICE9PSBuZXdWYWx1ZS5maWQpKSB7XHJcbiAgICAgICAgZmlkQ2hhbmdlZChhcHBDb25maWcsIG5ld1ZhbHVlLmZpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VmFsdWU7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFVwZGF0ZXMgYW5kIHJldHVybnMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGZyb20gdGhlIGRhdGFiYXNlLlxyXG4gKiBBbHNvIHRyaWdnZXJzIGEgcmVnaXN0cmF0aW9uIHJlcXVlc3QgaWYgaXQgaXMgbmVjZXNzYXJ5IGFuZCBwb3NzaWJsZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbkVudHJ5KGluc3RhbGxhdGlvbnMpIHtcclxuICAgIGxldCByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uRW50cnkgPSBhd2FpdCB1cGRhdGUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25FbnRyeSA9IHVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkob2xkRW50cnkpO1xyXG4gICAgICAgIGNvbnN0IGVudHJ5V2l0aFByb21pc2UgPSB0cmlnZ2VyUmVnaXN0cmF0aW9uSWZOZWNlc3NhcnkoaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2UgPSBlbnRyeVdpdGhQcm9taXNlLnJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5V2l0aFByb21pc2UuaW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICB9KTtcclxuICAgIGlmIChpbnN0YWxsYXRpb25FbnRyeS5maWQgPT09IElOVkFMSURfRklEKSB7XHJcbiAgICAgICAgLy8gRklEIGdlbmVyYXRpb24gZmFpbGVkLiBXYWl0aW5nIGZvciB0aGUgRklEIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAgICByZXR1cm4geyBpbnN0YWxsYXRpb25FbnRyeTogYXdhaXQgcmVnaXN0cmF0aW9uUHJvbWlzZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IEluc3RhbGxhdGlvbiBFbnRyeSBpZiBvbmUgZG9lcyBub3QgZXhpc3QuXHJcbiAqIEFsc28gY2xlYXJzIHRpbWVkIG91dCBwZW5kaW5nIHJlcXVlc3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlT3JDcmVhdGVJbnN0YWxsYXRpb25FbnRyeShvbGRFbnRyeSkge1xyXG4gICAgY29uc3QgZW50cnkgPSBvbGRFbnRyeSB8fCB7XHJcbiAgICAgICAgZmlkOiBnZW5lcmF0ZUZpZCgpLFxyXG4gICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNsZWFyVGltZWRPdXRSZXF1ZXN0KGVudHJ5KTtcclxufVxyXG4vKipcclxuICogSWYgdGhlIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyBub3QgcmVnaXN0ZXJlZCB5ZXQsIHRoaXMgd2lsbCB0cmlnZ2VyIHRoZVxyXG4gKiByZWdpc3RyYXRpb24gYW5kIHJldHVybiBhbiBJblByb2dyZXNzSW5zdGFsbGF0aW9uRW50cnkuXHJcbiAqXHJcbiAqIElmIHJlZ2lzdHJhdGlvblByb21pc2UgZG9lcyBub3QgZXhpc3QsIHRoZSBpbnN0YWxsYXRpb25FbnRyeSBpcyBndWFyYW50ZWVkXHJcbiAqIHRvIGJlIHJlZ2lzdGVyZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmlnZ2VyUmVnaXN0cmF0aW9uSWZOZWNlc3NhcnkoaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGlmIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgIGlmICghbmF2aWdhdG9yLm9uTGluZSkge1xyXG4gICAgICAgICAgICAvLyBSZWdpc3RyYXRpb24gcmVxdWlyZWQgYnV0IGFwcCBpcyBvZmZsaW5lLlxyXG4gICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb25Qcm9taXNlV2l0aEVycm9yID0gUHJvbWlzZS5yZWplY3QoRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqLykpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFsbGF0aW9uRW50cnksXHJcbiAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlOiByZWdpc3RyYXRpb25Qcm9taXNlV2l0aEVycm9yXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRyeSByZWdpc3RlcmluZy4gQ2hhbmdlIHN0YXR1cyB0byBJTl9QUk9HUkVTUy5cclxuICAgICAgICBjb25zdCBpblByb2dyZXNzRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLyxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uVGltZTogRGF0ZS5ub3coKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IHJlZ2lzdGVySW5zdGFsbGF0aW9uKGluc3RhbGxhdGlvbnMsIGluUHJvZ3Jlc3NFbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5zdGFsbGF0aW9uRW50cnk6IGluUHJvZ3Jlc3NFbnRyeSwgcmVnaXN0cmF0aW9uUHJvbWlzZSB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZTogd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnMpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7IGluc3RhbGxhdGlvbkVudHJ5IH07XHJcbiAgICB9XHJcbn1cclxuLyoqIFRoaXMgd2lsbCBiZSBleGVjdXRlZCBvbmx5IG9uY2UgZm9yIGVhY2ggbmV3IEZpcmViYXNlIEluc3RhbGxhdGlvbi4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YWxsYXRpb24oaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5ID0gYXdhaXQgY3JlYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIHNldChpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGlzU2VydmVyRXJyb3IoZSkgJiYgZS5jdXN0b21EYXRhLnNlcnZlckNvZGUgPT09IDQwOSkge1xyXG4gICAgICAgICAgICAvLyBTZXJ2ZXIgcmV0dXJuZWQgYSBcIkZJRCBjYW4gbm90IGJlIHVzZWRcIiBlcnJvci5cclxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICBhd2FpdCByZW1vdmUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIGZhaWxlZC4gU2V0IEZJRCBhcyBub3QgcmVnaXN0ZXJlZC5cclxuICAgICAgICAgICAgYXdhaXQgc2V0KGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnLCB7XHJcbiAgICAgICAgICAgICAgICBmaWQ6IGluc3RhbGxhdGlvbkVudHJ5LmZpZCxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcbi8qKiBDYWxsIGlmIEZJRCByZWdpc3RyYXRpb24gaXMgcGVuZGluZyBpbiBhbm90aGVyIHJlcXVlc3QuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHdhaXRVbnRpbEZpZFJlZ2lzdHJhdGlvbihpbnN0YWxsYXRpb25zKSB7XHJcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGVyZSBpcyBubyB3YXkgb2YgcmVsaWFibHkgb2JzZXJ2aW5nIHdoZW4gYSB2YWx1ZSBpblxyXG4gICAgLy8gSW5kZXhlZERCIGNoYW5nZXMgKHlldCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2luZGV4ZWQtZGItb2JzZXJ2ZXJzKSxcclxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9sbC5cclxuICAgIGxldCBlbnRyeSA9IGF3YWl0IHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgd2hpbGUgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgLy8gY3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3Qgc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgYXdhaXQgc2xlZXAoMTAwKTtcclxuICAgICAgICBlbnRyeSA9IGF3YWl0IHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovKSB7XHJcbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgdGltZWQgb3V0IG9yIGZhaWxlZCBpbiBhIGRpZmZlcmVudCBjYWxsLiBUcnkgYWdhaW4uXHJcbiAgICAgICAgY29uc3QgeyBpbnN0YWxsYXRpb25FbnRyeSwgcmVnaXN0cmF0aW9uUHJvbWlzZSB9ID0gYXdhaXQgZ2V0SW5zdGFsbGF0aW9uRW50cnkoaW5zdGFsbGF0aW9ucyk7XHJcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvblByb21pc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyByZWdpc3RyYXRpb25Qcm9taXNlLCBlbnRyeSBpcyByZWdpc3RlcmVkLlxyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb25seSBpZiB0aGVyZSBpcyBhIENyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gKlxyXG4gKiBVcGRhdGVzIHRoZSBJbnN0YWxsYXRpb25FbnRyeSBpbiB0aGUgREIgYmFzZWQgb24gdGhlIHN0YXR1cyBvZiB0aGVcclxuICogQ3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QuXHJcbiAqXHJcbiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgSW5zdGFsbGF0aW9uRW50cnkuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIHVwZGF0ZShhcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBpZiAoIW9sZEVudHJ5KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5zdGFsbGF0aW9uLW5vdC1mb3VuZFwiIC8qIEVycm9yQ29kZS5JTlNUQUxMQVRJT05fTk9UX0ZPVU5EICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZWRPdXRSZXF1ZXN0KG9sZEVudHJ5KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNsZWFyVGltZWRPdXRSZXF1ZXN0KGVudHJ5KSB7XHJcbiAgICBpZiAoaGFzSW5zdGFsbGF0aW9uUmVxdWVzdFRpbWVkT3V0KGVudHJ5KSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZDogZW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqL1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn1cclxuZnVuY3Rpb24gaGFzSW5zdGFsbGF0aW9uUmVxdWVzdFRpbWVkT3V0KGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICByZXR1cm4gKGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovICYmXHJcbiAgICAgICAgaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uVGltZSArIFBFTkRJTkdfVElNRU9VVF9NUyA8IERhdGUubm93KCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdCh7IGFwcENvbmZpZywgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyIH0sIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICBjb25zdCBlbmRwb2ludCA9IGdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVyc1dpdGhBdXRoKGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgLy8gSWYgaGVhcnRiZWF0IHNlcnZpY2UgZXhpc3RzLCBhZGQgdGhlIGhlYXJ0YmVhdCBzdHJpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdFNlcnZpY2UgPSBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKHtcclxuICAgICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0U2VydmljZSkge1xyXG4gICAgICAgIGNvbnN0IGhlYXJ0YmVhdHNIZWFkZXIgPSBhd2FpdCBoZWFydGJlYXRTZXJ2aWNlLmdldEhlYXJ0YmVhdHNIZWFkZXIoKTtcclxuICAgICAgICBpZiAoaGVhcnRiZWF0c0hlYWRlcikge1xyXG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgneC1maXJlYmFzZS1jbGllbnQnLCBoZWFydGJlYXRzSGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICAgIGluc3RhbGxhdGlvbjoge1xyXG4gICAgICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT04sXHJcbiAgICAgICAgICAgIGFwcElkOiBhcHBDb25maWcuYXBwSWRcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXRyeUlmU2VydmVyRXJyb3IoKCkgPT4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpKTtcclxuICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVmFsdWUgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgY29tcGxldGVkQXV0aFRva2VuID0gZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2VWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZEF1dGhUb2tlbjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IGF3YWl0IGdldEVycm9yRnJvbVJlc3BvbnNlKCdHZW5lcmF0ZSBBdXRoIFRva2VuJywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQoYXBwQ29uZmlnLCB7IGZpZCB9KSB7XHJcbiAgICByZXR1cm4gYCR7Z2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KGFwcENvbmZpZyl9LyR7ZmlkfS9hdXRoVG9rZW5zOmdlbmVyYXRlYDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBhIHZhbGlkIGF1dGhlbnRpY2F0aW9uIHRva2VuIGZvciB0aGUgaW5zdGFsbGF0aW9uLiBHZW5lcmF0ZXMgYSBuZXdcclxuICogdG9rZW4gaWYgb25lIGRvZXNuJ3QgZXhpc3QsIGlzIGV4cGlyZWQgb3IgYWJvdXQgdG8gZXhwaXJlLlxyXG4gKlxyXG4gKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyByZWdpc3RlcmVkLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEF1dGhUb2tlbihpbnN0YWxsYXRpb25zLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSkge1xyXG4gICAgbGV0IHRva2VuUHJvbWlzZTtcclxuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgdXBkYXRlKGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnLCBvbGRFbnRyeSA9PiB7XHJcbiAgICAgICAgaWYgKCFpc0VudHJ5UmVnaXN0ZXJlZChvbGRFbnRyeSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJub3QtcmVnaXN0ZXJlZFwiIC8qIEVycm9yQ29kZS5OT1RfUkVHSVNURVJFRCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9sZEF1dGhUb2tlbiA9IG9sZEVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICBpZiAoIWZvcmNlUmVmcmVzaCAmJiBpc0F1dGhUb2tlblZhbGlkKG9sZEF1dGhUb2tlbikpIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUgaXMgYSB2YWxpZCB0b2tlbiBpbiB0aGUgREIuXHJcbiAgICAgICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob2xkQXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBhbHJlYWR5IGlzIGEgdG9rZW4gcmVxdWVzdCBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgICAgdG9rZW5Qcm9taXNlID0gd2FpdFVudGlsQXV0aFRva2VuUmVxdWVzdChpbnN0YWxsYXRpb25zLCBmb3JjZVJlZnJlc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBObyB0b2tlbiBvciB0b2tlbiBleHBpcmVkLlxyXG4gICAgICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLW9mZmxpbmVcIiAvKiBFcnJvckNvZGUuQVBQX09GRkxJTkUgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGluUHJvZ3Jlc3NFbnRyeSA9IG1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5KG9sZEVudHJ5KTtcclxuICAgICAgICAgICAgdG9rZW5Qcm9taXNlID0gZmV0Y2hBdXRoVG9rZW5Gcm9tU2VydmVyKGluc3RhbGxhdGlvbnMsIGluUHJvZ3Jlc3NFbnRyeSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpblByb2dyZXNzRW50cnk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBhdXRoVG9rZW4gPSB0b2tlblByb21pc2VcclxuICAgICAgICA/IGF3YWl0IHRva2VuUHJvbWlzZVxyXG4gICAgICAgIDogZW50cnkuYXV0aFRva2VuO1xyXG4gICAgcmV0dXJuIGF1dGhUb2tlbjtcclxufVxyXG4vKipcclxuICogQ2FsbCBvbmx5IGlmIEZJRCBpcyByZWdpc3RlcmVkIGFuZCBBdXRoIFRva2VuIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFdhaXRzIHVudGlsIHRoZSBjdXJyZW50IHBlbmRpbmcgcmVxdWVzdCBmaW5pc2hlcy4gSWYgdGhlIHJlcXVlc3QgdGltZXMgb3V0LFxyXG4gKiB0cmllcyBvbmNlIGluIHRoaXMgdGhyZWFkIGFzIHdlbGwuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0KGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCkge1xyXG4gICAgLy8gVW5mb3J0dW5hdGVseSwgdGhlcmUgaXMgbm8gd2F5IG9mIHJlbGlhYmx5IG9ic2VydmluZyB3aGVuIGEgdmFsdWUgaW5cclxuICAgIC8vIEluZGV4ZWREQiBjaGFuZ2VzICh5ZXQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9pbmRleGVkLWRiLW9ic2VydmVycyksXHJcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvbGwuXHJcbiAgICBsZXQgZW50cnkgPSBhd2FpdCB1cGRhdGVBdXRoVG9rZW5SZXF1ZXN0KGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnKTtcclxuICAgIHdoaWxlIChlbnRyeS5hdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgLy8gZ2VuZXJhdGVBdXRoVG9rZW4gc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgYXdhaXQgc2xlZXAoMTAwKTtcclxuICAgICAgICBlbnRyeSA9IGF3YWl0IHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYXV0aFRva2VuID0gZW50cnkuYXV0aFRva2VuO1xyXG4gICAgaWYgKGF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAvLyBUaGUgcmVxdWVzdCB0aW1lZCBvdXQgb3IgZmFpbGVkIGluIGEgZGlmZmVyZW50IGNhbGwuIFRyeSBhZ2Fpbi5cclxuICAgICAgICByZXR1cm4gcmVmcmVzaEF1dGhUb2tlbihpbnN0YWxsYXRpb25zLCBmb3JjZVJlZnJlc2gpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGF1dGhUb2tlbjtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2FsbGVkIG9ubHkgaWYgdGhlcmUgaXMgYSBHZW5lcmF0ZUF1dGhUb2tlbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gKlxyXG4gKiBVcGRhdGVzIHRoZSBJbnN0YWxsYXRpb25FbnRyeSBpbiB0aGUgREIgYmFzZWQgb24gdGhlIHN0YXR1cyBvZiB0aGVcclxuICogR2VuZXJhdGVBdXRoVG9rZW4gcmVxdWVzdC5cclxuICpcclxuICogUmV0dXJucyB0aGUgdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gdXBkYXRlKGFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGlmICghaXNFbnRyeVJlZ2lzdGVyZWQob2xkRW50cnkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm90LXJlZ2lzdGVyZWRcIiAvKiBFcnJvckNvZGUuTk9UX1JFR0lTVEVSRUQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvbGRBdXRoVG9rZW4gPSBvbGRFbnRyeS5hdXRoVG9rZW47XHJcbiAgICAgICAgaWYgKGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChvbGRBdXRoVG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9sZEVudHJ5KSwgeyBhdXRoVG9rZW46IHsgcmVxdWVzdFN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovIH0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgIH0pO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoQXV0aFRva2VuRnJvbVNlcnZlcihpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBhdXRoVG9rZW4gPSBhd2FpdCBnZW5lcmF0ZUF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5zdGFsbGF0aW9uRW50cnkpLCB7IGF1dGhUb2tlbiB9KTtcclxuICAgICAgICBhd2FpdCBzZXQoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIGF1dGhUb2tlbjtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGlzU2VydmVyRXJyb3IoZSkgJiZcclxuICAgICAgICAgICAgKGUuY3VzdG9tRGF0YS5zZXJ2ZXJDb2RlID09PSA0MDEgfHwgZS5jdXN0b21EYXRhLnNlcnZlckNvZGUgPT09IDQwNCkpIHtcclxuICAgICAgICAgICAgLy8gU2VydmVyIHJldHVybmVkIGEgXCJGSUQgbm90IGZvdW5kXCIgb3IgYSBcIkludmFsaWQgYXV0aGVudGljYXRpb25cIiBlcnJvci5cclxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICBhd2FpdCByZW1vdmUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuOiB7IHJlcXVlc3RTdGF0dXM6IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLyB9IH0pO1xyXG4gICAgICAgICAgICBhd2FpdCBzZXQoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNFbnRyeVJlZ2lzdGVyZWQoaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHJldHVybiAoaW5zdGFsbGF0aW9uRW50cnkgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLyk7XHJcbn1cclxuZnVuY3Rpb24gaXNBdXRoVG9rZW5WYWxpZChhdXRoVG9rZW4pIHtcclxuICAgIHJldHVybiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDIgLyogUmVxdWVzdFN0YXR1cy5DT01QTEVURUQgKi8gJiZcclxuICAgICAgICAhaXNBdXRoVG9rZW5FeHBpcmVkKGF1dGhUb2tlbikpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXV0aFRva2VuRXhwaXJlZChhdXRoVG9rZW4pIHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICByZXR1cm4gKG5vdyA8IGF1dGhUb2tlbi5jcmVhdGlvblRpbWUgfHxcclxuICAgICAgICBhdXRoVG9rZW4uY3JlYXRpb25UaW1lICsgYXV0aFRva2VuLmV4cGlyZXNJbiA8IG5vdyArIFRPS0VOX0VYUElSQVRJT05fQlVGRkVSKTtcclxufVxyXG4vKiogUmV0dXJucyBhbiB1cGRhdGVkIEluc3RhbGxhdGlvbkVudHJ5IHdpdGggYW4gSW5Qcm9ncmVzc0F1dGhUb2tlbi4gKi9cclxuZnVuY3Rpb24gbWFrZUF1dGhUb2tlblJlcXVlc3RJblByb2dyZXNzRW50cnkob2xkRW50cnkpIHtcclxuICAgIGNvbnN0IGluUHJvZ3Jlc3NBdXRoVG9rZW4gPSB7XHJcbiAgICAgICAgcmVxdWVzdFN0YXR1czogMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovLFxyXG4gICAgICAgIHJlcXVlc3RUaW1lOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb2xkRW50cnkpLCB7IGF1dGhUb2tlbjogaW5Qcm9ncmVzc0F1dGhUb2tlbiB9KTtcclxufVxyXG5mdW5jdGlvbiBoYXNBdXRoVG9rZW5SZXF1ZXN0VGltZWRPdXQoYXV0aFRva2VuKSB7XHJcbiAgICByZXR1cm4gKGF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBhdXRoVG9rZW4ucmVxdWVzdFRpbWUgKyBQRU5ESU5HX1RJTUVPVVRfTVMgPCBEYXRlLm5vdygpKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlcyBhIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpZiB0aGVyZSBpc24ndCBvbmUgZm9yIHRoZSBhcHAgYW5kXHJcbiAqIHJldHVybnMgdGhlIEluc3RhbGxhdGlvbiBJRC5cclxuICogQHBhcmFtIGluc3RhbGxhdGlvbnMgLSBUaGUgYEluc3RhbGxhdGlvbnNgIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRJZChpbnN0YWxsYXRpb25zKSB7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zSW1wbCA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBjb25zdCB7IGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlIH0gPSBhd2FpdCBnZXRJbnN0YWxsYXRpb25FbnRyeShpbnN0YWxsYXRpb25zSW1wbCk7XHJcbiAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2UuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBJZiB0aGUgaW5zdGFsbGF0aW9uIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCwgdXBkYXRlIHRoZSBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgIC8vIHRva2VuIGlmIG5lZWRlZC5cclxuICAgICAgICByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnNJbXBsKS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25FbnRyeS5maWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBGaXJlYmFzZSBJbnN0YWxsYXRpb25zIGF1dGggdG9rZW4sIGlkZW50aWZ5aW5nIHRoZSBjdXJyZW50XHJcbiAqIEZpcmViYXNlIEluc3RhbGxhdGlvbi5cclxuICogQHBhcmFtIGluc3RhbGxhdGlvbnMgLSBUaGUgYEluc3RhbGxhdGlvbnNgIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gZm9yY2VSZWZyZXNoIC0gRm9yY2UgcmVmcmVzaCByZWdhcmRsZXNzIG9mIHRva2VuIGV4cGlyYXRpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zSW1wbCA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBhd2FpdCBjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbihpbnN0YWxsYXRpb25zSW1wbCk7XHJcbiAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGVpdGhlciBoYXZlIGEgUmVnaXN0ZXJlZCBJbnN0YWxsYXRpb24gaW4gdGhlIERCLCBvciB3ZSd2ZVxyXG4gICAgLy8gYWxyZWFkeSB0aHJvd24gYW4gZXJyb3IuXHJcbiAgICBjb25zdCBhdXRoVG9rZW4gPSBhd2FpdCByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnNJbXBsLCBmb3JjZVJlZnJlc2gpO1xyXG4gICAgcmV0dXJuIGF1dGhUb2tlbi50b2tlbjtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbihpbnN0YWxsYXRpb25zKSB7XHJcbiAgICBjb25zdCB7IHJlZ2lzdHJhdGlvblByb21pc2UgfSA9IGF3YWl0IGdldEluc3RhbGxhdGlvbkVudHJ5KGluc3RhbGxhdGlvbnMpO1xyXG4gICAgaWYgKHJlZ2lzdHJhdGlvblByb21pc2UpIHtcclxuICAgICAgICAvLyBBIGNyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IGlzIGluIHByb2dyZXNzLiBXYWl0IHVudGlsIGl0IGZpbmlzaGVzLlxyXG4gICAgICAgIGF3YWl0IHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICBjb25zdCBlbmRwb2ludCA9IGdldERlbGV0ZUVuZHBvaW50KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgY29uc3QgaGVhZGVycyA9IGdldEhlYWRlcnNXaXRoQXV0aChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgICBoZWFkZXJzXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXRyeUlmU2VydmVyRXJyb3IoKCkgPT4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBhd2FpdCBnZXRFcnJvckZyb21SZXNwb25zZSgnRGVsZXRlIEluc3RhbGxhdGlvbicsIHJlc3BvbnNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXREZWxldGVFbmRwb2ludChhcHBDb25maWcsIHsgZmlkIH0pIHtcclxuICAgIHJldHVybiBgJHtnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKX0vJHtmaWR9YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVsZXRlcyB0aGUgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGFuZCBhbGwgYXNzb2NpYXRlZCBkYXRhLlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyAtIFRoZSBgSW5zdGFsbGF0aW9uc2AgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUluc3RhbGxhdGlvbnMoaW5zdGFsbGF0aW9ucykge1xyXG4gICAgY29uc3QgeyBhcHBDb25maWcgfSA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBjb25zdCBlbnRyeSA9IGF3YWl0IHVwZGF0ZShhcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBpZiAob2xkRW50cnkgJiYgb2xkRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSB1bnJlZ2lzdGVyZWQgZW50cnkgd2l0aG91dCBzZW5kaW5nIGEgZGVsZXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QuXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgaWYgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgICAgIC8vIENhbid0IGRlbGV0ZSB3aGlsZSB0cnlpbmcgdG8gcmVnaXN0ZXIuXHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZGVsZXRlLXBlbmRpbmctcmVnaXN0cmF0aW9uXCIgLyogRXJyb3JDb2RlLkRFTEVURV9QRU5ESU5HX1JFR0lTVFJBVElPTiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLykge1xyXG4gICAgICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLW9mZmxpbmVcIiAvKiBFcnJvckNvZGUuQVBQX09GRkxJTkUgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcsIGVudHJ5KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHJlbW92ZShhcHBDb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTZXRzIGEgbmV3IGNhbGxiYWNrIHRoYXQgd2lsbCBnZXQgY2FsbGVkIHdoZW4gSW5zdGFsbGF0aW9uIElEIGNoYW5nZXMuXHJcbiAqIFJldHVybnMgYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCB3aWxsIHJlbW92ZSB0aGUgY2FsbGJhY2sgd2hlbiBjYWxsZWQuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIC0gVGhlIGBJbnN0YWxsYXRpb25zYCBpbnN0YW5jZS5cclxuICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCB3aGVuIEZJRCBjaGFuZ2VzLlxyXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCB0byB1bnN1YnNjcmliZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gb25JZENoYW5nZShpbnN0YWxsYXRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgY29uc3QgeyBhcHBDb25maWcgfSA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBhZGRDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIHtAbGluayBJbnN0YWxsYXRpb25zfSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuXHJcbiAqIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbnMoYXBwID0gZ2V0QXBwKCkpIHtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbXBsID0gX2dldFByb3ZpZGVyKGFwcCwgJ2luc3RhbGxhdGlvbnMnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25zSW1wbDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBleHRyYWN0QXBwQ29uZmlnKGFwcCkge1xyXG4gICAgaWYgKCFhcHAgfHwgIWFwcC5vcHRpb25zKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBDb25maWd1cmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5uYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBOYW1lJyk7XHJcbiAgICB9XHJcbiAgICAvLyBSZXF1aXJlZCBhcHAgY29uZmlnIGtleXNcclxuICAgIGNvbnN0IGNvbmZpZ0tleXMgPSBbXHJcbiAgICAgICAgJ3Byb2plY3RJZCcsXHJcbiAgICAgICAgJ2FwaUtleScsXHJcbiAgICAgICAgJ2FwcElkJ1xyXG4gICAgXTtcclxuICAgIGZvciAoY29uc3Qga2V5TmFtZSBvZiBjb25maWdLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFhcHAub3B0aW9uc1trZXlOYW1lXSkge1xyXG4gICAgICAgICAgICB0aHJvdyBnZXRNaXNzaW5nVmFsdWVFcnJvcihrZXlOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFwcE5hbWU6IGFwcC5uYW1lLFxyXG4gICAgICAgIHByb2plY3RJZDogYXBwLm9wdGlvbnMucHJvamVjdElkLFxyXG4gICAgICAgIGFwaUtleTogYXBwLm9wdGlvbnMuYXBpS2V5LFxyXG4gICAgICAgIGFwcElkOiBhcHAub3B0aW9ucy5hcHBJZFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXRNaXNzaW5nVmFsdWVFcnJvcih2YWx1ZU5hbWUpIHtcclxuICAgIHJldHVybiBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm1pc3NpbmctYXBwLWNvbmZpZy12YWx1ZXNcIiAvKiBFcnJvckNvZGUuTUlTU0lOR19BUFBfQ09ORklHX1ZBTFVFUyAqLywge1xyXG4gICAgICAgIHZhbHVlTmFtZVxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgSU5TVEFMTEFUSU9OU19OQU1FID0gJ2luc3RhbGxhdGlvbnMnO1xyXG5jb25zdCBJTlNUQUxMQVRJT05TX05BTUVfSU5URVJOQUwgPSAnaW5zdGFsbGF0aW9ucy1pbnRlcm5hbCc7XHJcbmNvbnN0IHB1YmxpY0ZhY3RvcnkgPSAoY29udGFpbmVyKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ2FwcCcpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgLy8gVGhyb3dzIGlmIGFwcCBpc24ndCBjb25maWd1cmVkIHByb3Blcmx5LlxyXG4gICAgY29uc3QgYXBwQ29uZmlnID0gZXh0cmFjdEFwcENvbmZpZyhhcHApO1xyXG4gICAgY29uc3QgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyID0gX2dldFByb3ZpZGVyKGFwcCwgJ2hlYXJ0YmVhdCcpO1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uc0ltcGwgPSB7XHJcbiAgICAgICAgYXBwLFxyXG4gICAgICAgIGFwcENvbmZpZyxcclxuICAgICAgICBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIsXHJcbiAgICAgICAgX2RlbGV0ZTogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gaW5zdGFsbGF0aW9uc0ltcGw7XHJcbn07XHJcbmNvbnN0IGludGVybmFsRmFjdG9yeSA9IChjb250YWluZXIpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAvLyBJbnRlcm5hbCBGSVMgaW5zdGFuY2UgcmVsaWVzIG9uIHB1YmxpYyBGSVMgaW5zdGFuY2UuXHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zID0gX2dldFByb3ZpZGVyKGFwcCwgSU5TVEFMTEFUSU9OU19OQU1FKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbnRlcm5hbCA9IHtcclxuICAgICAgICBnZXRJZDogKCkgPT4gZ2V0SWQoaW5zdGFsbGF0aW9ucyksXHJcbiAgICAgICAgZ2V0VG9rZW46IChmb3JjZVJlZnJlc2gpID0+IGdldFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaClcclxuICAgIH07XHJcbiAgICByZXR1cm4gaW5zdGFsbGF0aW9uc0ludGVybmFsO1xyXG59O1xyXG5mdW5jdGlvbiByZWdpc3Rlckluc3RhbGxhdGlvbnMoKSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudChJTlNUQUxMQVRJT05TX05BTUUsIHB1YmxpY0ZhY3RvcnksIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KElOU1RBTExBVElPTlNfTkFNRV9JTlRFUk5BTCwgaW50ZXJuYWxGYWN0b3J5LCBcIlBSSVZBVEVcIiAvKiBDb21wb25lbnRUeXBlLlBSSVZBVEUgKi8pKTtcclxufVxuXG4vKipcclxuICogRmlyZWJhc2UgSW5zdGFsbGF0aW9uc1xyXG4gKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbnJlZ2lzdGVySW5zdGFsbGF0aW9ucygpO1xyXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbik7XHJcbi8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXHJcbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnZXNtMjAxNycpO1xuXG5leHBvcnQgeyBkZWxldGVJbnN0YWxsYXRpb25zLCBnZXRJZCwgZ2V0SW5zdGFsbGF0aW9ucywgZ2V0VG9rZW4sIG9uSWRDaGFuZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyB3IGFzIHdyYXAsIHIgYXMgcmVwbGFjZVRyYXBzIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5leHBvcnQgeyB1IGFzIHVud3JhcCwgdyBhcyB3cmFwIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZylcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoKSA9PiBibG9ja2luZygpKTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY29udGFpbmVyIGZvciBhbGwgb2YgdGhlIExvZ2dlciBpbnN0YW5jZXNcclxuICovXHJcbmNvbnN0IGluc3RhbmNlcyA9IFtdO1xyXG4vKipcclxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xyXG4gKiBzaWxlbmNlIHRoZSBsb2dzIGFsdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XHJcbiAqIERFQlVHIDwgVkVSQk9TRSA8IElORk8gPCBXQVJOIDwgRVJST1JcclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBJTkZPYCwgZXJyb3JzIHdpbGwgc3RpbGwgYmUgbG9nZ2VkLCBidXQgYERFQlVHYCBhbmRcclxuICogYFZFUkJPU0VgIGxvZ3Mgd2lsbCBub3QpXHJcbiAqL1xyXG52YXIgTG9nTGV2ZWw7XHJcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiREVCVUdcIl0gPSAwXSA9IFwiREVCVUdcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiVkVSQk9TRVwiXSA9IDFdID0gXCJWRVJCT1NFXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIklORk9cIl0gPSAyXSA9IFwiSU5GT1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXQVJOXCJdID0gM10gPSBcIldBUk5cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRVJST1JcIl0gPSA0XSA9IFwiRVJST1JcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiU0lMRU5UXCJdID0gNV0gPSBcIlNJTEVOVFwiO1xyXG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xyXG5jb25zdCBsZXZlbFN0cmluZ1RvRW51bSA9IHtcclxuICAgICdkZWJ1Zyc6IExvZ0xldmVsLkRFQlVHLFxyXG4gICAgJ3ZlcmJvc2UnOiBMb2dMZXZlbC5WRVJCT1NFLFxyXG4gICAgJ2luZm8nOiBMb2dMZXZlbC5JTkZPLFxyXG4gICAgJ3dhcm4nOiBMb2dMZXZlbC5XQVJOLFxyXG4gICAgJ2Vycm9yJzogTG9nTGV2ZWwuRVJST1IsXHJcbiAgICAnc2lsZW50JzogTG9nTGV2ZWwuU0lMRU5UXHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgbGV2ZWxcclxuICovXHJcbmNvbnN0IGRlZmF1bHRMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XHJcbi8qKlxyXG4gKiBCeSBkZWZhdWx0LCBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGRpc3BsYXllZCBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgKGluXHJcbiAqIGNocm9tZSkuIFRvIGF2b2lkIGZvcmNpbmcgdXNlcnMgdG8gaGF2ZSB0byBvcHQtaW4gdG8gdGhlc2UgbG9ncyB0d2ljZVxyXG4gKiAoaS5lLiBvbmNlIGZvciBmaXJlYmFzZSwgYW5kIG9uY2UgaW4gdGhlIGNvbnNvbGUpLCB3ZSBhcmUgc2VuZGluZyBgREVCVUdgXHJcbiAqIGxvZ3MgdG8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24uXHJcbiAqL1xyXG5jb25zdCBDb25zb2xlTWV0aG9kID0ge1xyXG4gICAgW0xvZ0xldmVsLkRFQlVHXTogJ2xvZycsXHJcbiAgICBbTG9nTGV2ZWwuVkVSQk9TRV06ICdsb2cnLFxyXG4gICAgW0xvZ0xldmVsLklORk9dOiAnaW5mbycsXHJcbiAgICBbTG9nTGV2ZWwuV0FSTl06ICd3YXJuJyxcclxuICAgIFtMb2dMZXZlbC5FUlJPUl06ICdlcnJvcidcclxufTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBoYW5kbGVyIHdpbGwgZm9yd2FyZCBERUJVRywgVkVSQk9TRSwgSU5GTywgV0FSTiwgYW5kIEVSUk9SXHJcbiAqIG1lc3NhZ2VzIG9uIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgY29uc29sZSBjb3VudGVycGFydHMgKGlmIHRoZSBsb2cgbWV0aG9kXHJcbiAqIGlzIHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBsb2cgbGV2ZWwpXHJcbiAqL1xyXG5jb25zdCBkZWZhdWx0TG9nSGFuZGxlciA9IChpbnN0YW5jZSwgbG9nVHlwZSwgLi4uYXJncykgPT4ge1xyXG4gICAgaWYgKGxvZ1R5cGUgPCBpbnN0YW5jZS5sb2dMZXZlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgIGNvbnN0IG1ldGhvZCA9IENvbnNvbGVNZXRob2RbbG9nVHlwZV07XHJcbiAgICBpZiAobWV0aG9kKSB7XHJcbiAgICAgICAgY29uc29sZVttZXRob2RdKGBbJHtub3d9XSAgJHtpbnN0YW5jZS5uYW1lfTpgLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0ZW1wdGVkIHRvIGxvZyBhIG1lc3NhZ2Ugd2l0aCBhbiBpbnZhbGlkIGxvZ1R5cGUgKHZhbHVlOiAke2xvZ1R5cGV9KWApO1xyXG4gICAgfVxyXG59O1xyXG5jbGFzcyBMb2dnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlcyB5b3UgYW4gaW5zdGFuY2Ugb2YgYSBMb2dnZXIgdG8gY2FwdHVyZSBtZXNzYWdlcyBhY2NvcmRpbmcgdG9cclxuICAgICAqIEZpcmViYXNlJ3MgbG9nZ2luZyBzY2hlbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdGhhdCB0aGUgbG9ncyB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9nIGxldmVsIG9mIHRoZSBnaXZlbiBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSBkZWZhdWx0TG9nTGV2ZWw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1haW4gKGludGVybmFsKSBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKiBDYW4gYmUgc2V0IHRvIGEgbmV3IGZ1bmN0aW9uIGluIGludGVybmFsIHBhY2thZ2UgY29kZSBidXQgbm90IGJ5IHVzZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IGRlZmF1bHRMb2dIYW5kbGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcHRpb25hbCwgYWRkaXRpb25hbCwgdXNlci1kZWZpbmVkIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYXB0dXJlIHRoZSBjdXJyZW50IGluc3RhbmNlIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnN0YW5jZXMucHVzaCh0aGlzKTtcclxuICAgIH1cclxuICAgIGdldCBsb2dMZXZlbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XHJcbiAgICB9XHJcbiAgICBzZXQgbG9nTGV2ZWwodmFsKSB7XHJcbiAgICAgICAgaWYgKCEodmFsIGluIExvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIFwiJHt2YWx9XCIgYXNzaWduZWQgdG8gXFxgbG9nTGV2ZWxcXGBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBzZXR0ZXIvZ2V0dGVyIGhhdmluZyB0byBiZSB0aGUgc2FtZSB0eXBlLlxyXG4gICAgc2V0TG9nTGV2ZWwodmFsKSB7XHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IGxldmVsU3RyaW5nVG9FbnVtW3ZhbF0gOiB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgbG9nSGFuZGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcclxuICAgIH1cclxuICAgIHNldCBsb2dIYW5kbGVyKHZhbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIGFzc2lnbmVkIHRvIGBsb2dIYW5kbGVyYCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCB1c2VyTG9nSGFuZGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlckxvZ0hhbmRsZXI7XHJcbiAgICB9XHJcbiAgICBzZXQgdXNlckxvZ0hhbmRsZXIodmFsKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmdW5jdGlvbnMgYmVsb3cgYXJlIGFsbCBiYXNlZCBvbiB0aGUgYGNvbnNvbGVgIGludGVyZmFjZVxyXG4gICAgICovXHJcbiAgICBkZWJ1ZyguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuREVCVUcsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuREVCVUcsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgbG9nKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJlxyXG4gICAgICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLlZFUkJPU0UsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgaW5mbyguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuSU5GTywgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5JTkZPLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIHdhcm4oLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLldBUk4sIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBlcnJvciguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuRVJST1IsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuRVJST1IsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XHJcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChpbnN0ID0+IHtcclxuICAgICAgICBpbnN0LnNldExvZ0xldmVsKGxldmVsKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHNldFVzZXJMb2dIYW5kbGVyKGxvZ0NhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xyXG4gICAgICAgIGxldCBjdXN0b21Mb2dMZXZlbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sZXZlbCkge1xyXG4gICAgICAgICAgICBjdXN0b21Mb2dMZXZlbCA9IGxldmVsU3RyaW5nVG9FbnVtW29wdGlvbnMubGV2ZWxdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9nQ2FsbGJhY2sgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UudXNlckxvZ0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UudXNlckxvZ0hhbmRsZXIgPSAoaW5zdGFuY2UsIGxldmVsLCAuLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXJnc1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoYXJnID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBhcmcgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoYXJnID0+IGFyZylcclxuICAgICAgICAgICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID49IChjdXN0b21Mb2dMZXZlbCAhPT0gbnVsbCAmJiBjdXN0b21Mb2dMZXZlbCAhPT0gdm9pZCAwID8gY3VzdG9tTG9nTGV2ZWwgOiBpbnN0YW5jZS5sb2dMZXZlbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2dDYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiBMb2dMZXZlbFtsZXZlbF0udG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5zdGFuY2UubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBMb2dMZXZlbCwgTG9nZ2VyLCBzZXRMb2dMZXZlbCwgc2V0VXNlckxvZ0hhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmV4cG9ydCAqIGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG52YXIgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbnZhciB2ZXJzaW9uID0gXCIxMC4xLjBcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdhcHAnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IHcgYXMgd3JhcCwgciBhcyByZXBsYWNlVHJhcHMgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcbmV4cG9ydCB7IHUgYXMgdW53cmFwLCB3IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pLCBldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgb3BlblByb21pc2VcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0ZXJtaW5hdGVkKCkpO1xuICAgICAgICBpZiAoYmxvY2tpbmcpIHtcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoZXZlbnQpID0+IGJsb2NraW5nKGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xuY29uc3Qgd3JpdGVNZXRob2RzID0gWydwdXQnLCAnYWRkJywgJ2RlbGV0ZScsICdjbGVhciddO1xuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcbiAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBJREJEYXRhYmFzZSAmJlxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApKVxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XG4gICAgY29uc3QgdXNlSW5kZXggPSBwcm9wICE9PSB0YXJnZXRGdW5jTmFtZTtcbiAgICBjb25zdCBpc1dyaXRlID0gd3JpdGVNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKTtcbiAgICBpZiAoXG4gICAgLy8gQmFpbCBpZiB0aGUgdGFyZ2V0IGRvZXNuJ3QgZXhpc3Qgb24gdGhlIHRhcmdldC4gRWcsIGdldEFsbCBpc24ndCBpbiBFZGdlLlxuICAgICEodGFyZ2V0RnVuY05hbWUgaW4gKHVzZUluZGV4ID8gSURCSW5kZXggOiBJREJPYmplY3RTdG9yZSkucHJvdG90eXBlKSB8fFxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogdW5kZWZpbmVkIGd6aXBwcyBiZXR0ZXIsIGJ1dCBmYWlscyBpbiBFZGdlIDooXG4gICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XG4gICAgICAgIGlmICh1c2VJbmRleClcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAvLyBNdXN0IHJlamVjdCBpZiBvcCByZWplY3RzLlxuICAgICAgICAvLyBJZiBpdCdzIGEgd3JpdGUgb3BlcmF0aW9uLCBtdXN0IHJlamVjdCBpZiB0eC5kb25lIHJlamVjdHMuXG4gICAgICAgIC8vIE11c3QgcmVqZWN0IHdpdGggb3AgcmVqZWN0aW9uIGZpcnN0LlxuICAgICAgICAvLyBNdXN0IHJlc29sdmUgd2l0aCBvcCB2YWx1ZS5cbiAgICAgICAgLy8gTXVzdCBoYW5kbGUgYm90aCBwcm9taXNlcyAobm8gdW5oYW5kbGVkIHJlamVjdGlvbnMpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKSxcbiAgICAgICAgICAgIGlzV3JpdGUgJiYgdHguZG9uZSxcbiAgICAgICAgXSkpWzBdO1xuICAgIH07XG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlciksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxufSkpO1xuXG5leHBvcnQgeyBkZWxldGVEQiwgb3BlbkRCIH07XG4iLCJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgY3Vyc29yUmVxdWVzdE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICBwcm9taXNlXG4gICAgICAgIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgICAgIC8vIChzZWUgd3JhcEZ1bmN0aW9uKS5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCQ3Vyc29yKSB7XG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2hpbmcgdG8gYXZvaWQgXCJVbmNhdWdodCBQcm9taXNlIGV4Y2VwdGlvbnNcIlxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb21pc2UsIHJlcXVlc3QpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHR4KSB7XG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QodHguZXJyb3IgfHwgbmV3IERPTUV4Y2VwdGlvbignQWJvcnRFcnJvcicsICdBYm9ydEVycm9yJykpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xufVxubGV0IGlkYlByb3h5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Eb25lTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gUG9seWZpbGwgZm9yIG9iamVjdFN0b3JlTmFtZXMgYmVjYXVzZSBvZiBFZGdlLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQub2JqZWN0U3RvcmVOYW1lcyB8fCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3RvcmUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiByZWNlaXZlci5vYmplY3RTdG9yZShyZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIHRyYW5zZm9ybSB3aGF0ZXZlciB3ZSBnZXQgYmFjay5cbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0W3Byb3BdKTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XG4gICAgfSxcbn07XG5mdW5jdGlvbiByZXBsYWNlVHJhcHMoY2FsbGJhY2spIHtcbiAgICBpZGJQcm94eVRyYXBzID0gY2FsbGJhY2soaWRiUHJveHlUcmFwcyk7XG59XG5mdW5jdGlvbiB3cmFwRnVuY3Rpb24oZnVuYykge1xuICAgIC8vIER1ZSB0byBleHBlY3RlZCBvYmplY3QgZXF1YWxpdHkgKHdoaWNoIGlzIGVuZm9yY2VkIGJ5IHRoZSBjYWNoaW5nIGluIGB3cmFwYCksIHdlXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxuICAgIC8vIEVkZ2UgZG9lc24ndCBzdXBwb3J0IG9iamVjdFN0b3JlTmFtZXMgKGJvb28pLCBzbyB3ZSBwb2x5ZmlsbCBpdCBoZXJlLlxuICAgIGlmIChmdW5jID09PSBJREJEYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gJiZcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlTmFtZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZnVuYy5jYWxsKHVud3JhcCh0aGlzKSwgc3RvcmVOYW1lcywgLi4uYXJncyk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcCh0eCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEN1cnNvciBtZXRob2RzIGFyZSBzcGVjaWFsLCBhcyB0aGUgYmVoYXZpb3VyIGlzIGEgbGl0dGxlIG1vcmUgZGlmZmVyZW50IHRvIHN0YW5kYXJkIElEQi4gSW5cbiAgICAvLyBJREIsIHlvdSBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIHdhaXQgZm9yIGEgbmV3ICdzdWNjZXNzJyBvbiB0aGUgSURCUmVxdWVzdCB0aGF0IGdhdmUgeW91IHRoZVxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXG4gICAgLy8gd2l0aCByZWFsIHByb21pc2VzLCBzbyBlYWNoIGFkdmFuY2UgbWV0aG9kcyByZXR1cm5zIGEgbmV3IHByb21pc2UgZm9yIHRoZSBjdXJzb3Igb2JqZWN0LCBvclxuICAgIC8vIHVuZGVmaW5lZCBpZiB0aGUgZW5kIG9mIHRoZSBjdXJzb3IgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcChjdXJzb3JSZXF1ZXN0TWFwLmdldCh0aGlzKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuZXhwb3J0IHsgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGFzIGEsIGluc3RhbmNlT2ZBbnkgYXMgaSwgcmVwbGFjZVRyYXBzIGFzIHIsIHVud3JhcCBhcyB1LCB3cmFwIGFzIHcgfTtcbiIsInRyeXtzZWxmW1wid29ya2JveDp3aW5kb3c6NC4zLjFcIl0mJl8oKX1jYXRjaChuKXt9dmFyIG49ZnVuY3Rpb24obix0KXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oaSl7dmFyIGU9bmV3IE1lc3NhZ2VDaGFubmVsO2UucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKG4pe3JldHVybiBpKG4uZGF0YSl9LG4ucG9zdE1lc3NhZ2UodCxbZS5wb3J0Ml0pfSl9O2Z1bmN0aW9uIHQobix0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIGU9dFtpXTtlLmVudW1lcmFibGU9ZS5lbnVtZXJhYmxlfHwhMSxlLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBlJiYoZS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sZS5rZXksZSl9fWZ1bmN0aW9uIGkobil7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIG59dHJ5e3NlbGZbXCJ3b3JrYm94OmNvcmU6NC4zLjFcIl0mJl8oKX1jYXRjaChuKXt9dmFyIGU9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMucHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbih0LGkpe24ucmVzb2x2ZT10LG4ucmVqZWN0PWl9KX0scj1mdW5jdGlvbihuLHQpe3JldHVybiBuZXcgVVJMKG4sbG9jYXRpb24pLmhyZWY9PT1uZXcgVVJMKHQsbG9jYXRpb24pLmhyZWZ9LG89ZnVuY3Rpb24obix0KXtPYmplY3QuYXNzaWduKHRoaXMsdCx7dHlwZTpufSl9O2Z1bmN0aW9uIHUobil7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXRbaV09YXJndW1lbnRzW2ldO3RyeXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG4uYXBwbHkodGhpcyx0KSl9Y2F0Y2gobil7cmV0dXJuIFByb21pc2UucmVqZWN0KG4pfX19ZnVuY3Rpb24gYShuLHQsaSl7cmV0dXJuIGk/dD90KG4pOm46KG4mJm4udGhlbnx8KG49UHJvbWlzZS5yZXNvbHZlKG4pKSx0P24udGhlbih0KTpuKX1mdW5jdGlvbiBzKCl7fXZhciBjPWZ1bmN0aW9uKGMpe3ZhciBmLGg7ZnVuY3Rpb24gdihuLHQpe3ZhciByO3JldHVybiB2b2lkIDA9PT10JiYodD17fSksKHI9Yy5jYWxsKHRoaXMpfHx0aGlzKS50PW4sci5pPXQsci5vPTAsci51PW5ldyBlLHIucz1uZXcgZSxyLmg9bmV3IGUsci52PXIudi5iaW5kKGkoaShyKSkpLHIubD1yLmwuYmluZChpKGkocikpKSxyLmc9ci5nLmJpbmQoaShpKHIpKSksci5tPXIubS5iaW5kKGkoaShyKSkpLHJ9aD1jLChmPXYpLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGgucHJvdG90eXBlKSxmLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1mLGYuX19wcm90b19fPWg7dmFyIGwsdyxnLGQ9di5wcm90b3R5cGU7cmV0dXJuIGQucmVnaXN0ZXI9dShmdW5jdGlvbihuKXt2YXIgdCxpLGU9dGhpcyx1PSh2b2lkIDA9PT1uP3t9Om4pLmltbWVkaWF0ZSxjPXZvaWQgMCE9PXUmJnU7cmV0dXJuIHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZS5wPUJvb2xlYW4obmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlciksZS5QPWUuUigpLGEoZS5rKCksZnVuY3Rpb24obil7ZS5CPW4sZS5QJiYoZS5PPWUuUCxlLnMucmVzb2x2ZShlLlApLGUuaC5yZXNvbHZlKGUuUCksZS5qKGUuUCksZS5QLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLGUubCx7b25jZTohMH0pKTt2YXIgdD1lLkIud2FpdGluZztyZXR1cm4gdCYmcih0LnNjcmlwdFVSTCxlLnQpJiYoZS5PPXQsUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2UuZGlzcGF0Y2hFdmVudChuZXcgbyhcIndhaXRpbmdcIix7c3c6dCx3YXNXYWl0aW5nQmVmb3JlUmVnaXN0ZXI6ITB9KSl9KSksZS5PJiZlLnUucmVzb2x2ZShlLk8pLGUuQi5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZm91bmRcIixlLmcpLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250cm9sbGVyY2hhbmdlXCIsZS5tLHtvbmNlOiEwfSksXCJCcm9hZGNhc3RDaGFubmVsXCJpbiBzZWxmJiYoZS5DPW5ldyBCcm9hZGNhc3RDaGFubmVsKFwid29ya2JveFwiKSxlLkMuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixlLnYpKSxuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUudiksZS5CfSl9LChpPWZ1bmN0aW9uKCl7aWYoIWMmJlwiY29tcGxldGVcIiE9PWRvY3VtZW50LnJlYWR5U3RhdGUpcmV0dXJuIGZ1bmN0aW9uKG4sdCl7aWYoIXQpcmV0dXJuIG4mJm4udGhlbj9uLnRoZW4ocyk6UHJvbWlzZS5yZXNvbHZlKCl9KG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4pe3JldHVybiBhZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLG4pfSkpfSgpKSYmaS50aGVuP2kudGhlbih0KTp0KGkpfSksZC5nZXRTVz11KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuT3x8dGhpcy51LnByb21pc2V9KSxkLm1lc3NhZ2VTVz11KGZ1bmN0aW9uKHQpe3JldHVybiBhKHRoaXMuZ2V0U1coKSxmdW5jdGlvbihpKXtyZXR1cm4gbihpLHQpfSl9KSxkLlI9ZnVuY3Rpb24oKXt2YXIgbj1uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyO2lmKG4mJnIobi5zY3JpcHRVUkwsdGhpcy50KSlyZXR1cm4gbn0sZC5rPXUoZnVuY3Rpb24oKXt2YXIgbj10aGlzO3JldHVybiBmdW5jdGlvbihuLHQpe3RyeXt2YXIgaT1uKCl9Y2F0Y2gobil7cmV0dXJuIHQobil9cmV0dXJuIGkmJmkudGhlbj9pLnRoZW4odm9pZCAwLHQpOml9KGZ1bmN0aW9uKCl7cmV0dXJuIGEobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIobi50LG4uaSksZnVuY3Rpb24odCl7cmV0dXJuIG4uTD1wZXJmb3JtYW5jZS5ub3coKSx0fSl9LGZ1bmN0aW9uKG4pe3Rocm93IG59KX0pLGQuaj1mdW5jdGlvbih0KXtuKHQse3R5cGU6XCJXSU5ET1dfUkVBRFlcIixtZXRhOlwid29ya2JveC13aW5kb3dcIn0pfSxkLmc9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLkIuaW5zdGFsbGluZzt0aGlzLm8+MHx8IXIobi5zY3JpcHRVUkwsdGhpcy50KXx8cGVyZm9ybWFuY2Uubm93KCk+dGhpcy5MKzZlND8odGhpcy5XPW4sdGhpcy5CLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLHRoaXMuZykpOih0aGlzLk89bix0aGlzLnUucmVzb2x2ZShuKSksKyt0aGlzLm8sbi5hZGRFdmVudExpc3RlbmVyKFwic3RhdGVjaGFuZ2VcIix0aGlzLmwpfSxkLmw9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcyxpPW4udGFyZ2V0LGU9aS5zdGF0ZSxyPWk9PT10aGlzLlcsdT1yP1wiZXh0ZXJuYWxcIjpcIlwiLGE9e3N3Omksb3JpZ2luYWxFdmVudDpufTshciYmdGhpcy5wJiYoYS5pc1VwZGF0ZT0hMCksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBvKHUrZSxhKSksXCJpbnN0YWxsZWRcIj09PWU/dGhpcy5fPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcImluc3RhbGxlZFwiPT09ZSYmdC5CLndhaXRpbmc9PT1pJiZ0LmRpc3BhdGNoRXZlbnQobmV3IG8odStcIndhaXRpbmdcIixhKSl9LDIwMCk6XCJhY3RpdmF0aW5nXCI9PT1lJiYoY2xlYXJUaW1lb3V0KHRoaXMuXykscnx8dGhpcy5zLnJlc29sdmUoaSkpfSxkLm09ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5PO3Q9PT1uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyJiYodGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBvKFwiY29udHJvbGxpbmdcIix7c3c6dCxvcmlnaW5hbEV2ZW50Om59KSksdGhpcy5oLnJlc29sdmUodCkpfSxkLnY9ZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgbyhcIm1lc3NhZ2VcIix7ZGF0YTp0LG9yaWdpbmFsRXZlbnQ6bn0pKX0sbD12LCh3PVt7a2V5OlwiYWN0aXZlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucy5wcm9taXNlfX0se2tleTpcImNvbnRyb2xsaW5nXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaC5wcm9taXNlfX1dKSYmdChsLnByb3RvdHlwZSx3KSxnJiZ0KGwsZyksdn0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dGhpcy5EPXt9fXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLlQobikuYWRkKHQpfSx0LnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLlQobikuZGVsZXRlKHQpfSx0LmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24obil7bi50YXJnZXQ9dGhpcyx0aGlzLlQobi50eXBlKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0KG4pfSl9LHQuVD1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5EW25dPXRoaXMuRFtuXXx8bmV3IFNldH0sbn0oKSk7ZXhwb3J0e2MgYXMgV29ya2JveCxuIGFzIG1lc3NhZ2VTV307XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMubWFwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgZ2V0RGF0YSB9IGZyb20gXCIuL3NyYy9kYXRhL2FwaS1kYXRhXCI7XHJcbmltcG9ydCB7IERhdGFNb2RhbCB9IGZyb20gXCIuL3NyYy9kYXRhL2RhdGEtbW9kYWxcIjtcclxuaW1wb3J0IHsgU2NlbmVIYW5kbGVyIH0gZnJvbSBcIi4vc3JjL3NjZW5lSGFuZGxlci9zY2VuZS1oYW5kbGVyXCI7XHJcbmltcG9ydCB7IElzQ2FjaGVkIH0gZnJvbSBcIi4vc3JjL2NvbW1vbi9jb21tb25cIjtcclxuaW1wb3J0IHsgV29ya2JveCB9IGZyb20gXCJ3b3JrYm94LXdpbmRvd1wiO1xyXG5pbXBvcnQgeyBEZWJ1Z2dlciwgbGFuZywgcHNldWRvSWQgfSBmcm9tIFwiLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi9zcmMvRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgVXRpbHMgfSBmcm9tIFwiLi9zcmMvY29tbW9uL3V0aWxzXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIi4vc3JjL2NvbXBvbmVudHMvYXVkaW8tcGxheWVyXCI7XHJcbmltcG9ydCB7IFZJU0lCSUxJVFlfQ0hBTkdFIH0gZnJvbSBcIi4vc3JjL2NvbW1vbi9ldmVudC1uYW1lc1wiO1xyXG5jbGFzcyBBcHAge1xyXG4gICAgY2FudmFzO1xyXG4gICAgdmVyc2lvbkluZm9FbGVtZW50O1xyXG4gICAgbGFuZztcclxuICAgIGlzX2NhY2hlZDtcclxuICAgIHByb2dyZXNzQmFyO1xyXG4gICAgcHJvZ3Jlc3NCYXJDb250YWluZXI7XHJcbiAgICBjaGFubmVsO1xyXG4gICAgc2NlbmVIYW5kbGVyO1xyXG4gICAgbG9hZGluZ0VsZW1lbnQ7XHJcbiAgICBtYWpWZXJzaW9uO1xyXG4gICAgbWluVmVyc2lvbjtcclxuICAgIHN0YXJ0U2Vzc2lvblRpbWU7XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgY29uc3RydWN0b3IobGFuZykge1xyXG4gICAgICAgIHRoaXMubGFuZyA9IGxhbmc7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbChcIm15LWNoYW5uZWxcIik7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvZ3Jlc3MtYmFyXCIpO1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInByb2dyZXNzLWJhci1jb250YWluZXJcIik7XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZlcnNpb24taW5mby1pZFwiKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmdFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2xvYWRpbmctc2NyZWVuJyk7XHJcbiAgICAgICAgdGhpcy5pc19jYWNoZWQgPSB0aGlzLmluaXRpYWxpemVDYWNoZWREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB0aGlzLnN0YXJ0U2Vzc2lvblRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLmhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCB0aGlzLmhhbmRsZUJlZm9yZVVubG9hZCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihWSVNJQklMSVRZX0NIQU5HRSwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLmhhbmRsZVJlc2l6ZS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGluaXQoKSB7XHJcbiAgICAgICAgY29uc3QgZm9udCA9IFV0aWxzLmdldExhbmd1YWdlU3BlY2lmaWNGb250KHRoaXMubGFuZyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5sb2FkQW5kQ2FjaGVGb250KGZvbnQsIGAuL2Fzc2V0cy9mb250cy8ke2ZvbnR9LnR0ZmApO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJlbG9hZEdhbWVBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZUxvYWRpbmdTY3JlZW4oKTtcclxuICAgICAgICB0aGlzLnJlZ2lzdGVyV29ya2JveCgpO1xyXG4gICAgICAgIHRoaXMuc2V0dXBDYW52YXMoKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RGF0YSgpO1xyXG4gICAgICAgIHRoaXMubWFqVmVyc2lvbiA9IGRhdGEubWFqdmVyc2lvbjtcclxuICAgICAgICB0aGlzLm1pblZlcnNpb24gPSBkYXRhLm1pbnZlcnNpb247XHJcbiAgICAgICAgY29uc3QgZGF0YU1vZGFsID0gdGhpcy5jcmVhdGVEYXRhTW9kYWwoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5nbG9iYWxJbml0aWFsaXphdGlvbihkYXRhKTtcclxuICAgICAgICB0aGlzLmxvZ1Nlc3Npb25TdGFydEZpcmViYXNlRXZlbnQoKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzaXplKGRhdGFNb2RhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfY2FjaGVkLmhhcyh0aGlzLmxhbmcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FjaGVkU2NlbmFyaW8oZGF0YU1vZGFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBsb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBsYXN0U2Vzc2lvbkVuZFRpbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxhc3RTZXNzaW9uRW5kVGltZVwiKTtcclxuICAgICAgICBsZXQgbGFzdFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRTZXNzaW9uVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGlmIChsYXN0U2Vzc2lvbkVuZFRpbWUpIHtcclxuICAgICAgICAgICAgbGV0IHBhcnNlZFRpbWVzdGFtcCA9IHBhcnNlSW50KGxhc3RTZXNzaW9uRW5kVGltZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VkVGltZXN0YW1wKSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdFRpbWUgPSBNYXRoLmFicyhuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHBhcnNlZFRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF5c1NpbmNlTGFzdCA9IGxhc3RUaW1lID8gbGFzdFRpbWUgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkgOiAwO1xyXG4gICAgICAgIGNvbnN0IHJvdW5kZWREYXlzU2luY2VMYXN0ID0gcGFyc2VGbG9hdChkYXlzU2luY2VMYXN0LnRvRml4ZWQoMykpO1xyXG4gICAgICAgIGNvbnN0IHNlc3Npb25TdGFydERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvbiA/IHRoaXMubWFqVmVyc2lvbi50b1N0cmluZygpICsgXCIuXCIgKyB0aGlzLm1pblZlcnNpb24udG9TdHJpbmcoKSA6IFwiXCIsXHJcbiAgICAgICAgICAgIGRheXNfc2luY2VfbGFzdDogcm91bmRlZERheXNTaW5jZUxhc3QsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFNlc3Npb25TdGFydEV2ZW50KHNlc3Npb25TdGFydERhdGEpO1xyXG4gICAgfVxyXG4gICAgbG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2Vzc2lvbkVuZERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvbiA/IHRoaXMubWFqVmVyc2lvbi50b1N0cmluZygpICsgXCIuXCIgKyB0aGlzLm1pblZlcnNpb24udG9TdHJpbmcoKSA6IFwiXCIsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLnN0YXJ0U2Vzc2lvblRpbWUpIC8gMTAwMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwibGFzdFNlc3Npb25FbmRUaW1lXCIsIG5ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKCkpO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kU2Vzc2lvbkVuZEV2ZW50KHNlc3Npb25FbmREYXRhKTtcclxuICAgIH1cclxuICAgIGluaXRpYWxpemVDYWNoZWREYXRhKCkge1xyXG4gICAgICAgIGNvbnN0IHN0b3JlZERhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShJc0NhY2hlZCk7XHJcbiAgICAgICAgcmV0dXJuIHN0b3JlZERhdGEgPyBuZXcgTWFwKEpTT04ucGFyc2Uoc3RvcmVkRGF0YSkpIDogbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgbG9hZEFuZENhY2hlRm9udChmb250TmFtZSwgZm9udFBhdGgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBjb25zdCBjYWNoZSA9IGF3YWl0IGNhY2hlcy5vcGVuKCdmb250Q2FjaGUnKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZS5tYXRjaChmb250UGF0aCk7XHJcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRSZXNwb25zZSA9IGF3YWl0IGZldGNoKGZvbnRQYXRoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRCbG9iID0gYXdhaXQgZm9udFJlc3BvbnNlLmJsb2IoKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGNhY2hlLnB1dChmb250UGF0aCwgbmV3IFJlc3BvbnNlKGZvbnRCbG9iKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZm9udCA9IG5ldyBGb250RmFjZShmb250TmFtZSwgYHVybCgke2ZvbnRQYXRofSkgZm9ybWF0KCd0cnVldHlwZScpYCk7XHJcbiAgICAgICAgICAgIGF3YWl0IGZvbnQubG9hZCgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5mb250cy5hZGQoZm9udCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gbG9hZCBhbmQgY2FjaGUgZm9udDogJHtlcnJvcn1gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkaW5nU2NyZWVuID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX2NhY2hlZC5nZXQobGFuZykpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nRWxlbWVudC5zdHlsZS56SW5kZXggPSAnLTEnO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IFwiMzAlXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFzeW5jIHJlZ2lzdGVyV29ya2JveCgpIHtcclxuICAgICAgICBpZiAoXCJzZXJ2aWNlV29ya2VyXCIgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB3YiA9IG5ldyBXb3JrYm94KFwiLi9zdy5qc1wiLCB7fSk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB3Yi5yZWdpc3RlcigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVhZHk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNfY2FjaGVkLmhhcyh0aGlzLmxhbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFubmVsLnBvc3RNZXNzYWdlKHsgY29tbWFuZDogXCJDYWNoZVwiLCBkYXRhOiB0aGlzLmxhbmcgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLmhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZWdpc3RlciBzZXJ2aWNlIHdvcmtlcjogJHtlcnJvcn1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldHVwQ2FudmFzKCkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGggPiAxMDgwID8gNzY4IDogd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVEYXRhTW9kYWwoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0YU1vZGFsKGRhdGEudGl0bGUsIGRhdGEuT3RoZXJBdWRpb3MsIGRhdGEuTGV2ZWxzLCBkYXRhLkZlZWRiYWNrVGV4dHMsIGRhdGEuUmlnaHRUb0xlZnQsIGRhdGEuRmVlZGJhY2tBdWRpb3MsIGRhdGEubWFqdmVyc2lvbiwgZGF0YS5taW52ZXJzaW9uLCBkYXRhLnZlcnNpb24pO1xyXG4gICAgfVxyXG4gICAgZ2xvYmFsSW5pdGlhbGl6YXRpb24oZGF0YSkge1xyXG4gICAgICAgIGdsb2JhbFRoaXMuYWJvdXRDb21wYW55ID0gZGF0YS5hYm91dENvbXBhbnk7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5kZXNjcmlwdGlvblRleHQgPSBkYXRhLmRlc2NyaXB0aW9uVGV4dDtcclxuICAgIH1cclxuICAgIGhhbmRsZVJlc2l6ZShkYXRhTW9kYWwpIHtcclxuICAgICAgICBpZiAodGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJzaW9uSW5mb0VsZW1lbnQoZGF0YU1vZGFsKTtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cENhbnZhcygpO1xyXG4gICAgICAgICAgICB0aGlzLnJlaW5pdGlhbGl6ZVNjZW5lSGFuZGxlcihkYXRhTW9kYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudChkYXRhTW9kYWwpIHtcclxuICAgICAgICBpZiAodGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykgJiYgRGVidWdnZXIuRGV2ZWxvcG1lbnRMaW5rKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhTW9kYWwubWFqVmVyc2lvbiAmJiBkYXRhTW9kYWwubWluVmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MICs9IGAvai52JHtkYXRhTW9kYWwubWFqVmVyc2lvbn0uJHtkYXRhTW9kYWwubWluVmVyc2lvbn1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFNb2RhbC52ZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwgKz0gYC9qLnYke2RhdGFNb2RhbC52ZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGUtYnRuXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVpbml0aWFsaXplU2NlbmVIYW5kbGVyKGRhdGFNb2RhbCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnNjZW5lSGFuZGxlcjtcclxuICAgICAgICB0aGlzLnNjZW5lSGFuZGxlciA9IG5ldyBTY2VuZUhhbmRsZXIodGhpcy5jYW52YXMsIGRhdGFNb2RhbCk7XHJcbiAgICAgICAgdGhpcy5wYXNzaW5nRGF0YVRvQ29udGFpbmVyKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDYWNoZWRTY2VuYXJpbyhkYXRhTW9kYWwpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudChkYXRhTW9kYWwpO1xyXG4gICAgICAgIHRoaXMuc2NlbmVIYW5kbGVyID0gbmV3IFNjZW5lSGFuZGxlcih0aGlzLmNhbnZhcywgZGF0YU1vZGFsKTtcclxuICAgICAgICB0aGlzLnBhc3NpbmdEYXRhVG9Db250YWluZXIoKTtcclxuICAgIH1cclxuICAgIHBhc3NpbmdEYXRhVG9Db250YWluZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5BbmRyb2lkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5BbmRyb2lkLmNhY2hlZFN0YXR1cyh0aGlzLmlzX2NhY2hlZC5nZXQodGhpcy5sYW5nKSA9PSB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgc2V0Q29udGFpbmVyQXBwT3JpZW50YXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5BbmRyb2lkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5BbmRyb2lkLnNldENvbnRhaW5lckFwcE9yaWVudGF0aW9uKFwicG9ydHJhaXRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCkge1xyXG4gICAgICAgIGxldCB0ZXh0ID0gXCJVcGRhdGUgRm91bmRcXG5QcmVzcyBvayB0byB1cGRhdGVcIjtcclxuICAgICAgICBjb25zdCB1c2VyQ29uZmlybWVkID0gY29uZmlybSh0ZXh0KTtcclxuICAgICAgICBpZiAodXNlckNvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZGluZ01lc3NhZ2UgPSAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzQmFyQ29udGFpbmVyICYmIHRoaXMucHJvZ3Jlc3NCYXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICBpZiAocGFyc2VJbnQodGhpcy5wcm9ncmVzc0Jhci5zdHlsZS53aWR0aCB8fCBcIjBcIikgPj0gNDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHtkYXRhLmRhdGF9JWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YSAlIDEwMCA9PT0gMCAmJiAhdGhpcy5pc19jYWNoZWQuZ2V0KHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNfY2FjaGVkLnNldCh0aGlzLmxhbmcsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oSXNDYWNoZWQsIEpTT04uc3RyaW5naWZ5KEFycmF5LmZyb20odGhpcy5pc19jYWNoZWQuZW50cmllcygpKSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWRfY29tcGxldGVkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZ0bV9sYW5ndWFnZTogbGFuZyxcclxuICAgICAgICAgICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICAgICAgICAgIGpzb25fdmVyc2lvbl9udW1iZXI6ICEhdGhpcy5tYWpWZXJzaW9uICYmICEhdGhpcy5taW5WZXJzaW9uID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpIDogXCJcIixcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZERvd25sb2FkQ29tcGxldGVkRXZlbnQoZG93bmxvYWRfY29tcGxldGVkKTtcclxuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwidmVyc2lvblwiICsgdGhpcy5sYW5nLCBkYXRhLnZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHtkYXRhLmRhdGF9JWA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEubXNnID09PSBcIkxvYWRpbmdcIikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUxvYWRpbmdNZXNzYWdlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5kYXRhLm1zZyA9PT0gXCJVcGRhdGUgRm91bmRcIikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZUZvdW5kTWVzc2FnZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nU2Vzc2lvblN0YXJ0RmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dTZXNzaW9uRW5kRmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBoYW5kbGVCZWZvcmVVbmxvYWQgPSBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxvZ1Nlc3Npb25FbmRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgcHJlbG9hZEdhbWVBdWRpb3MgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGF1ZGlvVXJscyA9IFtcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvaW50cm8ubXAzXCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL0NoZWVyaW5nLTAyLm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wMy5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvQ2hlZXJpbmctMDEubXAzXCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL29uRHJhZy5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvdGltZW91dC5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvTGV2ZWxXaW5GYW5mYXJlLm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9MZXZlbExvc2VGYW5mYXJlLm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvTW9uc3RlciBTcGl0cyB3cm9uZyBzdG9uZXMtMDEubXAzXCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL0Rpc2Fwb2ludGVkLTA1Lm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9Nb25zdGVyU3BpdC5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvRWF0Lm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9Qb2ludHNBZGQud2F2XCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL2FyZS15b3Utc3VyZS5tcDNcIlxyXG4gICAgICAgIF07XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlbG9hZFByb21pc2VzID0gYXVkaW9VcmxzLm1hcCgoYXVkaW9TcmMpID0+IG5ldyBBdWRpb1BsYXllcigpLnByZWxvYWRHYW1lQXVkaW8oYXVkaW9TcmMpKTtcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJlbG9hZFByb21pc2VzKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByZWxvYWRpbmcgYXVkaW86XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIEFkZCB0aGUgZGlzcG9zZSBtZXRob2RcclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMuaGFuZGxlQmVmb3JlVW5sb2FkKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVTZXJ2aWNlV29ya2VyTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBlcmZvcm0gYWRkaXRpb25hbCBjbGVhbnVwIGlmIG5lY2Vzc2FyeVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IGFwcCA9IG5ldyBBcHAobGFuZyk7XHJcbiJdLCJuYW1lcyI6WyJDT05TVEFOVFMiLCJOT0RFX0NMSUVOVCIsIk5PREVfQURNSU4iLCJTREtfVkVSU0lPTiIsImFzc2VydCIsImFzc2VydGlvbiIsIm1lc3NhZ2UiLCJhc3NlcnRpb25FcnJvciIsIkVycm9yIiwic3RyaW5nVG9CeXRlQXJyYXkkMSIsInN0ciIsIm91dCIsInAiLCJpIiwibGVuZ3RoIiwiYyIsImNoYXJDb2RlQXQiLCJiYXNlNjQiLCJieXRlVG9DaGFyTWFwXyIsImNoYXJUb0J5dGVNYXBfIiwiYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIiwiY2hhclRvQnl0ZU1hcFdlYlNhZmVfIiwiRU5DT0RFRF9WQUxTX0JBU0UiLCJFTkNPREVEX1ZBTFMiLCJ0aGlzIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5wdXQiLCJ3ZWJTYWZlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5pdF8iLCJieXRlVG9DaGFyTWFwIiwib3V0cHV0IiwiYnl0ZTEiLCJoYXZlQnl0ZTIiLCJieXRlMiIsImhhdmVCeXRlMyIsImJ5dGUzIiwib3V0Qnl0ZTEiLCJvdXRCeXRlMiIsIm91dEJ5dGUzIiwib3V0Qnl0ZTQiLCJwdXNoIiwiam9pbiIsImVuY29kZVN0cmluZyIsImJ0b2EiLCJkZWNvZGVTdHJpbmciLCJieXRlcyIsInBvcyIsImMxIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYzIiLCJ1IiwiYzMiLCJieXRlQXJyYXlUb1N0cmluZyIsImRlY29kZVN0cmluZ1RvQnl0ZUFycmF5IiwiY2hhclRvQnl0ZU1hcCIsImNoYXJBdCIsImJ5dGU0IiwiRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYXJndW1lbnRzIiwibmFtZSIsImJhc2U2NEVuY29kZSIsInV0ZjhCeXRlcyIsImJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nIiwicmVwbGFjZSIsImJhc2U2NERlY29kZSIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJkZWVwQ29weSIsInZhbHVlIiwiZGVlcEV4dGVuZCIsInVuZGVmaW5lZCIsInRhcmdldCIsInNvdXJjZSIsIk9iamVjdCIsIkRhdGUiLCJnZXRUaW1lIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiZ2V0R2xvYmFsIiwic2VsZiIsIndpbmRvdyIsImciLCJnZXREZWZhdWx0cyIsIl9fRklSRUJBU0VfREVGQVVMVFNfXyIsInByb2Nlc3MiLCJlbnYiLCJkZWZhdWx0c0pzb25TdHJpbmciLCJKU09OIiwicGFyc2UiLCJnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSIsImRvY3VtZW50IiwibWF0Y2giLCJjb29raWUiLCJkZWNvZGVkIiwiZ2V0RGVmYXVsdHNGcm9tQ29va2llIiwiaW5mbyIsImdldERlZmF1bHRFbXVsYXRvckhvc3QiLCJwcm9kdWN0TmFtZSIsIl9hIiwiX2IiLCJlbXVsYXRvckhvc3RzIiwiZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0IiwiaG9zdCIsInNlcGFyYXRvckluZGV4IiwibGFzdEluZGV4T2YiLCJwb3J0IiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJnZXREZWZhdWx0QXBwQ29uZmlnIiwiY29uZmlnIiwiZ2V0RXhwZXJpbWVudGFsU2V0dGluZyIsIkRlZmVycmVkIiwicmVqZWN0IiwicmVzb2x2ZSIsInByb21pc2UiLCJQcm9taXNlIiwid3JhcENhbGxiYWNrIiwiY2FsbGJhY2siLCJjYXRjaCIsImNyZWF0ZU1vY2tVc2VyVG9rZW4iLCJ0b2tlbiIsInByb2plY3RJZCIsInVpZCIsInByb2plY3QiLCJpYXQiLCJzdWIiLCJ1c2VyX2lkIiwicGF5bG9hZCIsImFzc2lnbiIsImlzcyIsImF1ZCIsImV4cCIsImF1dGhfdGltZSIsImZpcmViYXNlIiwic2lnbl9pbl9wcm92aWRlciIsImlkZW50aXRpZXMiLCJzdHJpbmdpZnkiLCJhbGciLCJ0eXBlIiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJpc01vYmlsZUNvcmRvdmEiLCJ0ZXN0IiwiaXNOb2RlIiwiZm9yY2VFbnZpcm9ubWVudCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImlzQnJvd3NlciIsImlzQnJvd3NlckV4dGVuc2lvbiIsInJ1bnRpbWUiLCJjaHJvbWUiLCJicm93c2VyIiwiaWQiLCJpc1JlYWN0TmF0aXZlIiwiaXNFbGVjdHJvbiIsImluZGV4T2YiLCJpc0lFIiwidWEiLCJpc1VXUCIsImlzTm9kZVNkayIsImlzU2FmYXJpIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0luZGV4ZWREQkF2YWlsYWJsZSIsImluZGV4ZWREQiIsInZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUiLCJwcmVFeGlzdCIsIkRCX0NIRUNLX05BTUUiLCJyZXF1ZXN0Iiwib3BlbiIsIm9uc3VjY2VzcyIsInJlc3VsdCIsImNsb3NlIiwiZGVsZXRlRGF0YWJhc2UiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbmVycm9yIiwiYXJlQ29va2llc0VuYWJsZWQiLCJjb29raWVFbmFibGVkIiwiRmlyZWJhc2VFcnJvciIsImNvZGUiLCJjdXN0b21EYXRhIiwic2V0UHJvdG90eXBlT2YiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkVycm9yRmFjdG9yeSIsImNyZWF0ZSIsInNlcnZpY2UiLCJzZXJ2aWNlTmFtZSIsImVycm9ycyIsImRhdGEiLCJmdWxsQ29kZSIsInRlbXBsYXRlIiwiUEFUVEVSTiIsIl8iLCJrZXkiLCJyZXBsYWNlVGVtcGxhdGUiLCJmdWxsTWVzc2FnZSIsImpzb25FdmFsIiwiZGVjb2RlIiwiaGVhZGVyIiwiY2xhaW1zIiwic2lnbmF0dXJlIiwicGFydHMiLCJzcGxpdCIsImlzVmFsaWRUaW1lc3RhbXAiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJ2YWxpZFNpbmNlIiwidmFsaWRVbnRpbCIsImlzc3VlZEF0VGltZSIsImlzVmFsaWRGb3JtYXQiLCJpc0FkbWluIiwiY29udGFpbnMiLCJvYmoiLCJzYWZlR2V0IiwiaXNFbXB0eSIsIm1hcCIsImZuIiwiY29udGV4dE9iaiIsInJlcyIsImRlZXBFcXVhbCIsImEiLCJiIiwiYUtleXMiLCJrZXlzIiwiYktleXMiLCJrIiwiYVByb3AiLCJiUHJvcCIsImlzT2JqZWN0IiwidGhpbmciLCJwcm9taXNlV2l0aFRpbWVvdXQiLCJ0aW1lSW5NUyIsImRlZmVycmVkUHJvbWlzZSIsInNldFRpbWVvdXQiLCJ0aGVuIiwicXVlcnlzdHJpbmciLCJxdWVyeXN0cmluZ1BhcmFtcyIsInBhcmFtcyIsImVudHJpZXMiLCJmb3JFYWNoIiwiYXJyYXlWYWwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZ0RlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImV4dHJhY3RRdWVyeXN0cmluZyIsInVybCIsInF1ZXJ5U3RhcnQiLCJmcmFnbWVudFN0YXJ0IiwiU2hhMSIsImNoYWluXyIsImJ1Zl8iLCJXXyIsInBhZF8iLCJpbmJ1Zl8iLCJ0b3RhbF8iLCJibG9ja1NpemUiLCJyZXNldCIsImNvbXByZXNzXyIsImJ1ZiIsIm9mZnNldCIsIlciLCJ0IiwiZiIsImQiLCJ1cGRhdGUiLCJsZW5ndGhNaW51c0Jsb2NrIiwibiIsImluYnVmIiwiZGlnZXN0IiwidG90YWxCaXRzIiwiaiIsImNyZWF0ZVN1YnNjcmliZSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsInByb3h5IiwiT2JzZXJ2ZXJQcm94eSIsInN1YnNjcmliZSIsImJpbmQiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsIm5leHQiLCJmb3JFYWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsImNvbXBsZXRlIiwibmV4dE9yT2JzZXJ2ZXIiLCJtZXRob2RzIiwibWV0aG9kIiwiaW1wbGVtZW50c0FueU1ldGhvZHMiLCJub29wIiwidW5zdWIiLCJ1bnN1YnNjcmliZU9uZSIsImZpbmFsRXJyb3IiLCJzZW5kT25lIiwiZXJyIiwiYXN5bmMiLCJvbkVycm9yIiwiYXJncyIsInZhbGlkYXRlQXJnQ291bnQiLCJmbk5hbWUiLCJtaW5Db3VudCIsIm1heENvdW50IiwiYXJnQ291bnQiLCJhcmdFcnJvciIsImVycm9yUHJlZml4IiwiYXJnTmFtZSIsInZhbGlkYXRlTmFtZXNwYWNlIiwibmFtZXNwYWNlIiwib3B0aW9uYWwiLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiYXJndW1lbnROYW1lIiwidmFsaWRhdGVDb250ZXh0T2JqZWN0IiwiY29udGV4dCIsInN0cmluZ1RvQnl0ZUFycmF5IiwiaGlnaCIsInN0cmluZ0xlbmd0aCIsInV1aWR2NCIsInIiLCJyYW5kb20iLCJERUZBVUxUX0lOVEVSVkFMX01JTExJUyIsIkRFRkFVTFRfQkFDS09GRl9GQUNUT1IiLCJNQVhfVkFMVUVfTUlMTElTIiwiUkFORE9NX0ZBQ1RPUiIsImNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMiLCJiYWNrb2ZmQ291bnQiLCJpbnRlcnZhbE1pbGxpcyIsImJhY2tvZmZGYWN0b3IiLCJjdXJyQmFzZVZhbHVlIiwicG93IiwicmFuZG9tV2FpdCIsInJvdW5kIiwibWluIiwib3JkaW5hbCIsIk51bWJlciIsImlzRmluaXRlIiwiYWJzIiwiY2VudCIsImRlYyIsImluZGljYXRvciIsImdldE1vZHVsYXJJbnN0YW5jZSIsIl9kZWxlZ2F0ZSIsInVybFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImxvY2F0aW9uIiwic2VhcmNoIiwicHNldWRvSWQiLCJnZXQiLCJsYW5nIiwiZm9udCIsIlV0aWxzIiwiZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQiLCJEZWJ1Z2dlciIsIkRldmVsb3BtZW50TGluayIsImhyZWYiLCJEZXZlbG9wbWVudFNlcnZlciIsIkRlYnVnTW9kZSIsImZlZWRiYWNrVGV4dFdvcmtlclBhdGgiLCJCYXNlRmlyZWJhc2VJbnRlZ3JhdGlvbiIsImZpcmViYXNlQXBwIiwiYW5hbHl0aWNzIiwiaW5pdGlhbGl6ZUZpcmViYXNlIiwiY3VzdG9tRXZlbnRzIiwiZXZlbnROYW1lIiwiZXZlbnQiLCJsb2dFdmVudCIsInNlc3Npb25FbmQiLCJvbkxpbmUiLCJpbml0aWFsaXplQXBwIiwiZmlyZWJhc2VDb25maWciLCJnZXRBbmFseXRpY3MiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJGaXJlYmFzZUludGVncmF0aW9uIiwic3RhdGljIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsInNlbmRTZXNzaW9uU3RhcnRFdmVudCIsInNlbmRTZXNzaW9uRW5kRXZlbnQiLCJzZW5kU2VsZWN0ZWRMZXZlbEV2ZW50Iiwic2VuZFRhcHBlZFN0YXJ0RXZlbnQiLCJzZW5kUHV6emxlQ29tcGxldGVkRXZlbnQiLCJzZW5kTGV2ZWxDb21wbGV0ZWRFdmVudCIsInNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50IiwiY2xpY2siLCJzZW5kRG93bmxvYWRDb21wbGV0ZWRFdmVudCIsImxvYWRJbWFnZXMiLCJzb3VyY2VzIiwiaW1hZ2VzIiwibG9hZGVkSW1hZ2VzIiwibnVtSW1hZ2VzIiwic3JjIiwiSW1hZ2UiLCJvbmxvYWQiLCJGaXJlYmFzZVVzZXJDbGlja2VkIiwiRmlyZWJhc2VVc2VySW5zdGFsbCIsIlBXQUluc3RhbGxTdGF0dXMiLCJVc2VyQ2FuY2VsbGVkIiwiTmF0aXZlUGxheUJ1dHRvbiIsIlByZXZpb3VzUGxheWVkTGV2ZWwiLCJTdG9yZU1vbnN0ZXJQaGFzZU51bWJlciIsIklzQ2FjaGVkIiwiTW9uc3RlckF1ZGlvIiwiRmVlZGJhY2tBdWRpbyIsIkludHJvTXVzaWMiLCJQcm9tcHRBdWRpbyIsIkJ1dHRvbkNsaWNrIiwiVGltZU92ZXIiLCJTdG9uZU11c2ljIiwiUGhyYXNlQXVkaW8iLCJMZXZlbEVuZEF1ZGlvIiwiVXJsU3Vic3RyaW5nIiwiU3RhcnRTY2VuZTEiLCJMZXZlbFNlbGVjdGlvbjEiLCJHYW1lU2NlbmUxIiwiRW5kU2NlbmUxIiwiTE9BRFBVWlpMRSIsIlNUT05FRFJPUCIsIk1PVVNFTU9WRSIsIk1PVVNFRE9XTiIsIk1PVVNFVVAiLCJUT1VDSFNUQVJUIiwiVE9VQ0hNT1ZFIiwiVE9VQ0hFTkQiLCJDTElDSyIsIlZJU0lCSUxJVFlfQ0hBTkdFIiwiTGV2ZWxDb25maWciLCJ4IiwieSIsImluZGV4IiwiZHJhd3JlYWR5IiwiaW1nIiwieFBvcyIsInlQb3MiLCJTdG9uZUNvbmZpZyIsIm9yaWd4Iiwib3JpZ3kiLCJ0ZXh0IiwiaW1hZ2VTaXplIiwidGV4dEZvbnRTaXplIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJpbWFnZUNlbnRlck9mZnNldFgiLCJpbWFnZUNlbnRlck9mZnNldFkiLCJ0dXRvcmlhbEluc3RhbmNlIiwidGltZXJUaWNraW5nSW5zdGFuY2UiLCJmcmFtZSIsInN0b25lTGV0dGVyIiwiY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiLCJnZXRFYXNlIiwiY3VycmVudFByb2dyZXNzIiwic3RhcnQiLCJkaXN0YW5jZSIsInN0ZXBzIiwiY29zIiwiUEkiLCJnZXRYIiwiZ2V0WSIsImRyYXciLCJkZWx0YVRpbWUiLCJkcmF3SW1hZ2UiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJmaWxsVGV4dCIsImdldENvbnZlcnRlZERldlByb2RVUkwiLCJzbGljZSIsImxhbmd1YWdlIiwibG93ZXJDYXNlTGFuZ3VhZ2UiLCJ0b0xvd2VyQ2FzZSIsImxvZyIsImdldFJhbmRvbU51bWJlciIsIm1heCIsImdldEV4Y2x1ZGVkQ29vcmRpbmF0ZXMiLCJjYW52YXMiLCJleGNsdXNpb25QZXJjZW50YWdlIiwiZXhjbHVkZVgiLCJleGNsdWRlWSIsImhlaWdodCIsImNyZWF0ZVJpcHBsZUVmZmVjdCIsImN0eCIsImNlbnRlclgiLCJjZW50ZXJZIiwib3V0ZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsInJlc3RhcnQiLCJiZWdpblBhdGgiLCJhcmMiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsImNsb3NlUGF0aCIsIkF1ZGlvUGxheWVyIiwiYXVkaW9Db250ZXh0Iiwic291cmNlTm9kZSIsImF1ZGlvUXVldWUiLCJwcm9tcHRBdWRpb0J1ZmZlciIsIk1hcCIsImF1ZGlvU291cmNzIiwiQXVkaW9Db250ZXh0TWFuYWdlciIsImdldEF1ZGlvQ29udGV4dCIsInByZWxvYWRQcm9tcHRBdWRpbyIsImF1ZGlvU3JjIiwiYXVkaW9CdWZmZXIiLCJsb2FkQW5kRGVjb2RlQXVkaW8iLCJwcmVsb2FkR2FtZUF1ZGlvIiwiYXVkaW9CdWZmZXJzIiwiaGFzIiwic2V0IiwicGxheUF1ZGlvIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiYnVmZmVyIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwicGxheUZlZWRiYWNrQXVkaW9zIiwibG9vcCIsImZpbGVVcmwiLCJwbGF5RmV0Y2giLCJwbGF5UHJvbXB0QXVkaW8iLCJwbGF5QnV0dG9uQ2xpY2tTb3VuZCIsInN0b3BGZWVkYmFja0F1ZGlvIiwic3RvcCIsInN0b3BBbGxBdWRpb3MiLCJmZXRjaCIsInJlc3BvbnNlIiwiYXJyYXlCdWZmZXIiLCJkZWNvZGVBdWRpb0RhdGEiLCJvbmVuZGVkIiwiaGFuZGxlQXVkaW9FbmRlZCIsImRpc2Nvbm5lY3QiLCJBdWRpb0NvbnRleHQiLCJ3ZWJraXRBdWRpb0NvbnRleHQiLCJiZ0ltZyIsIkRFRkFVTFRfQkFDS0dST1VORF8xIiwiaGlsbEltZyIsIkhJTExfSU1BR0VfMSIsInBpbGxlckltZyIsIlBJTExBUl9JTUFHRV8xIiwiZmVuY2hJbWciLCJGRU5DRV9JTUFHRV8xIiwiYXV0dW1uQmdJbWciLCJBVVRVTU5fQkFDS0dST1VORF8xIiwiYXV0dW1uSGlsbEltZyIsIkFVVFVNTl9ISUxMXzEiLCJhdXR1bW5QaWxsZXJJbWciLCJBVVRVTU5fUElMTEFSXzEiLCJhdXR1bW5TaWduSW1nIiwiQVVUVU1OX1NJR05fMSIsImF1dHVtbkZlbmNlSW1nIiwiQVVUVU1OX0ZFTkNFXzEiLCJ3aW50ZXJCZ0ltZyIsIldJTlRFUl9CQUNLR1JPVU5EXzEiLCJ3aW50ZXJIaWxsSW1nIiwiV0lOVEVSX0hJTExfMSIsIndpbnRlclNpZ25JbWciLCJXSU5URVJfU0lHTl8xIiwid2ludGVyRmVuY2VJbWciLCJXSU5URVJfRkVOQ0VfMSIsIndpbnRlclBpbGxlckltZyIsIldJTlRFUl9QSUxMQVJfMSIsIkJhY2tncm91bmQiLCJpbWFnZXNMb2FkZWQiLCJsZXZlbE51bWJlciIsImF2YWlsYWJsZUJhY2tncm91bmRUeXBlcyIsImJhY2tncm91bmRUeXBlIiwiQ2FuY2VsQnV0dG9uIiwicG9zWCIsInBvc1kiLCJjYW5jZWxfYnV0dG9uX2ltYWdlIiwib25DbGljayIsInhDbGljayIsInlDbGljayIsInNxcnQiLCJDbG9zZUJ1dHRvbiIsImNsb3NlX2J1dHRvbl9pbWFnZSIsIk5leHRCdXR0b24iLCJuZXh0X2J1dHRvbl9pbWFnZSIsIk5vQnV0dG9uIiwibm9fYnV0dG9uX2ltYWdlIiwiUGF1c2VCdXR0b24iLCJwYXVzZV9idXR0b25faW1hZ2UiLCJSZXRyeUJ1dHRvbiIsInJldHJ5X2J1dHRvbl9pbWFnZSIsIlllc0J1dHRvbiIsInllc19idXR0b25faW1hZ2UiLCJGZWVkYmFja1RleHRFZmZlY3RzIiwidGV4dFgiLCJ0ZXh0WSIsImZvbnRTaXplIiwibGluZUhlaWdodCIsIm1heFRleHRXaWR0aCIsInBhcnRpY2xlRHVyYXRpb24iLCJzdGFydFRpbWUiLCJwYXJ0aWNsZXMiLCJnYXAiLCJtb3VzZSIsInRleHRXb3JrZXIiLCJyYWRpdXMiLCJXb3JrZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlVGV4dFdvcmtlck1lc3NhZ2UiLCJ3cmFwVGV4dCIsImdyYWRpZW50IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJhZGRDb2xvclN0b3AiLCJ0ZXh0QmFzZWxpbmUiLCJsaW5lQXJyYXkiLCJ3b3JkcyIsImxpbmVDb3VudGVyIiwibGluZSIsInRlc3RMaW5lIiwidGV4dEhlaWdodCIsInRyaW0iLCJsYXN0U3BhY2VJbmRleCIsImluaXRpYWxUZXh0IiwibGFzdFRleHQiLCJjb252ZXJ0VG9QYXJ0aWNsZSIsImNvbG9yIiwiVGV4dFBhcnRpY2xlIiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiY2xlYXJSZWN0IiwicG9zdE1lc3NhZ2UiLCJwaXhlbHMiLCJyZW5kZXIiLCJwYXJ0aWNsZSIsInVwZGF0ZVBhcnRpY2xlcyIsImNsZWFyUGFydGljbGUiLCJ1bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0ZXJtaW5hdGUiLCJBcmVZb3VTdXJlUG9wVXAiLCJ5ZXNCdXR0b24iLCJub0J1dHRvbiIsInBvcF91cF9pbWFnZSIsInllc0NhbGxiYWNrIiwibm9DYWxsYmFjayIsImF1ZGlvUGxheWVyIiwiZ2V0Q29udGV4dCIsImFkZExpc3RuZXIiLCJoYW5kbGVNb3VzZUNsaWNrIiwic2VsZkVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInByZXZlbnREZWZhdWx0IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50WSIsInRvcCIsInBsYXlDbGlja1NvdW5kIiwiZGlzcG9zZSIsImZpbGxSZWN0IiwiZmVlZGJhY2tUZXh0RWZmZWN0cyIsIm9yaWdpblgiLCJvcmlnaW5ZIiwic2l6ZSIsImVhc2UiLCJMZXZlbEluZGljYXRvcnMiLCJFdmVudE1hbmFnZXIiLCJhY3RpdmVJbmRpY2F0b3JzIiwic3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyIiwiaGFuZGxlU3RvbmVEcm9wIiwibG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlciIsImhhbmRsZUxvYWRQdXp6bGUiLCJsZXZlbF9pbmRpY2F0b3IiLCJiYXJfZW1wdHkiLCJiYXJfZnVsbCIsInNldEluZGljYXRvcnMiLCJpbmRpY2F0b3JDb3VudCIsImFkZERyb3BTdG9uZUV2ZW50IiwiZGV0YWlsIiwiY291bnRlciIsIk1vbnN0ZXIiLCJ6aW5kZXgiLCJpbWFnZSIsImZyYW1lWCIsImZyYW1lWSIsIm1heEZyYW1lIiwiZnBzIiwiY291bnRGcmFtZSIsImZyYW1lSW50ZXJ2YWwiLCJmcmFtZVRpbWVyIiwiY2FudmFzU3RhY2siLCJjYW5hdnNFbGVtZW50IiwiZ2FtZSIsIm1vbnN0ZXJQaGFzZSIsImNhbGxCYWNrRnVuY3Rpb24iLCJlYXRJbWciLCJpZGxlSW1nIiwic3BpdEltZyIsImRyYWdJbWciLCJjaGFuZ2VUb0lkbGVBbmltYXRpb24iLCJjaGFuZ2VJbWFnZSIsImNoYW5nZVRvRHJhZ0FuaW1hdGlvbiIsImNoYW5nZVRvRWF0QW5pbWF0aW9uIiwiY2hhbmdlVG9TcGl0QW5pbWF0aW9uIiwiaXNDb3JyZWN0IiwiUGF1c2VQb3BVcCIsImNhbmNlbEJ1dHRvbiIsInJldHJ5QnV0dG9uIiwiY2xvc2VCdXR0b24iLCJzd2l0Y2hUb0xldmVsU2VsZWN0aW9uIiwicmVsb2FkU2NlbmUiLCJnYW1lcGxheURhdGEiLCJyZXRyeVN1cmVQb3B1cCIsIkNsb3NlU3VyZVBvcHVwIiwiaXNSZXRyeUJ1dHRvbkNsaWNrZWQiLCJpc0Nsb3NlQnV0dG9uQ2xpY2tlZCIsInNlbGZJZEVsZW1lbnQiLCJ5ZXNSZXRyeUNhbGxiYWNrIiwibm9SZXRyeUNhbGxiYWNrIiwibm9DbG9zZUNhbGxiYWNrIiwicGxheUFyZVlvdVN1cmVTb3VuZCIsIlBsYXlCdXR0b24iLCJtYWpWZXJzaW9uIiwibWluVmVyc2lvbiIsImZpcmViYXNlSW50ZWdyYXRpb24iLCJpbml0IiwiZ2V0RGF0YSIsIm1hanZlcnNpb24iLCJtaW52ZXJzaW9uIiwibG9nVGFwcGVkU3RhcnRGaXJlYmFzZUV2ZW50IiwidGFwcGVkU3RhcnREYXRhIiwiY3JfdXNlcl9pZCIsImZ0bV9sYW5ndWFnZSIsInByb2ZpbGVfbnVtYmVyIiwidmVyc2lvbl9udW1iZXIiLCJpbm5lckhUTUwiLCJqc29uX3ZlcnNpb25fbnVtYmVyIiwiUHJvbXB0VGV4dCIsImxldmVsRGF0YSIsImN1cnJlbnRQcm9tcHRUZXh0IiwiY3VycmVudFB1enpsZURhdGEiLCJwcm9tcHRfaW1hZ2UiLCJ0YXJnZXRTdG9uZXMiLCJyaWdodFRvTGVmdCIsImlzU3RvbmVEcm9wcGVkIiwiZHJvcHBlZFN0b25lcyIsInRpbWUiLCJwcm9tcHRJbWFnZVdpZHRoIiwiaXNBcHBGb3JlZ3JvdW5kIiwic2NhbGUiLCJpc1NjYWxpbmdVcCIsInNjYWxlRmFjdG9yIiwicHJvbXB0SW1hZ2VIZWlnaHQiLCJwcm9tcHRQbGF5QnV0dG9uIiwicHJvbXB0IiwicHJvbXB0VGV4dCIsImdldFByb21wdEF1ZGlvVXJsIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsImhhbmRsZU1vdXNlRG93biIsInBsYXlTb3VuZCIsInByb21wdEF1ZGlvIiwic2V0Q3VycnJlbnRQdXp6bGVEYXRhIiwiZHJhd1JUTExhbmciLCJjYWxjdWxhdGVGb250Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJsZXZlbE1ldGEiLCJsZXZlbFR5cGUiLCJwcm90b1R5cGUiLCJsZXR0ZXJJbldvcmQiLCJSZWdFeHAiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImRyYXdPdGhlcnMiLCJwcm9tcHRUZXh0TGV0dGVycyIsInN0YXJ0UHJvbXB0dGV4dFgiLCJjdXJyZW50V29yZFdpZHRoIiwibGV0dGVySGlnaGxpZ2h0IiwidXBkYXRlU2NhbGluZyIsInB1enpsZXMiLCJkcm9wcGVkU3RvbmVJbmRleCIsInZpc2liaWxpdHlTdGF0ZSIsImltYWdlMVByb21pc2UiLCJsb2FkSW1hZ2UiLCJpbWFnZTJQcm9taXNlIiwiYWxsIiwiU3RvbmVIYW5kbGVyIiwic3RvbmVQb3MiLCJwaWNrZWRTdG9uZSIsImZvaWxTdG9uZXMiLCJhbnN3ZXIiLCJwdXp6bGVOdW1iZXIiLCJjb3JyZWN0QW5zd2VyIiwicHV6emxlU3RhcnRUaW1lIiwic2hvd1R1dG9yaWFsIiwiR2FtZVNjb3JlIiwiZ2V0RGF0YWZyb21TdG9yYWdlIiwiY29ycmVjdFN0b25lQXVkaW8iLCJ0dXRvcmlhbCIsImNvcnJlY3RUYXJnZXRTdG9uZSIsInN0b25lYmciLCJmZWVkYmFja0F1ZGlvcyIsImlzR2FtZVBhdXNlZCIsInNldFRhcmdldFN0b25lIiwiaW5pdGlhbGl6ZVN0b25lUG9zIiwiQXVkaW8iLCJBVURJT19QQVRIX0NPUlJFQ1RfU1RPTkUiLCJjb252ZXJ0RmVlZEJhY2tBdWRpb3NUb0xpc3QiLCJUdXRvcmlhbCIsIkFTU0VUU19QQVRIX1NUT05FX1BJTktfQkciLCJjcmVhdGVTdG9uZXMiLCJnZXRGb2lsU3RvbmVzIiwidXBkYXRlVGFyZ2V0U3RvbmVQb3NpdGlvbnMiLCJvZmZzZXRDb29yZGluYXRlVmFsdWUiLCJzb3J0IiwiaXNEcm9wcGVkU3RvbmVDb3JyZWN0IiwiZHJvcHBlZFN0b25lIiwic2V0UHV6emxlTnVtYmVyIiwiaXNTdG9uZUxldHRlckRyb3BDb3JyZWN0IiwiZmVlZEJhY2tJbmRleCIsImlzV29yZCIsImlzTGV0dGVyRHJvcENvcnJlY3QiLCJwcm9jZXNzTGV0dGVyRHJvcEZlZWRiYWNrQXVkaW8iLCJnZXRDb3JyZWN0VGFyZ2V0U3RvbmUiLCJwbGF5Q29ycmVjdEFuc3dlckZlZWRiYWNrU291bmQiLCJBVURJT19QQVRIX0VBVFMiLCJBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMiLCJBVURJT19QQVRIX01PTlNURVJfU1BJVCIsIkFVRElPX1BBVEhfTU9OU1RFUl9ESVNTQVBPSU5URUQiLCJzcGxpY2UiLCJ0b3RhbFN0b25lc0NvdW50IiwiZXh0cmFTdG9uZXNDb3VudCIsInBhdXNlIiwic2V0R2FtZVBhdXNlIiwicmFuZG9tTnVtYmVyIiwiQVVESU9fUEFUSF9QT0lOVFNfQUREIiwicGxheSIsIlRpbWVyVGlja2luZyIsInRpbWVyV2lkdGgiLCJ0aW1lckhlaWdodCIsIndpZHRoVG9DbGVhciIsInRpbWVyIiwiaXNUaW1lclN0YXJ0ZWQiLCJpc1RpbWVyRW5kZWQiLCJpc1RpbWVyUnVubmluZ091dCIsInRpbWVyX2Z1bGwiLCJwYXVzZUJ1dHRvbkNsaWNrZWQiLCJzdGFydE15VGltZXIiLCJpc015VGltZXJPdmVyIiwicGxheUxldmVsRW5kQXVkaW9PbmNlIiwidGltZXJfZW1wdHkiLCJyb3RhdGluZ19jbG9jayIsInN0YXJ0VGltZXIiLCJyZWFkeVRpbWVyIiwidHV0b3JpYWxJbWciLCJ0YXJnZXRTdG9uZVBvc2l0aW9ucyIsInN0YXJ0eCIsInN0YXJ0eSIsImVuZHgiLCJlbmR5IiwiZW5kVHV0b3JpYWwiLCJwbGF5TW5zdHJDbGtUdHJsQW5pbSIsInRvdGFsVGltZSIsIm1vbnN0ZXJTdG9uZURpZmZlcmVuY2UiLCJkeCIsImR5IiwiYWJzZHgiLCJhYnNkeSIsInN0YXJ0UmlwcGxlIiwiZHJhd1JpcHBsZSIsInRhcmdldFN0b25lUG9zaXRpb24iLCJhbmltYXRlSW1hZ2UiLCJpc01vYmlsZSIsInNldFR1dG9yaWFsRW5kIiwic2hvdWxkUGxheVR1dG9yaWFsIiwiZGlzeCIsImRpc3kiLCJtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlIiwiY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uIiwicHJldmlvdXNBbHBoYSIsImdsb2JhbEFscGhhIiwic2hvdWxkQ3JlYXRlUmlwcGxlIiwic2ludXNvaWRhbEludGVycG9sYXRpb24iLCJtaW5TY2FsZSIsIm1heFNjYWxlIiwiZHVyYXRpb24iLCJhbXBsaXR1ZGUiLCJmcmVxdWVuY3kiLCJzaW4iLCJjbGlja09uTW9uc3RlclR1dG9yaWFsIiwic2hvdWxkUGxheU1vbnN0ZXJDbGlja1R1dG9yaWFsQW5pbWF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiYm90dG9tUG9zaXRpb24iLCJ0b3BQb3NpdGlvbiIsImN1cnJlbnRPZmZzZXRZIiwiZ2V0QWxsR2FtZUxldmVsSW5mbyIsInB1enpsZU51bWVyIiwic2V0UGxheU1vbnN0ZXJDbGlja0FuaW1hdGlvbiIsIkJBQ0tHUk9VTkRfQVNTRVRfTElTVCIsInN1bW1lciIsIkJHX0dST1VQX0lNR1MiLCJERUZBVUxUX0JHX0dST1VQX0lNR1MiLCJkZWZhdWx0QmdEcmF3aW5nIiwiYXV0dW1uIiwiQVVUVU1OX0JHX0dST1VQX0lNR1MiLCJhdXR1bUJnRHJhd2luZyIsIndpbnRlciIsIldJTlRFUl9CR19HUk9VUF9JTUdTIiwid2ludGVyQmdEcmF3aW5nIiwiY3JlYXRlQmFja2dyb3VuZCIsImJhY2tncm91bmRJbWciLCJkcmF3TWV0aG9kIiwibG9hZER5bmFtaWNCZ0Fzc2V0cyIsImFzc2V0c0xpc3QiLCJhcnIiLCJiZ0ltYWdlcyIsImxldmVsU2VsZWN0QmdEcmF3aW5nIiwiTEVWRUxfU0VMRUNUSU9OX0JBQ0tHUk9VTkQiLCJBVURJT19QQVRIX0JUTl9DTElDSyIsIkFVRElPX1BBVEhfT05fRFJBRyIsIkFTU0VUU19QQVRIX1RPVEVNIiwiQVNTRVRTX1BBVEhfQkdfMDEiLCJBU1NFVFNfUEFUSF9ISUxMIiwiQVNTRVRTX1BBVEhfRkVOQ0UiLCJBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUiLCJHQU1FUExBWV9CR19HUk9VUF9JTUdTIiwiU0NFTkVfTkFNRV9TVEFSVCIsIlNDRU5FX05BTUVfTEVWRUxfU0VMRUNUIiwiU0NFTkVfTkFNRV9HQU1FX1BMQVkiLCJTQ0VORV9OQU1FX0xFVkVMX0VORCIsIlVSTCIsImdldEZ0bURhdGEiLCJoZWFkZXJzIiwianNvbiIsIkRhdGFNb2RhbCIsInRpdGxlIiwib3RoZXJBdWRpb3MiLCJsZXZlbHMiLCJGZWVkYmFja1RleHRzIiwiRmVlZGJhY2tBdWRpb3MiLCJ2ZXJzaW9uIiwiZmVlZGJhY2tUZXh0cyIsIk90aGVyQXVkaW9zIiwiZ2V0TGV2ZWxzIiwibGV2ZWxBcnJheSIsIkxldmVscyIsInNlbGN0WW91clBsYXllciIsIndhdGNoTWVHcm93IiwiYXJlWW91U3VyZSIsImZhbnRhc3RpYyIsImdyZWF0IiwiYW1hemluZyIsImdldFB1enpsZURhdGEiLCJMZXZlbE1ldGEiLCJMZXZlbE51bWJlciIsInB1enpsZU9iamVjdHMiLCJQdXp6bGVzIiwicHV6emxlRGF0YSIsInNlZ21lbnROdW1iZXIiLCJwdXp6bGUiLCJTZWdtZW50TnVtYmVyIiwiUHJvbXB0IiwiZ2V0VGFyZ2V0U3RvbmVzIiwiZm9pbFN0b25lQXJyYXkiLCJmb2lsc3RvbmVzIiwic3RvbmVzIiwiU3RvbmVUZXh0IiwidGFyZ2V0U3RvbmVBcnJheSIsInRhcmdldHN0b25lcyIsIkZvaWxTdG9uZSIsInN0b25lVGV4dCIsIlRhcmdldFN0b25lIiwicHJvbXB0RmFkZU91dCIsImxldHRlckdyb3VwIiwiUHJvbXB0RmFkZW91dCIsIkxldHRlckdyb3VwIiwiUHJvbXB0VHlwZSIsIkxldmVsVHlwZSIsInNldEdhbWVMZXZlbFNjb3JlIiwiY3VycmVudExldmVsSW5mbyIsInNjb3JlIiwic3RhcnNHYWluZWQiLCJjYWxjdWxhdGVTdGFyQ291bnQiLCJsZXZlbFBsYXllZEluZm8iLCJsZXZlbE5hbWUiLCJzdGFyQ291bnQiLCJzZXRUb3RhbFN0YXJDb3VudCIsImFsbEdhbWVsZXZlbEluZm8iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiY3VycmVudGxhbmd1YWdlIiwiZ2V0SXRlbSIsInRvdGFsU3RhckNvdW50IiwiZ2V0VG90YWxTdGFyQ291bnQiLCJlbmdsaXNoIiwic3dhaGlsaSIsIndvbG9mIiwidGFqaWsiLCJtYXJhdGhpIiwiYW1oYXJpYyIsInB1bmphYmkiLCJ0YW1pbCIsInNlcGVkaSIsImd1amFyYXRpIiwidGVsdWd1IiwidHNvbmdhIiwibWFsYXkiLCJuZGViZWxlIiwidmVuZGEiLCJzaXN3YXRpIiwidHN3YW5hIiwidGhhaSIsImZ1bGEiLCJmYXJzaSIsImJ1cm1lc2UiLCJiZW5nYWxpIiwiQXplcmJhaWphbmkiLCJTZXNvdGhvIiwiR2VvcmdpYW4iLCJCcmF6aWxpYW5Qb3J0dWd1ZXNlIiwiU29tYWxpIiwiSGF1c2EiLCJJZ2JvIiwiSGF0aWFuQ3Jlb2xlIiwiT3JvbW8iLCJMdWdhbmRhIiwiWW9ydWJhIiwiS2htZXIiLCJKYXZhbmVzZSIsIlVyZHUiLCJLaW55YXJ3YW5kYSIsIlNob25hIiwiS3VyZGlzaCIsIkZyZW5jaCIsImlzaVhob3NhIiwiQWZyaWthYW5zIiwiTmVwYWxpIiwiVWtyYWluaWFuIiwiSGluZGkiLCJUYWdhbG9nIiwiVmlldG5hbWVzZSIsIlBhc2h0byIsIlR3aSIsIkFyYWJpYyIsImhhbmRsZXIiLCJoYW5kbGVTdG9uZURyb3BwZWRFdmVudCIsImhhbmRsZUxvYWRQdXp6bGVFdmVudCIsIlNjZW5lSGFuZGxlciIsInN0YXJ0U2NlbmUiLCJsZXZlbFNlbGVjdGlvblNjZW5lIiwiZ2FtZXBsYXlTY2VuZSIsImxldmVsRW5kU2NlbmUiLCJsb2FkaW5nU2NyZWVuIiwibG9hZGluZyIsImxhc3RUaW1lIiwicHdhX2luc3RhbGxfc3RhdHVzIiwidG9nZ2xlQnRuIiwiaGFuZGxlSW5zdGFsbFByb21wdCIsIlN0YXJ0U2NlbmUiLCJzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24iLCJTY2VuZU5hbWUiLCJMb2FkaW5nU2NlbmUiLCJyZW1vdmVMb2FkaW5nIiwic3RhcnRBbmltYXRpb25Mb29wIiwiYW5pbWF0ZSIsInRpbWVTdGFtcCIsImFuaW1hdGlvbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImRldlRvZ2dsZSIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImlubmVyVGV4dCIsImNoZWNrTW9uc3RlclBoYXNlVXBkYXRpb24iLCJtb25zdGVyUGhhc2VOdW1iZXIiLCJkcmF3TGV2ZWxTZWxlY3Rpb24iLCJzd2l0Y2hTY2VuZVRvR2FtZXBsYXkiLCJnYW1lUGxheURhdGEiLCJjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tIiwic2hvd0xvYWRpbmciLCJqc29uVmVyc2lvbk51bWJlciIsIkdhbWVwbGF5U2NlbmUiLCJjdXJyZW50TGV2ZWxEYXRhIiwic3dpdGNoU2NlbmVUb0VuZExldmVsIiwic2VsZWN0ZWRMZXZlbE51bWJlciIsImN1cnJlbnRMZXZlbE51bWJlciIsImluaXRDbG91ZCIsInN0eWxlIiwiekluZGV4IiwiTGV2ZWxFbmRTY2VuZSIsIkxldmVsU2VsZWN0aW9uU2NyZWVuIiwibGFzdFNjZW5lTmFtZSIsIm1vbnN0ZXIiLCJ0aW1lclRpY2tpbmciLCJwYXVzZUJ1dHRvbiIsImxldmVsSW5kaWNhdG9ycyIsInN0b25lc0NvdW50IiwiZmVlZEJhY2tUZXh0cyIsImlzUHV6emxlQ29tcGxldGVkIiwic3dpdGNoU2NlbmVUb0VuZCIsInN0b25lSGFuZGxlciIsInBpY2tlZFN0b25lT2JqZWN0IiwicGF1c2VQb3B1cCIsImlzUGF1c2VCdXR0b25DbGlja2VkIiwiYmFja2dyb3VuZCIsImZlZWRCYWNrVGV4dENhbmF2c0VsZW1lbnQiLCJpc0dhbWVTdGFydGVkIiwidGVtcFdvcmRmb3JXb3JkUHV6emxlIiwicHV6emxlVGltZSIsImlzRGlzcG9zaW5nIiwicmVzZXRBbmltYXRpb25JRCIsIndpbGxSZWFkRnJlcXVlbnRseSIsInN0YXJ0R2FtZVRpbWUiLCJzdGFydFB1enpsZVRpbWUiLCJsb2FkUHV6emxlIiwicmVzdW1lR2FtZSIsInByb2ZpbGVNb25zdGVyIiwicHJldmlvdXNQbGF5ZWRMZXZlbCIsImFkZEV2ZW50TGlzdGVuZXJzIiwic2V0dXBCZyIsImdldFJhbmRvbUZlZWRCYWNrVGV4dCIsInJhbmRvbUluZGV4Iiwic2VsZWN0ZWRLZXkiLCJnZXRSYW5kb21JbnQiLCJkZWZpbmVkVmFsdWVzTWF4Q291bnQiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJoYW5kbGVNb3VzZVVwIiwibGV0dGVyUHV6emxlIiwid29yZFB1enpsZSIsInhMaW1pdCIsImhhbGZXaWR0aCIsInNjIiwiaGFuZGxlTW91c2VNb3ZlIiwicGF1c2VHYW1lUGxheSIsImhhbmRsZVRvdWNoU3RhcnQiLCJ0b3VjaCIsInRvdWNoZXMiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVUb3VjaEVuZCIsImNoYW5nZWRUb3VjaGVzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJ0aW1lckVuZGVkIiwiQm9vbGVhbiIsImxvZ1B1enpsZUVuZEZpcmViYXNlRXZlbnQiLCJsb2dMZXZlbEVuZEZpcmViYXNlRXZlbnQiLCJsb2FkUHV6emxlRXZlbnQiLCJDdXN0b21FdmVudCIsImluaXROZXdQdXp6bGUiLCJoYW5kbGVDb3JyZWN0U3RvbmVEcm9wIiwiaGFuZGxlU3RvbmVEcm9wRW5kIiwiZHJvcHBlZFN0b25lSW5zdGFuY2UiLCJyZXNldFRvSWRsZUFuaW1hdGlvbiIsImRlbGF5IiwiY2xlYXJUaW1lb3V0IiwicHV6emxlVHlwZSIsImRpc3BhdGNoU3RvbmVEcm9wRXZlbnQiLCJmZWVkYmFja0luZGV4IiwiZHJvcFN0b25lRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZW5kVGltZSIsInB1enpsZUNvbXBsZXRlZERhdGEiLCJzdWNjZXNzX29yX2ZhaWx1cmUiLCJsZXZlbF9udW1iZXIiLCJwdXp6bGVfbnVtYmVyIiwiaXRlbV9zZWxlY3RlZCIsImZvaWxzIiwicmVzcG9uc2VfdGltZSIsImxldmVsQ29tcGxldGVkRGF0YSIsIm51bWJlcl9vZl9zdWNjZXNzZnVsX3B1enpsZXMiLCJsZXZlbEJ1dHRvblBvcyIsImNhbnZhc0VsZW1lbnQiLCJnYW1lTGV2ZWxEYXRhIiwiY2FsbEJhY2siLCJ4RG93biIsInlEb3duIiwicHJldmlvdXNQbGF5ZWRMZXZlbE51bWJlciIsImxldmVsU2VsZWN0aW9uUGFnZUluZGV4IiwibGV2ZWxzU2VjdGlvbkNvdW50IiwidW5sb2NrTGV2ZWxJbmRleCIsImluaXRpYWxpc2VCdXR0b25Qb3MiLCJjcmVhdGVMZXZlbEJ1dHRvbnMiLCJtYXBJY29uIiwibWFwSWNvblNwZWNpYWwiLCJtYXBMb2NrIiwic3RhciIsIm5leHRidG4iLCJiYWNrYnRuIiwiYWRkTGlzdGVuZXJzIiwibGV2ZWxCdXR0b25wb3MiLCJwb3NzIiwicyIsIm5zIiwicGF1c2VQbGF5QXVkaW9zIiwiZ2V0VG91Y2hlcyIsImV2dCIsIm9yaWdpbmFsRXZlbnQiLCJmaXJzdFRvdWNoIiwieFVwIiwieVVwIiwieERpZmYiLCJ5RGlmZiIsImRvd25CdXR0b24iLCJzdGFydEdhbWUiLCJkcmF3TGV2ZWwiLCJzcGVjaWFsTGV2ZWxzIiwiaXNTcGVjaWFsTGV2ZWwiLCJsZXZlbCIsImRyYXdTdGFycyIsImRyYXdTdGFyIiwibG9nU2VsZWN0ZWRMZXZlbEV2ZW50Iiwic2VsZWN0ZWRMZXZlbHREYXRhIiwibGV2ZWxfc2VsZWN0ZWQiLCJuZXh0QnV0dG9uIiwiY3VycmVudExldmVsIiwic3dpdGNoVG9HYW1lcGxheUNCIiwic3dpdGNoVG9MZXZlbFNlbGVjdGlvbkNCIiwidGltZW91dHMiLCJzdGFyRHJhd25Db3VudCIsInN3aXRjaFRvUmVhY3Rpb25BbmltYXRpb24iLCJzdGFyMUltZyIsInN0YXIySW1nIiwic3RhcjNJbWciLCJ3aW5CYWNrZ3JvdW5kSW1nIiwic3RhckFuaW1hdGlvbiIsImNvdW50IiwicGF1c2VBdWRpb3MiLCJ0aW1lb3V0IiwiY2xvdWRYUG9zaXRpb24iLCJzdG9wQ2xvdWRNb3ZpbmciLCJjbG91ZE1vdmluZ1RpbWVPdXQiLCJjbG91ZDYiLCJjbG91ZDciLCJjbG91ZDgiLCJwd2Ffc3RhdHVzIiwiZmlyZWJhc2VfYW5hbHl0aWNzIiwiYnV0dG9uQ29udGV4dCIsInBsYXlCdXR0b24iLCJ0aXRsZUZvbnQiLCJjcmVhdGVQbGF5QnV0dG9uIiwiaGFuZGxlckluc3RhbGxQcm9tcHQiLCJnZXRGb250V2lkdGhPZlRpdGxlIiwiZmJxIiwiZGlzcGxheSIsImxvYWRJbWdQcm9taXNlcyIsImFycktleSIsIm5ld0ltYWdlIiwiY3JlYXRlSW1nIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50IiwiQU5BTFlUSUNTX1RZUEUiLCJHQV9GSURfS0VZIiwiT1JJR0lOX0tFWSIsIkZFVENIX1RJTUVPVVRfTUlMTElTIiwiRFlOQU1JQ19DT05GSUdfVVJMIiwiR1RBR19VUkwiLCJsb2dnZXIiLCJMb2dnZXIiLCJFUlJPUlMiLCJFUlJPUl9GQUNUT1JZIiwiY3JlYXRlR3RhZ1RydXN0ZWRUeXBlc1NjcmlwdFVSTCIsInN0YXJ0c1dpdGgiLCJndGFnVVJMIiwid2FybiIsInByb21pc2VBbGxTZXR0bGVkIiwicHJvbWlzZXMiLCJpbnNlcnRTY3JpcHRUYWciLCJkYXRhTGF5ZXJOYW1lIiwidHJ1c3RlZFR5cGVzUG9saWN5IiwicG9saWN5TmFtZSIsInBvbGljeU9wdGlvbnMiLCJ0cnVzdGVkVHlwZXMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3kiLCJjcmVhdGVTY3JpcHRVUkwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiZ3RhZ1NjcmlwdFVSTCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIndyYXBHdGFnIiwiZ3RhZ0NvcmUiLCJpbml0aWFsaXphdGlvblByb21pc2VzTWFwIiwiZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCIsIm1lYXN1cmVtZW50SWRUb0FwcElkIiwiY29tbWFuZCIsImd0YWdQYXJhbXMiLCJpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yIiwiZ2FTZW5kVG9MaXN0IiwiZHluYW1pY0NvbmZpZ1Jlc3VsdHMiLCJzZW5kVG9JZCIsImZvdW5kQ29uZmlnIiwiZmluZCIsImluaXRpYWxpemF0aW9uUHJvbWlzZSIsImd0YWdPbkV2ZW50IiwiY29ycmVzcG9uZGluZ0FwcElkIiwiZ3RhZ09uQ29uZmlnIiwiZmllbGROYW1lIiwiY3VzdG9tUGFyYW1zIiwiTE9OR19SRVRSWV9GQUNUT1IiLCJkZWZhdWx0UmV0cnlEYXRhIiwidGhyb3R0bGVNZXRhZGF0YSIsImdldFRocm90dGxlTWV0YWRhdGEiLCJzZXRUaHJvdHRsZU1ldGFkYXRhIiwibWV0YWRhdGEiLCJkZWxldGVUaHJvdHRsZU1ldGFkYXRhIiwiZ2V0SGVhZGVycyIsIkhlYWRlcnMiLCJBY2NlcHQiLCJmZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkiLCJhcHAiLCJyZXRyeURhdGEiLCJ0aW1lb3V0TWlsbGlzIiwib3B0aW9ucyIsInRocm90dGxlRW5kVGltZU1pbGxpcyIsInNpZ25hbCIsIkFuYWx5dGljc0Fib3J0U2lnbmFsIiwiYWJvcnQiLCJhdHRlbXB0RmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5IiwiYXBwRmllbGRzIiwiYmFja29mZk1pbGxpcyIsInNldEFib3J0YWJsZVRpbWVvdXQiLCJhcHBVcmwiLCJzdGF0dXMiLCJlcnJvck1lc3NhZ2UiLCJqc29uUmVzcG9uc2UiLCJfaWdub3JlZCIsImh0dHBTdGF0dXMiLCJyZXNwb25zZU1lc3NhZ2UiLCJmZXRjaER5bmFtaWNDb25maWciLCJpc1JldHJpYWJsZUVycm9yIiwiZGVidWciLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0IiwiZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQiLCJfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0IiwiY29uc2VudFNldHRpbmdzIiwiX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0IiwiX2luaXRpYWxpemVBbmFseXRpY3MiLCJpbnN0YWxsYXRpb25zIiwiZHluYW1pY0NvbmZpZ1Byb21pc2UiLCJmaWRQcm9taXNlIiwiZXJyb3JJbmZvIiwidmFsaWRhdGVJbmRleGVkREIiLCJlbnZJc1ZhbGlkIiwiZ2V0SWQiLCJkeW5hbWljQ29uZmlnIiwiZmlkIiwic2NyaXB0VGFncyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnIiwiZmluZEd0YWdTY3JpcHRPblBhZ2UiLCJjb25maWdQcm9wZXJ0aWVzIiwiQW5hbHl0aWNzU2VydmljZSIsIl9kZWxldGUiLCJndGFnQ29yZUZ1bmN0aW9uIiwid3JhcHBlZEd0YWdGdW5jdGlvbiIsImd0YWdOYW1lIiwiZ2xvYmFsSW5pdERvbmUiLCJzZXR0aW5ncyIsImZhY3RvcnkiLCJtaXNtYXRjaGVkRW52TWVzc2FnZXMiLCJkZXRhaWxzIiwid2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCIsImRhdGFMYXllciIsImdldE9yQ3JlYXRlRGF0YUxheWVyIiwid3JhcHBlZEd0YWciLCJndGFnRnVuY3Rpb25OYW1lIiwiX2FyZ3MiLCJ3cmFwT3JDcmVhdGVHdGFnIiwiZ2V0QXBwIiwiYW5hbHl0aWNzUHJvdmlkZXIiLCJfZ2V0UHJvdmlkZXIiLCJpc0luaXRpYWxpemVkIiwiZ2V0SW1tZWRpYXRlIiwiaW5pdGlhbGl6ZUFuYWx5dGljcyIsImV4aXN0aW5nSW5zdGFuY2UiLCJnZXRPcHRpb25zIiwiaW5pdGlhbGl6ZSIsImlzU3VwcG9ydGVkIiwic2V0Q3VycmVudFNjcmVlbiIsImFuYWx5dGljc0luc3RhbmNlIiwic2NyZWVuTmFtZSIsImd0YWdGdW5jdGlvbiIsImdsb2JhbCIsInNldEN1cnJlbnRTY3JlZW4kMSIsImdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkIiwiY2xpZW50SWQiLCJpbnRlcm5hbEdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkIiwic2V0VXNlcklkIiwic2V0VXNlcklkJDEiLCJzZXRVc2VyUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJmbGF0UHJvcGVydGllcyIsInNldFVzZXJQcm9wZXJ0aWVzJDEiLCJzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZCIsImVuYWJsZWQiLCJzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZCQxIiwic2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVycyIsImV2ZW50UGFyYW1zIiwibG9nRXZlbnQkMSIsInNldENvbnNlbnQiLCJfcmVnaXN0ZXJDb21wb25lbnQiLCJDb21wb25lbnQiLCJjb250YWluZXIiLCJhbmFseXRpY3NPcHRpb25zIiwiZ2V0UHJvdmlkZXIiLCJyZWFzb24iLCJyZWdpc3RlclZlcnNpb24iLCJQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsIiwiZ2V0UGxhdGZvcm1JbmZvU3RyaW5nIiwiZ2V0UHJvdmlkZXJzIiwicHJvdmlkZXIiLCJjb21wb25lbnQiLCJnZXRDb21wb25lbnQiLCJpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIiLCJsaWJyYXJ5IiwibG9nU3RyaW5nIiwibmFtZSRvIiwidmVyc2lvbiQxIiwibmFtZSRuIiwibmFtZSRtIiwibmFtZSRsIiwibmFtZSRrIiwibmFtZSRqIiwibmFtZSRpIiwibmFtZSRoIiwibmFtZSRnIiwibmFtZSRmIiwibmFtZSRlIiwibmFtZSRkIiwibmFtZSRjIiwibmFtZSRiIiwibmFtZSRhIiwibmFtZSQ5IiwibmFtZSQ4IiwibmFtZSQ3IiwibmFtZSQ2IiwibmFtZSQ1IiwibmFtZSQ0IiwibmFtZSQzIiwibmFtZSQyIiwibmFtZSQxIiwiREVGQVVMVF9FTlRSWV9OQU1FIiwiUExBVEZPUk1fTE9HX1NUUklORyIsIl9hcHBzIiwiX2NvbXBvbmVudHMiLCJfYWRkQ29tcG9uZW50IiwiYWRkQ29tcG9uZW50IiwiX2FkZE9yT3ZlcndyaXRlQ29tcG9uZW50IiwiYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJjb21wb25lbnROYW1lIiwiaGVhcnRiZWF0Q29udHJvbGxlciIsInRyaWdnZXJIZWFydGJlYXQiLCJfcmVtb3ZlU2VydmljZUluc3RhbmNlIiwiaW5zdGFuY2VJZGVudGlmaWVyIiwiY2xlYXJJbnN0YW5jZSIsIl9jbGVhckNvbXBvbmVudHMiLCJjbGVhciIsIkZpcmViYXNlQXBwSW1wbCIsIl9pc0RlbGV0ZWQiLCJfb3B0aW9ucyIsIl9jb25maWciLCJfbmFtZSIsIl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQiLCJhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQiLCJfY29udGFpbmVyIiwiY2hlY2tEZXN0cm95ZWQiLCJ2YWwiLCJpc0RlbGV0ZWQiLCJhcHBOYW1lIiwicmF3Q29uZmlnIiwiZXhpc3RpbmdBcHAiLCJDb21wb25lbnRDb250YWluZXIiLCJuZXdBcHAiLCJnZXRBcHBzIiwiZnJvbSIsImRlbGV0ZUFwcCIsImRlbGV0ZSIsImxpYnJhcnlLZXlPck5hbWUiLCJ2YXJpYW50IiwibGlicmFyeU1pc21hdGNoIiwidmVyc2lvbk1pc21hdGNoIiwid2FybmluZyIsIm9uTG9nIiwibG9nQ2FsbGJhY2siLCJzZXRVc2VyTG9nSGFuZGxlciIsInNldExvZ0xldmVsIiwibG9nTGV2ZWwiLCJEQl9OQU1FIiwiREJfVkVSU0lPTiIsIlNUT1JFX05BTUUiLCJkYlByb21pc2UiLCJnZXREYlByb21pc2UiLCJvcGVuREIiLCJ1cGdyYWRlIiwiZGIiLCJvbGRWZXJzaW9uIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJvcmlnaW5hbEVycm9yTWVzc2FnZSIsIndyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCIiwiaGVhcnRiZWF0T2JqZWN0IiwidHgiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwicHV0IiwiY29tcHV0ZUtleSIsImRvbmUiLCJpZGJHZXRFcnJvciIsIkhlYXJ0YmVhdFNlcnZpY2VJbXBsIiwiX2hlYXJ0YmVhdHNDYWNoZSIsIl9zdG9yYWdlIiwiSGVhcnRiZWF0U3RvcmFnZUltcGwiLCJfaGVhcnRiZWF0c0NhY2hlUHJvbWlzZSIsInJlYWQiLCJhZ2VudCIsImRhdGUiLCJnZXRVVENEYXRlU3RyaW5nIiwibGFzdFNlbnRIZWFydGJlYXREYXRlIiwiaGVhcnRiZWF0cyIsInNvbWUiLCJzaW5nbGVEYXRlSGVhcnRiZWF0IiwiaGJUaW1lc3RhbXAiLCJ2YWx1ZU9mIiwib3ZlcndyaXRlIiwiZ2V0SGVhcnRiZWF0c0hlYWRlciIsImhlYXJ0YmVhdHNUb1NlbmQiLCJ1bnNlbnRFbnRyaWVzIiwiaGVhcnRiZWF0c0NhY2hlIiwibWF4U2l6ZSIsImhlYXJ0YmVhdEVudHJ5IiwiaGIiLCJkYXRlcyIsImNvdW50Qnl0ZXMiLCJwb3AiLCJleHRyYWN0SGVhcnRiZWF0c0ZvckhlYWRlciIsImhlYWRlclN0cmluZyIsInRvSVNPU3RyaW5nIiwiX2NhblVzZUluZGV4ZWREQlByb21pc2UiLCJydW5JbmRleGVkREJFbnZpcm9ubWVudENoZWNrIiwicmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCIiwiaGVhcnRiZWF0c09iamVjdCIsImV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCIsImFkZCIsImluc3RhbmNlRmFjdG9yeSIsIm11bHRpcGxlSW5zdGFuY2VzIiwic2VydmljZVByb3BzIiwiaW5zdGFudGlhdGlvbk1vZGUiLCJvbkluc3RhbmNlQ3JlYXRlZCIsInNldEluc3RhbnRpYXRpb25Nb2RlIiwibW9kZSIsInNldE11bHRpcGxlSW5zdGFuY2VzIiwic2V0U2VydmljZVByb3BzIiwicHJvcHMiLCJzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayIsIlByb3ZpZGVyIiwiaW5zdGFuY2VzIiwiaW5zdGFuY2VzRGVmZXJyZWQiLCJpbnN0YW5jZXNPcHRpb25zIiwib25Jbml0Q2FsbGJhY2tzIiwiaWRlbnRpZmllciIsIm5vcm1hbGl6ZWRJZGVudGlmaWVyIiwibm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyIiwiZGVmZXJyZWQiLCJzaG91bGRBdXRvSW5pdGlhbGl6ZSIsImdldE9ySW5pdGlhbGl6ZVNlcnZpY2UiLCJzZXRDb21wb25lbnQiLCJpc0NvbXBvbmVudEVhZ2VyIiwiaW5zdGFuY2VEZWZlcnJlZCIsInNlcnZpY2VzIiwiSU5URVJOQUwiLCJpc0NvbXBvbmVudFNldCIsIm9wdHMiLCJvbkluaXQiLCJleGlzdGluZ0NhbGxiYWNrcyIsIlNldCIsImludm9rZU9uSW5pdENhbGxiYWNrcyIsImNhbGxiYWNrcyIsInByb3ZpZGVycyIsIlBFTkRJTkdfVElNRU9VVF9NUyIsIlBBQ0tBR0VfVkVSU0lPTiIsIklOVEVSTkFMX0FVVEhfVkVSU0lPTiIsIklOU1RBTExBVElPTlNfQVBJX1VSTCIsIlRPS0VOX0VYUElSQVRJT05fQlVGRkVSIiwiRVJST1JfREVTQ1JJUFRJT05fTUFQIiwiaXNTZXJ2ZXJFcnJvciIsImdldEluc3RhbGxhdGlvbnNFbmRwb2ludCIsImV4dHJhY3RBdXRoVG9rZW5JbmZvRnJvbVJlc3BvbnNlIiwicmVxdWVzdFN0YXR1cyIsImV4cGlyZXNJbiIsInJlc3BvbnNlRXhwaXJlc0luIiwiY3JlYXRpb25UaW1lIiwiZ2V0RXJyb3JGcm9tUmVzcG9uc2UiLCJyZXF1ZXN0TmFtZSIsImVycm9yRGF0YSIsInNlcnZlckNvZGUiLCJzZXJ2ZXJNZXNzYWdlIiwic2VydmVyU3RhdHVzIiwiZ2V0SGVhZGVyc1dpdGhBdXRoIiwiYXBwQ29uZmlnIiwicmVmcmVzaFRva2VuIiwiYXBwZW5kIiwiZ2V0QXV0aG9yaXphdGlvbkhlYWRlciIsInJldHJ5SWZTZXJ2ZXJFcnJvciIsInNsZWVwIiwibXMiLCJWQUxJRF9GSURfUEFUVEVSTiIsIklOVkFMSURfRklEIiwiZ2VuZXJhdGVGaWQiLCJmaWRCeXRlQXJyYXkiLCJVaW50OEFycmF5IiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJiNjRTdHJpbmciLCJhcnJheSIsInN1YnN0ciIsImVuY29kZSIsImdldEtleSIsImZpZENoYW5nZUNhbGxiYWNrcyIsImZpZENoYW5nZWQiLCJjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzIiwiY2hhbm5lbCIsImdldEJyb2FkY2FzdENoYW5uZWwiLCJjbG9zZUJyb2FkY2FzdENoYW5uZWwiLCJicm9hZGNhc3RGaWRDaGFuZ2UiLCJicm9hZGNhc3RDaGFubmVsIiwiQnJvYWRjYXN0Q2hhbm5lbCIsIm9ubWVzc2FnZSIsIkRBVEFCQVNFX05BTUUiLCJEQVRBQkFTRV9WRVJTSU9OIiwiT0JKRUNUX1NUT1JFX05BTUUiLCJvbGRWYWx1ZSIsInJlbW92ZSIsInVwZGF0ZUZuIiwic3RvcmUiLCJuZXdWYWx1ZSIsImdldEluc3RhbGxhdGlvbkVudHJ5IiwicmVnaXN0cmF0aW9uUHJvbWlzZSIsImluc3RhbGxhdGlvbkVudHJ5Iiwib2xkRW50cnkiLCJlbnRyeSIsInJlZ2lzdHJhdGlvblN0YXR1cyIsImNsZWFyVGltZWRPdXRSZXF1ZXN0IiwidXBkYXRlT3JDcmVhdGVJbnN0YWxsYXRpb25FbnRyeSIsImVudHJ5V2l0aFByb21pc2UiLCJpblByb2dyZXNzRW50cnkiLCJyZWdpc3RyYXRpb25UaW1lIiwicmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5IiwiaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyIiwiZW5kcG9pbnQiLCJoZWFydGJlYXRTZXJ2aWNlIiwiaGVhcnRiZWF0c0hlYWRlciIsImJvZHkiLCJhdXRoVmVyc2lvbiIsInNka1ZlcnNpb24iLCJvayIsInJlc3BvbnNlVmFsdWUiLCJhdXRoVG9rZW4iLCJjcmVhdGVJbnN0YWxsYXRpb25SZXF1ZXN0IiwicmVnaXN0ZXJJbnN0YWxsYXRpb24iLCJ3YWl0VW50aWxGaWRSZWdpc3RyYXRpb24iLCJ0cmlnZ2VyUmVnaXN0cmF0aW9uSWZOZWNlc3NhcnkiLCJ1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0IiwiZ2VuZXJhdGVBdXRoVG9rZW5SZXF1ZXN0IiwiZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludCIsImluc3RhbGxhdGlvbiIsInJlZnJlc2hBdXRoVG9rZW4iLCJmb3JjZVJlZnJlc2giLCJ0b2tlblByb21pc2UiLCJpc0VudHJ5UmVnaXN0ZXJlZCIsIm9sZEF1dGhUb2tlbiIsImlzQXV0aFRva2VuRXhwaXJlZCIsImlzQXV0aFRva2VuVmFsaWQiLCJ1cGRhdGVBdXRoVG9rZW5SZXF1ZXN0Iiwid2FpdFVudGlsQXV0aFRva2VuUmVxdWVzdCIsImluUHJvZ3Jlc3NBdXRoVG9rZW4iLCJyZXF1ZXN0VGltZSIsIm1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5IiwidXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5IiwiZmV0Y2hBdXRoVG9rZW5Gcm9tU2VydmVyIiwiaW5zdGFsbGF0aW9uc0ltcGwiLCJnZXRUb2tlbiIsImNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uIiwiZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdCIsImdldERlbGV0ZUVuZHBvaW50IiwiZGVsZXRlSW5zdGFsbGF0aW9ucyIsIm9uSWRDaGFuZ2UiLCJjYWxsYmFja1NldCIsImFkZENhbGxiYWNrIiwicmVtb3ZlQ2FsbGJhY2siLCJnZXRJbnN0YWxsYXRpb25zIiwiZ2V0TWlzc2luZ1ZhbHVlRXJyb3IiLCJ2YWx1ZU5hbWUiLCJJTlNUQUxMQVRJT05TX05BTUUiLCJwdWJsaWNGYWN0b3J5IiwiY29uZmlnS2V5cyIsImtleU5hbWUiLCJleHRyYWN0QXBwQ29uZmlnIiwiaW50ZXJuYWxGYWN0b3J5IiwiYmxvY2tlZCIsImJsb2NraW5nIiwidGVybWluYXRlZCIsIm9wZW5Qcm9taXNlIiwidyIsIm5ld1ZlcnNpb24iLCJkZWxldGVEQiIsInJlYWRNZXRob2RzIiwid3JpdGVNZXRob2RzIiwiY2FjaGVkTWV0aG9kcyIsImdldE1ldGhvZCIsIklEQkRhdGFiYXNlIiwidGFyZ2V0RnVuY05hbWUiLCJ1c2VJbmRleCIsImlzV3JpdGUiLCJJREJJbmRleCIsIklEQk9iamVjdFN0b3JlIiwic3RvcmVOYW1lIiwic2hpZnQiLCJvbGRUcmFwcyIsInJlY2VpdmVyIiwiaW5zdGFuY2VPZkFueSIsIm9iamVjdCIsImNvbnN0cnVjdG9ycyIsImlkYlByb3h5YWJsZVR5cGVzIiwiY3Vyc29yQWR2YW5jZU1ldGhvZHMiLCJjdXJzb3JSZXF1ZXN0TWFwIiwiV2Vha01hcCIsInRyYW5zYWN0aW9uRG9uZU1hcCIsInRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCIsInRyYW5zZm9ybUNhY2hlIiwicmV2ZXJzZVRyYW5zZm9ybUNhY2hlIiwiaWRiUHJveHlUcmFwcyIsIklEQlRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmVOYW1lcyIsIndyYXAiLCJyZXBsYWNlVHJhcHMiLCJ3cmFwRnVuY3Rpb24iLCJmdW5jIiwiSURCQ3Vyc29yIiwiYWR2YW5jZSIsImNvbnRpbnVlIiwiY29udGludWVQcmltYXJ5S2V5IiwiYXBwbHkiLCJ1bndyYXAiLCJzdG9yZU5hbWVzIiwidHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSIsInVubGlzdGVuIiwiRE9NRXhjZXB0aW9uIiwiY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uIiwiUHJveHkiLCJJREJSZXF1ZXN0Iiwic3VjY2VzcyIsInByb21pc2lmeVJlcXVlc3QiLCJMb2dMZXZlbCIsImxldmVsU3RyaW5nVG9FbnVtIiwiREVCVUciLCJWRVJCT1NFIiwiSU5GTyIsIldBUk4iLCJFUlJPUiIsIlNJTEVOVCIsImRlZmF1bHRMb2dMZXZlbCIsIkNvbnNvbGVNZXRob2QiLCJkZWZhdWx0TG9nSGFuZGxlciIsImxvZ1R5cGUiLCJfbG9nTGV2ZWwiLCJfbG9nSGFuZGxlciIsIl91c2VyTG9nSGFuZGxlciIsIlR5cGVFcnJvciIsImxvZ0hhbmRsZXIiLCJ1c2VyTG9nSGFuZGxlciIsImluc3QiLCJjdXN0b21Mb2dMZXZlbCIsImFyZyIsImlnbm9yZWQiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwicG9ydDIiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0eSIsIlJlZmVyZW5jZUVycm9yIiwibyIsImgiLCJ2IiwibCIsIm0iLCJfX3Byb3RvX18iLCJyZWdpc3RlciIsImltbWVkaWF0ZSIsInNlcnZpY2VXb3JrZXIiLCJjb250cm9sbGVyIiwiUCIsIlIiLCJCIiwiTyIsIm9uY2UiLCJ3YWl0aW5nIiwic2NyaXB0VVJMIiwic3ciLCJ3YXNXYWl0aW5nQmVmb3JlUmVnaXN0ZXIiLCJDIiwicmVhZHlTdGF0ZSIsImdldFNXIiwibWVzc2FnZVNXIiwiTCIsInBlcmZvcm1hbmNlIiwibWV0YSIsImluc3RhbGxpbmciLCJzdGF0ZSIsImlzVXBkYXRlIiwiRCIsIlQiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZlcnNpb25JbmZvRWxlbWVudCIsImlzX2NhY2hlZCIsInByb2dyZXNzQmFyIiwicHJvZ3Jlc3NCYXJDb250YWluZXIiLCJzY2VuZUhhbmRsZXIiLCJsb2FkaW5nRWxlbWVudCIsInN0YXJ0U2Vzc2lvblRpbWUiLCJpbml0aWFsaXplQ2FjaGVkRGF0YSIsImhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlIiwiaGFuZGxlQmVmb3JlVW5sb2FkIiwiaGFuZGxlUmVzaXplIiwibG9hZEFuZENhY2hlRm9udCIsInByZWxvYWRHYW1lQXVkaW9zIiwiaGFuZGxlTG9hZGluZ1NjcmVlbiIsInJlZ2lzdGVyV29ya2JveCIsInNldHVwQ2FudmFzIiwiZGF0YU1vZGFsIiwiY3JlYXRlRGF0YU1vZGFsIiwiZ2xvYmFsSW5pdGlhbGl6YXRpb24iLCJsb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50IiwiaGFuZGxlQ2FjaGVkU2NlbmFyaW8iLCJsYXN0U2Vzc2lvbkVuZFRpbWUiLCJwYXJzZWRUaW1lc3RhbXAiLCJpc05hTiIsInJvdW5kZWREYXlzU2luY2VMYXN0IiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJzZXNzaW9uU3RhcnREYXRhIiwiZGF5c19zaW5jZV9sYXN0IiwibG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQiLCJzZXNzaW9uRW5kRGF0YSIsInN0b3JlZERhdGEiLCJmb250TmFtZSIsImZvbnRQYXRoIiwiY2FjaGUiLCJjYWNoZXMiLCJmb250UmVzcG9uc2UiLCJmb250QmxvYiIsImJsb2IiLCJSZXNwb25zZSIsIkZvbnRGYWNlIiwibG9hZCIsImZvbnRzIiwid2IiLCJXb3JrYm94IiwicmVhZHkiLCJpbm5lckhlaWdodCIsInNjcmVlbiIsImlubmVyV2lkdGgiLCJSaWdodFRvTGVmdCIsImFib3V0Q29tcGFueSIsImRlc2NyaXB0aW9uVGV4dCIsInVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudCIsInJlaW5pdGlhbGl6ZVNjZW5lSGFuZGxlciIsInBhc3NpbmdEYXRhVG9Db250YWluZXIiLCJBbmRyb2lkIiwiY2FjaGVkU3RhdHVzIiwic2V0Q29udGFpbmVyQXBwT3JpZW50YXRpb24iLCJoYW5kbGVVcGRhdGVGb3VuZE1lc3NhZ2UiLCJjb25maXJtIiwicmVsb2FkIiwiaGFuZGxlTG9hZGluZ01lc3NhZ2UiLCJkb3dubG9hZF9jb21wbGV0ZWQiLCJtc2ciLCJhdWRpb1VybHMiLCJwcmVsb2FkUHJvbWlzZXMiXSwic291cmNlUm9vdCI6IiJ9