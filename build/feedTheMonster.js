/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/@firebase/util/dist/index.esm2017.js":(e,t,i)=>{i.r(t),i.d(t,{CONSTANTS:()=>s,DecodeBase64StringError:()=>r,Deferred:()=>v,ErrorFactory:()=>z,FirebaseError:()=>M,MAX_VALUE_MILLIS:()=>ge,RANDOM_FACTOR:()=>pe,Sha1:()=>ie,areCookiesEnabled:()=>B,assert:()=>a,assertionError:()=>n,async:()=>ne,base64:()=>o,base64Decode:()=>d,base64Encode:()=>_,base64urlEncodeWithoutPadding:()=>c,calculateBackoffMillis:()=>me,contains:()=>Y,createMockUserToken:()=>w,createSubscribe:()=>se,decode:()=>U,deepCopy:()=>h,deepEqual:()=>q,deepExtend:()=>l,errorPrefix:()=>re,extractQuerystring:()=>te,getDefaultAppConfig:()=>p,getDefaultEmulatorHost:()=>b,getDefaultEmulatorHostnameAndPort:()=>g,getDefaults:()=>u,getExperimentalSetting:()=>m,getGlobal:()=>f,getModularInstance:()=>we,getUA:()=>y,isAdmin:()=>V,isBrowser:()=>E,isBrowserExtension:()=>T,isElectron:()=>P,isEmpty:()=>$,isIE:()=>A,isIndexedDBAvailable:()=>N,isMobileCordova:()=>S,isNode:()=>I,isNodeSdk:()=>k,isReactNative:()=>C,isSafari:()=>D,isUWP:()=>L,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>R,map:()=>K,ordinal:()=>ve,promiseWithTimeout:()=>J,querystring:()=>Q,querystringDecode:()=>ee,safeGet:()=>X,stringLength:()=>le,stringToByteArray:()=>he,stringify:()=>F,uuidv4:()=>fe,validateArgCount:()=>oe,validateCallback:()=>ce,validateContextObject:()=>de,validateIndexedDBOpenable:()=>O,validateNamespace:()=>_e});const s={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},a=function(e,t){if(!e)throw n(t)},n=function(e){return new Error("Firebase Database ("+s.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},x=function(e){const t=[];let i=0;for(let s=0;s<e.length;s++){let a=e.charCodeAt(s);a<128?t[i++]=a:a<2048?(t[i++]=a>>6|192,t[i++]=63&a|128):55296==(64512&a)&&s+1<e.length&&56320==(64512&e.charCodeAt(s+1))?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++s)),t[i++]=a>>18|240,t[i++]=a>>12&63|128,t[i++]=a>>6&63|128,t[i++]=63&a|128):(t[i++]=a>>12|224,t[i++]=a>>6&63|128,t[i++]=63&a|128)}return t},o={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const i=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let t=0;t<e.length;t+=3){const a=e[t],n=t+1<e.length,x=n?e[t+1]:0,o=t+2<e.length,r=o?e[t+2]:0,_=a>>2,c=(3&a)<<4|x>>4;let d=(15&x)<<2|r>>6,h=63&r;o||(h=64,n||(d=64)),s.push(i[_],i[c],i[d],i[h])}return s.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(x(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let i=0,s=0;for(;i<e.length;){const a=e[i++];if(a<128)t[s++]=String.fromCharCode(a);else if(a>191&&a<224){const n=e[i++];t[s++]=String.fromCharCode((31&a)<<6|63&n)}else if(a>239&&a<365){const n=((7&a)<<18|(63&e[i++])<<12|(63&e[i++])<<6|63&e[i++])-65536;t[s++]=String.fromCharCode(55296+(n>>10)),t[s++]=String.fromCharCode(56320+(1023&n))}else{const n=e[i++],x=e[i++];t[s++]=String.fromCharCode((15&a)<<12|(63&n)<<6|63&x)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const i=t?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let t=0;t<e.length;){const a=i[e.charAt(t++)],n=t<e.length?i[e.charAt(t)]:0;++t;const x=t<e.length?i[e.charAt(t)]:64;++t;const o=t<e.length?i[e.charAt(t)]:64;if(++t,null==a||null==n||null==x||null==o)throw new r;const _=a<<2|n>>4;if(s.push(_),64!==x){const e=n<<4&240|x>>2;if(s.push(e),64!==o){const e=x<<6&192|o;s.push(e)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class r extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const _=function(e){const t=x(e);return o.encodeByteArray(t,!0)},c=function(e){return _(e).replace(/\./g,"")},d=function(e){try{return o.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function h(e){return l(void 0,e)}function l(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const i in t)t.hasOwnProperty(i)&&"__proto__"!==i&&(e[i]=l(e[i],t[i]));return e}function f(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw new Error("Unable to locate global object.")}const u=()=>{try{return f().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&d(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},b=e=>{var t,i;return null===(i=null===(t=u())||void 0===t?void 0:t.emulatorHosts)||void 0===i?void 0:i[e]},g=e=>{const t=b(e);if(!t)return;const i=t.lastIndexOf(":");if(i<=0||i+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const s=parseInt(t.substring(i+1),10);return"["===t[0]?[t.substring(1,i-1),s]:[t.substring(0,i),s]},p=()=>{var e;return null===(e=u())||void 0===e?void 0:e.config},m=e=>{var t;return null===(t=u())||void 0===t?void 0:t[`_${e}`]};class v{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,i)=>{t?this.reject(t):this.resolve(i),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,i))}}}function w(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const i=t||"demo-project",s=e.iat||0,a=e.sub||e.user_id;if(!a)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const n=Object.assign({iss:`https://securetoken.google.com/${i}`,aud:i,iat:s,exp:s+3600,auth_time:s,sub:a,user_id:a,firebase:{sign_in_provider:"custom",identities:{}}},e);return[c(JSON.stringify({alg:"none",type:"JWT"})),c(JSON.stringify(n)),""].join(".")}function y(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function S(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(y())}function I(){var e;const t=null===(e=u())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(i.g.process)}catch(e){return!1}}function E(){return"object"==typeof self&&self.self===self}function T(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function P(){return y().indexOf("Electron/")>=0}function A(){const e=y();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function L(){return y().indexOf("MSAppHost/")>=0}function k(){return!0===s.NODE_CLIENT||!0===s.NODE_ADMIN}function D(){return!I()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function N(){try{return"object"==typeof indexedDB}catch(e){return!1}}function O(){return new Promise(((e,t)=>{try{let i=!0;const s="validate-browser-context-for-indexeddb-analytics-module",a=self.indexedDB.open(s);a.onsuccess=()=>{a.result.close(),i||self.indexedDB.deleteDatabase(s),e(!0)},a.onupgradeneeded=()=>{i=!1},a.onerror=()=>{var e;t((null===(e=a.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}function B(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class M extends Error{constructor(e,t,i){super(t),this.code=e,this.customData=i,this.name="FirebaseError",Object.setPrototypeOf(this,M.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(e,t,i){this.service=e,this.serviceName=t,this.errors=i}create(e,...t){const i=t[0]||{},s=`${this.service}/${e}`,a=this.errors[e],n=a?function(e,t){return e.replace(j,((e,i)=>{const s=t[i];return null!=s?String(s):`<${i}?>`}))}(a,i):"Error",x=`${this.serviceName}: ${n} (${s}).`;return new M(s,x,i)}}const j=/\{\$([^}]+)}/g;function R(e){return JSON.parse(e)}function F(e){return JSON.stringify(e)}const U=function(e){let t={},i={},s={},a="";try{const n=e.split(".");t=R(d(n[0])||""),i=R(d(n[1])||""),a=n[2],s=i.d||{},delete i.d}catch(e){}return{header:t,claims:i,data:s,signature:a}},H=function(e){const t=U(e).claims,i=Math.floor((new Date).getTime()/1e3);let s=0,a=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?s=t.nbf:t.hasOwnProperty("iat")&&(s=t.iat),a=t.hasOwnProperty("exp")?t.exp:s+86400),!!i&&!!s&&!!a&&i>=s&&i<=a},G=function(e){const t=U(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},W=function(e){const t=U(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},V=function(e){const t=U(e).claims;return"object"==typeof t&&!0===t.admin};function Y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function X(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function $(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function K(e,t,i){const s={};for(const a in e)Object.prototype.hasOwnProperty.call(e,a)&&(s[a]=t.call(i,e[a],a,e));return s}function q(e,t){if(e===t)return!0;const i=Object.keys(e),s=Object.keys(t);for(const a of i){if(!s.includes(a))return!1;const i=e[a],n=t[a];if(Z(i)&&Z(n)){if(!q(i,n))return!1}else if(i!==n)return!1}for(const e of s)if(!i.includes(e))return!1;return!0}function Z(e){return null!==e&&"object"==typeof e}function J(e,t=2e3){const i=new v;return setTimeout((()=>i.reject("timeout!")),t),e.then(i.resolve,i.reject),i.promise}function Q(e){const t=[];for(const[i,s]of Object.entries(e))Array.isArray(s)?s.forEach((e=>{t.push(encodeURIComponent(i)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(i)+"="+encodeURIComponent(s));return t.length?"&"+t.join("&"):""}function ee(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[i,s]=e.split("=");t[decodeURIComponent(i)]=decodeURIComponent(s)}})),t}function te(e){const t=e.indexOf("?");if(!t)return"";const i=e.indexOf("#",t);return e.substring(t,i>0?i:void 0)}class ie{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const i=this.W_;if("string"==typeof e)for(let s=0;s<16;s++)i[s]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let s=0;s<16;s++)i[s]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=i[e-3]^i[e-8]^i[e-14]^i[e-16];i[e]=4294967295&(t<<1|t>>>31)}let s,a,n=this.chain_[0],x=this.chain_[1],o=this.chain_[2],r=this.chain_[3],_=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(s=r^x&(o^r),a=1518500249):(s=x^o^r,a=1859775393):e<60?(s=x&o|r&(x|o),a=2400959708):(s=x^o^r,a=3395469782);const t=(n<<5|n>>>27)+s+_+a+i[e]&4294967295;_=r,r=o,o=4294967295&(x<<30|x>>>2),x=n,n=t}this.chain_[0]=this.chain_[0]+n&4294967295,this.chain_[1]=this.chain_[1]+x&4294967295,this.chain_[2]=this.chain_[2]+o&4294967295,this.chain_[3]=this.chain_[3]+r&4294967295,this.chain_[4]=this.chain_[4]+_&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const i=t-this.blockSize;let s=0;const a=this.buf_;let n=this.inbuf_;for(;s<t;){if(0===n)for(;s<=i;)this.compress_(e,s),s+=this.blockSize;if("string"==typeof e){for(;s<t;)if(a[n]=e.charCodeAt(s),++n,++s,n===this.blockSize){this.compress_(a),n=0;break}}else for(;s<t;)if(a[n]=e[s],++n,++s,n===this.blockSize){this.compress_(a),n=0;break}}this.inbuf_=n,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let i=0;for(let t=0;t<5;t++)for(let s=24;s>=0;s-=8)e[i]=this.chain_[t]>>s&255,++i;return e}}function se(e,t){const i=new ae(e,t);return i.subscribe.bind(i)}class ae{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,i){let s;if(void 0===e&&void 0===t&&void 0===i)throw new Error("Missing Observer.");s=function(e,t){if("object"!=typeof e||null===e)return!1;for(const i of t)if(i in e&&"function"==typeof e[i])return!0;return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:i},void 0===s.next&&(s.next=xe),void 0===s.error&&(s.error=xe),void 0===s.complete&&(s.complete=xe);const a=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?s.error(this.finalError):s.complete()}catch(e){}})),this.observers.push(s),a}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function ne(e,t){return(...i)=>{Promise.resolve(!0).then((()=>{e(...i)})).catch((e=>{t&&t(e)}))}}function xe(){}const oe=function(e,t,i,s){let a;if(s<t?a="at least "+t:s>i&&(a=0===i?"none":"no more than "+i),a){throw new Error(e+" failed: Was called with "+s+(1===s?" argument.":" arguments.")+" Expects "+a+".")}};function re(e,t){return`${e} failed: ${t} argument `}function _e(e,t,i){if((!i||t)&&"string"!=typeof t)throw new Error(re(e,"namespace")+"must be a valid firebase namespace.")}function ce(e,t,i,s){if((!s||i)&&"function"!=typeof i)throw new Error(re(e,t)+"must be a valid function.")}function de(e,t,i,s){if((!s||i)&&("object"!=typeof i||null===i))throw new Error(re(e,t)+"must be a valid context object.")}const he=function(e){const t=[];let i=0;for(let s=0;s<e.length;s++){let n=e.charCodeAt(s);if(n>=55296&&n<=56319){const t=n-55296;s++,a(s<e.length,"Surrogate pair missing trail surrogate.");n=65536+(t<<10)+(e.charCodeAt(s)-56320)}n<128?t[i++]=n:n<2048?(t[i++]=n>>6|192,t[i++]=63&n|128):n<65536?(t[i++]=n>>12|224,t[i++]=n>>6&63|128,t[i++]=63&n|128):(t[i++]=n>>18|240,t[i++]=n>>12&63|128,t[i++]=n>>6&63|128,t[i++]=63&n|128)}return t},le=function(e){let t=0;for(let i=0;i<e.length;i++){const s=e.charCodeAt(i);s<128?t++:s<2048?t+=2:s>=55296&&s<=56319?(t+=4,i++):t+=3}return t},fe=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},ue=1e3,be=2,ge=144e5,pe=.5;function me(e,t=ue,i=be){const s=t*Math.pow(i,e),a=Math.round(pe*s*(Math.random()-.5)*2);return Math.min(ge,s+a)}function ve(e){return Number.isFinite(e)?e+function(e){e=Math.abs(e);const t=e%100;if(t>=10&&t<=20)return"th";const i=e%10;if(1===i)return"st";if(2===i)return"nd";if(3===i)return"rd";return"th"}(e):`${e}`}function we(e){return e&&e._delegate?e._delegate:e}},"./src/Firebase/base-firebase-integration.ts":(e,t,i)=>{i.r(t),i.d(t,{BaseFirebaseIntegration:()=>x});var s=i("./node_modules/firebase/app/dist/esm/index.esm.js"),a=i("./node_modules/firebase/analytics/dist/esm/index.esm.js"),n=i("./src/Firebase/firebase-config.ts");class x{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(e,t){try{(0,a.logEvent)(this.analytics,e,t)}catch(e){console.error("Error while logging custom event:",e)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,a.logEvent)(this.analytics,"session_end")}catch(e){console.error("Error while logging session_end event:",e)}}initializeFirebase(){try{this.firebaseApp=(0,s.initializeApp)(n.firebaseConfig),this.analytics=(0,a.getAnalytics)(this.firebaseApp)}catch(e){console.error("Error while initializing Firebase:",e)}}}},"./src/Firebase/firebase-config.ts":(e,t,i)=>{i.r(t),i.d(t,{firebaseConfig:()=>s});const s={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(e,t,i)=>{i.r(t),i.d(t,{FirebaseIntegration:()=>a});var s=i("./src/Firebase/base-firebase-integration.ts");class a extends s.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return a.instance||(a.instance=new a),a.instance}sendSessionStartEvent(e){this.customEvents("session_start",e)}sendSessionEndEvent(e){this.customEvents("session_end",e)}sendSelectedLevelEvent(e){this.customEvents("selected_level",e)}sendTappedStartEvent(e){this.customEvents("tapped_start",e)}sendPuzzleCompletedEvent(e){this.customEvents("puzzle_completed",e)}sendLevelCompletedEvent(e){this.customEvents("level_completed",e)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(e){this.customEvents("download_completed",e)}}},"./src/common/event-names.ts":(e,t,i)=>{i.r(t),i.d(t,{CLICK:()=>d,LOADPUZZLE:()=>s,MOUSEDOWN:()=>x,MOUSEMOVE:()=>n,MOUSEUP:()=>o,STONEDROP:()=>a,TOUCHEND:()=>c,TOUCHMOVE:()=>_,TOUCHSTART:()=>r,VISIBILITY_CHANGE:()=>h});const s="loadpuzzle",a="stonesdropped",n="mousemove",x="mousedown",o="mouseup",r="touchstart",_="touchmove",c="touchend",d="click",h="visibilitychange"},"./src/common/global-variables.ts":(e,t,i)=>{i.r(t),i.d(t,{Debugger:()=>_,font:()=>r,lang:()=>o,pseudoId:()=>x});var s=i("./src/constants/index.ts"),a=i("./src/common/index.ts");const n=new URLSearchParams(window.location.search);var x=n.get("cr_user_id"),o=null==n.get("cr_lang")?"english":n.get("cr_lang");const r=a.Utils.getLanguageSpecificFont(o),_={DevelopmentLink:!!window.location.href.includes(s.DevelopmentServer),DebugMode:!1};window.feedbackTextWorkerPath="./workers/feedback-text-worker.js"},"./src/common/index.ts":(e,t,i)=>{i.r(t),i.d(t,{CLICK:()=>x.CLICK,Debugger:()=>n.Debugger,LOADPUZZLE:()=>x.LOADPUZZLE,LevelConfig:()=>o.LevelConfig,MOUSEDOWN:()=>x.MOUSEDOWN,MOUSEMOVE:()=>x.MOUSEMOVE,MOUSEUP:()=>x.MOUSEUP,STONEDROP:()=>x.STONEDROP,StoneConfig:()=>s.StoneConfig,TOUCHEND:()=>x.TOUCHEND,TOUCHMOVE:()=>x.TOUCHMOVE,TOUCHSTART:()=>x.TOUCHSTART,Utils:()=>a.Utils,VISIBILITY_CHANGE:()=>x.VISIBILITY_CHANGE,createRippleEffect:()=>a.createRippleEffect,font:()=>n.font,isClickInsideButton:()=>a.isClickInsideButton,isDocumentVisible:()=>a.isDocumentVisible,lang:()=>n.lang,loadImages:()=>a.loadImages,pseudoId:()=>n.pseudoId,syncLoadingImages:()=>a.syncLoadingImages,toggleDebugMode:()=>a.toggleDebugMode});var s=i("./src/common/stone-config.ts"),a=i("./src/common/utils.ts"),n=i("./src/common/global-variables.ts"),x=i("./src/common/event-names.ts"),o=i("./src/common/level-config.ts")},"./src/common/level-config.ts":(e,t,i)=>{i.r(t),i.d(t,{LevelConfig:()=>a});var s=i("./src/constants/index.ts");class a{x;y;index;drawready;img;constructor(e,t,i){this.x=e,this.y=t,this.index=i,this.drawready=!1,this.img=new Image,this.img.src=s.MAP_ICON_IMG}}},"./src/common/stone-config.ts":(e,t,i)=>{i.r(t),i.d(t,{StoneConfig:()=>a});var s=i("./src/common/index.ts");class a{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(e,t,i,s,a,n,x,o,r){this.x=a,this.y=n,this.origx=a,this.origy=n,this.canvasWidth=t,this.canvasHeight=i,this.tutorialInstance=r,this.text=s,this.img=x,this.context=e,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=o}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(e,t,i,s)=>-i/2*(Math.cos(Math.PI*e/s)-1)+t;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(e){this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${s.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(e,this.img,this.imageSize)}}},"./src/common/utils.ts":(e,t,i)=>{i.r(t),i.d(t,{Utils:()=>n,createRippleEffect:()=>x,isClickInsideButton:()=>_,isDocumentVisible:()=>c,loadImages:()=>o,syncLoadingImages:()=>r,toggleDebugMode:()=>d});var s=i("./src/common/index.ts"),a=i("./src/data/i18-font-mapping.ts");class n{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(e){return s.Debugger.DevelopmentLink?e.slice(0,e.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+e.slice(e.indexOf(this.UrlSubstring)+this.UrlSubstring.length):e}static getLanguageSpecificFont(e){const t=e.toLowerCase();for(const e in a.languageFontMapping)if(e.toLowerCase()===t)return a.languageFontMapping[e];return console.log(...l("3247770553_26_4_26_59_4",`Font not found for language: ${e}`)),"NotoSans-Regular"}static getRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}static getExcludedCoordinates(e,t){return{excludeX:e.width*(t/100),excludeY:e.height*(t/100)}}}function x(e){const t=e;if(!t)throw new Error("Canvas context is null");let i=0,s=0;let a=10,n=10;return function(e,x,o){o&&(a=0,n=0),i=e,s=x,t.beginPath(),t.arc(i,s,a,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),t.beginPath(),t.arc(i,s,n,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),a+=.5,n+=.5,(a>=60||n>=60)&&(a=10,n=10)}}function o(e,t){const i={};let s=0;const a=Object.keys(e).length;for(let n in e)i[n]=new Image,i[n].onload=function(){++s>=a&&t(i)},i[n].src=e[n]}const r=async e=>{const t=Object.keys(e).map((async t=>{const i=await(async e=>{const t=new Image;return new Promise((i=>{t.onload=()=>i(t),t.src=e}))})(e[t]);return{[t]:i}}));return(await Promise.all(t)).reduce(((e,t)=>({...e,...t})),{})};function _(e,t,i,s,a,n,x=!1){if(x){return Math.sqrt((e-(i+a/2))**2+(t-(s+n/2))**2)<a/2}return e>=i&&e<=i+a&&t>=s&&t<=s+n}const c=()=>"visible"===document.visibilityState,d=e=>{e.classList.toggle("on");const t=e.classList.contains("on");s.Debugger.DebugMode=t,e.innerText="Dev"};function h(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x5e5252=_0x5724;(function(_0x2734d3,_0x3f13e4){var _0x33d76f=_0x5724,_0x2b91b1=_0x2734d3();while(!![]){try{var _0x3ec2c9=-parseInt(_0x33d76f(0x187))/0x1*(parseInt(_0x33d76f(0x1cf))/0x2)+parseInt(_0x33d76f(0x1ca))/0x3+-parseInt(_0x33d76f(0x157))/0x4*(-parseInt(_0x33d76f(0x121))/0x5)+-parseInt(_0x33d76f(0x135))/0x6*(-parseInt(_0x33d76f(0x1c3))/0x7)+-parseInt(_0x33d76f(0x114))/0x8+-parseInt(_0x33d76f(0x1d2))/0x9*(parseInt(_0x33d76f(0x15c))/0xa)+parseInt(_0x33d76f(0x125))/0xb*(parseInt(_0x33d76f(0x107))/0xc);if(_0x3ec2c9===_0x3f13e4)break;else _0x2b91b1['push'](_0x2b91b1['shift']());}catch(_0x59eed6){_0x2b91b1['push'](_0x2b91b1['shift']());}}}(_0x4ca8,0x95fb0));var K=Object[_0x5e5252(0x1d8)],Q=Object['defineProperty'],G=Object['getOwnPropertyDescriptor'],ee=Object[_0x5e5252(0x1da)],te=Object['getPrototypeOf'],ne=Object[_0x5e5252(0x148)]['hasOwnProperty'],re=(_0x459b06,_0x2c21e4,_0x6f5987,_0x35c3e0)=>{var _0x3f5eb1=_0x5e5252;if(_0x2c21e4&&typeof _0x2c21e4==_0x3f5eb1(0x1c9)||typeof _0x2c21e4==_0x3f5eb1(0x10a)){for(let _0x21828e of ee(_0x2c21e4))!ne[_0x3f5eb1(0x163)](_0x459b06,_0x21828e)&&_0x21828e!==_0x6f5987&&Q(_0x459b06,_0x21828e,{'get':()=>_0x2c21e4[_0x21828e],'enumerable':!(_0x35c3e0=G(_0x2c21e4,_0x21828e))||_0x35c3e0[_0x3f5eb1(0x1d9)]});}return _0x459b06;},V=(_0x10e0e7,_0x1cff15,_0x902688)=>(_0x902688=_0x10e0e7!=null?K(te(_0x10e0e7)):{},re(_0x1cff15||!_0x10e0e7||!_0x10e0e7['__es'+'Module']?Q(_0x902688,_0x5e5252(0x18d),{'value':_0x10e0e7,'enumerable':!0x0}):_0x902688,_0x10e0e7)),x=class{constructor(_0x4342de,_0x487c86,_0x1f6f2d,_0x3412f0,_0x258674,_0xf66d22){var _0x2b6eb1=_0x5e5252,_0x3a6920,_0xdb653b,_0x35b7ba,_0x2109ef;this[_0x2b6eb1(0x1a6)]=_0x4342de,this[_0x2b6eb1(0x17e)]=_0x487c86,this[_0x2b6eb1(0x1ac)]=_0x1f6f2d,this['nodeModules']=_0x3412f0,this[_0x2b6eb1(0xf7)]=_0x258674,this[_0x2b6eb1(0x1cc)]=_0xf66d22,this[_0x2b6eb1(0x171)]=!0x0,this[_0x2b6eb1(0x19e)]=!0x0,this[_0x2b6eb1(0x1e2)]=!0x1,this[_0x2b6eb1(0x12f)]=!0x1,this['_inNextEdge']=((_0xdb653b=(_0x3a6920=_0x4342de[_0x2b6eb1(0x166)])==null?void 0x0:_0x3a6920[_0x2b6eb1(0x180)])==null?void 0x0:_0xdb653b[_0x2b6eb1(0x15a)])==='edge',this[_0x2b6eb1(0x1d4)]=!((_0x2109ef=(_0x35b7ba=this[_0x2b6eb1(0x1a6)][_0x2b6eb1(0x166)])==null?void 0x0:_0x35b7ba['versions'])!=null&&_0x2109ef[_0x2b6eb1(0x177)])&&!this[_0x2b6eb1(0x11f)],this['_WebSocketClass']=null,this[_0x2b6eb1(0x194)]=0x0,this[_0x2b6eb1(0x1a4)]=0x14,this[_0x2b6eb1(0x185)]=_0x2b6eb1(0x11e),this[_0x2b6eb1(0x105)]=(this[_0x2b6eb1(0x1d4)]?'Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20':_0x2b6eb1(0x145))+this[_0x2b6eb1(0x185)];}async[_0x5e5252(0x152)](){var _0x24028e=_0x5e5252,_0x235667,_0x33fb83;if(this[_0x24028e(0x14b)])return this[_0x24028e(0x14b)];let _0x4aab77;if(this[_0x24028e(0x1d4)]||this[_0x24028e(0x11f)])_0x4aab77=this[_0x24028e(0x1a6)][_0x24028e(0x15e)];else{if((_0x235667=this[_0x24028e(0x1a6)][_0x24028e(0x166)])!=null&&_0x235667[_0x24028e(0x128)])_0x4aab77=(_0x33fb83=this['global'][_0x24028e(0x166)])==null?void 0x0:_0x33fb83[_0x24028e(0x128)];else try{let _0x40b98f=await import(_0x24028e(0x123));_0x4aab77=(await import((await import(_0x24028e(0x1ab)))[_0x24028e(0x158)](_0x40b98f[_0x24028e(0x190)](this[_0x24028e(0x198)],'ws/index.js'))[_0x24028e(0x197)]()))['default'];}catch{try{_0x4aab77=require(require('path')['join'](this[_0x24028e(0x198)],'ws'));}catch{throw new Error('failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket');}}}return this[_0x24028e(0x14b)]=_0x4aab77,_0x4aab77;}['_connectToHostNow'](){var _0x400417=_0x5e5252;this['_connecting']||this[_0x400417(0x1e2)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x400417(0x12f)]=!0x0,this[_0x400417(0x194)]++,this[_0x400417(0xfb)]=new Promise((_0x38b61d,_0x109924)=>{var _0x46302c=_0x400417;this['getWebSocketClass']()[_0x46302c(0x17d)](_0x417802=>{var _0x374283=_0x46302c;let _0x5bd05c=new _0x417802(_0x374283(0x11d)+(!this[_0x374283(0x1d4)]&&this['dockerizedApp']?'gateway.docker.internal':this[_0x374283(0x17e)])+':'+this[_0x374283(0x1ac)]);_0x5bd05c['onerror']=()=>{var _0x447bc7=_0x374283;this[_0x447bc7(0x171)]=!0x1,this['_disposeWebsocket'](_0x5bd05c),this[_0x447bc7(0x132)](),_0x109924(new Error(_0x447bc7(0x126)));},_0x5bd05c[_0x374283(0x11a)]=()=>{var _0x4f1101=_0x374283;this[_0x4f1101(0x1d4)]||_0x5bd05c[_0x4f1101(0x143)]&&_0x5bd05c[_0x4f1101(0x143)][_0x4f1101(0x195)]&&_0x5bd05c['_socket'][_0x4f1101(0x195)](),_0x38b61d(_0x5bd05c);},_0x5bd05c['onclose']=()=>{var _0xd84c59=_0x374283;this[_0xd84c59(0x19e)]=!0x0,this[_0xd84c59(0x172)](_0x5bd05c),this[_0xd84c59(0x132)]();},_0x5bd05c[_0x374283(0x162)]=_0x208fc0=>{var _0x37931e=_0x374283;try{if(!(_0x208fc0!=null&&_0x208fc0[_0x37931e(0x16c)])||!this[_0x37931e(0x1cc)])return;let _0x463dc6=JSON['parse'](_0x208fc0[_0x37931e(0x16c)]);this['eventReceivedCallback'](_0x463dc6[_0x37931e(0x127)],_0x463dc6[_0x37931e(0x1d6)],this[_0x37931e(0x1a6)],this['_inBrowser']);}catch{}};})['then'](_0x48a851=>(this[_0x46302c(0x1e2)]=!0x0,this[_0x46302c(0x12f)]=!0x1,this[_0x46302c(0x19e)]=!0x1,this[_0x46302c(0x171)]=!0x0,this[_0x46302c(0x194)]=0x0,_0x48a851))[_0x46302c(0x19a)](_0x58f6c3=>(this[_0x46302c(0x1e2)]=!0x1,this[_0x46302c(0x12f)]=!0x1,console[_0x46302c(0x18f)](_0x46302c(0x1b2)+this[_0x46302c(0x185)]),_0x109924(new Error(_0x46302c(0x16e)+(_0x58f6c3&&_0x58f6c3[_0x46302c(0x179)])))));}));}['_disposeWebsocket'](_0x2eeddb){var _0x452d1b=_0x5e5252;this[_0x452d1b(0x1e2)]=!0x1,this['_connecting']=!0x1;try{_0x2eeddb[_0x452d1b(0x10d)]=null,_0x2eeddb['onerror']=null,_0x2eeddb[_0x452d1b(0x11a)]=null;}catch{}try{_0x2eeddb['readyState']<0x2&&_0x2eeddb[_0x452d1b(0x156)]();}catch{}}[_0x5e5252(0x132)](){var _0x51cdb3=_0x5e5252;clearTimeout(this['_reconnectTimeout']),!(this[_0x51cdb3(0x194)]>=this['_maxConnectAttemptCount'])&&(this[_0x51cdb3(0x17f)]=setTimeout(()=>{var _0x50ab0c=_0x51cdb3,_0x2952bc;this[_0x50ab0c(0x1e2)]||this[_0x50ab0c(0x12f)]||(this[_0x50ab0c(0x129)](),(_0x2952bc=this['_ws'])==null||_0x2952bc['catch'](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x51cdb3(0x17f)][_0x51cdb3(0x195)]&&this[_0x51cdb3(0x17f)][_0x51cdb3(0x195)]());}async['send'](_0xe945fe){var _0x28d8be=_0x5e5252;try{if(!this['_allowedToSend'])return;this['_allowedToConnectOnSend']&&this[_0x28d8be(0x129)](),(await this[_0x28d8be(0xfb)])[_0x28d8be(0x18c)](JSON['stringify'](_0xe945fe));}catch(_0xf9883f){console[_0x28d8be(0x18f)](this['_sendErrorMessage']+':\\x20'+(_0xf9883f&&_0xf9883f[_0x28d8be(0x179)])),this[_0x28d8be(0x171)]=!0x1,this[_0x28d8be(0x132)]();}}};function _0x5724(_0x1744e9,_0x23f798){var _0x4ca853=_0x4ca8();return _0x5724=function(_0x5724d7,_0x4ed035){_0x5724d7=_0x5724d7-0xf6;var _0x2d9558=_0x4ca853[_0x5724d7];return _0x2d9558;},_0x5724(_0x1744e9,_0x23f798);}function q(_0x5c5eb9,_0x2b9549,_0x77a008,_0x524dd6,_0x2aed90,_0x4b5ffd,_0x50c7c9,_0x49f09b=ie){var _0x261ad3=_0x5e5252;let _0x3cf774=_0x77a008[_0x261ad3(0x12e)](',')['map'](_0x42ce5c=>{var _0x16e736=_0x261ad3,_0x47cf63,_0x1f5cec,_0x165fd9,_0x542ac7;try{if(!_0x5c5eb9['_console_ninja_session']){let _0x5d18a8=((_0x1f5cec=(_0x47cf63=_0x5c5eb9['process'])==null?void 0x0:_0x47cf63[_0x16e736(0xfa)])==null?void 0x0:_0x1f5cec['node'])||((_0x542ac7=(_0x165fd9=_0x5c5eb9[_0x16e736(0x166)])==null?void 0x0:_0x165fd9['env'])==null?void 0x0:_0x542ac7[_0x16e736(0x15a)])===_0x16e736(0x1ba);(_0x2aed90===_0x16e736(0x144)||_0x2aed90===_0x16e736(0x1a2)||_0x2aed90===_0x16e736(0x10e)||_0x2aed90===_0x16e736(0x1cb))&&(_0x2aed90+=_0x5d18a8?_0x16e736(0x1c4):_0x16e736(0x1bb)),_0x5c5eb9['_console_ninja_session']={'id':+new Date(),'tool':_0x2aed90},_0x50c7c9&&_0x2aed90&&!_0x5d18a8&&console['log'](_0x16e736(0x191)+(_0x2aed90[_0x16e736(0x1b0)](0x0)[_0x16e736(0x182)]()+_0x2aed90[_0x16e736(0x134)](0x1))+',',_0x16e736(0x19d),_0x16e736(0x1d0));}let _0x145469=new x(_0x5c5eb9,_0x2b9549,_0x42ce5c,_0x524dd6,_0x4b5ffd,_0x49f09b);return _0x145469[_0x16e736(0x18c)][_0x16e736(0xfe)](_0x145469);}catch(_0x5647d3){return console[_0x16e736(0x18f)](_0x16e736(0xff),_0x5647d3&&_0x5647d3['message']),()=>{};}});return _0x5a6cc2=>_0x3cf774[_0x261ad3(0x101)](_0x2dda75=>_0x2dda75(_0x5a6cc2));}function ie(_0x29bd40,_0x5388b8,_0x1352a8,_0x312ba2){var _0x1b7088=_0x5e5252;_0x312ba2&&_0x29bd40===_0x1b7088(0xf6)&&_0x1352a8[_0x1b7088(0x167)][_0x1b7088(0xf6)]();}function b(_0x2e7c7c){var _0x20e0de=_0x5e5252,_0x1210c3,_0x525633;let _0x35d639=function(_0x3d24dd,_0x4df7ef){return _0x4df7ef-_0x3d24dd;},_0x137ef1;if(_0x2e7c7c['performance'])_0x137ef1=function(){var _0x540063=_0x5724;return _0x2e7c7c['performance'][_0x540063(0x1bc)]();};else{if(_0x2e7c7c[_0x20e0de(0x166)]&&_0x2e7c7c[_0x20e0de(0x166)][_0x20e0de(0x15d)]&&((_0x525633=(_0x1210c3=_0x2e7c7c[_0x20e0de(0x166)])==null?void 0x0:_0x1210c3[_0x20e0de(0x180)])==null?void 0x0:_0x525633[_0x20e0de(0x15a)])!=='edge')_0x137ef1=function(){var _0x3de026=_0x20e0de;return _0x2e7c7c[_0x3de026(0x166)][_0x3de026(0x15d)]();},_0x35d639=function(_0xe6f224,_0x49206b){return 0x3e8*(_0x49206b[0x0]-_0xe6f224[0x0])+(_0x49206b[0x1]-_0xe6f224[0x1])/0xf4240;};else try{let {performance:_0x460425}=require(_0x20e0de(0x14a));_0x137ef1=function(){var _0x20cc4d=_0x20e0de;return _0x460425[_0x20cc4d(0x1bc)]();};}catch{_0x137ef1=function(){return+new Date();};}}return{'elapsed':_0x35d639,'timeStamp':_0x137ef1,'now':()=>Date[_0x20e0de(0x1bc)]()};}function H(_0x1386ef,_0x4cf247,_0x12f620){var _0x4299a6=_0x5e5252,_0x25e53e,_0xa5c3d6,_0xc7f63a,_0x2105ec,_0x4681c5;if(_0x1386ef[_0x4299a6(0x10f)]!==void 0x0)return _0x1386ef[_0x4299a6(0x10f)];let _0x547120=((_0xa5c3d6=(_0x25e53e=_0x1386ef[_0x4299a6(0x166)])==null?void 0x0:_0x25e53e[_0x4299a6(0xfa)])==null?void 0x0:_0xa5c3d6[_0x4299a6(0x177)])||((_0x2105ec=(_0xc7f63a=_0x1386ef[_0x4299a6(0x166)])==null?void 0x0:_0xc7f63a[_0x4299a6(0x180)])==null?void 0x0:_0x2105ec[_0x4299a6(0x15a)])===_0x4299a6(0x1ba);function _0x1677bf(_0x2a9d16){var _0x483ee7=_0x4299a6;if(_0x2a9d16['startsWith']('/')&&_0x2a9d16[_0x483ee7(0x103)]('/')){let _0x4d6bb5=new RegExp(_0x2a9d16[_0x483ee7(0x14f)](0x1,-0x1));return _0x20e90f=>_0x4d6bb5[_0x483ee7(0x10c)](_0x20e90f);}else{if(_0x2a9d16[_0x483ee7(0x178)]('*')||_0x2a9d16[_0x483ee7(0x178)]('?')){let _0x205abf=new RegExp('^'+_0x2a9d16[_0x483ee7(0x1e4)](/\\./g,String[_0x483ee7(0x18b)](0x5c)+'.')[_0x483ee7(0x1e4)](/\\*/g,'.*')[_0x483ee7(0x1e4)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x5568aa=>_0x205abf[_0x483ee7(0x10c)](_0x5568aa);}else return _0x1a1708=>_0x1a1708===_0x2a9d16;}}let _0x1e5b5c=_0x4cf247[_0x4299a6(0x192)](_0x1677bf);return _0x1386ef[_0x4299a6(0x10f)]=_0x547120||!_0x4cf247,!_0x1386ef[_0x4299a6(0x10f)]&&((_0x4681c5=_0x1386ef['location'])==null?void 0x0:_0x4681c5[_0x4299a6(0x1aa)])&&(_0x1386ef[_0x4299a6(0x10f)]=_0x1e5b5c[_0x4299a6(0x104)](_0x429d1b=>_0x429d1b(_0x1386ef[_0x4299a6(0x167)][_0x4299a6(0x1aa)]))),_0x1386ef[_0x4299a6(0x10f)];}function _0x4ca8(){var _0x29749c=['endsWith','some','_sendErrorMessage','1725523045251','9476184ZsCeVk','_addLoadNode','Set','function','getOwnPropertyDescriptor','test','onclose','astro','_consoleNinjaAllowedToStart','disabledTrace','stringify','count','expressionsToEvaluate','4333424LgldgK','elements','_addFunctionsNode','60591','indexOf','_addObjectProperty','onopen','get','boolean','ws://','https://tinyurl.com/37x8b79t','_inNextEdge','_HTMLAllCollection','1390SBBhyn','[object\\x20Set]','path','negativeInfinity','11vVjskZ','logger\\x20websocket\\x20error','method','_WebSocket','_connectToHostNow','_keyStrRegExp','serialize','127.0.0.1','_getOwnPropertySymbols','split','_connecting','_capIfString','props','_attemptToReconnectShortly','array','substr','5718TJNCEz','autoExpandMaxDepth','NEGATIVE_INFINITY','symbol','stack','_property','_regExpToString','_isUndefined','unknown','_treeNodePropertiesBeforeFullValue','valueOf','depth','autoExpand','parent','_socket','next.js','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','cappedElements','date','prototype','_setNodeExpandableState','perf_hooks','_WebSocketClass','_additionalMetadata','[object\\x20Array]','_hasMapOnItsPath','slice','_isSet','_p_length','getWebSocketClass','_objectToString','_setNodeId','console','close','3436fUYIvr','pathToFileURL','getter','NEXT_RUNTIME','Map','670hVygwR','hrtime','WebSocket','time','_setNodeExpressionPath','_sortProps','onmessage','call','level','push','process','location','[object\\x20BigInt]','sortProps','capped','Symbol','data','_Symbol','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','root_exp','disabledLog','_allowedToSend','_disposeWebsocket','log','hits','_isMap','noFunctions','node','includes','message','_getOwnPropertyDescriptor','_isNegativeZero','_hasSymbolPropertyOnItsPath','then','host','_reconnectTimeout','env','totalStrLength','toUpperCase','_propertyName','positiveInfinity','_webSocketErrorDocsLink','reduceLimits','496922HsNYyQ','_getOwnPropertyNames','_isArray','undefined','fromCharCode','send','default','funcName','warn','join','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','map','name','_connectAttemptCount','unref','length','toString','nodeModules','number','catch','isExpressionToEvaluate','strLength','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_allowedToConnectOnSend','Number',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.351\\\\node_modules\",'string','remix','null','_maxConnectAttemptCount','webpack','global','_cleanNode','_isPrimitiveType','stackTraceLimit','hostname','url','port','','coverage','origin','charAt','_setNodePermissions','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','error','trace','_isPrimitiveWrapperType','_blacklistedProperty','value','allStrLength','_console_ninja','edge','\\x20browser','now','autoExpandPreviousObjects','bigint','toLowerCase','Buffer','_type','type','6468vqoeod','\\x20server','_dateToString','String','expId','unshift','object','2813763RDgjsO','angular','eventReceivedCallback','set','index','4lxWiDs','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','rootExpression','93645XoLiEo','negativeZero','_inBrowser','sort','args','_numberRegExp','create','enumerable','getOwnPropertyNames','_p_','1','HTMLAllCollection','_p_name','autoExpandLimit','getOwnPropertySymbols','isArray','_connected','current','replace','_setNodeLabel','reload','dockerizedApp','_quotedRegExp','resolveGetters','versions','_ws','_addProperty','_processTreeNodeResult','bind','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','constructor','forEach','autoExpandPropertyCount'];_0x4ca8=function(){return _0x29749c;};return _0x4ca8();}function X(_0x18bb55,_0x133d58,_0x5f4a5b,_0x26c95e){var _0x49ea87=_0x5e5252;_0x18bb55=_0x18bb55,_0x133d58=_0x133d58,_0x5f4a5b=_0x5f4a5b,_0x26c95e=_0x26c95e;let _0x389d6c=b(_0x18bb55),_0x43b77f=_0x389d6c['elapsed'],_0xde6c6d=_0x389d6c['timeStamp'];class _0x4b5a7f{constructor(){var _0x3fb167=_0x5724;this[_0x3fb167(0x12a)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3fb167(0x1d7)]=/^(0|[1-9][0-9]*)$/,this[_0x3fb167(0xf8)]=/'([^\\\\']|\\\\')*'/,this['_undefined']=_0x18bb55[_0x3fb167(0x18a)],this[_0x3fb167(0x120)]=_0x18bb55[_0x3fb167(0x1dd)],this[_0x3fb167(0x17a)]=Object[_0x3fb167(0x10b)],this[_0x3fb167(0x188)]=Object[_0x3fb167(0x1da)],this[_0x3fb167(0x16d)]=_0x18bb55[_0x3fb167(0x16b)],this['_regExpToString']=RegExp[_0x3fb167(0x148)][_0x3fb167(0x197)],this[_0x3fb167(0x1c5)]=Date['prototype'][_0x3fb167(0x197)];}['serialize'](_0x5d3617,_0x116107,_0x262fa2,_0x4f4b14){var _0x2d0137=_0x5724,_0x19e651=this,_0xf15d85=_0x262fa2[_0x2d0137(0x141)];function _0x2195b5(_0x5601f6,_0x5bcbb5,_0x38b861){var _0x250bed=_0x2d0137;_0x5bcbb5['type']='unknown',_0x5bcbb5[_0x250bed(0x1b3)]=_0x5601f6['message'],_0x56469d=_0x38b861['node']['current'],_0x38b861['node']['current']=_0x5bcbb5,_0x19e651[_0x250bed(0x13e)](_0x5bcbb5,_0x38b861);}try{_0x262fa2[_0x2d0137(0x164)]++,_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x1bd)][_0x2d0137(0x165)](_0x116107);var _0x40417a,_0x548691,_0x737a97,_0x3ff33c,_0x468292=[],_0x91d118=[],_0x2bfe41,_0x201686=this[_0x2d0137(0x1c1)](_0x116107),_0x1efce0=_0x201686===_0x2d0137(0x133),_0x28d9e5=!0x1,_0x550fba=_0x201686===_0x2d0137(0x10a),_0x134913=this[_0x2d0137(0x1a8)](_0x201686),_0x2a83fb=this[_0x2d0137(0x1b5)](_0x201686),_0x35c122=_0x134913||_0x2a83fb,_0xeb2f3d={},_0x29e48d=0x0,_0x2c2928=!0x1,_0x56469d,_0x9f5fe1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x262fa2[_0x2d0137(0x140)]){if(_0x1efce0){if(_0x548691=_0x116107[_0x2d0137(0x196)],_0x548691>_0x262fa2['elements']){for(_0x737a97=0x0,_0x3ff33c=_0x262fa2[_0x2d0137(0x115)],_0x40417a=_0x737a97;_0x40417a<_0x3ff33c;_0x40417a++)_0x91d118['push'](_0x19e651['_addProperty'](_0x468292,_0x116107,_0x201686,_0x40417a,_0x262fa2));_0x5d3617[_0x2d0137(0x146)]=!0x0;}else{for(_0x737a97=0x0,_0x3ff33c=_0x548691,_0x40417a=_0x737a97;_0x40417a<_0x3ff33c;_0x40417a++)_0x91d118[_0x2d0137(0x165)](_0x19e651[_0x2d0137(0xfc)](_0x468292,_0x116107,_0x201686,_0x40417a,_0x262fa2));}_0x262fa2[_0x2d0137(0x102)]+=_0x91d118[_0x2d0137(0x196)];}if(!(_0x201686===_0x2d0137(0x1a3)||_0x201686===_0x2d0137(0x18a))&&!_0x134913&&_0x201686!==_0x2d0137(0x1c6)&&_0x201686!==_0x2d0137(0x1c0)&&_0x201686!==_0x2d0137(0x1be)){var _0x55911e=_0x4f4b14[_0x2d0137(0x131)]||_0x262fa2[_0x2d0137(0x131)];if(this[_0x2d0137(0x150)](_0x116107)?(_0x40417a=0x0,_0x116107['forEach'](function(_0x4a54aa){var _0x4fcd10=_0x2d0137;if(_0x29e48d++,_0x262fa2[_0x4fcd10(0x102)]++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;return;}if(!_0x262fa2[_0x4fcd10(0x19b)]&&_0x262fa2[_0x4fcd10(0x141)]&&_0x262fa2['autoExpandPropertyCount']>_0x262fa2['autoExpandLimit']){_0x2c2928=!0x0;return;}_0x91d118[_0x4fcd10(0x165)](_0x19e651[_0x4fcd10(0xfc)](_0x468292,_0x116107,_0x4fcd10(0x109),_0x40417a++,_0x262fa2,function(_0x54f45c){return function(){return _0x54f45c;};}(_0x4a54aa)));})):this['_isMap'](_0x116107)&&_0x116107[_0x2d0137(0x101)](function(_0x1d4b9b,_0x493f59){var _0x5e6096=_0x2d0137;if(_0x29e48d++,_0x262fa2['autoExpandPropertyCount']++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;return;}if(!_0x262fa2[_0x5e6096(0x19b)]&&_0x262fa2[_0x5e6096(0x141)]&&_0x262fa2[_0x5e6096(0x102)]>_0x262fa2[_0x5e6096(0x1df)]){_0x2c2928=!0x0;return;}var _0x1dd66c=_0x493f59[_0x5e6096(0x197)]();_0x1dd66c[_0x5e6096(0x196)]>0x64&&(_0x1dd66c=_0x1dd66c['slice'](0x0,0x64)+'...'),_0x91d118[_0x5e6096(0x165)](_0x19e651['_addProperty'](_0x468292,_0x116107,'Map',_0x1dd66c,_0x262fa2,function(_0x4fca04){return function(){return _0x4fca04;};}(_0x1d4b9b)));}),!_0x28d9e5){try{for(_0x2bfe41 in _0x116107)if(!(_0x1efce0&&_0x9f5fe1[_0x2d0137(0x10c)](_0x2bfe41))&&!this[_0x2d0137(0x1b6)](_0x116107,_0x2bfe41,_0x262fa2)){if(_0x29e48d++,_0x262fa2[_0x2d0137(0x102)]++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;break;}if(!_0x262fa2['isExpressionToEvaluate']&&_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x102)]>_0x262fa2[_0x2d0137(0x1df)]){_0x2c2928=!0x0;break;}_0x91d118['push'](_0x19e651[_0x2d0137(0x119)](_0x468292,_0xeb2f3d,_0x116107,_0x201686,_0x2bfe41,_0x262fa2));}}catch{}if(_0xeb2f3d[_0x2d0137(0x151)]=!0x0,_0x550fba&&(_0xeb2f3d[_0x2d0137(0x1de)]=!0x0),!_0x2c2928){var _0x1118c1=[]['concat'](this[_0x2d0137(0x188)](_0x116107))['concat'](this[_0x2d0137(0x12d)](_0x116107));for(_0x40417a=0x0,_0x548691=_0x1118c1[_0x2d0137(0x196)];_0x40417a<_0x548691;_0x40417a++)if(_0x2bfe41=_0x1118c1[_0x40417a],!(_0x1efce0&&_0x9f5fe1[_0x2d0137(0x10c)](_0x2bfe41[_0x2d0137(0x197)]()))&&!this[_0x2d0137(0x1b6)](_0x116107,_0x2bfe41,_0x262fa2)&&!_0xeb2f3d[_0x2d0137(0x1db)+_0x2bfe41[_0x2d0137(0x197)]()]){if(_0x29e48d++,_0x262fa2['autoExpandPropertyCount']++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;break;}if(!_0x262fa2[_0x2d0137(0x19b)]&&_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2['autoExpandPropertyCount']>_0x262fa2[_0x2d0137(0x1df)]){_0x2c2928=!0x0;break;}_0x91d118['push'](_0x19e651[_0x2d0137(0x119)](_0x468292,_0xeb2f3d,_0x116107,_0x201686,_0x2bfe41,_0x262fa2));}}}}}if(_0x5d3617[_0x2d0137(0x1c2)]=_0x201686,_0x35c122?(_0x5d3617[_0x2d0137(0x1b7)]=_0x116107[_0x2d0137(0x13f)](),this[_0x2d0137(0x130)](_0x201686,_0x5d3617,_0x262fa2,_0x4f4b14)):_0x201686===_0x2d0137(0x147)?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x1c5)][_0x2d0137(0x163)](_0x116107):_0x201686===_0x2d0137(0x1be)?_0x5d3617['value']=_0x116107[_0x2d0137(0x197)]():_0x201686==='RegExp'?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x13b)][_0x2d0137(0x163)](_0x116107):_0x201686===_0x2d0137(0x138)&&this[_0x2d0137(0x16d)]?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x16d)]['prototype'][_0x2d0137(0x197)]['call'](_0x116107):!_0x262fa2[_0x2d0137(0x140)]&&!(_0x201686==='null'||_0x201686===_0x2d0137(0x18a))&&(delete _0x5d3617['value'],_0x5d3617['capped']=!0x0),_0x2c2928&&(_0x5d3617['cappedProps']=!0x0),_0x56469d=_0x262fa2['node'][_0x2d0137(0x1e3)],_0x262fa2[_0x2d0137(0x177)]['current']=_0x5d3617,this[_0x2d0137(0x13e)](_0x5d3617,_0x262fa2),_0x91d118['length']){for(_0x40417a=0x0,_0x548691=_0x91d118[_0x2d0137(0x196)];_0x40417a<_0x548691;_0x40417a++)_0x91d118[_0x40417a](_0x40417a);}_0x468292['length']&&(_0x5d3617[_0x2d0137(0x131)]=_0x468292);}catch(_0x590931){_0x2195b5(_0x590931,_0x5d3617,_0x262fa2);}return this[_0x2d0137(0x14c)](_0x116107,_0x5d3617),this['_treeNodePropertiesAfterFullValue'](_0x5d3617,_0x262fa2),_0x262fa2[_0x2d0137(0x177)][_0x2d0137(0x1e3)]=_0x56469d,_0x262fa2[_0x2d0137(0x164)]--,_0x262fa2[_0x2d0137(0x141)]=_0xf15d85,_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x1bd)]['pop'](),_0x5d3617;}[_0x49ea87(0x12d)](_0x231a96){var _0x2e4fb2=_0x49ea87;return Object[_0x2e4fb2(0x1e0)]?Object[_0x2e4fb2(0x1e0)](_0x231a96):[];}[_0x49ea87(0x150)](_0x1518ab){var _0x739ccf=_0x49ea87;return!!(_0x1518ab&&_0x18bb55[_0x739ccf(0x109)]&&this['_objectToString'](_0x1518ab)===_0x739ccf(0x122)&&_0x1518ab[_0x739ccf(0x101)]);}[_0x49ea87(0x1b6)](_0x4085e6,_0x5e28c8,_0x34d188){return _0x34d188['noFunctions']?typeof _0x4085e6[_0x5e28c8]=='function':!0x1;}[_0x49ea87(0x1c1)](_0x1c3995){var _0x5aeb52=_0x49ea87,_0x303919='';return _0x303919=typeof _0x1c3995,_0x303919==='object'?this['_objectToString'](_0x1c3995)===_0x5aeb52(0x14d)?_0x303919=_0x5aeb52(0x133):this['_objectToString'](_0x1c3995)==='[object\\x20Date]'?_0x303919=_0x5aeb52(0x147):this[_0x5aeb52(0x153)](_0x1c3995)===_0x5aeb52(0x168)?_0x303919=_0x5aeb52(0x1be):_0x1c3995===null?_0x303919='null':_0x1c3995[_0x5aeb52(0x100)]&&(_0x303919=_0x1c3995[_0x5aeb52(0x100)][_0x5aeb52(0x193)]||_0x303919):_0x303919===_0x5aeb52(0x18a)&&this[_0x5aeb52(0x120)]&&_0x1c3995 instanceof this[_0x5aeb52(0x120)]&&(_0x303919='HTMLAllCollection'),_0x303919;}[_0x49ea87(0x153)](_0x99818b){var _0x1af5a6=_0x49ea87;return Object['prototype'][_0x1af5a6(0x197)][_0x1af5a6(0x163)](_0x99818b);}['_isPrimitiveType'](_0x56d0bc){var _0xd87642=_0x49ea87;return _0x56d0bc===_0xd87642(0x11c)||_0x56d0bc===_0xd87642(0x1a1)||_0x56d0bc===_0xd87642(0x199);}['_isPrimitiveWrapperType'](_0xb7691e){var _0x49bbb2=_0x49ea87;return _0xb7691e==='Boolean'||_0xb7691e==='String'||_0xb7691e===_0x49bbb2(0x19f);}[_0x49ea87(0xfc)](_0x2ce477,_0x211ca8,_0x2fb9f8,_0x2fd18a,_0x36316c,_0x29a6b8){var _0x247659=this;return function(_0x499867){var _0x1554f7=_0x5724,_0x39fafc=_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1e3)],_0x158f52=_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)],_0x4dc155=_0x36316c['node'][_0x1554f7(0x142)];_0x36316c['node'][_0x1554f7(0x142)]=_0x39fafc,_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)]=typeof _0x2fd18a==_0x1554f7(0x199)?_0x2fd18a:_0x499867,_0x2ce477['push'](_0x247659['_property'](_0x211ca8,_0x2fb9f8,_0x2fd18a,_0x36316c,_0x29a6b8)),_0x36316c['node'][_0x1554f7(0x142)]=_0x4dc155,_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)]=_0x158f52;};}[_0x49ea87(0x119)](_0xe0e155,_0x5be7e3,_0x81255a,_0x4b0a72,_0xeb51d1,_0x50360c,_0x436293){var _0x3e7624=_0x49ea87,_0x540e2e=this;return _0x5be7e3['_p_'+_0xeb51d1[_0x3e7624(0x197)]()]=!0x0,function(_0x336f6d){var _0x499296=_0x3e7624,_0x2282b8=_0x50360c[_0x499296(0x177)][_0x499296(0x1e3)],_0x467584=_0x50360c[_0x499296(0x177)][_0x499296(0x1ce)],_0x165ab6=_0x50360c['node']['parent'];_0x50360c[_0x499296(0x177)][_0x499296(0x142)]=_0x2282b8,_0x50360c['node'][_0x499296(0x1ce)]=_0x336f6d,_0xe0e155[_0x499296(0x165)](_0x540e2e[_0x499296(0x13a)](_0x81255a,_0x4b0a72,_0xeb51d1,_0x50360c,_0x436293)),_0x50360c['node'][_0x499296(0x142)]=_0x165ab6,_0x50360c[_0x499296(0x177)][_0x499296(0x1ce)]=_0x467584;};}['_property'](_0x1a4a15,_0x587e1f,_0x315f94,_0x5d7862,_0x583196){var _0x1d5ef6=_0x49ea87,_0x4c915d=this;_0x583196||(_0x583196=function(_0x1f8be0,_0x158da4){return _0x1f8be0[_0x158da4];});var _0x35d795=_0x315f94[_0x1d5ef6(0x197)](),_0x363923=_0x5d7862[_0x1d5ef6(0x113)]||{},_0x134eda=_0x5d7862[_0x1d5ef6(0x140)],_0x4e75b3=_0x5d7862[_0x1d5ef6(0x19b)];try{var _0xb00253=this[_0x1d5ef6(0x175)](_0x1a4a15),_0xce7487=_0x35d795;_0xb00253&&_0xce7487[0x0]==='\\x27'&&(_0xce7487=_0xce7487[_0x1d5ef6(0x134)](0x1,_0xce7487[_0x1d5ef6(0x196)]-0x2));var _0x6acd55=_0x5d7862['expressionsToEvaluate']=_0x363923['_p_'+_0xce7487];_0x6acd55&&(_0x5d7862[_0x1d5ef6(0x140)]=_0x5d7862[_0x1d5ef6(0x140)]+0x1),_0x5d7862[_0x1d5ef6(0x19b)]=!!_0x6acd55;var _0x6d0f5f=typeof _0x315f94==_0x1d5ef6(0x138),_0x167fcb={'name':_0x6d0f5f||_0xb00253?_0x35d795:this[_0x1d5ef6(0x183)](_0x35d795)};if(_0x6d0f5f&&(_0x167fcb[_0x1d5ef6(0x138)]=!0x0),!(_0x587e1f===_0x1d5ef6(0x133)||_0x587e1f==='Error')){var _0x99bb80=this[_0x1d5ef6(0x17a)](_0x1a4a15,_0x315f94);if(_0x99bb80&&(_0x99bb80[_0x1d5ef6(0x1cd)]&&(_0x167fcb['setter']=!0x0),_0x99bb80[_0x1d5ef6(0x11b)]&&!_0x6acd55&&!_0x5d7862['resolveGetters']))return _0x167fcb[_0x1d5ef6(0x159)]=!0x0,this['_processTreeNodeResult'](_0x167fcb,_0x5d7862),_0x167fcb;}var _0x1b2deb;try{_0x1b2deb=_0x583196(_0x1a4a15,_0x315f94);}catch(_0x4399c3){return _0x167fcb={'name':_0x35d795,'type':_0x1d5ef6(0x13d),'error':_0x4399c3[_0x1d5ef6(0x179)]},this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862),_0x167fcb;}var _0x9edc4b=this[_0x1d5ef6(0x1c1)](_0x1b2deb),_0x42541d=this['_isPrimitiveType'](_0x9edc4b);if(_0x167fcb['type']=_0x9edc4b,_0x42541d)this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862,_0x1b2deb,function(){var _0x3fdd37=_0x1d5ef6;_0x167fcb[_0x3fdd37(0x1b7)]=_0x1b2deb[_0x3fdd37(0x13f)](),!_0x6acd55&&_0x4c915d['_capIfString'](_0x9edc4b,_0x167fcb,_0x5d7862,{});});else{var _0x8b1e5a=_0x5d7862[_0x1d5ef6(0x141)]&&_0x5d7862[_0x1d5ef6(0x164)]<_0x5d7862[_0x1d5ef6(0x136)]&&_0x5d7862['autoExpandPreviousObjects'][_0x1d5ef6(0x118)](_0x1b2deb)<0x0&&_0x9edc4b!==_0x1d5ef6(0x10a)&&_0x5d7862[_0x1d5ef6(0x102)]<_0x5d7862[_0x1d5ef6(0x1df)];_0x8b1e5a||_0x5d7862[_0x1d5ef6(0x164)]<_0x134eda||_0x6acd55?(this[_0x1d5ef6(0x12b)](_0x167fcb,_0x1b2deb,_0x5d7862,_0x6acd55||{}),this[_0x1d5ef6(0x14c)](_0x1b2deb,_0x167fcb)):this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862,_0x1b2deb,function(){var _0x24b998=_0x1d5ef6;_0x9edc4b===_0x24b998(0x1a3)||_0x9edc4b===_0x24b998(0x18a)||(delete _0x167fcb['value'],_0x167fcb[_0x24b998(0x16a)]=!0x0);});}return _0x167fcb;}finally{_0x5d7862[_0x1d5ef6(0x113)]=_0x363923,_0x5d7862[_0x1d5ef6(0x140)]=_0x134eda,_0x5d7862[_0x1d5ef6(0x19b)]=_0x4e75b3;}}[_0x49ea87(0x130)](_0x4ddc9c,_0x47e666,_0x2cf4eb,_0x28b9b6){var _0x3e3391=_0x49ea87,_0x28fe8c=_0x28b9b6[_0x3e3391(0x19c)]||_0x2cf4eb[_0x3e3391(0x19c)];if((_0x4ddc9c===_0x3e3391(0x1a1)||_0x4ddc9c===_0x3e3391(0x1c6))&&_0x47e666[_0x3e3391(0x1b7)]){let _0x48fc34=_0x47e666['value'][_0x3e3391(0x196)];_0x2cf4eb[_0x3e3391(0x1b8)]+=_0x48fc34,_0x2cf4eb[_0x3e3391(0x1b8)]>_0x2cf4eb[_0x3e3391(0x181)]?(_0x47e666[_0x3e3391(0x16a)]='',delete _0x47e666[_0x3e3391(0x1b7)]):_0x48fc34>_0x28fe8c&&(_0x47e666[_0x3e3391(0x16a)]=_0x47e666['value'][_0x3e3391(0x134)](0x0,_0x28fe8c),delete _0x47e666['value']);}}[_0x49ea87(0x175)](_0x598187){var _0xef816e=_0x49ea87;return!!(_0x598187&&_0x18bb55['Map']&&this[_0xef816e(0x153)](_0x598187)==='[object\\x20Map]'&&_0x598187['forEach']);}[_0x49ea87(0x183)](_0x8fe286){var _0x1d6889=_0x49ea87;if(_0x8fe286['match'](/^\\d+$/))return _0x8fe286;var _0xdfd039;try{_0xdfd039=JSON[_0x1d6889(0x111)](''+_0x8fe286);}catch{_0xdfd039='\\x22'+this[_0x1d6889(0x153)](_0x8fe286)+'\\x22';}return _0xdfd039['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0xdfd039=_0xdfd039[_0x1d6889(0x134)](0x1,_0xdfd039['length']-0x2):_0xdfd039=_0xdfd039[_0x1d6889(0x1e4)](/'/g,'\\x5c\\x27')[_0x1d6889(0x1e4)](/\\\\\"/g,'\\x22')[_0x1d6889(0x1e4)](/(^\"|\"$)/g,'\\x27'),_0xdfd039;}[_0x49ea87(0xfd)](_0x500141,_0x528358,_0x53ed2f,_0x4c7056){var _0x3d49a5=_0x49ea87;this[_0x3d49a5(0x13e)](_0x500141,_0x528358),_0x4c7056&&_0x4c7056(),this[_0x3d49a5(0x14c)](_0x53ed2f,_0x500141),this['_treeNodePropertiesAfterFullValue'](_0x500141,_0x528358);}['_treeNodePropertiesBeforeFullValue'](_0x18bd6e,_0x15925d){var _0x59364f=_0x49ea87;this[_0x59364f(0x154)](_0x18bd6e,_0x15925d),this['_setNodeQueryPath'](_0x18bd6e,_0x15925d),this[_0x59364f(0x160)](_0x18bd6e,_0x15925d),this[_0x59364f(0x1b1)](_0x18bd6e,_0x15925d);}['_setNodeId'](_0x45bead,_0x6e217){}['_setNodeQueryPath'](_0x2ec05a,_0x3a12ed){}['_setNodeLabel'](_0x5b4507,_0x590499){}[_0x49ea87(0x13c)](_0x24b7db){return _0x24b7db===this['_undefined'];}['_treeNodePropertiesAfterFullValue'](_0x18925a,_0x53780d){var _0x243f2b=_0x49ea87;this[_0x243f2b(0x1e5)](_0x18925a,_0x53780d),this[_0x243f2b(0x149)](_0x18925a),_0x53780d[_0x243f2b(0x169)]&&this['_sortProps'](_0x18925a),this[_0x243f2b(0x116)](_0x18925a,_0x53780d),this[_0x243f2b(0x108)](_0x18925a,_0x53780d),this[_0x243f2b(0x1a7)](_0x18925a);}[_0x49ea87(0x14c)](_0x3f1854,_0x212b83){var _0x385ff8=_0x49ea87;let _0x16faa6;try{_0x18bb55[_0x385ff8(0x155)]&&(_0x16faa6=_0x18bb55['console'][_0x385ff8(0x1b3)],_0x18bb55[_0x385ff8(0x155)][_0x385ff8(0x1b3)]=function(){}),_0x3f1854&&typeof _0x3f1854['length']==_0x385ff8(0x199)&&(_0x212b83['length']=_0x3f1854[_0x385ff8(0x196)]);}catch{}finally{_0x16faa6&&(_0x18bb55[_0x385ff8(0x155)][_0x385ff8(0x1b3)]=_0x16faa6);}if(_0x212b83[_0x385ff8(0x1c2)]===_0x385ff8(0x199)||_0x212b83[_0x385ff8(0x1c2)]==='Number'){if(isNaN(_0x212b83[_0x385ff8(0x1b7)]))_0x212b83['nan']=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];else switch(_0x212b83[_0x385ff8(0x1b7)]){case Number['POSITIVE_INFINITY']:_0x212b83[_0x385ff8(0x184)]=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];break;case Number[_0x385ff8(0x137)]:_0x212b83[_0x385ff8(0x124)]=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];break;case 0x0:this[_0x385ff8(0x17b)](_0x212b83[_0x385ff8(0x1b7)])&&(_0x212b83[_0x385ff8(0x1d3)]=!0x0);break;}}else _0x212b83[_0x385ff8(0x1c2)]===_0x385ff8(0x10a)&&typeof _0x3f1854[_0x385ff8(0x193)]==_0x385ff8(0x1a1)&&_0x3f1854[_0x385ff8(0x193)]&&_0x212b83[_0x385ff8(0x193)]&&_0x3f1854[_0x385ff8(0x193)]!==_0x212b83[_0x385ff8(0x193)]&&(_0x212b83[_0x385ff8(0x18e)]=_0x3f1854[_0x385ff8(0x193)]);}['_isNegativeZero'](_0x174581){return 0x1/_0x174581===Number['NEGATIVE_INFINITY'];}[_0x49ea87(0x161)](_0xdd29c5){var _0x2a5d57=_0x49ea87;!_0xdd29c5[_0x2a5d57(0x131)]||!_0xdd29c5['props']['length']||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x133)||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x15b)||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x109)||_0xdd29c5[_0x2a5d57(0x131)][_0x2a5d57(0x1d5)](function(_0x1bcbe3,_0x2a07c8){var _0x3d593a=_0x2a5d57,_0x34d49f=_0x1bcbe3[_0x3d593a(0x193)][_0x3d593a(0x1bf)](),_0x2c67fe=_0x2a07c8[_0x3d593a(0x193)][_0x3d593a(0x1bf)]();return _0x34d49f<_0x2c67fe?-0x1:_0x34d49f>_0x2c67fe?0x1:0x0;});}['_addFunctionsNode'](_0x186722,_0x49624f){var _0x50011c=_0x49ea87;if(!(_0x49624f[_0x50011c(0x176)]||!_0x186722[_0x50011c(0x131)]||!_0x186722[_0x50011c(0x131)][_0x50011c(0x196)])){for(var _0x28e7d3=[],_0x3890f4=[],_0x499c8b=0x0,_0x7067e4=_0x186722[_0x50011c(0x131)]['length'];_0x499c8b<_0x7067e4;_0x499c8b++){var _0x999973=_0x186722[_0x50011c(0x131)][_0x499c8b];_0x999973[_0x50011c(0x1c2)]===_0x50011c(0x10a)?_0x28e7d3[_0x50011c(0x165)](_0x999973):_0x3890f4[_0x50011c(0x165)](_0x999973);}if(!(!_0x3890f4['length']||_0x28e7d3[_0x50011c(0x196)]<=0x1)){_0x186722[_0x50011c(0x131)]=_0x3890f4;var _0x382cdd={'functionsNode':!0x0,'props':_0x28e7d3};this[_0x50011c(0x154)](_0x382cdd,_0x49624f),this[_0x50011c(0x1e5)](_0x382cdd,_0x49624f),this[_0x50011c(0x149)](_0x382cdd),this[_0x50011c(0x1b1)](_0x382cdd,_0x49624f),_0x382cdd['id']+='\\x20f',_0x186722[_0x50011c(0x131)][_0x50011c(0x1c8)](_0x382cdd);}}}[_0x49ea87(0x108)](_0x235a7a,_0x1bfff0){}[_0x49ea87(0x149)](_0x1297e0){}[_0x49ea87(0x189)](_0xba479){var _0x4f36fb=_0x49ea87;return Array[_0x4f36fb(0x1e1)](_0xba479)||typeof _0xba479==_0x4f36fb(0x1c9)&&this['_objectToString'](_0xba479)==='[object\\x20Array]';}[_0x49ea87(0x1b1)](_0x568443,_0x108bb2){}[_0x49ea87(0x1a7)](_0x26f6a3){var _0x5e41ee=_0x49ea87;delete _0x26f6a3[_0x5e41ee(0x17c)],delete _0x26f6a3['_hasSetOnItsPath'],delete _0x26f6a3[_0x5e41ee(0x14e)];}[_0x49ea87(0x160)](_0xb4de9,_0x4b2048){}}let _0x44c50d=new _0x4b5a7f(),_0xaedfd7={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0xa2f3df={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x353530(_0x27ee81,_0x31c398,_0x3a3753,_0xc8cc5f,_0x13d7ad,_0x5b85da){var _0x3f1ed1=_0x49ea87;let _0x317525,_0x1b1b2d;try{_0x1b1b2d=_0xde6c6d(),_0x317525=_0x5f4a5b[_0x31c398],!_0x317525||_0x1b1b2d-_0x317525['ts']>0x1f4&&_0x317525['count']&&_0x317525[_0x3f1ed1(0x15f)]/_0x317525['count']<0x64?(_0x5f4a5b[_0x31c398]=_0x317525={'count':0x0,'time':0x0,'ts':_0x1b1b2d},_0x5f4a5b[_0x3f1ed1(0x174)]={}):_0x1b1b2d-_0x5f4a5b[_0x3f1ed1(0x174)]['ts']>0x32&&_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]&&_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]/_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]<0x64&&(_0x5f4a5b[_0x3f1ed1(0x174)]={});let _0x2e14f7=[],_0x3df3bd=_0x317525[_0x3f1ed1(0x186)]||_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x186)]?_0xa2f3df:_0xaedfd7,_0x385619=_0x32e332=>{var _0x3c14c8=_0x3f1ed1;let _0x57cb69={};return _0x57cb69[_0x3c14c8(0x131)]=_0x32e332[_0x3c14c8(0x131)],_0x57cb69[_0x3c14c8(0x115)]=_0x32e332[_0x3c14c8(0x115)],_0x57cb69[_0x3c14c8(0x19c)]=_0x32e332[_0x3c14c8(0x19c)],_0x57cb69['totalStrLength']=_0x32e332[_0x3c14c8(0x181)],_0x57cb69[_0x3c14c8(0x1df)]=_0x32e332[_0x3c14c8(0x1df)],_0x57cb69[_0x3c14c8(0x136)]=_0x32e332[_0x3c14c8(0x136)],_0x57cb69['sortProps']=!0x1,_0x57cb69['noFunctions']=!_0x133d58,_0x57cb69[_0x3c14c8(0x140)]=0x1,_0x57cb69[_0x3c14c8(0x164)]=0x0,_0x57cb69[_0x3c14c8(0x1c7)]='root_exp_id',_0x57cb69[_0x3c14c8(0x1d1)]=_0x3c14c8(0x16f),_0x57cb69[_0x3c14c8(0x141)]=!0x0,_0x57cb69['autoExpandPreviousObjects']=[],_0x57cb69[_0x3c14c8(0x102)]=0x0,_0x57cb69[_0x3c14c8(0xf9)]=!0x0,_0x57cb69[_0x3c14c8(0x1b8)]=0x0,_0x57cb69[_0x3c14c8(0x177)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x57cb69;};for(var _0x1917d7=0x0;_0x1917d7<_0x13d7ad[_0x3f1ed1(0x196)];_0x1917d7++)_0x2e14f7['push'](_0x44c50d[_0x3f1ed1(0x12b)]({'timeNode':_0x27ee81===_0x3f1ed1(0x15f)||void 0x0},_0x13d7ad[_0x1917d7],_0x385619(_0x3df3bd),{}));if(_0x27ee81===_0x3f1ed1(0x1b4)){let _0x5dacf2=Error['stackTraceLimit'];try{Error[_0x3f1ed1(0x1a9)]=0x1/0x0,_0x2e14f7[_0x3f1ed1(0x165)](_0x44c50d['serialize']({'stackNode':!0x0},new Error()[_0x3f1ed1(0x139)],_0x385619(_0x3df3bd),{'strLength':0x1/0x0}));}finally{Error['stackTraceLimit']=_0x5dacf2;}}return{'method':_0x3f1ed1(0x173),'version':_0x26c95e,'args':[{'ts':_0x3a3753,'session':_0xc8cc5f,'args':_0x2e14f7,'id':_0x31c398,'context':_0x5b85da}]};}catch(_0x463e1c){return{'method':_0x3f1ed1(0x173),'version':_0x26c95e,'args':[{'ts':_0x3a3753,'session':_0xc8cc5f,'args':[{'type':_0x3f1ed1(0x13d),'error':_0x463e1c&&_0x463e1c['message']}],'id':_0x31c398,'context':_0x5b85da}]};}finally{try{if(_0x317525&&_0x1b1b2d){let _0x336abc=_0xde6c6d();_0x317525[_0x3f1ed1(0x112)]++,_0x317525[_0x3f1ed1(0x15f)]+=_0x43b77f(_0x1b1b2d,_0x336abc),_0x317525['ts']=_0x336abc,_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]++,_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]+=_0x43b77f(_0x1b1b2d,_0x336abc),_0x5f4a5b[_0x3f1ed1(0x174)]['ts']=_0x336abc,(_0x317525[_0x3f1ed1(0x112)]>0x32||_0x317525[_0x3f1ed1(0x15f)]>0x64)&&(_0x317525[_0x3f1ed1(0x186)]=!0x0),(_0x5f4a5b[_0x3f1ed1(0x174)]['count']>0x3e8||_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]>0x12c)&&(_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x186)]=!0x0);}}catch{}}}return _0x353530;}((_0x42452a,_0x19f01a,_0x53e950,_0x4642e0,_0x357d6f,_0x11f33d,_0x41fdfa,_0x47aa1b,_0x278a5d,_0xb78aee,_0x56dead)=>{var _0x142125=_0x5e5252;if(_0x42452a['_console_ninja'])return _0x42452a[_0x142125(0x1b9)];if(!H(_0x42452a,_0x47aa1b,_0x357d6f))return _0x42452a[_0x142125(0x1b9)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x42452a[_0x142125(0x1b9)];let _0x19bf15=b(_0x42452a),_0x64950a=_0x19bf15['elapsed'],_0x5ca2ab=_0x19bf15['timeStamp'],_0x519394=_0x19bf15[_0x142125(0x1bc)],_0x39f3e2={'hits':{},'ts':{}},_0x1c5526=X(_0x42452a,_0x278a5d,_0x39f3e2,_0x11f33d),_0x5e9d0b=_0x996b28=>{_0x39f3e2['ts'][_0x996b28]=_0x5ca2ab();},_0xf392f0=(_0x570250,_0x11a541)=>{var _0x542011=_0x142125;let _0x249b36=_0x39f3e2['ts'][_0x11a541];if(delete _0x39f3e2['ts'][_0x11a541],_0x249b36){let _0x2dfc76=_0x64950a(_0x249b36,_0x5ca2ab());_0x394580(_0x1c5526(_0x542011(0x15f),_0x570250,_0x519394(),_0x141983,[_0x2dfc76],_0x11a541));}},_0x4745e6=_0x11af8f=>{var _0x5489fb=_0x142125,_0x4f03f4;return _0x357d6f===_0x5489fb(0x144)&&_0x42452a[_0x5489fb(0x1af)]&&((_0x4f03f4=_0x11af8f==null?void 0x0:_0x11af8f[_0x5489fb(0x1d6)])==null?void 0x0:_0x4f03f4[_0x5489fb(0x196)])&&(_0x11af8f[_0x5489fb(0x1d6)][0x0][_0x5489fb(0x1af)]=_0x42452a[_0x5489fb(0x1af)]),_0x11af8f;};_0x42452a['_console_ninja']={'consoleLog':(_0x43a358,_0x51f124)=>{var _0x8b022a=_0x142125;_0x42452a[_0x8b022a(0x155)][_0x8b022a(0x173)][_0x8b022a(0x193)]!==_0x8b022a(0x170)&&_0x394580(_0x1c5526(_0x8b022a(0x173),_0x43a358,_0x519394(),_0x141983,_0x51f124));},'consoleTrace':(_0x570a27,_0x348deb)=>{var _0x2cbaaf=_0x142125;_0x42452a['console'][_0x2cbaaf(0x173)][_0x2cbaaf(0x193)]!==_0x2cbaaf(0x110)&&_0x394580(_0x4745e6(_0x1c5526('trace',_0x570a27,_0x519394(),_0x141983,_0x348deb)));},'consoleTime':_0xecbd83=>{_0x5e9d0b(_0xecbd83);},'consoleTimeEnd':(_0x13e425,_0x40f16b)=>{_0xf392f0(_0x40f16b,_0x13e425);},'autoLog':(_0xd6728,_0x4e573a)=>{var _0x1721d8=_0x142125;_0x394580(_0x1c5526(_0x1721d8(0x173),_0x4e573a,_0x519394(),_0x141983,[_0xd6728]));},'autoLogMany':(_0x120e61,_0x50254e)=>{var _0x23a271=_0x142125;_0x394580(_0x1c5526(_0x23a271(0x173),_0x120e61,_0x519394(),_0x141983,_0x50254e));},'autoTrace':(_0x13600e,_0x4b15ed)=>{var _0x1d8a22=_0x142125;_0x394580(_0x4745e6(_0x1c5526(_0x1d8a22(0x1b4),_0x4b15ed,_0x519394(),_0x141983,[_0x13600e])));},'autoTraceMany':(_0x138c2e,_0x56c619)=>{var _0x3be250=_0x142125;_0x394580(_0x4745e6(_0x1c5526(_0x3be250(0x1b4),_0x138c2e,_0x519394(),_0x141983,_0x56c619)));},'autoTime':(_0x24f97f,_0x5d6b97,_0x482e17)=>{_0x5e9d0b(_0x482e17);},'autoTimeEnd':(_0x487443,_0x83184a,_0x16136b)=>{_0xf392f0(_0x83184a,_0x16136b);},'coverage':_0x20834a=>{var _0x5d2895=_0x142125;_0x394580({'method':_0x5d2895(0x1ae),'version':_0x11f33d,'args':[{'id':_0x20834a}]});}};let _0x394580=q(_0x42452a,_0x19f01a,_0x53e950,_0x4642e0,_0x357d6f,_0xb78aee,_0x56dead),_0x141983=_0x42452a['_console_ninja_session'];return _0x42452a['_console_ninja'];})(globalThis,_0x5e5252(0x12c),_0x5e5252(0x117),_0x5e5252(0x1a0),_0x5e5252(0x1a5),'1.0.0',_0x5e5252(0x106),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x5e5252(0x1ad),'',_0x5e5252(0x1dc));")}catch(e){}}function l(e,...t){try{h().consoleLog(e,t)}catch(e){}return t}},"./src/components/audio-player.ts":(e,t,i)=>{i.r(t),i.d(t,{AudioPlayer:()=>a});var s=i("./src/constants/index.ts");class a{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=n.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const e=s.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(e),a.audioBuffers.set(e,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(e){return void console.error("Error loading or decoding click sound:",e)}if(this.clickSoundBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.clickSoundBuffer,e.connect(this.audioContext.destination),e.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(e){return new Promise((async(t,i)=>{try{const i=await fetch(e),s=await i.arrayBuffer();t(await this.audioContext.decodeAudioData(s))}catch(e){console.error("Error loading or decoding audio:",e),i(e)}}))}async preloadPromptAudio(e){const t=await this.loadAndDecodeAudio(e);t&&(this.promptAudioBuffer=t)}async preloadGameAudio(e){if(a.audioBuffers.has(e))return;const t=await this.loadAndDecodeAudio(e);t&&a.audioBuffers.set(e,t)}playAudio(e){const t=a.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}}playFeedbackAudios=(e=!1,...t)=>{t.length>0&&(this.audioQueue=t,this.playFetch(0,e))};playPromptAudio=e=>{if(this.promptAudioBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.promptAudioBuffer,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((e=>{e.stop()})),this.audioSourcs=[]};playFetch=(e,t)=>{e>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[e]&&fetch(this.audioQueue[e]).then((e=>e.arrayBuffer())).then((i=>{this.audioContext?.decodeAudioData(i,(i=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=i,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=t,this.sourceNode.onended=()=>this.handleAudioEnded(e,t),this.sourceNode.start()}))}))};handleAudioEnded=(e,t)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(e+1,t)}}class n{static instance=null;static getAudioContext(){return n.instance||(n.instance=new(window.AudioContext||window.webkitAudioContext)),n.instance}}},"./src/components/background.ts":(e,t,i)=>{i.r(t),i.d(t,{Background:()=>x});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts"),n={bgImg:a.DEFAULT_BACKGROUND_1,hillImg:a.ASSETS_PATH_HILL,pillerImg:a.ASSETS_PATH_TOTEM,fenchImg:a.ASSETS_PATH_FENCE,autumnBgImg:a.AUTUMN_BACKGROUND_1,autumnHillImg:a.AUTUMN_HILL_1,autumnPillerImg:a.AUTUMN_PILLAR_1,autumnSignImg:a.AUTUMN_SIGN_1,autumnFenceImg:a.AUTUMN_FENCE_1,winterBgImg:a.WINTER_BACKGROUND_1,winterHillImg:a.WINTER_HILL_1,winterSignImg:a.WINTER_SIGN_1,winterFenceImg:a.WINTER_FENCE_1,winterPillerImg:a.WINTER_PILLAR_1};class x{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(e,t,i,a){this.width=t,this.height=i,this.context=e,this.levelNumber=a,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,s.loadImages)(n,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=.1*t.width+.15*t.width/2,this.posY=.2*t.height,this.context=e,this.canvas=t,(0,s.loadImages)({cancel_button_image:a.CANCEL_BTN_IMG},(e=>{this.cancel_button_image=e.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/close-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,i,n){this.posX=i,this.posY=n,this.context=e,this.canvas=t,(0,s.loadImages)({close_button_image:a.MAP_BTN_IMG},(e=>{this.close_button_image=e.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:n}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/index.ts":(e,t,i)=>{i.r(t),i.d(t,{CancelButton:()=>a.default,CloseButton:()=>s.default,NextButton:()=>n.default,NoButton:()=>x.default,PauseButton:()=>o.default,PlayButton:()=>c.default,RetryButton:()=>r.default,YesButton:()=>_.default});var s=i("./src/components/buttons/close-button.ts"),a=i("./src/components/buttons/cancel-button.ts"),n=i("./src/components/buttons/next-button.ts"),x=i("./src/components/buttons/no-button.ts"),o=i("./src/components/buttons/pause-button.ts"),r=i("./src/components/buttons/retry-button.ts"),_=i("./src/components/buttons/yes-button.ts"),c=i("./src/components/buttons/play-button.ts")},"./src/components/buttons/next-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,i,n,x){this.posX=n,this.posY=x,this.context=e,this.width=t,this.height=i,(0,s.loadImages)({next_button_image:a.NEXT_BTN_IMG},(e=>{this.next_button_image=e.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/no-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,i,n){this.posX=i+5,this.posY=n+10,this.context=e,this.canvas=t,(0,s.loadImages)({no_button_image:a.CANCEL_BTN_IMG},(e=>{this.no_button_image=e.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/pause-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=t.width-.09*t.height,this.posY=0,this.context=e,this.canvas=t,(0,s.loadImages)({pause_button_image:a.PAUSE_BTN_IMG},(e=>{this.pause_button_image=e.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.08,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/play-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>o});var s=i("./src/constants/index.ts"),a=i("./src/Firebase/firebase-integration.ts"),n=i("./src/common/index.ts"),x=i("./src/data/index.ts");class o{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(e,t,i,x){this.posX=i,this.posY=x,this.context=e,this.canvas=t,this.firebaseIntegration=new a.FirebaseIntegration,this.init(),this.images={pause_button_image:s.PLAY_BTN_IMG},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}async init(){const e=await(0,x.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(e,t){const i=Math.sqrt((e-this.posX-this.canvas.width/6)*(e-this.posX-this.canvas.width/6)+(t-this.posY-this.canvas.width/6)*(t-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),i<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const e={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(e)}}},"./src/components/buttons/retry-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,i,n){this.posX=i,this.posY=n,this.context=e,this.canvas=t,(0,s.loadImages)({retry_button_image:a.RETRY_BTN_IMG},(e=>{this.retry_button_image=e.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:n}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/yes-button.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,i,n){this.posX=i-5,this.posY=n,this.context=e,this.canvas=t,(0,s.loadImages)({yes_button_image:a.YES_BTN_IMG},(e=>{this.yes_button_image=e.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const i=(0,s.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/feedback-particle-effect/feedback-text-effects.ts":(e,t,i)=>{i.r(t),i.d(t,{FeedbackTextEffects:()=>n});var s=i("./src/components/feedback-particle-effect/text-particle.ts"),a=i("./src/common/index.ts");class n{context;canvasWidth;canvasHeight;textX;textY;fontSize;lineHeight;maxTextWidth;particleDuration;startTime;particles;gap;mouse;textWorker;constructor(e,t,i){this.context=e,this.canvasWidth=t,this.canvasHeight=i,this.textX=this.canvasWidth/1.8,this.textY=this.canvasHeight/2,this.fontSize=this.canvasWidth/7.5,this.lineHeight=.8*this.fontSize,this.maxTextWidth=5*this.canvasWidth,this.particleDuration=5e3,this.startTime=null,this.particles=[],this.gap=3,this.mouse={radius:2e3,x:0,y:0},this.textWorker=new Worker(window.feedbackTextWorkerPath),this.textWorker.addEventListener("message",this.handleTextWorkerMessage.bind(this))}wrapText(e){const t=this.context.createLinearGradient(0,0,this.canvasWidth,this.canvasHeight);t.addColorStop(.3,"#F8E218"),t.addColorStop(.5,"#F8E218"),t.addColorStop(.7,"#E39D37"),this.context.fillStyle=t,this.context.textAlign="center",this.context.textBaseline="middle",this.context.lineWidth=3,this.context.strokeStyle="#A46225",this.context.font=`${this.fontSize-.3*e.length}px ${a.font}, monospace`;let i=[],s=e.split(" "),n=0,x="";for(let e=0;e<s.length;e++){let t=x+s[e]+" ";this.context.measureText(t).width>this.maxTextWidth?(x=s[e]+"",n++):x=t,i[n]=x}let o=this.lineHeight*n;this.textY=this.canvasHeight/4.2-o/2,e=e.trim(),i.forEach(((e,t)=>{let i=e.lastIndexOf(" ",e.lastIndexOf(" ")-1);if(this.fontSize*e.length>1.7*this.canvasWidth&&-1!=i){let s=e.slice(0,i),a=" "+e.slice(i+1);this.context.fillText(s,this.textX,this.textY+t*this.lineHeight),this.context.fillText(a,this.textX,this.textY+t*this.lineHeight+this.canvasHeight/12)}else this.context.fillText(e,this.textX,this.textY+t*this.lineHeight)})),this.convertToParticle()}handleTextWorkerMessage(e){this.particles=e.data.map((({x:e,y:t,color:i})=>new s.TextParticle(this,e,t,i)))}convertToParticle(){const e=this.context.getImageData(0,0,this.canvasWidth,this.canvasHeight);this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.textWorker.postMessage({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,gap:this.gap,pixels:e.data})}render(){this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.particles.forEach((e=>{e.draw(),e.update()}))}updateParticles(){this.textWorker.postMessage({particles:this.particles,particleDuration:this.particleDuration,startTime:this.startTime})}clearParticle(){this.particles=[]}unregisterEventListener(){this.textWorker.removeEventListener("message",this.handleTextWorkerMessage),this.textWorker.terminate()}}},"./src/components/feedback-particle-effect/text-particle.ts":(e,t,i)=>{i.r(t),i.d(t,{TextParticle:()=>s});class s{feedbackTextEffects;x;y;color;originX;originY;size;ease;constructor(e,t,i,s){this.feedbackTextEffects=e,this.x=Math.random()*this.feedbackTextEffects.canvasWidth,this.y=0,this.color=s,this.originX=t,this.originY=i,this.size=this.feedbackTextEffects.gap,this.ease=.1*Math.random()+.055}draw(){this.feedbackTextEffects.context.fillStyle=this.color,this.feedbackTextEffects.context.fillRect(this.x,this.y,this.size,this.size)}update(){this.x+=(this.originX-this.x)*this.ease,this.y+=this.originY-this.y}}},"./src/components/index.ts":(e,t,i)=>{i.r(t),i.d(t,{AudioPlayer:()=>h.AudioPlayer,Background:()=>c.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>a.LevelIndicators,Monster:()=>r.Monster,PauseButton:()=>s.default,PromptText:()=>n.PromptText,StoneHandler:()=>x.default,TimerTicking:()=>_.TimerTicking,TrailEffect:()=>l.default,Tutorial:()=>o.Tutorial});var s=i("./src/components/buttons/pause-button.ts"),a=i("./src/components/level-indicator.ts"),n=i("./src/components/prompt-text.ts"),x=i("./src/components/stone-handler.ts"),o=i("./src/components/tutorial.ts"),r=i("./src/components/monster.ts"),_=i("./src/components/timer-ticking.ts"),c=i("./src/components/background.ts"),d=i("./src/components/feedback-particle-effect/feedback-text-effects.ts"),h=i("./src/components/audio-player.ts"),l=i("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(e,t,i)=>{i.r(t),i.d(t,{LevelIndicators:()=>x});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts"),n=i("./src/events/index.ts");class x extends n.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(e,t,i){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.activeIndicators=i,this.images={level_indicator:a.LEVEL_INDICATOR,bar_empty:a.BAR_EMPTY,bar_full:a.BAR_FULL},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}setIndicators(e){this.activeIndicators=e}addDropStoneEvent(){document.addEventListener("dropstone",(e=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var e=0;e<5;e++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(e=0;e<this.activeIndicators;e++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(e){}handleLoadPuzzle(e){this.setIndicators(e.detail.counter)}}},"./src/components/monster.ts":(e,t,i)=>{i.r(t),i.d(t,{Monster:()=>n});var s=i("./src/common/index.ts"),a=i("./src/events/index.ts");class n extends a.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(e,t,i){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.game=e,this.monsterPhase=t,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.changeToIdleAnimation(),this.imagesLoaded=!0,i&&i()}))}update(e){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=e,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(e){this.image.src=e}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(e){e.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(e){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(e,t){if(Math.sqrt((e-this.x-this.width/4)*(e-this.x-this.width/4)+(t-this.y-this.height/2.2)*(t-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>r});var s=i("./src/components/buttons/index.ts"),a=i("./src/common/index.ts"),n=i("./src/components/index.ts"),x=i("./src/components/popups/sure-popup.ts"),o=i("./src/constants/index.ts");class r{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(e,t,i,r,_){this.canvas=e,this.callback=t,this.gameplayData=_,this.switchToLevelSelection=i,this.reloadScene=r;const c=document.getElementById("canvas");this.context=c.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.cancelButton=new s.CancelButton(this.context,this.canvas),this.retryButton=new s.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new s.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,a.loadImages)({pop_up_image:o.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new x.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new x.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(a.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var i=t.getBoundingClientRect();const s=e.clientX-i.left,n=e.clientY-i.top;this.cancelButton.onClick(s,n)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(s,n)&&("english"==a.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(s,n)&&("english"==a.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==a.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==a.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(o.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(a.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>o});var s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),n=i("./src/components/buttons/index.ts"),x=i("./src/constants/index.ts");class o{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(e,t,i){this.canvas=e,this.yesCallback=t,this.noCallback=i,this.context=this.canvas.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.yesButton=new n.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new n.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,s.loadImages)({pop_up_image:x.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(s.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var i=t.getBoundingClientRect();const s=e.clientX-i.left,a=e.clientY-i.top;this.yesButton.onClick(s,a)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(s,a)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(s.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(e,t,i)=>{i.r(t),i.d(t,{PromptText:()=>o});var s=i("./src/events/index.ts"),a=i("./src/common/index.ts"),n=i("./src/components/index.ts"),x=i("./src/constants/index.ts");class o extends s.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(e,t,i,s,x){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.levelData=s,this.rightToLeft=x,this.currentPromptText=i.prompt.promptText,this.currentPuzzleData=i,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=e=>{const t=document.getElementById("canvas");e.preventDefault();var i=t.getBoundingClientRect();const s=e.clientX-i.left,a=e.clientY-i.top;this.onClick(s,a)&&this.playSound()};getPromptAudioUrl=()=>a.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(a.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(e,t){return Math.sqrt(e-this.width/3)<12&&Math.sqrt(t-this.height/5.5)<10}setCurrrentPuzzleData(e){this.currentPuzzleData=e,this.currentPromptText=e.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var e=this.width/2;const t=.26*this.height;this.context.textAlign="center";var i=this.calculateFont();const s=this.promptImageWidth,n=this.promptImageHeight;if(this.context.font=`${i}px ${a.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var x=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],e+this.context.measureText(x).width/2,t),this.context.fillStyle="black",this.context.fillText(x,e-this.context.measureText(this.targetStones[0]).width/2,t)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,s/4,n/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){e-=.5*this.context.measureText(this.currentPromptText).width;for(let i=this.targetStones.length-1;i>=0;i--)this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[i],e,t)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[i],e,t)),e=e+this.context.measureText(this.targetStones[i]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,s/4,n/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const e=1.25*(this.width-s),t=.33*(this.height-n);this.context.drawImage(this.promptPlayButton,e,t,s/4,n/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,e,t)):this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,s/4,n/4)}drawOthers(){const e=this.currentPromptText.split(""),t=(this.width,.28*this.height),i=this.promptImageWidth,s=this.promptImageHeight;var n=this.calculateFont();this.context.font=`${n}px ${a.font}, monospace`;let x=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var r=this.currentPuzzleData.targetStones[0].split("");for(let a=0;a<e.length;a++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){r.includes(e[a])?(r=r.slice(1,r.length),this.context.fillStyle="red",this.context.fillText(e[a],x,t)):(this.context.fillStyle="black",this.context.fillText(e[a],x,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,i/4,s/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>a||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(e[a],x,t)):(this.context.fillStyle="red",this.context.fillText(e[a],x,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,i/4,s/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,i/4,s/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,i/4,s/4)}o=(this.context.measureText(e[a]).width+this.context.measureText(e[a+1]).width)/2,x+=o}}draw(e){if(this.updateScaling(),this.time=e<17?this.time+Math.floor(e):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const e=this.promptImageWidth*this.scale,t=this.promptImageHeight*this.scale,i=(this.width-e)/2,s=(this.height-t)/5;this.context.drawImage(this.prompt_image,i,s,e,t),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[e.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(e){this.droppedStones=e}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const e=this.loadImage(this.prompt_image,x.PROMPT_TEXT_BG),t=this.loadImage(this.promptPlayButton,x.PROMPT_PLAY_BUTTON);await Promise.all([e,t]),this.imagesLoaded=!0}loadImage(e,t){return new Promise(((i,s)=>{e.onload=()=>{i()},e.src=t,e.onerror=e=>{s(e)}}))}}},"./src/components/stone-handler.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>r});var s=i("./src/common/index.ts"),a=i("./src/events/index.ts"),n=i("./src/components/index.ts"),x=i("./src/data/index.ts"),o=i("./src/constants/index.ts");class r extends a.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==x.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(e,t,i,a,x,r){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.puzzleNumber=i,this.levelData=a,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(o.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(x),this.puzzleStartTime=new Date,this.tutorial=new n.Tutorial(e,t.width,t.height,i),this.stonebg=new Image,this.stonebg.src=o.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new n.AudioPlayer,this.stonebg.onload=e=>{this.createStones(this.stonebg)},this.audioPlayer=new n.AudioPlayer,this.timerTickingInstance=r,document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(e){const t=this.getFoilStones();for(let i=0;i<t.length;i++)t[i]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[i]),this.foilStones.push(new s.StoneConfig(this.context,this.canvas.width,this.canvas.height,t[i],this.stonePos[i][0],this.stonePos[i][1],e,this.timerTickingInstance,i==t.length-1?this.tutorial:null))}draw(e){for(let t=0;t<this.foilStones.length;t++)this.foilStones[t].draw(e);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}initializeStonePos(){let e=32;this.stonePos=[[this.canvas.width/5-e,this.canvas.height/1.9-e],[this.canvas.width/2-e,this.canvas.height/1.15-e],[this.canvas.width/3.5+this.canvas.width/2-e,this.canvas.height/1.2-e],[this.canvas.width/4-e,this.canvas.height/1.28-e],[this.canvas.width/7-e,this.canvas.height/1.5-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.9-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.42-e],[this.canvas.width/6-e,this.canvas.height/1.1-e]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(e){this.currentPuzzleData=this.levelData.puzzles[e],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(e){this.foilStones=[]}handleLoadPuzzle(e){this.foilStones=[],this.tutorial.setPuzzleNumber(e.detail.counter),this.puzzleNumber=e.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(e,t,i=!1){const s=i?e==this.correctTargetStone.substring(0,e.length):e==this.correctTargetStone;return this.processLetterDropFeedbackAudio(t,s,i,e),s}processLetterDropFeedbackAudio(e,t,i,s){if(t){(i?s===this.getCorrectTargetStone():t)?this.playCorrectAnswerFeedbackSound(e):this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,(0,o.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,o.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?o.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((e=>{const t=this.currentPuzzleData.foilStones.indexOf(e);-1!==t&&this.currentPuzzleData.foilStones.splice(t,1)}));const e=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(e>8){const t=e-8;this.currentPuzzleData.foilStones.splice(0,t)}return this.currentPuzzleData.targetStones.forEach((e=>{this.currentPuzzleData.foilStones.push(e)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(e){return[e.fantastic,e.great,e.amazing]}setGamePause(e){this.isGamePaused=e}playCorrectAnswerFeedbackSound(e){const t=s.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,(0,o.AUDIO_PATH_CHEERING_FUNC)(t),o.AUDIO_PATH_POINTS_ADD,s.Utils.getConvertedDevProdURL(this.feedbackAudios[e])),this.correctStoneAudio.play()}}},"./src/components/timer-ticking.ts":(e,t,i)=>{i.r(t),i.d(t,{TimerTicking:()=>o});var s=i("./src/common/index.ts"),a=i("./src/events/index.ts"),n=i("./src/components/index.ts"),x=i("./src/constants/index.ts");class o extends a.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(e,t,i){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=i,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new n.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:x.TIMER_EMPTY,rotating_clock:x.ROTATING_CLOCK,timer_full:x.TIMER_FULL},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(e){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*e),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(x.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(e,t,i)=>{i.r(t),i.d(t,{default:()=>s});class s{canvas;ctx;particles;mouse;constructor(e){this.canvas=e,this.ctx=e.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0}}init(){this.draw()}draw(){this.drawTrail();let e=[];for(let t=0;t<this.particles.length;t++)this.particles[t].time<=this.particles[t].ttl&&e.push(this.particles[t]);this.particles=e}drawTrail(){for(let e=0;e<this.particles.length;e++)this.particles[e].update(),this.particles[e].draw()}addTrailParticlesOnMove(e,t){this.mouse.x=e,this.mouse.y=t,this.particles.push(new a(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class a{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(e,t){this.ctx=e,this.rgb=["rgb(255,255,255,255)","rgb(243,208,144,255)","rgb(229,170,100,255)"],this.start={x:t.x+this.getRandomInt(-5,5),y:t.y+this.getRandomInt(-5,5),size:1},this.end={x:this.start.x+this.getRandomInt(-10,10),y:this.start.y+this.getRandomInt(-20,20)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=45,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}update(){if(this.time<=this.ttl){const e=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(e)),this.x=this.x+.001*(this.end.x-this.x),this.y=this.y+.001*(this.end.y-this.y)}this.time++}draw(){this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(e,t){return Math.round(Math.random()*(t-e))+e}easeOutQuart(e){return 1-Math.pow(1-e,4)}}},"./src/components/tutorial.ts":(e,t,i)=>{i.r(t),i.d(t,{Tutorial:()=>x});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts"),n=i("./src/data/index.ts");class x{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(e,t,i,n){this.width=t,this.height=i,this.context=e,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=n>=0?n:null,this.tutorialImg=new Image,this.tutorialImg.src=a.TUTORIAL_HAND,this.drawRipple=(0,s.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(e){this.startx=e[0]-22,this.starty=e[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(e){this.endTutorial=e}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(e,t,i){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*e:this.x-this.absdx*e,this.y=this.dy>=0?this.y+this.absdy*e:this.y-this.absdy*e;const s=this.x-this.endx+this.absdx,a=this.y-this.endy+this.absdy;let n=100*Math.sqrt(s*s+a*a)/this.monsterStoneDifference;if(n<15)n>1?this.createHandScaleAnimation(e,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(n>80)this.createHandScaleAnimation(e,this.startx+15,this.starty+10,!1);else{let e=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(t,this.x,this.y+20,i,i),this.context.globalAlpha=e,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(e,t,i,s){this.totalTime+=Math.floor(e);const a=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),n=this.tutorialImg.width*a,x=this.tutorialImg.height*a;this.context.drawImage(this.tutorialImg,t,i,n,x),!s&&this.drawRipple(t+.02*this.width,i+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(e,t,i,s){const a=(i-t)/2,n=Math.PI/s;return t+a*Math.sin(n*e)}clickOnMonsterTutorial(e){if(this.shouldPlayMonsterClickTutorialAnimation()){const t=2e3,i=this.height/1.9+this.tutorialImg.height/.8,s=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let a;const n=this.endx;this.totalTime<t/2?(a=s+this.totalTime/(t/2)*(i-s),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.5,!0)):(a=i-(this.totalTime-t/2)/(t/2)*(i-s),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,n,a,this.tutorialImg.width,this.tutorialImg.height),a<=s&&(this.totalTime=0),this.totalTime+=e}}shouldPlayTutorial(){return n.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return n.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(e){this.puzzleNumber=e}setPlayMonsterClickAnimation(e){this.playMnstrClkTtrlAnim=e}}},"./src/compositions/background/index.ts":(e,t,i)=>{i.r(t),i.d(t,{BACKGROUND_ASSET_LIST:()=>n,autumBgDrawing:()=>_,createBackground:()=>x,defaultBgDrawing:()=>r,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>o,winterBgDrawing:()=>c});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");const n={summer:{BG_GROUP_IMGS:a.DEFAULT_BG_GROUP_IMGS,draw:r},autumn:{BG_GROUP_IMGS:a.AUTUMN_BG_GROUP_IMGS,draw:_},winter:{BG_GROUP_IMGS:a.WINTER_BG_GROUP_IMGS,draw:c}};async function x(e,t,i,a,n){return{...{...n(e,t,i,{...await(0,s.syncLoadingImages)(a)})}}}const o=(e,t)=>{const i=Object.keys(t);let s=Math.floor(e/10)%i.length;return e>=30&&(s%=3),{...t[i[s]]}};function r(e,t,i,s){return{draw:()=>{e.drawImage(s?.DEFAULT_BACKGROUND_1,0,0,t,i),e.drawImage(s?.ASSETS_PATH_TOTEM,.6*t,i/6,t,i/2),e.drawImage(s?.ASSETS_PATH_FENCE,.4*-t,i/3,t,i/3),e.drawImage(s?.ASSETS_PATH_HILL,.25*-t,i/2,1.5*t,i/2)}}}function _(e,t,i,s){return{draw:()=>{e.drawImage(s.AUTUMN_BACKGROUND_1,0,0,t,i),e.drawImage(s.AUTUMN_PILLAR_1,.38*t,i/6,t/1.2,i/2),e.drawImage(s.AUTUMN_FENCE_1,.4*-t,i/4,t,i/2),e.drawImage(s.AUTUMN_HILL_1,.25*-t,i/2,1.5*t,i/2)}}}function c(e,t,i,s){return{draw:()=>{e.drawImage(s.WINTER_BACKGROUND_1,0,0,t,i),e.drawImage(s.WINTER_PILLAR_1,.38*t,i/6,t/1.2,i/2),e.drawImage(s.WINTER_FENCE_1,.4*-t,i/4,t,i/2),e.drawImage(s.WINTER_HILL_1,.25*-t,i/2,1.5*t,i/2)}}}function d(e,t,i,s){return{draw:()=>{e.drawImage(s?.LEVEL_SELECTION_BACKGROUND,0,0,t,i)}}}},"./src/constants/index.ts":(e,t,i)=>{i.r(t),i.d(t,{ASSETS_PATH_BG_01:()=>H,ASSETS_PATH_FENCE:()=>W,ASSETS_PATH_HILL:()=>G,ASSETS_PATH_MONSTER_IDLE:()=>V,ASSETS_PATH_STONE_PINK_BG:()=>F,ASSETS_PATH_TOTEM:()=>U,AUDIO_ARE_YOU_SURE:()=>O,AUDIO_INTRO:()=>M,AUDIO_LEVEL_LOSE:()=>z,AUDIO_LEVEL_WIN:()=>j,AUDIO_PATH_BTN_CLICK:()=>D,AUDIO_PATH_CHEERING_FUNC:()=>k,AUDIO_PATH_CORRECT_STONE:()=>L,AUDIO_PATH_EATS:()=>T,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>P,AUDIO_PATH_MONSTER_SPIT:()=>C,AUDIO_PATH_ON_DRAG:()=>N,AUDIO_PATH_POINTS_ADD:()=>A,AUDIO_TIMEOUT:()=>B,AUDIO_URL_PRELOAD:()=>R,AUTUMN_BACKGROUND_1:()=>X,AUTUMN_BG_GROUP_IMGS:()=>Be,AUTUMN_FENCE_1:()=>Z,AUTUMN_HILL_1:()=>$,AUTUMN_PILLAR_1:()=>K,AUTUMN_SIGN_1:()=>q,BACK_BTN_IMG:()=>Pe,BAR_EMPTY:()=>oe,BAR_FULL:()=>re,ButtonClick:()=>u,CANCEL_BTN_IMG:()=>Le,CLOUD_6:()=>ge,CLOUD_7:()=>pe,CLOUD_8:()=>me,DEFAULT_BACKGROUND_1:()=>Y,DEFAULT_BG_GROUP_IMGS:()=>Oe,DevelopmentServer:()=>w,EndScene1:()=>E,FeedbackAudio:()=>h,FirebaseUserClicked:()=>s,FirebaseUserInstall:()=>a,GAMEPLAY_BG_GROUP_IMGS:()=>Ne,GameScene1:()=>I,IntroMusic:()=>l,IsCached:()=>c,LEVEL_INDICATOR:()=>xe,LEVEL_SELECTION_BACKGROUND:()=>se,LevelEndAudio:()=>m,LevelSelection1:()=>S,MAP_BTN_IMG:()=>ye,MAP_ICON_IMG:()=>Se,MAP_ICON_SPECIAL_IMG:()=>Ie,MAP_LOCK_IMG:()=>Ee,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>Ce,NativePlayButton:()=>o,PAUSE_BTN_IMG:()=>we,PIN_STAR_1:()=>fe,PIN_STAR_2:()=>ue,PIN_STAR_3:()=>be,PLAY_BTN_IMG:()=>ve,POPUP_BG_IMG:()=>De,PROMPT_PLAY_BUTTON:()=>ne,PROMPT_TEXT_BG:()=>ae,PWAInstallStatus:()=>n,PhraseAudio:()=>p,PreviousPlayedLevel:()=>r,PromptAudio:()=>f,RETRY_BTN_IMG:()=>Ae,ROTATING_CLOCK:()=>ce,SCENE_NAME_GAME_PLAY:()=>Re,SCENE_NAME_LEVEL_END:()=>Fe,SCENE_NAME_LEVEL_SELECT:()=>je,SCENE_NAME_START:()=>ze,STAR_IMG:()=>Te,StartScene1:()=>y,StoneMusic:()=>g,StoreMonsterPhaseNumber:()=>_,TIMER_EMPTY:()=>_e,TIMER_FULL:()=>de,TUTORIAL_HAND:()=>he,TimeOver:()=>b,UrlSubstring:()=>v,UserCancelled:()=>x,WINTER_BACKGROUND_1:()=>J,WINTER_BG_GROUP_IMGS:()=>Me,WINTER_FENCE_1:()=>te,WINTER_HILL_1:()=>Q,WINTER_PILLAR_1:()=>ie,WINTER_SIGN_1:()=>ee,WIN_BG:()=>le,YES_BTN_IMG:()=>ke});const s="user_clicked",a="user_installed",n="pwa_installed_status",x="user_cancel_installation",o="native_playbutton_clicked",r="storePreviousPlayedLevel",_="storeMonsterPhaseNumber",c="is_cached",d="monster_audio",h="feedback_audio",l="intro_music",f="prompt_audio",u="button_click",b="time_over",g="stone_music",p="phrase_audio",m="level_end_audio",v="/feedthemonster",w="https://feedthemonsterdev.curiouscontent.org",y="StartScene1",S="LevelSelection1",I="GameScene1",E="EndScene1",T="./assets/audios/Eat.mp3",C="./assets/audios/MonsterSpit.mp3",P="./assets/audios/Disapointed-05.mp3",A="assets/audios/PointsAdd.wav",L="assets/audios/CorrectStoneFinal.mp3",k=e=>`./assets/audios/Cheering-0${e}.mp3`,D="./assets/audios/ButtonClick.mp3",N="./assets/audios/onDrag.mp3",O="./assets/audios/are-you-sure.mp3",B="./assets/audios/timeout.mp3",M="./assets/audios/intro.mp3",z="./assets/audios/LevelLoseFanfare.mp3",j="./assets/audios/LevelWinFanfare.mp3",R=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],F="./assets/images/stone_pink.webp",U="./assets/images/Totem_v02_v01.webp",H="./assets/images/bg_v01.webp",G="./assets/images/hill_v01.webp",W="./assets/images/fence_v01.webp",V="./assets/images/idle4.png",Y="./assets/images/bg_v01.webp",X="./assets/images/Autumn_bg_v01.webp",$="./assets/images/Autumn_hill_v01.webp",K="./assets/images/Autumn_sign_v01.webp",q="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_fence_v01.webp",J="./assets/images/Winter_bg_01.webp",Q="./assets/images/Winter_hill_v01.webp",ee="./assets/images/Winter_sign_v01.webp",te="./assets/images/Winter_fence_v01.webp",ie="./assets/images/Winter_sign_v01.webp",se="./assets/images/map.webp",ae="./assets/images/promptTextBg.webp",ne="./assets/images/promptPlayButton.webp",xe="./assets/images/levels_v01.webp",oe="./assets/images/bar_empty_v01.webp",re="./assets/images/bar_full_v01.webp",_e="./assets/images/timer_empty.webp",ce="./assets/images/timer.webp",de="./assets/images/timer_full.png",he="./assets/images/tutorial_hand.webp",le="./assets/images/WIN_screen_bg.webp",fe="./assets/images/pinStar1.webp",ue="./assets/images/pinStar2.webp",be="./assets/images/pinStar3.webp",ge="./assets/images/cloud_01.png",pe="./assets/images/cloud_02.png",me="./assets/images/cloud_03.png",ve="./assets/images/Play_button.webp",we="./assets/images/pause_v01.webp",ye="./assets/images/map_btn.webp",Se="./assets/images/mapIcon.webp",Ie="./assets/images/map_icon_monster_level_v01.webp",Ee="./assets/images/mapLock.webp",Te="./assets/images/star.webp",Ce="./assets/images/next_btn.webp",Pe="./assets/images/back_btn.webp",Ae="./assets/images/retry_btn.webp",Le="./assets/images/close_btn.webp",ke="./assets/images/confirm_btn.webp",De="./assets/images/popup_bg_v01.webp",Ne={ASSETS_PATH_TOTEM:U,DEFAULT_BACKGROUND_1:Y,ASSETS_PATH_HILL:G,ASSETS_PATH_FENCE:W,ASSETS_PATH_MONSTER_IDLE:V},Oe={DEFAULT_BACKGROUND_1:Y,ASSETS_PATH_HILL:G,ASSETS_PATH_TOTEM:U,ASSETS_PATH_FENCE:W},Be={AUTUMN_BACKGROUND_1:X,AUTUMN_HILL_1:$,AUTUMN_PILLAR_1:K,AUTUMN_SIGN_1:q,AUTUMN_FENCE_1:Z},Me={WINTER_BACKGROUND_1:J,WINTER_HILL_1:Q,WINTER_SIGN_1:ee,WINTER_FENCE_1:te,WINTER_PILLAR_1:ie},ze="StartScene",je="LevelSelection",Re="GamePlay",Fe="LevelEnd"},"./src/data/api-data.ts":(e,t,i)=>{i.r(t),i.d(t,{URL:()=>a,getData:()=>x,getFtmData:()=>n});var s=i("./src/common/index.ts");const a="./lang/"+s.lang+"/ftm_"+s.lang+".json";function n(){return fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json().then((e=>e))))}async function x(){return await n()}},"./src/data/data-modal.ts":(e,t,i)=>{i.r(t),i.d(t,{DataModal:()=>s,FeedbackAudios:()=>x,FeedbackTexts:()=>n,FoilStone:()=>_,LevelMeta:()=>h,Levels:()=>o,OtherAudios:()=>a,Prompt:()=>d,Puzzles:()=>r,TargetStone:()=>c});class s{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(e,t,i,s,o,r,_,c,d){this.title=e,this.otherAudios=new a(t),this.levels=this.getLevels(i),this.FeedbackTexts=new n(s),this.FeedbackAudios=new x(r),this.rightToLeft=o,this.majVersion=_,this.minVersion=c,this.version=d}getLevels(e){let t=[];for(let i=0;i<e.length;i++)t.push(new o(e[i]));return t}}class a{selctYourPlayer;watchMeGrow;areYouSure;constructor(e){this.selctYourPlayer=e["Select your player"],this.watchMeGrow=e["Watch me grow"],this.areYouSure=e["Are you sure"]}}class n{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class x{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class o{puzzles;levelMeta;levelNumber;constructor(e){this.puzzles=this.getPuzzleData(e),this.levelMeta=new h(e.LevelMeta),this.levelNumber=e.LevelNumber}getPuzzleData(e){let t=[];return e.Puzzles.map(((e,i)=>{t.push(new r(e))})),t}}class r{segmentNumber;prompt;foilStones;targetStones;constructor(e){this.segmentNumber=e.SegmentNumber,this.prompt=new d(e.prompt),this.foilStones=this.getFoilStones(e),this.targetStones=this.getTargetStones(e)}getFoilStones(e){let t=[];return e.foilstones.map(((e,i)=>{t.push(e.StoneText)})),t}getTargetStones(e){let t=[];return e.targetstones.map(((e,i)=>{t.push(e.StoneText)})),t}}class _{stoneText;constructor(e){this.stoneText=e}}class c{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(e){this.promptText=e.PromptText,this.promptAudio=e.PromptAudio}}class h{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(e){this.promptFadeOut=e.PromptFadeout,this.letterGroup=e.LetterGroup,this.levelNumber=e.LevelNumber,this.protoType=e.PromptType,this.levelType=e.LevelType}}},"./src/data/game-score.ts":(e,t,i)=>{i.r(t),i.d(t,{GameScore:()=>a});var s=i("./src/common/index.ts");class a{static currentlanguage=s.lang;static setGameLevelScore(e,t){let i=this.calculateStarCount(t),s={levelName:e.levelMeta.levelType,levelNumber:e.levelMeta.levelNumber,score:t,starCount:i};this.setTotalStarCount(i);let a=this.getAllGameLevelInfo(),n=-1;for(let e=0;e<a.length;e++)if(a[e].levelNumber===s.levelNumber){n=e;break}-1!==n&&s.score>a[n].score?a[n]=s:a.push(s),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(a))}static getAllGameLevelInfo(){const e=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==e?[]:JSON.parse(e)}static setTotalStarCount(e){let t=this.getTotalStarCount()+e;localStorage.setItem(this.currentlanguage+"totalStarCount",t)}static getTotalStarCount(){const e=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==e?0:parseInt(e)}static calculateStarCount(e){return 200==e?1:300==e||400==e?2:500==e?3:0}static getDatafromStorage(){return s.Debugger.DebugMode?JSON.parse(localStorage.getItem(s.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(s.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(e,t,i)=>{i.r(t),i.d(t,{languageFontMapping:()=>s});const s={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(e,t,i)=>{i.r(t),i.d(t,{DataModal:()=>a.DataModal,FeedbackAudios:()=>a.FeedbackAudios,FeedbackTexts:()=>a.FeedbackTexts,FoilStone:()=>a.FoilStone,GameScore:()=>n.GameScore,LevelMeta:()=>a.LevelMeta,Levels:()=>a.Levels,OtherAudios:()=>a.OtherAudios,Prompt:()=>a.Prompt,Puzzles:()=>a.Puzzles,TargetStone:()=>a.TargetStone,URL:()=>s.URL,getData:()=>s.getData,getFtmData:()=>s.getFtmData,languageFontMapping:()=>x.languageFontMapping});var s=i("./src/data/api-data.ts"),a=i("./src/data/data-modal.ts"),n=i("./src/data/game-score.ts"),x=i("./src/data/i18-font-mapping.ts")},"./src/events/index.ts":(e,t,i)=>{i.r(t),i.d(t,{EventManager:()=>a});var s=i("./src/common/index.ts");class a{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(e){this.handler=e,this.stoneDropCallbackHandler=e.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=e.loadPuzzleCallbackHandler,document.addEventListener(s.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(s.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=e=>{this.stoneDropCallbackHandler(e)};handleLoadPuzzleEvent=e=>{this.loadPuzzleCallbackHandler(e)};unregisterEventListener=()=>{document.removeEventListener(s.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(s.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/sceneHandler/index.ts":(e,t,i)=>{i.r(t),i.d(t,{SceneHandler:()=>o});var s=i("./src/scenes/index.ts"),a=i("./src/data/index.ts"),n=i("./src/common/index.ts"),x=i("./src/constants/index.ts");class o{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;constructor(e,t){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new s.StartScene(e,t,this.switchSceneToLevelSelection),o.SceneName=x.StartScene1,this.loadingScreen=new s.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const e=t=>{this.animation(t),requestAnimationFrame(e)};requestAnimationFrame(e)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(n.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(n.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let e=a.GameScore.getTotalStarCount(),t=Math.floor(e/12)+1||1;return t<=4?t:4}animation=e=>{let t=e-this.lastTime;this.lastTime=e,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(t),o.SceneName===x.StartScene1?this.startScene.animation(t):o.SceneName===x.LevelSelection1?this.levelSelectionScene.drawLevelSelection():o.SceneName===x.GameScene1?this.gameplayScene.draw(t):o.SceneName===x.EndScene1&&this.levelEndScene.draw(t)};switchSceneToGameplay=(e,t)=>{this.showLoading(),this.dispose(t);let i=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new s.GameplayScene(this.canvas,e.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,e.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(x.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,i,this.data.FeedbackAudios),o.SceneName=x.GameScene1}),800)};switchSceneToEndLevel=(e,t,i,a)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(x.SCENE_NAME_GAME_PLAY),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new s.LevelEndScene(this.canvas,this.height,this.width,this.context,e,i,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,t),o.SceneName=x.EndScene1}),a?0:4e3)};switchSceneToLevelSelection=e=>{this.showLoading(),this.dispose(e),setTimeout((()=>{this.levelSelectionScene=new s.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),o.SceneName=x.LevelSelection1}),800)};dispose=e=>{e==x.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():e===x.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():e===x.SCENE_NAME_START?this.startScene.dispose():e==x.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=e=>{e.preventDefault(),localStorage.setItem(x.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(e,t,i)=>{i.r(t),i.d(t,{GameplayScene:()=>c});var s=i("./src/components/index.ts"),a=i("./src/components/popups/pause-popup.ts"),n=i("./src/common/index.ts"),x=i("./src/data/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/constants/index.ts"),_=i("./src/compositions/background/index.ts");class c{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;constructor(e,t,i,x,_,c,d,h,l,f,u){this.width=e.width,this.height=e.height,this.rightToLeft=_,this.canvas=e,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new s.TrailEffect(e),this.monsterPhaseNumber=i||1,this.levelData=t,this.switchSceneToEnd=c,this.levelNumber=d,this.switchToLevelSelection=h,this.reloadScene=l,this.jsonVersionNumber=f,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new s.PauseButton(this.context,this.canvas),this.timerTicking=new s.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new s.StoneHandler(this.context,this.canvas,this.counter,this.levelData,u,this.timerTicking),this.tutorial=new s.Tutorial(this.context,e.width,e.height),this.promptText=new s.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new s.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new s.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new a.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:t,selectedLevelNumber:d}),this.firebaseIntegration=new o.FirebaseIntegration,this.feedBackTextCanavsElement=document.getElementById("feedback-text"),this.feedBackTextCanavsElement.height=this.height,this.feedBackTextCanavsElement.width=this.width,this.feedbackTextEffects=new s.FeedbackTextEffects(this.feedBackTextCanavsElement.getContext("2d",{willReadFrequently:!0}),this.width,this.height),this.audioPlayer=new s.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=t.puzzles,this.feedBackTexts=x,this.images={profileMonster:r.ASSETS_PATH_MONSTER_IDLE},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}));var b=this.levelData.levelMeta.levelNumber;n.Debugger.DebugMode?localStorage.setItem(r.PreviousPlayedLevel+n.lang+"Debug",b):localStorage.setItem(r.PreviousPlayedLevel+n.lang,b),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,_.loadDynamicBgAssets)(this.levelData.levelNumber,_.BACKGROUND_ASSET_LIST);this.background=await(0,_.createBackground)(this.context,this.width,this.height,e,t)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(e){const t=Object.keys(this.feedBackTexts)[e];return this.feedBackTexts[t]}getRandomInt(e,t){const i=Object.values(this.feedBackTexts).filter((e=>null!=e)).length-1;return Math.floor(Math.random()*(i-e+1))+e}handleMouseUp=e=>{let t=this.canvas.getBoundingClientRect();const i=e.clientX-t.left,s=e.clientY-t.top;if(Math.sqrt((i-this.monster.x-this.canvas.width/4)**2+(s-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:e}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(e);break;case"Word":case"SoundWord":this.wordPuzzle(e,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const e=50,t=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<e&&this.pickedStoneObject.origx<t?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.clickTrailToggle=!1};handleMouseDown=e=>{let t=this.canvas.getBoundingClientRect();const i=e.clientX-t.left,s=e.clientY-t.top;for(let e of this.stoneHandler.foilStones){if(Math.sqrt((i-e.x)**2+(s-e.y)**2)<=40){this.pickedStoneObject=e,this.pickedStone=e,this.audioPlayer.playAudio(r.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};handleMouseMove=e=>{if(this.pickedStone){let t=this.canvas.getBoundingClientRect();const i=e.clientX-t.left,s=e.clientY-t.top;this.monster.changeToDragAnimation(),this.pickedStone.x=i,this.pickedStone.y=s,this.trailParticles?.addTrailParticlesOnMove(i,s)}else this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleMouseClick=e=>{let t=this.canvas.getBoundingClientRect();const i=e.clientX-t.left,s=e.clientY-t.top;this.monster.onClick(i,s)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(i,s)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(i,s)&&this.promptText.playSound()};handleTouchStart=e=>{const t=e.touches[0];this.handleMouseDown({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=e=>{const t=e.touches[0];this.handleMouseMove({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.addTrailParticlesOnMove(t.clientX,t.clientY)};handleTouchEnd=e=>{const t=e.changedTouches[0];this.handleMouseUp({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};draw(e){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+e,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(e),this.monster.update(e),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(e),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||(this.feedbackTextEffects.render(),0==this.counter&&this.tutorial.clickOnMonsterTutorial(e)),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(e)}addEventListeners(){this.handler.addEventListener(n.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(n.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(n.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(n.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(n.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(n.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(n.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=e=>{this.removeEventListeners(),this.stonesCount=1;const t=Boolean(e);if(t&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),x.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(x.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,t);else{const e=new CustomEvent(n.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(e)}),t?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.feedbackTextEffects.unregisterEventListener(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};letterPuzzle(e){const t=this.getRandomInt(0,1),i=this.stoneHandler.isStoneLetterDropCorrect(e,t);i&&this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(i)}wordPuzzle(e,t){this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const i=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+e;const s=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,i,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&s)return this.handleCorrectStoneDrop(i),this.handleStoneDropEnd(s,"Word"),void(this.stonesCount=1);s?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==n.lang?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation()}),2e3)):(this.handleStoneDropEnd(s,"Word"),this.stonesCount=1)}resetToIdleAnimation(e,t){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(e,t)}handleStoneDropEnd(e,t=null){this.logPuzzleEndFirebaseEvent(e,t),this.dispatchStoneDropEvent(e),this.loadPuzzle()}handleCorrectStoneDrop=e=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(e)),this.feedBackTextCanavsElement.style.zIndex="2"};dispatchStoneDropEvent(e){const t=new CustomEvent(n.STONEDROP,{detail:{isCorrect:e}});document.dispatchEvent(t)}initNewPuzzle(e){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,this.feedbackTextEffects.clearParticle(),this.feedBackTextCanavsElement.style.zIndex="0",document.dispatchEvent(e),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(e,t){let i=Date.now();const s={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:e?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==t?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(i-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(s)}logLevelEndFirebaseEvent(){let e=Date.now();const t={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:x.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(e-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(t)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(e,t,i)=>{i.r(t),i.d(t,{GameplayScene:()=>s.GameplayScene,LevelEndScene:()=>n.LevelEndScene,LevelSelectionScreen:()=>a.LevelSelectionScreen,LoadingScene:()=>x.LoadingScene,StartScene:()=>o.StartScene,TestGameplayScene:()=>r.TestGameplayScene});var s=i("./src/scenes/gameplay-scene.ts"),a=i("./src/scenes/level-selection-scene.ts"),n=i("./src/scenes/levelend-scene.ts"),x=i("./src/scenes/loading-scene.ts"),o=i("./src/scenes/start-scene.ts"),r=i("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(e,t,i)=>{i.r(t),i.d(t,{LevelSelectionScreen:()=>_});var s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),n=i("./src/data/index.ts"),x=i("./src/Firebase/firebase-integration.ts"),o=i("./src/compositions/background/index.ts"),r=i("./src/constants/index.ts");class _{canvas;data;width;height;levelButtonPos;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;constructor(e,t,i){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height;let o=this;this.callBack=i,this.levelsSectionCount=o.data.levels.length/10>Math.floor(o.data.levels.length/10)?Math.floor(o.data.levels.length/10)+1:Math.floor(o.data.levels.length/10),this.initialiseButtonPos(),this.levels=[],this.firebaseIntegration=new x.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(this.levelButtonPos),this.gameLevelData=n.GameScore.getAllGameLevelInfo(),this.audioPlayer=new a.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(s.Debugger.DebugMode?localStorage.getItem(r.PreviousPlayedLevel+s.lang+"Debug"):localStorage.getItem(r.PreviousPlayedLevel+s.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={mapIcon:r.MAP_ICON_IMG,mapIconSpecial:r.MAP_ICON_SPECIAL_IMG,mapLock:r.MAP_LOCK_IMG,star:r.STAR_IMG,nextbtn:r.NEXT_BTN_IMG,backbtn:r.BACK_BTN_IMG},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(r.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const e=await(0,n.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}setupBg=async()=>{this.background=await(0,o.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:r.LEVEL_SELECTION_BACKGROUND},o.levelSelectBgDrawing)};initialiseButtonPos(){this.levelButtonPos=[[[this.canvas.width/10,this.canvas.height/10],[this.canvas.width/2.5,this.canvas.height/10],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/10],[this.canvas.width/10,this.canvas.height/3],[this.canvas.width/2.5,this.canvas.height/3],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/3],[this.canvas.width/10,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.8],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.3]]]}createLevelButtons(e){let t=e[0],i=0;for(let e=0;e<10;e++){let e=new s.LevelConfig(t[i][0],t[i][1],i+1);this.levels.push(e),i+=1}}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(e){return e.touches||e.originalEvent.touches}handleTouchStart=e=>{const t=this.getTouches(e)[0];this.xDown=t.clientX,this.yDown=t.clientY};handleTouchMove=e=>{if(!this.xDown||!this.yDown)return;let t=e.touches[0].clientX,i=e.touches[0].clientY,s=this.xDown-t,a=this.yDown-i;Math.abs(s)>Math.abs(a)&&(s>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=e=>{e.preventDefault();let t=document.getElementById("canvas").getBoundingClientRect();const i=e.clientX-t.left,a=e.clientY-t.top,n=(e,t=1.3)=>i>=e&&i<e+this.canvas.height/10&&a>this.canvas.height/t&&a<this.canvas.height/t+this.canvas.height/10,x=n(.7*this.canvas.width),o=n(this.canvas.width/10);if(o||x){this.audioPlayer.playButtonClickSound();const e=this.levelSelectionPageIndex;x&&e!=10*this.levelsSectionCount-10?(this.levelSelectionPageIndex=e+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):o&&0!=e&&(this.levelSelectionPageIndex=e-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let e of this.levels)Math.sqrt((i-e.x-this.canvas.height/20)*(i-e.x-this.canvas.height/20)+(a-e.y-this.canvas.height/20)*(a-e.y-this.canvas.height/20))<45&&(s.Debugger.DebugMode||e.index+this.levelSelectionPageIndex-1<=this.unlockLevelIndex+1)&&(this.audioPlayer.playButtonClickSound(),this.levelNumber=e.index+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber))};drawLevel(e,t){let i=t.height/5,a=i/6;const n=[5,13,20,30,42];if(e.index+this.levelSelectionPageIndex<=this.data.levels.length){const t=e.index+this.levelSelectionPageIndex,x=n.includes(t);this.context.drawImage(x?this.loadedImages.mapIconSpecial:this.loadedImages.mapIcon,e.x,e.y,x?.9*i:i,x?.9*i:i),this.context.fillStyle="white",this.context.font=a+`px ${s.font}, monospace`,this.context.textAlign="center",this.context.fillText(e.index+this.levelSelectionPageIndex,e.x+i/3.5,e.y+i/3),this.context.font=a-i/30+`px ${s.font}, monospace`,s.Debugger.DebugMode&&this.context.fillText(this.data.levels[e.index+this.levelSelectionPageIndex-1].levelMeta.levelType,e.x+i/3.5,e.y+i/1.3)}}draw(){for(let e of this.levels)this.drawLevel(e,this.canvas)}downButton(e){e!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=e?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}drawStars(e){if(null!=e){if(null!=e.length)for(let t of e)this.unlockLevelIndex<parseInt(t.levelNumber)&&t.starCount>=2&&(this.unlockLevelIndex=parseInt(t.levelNumber));for(let t of this.levels)if(t.index+this.levelSelectionPageIndex<=this.data.levels.length){s.Debugger.DebugMode||t.index+this.levelSelectionPageIndex-1>this.unlockLevelIndex+1&&this.context.drawImage(this.loadedImages.mapLock,t.x,t.y,this.canvas.height/13,this.canvas.height/13);for(let i=0;i<e.length;i++)if(t.index-1+this.levelSelectionPageIndex==parseInt(e[i].levelNumber)){this.drawStar(t,this.canvas,e[i].starCount,this.context);break}}}}drawStar(e,t,i,s){let a=t.height/5;i>=1&&s.drawImage(this.loadedImages.star,e.x,e.y-.01*a,a/5,a/5),i>1&&s.drawImage(this.loadedImages.star,e.x+a/2.5,e.y-.01*a,a/5,a/5),3==i&&s.drawImage(this.loadedImages.star,e.x+a/5,e.y-.1*a,a/5,a/5)}startGame(e){this.dispose(),this.audioPlayer.stopAllAudios();const t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.logSelectedLevelEvent(),this.callBack(t,"LevelSelection")}logSelectedLevelEvent(){const e={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(e)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex),this.drawStars(this.gameLevelData))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(e,t,i)=>{i.r(t),i.d(t,{LevelEndScene:()=>r});var s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),n=i("./src/components/buttons/index.ts"),x=i("./src/compositions/background/index.ts"),o=i("./src/constants/index.ts");class r{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(e,t,i,x,r,_,c,d,h,l){this.canvas=e,this.height=t,this.width=i,this.context=x,this.monster=new a.Monster(this.canvas,l,this.switchToReactionAnimation),this.switchToGameplayCB=c,this.switchToLevelSelectionCB=d,this.data=h,this.starDrawnCount=0,this.closeButton=new n.CloseButton(x,e,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new n.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new n.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new a.AudioPlayer,this.starCount=r,this.currentLevel=_,this.images={backgroundImg:o.WIN_BG,star1Img:o.PIN_STAR_1,star2Img:o.PIN_STAR_2,star3Img:o.PIN_STAR_3,winBackgroundImg:o.DEFAULT_BACKGROUND_1},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new a.AudioPlayer,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,x.loadDynamicBgAssets)(this.currentLevel,x.BACKGROUND_ASSET_LIST);this.background=await(0,x.createBackground)(this.context,this.width,this.height,e,t)};switchToReactionAnimation=()=>{this.starCount<=1?((0,s.isDocumentVisible)()&&this.audioPlayer.playAudio(o.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,s.isDocumentVisible)()&&(this.audioPlayer.playAudio(o.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(o.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(e){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(e),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((e=>setTimeout((()=>{this.starDrawnCount=e.count}),e.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(s.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=e=>{var t=document.getElementById("canvas").getBoundingClientRect();const i=e.clientX-t.left,s=e.clientY-t.top;if(this.closeButton.onClick(i,s)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(i,s)){this.audioPlayer.playButtonClickSound();let e={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(e,"LevelEnd")}if(this.nextButton.onClick(i,s)&&this.starCount>=2){this.audioPlayer.playButtonClickSound();let e=Number(this.currentLevel)+1,t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.switchToGameplayCB(t,"LevelEnd")}};pauseAudios=()=>{(0,s.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(o.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((e=>clearTimeout(e))),document.getElementById("canvas").removeEventListener(s.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(e,t,i)=>{i.r(t),i.d(t,{LoadingScene:()=>n});var s=i("./src/common/index.ts"),a=i("./src/constants/index.ts");class n{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(e,t,i){this.canvas=document.getElementById("loading"),this.canvas.height=t,this.canvas.width=e,this.height=t,this.width=e,this.removeLoading=i,this.context=this.canvas.getContext("2d"),this.images={cloud6:a.CLOUD_6,cloud7:a.CLOUD_7,cloud8:a.CLOUD_8},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(e){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*e,this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(e,t,i)=>{i.r(t),i.d(t,{StartScene:()=>_});var s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),n=i("./src/common/index.ts"),x=i("./src/Firebase/firebase-integration.ts"),o=i("./src/compositions/background/index.ts"),r=i("./src/constants/index.ts");class _{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background;audioPlayer;toggleBtn;pwa_install_status;constructor(e,t,i){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new s.Monster(this.canvas,4),this.switchSceneToLevelSelection=i,this.audioPlayer=new s.AudioPlayer,this.pwa_status=localStorage.getItem(r.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg()}setupBg=async()=>{this.background=await(0,o.createBackground)(this.context,this.width,this.height,r.DEFAULT_BG_GROUP_IMGS,o.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,n.toggleDebugMode)(this.toggleBtn)))};animation=e=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.context.font=`${this.titleFont}px ${n.font}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(e),this.playButton.draw()};createPlayButton(){this.playButton=new a.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(e){e.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=e=>{let t=this;const i=document.getElementById("canvas");e.preventDefault();var s=i.getBoundingClientRect();const a=e.clientX-s.left,o=e.clientY-s.top,{excludeX:_,excludeY:c}=n.Utils.getExcludedCoordinates(i,15);a<_&&o<c||(x.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",r.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),t.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data.title.length}handlerInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(r.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(e,t,i)=>{i.r(t),i.d(t,{TestGameplayScene:()=>r});var s=i("./src/constants/index.ts"),a=i("./src/components/index.ts"),n=i("./src/components/buttons/index.ts"),x=i("./src/common/index.ts");const o=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),localStorage.setItem(s.PWAInstallStatus,"false")}));class r{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(e,t,i,n){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new a.Monster(this.canvas,0),console.log(...c("2510688200_69_4_69_51_4",Date.now," ::: ",performance.now)),this.switchSceneToLevelSelection=n,this.stoneHandler=new a.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new a.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new a.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new a.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(s.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=i,this.animation(0),this.images={pillerImg:s.ASSETS_PATH_TOTEM,bgImg:s.DEFAULT_BACKGROUND_1,hillImg:s.ASSETS_PATH_HILL,fenchImg:s.ASSETS_PATH_FENCE,profileMonster:s.ASSETS_PATH_MONSTER_IDLE},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{o.addEventListener("click",(()=>(0,x.toggleDebugMode)(o)))};handleMouseUp=e=>{let t=this;var i=document.getElementById("canvas").getBoundingClientRect();const s=e.clientX-i.left,a=e.clientY-i.top;Math.sqrt((s-t.monster.x-t.canvas.width/4)*(s-t.monster.x-t.canvas.width/4)+(a-t.monster.y-t.canvas.height/2.7)*(a-t.monster.y-t.canvas.height/2.7))<=60||t.monster.changeToIdleAnimation(),t.pickedStone=null};handleMouseDown=e=>{let t=this;var i=document.getElementById("canvas").getBoundingClientRect();const s=e.clientX-i.left,a=e.clientY-i.top;for(let e of t.stoneHandler.foilStones)Math.sqrt((s-e.x)*(s-e.x)+(a-e.y)*(a-e.y))<=40&&(this.pickedStone=e)};handleMouseMove=e=>{let t=this;var i=document.getElementById("canvas").getBoundingClientRect();const s=e.clientX-i.left,a=e.clientY-i.top;t.pickedStone&&(t.monster.changeToDragAnimation(),t.pickedStone.x=s,t.pickedStone.y=a)};animation=e=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(e),this.promptText.draw(e),this.stoneHandler.draw(e),this.levelIndicator.draw(),this.timerTicking.update(e))};draw(){}createPlayButton=()=>{this.playButton=new n.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(e){var t=e.touches[0],i=new MouseEvent("mousedown",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchmove",(function(e){var t=e.touches[0],i=new MouseEvent("mousemove",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchend",(function(e){var t=e.changedTouches[0],i=new MouseEvent("mouseup",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1)};handleMouseClick=e=>{let t=this;const i=document.getElementById("canvas");e.preventDefault();var a=i.getBoundingClientRect();const n=e.clientX-a.left,x=e.clientY-a.top;t.playButton.onClick(n,x)&&(t.firebase_analytics&&t.firebase_analytics.logEvent(s.FirebaseUserClicked,"click"),fbq("trackCustom",s.FirebaseUserClicked,{event:"click"}),o.style.display="none",t.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}function _(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x5e5252=_0x5724;(function(_0x2734d3,_0x3f13e4){var _0x33d76f=_0x5724,_0x2b91b1=_0x2734d3();while(!![]){try{var _0x3ec2c9=-parseInt(_0x33d76f(0x187))/0x1*(parseInt(_0x33d76f(0x1cf))/0x2)+parseInt(_0x33d76f(0x1ca))/0x3+-parseInt(_0x33d76f(0x157))/0x4*(-parseInt(_0x33d76f(0x121))/0x5)+-parseInt(_0x33d76f(0x135))/0x6*(-parseInt(_0x33d76f(0x1c3))/0x7)+-parseInt(_0x33d76f(0x114))/0x8+-parseInt(_0x33d76f(0x1d2))/0x9*(parseInt(_0x33d76f(0x15c))/0xa)+parseInt(_0x33d76f(0x125))/0xb*(parseInt(_0x33d76f(0x107))/0xc);if(_0x3ec2c9===_0x3f13e4)break;else _0x2b91b1['push'](_0x2b91b1['shift']());}catch(_0x59eed6){_0x2b91b1['push'](_0x2b91b1['shift']());}}}(_0x4ca8,0x95fb0));var K=Object[_0x5e5252(0x1d8)],Q=Object['defineProperty'],G=Object['getOwnPropertyDescriptor'],ee=Object[_0x5e5252(0x1da)],te=Object['getPrototypeOf'],ne=Object[_0x5e5252(0x148)]['hasOwnProperty'],re=(_0x459b06,_0x2c21e4,_0x6f5987,_0x35c3e0)=>{var _0x3f5eb1=_0x5e5252;if(_0x2c21e4&&typeof _0x2c21e4==_0x3f5eb1(0x1c9)||typeof _0x2c21e4==_0x3f5eb1(0x10a)){for(let _0x21828e of ee(_0x2c21e4))!ne[_0x3f5eb1(0x163)](_0x459b06,_0x21828e)&&_0x21828e!==_0x6f5987&&Q(_0x459b06,_0x21828e,{'get':()=>_0x2c21e4[_0x21828e],'enumerable':!(_0x35c3e0=G(_0x2c21e4,_0x21828e))||_0x35c3e0[_0x3f5eb1(0x1d9)]});}return _0x459b06;},V=(_0x10e0e7,_0x1cff15,_0x902688)=>(_0x902688=_0x10e0e7!=null?K(te(_0x10e0e7)):{},re(_0x1cff15||!_0x10e0e7||!_0x10e0e7['__es'+'Module']?Q(_0x902688,_0x5e5252(0x18d),{'value':_0x10e0e7,'enumerable':!0x0}):_0x902688,_0x10e0e7)),x=class{constructor(_0x4342de,_0x487c86,_0x1f6f2d,_0x3412f0,_0x258674,_0xf66d22){var _0x2b6eb1=_0x5e5252,_0x3a6920,_0xdb653b,_0x35b7ba,_0x2109ef;this[_0x2b6eb1(0x1a6)]=_0x4342de,this[_0x2b6eb1(0x17e)]=_0x487c86,this[_0x2b6eb1(0x1ac)]=_0x1f6f2d,this['nodeModules']=_0x3412f0,this[_0x2b6eb1(0xf7)]=_0x258674,this[_0x2b6eb1(0x1cc)]=_0xf66d22,this[_0x2b6eb1(0x171)]=!0x0,this[_0x2b6eb1(0x19e)]=!0x0,this[_0x2b6eb1(0x1e2)]=!0x1,this[_0x2b6eb1(0x12f)]=!0x1,this['_inNextEdge']=((_0xdb653b=(_0x3a6920=_0x4342de[_0x2b6eb1(0x166)])==null?void 0x0:_0x3a6920[_0x2b6eb1(0x180)])==null?void 0x0:_0xdb653b[_0x2b6eb1(0x15a)])==='edge',this[_0x2b6eb1(0x1d4)]=!((_0x2109ef=(_0x35b7ba=this[_0x2b6eb1(0x1a6)][_0x2b6eb1(0x166)])==null?void 0x0:_0x35b7ba['versions'])!=null&&_0x2109ef[_0x2b6eb1(0x177)])&&!this[_0x2b6eb1(0x11f)],this['_WebSocketClass']=null,this[_0x2b6eb1(0x194)]=0x0,this[_0x2b6eb1(0x1a4)]=0x14,this[_0x2b6eb1(0x185)]=_0x2b6eb1(0x11e),this[_0x2b6eb1(0x105)]=(this[_0x2b6eb1(0x1d4)]?'Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20':_0x2b6eb1(0x145))+this[_0x2b6eb1(0x185)];}async[_0x5e5252(0x152)](){var _0x24028e=_0x5e5252,_0x235667,_0x33fb83;if(this[_0x24028e(0x14b)])return this[_0x24028e(0x14b)];let _0x4aab77;if(this[_0x24028e(0x1d4)]||this[_0x24028e(0x11f)])_0x4aab77=this[_0x24028e(0x1a6)][_0x24028e(0x15e)];else{if((_0x235667=this[_0x24028e(0x1a6)][_0x24028e(0x166)])!=null&&_0x235667[_0x24028e(0x128)])_0x4aab77=(_0x33fb83=this['global'][_0x24028e(0x166)])==null?void 0x0:_0x33fb83[_0x24028e(0x128)];else try{let _0x40b98f=await import(_0x24028e(0x123));_0x4aab77=(await import((await import(_0x24028e(0x1ab)))[_0x24028e(0x158)](_0x40b98f[_0x24028e(0x190)](this[_0x24028e(0x198)],'ws/index.js'))[_0x24028e(0x197)]()))['default'];}catch{try{_0x4aab77=require(require('path')['join'](this[_0x24028e(0x198)],'ws'));}catch{throw new Error('failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket');}}}return this[_0x24028e(0x14b)]=_0x4aab77,_0x4aab77;}['_connectToHostNow'](){var _0x400417=_0x5e5252;this['_connecting']||this[_0x400417(0x1e2)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x400417(0x12f)]=!0x0,this[_0x400417(0x194)]++,this[_0x400417(0xfb)]=new Promise((_0x38b61d,_0x109924)=>{var _0x46302c=_0x400417;this['getWebSocketClass']()[_0x46302c(0x17d)](_0x417802=>{var _0x374283=_0x46302c;let _0x5bd05c=new _0x417802(_0x374283(0x11d)+(!this[_0x374283(0x1d4)]&&this['dockerizedApp']?'gateway.docker.internal':this[_0x374283(0x17e)])+':'+this[_0x374283(0x1ac)]);_0x5bd05c['onerror']=()=>{var _0x447bc7=_0x374283;this[_0x447bc7(0x171)]=!0x1,this['_disposeWebsocket'](_0x5bd05c),this[_0x447bc7(0x132)](),_0x109924(new Error(_0x447bc7(0x126)));},_0x5bd05c[_0x374283(0x11a)]=()=>{var _0x4f1101=_0x374283;this[_0x4f1101(0x1d4)]||_0x5bd05c[_0x4f1101(0x143)]&&_0x5bd05c[_0x4f1101(0x143)][_0x4f1101(0x195)]&&_0x5bd05c['_socket'][_0x4f1101(0x195)](),_0x38b61d(_0x5bd05c);},_0x5bd05c['onclose']=()=>{var _0xd84c59=_0x374283;this[_0xd84c59(0x19e)]=!0x0,this[_0xd84c59(0x172)](_0x5bd05c),this[_0xd84c59(0x132)]();},_0x5bd05c[_0x374283(0x162)]=_0x208fc0=>{var _0x37931e=_0x374283;try{if(!(_0x208fc0!=null&&_0x208fc0[_0x37931e(0x16c)])||!this[_0x37931e(0x1cc)])return;let _0x463dc6=JSON['parse'](_0x208fc0[_0x37931e(0x16c)]);this['eventReceivedCallback'](_0x463dc6[_0x37931e(0x127)],_0x463dc6[_0x37931e(0x1d6)],this[_0x37931e(0x1a6)],this['_inBrowser']);}catch{}};})['then'](_0x48a851=>(this[_0x46302c(0x1e2)]=!0x0,this[_0x46302c(0x12f)]=!0x1,this[_0x46302c(0x19e)]=!0x1,this[_0x46302c(0x171)]=!0x0,this[_0x46302c(0x194)]=0x0,_0x48a851))[_0x46302c(0x19a)](_0x58f6c3=>(this[_0x46302c(0x1e2)]=!0x1,this[_0x46302c(0x12f)]=!0x1,console[_0x46302c(0x18f)](_0x46302c(0x1b2)+this[_0x46302c(0x185)]),_0x109924(new Error(_0x46302c(0x16e)+(_0x58f6c3&&_0x58f6c3[_0x46302c(0x179)])))));}));}['_disposeWebsocket'](_0x2eeddb){var _0x452d1b=_0x5e5252;this[_0x452d1b(0x1e2)]=!0x1,this['_connecting']=!0x1;try{_0x2eeddb[_0x452d1b(0x10d)]=null,_0x2eeddb['onerror']=null,_0x2eeddb[_0x452d1b(0x11a)]=null;}catch{}try{_0x2eeddb['readyState']<0x2&&_0x2eeddb[_0x452d1b(0x156)]();}catch{}}[_0x5e5252(0x132)](){var _0x51cdb3=_0x5e5252;clearTimeout(this['_reconnectTimeout']),!(this[_0x51cdb3(0x194)]>=this['_maxConnectAttemptCount'])&&(this[_0x51cdb3(0x17f)]=setTimeout(()=>{var _0x50ab0c=_0x51cdb3,_0x2952bc;this[_0x50ab0c(0x1e2)]||this[_0x50ab0c(0x12f)]||(this[_0x50ab0c(0x129)](),(_0x2952bc=this['_ws'])==null||_0x2952bc['catch'](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x51cdb3(0x17f)][_0x51cdb3(0x195)]&&this[_0x51cdb3(0x17f)][_0x51cdb3(0x195)]());}async['send'](_0xe945fe){var _0x28d8be=_0x5e5252;try{if(!this['_allowedToSend'])return;this['_allowedToConnectOnSend']&&this[_0x28d8be(0x129)](),(await this[_0x28d8be(0xfb)])[_0x28d8be(0x18c)](JSON['stringify'](_0xe945fe));}catch(_0xf9883f){console[_0x28d8be(0x18f)](this['_sendErrorMessage']+':\\x20'+(_0xf9883f&&_0xf9883f[_0x28d8be(0x179)])),this[_0x28d8be(0x171)]=!0x1,this[_0x28d8be(0x132)]();}}};function _0x5724(_0x1744e9,_0x23f798){var _0x4ca853=_0x4ca8();return _0x5724=function(_0x5724d7,_0x4ed035){_0x5724d7=_0x5724d7-0xf6;var _0x2d9558=_0x4ca853[_0x5724d7];return _0x2d9558;},_0x5724(_0x1744e9,_0x23f798);}function q(_0x5c5eb9,_0x2b9549,_0x77a008,_0x524dd6,_0x2aed90,_0x4b5ffd,_0x50c7c9,_0x49f09b=ie){var _0x261ad3=_0x5e5252;let _0x3cf774=_0x77a008[_0x261ad3(0x12e)](',')['map'](_0x42ce5c=>{var _0x16e736=_0x261ad3,_0x47cf63,_0x1f5cec,_0x165fd9,_0x542ac7;try{if(!_0x5c5eb9['_console_ninja_session']){let _0x5d18a8=((_0x1f5cec=(_0x47cf63=_0x5c5eb9['process'])==null?void 0x0:_0x47cf63[_0x16e736(0xfa)])==null?void 0x0:_0x1f5cec['node'])||((_0x542ac7=(_0x165fd9=_0x5c5eb9[_0x16e736(0x166)])==null?void 0x0:_0x165fd9['env'])==null?void 0x0:_0x542ac7[_0x16e736(0x15a)])===_0x16e736(0x1ba);(_0x2aed90===_0x16e736(0x144)||_0x2aed90===_0x16e736(0x1a2)||_0x2aed90===_0x16e736(0x10e)||_0x2aed90===_0x16e736(0x1cb))&&(_0x2aed90+=_0x5d18a8?_0x16e736(0x1c4):_0x16e736(0x1bb)),_0x5c5eb9['_console_ninja_session']={'id':+new Date(),'tool':_0x2aed90},_0x50c7c9&&_0x2aed90&&!_0x5d18a8&&console['log'](_0x16e736(0x191)+(_0x2aed90[_0x16e736(0x1b0)](0x0)[_0x16e736(0x182)]()+_0x2aed90[_0x16e736(0x134)](0x1))+',',_0x16e736(0x19d),_0x16e736(0x1d0));}let _0x145469=new x(_0x5c5eb9,_0x2b9549,_0x42ce5c,_0x524dd6,_0x4b5ffd,_0x49f09b);return _0x145469[_0x16e736(0x18c)][_0x16e736(0xfe)](_0x145469);}catch(_0x5647d3){return console[_0x16e736(0x18f)](_0x16e736(0xff),_0x5647d3&&_0x5647d3['message']),()=>{};}});return _0x5a6cc2=>_0x3cf774[_0x261ad3(0x101)](_0x2dda75=>_0x2dda75(_0x5a6cc2));}function ie(_0x29bd40,_0x5388b8,_0x1352a8,_0x312ba2){var _0x1b7088=_0x5e5252;_0x312ba2&&_0x29bd40===_0x1b7088(0xf6)&&_0x1352a8[_0x1b7088(0x167)][_0x1b7088(0xf6)]();}function b(_0x2e7c7c){var _0x20e0de=_0x5e5252,_0x1210c3,_0x525633;let _0x35d639=function(_0x3d24dd,_0x4df7ef){return _0x4df7ef-_0x3d24dd;},_0x137ef1;if(_0x2e7c7c['performance'])_0x137ef1=function(){var _0x540063=_0x5724;return _0x2e7c7c['performance'][_0x540063(0x1bc)]();};else{if(_0x2e7c7c[_0x20e0de(0x166)]&&_0x2e7c7c[_0x20e0de(0x166)][_0x20e0de(0x15d)]&&((_0x525633=(_0x1210c3=_0x2e7c7c[_0x20e0de(0x166)])==null?void 0x0:_0x1210c3[_0x20e0de(0x180)])==null?void 0x0:_0x525633[_0x20e0de(0x15a)])!=='edge')_0x137ef1=function(){var _0x3de026=_0x20e0de;return _0x2e7c7c[_0x3de026(0x166)][_0x3de026(0x15d)]();},_0x35d639=function(_0xe6f224,_0x49206b){return 0x3e8*(_0x49206b[0x0]-_0xe6f224[0x0])+(_0x49206b[0x1]-_0xe6f224[0x1])/0xf4240;};else try{let {performance:_0x460425}=require(_0x20e0de(0x14a));_0x137ef1=function(){var _0x20cc4d=_0x20e0de;return _0x460425[_0x20cc4d(0x1bc)]();};}catch{_0x137ef1=function(){return+new Date();};}}return{'elapsed':_0x35d639,'timeStamp':_0x137ef1,'now':()=>Date[_0x20e0de(0x1bc)]()};}function H(_0x1386ef,_0x4cf247,_0x12f620){var _0x4299a6=_0x5e5252,_0x25e53e,_0xa5c3d6,_0xc7f63a,_0x2105ec,_0x4681c5;if(_0x1386ef[_0x4299a6(0x10f)]!==void 0x0)return _0x1386ef[_0x4299a6(0x10f)];let _0x547120=((_0xa5c3d6=(_0x25e53e=_0x1386ef[_0x4299a6(0x166)])==null?void 0x0:_0x25e53e[_0x4299a6(0xfa)])==null?void 0x0:_0xa5c3d6[_0x4299a6(0x177)])||((_0x2105ec=(_0xc7f63a=_0x1386ef[_0x4299a6(0x166)])==null?void 0x0:_0xc7f63a[_0x4299a6(0x180)])==null?void 0x0:_0x2105ec[_0x4299a6(0x15a)])===_0x4299a6(0x1ba);function _0x1677bf(_0x2a9d16){var _0x483ee7=_0x4299a6;if(_0x2a9d16['startsWith']('/')&&_0x2a9d16[_0x483ee7(0x103)]('/')){let _0x4d6bb5=new RegExp(_0x2a9d16[_0x483ee7(0x14f)](0x1,-0x1));return _0x20e90f=>_0x4d6bb5[_0x483ee7(0x10c)](_0x20e90f);}else{if(_0x2a9d16[_0x483ee7(0x178)]('*')||_0x2a9d16[_0x483ee7(0x178)]('?')){let _0x205abf=new RegExp('^'+_0x2a9d16[_0x483ee7(0x1e4)](/\\./g,String[_0x483ee7(0x18b)](0x5c)+'.')[_0x483ee7(0x1e4)](/\\*/g,'.*')[_0x483ee7(0x1e4)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x5568aa=>_0x205abf[_0x483ee7(0x10c)](_0x5568aa);}else return _0x1a1708=>_0x1a1708===_0x2a9d16;}}let _0x1e5b5c=_0x4cf247[_0x4299a6(0x192)](_0x1677bf);return _0x1386ef[_0x4299a6(0x10f)]=_0x547120||!_0x4cf247,!_0x1386ef[_0x4299a6(0x10f)]&&((_0x4681c5=_0x1386ef['location'])==null?void 0x0:_0x4681c5[_0x4299a6(0x1aa)])&&(_0x1386ef[_0x4299a6(0x10f)]=_0x1e5b5c[_0x4299a6(0x104)](_0x429d1b=>_0x429d1b(_0x1386ef[_0x4299a6(0x167)][_0x4299a6(0x1aa)]))),_0x1386ef[_0x4299a6(0x10f)];}function _0x4ca8(){var _0x29749c=['endsWith','some','_sendErrorMessage','1725523045251','9476184ZsCeVk','_addLoadNode','Set','function','getOwnPropertyDescriptor','test','onclose','astro','_consoleNinjaAllowedToStart','disabledTrace','stringify','count','expressionsToEvaluate','4333424LgldgK','elements','_addFunctionsNode','60591','indexOf','_addObjectProperty','onopen','get','boolean','ws://','https://tinyurl.com/37x8b79t','_inNextEdge','_HTMLAllCollection','1390SBBhyn','[object\\x20Set]','path','negativeInfinity','11vVjskZ','logger\\x20websocket\\x20error','method','_WebSocket','_connectToHostNow','_keyStrRegExp','serialize','127.0.0.1','_getOwnPropertySymbols','split','_connecting','_capIfString','props','_attemptToReconnectShortly','array','substr','5718TJNCEz','autoExpandMaxDepth','NEGATIVE_INFINITY','symbol','stack','_property','_regExpToString','_isUndefined','unknown','_treeNodePropertiesBeforeFullValue','valueOf','depth','autoExpand','parent','_socket','next.js','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','cappedElements','date','prototype','_setNodeExpandableState','perf_hooks','_WebSocketClass','_additionalMetadata','[object\\x20Array]','_hasMapOnItsPath','slice','_isSet','_p_length','getWebSocketClass','_objectToString','_setNodeId','console','close','3436fUYIvr','pathToFileURL','getter','NEXT_RUNTIME','Map','670hVygwR','hrtime','WebSocket','time','_setNodeExpressionPath','_sortProps','onmessage','call','level','push','process','location','[object\\x20BigInt]','sortProps','capped','Symbol','data','_Symbol','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','root_exp','disabledLog','_allowedToSend','_disposeWebsocket','log','hits','_isMap','noFunctions','node','includes','message','_getOwnPropertyDescriptor','_isNegativeZero','_hasSymbolPropertyOnItsPath','then','host','_reconnectTimeout','env','totalStrLength','toUpperCase','_propertyName','positiveInfinity','_webSocketErrorDocsLink','reduceLimits','496922HsNYyQ','_getOwnPropertyNames','_isArray','undefined','fromCharCode','send','default','funcName','warn','join','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','map','name','_connectAttemptCount','unref','length','toString','nodeModules','number','catch','isExpressionToEvaluate','strLength','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_allowedToConnectOnSend','Number',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.351\\\\node_modules\",'string','remix','null','_maxConnectAttemptCount','webpack','global','_cleanNode','_isPrimitiveType','stackTraceLimit','hostname','url','port','','coverage','origin','charAt','_setNodePermissions','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','error','trace','_isPrimitiveWrapperType','_blacklistedProperty','value','allStrLength','_console_ninja','edge','\\x20browser','now','autoExpandPreviousObjects','bigint','toLowerCase','Buffer','_type','type','6468vqoeod','\\x20server','_dateToString','String','expId','unshift','object','2813763RDgjsO','angular','eventReceivedCallback','set','index','4lxWiDs','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','rootExpression','93645XoLiEo','negativeZero','_inBrowser','sort','args','_numberRegExp','create','enumerable','getOwnPropertyNames','_p_','1','HTMLAllCollection','_p_name','autoExpandLimit','getOwnPropertySymbols','isArray','_connected','current','replace','_setNodeLabel','reload','dockerizedApp','_quotedRegExp','resolveGetters','versions','_ws','_addProperty','_processTreeNodeResult','bind','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','constructor','forEach','autoExpandPropertyCount'];_0x4ca8=function(){return _0x29749c;};return _0x4ca8();}function X(_0x18bb55,_0x133d58,_0x5f4a5b,_0x26c95e){var _0x49ea87=_0x5e5252;_0x18bb55=_0x18bb55,_0x133d58=_0x133d58,_0x5f4a5b=_0x5f4a5b,_0x26c95e=_0x26c95e;let _0x389d6c=b(_0x18bb55),_0x43b77f=_0x389d6c['elapsed'],_0xde6c6d=_0x389d6c['timeStamp'];class _0x4b5a7f{constructor(){var _0x3fb167=_0x5724;this[_0x3fb167(0x12a)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3fb167(0x1d7)]=/^(0|[1-9][0-9]*)$/,this[_0x3fb167(0xf8)]=/'([^\\\\']|\\\\')*'/,this['_undefined']=_0x18bb55[_0x3fb167(0x18a)],this[_0x3fb167(0x120)]=_0x18bb55[_0x3fb167(0x1dd)],this[_0x3fb167(0x17a)]=Object[_0x3fb167(0x10b)],this[_0x3fb167(0x188)]=Object[_0x3fb167(0x1da)],this[_0x3fb167(0x16d)]=_0x18bb55[_0x3fb167(0x16b)],this['_regExpToString']=RegExp[_0x3fb167(0x148)][_0x3fb167(0x197)],this[_0x3fb167(0x1c5)]=Date['prototype'][_0x3fb167(0x197)];}['serialize'](_0x5d3617,_0x116107,_0x262fa2,_0x4f4b14){var _0x2d0137=_0x5724,_0x19e651=this,_0xf15d85=_0x262fa2[_0x2d0137(0x141)];function _0x2195b5(_0x5601f6,_0x5bcbb5,_0x38b861){var _0x250bed=_0x2d0137;_0x5bcbb5['type']='unknown',_0x5bcbb5[_0x250bed(0x1b3)]=_0x5601f6['message'],_0x56469d=_0x38b861['node']['current'],_0x38b861['node']['current']=_0x5bcbb5,_0x19e651[_0x250bed(0x13e)](_0x5bcbb5,_0x38b861);}try{_0x262fa2[_0x2d0137(0x164)]++,_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x1bd)][_0x2d0137(0x165)](_0x116107);var _0x40417a,_0x548691,_0x737a97,_0x3ff33c,_0x468292=[],_0x91d118=[],_0x2bfe41,_0x201686=this[_0x2d0137(0x1c1)](_0x116107),_0x1efce0=_0x201686===_0x2d0137(0x133),_0x28d9e5=!0x1,_0x550fba=_0x201686===_0x2d0137(0x10a),_0x134913=this[_0x2d0137(0x1a8)](_0x201686),_0x2a83fb=this[_0x2d0137(0x1b5)](_0x201686),_0x35c122=_0x134913||_0x2a83fb,_0xeb2f3d={},_0x29e48d=0x0,_0x2c2928=!0x1,_0x56469d,_0x9f5fe1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x262fa2[_0x2d0137(0x140)]){if(_0x1efce0){if(_0x548691=_0x116107[_0x2d0137(0x196)],_0x548691>_0x262fa2['elements']){for(_0x737a97=0x0,_0x3ff33c=_0x262fa2[_0x2d0137(0x115)],_0x40417a=_0x737a97;_0x40417a<_0x3ff33c;_0x40417a++)_0x91d118['push'](_0x19e651['_addProperty'](_0x468292,_0x116107,_0x201686,_0x40417a,_0x262fa2));_0x5d3617[_0x2d0137(0x146)]=!0x0;}else{for(_0x737a97=0x0,_0x3ff33c=_0x548691,_0x40417a=_0x737a97;_0x40417a<_0x3ff33c;_0x40417a++)_0x91d118[_0x2d0137(0x165)](_0x19e651[_0x2d0137(0xfc)](_0x468292,_0x116107,_0x201686,_0x40417a,_0x262fa2));}_0x262fa2[_0x2d0137(0x102)]+=_0x91d118[_0x2d0137(0x196)];}if(!(_0x201686===_0x2d0137(0x1a3)||_0x201686===_0x2d0137(0x18a))&&!_0x134913&&_0x201686!==_0x2d0137(0x1c6)&&_0x201686!==_0x2d0137(0x1c0)&&_0x201686!==_0x2d0137(0x1be)){var _0x55911e=_0x4f4b14[_0x2d0137(0x131)]||_0x262fa2[_0x2d0137(0x131)];if(this[_0x2d0137(0x150)](_0x116107)?(_0x40417a=0x0,_0x116107['forEach'](function(_0x4a54aa){var _0x4fcd10=_0x2d0137;if(_0x29e48d++,_0x262fa2[_0x4fcd10(0x102)]++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;return;}if(!_0x262fa2[_0x4fcd10(0x19b)]&&_0x262fa2[_0x4fcd10(0x141)]&&_0x262fa2['autoExpandPropertyCount']>_0x262fa2['autoExpandLimit']){_0x2c2928=!0x0;return;}_0x91d118[_0x4fcd10(0x165)](_0x19e651[_0x4fcd10(0xfc)](_0x468292,_0x116107,_0x4fcd10(0x109),_0x40417a++,_0x262fa2,function(_0x54f45c){return function(){return _0x54f45c;};}(_0x4a54aa)));})):this['_isMap'](_0x116107)&&_0x116107[_0x2d0137(0x101)](function(_0x1d4b9b,_0x493f59){var _0x5e6096=_0x2d0137;if(_0x29e48d++,_0x262fa2['autoExpandPropertyCount']++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;return;}if(!_0x262fa2[_0x5e6096(0x19b)]&&_0x262fa2[_0x5e6096(0x141)]&&_0x262fa2[_0x5e6096(0x102)]>_0x262fa2[_0x5e6096(0x1df)]){_0x2c2928=!0x0;return;}var _0x1dd66c=_0x493f59[_0x5e6096(0x197)]();_0x1dd66c[_0x5e6096(0x196)]>0x64&&(_0x1dd66c=_0x1dd66c['slice'](0x0,0x64)+'...'),_0x91d118[_0x5e6096(0x165)](_0x19e651['_addProperty'](_0x468292,_0x116107,'Map',_0x1dd66c,_0x262fa2,function(_0x4fca04){return function(){return _0x4fca04;};}(_0x1d4b9b)));}),!_0x28d9e5){try{for(_0x2bfe41 in _0x116107)if(!(_0x1efce0&&_0x9f5fe1[_0x2d0137(0x10c)](_0x2bfe41))&&!this[_0x2d0137(0x1b6)](_0x116107,_0x2bfe41,_0x262fa2)){if(_0x29e48d++,_0x262fa2[_0x2d0137(0x102)]++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;break;}if(!_0x262fa2['isExpressionToEvaluate']&&_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x102)]>_0x262fa2[_0x2d0137(0x1df)]){_0x2c2928=!0x0;break;}_0x91d118['push'](_0x19e651[_0x2d0137(0x119)](_0x468292,_0xeb2f3d,_0x116107,_0x201686,_0x2bfe41,_0x262fa2));}}catch{}if(_0xeb2f3d[_0x2d0137(0x151)]=!0x0,_0x550fba&&(_0xeb2f3d[_0x2d0137(0x1de)]=!0x0),!_0x2c2928){var _0x1118c1=[]['concat'](this[_0x2d0137(0x188)](_0x116107))['concat'](this[_0x2d0137(0x12d)](_0x116107));for(_0x40417a=0x0,_0x548691=_0x1118c1[_0x2d0137(0x196)];_0x40417a<_0x548691;_0x40417a++)if(_0x2bfe41=_0x1118c1[_0x40417a],!(_0x1efce0&&_0x9f5fe1[_0x2d0137(0x10c)](_0x2bfe41[_0x2d0137(0x197)]()))&&!this[_0x2d0137(0x1b6)](_0x116107,_0x2bfe41,_0x262fa2)&&!_0xeb2f3d[_0x2d0137(0x1db)+_0x2bfe41[_0x2d0137(0x197)]()]){if(_0x29e48d++,_0x262fa2['autoExpandPropertyCount']++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;break;}if(!_0x262fa2[_0x2d0137(0x19b)]&&_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2['autoExpandPropertyCount']>_0x262fa2[_0x2d0137(0x1df)]){_0x2c2928=!0x0;break;}_0x91d118['push'](_0x19e651[_0x2d0137(0x119)](_0x468292,_0xeb2f3d,_0x116107,_0x201686,_0x2bfe41,_0x262fa2));}}}}}if(_0x5d3617[_0x2d0137(0x1c2)]=_0x201686,_0x35c122?(_0x5d3617[_0x2d0137(0x1b7)]=_0x116107[_0x2d0137(0x13f)](),this[_0x2d0137(0x130)](_0x201686,_0x5d3617,_0x262fa2,_0x4f4b14)):_0x201686===_0x2d0137(0x147)?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x1c5)][_0x2d0137(0x163)](_0x116107):_0x201686===_0x2d0137(0x1be)?_0x5d3617['value']=_0x116107[_0x2d0137(0x197)]():_0x201686==='RegExp'?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x13b)][_0x2d0137(0x163)](_0x116107):_0x201686===_0x2d0137(0x138)&&this[_0x2d0137(0x16d)]?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x16d)]['prototype'][_0x2d0137(0x197)]['call'](_0x116107):!_0x262fa2[_0x2d0137(0x140)]&&!(_0x201686==='null'||_0x201686===_0x2d0137(0x18a))&&(delete _0x5d3617['value'],_0x5d3617['capped']=!0x0),_0x2c2928&&(_0x5d3617['cappedProps']=!0x0),_0x56469d=_0x262fa2['node'][_0x2d0137(0x1e3)],_0x262fa2[_0x2d0137(0x177)]['current']=_0x5d3617,this[_0x2d0137(0x13e)](_0x5d3617,_0x262fa2),_0x91d118['length']){for(_0x40417a=0x0,_0x548691=_0x91d118[_0x2d0137(0x196)];_0x40417a<_0x548691;_0x40417a++)_0x91d118[_0x40417a](_0x40417a);}_0x468292['length']&&(_0x5d3617[_0x2d0137(0x131)]=_0x468292);}catch(_0x590931){_0x2195b5(_0x590931,_0x5d3617,_0x262fa2);}return this[_0x2d0137(0x14c)](_0x116107,_0x5d3617),this['_treeNodePropertiesAfterFullValue'](_0x5d3617,_0x262fa2),_0x262fa2[_0x2d0137(0x177)][_0x2d0137(0x1e3)]=_0x56469d,_0x262fa2[_0x2d0137(0x164)]--,_0x262fa2[_0x2d0137(0x141)]=_0xf15d85,_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x1bd)]['pop'](),_0x5d3617;}[_0x49ea87(0x12d)](_0x231a96){var _0x2e4fb2=_0x49ea87;return Object[_0x2e4fb2(0x1e0)]?Object[_0x2e4fb2(0x1e0)](_0x231a96):[];}[_0x49ea87(0x150)](_0x1518ab){var _0x739ccf=_0x49ea87;return!!(_0x1518ab&&_0x18bb55[_0x739ccf(0x109)]&&this['_objectToString'](_0x1518ab)===_0x739ccf(0x122)&&_0x1518ab[_0x739ccf(0x101)]);}[_0x49ea87(0x1b6)](_0x4085e6,_0x5e28c8,_0x34d188){return _0x34d188['noFunctions']?typeof _0x4085e6[_0x5e28c8]=='function':!0x1;}[_0x49ea87(0x1c1)](_0x1c3995){var _0x5aeb52=_0x49ea87,_0x303919='';return _0x303919=typeof _0x1c3995,_0x303919==='object'?this['_objectToString'](_0x1c3995)===_0x5aeb52(0x14d)?_0x303919=_0x5aeb52(0x133):this['_objectToString'](_0x1c3995)==='[object\\x20Date]'?_0x303919=_0x5aeb52(0x147):this[_0x5aeb52(0x153)](_0x1c3995)===_0x5aeb52(0x168)?_0x303919=_0x5aeb52(0x1be):_0x1c3995===null?_0x303919='null':_0x1c3995[_0x5aeb52(0x100)]&&(_0x303919=_0x1c3995[_0x5aeb52(0x100)][_0x5aeb52(0x193)]||_0x303919):_0x303919===_0x5aeb52(0x18a)&&this[_0x5aeb52(0x120)]&&_0x1c3995 instanceof this[_0x5aeb52(0x120)]&&(_0x303919='HTMLAllCollection'),_0x303919;}[_0x49ea87(0x153)](_0x99818b){var _0x1af5a6=_0x49ea87;return Object['prototype'][_0x1af5a6(0x197)][_0x1af5a6(0x163)](_0x99818b);}['_isPrimitiveType'](_0x56d0bc){var _0xd87642=_0x49ea87;return _0x56d0bc===_0xd87642(0x11c)||_0x56d0bc===_0xd87642(0x1a1)||_0x56d0bc===_0xd87642(0x199);}['_isPrimitiveWrapperType'](_0xb7691e){var _0x49bbb2=_0x49ea87;return _0xb7691e==='Boolean'||_0xb7691e==='String'||_0xb7691e===_0x49bbb2(0x19f);}[_0x49ea87(0xfc)](_0x2ce477,_0x211ca8,_0x2fb9f8,_0x2fd18a,_0x36316c,_0x29a6b8){var _0x247659=this;return function(_0x499867){var _0x1554f7=_0x5724,_0x39fafc=_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1e3)],_0x158f52=_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)],_0x4dc155=_0x36316c['node'][_0x1554f7(0x142)];_0x36316c['node'][_0x1554f7(0x142)]=_0x39fafc,_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)]=typeof _0x2fd18a==_0x1554f7(0x199)?_0x2fd18a:_0x499867,_0x2ce477['push'](_0x247659['_property'](_0x211ca8,_0x2fb9f8,_0x2fd18a,_0x36316c,_0x29a6b8)),_0x36316c['node'][_0x1554f7(0x142)]=_0x4dc155,_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)]=_0x158f52;};}[_0x49ea87(0x119)](_0xe0e155,_0x5be7e3,_0x81255a,_0x4b0a72,_0xeb51d1,_0x50360c,_0x436293){var _0x3e7624=_0x49ea87,_0x540e2e=this;return _0x5be7e3['_p_'+_0xeb51d1[_0x3e7624(0x197)]()]=!0x0,function(_0x336f6d){var _0x499296=_0x3e7624,_0x2282b8=_0x50360c[_0x499296(0x177)][_0x499296(0x1e3)],_0x467584=_0x50360c[_0x499296(0x177)][_0x499296(0x1ce)],_0x165ab6=_0x50360c['node']['parent'];_0x50360c[_0x499296(0x177)][_0x499296(0x142)]=_0x2282b8,_0x50360c['node'][_0x499296(0x1ce)]=_0x336f6d,_0xe0e155[_0x499296(0x165)](_0x540e2e[_0x499296(0x13a)](_0x81255a,_0x4b0a72,_0xeb51d1,_0x50360c,_0x436293)),_0x50360c['node'][_0x499296(0x142)]=_0x165ab6,_0x50360c[_0x499296(0x177)][_0x499296(0x1ce)]=_0x467584;};}['_property'](_0x1a4a15,_0x587e1f,_0x315f94,_0x5d7862,_0x583196){var _0x1d5ef6=_0x49ea87,_0x4c915d=this;_0x583196||(_0x583196=function(_0x1f8be0,_0x158da4){return _0x1f8be0[_0x158da4];});var _0x35d795=_0x315f94[_0x1d5ef6(0x197)](),_0x363923=_0x5d7862[_0x1d5ef6(0x113)]||{},_0x134eda=_0x5d7862[_0x1d5ef6(0x140)],_0x4e75b3=_0x5d7862[_0x1d5ef6(0x19b)];try{var _0xb00253=this[_0x1d5ef6(0x175)](_0x1a4a15),_0xce7487=_0x35d795;_0xb00253&&_0xce7487[0x0]==='\\x27'&&(_0xce7487=_0xce7487[_0x1d5ef6(0x134)](0x1,_0xce7487[_0x1d5ef6(0x196)]-0x2));var _0x6acd55=_0x5d7862['expressionsToEvaluate']=_0x363923['_p_'+_0xce7487];_0x6acd55&&(_0x5d7862[_0x1d5ef6(0x140)]=_0x5d7862[_0x1d5ef6(0x140)]+0x1),_0x5d7862[_0x1d5ef6(0x19b)]=!!_0x6acd55;var _0x6d0f5f=typeof _0x315f94==_0x1d5ef6(0x138),_0x167fcb={'name':_0x6d0f5f||_0xb00253?_0x35d795:this[_0x1d5ef6(0x183)](_0x35d795)};if(_0x6d0f5f&&(_0x167fcb[_0x1d5ef6(0x138)]=!0x0),!(_0x587e1f===_0x1d5ef6(0x133)||_0x587e1f==='Error')){var _0x99bb80=this[_0x1d5ef6(0x17a)](_0x1a4a15,_0x315f94);if(_0x99bb80&&(_0x99bb80[_0x1d5ef6(0x1cd)]&&(_0x167fcb['setter']=!0x0),_0x99bb80[_0x1d5ef6(0x11b)]&&!_0x6acd55&&!_0x5d7862['resolveGetters']))return _0x167fcb[_0x1d5ef6(0x159)]=!0x0,this['_processTreeNodeResult'](_0x167fcb,_0x5d7862),_0x167fcb;}var _0x1b2deb;try{_0x1b2deb=_0x583196(_0x1a4a15,_0x315f94);}catch(_0x4399c3){return _0x167fcb={'name':_0x35d795,'type':_0x1d5ef6(0x13d),'error':_0x4399c3[_0x1d5ef6(0x179)]},this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862),_0x167fcb;}var _0x9edc4b=this[_0x1d5ef6(0x1c1)](_0x1b2deb),_0x42541d=this['_isPrimitiveType'](_0x9edc4b);if(_0x167fcb['type']=_0x9edc4b,_0x42541d)this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862,_0x1b2deb,function(){var _0x3fdd37=_0x1d5ef6;_0x167fcb[_0x3fdd37(0x1b7)]=_0x1b2deb[_0x3fdd37(0x13f)](),!_0x6acd55&&_0x4c915d['_capIfString'](_0x9edc4b,_0x167fcb,_0x5d7862,{});});else{var _0x8b1e5a=_0x5d7862[_0x1d5ef6(0x141)]&&_0x5d7862[_0x1d5ef6(0x164)]<_0x5d7862[_0x1d5ef6(0x136)]&&_0x5d7862['autoExpandPreviousObjects'][_0x1d5ef6(0x118)](_0x1b2deb)<0x0&&_0x9edc4b!==_0x1d5ef6(0x10a)&&_0x5d7862[_0x1d5ef6(0x102)]<_0x5d7862[_0x1d5ef6(0x1df)];_0x8b1e5a||_0x5d7862[_0x1d5ef6(0x164)]<_0x134eda||_0x6acd55?(this[_0x1d5ef6(0x12b)](_0x167fcb,_0x1b2deb,_0x5d7862,_0x6acd55||{}),this[_0x1d5ef6(0x14c)](_0x1b2deb,_0x167fcb)):this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862,_0x1b2deb,function(){var _0x24b998=_0x1d5ef6;_0x9edc4b===_0x24b998(0x1a3)||_0x9edc4b===_0x24b998(0x18a)||(delete _0x167fcb['value'],_0x167fcb[_0x24b998(0x16a)]=!0x0);});}return _0x167fcb;}finally{_0x5d7862[_0x1d5ef6(0x113)]=_0x363923,_0x5d7862[_0x1d5ef6(0x140)]=_0x134eda,_0x5d7862[_0x1d5ef6(0x19b)]=_0x4e75b3;}}[_0x49ea87(0x130)](_0x4ddc9c,_0x47e666,_0x2cf4eb,_0x28b9b6){var _0x3e3391=_0x49ea87,_0x28fe8c=_0x28b9b6[_0x3e3391(0x19c)]||_0x2cf4eb[_0x3e3391(0x19c)];if((_0x4ddc9c===_0x3e3391(0x1a1)||_0x4ddc9c===_0x3e3391(0x1c6))&&_0x47e666[_0x3e3391(0x1b7)]){let _0x48fc34=_0x47e666['value'][_0x3e3391(0x196)];_0x2cf4eb[_0x3e3391(0x1b8)]+=_0x48fc34,_0x2cf4eb[_0x3e3391(0x1b8)]>_0x2cf4eb[_0x3e3391(0x181)]?(_0x47e666[_0x3e3391(0x16a)]='',delete _0x47e666[_0x3e3391(0x1b7)]):_0x48fc34>_0x28fe8c&&(_0x47e666[_0x3e3391(0x16a)]=_0x47e666['value'][_0x3e3391(0x134)](0x0,_0x28fe8c),delete _0x47e666['value']);}}[_0x49ea87(0x175)](_0x598187){var _0xef816e=_0x49ea87;return!!(_0x598187&&_0x18bb55['Map']&&this[_0xef816e(0x153)](_0x598187)==='[object\\x20Map]'&&_0x598187['forEach']);}[_0x49ea87(0x183)](_0x8fe286){var _0x1d6889=_0x49ea87;if(_0x8fe286['match'](/^\\d+$/))return _0x8fe286;var _0xdfd039;try{_0xdfd039=JSON[_0x1d6889(0x111)](''+_0x8fe286);}catch{_0xdfd039='\\x22'+this[_0x1d6889(0x153)](_0x8fe286)+'\\x22';}return _0xdfd039['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0xdfd039=_0xdfd039[_0x1d6889(0x134)](0x1,_0xdfd039['length']-0x2):_0xdfd039=_0xdfd039[_0x1d6889(0x1e4)](/'/g,'\\x5c\\x27')[_0x1d6889(0x1e4)](/\\\\\"/g,'\\x22')[_0x1d6889(0x1e4)](/(^\"|\"$)/g,'\\x27'),_0xdfd039;}[_0x49ea87(0xfd)](_0x500141,_0x528358,_0x53ed2f,_0x4c7056){var _0x3d49a5=_0x49ea87;this[_0x3d49a5(0x13e)](_0x500141,_0x528358),_0x4c7056&&_0x4c7056(),this[_0x3d49a5(0x14c)](_0x53ed2f,_0x500141),this['_treeNodePropertiesAfterFullValue'](_0x500141,_0x528358);}['_treeNodePropertiesBeforeFullValue'](_0x18bd6e,_0x15925d){var _0x59364f=_0x49ea87;this[_0x59364f(0x154)](_0x18bd6e,_0x15925d),this['_setNodeQueryPath'](_0x18bd6e,_0x15925d),this[_0x59364f(0x160)](_0x18bd6e,_0x15925d),this[_0x59364f(0x1b1)](_0x18bd6e,_0x15925d);}['_setNodeId'](_0x45bead,_0x6e217){}['_setNodeQueryPath'](_0x2ec05a,_0x3a12ed){}['_setNodeLabel'](_0x5b4507,_0x590499){}[_0x49ea87(0x13c)](_0x24b7db){return _0x24b7db===this['_undefined'];}['_treeNodePropertiesAfterFullValue'](_0x18925a,_0x53780d){var _0x243f2b=_0x49ea87;this[_0x243f2b(0x1e5)](_0x18925a,_0x53780d),this[_0x243f2b(0x149)](_0x18925a),_0x53780d[_0x243f2b(0x169)]&&this['_sortProps'](_0x18925a),this[_0x243f2b(0x116)](_0x18925a,_0x53780d),this[_0x243f2b(0x108)](_0x18925a,_0x53780d),this[_0x243f2b(0x1a7)](_0x18925a);}[_0x49ea87(0x14c)](_0x3f1854,_0x212b83){var _0x385ff8=_0x49ea87;let _0x16faa6;try{_0x18bb55[_0x385ff8(0x155)]&&(_0x16faa6=_0x18bb55['console'][_0x385ff8(0x1b3)],_0x18bb55[_0x385ff8(0x155)][_0x385ff8(0x1b3)]=function(){}),_0x3f1854&&typeof _0x3f1854['length']==_0x385ff8(0x199)&&(_0x212b83['length']=_0x3f1854[_0x385ff8(0x196)]);}catch{}finally{_0x16faa6&&(_0x18bb55[_0x385ff8(0x155)][_0x385ff8(0x1b3)]=_0x16faa6);}if(_0x212b83[_0x385ff8(0x1c2)]===_0x385ff8(0x199)||_0x212b83[_0x385ff8(0x1c2)]==='Number'){if(isNaN(_0x212b83[_0x385ff8(0x1b7)]))_0x212b83['nan']=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];else switch(_0x212b83[_0x385ff8(0x1b7)]){case Number['POSITIVE_INFINITY']:_0x212b83[_0x385ff8(0x184)]=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];break;case Number[_0x385ff8(0x137)]:_0x212b83[_0x385ff8(0x124)]=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];break;case 0x0:this[_0x385ff8(0x17b)](_0x212b83[_0x385ff8(0x1b7)])&&(_0x212b83[_0x385ff8(0x1d3)]=!0x0);break;}}else _0x212b83[_0x385ff8(0x1c2)]===_0x385ff8(0x10a)&&typeof _0x3f1854[_0x385ff8(0x193)]==_0x385ff8(0x1a1)&&_0x3f1854[_0x385ff8(0x193)]&&_0x212b83[_0x385ff8(0x193)]&&_0x3f1854[_0x385ff8(0x193)]!==_0x212b83[_0x385ff8(0x193)]&&(_0x212b83[_0x385ff8(0x18e)]=_0x3f1854[_0x385ff8(0x193)]);}['_isNegativeZero'](_0x174581){return 0x1/_0x174581===Number['NEGATIVE_INFINITY'];}[_0x49ea87(0x161)](_0xdd29c5){var _0x2a5d57=_0x49ea87;!_0xdd29c5[_0x2a5d57(0x131)]||!_0xdd29c5['props']['length']||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x133)||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x15b)||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x109)||_0xdd29c5[_0x2a5d57(0x131)][_0x2a5d57(0x1d5)](function(_0x1bcbe3,_0x2a07c8){var _0x3d593a=_0x2a5d57,_0x34d49f=_0x1bcbe3[_0x3d593a(0x193)][_0x3d593a(0x1bf)](),_0x2c67fe=_0x2a07c8[_0x3d593a(0x193)][_0x3d593a(0x1bf)]();return _0x34d49f<_0x2c67fe?-0x1:_0x34d49f>_0x2c67fe?0x1:0x0;});}['_addFunctionsNode'](_0x186722,_0x49624f){var _0x50011c=_0x49ea87;if(!(_0x49624f[_0x50011c(0x176)]||!_0x186722[_0x50011c(0x131)]||!_0x186722[_0x50011c(0x131)][_0x50011c(0x196)])){for(var _0x28e7d3=[],_0x3890f4=[],_0x499c8b=0x0,_0x7067e4=_0x186722[_0x50011c(0x131)]['length'];_0x499c8b<_0x7067e4;_0x499c8b++){var _0x999973=_0x186722[_0x50011c(0x131)][_0x499c8b];_0x999973[_0x50011c(0x1c2)]===_0x50011c(0x10a)?_0x28e7d3[_0x50011c(0x165)](_0x999973):_0x3890f4[_0x50011c(0x165)](_0x999973);}if(!(!_0x3890f4['length']||_0x28e7d3[_0x50011c(0x196)]<=0x1)){_0x186722[_0x50011c(0x131)]=_0x3890f4;var _0x382cdd={'functionsNode':!0x0,'props':_0x28e7d3};this[_0x50011c(0x154)](_0x382cdd,_0x49624f),this[_0x50011c(0x1e5)](_0x382cdd,_0x49624f),this[_0x50011c(0x149)](_0x382cdd),this[_0x50011c(0x1b1)](_0x382cdd,_0x49624f),_0x382cdd['id']+='\\x20f',_0x186722[_0x50011c(0x131)][_0x50011c(0x1c8)](_0x382cdd);}}}[_0x49ea87(0x108)](_0x235a7a,_0x1bfff0){}[_0x49ea87(0x149)](_0x1297e0){}[_0x49ea87(0x189)](_0xba479){var _0x4f36fb=_0x49ea87;return Array[_0x4f36fb(0x1e1)](_0xba479)||typeof _0xba479==_0x4f36fb(0x1c9)&&this['_objectToString'](_0xba479)==='[object\\x20Array]';}[_0x49ea87(0x1b1)](_0x568443,_0x108bb2){}[_0x49ea87(0x1a7)](_0x26f6a3){var _0x5e41ee=_0x49ea87;delete _0x26f6a3[_0x5e41ee(0x17c)],delete _0x26f6a3['_hasSetOnItsPath'],delete _0x26f6a3[_0x5e41ee(0x14e)];}[_0x49ea87(0x160)](_0xb4de9,_0x4b2048){}}let _0x44c50d=new _0x4b5a7f(),_0xaedfd7={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0xa2f3df={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x353530(_0x27ee81,_0x31c398,_0x3a3753,_0xc8cc5f,_0x13d7ad,_0x5b85da){var _0x3f1ed1=_0x49ea87;let _0x317525,_0x1b1b2d;try{_0x1b1b2d=_0xde6c6d(),_0x317525=_0x5f4a5b[_0x31c398],!_0x317525||_0x1b1b2d-_0x317525['ts']>0x1f4&&_0x317525['count']&&_0x317525[_0x3f1ed1(0x15f)]/_0x317525['count']<0x64?(_0x5f4a5b[_0x31c398]=_0x317525={'count':0x0,'time':0x0,'ts':_0x1b1b2d},_0x5f4a5b[_0x3f1ed1(0x174)]={}):_0x1b1b2d-_0x5f4a5b[_0x3f1ed1(0x174)]['ts']>0x32&&_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]&&_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]/_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]<0x64&&(_0x5f4a5b[_0x3f1ed1(0x174)]={});let _0x2e14f7=[],_0x3df3bd=_0x317525[_0x3f1ed1(0x186)]||_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x186)]?_0xa2f3df:_0xaedfd7,_0x385619=_0x32e332=>{var _0x3c14c8=_0x3f1ed1;let _0x57cb69={};return _0x57cb69[_0x3c14c8(0x131)]=_0x32e332[_0x3c14c8(0x131)],_0x57cb69[_0x3c14c8(0x115)]=_0x32e332[_0x3c14c8(0x115)],_0x57cb69[_0x3c14c8(0x19c)]=_0x32e332[_0x3c14c8(0x19c)],_0x57cb69['totalStrLength']=_0x32e332[_0x3c14c8(0x181)],_0x57cb69[_0x3c14c8(0x1df)]=_0x32e332[_0x3c14c8(0x1df)],_0x57cb69[_0x3c14c8(0x136)]=_0x32e332[_0x3c14c8(0x136)],_0x57cb69['sortProps']=!0x1,_0x57cb69['noFunctions']=!_0x133d58,_0x57cb69[_0x3c14c8(0x140)]=0x1,_0x57cb69[_0x3c14c8(0x164)]=0x0,_0x57cb69[_0x3c14c8(0x1c7)]='root_exp_id',_0x57cb69[_0x3c14c8(0x1d1)]=_0x3c14c8(0x16f),_0x57cb69[_0x3c14c8(0x141)]=!0x0,_0x57cb69['autoExpandPreviousObjects']=[],_0x57cb69[_0x3c14c8(0x102)]=0x0,_0x57cb69[_0x3c14c8(0xf9)]=!0x0,_0x57cb69[_0x3c14c8(0x1b8)]=0x0,_0x57cb69[_0x3c14c8(0x177)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x57cb69;};for(var _0x1917d7=0x0;_0x1917d7<_0x13d7ad[_0x3f1ed1(0x196)];_0x1917d7++)_0x2e14f7['push'](_0x44c50d[_0x3f1ed1(0x12b)]({'timeNode':_0x27ee81===_0x3f1ed1(0x15f)||void 0x0},_0x13d7ad[_0x1917d7],_0x385619(_0x3df3bd),{}));if(_0x27ee81===_0x3f1ed1(0x1b4)){let _0x5dacf2=Error['stackTraceLimit'];try{Error[_0x3f1ed1(0x1a9)]=0x1/0x0,_0x2e14f7[_0x3f1ed1(0x165)](_0x44c50d['serialize']({'stackNode':!0x0},new Error()[_0x3f1ed1(0x139)],_0x385619(_0x3df3bd),{'strLength':0x1/0x0}));}finally{Error['stackTraceLimit']=_0x5dacf2;}}return{'method':_0x3f1ed1(0x173),'version':_0x26c95e,'args':[{'ts':_0x3a3753,'session':_0xc8cc5f,'args':_0x2e14f7,'id':_0x31c398,'context':_0x5b85da}]};}catch(_0x463e1c){return{'method':_0x3f1ed1(0x173),'version':_0x26c95e,'args':[{'ts':_0x3a3753,'session':_0xc8cc5f,'args':[{'type':_0x3f1ed1(0x13d),'error':_0x463e1c&&_0x463e1c['message']}],'id':_0x31c398,'context':_0x5b85da}]};}finally{try{if(_0x317525&&_0x1b1b2d){let _0x336abc=_0xde6c6d();_0x317525[_0x3f1ed1(0x112)]++,_0x317525[_0x3f1ed1(0x15f)]+=_0x43b77f(_0x1b1b2d,_0x336abc),_0x317525['ts']=_0x336abc,_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]++,_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]+=_0x43b77f(_0x1b1b2d,_0x336abc),_0x5f4a5b[_0x3f1ed1(0x174)]['ts']=_0x336abc,(_0x317525[_0x3f1ed1(0x112)]>0x32||_0x317525[_0x3f1ed1(0x15f)]>0x64)&&(_0x317525[_0x3f1ed1(0x186)]=!0x0),(_0x5f4a5b[_0x3f1ed1(0x174)]['count']>0x3e8||_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]>0x12c)&&(_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x186)]=!0x0);}}catch{}}}return _0x353530;}((_0x42452a,_0x19f01a,_0x53e950,_0x4642e0,_0x357d6f,_0x11f33d,_0x41fdfa,_0x47aa1b,_0x278a5d,_0xb78aee,_0x56dead)=>{var _0x142125=_0x5e5252;if(_0x42452a['_console_ninja'])return _0x42452a[_0x142125(0x1b9)];if(!H(_0x42452a,_0x47aa1b,_0x357d6f))return _0x42452a[_0x142125(0x1b9)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x42452a[_0x142125(0x1b9)];let _0x19bf15=b(_0x42452a),_0x64950a=_0x19bf15['elapsed'],_0x5ca2ab=_0x19bf15['timeStamp'],_0x519394=_0x19bf15[_0x142125(0x1bc)],_0x39f3e2={'hits':{},'ts':{}},_0x1c5526=X(_0x42452a,_0x278a5d,_0x39f3e2,_0x11f33d),_0x5e9d0b=_0x996b28=>{_0x39f3e2['ts'][_0x996b28]=_0x5ca2ab();},_0xf392f0=(_0x570250,_0x11a541)=>{var _0x542011=_0x142125;let _0x249b36=_0x39f3e2['ts'][_0x11a541];if(delete _0x39f3e2['ts'][_0x11a541],_0x249b36){let _0x2dfc76=_0x64950a(_0x249b36,_0x5ca2ab());_0x394580(_0x1c5526(_0x542011(0x15f),_0x570250,_0x519394(),_0x141983,[_0x2dfc76],_0x11a541));}},_0x4745e6=_0x11af8f=>{var _0x5489fb=_0x142125,_0x4f03f4;return _0x357d6f===_0x5489fb(0x144)&&_0x42452a[_0x5489fb(0x1af)]&&((_0x4f03f4=_0x11af8f==null?void 0x0:_0x11af8f[_0x5489fb(0x1d6)])==null?void 0x0:_0x4f03f4[_0x5489fb(0x196)])&&(_0x11af8f[_0x5489fb(0x1d6)][0x0][_0x5489fb(0x1af)]=_0x42452a[_0x5489fb(0x1af)]),_0x11af8f;};_0x42452a['_console_ninja']={'consoleLog':(_0x43a358,_0x51f124)=>{var _0x8b022a=_0x142125;_0x42452a[_0x8b022a(0x155)][_0x8b022a(0x173)][_0x8b022a(0x193)]!==_0x8b022a(0x170)&&_0x394580(_0x1c5526(_0x8b022a(0x173),_0x43a358,_0x519394(),_0x141983,_0x51f124));},'consoleTrace':(_0x570a27,_0x348deb)=>{var _0x2cbaaf=_0x142125;_0x42452a['console'][_0x2cbaaf(0x173)][_0x2cbaaf(0x193)]!==_0x2cbaaf(0x110)&&_0x394580(_0x4745e6(_0x1c5526('trace',_0x570a27,_0x519394(),_0x141983,_0x348deb)));},'consoleTime':_0xecbd83=>{_0x5e9d0b(_0xecbd83);},'consoleTimeEnd':(_0x13e425,_0x40f16b)=>{_0xf392f0(_0x40f16b,_0x13e425);},'autoLog':(_0xd6728,_0x4e573a)=>{var _0x1721d8=_0x142125;_0x394580(_0x1c5526(_0x1721d8(0x173),_0x4e573a,_0x519394(),_0x141983,[_0xd6728]));},'autoLogMany':(_0x120e61,_0x50254e)=>{var _0x23a271=_0x142125;_0x394580(_0x1c5526(_0x23a271(0x173),_0x120e61,_0x519394(),_0x141983,_0x50254e));},'autoTrace':(_0x13600e,_0x4b15ed)=>{var _0x1d8a22=_0x142125;_0x394580(_0x4745e6(_0x1c5526(_0x1d8a22(0x1b4),_0x4b15ed,_0x519394(),_0x141983,[_0x13600e])));},'autoTraceMany':(_0x138c2e,_0x56c619)=>{var _0x3be250=_0x142125;_0x394580(_0x4745e6(_0x1c5526(_0x3be250(0x1b4),_0x138c2e,_0x519394(),_0x141983,_0x56c619)));},'autoTime':(_0x24f97f,_0x5d6b97,_0x482e17)=>{_0x5e9d0b(_0x482e17);},'autoTimeEnd':(_0x487443,_0x83184a,_0x16136b)=>{_0xf392f0(_0x83184a,_0x16136b);},'coverage':_0x20834a=>{var _0x5d2895=_0x142125;_0x394580({'method':_0x5d2895(0x1ae),'version':_0x11f33d,'args':[{'id':_0x20834a}]});}};let _0x394580=q(_0x42452a,_0x19f01a,_0x53e950,_0x4642e0,_0x357d6f,_0xb78aee,_0x56dead),_0x141983=_0x42452a['_console_ninja_session'];return _0x42452a['_console_ninja'];})(globalThis,_0x5e5252(0x12c),_0x5e5252(0x117),_0x5e5252(0x1a0),_0x5e5252(0x1a5),'1.0.0',_0x5e5252(0x106),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x5e5252(0x1ad),'',_0x5e5252(0x1dc));")}catch(e){}}function c(e,...t){try{_().consoleLog(e,t)}catch(e){}return t}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(e,t,i)=>{i.r(t),i.d(t,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>Y,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>Z,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>J,setCurrentScreen:()=>V,setDefaultEventParameters:()=>q,setUserId:()=>X,setUserProperties:()=>$,settings:()=>F});var s=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),n=i("./node_modules/@firebase/util/dist/index.esm2017.js"),x=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js");i("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const o="analytics",r="firebase_id",_="origin",c=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",h="https://www.googletagmanager.com/gtag/js",l=new a.Logger("@firebase/analytics"),f={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},u=new n.ErrorFactory("analytics","Analytics",f);function b(e){if(!e.startsWith(h)){const t=u.create("invalid-gtag-resource",{gtagURL:e});return l.warn(t.message),""}return e}function g(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}function p(e,t){const i=function(e,t){let i;return window.trustedTypes&&(i=window.trustedTypes.createPolicy(e,t)),i}("firebase-js-sdk-policy",{createScriptURL:b}),s=document.createElement("script"),a=`${h}?l=${e}&id=${t}`;s.src=i?null==i?void 0:i.createScriptURL(a):a,s.async=!0,document.head.appendChild(s)}function m(e,t,i,s){return async function(a,...n){try{if("event"===a){const[s,a]=n;await async function(e,t,i,s,a){try{let n=[];if(a&&a.send_to){let e=a.send_to;Array.isArray(e)||(e=[e]);const s=await g(i);for(const i of e){const e=s.find((e=>e.measurementId===i)),a=e&&t[e.appId];if(!a){n=[];break}n.push(a)}}0===n.length&&(n=Object.values(t)),await Promise.all(n),e("event",s,a||{})}catch(e){l.error(e)}}(e,t,i,s,a)}else if("config"===a){const[a,x]=n;await async function(e,t,i,s,a,n){const x=s[a];try{if(x)await t[x];else{const e=(await g(i)).find((e=>e.measurementId===a));e&&await t[e.appId]}}catch(e){l.error(e)}e("config",a,n)}(e,t,i,s,a,x)}else if("consent"===a){const[t]=n;e("consent","update",t)}else if("get"===a){const[t,i,s]=n;e("get",t,i,s)}else if("set"===a){const[t]=n;e("set",t)}else e(a,...n)}catch(e){l.error(e)}}}const v=30;const w=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function y(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function S(e,t=w,i){const{appId:s,apiKey:a,measurementId:n}=e.options;if(!s)throw u.create("no-app-id");if(!a){if(n)return{measurementId:n,appId:s};throw u.create("no-api-key")}const x=t.getThrottleMetadata(s)||{backoffCount:0,throttleEndTimeMillis:Date.now()},o=new E;return setTimeout((async()=>{o.abort()}),void 0!==i?i:c),I({appId:s,apiKey:a,measurementId:n},x,o,t)}async function I(e,{throttleEndTimeMillis:t,backoffCount:i},s,a=w){var x;const{appId:o,measurementId:r}=e;try{await function(e,t){return new Promise(((i,s)=>{const a=Math.max(t-Date.now(),0),n=setTimeout(i,a);e.addEventListener((()=>{clearTimeout(n),s(u.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(s,t)}catch(e){if(r)return l.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:o,measurementId:r};throw e}try{const t=await async function(e){var t;const{appId:i,apiKey:s}=e,a={method:"GET",headers:y(s)},n=d.replace("{app-id}",i),x=await fetch(n,a);if(200!==x.status&&304!==x.status){let e="";try{const i=await x.json();(null===(t=i.error)||void 0===t?void 0:t.message)&&(e=i.error.message)}catch(e){}throw u.create("config-fetch-failed",{httpStatus:x.status,responseMessage:e})}return x.json()}(e);return a.deleteThrottleMetadata(o),t}catch(t){const _=t;if(!function(e){if(!(e instanceof n.FirebaseError&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(_)){if(a.deleteThrottleMetadata(o),r)return l.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==_?void 0:_.message}]`),{appId:o,measurementId:r};throw t}const c=503===Number(null===(x=null==_?void 0:_.customData)||void 0===x?void 0:x.httpStatus)?(0,n.calculateBackoffMillis)(i,a.intervalMillis,v):(0,n.calculateBackoffMillis)(i,a.intervalMillis),d={throttleEndTimeMillis:Date.now()+c,backoffCount:i+1};return a.setThrottleMetadata(o,d),l.debug(`Calling attemptFetch again in ${c} millis`),I(e,d,s,a)}}class E{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let T,C;function P(e){C=e}function A(e){T=e}async function L(e,t,i,s,a,x,o){var c;const d=S(e);d.then((t=>{i[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&l.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>l.error(e))),t.push(d);const f=async function(){if(!(0,n.isIndexedDBAvailable)())return l.warn(u.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,n.validateIndexedDBOpenable)()}catch(e){return l.warn(u.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?s.getId():void 0)),[b,g]=await Promise.all([d,f]);(function(e){const t=window.document.getElementsByTagName("script");for(const i of Object.values(t))if(i.src&&i.src.includes(h)&&i.src.includes(e))return i;return null})(x)||p(x,b.measurementId),C&&(a("consent","default",C),P(void 0)),a("js",new Date);const m=null!==(c=null==o?void 0:o.config)&&void 0!==c?c:{};return m[_]="firebase",m.update=!0,null!=g&&(m[r]=g),a("config",b.measurementId,m),T&&(a("set",T),A(void 0)),b.measurementId}class k{constructor(e){this.app=e}_delete(){return delete D[this.app.options.appId],Promise.resolve()}}let D={},N=[];const O={};let B,M,z="dataLayer",j="gtag",R=!1;function F(e){if(R)throw u.create("already-initialized");e.dataLayerName&&(z=e.dataLayerName),e.gtagName&&(j=e.gtagName)}function U(e,t,i){!function(){const e=[];if((0,n.isBrowserExtension)()&&e.push("This is a browser extension environment."),(0,n.areCookiesEnabled)()||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),i=u.create("invalid-analytics-context",{errorInfo:t});l.warn(i.message)}}();const s=e.options.appId;if(!s)throw u.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw u.create("no-api-key");l.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=D[s])throw u.create("already-exists",{id:s});if(!R){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(z);const{wrappedGtag:e,gtagCore:t}=function(e,t,i,s,a){let n=function(...e){window[s].push(arguments)};return window[a]&&"function"==typeof window[a]&&(n=window[a]),window[a]=m(n,e,t,i),{gtagCore:n,wrappedGtag:window[a]}}(D,N,O,z,j);M=e,B=t,R=!0}D[s]=L(e,N,O,t,B,z,i);return new k(e)}function H(e=(0,s.getApp)()){e=(0,n.getModularInstance)(e);const t=(0,s._getProvider)(e,o);return t.isInitialized()?t.getImmediate():G(e)}function G(e,t={}){const i=(0,s._getProvider)(e,o);if(i.isInitialized()){const e=i.getImmediate();if((0,n.deepEqual)(t,i.getOptions()))return e;throw u.create("already-initialized")}return i.initialize({options:t})}async function W(){if((0,n.isBrowserExtension)())return!1;if(!(0,n.areCookiesEnabled)())return!1;if(!(0,n.isIndexedDBAvailable)())return!1;try{return await(0,n.validateIndexedDBOpenable)()}catch(e){return!1}}function V(e,t,i){e=(0,n.getModularInstance)(e),async function(e,t,i,s){if(s&&s.global)return e("set",{screen_name:i}),Promise.resolve();e("config",await t,{update:!0,screen_name:i})}(M,D[e.app.options.appId],t,i).catch((e=>l.error(e)))}async function Y(e){return e=(0,n.getModularInstance)(e),async function(e,t){const i=await t;return new Promise(((t,s)=>{e("get",i,"client_id",(e=>{e||s(u.create("no-client-id")),t(e)}))}))}(M,D[e.app.options.appId])}function X(e,t,i){e=(0,n.getModularInstance)(e),async function(e,t,i,s){if(s&&s.global)return e("set",{user_id:i}),Promise.resolve();e("config",await t,{update:!0,user_id:i})}(M,D[e.app.options.appId],t,i).catch((e=>l.error(e)))}function $(e,t,i){e=(0,n.getModularInstance)(e),async function(e,t,i,s){if(s&&s.global){const t={};for(const e of Object.keys(i))t[`user_properties.${e}`]=i[e];return e("set",t),Promise.resolve()}e("config",await t,{update:!0,user_properties:i})}(M,D[e.app.options.appId],t,i).catch((e=>l.error(e)))}function K(e,t){e=(0,n.getModularInstance)(e),async function(e,t){const i=await e;window[`ga-disable-${i}`]=!t}(D[e.app.options.appId],t).catch((e=>l.error(e)))}function q(e){M?M("set",e):A(e)}function Z(e,t,i,s){e=(0,n.getModularInstance)(e),async function(e,t,i,s,a){if(a&&a.global)e("event",i,s);else{const a=await t;e("event",i,Object.assign(Object.assign({},s),{send_to:a}))}}(M,D[e.app.options.appId],t,i,s).catch((e=>l.error(e)))}function J(e){M?M("consent","update",e):P(e)}const Q="@firebase/analytics",ee="0.10.0";(0,s._registerComponent)(new x.Component(o,((e,{options:t})=>U(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),(0,s._registerComponent)(new x.Component("analytics-internal",(function(e){try{const t=e.getProvider(o).getImmediate();return{logEvent:(e,i,s)=>Z(t,e,i,s)}}catch(e){throw u.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),(0,s.registerVersion)(Q,ee),(0,s.registerVersion)(Q,ee,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(e,t,i)=>{i.r(t),i.d(t,{FirebaseError:()=>n.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>B,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>z,_clearComponents:()=>W,_components:()=>j,_getProvider:()=>H,_registerComponent:()=>U,_removeServiceInstance:()=>G,deleteApp:()=>J,getApp:()=>q,getApps:()=>Z,initializeApp:()=>K,onLog:()=>ee,registerVersion:()=>Q,setLogLevel:()=>te});var s=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),n=i("./node_modules/@firebase/util/dist/index.esm2017.js"),x=i("./node_modules/idb/build/index.js");class o{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const r="@firebase/app",_="0.9.15",c=new a.Logger("@firebase/app"),d="@firebase/app-compat",h="@firebase/analytics-compat",l="@firebase/analytics",f="@firebase/app-check-compat",u="@firebase/app-check",b="@firebase/auth",g="@firebase/auth-compat",p="@firebase/database",m="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",y="@firebase/installations",S="@firebase/installations-compat",I="@firebase/messaging",E="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",P="@firebase/remote-config",A="@firebase/remote-config-compat",L="@firebase/storage",k="@firebase/storage-compat",D="@firebase/firestore",N="@firebase/firestore-compat",O="firebase",B="[DEFAULT]",M={[r]:"fire-core",[d]:"fire-core-compat",[l]:"fire-analytics",[h]:"fire-analytics-compat",[u]:"fire-app-check",[f]:"fire-app-check-compat",[b]:"fire-auth",[g]:"fire-auth-compat",[p]:"fire-rtdb",[m]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[y]:"fire-iid",[S]:"fire-iid-compat",[I]:"fire-fcm",[E]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[P]:"fire-rc",[A]:"fire-rc-compat",[L]:"fire-gcs",[k]:"fire-gcs-compat",[D]:"fire-fst",[N]:"fire-fst-compat","fire-js":"fire-js",[O]:"fire-js-all"},z=new Map,j=new Map;function R(e,t){try{e.container.addComponent(t)}catch(i){c.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,i)}}function F(e,t){e.container.addOrOverwriteComponent(t)}function U(e){const t=e.name;if(j.has(t))return c.debug(`There were multiple attempts to register component ${t}.`),!1;j.set(t,e);for(const t of z.values())R(t,e);return!0}function H(e,t){const i=e.container.getProvider("heartbeat").getImmediate({optional:!0});return i&&i.triggerHeartbeat(),e.container.getProvider(t)}function G(e,t,i=B){H(e,t).clearInstance(i)}function W(){j.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},Y=new n.ErrorFactory("app","Firebase",V);class X{constructor(e,t,i){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=i,this.container.addComponent(new s.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Y.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(e,t={}){let i=e;if("object"!=typeof t){t={name:t}}const a=Object.assign({name:B,automaticDataCollectionEnabled:!1},t),x=a.name;if("string"!=typeof x||!x)throw Y.create("bad-app-name",{appName:String(x)});if(i||(i=(0,n.getDefaultAppConfig)()),!i)throw Y.create("no-options");const o=z.get(x);if(o){if((0,n.deepEqual)(i,o.options)&&(0,n.deepEqual)(a,o.config))return o;throw Y.create("duplicate-app",{appName:x})}const r=new s.ComponentContainer(x);for(const e of j.values())r.addComponent(e);const _=new X(i,a,r);return z.set(x,_),_}function q(e=B){const t=z.get(e);if(!t&&e===B&&(0,n.getDefaultAppConfig)())return K();if(!t)throw Y.create("no-app",{appName:e});return t}function Z(){return Array.from(z.values())}async function J(e){const t=e.name;z.has(t)&&(z.delete(t),await Promise.all(e.container.getProviders().map((e=>e.delete()))),e.isDeleted=!0)}function Q(e,t,i){var a;let n=null!==(a=M[e])&&void 0!==a?a:e;i&&(n+=`-${i}`);const x=n.match(/\s|\//),o=t.match(/\s|\//);if(x||o){const e=[`Unable to register library "${n}" with version "${t}":`];return x&&e.push(`library name "${n}" contains illegal characters (whitespace or "/")`),x&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void c.warn(e.join(" "))}U(new s.Component(`${n}-version`,(()=>({library:n,version:t})),"VERSION"))}function ee(e,t){if(null!==e&&"function"!=typeof e)throw Y.create("invalid-log-argument");(0,a.setUserLogHandler)(e,t)}function te(e){(0,a.setLogLevel)(e)}const ie="firebase-heartbeat-database",se=1,ae="firebase-heartbeat-store";let ne=null;function xe(){return ne||(ne=(0,x.openDB)(ie,se,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(ae)}}).catch((e=>{throw Y.create("idb-open",{originalErrorMessage:e.message})}))),ne}async function oe(e,t){try{const i=(await xe()).transaction(ae,"readwrite"),s=i.objectStore(ae);await s.put(t,re(e)),await i.done}catch(e){if(e instanceof n.FirebaseError)c.warn(e.message);else{const t=Y.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});c.warn(t.message)}}}function re(e){return`${e.name}!${e.options.appId}`}class _e{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new de(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=ce();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=ce(),{heartbeatsToSend:t,unsentEntries:i}=function(e,t=1024){const i=[];let s=e.slice();for(const a of e){const e=i.find((e=>e.agent===a.agent));if(e){if(e.dates.push(a.date),he(i)>t){e.dates.pop();break}}else if(i.push({agent:a.agent,dates:[a.date]}),he(i)>t){i.pop();break}s=s.slice(1)}return{heartbeatsToSend:i,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=(0,n.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function ce(){return(new Date).toISOString().substring(0,10)}class de{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,n.isIndexedDBAvailable)()&&(0,n.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{const t=await xe();return await t.transaction(ae).objectStore(ae).get(re(e))}catch(e){if(e instanceof n.FirebaseError)c.warn(e.message);else{const t=Y.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});c.warn(t.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const i=await this.read();return oe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:i.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const i=await this.read();return oe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:i.lastSentHeartbeatDate,heartbeats:[...i.heartbeats,...e.heartbeats]})}}}function he(e){return(0,n.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e})).length}var le;le="",U(new s.Component("platform-logger",(e=>new o(e)),"PRIVATE")),U(new s.Component("heartbeat",(e=>new _e(e)),"PRIVATE")),Q(r,_,le),Q(r,_,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(e,t,i)=>{i.r(t),i.d(t,{Component:()=>a,ComponentContainer:()=>o,Provider:()=>x});var s=i("./node_modules/@firebase/util/dist/index.esm2017.js");class a{constructor(e,t,i){this.name=e,this.instanceFactory=t,this.type=i,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const n="[DEFAULT]";class x{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new s.Deferred;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const i=this.getOrInitializeService({instanceIdentifier:t});i&&e.resolve(i)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const i=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),s=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(i)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:i})}catch(e){if(s)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:n})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const i=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:i});t.resolve(e)}catch(e){}}}}clearInstance(e=n){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=n){return this.instances.has(e)}getOptions(e=n){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,i=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(i))throw Error(`${this.name}(${i}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:i,options:t});for(const[e,t]of this.instancesDeferred.entries()){i===this.normalizeInstanceIdentifier(e)&&t.resolve(s)}return s}onInit(e,t){var i;const s=this.normalizeInstanceIdentifier(t),a=null!==(i=this.onInitCallbacks.get(s))&&void 0!==i?i:new Set;a.add(e),this.onInitCallbacks.set(s,a);const n=this.instances.get(s);return n&&e(n,s),()=>{a.delete(e)}}invokeOnInitCallbacks(e,t){const i=this.onInitCallbacks.get(t);if(i)for(const s of i)try{s(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let i=this.instances.get(e);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(s=e,s===n?void 0:s),options:t}),this.instances.set(e,i),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(i,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,i)}catch(e){}var s;return i||null}normalizeInstanceIdentifier(e=n){return this.component?this.component.multipleInstances?e:n:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class o{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new x(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(e,t,i)=>{i.r(t),i.d(t,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>te,getToken:()=>Z,onIdChange:()=>ee});var s=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=i("./node_modules/@firebase/util/dist/index.esm2017.js"),x=i("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const o="@firebase/installations",r="0.6.4",_=1e4,c=`w:${r}`,d="FIS_v2",h="https://firebaseinstallations.googleapis.com/v1",l=36e5,f={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},u=new n.ErrorFactory("installations","Installations",f);function b(e){return e instanceof n.FirebaseError&&e.code.includes("request-failed")}function g({projectId:e}){return`${h}/projects/${e}/installations`}function p(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function m(e,t){const i=(await t.json()).error;return u.create("request-failed",{requestName:e,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})}function v({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function w(e,{refreshToken:t}){const i=v(e);return i.append("Authorization",function(e){return`${d} ${e}`}(t)),i}async function y(e){const t=await e();return t.status>=500&&t.status<600?e():t}function S(e){return new Promise((t=>{setTimeout(t,e)}))}const I=/^[cdef][\w-]{21}$/,E="";function T(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){const t=(i=e,btoa(String.fromCharCode(...i)).replace(/\+/g,"-").replace(/\//g,"_"));var i;return t.substr(0,22)}(e);return I.test(t)?t:E}catch(e){return E}}function C(e){return`${e.appName}!${e.appId}`}const P=new Map;function A(e,t){const i=C(e);L(i,t),function(e,t){const i=D();i&&i.postMessage({key:e,fid:t});N()}(i,t)}function L(e,t){const i=P.get(e);if(i)for(const e of i)e(t)}let k=null;function D(){return!k&&"BroadcastChannel"in self&&(k=new BroadcastChannel("[Firebase] FID Change"),k.onmessage=e=>{L(e.data.key,e.data.fid)}),k}function N(){0===P.size&&k&&(k.close(),k=null)}const O="firebase-installations-database",B=1,M="firebase-installations-store";let z=null;function j(){return z||(z=(0,x.openDB)(O,B,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(M)}})),z}async function R(e,t){const i=C(e),s=(await j()).transaction(M,"readwrite"),a=s.objectStore(M),n=await a.get(i);return await a.put(t,i),await s.done,n&&n.fid===t.fid||A(e,t.fid),t}async function F(e){const t=C(e),i=(await j()).transaction(M,"readwrite");await i.objectStore(M).delete(t),await i.done}async function U(e,t){const i=C(e),s=(await j()).transaction(M,"readwrite"),a=s.objectStore(M),n=await a.get(i),x=t(n);return void 0===x?await a.delete(i):await a.put(x,i),await s.done,!x||n&&n.fid===x.fid||A(e,x.fid),x}async function H(e){let t;const i=await U(e.appConfig,(i=>{const s=function(e){const t=e||{fid:T(),registrationStatus:0};return V(t)}(i),a=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){return{installationEntry:t,registrationPromise:Promise.reject(u.create("app-offline"))}}const i={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},s=async function(e,t){try{const i=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:i}){const s=g(e),a=v(e),n=t.getImmediate({optional:!0});if(n){const e=await n.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const x={fid:i,authVersion:d,appId:e.appId,sdkVersion:c},o={method:"POST",headers:a,body:JSON.stringify(x)},r=await y((()=>fetch(s,o)));if(r.ok){const e=await r.json();return{fid:e.fid||i,registrationStatus:2,refreshToken:e.refreshToken,authToken:p(e.authToken)}}throw await m("Create Installation",r)}(e,t);return R(e.appConfig,i)}catch(i){throw b(i)&&409===i.customData.serverCode?await F(e.appConfig):await R(e.appConfig,{fid:t.fid,registrationStatus:0}),i}}(e,i);return{installationEntry:i,registrationPromise:s}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:G(e)}:{installationEntry:t}}(e,s);return t=a.registrationPromise,a.installationEntry}));return i.fid===E?{installationEntry:await t}:{installationEntry:i,registrationPromise:t}}async function G(e){let t=await W(e.appConfig);for(;1===t.registrationStatus;)await S(100),t=await W(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:i}=await H(e);return i||t}return t}function W(e){return U(e,(e=>{if(!e)throw u.create("installation-not-found");return V(e)}))}function V(e){return 1===(t=e).registrationStatus&&t.registrationTime+_<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Y({appConfig:e,heartbeatServiceProvider:t},i){const s=function(e,{fid:t}){return`${g(e)}/${t}/authTokens:generate`}(e,i),a=w(e,i),n=t.getImmediate({optional:!0});if(n){const e=await n.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const x={installation:{sdkVersion:c,appId:e.appId}},o={method:"POST",headers:a,body:JSON.stringify(x)},r=await y((()=>fetch(s,o)));if(r.ok){return p(await r.json())}throw await m("Generate Auth Token",r)}async function X(e,t=!1){let i;const s=await U(e.appConfig,(s=>{if(!K(s))throw u.create("not-registered");const a=s.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+l}(e)}(a))return s;if(1===a.requestStatus)return i=async function(e,t){let i=await $(e.appConfig);for(;1===i.authToken.requestStatus;)await S(100),i=await $(e.appConfig);const s=i.authToken;return 0===s.requestStatus?X(e,t):s}(e,t),s;{if(!navigator.onLine)throw u.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(s);return i=async function(e,t){try{const i=await Y(e,t),s=Object.assign(Object.assign({},t),{authToken:i});return await R(e.appConfig,s),i}catch(i){if(!b(i)||401!==i.customData.serverCode&&404!==i.customData.serverCode){const i=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await R(e.appConfig,i)}else await F(e.appConfig);throw i}}(e,t),t}}));return i?await i:s.authToken}function $(e){return U(e,(e=>{if(!K(e))throw u.create("not-registered");const t=e.authToken;return 1===(i=t).requestStatus&&i.requestTime+_<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var i}))}function K(e){return void 0!==e&&2===e.registrationStatus}async function q(e){const t=e,{installationEntry:i,registrationPromise:s}=await H(t);return s?s.catch(console.error):X(t).catch(console.error),i.fid}async function Z(e,t=!1){const i=e;await async function(e){const{registrationPromise:t}=await H(e);t&&await t}(i);return(await X(i,t)).token}async function J(e,t){const i=function(e,{fid:t}){return`${g(e)}/${t}`}(e,t),s={method:"DELETE",headers:w(e,t)},a=await y((()=>fetch(i,s)));if(!a.ok)throw await m("Delete Installation",a)}async function Q(e){const{appConfig:t}=e,i=await U(t,(e=>{if(!e||0!==e.registrationStatus)return e}));if(i){if(1===i.registrationStatus)throw u.create("delete-pending-registration");if(2===i.registrationStatus){if(!navigator.onLine)throw u.create("app-offline");await J(t,i),await F(t)}}}function ee(e,t){const{appConfig:i}=e;return function(e,t){D();const i=C(e);let s=P.get(i);s||(s=new Set,P.set(i,s)),s.add(t)}(i,t),()=>{!function(e,t){const i=C(e),s=P.get(i);s&&(s.delete(t),0===s.size&&P.delete(i),N())}(i,t)}}function te(e=(0,s.getApp)()){return(0,s._getProvider)(e,"installations").getImmediate()}function ie(e){return u.create("missing-app-config-values",{valueName:e})}const se="installations",ae=e=>{const t=e.getProvider("app").getImmediate(),i=function(e){if(!e||!e.options)throw ie("App Configuration");if(!e.name)throw ie("App Name");const t=["projectId","apiKey","appId"];for(const i of t)if(!e.options[i])throw ie(i);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:i,heartbeatServiceProvider:(0,s._getProvider)(t,"heartbeat"),_delete:()=>Promise.resolve()}},ne=e=>{const t=e.getProvider("app").getImmediate(),i=(0,s._getProvider)(t,se).getImmediate();return{getId:()=>q(i),getToken:e=>Z(i,e)}};(0,s._registerComponent)(new a.Component(se,ae,"PUBLIC")),(0,s._registerComponent)(new a.Component("installations-internal",ne,"PRIVATE")),(0,s.registerVersion)(o,r),(0,s.registerVersion)(o,r,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(e,t,i)=>{i.r(t),i.d(t,{deleteDB:()=>n,openDB:()=>a,unwrap:()=>s.u,wrap:()=>s.w});var s=i("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function a(e,t,{blocked:i,upgrade:a,blocking:n,terminated:x}={}){const o=indexedDB.open(e,t),r=(0,s.w)(o);return a&&o.addEventListener("upgradeneeded",(e=>{a((0,s.w)(o.result),e.oldVersion,e.newVersion,(0,s.w)(o.transaction))})),i&&o.addEventListener("blocked",(()=>i())),r.then((e=>{x&&e.addEventListener("close",(()=>x())),n&&e.addEventListener("versionchange",(()=>n()))})).catch((()=>{})),r}function n(e,{blocked:t}={}){const i=indexedDB.deleteDatabase(e);return t&&i.addEventListener("blocked",(()=>t())),(0,s.w)(i).then((()=>{}))}const x=["get","getKey","getAll","getAllKeys","count"],o=["put","add","delete","clear"],r=new Map;function _(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(r.get(t))return r.get(t);const i=t.replace(/FromIndex$/,""),s=t!==i,a=o.includes(i);if(!(i in(s?IDBIndex:IDBObjectStore).prototype)||!a&&!x.includes(i))return;const n=async function(e,...t){const n=this.transaction(e,a?"readwrite":"readonly");let x=n.store;return s&&(x=x.index(t.shift())),(await Promise.all([x[i](...t),a&&n.done]))[0]};return r.set(t,n),n}(0,s.r)((e=>({...e,get:(t,i,s)=>_(t,i)||e.get(t,i,s),has:(t,i)=>!!_(t,i)||e.has(t,i)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(e,t,i)=>{i.r(t),i.d(t,{a:()=>c,i:()=>s,r:()=>h,u:()=>b,w:()=>u});const s=(e,t)=>t.some((t=>e instanceof t));let a,n;const x=new WeakMap,o=new WeakMap,r=new WeakMap,_=new WeakMap,c=new WeakMap;let d={get(e,t,i){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("objectStoreNames"===t)return e.objectStoreNames||r.get(e);if("store"===t)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return u(e[t])},set:(e,t,i)=>(e[t]=i,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function h(e){d=e(d)}function l(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(x.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...i){const s=e.call(b(this),t,...i);return r.set(s,t.sort?t.sort():[t]),u(s)}}function f(e){return"function"==typeof e?l(e):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,i)=>{const s=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",n),e.removeEventListener("abort",n)},a=()=>{t(),s()},n=()=>{i(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",a),e.addEventListener("error",n),e.addEventListener("abort",n)}));o.set(e,t)}(e),s(e,a||(a=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,i)=>{const s=()=>{e.removeEventListener("success",a),e.removeEventListener("error",n)},a=()=>{t(u(e.result)),s()},n=()=>{i(e.error),s()};e.addEventListener("success",a),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&x.set(t,e)})).catch((()=>{})),c.set(t,e),t}(e);if(_.has(e))return _.get(e);const t=f(e);return t!==e&&(_.set(e,t),c.set(t,e)),t}const b=e=>c.get(e)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(e,t,i)=>{i.r(t),i.d(t,{LogLevel:()=>a,Logger:()=>_,setLogLevel:()=>c,setUserLogHandler:()=>d});const s=[];var a;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(a||(a={}));const n={debug:a.DEBUG,verbose:a.VERBOSE,info:a.INFO,warn:a.WARN,error:a.ERROR,silent:a.SILENT},x=a.INFO,o={[a.DEBUG]:"log",[a.VERBOSE]:"log",[a.INFO]:"info",[a.WARN]:"warn",[a.ERROR]:"error"},r=(e,t,...i)=>{if(t<e.logLevel)return;const s=(new Date).toISOString(),a=o[t];if(!a)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[a](`[${s}]  ${e.name}:`,...i)};class _{constructor(e){this.name=e,this._logLevel=x,this._logHandler=r,this._userLogHandler=null,s.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in a))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?n[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,a.DEBUG,...e),this._logHandler(this,a.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,a.VERBOSE,...e),this._logHandler(this,a.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,a.INFO,...e),this._logHandler(this,a.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,a.WARN,...e),this._logHandler(this,a.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,a.ERROR,...e),this._logHandler(this,a.ERROR,...e)}}function c(e){s.forEach((t=>{t.setLogLevel(e)}))}function d(e,t){for(const i of s){let s=null;t&&t.level&&(s=n[t.level]),i.userLogHandler=null===e?null:(t,i,...n)=>{const x=n.map((e=>{if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((e=>e)).join(" ");i>=(null!=s?s:t.logLevel)&&e({level:a[i].toLowerCase(),message:x,args:n,type:t.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(e,t,i)=>{i.r(t),i.d(t,{getAnalytics:()=>s.getAnalytics,getGoogleAnalyticsClientId:()=>s.getGoogleAnalyticsClientId,initializeAnalytics:()=>s.initializeAnalytics,isSupported:()=>s.isSupported,logEvent:()=>s.logEvent,setAnalyticsCollectionEnabled:()=>s.setAnalyticsCollectionEnabled,setConsent:()=>s.setConsent,setCurrentScreen:()=>s.setCurrentScreen,setDefaultEventParameters:()=>s.setDefaultEventParameters,setUserId:()=>s.setUserId,setUserProperties:()=>s.setUserProperties,settings:()=>s.settings});var s=i("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(e,t,i)=>{i.r(t),i.d(t,{FirebaseError:()=>s.FirebaseError,SDK_VERSION:()=>s.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>s._DEFAULT_ENTRY_NAME,_addComponent:()=>s._addComponent,_addOrOverwriteComponent:()=>s._addOrOverwriteComponent,_apps:()=>s._apps,_clearComponents:()=>s._clearComponents,_components:()=>s._components,_getProvider:()=>s._getProvider,_registerComponent:()=>s._registerComponent,_removeServiceInstance:()=>s._removeServiceInstance,deleteApp:()=>s.deleteApp,getApp:()=>s.getApp,getApps:()=>s.getApps,initializeApp:()=>s.initializeApp,onLog:()=>s.onLog,registerVersion:()=>s.registerVersion,setLogLevel:()=>s.setLogLevel});var s=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,s.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(e,t,i)=>{i.r(t),i.d(t,{deleteDB:()=>n,openDB:()=>a,unwrap:()=>s.u,wrap:()=>s.w});var s=i("./node_modules/idb/build/wrap-idb-value.js");function a(e,t,{blocked:i,upgrade:a,blocking:n,terminated:x}={}){const o=indexedDB.open(e,t),r=(0,s.w)(o);return a&&o.addEventListener("upgradeneeded",(e=>{a((0,s.w)(o.result),e.oldVersion,e.newVersion,(0,s.w)(o.transaction),e)})),i&&o.addEventListener("blocked",(e=>i(e.oldVersion,e.newVersion,e))),r.then((e=>{x&&e.addEventListener("close",(()=>x())),n&&e.addEventListener("versionchange",(e=>n(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),r}function n(e,{blocked:t}={}){const i=indexedDB.deleteDatabase(e);return t&&i.addEventListener("blocked",(e=>t(e.oldVersion,e))),(0,s.w)(i).then((()=>{}))}const x=["get","getKey","getAll","getAllKeys","count"],o=["put","add","delete","clear"],r=new Map;function _(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(r.get(t))return r.get(t);const i=t.replace(/FromIndex$/,""),s=t!==i,a=o.includes(i);if(!(i in(s?IDBIndex:IDBObjectStore).prototype)||!a&&!x.includes(i))return;const n=async function(e,...t){const n=this.transaction(e,a?"readwrite":"readonly");let x=n.store;return s&&(x=x.index(t.shift())),(await Promise.all([x[i](...t),a&&n.done]))[0]};return r.set(t,n),n}(0,s.r)((e=>({...e,get:(t,i,s)=>_(t,i)||e.get(t,i,s),has:(t,i)=>!!_(t,i)||e.has(t,i)})))},"./node_modules/idb/build/wrap-idb-value.js":(e,t,i)=>{i.r(t),i.d(t,{a:()=>c,i:()=>s,r:()=>h,u:()=>b,w:()=>u});const s=(e,t)=>t.some((t=>e instanceof t));let a,n;const x=new WeakMap,o=new WeakMap,r=new WeakMap,_=new WeakMap,c=new WeakMap;let d={get(e,t,i){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("objectStoreNames"===t)return e.objectStoreNames||r.get(e);if("store"===t)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return u(e[t])},set:(e,t,i)=>(e[t]=i,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function h(e){d=e(d)}function l(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(x.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...i){const s=e.call(b(this),t,...i);return r.set(s,t.sort?t.sort():[t]),u(s)}}function f(e){return"function"==typeof e?l(e):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,i)=>{const s=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",n),e.removeEventListener("abort",n)},a=()=>{t(),s()},n=()=>{i(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",a),e.addEventListener("error",n),e.addEventListener("abort",n)}));o.set(e,t)}(e),s(e,a||(a=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,i)=>{const s=()=>{e.removeEventListener("success",a),e.removeEventListener("error",n)},a=()=>{t(u(e.result)),s()},n=()=>{i(e.error),s()};e.addEventListener("success",a),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&x.set(t,e)})).catch((()=>{})),c.set(t,e),t}(e);if(_.has(e))return _.get(e);const t=f(e);return t!==e&&(_.set(e,t),c.set(t,e)),t}const b=e=>c.get(e)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(e,t,i)=>{i.r(t),i.d(t,{Workbox:()=>l,messageSW:()=>s});try{self["workbox:window:4.3.1"]&&_()}catch(s){}var s=function(e,t){return new Promise((function(i){var s=new MessageChannel;s.port1.onmessage=function(e){return i(e.data)},e.postMessage(t,[s.port2])}))};function a(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}try{self["workbox:core:4.3.1"]&&_()}catch(s){}var x=function(){var e=this;this.promise=new Promise((function(t,i){e.resolve=t,e.reject=i}))},o=function(e,t){return new URL(e,location).href===new URL(t,location).href},r=function(e,t){Object.assign(this,t,{type:e})};function c(e){return function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function d(e,t,i){return i?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function h(){}var l=function(e){var t,i;function _(t,i){var s;return void 0===i&&(i={}),(s=e.call(this)||this).t=t,s.i=i,s.o=0,s.u=new x,s.s=new x,s.h=new x,s.v=s.v.bind(n(n(s))),s.l=s.l.bind(n(n(s))),s.g=s.g.bind(n(n(s))),s.m=s.m.bind(n(n(s))),s}i=e,(t=_).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i;var l,f,u=_.prototype;return u.register=c((function(e){var t,i,s=this,a=(void 0===e?{}:e).immediate,n=void 0!==a&&a;return t=function(){return s.p=Boolean(navigator.serviceWorker.controller),s.P=s.R(),d(s.k(),(function(e){s.B=e,s.P&&(s.O=s.P,s.s.resolve(s.P),s.h.resolve(s.P),s.j(s.P),s.P.addEventListener("statechange",s.l,{once:!0}));var t=s.B.waiting;return t&&o(t.scriptURL,s.t)&&(s.O=t,Promise.resolve().then((function(){s.dispatchEvent(new r("waiting",{sw:t,wasWaitingBeforeRegister:!0}))}))),s.O&&s.u.resolve(s.O),s.B.addEventListener("updatefound",s.g),navigator.serviceWorker.addEventListener("controllerchange",s.m,{once:!0}),"BroadcastChannel"in self&&(s.C=new BroadcastChannel("workbox"),s.C.addEventListener("message",s.v)),navigator.serviceWorker.addEventListener("message",s.v),s.B}))},(i=function(){if(!n&&"complete"!==document.readyState)return function(e,t){return e&&e.then?e.then(h):Promise.resolve()}(new Promise((function(e){return addEventListener("load",e)})))}())&&i.then?i.then(t):t()})),u.getSW=c((function(){return this.O||this.u.promise})),u.messageSW=c((function(e){return d(this.getSW(),(function(t){return s(t,e)}))})),u.R=function(){var e=navigator.serviceWorker.controller;if(e&&o(e.scriptURL,this.t))return e},u.k=c((function(){var e=this;return function(e,t){try{var i=e()}catch(e){return t(e)}return i&&i.then?i.then(void 0,t):i}((function(){return d(navigator.serviceWorker.register(e.t,e.i),(function(t){return e.L=performance.now(),t}))}),(function(e){throw e}))})),u.j=function(e){s(e,{type:"WINDOW_READY",meta:"workbox-window"})},u.g=function(){var e=this.B.installing;this.o>0||!o(e.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=e,this.B.removeEventListener("updatefound",this.g)):(this.O=e,this.u.resolve(e)),++this.o,e.addEventListener("statechange",this.l)},u.l=function(e){var t=this,i=e.target,s=i.state,a=i===this.W,n=a?"external":"",x={sw:i,originalEvent:e};!a&&this.p&&(x.isUpdate=!0),this.dispatchEvent(new r(n+s,x)),"installed"===s?this._=setTimeout((function(){"installed"===s&&t.B.waiting===i&&t.dispatchEvent(new r(n+"waiting",x))}),200):"activating"===s&&(clearTimeout(this._),a||this.s.resolve(i))},u.m=function(e){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new r("controlling",{sw:t,originalEvent:e})),this.h.resolve(t))},u.v=function(e){var t=e.data;this.dispatchEvent(new r("message",{data:t,originalEvent:e}))},l=_,(f=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&a(l.prototype,f),_}(function(){function e(){this.D={}}var t=e.prototype;return t.addEventListener=function(e,t){this.T(e).add(t)},t.removeEventListener=function(e,t){this.T(e).delete(t)},t.dispatchEvent=function(e){e.target=this,this.T(e.type).forEach((function(t){return t(e)}))},t.T=function(e){return this.D[e]=this.D[e]||new Set},e}())}},t={};function i(s){var a=t[s];if(void 0!==a)return a.exports;var n=t[s]={exports:{}};return e[s](n,n.exports,i),n.exports}i.d=(e,t)=>{for(var s in t)i.o(t,s)&&!i.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};(()=>{i.r(s);var e=i("./src/data/index.ts"),t=i("./src/sceneHandler/index.ts"),a=i("./src/constants/index.ts"),n=i("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),x=i("./src/Firebase/firebase-integration.ts"),o=i("./src/common/index.ts"),r=i("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;firebaseIntegration;constructor(e){this.lang=e,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new x.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const t=await o.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const i=await(0,e.getData)();this.majVersion=i.majversion,this.minVersion=i.minversion,this.dataModal=this.createDataModal(i),this.globalInitialization(i),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}logSessionStartFirebaseEvent(){let e=localStorage.getItem("lastSessionEndTime"),t=0;if(this.startSessionTime=(new Date).getTime(),e){let i=parseInt(e);isNaN(i)||(t=Math.abs((new Date).getTime()-i))}const i=parseFloat((t?t/864e5:0).toFixed(3)),s={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:i};this.firebaseIntegration.sendSessionStartEvent(s)}logSessionEndFirebaseEvent(){const e={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(e)}initializeCachedData(){const e=localStorage.getItem(a.IsCached);return e?new Map(JSON.parse(e)):new Map}async loadAndCacheFont(e,t){try{const i=await caches.open("fontCache");if(!await i.match(t)){const e=await fetch(t),s=await e.blob();await i.put(t,new Response(s))}const s=new FontFace(e,`url(${t}) format('truetype')`);await s.load(),document.fonts.add(s)}catch(e){console.error(`Failed to load and cache font: ${e}`)}}handleLoadingScreen=()=>{this.is_cached.get(o.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new n.Workbox("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(e.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async e=>{if(!e.ok)return void console.error("Failed to fetch the content file from the server!");const t=await e.json();console.log(...c("1502796914_184_14_184_45_4",t));const i=t.majversion+"."+t.minversion,s=localStorage.getItem("version"+o.lang.toLowerCase());if(console.log(...c("1502796914_192_14_192_77_4","No Cache Content version: "+i)),console.log(...c("1502796914_193_14_193_61_4","cached version :"+s)),i&&s!=i){console.log(...c("1502796914_198_16_198_69_4","Content version mismatch! Reloading..."));var n=JSON.parse(localStorage.getItem("is_cached"));console.log(...c("1502796914_200_16_200_52_4","current lang  "+o.lang));var x=n.filter((e=>!e.toString().includes(o.lang)));localStorage.setItem(a.IsCached,JSON.stringify(x)),localStorage.removeItem("version"+o.lang.toLowerCase()),caches.delete(o.lang),this.handleUpdateFoundMessage()}})).catch((e=>{console.error("Error fetching the content file: "+e)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(e){console.error(`Failed to register service worker: ${e}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(e){globalThis.aboutCompany=e.aboutCompany,globalThis.descriptionText=e.descriptionText}handleResize(e){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(e),this.setupCanvas(),this.reinitializeSceneHandler(e))}updateVersionInfoElement(e){this.is_cached.has(this.lang)&&o.Debugger.DevelopmentLink&&(e.majVersion&&e.minVersion?this.versionInfoElement.innerHTML+=`/j.v${e.majVersion}.${e.minVersion}`:e.version&&(this.versionInfoElement.innerHTML+=`/j.v${e.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(e){delete this.sceneHandler,this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}handleCachedScenario(e){this.updateVersionInfoElement(e),this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=e=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${e.data}%`),e.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(a.IsCached,JSON.stringify(Array.from(this.is_cached.entries())));const e={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(e),localStorage.setItem("version"+this.lang,this.majVersion+"."+this.minVersion),this.loadingElement.style.display="none",this.handleResize(this.dataModal),console.log(...c("1502796914_336_8_336_36_4","hide progress"))}this.progressBar.style.width=`${e.data}%`}};handleServiceWorkerMessage=e=>{"Loading"===e.data.msg?this.handleLoadingMessage(e.data):"Update Found"===e.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,o.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async e=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let e=a.AUDIO_URL_PRELOAD;return new Promise(((t,i)=>{const s=e.map((e=>(new r.AudioPlayer).preloadGameAudio(e)));Promise.all(s).then((()=>t())).catch((e=>{console.error("Error preloading audio:",e),i(e)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(o.lang);function _(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x5e5252=_0x5724;(function(_0x2734d3,_0x3f13e4){var _0x33d76f=_0x5724,_0x2b91b1=_0x2734d3();while(!![]){try{var _0x3ec2c9=-parseInt(_0x33d76f(0x187))/0x1*(parseInt(_0x33d76f(0x1cf))/0x2)+parseInt(_0x33d76f(0x1ca))/0x3+-parseInt(_0x33d76f(0x157))/0x4*(-parseInt(_0x33d76f(0x121))/0x5)+-parseInt(_0x33d76f(0x135))/0x6*(-parseInt(_0x33d76f(0x1c3))/0x7)+-parseInt(_0x33d76f(0x114))/0x8+-parseInt(_0x33d76f(0x1d2))/0x9*(parseInt(_0x33d76f(0x15c))/0xa)+parseInt(_0x33d76f(0x125))/0xb*(parseInt(_0x33d76f(0x107))/0xc);if(_0x3ec2c9===_0x3f13e4)break;else _0x2b91b1['push'](_0x2b91b1['shift']());}catch(_0x59eed6){_0x2b91b1['push'](_0x2b91b1['shift']());}}}(_0x4ca8,0x95fb0));var K=Object[_0x5e5252(0x1d8)],Q=Object['defineProperty'],G=Object['getOwnPropertyDescriptor'],ee=Object[_0x5e5252(0x1da)],te=Object['getPrototypeOf'],ne=Object[_0x5e5252(0x148)]['hasOwnProperty'],re=(_0x459b06,_0x2c21e4,_0x6f5987,_0x35c3e0)=>{var _0x3f5eb1=_0x5e5252;if(_0x2c21e4&&typeof _0x2c21e4==_0x3f5eb1(0x1c9)||typeof _0x2c21e4==_0x3f5eb1(0x10a)){for(let _0x21828e of ee(_0x2c21e4))!ne[_0x3f5eb1(0x163)](_0x459b06,_0x21828e)&&_0x21828e!==_0x6f5987&&Q(_0x459b06,_0x21828e,{'get':()=>_0x2c21e4[_0x21828e],'enumerable':!(_0x35c3e0=G(_0x2c21e4,_0x21828e))||_0x35c3e0[_0x3f5eb1(0x1d9)]});}return _0x459b06;},V=(_0x10e0e7,_0x1cff15,_0x902688)=>(_0x902688=_0x10e0e7!=null?K(te(_0x10e0e7)):{},re(_0x1cff15||!_0x10e0e7||!_0x10e0e7['__es'+'Module']?Q(_0x902688,_0x5e5252(0x18d),{'value':_0x10e0e7,'enumerable':!0x0}):_0x902688,_0x10e0e7)),x=class{constructor(_0x4342de,_0x487c86,_0x1f6f2d,_0x3412f0,_0x258674,_0xf66d22){var _0x2b6eb1=_0x5e5252,_0x3a6920,_0xdb653b,_0x35b7ba,_0x2109ef;this[_0x2b6eb1(0x1a6)]=_0x4342de,this[_0x2b6eb1(0x17e)]=_0x487c86,this[_0x2b6eb1(0x1ac)]=_0x1f6f2d,this['nodeModules']=_0x3412f0,this[_0x2b6eb1(0xf7)]=_0x258674,this[_0x2b6eb1(0x1cc)]=_0xf66d22,this[_0x2b6eb1(0x171)]=!0x0,this[_0x2b6eb1(0x19e)]=!0x0,this[_0x2b6eb1(0x1e2)]=!0x1,this[_0x2b6eb1(0x12f)]=!0x1,this['_inNextEdge']=((_0xdb653b=(_0x3a6920=_0x4342de[_0x2b6eb1(0x166)])==null?void 0x0:_0x3a6920[_0x2b6eb1(0x180)])==null?void 0x0:_0xdb653b[_0x2b6eb1(0x15a)])==='edge',this[_0x2b6eb1(0x1d4)]=!((_0x2109ef=(_0x35b7ba=this[_0x2b6eb1(0x1a6)][_0x2b6eb1(0x166)])==null?void 0x0:_0x35b7ba['versions'])!=null&&_0x2109ef[_0x2b6eb1(0x177)])&&!this[_0x2b6eb1(0x11f)],this['_WebSocketClass']=null,this[_0x2b6eb1(0x194)]=0x0,this[_0x2b6eb1(0x1a4)]=0x14,this[_0x2b6eb1(0x185)]=_0x2b6eb1(0x11e),this[_0x2b6eb1(0x105)]=(this[_0x2b6eb1(0x1d4)]?'Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20':_0x2b6eb1(0x145))+this[_0x2b6eb1(0x185)];}async[_0x5e5252(0x152)](){var _0x24028e=_0x5e5252,_0x235667,_0x33fb83;if(this[_0x24028e(0x14b)])return this[_0x24028e(0x14b)];let _0x4aab77;if(this[_0x24028e(0x1d4)]||this[_0x24028e(0x11f)])_0x4aab77=this[_0x24028e(0x1a6)][_0x24028e(0x15e)];else{if((_0x235667=this[_0x24028e(0x1a6)][_0x24028e(0x166)])!=null&&_0x235667[_0x24028e(0x128)])_0x4aab77=(_0x33fb83=this['global'][_0x24028e(0x166)])==null?void 0x0:_0x33fb83[_0x24028e(0x128)];else try{let _0x40b98f=await import(_0x24028e(0x123));_0x4aab77=(await import((await import(_0x24028e(0x1ab)))[_0x24028e(0x158)](_0x40b98f[_0x24028e(0x190)](this[_0x24028e(0x198)],'ws/index.js'))[_0x24028e(0x197)]()))['default'];}catch{try{_0x4aab77=require(require('path')['join'](this[_0x24028e(0x198)],'ws'));}catch{throw new Error('failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket');}}}return this[_0x24028e(0x14b)]=_0x4aab77,_0x4aab77;}['_connectToHostNow'](){var _0x400417=_0x5e5252;this['_connecting']||this[_0x400417(0x1e2)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x400417(0x12f)]=!0x0,this[_0x400417(0x194)]++,this[_0x400417(0xfb)]=new Promise((_0x38b61d,_0x109924)=>{var _0x46302c=_0x400417;this['getWebSocketClass']()[_0x46302c(0x17d)](_0x417802=>{var _0x374283=_0x46302c;let _0x5bd05c=new _0x417802(_0x374283(0x11d)+(!this[_0x374283(0x1d4)]&&this['dockerizedApp']?'gateway.docker.internal':this[_0x374283(0x17e)])+':'+this[_0x374283(0x1ac)]);_0x5bd05c['onerror']=()=>{var _0x447bc7=_0x374283;this[_0x447bc7(0x171)]=!0x1,this['_disposeWebsocket'](_0x5bd05c),this[_0x447bc7(0x132)](),_0x109924(new Error(_0x447bc7(0x126)));},_0x5bd05c[_0x374283(0x11a)]=()=>{var _0x4f1101=_0x374283;this[_0x4f1101(0x1d4)]||_0x5bd05c[_0x4f1101(0x143)]&&_0x5bd05c[_0x4f1101(0x143)][_0x4f1101(0x195)]&&_0x5bd05c['_socket'][_0x4f1101(0x195)](),_0x38b61d(_0x5bd05c);},_0x5bd05c['onclose']=()=>{var _0xd84c59=_0x374283;this[_0xd84c59(0x19e)]=!0x0,this[_0xd84c59(0x172)](_0x5bd05c),this[_0xd84c59(0x132)]();},_0x5bd05c[_0x374283(0x162)]=_0x208fc0=>{var _0x37931e=_0x374283;try{if(!(_0x208fc0!=null&&_0x208fc0[_0x37931e(0x16c)])||!this[_0x37931e(0x1cc)])return;let _0x463dc6=JSON['parse'](_0x208fc0[_0x37931e(0x16c)]);this['eventReceivedCallback'](_0x463dc6[_0x37931e(0x127)],_0x463dc6[_0x37931e(0x1d6)],this[_0x37931e(0x1a6)],this['_inBrowser']);}catch{}};})['then'](_0x48a851=>(this[_0x46302c(0x1e2)]=!0x0,this[_0x46302c(0x12f)]=!0x1,this[_0x46302c(0x19e)]=!0x1,this[_0x46302c(0x171)]=!0x0,this[_0x46302c(0x194)]=0x0,_0x48a851))[_0x46302c(0x19a)](_0x58f6c3=>(this[_0x46302c(0x1e2)]=!0x1,this[_0x46302c(0x12f)]=!0x1,console[_0x46302c(0x18f)](_0x46302c(0x1b2)+this[_0x46302c(0x185)]),_0x109924(new Error(_0x46302c(0x16e)+(_0x58f6c3&&_0x58f6c3[_0x46302c(0x179)])))));}));}['_disposeWebsocket'](_0x2eeddb){var _0x452d1b=_0x5e5252;this[_0x452d1b(0x1e2)]=!0x1,this['_connecting']=!0x1;try{_0x2eeddb[_0x452d1b(0x10d)]=null,_0x2eeddb['onerror']=null,_0x2eeddb[_0x452d1b(0x11a)]=null;}catch{}try{_0x2eeddb['readyState']<0x2&&_0x2eeddb[_0x452d1b(0x156)]();}catch{}}[_0x5e5252(0x132)](){var _0x51cdb3=_0x5e5252;clearTimeout(this['_reconnectTimeout']),!(this[_0x51cdb3(0x194)]>=this['_maxConnectAttemptCount'])&&(this[_0x51cdb3(0x17f)]=setTimeout(()=>{var _0x50ab0c=_0x51cdb3,_0x2952bc;this[_0x50ab0c(0x1e2)]||this[_0x50ab0c(0x12f)]||(this[_0x50ab0c(0x129)](),(_0x2952bc=this['_ws'])==null||_0x2952bc['catch'](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x51cdb3(0x17f)][_0x51cdb3(0x195)]&&this[_0x51cdb3(0x17f)][_0x51cdb3(0x195)]());}async['send'](_0xe945fe){var _0x28d8be=_0x5e5252;try{if(!this['_allowedToSend'])return;this['_allowedToConnectOnSend']&&this[_0x28d8be(0x129)](),(await this[_0x28d8be(0xfb)])[_0x28d8be(0x18c)](JSON['stringify'](_0xe945fe));}catch(_0xf9883f){console[_0x28d8be(0x18f)](this['_sendErrorMessage']+':\\x20'+(_0xf9883f&&_0xf9883f[_0x28d8be(0x179)])),this[_0x28d8be(0x171)]=!0x1,this[_0x28d8be(0x132)]();}}};function _0x5724(_0x1744e9,_0x23f798){var _0x4ca853=_0x4ca8();return _0x5724=function(_0x5724d7,_0x4ed035){_0x5724d7=_0x5724d7-0xf6;var _0x2d9558=_0x4ca853[_0x5724d7];return _0x2d9558;},_0x5724(_0x1744e9,_0x23f798);}function q(_0x5c5eb9,_0x2b9549,_0x77a008,_0x524dd6,_0x2aed90,_0x4b5ffd,_0x50c7c9,_0x49f09b=ie){var _0x261ad3=_0x5e5252;let _0x3cf774=_0x77a008[_0x261ad3(0x12e)](',')['map'](_0x42ce5c=>{var _0x16e736=_0x261ad3,_0x47cf63,_0x1f5cec,_0x165fd9,_0x542ac7;try{if(!_0x5c5eb9['_console_ninja_session']){let _0x5d18a8=((_0x1f5cec=(_0x47cf63=_0x5c5eb9['process'])==null?void 0x0:_0x47cf63[_0x16e736(0xfa)])==null?void 0x0:_0x1f5cec['node'])||((_0x542ac7=(_0x165fd9=_0x5c5eb9[_0x16e736(0x166)])==null?void 0x0:_0x165fd9['env'])==null?void 0x0:_0x542ac7[_0x16e736(0x15a)])===_0x16e736(0x1ba);(_0x2aed90===_0x16e736(0x144)||_0x2aed90===_0x16e736(0x1a2)||_0x2aed90===_0x16e736(0x10e)||_0x2aed90===_0x16e736(0x1cb))&&(_0x2aed90+=_0x5d18a8?_0x16e736(0x1c4):_0x16e736(0x1bb)),_0x5c5eb9['_console_ninja_session']={'id':+new Date(),'tool':_0x2aed90},_0x50c7c9&&_0x2aed90&&!_0x5d18a8&&console['log'](_0x16e736(0x191)+(_0x2aed90[_0x16e736(0x1b0)](0x0)[_0x16e736(0x182)]()+_0x2aed90[_0x16e736(0x134)](0x1))+',',_0x16e736(0x19d),_0x16e736(0x1d0));}let _0x145469=new x(_0x5c5eb9,_0x2b9549,_0x42ce5c,_0x524dd6,_0x4b5ffd,_0x49f09b);return _0x145469[_0x16e736(0x18c)][_0x16e736(0xfe)](_0x145469);}catch(_0x5647d3){return console[_0x16e736(0x18f)](_0x16e736(0xff),_0x5647d3&&_0x5647d3['message']),()=>{};}});return _0x5a6cc2=>_0x3cf774[_0x261ad3(0x101)](_0x2dda75=>_0x2dda75(_0x5a6cc2));}function ie(_0x29bd40,_0x5388b8,_0x1352a8,_0x312ba2){var _0x1b7088=_0x5e5252;_0x312ba2&&_0x29bd40===_0x1b7088(0xf6)&&_0x1352a8[_0x1b7088(0x167)][_0x1b7088(0xf6)]();}function b(_0x2e7c7c){var _0x20e0de=_0x5e5252,_0x1210c3,_0x525633;let _0x35d639=function(_0x3d24dd,_0x4df7ef){return _0x4df7ef-_0x3d24dd;},_0x137ef1;if(_0x2e7c7c['performance'])_0x137ef1=function(){var _0x540063=_0x5724;return _0x2e7c7c['performance'][_0x540063(0x1bc)]();};else{if(_0x2e7c7c[_0x20e0de(0x166)]&&_0x2e7c7c[_0x20e0de(0x166)][_0x20e0de(0x15d)]&&((_0x525633=(_0x1210c3=_0x2e7c7c[_0x20e0de(0x166)])==null?void 0x0:_0x1210c3[_0x20e0de(0x180)])==null?void 0x0:_0x525633[_0x20e0de(0x15a)])!=='edge')_0x137ef1=function(){var _0x3de026=_0x20e0de;return _0x2e7c7c[_0x3de026(0x166)][_0x3de026(0x15d)]();},_0x35d639=function(_0xe6f224,_0x49206b){return 0x3e8*(_0x49206b[0x0]-_0xe6f224[0x0])+(_0x49206b[0x1]-_0xe6f224[0x1])/0xf4240;};else try{let {performance:_0x460425}=require(_0x20e0de(0x14a));_0x137ef1=function(){var _0x20cc4d=_0x20e0de;return _0x460425[_0x20cc4d(0x1bc)]();};}catch{_0x137ef1=function(){return+new Date();};}}return{'elapsed':_0x35d639,'timeStamp':_0x137ef1,'now':()=>Date[_0x20e0de(0x1bc)]()};}function H(_0x1386ef,_0x4cf247,_0x12f620){var _0x4299a6=_0x5e5252,_0x25e53e,_0xa5c3d6,_0xc7f63a,_0x2105ec,_0x4681c5;if(_0x1386ef[_0x4299a6(0x10f)]!==void 0x0)return _0x1386ef[_0x4299a6(0x10f)];let _0x547120=((_0xa5c3d6=(_0x25e53e=_0x1386ef[_0x4299a6(0x166)])==null?void 0x0:_0x25e53e[_0x4299a6(0xfa)])==null?void 0x0:_0xa5c3d6[_0x4299a6(0x177)])||((_0x2105ec=(_0xc7f63a=_0x1386ef[_0x4299a6(0x166)])==null?void 0x0:_0xc7f63a[_0x4299a6(0x180)])==null?void 0x0:_0x2105ec[_0x4299a6(0x15a)])===_0x4299a6(0x1ba);function _0x1677bf(_0x2a9d16){var _0x483ee7=_0x4299a6;if(_0x2a9d16['startsWith']('/')&&_0x2a9d16[_0x483ee7(0x103)]('/')){let _0x4d6bb5=new RegExp(_0x2a9d16[_0x483ee7(0x14f)](0x1,-0x1));return _0x20e90f=>_0x4d6bb5[_0x483ee7(0x10c)](_0x20e90f);}else{if(_0x2a9d16[_0x483ee7(0x178)]('*')||_0x2a9d16[_0x483ee7(0x178)]('?')){let _0x205abf=new RegExp('^'+_0x2a9d16[_0x483ee7(0x1e4)](/\\./g,String[_0x483ee7(0x18b)](0x5c)+'.')[_0x483ee7(0x1e4)](/\\*/g,'.*')[_0x483ee7(0x1e4)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x5568aa=>_0x205abf[_0x483ee7(0x10c)](_0x5568aa);}else return _0x1a1708=>_0x1a1708===_0x2a9d16;}}let _0x1e5b5c=_0x4cf247[_0x4299a6(0x192)](_0x1677bf);return _0x1386ef[_0x4299a6(0x10f)]=_0x547120||!_0x4cf247,!_0x1386ef[_0x4299a6(0x10f)]&&((_0x4681c5=_0x1386ef['location'])==null?void 0x0:_0x4681c5[_0x4299a6(0x1aa)])&&(_0x1386ef[_0x4299a6(0x10f)]=_0x1e5b5c[_0x4299a6(0x104)](_0x429d1b=>_0x429d1b(_0x1386ef[_0x4299a6(0x167)][_0x4299a6(0x1aa)]))),_0x1386ef[_0x4299a6(0x10f)];}function _0x4ca8(){var _0x29749c=['endsWith','some','_sendErrorMessage','1725523045251','9476184ZsCeVk','_addLoadNode','Set','function','getOwnPropertyDescriptor','test','onclose','astro','_consoleNinjaAllowedToStart','disabledTrace','stringify','count','expressionsToEvaluate','4333424LgldgK','elements','_addFunctionsNode','60591','indexOf','_addObjectProperty','onopen','get','boolean','ws://','https://tinyurl.com/37x8b79t','_inNextEdge','_HTMLAllCollection','1390SBBhyn','[object\\x20Set]','path','negativeInfinity','11vVjskZ','logger\\x20websocket\\x20error','method','_WebSocket','_connectToHostNow','_keyStrRegExp','serialize','127.0.0.1','_getOwnPropertySymbols','split','_connecting','_capIfString','props','_attemptToReconnectShortly','array','substr','5718TJNCEz','autoExpandMaxDepth','NEGATIVE_INFINITY','symbol','stack','_property','_regExpToString','_isUndefined','unknown','_treeNodePropertiesBeforeFullValue','valueOf','depth','autoExpand','parent','_socket','next.js','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','cappedElements','date','prototype','_setNodeExpandableState','perf_hooks','_WebSocketClass','_additionalMetadata','[object\\x20Array]','_hasMapOnItsPath','slice','_isSet','_p_length','getWebSocketClass','_objectToString','_setNodeId','console','close','3436fUYIvr','pathToFileURL','getter','NEXT_RUNTIME','Map','670hVygwR','hrtime','WebSocket','time','_setNodeExpressionPath','_sortProps','onmessage','call','level','push','process','location','[object\\x20BigInt]','sortProps','capped','Symbol','data','_Symbol','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','root_exp','disabledLog','_allowedToSend','_disposeWebsocket','log','hits','_isMap','noFunctions','node','includes','message','_getOwnPropertyDescriptor','_isNegativeZero','_hasSymbolPropertyOnItsPath','then','host','_reconnectTimeout','env','totalStrLength','toUpperCase','_propertyName','positiveInfinity','_webSocketErrorDocsLink','reduceLimits','496922HsNYyQ','_getOwnPropertyNames','_isArray','undefined','fromCharCode','send','default','funcName','warn','join','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','map','name','_connectAttemptCount','unref','length','toString','nodeModules','number','catch','isExpressionToEvaluate','strLength','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_allowedToConnectOnSend','Number',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.351\\\\node_modules\",'string','remix','null','_maxConnectAttemptCount','webpack','global','_cleanNode','_isPrimitiveType','stackTraceLimit','hostname','url','port','','coverage','origin','charAt','_setNodePermissions','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','error','trace','_isPrimitiveWrapperType','_blacklistedProperty','value','allStrLength','_console_ninja','edge','\\x20browser','now','autoExpandPreviousObjects','bigint','toLowerCase','Buffer','_type','type','6468vqoeod','\\x20server','_dateToString','String','expId','unshift','object','2813763RDgjsO','angular','eventReceivedCallback','set','index','4lxWiDs','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','rootExpression','93645XoLiEo','negativeZero','_inBrowser','sort','args','_numberRegExp','create','enumerable','getOwnPropertyNames','_p_','1','HTMLAllCollection','_p_name','autoExpandLimit','getOwnPropertySymbols','isArray','_connected','current','replace','_setNodeLabel','reload','dockerizedApp','_quotedRegExp','resolveGetters','versions','_ws','_addProperty','_processTreeNodeResult','bind','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','constructor','forEach','autoExpandPropertyCount'];_0x4ca8=function(){return _0x29749c;};return _0x4ca8();}function X(_0x18bb55,_0x133d58,_0x5f4a5b,_0x26c95e){var _0x49ea87=_0x5e5252;_0x18bb55=_0x18bb55,_0x133d58=_0x133d58,_0x5f4a5b=_0x5f4a5b,_0x26c95e=_0x26c95e;let _0x389d6c=b(_0x18bb55),_0x43b77f=_0x389d6c['elapsed'],_0xde6c6d=_0x389d6c['timeStamp'];class _0x4b5a7f{constructor(){var _0x3fb167=_0x5724;this[_0x3fb167(0x12a)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3fb167(0x1d7)]=/^(0|[1-9][0-9]*)$/,this[_0x3fb167(0xf8)]=/'([^\\\\']|\\\\')*'/,this['_undefined']=_0x18bb55[_0x3fb167(0x18a)],this[_0x3fb167(0x120)]=_0x18bb55[_0x3fb167(0x1dd)],this[_0x3fb167(0x17a)]=Object[_0x3fb167(0x10b)],this[_0x3fb167(0x188)]=Object[_0x3fb167(0x1da)],this[_0x3fb167(0x16d)]=_0x18bb55[_0x3fb167(0x16b)],this['_regExpToString']=RegExp[_0x3fb167(0x148)][_0x3fb167(0x197)],this[_0x3fb167(0x1c5)]=Date['prototype'][_0x3fb167(0x197)];}['serialize'](_0x5d3617,_0x116107,_0x262fa2,_0x4f4b14){var _0x2d0137=_0x5724,_0x19e651=this,_0xf15d85=_0x262fa2[_0x2d0137(0x141)];function _0x2195b5(_0x5601f6,_0x5bcbb5,_0x38b861){var _0x250bed=_0x2d0137;_0x5bcbb5['type']='unknown',_0x5bcbb5[_0x250bed(0x1b3)]=_0x5601f6['message'],_0x56469d=_0x38b861['node']['current'],_0x38b861['node']['current']=_0x5bcbb5,_0x19e651[_0x250bed(0x13e)](_0x5bcbb5,_0x38b861);}try{_0x262fa2[_0x2d0137(0x164)]++,_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x1bd)][_0x2d0137(0x165)](_0x116107);var _0x40417a,_0x548691,_0x737a97,_0x3ff33c,_0x468292=[],_0x91d118=[],_0x2bfe41,_0x201686=this[_0x2d0137(0x1c1)](_0x116107),_0x1efce0=_0x201686===_0x2d0137(0x133),_0x28d9e5=!0x1,_0x550fba=_0x201686===_0x2d0137(0x10a),_0x134913=this[_0x2d0137(0x1a8)](_0x201686),_0x2a83fb=this[_0x2d0137(0x1b5)](_0x201686),_0x35c122=_0x134913||_0x2a83fb,_0xeb2f3d={},_0x29e48d=0x0,_0x2c2928=!0x1,_0x56469d,_0x9f5fe1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x262fa2[_0x2d0137(0x140)]){if(_0x1efce0){if(_0x548691=_0x116107[_0x2d0137(0x196)],_0x548691>_0x262fa2['elements']){for(_0x737a97=0x0,_0x3ff33c=_0x262fa2[_0x2d0137(0x115)],_0x40417a=_0x737a97;_0x40417a<_0x3ff33c;_0x40417a++)_0x91d118['push'](_0x19e651['_addProperty'](_0x468292,_0x116107,_0x201686,_0x40417a,_0x262fa2));_0x5d3617[_0x2d0137(0x146)]=!0x0;}else{for(_0x737a97=0x0,_0x3ff33c=_0x548691,_0x40417a=_0x737a97;_0x40417a<_0x3ff33c;_0x40417a++)_0x91d118[_0x2d0137(0x165)](_0x19e651[_0x2d0137(0xfc)](_0x468292,_0x116107,_0x201686,_0x40417a,_0x262fa2));}_0x262fa2[_0x2d0137(0x102)]+=_0x91d118[_0x2d0137(0x196)];}if(!(_0x201686===_0x2d0137(0x1a3)||_0x201686===_0x2d0137(0x18a))&&!_0x134913&&_0x201686!==_0x2d0137(0x1c6)&&_0x201686!==_0x2d0137(0x1c0)&&_0x201686!==_0x2d0137(0x1be)){var _0x55911e=_0x4f4b14[_0x2d0137(0x131)]||_0x262fa2[_0x2d0137(0x131)];if(this[_0x2d0137(0x150)](_0x116107)?(_0x40417a=0x0,_0x116107['forEach'](function(_0x4a54aa){var _0x4fcd10=_0x2d0137;if(_0x29e48d++,_0x262fa2[_0x4fcd10(0x102)]++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;return;}if(!_0x262fa2[_0x4fcd10(0x19b)]&&_0x262fa2[_0x4fcd10(0x141)]&&_0x262fa2['autoExpandPropertyCount']>_0x262fa2['autoExpandLimit']){_0x2c2928=!0x0;return;}_0x91d118[_0x4fcd10(0x165)](_0x19e651[_0x4fcd10(0xfc)](_0x468292,_0x116107,_0x4fcd10(0x109),_0x40417a++,_0x262fa2,function(_0x54f45c){return function(){return _0x54f45c;};}(_0x4a54aa)));})):this['_isMap'](_0x116107)&&_0x116107[_0x2d0137(0x101)](function(_0x1d4b9b,_0x493f59){var _0x5e6096=_0x2d0137;if(_0x29e48d++,_0x262fa2['autoExpandPropertyCount']++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;return;}if(!_0x262fa2[_0x5e6096(0x19b)]&&_0x262fa2[_0x5e6096(0x141)]&&_0x262fa2[_0x5e6096(0x102)]>_0x262fa2[_0x5e6096(0x1df)]){_0x2c2928=!0x0;return;}var _0x1dd66c=_0x493f59[_0x5e6096(0x197)]();_0x1dd66c[_0x5e6096(0x196)]>0x64&&(_0x1dd66c=_0x1dd66c['slice'](0x0,0x64)+'...'),_0x91d118[_0x5e6096(0x165)](_0x19e651['_addProperty'](_0x468292,_0x116107,'Map',_0x1dd66c,_0x262fa2,function(_0x4fca04){return function(){return _0x4fca04;};}(_0x1d4b9b)));}),!_0x28d9e5){try{for(_0x2bfe41 in _0x116107)if(!(_0x1efce0&&_0x9f5fe1[_0x2d0137(0x10c)](_0x2bfe41))&&!this[_0x2d0137(0x1b6)](_0x116107,_0x2bfe41,_0x262fa2)){if(_0x29e48d++,_0x262fa2[_0x2d0137(0x102)]++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;break;}if(!_0x262fa2['isExpressionToEvaluate']&&_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x102)]>_0x262fa2[_0x2d0137(0x1df)]){_0x2c2928=!0x0;break;}_0x91d118['push'](_0x19e651[_0x2d0137(0x119)](_0x468292,_0xeb2f3d,_0x116107,_0x201686,_0x2bfe41,_0x262fa2));}}catch{}if(_0xeb2f3d[_0x2d0137(0x151)]=!0x0,_0x550fba&&(_0xeb2f3d[_0x2d0137(0x1de)]=!0x0),!_0x2c2928){var _0x1118c1=[]['concat'](this[_0x2d0137(0x188)](_0x116107))['concat'](this[_0x2d0137(0x12d)](_0x116107));for(_0x40417a=0x0,_0x548691=_0x1118c1[_0x2d0137(0x196)];_0x40417a<_0x548691;_0x40417a++)if(_0x2bfe41=_0x1118c1[_0x40417a],!(_0x1efce0&&_0x9f5fe1[_0x2d0137(0x10c)](_0x2bfe41[_0x2d0137(0x197)]()))&&!this[_0x2d0137(0x1b6)](_0x116107,_0x2bfe41,_0x262fa2)&&!_0xeb2f3d[_0x2d0137(0x1db)+_0x2bfe41[_0x2d0137(0x197)]()]){if(_0x29e48d++,_0x262fa2['autoExpandPropertyCount']++,_0x29e48d>_0x55911e){_0x2c2928=!0x0;break;}if(!_0x262fa2[_0x2d0137(0x19b)]&&_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2['autoExpandPropertyCount']>_0x262fa2[_0x2d0137(0x1df)]){_0x2c2928=!0x0;break;}_0x91d118['push'](_0x19e651[_0x2d0137(0x119)](_0x468292,_0xeb2f3d,_0x116107,_0x201686,_0x2bfe41,_0x262fa2));}}}}}if(_0x5d3617[_0x2d0137(0x1c2)]=_0x201686,_0x35c122?(_0x5d3617[_0x2d0137(0x1b7)]=_0x116107[_0x2d0137(0x13f)](),this[_0x2d0137(0x130)](_0x201686,_0x5d3617,_0x262fa2,_0x4f4b14)):_0x201686===_0x2d0137(0x147)?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x1c5)][_0x2d0137(0x163)](_0x116107):_0x201686===_0x2d0137(0x1be)?_0x5d3617['value']=_0x116107[_0x2d0137(0x197)]():_0x201686==='RegExp'?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x13b)][_0x2d0137(0x163)](_0x116107):_0x201686===_0x2d0137(0x138)&&this[_0x2d0137(0x16d)]?_0x5d3617[_0x2d0137(0x1b7)]=this[_0x2d0137(0x16d)]['prototype'][_0x2d0137(0x197)]['call'](_0x116107):!_0x262fa2[_0x2d0137(0x140)]&&!(_0x201686==='null'||_0x201686===_0x2d0137(0x18a))&&(delete _0x5d3617['value'],_0x5d3617['capped']=!0x0),_0x2c2928&&(_0x5d3617['cappedProps']=!0x0),_0x56469d=_0x262fa2['node'][_0x2d0137(0x1e3)],_0x262fa2[_0x2d0137(0x177)]['current']=_0x5d3617,this[_0x2d0137(0x13e)](_0x5d3617,_0x262fa2),_0x91d118['length']){for(_0x40417a=0x0,_0x548691=_0x91d118[_0x2d0137(0x196)];_0x40417a<_0x548691;_0x40417a++)_0x91d118[_0x40417a](_0x40417a);}_0x468292['length']&&(_0x5d3617[_0x2d0137(0x131)]=_0x468292);}catch(_0x590931){_0x2195b5(_0x590931,_0x5d3617,_0x262fa2);}return this[_0x2d0137(0x14c)](_0x116107,_0x5d3617),this['_treeNodePropertiesAfterFullValue'](_0x5d3617,_0x262fa2),_0x262fa2[_0x2d0137(0x177)][_0x2d0137(0x1e3)]=_0x56469d,_0x262fa2[_0x2d0137(0x164)]--,_0x262fa2[_0x2d0137(0x141)]=_0xf15d85,_0x262fa2[_0x2d0137(0x141)]&&_0x262fa2[_0x2d0137(0x1bd)]['pop'](),_0x5d3617;}[_0x49ea87(0x12d)](_0x231a96){var _0x2e4fb2=_0x49ea87;return Object[_0x2e4fb2(0x1e0)]?Object[_0x2e4fb2(0x1e0)](_0x231a96):[];}[_0x49ea87(0x150)](_0x1518ab){var _0x739ccf=_0x49ea87;return!!(_0x1518ab&&_0x18bb55[_0x739ccf(0x109)]&&this['_objectToString'](_0x1518ab)===_0x739ccf(0x122)&&_0x1518ab[_0x739ccf(0x101)]);}[_0x49ea87(0x1b6)](_0x4085e6,_0x5e28c8,_0x34d188){return _0x34d188['noFunctions']?typeof _0x4085e6[_0x5e28c8]=='function':!0x1;}[_0x49ea87(0x1c1)](_0x1c3995){var _0x5aeb52=_0x49ea87,_0x303919='';return _0x303919=typeof _0x1c3995,_0x303919==='object'?this['_objectToString'](_0x1c3995)===_0x5aeb52(0x14d)?_0x303919=_0x5aeb52(0x133):this['_objectToString'](_0x1c3995)==='[object\\x20Date]'?_0x303919=_0x5aeb52(0x147):this[_0x5aeb52(0x153)](_0x1c3995)===_0x5aeb52(0x168)?_0x303919=_0x5aeb52(0x1be):_0x1c3995===null?_0x303919='null':_0x1c3995[_0x5aeb52(0x100)]&&(_0x303919=_0x1c3995[_0x5aeb52(0x100)][_0x5aeb52(0x193)]||_0x303919):_0x303919===_0x5aeb52(0x18a)&&this[_0x5aeb52(0x120)]&&_0x1c3995 instanceof this[_0x5aeb52(0x120)]&&(_0x303919='HTMLAllCollection'),_0x303919;}[_0x49ea87(0x153)](_0x99818b){var _0x1af5a6=_0x49ea87;return Object['prototype'][_0x1af5a6(0x197)][_0x1af5a6(0x163)](_0x99818b);}['_isPrimitiveType'](_0x56d0bc){var _0xd87642=_0x49ea87;return _0x56d0bc===_0xd87642(0x11c)||_0x56d0bc===_0xd87642(0x1a1)||_0x56d0bc===_0xd87642(0x199);}['_isPrimitiveWrapperType'](_0xb7691e){var _0x49bbb2=_0x49ea87;return _0xb7691e==='Boolean'||_0xb7691e==='String'||_0xb7691e===_0x49bbb2(0x19f);}[_0x49ea87(0xfc)](_0x2ce477,_0x211ca8,_0x2fb9f8,_0x2fd18a,_0x36316c,_0x29a6b8){var _0x247659=this;return function(_0x499867){var _0x1554f7=_0x5724,_0x39fafc=_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1e3)],_0x158f52=_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)],_0x4dc155=_0x36316c['node'][_0x1554f7(0x142)];_0x36316c['node'][_0x1554f7(0x142)]=_0x39fafc,_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)]=typeof _0x2fd18a==_0x1554f7(0x199)?_0x2fd18a:_0x499867,_0x2ce477['push'](_0x247659['_property'](_0x211ca8,_0x2fb9f8,_0x2fd18a,_0x36316c,_0x29a6b8)),_0x36316c['node'][_0x1554f7(0x142)]=_0x4dc155,_0x36316c[_0x1554f7(0x177)][_0x1554f7(0x1ce)]=_0x158f52;};}[_0x49ea87(0x119)](_0xe0e155,_0x5be7e3,_0x81255a,_0x4b0a72,_0xeb51d1,_0x50360c,_0x436293){var _0x3e7624=_0x49ea87,_0x540e2e=this;return _0x5be7e3['_p_'+_0xeb51d1[_0x3e7624(0x197)]()]=!0x0,function(_0x336f6d){var _0x499296=_0x3e7624,_0x2282b8=_0x50360c[_0x499296(0x177)][_0x499296(0x1e3)],_0x467584=_0x50360c[_0x499296(0x177)][_0x499296(0x1ce)],_0x165ab6=_0x50360c['node']['parent'];_0x50360c[_0x499296(0x177)][_0x499296(0x142)]=_0x2282b8,_0x50360c['node'][_0x499296(0x1ce)]=_0x336f6d,_0xe0e155[_0x499296(0x165)](_0x540e2e[_0x499296(0x13a)](_0x81255a,_0x4b0a72,_0xeb51d1,_0x50360c,_0x436293)),_0x50360c['node'][_0x499296(0x142)]=_0x165ab6,_0x50360c[_0x499296(0x177)][_0x499296(0x1ce)]=_0x467584;};}['_property'](_0x1a4a15,_0x587e1f,_0x315f94,_0x5d7862,_0x583196){var _0x1d5ef6=_0x49ea87,_0x4c915d=this;_0x583196||(_0x583196=function(_0x1f8be0,_0x158da4){return _0x1f8be0[_0x158da4];});var _0x35d795=_0x315f94[_0x1d5ef6(0x197)](),_0x363923=_0x5d7862[_0x1d5ef6(0x113)]||{},_0x134eda=_0x5d7862[_0x1d5ef6(0x140)],_0x4e75b3=_0x5d7862[_0x1d5ef6(0x19b)];try{var _0xb00253=this[_0x1d5ef6(0x175)](_0x1a4a15),_0xce7487=_0x35d795;_0xb00253&&_0xce7487[0x0]==='\\x27'&&(_0xce7487=_0xce7487[_0x1d5ef6(0x134)](0x1,_0xce7487[_0x1d5ef6(0x196)]-0x2));var _0x6acd55=_0x5d7862['expressionsToEvaluate']=_0x363923['_p_'+_0xce7487];_0x6acd55&&(_0x5d7862[_0x1d5ef6(0x140)]=_0x5d7862[_0x1d5ef6(0x140)]+0x1),_0x5d7862[_0x1d5ef6(0x19b)]=!!_0x6acd55;var _0x6d0f5f=typeof _0x315f94==_0x1d5ef6(0x138),_0x167fcb={'name':_0x6d0f5f||_0xb00253?_0x35d795:this[_0x1d5ef6(0x183)](_0x35d795)};if(_0x6d0f5f&&(_0x167fcb[_0x1d5ef6(0x138)]=!0x0),!(_0x587e1f===_0x1d5ef6(0x133)||_0x587e1f==='Error')){var _0x99bb80=this[_0x1d5ef6(0x17a)](_0x1a4a15,_0x315f94);if(_0x99bb80&&(_0x99bb80[_0x1d5ef6(0x1cd)]&&(_0x167fcb['setter']=!0x0),_0x99bb80[_0x1d5ef6(0x11b)]&&!_0x6acd55&&!_0x5d7862['resolveGetters']))return _0x167fcb[_0x1d5ef6(0x159)]=!0x0,this['_processTreeNodeResult'](_0x167fcb,_0x5d7862),_0x167fcb;}var _0x1b2deb;try{_0x1b2deb=_0x583196(_0x1a4a15,_0x315f94);}catch(_0x4399c3){return _0x167fcb={'name':_0x35d795,'type':_0x1d5ef6(0x13d),'error':_0x4399c3[_0x1d5ef6(0x179)]},this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862),_0x167fcb;}var _0x9edc4b=this[_0x1d5ef6(0x1c1)](_0x1b2deb),_0x42541d=this['_isPrimitiveType'](_0x9edc4b);if(_0x167fcb['type']=_0x9edc4b,_0x42541d)this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862,_0x1b2deb,function(){var _0x3fdd37=_0x1d5ef6;_0x167fcb[_0x3fdd37(0x1b7)]=_0x1b2deb[_0x3fdd37(0x13f)](),!_0x6acd55&&_0x4c915d['_capIfString'](_0x9edc4b,_0x167fcb,_0x5d7862,{});});else{var _0x8b1e5a=_0x5d7862[_0x1d5ef6(0x141)]&&_0x5d7862[_0x1d5ef6(0x164)]<_0x5d7862[_0x1d5ef6(0x136)]&&_0x5d7862['autoExpandPreviousObjects'][_0x1d5ef6(0x118)](_0x1b2deb)<0x0&&_0x9edc4b!==_0x1d5ef6(0x10a)&&_0x5d7862[_0x1d5ef6(0x102)]<_0x5d7862[_0x1d5ef6(0x1df)];_0x8b1e5a||_0x5d7862[_0x1d5ef6(0x164)]<_0x134eda||_0x6acd55?(this[_0x1d5ef6(0x12b)](_0x167fcb,_0x1b2deb,_0x5d7862,_0x6acd55||{}),this[_0x1d5ef6(0x14c)](_0x1b2deb,_0x167fcb)):this[_0x1d5ef6(0xfd)](_0x167fcb,_0x5d7862,_0x1b2deb,function(){var _0x24b998=_0x1d5ef6;_0x9edc4b===_0x24b998(0x1a3)||_0x9edc4b===_0x24b998(0x18a)||(delete _0x167fcb['value'],_0x167fcb[_0x24b998(0x16a)]=!0x0);});}return _0x167fcb;}finally{_0x5d7862[_0x1d5ef6(0x113)]=_0x363923,_0x5d7862[_0x1d5ef6(0x140)]=_0x134eda,_0x5d7862[_0x1d5ef6(0x19b)]=_0x4e75b3;}}[_0x49ea87(0x130)](_0x4ddc9c,_0x47e666,_0x2cf4eb,_0x28b9b6){var _0x3e3391=_0x49ea87,_0x28fe8c=_0x28b9b6[_0x3e3391(0x19c)]||_0x2cf4eb[_0x3e3391(0x19c)];if((_0x4ddc9c===_0x3e3391(0x1a1)||_0x4ddc9c===_0x3e3391(0x1c6))&&_0x47e666[_0x3e3391(0x1b7)]){let _0x48fc34=_0x47e666['value'][_0x3e3391(0x196)];_0x2cf4eb[_0x3e3391(0x1b8)]+=_0x48fc34,_0x2cf4eb[_0x3e3391(0x1b8)]>_0x2cf4eb[_0x3e3391(0x181)]?(_0x47e666[_0x3e3391(0x16a)]='',delete _0x47e666[_0x3e3391(0x1b7)]):_0x48fc34>_0x28fe8c&&(_0x47e666[_0x3e3391(0x16a)]=_0x47e666['value'][_0x3e3391(0x134)](0x0,_0x28fe8c),delete _0x47e666['value']);}}[_0x49ea87(0x175)](_0x598187){var _0xef816e=_0x49ea87;return!!(_0x598187&&_0x18bb55['Map']&&this[_0xef816e(0x153)](_0x598187)==='[object\\x20Map]'&&_0x598187['forEach']);}[_0x49ea87(0x183)](_0x8fe286){var _0x1d6889=_0x49ea87;if(_0x8fe286['match'](/^\\d+$/))return _0x8fe286;var _0xdfd039;try{_0xdfd039=JSON[_0x1d6889(0x111)](''+_0x8fe286);}catch{_0xdfd039='\\x22'+this[_0x1d6889(0x153)](_0x8fe286)+'\\x22';}return _0xdfd039['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0xdfd039=_0xdfd039[_0x1d6889(0x134)](0x1,_0xdfd039['length']-0x2):_0xdfd039=_0xdfd039[_0x1d6889(0x1e4)](/'/g,'\\x5c\\x27')[_0x1d6889(0x1e4)](/\\\\\"/g,'\\x22')[_0x1d6889(0x1e4)](/(^\"|\"$)/g,'\\x27'),_0xdfd039;}[_0x49ea87(0xfd)](_0x500141,_0x528358,_0x53ed2f,_0x4c7056){var _0x3d49a5=_0x49ea87;this[_0x3d49a5(0x13e)](_0x500141,_0x528358),_0x4c7056&&_0x4c7056(),this[_0x3d49a5(0x14c)](_0x53ed2f,_0x500141),this['_treeNodePropertiesAfterFullValue'](_0x500141,_0x528358);}['_treeNodePropertiesBeforeFullValue'](_0x18bd6e,_0x15925d){var _0x59364f=_0x49ea87;this[_0x59364f(0x154)](_0x18bd6e,_0x15925d),this['_setNodeQueryPath'](_0x18bd6e,_0x15925d),this[_0x59364f(0x160)](_0x18bd6e,_0x15925d),this[_0x59364f(0x1b1)](_0x18bd6e,_0x15925d);}['_setNodeId'](_0x45bead,_0x6e217){}['_setNodeQueryPath'](_0x2ec05a,_0x3a12ed){}['_setNodeLabel'](_0x5b4507,_0x590499){}[_0x49ea87(0x13c)](_0x24b7db){return _0x24b7db===this['_undefined'];}['_treeNodePropertiesAfterFullValue'](_0x18925a,_0x53780d){var _0x243f2b=_0x49ea87;this[_0x243f2b(0x1e5)](_0x18925a,_0x53780d),this[_0x243f2b(0x149)](_0x18925a),_0x53780d[_0x243f2b(0x169)]&&this['_sortProps'](_0x18925a),this[_0x243f2b(0x116)](_0x18925a,_0x53780d),this[_0x243f2b(0x108)](_0x18925a,_0x53780d),this[_0x243f2b(0x1a7)](_0x18925a);}[_0x49ea87(0x14c)](_0x3f1854,_0x212b83){var _0x385ff8=_0x49ea87;let _0x16faa6;try{_0x18bb55[_0x385ff8(0x155)]&&(_0x16faa6=_0x18bb55['console'][_0x385ff8(0x1b3)],_0x18bb55[_0x385ff8(0x155)][_0x385ff8(0x1b3)]=function(){}),_0x3f1854&&typeof _0x3f1854['length']==_0x385ff8(0x199)&&(_0x212b83['length']=_0x3f1854[_0x385ff8(0x196)]);}catch{}finally{_0x16faa6&&(_0x18bb55[_0x385ff8(0x155)][_0x385ff8(0x1b3)]=_0x16faa6);}if(_0x212b83[_0x385ff8(0x1c2)]===_0x385ff8(0x199)||_0x212b83[_0x385ff8(0x1c2)]==='Number'){if(isNaN(_0x212b83[_0x385ff8(0x1b7)]))_0x212b83['nan']=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];else switch(_0x212b83[_0x385ff8(0x1b7)]){case Number['POSITIVE_INFINITY']:_0x212b83[_0x385ff8(0x184)]=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];break;case Number[_0x385ff8(0x137)]:_0x212b83[_0x385ff8(0x124)]=!0x0,delete _0x212b83[_0x385ff8(0x1b7)];break;case 0x0:this[_0x385ff8(0x17b)](_0x212b83[_0x385ff8(0x1b7)])&&(_0x212b83[_0x385ff8(0x1d3)]=!0x0);break;}}else _0x212b83[_0x385ff8(0x1c2)]===_0x385ff8(0x10a)&&typeof _0x3f1854[_0x385ff8(0x193)]==_0x385ff8(0x1a1)&&_0x3f1854[_0x385ff8(0x193)]&&_0x212b83[_0x385ff8(0x193)]&&_0x3f1854[_0x385ff8(0x193)]!==_0x212b83[_0x385ff8(0x193)]&&(_0x212b83[_0x385ff8(0x18e)]=_0x3f1854[_0x385ff8(0x193)]);}['_isNegativeZero'](_0x174581){return 0x1/_0x174581===Number['NEGATIVE_INFINITY'];}[_0x49ea87(0x161)](_0xdd29c5){var _0x2a5d57=_0x49ea87;!_0xdd29c5[_0x2a5d57(0x131)]||!_0xdd29c5['props']['length']||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x133)||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x15b)||_0xdd29c5[_0x2a5d57(0x1c2)]===_0x2a5d57(0x109)||_0xdd29c5[_0x2a5d57(0x131)][_0x2a5d57(0x1d5)](function(_0x1bcbe3,_0x2a07c8){var _0x3d593a=_0x2a5d57,_0x34d49f=_0x1bcbe3[_0x3d593a(0x193)][_0x3d593a(0x1bf)](),_0x2c67fe=_0x2a07c8[_0x3d593a(0x193)][_0x3d593a(0x1bf)]();return _0x34d49f<_0x2c67fe?-0x1:_0x34d49f>_0x2c67fe?0x1:0x0;});}['_addFunctionsNode'](_0x186722,_0x49624f){var _0x50011c=_0x49ea87;if(!(_0x49624f[_0x50011c(0x176)]||!_0x186722[_0x50011c(0x131)]||!_0x186722[_0x50011c(0x131)][_0x50011c(0x196)])){for(var _0x28e7d3=[],_0x3890f4=[],_0x499c8b=0x0,_0x7067e4=_0x186722[_0x50011c(0x131)]['length'];_0x499c8b<_0x7067e4;_0x499c8b++){var _0x999973=_0x186722[_0x50011c(0x131)][_0x499c8b];_0x999973[_0x50011c(0x1c2)]===_0x50011c(0x10a)?_0x28e7d3[_0x50011c(0x165)](_0x999973):_0x3890f4[_0x50011c(0x165)](_0x999973);}if(!(!_0x3890f4['length']||_0x28e7d3[_0x50011c(0x196)]<=0x1)){_0x186722[_0x50011c(0x131)]=_0x3890f4;var _0x382cdd={'functionsNode':!0x0,'props':_0x28e7d3};this[_0x50011c(0x154)](_0x382cdd,_0x49624f),this[_0x50011c(0x1e5)](_0x382cdd,_0x49624f),this[_0x50011c(0x149)](_0x382cdd),this[_0x50011c(0x1b1)](_0x382cdd,_0x49624f),_0x382cdd['id']+='\\x20f',_0x186722[_0x50011c(0x131)][_0x50011c(0x1c8)](_0x382cdd);}}}[_0x49ea87(0x108)](_0x235a7a,_0x1bfff0){}[_0x49ea87(0x149)](_0x1297e0){}[_0x49ea87(0x189)](_0xba479){var _0x4f36fb=_0x49ea87;return Array[_0x4f36fb(0x1e1)](_0xba479)||typeof _0xba479==_0x4f36fb(0x1c9)&&this['_objectToString'](_0xba479)==='[object\\x20Array]';}[_0x49ea87(0x1b1)](_0x568443,_0x108bb2){}[_0x49ea87(0x1a7)](_0x26f6a3){var _0x5e41ee=_0x49ea87;delete _0x26f6a3[_0x5e41ee(0x17c)],delete _0x26f6a3['_hasSetOnItsPath'],delete _0x26f6a3[_0x5e41ee(0x14e)];}[_0x49ea87(0x160)](_0xb4de9,_0x4b2048){}}let _0x44c50d=new _0x4b5a7f(),_0xaedfd7={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0xa2f3df={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x353530(_0x27ee81,_0x31c398,_0x3a3753,_0xc8cc5f,_0x13d7ad,_0x5b85da){var _0x3f1ed1=_0x49ea87;let _0x317525,_0x1b1b2d;try{_0x1b1b2d=_0xde6c6d(),_0x317525=_0x5f4a5b[_0x31c398],!_0x317525||_0x1b1b2d-_0x317525['ts']>0x1f4&&_0x317525['count']&&_0x317525[_0x3f1ed1(0x15f)]/_0x317525['count']<0x64?(_0x5f4a5b[_0x31c398]=_0x317525={'count':0x0,'time':0x0,'ts':_0x1b1b2d},_0x5f4a5b[_0x3f1ed1(0x174)]={}):_0x1b1b2d-_0x5f4a5b[_0x3f1ed1(0x174)]['ts']>0x32&&_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]&&_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]/_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]<0x64&&(_0x5f4a5b[_0x3f1ed1(0x174)]={});let _0x2e14f7=[],_0x3df3bd=_0x317525[_0x3f1ed1(0x186)]||_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x186)]?_0xa2f3df:_0xaedfd7,_0x385619=_0x32e332=>{var _0x3c14c8=_0x3f1ed1;let _0x57cb69={};return _0x57cb69[_0x3c14c8(0x131)]=_0x32e332[_0x3c14c8(0x131)],_0x57cb69[_0x3c14c8(0x115)]=_0x32e332[_0x3c14c8(0x115)],_0x57cb69[_0x3c14c8(0x19c)]=_0x32e332[_0x3c14c8(0x19c)],_0x57cb69['totalStrLength']=_0x32e332[_0x3c14c8(0x181)],_0x57cb69[_0x3c14c8(0x1df)]=_0x32e332[_0x3c14c8(0x1df)],_0x57cb69[_0x3c14c8(0x136)]=_0x32e332[_0x3c14c8(0x136)],_0x57cb69['sortProps']=!0x1,_0x57cb69['noFunctions']=!_0x133d58,_0x57cb69[_0x3c14c8(0x140)]=0x1,_0x57cb69[_0x3c14c8(0x164)]=0x0,_0x57cb69[_0x3c14c8(0x1c7)]='root_exp_id',_0x57cb69[_0x3c14c8(0x1d1)]=_0x3c14c8(0x16f),_0x57cb69[_0x3c14c8(0x141)]=!0x0,_0x57cb69['autoExpandPreviousObjects']=[],_0x57cb69[_0x3c14c8(0x102)]=0x0,_0x57cb69[_0x3c14c8(0xf9)]=!0x0,_0x57cb69[_0x3c14c8(0x1b8)]=0x0,_0x57cb69[_0x3c14c8(0x177)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x57cb69;};for(var _0x1917d7=0x0;_0x1917d7<_0x13d7ad[_0x3f1ed1(0x196)];_0x1917d7++)_0x2e14f7['push'](_0x44c50d[_0x3f1ed1(0x12b)]({'timeNode':_0x27ee81===_0x3f1ed1(0x15f)||void 0x0},_0x13d7ad[_0x1917d7],_0x385619(_0x3df3bd),{}));if(_0x27ee81===_0x3f1ed1(0x1b4)){let _0x5dacf2=Error['stackTraceLimit'];try{Error[_0x3f1ed1(0x1a9)]=0x1/0x0,_0x2e14f7[_0x3f1ed1(0x165)](_0x44c50d['serialize']({'stackNode':!0x0},new Error()[_0x3f1ed1(0x139)],_0x385619(_0x3df3bd),{'strLength':0x1/0x0}));}finally{Error['stackTraceLimit']=_0x5dacf2;}}return{'method':_0x3f1ed1(0x173),'version':_0x26c95e,'args':[{'ts':_0x3a3753,'session':_0xc8cc5f,'args':_0x2e14f7,'id':_0x31c398,'context':_0x5b85da}]};}catch(_0x463e1c){return{'method':_0x3f1ed1(0x173),'version':_0x26c95e,'args':[{'ts':_0x3a3753,'session':_0xc8cc5f,'args':[{'type':_0x3f1ed1(0x13d),'error':_0x463e1c&&_0x463e1c['message']}],'id':_0x31c398,'context':_0x5b85da}]};}finally{try{if(_0x317525&&_0x1b1b2d){let _0x336abc=_0xde6c6d();_0x317525[_0x3f1ed1(0x112)]++,_0x317525[_0x3f1ed1(0x15f)]+=_0x43b77f(_0x1b1b2d,_0x336abc),_0x317525['ts']=_0x336abc,_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x112)]++,_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]+=_0x43b77f(_0x1b1b2d,_0x336abc),_0x5f4a5b[_0x3f1ed1(0x174)]['ts']=_0x336abc,(_0x317525[_0x3f1ed1(0x112)]>0x32||_0x317525[_0x3f1ed1(0x15f)]>0x64)&&(_0x317525[_0x3f1ed1(0x186)]=!0x0),(_0x5f4a5b[_0x3f1ed1(0x174)]['count']>0x3e8||_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x15f)]>0x12c)&&(_0x5f4a5b[_0x3f1ed1(0x174)][_0x3f1ed1(0x186)]=!0x0);}}catch{}}}return _0x353530;}((_0x42452a,_0x19f01a,_0x53e950,_0x4642e0,_0x357d6f,_0x11f33d,_0x41fdfa,_0x47aa1b,_0x278a5d,_0xb78aee,_0x56dead)=>{var _0x142125=_0x5e5252;if(_0x42452a['_console_ninja'])return _0x42452a[_0x142125(0x1b9)];if(!H(_0x42452a,_0x47aa1b,_0x357d6f))return _0x42452a[_0x142125(0x1b9)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x42452a[_0x142125(0x1b9)];let _0x19bf15=b(_0x42452a),_0x64950a=_0x19bf15['elapsed'],_0x5ca2ab=_0x19bf15['timeStamp'],_0x519394=_0x19bf15[_0x142125(0x1bc)],_0x39f3e2={'hits':{},'ts':{}},_0x1c5526=X(_0x42452a,_0x278a5d,_0x39f3e2,_0x11f33d),_0x5e9d0b=_0x996b28=>{_0x39f3e2['ts'][_0x996b28]=_0x5ca2ab();},_0xf392f0=(_0x570250,_0x11a541)=>{var _0x542011=_0x142125;let _0x249b36=_0x39f3e2['ts'][_0x11a541];if(delete _0x39f3e2['ts'][_0x11a541],_0x249b36){let _0x2dfc76=_0x64950a(_0x249b36,_0x5ca2ab());_0x394580(_0x1c5526(_0x542011(0x15f),_0x570250,_0x519394(),_0x141983,[_0x2dfc76],_0x11a541));}},_0x4745e6=_0x11af8f=>{var _0x5489fb=_0x142125,_0x4f03f4;return _0x357d6f===_0x5489fb(0x144)&&_0x42452a[_0x5489fb(0x1af)]&&((_0x4f03f4=_0x11af8f==null?void 0x0:_0x11af8f[_0x5489fb(0x1d6)])==null?void 0x0:_0x4f03f4[_0x5489fb(0x196)])&&(_0x11af8f[_0x5489fb(0x1d6)][0x0][_0x5489fb(0x1af)]=_0x42452a[_0x5489fb(0x1af)]),_0x11af8f;};_0x42452a['_console_ninja']={'consoleLog':(_0x43a358,_0x51f124)=>{var _0x8b022a=_0x142125;_0x42452a[_0x8b022a(0x155)][_0x8b022a(0x173)][_0x8b022a(0x193)]!==_0x8b022a(0x170)&&_0x394580(_0x1c5526(_0x8b022a(0x173),_0x43a358,_0x519394(),_0x141983,_0x51f124));},'consoleTrace':(_0x570a27,_0x348deb)=>{var _0x2cbaaf=_0x142125;_0x42452a['console'][_0x2cbaaf(0x173)][_0x2cbaaf(0x193)]!==_0x2cbaaf(0x110)&&_0x394580(_0x4745e6(_0x1c5526('trace',_0x570a27,_0x519394(),_0x141983,_0x348deb)));},'consoleTime':_0xecbd83=>{_0x5e9d0b(_0xecbd83);},'consoleTimeEnd':(_0x13e425,_0x40f16b)=>{_0xf392f0(_0x40f16b,_0x13e425);},'autoLog':(_0xd6728,_0x4e573a)=>{var _0x1721d8=_0x142125;_0x394580(_0x1c5526(_0x1721d8(0x173),_0x4e573a,_0x519394(),_0x141983,[_0xd6728]));},'autoLogMany':(_0x120e61,_0x50254e)=>{var _0x23a271=_0x142125;_0x394580(_0x1c5526(_0x23a271(0x173),_0x120e61,_0x519394(),_0x141983,_0x50254e));},'autoTrace':(_0x13600e,_0x4b15ed)=>{var _0x1d8a22=_0x142125;_0x394580(_0x4745e6(_0x1c5526(_0x1d8a22(0x1b4),_0x4b15ed,_0x519394(),_0x141983,[_0x13600e])));},'autoTraceMany':(_0x138c2e,_0x56c619)=>{var _0x3be250=_0x142125;_0x394580(_0x4745e6(_0x1c5526(_0x3be250(0x1b4),_0x138c2e,_0x519394(),_0x141983,_0x56c619)));},'autoTime':(_0x24f97f,_0x5d6b97,_0x482e17)=>{_0x5e9d0b(_0x482e17);},'autoTimeEnd':(_0x487443,_0x83184a,_0x16136b)=>{_0xf392f0(_0x83184a,_0x16136b);},'coverage':_0x20834a=>{var _0x5d2895=_0x142125;_0x394580({'method':_0x5d2895(0x1ae),'version':_0x11f33d,'args':[{'id':_0x20834a}]});}};let _0x394580=q(_0x42452a,_0x19f01a,_0x53e950,_0x4642e0,_0x357d6f,_0xb78aee,_0x56dead),_0x141983=_0x42452a['_console_ninja_session'];return _0x42452a['_console_ninja'];})(globalThis,_0x5e5252(0x12c),_0x5e5252(0x117),_0x5e5252(0x1a0),_0x5e5252(0x1a5),'1.0.0',_0x5e5252(0x106),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x5e5252(0x1ad),'',_0x5e5252(0x1dc));")}catch(e){}}function c(e,...t){try{_().consoleLog(e,t)}catch(e){}return t}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
