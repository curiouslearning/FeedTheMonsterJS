/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{var t={"./node_modules/@firebase/util/dist/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CONSTANTS:()=>n,DecodeBase64StringError:()=>c,Deferred:()=>y,ErrorFactory:()=>z,FirebaseError:()=>N,MAX_VALUE_MILLIS:()=>vt,RANDOM_FACTOR:()=>bt,Sha1:()=>it,areCookiesEnabled:()=>O,assert:()=>s,assertionError:()=>a,async:()=>at,base64:()=>r,base64Decode:()=>d,base64Encode:()=>h,base64urlEncodeWithoutPadding:()=>l,calculateBackoffMillis:()=>wt,contains:()=>Y,createMockUserToken:()=>S,createSubscribe:()=>nt,decode:()=>j,deepCopy:()=>u,deepEqual:()=>q,deepExtend:()=>m,errorPrefix:()=>ct,extractQuerystring:()=>et,getDefaultAppConfig:()=>b,getDefaultEmulatorHost:()=>f,getDefaultEmulatorHostnameAndPort:()=>v,getDefaults:()=>g,getExperimentalSetting:()=>w,getGlobal:()=>p,getModularInstance:()=>St,getUA:()=>_,isAdmin:()=>W,isBrowser:()=>A,isBrowserExtension:()=>T,isElectron:()=>x,isEmpty:()=>$,isIE:()=>L,isIndexedDBAvailable:()=>k,isMobileCordova:()=>E,isNode:()=>I,isNodeSdk:()=>D,isReactNative:()=>C,isSafari:()=>M,isUWP:()=>P,isValidFormat:()=>H,isValidTimestamp:()=>G,issuedAtTime:()=>V,jsonEval:()=>F,map:()=>K,ordinal:()=>yt,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>tt,safeGet:()=>X,stringLength:()=>mt,stringToByteArray:()=>ut,stringify:()=>U,uuidv4:()=>pt,validateArgCount:()=>rt,validateCallback:()=>lt,validateContextObject:()=>dt,validateIndexedDBOpenable:()=>B,validateNamespace:()=>ht});const n={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},s=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+n.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},o=function(t){const e=[];let i=0;for(let n=0;n<t.length;n++){let s=t.charCodeAt(n);s<128?e[i++]=s:s<2048?(e[i++]=s>>6|192,e[i++]=63&s|128):55296==(64512&s)&&n+1<t.length&&56320==(64512&t.charCodeAt(n+1))?(s=65536+((1023&s)<<10)+(1023&t.charCodeAt(++n)),e[i++]=s>>18|240,e[i++]=s>>12&63|128,e[i++]=s>>6&63|128,e[i++]=63&s|128):(e[i++]=s>>12|224,e[i++]=s>>6&63|128,e[i++]=63&s|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const i=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,n=[];for(let e=0;e<t.length;e+=3){const s=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,c=r?t[e+2]:0,h=s>>2,l=(3&s)<<4|o>>4;let d=(15&o)<<2|c>>6,u=63&c;r||(u=64,a||(d=64)),n.push(i[h],i[l],i[d],i[u])}return n.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(o(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let i=0,n=0;for(;i<t.length;){const s=t[i++];if(s<128)e[n++]=String.fromCharCode(s);else if(s>191&&s<224){const a=t[i++];e[n++]=String.fromCharCode((31&s)<<6|63&a)}else if(s>239&&s<365){const a=((7&s)<<18|(63&t[i++])<<12|(63&t[i++])<<6|63&t[i++])-65536;e[n++]=String.fromCharCode(55296+(a>>10)),e[n++]=String.fromCharCode(56320+(1023&a))}else{const a=t[i++],o=t[i++];e[n++]=String.fromCharCode((15&s)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const i=e?this.charToByteMapWebSafe_:this.charToByteMap_,n=[];for(let e=0;e<t.length;){const s=i[t.charAt(e++)],a=e<t.length?i[t.charAt(e)]:0;++e;const o=e<t.length?i[t.charAt(e)]:64;++e;const r=e<t.length?i[t.charAt(e)]:64;if(++e,null==s||null==a||null==o||null==r)throw new c;const h=s<<2|a>>4;if(n.push(h),64!==o){const t=a<<4&240|o>>2;if(n.push(t),64!==r){const t=o<<6&192|r;n.push(t)}}}return n},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class c extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const h=function(t){const e=o(t);return r.encodeByteArray(e,!0)},l=function(t){return h(t).replace(/\./g,"")},d=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function u(t){return m(void 0,t)}function m(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(const i in e)e.hasOwnProperty(i)&&"__proto__"!==i&&(t[i]=m(t[i],e[i]));return t}function p(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw new Error("Unable to locate global object.")}const g=()=>{try{return p().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&d(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},f=t=>{var e,i;return null===(i=null===(e=g())||void 0===e?void 0:e.emulatorHosts)||void 0===i?void 0:i[t]},v=t=>{const e=f(t);if(!e)return;const i=e.lastIndexOf(":");if(i<=0||i+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const n=parseInt(e.substring(i+1),10);return"["===e[0]?[e.substring(1,i-1),n]:[e.substring(0,i),n]},b=()=>{var t;return null===(t=g())||void 0===t?void 0:t.config},w=t=>{var e;return null===(e=g())||void 0===e?void 0:e[`_${t}`]};class y{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,i)=>{e?this.reject(e):this.resolve(i),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,i))}}}function S(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const i=e||"demo-project",n=t.iat||0,s=t.sub||t.user_id;if(!s)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${i}`,aud:i,iat:n,exp:n+3600,auth_time:n,sub:s,user_id:s,firebase:{sign_in_provider:"custom",identities:{}}},t);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(a)),""].join(".")}function _(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function E(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(_())}function I(){var t;const e=null===(t=g())||void 0===t?void 0:t.forceEnvironment;if("node"===e)return!0;if("browser"===e)return!1;try{return"[object process]"===Object.prototype.toString.call(i.g.process)}catch(t){return!1}}function A(){return"object"==typeof self&&self.self===self}function T(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function x(){return _().indexOf("Electron/")>=0}function L(){const t=_();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function P(){return _().indexOf("MSAppHost/")>=0}function D(){return!0===n.NODE_CLIENT||!0===n.NODE_ADMIN}function M(){return!I()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function k(){try{return"object"==typeof indexedDB}catch(t){return!1}}function B(){return new Promise(((t,e)=>{try{let i=!0;const n="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(n);s.onsuccess=()=>{s.result.close(),i||self.indexedDB.deleteDatabase(n),t(!0)},s.onupgradeneeded=()=>{i=!1},s.onerror=()=>{var t;e((null===(t=s.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function O(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class N extends Error{constructor(t,e,i){super(e),this.code=t,this.customData=i,this.name="FirebaseError",Object.setPrototypeOf(this,N.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(t,e,i){this.service=t,this.serviceName=e,this.errors=i}create(t,...e){const i=e[0]||{},n=`${this.service}/${t}`,s=this.errors[t],a=s?function(t,e){return t.replace(R,((t,i)=>{const n=e[i];return null!=n?String(n):`<${i}?>`}))}(s,i):"Error",o=`${this.serviceName}: ${a} (${n}).`;return new N(n,o,i)}}const R=/\{\$([^}]+)}/g;function F(t){return JSON.parse(t)}function U(t){return JSON.stringify(t)}const j=function(t){let e={},i={},n={},s="";try{const a=t.split(".");e=F(d(a[0])||""),i=F(d(a[1])||""),s=a[2],n=i.d||{},delete i.d}catch(t){}return{header:e,claims:i,data:n,signature:s}},G=function(t){const e=j(t).claims,i=Math.floor((new Date).getTime()/1e3);let n=0,s=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?n=e.nbf:e.hasOwnProperty("iat")&&(n=e.iat),s=e.hasOwnProperty("exp")?e.exp:n+86400),!!i&&!!n&&!!s&&i>=n&&i<=s},V=function(t){const e=j(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},H=function(t){const e=j(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},W=function(t){const e=j(t).claims;return"object"==typeof e&&!0===e.admin};function Y(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function $(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function K(t,e,i){const n={};for(const s in t)Object.prototype.hasOwnProperty.call(t,s)&&(n[s]=e.call(i,t[s],s,t));return n}function q(t,e){if(t===e)return!0;const i=Object.keys(t),n=Object.keys(e);for(const s of i){if(!n.includes(s))return!1;const i=t[s],a=e[s];if(J(i)&&J(a)){if(!q(i,a))return!1}else if(i!==a)return!1}for(const t of n)if(!i.includes(t))return!1;return!0}function J(t){return null!==t&&"object"==typeof t}function Z(t,e=2e3){const i=new y;return setTimeout((()=>i.reject("timeout!")),e),t.then(i.resolve,i.reject),i.promise}function Q(t){const e=[];for(const[i,n]of Object.entries(t))Array.isArray(n)?n.forEach((t=>{e.push(encodeURIComponent(i)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(i)+"="+encodeURIComponent(n));return e.length?"&"+e.join("&"):""}function tt(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[i,n]=t.split("=");e[decodeURIComponent(i)]=decodeURIComponent(n)}})),e}function et(t){const e=t.indexOf("?");if(!e)return"";const i=t.indexOf("#",e);return t.substring(e,i>0?i:void 0)}class it{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(t,e){e||(e=0);const i=this.W_;if("string"==typeof t)for(let n=0;n<16;n++)i[n]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(let n=0;n<16;n++)i[n]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(let t=16;t<80;t++){const e=i[t-3]^i[t-8]^i[t-14]^i[t-16];i[t]=4294967295&(e<<1|e>>>31)}let n,s,a=this.chain_[0],o=this.chain_[1],r=this.chain_[2],c=this.chain_[3],h=this.chain_[4];for(let t=0;t<80;t++){t<40?t<20?(n=c^o&(r^c),s=1518500249):(n=o^r^c,s=1859775393):t<60?(n=o&r|c&(o|r),s=2400959708):(n=o^r^c,s=3395469782);const e=(a<<5|a>>>27)+n+h+s+i[t]&4294967295;h=c,c=r,r=4294967295&(o<<30|o>>>2),o=a,a=e}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295}update(t,e){if(null==t)return;void 0===e&&(e=t.length);const i=e-this.blockSize;let n=0;const s=this.buf_;let a=this.inbuf_;for(;n<e;){if(0===a)for(;n<=i;)this.compress_(t,n),n+=this.blockSize;if("string"==typeof t){for(;n<e;)if(s[a]=t.charCodeAt(n),++a,++n,a===this.blockSize){this.compress_(s),a=0;break}}else for(;n<e;)if(s[a]=t[n],++a,++n,a===this.blockSize){this.compress_(s),a=0;break}}this.inbuf_=a,this.total_+=e}digest(){const t=[];let e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let t=this.blockSize-1;t>=56;t--)this.buf_[t]=255&e,e/=256;this.compress_(this.buf_);let i=0;for(let e=0;e<5;e++)for(let n=24;n>=0;n-=8)t[i]=this.chain_[e]>>n&255,++i;return t}}function nt(t,e){const i=new st(t,e);return i.subscribe.bind(i)}class st{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,i){let n;if(void 0===t&&void 0===e&&void 0===i)throw new Error("Missing Observer.");n=function(t,e){if("object"!=typeof t||null===t)return!1;for(const i of e)if(i in t&&"function"==typeof t[i])return!0;return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:i},void 0===n.next&&(n.next=ot),void 0===n.error&&(n.error=ot),void 0===n.complete&&(n.complete=ot);const s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?n.error(this.finalError):n.complete()}catch(t){}})),this.observers.push(n),s}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function at(t,e){return(...i)=>{Promise.resolve(!0).then((()=>{t(...i)})).catch((t=>{e&&e(t)}))}}function ot(){}const rt=function(t,e,i,n){let s;if(n<e?s="at least "+e:n>i&&(s=0===i?"none":"no more than "+i),s){throw new Error(t+" failed: Was called with "+n+(1===n?" argument.":" arguments.")+" Expects "+s+".")}};function ct(t,e){return`${t} failed: ${e} argument `}function ht(t,e,i){if((!i||e)&&"string"!=typeof e)throw new Error(ct(t,"namespace")+"must be a valid firebase namespace.")}function lt(t,e,i,n){if((!n||i)&&"function"!=typeof i)throw new Error(ct(t,e)+"must be a valid function.")}function dt(t,e,i,n){if((!n||i)&&("object"!=typeof i||null===i))throw new Error(ct(t,e)+"must be a valid context object.")}const ut=function(t){const e=[];let i=0;for(let n=0;n<t.length;n++){let a=t.charCodeAt(n);if(a>=55296&&a<=56319){const e=a-55296;n++,s(n<t.length,"Surrogate pair missing trail surrogate.");a=65536+(e<<10)+(t.charCodeAt(n)-56320)}a<128?e[i++]=a:a<2048?(e[i++]=a>>6|192,e[i++]=63&a|128):a<65536?(e[i++]=a>>12|224,e[i++]=a>>6&63|128,e[i++]=63&a|128):(e[i++]=a>>18|240,e[i++]=a>>12&63|128,e[i++]=a>>6&63|128,e[i++]=63&a|128)}return e},mt=function(t){let e=0;for(let i=0;i<t.length;i++){const n=t.charCodeAt(i);n<128?e++:n<2048?e+=2:n>=55296&&n<=56319?(e+=4,i++):e+=3}return e},pt=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))},gt=1e3,ft=2,vt=144e5,bt=.5;function wt(t,e=gt,i=ft){const n=e*Math.pow(i,t),s=Math.round(bt*n*(Math.random()-.5)*2);return Math.min(vt,n+s)}function yt(t){return Number.isFinite(t)?t+function(t){t=Math.abs(t);const e=t%100;if(e>=10&&e<=20)return"th";const i=t%10;if(1===i)return"st";if(2===i)return"nd";if(3===i)return"rd";return"th"}(t):`${t}`}function St(t){return t&&t._delegate?t._delegate:t}},"./node_modules/@rive-app/canvas/rive.js":function(t){var e;e=()=>(()=>{"use strict";var t=[,(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var n,s=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(t={}){var e,i,s=t;function a(){function t(t){const a=n;i=e=0,n=new Map,a.forEach((e=>{try{e(t)}catch(t){console.error(t)}})),this.ob(),s&&s.Tb()}let e=0,i=0,n=new Map,s=null,a=null;this.requestAnimationFrame=function(s){e||(e=requestAnimationFrame(t.bind(this)));const a=++i;return n.set(a,s),a},this.cancelAnimationFrame=function(t){n.delete(t),e&&0==n.size&&(cancelAnimationFrame(e),e=0)},this.Rb=function(t){a&&(document.body.remove(a),a=null),t||(a=document.createElement("div"),a.style.backgroundColor="black",a.style.position="fixed",a.style.right=0,a.style.top=0,a.style.color="white",a.style.padding="4px",a.innerHTML="RIVE FPS",t=function(t){a.innerHTML="RIVE FPS "+t.toFixed(1)},document.body.appendChild(a)),s=new function(){let e=0,i=0;this.Tb=function(){var n=performance.now();i?(++e,1e3<(n-=i)&&(t(1e3*e/n),e=i=0)):(i=n,e=0)}}},this.Ob=function(){a&&(document.body.remove(a),a=null),s=null},this.ob=function(){}}function o(t){console.assert(!0);const e=new Map;let i=-1/0;this.push=function(n){return n=n+((1<<t)-1)>>t,e.has(n)&&clearTimeout(e.get(n)),e.set(n,setTimeout((function(){e.delete(n),0==e.length?i=-1/0:n==i&&(i=Math.max(...e.keys()),console.assert(i<n))}),1e3)),i=Math.max(n,i),i<<t}}s.ready=new Promise(((t,n)=>{e=t,i=n}));const r=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){r&&r();let t=s.decodeAudio;s.decodeAudio=function(e,i){i(e=t(e))};let e=s.decodeFont;s.decodeFont=function(t,i){i(t=e(t))};const i=s.FileAssetLoader;s.ptrToAsset=t=>{let e=s.ptrToFileAsset(t);return e.isImage?s.ptrToImageAsset(t):e.isFont?s.ptrToFontAsset(t):e.isAudio?s.ptrToAudioAsset(t):e},s.CustomFileAssetLoader=i.extend("CustomFileAssetLoader",{__construct:function({loadContents:t}){this.__parent.__construct.call(this),this.Gb=t},loadContents:function(t,e){return t=s.ptrToAsset(t),this.Gb(t,e)}}),s.CDNFileAssetLoader=i.extend("CDNFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this)},loadContents:function(t){let e=s.ptrToAsset(t);return""!==(t=e.cdnUuid)&&(i=e.cdnBaseUrl+"/"+t,(n=new XMLHttpRequest).responseType="arraybuffer",n.onreadystatechange=function(){4==n.readyState&&200==n.status&&(t=>{e.decode(new Uint8Array(t.response))})(n)},n.open("GET",i,!0),n.send(null),!0);var i,n}}),s.FallbackFileAssetLoader=i.extend("FallbackFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this),this.kb=[]},addLoader:function(t){this.kb.push(t)},loadContents:function(t,e){for(let i of this.kb)if(i.loadContents(t,e))return!0;return!1}})};const c="createConicGradient createImageData createLinearGradient createPattern createRadialGradient getContextAttributes getImageData getLineDash getTransform isContextLost isPointInPath isPointInStroke measureText".split(" "),h=new function(){function t(){if(!e){var t=document.createElement("canvas"),o={alpha:1,depth:0,stencil:0,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:1,renderViaOffscreenBackBuffer:1};let r;if(/iPhone|iPad|iPod/i.test(navigator.userAgent)){if(r=t.getContext("webgl",o),i=1,!r)return console.log("No WebGL support. Image mesh will not be drawn."),!1}else if(r=t.getContext("webgl2",o))i=2;else{if(!(r=t.getContext("webgl",o)))return console.log("No WebGL support. Image mesh will not be drawn."),!1;i=1}function c(t,e,i){if(e=r.createShader(e),r.shaderSource(e,i),r.compileShader(e),0<((i=r.getShaderInfoLog(e))||"").length)throw i;r.attachShader(t,e)}if(r=new Proxy(r,{get:(t,e)=>t.isContextLost()?(h||(console.error("Cannot render the mesh because the GL Context was lost. Tried to invoke ",e),h=!0),"function"==typeof t[e]?function(){}:void 0):"function"==typeof t[e]?function(...i){return t[e].apply(t,i)}:t[e],set(t,e,i){if(!t.isContextLost())return t[e]=i,!0;h||(console.error("Cannot render the mesh because the GL Context was lost. Tried to set property "+e),h=!0)}}),n=Math.min(r.getParameter(r.MAX_RENDERBUFFER_SIZE),r.getParameter(r.MAX_TEXTURE_SIZE)),c(t=r.createProgram(),r.VERTEX_SHADER,"attribute vec2 vertex;\n                attribute vec2 uv;\n                uniform vec4 mat;\n                uniform vec2 translate;\n                varying vec2 st;\n                void main() {\n                    st = uv;\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\n                }"),c(t,r.FRAGMENT_SHADER,"precision highp float;\n                uniform sampler2D image;\n                varying vec2 st;\n                void main() {\n                    gl_FragColor = texture2D(image, st);\n                }"),r.bindAttribLocation(t,0,"vertex"),r.bindAttribLocation(t,1,"uv"),r.linkProgram(t),0<((o=r.getProgramInfoLog(t))||"").trim().length)throw o;s=r.getUniformLocation(t,"mat"),a=r.getUniformLocation(t,"translate"),r.useProgram(t),r.bindBuffer(r.ARRAY_BUFFER,r.createBuffer()),r.enableVertexAttribArray(0),r.enableVertexAttribArray(1),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,r.createBuffer()),r.uniform1i(r.getUniformLocation(t,"image"),0),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e=r}return!0}let e=null,i=0,n=0,s=null,a=null,r=0,c=0,h=!1;t(),this.hc=function(){return t(),n},this.Mb=function(t){e.deleteTexture&&e.deleteTexture(t)},this.Lb=function(n){if(!t())return null;const s=e.createTexture();return s?(e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),2==i?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR),e.generateMipmap(e.TEXTURE_2D)):e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),s):null};const l=new o(8),d=new o(8),u=new o(10),m=new o(10);this.Qb=function(i,n,o,h,p){if(t()){var g=l.push(i),f=d.push(n);if(e.canvas){for(var v of(e.canvas.width==g&&e.canvas.height==f||(e.canvas.width=g,e.canvas.height=f),e.viewport(0,f-n,i,n),e.disable(e.SCISSOR_TEST),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),e.enable(e.SCISSOR_TEST),o.sort(((t,e)=>e.wb-t.wb)),g=u.push(h),r!=g&&(e.bufferData(e.ARRAY_BUFFER,8*g,e.DYNAMIC_DRAW),r=g),g=0,o))e.bufferSubData(e.ARRAY_BUFFER,g,v.Ta),g+=4*v.Ta.length;for(var b of(console.assert(g==4*h),o))e.bufferSubData(e.ARRAY_BUFFER,g,b.Db),g+=4*b.Db.length;for(var w of(console.assert(g==8*h),g=m.push(p),c!=g&&(e.bufferData(e.ELEMENT_ARRAY_BUFFER,2*g,e.DYNAMIC_DRAW),c=g),v=0,o))e.bufferSubData(e.ELEMENT_ARRAY_BUFFER,v,w.indices),v+=2*w.indices.length;console.assert(v==2*p),w=0,b=!0,g=v=0;for(const t of o){t.image.Ka!=w&&(e.bindTexture(e.TEXTURE_2D,t.image.Ja||null),w=t.image.Ka),t.mc?(e.scissor(t.Ya,f-t.Za-t.jb,t.Ac,t.jb),b=!0):b&&(e.scissor(0,f-n,i,n),b=!1),o=2/i;const r=-2/n;e.uniform4f(s,t.ha[0]*o*t.Ba,t.ha[1]*r*t.Ca,t.ha[2]*o*t.Ba,t.ha[3]*r*t.Ca),e.uniform2f(a,t.ha[4]*o*t.Ba+o*(t.Ya-t.ic*t.Ba)-1,t.ha[5]*r*t.Ca+r*(t.Za-t.jc*t.Ca)+1),e.vertexAttribPointer(0,2,e.FLOAT,!1,0,g),e.vertexAttribPointer(1,2,e.FLOAT,!1,0,g+4*h),e.drawElements(e.TRIANGLES,t.indices.length,e.UNSIGNED_SHORT,v),g+=4*t.Ta.length,v+=2*t.indices.length}console.assert(g==4*h),console.assert(v==2*p)}}},this.canvas=function(){return t()&&e.canvas}},l=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){function t(t){switch(t){case p.srcOver:return"source-over";case p.screen:return"screen";case p.overlay:return"overlay";case p.darken:return"darken";case p.lighten:return"lighten";case p.colorDodge:return"color-dodge";case p.colorBurn:return"color-burn";case p.hardLight:return"hard-light";case p.softLight:return"soft-light";case p.difference:return"difference";case p.exclusion:return"exclusion";case p.multiply:return"multiply";case p.hue:return"hue";case p.saturation:return"saturation";case p.color:return"color";case p.luminosity:return"luminosity"}}function e(t){return"rgba("+((16711680&t)>>>16)+","+((65280&t)>>>8)+","+((255&t)>>>0)+","+((4278190080&t)>>>24)/255+")"}function i(){0<I.length&&(h.Qb(E.drawWidth(),E.drawHeight(),I,A,T),I=[],T=A=0,E.reset(512,512));for(const t of _){for(const e of t.H)e();t.H=[]}_.clear()}l&&l();var n=s.RenderPaintStyle;const o=s.RenderPath,r=s.RenderPaint,d=s.Renderer,u=s.StrokeCap,m=s.StrokeJoin,p=s.BlendMode,g=n.fill,f=n.stroke,v=s.FillRule.evenOdd;let b=1;var w=s.RenderImage.extend("CanvasRenderImage",{__construct:function({la:t,xa:e}={}){this.__parent.__construct.call(this),this.Ka=b,b=b+1&2147483647||1,this.la=t,this.xa=e},__destruct:function(){this.Ja&&(h.Mb(this.Ja),URL.revokeObjectURL(this.Wa)),this.__parent.__destruct.call(this)},decode:function(t){var e=this;e.xa&&e.xa(e);var i=new Image;e.Wa=URL.createObjectURL(new Blob([t],{type:"image/png"})),i.onload=function(){e.Fb=i,e.Ja=h.Lb(i),e.size(i.width,i.height),e.la&&e.la(e)},i.src=e.Wa}}),y=o.extend("CanvasRenderPath",{__construct:function(){this.__parent.__construct.call(this),this.T=new Path2D},rewind:function(){this.T=new Path2D},addPath:function(t,e,i,n,s,a,o){var r=this.T,c=r.addPath;t=t.T;const h=new DOMMatrix;h.a=e,h.b=i,h.c=n,h.d=s,h.e=a,h.f=o,c.call(r,t,h)},fillRule:function(t){this.Va=t},moveTo:function(t,e){this.T.moveTo(t,e)},lineTo:function(t,e){this.T.lineTo(t,e)},cubicTo:function(t,e,i,n,s,a){this.T.bezierCurveTo(t,e,i,n,s,a)},close:function(){this.T.closePath()}}),S=r.extend("CanvasRenderPaint",{color:function(t){this.Xa=e(t)},thickness:function(t){this.Ib=t},join:function(t){switch(t){case m.miter:this.Ia="miter";break;case m.round:this.Ia="round";break;case m.bevel:this.Ia="bevel"}},cap:function(t){switch(t){case u.butt:this.Ha="butt";break;case u.round:this.Ha="round";break;case u.square:this.Ha="square"}},style:function(t){this.Hb=t},blendMode:function(e){this.Eb=t(e)},clearGradient:function(){this.ja=null},linearGradient:function(t,e,i,n){this.ja={yb:t,zb:e,bb:i,cb:n,Ra:[]}},radialGradient:function(t,e,i,n){this.ja={yb:t,zb:e,bb:i,cb:n,Ra:[],ec:!0}},addStop:function(t,e){this.ja.Ra.push({color:t,stop:e})},completeGradient:function(){},draw:function(t,i,n){let s=this.Hb;var a=this.Xa,o=this.ja;if(t.globalCompositeOperation=this.Eb,null!=o){a=o.yb;var r=o.zb;const i=o.bb;var c=o.cb;const n=o.Ra;o.ec?(o=i-a,c-=r,a=t.createRadialGradient(a,r,0,a,r,Math.sqrt(o*o+c*c))):a=t.createLinearGradient(a,r,i,c);for(let t=0,i=n.length;t<i;t++)r=n[t],a.addColorStop(r.stop,e(r.color));this.Xa=a,this.ja=null}switch(s){case f:t.strokeStyle=a,t.lineWidth=this.Ib,t.lineCap=this.Ha,t.lineJoin=this.Ia,t.stroke(i);break;case g:t.fillStyle=a,t.fill(i,n)}}});const _=new Set;let E=null,I=[],A=0,T=0;var C=s.CanvasRenderer=d.extend("Renderer",{__construct:function(t){this.__parent.__construct.call(this),this.S=[1,0,0,1,0,0],this.C=t.getContext("2d"),this.Ua=t,this.H=[]},save:function(){this.S.push(...this.S.slice(this.S.length-6)),this.H.push(this.C.save.bind(this.C))},restore:function(){const t=this.S.length-6;if(6>t)throw"restore() called without matching save().";this.S.splice(t),this.H.push(this.C.restore.bind(this.C))},transform:function(t,e,i,n,s,a){const o=this.S,r=o.length-6;o.splice(r,6,o[r]*t+o[r+2]*e,o[r+1]*t+o[r+3]*e,o[r]*i+o[r+2]*n,o[r+1]*i+o[r+3]*n,o[r]*s+o[r+2]*a+o[r+4],o[r+1]*s+o[r+3]*a+o[r+5]),this.H.push(this.C.transform.bind(this.C,t,e,i,n,s,a))},rotate:function(t){const e=Math.sin(t);t=Math.cos(t),this.transform(t,e,-e,t,0,0)},_drawPath:function(t,e){this.H.push(e.draw.bind(e,this.C,t.T,t.Va===v?"evenodd":"nonzero"))},_drawRiveImage:function(e,i,n){var s=e.Fb;if(s){var a=this.C,o=t(i);this.H.push((function(){a.globalCompositeOperation=o,a.globalAlpha=n,a.drawImage(s,0,0),a.globalAlpha=1}))}},_getMatrix:function(t){const e=this.S,i=e.length-6;for(let n=0;6>n;++n)t[n]=e[i+n]},_drawImageMesh:function(e,n,a,o,r,c,l,d,u,m){var p=this.C.canvas.width,g=this.C.canvas.height;const f=u-l,v=m-d;l=Math.max(l,0),d=Math.max(d,0),u=Math.min(u,p),m=Math.min(m,g);const b=u-l,w=m-d;if(console.assert(b<=Math.min(f,p)),console.assert(w<=Math.min(v,g)),!(0>=b||0>=w)){u=b<f||w<v,p=m=1;var y=Math.ceil(b*m),S=Math.ceil(w*p);g=h.hc(),y>g&&(m*=g/y,y=g),S>g&&(p*=g/S,S=g),E||(E=new s.DynamicRectanizer(g),E.reset(512,512)),0>(g=E.addRect(y,S))&&(i(),_.add(this),g=E.addRect(y,S),console.assert(0<=g));var C=65535&g,x=g>>16;I.push({ha:this.S.slice(this.S.length-6),image:e,Ya:C,Za:x,ic:l,jc:d,Ac:y,jb:S,Ba:m,Ca:p,Ta:new Float32Array(o),Db:new Float32Array(r),indices:new Uint16Array(c),mc:u,wb:e.Ka<<1|(u?1:0)}),A+=o.length,T+=c.length;var L=this.C,P=t(n);this.H.push((function(){L.save(),L.resetTransform(),L.globalCompositeOperation=P,L.globalAlpha=a;const t=h.canvas();t&&L.drawImage(t,C,x,y,S,l,d,b,w),L.restore()}))}},_clipPath:function(t){this.H.push(this.C.clip.bind(this.C,t.T,t.Va===v?"evenodd":"nonzero"))},clear:function(){_.add(this),this.H.push(this.C.clearRect.bind(this.C,0,0,this.Ua.width,this.Ua.height))},flush:function(){},translate:function(t,e){this.transform(1,0,0,1,t,e)}});s.makeRenderer=function(t){const e=new C(t),i=e.C;return new Proxy(e,{get(t,n){if("function"==typeof t[n])return function(...e){return t[n].apply(t,e)};if("function"==typeof i[n]){if(-1<c.indexOf(n))throw Error("RiveException: Method call to '"+n+"()' is not allowed, as the renderer cannot immediately pass through the return                 values of any canvas 2d context methods.");return function(...t){e.H.push(i[n].bind(i,...t))}}return t[n]},set(t,n,s){if(n in i)return e.H.push((()=>{i[n]=s})),!0}})},s.decodeImage=function(t,e){new w({la:e}).decode(t)},s.renderFactory={makeRenderPaint:function(){return new S},makeRenderPath:function(){return new y},makeRenderImage:function(){let t=L;return new w({xa:()=>{t.total++},la:()=>{if(t.loaded++,t.loaded===t.total){const e=t.ready;e&&(e(),t.ready=null)}}})}};let x=s.load,L=null;s.load=function(t,e,i=!0){const n=new s.FallbackFileAssetLoader;return void 0!==e&&n.addLoader(e),i&&(e=new s.CDNFileAssetLoader,n.addLoader(e)),new Promise((function(e){let i=null;L={total:0,loaded:0,ready:function(){e(i)}},i=x(t,n),0==L.total&&e(i)}))},n=new a,s.requestAnimationFrame=n.requestAnimationFrame.bind(n),s.cancelAnimationFrame=n.cancelAnimationFrame.bind(n),s.enableFPSCounter=n.Rb.bind(n),s.disableFPSCounter=n.Ob,n.ob=i,s.resolveAnimationFrame=i,s.cleanup=function(){E&&E.delete()}};var d,u,m=Object.assign({},s),p="./this.program",g="object"==typeof window,f="function"==typeof importScripts,v="";(g||f)&&(f?v=self.location.href:"undefined"!=typeof document&&document.currentScript&&(v=document.currentScript.src),n&&(v=n),v=0!==v.indexOf("blob:")?v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):"",f&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),d=(t,e,i)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):i()},n.onerror=i,n.send(null)});var b,w=s.print||console.log.bind(console),y=s.printErr||console.error.bind(console);Object.assign(s,m),m=null,s.thisProgram&&(p=s.thisProgram),s.wasmBinary&&(b=s.wasmBinary),s.noExitRuntime,"object"!=typeof WebAssembly&&G("no native wasm support detected");var S,_,E,I,A,T,C,x,L,P,D=!1;function M(){var t=S.buffer;s.HEAP8=E=new Int8Array(t),s.HEAP16=A=new Int16Array(t),s.HEAP32=C=new Int32Array(t),s.HEAPU8=I=new Uint8Array(t),s.HEAPU16=T=new Uint16Array(t),s.HEAPU32=x=new Uint32Array(t),s.HEAPF32=L=new Float32Array(t),s.HEAPF64=P=new Float64Array(t)}var k,B=[],O=[],N=[];function z(){var t=s.preRun.shift();B.unshift(t)}var R,F=0,U=null,j=null;function G(t){throw s.onAbort&&s.onAbort(t),y(t="Aborted("+t+")"),D=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),i(t),t}function V(t){return t.startsWith("data:application/octet-stream;base64,")}if(!V(R="canvas_advanced.wasm")){var H=R;R=s.locateFile?s.locateFile(H,v):v+H}function W(t){if(t==R&&b)return new Uint8Array(b);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}function Y(t,e,i){return function(t){if(!b&&(g||f)){if("function"==typeof fetch&&!t.startsWith("file://"))return fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>W(t)));if(d)return new Promise(((e,i)=>{d(t,(t=>e(new Uint8Array(t))),i)}))}return Promise.resolve().then((()=>W(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(i,(t=>{y("failed to asynchronously prepare wasm: "+t),G(t)}))}var X,$,K={437756:(t,e,i,n,s)=>{if("undefined"==typeof window||void 0===(window.AudioContext||window.webkitAudioContext))return 0;if(void 0===window.h){window.h={Aa:0},window.h.I={},window.h.I.ya=t,window.h.I.capture=e,window.h.I.La=i,window.h.ga={},window.h.ga.stopped=n,window.h.ga.xb=s;let a=window.h;a.D=[],a.yc=function(t){for(var e=0;e<a.D.length;++e)if(null==a.D[e])return a.D[e]=t,e;return a.D.push(t),a.D.length-1},a.Cb=function(t){for(a.D[t]=null;0<a.D.length&&null==a.D[a.D.length-1];)a.D.pop()},a.Sc=function(t){for(var e=0;e<a.D.length;++e)if(a.D[e]==t)return a.Cb(e)},a.ra=function(t){return a.D[t]},a.Bb=["touchend","click"],a.unlock=function(){for(var t=0;t<a.D.length;++t){var e=a.D[t];null!=e&&null!=e.J&&e.state===a.ga.xb&&e.J.resume().then((()=>{Li(e.pb)}),(t=>{console.error("Failed to resume audiocontext",t)}))}a.Bb.map((function(t){document.removeEventListener(t,a.unlock,!0)}))},a.Bb.map((function(t){document.addEventListener(t,a.unlock,!0)}))}return window.h.Aa+=1,1},439934:()=>{void 0!==window.h&&(--window.h.Aa,0===window.h.Aa&&delete window.h)},440098:()=>void 0!==navigator.mediaDevices&&void 0!==navigator.mediaDevices.getUserMedia,440202:()=>{try{var t=new(window.AudioContext||window.webkitAudioContext),e=t.sampleRate;return t.close(),e}catch(t){return 0}},440373:(t,e,i,n,s,a)=>{if(void 0===window.h)return-1;var o={},r={};return t==window.h.I.ya&&0!=i&&(r.sampleRate=i),o.J=new(window.AudioContext||window.webkitAudioContext)(r),o.J.suspend(),o.state=window.h.ga.stopped,i=0,t!=window.h.I.ya&&(i=e),o.Z=o.J.createScriptProcessor(n,i,e),o.Z.onaudioprocess=function(i){if(null!=o.sa&&0!=o.sa.length||(o.sa=new Float32Array(L.buffer,s,n*e)),t==window.h.I.capture||t==window.h.I.La){for(var r=0;r<e;r+=1)for(var c=i.inputBuffer.getChannelData(r),h=o.sa,l=0;l<n;l+=1)h[l*e+r]=c[l];Di(a,n,s)}if(t==window.h.I.ya||t==window.h.I.La)for(Mi(a,n,s),r=0;r<i.outputBuffer.numberOfChannels;++r)for(c=i.outputBuffer.getChannelData(r),h=o.sa,l=0;l<n;l+=1)c[l]=h[l*e+r];else for(r=0;r<i.outputBuffer.numberOfChannels;++r)i.outputBuffer.getChannelData(r).fill(0)},t!=window.h.I.capture&&t!=window.h.I.La||navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(t){o.Da=o.J.createMediaStreamSource(t),o.Da.connect(o.Z),o.Z.connect(o.J.destination)})).catch((function(t){console.log("Failed to get user media: "+t)})),t==window.h.I.ya&&o.Z.connect(o.J.destination),o.pb=a,window.h.yc(o)},443250:t=>window.h.ra(t).J.sampleRate,443323:t=>{void 0!==(t=window.h.ra(t)).Z&&(t.Z.onaudioprocess=function(){},t.Z.disconnect(),t.Z=void 0),void 0!==t.Da&&(t.Da.disconnect(),t.Da=void 0),t.J.close(),t.J=void 0,t.pb=void 0},443723:t=>{window.h.Cb(t)},443773:t=>{(t=window.h.ra(t)).J.resume(),t.state=window.h.ga.xb},443912:t=>{(t=window.h.ra(t)).J.suspend(),t.state=window.h.ga.stopped}},q=t=>{for(;0<t.length;)t.shift()(s)},J=(t,e)=>{for(var i=0,n=t.length-1;0<=n;n--){var s=t[n];"."===s?t.splice(n,1):".."===s?(t.splice(n,1),i++):i&&(t.splice(n,1),i--)}if(e)for(;i;i--)t.unshift("..");return t},Z=t=>{var e="/"===t.charAt(0),i="/"===t.substr(-1);return(t=J(t.split("/").filter((t=>!!t)),!e).join("/"))||e||(t="."),t&&i&&(t+="/"),(e?"/":"")+t},Q=t=>{var e=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(t).slice(1);return t=e[0],e=e[1],t||e?(e&&(e=e.substr(0,e.length-1)),t+e):"."},tt=t=>{if("/"===t)return"/";var e=(t=(t=Z(t)).replace(/\/$/,"")).lastIndexOf("/");return-1===e?t:t.substr(e+1)},et=t=>(et=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return t=>crypto.getRandomValues(t);G("initRandomDevice")})())(t);function it(){for(var t="",e=!1,i=arguments.length-1;-1<=i&&!e;i--){if("string"!=typeof(e=0<=i?arguments[i]:"/"))throw new TypeError("Arguments to path.resolve must be strings");if(!e)return"";t=e+"/"+t,e="/"===e.charAt(0)}return(e?"/":"")+(t=J(t.split("/").filter((t=>!!t)),!e).join("/"))||"."}var nt="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,st=(t,e,i)=>{var n=e+i;for(i=e;t[i]&&!(i>=n);)++i;if(16<i-e&&t.buffer&&nt)return nt.decode(t.subarray(e,i));for(n="";e<i;){var s=t[e++];if(128&s){var a=63&t[e++];if(192==(224&s))n+=String.fromCharCode((31&s)<<6|a);else{var o=63&t[e++];65536>(s=224==(240&s)?(15&s)<<12|a<<6|o:(7&s)<<18|a<<12|o<<6|63&t[e++])?n+=String.fromCharCode(s):(s-=65536,n+=String.fromCharCode(55296|s>>10,56320|1023&s))}}else n+=String.fromCharCode(s)}return n},at=[],ot=t=>{for(var e=0,i=0;i<t.length;++i){var n=t.charCodeAt(i);127>=n?e++:2047>=n?e+=2:55296<=n&&57343>=n?(e+=4,++i):e+=3}return e},rt=(t,e,i,n)=>{if(!(0<n))return 0;var s=i;n=i+n-1;for(var a=0;a<t.length;++a){var o=t.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++a)),127>=o){if(i>=n)break;e[i++]=o}else{if(2047>=o){if(i+1>=n)break;e[i++]=192|o>>6}else{if(65535>=o){if(i+2>=n)break;e[i++]=224|o>>12}else{if(i+3>=n)break;e[i++]=240|o>>18,e[i++]=128|o>>12&63}e[i++]=128|o>>6&63}e[i++]=128|63&o}}return e[i]=0,i-s};function ct(t,e){var i=Array(ot(t)+1);return t=rt(t,i,0,i.length),e&&(i.length=t),i}var ht=[];function lt(t,e){ht[t]={input:[],F:[],V:e},Ft(t,dt)}var dt={open:function(t){var e=ht[t.node.za];if(!e)throw new Tt(43);t.s=e,t.seekable=!1},close:function(t){t.s.V.qa(t.s)},qa:function(t){t.s.V.qa(t.s)},read:function(t,e,i,n){if(!t.s||!t.s.V.ib)throw new Tt(60);for(var s=0,a=0;a<n;a++){try{var o=t.s.V.ib(t.s)}catch(t){throw new Tt(29)}if(void 0===o&&0===s)throw new Tt(6);if(null==o)break;s++,e[i+a]=o}return s&&(t.node.timestamp=Date.now()),s},write:function(t,e,i,n){if(!t.s||!t.s.V.Oa)throw new Tt(60);try{for(var s=0;s<n;s++)t.s.V.Oa(t.s,e[i+s])}catch(t){throw new Tt(29)}return n&&(t.node.timestamp=Date.now()),s}},ut={ib:function(){t:{if(!at.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t){t=null;break t}at=ct(t,!0)}t=at.shift()}return t},Oa:function(t,e){null===e||10===e?(w(st(t.F,0)),t.F=[]):0!=e&&t.F.push(e)},qa:function(t){t.F&&0<t.F.length&&(w(st(t.F,0)),t.F=[])},bc:function(){return{Fc:25856,Hc:5,Ec:191,Gc:35387,Dc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},cc:function(){return 0},dc:function(){return[24,80]}},mt={Oa:function(t,e){null===e||10===e?(y(st(t.F,0)),t.F=[]):0!=e&&t.F.push(e)},qa:function(t){t.F&&0<t.F.length&&(y(st(t.F,0)),t.F=[])}};function pt(t,e){var i=t.j?t.j.length:0;i>=e||(e=Math.max(e,i*(1048576>i?2:1.125)>>>0),0!=i&&(e=Math.max(e,256)),i=t.j,t.j=new Uint8Array(e),0<t.v&&t.j.set(i.subarray(0,t.v),0))}var gt,ft,vt,bt,wt={O:null,U:()=>wt.createNode(null,"/",16895,0),createNode(t,e,i,n){if(24576==(61440&i)||4096==(61440&i))throw new Tt(63);return wt.O||(wt.O={dir:{node:{Y:wt.l.Y,P:wt.l.P,ka:wt.l.ka,va:wt.l.va,ub:wt.l.ub,Ab:wt.l.Ab,vb:wt.l.vb,sb:wt.l.sb,Ea:wt.l.Ea},stream:{ba:wt.m.ba}},file:{node:{Y:wt.l.Y,P:wt.l.P},stream:{ba:wt.m.ba,read:wt.m.read,write:wt.m.write,pa:wt.m.pa,lb:wt.m.lb,nb:wt.m.nb}},link:{node:{Y:wt.l.Y,P:wt.l.P,ma:wt.l.ma},stream:{}},$a:{node:{Y:wt.l.Y,P:wt.l.P},stream:Rt}}),16384==(61440&(i=Mt(t,e,i,n)).mode)?(i.l=wt.O.dir.node,i.m=wt.O.dir.stream,i.j={}):32768==(61440&i.mode)?(i.l=wt.O.file.node,i.m=wt.O.file.stream,i.v=0,i.j=null):40960==(61440&i.mode)?(i.l=wt.O.link.node,i.m=wt.O.link.stream):8192==(61440&i.mode)&&(i.l=wt.O.$a.node,i.m=wt.O.$a.stream),i.timestamp=Date.now(),t&&(t.j[e]=i,t.timestamp=i.timestamp),i},Kc:t=>t.j?t.j.subarray?t.j.subarray(0,t.v):new Uint8Array(t.j):new Uint8Array(0),l:{Y(t){var e={};return e.Jc=8192==(61440&t.mode)?t.id:1,e.Mc=t.id,e.mode=t.mode,e.Oc=1,e.uid=0,e.Lc=0,e.za=t.za,16384==(61440&t.mode)?e.size=4096:32768==(61440&t.mode)?e.size=t.v:40960==(61440&t.mode)?e.size=t.link.length:e.size=0,e.Bc=new Date(t.timestamp),e.Nc=new Date(t.timestamp),e.Ic=new Date(t.timestamp),e.Jb=4096,e.Cc=Math.ceil(e.size/e.Jb),e},P(t,e){if(void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp),void 0!==e.size&&(e=e.size,t.v!=e))if(0==e)t.j=null,t.v=0;else{var i=t.j;t.j=new Uint8Array(e),i&&t.j.set(i.subarray(0,Math.min(e,t.v))),t.v=e}},ka(){throw Ct[44]},va:(t,e,i,n)=>wt.createNode(t,e,i,n),ub(t,e,i){if(16384==(61440&t.mode)){try{var n=Dt(e,i)}catch(t){}if(n)for(var s in n.j)throw new Tt(55)}delete t.parent.j[t.name],t.parent.timestamp=Date.now(),t.name=i,e.j[i]=t,e.timestamp=t.parent.timestamp,t.parent=e},Ab(t,e){delete t.j[e],t.timestamp=Date.now()},vb(t,e){var i,n=Dt(t,e);for(i in n.j)throw new Tt(55);delete t.j[e],t.timestamp=Date.now()},sb(t){var e,i=[".",".."];for(e in t.j)t.j.hasOwnProperty(e)&&i.push(e);return i},Ea:(t,e,i)=>((t=wt.createNode(t,e,41471,0)).link=i,t),ma(t){if(40960!=(61440&t.mode))throw new Tt(28);return t.link}},m:{read(t,e,i,n,s){var a=t.node.j;if(s>=t.node.v)return 0;if(8<(t=Math.min(t.node.v-s,n))&&a.subarray)e.set(a.subarray(s,s+t),i);else for(n=0;n<t;n++)e[i+n]=a[s+n];return t},write(t,e,i,n,s,a){if(e.buffer===E.buffer&&(a=!1),!n)return 0;if((t=t.node).timestamp=Date.now(),e.subarray&&(!t.j||t.j.subarray)){if(a)return t.j=e.subarray(i,i+n),t.v=n;if(0===t.v&&0===s)return t.j=e.slice(i,i+n),t.v=n;if(s+n<=t.v)return t.j.set(e.subarray(i,i+n),s),n}if(pt(t,s+n),t.j.subarray&&e.subarray)t.j.set(e.subarray(i,i+n),s);else for(a=0;a<n;a++)t.j[s+a]=e[i+a];return t.v=Math.max(t.v,s+n),n},ba(t,e,i){if(1===i?e+=t.position:2===i&&32768==(61440&t.node.mode)&&(e+=t.node.v),0>e)throw new Tt(28);return e},pa(t,e,i){pt(t.node,e+i),t.node.v=Math.max(t.node.v,e+i)},lb(t,e,i,n,s){if(32768!=(61440&t.node.mode))throw new Tt(43);if(t=t.node.j,2&s||t.buffer!==E.buffer){if((0<i||i+e<t.length)&&(t=t.subarray?t.subarray(i,i+e):Array.prototype.slice.call(t,i,i+e)),i=!0,G(),!(e=void 0))throw new Tt(48);E.set(t,e)}else i=!1,e=t.byteOffset;return{o:e,M:i}},nb:(t,e,i,n)=>(wt.m.write(t,e,0,n,i,!1),0)}},yt=null,St={},_t=[],Et=1,It=null,At=!0,Tt=null,Ct={},xt=(t,e={})=>{if(!(t=it(t)))return{path:"",node:null};if(8<(e=Object.assign({gb:!0,Qa:0},e)).Qa)throw new Tt(32);t=t.split("/").filter((t=>!!t));for(var i=yt,n="/",s=0;s<t.length;s++){var a=s===t.length-1;if(a&&e.parent)break;if(i=Dt(i,t[s]),n=Z(n+"/"+t[s]),i.wa&&(!a||a&&e.gb)&&(i=i.wa.root),!a||e.fb)for(a=0;40960==(61440&i.mode);)if(i=Ht(n),n=it(Q(n),i),i=xt(n,{Qa:e.Qa+1}).node,40<a++)throw new Tt(32)}return{path:n,node:i}},Lt=t=>{for(var e;;){if(t===t.parent)return t=t.U.mb,e?"/"!==t[t.length-1]?`${t}/${e}`:t+e:t;e=e?`${t.name}/${e}`:t.name,t=t.parent}},Pt=(t,e)=>{for(var i=0,n=0;n<e.length;n++)i=(i<<5)-i+e.charCodeAt(n)|0;return(t+i>>>0)%It.length},Dt=(t,e)=>{var i;if(i=(i=Bt(t,"x"))?i:t.l.ka?0:2)throw new Tt(i,t);for(i=It[Pt(t.id,e)];i;i=i.lc){var n=i.name;if(i.parent.id===t.id&&n===e)return i}return t.l.ka(t,e)},Mt=(t,e,i,n)=>(t=new Ei(t,e,i,n),e=Pt(t.parent.id,t.name),t.lc=It[e],It[e]=t),kt=t=>{var e=["r","w","rw"][3&t];return 512&t&&(e+="w"),e},Bt=(t,e)=>At?0:!e.includes("r")||292&t.mode?e.includes("w")&&!(146&t.mode)||e.includes("x")&&!(73&t.mode)?2:0:2,Ot=(t,e)=>{try{return Dt(t,e),20}catch(t){}return Bt(t,"wx")},Nt=t=>{if(!(t=_t[t]))throw new Tt(8);return t},zt=(t,e=-1)=>(vt||((vt=function(){this.h={}}).prototype={},Object.defineProperties(vt.prototype,{object:{get(){return this.node},set(t){this.node=t}},flags:{get(){return this.h.flags},set(t){this.h.flags=t}},position:{get(){return this.h.position},set(t){this.h.position=t}}})),t=Object.assign(new vt,t),-1==e&&(e=(()=>{for(var t=0;4096>=t;t++)if(!_t[t])return t;throw new Tt(33)})()),t.X=e,_t[e]=t),Rt={open:t=>{t.m=St[t.node.za].m,t.m.open&&t.m.open(t)},ba:()=>{throw new Tt(70)}},Ft=(t,e)=>{St[t]={m:e}},Ut=(t,e)=>{var i="/"===e,n=!e;if(i&&yt)throw new Tt(10);if(!i&&!n){var s=xt(e,{gb:!1});if(e=s.path,(s=s.node).wa)throw new Tt(10);if(16384!=(61440&s.mode))throw new Tt(54)}e={type:t,Qc:{},mb:e,kc:[]},(t=t.U(e)).U=e,e.root=t,i?yt=t:s&&(s.wa=e,s.U&&s.U.kc.push(e))},jt=(t,e,i)=>{var n=xt(t,{parent:!0}).node;if(!(t=tt(t))||"."===t||".."===t)throw new Tt(28);var s=Ot(n,t);if(s)throw new Tt(s);if(!n.l.va)throw new Tt(63);return n.l.va(n,t,e,i)},Gt=(t,e,i)=>{void 0===i&&(i=e,e=438),jt(t,8192|e,i)},Vt=(t,e)=>{if(!it(t))throw new Tt(44);var i=xt(e,{parent:!0}).node;if(!i)throw new Tt(44);e=tt(e);var n=Ot(i,e);if(n)throw new Tt(n);if(!i.l.Ea)throw new Tt(63);i.l.Ea(i,e,t)},Ht=t=>{if(!(t=xt(t).node))throw new Tt(44);if(!t.l.ma)throw new Tt(28);return it(Lt(t.parent),t.l.ma(t))},Wt=(t,e,i)=>{if(""===t)throw new Tt(44);if("string"==typeof e){var n={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[e];if(void 0===n)throw Error(`Unknown file open mode: ${e}`);e=n}if(i=64&e?4095&(void 0===i?438:i)|32768:0,"object"==typeof t)var a=t;else{t=Z(t);try{a=xt(t,{fb:!(131072&e)}).node}catch(t){}}if(n=!1,64&e)if(a){if(128&e)throw new Tt(20)}else a=jt(t,i,0),n=!0;if(!a)throw new Tt(44);if(8192==(61440&a.mode)&&(e&=-513),65536&e&&16384!=(61440&a.mode))throw new Tt(54);if(!n&&(i=a?40960==(61440&a.mode)?32:16384==(61440&a.mode)&&("r"!==kt(e)||512&e)?31:Bt(a,kt(e)):44))throw new Tt(i);if(512&e&&!n){if(!(i="string"==typeof(i=a)?xt(i,{fb:!0}).node:i).l.P)throw new Tt(63);if(16384==(61440&i.mode))throw new Tt(31);if(32768!=(61440&i.mode))throw new Tt(28);if(n=Bt(i,"w"))throw new Tt(n);i.l.P(i,{size:0,timestamp:Date.now()})}return e&=-131713,(a=zt({node:a,path:Lt(a),flags:e,seekable:!0,position:0,m:a.m,zc:[],error:!1})).m.open&&a.m.open(a),!s.logReadFiles||1&e||(bt||(bt={}),t in bt||(bt[t]=1)),a},Yt=(t,e,i)=>{if(null===t.X)throw new Tt(8);if(!t.seekable||!t.m.ba)throw new Tt(70);if(0!=i&&1!=i&&2!=i)throw new Tt(28);t.position=t.m.ba(t,e,i),t.zc=[]},Xt=()=>{Tt||((Tt=function(t,e){this.name="ErrnoError",this.node=e,this.pc=function(t){this.aa=t},this.pc(t),this.message="FS error"}).prototype=Error(),Tt.prototype.constructor=Tt,[44].forEach((t=>{Ct[t]=new Tt(t),Ct[t].stack="<generic error, no stack>"})))},$t=(t,e,i)=>{t=Z("/dev/"+t);var n=function(t,e){var i=0;return t&&(i|=365),e&&(i|=146),i}(!!e,!!i);ft||(ft=64);var s=ft++<<8;Ft(s,{open:t=>{t.seekable=!1},close:()=>{i&&i.buffer&&i.buffer.length&&i(10)},read:(t,i,n,s)=>{for(var a=0,o=0;o<s;o++){try{var r=e()}catch(t){throw new Tt(29)}if(void 0===r&&0===a)throw new Tt(6);if(null==r)break;a++,i[n+o]=r}return a&&(t.node.timestamp=Date.now()),a},write:(t,e,n,s)=>{for(var a=0;a<s;a++)try{i(e[n+a])}catch(t){throw new Tt(29)}return s&&(t.node.timestamp=Date.now()),a}}),Gt(t,n,s)},Kt={},qt=void 0;function Jt(){return C[(qt+=4)-4>>2]}function Zt(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return 48<=e&&57>=e?`_${t}`:t}function Qt(t,e){return t=Zt(t),{[t]:function(){return e.apply(this,arguments)}}[t]}function te(){this.M=[void 0],this.hb=[]}var ee=new te,ie=void 0;function ne(t){throw new ie(t)}var se=t=>(t||ne("Cannot use deleted val. handle = "+t),ee.get(t).value),ae=t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ee.pa({tb:1,value:t})}};function oe(t){var e=Error,i=Qt(t,(function(e){this.name=t,this.message=e,void 0!==(e=Error(e).stack)&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return i.prototype=Object.create(e.prototype),i.prototype.constructor=i,i.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},i}var re=void 0,ce=void 0;function he(t){for(var e="";I[t];)e+=ce[I[t++]];return e}var le=[];function de(){for(;le.length;){var t=le.pop();t.g.fa=!1,t.delete()}}var ue=void 0,me={};function pe(t,e){for(void 0===e&&ne("ptr should not be undefined");t.A;)e=t.na(e),t=t.A;return e}var ge={};function fe(t){var e=he(t=Bi(t));return Ci(t),e}function ve(t,e){var i=ge[t];return void 0===i&&ne(e+" has unknown type "+fe(t)),i}function be(){}var we=!1;function ye(t){--t.count.value,0===t.count.value&&(t.G?t.L.W(t.G):t.u.i.W(t.o))}function Se(t,e,i){return e===i?t:void 0===i.A||null===(t=Se(t,e,i.A))?null:i.Pb(t)}var _e={},Ee=void 0;function Ie(t){throw new Ee(t)}function Ae(t,e){return e.u&&e.o||Ie("makeClassHandle requires ptr and ptrType"),!!e.L!=!!e.G&&Ie("Both smartPtrType and smartPtr must be specified"),e.count={value:1},Te(Object.create(t,{g:{value:e}}))}function Te(t){return"undefined"==typeof FinalizationRegistry?(Te=t=>t,t):(we=new FinalizationRegistry((t=>{ye(t.g)})),be=t=>{we.unregister(t)},(Te=t=>{var e=t.g;return e.G&&we.register(t,{g:e},t),t})(t))}var Ce={};function xe(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function Le(t){return this.fromWireType(C[t>>2])}var Pe={},De={};function Me(t,e,i){function n(e){(e=i(e)).length!==t.length&&Ie("Mismatched type converter count");for(var n=0;n<t.length;++n)Be(t[n],e[n])}t.forEach((function(t){De[t]=e}));var s=Array(e.length),a=[],o=0;e.forEach(((t,e)=>{ge.hasOwnProperty(t)?s[e]=ge[t]:(a.push(t),Pe.hasOwnProperty(t)||(Pe[t]=[]),Pe[t].push((()=>{s[e]=ge[t],++o===a.length&&n(s)})))})),0===a.length&&n(s)}function ke(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${t}`)}}function Be(t,e,i={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");!function(t,e,i={}){var n=e.name;if(t||ne(`type "${n}" must have a positive integer typeid pointer`),ge.hasOwnProperty(t)){if(i.$b)return;ne(`Cannot register type '${n}' twice`)}ge[t]=e,delete De[t],Pe.hasOwnProperty(t)&&(e=Pe[t],delete Pe[t],e.forEach((t=>t())))}(t,e,i)}function Oe(t){ne(t.g.u.i.name+" instance already deleted")}function Ne(){}function ze(t,e,i){if(void 0===t[e].B){var n=t[e];t[e]=function(){return t[e].B.hasOwnProperty(arguments.length)||ne(`Function '${i}' called with an invalid number of arguments (${arguments.length}) - expects one of (${t[e].B})!`),t[e].B[arguments.length].apply(this,arguments)},t[e].B=[],t[e].B[n.ea]=n}}function Re(t,e,i){s.hasOwnProperty(t)?((void 0===i||void 0!==s[t].B&&void 0!==s[t].B[i])&&ne(`Cannot register public name '${t}' twice`),ze(s,t,t),s.hasOwnProperty(i)&&ne(`Cannot register multiple overloads of a function with the same number of arguments (${i})!`),s[t].B[i]=e):(s[t]=e,void 0!==i&&(s[t].Pc=i))}function Fe(t,e,i,n,s,a,o,r){this.name=t,this.constructor=e,this.N=i,this.W=n,this.A=s,this.Ub=a,this.na=o,this.Pb=r,this.qb=[]}function Ue(t,e,i){for(;e!==i;)e.na||ne(`Expected null or instance of ${i.name}, got an instance of ${e.name}`),t=e.na(t),e=e.A;return t}function je(t,e){return null===e?(this.Na&&ne(`null is not a valid ${this.name}`),0):(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),Ue(e.g.o,e.g.u.i,this.i))}function Ge(t,e){if(null===e){if(this.Na&&ne(`null is not a valid ${this.name}`),this.ua){var i=this.Pa();return null!==t&&t.push(this.W,i),i}return 0}if(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.ta&&e.g.u.ta&&ne(`Cannot convert argument of type ${e.g.L?e.g.L.name:e.g.u.name} to parameter type ${this.name}`),i=Ue(e.g.o,e.g.u.i,this.i),this.ua)switch(void 0===e.g.G&&ne("Passing raw pointer to smart pointer is illegal"),this.tc){case 0:e.g.L===this?i=e.g.G:ne(`Cannot convert argument of type ${e.g.L?e.g.L.name:e.g.u.name} to parameter type ${this.name}`);break;case 1:i=e.g.G;break;case 2:if(e.g.L===this)i=e.g.G;else{var n=e.clone();i=this.oc(i,ae((function(){n.delete()}))),null!==t&&t.push(this.W,i)}break;default:ne("Unsupporting sharing policy")}return i}function Ve(t,e){return null===e?(this.Na&&ne(`null is not a valid ${this.name}`),0):(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),e.g.u.ta&&ne(`Cannot convert argument of type ${e.g.u.name} to parameter type ${this.name}`),Ue(e.g.o,e.g.u.i,this.i))}function He(t,e,i,n){this.name=t,this.i=e,this.Na=i,this.ta=n,this.ua=!1,this.W=this.oc=this.Pa=this.rb=this.tc=this.nc=void 0,void 0!==e.A?this.toWireType=Ge:(this.toWireType=n?je:Ve,this.K=null)}function We(t,e,i){s.hasOwnProperty(t)||Ie("Replacing nonexistant public symbol"),void 0!==s[t].B&&void 0!==i?s[t].B[i]=e:(s[t]=e,s[t].ea=i)}var Ye=[],Xe=t=>{var e=Ye[t];return e||(t>=Ye.length&&(Ye.length=t+1),Ye[t]=e=k.get(t)),e};function $e(t,e){var i=(t=he(t)).includes("j")?((t,e)=>{var i=[];return function(){if(i.length=0,Object.assign(i,arguments),t.includes("j")){var n=s["dynCall_"+t];n=i&&i.length?n.apply(null,[e].concat(i)):n.call(null,e)}else n=Xe(e).apply(null,i);return n}})(t,e):Xe(e);return"function"!=typeof i&&ne(`unknown function pointer with signature ${t}: ${e}`),i}var Ke=void 0;function qe(t,e){var i=[],n={};throw e.forEach((function t(e){n[e]||ge[e]||(De[e]?De[e].forEach(t):(i.push(e),n[e]=!0))})),new Ke(`${t}: `+i.map(fe).join([", "]))}function Je(t,e,i,n,s){var a=e.length;2>a&&ne("argTypes array size mismatch! Must at least get return value and 'this' types!");var o=null!==e[1]&&null!==i,r=!1;for(i=1;i<e.length;++i)if(null!==e[i]&&void 0===e[i].K){r=!0;break}var c="void"!==e[0].name,h=a-2,l=Array(h),d=[],u=[];return function(){if(arguments.length!==h&&ne(`function ${t} called with ${arguments.length} arguments, expected ${h} args!`),u.length=0,d.length=o?2:1,d[0]=s,o){var i=e[1].toWireType(u,this);d[1]=i}for(var a=0;a<h;++a)l[a]=e[a+2].toWireType(u,arguments[a]),d.push(l[a]);if(a=n.apply(null,d),r)xe(u);else for(var m=o?1:2;m<e.length;m++){var p=1===m?i:l[m-2];null!==e[m].K&&e[m].K(p)}return i=c?e[0].fromWireType(a):void 0}}function Ze(t,e){for(var i=[],n=0;n<t;n++)i.push(x[e+4*n>>2]);return i}function Qe(t,e,i){return t instanceof Object||ne(`${i} with invalid "this": ${t}`),t instanceof e.i.constructor||ne(`${i} incompatible with "this" of type ${t.constructor.name}`),t.g.o||ne(`cannot call emscripten binding method ${i} on deleted object`),Ue(t.g.o,t.g.u.i,e.i)}function ti(t){t>=ee.h&&0==--ee.get(t).tb&&ee.Zb(t)}function ei(t,e,i){switch(e){case 0:return function(t){return this.fromWireType((i?E:I)[t])};case 1:return function(t){return this.fromWireType((i?A:T)[t>>1])};case 2:return function(t){return this.fromWireType((i?C:x)[t>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function ii(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function ni(t,e){switch(e){case 2:return function(t){return this.fromWireType(L[t>>2])};case 3:return function(t){return this.fromWireType(P[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function si(t,e,i){switch(e){case 0:return i?function(t){return E[t]}:function(t){return I[t]};case 1:return i?function(t){return A[t>>1]}:function(t){return T[t>>1]};case 2:return i?function(t){return C[t>>2]}:function(t){return x[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var ai="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,oi=(t,e)=>{for(var i=t>>1,n=i+e/2;!(i>=n)&&T[i];)++i;if(32<(i<<=1)-t&&ai)return ai.decode(I.subarray(t,i));for(i="",n=0;!(n>=e/2);++n){var s=A[t+2*n>>1];if(0==s)break;i+=String.fromCharCode(s)}return i},ri=(t,e,i)=>{if(void 0===i&&(i=2147483647),2>i)return 0;var n=e;i=(i-=2)<2*t.length?i/2:t.length;for(var s=0;s<i;++s)A[e>>1]=t.charCodeAt(s),e+=2;return A[e>>1]=0,e-n},ci=t=>2*t.length,hi=(t,e)=>{for(var i=0,n="";!(i>=e/4);){var s=C[t+4*i>>2];if(0==s)break;++i,65536<=s?(s-=65536,n+=String.fromCharCode(55296|s>>10,56320|1023&s)):n+=String.fromCharCode(s)}return n},li=(t,e,i)=>{if(void 0===i&&(i=2147483647),4>i)return 0;var n=e;i=n+i-4;for(var s=0;s<t.length;++s){var a=t.charCodeAt(s);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++s)),C[e>>2]=a,(e+=4)+4>i)break}return C[e>>2]=0,e-n},di=t=>{for(var e=0,i=0;i<t.length;++i){var n=t.charCodeAt(i);55296<=n&&57343>=n&&++i,e+=4}return e},ui={};function mi(t){var e=ui[t];return void 0===e?he(t):e}var pi,gi=[],fi=[],vi=[],bi={},wi=()=>{if(!pi){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(t in bi)void 0===bi[t]?delete e[t]:e[t]=bi[t];var i=[];for(t in e)i.push(`${t}=${e[t]}`);pi=i}return pi},yi=t=>0==t%4&&(0!=t%100||0==t%400),Si=[31,29,31,30,31,30,31,31,30,31,30,31],_i=[31,28,31,30,31,30,31,31,30,31,30,31];function Ei(t,e,i,n){t||(t=this),this.parent=t,this.U=t.U,this.wa=null,this.id=Et++,this.name=e,this.mode=i,this.l={},this.m={},this.za=n}Object.defineProperties(Ei.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(t){t?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(t){t?this.mode|=146:this.mode&=-147}}}),Xt(),It=Array(4096),Ut(wt,"/"),jt("/tmp",16895,0),jt("/home",16895,0),jt("/home/web_user",16895,0),(()=>{jt("/dev",16895,0),Ft(259,{read:()=>0,write:(t,e,i,n)=>n}),Gt("/dev/null",259),lt(1280,ut),lt(1536,mt),Gt("/dev/tty",1280),Gt("/dev/tty1",1536);var t=new Uint8Array(1024),e=0,i=()=>(0===e&&(e=et(t).byteLength),t[--e]);$t("random",i),$t("urandom",i),jt("/dev/shm",16895,0),jt("/dev/shm/tmp",16895,0)})(),(()=>{jt("/proc",16895,0);var t=jt("/proc/self",16895,0);jt("/proc/self/fd",16895,0),Ut({U:()=>{var e=Mt(t,"fd",16895,73);return e.l={ka:(t,e)=>{var i=Nt(+e);return(t={parent:null,U:{mb:"fake"},l:{ma:()=>i.path}}).parent=t}},e}},"/proc/self/fd")})(),Object.assign(te.prototype,{get(t){return this.M[t]},has(t){return void 0!==this.M[t]},pa(t){var e=this.hb.pop()||this.M.length;return this.M[e]=t,e},Zb(t){this.M[t]=void 0,this.hb.push(t)}}),ie=s.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},ee.M.push({value:void 0},{value:null},{value:!0},{value:!1}),ee.h=ee.M.length,s.count_emval_handles=function(){for(var t=0,e=ee.h;e<ee.M.length;++e)void 0!==ee.M[e]&&++t;return t},re=s.PureVirtualError=oe("PureVirtualError");for(var Ii=Array(256),Ai=0;256>Ai;++Ai)Ii[Ai]=String.fromCharCode(Ai);ce=Ii,s.getInheritedInstanceCount=function(){return Object.keys(me).length},s.getLiveInheritedInstances=function(){var t,e=[];for(t in me)me.hasOwnProperty(t)&&e.push(me[t]);return e},s.flushPendingDeletes=de,s.setDelayFunction=function(t){ue=t,le.length&&ue&&ue(de)},Ee=s.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},Ne.prototype.isAliasOf=function(t){if(!(this instanceof Ne&&t instanceof Ne))return!1;var e=this.g.u.i,i=this.g.o,n=t.g.u.i;for(t=t.g.o;e.A;)i=e.na(i),e=e.A;for(;n.A;)t=n.na(t),n=n.A;return e===n&&i===t},Ne.prototype.clone=function(){if(this.g.o||Oe(this),this.g.ia)return this.g.count.value+=1,this;var t=Te,e=Object,i=e.create,n=Object.getPrototypeOf(this),s=this.g;return(t=t(i.call(e,n,{g:{value:{count:s.count,fa:s.fa,ia:s.ia,o:s.o,u:s.u,G:s.G,L:s.L}}}))).g.count.value+=1,t.g.fa=!1,t},Ne.prototype.delete=function(){this.g.o||Oe(this),this.g.fa&&!this.g.ia&&ne("Object already scheduled for deletion"),be(this),ye(this.g),this.g.ia||(this.g.G=void 0,this.g.o=void 0)},Ne.prototype.isDeleted=function(){return!this.g.o},Ne.prototype.deleteLater=function(){return this.g.o||Oe(this),this.g.fa&&!this.g.ia&&ne("Object already scheduled for deletion"),le.push(this),1===le.length&&ue&&ue(de),this.g.fa=!0,this},He.prototype.Vb=function(t){return this.rb&&(t=this.rb(t)),t},He.prototype.ab=function(t){this.W&&this.W(t)},He.prototype.argPackAdvance=8,He.prototype.readValueFromPointer=Le,He.prototype.deleteObject=function(t){null!==t&&t.delete()},He.prototype.fromWireType=function(t){function e(){return this.ua?Ae(this.i.N,{u:this.nc,o:i,L:this,G:t}):Ae(this.i.N,{u:this,o:t})}var i=this.Vb(t);if(!i)return this.ab(t),null;var n=function(t,e){return e=pe(t,e),me[e]}(this.i,i);if(void 0!==n)return 0===n.g.count.value?(n.g.o=i,n.g.G=t,n.clone()):(n=n.clone(),this.ab(t),n);if(n=this.i.Ub(i),!(n=_e[n]))return e.call(this);n=this.ta?n.Kb:n.pointerType;var s=Se(i,this.i,n.i);return null===s?e.call(this):this.ua?Ae(n.i.N,{u:n,o:s,L:this,G:t}):Ae(n.i.N,{u:n,o:s})},Ke=s.UnboundTypeError=oe("UnboundTypeError");var Ti={__syscall_fcntl64:function(t,e,i){qt=i;try{var n=Nt(t);switch(e){case 0:var s=Jt();return 0>s?-28:zt(n,s).X;case 1:case 2:case 6:case 7:return 0;case 3:return n.flags;case 4:return s=Jt(),n.flags|=s,0;case 5:return s=Jt(),A[s+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return C[ki()>>2]=28,-1}}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return-t.aa}},__syscall_ioctl:function(t,e,i){qt=i;try{var n=Nt(t);switch(e){case 21509:case 21510:case 21511:case 21512:case 21524:case 21515:return n.s?0:-59;case 21505:if(!n.s)return-59;if(n.s.V.bc){e=[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];var s=Jt();C[s>>2]=25856,C[s+4>>2]=5,C[s+8>>2]=191,C[s+12>>2]=35387;for(var a=0;32>a;a++)E[s+a+17|0]=e[a]||0}return 0;case 21506:case 21507:case 21508:if(!n.s)return-59;if(n.s.V.cc)for(s=Jt(),e=[],a=0;32>a;a++)e.push(E[s+a+17|0]);return 0;case 21519:return n.s?(s=Jt(),C[s>>2]=0):-59;case 21520:return n.s?-28:-59;case 21531:if(s=Jt(),!n.m.ac)throw new Tt(59);return n.m.ac(n,e,s);case 21523:return n.s?(n.s.V.dc&&(a=[24,80],s=Jt(),A[s>>1]=a[0],A[s+2>>1]=a[1]),0):-59;default:return-28}}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return-t.aa}},__syscall_openat:function(t,e,i,n){qt=n;try{var s=e=e?st(I,e):"";if("/"===s.charAt(0))e=s;else{var a=-100===t?"/":Nt(t).path;if(0==s.length)throw new Tt(44);e=Z(a+"/"+s)}var o=n?Jt():0;return Wt(e,i,o).X}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return-t.aa}},_embind_create_inheriting_constructor:function(t,e,i){t=he(t),e=ve(e,"wrapper"),i=se(i);var n=[].slice,s=e.i,a=s.N,o=s.A.N,r=s.A.constructor;for(var c in t=Qt(t,(function(){s.A.qb.forEach(function(t){if(this[t]===o[t])throw new re(`Pure virtual function ${t} must be implemented in JavaScript`)}.bind(this)),Object.defineProperty(this,"__parent",{value:a}),this.__construct.apply(this,n.call(arguments))})),a.__construct=function(){this===a&&ne("Pass correct 'this' to __construct");var t=r.implement.apply(void 0,[this].concat(n.call(arguments)));be(t);var e=t.g;t.notifyOnDestruction(),e.ia=!0,Object.defineProperties(this,{g:{value:e}}),Te(this),t=e.o,t=pe(s,t),me.hasOwnProperty(t)?ne(`Tried to register registered instance: ${t}`):me[t]=this},a.__destruct=function(){this===a&&ne("Pass correct 'this' to __destruct"),be(this);var t=this.g.o;t=pe(s,t),me.hasOwnProperty(t)?delete me[t]:ne(`Tried to unregister unregistered instance: ${t}`)},t.prototype=Object.create(a),i)t.prototype[c]=i[c];return ae(t)},_embind_finalize_value_object:function(t){var e=Ce[t];delete Ce[t];var i=e.Pa,n=e.W,s=e.eb;Me([t],s.map((t=>t.Yb)).concat(s.map((t=>t.rc))),(t=>{var a={};return s.forEach(((e,i)=>{var n=t[i],o=e.Wb,r=e.Xb,c=t[i+s.length],h=e.qc,l=e.sc;a[e.Sb]={read:t=>n.fromWireType(o(r,t)),write:(t,e)=>{var i=[];h(l,t,c.toWireType(i,e)),xe(i)}}})),[{name:e.name,fromWireType:function(t){var e,i={};for(e in a)i[e]=a[e].read(t);return n(t),i},toWireType:function(t,e){for(var s in a)if(!(s in e))throw new TypeError(`Missing field: "${s}"`);var o=i();for(s in a)a[s].write(o,e[s]);return null!==t&&t.push(n,o),o},argPackAdvance:8,readValueFromPointer:Le,K:n}]}))},_embind_register_bigint:function(){},_embind_register_bool:function(t,e,i,n,s){var a=ke(i);Be(t,{name:e=he(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:s},argPackAdvance:8,readValueFromPointer:function(t){if(1===i)var n=E;else if(2===i)n=A;else{if(4!==i)throw new TypeError("Unknown boolean type size: "+e);n=C}return this.fromWireType(n[t>>a])},K:null})},_embind_register_class:function(t,e,i,n,s,a,o,r,c,h,l,d,u){l=he(l),a=$e(s,a),r&&(r=$e(o,r)),h&&(h=$e(c,h)),u=$e(d,u);var m=Zt(l);Re(m,(function(){qe(`Cannot construct ${l} due to unbound types`,[n])})),Me([t,e,i],n?[n]:[],(function(e){if(e=e[0],n)var i=e.i,s=i.N;else s=Ne.prototype;e=Qt(m,(function(){if(Object.getPrototypeOf(this)!==o)throw new ie("Use 'new' to construct "+l);if(void 0===c.$)throw new ie(l+" has no accessible constructor");var t=c.$[arguments.length];if(void 0===t)throw new ie(`Tried to invoke ctor of ${l} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(c.$).toString()}) parameters instead!`);return t.apply(this,arguments)}));var o=Object.create(s,{constructor:{value:e}});e.prototype=o;var c=new Fe(l,e,o,u,i,a,r,h);c.A&&(void 0===c.A.oa&&(c.A.oa=[]),c.A.oa.push(c)),i=new He(l,c,!0,!1),s=new He(l+"*",c,!1,!1);var d=new He(l+" const*",c,!1,!0);return _e[t]={pointerType:s,Kb:d},We(m,e),[i,s,d]}))},_embind_register_class_class_function:function(t,e,i,n,s,a,o){var r=Ze(i,n);e=he(e),a=$e(s,a),Me([],[t],(function(t){function n(){qe(`Cannot call ${s} due to unbound types`,r)}var s=`${(t=t[0]).name}.${e}`;e.startsWith("@@")&&(e=Symbol[e.substring(2)]);var c=t.i.constructor;return void 0===c[e]?(n.ea=i-1,c[e]=n):(ze(c,e,s),c[e].B[i-1]=n),Me([],r,(function(n){if(n=Je(s,[n[0],null].concat(n.slice(1)),null,a,o),void 0===c[e].B?(n.ea=i-1,c[e]=n):c[e].B[i-1]=n,t.i.oa)for(const i of t.i.oa)i.constructor.hasOwnProperty(e)||(i.constructor[e]=n);return[]})),[]}))},_embind_register_class_class_property:function(t,e,i,n,s,a,o,r){e=he(e),a=$e(s,a),Me([],[t],(function(t){var s=`${(t=t[0]).name}.${e}`,c={get(){qe(`Cannot access ${s} due to unbound types`,[i])},enumerable:!0,configurable:!0};return c.set=r?()=>{qe(`Cannot access ${s} due to unbound types`,[i])}:()=>{ne(`${s} is a read-only property`)},Object.defineProperty(t.i.constructor,e,c),Me([],[i],(function(i){i=i[0];var s={get:()=>i.fromWireType(a(n)),enumerable:!0};return r&&(r=$e(o,r),s.set=t=>{var e=[];r(n,i.toWireType(e,t)),xe(e)}),Object.defineProperty(t.i.constructor,e,s),[]})),[]}))},_embind_register_class_constructor:function(t,e,i,n,s,a){var o=Ze(e,i);s=$e(n,s),Me([],[t],(function(t){var i=`constructor ${(t=t[0]).name}`;if(void 0===t.i.$&&(t.i.$=[]),void 0!==t.i.$[e-1])throw new ie(`Cannot register multiple constructors with identical number of parameters (${e-1}) for class '${t.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return t.i.$[e-1]=()=>{qe(`Cannot construct ${t.name} due to unbound types`,o)},Me([],o,(function(n){return n.splice(1,0,null),t.i.$[e-1]=Je(i,n,null,s,a),[]})),[]}))},_embind_register_class_function:function(t,e,i,n,s,a,o,r){var c=Ze(i,n);e=he(e),a=$e(s,a),Me([],[t],(function(t){function n(){qe(`Cannot call ${s} due to unbound types`,c)}var s=`${(t=t[0]).name}.${e}`;e.startsWith("@@")&&(e=Symbol[e.substring(2)]),r&&t.i.qb.push(e);var h=t.i.N,l=h[e];return void 0===l||void 0===l.B&&l.className!==t.name&&l.ea===i-2?(n.ea=i-2,n.className=t.name,h[e]=n):(ze(h,e,s),h[e].B[i-2]=n),Me([],c,(function(n){return n=Je(s,n,t,a,o),void 0===h[e].B?(n.ea=i-2,h[e]=n):h[e].B[i-2]=n,[]})),[]}))},_embind_register_class_property:function(t,e,i,n,s,a,o,r,c,h){e=he(e),s=$e(n,s),Me([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`,l={get(){qe(`Cannot access ${n} due to unbound types`,[i,o])},enumerable:!0,configurable:!0};return l.set=c?()=>{qe(`Cannot access ${n} due to unbound types`,[i,o])}:()=>{ne(n+" is a read-only property")},Object.defineProperty(t.i.N,e,l),Me([],c?[i,o]:[i],(function(i){var o=i[0],l={get(){var e=Qe(this,t,n+" getter");return o.fromWireType(s(a,e))},enumerable:!0};if(c){c=$e(r,c);var d=i[1];l.set=function(e){var i=Qe(this,t,n+" setter"),s=[];c(h,i,d.toWireType(s,e)),xe(s)}}return Object.defineProperty(t.i.N,e,l),[]})),[]}))},_embind_register_emval:function(t,e){Be(t,{name:e=he(e),fromWireType:function(t){var e=se(t);return ti(t),e},toWireType:function(t,e){return ae(e)},argPackAdvance:8,readValueFromPointer:Le,K:null})},_embind_register_enum:function(t,e,i,n){function s(){}i=ke(i),e=he(e),s.values={},Be(t,{name:e,constructor:s,fromWireType:function(t){return this.constructor.values[t]},toWireType:function(t,e){return e.value},argPackAdvance:8,readValueFromPointer:ei(e,i,n),K:null}),Re(e,s)},_embind_register_enum_value:function(t,e,i){var n=ve(t,"enum");e=he(e),t=n.constructor,n=Object.create(n.constructor.prototype,{value:{value:i},constructor:{value:Qt(`${n.name}_${e}`,(function(){}))}}),t.values[i]=n,t[e]=n},_embind_register_float:function(t,e,i){i=ke(i),Be(t,{name:e=he(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:ni(e,i),K:null})},_embind_register_function:function(t,e,i,n,s,a){var o=Ze(e,i);t=he(t),s=$e(n,s),Re(t,(function(){qe(`Cannot call ${t} due to unbound types`,o)}),e-1),Me([],o,(function(i){return We(t,Je(t,[i[0],null].concat(i.slice(1)),null,s,a),e-1),[]}))},_embind_register_integer:function(t,e,i,n,s){e=he(e),-1===s&&(s=4294967295),s=ke(i);var a=t=>t;if(0===n){var o=32-8*i;a=t=>t<<o>>>o}i=e.includes("unsigned")?function(t,e){return e>>>0}:function(t,e){return e},Be(t,{name:e,fromWireType:a,toWireType:i,argPackAdvance:8,readValueFromPointer:si(e,s,0!==n),K:null})},_embind_register_memory_view:function(t,e,i){function n(t){t>>=2;var e=x;return new s(e.buffer,e[t+1],e[t])}var s=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];Be(t,{name:i=he(i),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{$b:!0})},_embind_register_std_string:function(t,e){var i="std::string"===(e=he(e));Be(t,{name:e,fromWireType:function(t){var e=x[t>>2],n=t+4;if(i)for(var s=n,a=0;a<=e;++a){var o=n+a;if(a==e||0==I[o]){if(s=s?st(I,s,o-s):"",void 0===r)var r=s;else r+=String.fromCharCode(0),r+=s;s=o+1}}else{for(r=Array(e),a=0;a<e;++a)r[a]=String.fromCharCode(I[n+a]);r=r.join("")}return Ci(t),r},toWireType:function(t,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var n="string"==typeof e;n||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||ne("Cannot pass non-string to std::string");var s=i&&n?ot(e):e.length,a=xi(4+s+1),o=a+4;if(x[a>>2]=s,i&&n)rt(e,I,o,s+1);else if(n)for(n=0;n<s;++n){var r=e.charCodeAt(n);255<r&&(Ci(o),ne("String has UTF-16 code units that do not fit in 8 bits")),I[o+n]=r}else for(n=0;n<s;++n)I[o+n]=e[n];return null!==t&&t.push(Ci,a),a},argPackAdvance:8,readValueFromPointer:Le,K:function(t){Ci(t)}})},_embind_register_std_wstring:function(t,e,i){if(i=he(i),2===e)var n=oi,s=ri,a=ci,o=()=>T,r=1;else 4===e&&(n=hi,s=li,a=di,o=()=>x,r=2);Be(t,{name:i,fromWireType:function(t){for(var i,s=x[t>>2],a=o(),c=t+4,h=0;h<=s;++h){var l=t+4+h*e;h!=s&&0!=a[l>>r]||(c=n(c,l-c),void 0===i?i=c:(i+=String.fromCharCode(0),i+=c),c=l+e)}return Ci(t),i},toWireType:function(t,n){"string"!=typeof n&&ne(`Cannot pass non-string to C++ string type ${i}`);var o=a(n),c=xi(4+o+e);return x[c>>2]=o>>r,s(n,c+4,o+e),null!==t&&t.push(Ci,c),c},argPackAdvance:8,readValueFromPointer:Le,K:function(t){Ci(t)}})},_embind_register_value_object:function(t,e,i,n,s,a){Ce[t]={name:he(e),Pa:$e(i,n),W:$e(s,a),eb:[]}},_embind_register_value_object_field:function(t,e,i,n,s,a,o,r,c,h){Ce[t].eb.push({Sb:he(e),Yb:i,Wb:$e(n,s),Xb:a,rc:o,qc:$e(r,c),sc:h})},_embind_register_void:function(t,e){Be(t,{fc:!0,name:e=he(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},_emscripten_get_now_is_monotonic:()=>!0,_emval_as:function(t,e,i){t=se(t),e=ve(e,"emval::as");var n=[],s=ae(n);return x[i>>2]=s,e.toWireType(n,t)},_emval_call_method:function(t,e,i,n,s){t=gi[t],e=se(e),i=mi(i);var a=[];return x[n>>2]=ae(a),t(e,i,a,s)},_emval_call_void_method:function(t,e,i,n){(t=gi[t])(e=se(e),i=mi(i),null,n)},_emval_decref:ti,_emval_get_method_caller:function(t,e){var i=function(t,e){for(var i=Array(t),n=0;n<t;++n)i[n]=ve(x[e+4*n>>2],"parameter "+n);return i}(t,e),n=i[0];e=n.name+"_$"+i.slice(1).map((function(t){return t.name})).join("_")+"$";var s=fi[e];if(void 0!==s)return s;var a=Array(t-1);return s=function(t){var e=gi.length;return gi.push(t),e}(((e,s,o,r)=>{for(var c=0,h=0;h<t-1;++h)a[h]=i[h+1].readValueFromPointer(r+c),c+=i[h+1].argPackAdvance;for(e=e[s].apply(e,a),h=0;h<t-1;++h)i[h+1].Nb&&i[h+1].Nb(a[h]);if(!n.fc)return n.toWireType(o,e)})),fi[e]=s},_emval_get_module_property:function(t){return t=mi(t),ae(s[t])},_emval_get_property:function(t,e){return t=se(t),e=se(e),ae(t[e])},_emval_incref:function(t){4<t&&(ee.get(t).tb+=1)},_emval_new_cstring:function(t){return ae(mi(t))},_emval_new_object:function(){return ae({})},_emval_run_destructors:function(t){xe(se(t)),ti(t)},_emval_set_property:function(t,e,i){t=se(t),e=se(e),i=se(i),t[e]=i},_emval_take_value:function(t,e){return t=(t=ve(t,"_emval_take_value")).readValueFromPointer(e),ae(t)},abort:()=>{G("")},emscripten_asm_const_int:(t,e,i)=>{var n;for(vi.length=0,i>>=2;n=I[e++];)i+=105!=n&i,vi.push(105==n?C[i]:P[i++>>1]),++i;return K[t].apply(null,vi)},emscripten_date_now:function(){return Date.now()},emscripten_get_now:()=>performance.now(),emscripten_memcpy_big:(t,e,i)=>I.copyWithin(t,e,e+i),emscripten_resize_heap:t=>{var e=I.length;if(2147483648<(t>>>=0))return!1;for(var i=1;4>=i;i*=2){var n=e*(1+.2/i);n=Math.min(n,t+100663296);var s=Math;n=Math.max(t,n);t:{s=s.min.call(s,2147483648,n+(65536-n%65536)%65536)-S.buffer.byteLength+65535>>>16;try{S.grow(s),M();var a=1;break t}catch(t){}a=void 0}if(a)return!0}return!1},environ_get:(t,e)=>{var i=0;return wi().forEach((function(n,s){var a=e+i;for(s=x[t+4*s>>2]=a,a=0;a<n.length;++a)E[0|s++]=n.charCodeAt(a);E[0|s]=0,i+=n.length+1})),0},environ_sizes_get:(t,e)=>{var i=wi();x[t>>2]=i.length;var n=0;return i.forEach((function(t){n+=t.length+1})),x[e>>2]=n,0},fd_close:function(t){try{var e=Nt(t);if(null===e.X)throw new Tt(8);e.Ma&&(e.Ma=null);try{e.m.close&&e.m.close(e)}catch(t){throw t}finally{_t[e.X]=null}return e.X=null,0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_read:function(t,e,i,n){try{t:{var s=Nt(t);t=e;for(var a,o=e=0;o<i;o++){var r=x[t>>2],c=x[t+4>>2];t+=8;var h=s,l=r,d=c,u=a,m=E;if(0>d||0>u)throw new Tt(28);if(null===h.X)throw new Tt(8);if(1==(2097155&h.flags))throw new Tt(8);if(16384==(61440&h.node.mode))throw new Tt(31);if(!h.m.read)throw new Tt(28);var p=void 0!==u;if(p){if(!h.seekable)throw new Tt(70)}else u=h.position;var g=h.m.read(h,m,l,d,u);p||(h.position+=g);var f=g;if(0>f){var v=-1;break t}if(e+=f,f<c)break;void 0!==a&&(a+=f)}v=e}return x[n>>2]=v,0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_seek:function(t,e,i,n,s){e=i+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*i:NaN;try{if(isNaN(e))return 61;var a=Nt(t);return Yt(a,e,n),$=[a.position>>>0,(X=a.position,1<=+Math.abs(X)?0<X?+Math.floor(X/4294967296)>>>0:~~+Math.ceil((X-+(~~X>>>0))/4294967296)>>>0:0)],C[s>>2]=$[0],C[s+4>>2]=$[1],a.Ma&&0===e&&0===n&&(a.Ma=null),0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_write:function(t,e,i,n){try{t:{var s=Nt(t);t=e;for(var a,o=e=0;o<i;o++){var r=x[t>>2],c=x[t+4>>2];t+=8;var h=s,l=r,d=c,u=a,m=E;if(0>d||0>u)throw new Tt(28);if(null===h.X)throw new Tt(8);if(!(2097155&h.flags))throw new Tt(8);if(16384==(61440&h.node.mode))throw new Tt(31);if(!h.m.write)throw new Tt(28);h.seekable&&1024&h.flags&&Yt(h,0,2);var p=void 0!==u;if(p){if(!h.seekable)throw new Tt(70)}else u=h.position;var g=h.m.write(h,m,l,d,u,void 0);p||(h.position+=g);var f=g;if(0>f){var v=-1;break t}e+=f,void 0!==a&&(a+=f)}v=e}return x[n>>2]=v,0}catch(t){if(void 0===Kt||"ErrnoError"!==t.name)throw t;return t.aa}},strftime_l:(t,e,i,n)=>((t,e,i,n)=>{function s(t,e,i){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=i[0]+t;return t}function a(t,e){return s(t,e,"0")}function o(t,e){function i(t){return 0>t?-1:0<t?1:0}var n;return 0===(n=i(t.getFullYear()-e.getFullYear()))&&0===(n=i(t.getMonth()-e.getMonth()))&&(n=i(t.getDate()-e.getDate())),n}function r(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.ca;for(t=new Date(new Date(t.da+1900,0,1).getTime());0<e;){var i=t.getMonth(),n=(yi(t.getFullYear())?Si:_i)[i];if(!(e>n-t.getDate())){t.setDate(t.getDate()+e);break}e-=n-t.getDate()+1,t.setDate(1),11>i?t.setMonth(i+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return i=new Date(t.getFullYear()+1,0,4),e=r(new Date(t.getFullYear(),0,4)),i=r(i),0>=o(e,t)?0>=o(i,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var h=C[n+40>>2];for(var l in n={wc:C[n>>2],vc:C[n+4>>2],Fa:C[n+8>>2],Sa:C[n+12>>2],Ga:C[n+16>>2],da:C[n+20>>2],R:C[n+24>>2],ca:C[n+28>>2],Rc:C[n+32>>2],uc:C[n+36>>2],xc:h&&h?st(I,h):""},i=i?st(I,i):"",h={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})i=i.replace(new RegExp(l,"g"),h[l]);var d="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),u="January February March April May June July August September October November December".split(" ");for(l in h={"%a":t=>d[t.R].substring(0,3),"%A":t=>d[t.R],"%b":t=>u[t.Ga].substring(0,3),"%B":t=>u[t.Ga],"%C":t=>a((t.da+1900)/100|0,2),"%d":t=>a(t.Sa,2),"%e":t=>s(t.Sa,2," "),"%g":t=>c(t).toString().substring(2),"%G":t=>c(t),"%H":t=>a(t.Fa,2),"%I":t=>(0==(t=t.Fa)?t=12:12<t&&(t-=12),a(t,2)),"%j":t=>{for(var e=0,i=0;i<=t.Ga-1;e+=(yi(t.da+1900)?Si:_i)[i++]);return a(t.Sa+e,3)},"%m":t=>a(t.Ga+1,2),"%M":t=>a(t.vc,2),"%n":()=>"\n","%p":t=>0<=t.Fa&&12>t.Fa?"AM":"PM","%S":t=>a(t.wc,2),"%t":()=>"\t","%u":t=>t.R||7,"%U":t=>a(Math.floor((t.ca+7-t.R)/7),2),"%V":t=>{var e=Math.floor((t.ca+7-(t.R+6)%7)/7);if(2>=(t.R+371-t.ca-2)%7&&e++,e)53==e&&(4==(i=(t.R+371-t.ca)%7)||3==i&&yi(t.da)||(e=1));else{e=52;var i=(t.R+7-t.ca-1)%7;(4==i||5==i&&yi(t.da%400-1))&&e++}return a(e,2)},"%w":t=>t.R,"%W":t=>a(Math.floor((t.ca+7-(t.R+6)%7)/7),2),"%y":t=>(t.da+1900).toString().substring(2),"%Y":t=>t.da+1900,"%z":t=>{var e=0<=(t=t.uc);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":t=>t.xc,"%%":()=>"%"},i=i.replace(/%%/g,"\0\0"),h)i.includes(l)&&(i=i.replace(new RegExp(l,"g"),h[l](n)));return(l=ct(i=i.replace(/\0\0/g,"%"),!1)).length>e?0:(E.set(l,t),l.length-1)})(t,e,i,n)};!function(){function t(t){if(_=t=t.exports,S=_.memory,M(),k=_.__indirect_function_table,O.unshift(_.__wasm_call_ctors),F--,s.monitorRunDependencies&&s.monitorRunDependencies(F),0==F&&(null!==U&&(clearInterval(U),U=null),j)){var e=j;j=null,e()}return t}var e={env:Ti,wasi_snapshot_preview1:Ti};if(F++,s.monitorRunDependencies&&s.monitorRunDependencies(F),s.instantiateWasm)try{return s.instantiateWasm(e,t)}catch(t){y("Module.instantiateWasm callback failed with error: "+t),i(t)}(function(t,e){var i=R;return b||"function"!=typeof WebAssembly.instantiateStreaming||V(i)||i.startsWith("file://")||"function"!=typeof fetch?Y(i,t,e):fetch(i,{credentials:"same-origin"}).then((n=>WebAssembly.instantiateStreaming(n,t).then(e,(function(n){return y("wasm streaming compile failed: "+n),y("falling back to ArrayBuffer instantiation"),Y(i,t,e)}))))})(e,(function(e){t(e.instance)})).catch(i)}();var Ci=t=>(Ci=_.free)(t),xi=t=>(xi=_.malloc)(t),Li=s._ma_device__on_notification_unlocked=t=>(Li=s._ma_device__on_notification_unlocked=_.ma_device__on_notification_unlocked)(t);s._ma_malloc_emscripten=(t,e)=>(s._ma_malloc_emscripten=_.ma_malloc_emscripten)(t,e),s._ma_free_emscripten=(t,e)=>(s._ma_free_emscripten=_.ma_free_emscripten)(t,e);var Pi,Di=s._ma_device_process_pcm_frames_capture__webaudio=(t,e,i)=>(Di=s._ma_device_process_pcm_frames_capture__webaudio=_.ma_device_process_pcm_frames_capture__webaudio)(t,e,i),Mi=s._ma_device_process_pcm_frames_playback__webaudio=(t,e,i)=>(Mi=s._ma_device_process_pcm_frames_playback__webaudio=_.ma_device_process_pcm_frames_playback__webaudio)(t,e,i),ki=()=>(ki=_.__errno_location)(),Bi=t=>(Bi=_.__getTypeName)(t);function Oi(){function t(){if(!Pi&&(Pi=!0,s.calledRun=!0,!D)){if(s.noFSInit||gt||(gt=!0,Xt(),s.stdin=s.stdin,s.stdout=s.stdout,s.stderr=s.stderr,s.stdin?$t("stdin",s.stdin):Vt("/dev/tty","/dev/stdin"),s.stdout?$t("stdout",null,s.stdout):Vt("/dev/tty","/dev/stdout"),s.stderr?$t("stderr",null,s.stderr):Vt("/dev/tty1","/dev/stderr"),Wt("/dev/stdin",0),Wt("/dev/stdout",1),Wt("/dev/stderr",1)),At=!1,q(O),e(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),s.postRun)for("function"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var t=s.postRun.shift();N.unshift(t)}q(N)}}if(!(0<F)){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)z();q(B),0<F||(s.setStatus?(s.setStatus("Running..."),setTimeout((function(){setTimeout((function(){s.setStatus("")}),1),t()}),1)):t())}}if(s.__embind_initialize_bindings=()=>(s.__embind_initialize_bindings=_._embind_initialize_bindings)(),s.dynCall_iiji=(t,e,i,n,a)=>(s.dynCall_iiji=_.dynCall_iiji)(t,e,i,n,a),s.dynCall_jiji=(t,e,i,n,a)=>(s.dynCall_jiji=_.dynCall_jiji)(t,e,i,n,a),s.dynCall_iiiji=(t,e,i,n,a,o)=>(s.dynCall_iiiji=_.dynCall_iiiji)(t,e,i,n,a,o),s.dynCall_iij=(t,e,i,n)=>(s.dynCall_iij=_.dynCall_iij)(t,e,i,n),s.dynCall_jii=(t,e,i)=>(s.dynCall_jii=_.dynCall_jii)(t,e,i),s.dynCall_viijii=(t,e,i,n,a,o,r)=>(s.dynCall_viijii=_.dynCall_viijii)(t,e,i,n,a,o,r),s.dynCall_iiiiij=(t,e,i,n,a,o,r)=>(s.dynCall_iiiiij=_.dynCall_iiiiij)(t,e,i,n,a,o,r),s.dynCall_iiiiijj=(t,e,i,n,a,o,r,c,h)=>(s.dynCall_iiiiijj=_.dynCall_iiiiijj)(t,e,i,n,a,o,r,c,h),s.dynCall_iiiiiijj=(t,e,i,n,a,o,r,c,h,l)=>(s.dynCall_iiiiiijj=_.dynCall_iiiiiijj)(t,e,i,n,a,o,r,c,h,l),j=function t(){Pi||Oi(),Pi||(j=t)},s.preInit)for("function"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return Oi(),t.ready});const a=s},t=>{t.exports=JSON.parse('{"name":"@rive-app/canvas","version":"2.21.5","description":"Rive\'s canvas based web api.","main":"rive.js","homepage":"https://rive.app","repository":{"type":"git","url":"https://github.com/rive-app/rive-wasm/tree/master/js"},"keywords":["rive","animation"],"author":"Rive","contributors":["Luigi Rosso <luigi@rive.app> (https://rive.app)","Maxwell Talbot <max@rive.app> (https://rive.app)","Arthur Vivian <arthur@rive.app> (https://rive.app)","Umberto Sonnino <umberto@rive.app> (https://rive.app)","Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)"],"license":"MIT","files":["rive.js","rive.js.map","rive.wasm","rive_fallback.wasm","rive.d.ts","rive_advanced.mjs.d.ts"],"typings":"rive.d.ts","dependencies":{},"browser":{"fs":false,"path":false}}')},(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>n.Animation});var n=i(4)},(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>n});var n=function(){function t(t,e,i,n){this.animation=t,this.artboard=e,this.playing=n,this.loopCount=0,this.scrubTo=null,this.instance=new i.LinearAnimationInstance(t,e)}return Object.defineProperty(t.prototype,"name",{get:function(){return this.animation.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"time",{get:function(){return this.instance.time},set:function(t){this.instance.time=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loopValue",{get:function(){return this.animation.loopValue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"needsScrub",{get:function(){return null!==this.scrubTo},enumerable:!1,configurable:!0}),t.prototype.advance=function(t){null===this.scrubTo?this.instance.advance(t):(this.instance.time=0,this.instance.advance(this.scrubTo),this.scrubTo=null)},t.prototype.apply=function(t){this.instance.apply(t)},t.prototype.cleanup=function(){this.instance.delete()},t}()},(t,e,i)=>{i.r(e),i.d(e,{BLANK_URL:()=>s.BLANK_URL,registerTouchInteractions:()=>n.registerTouchInteractions,sanitizeUrl:()=>s.sanitizeUrl});var n=i(6),s=i(7)},(t,e,i)=>{i.r(e),i.d(e,{registerTouchInteractions:()=>n});var n=function(t){var e=t.canvas,i=t.artboard,n=t.stateMachines,s=void 0===n?[]:n,a=t.renderer,o=t.rive,r=t.fit,c=t.alignment,h=t.isTouchScrollEnabled,l=void 0!==h&&h;if(!(e&&s.length&&a&&o&&i&&"undefined"!=typeof window))return null;var d=null,u=!1,m=function(t){if(u&&t instanceof MouseEvent)"mouseup"==t.type&&(u=!1);else{u=l&&"touchend"===t.type&&"touchstart"===d,d=t.type;var e=t.currentTarget.getBoundingClientRect(),n=function(t,e){var i,n;return["touchstart","touchmove"].indexOf(t.type)>-1&&(null===(i=t.touches)||void 0===i?void 0:i.length)?(e||t.preventDefault(),{clientX:t.touches[0].clientX,clientY:t.touches[0].clientY}):"touchend"===t.type&&(null===(n=t.changedTouches)||void 0===n?void 0:n.length)?{clientX:t.changedTouches[0].clientX,clientY:t.changedTouches[0].clientY}:{clientX:t.clientX,clientY:t.clientY}}(t,l),a=n.clientX,h=n.clientY;if(a||h){var m=a-e.left,p=h-e.top,g=o.computeAlignment(r,c,{minX:0,minY:0,maxX:e.width,maxY:e.height},i.bounds),f=new o.Mat2D;g.invert(f);var v=new o.Vec2D(m,p),b=o.mapXY(f,v),w=b.x(),y=b.y();switch(b.delete(),f.delete(),v.delete(),g.delete(),t.type){case"mouseout":for(var S=0,_=s;S<_.length;S++)_[S].pointerMove(w<0?w-1e4:w+1e4,y<0?y-1e4:y+1e4);break;case"touchmove":case"mouseover":case"mousemove":for(var E=0,I=s;E<I.length;E++)I[E].pointerMove(w,y);break;case"touchstart":case"mousedown":for(var A=0,T=s;A<T.length;A++)T[A].pointerDown(w,y);break;case"touchend":case"mouseup":for(var C=0,x=s;C<x.length;C++)x[C].pointerUp(w,y)}}}}.bind(void 0);return e.addEventListener("mouseover",m),e.addEventListener("mouseout",m),e.addEventListener("mousemove",m),e.addEventListener("mousedown",m),e.addEventListener("mouseup",m),e.addEventListener("touchmove",m,{passive:l}),e.addEventListener("touchstart",m,{passive:l}),e.addEventListener("touchend",m),function(){e.removeEventListener("mouseover",m),e.removeEventListener("mouseout",m),e.removeEventListener("mousemove",m),e.removeEventListener("mousedown",m),e.removeEventListener("mouseup",m),e.removeEventListener("touchmove",m),e.removeEventListener("touchstart",m),e.removeEventListener("touchend",m)}}},(t,e,i)=>{i.r(e),i.d(e,{BLANK_URL:()=>h,sanitizeUrl:()=>l});var n=/^([^\w]*)(javascript|data|vbscript)/im,s=/&#(\w+)(^\w|;)?/g,a=/&(newline|tab);/gi,o=/[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim,r=/^.+(:|&colon;)/gim,c=[".","/"],h="about:blank";function l(t){if(!t)return h;var e,i=(e=t,e.replace(o,"").replace(s,(function(t,e){return String.fromCharCode(e)}))).replace(a,"").replace(o,"").trim();if(!i)return h;if(function(t){return c.indexOf(t[0])>-1}(i))return i;var l=i.match(r);if(!l)return i;var d=l[0];return n.test(d)?h:i}}],e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{i.r(n),i.d(n,{Alignment:()=>s,EventType:()=>v,Fit:()=>e,Layout:()=>m,LoopType:()=>b,Rive:()=>P,RiveEventType:()=>g,RiveFile:()=>L,RuntimeLoader:()=>p,StateMachineInput:()=>f,StateMachineInputType:()=>u,Testing:()=>k,decodeAudio:()=>B,decodeFont:()=>N,decodeImage:()=>O});var t,e,s,a=i(1),o=i(2),r=i(3),c=i(5),h=(t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)},function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}),l=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function o(t){try{c(n.next(t))}catch(t){a(t)}}function r(t){try{c(n.throw(t))}catch(t){a(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,r)}c((n=n.apply(t,e||[])).next())}))},d=function(t,e){var i,n,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(r){return function(c){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;a&&(a=0,r[0]&&(o=0)),o;)try{if(i=1,n&&(s=2&r[0]?n.return:r[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,r[1])).done)return s;switch(n=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){o.label=r[1];break}if(6===r[0]&&o.label<s[1]){o.label=s[1],s=r;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(r);break}s[2]&&o.ops.pop(),o.trys.pop();continue}r=e.call(t,o)}catch(t){r=[6,t],n=0}finally{i=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,c])}}};!function(t){t.Cover="cover",t.Contain="contain",t.Fill="fill",t.FitWidth="fitWidth",t.FitHeight="fitHeight",t.None="none",t.ScaleDown="scaleDown"}(e||(e={})),function(t){t.Center="center",t.TopLeft="topLeft",t.TopCenter="topCenter",t.TopRight="topRight",t.CenterLeft="centerLeft",t.CenterRight="centerRight",t.BottomLeft="bottomLeft",t.BottomCenter="bottomCenter",t.BottomRight="bottomRight"}(s||(s={}));var u,m=function(){function t(t){var i,n,a,o,r,c;this.fit=null!==(i=null==t?void 0:t.fit)&&void 0!==i?i:e.Contain,this.alignment=null!==(n=null==t?void 0:t.alignment)&&void 0!==n?n:s.Center,this.minX=null!==(a=null==t?void 0:t.minX)&&void 0!==a?a:0,this.minY=null!==(o=null==t?void 0:t.minY)&&void 0!==o?o:0,this.maxX=null!==(r=null==t?void 0:t.maxX)&&void 0!==r?r:0,this.maxY=null!==(c=null==t?void 0:t.maxY)&&void 0!==c?c:0}return t.new=function(e){var i=e.fit,n=e.alignment,s=e.minX,a=e.minY,o=e.maxX,r=e.maxY;return console.warn("This function is deprecated: please use `new Layout({})` instead"),new t({fit:i,alignment:n,minX:s,minY:a,maxX:o,maxY:r})},t.prototype.copyWith=function(e){var i=e.fit,n=e.alignment,s=e.minX,a=e.minY,o=e.maxX,r=e.maxY;return new t({fit:null!=i?i:this.fit,alignment:null!=n?n:this.alignment,minX:null!=s?s:this.minX,minY:null!=a?a:this.minY,maxX:null!=o?o:this.maxX,maxY:null!=r?r:this.maxY})},t.prototype.runtimeFit=function(t){return this.cachedRuntimeFit?this.cachedRuntimeFit:(i=this.fit===e.Cover?t.Fit.cover:this.fit===e.Contain?t.Fit.contain:this.fit===e.Fill?t.Fit.fill:this.fit===e.FitWidth?t.Fit.fitWidth:this.fit===e.FitHeight?t.Fit.fitHeight:this.fit===e.ScaleDown?t.Fit.scaleDown:t.Fit.none,this.cachedRuntimeFit=i,i);var i},t.prototype.runtimeAlignment=function(t){return this.cachedRuntimeAlignment?this.cachedRuntimeAlignment:(e=this.alignment===s.TopLeft?t.Alignment.topLeft:this.alignment===s.TopCenter?t.Alignment.topCenter:this.alignment===s.TopRight?t.Alignment.topRight:this.alignment===s.CenterLeft?t.Alignment.centerLeft:this.alignment===s.CenterRight?t.Alignment.centerRight:this.alignment===s.BottomLeft?t.Alignment.bottomLeft:this.alignment===s.BottomCenter?t.Alignment.bottomCenter:this.alignment===s.BottomRight?t.Alignment.bottomRight:t.Alignment.center,this.cachedRuntimeAlignment=e,e);var e},t}(),p=function(){function t(){}return t.loadRuntime=function(){a.default({locateFile:function(){return t.wasmURL}}).then((function(e){var i;for(t.runtime=e;t.callBackQueue.length>0;)null===(i=t.callBackQueue.shift())||void 0===i||i(t.runtime)})).catch((function(){var e="https://cdn.jsdelivr.net/npm/".concat(o.name,"@").concat(o.version,"/rive_fallback.wasm");t.wasmURL.toLowerCase()!==e?(console.warn("Failed to load WASM from ".concat(t.wasmURL,", trying jsdelivr as a backup")),t.setWasmUrl(e),t.loadRuntime()):console.error("Could not load Rive WASM file from unpkg or jsdelivr, network connection may be down, or         you may need to call set a new WASM source via RuntimeLoader.setWasmUrl() and call         RuntimeLoader.loadRuntime() again")}))},t.getInstance=function(e){t.isLoading||(t.isLoading=!0,t.loadRuntime()),t.runtime?e(t.runtime):t.callBackQueue.push(e)},t.awaitInstance=function(){return new Promise((function(e){return t.getInstance((function(t){return e(t)}))}))},t.setWasmUrl=function(e){t.wasmURL=e},t.isLoading=!1,t.callBackQueue=[],t.wasmURL="https://unpkg.com/".concat(o.name,"@").concat(o.version,"/rive.wasm"),t}();!function(t){t[t.Number=56]="Number",t[t.Trigger=58]="Trigger",t[t.Boolean=59]="Boolean"}(u||(u={}));var g,f=function(){function t(t,e){this.type=t,this.runtimeInput=e}return Object.defineProperty(t.prototype,"name",{get:function(){return this.runtimeInput.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.runtimeInput.value},set:function(t){this.runtimeInput.value=t},enumerable:!1,configurable:!0}),t.prototype.fire=function(){this.type===u.Trigger&&this.runtimeInput.fire()},t}();!function(t){t[t.General=128]="General",t[t.OpenUrl=131]="OpenUrl"}(g||(g={}));var v,b,w=function(){function t(t,e,i,n){this.stateMachine=t,this.playing=i,this.artboard=n,this.inputs=[],this.instance=new e.StateMachineInstance(t,n),this.initInputs(e)}return Object.defineProperty(t.prototype,"name",{get:function(){return this.stateMachine.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"statesChanged",{get:function(){for(var t=[],e=0;e<this.instance.stateChangedCount();e++)t.push(this.instance.stateChangedNameByIndex(e));return t},enumerable:!1,configurable:!0}),t.prototype.advance=function(t){this.instance.advance(t)},t.prototype.reportedEventCount=function(){return this.instance.reportedEventCount()},t.prototype.reportedEventAt=function(t){return this.instance.reportedEventAt(t)},t.prototype.initInputs=function(t){for(var e=0;e<this.instance.inputCount();e++){var i=this.instance.input(e);this.inputs.push(this.mapRuntimeInput(i,t))}},t.prototype.mapRuntimeInput=function(t,e){return t.type===e.SMIInput.bool?new f(u.Boolean,t.asBool()):t.type===e.SMIInput.number?new f(u.Number,t.asNumber()):t.type===e.SMIInput.trigger?new f(u.Trigger,t.asTrigger()):void 0},t.prototype.cleanup=function(){this.instance.delete()},t}(),y=function(){function t(t,e,i,n,s){void 0===n&&(n=[]),void 0===s&&(s=[]),this.runtime=t,this.artboard=e,this.eventManager=i,this.animations=n,this.stateMachines=s}return t.prototype.add=function(t,e,i){if(void 0===i&&(i=!0),0===(t=M(t)).length)this.animations.forEach((function(t){return t.playing=e})),this.stateMachines.forEach((function(t){return t.playing=e}));else for(var n=this.animations.map((function(t){return t.name})),s=this.stateMachines.map((function(t){return t.name})),a=0;a<t.length;a++){var o=n.indexOf(t[a]),c=s.indexOf(t[a]);if(o>=0||c>=0)o>=0?this.animations[o].playing=e:this.stateMachines[c].playing=e;else{var h=this.artboard.animationByName(t[a]);if(h){var l=new r.Animation(h,this.artboard,this.runtime,e);l.advance(0),l.apply(1),this.animations.push(l)}else{var d=this.artboard.stateMachineByName(t[a]);if(d){var u=new w(d,this.runtime,e,this.artboard);this.stateMachines.push(u)}}}}return i&&(e?this.eventManager.fire({type:v.Play,data:this.playing}):this.eventManager.fire({type:v.Pause,data:this.paused})),e?this.playing:this.paused},t.prototype.initLinearAnimations=function(t,e){for(var i=this.animations.map((function(t){return t.name})),n=0;n<t.length;n++){var s=i.indexOf(t[n]);if(s>=0)this.animations[s].playing=e;else{var a=this.artboard.animationByName(t[n]);if(a){var o=new r.Animation(a,this.artboard,this.runtime,e);o.advance(0),o.apply(1),this.animations.push(o)}}}},t.prototype.initStateMachines=function(t,e){for(var i=this.stateMachines.map((function(t){return t.name})),n=0;n<t.length;n++){var s=i.indexOf(t[n]);if(s>=0)this.stateMachines[s].playing=e;else{var a=this.artboard.stateMachineByName(t[n]);if(a){var o=new w(a,this.runtime,e,this.artboard);this.stateMachines.push(o)}else this.initLinearAnimations([t[n]],e)}}},t.prototype.play=function(t){return this.add(t,!0)},t.prototype.pause=function(t){return this.add(t,!1)},t.prototype.scrub=function(t,e){var i=this.animations.filter((function(e){return t.includes(e.name)}));return i.forEach((function(t){return t.scrubTo=e})),i.map((function(t){return t.name}))},Object.defineProperty(t.prototype,"playing",{get:function(){return this.animations.filter((function(t){return t.playing})).map((function(t){return t.name})).concat(this.stateMachines.filter((function(t){return t.playing})).map((function(t){return t.name})))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"paused",{get:function(){return this.animations.filter((function(t){return!t.playing})).map((function(t){return t.name})).concat(this.stateMachines.filter((function(t){return!t.playing})).map((function(t){return t.name})))},enumerable:!1,configurable:!0}),t.prototype.stop=function(t){var e=this,i=[];if(0===(t=M(t)).length)i=this.animations.map((function(t){return t.name})).concat(this.stateMachines.map((function(t){return t.name}))),this.animations.forEach((function(t){return t.cleanup()})),this.stateMachines.forEach((function(t){return t.cleanup()})),this.animations.splice(0,this.animations.length),this.stateMachines.splice(0,this.stateMachines.length);else{var n=this.animations.filter((function(e){return t.includes(e.name)}));n.forEach((function(t){t.cleanup(),e.animations.splice(e.animations.indexOf(t),1)}));var s=this.stateMachines.filter((function(e){return t.includes(e.name)}));s.forEach((function(t){t.cleanup(),e.stateMachines.splice(e.stateMachines.indexOf(t),1)})),i=n.map((function(t){return t.name})).concat(s.map((function(t){return t.name})))}return this.eventManager.fire({type:v.Stop,data:i}),i},Object.defineProperty(t.prototype,"isPlaying",{get:function(){return this.animations.reduce((function(t,e){return t||e.playing}),!1)||this.stateMachines.reduce((function(t,e){return t||e.playing}),!1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPaused",{get:function(){return!this.isPlaying&&(this.animations.length>0||this.stateMachines.length>0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return 0===this.animations.length&&0===this.stateMachines.length},enumerable:!1,configurable:!0}),t.prototype.atLeastOne=function(t,e){var i;return void 0===e&&(e=!0),0===this.animations.length&&0===this.stateMachines.length&&(this.artboard.animationCount()>0?this.add([i=this.artboard.animationByIndex(0).name],t,e):this.artboard.stateMachineCount()>0&&this.add([i=this.artboard.stateMachineByIndex(0).name],t,e)),i},t.prototype.handleLooping=function(){for(var t=0,e=this.animations.filter((function(t){return t.playing}));t<e.length;t++){var i=e[t];0===i.loopValue&&i.loopCount?(i.loopCount=0,this.stop(i.name)):1===i.loopValue&&i.loopCount?(this.eventManager.fire({type:v.Loop,data:{animation:i.name,type:b.Loop}}),i.loopCount=0):2===i.loopValue&&i.loopCount>1&&(this.eventManager.fire({type:v.Loop,data:{animation:i.name,type:b.PingPong}}),i.loopCount=0)}},t.prototype.handleStateChanges=function(){for(var t=[],e=0,i=this.stateMachines.filter((function(t){return t.playing}));e<i.length;e++){var n=i[e];t.push.apply(t,n.statesChanged)}t.length>0&&this.eventManager.fire({type:v.StateChange,data:t})},t.prototype.handleAdvancing=function(t){this.eventManager.fire({type:v.Advance,data:t})},t}();!function(t){t.Load="load",t.LoadError="loaderror",t.Play="play",t.Pause="pause",t.Stop="stop",t.Loop="loop",t.Draw="draw",t.Advance="advance",t.StateChange="statechange",t.RiveEvent="riveevent",t.AudioStatusChange="audiostatuschange"}(v||(v={})),function(t){t.OneShot="oneshot",t.Loop="loop",t.PingPong="pingpong"}(b||(b={}));var S,_=function(){function t(t){void 0===t&&(t=[]),this.listeners=t}return t.prototype.getListeners=function(t){return this.listeners.filter((function(e){return e.type===t}))},t.prototype.add=function(t){this.listeners.includes(t)||this.listeners.push(t)},t.prototype.remove=function(t){for(var e=0;e<this.listeners.length;e++){var i=this.listeners[e];if(i.type===t.type&&i.callback===t.callback){this.listeners.splice(e,1);break}}},t.prototype.removeAll=function(t){var e=this;t?this.listeners.filter((function(e){return e.type===t})).forEach((function(t){return e.remove(t)})):this.listeners.splice(0,this.listeners.length)},t.prototype.fire=function(t){this.getListeners(t.type).forEach((function(e){return e.callback(t)}))},t}(),E=function(){function t(t){this.eventManager=t,this.queue=[]}return t.prototype.add=function(t){this.queue.push(t)},t.prototype.process=function(){for(;this.queue.length>0;){var t=this.queue.shift();(null==t?void 0:t.action)&&t.action(),(null==t?void 0:t.event)&&this.eventManager.fire(t.event)}},t}();!function(t){t[t.AVAILABLE=0]="AVAILABLE",t[t.UNAVAILABLE=1]="UNAVAILABLE"}(S||(S={}));var I=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._started=!1,e._enabled=!1,e._status=S.UNAVAILABLE,e}return h(e,t),e.prototype.delay=function(t){return l(this,void 0,void 0,(function(){return d(this,(function(e){return[2,new Promise((function(e){return setTimeout(e,t)}))]}))}))},e.prototype.timeout=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){return[2,new Promise((function(t,e){return setTimeout(e,50)}))]}))}))},e.prototype.reportToListeners=function(){this.fire({type:v.AudioStatusChange}),this.removeAll()},e.prototype.enableAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){return this._enabled||(this._enabled=!0,this._status=S.AVAILABLE,this.reportToListeners()),[2]}))}))},e.prototype.testAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:if(this._status!==S.UNAVAILABLE||null===this._audioContext)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,Promise.race([this._audioContext.resume(),this.timeout()])];case 2:return t.sent(),this.enableAudio(),[3,4];case 3:return t.sent(),[3,4];case 4:return[2]}}))}))},e.prototype._establishAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){switch(t.label){case 0:return this._started?[3,5]:(this._started=!0,"undefined"!=typeof window?[3,1]:(this.enableAudio(),[3,5]));case 1:this._audioContext=new AudioContext,this.listenForUserAction(),t.label=2;case 2:return this._status!==S.UNAVAILABLE?[3,5]:[4,this.testAudio()];case 3:return t.sent(),[4,this.delay(1e3)];case 4:return t.sent(),[3,2];case 5:return[2]}}))}))},e.prototype.listenForUserAction=function(){var t=this;document.addEventListener("pointerdown",(function(){return l(t,void 0,void 0,(function(){return d(this,(function(t){return this.enableAudio(),[2]}))}))}),{once:!0})},e.prototype.establishAudio=function(){return l(this,void 0,void 0,(function(){return d(this,(function(t){return this._establishAudio(),[2]}))}))},Object.defineProperty(e.prototype,"systemVolume",{get:function(){return this._status===S.UNAVAILABLE?(this.testAudio(),0):1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!1,configurable:!0}),e}(_),A=new I,T=function(){function t(){}return t.prototype.observe=function(){},t.prototype.unobserve=function(){},t.prototype.disconnect=function(){},t}(),C=globalThis.ResizeObserver||T,x=new(function(){function t(){var t=this;this._elementsMap=new Map,this._onObservedEntry=function(e){var i=t._elementsMap.get(e.target);null!==i?i.onResize(0==e.target.clientWidth||0==e.target.clientHeight):t._resizeObserver.unobserve(e.target)},this._onObserved=function(e){e.forEach(t._onObservedEntry)},this._resizeObserver=new C(this._onObserved)}return t.prototype.add=function(t,e){var i={onResize:e,element:t};return this._elementsMap.set(t,i),this._resizeObserver.observe(t),i},t.prototype.remove=function(t){this._resizeObserver.unobserve(t.element),this._elementsMap.delete(t.element)},t}()),L=function(){function t(t){this.enableRiveAssetCDN=!0,this.referenceCount=0,this.src=t.src,this.buffer=t.buffer,t.assetLoader&&(this.assetLoader=t.assetLoader),this.enableRiveAssetCDN="boolean"!=typeof t.enableRiveAssetCDN||t.enableRiveAssetCDN,this.eventManager=new _,t.onLoad&&this.on(v.Load,t.onLoad),t.onLoadError&&this.on(v.LoadError,t.onLoadError)}return t.prototype.initData=function(){return l(this,void 0,void 0,(function(){var e,i,n;return d(this,(function(s){switch(s.label){case 0:return this.src?(e=this,[4,D(this.src)]):[3,2];case 1:e.buffer=s.sent(),s.label=2;case 2:return this.assetLoader&&(i=new this.runtime.CustomFileAssetLoader({loadContents:this.assetLoader})),n=this,[4,this.runtime.load(new Uint8Array(this.buffer),i,this.enableRiveAssetCDN)];case 3:if(n.file=s.sent(),null===this.file)throw this.eventManager.fire({type:v.LoadError,data:null}),new Error(t.fileLoadErrorMessage);return this.eventManager.fire({type:v.Load,data:this}),[2]}}))}))},t.prototype.init=function(){return l(this,void 0,void 0,(function(){var e;return d(this,(function(i){switch(i.label){case 0:if(!this.src&&!this.buffer)throw new Error(t.missingErrorMessage);return e=this,[4,p.awaitInstance()];case 1:return e.runtime=i.sent(),[4,this.initData()];case 2:return i.sent(),[2]}}))}))},t.prototype.on=function(t,e){this.eventManager.add({type:t,callback:e})},t.prototype.off=function(t,e){this.eventManager.remove({type:t,callback:e})},t.prototype.cleanup=function(){var t;this.referenceCount-=1,this.referenceCount<=0&&(this.removeAllRiveEventListeners(),null===(t=this.file)||void 0===t||t.delete())},t.prototype.removeAllRiveEventListeners=function(t){this.eventManager.removeAll(t)},t.prototype.getInstance=function(){if(null!==this.file)return this.referenceCount+=1,this.file},t.missingErrorMessage="Rive source file or data buffer required",t.fileLoadErrorMessage="The file failed to load",t}(),P=function(){function t(t){var e,i=this;this.loaded=!1,this.readyForPlaying=!1,this.artboard=null,this.eventCleanup=null,this.shouldDisableRiveListeners=!1,this.automaticallyHandleEvents=!1,this.enableRiveAssetCDN=!0,this._volume=1,this._hasZeroSize=!1,this.durations=[],this.frameTimes=[],this.frameCount=0,this.isTouchScrollEnabled=!1,this.onCanvasResize=function(t){i._hasZeroSize=t,i._layout.maxX&&i._layout.maxY||i.resizeToCanvas()},this.renderSecondTimer=0,this.canvas=t.canvas,t.canvas.constructor===HTMLCanvasElement&&(this._observed=x.add(this.canvas,this.onCanvasResize)),this.src=t.src,this.buffer=t.buffer,this.riveFile=t.riveFile,this.layout=null!==(e=t.layout)&&void 0!==e?e:new m,this.shouldDisableRiveListeners=!!t.shouldDisableRiveListeners,this.isTouchScrollEnabled=!!t.isTouchScrollEnabled,this.automaticallyHandleEvents=!!t.automaticallyHandleEvents,this.enableRiveAssetCDN=void 0===t.enableRiveAssetCDN||t.enableRiveAssetCDN,this.eventManager=new _,t.onLoad&&this.on(v.Load,t.onLoad),t.onLoadError&&this.on(v.LoadError,t.onLoadError),t.onPlay&&this.on(v.Play,t.onPlay),t.onPause&&this.on(v.Pause,t.onPause),t.onStop&&this.on(v.Stop,t.onStop),t.onLoop&&this.on(v.Loop,t.onLoop),t.onStateChange&&this.on(v.StateChange,t.onStateChange),t.onAdvance&&this.on(v.Advance,t.onAdvance),t.onload&&!t.onLoad&&this.on(v.Load,t.onload),t.onloaderror&&!t.onLoadError&&this.on(v.LoadError,t.onloaderror),t.onplay&&!t.onPlay&&this.on(v.Play,t.onplay),t.onpause&&!t.onPause&&this.on(v.Pause,t.onpause),t.onstop&&!t.onStop&&this.on(v.Stop,t.onstop),t.onloop&&!t.onLoop&&this.on(v.Loop,t.onloop),t.onstatechange&&!t.onStateChange&&this.on(v.StateChange,t.onstatechange),t.assetLoader&&(this.assetLoader=t.assetLoader),this.taskQueue=new E(this.eventManager),this.init({src:this.src,buffer:this.buffer,riveFile:this.riveFile,autoplay:t.autoplay,animations:t.animations,stateMachines:t.stateMachines,artboard:t.artboard,useOffscreenRenderer:t.useOffscreenRenderer})}return t.new=function(e){return console.warn("This function is deprecated: please use `new Rive({})` instead"),new t(e)},t.prototype.onSystemAudioChanged=function(){this.volume=this._volume},t.prototype.init=function(e){var i=this,n=e.src,s=e.buffer,a=e.riveFile,o=e.animations,r=e.stateMachines,c=e.artboard,h=e.autoplay,l=void 0!==h&&h,d=e.useOffscreenRenderer,u=void 0!==d&&d;if(this.src=n,this.buffer=s,this.riveFile=a,!this.src&&!this.buffer&&!this.riveFile)throw new Error(t.missingErrorMessage);var m=M(o),g=M(r);this.loaded=!1,this.readyForPlaying=!1,p.awaitInstance().then((function(t){i.runtime=t,i.renderer=i.runtime.makeRenderer(i.canvas,u),i.canvas.width||i.canvas.height||i.resizeDrawingSurfaceToCanvas(),i.initData(c,m,g,l).then((function(){return i.setupRiveListeners()})).catch((function(t){console.error(t)}))})).catch((function(t){console.error(t)}))},t.prototype.setupRiveListeners=function(t){var e=this;if(!this.shouldDisableRiveListeners){var i=(this.animator.stateMachines||[]).filter((function(t){return t.playing&&e.runtime.hasListeners(t.instance)})).map((function(t){return t.instance})),n=this.isTouchScrollEnabled;t&&"isTouchScrollEnabled"in t&&(n=t.isTouchScrollEnabled),this.eventCleanup=(0,c.registerTouchInteractions)({canvas:this.canvas,artboard:this.artboard,stateMachines:i,renderer:this.renderer,rive:this.runtime,fit:this._layout.runtimeFit(this.runtime),alignment:this._layout.runtimeAlignment(this.runtime),isTouchScrollEnabled:n})}},t.prototype.removeRiveListeners=function(){this.eventCleanup&&this.eventCleanup()},t.prototype.initializeAudio=function(){var t,e=this;A.status==S.UNAVAILABLE&&(null===(t=this.artboard)||void 0===t?void 0:t.hasAudio)&&(A.add({type:v.AudioStatusChange,callback:function(){return e.onSystemAudioChanged()}}),A.establishAudio())},t.prototype.initData=function(t,e,i,n){var s;return l(this,void 0,void 0,(function(){var a;return d(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),null!=this.riveFile?[3,2]:(this.riveFile=new L({src:this.src,buffer:this.buffer,enableRiveAssetCDN:this.enableRiveAssetCDN,assetLoader:this.assetLoader}),[4,this.riveFile.init()]);case 1:o.sent(),o.label=2;case 2:return this.file=this.riveFile.getInstance(),this.initArtboard(t,e,i,n),this.initializeAudio(),this.loaded=!0,this.eventManager.fire({type:v.Load,data:null!==(s=this.src)&&void 0!==s?s:"buffer"}),this.readyForPlaying=!0,this.taskQueue.process(),this.drawFrame(),[2,Promise.resolve()];case 3:return o.sent(),a="Problem loading file; may be corrupt!",console.warn(a),this.eventManager.fire({type:v.LoadError,data:a}),[2,Promise.reject(a)];case 4:return[2]}}))}))},t.prototype.initArtboard=function(t,e,i,n){if(this.file){var s,a=t?this.file.artboardByName(t):this.file.defaultArtboard();if(!a){var o="Invalid artboard name or no default artboard";return console.warn(o),void this.eventManager.fire({type:v.LoadError,data:o})}if(this.artboard=a,a.volume=this._volume*A.systemVolume,this.artboard.animationCount()<1)throw o="Artboard has no animations",this.eventManager.fire({type:v.LoadError,data:o}),o;this.animator=new y(this.runtime,this.artboard,this.eventManager),e.length>0||i.length>0?(s=e.concat(i),this.animator.initLinearAnimations(e,n),this.animator.initStateMachines(i,n)):s=[this.animator.atLeastOne(n,!1)],this.taskQueue.add({event:{type:n?v.Play:v.Pause,data:s}})}},t.prototype.drawFrame=function(){this.startRendering()},t.prototype.draw=function(t,e){this.frameRequestId=null;var i=performance.now();this.lastRenderTime||(this.lastRenderTime=t),this.renderSecondTimer+=t-this.lastRenderTime,this.renderSecondTimer>5e3&&(this.renderSecondTimer=0,null==e||e());var n=(t-this.lastRenderTime)/1e3;this.lastRenderTime=t;for(var s=0,a=this.animator.animations.filter((function(t){return t.playing||t.needsScrub})).sort((function(t){return t.needsScrub?-1:1}));s<a.length;s++){var o=a[s];o.advance(n),o.instance.didLoop&&(o.loopCount+=1),o.apply(1)}for(var r=0,h=this.animator.stateMachines.filter((function(t){return t.playing}));r<h.length;r++){var l=h[r],d=l.reportedEventCount();if(d)for(var u=0;u<d;u++){var m=l.reportedEventAt(u);if(m)if(m.type===g.OpenUrl){if(this.eventManager.fire({type:v.RiveEvent,data:m}),this.automaticallyHandleEvents){var p=document.createElement("a"),f=m,b=f.url,w=f.target,y=(0,c.sanitizeUrl)(b);b&&p.setAttribute("href",y),w&&p.setAttribute("target",w),y&&y!==c.BLANK_URL&&p.click()}}else this.eventManager.fire({type:v.RiveEvent,data:m})}l.advance(n)}this.artboard.advance(n);var S=this.renderer;S.clear(),S.save(),this.alignRenderer(),this._hasZeroSize||this.artboard.draw(S),S.restore(),S.flush(),this.animator.handleLooping(),this.animator.handleStateChanges(),this.animator.handleAdvancing(n),this.frameCount++;var _=performance.now();for(this.frameTimes.push(_),this.durations.push(_-i);this.frameTimes[0]<=_-1e3;)this.frameTimes.shift(),this.durations.shift();this.animator.isPlaying?this.startRendering():(this.animator.isPaused||this.animator.isStopped)&&(this.lastRenderTime=0)},t.prototype.alignRenderer=function(){var t=this,e=t.renderer,i=t.runtime,n=t._layout,s=t.artboard;e.align(n.runtimeFit(i),n.runtimeAlignment(i),{minX:n.minX,minY:n.minY,maxX:n.maxX,maxY:n.maxY},s.bounds)},Object.defineProperty(t.prototype,"fps",{get:function(){return this.durations.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"frameTime",{get:function(){return 0===this.durations.length?0:(this.durations.reduce((function(t,e){return t+e}),0)/this.durations.length).toFixed(4)},enumerable:!1,configurable:!0}),t.prototype.cleanup=function(){var t;this.stopRendering(),this.cleanupInstances(),null!==this._observed&&x.remove(this._observed),null===(t=this.riveFile)||void 0===t||t.cleanup(),this.riveFile=null,this.file=null},t.prototype.deleteRiveRenderer=function(){var t;null===(t=this.renderer)||void 0===t||t.delete(),this.renderer=null},t.prototype.cleanupInstances=function(){null!==this.eventCleanup&&this.eventCleanup(),this.stop(),this.artboard&&(this.artboard.delete(),this.artboard=null)},t.prototype.retrieveTextRun=function(t){var e;if(t)if(this.artboard){var i=this.artboard.textRun(t);if(i)return i;console.warn("Could not access a text run with name '".concat(t,"' in the '").concat(null===(e=this.artboard)||void 0===e?void 0:e.name,"' Artboard. Note that you must rename a text run node in the Rive editor to make it queryable at runtime."))}else console.warn("Tried to access text run, but the Artboard is null");else console.warn("No text run name provided")},t.prototype.getTextRunValue=function(t){var e=this.retrieveTextRun(t);return e?e.text:void 0},t.prototype.setTextRunValue=function(t,e){var i=this.retrieveTextRun(t);i&&(i.text=e)},t.prototype.play=function(t,e){var i=this;t=M(t),this.readyForPlaying?(this.animator.play(t),this.eventCleanup&&this.eventCleanup(),this.setupRiveListeners(),this.startRendering()):this.taskQueue.add({action:function(){return i.play(t,e)}})},t.prototype.pause=function(t){var e=this;t=M(t),this.readyForPlaying?(this.eventCleanup&&this.eventCleanup(),this.animator.pause(t)):this.taskQueue.add({action:function(){return e.pause(t)}})},t.prototype.scrub=function(t,e){var i=this;t=M(t),this.readyForPlaying?(this.animator.scrub(t,e||0),this.drawFrame()):this.taskQueue.add({action:function(){return i.scrub(t,e)}})},t.prototype.stop=function(t){var e=this;t=M(t),this.readyForPlaying?(this.animator.stop(t),this.eventCleanup&&this.eventCleanup()):this.taskQueue.add({action:function(){return e.stop(t)}})},t.prototype.reset=function(t){var e,i=null==t?void 0:t.artboard,n=M(null==t?void 0:t.animations),s=M(null==t?void 0:t.stateMachines),a=null!==(e=null==t?void 0:t.autoplay)&&void 0!==e&&e;this.cleanupInstances(),this.initArtboard(i,n,s,a),this.taskQueue.process()},t.prototype.load=function(t){this.file=null,this.stop(),this.init(t)},Object.defineProperty(t.prototype,"layout",{get:function(){return this._layout},set:function(t){this._layout=t,t.maxX&&t.maxY||this.resizeToCanvas(),this.loaded&&!this.animator.isPlaying&&this.drawFrame()},enumerable:!1,configurable:!0}),t.prototype.resizeToCanvas=function(){this._layout=this.layout.copyWith({minX:0,minY:0,maxX:this.canvas.width,maxY:this.canvas.height})},t.prototype.resizeDrawingSurfaceToCanvas=function(t){if(this.canvas instanceof HTMLCanvasElement&&window){var e=this.canvas.getBoundingClientRect(),i=e.width,n=e.height,s=t||window.devicePixelRatio||1;this.canvas.width=s*i,this.canvas.height=s*n,this.startRendering(),this.resizeToCanvas()}},Object.defineProperty(t.prototype,"source",{get:function(){return this.src},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"activeArtboard",{get:function(){return this.artboard?this.artboard.name:""},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"animationNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var t=[],e=0;e<this.artboard.animationCount();e++)t.push(this.artboard.animationByIndex(e).name);return t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateMachineNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var t=[],e=0;e<this.artboard.stateMachineCount();e++)t.push(this.artboard.stateMachineByIndex(e).name);return t},enumerable:!1,configurable:!0}),t.prototype.stateMachineInputs=function(t){if(this.loaded){var e=this.animator.stateMachines.find((function(e){return e.name===t}));return null==e?void 0:e.inputs}},t.prototype.retrieveInputAtPath=function(t,e){if(t)if(this.artboard){var i=this.artboard.inputByPath(t,e);if(i)return i;console.warn("Could not access an input with name: '".concat(t,"', at path:'").concat(e,"'"))}else console.warn("Tried to access input: '".concat(t,"', at path: '").concat(e,"', but the Artboard is null"));else console.warn("No input name provided for path '".concat(e,"'"))},t.prototype.setBooleanStateAtPath=function(t,e,i){var n=this.retrieveInputAtPath(t,i);n&&(n.type===u.Boolean?n.asBool().value=e:console.warn("Input with name: '".concat(t,"', at path:'").concat(i,"' is not a boolean")))},t.prototype.setNumberStateAtPath=function(t,e,i){var n=this.retrieveInputAtPath(t,i);n&&(n.type===u.Number?n.asNumber().value=e:console.warn("Input with name: '".concat(t,"', at path:'").concat(i,"' is not a number")))},t.prototype.fireStateAtPath=function(t,e){var i=this.retrieveInputAtPath(t,e);i&&(i.type===u.Trigger?i.asTrigger().fire():console.warn("Input with name: '".concat(t,"', at path:'").concat(e,"' is not a trigger")))},t.prototype.retrieveTextAtPath=function(t,e){if(t)if(e)if(this.artboard){var i=this.artboard.textByPath(t,e);if(i)return i;console.warn("Could not access text with name: '".concat(t,"', at path:'").concat(e,"'"))}else console.warn("Tried to access text: '".concat(t,"', at path: '").concat(e,"', but the Artboard is null"));else console.warn("No path provided for text '".concat(t,"'"));else console.warn("No text name provided for path '".concat(e,"'"))},t.prototype.getTextRunValueAtPath=function(t,e){var i=this.retrieveTextAtPath(t,e);if(i)return i.text;console.warn("Could not get text with name: '".concat(t,"', at path:'").concat(e,"'"))},t.prototype.setTextRunValueAtPath=function(t,e,i){var n=this.retrieveTextAtPath(t,i);n?n.text=e:console.warn("Could not set text with name: '".concat(t,"', at path:'").concat(i,"'"))},Object.defineProperty(t.prototype,"playingStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(t){return t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"playingAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(t){return t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pausedAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(t){return!t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pausedStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(t){return!t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPlaying",{get:function(){return this.animator.isPlaying},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPaused",{get:function(){return this.animator.isPaused},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return this.animator.isStopped},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bounds",{get:function(){return this.artboard?this.artboard.bounds:void 0},enumerable:!1,configurable:!0}),t.prototype.on=function(t,e){this.eventManager.add({type:t,callback:e})},t.prototype.off=function(t,e){this.eventManager.remove({type:t,callback:e})},t.prototype.unsubscribe=function(t,e){console.warn("This function is deprecated: please use `off()` instead."),this.off(t,e)},t.prototype.removeAllRiveEventListeners=function(t){this.eventManager.removeAll(t)},t.prototype.unsubscribeAll=function(t){console.warn("This function is deprecated: please use `removeAllRiveEventListeners()` instead."),this.removeAllRiveEventListeners(t)},t.prototype.stopRendering=function(){this.loaded&&this.frameRequestId&&(this.runtime.cancelAnimationFrame?this.runtime.cancelAnimationFrame(this.frameRequestId):cancelAnimationFrame(this.frameRequestId),this.frameRequestId=null)},t.prototype.startRendering=function(){this.loaded&&this.artboard&&!this.frameRequestId&&(this.runtime.requestAnimationFrame?this.frameRequestId=this.runtime.requestAnimationFrame(this.draw.bind(this)):this.frameRequestId=requestAnimationFrame(this.draw.bind(this)))},t.prototype.enableFPSCounter=function(t){this.runtime.enableFPSCounter(t)},t.prototype.disableFPSCounter=function(){this.runtime.disableFPSCounter()},Object.defineProperty(t.prototype,"contents",{get:function(){if(this.loaded){for(var t={artboards:[]},e=0;e<this.file.artboardCount();e++){for(var i=this.file.artboardByIndex(e),n={name:i.name,animations:[],stateMachines:[]},s=0;s<i.animationCount();s++){var a=i.animationByIndex(s);n.animations.push(a.name)}for(var o=0;o<i.stateMachineCount();o++){for(var r=i.stateMachineByIndex(o),c=r.name,h=new this.runtime.StateMachineInstance(r,i),l=[],d=0;d<h.inputCount();d++){var u=h.input(d);l.push({name:u.name,type:u.type})}n.stateMachines.push({name:c,inputs:l})}t.artboards.push(n)}return t}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"volume",{get:function(){return this.artboard&&this.artboard.volume!==this._volume&&(this._volume=this.artboard.volume),this._volume},set:function(t){this._volume=t,this.artboard&&(this.artboard.volume=t*A.systemVolume)},enumerable:!1,configurable:!0}),t.missingErrorMessage="Rive source file or data buffer required",t}(),D=function(t){return l(void 0,void 0,void 0,(function(){var e;return d(this,(function(i){switch(i.label){case 0:return e=new Request(t),[4,fetch(e)];case 1:return[4,i.sent().arrayBuffer()];case 2:return[2,i.sent()]}}))}))},M=function(t){return"string"==typeof t?[t]:t instanceof Array?t:[]},k={EventManager:_,TaskQueueManager:E},B=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeAudio(t,e)}))}))},O=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeImage(t,e)}))}))},N=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeFont(t,e)}))}))}})(),n})(),t.exports=e()},"./src/Firebase/base-firebase-integration.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{BaseFirebaseIntegration:()=>o});var n=i("./node_modules/firebase/app/dist/esm/index.esm.js"),s=i("./node_modules/firebase/analytics/dist/esm/index.esm.js"),a=i("./src/Firebase/firebase-config.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(t,e){try{(0,s.logEvent)(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,s.logEvent)(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}initializeFirebase(){try{this.firebaseApp=(0,n.initializeApp)(a.firebaseConfig),this.analytics=(0,s.getAnalytics)(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}},"./src/Firebase/firebase-config.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{firebaseConfig:()=>n});const n={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FirebaseIntegration:()=>s});var n=i("./src/Firebase/base-firebase-integration.ts");class s extends n.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return s.instance||(s.instance=new s),s.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}},"./src/common/event-names.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CLICK:()=>d,LOADPUZZLE:()=>n,MOUSEDOWN:()=>o,MOUSEMOVE:()=>a,MOUSEUP:()=>r,STONEDROP:()=>s,TOUCHEND:()=>l,TOUCHMOVE:()=>h,TOUCHSTART:()=>c,VISIBILITY_CHANGE:()=>u});const n="loadpuzzle",s="stonesdropped",a="mousemove",o="mousedown",r="mouseup",c="touchstart",h="touchmove",l="touchend",d="click",u="visibilitychange"},"./src/common/global-variables.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Debugger:()=>h,font:()=>c,lang:()=>r,pseudoId:()=>o});var n=i("./src/constants/index.ts"),s=i("./src/common/index.ts");const a=new URLSearchParams(window.location.search);var o=a.get("cr_user_id"),r=null==a.get("cr_lang")?"english":a.get("cr_lang");const c=s.Utils.getLanguageSpecificFont(r),h={DevelopmentLink:!!window.location.href.includes(n.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CLICK:()=>o.CLICK,Debugger:()=>a.Debugger,LOADPUZZLE:()=>o.LOADPUZZLE,MOUSEDOWN:()=>o.MOUSEDOWN,MOUSEMOVE:()=>o.MOUSEMOVE,MOUSEUP:()=>o.MOUSEUP,STONEDROP:()=>o.STONEDROP,StoneConfig:()=>n.StoneConfig,TOUCHEND:()=>o.TOUCHEND,TOUCHMOVE:()=>o.TOUCHMOVE,TOUCHSTART:()=>o.TOUCHSTART,Utils:()=>s.Utils,VISIBILITY_CHANGE:()=>o.VISIBILITY_CHANGE,createRippleEffect:()=>s.createRippleEffect,font:()=>a.font,hideElement:()=>s.hideElement,isClickInsideButton:()=>s.isClickInsideButton,isDocumentVisible:()=>s.isDocumentVisible,lang:()=>a.lang,loadImages:()=>s.loadImages,pseudoId:()=>a.pseudoId,syncLoadingImages:()=>s.syncLoadingImages,toggleDebugMode:()=>s.toggleDebugMode});var n=i("./src/common/stone-config.ts"),s=i("./src/common/utils.ts"),a=i("./src/common/global-variables.ts"),o=i("./src/common/event-names.ts")},"./src/common/stone-config.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{StoneConfig:()=>s});var n=i("./src/common/index.ts");class s{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,i,n,s,a,o,r,c){this.x=s,this.y=a,this.origx=s,this.origy=a,this.canvasWidth=e,this.canvasHeight=i,this.tutorialInstance=c,this.text=n,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,i,n)=>-i/2*(Math.cos(Math.PI*t/n)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);adjustSize(t,e){return t?1.25*e:e}draw(t,e=!1){const i=this.getX()-this.adjustSize(e,this.imageCenterOffsetX),s=this.getY()-this.adjustSize(e,this.imageCenterOffsetY);this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,i,s,this.adjustSize(e,this.imageSize),this.adjustSize(e,this.imageSize)),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${n.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}},"./src/common/utils.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Utils:()=>a,createRippleEffect:()=>o,hideElement:()=>u,isClickInsideButton:()=>h,isDocumentVisible:()=>l,loadImages:()=>r,syncLoadingImages:()=>c,toggleDebugMode:()=>d});var n=i("./src/common/index.ts"),s=i("./src/data/i18-font-mapping.ts");class a{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return n.Debugger.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in s.languageFontMapping)if(t.toLowerCase()===e)return s.languageFontMapping[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function o(t){const e=t;if(!e)throw new Error("Canvas context is null");let i=0,n=0;let s=10,a=10;return function(t,o,r){r&&(s=0,a=0),i=t,n=o,e.beginPath(),e.arc(i,n,s,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(i,n,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),s+=.5,a+=.5,(s>=60||a>=60)&&(s=10,a=10)}}function r(t,e){const i={};let n=0;const s=Object.keys(t).length;for(let a in t)i[a]=new Image,i[a].onload=function(){++n>=s&&e(i)},i[a].src=t[a]}const c=async t=>{const e=Object.keys(t).map((async e=>{const i=await(async t=>{const e=new Image;return new Promise((i=>{e.onload=()=>i(e),e.src=t}))})(t[e]);return{[e]:i}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})};function h(t,e,i,n,s,a,o=!1){if(o){return Math.sqrt((t-(i+s/2))**2+(e-(n+a/2))**2)<s/2}return t>=i&&t<=i+s&&e>=n&&e<=n+a}const l=()=>"visible"===document.visibilityState,d=t=>{t.classList.toggle("on");const e=t.classList.contains("on");n.Debugger.DebugMode=e,t.innerText="Dev"},u=(t=!1,e)=>{t?e.classList.remove("show"):e.classList.add("show")}},"./src/components/audio-player.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{AudioPlayer:()=>s});var n=i("./src/constants/index.ts");class s{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=a.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const t=n.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(t),s.audioBuffers.set(t,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(t){return void console.error("Error loading or decoding click sound:",t)}if(this.clickSoundBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.clickSoundBuffer,t.connect(this.audioContext.destination),t.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(t){return new Promise((async(e,i)=>{try{const i=await fetch(t),n=await i.arrayBuffer();e(await this.audioContext.decodeAudioData(n))}catch(t){console.error("Error loading or decoding audio:",t),i(t)}}))}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(s.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&s.audioBuffers.set(t,e)}playAudio(t){const e=s.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((i=>{this.audioContext?.decodeAudioData(i,(i=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=i,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)}}class a{static instance=null;static getAudioContext(){return a.instance||(a.instance=new(window.AudioContext||window.webkitAudioContext)),a.instance}}},"./src/components/background.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Background:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a={bgImg:s.DEFAULT_BACKGROUND_1,hillImg:s.ASSETS_PATH_HILL,pillerImg:s.ASSETS_PATH_TOTEM,fenchImg:s.ASSETS_PATH_FENCE,autumnBgImg:s.AUTUMN_BACKGROUND_1,autumnHillImg:s.AUTUMN_HILL_1,autumnPillerImg:s.AUTUMN_PILLAR_1,autumnSignImg:s.AUTUMN_SIGN_1,autumnFenceImg:s.AUTUMN_FENCE_1,winterBgImg:s.WINTER_BACKGROUND_1,winterHillImg:s.WINTER_HILL_1,winterSignImg:s.WINTER_SIGN_1,winterFenceImg:s.WINTER_FENCE_1,winterPillerImg:s.WINTER_PILLAR_1};class o{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,e,i,s){this.width=e,this.height=i,this.context=t,this.levelNumber=s,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,n.loadImages)(a,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,(0,n.loadImages)({cancel_button_image:s.CANCEL_BTN_IMG},(t=>{this.cancel_button_image=t.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/close-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i,this.posY=a,this.context=t,this.canvas=e,(0,n.loadImages)({close_button_image:s.MAP_BTN_IMG},(t=>{this.close_button_image=t.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:a}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{CancelButton:()=>s.default,CloseButton:()=>n.default,LevelBloonButton:()=>d.default,NextButton:()=>a.default,NoButton:()=>o.default,PauseButton:()=>r.default,PlayButton:()=>l.default,RetryButton:()=>c.default,YesButton:()=>h.default});var n=i("./src/components/buttons/close-button.ts"),s=i("./src/components/buttons/cancel-button.ts"),a=i("./src/components/buttons/next-button.ts"),o=i("./src/components/buttons/no-button.ts"),r=i("./src/components/buttons/pause-button.ts"),c=i("./src/components/buttons/retry-button.ts"),h=i("./src/components/buttons/yes-button.ts"),l=i("./src/components/buttons/play-button.ts"),d=i("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(t,e,i){this.context=e,this.levelData=i,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=t.height/5,this.radiusOffSet=t.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=t.height/13,this.textFontSize=this.size/6}isSpecialLevel(t){return s.SPECIAL_LEVELS.includes(t)}isLevelSpecial(t){return this.levelData?.isSpecial?.9*t:t}draw(t,e,i,s){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${n.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+t}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${n.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(t,e,i,s)}applyPulseEffect(){const t=.7,e=Date.now()%1500/1500,i=e<=t,n=i?e/t:(e-t)/(i?t:.30000000000000004),s=i?15*n:15+45*n,a=i?.5*(1-n):0;if(a<=0)return;const{x:o,y:r,radius:c}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},h=this.posX+this.btnSize/o,l=this.posY+this.btnSize/r,d=this.btnSize/c+s;this.context.save(),this.context.beginPath(),this.context.arc(h,l,d,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${a})`,this.context.fill(),this.context.restore()}drawIcons(t,e,i,s){const a=this.levelData.index;if(n.Debugger.DebugMode||a+t-1>e+1&&this.drawLock(),i.length&&a+t<=s)for(let e=0;e<i.length;e++)if(a-1+t===parseInt(i[e].levelNumber)){this.checkStars(i[e].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(t){const e=this.levelData.x,i=this.levelData.y,n=this.size;t>=1&&this.drawStar(e,i-.01*n),t>1&&this.drawStar(e+n/2.5,i-.01*n),3===t&&this.drawStar(e+n/5,i-.1*n)}drawStar(t,e){this.context.drawImage(this.levelData?.starImg,t,e,this.size/5,this.size/5)}onClick(t,e,i,s,a){Math.sqrt((t-this.levelData.x-this.radiusOffSet)*(t-this.levelData.x-this.radiusOffSet)+(e-this.levelData.y-this.radiusOffSet)*(e-this.levelData.y-this.radiusOffSet))<45&&(n.Debugger.DebugMode||this.levelData.index+i<=s)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,a(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a,o){this.posX=a,this.posY=o,this.context=t,this.width=e,this.height=i,(0,n.loadImages)({next_button_image:s.NEXT_BTN_IMG},(t=>{this.next_button_image=t.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/no-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i+5,this.posY=a+10,this.context=t,this.canvas=e,(0,n.loadImages)({no_button_image:s.CANCEL_BTN_IMG},(t=>{this.no_button_image=t.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/pause-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a=i("./src/gameStateService/index.ts");class o{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,(0,n.loadImages)({pause_button_image:s.PAUSE_BTN_IMG},(t=>{this.pause_button_image=t.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9,a.default.publish(a.default.EVENTS.GAME_PAUSE_STATUS_EVENT,!0)),i}}},"./src/components/buttons/play-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("./src/constants/index.ts"),s=i("./src/Firebase/firebase-integration.ts"),a=i("./src/common/index.ts"),o=i("./src/data/index.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,i,o){this.posX=i,this.posY=o,this.context=t,this.canvas=e,this.firebaseIntegration=new s.FirebaseIntegration,this.init(),this.images={pause_button_image:n.PLAY_BTN_IMG},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await(0,o.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const i=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),i<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}},"./src/components/buttons/retry-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i,this.posY=a,this.context=t,this.canvas=e,(0,n.loadImages)({retry_button_image:s.RETRY_BTN_IMG},(t=>{this.retry_button_image=t.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:a}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/buttons/yes-button.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,a){this.posX=i-5,this.posY=a,this.context=t,this.canvas=e,(0,n.loadImages)({yes_button_image:s.YES_BTN_IMG},(t=>{this.yes_button_image=t.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=(0,n.isClickInsideButton)(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),i}}},"./src/components/feedback-text/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FeedbackTextEffects:()=>s});var n=i("./src/common/index.ts");class s{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(t){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=t,(0,n.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,n.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{AudioPlayer:()=>u.AudioPlayer,Background:()=>l.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>s.LevelIndicators,Monster:()=>c.Monster,PauseButton:()=>n.default,PromptText:()=>a.PromptText,StoneHandler:()=>o.default,TimerTicking:()=>h.TimerTicking,TrailEffect:()=>m.default,Tutorial:()=>r.Tutorial});var n=i("./src/components/buttons/pause-button.ts"),s=i("./src/components/level-indicator.ts"),a=i("./src/components/prompt-text.ts"),o=i("./src/components/stone-handler.ts"),r=i("./src/components/tutorial.ts"),c=i("./src/components/monster.ts"),h=i("./src/components/timer-ticking.ts"),l=i("./src/components/background.ts"),d=i("./src/components/feedback-text/index.ts"),u=i("./src/components/audio-player.ts"),m=i("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LevelIndicators:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a=i("./src/events/index.ts");class o extends a.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=i,this.images={level_indicator:s.LEVEL_INDICATOR,bar_empty:s.BAR_EMPTY,bar_full:s.BAR_FULL},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}},"./src/components/monster.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Monster:()=>a});var n=i("./src/events/index.ts"),s=i("./src/components/riveMonster/rive-monster-component.ts");class a extends n.EventManager{zindex;width;height;x;y;fps;canvasStack;canvasElement;context;game;monsterPhase;riveMonster;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canvasElement=document.getElementById("rivecanvas"),this.context=this.canvasElement.getContext("2d"),this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.initializeRiveMonster(),i&&i()}initializeRiveMonster(){this.riveMonster=new s.RiveMonsterComponent({canvas:this.canvasElement,autoplay:!0,fit:"contain",alignment:"topCenter",width:this.canvasElement.width,height:this.canvasElement.height,onLoad:()=>{this.riveMonster.play(s.RiveMonsterComponent.Animations.IDLE)}})}stopRiveMonster(){this.riveMonster&&(this.riveMonster.stop(),console.log("Rive Monster animation stopped."))}changeToDragAnimation(){this.riveMonster.play(s.RiveMonsterComponent.Animations.OPENING_MOUTH_EAT)}changeToEatAnimation(){this.riveMonster.play(s.RiveMonsterComponent.Animations.EAT_HAPPY)}changeToIdleAnimation(){this.riveMonster.play(s.RiveMonsterComponent.Animations.IDLE)}changeToSpitAnimation(){this.riveMonster.play(s.RiveMonsterComponent.Animations.EAT_DISGUST)}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.stopRiveMonster(),this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var n=i("./src/components/buttons/index.ts"),s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),o=i("./src/components/popups/sure-popup.ts"),r=i("./src/constants/index.ts"),c=i("./src/gameStateService/index.ts");class h{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,i,c,h){this.canvas=t,this.callback=e,this.gameplayData=h,this.switchToLevelSelection=i,this.reloadScene=c;const l=document.getElementById("canvas");this.context=l.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.cancelButton=new n.CancelButton(this.context,this.canvas),this.retryButton=new n.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new n.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,s.loadImages)({pop_up_image:r.POPUP_BG_IMG},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new o.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new o.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(s.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,a=t.clientY-i.top;this.cancelButton.onClick(n,a)&&(c.default.publish(c.default.EVENTS.GAME_PAUSE_STATUS_EVENT,!1),this.playClickSound(),this.callback()),this.retryButton.onClick(n,a)&&("english"==s.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(n,a)&&("english"==s.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==s.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==s.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(r.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(s.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>r});var n=i("./src/common/index.ts"),s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/constants/index.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,i){this.canvas=t,this.yesCallback=e,this.noCallback=i,this.context=this.canvas.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.yesButton=new a.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new a.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,n.loadImages)({pop_up_image:o.POPUP_BG_IMG},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(n.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.yesButton.onClick(n,s)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(n,s)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(n.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{PromptText:()=>r});var n=i("./src/events/index.ts"),s=i("./src/common/index.ts"),a=i("./src/components/index.ts"),o=i("./src/constants/index.ts");class r extends n.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;droppedStoneCount=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,i,n,o){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=n,this.rightToLeft=o,this.currentPromptText=i.prompt.promptText,this.currentPuzzleData=i,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.onClick(n,s)&&this.playSound()};getPromptAudioUrl=()=>s.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(s.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var i=this.calculateFont();const n=this.promptImageWidth,a=this.promptImageHeight;if(this.context.font=`${i}px ${s.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var o=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(o).width/2,e),this.context.fillStyle="black",this.context.fillText(o,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,a/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let i=this.targetStones.length-1;i>=0;i--)this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[i],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[i],t,e)),t=t+this.context.measureText(this.targetStones[i]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,a/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-n),e=.33*(this.height-a);this.context.drawImage(this.promptPlayButton,t,e,n/4,a/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,a/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),i=this.promptImageWidth,n=this.promptImageHeight;var a=this.calculateFont();this.context.font=`${a}px ${s.font}, monospace`;let o=this.width/2-this.context.measureText(this.currentPromptText).width/2,r=0;var c=this.currentPuzzleData.targetStones[0].split("");for(let s=0;s<t.length;s++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){c.includes(t[s])?(c=c.slice(1,c.length),this.context.fillStyle="red",this.context.fillText(t[s],o,e)):(this.context.fillStyle="black",this.context.fillText(t[s],o,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){if(this.targetStones.length!=this.currentPromptText.length){this.targetStones.length>s&&(this.context.fillStyle=this.droppedStoneCount>s||null==this.droppedStoneCount?"black":"red",this.context.fillText(this.targetStones[s],o+o/10,e));break}this.context.fillStyle=this.droppedStones>s||null==this.droppedStones?"black":"red",this.context.fillText(t[s],o,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4)}r=(this.context.measureText(t[s]).width+this.context.measureText(t[s+1]).width)/2,o+=r}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,i=(this.width-t)/2,n=(this.height-e)/5;this.context.drawImage(this.prompt_image,i,n,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.droppedStoneCount=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t,this.droppedStoneCount++}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,o.PROMPT_TEXT_BG),e=this.loadImage(this.promptPlayButton,o.PROMPT_PLAY_BUTTON);await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((i,n)=>{t.onload=()=>{i()},t.src=e,t.onerror=t=>{n(t)}}))}}},"./src/components/riveMonster/rive-monster-component.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{RiveMonsterComponent:()=>s});var n=i("./node_modules/@rive-app/canvas/rive.js");class s{props;riveInstance;src="./assets/monsterrive.riv";stateMachines="State Machine 1";static Animations={OPENING_MOUTH_EAT:"Opening Mouth Eat",EAT_HAPPY:"Eat Happy",IDLE:"Idle",EAT_DISGUST:"Eat Disgust"};constructor(t){this.props=t,this.riveInstance=new n.Rive({src:this.src,canvas:this.props.canvas,autoplay:this.props.autoplay,stateMachines:this.stateMachines,layout:new n.Layout({fit:n.Fit[this.props.fit||"Contain"],alignment:n.Alignment[this.props.alignment||"TopCenter"]}),onLoad:()=>{this.props.onLoad&&this.props.onLoad()}})}play(t){this.riveInstance&&this.riveInstance.play(t)}stop(){this.riveInstance&&this.riveInstance.stop()}onStateChange(t){this.riveInstance.stateMachine.inputs.forEach((e=>{e.onStateChange((e=>{t(e)}))}))}}},"./src/components/stone-handler.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>h});var n=i("./src/common/index.ts"),s=i("./src/events/index.ts"),a=i("./src/components/index.ts"),o=i("./src/data/index.ts"),r=i("./src/constants/index.ts"),c=i("./src/gameStateService/index.ts");class h extends s.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==o.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,i,s,o,h){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=i,this.levelData=s,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(r.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(o),this.puzzleStartTime=new Date,this.tutorial=new a.Tutorial(t,e.width,e.height,i),this.stonebg=new Image,this.stonebg.src=r.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new a.AudioPlayer,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new a.AudioPlayer,this.timerTickingInstance=h,document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.setGamePause=this.setGamePause.bind(this),c.default.subscribe(c.default.EVENTS.GAME_PAUSE_STATUS_EVENT,this.setGamePause)}createStones(t){const e=this.getFoilStones();for(let i=0;i<e.length;i++)e[i]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[i]),this.foilStones.push(new n.StoneConfig(this.context,this.canvas.width,this.canvas.height,e[i],this.stonePos[i][0],this.stonePos[i][1],t,this.timerTickingInstance,i==e.length-1?this.tutorial:null))}draw(t){for(let e=0;e<this.foilStones.length;e++)this.foilStones[e].draw(t);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}drawWordPuzzleLetters(t,e,i){for(let n=0;n<this.foilStones.length;n++)e(n)&&this.foilStones[n].draw(t,Object.keys(i).length>1&&void 0!==i[n]);this.foilStones.length>0&&this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){c.default.unsubscribe(c.default.EVENTS.GAME_PAUSE_STATUS_EVENT,this.setGamePause),document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,i=!1){const n=i?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,n,i,t),n}processLetterDropFeedbackAudio(t,e,i,n){if(e){(i?n===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,r.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?r.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=n.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(e),r.AUDIO_PATH_POINTS_ADD,n.Utils.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}resetStonePosition(t,e,i){const n=e,s=i;if(n&&s&&n.text&&"number"==typeof s.origx&&"number"==typeof s.origy){const e=50,i=t/2;n.x=n.text.length<=3&&s.origx<e&&s.origx<i?s.origx+25:s.origx,n.y=s.origy}return n}computeCursorDistance(t,e,i){return Math.sqrt((t-i.x)**2+(e-i.y)**2)}handlePickStoneUp(t,e){let i=null,n=0;for(let s of this.foilStones){if(this.computeCursorDistance(t,e,s)<=40){i=s,i.foilStoneIndex=n;break}n++}return i}handleHoveringToAnotherStone(t,e,i){let n=null,s=0;for(let a of this.foilStones){if(this.computeCursorDistance(t,e,a)<=40&&i(a.text,s)){n=a,n.foilStoneIndex=s;break}s++}return n}handleMovingStoneLetter(t,e,i){const n=t,s=this.canvas.getBoundingClientRect();return n.x=e-s.left,n.y=i-s.top,n}}},"./src/components/timer-ticking.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{TimerTicking:()=>r});var n=i("./src/common/index.ts"),s=i("./src/events/index.ts"),a=i("./src/components/index.ts"),o=i("./src/constants/index.ts");class r extends s.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=i,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new a.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:o.TIMER_EMPTY,rotating_clock:o.ROTATING_CLOCK,timer_full:o.TIMER_FULL},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(o.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>s});var n=i("./src/gameStateService/index.ts");class s{ctx;particles;mouse;isDiamond;clickTrailToggle;constructor(t){this.ctx=t.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1,this.clickTrailToggle=!1,this.trailToggleListener=this.trailToggleListener.bind(this),this.init()}init(){this.draw(),n.default.subscribe(n.default.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,this.trailToggleListener)}trailToggleListener(t){this.clickTrailToggle=t}draw(){this.drawTrail();let t=[];for(let e=0;e<this.particles.length;e++)this.particles[e].time<=this.particles[e].ttl&&t.push(this.particles[e]);this.particles=t}drawTrail(){for(let t=0;t<this.particles.length;t++)this.particles[t].update(),this.isDiamond=!this.isDiamond,this.particles[t].draw(this.isDiamond)}addTrailParticlesOnMove(t,e){this.clickTrailToggle&&(this.mouse.x=t,this.mouse.y=e,this.particles.push(new a(this.ctx,this.mouse)))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}clearTrailSubscription(){n.default.unsubscribe(n.default.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,this.trailToggleListener)}}class a{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(t,e){const i=this.determineValueByScreenWidth(30,15),n=this.determineValueByScreenWidth(30,15),s=this.determineValueByScreenWidth(3,.5),a=this.determineValueByScreenWidth(2,.5);this.ctx=t,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:e.x+this.getRandomInt(-i,i),y:e.y+this.getRandomInt(-n,n),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-s,s),y:this.start.y+this.getRandomInt(-a,a)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(t,e){return window.screen.width>768?t:e}update(){if(this.time<=this.ttl){const t=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(t)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(t){t?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(t,e){return Math.round(Math.random()*(e-t))+t}easeOutQuart(t){return 1-Math.pow(1-t,4)}}},"./src/components/tutorial.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Tutorial:()=>o});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts"),a=i("./src/data/index.ts");class o{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,i,a){this.width=e,this.height=i,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=a>=0?a:null,this.tutorialImg=new Image,this.tutorialImg.src=s.TUTORIAL_HAND,this.drawRipple=(0,n.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,i){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const n=this.x-this.endx+this.absdx,s=this.y-this.endy+this.absdy;let a=100*Math.sqrt(n*n+s*s)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,i,i),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,i,n){this.totalTime+=Math.floor(t);const s=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*s,o=this.tutorialImg.height*s;this.context.drawImage(this.tutorialImg,e,i,a,o),!n&&this.drawRipple(e+.02*this.width,i+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,i,n){const s=(i-e)/2,a=Math.PI/n;return e+s*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,i=this.height/1.9+this.tutorialImg.height/.8,n=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let s;const a=this.endx;this.totalTime<e/2?(s=n+this.totalTime/(e/2)*(i-n),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(s=i-(this.totalTime-e/2)/(e/2)*(i-n),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,s,this.tutorialImg.width,this.tutorialImg.height),s<=n&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return a.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return a.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}},"./src/compositions/background.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{BACKGROUND_ASSET_LIST:()=>a,autumBgDrawing:()=>h,createBackground:()=>o,defaultBgDrawing:()=>c,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>l});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");const a={summer:{BG_GROUP_IMGS:s.DEFAULT_BG_GROUP_IMGS,draw:c},autumn:{BG_GROUP_IMGS:s.AUTUMN_BG_GROUP_IMGS,draw:h},winter:{BG_GROUP_IMGS:s.WINTER_BG_GROUP_IMGS,draw:l}};async function o(t,e,i,s,a){return{...{...a(t,e,i,{...await(0,n.syncLoadingImages)(s)})}}}const r=(t,e)=>{const i=Object.keys(e);let n=Math.floor(t/10)%i.length;return t>=30&&(n%=3),{...e[i[n]]}};function c(t,e,i,n){return{draw:()=>{t.drawImage(n?.DEFAULT_BACKGROUND_1,0,0,e,i),t.drawImage(n?.ASSETS_PATH_TOTEM,.6*e,i/6,e,i/2),t.drawImage(n?.ASSETS_PATH_FENCE,.4*-e,i/3,e,i/3),t.drawImage(n?.ASSETS_PATH_HILL,.25*-e,i/2,1.5*e,i/2)}}}function h(t,e,i,n){return{draw:()=>{t.drawImage(n.AUTUMN_BACKGROUND_1,0,0,e,i),t.drawImage(n.AUTUMN_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(n.AUTUMN_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(n.AUTUMN_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}function l(t,e,i,n){return{draw:()=>{t.drawImage(n.WINTER_BACKGROUND_1,0,0,e,i),t.drawImage(n.WINTER_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(n.WINTER_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(n.WINTER_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}function d(t,e,i,n){return{draw:()=>{t.drawImage(n?.LEVEL_SELECTION_BACKGROUND,0,0,e,i)}}}},"./src/compositions/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{BACKGROUND_ASSET_LIST:()=>n.BACKGROUND_ASSET_LIST,autumBgDrawing:()=>n.autumBgDrawing,createBackground:()=>n.createBackground,createLevelObject:()=>s.createLevelObject,defaultBgDrawing:()=>n.defaultBgDrawing,getdefaultCloudBtnsPos:()=>s.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>n.levelSelectBgDrawing,loadDynamicBgAssets:()=>n.loadDynamicBgAssets,loadLevelImages:()=>s.loadLevelImages,winterBgDrawing:()=>n.winterBgDrawing});var n=i("./src/compositions/background.ts"),s=i("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createLevelObject:()=>c,getdefaultCloudBtnsPos:()=>o,loadLevelImages:()=>r});var n=i("./src/constants/index.ts"),s=i("./src/common/index.ts");const a=t=>n.SPECIAL_LEVELS.includes(t),o=t=>[[[t.width/10,t.height/10],[t.width/2.5,t.height/10],[t.width/3+t.width/2.8,t.height/10],[t.width/10,t.height/3],[t.width/2.5,t.height/3],[t.width/3+t.width/2.8,t.height/3],[t.width/10,t.height/1.8],[t.width/2.5,t.height/1.8],[t.width/3+t.width/2.8,t.height/1.8],[t.width/2.5,t.height/1.3]]],r=()=>(0,s.syncLoadingImages)({balloonImg:n.MAP_ICON_IMG,specialBloonImg:n.MAP_ICON_SPECIAL_IMG,lockImg:n.MAP_LOCK_IMG,starImg:n.STAR_IMG});async function c(t,e,i,n){const s=a(i);return{...{x:t,y:e,index:i,isSpecial:s,...n,balloonImg:s?n?.specialBloonImg:n?.balloonImg}}}},"./src/constants/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{ASSETS_PATH_BG_01:()=>F,ASSETS_PATH_FENCE:()=>j,ASSETS_PATH_HILL:()=>U,ASSETS_PATH_MONSTER_IDLE:()=>G,ASSETS_PATH_STONE_PINK_BG:()=>z,ASSETS_PATH_TOTEM:()=>R,AUDIO_ARE_YOU_SURE:()=>D,AUDIO_INTRO:()=>k,AUDIO_LEVEL_LOSE:()=>B,AUDIO_LEVEL_WIN:()=>O,AUDIO_PATH_BTN_CLICK:()=>L,AUDIO_PATH_CHEERING_FUNC:()=>x,AUDIO_PATH_CORRECT_STONE:()=>C,AUDIO_PATH_EATS:()=>E,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>A,AUDIO_PATH_MONSTER_SPIT:()=>I,AUDIO_PATH_ON_DRAG:()=>P,AUDIO_PATH_POINTS_ADD:()=>T,AUDIO_TIMEOUT:()=>M,AUDIO_URL_PRELOAD:()=>N,AUTUMN_BACKGROUND_1:()=>H,AUTUMN_BG_GROUP_IMGS:()=>Mt,AUTUMN_FENCE_1:()=>$,AUTUMN_HILL_1:()=>W,AUTUMN_PILLAR_1:()=>Y,AUTUMN_SIGN_1:()=>X,BACK_BTN_IMG:()=>At,BAR_EMPTY:()=>st,BAR_FULL:()=>at,ButtonClick:()=>g,CANCEL_BTN_IMG:()=>Ct,CLOUD_6:()=>pt,CLOUD_7:()=>gt,CLOUD_8:()=>ft,DEFAULT_BACKGROUND_1:()=>V,DEFAULT_BG_GROUP_IMGS:()=>Dt,DevelopmentServer:()=>S,FONT_BASE_PATH:()=>_,FeedbackAudio:()=>u,FirebaseUserClicked:()=>n,FirebaseUserInstall:()=>s,GAMEPLAY_BG_GROUP_IMGS:()=>Pt,IntroMusic:()=>m,IsCached:()=>l,LEVEL_INDICATOR:()=>nt,LEVEL_SELECTION_BACKGROUND:()=>tt,LevelEndAudio:()=>w,MAP_BTN_IMG:()=>wt,MAP_ICON_IMG:()=>yt,MAP_ICON_SPECIAL_IMG:()=>St,MAP_LOCK_IMG:()=>_t,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>It,NativePlayButton:()=>r,PAUSE_BTN_IMG:()=>bt,PIN_STAR_1:()=>dt,PIN_STAR_2:()=>ut,PIN_STAR_3:()=>mt,PLAY_BTN_IMG:()=>vt,POPUP_BG_IMG:()=>Lt,PROMPT_PLAY_BUTTON:()=>it,PROMPT_TEXT_BG:()=>et,PWAInstallStatus:()=>a,PhraseAudio:()=>b,PreviousPlayedLevel:()=>c,PromptAudio:()=>p,RETRY_BTN_IMG:()=>Tt,ROTATING_CLOCK:()=>rt,SCENE_NAME_GAME_PLAY:()=>Nt,SCENE_NAME_LEVEL_END:()=>zt,SCENE_NAME_LEVEL_SELECT:()=>Ot,SCENE_NAME_START:()=>Bt,SPECIAL_LEVELS:()=>Rt,STAR_IMG:()=>Et,StoneMusic:()=>v,StoreMonsterPhaseNumber:()=>h,TIMER_EMPTY:()=>ot,TIMER_FULL:()=>ct,TUTORIAL_HAND:()=>ht,TimeOver:()=>f,UrlSubstring:()=>y,UserCancelled:()=>o,WINTER_BACKGROUND_1:()=>K,WINTER_BG_GROUP_IMGS:()=>kt,WINTER_FENCE_1:()=>Z,WINTER_HILL_1:()=>q,WINTER_PILLAR_1:()=>Q,WINTER_SIGN_1:()=>J,WIN_BG:()=>lt,YES_BTN_IMG:()=>xt});const n="user_clicked",s="user_installed",a="pwa_installed_status",o="user_cancel_installation",r="native_playbutton_clicked",c="storePreviousPlayedLevel",h="storeMonsterPhaseNumber",l="is_cached",d="monster_audio",u="feedback_audio",m="intro_music",p="prompt_audio",g="button_click",f="time_over",v="stone_music",b="phrase_audio",w="level_end_audio",y="/feedthemonster",S="https://feedthemonsterdev.curiouscontent.org",_="./assets/fonts/",E="./assets/audios/Eat.mp3",I="./assets/audios/MonsterSpit.mp3",A="./assets/audios/Disapointed-05.mp3",T="assets/audios/PointsAdd.wav",C="assets/audios/CorrectStoneFinal.mp3",x=t=>`./assets/audios/Cheering-0${t}.mp3`,L="./assets/audios/ButtonClick.mp3",P="./assets/audios/onDrag.mp3",D="./assets/audios/are-you-sure.mp3",M="./assets/audios/timeout.mp3",k="./assets/audios/intro.mp3",B="./assets/audios/LevelLoseFanfare.mp3",O="./assets/audios/LevelWinFanfare.mp3",N=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],z="./assets/images/stone_pink.webp",R="./assets/images/Totem_v02_v01.webp",F="./assets/images/bg_v01.webp",U="./assets/images/hill_v01.webp",j="./assets/images/fence_v01.webp",G="./assets/images/idle4.png",V="./assets/images/bg_v01.webp",H="./assets/images/Autumn_bg_v01.webp",W="./assets/images/Autumn_hill_v01.webp",Y="./assets/images/Autumn_sign_v01.webp",X="./assets/images/Autumn_sign_v01.webp",$="./assets/images/Autumn_fence_v01.webp",K="./assets/images/Winter_bg_01.webp",q="./assets/images/Winter_hill_v01.webp",J="./assets/images/Winter_sign_v01.webp",Z="./assets/images/Winter_fence_v01.webp",Q="./assets/images/Winter_sign_v01.webp",tt="./assets/images/map.webp",et="./assets/images/promptTextBg.webp",it="./assets/images/promptPlayButton.webp",nt="./assets/images/levels_v01.webp",st="./assets/images/bar_empty_v01.webp",at="./assets/images/bar_full_v01.webp",ot="./assets/images/timer_empty.webp",rt="./assets/images/timer.webp",ct="./assets/images/timer_full.png",ht="./assets/images/tutorial_hand.webp",lt="./assets/images/WIN_screen_bg.webp",dt="./assets/images/pinStar1.webp",ut="./assets/images/pinStar2.webp",mt="./assets/images/pinStar3.webp",pt="./assets/images/cloud_01.png",gt="./assets/images/cloud_02.png",ft="./assets/images/cloud_03.png",vt="./assets/images/Play_button.webp",bt="./assets/images/pause_v01.webp",wt="./assets/images/map_btn.webp",yt="./assets/images/mapIcon.webp",St="./assets/images/map_icon_monster_level_v01.webp",_t="./assets/images/mapLock.webp",Et="./assets/images/star.webp",It="./assets/images/next_btn.webp",At="./assets/images/back_btn.webp",Tt="./assets/images/retry_btn.webp",Ct="./assets/images/close_btn.webp",xt="./assets/images/confirm_btn.webp",Lt="./assets/images/popup_bg_v01.webp",Pt={ASSETS_PATH_TOTEM:R,DEFAULT_BACKGROUND_1:V,ASSETS_PATH_HILL:U,ASSETS_PATH_FENCE:j,ASSETS_PATH_MONSTER_IDLE:G},Dt={DEFAULT_BACKGROUND_1:V,ASSETS_PATH_HILL:U,ASSETS_PATH_TOTEM:R,ASSETS_PATH_FENCE:j},Mt={AUTUMN_BACKGROUND_1:H,AUTUMN_HILL_1:W,AUTUMN_PILLAR_1:Y,AUTUMN_SIGN_1:X,AUTUMN_FENCE_1:$},kt={WINTER_BACKGROUND_1:K,WINTER_HILL_1:q,WINTER_SIGN_1:J,WINTER_FENCE_1:Z,WINTER_PILLAR_1:Q},Bt="StartScene",Ot="LevelSelection",Nt="GamePlay",zt="LevelEnd",Rt=[5,13,20,30,42]},"./src/data/api-data.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{URL:()=>s,getData:()=>o,getFtmData:()=>a});var n=i("./src/common/index.ts");const s="./lang/"+n.lang+"/ftm_"+n.lang+".json";function a(){return fetch(s,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}async function o(){return await a()}},"./src/data/custom-fonts.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{customFonts:()=>n});const n={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"}},"./src/data/data-modal.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{DataModal:()=>n,FeedbackAudios:()=>o,FeedbackTexts:()=>a,FoilStone:()=>h,LevelMeta:()=>u,Levels:()=>r,OtherAudios:()=>s,Prompt:()=>d,Puzzles:()=>c,TargetStone:()=>l});class n{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,i,n,r,c,h,l,d){this.title=t,this.otherAudios=new s(e),this.levels=this.getLevels(i),this.FeedbackTexts=new a(n),this.FeedbackAudios=new o(c),this.rightToLeft=r,this.majVersion=h,this.minVersion=l,this.version=d}getLevels(t){let e=[];for(let i=0;i<t.length;i++)e.push(new r(t[i]));return e}}class s{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class a{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class o{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class r{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new u(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,i)=>{e.push(new c(t))})),e}}class c{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new d(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,i)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,i)=>{e.push(t.StoneText)})),e}}class h{stoneText;constructor(t){this.stoneText=t}}class l{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class u{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}},"./src/data/game-score.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameScore:()=>s});var n=i("./src/common/index.ts");class s{static currentlanguage=n.lang;static setGameLevelScore(t,e){let i=this.calculateStarCount(e),n={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:i};this.setTotalStarCount(i);let s=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<s.length;t++)if(s[t].levelNumber===n.levelNumber){a=t;break}-1!==a&&n.score>s[a].score?s[a]=n:s.push(n),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(s))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return n.Debugger.DebugMode?JSON.parse(localStorage.getItem(n.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(n.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{languageFontMapping:()=>n});const n={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{DataModal:()=>s.DataModal,FeedbackAudios:()=>s.FeedbackAudios,FeedbackTexts:()=>s.FeedbackTexts,FoilStone:()=>s.FoilStone,GameScore:()=>a.GameScore,LevelMeta:()=>s.LevelMeta,Levels:()=>s.Levels,OtherAudios:()=>s.OtherAudios,Prompt:()=>s.Prompt,Puzzles:()=>s.Puzzles,TargetStone:()=>s.TargetStone,URL:()=>n.URL,customFonts:()=>r.customFonts,getData:()=>n.getData,getFtmData:()=>n.getFtmData,languageFontMapping:()=>o.languageFontMapping});var n=i("./src/data/api-data.ts"),s=i("./src/data/data-modal.ts"),a=i("./src/data/game-score.ts"),o=i("./src/data/i18-font-mapping.ts"),r=i("./src/data/custom-fonts.ts")},"./src/events/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{EventManager:()=>s});var n=i("./src/common/index.ts");class s{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(n.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(n.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(n.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(n.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/events/pub-sub-events.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{PubSub:()=>n});class n{subscribers;EVENTS;constructor(){this.subscribers={},this.EVENTS={SCENE_NAME_EVENT:"SCENE_NAME_EVENT",GAMEPLAY_DATA_EVENT:"GAMEPLAY_DATA_EVENT",GAME_PAUSE_STATUS_EVENT:"GAME_PAUSE_STATUS_EVENT",GAME_TRAIL_EFFECT_TOGGLE_EVENT:"GAME_TRAIL_EFFECT_TOGGLE_EVENT"}}testCheckSubscribers(){console.log("this.subscribers ",this.subscribers)}subscribe(t,e){const i=Array.isArray(this.subscribers[t]);this.subscribers[t]=i?[...this.subscribers[t],e]:[e]}unsubscribe(t,e){this.subscribers[t]&&(this.subscribers[t]=this.subscribers[t].filter((t=>t!==e)))}publish(t,e){this.subscribers[t]&&this.subscribers[t].forEach((t=>{t(e)}))}}},"./src/gameStateService/data-access-objects.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{createGameplaySceneDAO:()=>n});const n=t=>{const e=t.majVersion&&t.minVersion?t.majVersion.toString()+"."+t.minVersion.toString():"";return{canvas:t.canvas,width:t.width,height:t.height,canavsElement:t.canavsElement,gameCanvasContext:t.gameCanvasContext,levelData:{...t.gamePlayData.currentLevelData},levelNumber:t.gamePlayData.selectedLevelNumber,feedBackTexts:{...t.feedbackTexts},rightToLeft:t?.rightToLeft,jsonVersionNumber:e,feedbackAudios:{...t.feedbackAudios},isGamePaused:t.isGamePaused}}},"./src/gameStateService/game-data.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameData:()=>s});var n=i("./src/constants/index.ts");class s{data;canvas;width;height;canavsElement;context;gameCanvasContext;isGamePaused;currentScene;previousScene;gamePlayData;feedbackTexts;rightToLeft;majVersion;minVersion;feedbackAudios;clickTrailToggle;constructor(){this.data=null,this.canvas=null,this.width=null,this.height=null,this.canavsElement=null,this.context=null,this.gameCanvasContext=null,this.currentScene=n.SCENE_NAME_START,this.previousScene="",this.isGamePaused=!1,this.gamePlayData=null,this.feedbackAudios=null,this.feedbackTexts=null,this.rightToLeft=!1,this.majVersion=null,this.minVersion=null,this.clickTrailToggle=!1}}},"./src/gameStateService/game-state-service.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameStateService:()=>o,default:()=>r});var n=i("./src/events/pub-sub-events.ts"),s=i("./src/gameStateService/game-data.ts"),a=i("./src/gameStateService/data-access-objects.ts");class o extends n.PubSub{gameData;constructor(){super(),this.gameData=new s.GameData,this.gameStateSetSceneListener=this.gameStateSetSceneListener.bind(this),this.gameStateGamePlayDataListener=this.gameStateGamePlayDataListener.bind(this),this.updateGamePauseActivity=this.updateGamePauseActivity.bind(this),this.updateGameTrailToggle=this.updateGameTrailToggle.bind(this),this.initListeners()}initListeners(){this.subscribe(this.EVENTS.SCENE_NAME_EVENT,this.gameStateSetSceneListener),this.subscribe(this.EVENTS.GAMEPLAY_DATA_EVENT,this.gameStateGamePlayDataListener),this.subscribe(this.EVENTS.GAME_PAUSE_STATUS_EVENT,this.updateGamePauseActivity),this.subscribe(this.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,this.updateGameTrailToggle)}gameStateSetSceneListener(t){}gameStateGamePlayDataListener(t){this.gameData.gamePlayData=t,this.gameData.isGamePaused=!1}updateGamePauseActivity(t){this.gameData.isGamePaused=t}updateGameTrailToggle(t){this.gameData.clickTrailToggle=t}setDefaultGameStateValues(t,e,i){this.gameData.data=t,this.gameData.canvas=e,this.gameData.width=e.width,this.gameData.height=e.height,this.gameData.canavsElement=i,this.gameData.context=i.getContext("2d"),this.gameData.gameCanvasContext=e.getContext("2d",{willReadFrequently:!0}),this.gameData.feedbackTexts=t.FeedbackTexts,this.gameData.feedbackAudios=t.FeedbackAudios,this.gameData.rightToLeft=t.rightToLeft,this.gameData.majVersion=t.majVersion,this.gameData.minVersion=t.minVersion}getGamePlaySceneDetails(){return(0,a.createGameplaySceneDAO)(this.gameData)}}const r=new o},"./src/gameStateService/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});const n=i("./src/gameStateService/game-state-service.ts").default},"./src/gamepuzzles/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{WordPuzzleLogic:()=>n.default});var n=i("./src/gamepuzzles/wordPuzzleLogic.ts")},"./src/gamepuzzles/wordPuzzleLogic.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{default:()=>n});class n{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(t,e){this.levelData=t,this.puzzleNumber=e,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(t){this.clearAllValues(),this.puzzleNumber=t}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(t){return!this.hideListObj[t]}handleCheckHoveredStone(t,e){const i=this.groupedLetters,n=this.getTargetWord();if(!this.droppedLetters.length&&n[0]!==i[0])return!1;const s=!i.includes(t),a=!this.groupedObj[e];return n.includes(`${this.droppedLetters}${i}${t}`)&&(s||a)}validateFedLetters(){const t=this.getTargetWord();return this.droppedLetters===t.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const t=this.getTargetWord();return this.droppedLetters===t}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(t,e){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${t}`,this.groupedObj[e]=t}}},"./src/sceneHandler/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{SceneHandler:()=>c});var n=i("./src/scenes/index.ts"),s=i("./src/data/index.ts"),a=i("./src/common/index.ts"),o=i("./src/constants/index.ts"),r=i("./src/gameStateService/index.ts");class c{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(t,e){r.default.setDefaultGameStateValues(e,t,document.getElementById("canvas")),this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new n.StartScene(t,e,this.switchSceneToLevelSelection),c.SceneName=o.SCENE_NAME_START,this.loadingScreen=new n.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let t=s.GameScore.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),c.SceneName===o.SCENE_NAME_START?this.startScene.animation(e):c.SceneName===o.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.drawLevelSelection():c.SceneName===o.SCENE_NAME_GAME_PLAY?this.gameplayScene.draw(e):c.SceneName===o.SCENE_NAME_LEVEL_END&&this.levelEndScene.draw(e)};switchSceneToGameplay=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.gameplayScene=new n.GameplayScene({monsterPhaseNumber:this.checkMonsterPhaseUpdation(),switchSceneToEnd:this.switchSceneToEndLevel,switchToLevelSelection:()=>{this.switchSceneToLevelSelection(o.SCENE_NAME_GAME_PLAY)},reloadScene:this.switchSceneToGameplay}),c.SceneName=o.SCENE_NAME_GAME_PLAY}),800)};switchSceneToEndLevel=(t,e,i,s)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(o.SCENE_NAME_GAME_PLAY),this.levelEndScene=new n.LevelEndScene(this.canvas,this.height,this.width,this.context,t,i,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),c.SceneName=o.SCENE_NAME_LEVEL_END}),s?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new n.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),c.SceneName=o.SCENE_NAME_LEVEL_SELECT,this.titleTextElement.style.display="none"}),800)};dispose=t=>{t==o.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():t===o.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():t===o.SCENE_NAME_START?this.startScene.dispose():t==o.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="10"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),localStorage.setItem(o.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameplayScene:()=>d});var n=i("./src/components/index.ts"),s=i("./src/components/popups/pause-popup.ts"),a=i("./src/common/index.ts"),o=i("./src/data/index.ts"),r=i("./src/Firebase/firebase-integration.ts"),c=i("./src/constants/index.ts"),h=i("./src/gamepuzzles/index.ts"),l=i("./src/gameStateService/index.ts");class d{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;hasFed;wordPuzzleLogic;riveMonsterElement;constructor({monsterPhaseNumber:t,switchSceneToEnd:e,switchToLevelSelection:i,reloadScene:o}){const d=l.default.getGamePlaySceneDetails();this.isPauseButtonClicked=d?.isGamePaused,this.width=d.width,this.height=d.height,this.rightToLeft=d.rightToLeft,this.canvas=d.canvas,this.context=d.gameCanvasContext,this.levelData=d.levelData,this.levelNumber=d.levelNumber,this.jsonVersionNumber=d.jsonVersionNumber,this.feedBackTexts=d.feedBackTexts,this.monsterPhaseNumber=t||1,this.switchSceneToEnd=e,this.switchToLevelSelection=i,this.reloadScene=o,this.handler=document.getElementById("canvas"),this.riveMonsterElement=document.getElementById("rivecanvas"),this.riveMonsterElement.style.zIndex="4",this.isDisposing=!1,this.trailParticles=new n.TrailEffect(this.canvas),this.pauseButton=new n.PauseButton(this.context,this.canvas),this.timerTicking=new n.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new n.StoneHandler(this.context,this.canvas,this.counter,this.levelData,d.feedbackAudios,this.timerTicking),this.tutorial=new n.Tutorial(this.context,this.width,this.height),this.promptText=new n.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new n.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new n.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new s.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:this.levelData,selectedLevelNumber:this.levelNumber}),this.images={profileMonster:c.ASSETS_PATH_MONSTER_IDLE},this.resetAnimationID=0,(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0})),this.hasFed=!1;var u=this.levelData.levelMeta.levelNumber;a.Debugger.DebugMode?localStorage.setItem(c.PreviousPlayedLevel+a.lang+"Debug",u):localStorage.setItem(c.PreviousPlayedLevel+a.lang,u),this.addEventListeners(),this.startGameTime(),this.startPuzzleTime(),this.firebaseIntegration=new r.FirebaseIntegration,this.feedbackTextEffects=new n.FeedbackTextEffects,this.audioPlayer=new n.AudioPlayer,this.wordPuzzleLogic=new h.WordPuzzleLogic(this.levelData,this.counter),this.gameplayPauseListener=this.gameplayPauseListener.bind(this),l.default.subscribe(l.default.EVENTS.GAME_PAUSE_STATUS_EVENT,this.gameplayPauseListener)}gameplayPauseListener(t){this.isPauseButtonClicked=t}resumeGame=()=>{this.addEventListeners(),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const i=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(i-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(Math.sqrt((i-this.monster.x-this.canvas.width/4)**2+(n-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),l.default.publish(l.default.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,!1)};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(i,n);else for(let t of this.stoneHandler.foilStones){if(Math.sqrt((i-t.x)**2+(n-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(c.AUDIO_PATH_ON_DRAG);break}}l.default.publish(l.default.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,!0)};setPickedUp(t,e){const i=this.stoneHandler.handlePickStoneUp(t,e);i&&(this.pickedStoneObject=i,this.pickedStone=i,this.audioPlayer.playAudio(c.AUDIO_PATH_ON_DRAG),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(i?.text,i?.foilStoneIndex))}handleMouseMove=t=>{let e=t.clientX,i=t.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const n=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,t.clientX,t.clientY);if(this.pickedStone=n,e=n.x,i=n.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const t=this.stoneHandler.handleHoveringToAnotherStone(e,i,((t,e)=>this.wordPuzzleLogic.handleCheckHoveredStone(t,e)));t&&(this.wordPuzzleLogic.setPickUpLetter(t?.text,t?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=t,this.pickedStone=t)}}else{let n=this.canvas.getBoundingClientRect();const s=t.clientX-n.left,a=t.clientY-n.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=a,e=s,i=a}this.monster.changeToDragAnimation()}this.trailParticles?.addTrailParticlesOnMove(e,i)};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;this.monster.onClick(i,n)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(i,n)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(i,n)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY}),this.hasFed||this.monster.changeToIdleAnimation(),this.trailParticles?.resetParticles()};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(t),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(t)}handleStoneLetterDrawing(t){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const{groupedObj:e}=this.wordPuzzleLogic.getValues();this.stoneHandler.drawWordPuzzleLetters(t,(t=>this.wordPuzzleLogic.validateShouldHideLetter(t)),e)}else this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener(a.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(a.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(a.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(a.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(a.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(a.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(a.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(a.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.trailParticles.clearTrailSubscription(),l.default.unsubscribe(l.default.EVENTS.GAME_PAUSE_STATUS_EVENT,this.gameplayPauseListener),this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(t,e,i=!1){return this.hasFed=!0,this.stoneHandler.isStoneLetterDropCorrect(t,e,i)}letterPuzzle(t){const e=this.getRandomInt(0,1),i=this.checkStoneDropped(t,e);i&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(i)}wordPuzzle(t){this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const e=this.getRandomInt(0,1);this.hasFed=!0,this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:i}=this.wordPuzzleLogic.getValues(),n=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(e,n,!0,i),n){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(n,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==a.lang?this.stonesCount:i.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation(),this.hasFed=!1}),2e3)}else this.handleStoneDropEnd(n,"Word"),this.stonesCount=1}resetToIdleAnimation(t,e){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(t,e)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t))};dispatchStoneDropEvent(t){const e=new CustomEvent(a.STONEDROP,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.monster.changeToIdleAnimation(),this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(t?.detail?.counter),this.pickedStone=null,document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime(),this.hasFed=!1}logPuzzleEndFirebaseEvent(t,e){let i=Date.now();const{droppedLetters:n}=this.wordPuzzleLogic.getValues(),s={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==n||null==n?"TIMEOUT":n:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(i-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(s)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),l.default.publish(l.default.EVENTS.GAME_PAUSE_STATUS_EVENT,!0),this.pauseGamePlay()}}},"./src/scenes/index.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{GameplayScene:()=>n.GameplayScene,LevelEndScene:()=>a.LevelEndScene,LevelSelectionScreen:()=>s.LevelSelectionScreen,LoadingScene:()=>o.LoadingScene,StartScene:()=>r.StartScene,TestGameplayScene:()=>c.TestGameplayScene});var n=i("./src/scenes/gameplay-scene.ts"),s=i("./src/scenes/level-selection-scene.ts"),a=i("./src/scenes/levelend-scene.ts"),o=i("./src/scenes/loading-scene.ts"),r=i("./src/scenes/start-scene.ts"),c=i("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LevelSelectionScreen:()=>d});var n=i("./src/common/index.ts"),s=i("./src/components/index.ts"),a=i("./src/data/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/compositions/index.ts"),c=i("./src/constants/index.ts"),h=i("./src/components/buttons/index.ts"),l=i("./src/gameStateService/index.ts");class d{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;riveMonsterElement;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let r=this;this.callBack=i,this.levelsSectionCount=r.data.levels.length/10>Math.floor(r.data.levels.length/10)?Math.floor(r.data.levels.length/10)+1:Math.floor(r.data.levels.length/10),this.levels=[],this.firebaseIntegration=new o.FirebaseIntegration,this.init(),this.riveMonsterElement=document.getElementById("rivecanvas"),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=a.GameScore.getAllGameLevelInfo(),this.audioPlayer=new s.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(n.Debugger.DebugMode?localStorage.getItem(c.PreviousPlayedLevel+n.lang+"Debug"):localStorage.getItem(c.PreviousPlayedLevel+n.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.riveMonsterElement.style.zIndex="-1",this.images={nextbtn:c.NEXT_BTN_IMG,backbtn:c.BACK_BTN_IMG},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(c.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const t=await(0,a.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:c.LEVEL_SELECTION_BACKGROUND},r.levelSelectBgDrawing)};async createLevelButtons(){const t=await(0,r.loadLevelImages)(),e=(0,r.getdefaultCloudBtnsPos)(this.canvas)[0].map(((e,i)=>(0,r.createLevelObject)(e[0],e[1],i+1,t)));this.levels=await Promise.all(e),this.levelButtons=this.levels.map((t=>new h.LevelBloonButton(this.canvas,this.context,{...t})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(c.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,i=t.touches[0].clientY,n=this.xDown-e,s=this.yDown-i;Math.abs(n)>Math.abs(s)&&(n>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top,s=(t,e=1.3)=>i>=t&&i<t+this.canvas.height/10&&n>this.canvas.height/e&&n<this.canvas.height/e+this.canvas.height/10,a=s(.7*this.canvas.width),o=s(this.canvas.width/10);if(o||a){const t=this.levelSelectionPageIndex;a&&t!=10*this.levelsSectionCount-10?(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):o&&0!=t&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let t of this.levelButtons)t.onClick(i,n,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(t=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=t+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(t,e){const i=t.levelData.index+this.levelSelectionPageIndex,s=i-1;this.unlockLevelIndex+1===s&&t.applyPulseEffect(),i<=this.data.levels.length&&(this.checkUnlockedLevel(e),t.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,e,this.data.levels.length),n.Debugger.DebugMode&&this.context.fillText(this.data.levels[i-1].levelMeta.levelType,t.levelData.x+t.btnSize/3.5,t.levelData.y+t.btnSize/1.3))}draw(){for(let t of this.levelButtons)this.drawLevel(t,this.gameLevelData)}downButton(t){t!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=t?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber))}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};l.default.publish(l.default.EVENTS.GAMEPLAY_DATA_EVENT,e),this.logSelectedLevelEvent(),this.callBack(c.SCENE_NAME_LEVEL_SELECT)}logSelectedLevelEvent(){const t={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LevelEndScene:()=>h});var n=i("./src/common/index.ts"),s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/compositions/index.ts"),r=i("./src/constants/index.ts"),c=i("./src/gameStateService/index.ts");class h{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(t,e,i,o,c,h,l,d,u,m){this.canvas=t,this.height=e,this.width=i,this.context=o,this.monster=new s.Monster(this.canvas,m,this.switchToReactionAnimation),this.switchToGameplayCB=l,this.switchToLevelSelectionCB=d,this.data=u,this.starDrawnCount=0,this.closeButton=new a.CloseButton(o,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new a.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new a.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new s.AudioPlayer,this.starCount=c,this.currentLevel=h,this.images={backgroundImg:r.WIN_BG,star1Img:r.PIN_STAR_1,star2Img:r.PIN_STAR_2,star3Img:r.PIN_STAR_3,winBackgroundImg:r.DEFAULT_BACKGROUND_1},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new s.AudioPlayer,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,o.loadDynamicBgAssets)(this.currentLevel,o.BACKGROUND_ASSET_LIST);this.background=await(0,o.createBackground)(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?((0,n.isDocumentVisible)()&&this.audioPlayer.playAudio(r.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,n.isDocumentVisible)()&&(console.log("this.audioPlayer ",this.audioPlayer),this.audioPlayer.playAudio(r.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(r.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(this.closeButton.onClick(i,n)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB(r.SCENE_NAME_LEVEL_END)),this.retryButton.onClick(i,n)){this.audioPlayer.playButtonClickSound();const t={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};c.default.publish(c.default.EVENTS.GAMEPLAY_DATA_EVENT,t),this.switchToGameplayCB(r.SCENE_NAME_LEVEL_END)}if(this.isLastLevel&&this.nextButton.onClick(i,n)){this.audioPlayer.playButtonClickSound();const t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};c.default.publish(c.default.EVENTS.GAMEPLAY_DATA_EVENT,e),this.switchToGameplayCB(r.SCENE_NAME_LEVEL_END)}};pauseAudios=()=>{(0,n.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LoadingScene:()=>a});var n=i("./src/common/index.ts"),s=i("./src/constants/index.ts");class a{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,i){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=i,this.context=this.canvas.getContext("2d"),this.images={cloud6:s.CLOUD_6,cloud7:s.CLOUD_7,cloud8:s.CLOUD_8},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{StartScene:()=>l});var n=i("./src/components/index.ts"),s=i("./src/components/buttons/index.ts"),a=i("./src/common/index.ts"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/compositions/index.ts"),c=i("./src/constants/index.ts"),h=i("./src/components/riveMonster/rive-monster-component.ts");class l{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;riveMonsterElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;riveMonster;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.riveMonsterElement=document.getElementById("rivecanvas"),this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.riveMonster=new h.RiveMonsterComponent({canvas:this.riveMonsterElement,autoplay:!0,fit:"contain",alignment:"topCenter",width:this.canavsElement.width,height:this.canavsElement.height,onLoad:()=>{this.riveMonster.play(h.RiveMonsterComponent.Animations.IDLE)}}),this.switchSceneToLevelSelection=i,this.audioPlayer=new n.AudioPlayer,this.pwa_status=localStorage.getItem(c.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle(),this.riveMonsterElement.style.zIndex="6"}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,c.DEFAULT_BG_GROUP_IMGS,r.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,a.toggleDebugMode)(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=t=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.playButton.draw()};createPlayButton(){this.playButton=new s.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var n=i.getBoundingClientRect();const s=t.clientX-n.left,r=t.clientY-n.top,{excludeX:h,excludeY:l}=a.Utils.getExcludedCoordinates(i,15);s<h&&r<l||(o.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",c.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(c.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(t,e,i)=>{"use strict";i.r(e),i.d(e,{TestGameplayScene:()=>c});var n=i("./src/constants/index.ts"),s=i("./src/components/index.ts"),a=i("./src/components/buttons/index.ts"),o=i("./src/common/index.ts");const r=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),localStorage.setItem(n.PWAInstallStatus,"false")}));class c{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(t,e,i,a){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new s.Monster(this.canvas,0),console.log(Date.now," ::: ",performance.now),this.switchSceneToLevelSelection=a,this.stoneHandler=new s.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new s.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new s.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new s.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(n.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=i,this.animation(0),this.images={pillerImg:n.ASSETS_PATH_TOTEM,bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.ASSETS_PATH_HILL,fenchImg:n.ASSETS_PATH_FENCE,profileMonster:n.ASSETS_PATH_MONSTER_IDLE},(0,o.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{r.addEventListener("click",(()=>(0,o.toggleDebugMode)(r)))};handleMouseUp=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;Math.sqrt((n-e.monster.x-e.canvas.width/4)*(n-e.monster.x-e.canvas.width/4)+(s-e.monster.y-e.canvas.height/2.7)*(s-e.monster.y-e.canvas.height/2.7))<=60||e.monster.changeToIdleAnimation(),e.pickedStone=null};handleMouseDown=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;for(let t of e.stoneHandler.foilStones)Math.sqrt((n-t.x)*(n-t.x)+(s-t.y)*(s-t.y))<=40&&(this.pickedStone=t)};handleMouseMove=t=>{let e=this;var i=document.getElementById("canvas").getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;e.pickedStone&&(e.monster.changeToDragAnimation(),e.pickedStone.x=n,e.pickedStone.y=s)};animation=t=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.promptText.draw(t),this.stoneHandler.draw(t),this.levelIndicator.draw(),this.timerTicking.update(t))};draw(){}createPlayButton=()=>{this.playButton=new a.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(t){var e=t.touches[0],i=new MouseEvent("mousedown",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchmove",(function(t){var e=t.touches[0],i=new MouseEvent("mousemove",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1),this.handler.addEventListener("touchend",(function(t){var e=t.changedTouches[0],i=new MouseEvent("mouseup",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(i)}),!1)};handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var s=i.getBoundingClientRect();const a=t.clientX-s.left,o=t.clientY-s.top;e.playButton.onClick(a,o)&&(e.firebase_analytics&&e.firebase_analytics.logEvent(n.FirebaseUserClicked,"click"),fbq("trackCustom",n.FirebaseUserClicked,{event:"click"}),r.style.display="none",e.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{getAnalytics:()=>G,getGoogleAnalyticsClientId:()=>Y,initializeAnalytics:()=>V,isSupported:()=>H,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>W,setDefaultEventParameters:()=>q,setUserId:()=>X,setUserProperties:()=>$,settings:()=>U});var n=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),s=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js");i("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",c="firebase_id",h="origin",l=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",u="https://www.googletagmanager.com/gtag/js",m=new s.Logger("@firebase/analytics"),p={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},g=new a.ErrorFactory("analytics","Analytics",p);function f(t){if(!t.startsWith(u)){const e=g.create("invalid-gtag-resource",{gtagURL:t});return m.warn(e.message),""}return t}function v(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function b(t,e){const i=function(t,e){let i;return window.trustedTypes&&(i=window.trustedTypes.createPolicy(t,e)),i}("firebase-js-sdk-policy",{createScriptURL:f}),n=document.createElement("script"),s=`${u}?l=${t}&id=${e}`;n.src=i?null==i?void 0:i.createScriptURL(s):s,n.async=!0,document.head.appendChild(n)}function w(t,e,i,n){return async function(s,...a){try{if("event"===s){const[n,s]=a;await async function(t,e,i,n,s){try{let a=[];if(s&&s.send_to){let t=s.send_to;Array.isArray(t)||(t=[t]);const n=await v(i);for(const i of t){const t=n.find((t=>t.measurementId===i)),s=t&&e[t.appId];if(!s){a=[];break}a.push(s)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",n,s||{})}catch(t){m.error(t)}}(t,e,i,n,s)}else if("config"===s){const[s,o]=a;await async function(t,e,i,n,s,a){const o=n[s];try{if(o)await e[o];else{const t=(await v(i)).find((t=>t.measurementId===s));t&&await e[t.appId]}}catch(t){m.error(t)}t("config",s,a)}(t,e,i,n,s,o)}else if("consent"===s){const[e]=a;t("consent","update",e)}else if("get"===s){const[e,i,n]=a;t("get",e,i,n)}else if("set"===s){const[e]=a;t("set",e)}else t(s,...a)}catch(t){m.error(t)}}}const y=30;const S=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function _(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function E(t,e=S,i){const{appId:n,apiKey:s,measurementId:a}=t.options;if(!n)throw g.create("no-app-id");if(!s){if(a)return{measurementId:a,appId:n};throw g.create("no-api-key")}const o=e.getThrottleMetadata(n)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new A;return setTimeout((async()=>{r.abort()}),void 0!==i?i:l),I({appId:n,apiKey:s,measurementId:a},o,r,e)}async function I(t,{throttleEndTimeMillis:e,backoffCount:i},n,s=S){var o;const{appId:r,measurementId:c}=t;try{await function(t,e){return new Promise(((i,n)=>{const s=Math.max(e-Date.now(),0),a=setTimeout(i,s);t.addEventListener((()=>{clearTimeout(a),n(g.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(n,e)}catch(t){if(c)return m.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:r,measurementId:c};throw t}try{const e=await async function(t){var e;const{appId:i,apiKey:n}=t,s={method:"GET",headers:_(n)},a=d.replace("{app-id}",i),o=await fetch(a,s);if(200!==o.status&&304!==o.status){let t="";try{const i=await o.json();(null===(e=i.error)||void 0===e?void 0:e.message)&&(t=i.error.message)}catch(t){}throw g.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return s.deleteThrottleMetadata(r),e}catch(e){const h=e;if(!function(t){if(!(t instanceof a.FirebaseError&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h)){if(s.deleteThrottleMetadata(r),c)return m.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==h?void 0:h.message}]`),{appId:r,measurementId:c};throw e}const l=503===Number(null===(o=null==h?void 0:h.customData)||void 0===o?void 0:o.httpStatus)?(0,a.calculateBackoffMillis)(i,s.intervalMillis,y):(0,a.calculateBackoffMillis)(i,s.intervalMillis),d={throttleEndTimeMillis:Date.now()+l,backoffCount:i+1};return s.setThrottleMetadata(r,d),m.debug(`Calling attemptFetch again in ${l} millis`),I(t,d,n,s)}}class A{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let T,C;function x(t){C=t}function L(t){T=t}async function P(t,e,i,n,s,o,r){var l;const d=E(t);d.then((e=>{i[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&m.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>m.error(t))),e.push(d);const p=async function(){if(!(0,a.isIndexedDBAvailable)())return m.warn(g.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,a.validateIndexedDBOpenable)()}catch(t){return m.warn(g.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?n.getId():void 0)),[f,v]=await Promise.all([d,p]);(function(t){const e=window.document.getElementsByTagName("script");for(const i of Object.values(e))if(i.src&&i.src.includes(u)&&i.src.includes(t))return i;return null})(o)||b(o,f.measurementId),C&&(s("consent","default",C),x(void 0)),s("js",new Date);const w=null!==(l=null==r?void 0:r.config)&&void 0!==l?l:{};return w[h]="firebase",w.update=!0,null!=v&&(w[c]=v),s("config",f.measurementId,w),T&&(s("set",T),L(void 0)),f.measurementId}class D{constructor(t){this.app=t}_delete(){return delete M[this.app.options.appId],Promise.resolve()}}let M={},k=[];const B={};let O,N,z="dataLayer",R="gtag",F=!1;function U(t){if(F)throw g.create("already-initialized");t.dataLayerName&&(z=t.dataLayerName),t.gtagName&&(R=t.gtagName)}function j(t,e,i){!function(){const t=[];if((0,a.isBrowserExtension)()&&t.push("This is a browser extension environment."),(0,a.areCookiesEnabled)()||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),i=g.create("invalid-analytics-context",{errorInfo:e});m.warn(i.message)}}();const n=t.options.appId;if(!n)throw g.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw g.create("no-api-key");m.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=M[n])throw g.create("already-exists",{id:n});if(!F){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(z);const{wrappedGtag:t,gtagCore:e}=function(t,e,i,n,s){let a=function(...t){window[n].push(arguments)};return window[s]&&"function"==typeof window[s]&&(a=window[s]),window[s]=w(a,t,e,i),{gtagCore:a,wrappedGtag:window[s]}}(M,k,B,z,R);N=t,O=e,F=!0}M[n]=P(t,k,B,e,O,z,i);return new D(t)}function G(t=(0,n.getApp)()){t=(0,a.getModularInstance)(t);const e=(0,n._getProvider)(t,r);return e.isInitialized()?e.getImmediate():V(t)}function V(t,e={}){const i=(0,n._getProvider)(t,r);if(i.isInitialized()){const t=i.getImmediate();if((0,a.deepEqual)(e,i.getOptions()))return t;throw g.create("already-initialized")}return i.initialize({options:e})}async function H(){if((0,a.isBrowserExtension)())return!1;if(!(0,a.areCookiesEnabled)())return!1;if(!(0,a.isIndexedDBAvailable)())return!1;try{return await(0,a.validateIndexedDBOpenable)()}catch(t){return!1}}function W(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,n){if(n&&n.global)return t("set",{screen_name:i}),Promise.resolve();t("config",await e,{update:!0,screen_name:i})}(N,M[t.app.options.appId],e,i).catch((t=>m.error(t)))}async function Y(t){return t=(0,a.getModularInstance)(t),async function(t,e){const i=await e;return new Promise(((e,n)=>{t("get",i,"client_id",(t=>{t||n(g.create("no-client-id")),e(t)}))}))}(N,M[t.app.options.appId])}function X(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,n){if(n&&n.global)return t("set",{user_id:i}),Promise.resolve();t("config",await e,{update:!0,user_id:i})}(N,M[t.app.options.appId],e,i).catch((t=>m.error(t)))}function $(t,e,i){t=(0,a.getModularInstance)(t),async function(t,e,i,n){if(n&&n.global){const e={};for(const t of Object.keys(i))e[`user_properties.${t}`]=i[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:i})}(N,M[t.app.options.appId],e,i).catch((t=>m.error(t)))}function K(t,e){t=(0,a.getModularInstance)(t),async function(t,e){const i=await t;window[`ga-disable-${i}`]=!e}(M[t.app.options.appId],e).catch((t=>m.error(t)))}function q(t){N?N("set",t):L(t)}function J(t,e,i,n){t=(0,a.getModularInstance)(t),async function(t,e,i,n,s){if(s&&s.global)t("event",i,n);else{const s=await e;t("event",i,Object.assign(Object.assign({},n),{send_to:s}))}}(N,M[t.app.options.appId],e,i,n).catch((t=>m.error(t)))}function Z(t){N?N("consent","update",t):x(t)}const Q="@firebase/analytics",tt="0.10.0";(0,n._registerComponent)(new o.Component(r,((t,{options:e})=>j(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),(0,n._registerComponent)(new o.Component("analytics-internal",(function(t){try{const e=t.getProvider(r).getImmediate();return{logEvent:(t,i,n)=>J(e,t,i,n)}}catch(t){throw g.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),(0,n.registerVersion)(Q,tt),(0,n.registerVersion)(Q,tt,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>O,_addComponent:()=>F,_addOrOverwriteComponent:()=>U,_apps:()=>z,_clearComponents:()=>H,_components:()=>R,_getProvider:()=>G,_registerComponent:()=>j,_removeServiceInstance:()=>V,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>tt,registerVersion:()=>Q,setLogLevel:()=>et});var n=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),s=i("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/idb/build/index.js");class r{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const c="@firebase/app",h="0.9.15",l=new s.Logger("@firebase/app"),d="@firebase/app-compat",u="@firebase/analytics-compat",m="@firebase/analytics",p="@firebase/app-check-compat",g="@firebase/app-check",f="@firebase/auth",v="@firebase/auth-compat",b="@firebase/database",w="@firebase/database-compat",y="@firebase/functions",S="@firebase/functions-compat",_="@firebase/installations",E="@firebase/installations-compat",I="@firebase/messaging",A="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",x="@firebase/remote-config",L="@firebase/remote-config-compat",P="@firebase/storage",D="@firebase/storage-compat",M="@firebase/firestore",k="@firebase/firestore-compat",B="firebase",O="[DEFAULT]",N={[c]:"fire-core",[d]:"fire-core-compat",[m]:"fire-analytics",[u]:"fire-analytics-compat",[g]:"fire-app-check",[p]:"fire-app-check-compat",[f]:"fire-auth",[v]:"fire-auth-compat",[b]:"fire-rtdb",[w]:"fire-rtdb-compat",[y]:"fire-fn",[S]:"fire-fn-compat",[_]:"fire-iid",[E]:"fire-iid-compat",[I]:"fire-fcm",[A]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[x]:"fire-rc",[L]:"fire-rc-compat",[P]:"fire-gcs",[D]:"fire-gcs-compat",[M]:"fire-fst",[k]:"fire-fst-compat","fire-js":"fire-js",[B]:"fire-js-all"},z=new Map,R=new Map;function F(t,e){try{t.container.addComponent(e)}catch(i){l.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,i)}}function U(t,e){t.container.addOrOverwriteComponent(e)}function j(t){const e=t.name;if(R.has(e))return l.debug(`There were multiple attempts to register component ${e}.`),!1;R.set(e,t);for(const e of z.values())F(e,t);return!0}function G(t,e){const i=t.container.getProvider("heartbeat").getImmediate({optional:!0});return i&&i.triggerHeartbeat(),t.container.getProvider(e)}function V(t,e,i=O){G(t,e).clearInstance(i)}function H(){R.clear()}const W={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},Y=new a.ErrorFactory("app","Firebase",W);class X{constructor(t,e,i){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=i,this.container.addComponent(new n.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw Y.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(t,e={}){let i=t;if("object"!=typeof e){e={name:e}}const s=Object.assign({name:O,automaticDataCollectionEnabled:!1},e),o=s.name;if("string"!=typeof o||!o)throw Y.create("bad-app-name",{appName:String(o)});if(i||(i=(0,a.getDefaultAppConfig)()),!i)throw Y.create("no-options");const r=z.get(o);if(r){if((0,a.deepEqual)(i,r.options)&&(0,a.deepEqual)(s,r.config))return r;throw Y.create("duplicate-app",{appName:o})}const c=new n.ComponentContainer(o);for(const t of R.values())c.addComponent(t);const h=new X(i,s,c);return z.set(o,h),h}function q(t=O){const e=z.get(t);if(!e&&t===O&&(0,a.getDefaultAppConfig)())return K();if(!e)throw Y.create("no-app",{appName:t});return e}function J(){return Array.from(z.values())}async function Z(t){const e=t.name;z.has(e)&&(z.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function Q(t,e,i){var s;let a=null!==(s=N[t])&&void 0!==s?s:t;i&&(a+=`-${i}`);const o=a.match(/\s|\//),r=e.match(/\s|\//);if(o||r){const t=[`Unable to register library "${a}" with version "${e}":`];return o&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&r&&t.push("and"),r&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void l.warn(t.join(" "))}j(new n.Component(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}function tt(t,e){if(null!==t&&"function"!=typeof t)throw Y.create("invalid-log-argument");(0,s.setUserLogHandler)(t,e)}function et(t){(0,s.setLogLevel)(t)}const it="firebase-heartbeat-database",nt=1,st="firebase-heartbeat-store";let at=null;function ot(){return at||(at=(0,o.openDB)(it,nt,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(st)}}).catch((t=>{throw Y.create("idb-open",{originalErrorMessage:t.message})}))),at}async function rt(t,e){try{const i=(await ot()).transaction(st,"readwrite"),n=i.objectStore(st);await n.put(e,ct(t)),await i.done}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=Y.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}function ct(t){return`${t.name}!${t.options.appId}`}class ht{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new dt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=lt();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=lt(),{heartbeatsToSend:e,unsentEntries:i}=function(t,e=1024){const i=[];let n=t.slice();for(const s of t){const t=i.find((t=>t.agent===s.agent));if(t){if(t.dates.push(s.date),ut(i)>e){t.dates.pop();break}}else if(i.push({agent:s.agent,dates:[s.date]}),ut(i)>e){i.pop();break}n=n.slice(1)}return{heartbeatsToSend:i,unsentEntries:n}}(this._heartbeatsCache.heartbeats),n=(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),n}}function lt(){return(new Date).toISOString().substring(0,10)}class dt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.isIndexedDBAvailable)()&&(0,a.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(t){try{const e=await ot();return await e.transaction(st).objectStore(st).get(ct(t))}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=Y.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:[...i.heartbeats,...t.heartbeats]})}}}function ut(t){return(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t})).length}var mt;mt="",j(new n.Component("platform-logger",(t=>new r(t)),"PRIVATE")),j(new n.Component("heartbeat",(t=>new ht(t)),"PRIVATE")),Q(c,h,mt),Q(c,h,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Component:()=>s,ComponentContainer:()=>r,Provider:()=>o});var n=i("./node_modules/@firebase/util/dist/index.esm2017.js");class s{constructor(t,e,i){this.name=t,this.instanceFactory=e,this.type=i,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const a="[DEFAULT]";class o{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new n.Deferred;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const i=this.getOrInitializeService({instanceIdentifier:e});i&&t.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const i=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),n=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(i)&&!this.shouldAutoInitialize()){if(n)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:i})}catch(t){if(n)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:a})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const i=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:i});e.resolve(t)}catch(t){}}}}clearInstance(t=a){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=a){return this.instances.has(t)}getOptions(t=a){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,i=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(i))throw Error(`${this.name}(${i}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const n=this.getOrInitializeService({instanceIdentifier:i,options:e});for(const[t,e]of this.instancesDeferred.entries()){i===this.normalizeInstanceIdentifier(t)&&e.resolve(n)}return n}onInit(t,e){var i;const n=this.normalizeInstanceIdentifier(e),s=null!==(i=this.onInitCallbacks.get(n))&&void 0!==i?i:new Set;s.add(t),this.onInitCallbacks.set(n,s);const a=this.instances.get(n);return a&&t(a,n),()=>{s.delete(t)}}invokeOnInitCallbacks(t,e){const i=this.onInitCallbacks.get(e);if(i)for(const n of i)try{n(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let i=this.instances.get(t);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(n=t,n===a?void 0:n),options:e}),this.instances.set(t,i),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(i,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,i)}catch(t){}var n;return i||null}normalizeInstanceIdentifier(t=a){return this.component?this.component.multipleInstances?t:a:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new o(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>et,getToken:()=>J,onIdChange:()=>tt});var n=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),s=i("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=i("./node_modules/@firebase/util/dist/index.esm2017.js"),o=i("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",c="0.6.4",h=1e4,l=`w:${c}`,d="FIS_v2",u="https://firebaseinstallations.googleapis.com/v1",m=36e5,p={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},g=new a.ErrorFactory("installations","Installations",p);function f(t){return t instanceof a.FirebaseError&&t.code.includes("request-failed")}function v({projectId:t}){return`${u}/projects/${t}/installations`}function b(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function w(t,e){const i=(await e.json()).error;return g.create("request-failed",{requestName:t,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})}function y({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function S(t,{refreshToken:e}){const i=y(t);return i.append("Authorization",function(t){return`${d} ${t}`}(e)),i}async function _(t){const e=await t();return e.status>=500&&e.status<600?t():e}function E(t){return new Promise((e=>{setTimeout(e,t)}))}const I=/^[cdef][\w-]{21}$/,A="";function T(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(i=t,btoa(String.fromCharCode(...i)).replace(/\+/g,"-").replace(/\//g,"_"));var i;return e.substr(0,22)}(t);return I.test(e)?e:A}catch(t){return A}}function C(t){return`${t.appName}!${t.appId}`}const x=new Map;function L(t,e){const i=C(t);P(i,e),function(t,e){const i=M();i&&i.postMessage({key:t,fid:e});k()}(i,e)}function P(t,e){const i=x.get(t);if(i)for(const t of i)t(e)}let D=null;function M(){return!D&&"BroadcastChannel"in self&&(D=new BroadcastChannel("[Firebase] FID Change"),D.onmessage=t=>{P(t.data.key,t.data.fid)}),D}function k(){0===x.size&&D&&(D.close(),D=null)}const B="firebase-installations-database",O=1,N="firebase-installations-store";let z=null;function R(){return z||(z=(0,o.openDB)(B,O,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(N)}})),z}async function F(t,e){const i=C(t),n=(await R()).transaction(N,"readwrite"),s=n.objectStore(N),a=await s.get(i);return await s.put(e,i),await n.done,a&&a.fid===e.fid||L(t,e.fid),e}async function U(t){const e=C(t),i=(await R()).transaction(N,"readwrite");await i.objectStore(N).delete(e),await i.done}async function j(t,e){const i=C(t),n=(await R()).transaction(N,"readwrite"),s=n.objectStore(N),a=await s.get(i),o=e(a);return void 0===o?await s.delete(i):await s.put(o,i),await n.done,!o||a&&a.fid===o.fid||L(t,o.fid),o}async function G(t){let e;const i=await j(t.appConfig,(i=>{const n=function(t){const e=t||{fid:T(),registrationStatus:0};return W(e)}(i),s=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(g.create("app-offline"))}}const i={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},n=async function(t,e){try{const i=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:i}){const n=v(t),s=y(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&s.append("x-firebase-client",t)}const o={fid:i,authVersion:d,appId:t.appId,sdkVersion:l},r={method:"POST",headers:s,body:JSON.stringify(o)},c=await _((()=>fetch(n,r)));if(c.ok){const t=await c.json();return{fid:t.fid||i,registrationStatus:2,refreshToken:t.refreshToken,authToken:b(t.authToken)}}throw await w("Create Installation",c)}(t,e);return F(t.appConfig,i)}catch(i){throw f(i)&&409===i.customData.serverCode?await U(t.appConfig):await F(t.appConfig,{fid:e.fid,registrationStatus:0}),i}}(t,i);return{installationEntry:i,registrationPromise:n}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:V(t)}:{installationEntry:e}}(t,n);return e=s.registrationPromise,s.installationEntry}));return i.fid===A?{installationEntry:await e}:{installationEntry:i,registrationPromise:e}}async function V(t){let e=await H(t.appConfig);for(;1===e.registrationStatus;)await E(100),e=await H(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:i}=await G(t);return i||e}return e}function H(t){return j(t,(t=>{if(!t)throw g.create("installation-not-found");return W(t)}))}function W(t){return 1===(e=t).registrationStatus&&e.registrationTime+h<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function Y({appConfig:t,heartbeatServiceProvider:e},i){const n=function(t,{fid:e}){return`${v(t)}/${e}/authTokens:generate`}(t,i),s=S(t,i),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&s.append("x-firebase-client",t)}const o={installation:{sdkVersion:l,appId:t.appId}},r={method:"POST",headers:s,body:JSON.stringify(o)},c=await _((()=>fetch(n,r)));if(c.ok){return b(await c.json())}throw await w("Generate Auth Token",c)}async function X(t,e=!1){let i;const n=await j(t.appConfig,(n=>{if(!K(n))throw g.create("not-registered");const s=n.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+m}(t)}(s))return n;if(1===s.requestStatus)return i=async function(t,e){let i=await $(t.appConfig);for(;1===i.authToken.requestStatus;)await E(100),i=await $(t.appConfig);const n=i.authToken;return 0===n.requestStatus?X(t,e):n}(t,e),n;{if(!navigator.onLine)throw g.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(n);return i=async function(t,e){try{const i=await Y(t,e),n=Object.assign(Object.assign({},e),{authToken:i});return await F(t.appConfig,n),i}catch(i){if(!f(i)||401!==i.customData.serverCode&&404!==i.customData.serverCode){const i=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await F(t.appConfig,i)}else await U(t.appConfig);throw i}}(t,e),e}}));return i?await i:n.authToken}function $(t){return j(t,(t=>{if(!K(t))throw g.create("not-registered");const e=t.authToken;return 1===(i=e).requestStatus&&i.requestTime+h<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var i}))}function K(t){return void 0!==t&&2===t.registrationStatus}async function q(t){const e=t,{installationEntry:i,registrationPromise:n}=await G(e);return n?n.catch(console.error):X(e).catch(console.error),i.fid}async function J(t,e=!1){const i=t;await async function(t){const{registrationPromise:e}=await G(t);e&&await e}(i);return(await X(i,e)).token}async function Z(t,e){const i=function(t,{fid:e}){return`${v(t)}/${e}`}(t,e),n={method:"DELETE",headers:S(t,e)},s=await _((()=>fetch(i,n)));if(!s.ok)throw await w("Delete Installation",s)}async function Q(t){const{appConfig:e}=t,i=await j(e,(t=>{if(!t||0!==t.registrationStatus)return t}));if(i){if(1===i.registrationStatus)throw g.create("delete-pending-registration");if(2===i.registrationStatus){if(!navigator.onLine)throw g.create("app-offline");await Z(e,i),await U(e)}}}function tt(t,e){const{appConfig:i}=t;return function(t,e){M();const i=C(t);let n=x.get(i);n||(n=new Set,x.set(i,n)),n.add(e)}(i,e),()=>{!function(t,e){const i=C(t),n=x.get(i);n&&(n.delete(e),0===n.size&&x.delete(i),k())}(i,e)}}function et(t=(0,n.getApp)()){return(0,n._getProvider)(t,"installations").getImmediate()}function it(t){return g.create("missing-app-config-values",{valueName:t})}const nt="installations",st=t=>{const e=t.getProvider("app").getImmediate(),i=function(t){if(!t||!t.options)throw it("App Configuration");if(!t.name)throw it("App Name");const e=["projectId","apiKey","appId"];for(const i of e)if(!t.options[i])throw it(i);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:i,heartbeatServiceProvider:(0,n._getProvider)(e,"heartbeat"),_delete:()=>Promise.resolve()}},at=t=>{const e=t.getProvider("app").getImmediate(),i=(0,n._getProvider)(e,nt).getImmediate();return{getId:()=>q(i),getToken:t=>J(i,t)}};(0,n._registerComponent)(new s.Component(nt,st,"PUBLIC")),(0,n._registerComponent)(new s.Component("installations-internal",at,"PRIVATE")),(0,n.registerVersion)(r,c),(0,n.registerVersion)(r,c,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{deleteDB:()=>a,openDB:()=>s,unwrap:()=>n.u,wrap:()=>n.w});var n=i("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function s(t,e,{blocked:i,upgrade:s,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),c=(0,n.w)(r);return s&&r.addEventListener("upgradeneeded",(t=>{s((0,n.w)(r.result),t.oldVersion,t.newVersion,(0,n.w)(r.transaction))})),i&&r.addEventListener("blocked",(()=>i())),c.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),c}function a(t,{blocked:e}={}){const i=indexedDB.deleteDatabase(t);return e&&i.addEventListener("blocked",(()=>e())),(0,n.w)(i).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],c=new Map;function h(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(c.get(e))return c.get(e);const i=e.replace(/FromIndex$/,""),n=e!==i,s=r.includes(i);if(!(i in(n?IDBIndex:IDBObjectStore).prototype)||!s&&!o.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,s?"readwrite":"readonly");let o=a.store;return n&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),s&&a.done]))[0]};return c.set(e,a),a}(0,n.r)((t=>({...t,get:(e,i,n)=>h(e,i)||t.get(e,i,n),has:(e,i)=>!!h(e,i)||t.has(e,i)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{a:()=>l,i:()=>n,r:()=>u,u:()=>f,w:()=>g});const n=(t,e)=>e.some((e=>t instanceof e));let s,a;const o=new WeakMap,r=new WeakMap,c=new WeakMap,h=new WeakMap,l=new WeakMap;let d={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||c.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return g(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function m(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),g(o.get(this))}:function(...e){return g(t.apply(f(this),e))}:function(e,...i){const n=t.call(f(this),e,...i);return c.set(n,e.sort?e.sort():[e]),g(n)}}function p(t){return"function"==typeof t?m(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",a),t.removeEventListener("abort",a)},s=()=>{e(),n()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",s),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),n(t,s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function g(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("success",s),t.removeEventListener("error",a)},s=()=>{e(g(t.result)),n()},a=()=>{i(t.error),n()};t.addEventListener("success",s),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(h.has(t))return h.get(t);const e=p(t);return e!==t&&(h.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{LogLevel:()=>s,Logger:()=>h,setLogLevel:()=>l,setUserLogHandler:()=>d});const n=[];var s;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(s||(s={}));const a={debug:s.DEBUG,verbose:s.VERBOSE,info:s.INFO,warn:s.WARN,error:s.ERROR,silent:s.SILENT},o=s.INFO,r={[s.DEBUG]:"log",[s.VERBOSE]:"log",[s.INFO]:"info",[s.WARN]:"warn",[s.ERROR]:"error"},c=(t,e,...i)=>{if(e<t.logLevel)return;const n=(new Date).toISOString(),s=r[e];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[s](`[${n}]  ${t.name}:`,...i)};class h{constructor(t){this.name=t,this._logLevel=o,this._logHandler=c,this._userLogHandler=null,n.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in s))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,s.DEBUG,...t),this._logHandler(this,s.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,s.VERBOSE,...t),this._logHandler(this,s.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,s.INFO,...t),this._logHandler(this,s.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,s.WARN,...t),this._logHandler(this,s.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,s.ERROR,...t),this._logHandler(this,s.ERROR,...t)}}function l(t){n.forEach((e=>{e.setLogLevel(t)}))}function d(t,e){for(const i of n){let n=null;e&&e.level&&(n=a[e.level]),i.userLogHandler=null===t?null:(e,i,...a)=>{const o=a.map((t=>{if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((t=>t)).join(" ");i>=(null!=n?n:e.logLevel)&&t({level:s[i].toLowerCase(),message:o,args:a,type:e.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{getAnalytics:()=>n.getAnalytics,getGoogleAnalyticsClientId:()=>n.getGoogleAnalyticsClientId,initializeAnalytics:()=>n.initializeAnalytics,isSupported:()=>n.isSupported,logEvent:()=>n.logEvent,setAnalyticsCollectionEnabled:()=>n.setAnalyticsCollectionEnabled,setConsent:()=>n.setConsent,setCurrentScreen:()=>n.setCurrentScreen,setDefaultEventParameters:()=>n.setDefaultEventParameters,setUserId:()=>n.setUserId,setUserProperties:()=>n.setUserProperties,settings:()=>n.settings});var n=i("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{FirebaseError:()=>n.FirebaseError,SDK_VERSION:()=>n.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>n._DEFAULT_ENTRY_NAME,_addComponent:()=>n._addComponent,_addOrOverwriteComponent:()=>n._addOrOverwriteComponent,_apps:()=>n._apps,_clearComponents:()=>n._clearComponents,_components:()=>n._components,_getProvider:()=>n._getProvider,_registerComponent:()=>n._registerComponent,_removeServiceInstance:()=>n._removeServiceInstance,deleteApp:()=>n.deleteApp,getApp:()=>n.getApp,getApps:()=>n.getApps,initializeApp:()=>n.initializeApp,onLog:()=>n.onLog,registerVersion:()=>n.registerVersion,setLogLevel:()=>n.setLogLevel});var n=i("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,n.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{deleteDB:()=>a,openDB:()=>s,unwrap:()=>n.u,wrap:()=>n.w});var n=i("./node_modules/idb/build/wrap-idb-value.js");function s(t,e,{blocked:i,upgrade:s,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),c=(0,n.w)(r);return s&&r.addEventListener("upgradeneeded",(t=>{s((0,n.w)(r.result),t.oldVersion,t.newVersion,(0,n.w)(r.transaction),t)})),i&&r.addEventListener("blocked",(t=>i(t.oldVersion,t.newVersion,t))),c.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),c}function a(t,{blocked:e}={}){const i=indexedDB.deleteDatabase(t);return e&&i.addEventListener("blocked",(t=>e(t.oldVersion,t))),(0,n.w)(i).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],c=new Map;function h(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(c.get(e))return c.get(e);const i=e.replace(/FromIndex$/,""),n=e!==i,s=r.includes(i);if(!(i in(n?IDBIndex:IDBObjectStore).prototype)||!s&&!o.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,s?"readwrite":"readonly");let o=a.store;return n&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),s&&a.done]))[0]};return c.set(e,a),a}(0,n.r)((t=>({...t,get:(e,i,n)=>h(e,i)||t.get(e,i,n),has:(e,i)=>!!h(e,i)||t.has(e,i)})))},"./node_modules/idb/build/wrap-idb-value.js":(t,e,i)=>{"use strict";i.r(e),i.d(e,{a:()=>l,i:()=>n,r:()=>u,u:()=>f,w:()=>g});const n=(t,e)=>e.some((e=>t instanceof e));let s,a;const o=new WeakMap,r=new WeakMap,c=new WeakMap,h=new WeakMap,l=new WeakMap;let d={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||c.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return g(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function m(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),g(o.get(this))}:function(...e){return g(t.apply(f(this),e))}:function(e,...i){const n=t.call(f(this),e,...i);return c.set(n,e.sort?e.sort():[e]),g(n)}}function p(t){return"function"==typeof t?m(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",a),t.removeEventListener("abort",a)},s=()=>{e(),n()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",s),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),n(t,s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function g(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("success",s),t.removeEventListener("error",a)},s=()=>{e(g(t.result)),n()},a=()=>{i(t.error),n()};t.addEventListener("success",s),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(h.has(t))return h.get(t);const e=p(t);return e!==t&&(h.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(t,e,i)=>{"use strict";i.r(e),i.d(e,{Workbox:()=>u,messageSW:()=>n});try{self["workbox:window:4.3.1"]&&_()}catch(n){}var n=function(t,e){return new Promise((function(i){var n=new MessageChannel;n.port1.onmessage=function(t){return i(t.data)},t.postMessage(e,[n.port2])}))};function s(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(n){}var o=function(){var t=this;this.promise=new Promise((function(e,i){t.resolve=e,t.reject=i}))},r=function(t,e){return new URL(t,location).href===new URL(e,location).href},c=function(t,e){Object.assign(this,e,{type:t})};function h(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function l(t,e,i){return i?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function d(){}var u=function(t){var e,i;function u(e,i){var n;return void 0===i&&(i={}),(n=t.call(this)||this).t=e,n.i=i,n.o=0,n.u=new o,n.s=new o,n.h=new o,n.v=n.v.bind(a(a(n))),n.l=n.l.bind(a(a(n))),n.g=n.g.bind(a(a(n))),n.m=n.m.bind(a(a(n))),n}i=t,(e=u).prototype=Object.create(i.prototype),e.prototype.constructor=e,e.__proto__=i;var m,p,g=u.prototype;return g.register=h((function(t){var e,i,n=this,s=(void 0===t?{}:t).immediate,a=void 0!==s&&s;return e=function(){return n.p=Boolean(navigator.serviceWorker.controller),n.P=n.R(),l(n.k(),(function(t){n.B=t,n.P&&(n.O=n.P,n.s.resolve(n.P),n.h.resolve(n.P),n.j(n.P),n.P.addEventListener("statechange",n.l,{once:!0}));var e=n.B.waiting;return e&&r(e.scriptURL,n.t)&&(n.O=e,Promise.resolve().then((function(){n.dispatchEvent(new c("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),n.O&&n.u.resolve(n.O),n.B.addEventListener("updatefound",n.g),navigator.serviceWorker.addEventListener("controllerchange",n.m,{once:!0}),"BroadcastChannel"in self&&(n.C=new BroadcastChannel("workbox"),n.C.addEventListener("message",n.v)),navigator.serviceWorker.addEventListener("message",n.v),n.B}))},(i=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(d):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&i.then?i.then(e):e()})),g.getSW=h((function(){return this.O||this.u.promise})),g.messageSW=h((function(t){return l(this.getSW(),(function(e){return n(e,t)}))})),g.R=function(){var t=navigator.serviceWorker.controller;if(t&&r(t.scriptURL,this.t))return t},g.k=h((function(){var t=this;return function(t,e){try{var i=t()}catch(t){return e(t)}return i&&i.then?i.then(void 0,e):i}((function(){return l(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),g.j=function(t){n(t,{type:"WINDOW_READY",meta:"workbox-window"})},g.g=function(){var t=this.B.installing;this.o>0||!r(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},g.l=function(t){var e=this,i=t.target,n=i.state,s=i===this.W,a=s?"external":"",o={sw:i,originalEvent:t};!s&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new c(a+n,o)),"installed"===n?this._=setTimeout((function(){"installed"===n&&e.B.waiting===i&&e.dispatchEvent(new c(a+"waiting",o))}),200):"activating"===n&&(clearTimeout(this._),s||this.s.resolve(i))},g.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new c("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},g.v=function(t){var e=t.data;this.dispatchEvent(new c("message",{data:e,originalEvent:t}))},m=u,(p=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&s(m.prototype,p),u}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}())}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var a=e[n]={exports:{}};return t[n].call(a.exports,a,a.exports,i),a.exports}i.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return i.d(e,{a:e}),e},i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{"use strict";i.r(n);var t=i("./src/data/index.ts"),e=i("./src/sceneHandler/index.ts"),s=i("./src/constants/index.ts"),a=i("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),o=i("./src/Firebase/firebase-integration.ts"),r=i("./src/common/index.ts"),c=i("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(t){this.lang=t,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new o.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const e=await r.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),await this.loadTitleFeedbackCustomFont(),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const i=await(0,t.getData)();this.majVersion=i.majversion,this.minVersion=i.minversion,this.dataModal=this.createDataModal(i),this.globalInitialization(i),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)}));const n=localStorage.getItem(this.lang+"gamePlayedInfo"),a=n?JSON.parse(n).length-1:0,o=r.Debugger.DebugMode?s.PreviousPlayedLevel+this.lang+"Debug":s.PreviousPlayedLevel+this.lang;localStorage.setItem(o,a.toString()),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}async loadTitleFeedbackCustomFont(){const e=t.customFonts[this.lang]||t.customFonts.default,i=`'${e}', sans-serif`;await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((t=>{t&&(t.style.fontFamily=i)}))}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let i=parseInt(t);isNaN(i)||(e=Math.abs((new Date).getTime()-i))}const i=parseFloat((e?e/864e5:0).toFixed(3)),n={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:i};this.firebaseIntegration.sendSessionStartEvent(n)}logSessionEndFirebaseEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(s.IsCached);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const i=await caches.open("fontCache");if(!await i.match(e)){const t=await fetch(e),n=await t.blob();await i.put(e,new Response(n))}const n=new FontFace(t,`url(${e}) format('truetype')`);await n.load(),document.fonts.add(n)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const e=new a.Workbox("./sw.js",{});await e.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(t.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async t=>{if(!t.ok)return void console.error("Failed to fetch the content file from the server!");const e=await t.json(),i=e.majversion+"."+e.minversion,n=localStorage.getItem("version"+r.lang.toLowerCase());if(i&&n!=i){console.log("Content version mismatch! Reloading...");var a=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+r.lang);var o=a.filter((t=>!t.toString().includes(r.lang)));localStorage.setItem(s.IsCached,JSON.stringify(o)),localStorage.removeItem("version"+r.lang.toLowerCase()),caches.delete(r.lang),this.handleUpdateFoundMessage()}})).catch((t=>{console.error("Error fetching the content file: "+t)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(e){return new t.DataModal(e.title,e.OtherAudios,e.Levels,e.FeedbackTexts,e.RightToLeft,e.FeedbackAudios,e.majversion,e.minversion,e.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const e=Math.min(100,Math.max(0,t.data));e>this.currentProgress&&(this.currentProgress=e,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(t){return 100===t&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(s.IsCached,JSON.stringify(Array.from(this.is_cached.entries())))}catch(t){console.error("Error caching language:",t)}}sendCompletionEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(t)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(t){console.error("Error hiding loading screen:",t)}}handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,r.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=s.AUDIO_URL_PRELOAD;return new Promise(((e,i)=>{const n=t.map((t=>(new c.AudioPlayer).preloadGameAudio(t)));Promise.all(n).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),i(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,