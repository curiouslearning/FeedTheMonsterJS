/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var t={};function e(t,e){var i={},s=0,a=0;for(var n in t)a++;for(var n in t)i[n]=new Image,i[n].onload=function(){++s>=a&&e(i)},i[n].src=t[n]}t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();const i="pwa_installed_status",s="storePreviousPlayedLevel",a="is_cached",n="StartScene1",o="LevelSelection1",r="GameScene1",h="EndScene1",l={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"};class c{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return p.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in l)if(t.toLowerCase()===e)return l[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}const d=new URLSearchParams(window.location.search);var u=d.get("cr_user_id"),g=null==d.get("cr_lang")?"english":d.get("cr_lang");const m=c.getLanguageSpecificFont(g),p={DevelopmentLink:!!window.location.href.includes("https://feedthemonsterdev.curiouscontent.org"),DebugMode:!1};window.feedbackTextWorkerPath="./workers/feedback-text-worker.js";const v="./lang/"+g+"/ftm_"+g+".json";async function f(){return await fetch(v,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}class w{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,i,s,a,n,o,r,h){this.title=t,this.otherAudios=new b(e),this.levels=this.getLevels(i),this.FeedbackTexts=new y(s),this.FeedbackAudios=new S(n),this.rightToLeft=a,this.majVersion=o,this.minVersion=r,this.version=h}getLevels(t){let e=[];for(let i=0;i<t.length;i++)e.push(new I(t[i]));return e}}class b{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class y{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class S{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class I{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new E(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,i)=>{e.push(new x(t))})),e}}class x{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new C(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,i)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,i)=>{e.push(t.StoneText)})),e}}class C{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class E{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}const T="loadpuzzle",P="stonesdropped",k="click",L="visibilitychange";class D{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(P,this.handleStoneDroppedEvent,!1),document.addEventListener(T,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(P,this.handleStoneDroppedEvent,!1),document.removeEventListener(T,this.handleLoadPuzzleEvent,!1)}}class B extends D{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(t,i,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=i,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.changeToIdleAnimation(),this.imagesLoaded=!0,s&&s()}))}update(t){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=t,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(t){this.image.src=t}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}var A={bgImg:"./assets/images/bg_v01.jpg",hillImg:"./assets/images/hill_v01.png",pillerImg:"./assets/images/Totem_v02_v01.png",fenchImg:"./assets/images/fence_v01.png",autumnBgImg:"./assets/images/Autumn_bg_v01.jpg",autumnHillImg:"./assets/images/Autumn_hill_v01.png",autumnPillerImg:"./assets/images/Autumn_sign_v01.png",autumnSignImg:"./assets/images/Autumn_sign_v01.png",autumnFenceImg:"./assets/images/Autumn_fence_v01.png",winterBgImg:"./assets/images/Winter_bg_01.jpg",winterHillImg:"./assets/images/Winter_hill_v01.png",winterSignImg:"./assets/images/Winter_sign_v01.png",winterFenceImg:"./assets/images/Winter_fence_v01.png",winterPillerImg:"./assets/images/Winter_sign_v01.png"};class z{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,i,s,a){this.width=i,this.height=s,this.context=t,this.levelNumber=a,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),e(A,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}class M{audioContext;sourceNode;audioQueue;promptAudioBuffer;static audioBuffers=new Map;audioSourcs=[];constructor(){this.audioContext=N.getAudioContext(),this.sourceNode=null,this.audioQueue=[]}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(M.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&M.audioBuffers.set(t,e)}playAudio(t){const e=M.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};playButtonClickSound=t=>{const e=M.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((i=>{this.audioContext?.decodeAudioData(i,(i=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=i,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)};async loadAndDecodeAudio(t){return new Promise((async(e,i)=>{try{const i=await fetch(t),s=await i.arrayBuffer();e(await this.audioContext.decodeAudioData(s))}catch(t){console.error("Error loading or decoding audio:",t),i(t)}}))}}class N{static instance=null;static getAudioContext(){return N.instance||(N.instance=new(window.AudioContext||window.webkitAudioContext)),N.instance}}const O=function(t){const e=[];let i=0;for(let s=0;s<t.length;s++){let a=t.charCodeAt(s);a<128?e[i++]=a:a<2048?(e[i++]=a>>6|192,e[i++]=63&a|128):55296==(64512&a)&&s+1<t.length&&56320==(64512&t.charCodeAt(s+1))?(a=65536+((1023&a)<<10)+(1023&t.charCodeAt(++s)),e[i++]=a>>18|240,e[i++]=a>>12&63|128,e[i++]=a>>6&63|128,e[i++]=63&a|128):(e[i++]=a>>12|224,e[i++]=a>>6&63|128,e[i++]=63&a|128)}return e},F={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const i=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let e=0;e<t.length;e+=3){const a=t[e],n=e+1<t.length,o=n?t[e+1]:0,r=e+2<t.length,h=r?t[e+2]:0,l=a>>2,c=(3&a)<<4|o>>4;let d=(15&o)<<2|h>>6,u=63&h;r||(u=64,n||(d=64)),s.push(i[l],i[c],i[d],i[u])}return s.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(O(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let i=0,s=0;for(;i<t.length;){const a=t[i++];if(a<128)e[s++]=String.fromCharCode(a);else if(a>191&&a<224){const n=t[i++];e[s++]=String.fromCharCode((31&a)<<6|63&n)}else if(a>239&&a<365){const n=((7&a)<<18|(63&t[i++])<<12|(63&t[i++])<<6|63&t[i++])-65536;e[s++]=String.fromCharCode(55296+(n>>10)),e[s++]=String.fromCharCode(56320+(1023&n))}else{const n=t[i++],o=t[i++];e[s++]=String.fromCharCode((15&a)<<12|(63&n)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const i=e?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let e=0;e<t.length;){const a=i[t.charAt(e++)],n=e<t.length?i[t.charAt(e)]:0;++e;const o=e<t.length?i[t.charAt(e)]:64;++e;const r=e<t.length?i[t.charAt(e)]:64;if(++e,null==a||null==n||null==o||null==r)throw new j;const h=a<<2|n>>4;if(s.push(h),64!==o){const t=n<<4&240|o>>2;if(s.push(t),64!==r){const t=o<<6&192|r;s.push(t)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class j extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const W=function(t){return function(t){const e=O(t);return F.encodeByteArray(e,!0)}(t).replace(/\./g,"")},H=function(t){try{return F.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};const R=()=>function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==t.g)return t.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__,X=()=>{try{return R()||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&H(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},V=()=>{var t;return null===(t=X())||void 0===t?void 0:t.config};class ${constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,i)=>{e?this.reject(e):this.resolve(i),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,i))}}}function Y(){try{return"object"==typeof indexedDB}catch(t){return!1}}function U(){return new Promise(((t,e)=>{try{let i=!0;const s="validate-browser-context-for-indexeddb-analytics-module",a=self.indexedDB.open(s);a.onsuccess=()=>{a.result.close(),i||self.indexedDB.deleteDatabase(s),t(!0)},a.onupgradeneeded=()=>{i=!1},a.onerror=()=>{var t;e((null===(t=a.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}class G extends Error{constructor(t,e,i){super(e),this.code=t,this.customData=i,this.name="FirebaseError",Object.setPrototypeOf(this,G.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,q.prototype.create)}}class q{constructor(t,e,i){this.service=t,this.serviceName=e,this.errors=i}create(t,...e){const i=e[0]||{},s=`${this.service}/${t}`,a=this.errors[t],n=a?function(t,e){return t.replace(K,((t,i)=>{const s=e[i];return null!=s?String(s):`<${i}?>`}))}(a,i):"Error",o=`${this.serviceName}: ${n} (${s}).`;return new G(s,o,i)}}const K=/\{\$([^}]+)}/g;function J(t,e){if(t===e)return!0;const i=Object.keys(t),s=Object.keys(e);for(const a of i){if(!s.includes(a))return!1;const i=t[a],n=e[a];if(Q(i)&&Q(n)){if(!J(i,n))return!1}else if(i!==n)return!1}for(const t of s)if(!i.includes(t))return!1;return!0}function Q(t){return null!==t&&"object"==typeof t}const Z=1e3,tt=2,et=144e5,it=.5;function st(t,e=Z,i=tt){const s=e*Math.pow(i,t),a=Math.round(it*s*(Math.random()-.5)*2);return Math.min(et,s+a)}function at(t){return t&&t._delegate?t._delegate:t}class nt{constructor(t,e,i){this.name=t,this.instanceFactory=e,this.type=i,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const ot="[DEFAULT]";class rt{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new $;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const i=this.getOrInitializeService({instanceIdentifier:e});i&&t.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const i=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),s=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(i)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:i})}catch(t){if(s)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:ot})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const i=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:i});e.resolve(t)}catch(t){}}}}clearInstance(t=ot){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=ot){return this.instances.has(t)}getOptions(t=ot){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,i=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(i))throw Error(`${this.name}(${i}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:i,options:e});for(const[t,e]of this.instancesDeferred.entries()){i===this.normalizeInstanceIdentifier(t)&&e.resolve(s)}return s}onInit(t,e){var i;const s=this.normalizeInstanceIdentifier(e),a=null!==(i=this.onInitCallbacks.get(s))&&void 0!==i?i:new Set;a.add(t),this.onInitCallbacks.set(s,a);const n=this.instances.get(s);return n&&t(n,s),()=>{a.delete(t)}}invokeOnInitCallbacks(t,e){const i=this.onInitCallbacks.get(e);if(i)for(const s of i)try{s(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let i=this.instances.get(t);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(s=t,s===ot?void 0:s),options:e}),this.instances.set(t,i),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(i,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,i)}catch(t){}var s;return i||null}normalizeInstanceIdentifier(t=ot){return this.component?this.component.multipleInstances?t:ot:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class ht{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new rt(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}const lt=[];var ct;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(ct||(ct={}));const dt={debug:ct.DEBUG,verbose:ct.VERBOSE,info:ct.INFO,warn:ct.WARN,error:ct.ERROR,silent:ct.SILENT},ut=ct.INFO,gt={[ct.DEBUG]:"log",[ct.VERBOSE]:"log",[ct.INFO]:"info",[ct.WARN]:"warn",[ct.ERROR]:"error"},mt=(t,e,...i)=>{if(e<t.logLevel)return;const s=(new Date).toISOString(),a=gt[e];if(!a)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[a](`[${s}]  ${t.name}:`,...i)};class pt{constructor(t){this.name=t,this._logLevel=ut,this._logHandler=mt,this._userLogHandler=null,lt.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in ct))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?dt[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,ct.DEBUG,...t),this._logHandler(this,ct.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,ct.VERBOSE,...t),this._logHandler(this,ct.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,ct.INFO,...t),this._logHandler(this,ct.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,ct.WARN,...t),this._logHandler(this,ct.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,ct.ERROR,...t),this._logHandler(this,ct.ERROR,...t)}}const vt=(t,e)=>e.some((e=>t instanceof e));let ft,wt;const bt=new WeakMap,yt=new WeakMap,St=new WeakMap,It=new WeakMap,xt=new WeakMap;let Ct={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return yt.get(t);if("objectStoreNames"===e)return t.objectStoreNames||St.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return _t(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function Et(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(wt||(wt=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(Pt(this),e),_t(bt.get(this))}:function(...e){return _t(t.apply(Pt(this),e))}:function(e,...i){const s=t.call(Pt(this),e,...i);return St.set(s,e.sort?e.sort():[e]),_t(s)}}function Tt(t){return"function"==typeof t?Et(t):(t instanceof IDBTransaction&&function(t){if(yt.has(t))return;const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("complete",a),t.removeEventListener("error",n),t.removeEventListener("abort",n)},a=()=>{e(),s()},n=()=>{i(t.error||new DOMException("AbortError","AbortError")),s()};t.addEventListener("complete",a),t.addEventListener("error",n),t.addEventListener("abort",n)}));yt.set(t,e)}(t),vt(t,ft||(ft=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,Ct):t)}function _t(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("success",a),t.removeEventListener("error",n)},a=()=>{e(_t(t.result)),s()},n=()=>{i(t.error),s()};t.addEventListener("success",a),t.addEventListener("error",n)}));return e.then((e=>{e instanceof IDBCursor&&bt.set(e,t)})).catch((()=>{})),xt.set(e,t),e}(t);if(It.has(t))return It.get(t);const e=Tt(t);return e!==t&&(It.set(t,e),xt.set(e,t)),e}const Pt=t=>xt.get(t);const kt=["get","getKey","getAll","getAllKeys","count"],Lt=["put","add","delete","clear"],Dt=new Map;function Bt(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(Dt.get(e))return Dt.get(e);const i=e.replace(/FromIndex$/,""),s=e!==i,a=Lt.includes(i);if(!(i in(s?IDBIndex:IDBObjectStore).prototype)||!a&&!kt.includes(i))return;const n=async function(t,...e){const n=this.transaction(t,a?"readwrite":"readonly");let o=n.store;return s&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),a&&n.done]))[0]};return Dt.set(e,n),n}Ct=(t=>({...t,get:(e,i,s)=>Bt(e,i)||t.get(e,i,s),has:(e,i)=>!!Bt(e,i)||t.has(e,i)}))(Ct);class At{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const zt="@firebase/app",Mt="0.9.15",Nt=new pt("@firebase/app"),Ot="@firebase/app-compat",Ft="@firebase/analytics-compat",jt="@firebase/analytics",Wt="@firebase/app-check-compat",Ht="@firebase/app-check",Rt="@firebase/auth",Xt="@firebase/auth-compat",Vt="@firebase/database",$t="@firebase/database-compat",Yt="@firebase/functions",Ut="@firebase/functions-compat",Gt="@firebase/installations",qt="@firebase/installations-compat",Kt="@firebase/messaging",Jt="@firebase/messaging-compat",Qt="@firebase/performance",Zt="@firebase/performance-compat",te="@firebase/remote-config",ee="@firebase/remote-config-compat",ie="@firebase/storage",se="@firebase/storage-compat",ae="@firebase/firestore",ne="@firebase/firestore-compat",oe="firebase",re="[DEFAULT]",he={[zt]:"fire-core",[Ot]:"fire-core-compat",[jt]:"fire-analytics",[Ft]:"fire-analytics-compat",[Ht]:"fire-app-check",[Wt]:"fire-app-check-compat",[Rt]:"fire-auth",[Xt]:"fire-auth-compat",[Vt]:"fire-rtdb",[$t]:"fire-rtdb-compat",[Yt]:"fire-fn",[Ut]:"fire-fn-compat",[Gt]:"fire-iid",[qt]:"fire-iid-compat",[Kt]:"fire-fcm",[Jt]:"fire-fcm-compat",[Qt]:"fire-perf",[Zt]:"fire-perf-compat",[te]:"fire-rc",[ee]:"fire-rc-compat",[ie]:"fire-gcs",[se]:"fire-gcs-compat",[ae]:"fire-fst",[ne]:"fire-fst-compat","fire-js":"fire-js",[oe]:"fire-js-all"},le=new Map,ce=new Map;function de(t,e){try{t.container.addComponent(e)}catch(i){Nt.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,i)}}function ue(t){const e=t.name;if(ce.has(e))return Nt.debug(`There were multiple attempts to register component ${e}.`),!1;ce.set(e,t);for(const e of le.values())de(e,t);return!0}function ge(t,e){const i=t.container.getProvider("heartbeat").getImmediate({optional:!0});return i&&i.triggerHeartbeat(),t.container.getProvider(e)}const me=new q("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class pe{constructor(t,e,i){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=i,this.container.addComponent(new nt("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw me.create("app-deleted",{appName:this._name})}}function ve(t,e={}){let i=t;if("object"!=typeof e){e={name:e}}const s=Object.assign({name:re,automaticDataCollectionEnabled:!1},e),a=s.name;if("string"!=typeof a||!a)throw me.create("bad-app-name",{appName:String(a)});if(i||(i=V()),!i)throw me.create("no-options");const n=le.get(a);if(n){if(J(i,n.options)&&J(s,n.config))return n;throw me.create("duplicate-app",{appName:a})}const o=new ht(a);for(const t of ce.values())o.addComponent(t);const r=new pe(i,s,o);return le.set(a,r),r}function fe(t,e,i){var s;let a=null!==(s=he[t])&&void 0!==s?s:t;i&&(a+=`-${i}`);const n=a.match(/\s|\//),o=e.match(/\s|\//);if(n||o){const t=[`Unable to register library "${a}" with version "${e}":`];return n&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),n&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void Nt.warn(t.join(" "))}ue(new nt(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}const we="firebase-heartbeat-database",be=1,ye="firebase-heartbeat-store";let Se=null;function Ie(){return Se||(Se=function(t,e,{blocked:i,upgrade:s,blocking:a,terminated:n}={}){const o=indexedDB.open(t,e),r=_t(o);return s&&o.addEventListener("upgradeneeded",(t=>{s(_t(o.result),t.oldVersion,t.newVersion,_t(o.transaction),t)})),i&&o.addEventListener("blocked",(t=>i(t.oldVersion,t.newVersion,t))),r.then((t=>{n&&t.addEventListener("close",(()=>n())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),r}(we,be,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(ye)}}).catch((t=>{throw me.create("idb-open",{originalErrorMessage:t.message})}))),Se}async function xe(t,e){try{const i=(await Ie()).transaction(ye,"readwrite"),s=i.objectStore(ye);await s.put(e,Ce(t)),await i.done}catch(t){if(t instanceof G)Nt.warn(t.message);else{const e=me.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});Nt.warn(e.message)}}}function Ce(t){return`${t.name}!${t.options.appId}`}class Ee{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new _e(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=Te();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=Te(),{heartbeatsToSend:e,unsentEntries:i}=function(t,e=1024){const i=[];let s=t.slice();for(const a of t){const t=i.find((t=>t.agent===a.agent));if(t){if(t.dates.push(a.date),Pe(i)>e){t.dates.pop();break}}else if(i.push({agent:a.agent,dates:[a.date]}),Pe(i)>e){i.pop();break}s=s.slice(1)}return{heartbeatsToSend:i,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=W(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function Te(){return(new Date).toISOString().substring(0,10)}class _e{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!Y()&&U().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const t=await async function(t){try{const e=await Ie();return await e.transaction(ye).objectStore(ye).get(Ce(t))}catch(t){if(t instanceof G)Nt.warn(t.message);else{const e=me.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});Nt.warn(e.message)}}}(this.app);return t||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return xe(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return xe(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:[...i.heartbeats,...t.heartbeats]})}}}function Pe(t){return W(JSON.stringify({version:2,heartbeats:t})).length}var ke;ke="",ue(new nt("platform-logger",(t=>new At(t)),"PRIVATE")),ue(new nt("heartbeat",(t=>new Ee(t)),"PRIVATE")),fe(zt,Mt,ke),fe(zt,Mt,"esm2017"),fe("fire-js","");fe("firebase","10.1.0","app");const Le=(t,e)=>e.some((e=>t instanceof e));let De,Be;const Ae=new WeakMap,ze=new WeakMap,Me=new WeakMap,Ne=new WeakMap,Oe=new WeakMap;let Fe={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return ze.get(t);if("objectStoreNames"===e)return t.objectStoreNames||Me.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return He(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function je(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(Be||(Be=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(Re(this),e),He(Ae.get(this))}:function(...e){return He(t.apply(Re(this),e))}:function(e,...i){const s=t.call(Re(this),e,...i);return Me.set(s,e.sort?e.sort():[e]),He(s)}}function We(t){return"function"==typeof t?je(t):(t instanceof IDBTransaction&&function(t){if(ze.has(t))return;const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("complete",a),t.removeEventListener("error",n),t.removeEventListener("abort",n)},a=()=>{e(),s()},n=()=>{i(t.error||new DOMException("AbortError","AbortError")),s()};t.addEventListener("complete",a),t.addEventListener("error",n),t.addEventListener("abort",n)}));ze.set(t,e)}(t),Le(t,De||(De=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,Fe):t)}function He(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const s=()=>{t.removeEventListener("success",a),t.removeEventListener("error",n)},a=()=>{e(He(t.result)),s()},n=()=>{i(t.error),s()};t.addEventListener("success",a),t.addEventListener("error",n)}));return e.then((e=>{e instanceof IDBCursor&&Ae.set(e,t)})).catch((()=>{})),Oe.set(e,t),e}(t);if(Ne.has(t))return Ne.get(t);const e=We(t);return e!==t&&(Ne.set(t,e),Oe.set(e,t)),e}const Re=t=>Oe.get(t);const Xe=["get","getKey","getAll","getAllKeys","count"],Ve=["put","add","delete","clear"],$e=new Map;function Ye(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if($e.get(e))return $e.get(e);const i=e.replace(/FromIndex$/,""),s=e!==i,a=Ve.includes(i);if(!(i in(s?IDBIndex:IDBObjectStore).prototype)||!a&&!Xe.includes(i))return;const n=async function(t,...e){const n=this.transaction(t,a?"readwrite":"readonly");let o=n.store;return s&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),a&&n.done]))[0]};return $e.set(e,n),n}!function(t){Fe=t(Fe)}((t=>({...t,get:(e,i,s)=>Ye(e,i)||t.get(e,i,s),has:(e,i)=>!!Ye(e,i)||t.has(e,i)})));const Ue="@firebase/installations",Ge="0.6.4",qe=1e4,Ke=`w:${Ge}`,Je="FIS_v2",Qe="https://firebaseinstallations.googleapis.com/v1",Ze=36e5,ti=new q("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function ei(t){return t instanceof G&&t.code.includes("request-failed")}function ii({projectId:t}){return`${Qe}/projects/${t}/installations`}function si(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function ai(t,e){const i=(await e.json()).error;return ti.create("request-failed",{requestName:t,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})}function ni({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function oi(t,{refreshToken:e}){const i=ni(t);return i.append("Authorization",function(t){return`${Je} ${t}`}(e)),i}async function ri(t){const e=await t();return e.status>=500&&e.status<600?t():e}function hi(t){return new Promise((e=>{setTimeout(e,t)}))}const li=/^[cdef][\w-]{21}$/,ci="";function di(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(i=t,btoa(String.fromCharCode(...i)).replace(/\+/g,"-").replace(/\//g,"_"));var i;return e.substr(0,22)}(t);return li.test(e)?e:ci}catch(t){return ci}}function ui(t){return`${t.appName}!${t.appId}`}const gi=new Map;function mi(t,e){const i=ui(t);pi(i,e),function(t,e){const i=fi();i&&i.postMessage({key:t,fid:e});wi()}(i,e)}function pi(t,e){const i=gi.get(t);if(i)for(const t of i)t(e)}let vi=null;function fi(){return!vi&&"BroadcastChannel"in self&&(vi=new BroadcastChannel("[Firebase] FID Change"),vi.onmessage=t=>{pi(t.data.key,t.data.fid)}),vi}function wi(){0===gi.size&&vi&&(vi.close(),vi=null)}const bi="firebase-installations-database",yi=1,Si="firebase-installations-store";let Ii=null;function xi(){return Ii||(Ii=function(t,e,{blocked:i,upgrade:s,blocking:a,terminated:n}={}){const o=indexedDB.open(t,e),r=He(o);return s&&o.addEventListener("upgradeneeded",(t=>{s(He(o.result),t.oldVersion,t.newVersion,He(o.transaction))})),i&&o.addEventListener("blocked",(()=>i())),r.then((t=>{n&&t.addEventListener("close",(()=>n())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),r}(bi,yi,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(Si)}})),Ii}async function Ci(t,e){const i=ui(t),s=(await xi()).transaction(Si,"readwrite"),a=s.objectStore(Si),n=await a.get(i);return await a.put(e,i),await s.done,n&&n.fid===e.fid||mi(t,e.fid),e}async function Ei(t){const e=ui(t),i=(await xi()).transaction(Si,"readwrite");await i.objectStore(Si).delete(e),await i.done}async function Ti(t,e){const i=ui(t),s=(await xi()).transaction(Si,"readwrite"),a=s.objectStore(Si),n=await a.get(i),o=e(n);return void 0===o?await a.delete(i):await a.put(o,i),await s.done,!o||n&&n.fid===o.fid||mi(t,o.fid),o}async function _i(t){let e;const i=await Ti(t.appConfig,(i=>{const s=function(t){const e=t||{fid:di(),registrationStatus:0};return Li(e)}(i),a=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(ti.create("app-offline"))}}const i={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},s=async function(t,e){try{const i=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:i}){const s=ii(t),a=ni(t),n=e.getImmediate({optional:!0});if(n){const t=await n.getHeartbeatsHeader();t&&a.append("x-firebase-client",t)}const o={fid:i,authVersion:Je,appId:t.appId,sdkVersion:Ke},r={method:"POST",headers:a,body:JSON.stringify(o)},h=await ri((()=>fetch(s,r)));if(h.ok){const t=await h.json();return{fid:t.fid||i,registrationStatus:2,refreshToken:t.refreshToken,authToken:si(t.authToken)}}throw await ai("Create Installation",h)}(t,e);return Ci(t.appConfig,i)}catch(i){throw ei(i)&&409===i.customData.serverCode?await Ei(t.appConfig):await Ci(t.appConfig,{fid:e.fid,registrationStatus:0}),i}}(t,i);return{installationEntry:i,registrationPromise:s}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:Pi(t)}:{installationEntry:e}}(t,s);return e=a.registrationPromise,a.installationEntry}));return i.fid===ci?{installationEntry:await e}:{installationEntry:i,registrationPromise:e}}async function Pi(t){let e=await ki(t.appConfig);for(;1===e.registrationStatus;)await hi(100),e=await ki(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:i}=await _i(t);return i||e}return e}function ki(t){return Ti(t,(t=>{if(!t)throw ti.create("installation-not-found");return Li(t)}))}function Li(t){return 1===(e=t).registrationStatus&&e.registrationTime+qe<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function Di({appConfig:t,heartbeatServiceProvider:e},i){const s=function(t,{fid:e}){return`${ii(t)}/${e}/authTokens:generate`}(t,i),a=oi(t,i),n=e.getImmediate({optional:!0});if(n){const t=await n.getHeartbeatsHeader();t&&a.append("x-firebase-client",t)}const o={installation:{sdkVersion:Ke,appId:t.appId}},r={method:"POST",headers:a,body:JSON.stringify(o)},h=await ri((()=>fetch(s,r)));if(h.ok){return si(await h.json())}throw await ai("Generate Auth Token",h)}async function Bi(t,e=!1){let i;const s=await Ti(t.appConfig,(s=>{if(!zi(s))throw ti.create("not-registered");const a=s.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+Ze}(t)}(a))return s;if(1===a.requestStatus)return i=async function(t,e){let i=await Ai(t.appConfig);for(;1===i.authToken.requestStatus;)await hi(100),i=await Ai(t.appConfig);const s=i.authToken;return 0===s.requestStatus?Bi(t,e):s}(t,e),s;{if(!navigator.onLine)throw ti.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(s);return i=async function(t,e){try{const i=await Di(t,e),s=Object.assign(Object.assign({},e),{authToken:i});return await Ci(t.appConfig,s),i}catch(i){if(!ei(i)||401!==i.customData.serverCode&&404!==i.customData.serverCode){const i=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await Ci(t.appConfig,i)}else await Ei(t.appConfig);throw i}}(t,e),e}}));return i?await i:s.authToken}function Ai(t){return Ti(t,(t=>{if(!zi(t))throw ti.create("not-registered");const e=t.authToken;return 1===(i=e).requestStatus&&i.requestTime+qe<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var i}))}function zi(t){return void 0!==t&&2===t.registrationStatus}async function Mi(t,e=!1){const i=t;await async function(t){const{registrationPromise:e}=await _i(t);e&&await e}(i);return(await Bi(i,e)).token}function Ni(t){return ti.create("missing-app-config-values",{valueName:t})}const Oi="installations",Fi=t=>{const e=t.getProvider("app").getImmediate(),i=function(t){if(!t||!t.options)throw Ni("App Configuration");if(!t.name)throw Ni("App Name");const e=["projectId","apiKey","appId"];for(const i of e)if(!t.options[i])throw Ni(i);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:i,heartbeatServiceProvider:ge(e,"heartbeat"),_delete:()=>Promise.resolve()}},ji=t=>{const e=ge(t.getProvider("app").getImmediate(),Oi).getImmediate();return{getId:()=>async function(t){const e=t,{installationEntry:i,registrationPromise:s}=await _i(e);return s?s.catch(console.error):Bi(e).catch(console.error),i.fid}(e),getToken:t=>Mi(e,t)}};ue(new nt(Oi,Fi,"PUBLIC")),ue(new nt("installations-internal",ji,"PRIVATE")),fe(Ue,Ge),fe(Ue,Ge,"esm2017");const Wi="analytics",Hi="firebase_id",Ri="origin",Xi=6e4,Vi="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",$i="https://www.googletagmanager.com/gtag/js",Yi=new pt("@firebase/analytics"),Ui=new q("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."});function Gi(t){if(!t.startsWith($i)){const e=Ui.create("invalid-gtag-resource",{gtagURL:t});return Yi.warn(e.message),""}return t}function qi(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function Ki(t,e){const i=function(t,e){let i;return window.trustedTypes&&(i=window.trustedTypes.createPolicy(t,e)),i}("firebase-js-sdk-policy",{createScriptURL:Gi}),s=document.createElement("script"),a=`${$i}?l=${t}&id=${e}`;s.src=i?null==i?void 0:i.createScriptURL(a):a,s.async=!0,document.head.appendChild(s)}function Ji(t,e,i,s){return async function(a,...n){try{if("event"===a){const[s,a]=n;await async function(t,e,i,s,a){try{let n=[];if(a&&a.send_to){let t=a.send_to;Array.isArray(t)||(t=[t]);const s=await qi(i);for(const i of t){const t=s.find((t=>t.measurementId===i)),a=t&&e[t.appId];if(!a){n=[];break}n.push(a)}}0===n.length&&(n=Object.values(e)),await Promise.all(n),t("event",s,a||{})}catch(t){Yi.error(t)}}(t,e,i,s,a)}else if("config"===a){const[a,o]=n;await async function(t,e,i,s,a,n){const o=s[a];try{if(o)await e[o];else{const t=(await qi(i)).find((t=>t.measurementId===a));t&&await e[t.appId]}}catch(t){Yi.error(t)}t("config",a,n)}(t,e,i,s,a,o)}else if("consent"===a){const[e]=n;t("consent","update",e)}else if("get"===a){const[e,i,s]=n;t("get",e,i,s)}else if("set"===a){const[e]=n;t("set",e)}else t(a,...n)}catch(t){Yi.error(t)}}}const Qi=30;const Zi=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function ts(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function es(t,e=Zi,i){const{appId:s,apiKey:a,measurementId:n}=t.options;if(!s)throw Ui.create("no-app-id");if(!a){if(n)return{measurementId:n,appId:s};throw Ui.create("no-api-key")}const o=e.getThrottleMetadata(s)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new ss;return setTimeout((async()=>{r.abort()}),void 0!==i?i:Xi),is({appId:s,apiKey:a,measurementId:n},o,r,e)}async function is(t,{throttleEndTimeMillis:e,backoffCount:i},s,a=Zi){var n;const{appId:o,measurementId:r}=t;try{await function(t,e){return new Promise(((i,s)=>{const a=Math.max(e-Date.now(),0),n=setTimeout(i,a);t.addEventListener((()=>{clearTimeout(n),s(Ui.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(s,e)}catch(t){if(r)return Yi.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:o,measurementId:r};throw t}try{const e=await async function(t){var e;const{appId:i,apiKey:s}=t,a={method:"GET",headers:ts(s)},n=Vi.replace("{app-id}",i),o=await fetch(n,a);if(200!==o.status&&304!==o.status){let t="";try{const i=await o.json();(null===(e=i.error)||void 0===e?void 0:e.message)&&(t=i.error.message)}catch(t){}throw Ui.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return a.deleteThrottleMetadata(o),e}catch(e){const h=e;if(!function(t){if(!(t instanceof G&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h)){if(a.deleteThrottleMetadata(o),r)return Yi.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==h?void 0:h.message}]`),{appId:o,measurementId:r};throw e}const l=503===Number(null===(n=null==h?void 0:h.customData)||void 0===n?void 0:n.httpStatus)?st(i,a.intervalMillis,Qi):st(i,a.intervalMillis),c={throttleEndTimeMillis:Date.now()+l,backoffCount:i+1};return a.setThrottleMetadata(o,c),Yi.debug(`Calling attemptFetch again in ${l} millis`),is(t,c,s,a)}}class ss{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let as,ns;function os(t){ns=t}function rs(t){as=t}async function hs(t,e,i,s,a,n,o){var r;const h=es(t);h.then((e=>{i[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&Yi.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>Yi.error(t))),e.push(h);const l=async function(){if(!Y())return Yi.warn(Ui.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await U()}catch(t){return Yi.warn(Ui.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?s.getId():void 0)),[c,d]=await Promise.all([h,l]);(function(t){const e=window.document.getElementsByTagName("script");for(const i of Object.values(e))if(i.src&&i.src.includes($i)&&i.src.includes(t))return i;return null})(n)||Ki(n,c.measurementId),ns&&(a("consent","default",ns),os(void 0)),a("js",new Date);const u=null!==(r=null==o?void 0:o.config)&&void 0!==r?r:{};return u[Ri]="firebase",u.update=!0,null!=d&&(u[Hi]=d),a("config",c.measurementId,u),as&&(a("set",as),rs(void 0)),c.measurementId}class ls{constructor(t){this.app=t}_delete(){return delete cs[this.app.options.appId],Promise.resolve()}}let cs={},ds=[];const us={};let gs,ms,ps="dataLayer",vs="gtag",fs=!1;function ws(){const t=[];if(function(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}()&&t.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),i=Ui.create("invalid-analytics-context",{errorInfo:e});Yi.warn(i.message)}}function bs(t,e,i){ws();const s=t.options.appId;if(!s)throw Ui.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw Ui.create("no-api-key");Yi.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=cs[s])throw Ui.create("already-exists",{id:s});if(!fs){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(ps);const{wrappedGtag:t,gtagCore:e}=function(t,e,i,s,a){let n=function(...t){window[s].push(arguments)};return window[a]&&"function"==typeof window[a]&&(n=window[a]),window[a]=Ji(n,t,e,i),{gtagCore:n,wrappedGtag:window[a]}}(cs,ds,us,ps,vs);ms=t,gs=e,fs=!0}cs[s]=hs(t,ds,us,e,gs,ps,i);return new ls(t)}function ys(t=function(t=re){const e=le.get(t);if(!e&&t===re&&V())return ve();if(!e)throw me.create("no-app",{appName:t});return e}()){const e=ge(t=at(t),Wi);return e.isInitialized()?e.getImmediate():function(t,e={}){const i=ge(t,Wi);if(i.isInitialized()){const t=i.getImmediate();if(J(e,i.getOptions()))return t;throw Ui.create("already-initialized")}const s=i.initialize({options:e});return s}(t)}function Ss(t,e,i,s){t=at(t),async function(t,e,i,s,a){if(a&&a.global)t("event",i,s);else{const a=await e;t("event",i,Object.assign(Object.assign({},s),{send_to:a}))}}(ms,cs[t.app.options.appId],e,i,s).catch((t=>Yi.error(t)))}const Is="@firebase/analytics",xs="0.10.0";ue(new nt(Wi,((t,{options:e})=>bs(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),ue(new nt("analytics-internal",(function(t){try{const e=t.getProvider(Wi).getImmediate();return{logEvent:(t,i,s)=>Ss(e,t,i,s)}}catch(t){throw Ui.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),fe(Is,xs),fe(Is,xs,"esm2017");const Cs={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"};class Es{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(t,e){try{Ss(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&Ss(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}initializeFirebase(){try{this.firebaseApp=ve(Cs),this.analytics=ys(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}class Ts extends Es{static instance;constructor(){super()}static getInstance(){return Ts.instance||(Ts.instance=new Ts),Ts.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}class _s{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,i,s,a){this.posX=s,this.posY=a,this.context=t,this.canvas=i,this.firebaseIntegration=new Ts,this.init(),this.images={pause_button_image:"./assets/images/Play_button.png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await f();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const i=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),i<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:u,ftm_language:g,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}class Ps{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background1;audioPlayer;toggleBtn;pwa_install_status;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new B(this.canvas,4),this.switchSceneToLevelSelection=s,this.background1=new z(this.context,this.width,this.height,1),this.audioPlayer=new M,this.pwa_status=localStorage.getItem(i),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),Ps.SceneName=n,window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt)}devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(p.DebugMode=!0,this.toggleBtn.innerText="Dev"):(p.DebugMode=!1,this.toggleBtn.innerText="Dev")}))};animation=t=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),Ps.SceneName==n&&(this.background1.draw(),this.context.font=`${this.titleFont}px ${m}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(t),this.playButton.draw())};createPlayButton(){this.playButton=new _s(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var s=i.getBoundingClientRect();const a=t.clientX-s.left,n=t.clientY-s.top,{excludeX:o,excludeY:r}=c.getExcludedCoordinates(i,15);a<o&&n<r||(Ts.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom","user_clicked",{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data.title.length}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(i,"false")}}class ks{x;y;index;drawready;img;constructor(t,e,i){this.x=t,this.y=e,this.index=i,this.drawready=!1,this.img=new Image,this.img.src="./assets/images/mapIcon.png",this.img.onload=function(){}}}class Ls{static currentlanguage=g;static setGameLevelScore(t,e){let i=this.calculateStarCount(e),s={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:i};this.setTotalStarCount(i);let a=this.getAllGameLevelInfo(),n=-1;for(let t=0;t<a.length;t++)if(a[t].levelNumber===s.levelNumber){n=t;break}-1!==n&&s.score>a[n].score?a[n]=s:a.push(s),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(a))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return p.DebugMode?JSON.parse(localStorage.getItem(g+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(g+"Profile")||"{}")}}class Ds{canvas;data;levelButtonPos;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;constructor(t,i,a){this.canvas=t,this.data=i;let n=this;this.callBack=a,this.levelsSectionCount=n.data.levels.length/10>Math.floor(n.data.levels.length/10)?Math.floor(n.data.levels.length/10)+1:Math.floor(n.data.levels.length/10),this.initialiseButtonPos(),this.levels=[],this.firebaseIntegration=new Ts,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(this.levelButtonPos),this.gameLevelData=Ls.getAllGameLevelInfo(),this.callBack=a,this.audioPlayer=new M,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(p.DebugMode?localStorage.getItem(s+g+"Debug"):localStorage.getItem(s+g)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.images={mapIcon:"./assets/images/mapIcon.png",mapIconSpecial:"./assets/images/map_icon_monster_level_v01.png",mapLock:"./assets/images/mapLock.png",map:"./assets/images/map.jpg",star:"./assets/images/star.png",nextbtn:"./assets/images/next_btn.png",backbtn:"./assets/images/back_btn.png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/intro.mp3")})),this.addListeners()}async init(){const t=await f();this.majVersion=t.majversion,this.minVersion=t.minversion}initialiseButtonPos(){this.levelButtonPos=[[[this.canvas.width/10,this.canvas.height/10],[this.canvas.width/2.5,this.canvas.height/10],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/10],[this.canvas.width/10,this.canvas.height/3],[this.canvas.width/2.5,this.canvas.height/3],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/3],[this.canvas.width/10,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.8],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.3]]]}createLevelButtons(t){let e=t[0],i=0;for(let t=0;t<10;t++){let t=new ks(e[i][0],e[i][1],i+1);this.levels.push(t),i+=1}}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,i=t.touches[0].clientY,s=this.xDown-e,a=this.yDown-i;Math.abs(s)>Math.abs(a)&&(s>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;i>=.7*this.canvas.width&&i<.7*this.canvas.width+this.canvas.height/10&&s>this.canvas.height/1.3&&s<this.canvas.height/1.3+this.canvas.height/10&&this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)),i>=this.canvas.width/10&&i<this.canvas.width/10+this.canvas.height/10&&s>this.canvas.height/1.3&&s<this.canvas.height/1.3+this.canvas.height/10&&(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex));for(let t of this.levels)Math.sqrt((i-t.x-this.canvas.height/20)*(i-t.x-this.canvas.height/20)+(s-t.y-this.canvas.height/20)*(s-t.y-this.canvas.height/20))<45&&(p.DebugMode||t.index+this.levelSelectionPageIndex-1<=this.unlockLevelIndex+1)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.levelNumber=t.index+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber))};drawLevel(t,e){let i=e.height/5,s=i/6;const a=[5,13,20,30,42];if(t.index+this.levelSelectionPageIndex<=this.data.levels.length){const e=t.index+this.levelSelectionPageIndex,n=a.includes(e);this.context.drawImage(n?this.loadedImages.mapIconSpecial:this.loadedImages.mapIcon,t.x,t.y,n?.9*i:i,n?.9*i:i),this.context.fillStyle="white",this.context.font=s+`px ${m}, monospace`,this.context.textAlign="center",this.context.fillText(t.index+this.levelSelectionPageIndex,t.x+i/3.5,t.y+i/3),this.context.font=s-i/30+`px ${m}, monospace`,p.DebugMode&&this.context.fillText(this.data.levels[t.index+this.levelSelectionPageIndex-1].levelMeta.levelType,t.x+i/3.5,t.y+i/1.3)}}draw(){for(let t of this.levels)this.drawLevel(t,this.canvas)}downButton(t){let e=this.canvas.height/10;t!=10*this.levelsSectionCount-10&&this.context.drawImage(this.loadedImages.nextbtn,.7*this.canvas.width,this.canvas.height/1.3,e,e),0!=t&&this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/10,this.canvas.height/1.3,e,e)}drawStars(t){if(null!=t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber));for(let e of this.levels)if(e.index+this.levelSelectionPageIndex<=this.data.levels.length){p.DebugMode||e.index+this.levelSelectionPageIndex-1>this.unlockLevelIndex+1&&this.context.drawImage(this.loadedImages.mapLock,e.x,e.y,this.canvas.height/13,this.canvas.height/13);for(let i=0;i<t.length;i++)if(e.index-1+this.levelSelectionPageIndex==parseInt(t[i].levelNumber)){this.drawStar(e,this.canvas,t[i].starCount,this.context);break}}}}drawStar(t,e,i,s){let a=e.height/5;i>=1&&s.drawImage(this.loadedImages.star,t.x,t.y-.01*a,a/5,a/5),i>1&&s.drawImage(this.loadedImages.star,t.x+a/2.5,t.y-.01*a,a/5,a/5),3==i&&s.drawImage(this.loadedImages.star,t.x+a/5,t.y-.1*a,a/5,a/5)}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();let e={currentLevelData:this.data.levels[t],selectedLevelNumber:t};this.logSelectedLevelEvent(),this.callBack(e,"LevelSelection")}logSelectedLevelEvent(){const t={cr_user_id:u,ftm_language:g,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.map,0,0,this.canvas.width,this.canvas.height),this.draw(),this.downButton(this.levelSelectionPageIndex),this.drawStars(this.gameLevelData))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}class Bs{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,this.pause_button_image=new Image,this.pause_button_image.src="./assets/images/pause_v01.png",this.pause_button_image.onload=t=>{this.imagesLoaded=!0,this.pause_button_image=this.pause_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.pause_button_image,this.posX,this.posY,.09*this.canvas.height,.09*this.canvas.height)}onClick(t,e){if(Math.sqrt((t-this.posX-.09*this.canvas.height/2)*(t-this.posX-.09*this.canvas.height/2)+(e-this.posY-.09*this.canvas.height/2)*(e-this.posY-.09*this.canvas.height/2))<.09*this.canvas.height/2)return!0}}class As extends D{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,i,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=i,this.activeIndicators=s,this.images={level_indicator:"./assets/images/levels_v01.png",bar_empty:"./assets/images/bar_empty_v01.png",bar_full:"./assets/images/bar_full_v01.png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}class zs{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,this.cancel_button_image=new Image,this.cancel_button_image.src="./assets/images/close_btn.png",this.cancel_button_image.onload=t=>{this.imagesLoaded=!0,this.cancel_button_image=this.cancel_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.cancel_button_image,this.posX,this.posY,.15*this.canvas.width,.15*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}class Ms{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;constructor(t,e,i,s){this.posX=i,this.posY=s,this.context=t,this.canvas=e,this.close_button_image=new Image,this.close_button_image.src="./assets/images/map_btn.png",this.close_button_image.onload=t=>{this.imagesLoaded=!0,this.close_button_image=this.close_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.close_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}class Ns{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;constructor(t,e,i,s){this.posX=i,this.posY=s,this.context=t,this.canvas=e,this.retry_button_image=new Image,this.retry_button_image.src="./assets/images/retry_btn.png",this.retry_button_image.onload=t=>{this.imagesLoaded=!0,this.retry_button_image=this.retry_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.retry_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}class Os{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;constructor(t,e,i,s){this.posX=i,this.posY=s,this.context=t,this.canvas=e,this.yes_button_image=new Image,this.yes_button_image.src="./assets/images/confirm_btn.png",this.yes_button_image.onload=t=>{this.imagesLoaded=!0,this.yes_button_image=this.yes_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.yes_button_image,this.posX-5,this.posY,.2*this.canvas.width,.2*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}class Fs{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;constructor(t,e,i,s){this.posX=i,this.posY=s,this.context=t,this.canvas=e,this.no_button_image=new Image,this.no_button_image.src="./assets/images/close_btn.png",this.no_button_image.onload=t=>{this.imagesLoaded=!0,this.no_button_image=this.no_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.no_button_image,this.posX+5,this.posY+10,.18*this.canvas.width,.18*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}class js{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,i){this.canvas=t,this.yesCallback=e,this.noCallback=i,this.context=this.canvas.getContext("2d"),this.audioPlayer=new M,this.yesButton=new Os(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new Fs(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0}}addListner=()=>{this.canvas.addEventListener(k,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const s=t.clientX-i.left,a=t.clientY-i.top;this.yesButton.onClick(s,a)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(s,a)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="28px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};dispose=()=>{this.canvas.removeEventListener(k,this.handleMouseClick,!1)}}class Ws{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,i,s,a){this.canvas=t,this.callback=e,this.gameplayData=a,this.switchToLevelSelection=i,this.reloadScene=s;const n=document.getElementById("canvas");this.context=n.getContext("2d"),this.audioPlayer=new M,this.cancelButton=new zs(this.context,this.canvas),this.retryButton=new Ns(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new Ms(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0},this.retrySurePopup=new js(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new js(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(k,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const s=t.clientX-i.left,a=t.clientY-i.top;this.cancelButton.onClick(s,a)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(s,a)&&("english"==g?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(s,a)&&("english"==g?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==g&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==g&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};playAreYouSureSound=()=>{this.audioPlayer.playAudio("./assets/audios/are-you-sure.mp3")};dispose=()=>{document.getElementById("canvas").removeEventListener(k,this.handleMouseClick,!1)}}class Hs extends D{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,i,s,a){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=s,this.rightToLeft=a,this.currentPromptText=i.prompt.promptText,this.currentPuzzleData=i,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new M,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(L,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const s=t.clientX-i.left,a=t.clientY-i.top;this.onClick(s,a)&&this.playSound()};getPromptAudioUrl=()=>c.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(c.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var i=this.calculateFont();const s=this.promptImageWidth,a=this.promptImageHeight;if(this.context.font=`${i}px ${m}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var n=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(n).width/2,e),this.context.fillStyle="black",this.context.fillText(n,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,s/4,a/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let i=this.targetStones.length-1;i>=0;i--)this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[i],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[i],t,e)),t=t+this.context.measureText(this.targetStones[i]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,s/4,a/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-s),e=.33*(this.height-a);this.context.drawImage(this.promptPlayButton,t,e,s/4,a/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,s/4,a/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),i=this.promptImageWidth,s=this.promptImageHeight;var a=this.calculateFont();this.context.font=`${a}px ${m}, monospace`;let n=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var r=this.currentPuzzleData.targetStones[0].split("");for(let a=0;a<t.length;a++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){r.includes(t[a])?(r=r.slice(1,r.length),this.context.fillStyle="red",this.context.fillText(t[a],n,e)):(this.context.fillStyle="black",this.context.fillText(t[a],n,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>a||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(t[a],n,e)):(this.context.fillStyle="red",this.context.fillText(t[a],n,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,s/4)}o=(this.context.measureText(t[a]).width+this.context.measureText(t[a+1]).width)/2,n+=o}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,i=(this.width-t)/2,s=(this.height-e)/5;this.context.drawImage(this.prompt_image,i,s,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(L,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,"./assets/images/promptTextBg.png"),e=this.loadImage(this.promptPlayButton,"./assets/images/promptPlayButton.png");await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((i,s)=>{t.onload=()=>{i()},t.src=e,t.onerror=t=>{s(t)}}))}}class Rs{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,i,s,a,n,o,r,h){this.x=a,this.y=n,this.origx=a,this.origy=n,this.canvasWidth=e,this.canvasHeight=i,this.tutorialInstance=h,this.text=s,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/13?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+25)):(this.imageSize=this.canvasHeight/13,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,i,s)=>-i/2*(Math.cos(Math.PI*t/s)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(t){this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${m}, monospace`,this.context.textAlign="center",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}class Xs{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,i,s){this.width=e,this.height=i,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=s>=0?s:null,this.tutorialImg=new Image,this.tutorialImg.src="./assets/images/tutorial_hand.png",this.drawRipple=function(t){const e=t;if(!e)throw new Error("Canvas context is null");let i=0,s=0,a=10,n=10;return function(t,o,r){r&&(a=0,n=0),i=t,s=o,e.beginPath(),e.arc(i,s,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(i,s,n,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),a+=.5,n+=.5,(a>=60||n>=60)&&(a=10,n=10)}}(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,i){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const s=this.x-this.endx+this.absdx,a=this.y-this.endy+this.absdy;let n=100*Math.sqrt(s*s+a*a)/this.monsterStoneDifference;if(n<15)n>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(n>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,i,i),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,i,s){this.totalTime+=Math.floor(t);const a=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),n=this.tutorialImg.width*a,o=this.tutorialImg.height*a;this.context.drawImage(this.tutorialImg,e,i,n,o),!s&&this.drawRipple(e+.02*this.width,i+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,i,s){const a=(i-e)/2,n=Math.PI/s;return e+a*Math.sin(n*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,i=this.height/1.9+this.tutorialImg.height/.8,s=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let a;const n=this.endx;this.totalTime<e/2?(a=s+this.totalTime/(e/2)*(i-s),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.5,!0)):(a=i-(this.totalTime-e/2)/(e/2)*(i-s),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,n,a,this.tutorialImg.width,this.tutorialImg.height),a<=s&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return Ls.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return Ls.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}const Vs="./assets/audios/Eat.mp3",$s="GamePlay";class Ys extends D{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==Ls.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,i,s,a,n){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=i,this.levelData=s,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio("assets/audios/CorrectStoneFinal.mp3"),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(a),this.puzzleStartTime=new Date,this.tutorial=new Xs(t,e.width,e.height,i),this.stonebg=new Image,this.stonebg.src="./assets/images/stone_pink_v02.png",this.audioPlayer=new M,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new M,this.timerTickingInstance=n,document.addEventListener(L,this.handleVisibilityChange,!1)}createStones(t){const e=this.getFoilStones();for(let i=0;i<e.length;i++)e[i]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[i]),this.foilStones.push(new Rs(this.context,this.canvas.width,this.canvas.height,e[i],this.stonePos[i][0],this.stonePos[i][1],t,this.timerTickingInstance,i==e.length-1?this.tutorial:null))}draw(t){for(let e=0;e<this.foilStones.length;e++)this.foilStones[e].draw(t);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}isDroppedStoneCorrect(t){return t==this.correctTargetStone}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(L,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,i=!1){const s=i?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,s),s}processLetterDropFeedbackAudio(t,e){e?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,Vs,"./assets/audios/MonsterSpit.mp3",Math.round(Math.random())>0?"./assets/audios/Disapointed-05.mp3":null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=c.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,Vs,(t=>`./assets/audios/Cheering-0${t}.mp3`)(e),"assets/audios/PointsAdd.wav",c.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}}class Us extends D{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,i,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=i,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=s,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new M,this.playLevelEndAudioOnce=!0,this.images={timer_empty:"./assets/images/timer_empty.png",rotating_clock:"./assets/images/timer.png",timer_full:"./assets/images/timer_full.png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio("./assets/audios/timeout.mp3"),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,5,.09*this.height,.12*this.width,.06*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}class Gs{feedbackTextEffects;x;y;color;originX;originY;size;ease;constructor(t,e,i,s){this.feedbackTextEffects=t,this.x=Math.random()*this.feedbackTextEffects.canvasWidth,this.y=0,this.color=s,this.originX=e,this.originY=i,this.size=this.feedbackTextEffects.gap,this.ease=.1*Math.random()+.055}draw(){this.feedbackTextEffects.context.fillStyle=this.color,this.feedbackTextEffects.context.fillRect(this.x,this.y,this.size,this.size)}update(){this.x+=(this.originX-this.x)*this.ease,this.y+=this.originY-this.y}}class qs{context;canvasWidth;canvasHeight;textX;textY;fontSize;lineHeight;maxTextWidth;particleDuration;startTime;particles;gap;mouse;textWorker;constructor(t,e,i){this.context=t,this.canvasWidth=e,this.canvasHeight=i,this.textX=this.canvasWidth/1.8,this.textY=this.canvasHeight/2,this.fontSize=this.canvasWidth/7.5,this.lineHeight=.8*this.fontSize,this.maxTextWidth=5*this.canvasWidth,this.particleDuration=5e3,this.startTime=null,this.particles=[],this.gap=3,this.mouse={radius:2e3,x:0,y:0},this.textWorker=new Worker(window.feedbackTextWorkerPath),this.textWorker.addEventListener("message",this.handleTextWorkerMessage.bind(this))}wrapText(t){const e=this.context.createLinearGradient(0,0,this.canvasWidth,this.canvasHeight);e.addColorStop(.3,"#F8E218"),e.addColorStop(.5,"#F8E218"),e.addColorStop(.7,"#E39D37"),this.context.fillStyle=e,this.context.textAlign="center",this.context.textBaseline="middle",this.context.lineWidth=3,this.context.strokeStyle="#A46225",this.context.font=`${this.fontSize-.3*t.length}px ${m}, monospace`;let i=[],s=t.split(" "),a=0,n="";for(let t=0;t<s.length;t++){let e=n+s[t]+" ";this.context.measureText(e).width>this.maxTextWidth?(n=s[t]+" ",a++):n=e,i[a]=n}let o=this.lineHeight*a;this.textY=this.canvasHeight/4.2-o/2;t=t.trim(),i.forEach(((t,e)=>{let i=t.lastIndexOf(" ",t.lastIndexOf(" ")-1);if(this.fontSize*t.length>1.7*this.canvasWidth&&-1!=i){let s=t.slice(0,i),a=" "+t.slice(i+1);this.context.fillText(s,this.textX,this.textY+e*this.lineHeight),this.context.fillText(a,this.textX,this.textY+e*this.lineHeight+this.canvasHeight/12)}else this.context.fillText(t,this.textX,this.textY+e*this.lineHeight)})),this.convertToParticle()}handleTextWorkerMessage=t=>{const e=t.data;this.particles=e.map((({x:t,y:e,color:i})=>new Gs(this,t,e,i)))};convertToParticle(){const t=this.context.getImageData(0,0,this.canvasWidth,this.canvasHeight).data;this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.textWorker.postMessage({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,gap:this.gap,pixels:t})}render(){this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.particles.forEach((t=>{t.draw(),t.update()}))}updateParticles(){this.textWorker.postMessage({particles:this.particles,particleDuration:this.particleDuration,startTime:this.startTime})}clearParticle(){this.particles=[]}unregisterEventListener=()=>{this.textWorker.removeEventListener("message",this.handleTextWorkerMessage)}}class Ks{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background1;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;constructor(t,i,a,n,o,r,h,l,c,d,u){this.width=t.width,this.height=t.height,this.rightToLeft=o,this.canvas=t,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.monsterPhaseNumber=a||1,this.levelData=i,this.switchSceneToEnd=r,this.levelNumber=h,this.switchToLevelSelection=l,this.reloadScene=c,this.jsonVersionNumber=d,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new Bs(this.context,this.canvas),this.timerTicking=new Us(this.width,this.height,this.loadPuzzle),this.stoneHandler=new Ys(this.context,this.canvas,this.counter,this.levelData,u,this.timerTicking),this.tutorial=new Xs(this.context,t.width,t.height),this.promptText=new Hs(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new As(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new B(this.canvas,this.monsterPhaseNumber),this.pausePopup=new Ws(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:i,selectedLevelNumber:h}),this.background1=new z(this.context,this.width,this.height,this.levelData.levelNumber),this.firebaseIntegration=new Ts,this.feedBackTextCanavsElement=document.getElementById("feedback-text"),this.feedBackTextCanavsElement.height=this.height,this.feedBackTextCanavsElement.width=this.width,this.feedbackTextEffects=new qs(this.feedBackTextCanavsElement.getContext("2d",{willReadFrequently:!0}),this.width,this.height),this.audioPlayer=new M,this.handler=document.getElementById("canvas"),this.puzzleData=i.puzzles,this.feedBackTexts=n,this.images={pillerImg:"./assets/images/Totem_v02_v01.png",bgImg:"./assets/images/bg_v01.jpg",hillImg:"./assets/images/hill_v01.png",fenchImg:"./assets/images/fence_v01.png",profileMonster:"./assets/images/idle4.png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}));var m=this.levelData.levelMeta.levelNumber;p.DebugMode?localStorage.setItem(s+g+"Debug",m):localStorage.setItem(s+g,m),this.addEventListeners()}resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const i=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(i-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;if(Math.sqrt((i-this.monster.x-this.canvas.width/4)**2+(s-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(t,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;for(let t of this.stoneHandler.foilStones){if(Math.sqrt((i-t.x)**2+(s-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio("./assets/audios/onDrag.mp3");break}}};handleMouseMove=t=>{if(this.pickedStone){let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;this.monster.changeToDragAnimation(),this.pickedStone.x=i,this.pickedStone.y=s}};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;this.monster.onClick(i,s)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(i,s)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.pauseGamePlay()),this.promptText.onClick(i,s)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY})};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY})};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY})};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background1.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.monster.update(t),this.timerTicking.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||(this.feedbackTextEffects.render(),0==this.counter&&this.tutorial.clickOnMonsterTutorial(t)),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",this.handleTouchStart,!1),this.handler.addEventListener("touchmove",this.handleTouchMove,!1),this.handler.addEventListener("touchend",this.handleTouchEnd,!1),this.handler.addEventListener(k,this.handleMouseClick,!1),document.addEventListener(L,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(k,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.stonesCount=1;const e=void 0!==t;if(e&&this.logPuzzleEndFirebaseEvent(!1),this.removeEventListeners(),this.counter+=1,this.isGameStarted=!1,this.counter==this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),Ls.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(Ls.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(T,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.removeEventListeners(),this.feedbackTextEffects.unregisterEventListener(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(L,this.handleVisibilityChange,!1)};letterPuzzle(t){const e=this.getRandomInt(0,1),i=this.stoneHandler.isStoneLetterDropCorrect(t,e);i&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(i)}wordPuzzle(t,e){this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const i=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+t;const s=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,i,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&s)return this.handleCorrectStoneDrop(i),this.handleStoneDropEnd(s,"Word"),void(this.stonesCount=1);s?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==g?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,setTimeout((()=>{this.monster.changeToIdleAnimation()}),1500)):(this.handleStoneDropEnd(s,"Word"),this.stonesCount=1)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t)),this.feedBackTextCanavsElement.style.zIndex="2"};dispatchStoneDropEvent(t){const e=new CustomEvent(P,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,this.feedbackTextEffects.clearParticle(),this.feedBackTextCanavsElement.style.zIndex="0",document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(t,e){let i=Date.now();const s={cr_user_id:u,ftm_language:g,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(i-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(s)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:u,ftm_language:g,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:Ls.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.removeEventListeners(),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}class Js{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,i,s){this.canvas=document.getElementById("loading"),this.canvas.height=i,this.canvas.width=t,this.height=i,this.width=t,this.removeLoading=s,this.context=this.canvas.getContext("2d"),this.images={cloud6:"./assets/images/cloud_01.png",cloud7:"./assets/images/cloud_02.png",cloud8:"./assets/images/cloud_03.png"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}class Qs{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;constructor(t,e,i,s,a){this.posX=s,this.posY=a,this.context=t,this.width=e,this.height=i,this.next_button_image=new Image,this.next_button_image.src="./assets/images/next_btn.png",this.next_button_image.onload=t=>{this.imagesLoaded=!0,this.next_button_image=this.next_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.next_button_image,this.posX,this.posY,.19*this.width,.19*this.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.width/2)*(t-this.posX-.19*this.width/2)+(e-this.posY-.19*this.width/2)*(e-this.posY-.19*this.width/2))<.19*this.width/2)return!0}}class Zs{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(t,i,s,a,n,o,r,h,l,c){this.canvas=t,this.height=i,this.width=s,this.context=a,this.monster=new B(this.canvas,c,this.switchToReactionAnimation),this.background=new z(this.context,this.width,this.height,o),this.switchToGameplayCB=r,this.switchToLevelSelectionCB=h,this.data=l,this.starDrawnCount=0,this.closeButton=new Ms(a,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new Ns(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new Qs(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new M,this.starCount=n,this.currentLevel=o,this.images={backgroundImg:"./assets/images/WIN_screen_bg.png",star1Img:"./assets/images/pinStar1.png",star2Img:"./assets/images/pinStar2.png",star3Img:"./assets/images/pinStar3.png",winBackgroundImg:"./assets/images/bg_v01.jpg"},e(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new M}switchToReactionAnimation=()=>{this.starCount<=1?("visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/LevelLoseFanfare.mp3"),this.monster.changeToSpitAnimation()):("visible"===document.visibilityState&&(this.audioPlayer.playAudio("./assets/audios/LevelWinFanfare.mp3"),this.audioPlayer.playAudio("./assets/audios/intro.mp3")),this.monster.changeToEatAnimation())};draw(t){this.background.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(t),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(k,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,s=t.clientY-e.top;if(this.closeButton.onClick(i,s)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(i,s)){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let t={currentLevelData:this.data.levels[this.currentLevel],selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(t,"LevelEnd")}if(this.nextButton.onClick(i,s)&&this.starCount>=2){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let t=Number(this.currentLevel)+1,e={currentLevelData:this.data.levels[t],selectedLevelNumber:t};this.switchToGameplayCB(e,"LevelEnd")}};pauseAudios=()=>{"visible"===document.visibilityState?this.starCount>=2&&this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(k,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}class ta{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;pwa_install_status;toggleBtn;constructor(t,e){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("this.toggleBtn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new Ps(t,e,this.switchSceneToLevelSelection),ta.SceneName=n,this.loadingScreen=new Js(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),p.DebugMode=this.toggleBtn.classList.contains("on"),this.toggleBtn.innerText="Dev"}))}checkMonsterPhaseUpdation(){let t=Ls.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),ta.SceneName===n?this.startScene.animation(e):ta.SceneName===o?this.levelSelectionScene.drawLevelSelection():ta.SceneName===r?this.gameplayScene.draw(e):ta.SceneName===h&&this.levelEndScene.draw(e)};switchSceneToGameplay=(t,e)=>{this.showLoading(),this.dispose(e);let i=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new Ks(this.canvas,t.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,t.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection($s)}),this.switchSceneToGameplay,i,this.data.FeedbackAudios),ta.SceneName=r}),800)};switchSceneToEndLevel=(t,e,i,s)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose($s),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new Zs(this.canvas,this.height,this.width,this.context,t,i,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),ta.SceneName=h}),s?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new Ds(this.canvas,this.data,this.switchSceneToGameplay),ta.SceneName=o}),800)};dispose=t=>{"LevelSelection"==t?this.levelSelectionScene.dispose():t===$s?this.gameplayScene.dispose():"StartScene"===t?this.startScene.dispose():"LevelEnd"==t&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(i,"false")}}try{self["workbox:window:4.3.1"]&&_()}catch(ea){}var ea=function(t,e){return new Promise((function(i){var s=new MessageChannel;s.port1.onmessage=function(t){return i(t.data)},t.postMessage(e,[s.port2])}))};function ia(t,e){for(var i=0;i<e.length;i++){var s=e[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,s.key,s)}}function sa(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(ea){}var aa=function(){var t=this;this.promise=new Promise((function(e,i){t.resolve=e,t.reject=i}))},na=function(t,e){return new URL(t,location).href===new URL(e,location).href},oa=function(t,e){Object.assign(this,e,{type:t})};function ra(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function ha(t,e,i){return i?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function la(){}var ca=function(t){var e,i;function s(e,i){var s;return void 0===i&&(i={}),(s=t.call(this)||this).t=e,s.i=i,s.o=0,s.u=new aa,s.s=new aa,s.h=new aa,s.v=s.v.bind(sa(sa(s))),s.l=s.l.bind(sa(sa(s))),s.g=s.g.bind(sa(sa(s))),s.m=s.m.bind(sa(sa(s))),s}i=t,(e=s).prototype=Object.create(i.prototype),e.prototype.constructor=e,e.__proto__=i;var a,n,o=s.prototype;return o.register=ra((function(t){var e,i,s=this,a=(void 0===t?{}:t).immediate,n=void 0!==a&&a;return e=function(){return s.p=Boolean(navigator.serviceWorker.controller),s.P=s.R(),ha(s.k(),(function(t){s.B=t,s.P&&(s.O=s.P,s.s.resolve(s.P),s.h.resolve(s.P),s.j(s.P),s.P.addEventListener("statechange",s.l,{once:!0}));var e=s.B.waiting;return e&&na(e.scriptURL,s.t)&&(s.O=e,Promise.resolve().then((function(){s.dispatchEvent(new oa("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),s.O&&s.u.resolve(s.O),s.B.addEventListener("updatefound",s.g),navigator.serviceWorker.addEventListener("controllerchange",s.m,{once:!0}),"BroadcastChannel"in self&&(s.C=new BroadcastChannel("workbox"),s.C.addEventListener("message",s.v)),navigator.serviceWorker.addEventListener("message",s.v),s.B}))},(i=function(){if(!n&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(la):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&i.then?i.then(e):e()})),o.getSW=ra((function(){return this.O||this.u.promise})),o.messageSW=ra((function(t){return ha(this.getSW(),(function(e){return ea(e,t)}))})),o.R=function(){var t=navigator.serviceWorker.controller;if(t&&na(t.scriptURL,this.t))return t},o.k=ra((function(){var t=this;return function(t,e){try{var i=t()}catch(t){return e(t)}return i&&i.then?i.then(void 0,e):i}((function(){return ha(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),o.j=function(t){ea(t,{type:"WINDOW_READY",meta:"workbox-window"})},o.g=function(){var t=this.B.installing;this.o>0||!na(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},o.l=function(t){var e=this,i=t.target,s=i.state,a=i===this.W,n=a?"external":"",o={sw:i,originalEvent:t};!a&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new oa(n+s,o)),"installed"===s?this._=setTimeout((function(){"installed"===s&&e.B.waiting===i&&e.dispatchEvent(new oa(n+"waiting",o))}),200):"activating"===s&&(clearTimeout(this._),a||this.s.resolve(i))},o.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new oa("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},o.v=function(t){var e=t.data;this.dispatchEvent(new oa("message",{data:e,originalEvent:t}))},a=s,(n=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&ia(a.prototype,n),s}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}());new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;startSessionTime;firebaseIntegration;constructor(t){this.lang=t,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new Ts,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(L,this.handleVisibilityChange)}async init(){const t=c.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.registerWorkbox(),this.setupCanvas();const e=await f();this.majVersion=e.majversion,this.minVersion=e.minversion;const i=this.createDataModal(e);this.globalInitialization(e),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(i)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(i)}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let i=parseInt(t);isNaN(i)||(e=Math.abs((new Date).getTime()-i))}const i=parseFloat((e?e/864e5:0).toFixed(3)),s={cr_user_id:u,ftm_language:g,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:i};this.firebaseIntegration.sendSessionStartEvent(s)}logSessionEndFirebaseEvent(){const t={cr_user_id:u,ftm_language:g,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(a);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const i=await caches.open("fontCache");if(!await i.match(e)){const t=await fetch(e),s=await t.blob();await i.put(e,new Response(s))}const s=new FontFace(t,`url(${e}) format('truetype')`);await s.load(),document.fonts.add(s)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(g)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new ca("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)||this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1024?1024:window.innerWidth}createDataModal(t){return new w(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&p.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new ta(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new ta(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${t.data}%`),t.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(a,JSON.stringify(Array.from(this.is_cached.entries())));const e={cr_user_id:u,ftm_language:g,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(e),localStorage.setItem("version"+this.lang,t.version),window.location.reload()}this.progressBar.style.width=`${t.data}%`}};handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{"visible"===document.visibilityState?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent()};preloadGameAudios=async()=>{let t=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"];return new Promise(((e,i)=>{const s=t.map((t=>(new M).preloadGameAudio(t)));Promise.all(s).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),i(t)}))}))}}(g)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,