/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/@firebase/util/dist/index.esm2017.js":(e,t,s)=>{s.r(t),s.d(t,{CONSTANTS:()=>i,DecodeBase64StringError:()=>c,Deferred:()=>v,ErrorFactory:()=>z,FirebaseError:()=>N,MAX_VALUE_MILLIS:()=>fe,RANDOM_FACTOR:()=>pe,Sha1:()=>se,areCookiesEnabled:()=>O,assert:()=>a,assertionError:()=>n,async:()=>ne,base64:()=>r,base64Decode:()=>l,base64Encode:()=>h,base64urlEncodeWithoutPadding:()=>d,calculateBackoffMillis:()=>be,contains:()=>G,createMockUserToken:()=>w,createSubscribe:()=>ie,decode:()=>R,deepCopy:()=>x,deepEqual:()=>K,deepExtend:()=>u,errorPrefix:()=>ce,extractQuerystring:()=>te,getDefaultAppConfig:()=>p,getDefaultEmulatorHost:()=>m,getDefaultEmulatorHostnameAndPort:()=>f,getDefaults:()=>g,getExperimentalSetting:()=>b,getGlobal:()=>_,getModularInstance:()=>we,getUA:()=>y,isAdmin:()=>X,isBrowser:()=>E,isBrowserExtension:()=>T,isElectron:()=>P,isEmpty:()=>Y,isIE:()=>L,isIndexedDBAvailable:()=>B,isMobileCordova:()=>S,isNode:()=>I,isNodeSdk:()=>A,isReactNative:()=>C,isSafari:()=>D,isUWP:()=>k,isValidFormat:()=>V,isValidTimestamp:()=>W,issuedAtTime:()=>U,jsonEval:()=>F,map:()=>q,ordinal:()=>ve,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>ee,safeGet:()=>$,stringLength:()=>ue,stringToByteArray:()=>xe,stringify:()=>H,uuidv4:()=>_e,validateArgCount:()=>re,validateCallback:()=>de,validateContextObject:()=>le,validateIndexedDBOpenable:()=>M,validateNamespace:()=>he});const i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},a=function(e,t){if(!e)throw n(t)},n=function(e){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},o=function(e){const t=[];let s=0;for(let i=0;i<e.length;i++){let a=e.charCodeAt(i);a<128?t[s++]=a:a<2048?(t[s++]=a>>6|192,t[s++]=63&a|128):55296==(64512&a)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(a=65536+((1023&a)<<10)+(1023&e.charCodeAt(++i)),t[s++]=a>>18|240,t[s++]=a>>12&63|128,t[s++]=a>>6&63|128,t[s++]=63&a|128):(t[s++]=a>>12|224,t[s++]=a>>6&63|128,t[s++]=63&a|128)}return t},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const s=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const a=e[t],n=t+1<e.length,o=n?e[t+1]:0,r=t+2<e.length,c=r?e[t+2]:0,h=a>>2,d=(3&a)<<4|o>>4;let l=(15&o)<<2|c>>6,x=63&c;r||(x=64,n||(l=64)),i.push(s[h],s[d],s[l],s[x])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(o(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let s=0,i=0;for(;s<e.length;){const a=e[s++];if(a<128)t[i++]=String.fromCharCode(a);else if(a>191&&a<224){const n=e[s++];t[i++]=String.fromCharCode((31&a)<<6|63&n)}else if(a>239&&a<365){const n=((7&a)<<18|(63&e[s++])<<12|(63&e[s++])<<6|63&e[s++])-65536;t[i++]=String.fromCharCode(55296+(n>>10)),t[i++]=String.fromCharCode(56320+(1023&n))}else{const n=e[s++],o=e[s++];t[i++]=String.fromCharCode((15&a)<<12|(63&n)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const s=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const a=s[e.charAt(t++)],n=t<e.length?s[e.charAt(t)]:0;++t;const o=t<e.length?s[e.charAt(t)]:64;++t;const r=t<e.length?s[e.charAt(t)]:64;if(++t,null==a||null==n||null==o||null==r)throw new c;const h=a<<2|n>>4;if(i.push(h),64!==o){const e=n<<4&240|o>>2;if(i.push(e),64!==r){const e=o<<6&192|r;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class c extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const h=function(e){const t=o(e);return r.encodeByteArray(t,!0)},d=function(e){return h(e).replace(/\./g,"")},l=function(e){try{return r.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function x(e){return u(void 0,e)}function u(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const s in t)t.hasOwnProperty(s)&&"__proto__"!==s&&(e[s]=u(e[s],t[s]));return e}function _(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s.g)return s.g;throw new Error("Unable to locate global object.")}const g=()=>{try{return _().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&l(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},m=e=>{var t,s;return null===(s=null===(t=g())||void 0===t?void 0:t.emulatorHosts)||void 0===s?void 0:s[e]},f=e=>{const t=m(e);if(!t)return;const s=t.lastIndexOf(":");if(s<=0||s+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const i=parseInt(t.substring(s+1),10);return"["===t[0]?[t.substring(1,s-1),i]:[t.substring(0,s),i]},p=()=>{var e;return null===(e=g())||void 0===e?void 0:e.config},b=e=>{var t;return null===(t=g())||void 0===t?void 0:t[`_${e}`]};class v{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,s)=>{t?this.reject(t):this.resolve(s),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,s))}}}function w(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const s=t||"demo-project",i=e.iat||0,a=e.sub||e.user_id;if(!a)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const n=Object.assign({iss:`https://securetoken.google.com/${s}`,aud:s,iat:i,exp:i+3600,auth_time:i,sub:a,user_id:a,firebase:{sign_in_provider:"custom",identities:{}}},e);return[d(JSON.stringify({alg:"none",type:"JWT"})),d(JSON.stringify(n)),""].join(".")}function y(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function S(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(y())}function I(){var e;const t=null===(e=g())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(s.g.process)}catch(e){return!1}}function E(){return"object"==typeof self&&self.self===self}function T(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function P(){return y().indexOf("Electron/")>=0}function L(){const e=y();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function k(){return y().indexOf("MSAppHost/")>=0}function A(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN}function D(){return!I()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function B(){try{return"object"==typeof indexedDB}catch(e){return!1}}function M(){return new Promise(((e,t)=>{try{let s=!0;const i="validate-browser-context-for-indexeddb-analytics-module",a=self.indexedDB.open(i);a.onsuccess=()=>{a.result.close(),s||self.indexedDB.deleteDatabase(i),e(!0)},a.onupgradeneeded=()=>{s=!1},a.onerror=()=>{var e;t((null===(e=a.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}function O(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class N extends Error{constructor(e,t,s){super(t),this.code=e,this.customData=s,this.name="FirebaseError",Object.setPrototypeOf(this,N.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(e,t,s){this.service=e,this.serviceName=t,this.errors=s}create(e,...t){const s=t[0]||{},i=`${this.service}/${e}`,a=this.errors[e],n=a?function(e,t){return e.replace(j,((e,s)=>{const i=t[s];return null!=i?String(i):`<${s}?>`}))}(a,s):"Error",o=`${this.serviceName}: ${n} (${i}).`;return new N(i,o,s)}}const j=/\{\$([^}]+)}/g;function F(e){return JSON.parse(e)}function H(e){return JSON.stringify(e)}const R=function(e){let t={},s={},i={},a="";try{const n=e.split(".");t=F(l(n[0])||""),s=F(l(n[1])||""),a=n[2],i=s.d||{},delete s.d}catch(e){}return{header:t,claims:s,data:i,signature:a}},W=function(e){const t=R(e).claims,s=Math.floor((new Date).getTime()/1e3);let i=0,a=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?i=t.nbf:t.hasOwnProperty("iat")&&(i=t.iat),a=t.hasOwnProperty("exp")?t.exp:i+86400),!!s&&!!i&&!!a&&s>=i&&s<=a},U=function(e){const t=R(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},V=function(e){const t=R(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},X=function(e){const t=R(e).claims;return"object"==typeof t&&!0===t.admin};function G(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function $(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function Y(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function q(e,t,s){const i={};for(const a in e)Object.prototype.hasOwnProperty.call(e,a)&&(i[a]=t.call(s,e[a],a,e));return i}function K(e,t){if(e===t)return!0;const s=Object.keys(e),i=Object.keys(t);for(const a of s){if(!i.includes(a))return!1;const s=e[a],n=t[a];if(J(s)&&J(n)){if(!K(s,n))return!1}else if(s!==n)return!1}for(const e of i)if(!s.includes(e))return!1;return!0}function J(e){return null!==e&&"object"==typeof e}function Z(e,t=2e3){const s=new v;return setTimeout((()=>s.reject("timeout!")),t),e.then(s.resolve,s.reject),s.promise}function Q(e){const t=[];for(const[s,i]of Object.entries(e))Array.isArray(i)?i.forEach((e=>{t.push(encodeURIComponent(s)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(s)+"="+encodeURIComponent(i));return t.length?"&"+t.join("&"):""}function ee(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[s,i]=e.split("=");t[decodeURIComponent(s)]=decodeURIComponent(i)}})),t}function te(e){const t=e.indexOf("?");if(!t)return"";const s=e.indexOf("#",t);return e.substring(t,s>0?s:void 0)}class se{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const s=this.W_;if("string"==typeof e)for(let i=0;i<16;i++)s[i]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let i=0;i<16;i++)s[i]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=s[e-3]^s[e-8]^s[e-14]^s[e-16];s[e]=4294967295&(t<<1|t>>>31)}let i,a,n=this.chain_[0],o=this.chain_[1],r=this.chain_[2],c=this.chain_[3],h=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(i=c^o&(r^c),a=1518500249):(i=o^r^c,a=1859775393):e<60?(i=o&r|c&(o|r),a=2400959708):(i=o^r^c,a=3395469782);const t=(n<<5|n>>>27)+i+h+a+s[e]&4294967295;h=c,c=r,r=4294967295&(o<<30|o>>>2),o=n,n=t}this.chain_[0]=this.chain_[0]+n&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+c&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const s=t-this.blockSize;let i=0;const a=this.buf_;let n=this.inbuf_;for(;i<t;){if(0===n)for(;i<=s;)this.compress_(e,i),i+=this.blockSize;if("string"==typeof e){for(;i<t;)if(a[n]=e.charCodeAt(i),++n,++i,n===this.blockSize){this.compress_(a),n=0;break}}else for(;i<t;)if(a[n]=e[i],++n,++i,n===this.blockSize){this.compress_(a),n=0;break}}this.inbuf_=n,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let s=0;for(let t=0;t<5;t++)for(let i=24;i>=0;i-=8)e[s]=this.chain_[t]>>i&255,++s;return e}}function ie(e,t){const s=new ae(e,t);return s.subscribe.bind(s)}class ae{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,s){let i;if(void 0===e&&void 0===t&&void 0===s)throw new Error("Missing Observer.");i=function(e,t){if("object"!=typeof e||null===e)return!1;for(const s of t)if(s in e&&"function"==typeof e[s])return!0;return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:s},void 0===i.next&&(i.next=oe),void 0===i.error&&(i.error=oe),void 0===i.complete&&(i.complete=oe);const a=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?i.error(this.finalError):i.complete()}catch(e){}})),this.observers.push(i),a}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function ne(e,t){return(...s)=>{Promise.resolve(!0).then((()=>{e(...s)})).catch((e=>{t&&t(e)}))}}function oe(){}const re=function(e,t,s,i){let a;if(i<t?a="at least "+t:i>s&&(a=0===s?"none":"no more than "+s),a){throw new Error(e+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+a+".")}};function ce(e,t){return`${e} failed: ${t} argument `}function he(e,t,s){if((!s||t)&&"string"!=typeof t)throw new Error(ce(e,"namespace")+"must be a valid firebase namespace.")}function de(e,t,s,i){if((!i||s)&&"function"!=typeof s)throw new Error(ce(e,t)+"must be a valid function.")}function le(e,t,s,i){if((!i||s)&&("object"!=typeof s||null===s))throw new Error(ce(e,t)+"must be a valid context object.")}const xe=function(e){const t=[];let s=0;for(let i=0;i<e.length;i++){let n=e.charCodeAt(i);if(n>=55296&&n<=56319){const t=n-55296;i++,a(i<e.length,"Surrogate pair missing trail surrogate.");n=65536+(t<<10)+(e.charCodeAt(i)-56320)}n<128?t[s++]=n:n<2048?(t[s++]=n>>6|192,t[s++]=63&n|128):n<65536?(t[s++]=n>>12|224,t[s++]=n>>6&63|128,t[s++]=63&n|128):(t[s++]=n>>18|240,t[s++]=n>>12&63|128,t[s++]=n>>6&63|128,t[s++]=63&n|128)}return t},ue=function(e){let t=0;for(let s=0;s<e.length;s++){const i=e.charCodeAt(s);i<128?t++:i<2048?t+=2:i>=55296&&i<=56319?(t+=4,s++):t+=3}return t},_e=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},ge=1e3,me=2,fe=144e5,pe=.5;function be(e,t=ge,s=me){const i=t*Math.pow(s,e),a=Math.round(pe*i*(Math.random()-.5)*2);return Math.min(fe,i+a)}function ve(e){return Number.isFinite(e)?e+function(e){e=Math.abs(e);const t=e%100;if(t>=10&&t<=20)return"th";const s=e%10;if(1===s)return"st";if(2===s)return"nd";if(3===s)return"rd";return"th"}(e):`${e}`}function we(e){return e&&e._delegate?e._delegate:e}},"./global-variables.ts":(e,t,s)=>{s.r(t),s.d(t,{Debugger:()=>h,font:()=>c,lang:()=>r,pseudoId:()=>o});var i=s("./src/common/common.ts"),a=s("./src/common/utils.ts");const n=new URLSearchParams(window.location.search);var o=n.get("cr_user_id"),r=null==n.get("cr_lang")?"english":n.get("cr_lang");const c=a.Utils.getLanguageSpecificFont(r),h={DevelopmentLink:!!window.location.href.includes(i.DevelopmentServer),DebugMode:!1};window.feedbackTextWorkerPath="./workers/feedback-text-worker.js"},"./src/Firebase/base-firebase-integration.ts":(e,t,s)=>{s.r(t),s.d(t,{BaseFirebaseIntegration:()=>o});var i=s("./node_modules/firebase/app/dist/esm/index.esm.js"),a=s("./node_modules/firebase/analytics/dist/esm/index.esm.js"),n=s("./src/Firebase/firebase-config.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(e,t){try{(0,a.logEvent)(this.analytics,e,t)}catch(e){console.error("Error while logging custom event:",e)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,a.logEvent)(this.analytics,"session_end")}catch(e){console.error("Error while logging session_end event:",e)}}initializeFirebase(){try{this.firebaseApp=(0,i.initializeApp)(n.firebaseConfig),this.analytics=(0,a.getAnalytics)(this.firebaseApp)}catch(e){console.error("Error while initializing Firebase:",e)}}}},"./src/Firebase/firebase-config.ts":(e,t,s)=>{s.r(t),s.d(t,{firebaseConfig:()=>i});const i={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(e,t,s)=>{s.r(t),s.d(t,{FirebaseIntegration:()=>a});var i=s("./src/Firebase/base-firebase-integration.ts");class a extends i.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return a.instance||(a.instance=new a),a.instance}sendSessionStartEvent(e){this.customEvents("session_start",e)}sendSessionEndEvent(e){this.customEvents("session_end",e)}sendSelectedLevelEvent(e){this.customEvents("selected_level",e)}sendTappedStartEvent(e){this.customEvents("tapped_start",e)}sendPuzzleCompletedEvent(e){this.customEvents("puzzle_completed",e)}sendLevelCompletedEvent(e){this.customEvents("level_completed",e)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(e){this.customEvents("download_completed",e)}}},"./src/common/common.ts":(e,t,s)=>{function i(e,t){var s={},i=0,a=0;for(var n in e)a++;for(var n in e)s[n]=new Image,s[n].onload=function(){++i>=a&&t(s)},s[n].src=e[n]}s.r(t),s.d(t,{ButtonClick:()=>m,DevelopmentServer:()=>y,EndScene1:()=>T,FeedbackAudio:()=>u,FirebaseUserClicked:()=>a,FirebaseUserInstall:()=>n,GameScene1:()=>E,IntroMusic:()=>_,IsCached:()=>l,LevelEndAudio:()=>v,LevelSelection1:()=>I,MonsterAudio:()=>x,NativePlayButton:()=>c,PWAInstallStatus:()=>o,PhraseAudio:()=>b,PreviousPlayedLevel:()=>h,PromptAudio:()=>g,StartScene1:()=>S,StoneMusic:()=>p,StoreMonsterPhaseNumber:()=>d,TimeOver:()=>f,UrlSubstring:()=>w,UserCancelled:()=>r,loadImages:()=>i});const a="user_clicked",n="user_installed",o="pwa_installed_status",r="user_cancel_installation",c="native_playbutton_clicked",h="storePreviousPlayedLevel",d="storeMonsterPhaseNumber",l="is_cached",x="monster_audio",u="feedback_audio",_="intro_music",g="prompt_audio",m="button_click",f="time_over",p="stone_music",b="phrase_audio",v="level_end_audio",w="/feedthemonster",y="https://feedthemonsterdev.curiouscontent.org",S="StartScene1",I="LevelSelection1",E="GameScene1",T="EndScene1"},"./src/common/event-names.ts":(e,t,s)=>{s.r(t),s.d(t,{CLICK:()=>l,LOADPUZZLE:()=>i,MOUSEDOWN:()=>o,MOUSEMOVE:()=>n,MOUSEUP:()=>r,STONEDROP:()=>a,TOUCHEND:()=>d,TOUCHMOVE:()=>h,TOUCHSTART:()=>c,VISIBILITY_CHANGE:()=>x});const i="loadpuzzle",a="stonesdropped",n="mousemove",o="mousedown",r="mouseup",c="touchstart",h="touchmove",d="touchend",l="click",x="visibilitychange"},"./src/common/index.ts":(e,t,s)=>{s.r(t),s.d(t,{CLICK:()=>o.CLICK,LOADPUZZLE:()=>o.LOADPUZZLE,MOUSEDOWN:()=>o.MOUSEDOWN,MOUSEMOVE:()=>o.MOUSEMOVE,MOUSEUP:()=>o.MOUSEUP,PreviousPlayedLevel:()=>i.PreviousPlayedLevel,STONEDROP:()=>o.STONEDROP,StoneConfig:()=>a.StoneConfig,TOUCHEND:()=>o.TOUCHEND,TOUCHMOVE:()=>o.TOUCHMOVE,TOUCHSTART:()=>o.TOUCHSTART,Utils:()=>n.Utils,VISIBILITY_CHANGE:()=>o.VISIBILITY_CHANGE,loadImages:()=>i.loadImages});var i=s("./src/common/common.ts"),a=s("./src/common/stone-config.ts"),n=s("./src/common/utils.ts"),o=s("./src/common/event-names.ts")},"./src/common/level-config.ts":(e,t,s)=>{s.r(t),s.d(t,{LevelConfig:()=>i});class i{x;y;index;drawready;img;constructor(e,t,s){this.x=e,this.y=t,this.index=s,this.drawready=!1,this.img=new Image,this.img.src="./assets/images/mapIcon.png",this.img.onload=function(){}}}},"./src/common/stone-config.ts":(e,t,s)=>{s.r(t),s.d(t,{StoneConfig:()=>a});var i=s("./global-variables.ts");class a{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(e,t,s,i,a,n,o,r,c){this.x=a,this.y=n,this.origx=a,this.origy=n,this.canvasWidth=t,this.canvasHeight=s,this.tutorialInstance=c,this.text=i,this.img=o,this.context=e,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/13?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+25)):(this.imageSize=this.canvasHeight/13,this.textFontSize=this.canvasHeight/20)}getEase=(e,t,s,i)=>-s/2*(Math.cos(Math.PI*e/i)-1)+t;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(e){this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(e,this.img,this.imageSize)}}},"./src/common/utils.ts":(e,t,s)=>{s.r(t),s.d(t,{Utils:()=>n,createRippleEffect:()=>o});var i=s("./global-variables.ts"),a=s("./src/data/i18-font-mapping.ts");class n{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(e){return i.Debugger.DevelopmentLink?e.slice(0,e.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+e.slice(e.indexOf(this.UrlSubstring)+this.UrlSubstring.length):e}static getLanguageSpecificFont(e){const t=e.toLowerCase();for(const e in a.default)if(e.toLowerCase()===t)return a.default[e];return console.log(...c("2889805055_27_4_27_59_4",`Font not found for language: ${e}`)),"NotoSans-Regular"}static getRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}static getExcludedCoordinates(e,t){return{excludeX:e.width*(t/100),excludeY:e.height*(t/100)}}}function o(e){const t=e;if(!t)throw new Error("Canvas context is null");let s=0,i=0;let a=10,n=10;return function(e,o,r){r&&(a=0,n=0),s=e,i=o,t.beginPath(),t.arc(s,i,a,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),t.beginPath(),t.arc(s,i,n,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),a+=.5,n+=.5,(a>=60||n>=60)&&(a=10,n=10)}}function r(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';function _0x1469(){var _0x4d03cc=['RegExp','_capIfString','_hasSetOnItsPath','error','_regExpToString','toString','serialize','NEGATIVE_INFINITY','onopen','stackTraceLimit','_isSet','webpack','hits','8112504CrJyDS','elapsed','getOwnPropertyNames','value','_webSocketErrorDocsLink','_getOwnPropertyNames','map','Buffer','_getOwnPropertySymbols','url','[object\\x20Array]','66328wCqYOM','_objectToString','get','then','reduceLimits','eventReceivedCallback','strLength','ws://','root_exp','concat','test','indexOf','astro','String','127.0.0.1','_socket','_setNodeExpandableState','_setNodeQueryPath','autoExpandPreviousObjects','670EUGNhT','\\x20browser','close','_hasMapOnItsPath','root_exp_id','_reconnectTimeout','getOwnPropertySymbols','positiveInfinity','name','now','node','host','noFunctions','_addLoadNode','valueOf','getter','_consoleNinjaAllowedToStart','global','substr','count','https://tinyurl.com/37x8b79t','_type','port','onmessage','coverage','_connectAttemptCount','Map','data','bind','2602254xYkddA','_propertyName','','push','env','_maxConnectAttemptCount','send','origin','pathToFileURL','setter','time','HTMLAllCollection','props','autoExpandMaxDepth','ws/index.js','message','readyState','_p_','\\x20server','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','_inNextEdge','_treeNodePropertiesAfterFullValue','edge','_addObjectProperty','_quotedRegExp','number','_isArray','toUpperCase','sort','_WebSocketClass','symbol','_p_length','array','_treeNodePropertiesBeforeFullValue','perf_hooks','rootExpression','sortProps','constructor','_isPrimitiveType','process','1723728182075','totalStrLength','call','_addProperty','catch','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','parent','_allowedToSend','type','9LWsJqL','Number','versions','depth','_isPrimitiveWrapperType','getOwnPropertyDescriptor','capped','allStrLength','includes','isExpressionToEvaluate','[object\\x20Date]','console','unref','disabledLog','slice','Error','onclose','resolveGetters','trace','_property','_attemptToReconnectShortly','split','getWebSocketClass','replace','_ws','nodeModules','autoExpandPropertyCount','timeStamp','match','5376152oGGwGe','_sortProps','_setNodeExpressionPath',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.341\\\\node_modules\",'_inBrowser','angular','__es'+'Module','_isNegativeZero','7nuBxWq','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','_p_name','Set','_connected','charAt','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','log','_getOwnPropertyDescriptor','args','object','_numberRegExp','_console_ninja_session','next.js','stack','_WebSocket','25589355wQIQqJ','[object\\x20Map]','elements','hasOwnProperty','enumerable','hrtime','autoExpandLimit','forEach','_isMap','path','undefined','boolean','_connectToHostNow','location','gateway.docker.internal','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','date','dockerizedApp','toLowerCase','set','_addFunctionsNode','string','_disposeWebsocket','_sendErrorMessage','hostname','function','length','autoExpand','_allowedToConnectOnSend','_processTreeNodeResult','_console_ninja','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','_isUndefined','negativeZero','warn','_connecting','create','current','5555390SXyCKU','prototype','NEXT_RUNTIME','join','_setNodePermissions','default','_dateToString','nan','null','_HTMLAllCollection','WebSocket','1','_Symbol','Symbol','stringify','index','getPrototypeOf','performance','cappedProps','60591','[object\\x20Set]','42882TfRrMX','onerror','_setNodeLabel','_undefined','_blacklistedProperty','bigint','expressionsToEvaluate','level','44TVjVRq','_additionalMetadata'];_0x1469=function(){return _0x4d03cc;};return _0x1469();}function _0x1cff(_0xf80ee7,_0x522583){var _0x1469a9=_0x1469();return _0x1cff=function(_0x1cff71,_0x8f09a){_0x1cff71=_0x1cff71-0x70;var _0x4ee16f=_0x1469a9[_0x1cff71];return _0x4ee16f;},_0x1cff(_0xf80ee7,_0x522583);}var _0x3e2841=_0x1cff;(function(_0x15c2d1,_0x5bc950){var _0x17507b=_0x1cff,_0x231cbf=_0x15c2d1();while(!![]){try{var _0x1021b8=-parseInt(_0x17507b(0xc2))/0x1*(parseInt(_0x17507b(0xdc))/0x2)+-parseInt(_0x17507b(0x10c))/0x3+parseInt(_0x17507b(0x15a))/0x4+parseInt(_0x17507b(0xef))/0x5*(parseInt(_0x17507b(0xba))/0x6)+-parseInt(_0x17507b(0x162))/0x7*(parseInt(_0x17507b(0xd1))/0x8)+-parseInt(_0x17507b(0x13d))/0x9*(parseInt(_0x17507b(0xa5))/0xa)+parseInt(_0x17507b(0x7f))/0xb;if(_0x1021b8===_0x5bc950)break;else _0x231cbf['push'](_0x231cbf['shift']());}catch(_0x24cc05){_0x231cbf['push'](_0x231cbf['shift']());}}}(_0x1469,0xb2a9d));var j=Object[_0x3e2841(0xa3)],Q=Object['defineProperty'],G=Object[_0x3e2841(0x142)],ee=Object[_0x3e2841(0xd3)],te=Object[_0x3e2841(0xb5)],ne=Object[_0x3e2841(0xa6)][_0x3e2841(0x82)],re=(_0x581ffc,_0x99fd4a,_0x325131,_0x458754)=>{var _0x4c81e5=_0x3e2841;if(_0x99fd4a&&typeof _0x99fd4a==_0x4c81e5(0x79)||typeof _0x99fd4a==_0x4c81e5(0x98)){for(let _0x20361e of ee(_0x99fd4a))!ne[_0x4c81e5(0x136)](_0x581ffc,_0x20361e)&&_0x20361e!==_0x325131&&Q(_0x581ffc,_0x20361e,{'get':()=>_0x99fd4a[_0x20361e],'enumerable':!(_0x458754=G(_0x99fd4a,_0x20361e))||_0x458754[_0x4c81e5(0x83)]});}return _0x581ffc;},V=(_0x13aab0,_0x5c02ca,_0x3b0cf5)=>(_0x3b0cf5=_0x13aab0!=null?j(te(_0x13aab0)):{},re(_0x5c02ca||!_0x13aab0||!_0x13aab0[_0x3e2841(0x160)]?Q(_0x3b0cf5,_0x3e2841(0xaa),{'value':_0x13aab0,'enumerable':!0x0}):_0x3b0cf5,_0x13aab0)),q=class{constructor(_0x4d27c9,_0x3de3de,_0x1ce92b,_0xbf1465,_0x15c804,_0x10b829){var _0x1eb08f=_0x3e2841,_0x5dbad9,_0x388519,_0x57775e,_0x4587bc;this[_0x1eb08f(0x100)]=_0x4d27c9,this[_0x1eb08f(0xfa)]=_0x3de3de,this['port']=_0x1ce92b,this[_0x1eb08f(0x156)]=_0xbf1465,this[_0x1eb08f(0x90)]=_0x15c804,this['eventReceivedCallback']=_0x10b829,this[_0x1eb08f(0x13b)]=!0x0,this['_allowedToConnectOnSend']=!0x0,this[_0x1eb08f(0x73)]=!0x1,this[_0x1eb08f(0xa2)]=!0x1,this[_0x1eb08f(0x120)]=((_0x388519=(_0x5dbad9=_0x4d27c9[_0x1eb08f(0x133)])==null?void 0x0:_0x5dbad9[_0x1eb08f(0x110)])==null?void 0x0:_0x388519[_0x1eb08f(0xa7)])===_0x1eb08f(0x122),this[_0x1eb08f(0x15e)]=!((_0x4587bc=(_0x57775e=this['global'][_0x1eb08f(0x133)])==null?void 0x0:_0x57775e['versions'])!=null&&_0x4587bc['node'])&&!this['_inNextEdge'],this[_0x1eb08f(0x129)]=null,this[_0x1eb08f(0x108)]=0x0,this[_0x1eb08f(0x111)]=0x14,this['_webSocketErrorDocsLink']=_0x1eb08f(0x103),this['_sendErrorMessage']=(this['_inBrowser']?_0x1eb08f(0x139):_0x1eb08f(0x9e))+this['_webSocketErrorDocsLink'];}async[_0x3e2841(0x153)](){var _0x320028=_0x3e2841,_0x24c1f4,_0x98a190;if(this[_0x320028(0x129)])return this['_WebSocketClass'];let _0x13f7b8;if(this['_inBrowser']||this['_inNextEdge'])_0x13f7b8=this[_0x320028(0x100)][_0x320028(0xaf)];else{if((_0x24c1f4=this[_0x320028(0x100)][_0x320028(0x133)])!=null&&_0x24c1f4[_0x320028(0x7e)])_0x13f7b8=(_0x98a190=this[_0x320028(0x100)][_0x320028(0x133)])==null?void 0x0:_0x98a190[_0x320028(0x7e)];else try{let _0x3124bc=await import(_0x320028(0x88));_0x13f7b8=(await import((await import(_0x320028(0xda)))[_0x320028(0x114)](_0x3124bc[_0x320028(0xa8)](this[_0x320028(0x156)],_0x320028(0x11a)))[_0x320028(0xc9)]()))[_0x320028(0xaa)];}catch{try{_0x13f7b8=require(require('path')[_0x320028(0xa8)](this[_0x320028(0x156)],'ws'));}catch{throw new Error('failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket');}}}return this[_0x320028(0x129)]=_0x13f7b8,_0x13f7b8;}[_0x3e2841(0x8b)](){var _0x22a4ae=_0x3e2841;this[_0x22a4ae(0xa2)]||this[_0x22a4ae(0x73)]||this[_0x22a4ae(0x108)]>=this['_maxConnectAttemptCount']||(this[_0x22a4ae(0x9b)]=!0x1,this['_connecting']=!0x0,this[_0x22a4ae(0x108)]++,this[_0x22a4ae(0x155)]=new Promise((_0x3c8867,_0xe91044)=>{var _0x49f366=_0x22a4ae;this[_0x49f366(0x153)]()[_0x49f366(0xdf)](_0xee94e1=>{var _0x147b21=_0x49f366;let _0x3f2a33=new _0xee94e1(_0x147b21(0xe3)+(!this[_0x147b21(0x15e)]&&this[_0x147b21(0x90)]?_0x147b21(0x8d):this[_0x147b21(0xfa)])+':'+this[_0x147b21(0x105)]);_0x3f2a33['onerror']=()=>{var _0x45332f=_0x147b21;this[_0x45332f(0x13b)]=!0x1,this[_0x45332f(0x95)](_0x3f2a33),this[_0x45332f(0x151)](),_0xe91044(new Error('logger\\x20websocket\\x20error'));},_0x3f2a33[_0x147b21(0xcc)]=()=>{var _0x55bbf7=_0x147b21;this[_0x55bbf7(0x15e)]||_0x3f2a33['_socket']&&_0x3f2a33[_0x55bbf7(0xeb)][_0x55bbf7(0x149)]&&_0x3f2a33[_0x55bbf7(0xeb)][_0x55bbf7(0x149)](),_0x3c8867(_0x3f2a33);},_0x3f2a33[_0x147b21(0x14d)]=()=>{var _0x5deb54=_0x147b21;this[_0x5deb54(0x9b)]=!0x0,this['_disposeWebsocket'](_0x3f2a33),this[_0x5deb54(0x151)]();},_0x3f2a33[_0x147b21(0x106)]=_0x431318=>{var _0x2ecfc5=_0x147b21;try{if(!(_0x431318!=null&&_0x431318[_0x2ecfc5(0x10a)])||!this[_0x2ecfc5(0xe1)])return;let _0x5c82de=JSON['parse'](_0x431318['data']);this['eventReceivedCallback'](_0x5c82de['method'],_0x5c82de['args'],this['global'],this[_0x2ecfc5(0x15e)]);}catch{}};})[_0x49f366(0xdf)](_0x1e3cae=>(this[_0x49f366(0x73)]=!0x0,this[_0x49f366(0xa2)]=!0x1,this[_0x49f366(0x9b)]=!0x1,this[_0x49f366(0x13b)]=!0x0,this['_connectAttemptCount']=0x0,_0x1e3cae))['catch'](_0x258335=>(this[_0x49f366(0x73)]=!0x1,this[_0x49f366(0xa2)]=!0x1,console['warn']('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20'+this[_0x49f366(0xd5)]),_0xe91044(new Error(_0x49f366(0x11f)+(_0x258335&&_0x258335['message'])))));}));}[_0x3e2841(0x95)](_0x5927c4){var _0x1e436c=_0x3e2841;this['_connected']=!0x1,this[_0x1e436c(0xa2)]=!0x1;try{_0x5927c4[_0x1e436c(0x14d)]=null,_0x5927c4[_0x1e436c(0xbb)]=null,_0x5927c4['onopen']=null;}catch{}try{_0x5927c4[_0x1e436c(0x11c)]<0x2&&_0x5927c4[_0x1e436c(0xf1)]();}catch{}}['_attemptToReconnectShortly'](){var _0x3f5cfe=_0x3e2841;clearTimeout(this[_0x3f5cfe(0xf4)]),!(this['_connectAttemptCount']>=this[_0x3f5cfe(0x111)])&&(this['_reconnectTimeout']=setTimeout(()=>{var _0xfb7bb1=_0x3f5cfe,_0x13aac0;this[_0xfb7bb1(0x73)]||this['_connecting']||(this['_connectToHostNow'](),(_0x13aac0=this['_ws'])==null||_0x13aac0[_0xfb7bb1(0x138)](()=>this['_attemptToReconnectShortly']()));},0x1f4),this['_reconnectTimeout'][_0x3f5cfe(0x149)]&&this['_reconnectTimeout']['unref']());}async['send'](_0x54f023){var _0x23fb3b=_0x3e2841;try{if(!this[_0x23fb3b(0x13b)])return;this[_0x23fb3b(0x9b)]&&this['_connectToHostNow'](),(await this[_0x23fb3b(0x155)])[_0x23fb3b(0x112)](JSON[_0x23fb3b(0xb3)](_0x54f023));}catch(_0x4be3bd){console['warn'](this[_0x23fb3b(0x96)]+':\\x20'+(_0x4be3bd&&_0x4be3bd[_0x23fb3b(0x11b)])),this[_0x23fb3b(0x13b)]=!0x1,this[_0x23fb3b(0x151)]();}}};function X(_0x11abeb,_0x5ad1eb,_0x4a932e,_0x2eb2d8,_0x372150,_0x337815,_0x388d5e,_0x20dc6a=ie){var _0x3365c3=_0x3e2841;let _0x2b6023=_0x4a932e[_0x3365c3(0x152)](',')[_0x3365c3(0xd7)](_0x32d91d=>{var _0x4b7f79=_0x3365c3,_0x308f74,_0x59fd1a,_0x4520f2,_0x3a1319;try{if(!_0x11abeb[_0x4b7f79(0x7b)]){let _0x5deb2b=((_0x59fd1a=(_0x308f74=_0x11abeb['process'])==null?void 0x0:_0x308f74[_0x4b7f79(0x13f)])==null?void 0x0:_0x59fd1a[_0x4b7f79(0xf9)])||((_0x3a1319=(_0x4520f2=_0x11abeb['process'])==null?void 0x0:_0x4520f2[_0x4b7f79(0x110)])==null?void 0x0:_0x3a1319[_0x4b7f79(0xa7)])==='edge';(_0x372150==='next.js'||_0x372150==='remix'||_0x372150===_0x4b7f79(0xe8)||_0x372150===_0x4b7f79(0x15f))&&(_0x372150+=_0x5deb2b?_0x4b7f79(0x11e):_0x4b7f79(0xf0)),_0x11abeb['_console_ninja_session']={'id':+new Date(),'tool':_0x372150},_0x388d5e&&_0x372150&&!_0x5deb2b&&console[_0x4b7f79(0x76)]('%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20'+(_0x372150[_0x4b7f79(0x74)](0x0)[_0x4b7f79(0x127)]()+_0x372150[_0x4b7f79(0x101)](0x1))+',',_0x4b7f79(0x75),_0x4b7f79(0x8e));}let _0x593642=new q(_0x11abeb,_0x5ad1eb,_0x32d91d,_0x2eb2d8,_0x337815,_0x20dc6a);return _0x593642[_0x4b7f79(0x112)][_0x4b7f79(0x10b)](_0x593642);}catch(_0x117f91){return console[_0x4b7f79(0xa1)](_0x4b7f79(0x70),_0x117f91&&_0x117f91[_0x4b7f79(0x11b)]),()=>{};}});return _0x54c5ce=>_0x2b6023[_0x3365c3(0x86)](_0x1acd8c=>_0x1acd8c(_0x54c5ce));}function ie(_0x436b9f,_0x56a98e,_0x25463b,_0x531e09){var _0x4f4309=_0x3e2841;_0x531e09&&_0x436b9f==='reload'&&_0x25463b[_0x4f4309(0x8c)]['reload']();}function b(_0x155263){var _0x59599d=_0x3e2841,_0x428744,_0x560852;let _0x40d9b7=function(_0x3c6d78,_0x57d86e){return _0x57d86e-_0x3c6d78;},_0x11bc94;if(_0x155263[_0x59599d(0xb6)])_0x11bc94=function(){var _0x2d66c2=_0x59599d;return _0x155263['performance'][_0x2d66c2(0xf8)]();};else{if(_0x155263[_0x59599d(0x133)]&&_0x155263[_0x59599d(0x133)][_0x59599d(0x84)]&&((_0x560852=(_0x428744=_0x155263['process'])==null?void 0x0:_0x428744[_0x59599d(0x110)])==null?void 0x0:_0x560852[_0x59599d(0xa7)])!=='edge')_0x11bc94=function(){var _0xf84845=_0x59599d;return _0x155263[_0xf84845(0x133)][_0xf84845(0x84)]();},_0x40d9b7=function(_0x4fe944,_0x3e175e){return 0x3e8*(_0x3e175e[0x0]-_0x4fe944[0x0])+(_0x3e175e[0x1]-_0x4fe944[0x1])/0xf4240;};else try{let {performance:_0xfe8d4c}=require(_0x59599d(0x12e));_0x11bc94=function(){return _0xfe8d4c['now']();};}catch{_0x11bc94=function(){return+new Date();};}}return{'elapsed':_0x40d9b7,'timeStamp':_0x11bc94,'now':()=>Date[_0x59599d(0xf8)]()};}function H(_0x2900ff,_0xaa3b48,_0x57805c){var _0x4a5b5d=_0x3e2841,_0x152b7d,_0x194b6e,_0x4de839,_0x38b880,_0x42af90;if(_0x2900ff[_0x4a5b5d(0xff)]!==void 0x0)return _0x2900ff[_0x4a5b5d(0xff)];let _0x13858e=((_0x194b6e=(_0x152b7d=_0x2900ff[_0x4a5b5d(0x133)])==null?void 0x0:_0x152b7d['versions'])==null?void 0x0:_0x194b6e['node'])||((_0x38b880=(_0x4de839=_0x2900ff['process'])==null?void 0x0:_0x4de839[_0x4a5b5d(0x110)])==null?void 0x0:_0x38b880[_0x4a5b5d(0xa7)])===_0x4a5b5d(0x122);return _0x2900ff[_0x4a5b5d(0xff)]=_0x13858e||!_0xaa3b48||((_0x42af90=_0x2900ff[_0x4a5b5d(0x8c)])==null?void 0x0:_0x42af90[_0x4a5b5d(0x97)])&&_0xaa3b48[_0x4a5b5d(0x145)](_0x2900ff['location'][_0x4a5b5d(0x97)]),_0x2900ff['_consoleNinjaAllowedToStart'];}function J(_0xbb841f,_0x47d44e,_0x895fcc,_0x43f59d){var _0x43b85f=_0x3e2841;_0xbb841f=_0xbb841f,_0x47d44e=_0x47d44e,_0x895fcc=_0x895fcc,_0x43f59d=_0x43f59d;let _0x6fc306=b(_0xbb841f),_0x2506c2=_0x6fc306[_0x43b85f(0xd2)],_0x1bb66c=_0x6fc306['timeStamp'];class _0x5ec5fd{constructor(){var _0x1a3dd5=_0x43b85f;this['_keyStrRegExp']=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x1a3dd5(0x7a)]=/^(0|[1-9][0-9]*)$/,this[_0x1a3dd5(0x124)]=/'([^\\\\']|\\\\')*'/,this[_0x1a3dd5(0xbd)]=_0xbb841f['undefined'],this['_HTMLAllCollection']=_0xbb841f[_0x1a3dd5(0x117)],this[_0x1a3dd5(0x77)]=Object[_0x1a3dd5(0x142)],this[_0x1a3dd5(0xd6)]=Object['getOwnPropertyNames'],this[_0x1a3dd5(0xb1)]=_0xbb841f[_0x1a3dd5(0xb2)],this[_0x1a3dd5(0xc8)]=RegExp['prototype'][_0x1a3dd5(0xc9)],this[_0x1a3dd5(0xab)]=Date[_0x1a3dd5(0xa6)][_0x1a3dd5(0xc9)];}[_0x43b85f(0xca)](_0x4963e8,_0x1fe64d,_0x12a905,_0x431efd){var _0x29cac5=_0x43b85f,_0x59035e=this,_0x5d80ed=_0x12a905[_0x29cac5(0x9a)];function _0x525c2d(_0xbedfe2,_0x3c78ed,_0x5da5b3){var _0x21dc52=_0x29cac5;_0x3c78ed[_0x21dc52(0x13c)]='unknown',_0x3c78ed[_0x21dc52(0xc7)]=_0xbedfe2[_0x21dc52(0x11b)],_0x4ded3a=_0x5da5b3['node'][_0x21dc52(0xa4)],_0x5da5b3[_0x21dc52(0xf9)][_0x21dc52(0xa4)]=_0x3c78ed,_0x59035e['_treeNodePropertiesBeforeFullValue'](_0x3c78ed,_0x5da5b3);}try{_0x12a905['level']++,_0x12a905[_0x29cac5(0x9a)]&&_0x12a905['autoExpandPreviousObjects'][_0x29cac5(0x10f)](_0x1fe64d);var _0x278039,_0x166d5c,_0x2f19a6,_0x5aafb7,_0x4e12d5=[],_0x214f9a=[],_0x324a69,_0x42ab25=this['_type'](_0x1fe64d),_0x59c110=_0x42ab25===_0x29cac5(0x12c),_0x4870f6=!0x1,_0xa9bddc=_0x42ab25===_0x29cac5(0x98),_0x2a446=this[_0x29cac5(0x132)](_0x42ab25),_0x4600b1=this['_isPrimitiveWrapperType'](_0x42ab25),_0x1062c3=_0x2a446||_0x4600b1,_0x136d8e={},_0x5c62a9=0x0,_0x11a174=!0x1,_0x4ded3a,_0x5a7ba3=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x12a905[_0x29cac5(0x140)]){if(_0x59c110){if(_0x166d5c=_0x1fe64d['length'],_0x166d5c>_0x12a905[_0x29cac5(0x81)]){for(_0x2f19a6=0x0,_0x5aafb7=_0x12a905[_0x29cac5(0x81)],_0x278039=_0x2f19a6;_0x278039<_0x5aafb7;_0x278039++)_0x214f9a[_0x29cac5(0x10f)](_0x59035e[_0x29cac5(0x137)](_0x4e12d5,_0x1fe64d,_0x42ab25,_0x278039,_0x12a905));_0x4963e8['cappedElements']=!0x0;}else{for(_0x2f19a6=0x0,_0x5aafb7=_0x166d5c,_0x278039=_0x2f19a6;_0x278039<_0x5aafb7;_0x278039++)_0x214f9a[_0x29cac5(0x10f)](_0x59035e['_addProperty'](_0x4e12d5,_0x1fe64d,_0x42ab25,_0x278039,_0x12a905));}_0x12a905['autoExpandPropertyCount']+=_0x214f9a[_0x29cac5(0x99)];}if(!(_0x42ab25===_0x29cac5(0xad)||_0x42ab25===_0x29cac5(0x89))&&!_0x2a446&&_0x42ab25!==_0x29cac5(0xe9)&&_0x42ab25!==_0x29cac5(0xd8)&&_0x42ab25!==_0x29cac5(0xbf)){var _0x1c2485=_0x431efd[_0x29cac5(0x118)]||_0x12a905[_0x29cac5(0x118)];if(this['_isSet'](_0x1fe64d)?(_0x278039=0x0,_0x1fe64d['forEach'](function(_0x5967b3){var _0x8ce8cc=_0x29cac5;if(_0x5c62a9++,_0x12a905['autoExpandPropertyCount']++,_0x5c62a9>_0x1c2485){_0x11a174=!0x0;return;}if(!_0x12a905[_0x8ce8cc(0x146)]&&_0x12a905['autoExpand']&&_0x12a905[_0x8ce8cc(0x157)]>_0x12a905[_0x8ce8cc(0x85)]){_0x11a174=!0x0;return;}_0x214f9a[_0x8ce8cc(0x10f)](_0x59035e[_0x8ce8cc(0x137)](_0x4e12d5,_0x1fe64d,_0x8ce8cc(0x72),_0x278039++,_0x12a905,function(_0x1bfe71){return function(){return _0x1bfe71;};}(_0x5967b3)));})):this[_0x29cac5(0x87)](_0x1fe64d)&&_0x1fe64d['forEach'](function(_0x394325,_0x4fa7a2){var _0x3fbb1b=_0x29cac5;if(_0x5c62a9++,_0x12a905[_0x3fbb1b(0x157)]++,_0x5c62a9>_0x1c2485){_0x11a174=!0x0;return;}if(!_0x12a905[_0x3fbb1b(0x146)]&&_0x12a905[_0x3fbb1b(0x9a)]&&_0x12a905[_0x3fbb1b(0x157)]>_0x12a905['autoExpandLimit']){_0x11a174=!0x0;return;}var _0x3018ce=_0x4fa7a2[_0x3fbb1b(0xc9)]();_0x3018ce['length']>0x64&&(_0x3018ce=_0x3018ce[_0x3fbb1b(0x14b)](0x0,0x64)+'...'),_0x214f9a[_0x3fbb1b(0x10f)](_0x59035e[_0x3fbb1b(0x137)](_0x4e12d5,_0x1fe64d,_0x3fbb1b(0x109),_0x3018ce,_0x12a905,function(_0x5e763e){return function(){return _0x5e763e;};}(_0x394325)));}),!_0x4870f6){try{for(_0x324a69 in _0x1fe64d)if(!(_0x59c110&&_0x5a7ba3[_0x29cac5(0xe6)](_0x324a69))&&!this[_0x29cac5(0xbe)](_0x1fe64d,_0x324a69,_0x12a905)){if(_0x5c62a9++,_0x12a905[_0x29cac5(0x157)]++,_0x5c62a9>_0x1c2485){_0x11a174=!0x0;break;}if(!_0x12a905['isExpressionToEvaluate']&&_0x12a905[_0x29cac5(0x9a)]&&_0x12a905[_0x29cac5(0x157)]>_0x12a905[_0x29cac5(0x85)]){_0x11a174=!0x0;break;}_0x214f9a[_0x29cac5(0x10f)](_0x59035e[_0x29cac5(0x123)](_0x4e12d5,_0x136d8e,_0x1fe64d,_0x42ab25,_0x324a69,_0x12a905));}}catch{}if(_0x136d8e[_0x29cac5(0x12b)]=!0x0,_0xa9bddc&&(_0x136d8e[_0x29cac5(0x71)]=!0x0),!_0x11a174){var _0x211be3=[][_0x29cac5(0xe5)](this['_getOwnPropertyNames'](_0x1fe64d))[_0x29cac5(0xe5)](this[_0x29cac5(0xd9)](_0x1fe64d));for(_0x278039=0x0,_0x166d5c=_0x211be3[_0x29cac5(0x99)];_0x278039<_0x166d5c;_0x278039++)if(_0x324a69=_0x211be3[_0x278039],!(_0x59c110&&_0x5a7ba3[_0x29cac5(0xe6)](_0x324a69[_0x29cac5(0xc9)]()))&&!this[_0x29cac5(0xbe)](_0x1fe64d,_0x324a69,_0x12a905)&&!_0x136d8e[_0x29cac5(0x11d)+_0x324a69[_0x29cac5(0xc9)]()]){if(_0x5c62a9++,_0x12a905[_0x29cac5(0x157)]++,_0x5c62a9>_0x1c2485){_0x11a174=!0x0;break;}if(!_0x12a905[_0x29cac5(0x146)]&&_0x12a905[_0x29cac5(0x9a)]&&_0x12a905[_0x29cac5(0x157)]>_0x12a905[_0x29cac5(0x85)]){_0x11a174=!0x0;break;}_0x214f9a[_0x29cac5(0x10f)](_0x59035e[_0x29cac5(0x123)](_0x4e12d5,_0x136d8e,_0x1fe64d,_0x42ab25,_0x324a69,_0x12a905));}}}}}if(_0x4963e8[_0x29cac5(0x13c)]=_0x42ab25,_0x1062c3?(_0x4963e8[_0x29cac5(0xd4)]=_0x1fe64d[_0x29cac5(0xfd)](),this['_capIfString'](_0x42ab25,_0x4963e8,_0x12a905,_0x431efd)):_0x42ab25===_0x29cac5(0x8f)?_0x4963e8['value']=this['_dateToString'][_0x29cac5(0x136)](_0x1fe64d):_0x42ab25===_0x29cac5(0xbf)?_0x4963e8['value']=_0x1fe64d['toString']():_0x42ab25===_0x29cac5(0xc4)?_0x4963e8['value']=this[_0x29cac5(0xc8)][_0x29cac5(0x136)](_0x1fe64d):_0x42ab25===_0x29cac5(0x12a)&&this['_Symbol']?_0x4963e8[_0x29cac5(0xd4)]=this[_0x29cac5(0xb1)]['prototype'][_0x29cac5(0xc9)][_0x29cac5(0x136)](_0x1fe64d):!_0x12a905[_0x29cac5(0x140)]&&!(_0x42ab25===_0x29cac5(0xad)||_0x42ab25===_0x29cac5(0x89))&&(delete _0x4963e8['value'],_0x4963e8['capped']=!0x0),_0x11a174&&(_0x4963e8[_0x29cac5(0xb7)]=!0x0),_0x4ded3a=_0x12a905[_0x29cac5(0xf9)][_0x29cac5(0xa4)],_0x12a905[_0x29cac5(0xf9)]['current']=_0x4963e8,this[_0x29cac5(0x12d)](_0x4963e8,_0x12a905),_0x214f9a[_0x29cac5(0x99)]){for(_0x278039=0x0,_0x166d5c=_0x214f9a[_0x29cac5(0x99)];_0x278039<_0x166d5c;_0x278039++)_0x214f9a[_0x278039](_0x278039);}_0x4e12d5['length']&&(_0x4963e8[_0x29cac5(0x118)]=_0x4e12d5);}catch(_0x1b2c44){_0x525c2d(_0x1b2c44,_0x4963e8,_0x12a905);}return this[_0x29cac5(0xc3)](_0x1fe64d,_0x4963e8),this[_0x29cac5(0x121)](_0x4963e8,_0x12a905),_0x12a905[_0x29cac5(0xf9)][_0x29cac5(0xa4)]=_0x4ded3a,_0x12a905[_0x29cac5(0xc1)]--,_0x12a905[_0x29cac5(0x9a)]=_0x5d80ed,_0x12a905['autoExpand']&&_0x12a905['autoExpandPreviousObjects']['pop'](),_0x4963e8;}[_0x43b85f(0xd9)](_0x1ee1c3){var _0x28176e=_0x43b85f;return Object[_0x28176e(0xf5)]?Object[_0x28176e(0xf5)](_0x1ee1c3):[];}[_0x43b85f(0xce)](_0x31b17b){var _0x1d784f=_0x43b85f;return!!(_0x31b17b&&_0xbb841f['Set']&&this[_0x1d784f(0xdd)](_0x31b17b)===_0x1d784f(0xb9)&&_0x31b17b[_0x1d784f(0x86)]);}[_0x43b85f(0xbe)](_0x5abea4,_0x5dad6d,_0x2f2beb){var _0x3bd9c6=_0x43b85f;return _0x2f2beb[_0x3bd9c6(0xfb)]?typeof _0x5abea4[_0x5dad6d]==_0x3bd9c6(0x98):!0x1;}[_0x43b85f(0x104)](_0x273730){var _0x5b9ca2=_0x43b85f,_0x125c2c='';return _0x125c2c=typeof _0x273730,_0x125c2c==='object'?this[_0x5b9ca2(0xdd)](_0x273730)==='[object\\x20Array]'?_0x125c2c='array':this[_0x5b9ca2(0xdd)](_0x273730)===_0x5b9ca2(0x147)?_0x125c2c=_0x5b9ca2(0x8f):this[_0x5b9ca2(0xdd)](_0x273730)==='[object\\x20BigInt]'?_0x125c2c=_0x5b9ca2(0xbf):_0x273730===null?_0x125c2c=_0x5b9ca2(0xad):_0x273730[_0x5b9ca2(0x131)]&&(_0x125c2c=_0x273730[_0x5b9ca2(0x131)][_0x5b9ca2(0xf7)]||_0x125c2c):_0x125c2c===_0x5b9ca2(0x89)&&this['_HTMLAllCollection']&&_0x273730 instanceof this[_0x5b9ca2(0xae)]&&(_0x125c2c=_0x5b9ca2(0x117)),_0x125c2c;}[_0x43b85f(0xdd)](_0x57e457){var _0x23534d=_0x43b85f;return Object[_0x23534d(0xa6)][_0x23534d(0xc9)]['call'](_0x57e457);}[_0x43b85f(0x132)](_0x3ee783){var _0x44a961=_0x43b85f;return _0x3ee783===_0x44a961(0x8a)||_0x3ee783===_0x44a961(0x94)||_0x3ee783===_0x44a961(0x125);}[_0x43b85f(0x141)](_0x3bd26b){var _0x41e2c0=_0x43b85f;return _0x3bd26b==='Boolean'||_0x3bd26b==='String'||_0x3bd26b===_0x41e2c0(0x13e);}[_0x43b85f(0x137)](_0x38a122,_0x431ca1,_0x4d29a9,_0x572db0,_0x3d38a3,_0x52c042){var _0x2bfdb6=this;return function(_0x424ef3){var _0x1f92f4=_0x1cff,_0xbdeedd=_0x3d38a3[_0x1f92f4(0xf9)][_0x1f92f4(0xa4)],_0x24a238=_0x3d38a3[_0x1f92f4(0xf9)][_0x1f92f4(0xb4)],_0x295f2f=_0x3d38a3[_0x1f92f4(0xf9)]['parent'];_0x3d38a3[_0x1f92f4(0xf9)][_0x1f92f4(0x13a)]=_0xbdeedd,_0x3d38a3[_0x1f92f4(0xf9)][_0x1f92f4(0xb4)]=typeof _0x572db0==_0x1f92f4(0x125)?_0x572db0:_0x424ef3,_0x38a122['push'](_0x2bfdb6['_property'](_0x431ca1,_0x4d29a9,_0x572db0,_0x3d38a3,_0x52c042)),_0x3d38a3['node'][_0x1f92f4(0x13a)]=_0x295f2f,_0x3d38a3[_0x1f92f4(0xf9)]['index']=_0x24a238;};}[_0x43b85f(0x123)](_0x2fbac1,_0x4a86df,_0x3a8c91,_0xbec521,_0x394443,_0x24271c,_0x79ea95){var _0x12df4f=_0x43b85f,_0x34e98e=this;return _0x4a86df[_0x12df4f(0x11d)+_0x394443[_0x12df4f(0xc9)]()]=!0x0,function(_0x111ec4){var _0x26e0d8=_0x12df4f,_0x6ab99e=_0x24271c[_0x26e0d8(0xf9)][_0x26e0d8(0xa4)],_0x123a2e=_0x24271c[_0x26e0d8(0xf9)][_0x26e0d8(0xb4)],_0x3d5952=_0x24271c[_0x26e0d8(0xf9)][_0x26e0d8(0x13a)];_0x24271c['node']['parent']=_0x6ab99e,_0x24271c[_0x26e0d8(0xf9)]['index']=_0x111ec4,_0x2fbac1[_0x26e0d8(0x10f)](_0x34e98e[_0x26e0d8(0x150)](_0x3a8c91,_0xbec521,_0x394443,_0x24271c,_0x79ea95)),_0x24271c[_0x26e0d8(0xf9)][_0x26e0d8(0x13a)]=_0x3d5952,_0x24271c[_0x26e0d8(0xf9)]['index']=_0x123a2e;};}['_property'](_0x57f771,_0xe70101,_0x5c8182,_0x3b5146,_0x10c31f){var _0x244c35=_0x43b85f,_0x579143=this;_0x10c31f||(_0x10c31f=function(_0x18f7b1,_0x325459){return _0x18f7b1[_0x325459];});var _0x3edf21=_0x5c8182[_0x244c35(0xc9)](),_0x466cce=_0x3b5146[_0x244c35(0xc0)]||{},_0x2faaaa=_0x3b5146[_0x244c35(0x140)],_0x5c280d=_0x3b5146['isExpressionToEvaluate'];try{var _0xeb731b=this[_0x244c35(0x87)](_0x57f771),_0x382556=_0x3edf21;_0xeb731b&&_0x382556[0x0]==='\\x27'&&(_0x382556=_0x382556[_0x244c35(0x101)](0x1,_0x382556[_0x244c35(0x99)]-0x2));var _0x35e76b=_0x3b5146['expressionsToEvaluate']=_0x466cce['_p_'+_0x382556];_0x35e76b&&(_0x3b5146[_0x244c35(0x140)]=_0x3b5146[_0x244c35(0x140)]+0x1),_0x3b5146[_0x244c35(0x146)]=!!_0x35e76b;var _0x5d24fe=typeof _0x5c8182==_0x244c35(0x12a),_0x4952c5={'name':_0x5d24fe||_0xeb731b?_0x3edf21:this[_0x244c35(0x10d)](_0x3edf21)};if(_0x5d24fe&&(_0x4952c5[_0x244c35(0x12a)]=!0x0),!(_0xe70101==='array'||_0xe70101===_0x244c35(0x14c))){var _0x54a3e6=this[_0x244c35(0x77)](_0x57f771,_0x5c8182);if(_0x54a3e6&&(_0x54a3e6[_0x244c35(0x92)]&&(_0x4952c5[_0x244c35(0x115)]=!0x0),_0x54a3e6[_0x244c35(0xde)]&&!_0x35e76b&&!_0x3b5146['resolveGetters']))return _0x4952c5[_0x244c35(0xfe)]=!0x0,this[_0x244c35(0x9c)](_0x4952c5,_0x3b5146),_0x4952c5;}var _0x2b116b;try{_0x2b116b=_0x10c31f(_0x57f771,_0x5c8182);}catch(_0x5cd29e){return _0x4952c5={'name':_0x3edf21,'type':'unknown','error':_0x5cd29e[_0x244c35(0x11b)]},this['_processTreeNodeResult'](_0x4952c5,_0x3b5146),_0x4952c5;}var _0x46430d=this['_type'](_0x2b116b),_0xeb0687=this[_0x244c35(0x132)](_0x46430d);if(_0x4952c5[_0x244c35(0x13c)]=_0x46430d,_0xeb0687)this['_processTreeNodeResult'](_0x4952c5,_0x3b5146,_0x2b116b,function(){var _0x33f426=_0x244c35;_0x4952c5[_0x33f426(0xd4)]=_0x2b116b[_0x33f426(0xfd)](),!_0x35e76b&&_0x579143[_0x33f426(0xc5)](_0x46430d,_0x4952c5,_0x3b5146,{});});else{var _0x4fae4a=_0x3b5146[_0x244c35(0x9a)]&&_0x3b5146[_0x244c35(0xc1)]<_0x3b5146[_0x244c35(0x119)]&&_0x3b5146[_0x244c35(0xee)][_0x244c35(0xe7)](_0x2b116b)<0x0&&_0x46430d!=='function'&&_0x3b5146[_0x244c35(0x157)]<_0x3b5146[_0x244c35(0x85)];_0x4fae4a||_0x3b5146[_0x244c35(0xc1)]<_0x2faaaa||_0x35e76b?(this[_0x244c35(0xca)](_0x4952c5,_0x2b116b,_0x3b5146,_0x35e76b||{}),this['_additionalMetadata'](_0x2b116b,_0x4952c5)):this[_0x244c35(0x9c)](_0x4952c5,_0x3b5146,_0x2b116b,function(){var _0x2862fc=_0x244c35;_0x46430d===_0x2862fc(0xad)||_0x46430d===_0x2862fc(0x89)||(delete _0x4952c5[_0x2862fc(0xd4)],_0x4952c5[_0x2862fc(0x143)]=!0x0);});}return _0x4952c5;}finally{_0x3b5146[_0x244c35(0xc0)]=_0x466cce,_0x3b5146['depth']=_0x2faaaa,_0x3b5146[_0x244c35(0x146)]=_0x5c280d;}}[_0x43b85f(0xc5)](_0xe78e1d,_0x4ac7e7,_0x7c62b4,_0x45b4c2){var _0x5861cb=_0x43b85f,_0x286203=_0x45b4c2[_0x5861cb(0xe2)]||_0x7c62b4[_0x5861cb(0xe2)];if((_0xe78e1d===_0x5861cb(0x94)||_0xe78e1d===_0x5861cb(0xe9))&&_0x4ac7e7[_0x5861cb(0xd4)]){let _0xa68a61=_0x4ac7e7[_0x5861cb(0xd4)][_0x5861cb(0x99)];_0x7c62b4[_0x5861cb(0x144)]+=_0xa68a61,_0x7c62b4[_0x5861cb(0x144)]>_0x7c62b4['totalStrLength']?(_0x4ac7e7[_0x5861cb(0x143)]='',delete _0x4ac7e7[_0x5861cb(0xd4)]):_0xa68a61>_0x286203&&(_0x4ac7e7[_0x5861cb(0x143)]=_0x4ac7e7['value']['substr'](0x0,_0x286203),delete _0x4ac7e7[_0x5861cb(0xd4)]);}}[_0x43b85f(0x87)](_0x111538){var _0x4591c2=_0x43b85f;return!!(_0x111538&&_0xbb841f[_0x4591c2(0x109)]&&this[_0x4591c2(0xdd)](_0x111538)===_0x4591c2(0x80)&&_0x111538[_0x4591c2(0x86)]);}['_propertyName'](_0x276cba){var _0x3ab8c8=_0x43b85f;if(_0x276cba[_0x3ab8c8(0x159)](/^\\d+$/))return _0x276cba;var _0xca1512;try{_0xca1512=JSON[_0x3ab8c8(0xb3)](''+_0x276cba);}catch{_0xca1512='\\x22'+this[_0x3ab8c8(0xdd)](_0x276cba)+'\\x22';}return _0xca1512[_0x3ab8c8(0x159)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0xca1512=_0xca1512[_0x3ab8c8(0x101)](0x1,_0xca1512[_0x3ab8c8(0x99)]-0x2):_0xca1512=_0xca1512[_0x3ab8c8(0x154)](/'/g,'\\x5c\\x27')[_0x3ab8c8(0x154)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0xca1512;}[_0x43b85f(0x9c)](_0x1a1c2e,_0xe9c9ce,_0x56a4c4,_0x14e2a6){var _0x29a65e=_0x43b85f;this[_0x29a65e(0x12d)](_0x1a1c2e,_0xe9c9ce),_0x14e2a6&&_0x14e2a6(),this[_0x29a65e(0xc3)](_0x56a4c4,_0x1a1c2e),this[_0x29a65e(0x121)](_0x1a1c2e,_0xe9c9ce);}[_0x43b85f(0x12d)](_0x3d44cd,_0x2b5051){var _0xf96c71=_0x43b85f;this['_setNodeId'](_0x3d44cd,_0x2b5051),this[_0xf96c71(0xed)](_0x3d44cd,_0x2b5051),this[_0xf96c71(0x15c)](_0x3d44cd,_0x2b5051),this[_0xf96c71(0xa9)](_0x3d44cd,_0x2b5051);}['_setNodeId'](_0x1ac73b,_0x1cccd8){}[_0x43b85f(0xed)](_0x1d088e,_0x2e013e){}[_0x43b85f(0xbc)](_0x3b86e5,_0x4cba70){}[_0x43b85f(0x9f)](_0x38ce68){var _0x287fbd=_0x43b85f;return _0x38ce68===this[_0x287fbd(0xbd)];}[_0x43b85f(0x121)](_0x3d101f,_0x3b7b71){var _0x17502d=_0x43b85f;this[_0x17502d(0xbc)](_0x3d101f,_0x3b7b71),this[_0x17502d(0xec)](_0x3d101f),_0x3b7b71[_0x17502d(0x130)]&&this[_0x17502d(0x15b)](_0x3d101f),this[_0x17502d(0x93)](_0x3d101f,_0x3b7b71),this['_addLoadNode'](_0x3d101f,_0x3b7b71),this['_cleanNode'](_0x3d101f);}[_0x43b85f(0xc3)](_0x44dcc9,_0x19df3e){var _0x23d8fd=_0x43b85f;let _0x12a4c8;try{_0xbb841f[_0x23d8fd(0x148)]&&(_0x12a4c8=_0xbb841f[_0x23d8fd(0x148)][_0x23d8fd(0xc7)],_0xbb841f[_0x23d8fd(0x148)]['error']=function(){}),_0x44dcc9&&typeof _0x44dcc9[_0x23d8fd(0x99)]==_0x23d8fd(0x125)&&(_0x19df3e['length']=_0x44dcc9[_0x23d8fd(0x99)]);}catch{}finally{_0x12a4c8&&(_0xbb841f[_0x23d8fd(0x148)][_0x23d8fd(0xc7)]=_0x12a4c8);}if(_0x19df3e[_0x23d8fd(0x13c)]===_0x23d8fd(0x125)||_0x19df3e[_0x23d8fd(0x13c)]===_0x23d8fd(0x13e)){if(isNaN(_0x19df3e['value']))_0x19df3e[_0x23d8fd(0xac)]=!0x0,delete _0x19df3e[_0x23d8fd(0xd4)];else switch(_0x19df3e['value']){case Number['POSITIVE_INFINITY']:_0x19df3e[_0x23d8fd(0xf6)]=!0x0,delete _0x19df3e[_0x23d8fd(0xd4)];break;case Number[_0x23d8fd(0xcb)]:_0x19df3e['negativeInfinity']=!0x0,delete _0x19df3e[_0x23d8fd(0xd4)];break;case 0x0:this[_0x23d8fd(0x161)](_0x19df3e['value'])&&(_0x19df3e[_0x23d8fd(0xa0)]=!0x0);break;}}else _0x19df3e[_0x23d8fd(0x13c)]===_0x23d8fd(0x98)&&typeof _0x44dcc9[_0x23d8fd(0xf7)]==_0x23d8fd(0x94)&&_0x44dcc9[_0x23d8fd(0xf7)]&&_0x19df3e[_0x23d8fd(0xf7)]&&_0x44dcc9['name']!==_0x19df3e['name']&&(_0x19df3e['funcName']=_0x44dcc9[_0x23d8fd(0xf7)]);}['_isNegativeZero'](_0x145c81){var _0x3e6169=_0x43b85f;return 0x1/_0x145c81===Number[_0x3e6169(0xcb)];}[_0x43b85f(0x15b)](_0x2de0c0){var _0x24af4e=_0x43b85f;!_0x2de0c0['props']||!_0x2de0c0[_0x24af4e(0x118)][_0x24af4e(0x99)]||_0x2de0c0[_0x24af4e(0x13c)]===_0x24af4e(0x12c)||_0x2de0c0[_0x24af4e(0x13c)]===_0x24af4e(0x109)||_0x2de0c0['type']===_0x24af4e(0x72)||_0x2de0c0[_0x24af4e(0x118)][_0x24af4e(0x128)](function(_0x5d28e2,_0x134d30){var _0x10bb8d=_0x24af4e,_0x2dead4=_0x5d28e2[_0x10bb8d(0xf7)][_0x10bb8d(0x91)](),_0x15a0f3=_0x134d30['name'][_0x10bb8d(0x91)]();return _0x2dead4<_0x15a0f3?-0x1:_0x2dead4>_0x15a0f3?0x1:0x0;});}[_0x43b85f(0x93)](_0x40f5a1,_0x33209f){var _0x28e241=_0x43b85f;if(!(_0x33209f[_0x28e241(0xfb)]||!_0x40f5a1['props']||!_0x40f5a1[_0x28e241(0x118)]['length'])){for(var _0x13775e=[],_0x4fab14=[],_0x3f17a3=0x0,_0x50b07d=_0x40f5a1['props'][_0x28e241(0x99)];_0x3f17a3<_0x50b07d;_0x3f17a3++){var _0x3282df=_0x40f5a1[_0x28e241(0x118)][_0x3f17a3];_0x3282df[_0x28e241(0x13c)]===_0x28e241(0x98)?_0x13775e[_0x28e241(0x10f)](_0x3282df):_0x4fab14[_0x28e241(0x10f)](_0x3282df);}if(!(!_0x4fab14[_0x28e241(0x99)]||_0x13775e[_0x28e241(0x99)]<=0x1)){_0x40f5a1[_0x28e241(0x118)]=_0x4fab14;var _0x248d92={'functionsNode':!0x0,'props':_0x13775e};this['_setNodeId'](_0x248d92,_0x33209f),this[_0x28e241(0xbc)](_0x248d92,_0x33209f),this[_0x28e241(0xec)](_0x248d92),this['_setNodePermissions'](_0x248d92,_0x33209f),_0x248d92['id']+='\\x20f',_0x40f5a1[_0x28e241(0x118)]['unshift'](_0x248d92);}}}[_0x43b85f(0xfc)](_0x458571,_0xa42ab){}[_0x43b85f(0xec)](_0x16275c){}[_0x43b85f(0x126)](_0x395ede){var _0x3dee0e=_0x43b85f;return Array['isArray'](_0x395ede)||typeof _0x395ede==_0x3dee0e(0x79)&&this[_0x3dee0e(0xdd)](_0x395ede)===_0x3dee0e(0xdb);}[_0x43b85f(0xa9)](_0x4d57d9,_0x348c0b){}['_cleanNode'](_0x3d3d79){var _0xcd87ce=_0x43b85f;delete _0x3d3d79['_hasSymbolPropertyOnItsPath'],delete _0x3d3d79[_0xcd87ce(0xc6)],delete _0x3d3d79[_0xcd87ce(0xf2)];}[_0x43b85f(0x15c)](_0x347b4b,_0x177487){}}let _0x5ea175=new _0x5ec5fd(),_0x5c4efc={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x4fd10e={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x213bb5(_0x144ff,_0x387a65,_0x3d2663,_0x5c2990,_0x56d609,_0x3f4eb9){var _0x1616f1=_0x43b85f;let _0x53dd48,_0x354d69;try{_0x354d69=_0x1bb66c(),_0x53dd48=_0x895fcc[_0x387a65],!_0x53dd48||_0x354d69-_0x53dd48['ts']>0x1f4&&_0x53dd48[_0x1616f1(0x102)]&&_0x53dd48['time']/_0x53dd48[_0x1616f1(0x102)]<0x64?(_0x895fcc[_0x387a65]=_0x53dd48={'count':0x0,'time':0x0,'ts':_0x354d69},_0x895fcc[_0x1616f1(0xd0)]={}):_0x354d69-_0x895fcc[_0x1616f1(0xd0)]['ts']>0x32&&_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0x102)]&&_0x895fcc[_0x1616f1(0xd0)]['time']/_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0x102)]<0x64&&(_0x895fcc[_0x1616f1(0xd0)]={});let _0x1c7816=[],_0x1f9a1a=_0x53dd48[_0x1616f1(0xe0)]||_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0xe0)]?_0x4fd10e:_0x5c4efc,_0x3d83dc=_0x5774a1=>{var _0x254ae9=_0x1616f1;let _0x3d12a4={};return _0x3d12a4[_0x254ae9(0x118)]=_0x5774a1[_0x254ae9(0x118)],_0x3d12a4['elements']=_0x5774a1[_0x254ae9(0x81)],_0x3d12a4[_0x254ae9(0xe2)]=_0x5774a1[_0x254ae9(0xe2)],_0x3d12a4['totalStrLength']=_0x5774a1[_0x254ae9(0x135)],_0x3d12a4['autoExpandLimit']=_0x5774a1[_0x254ae9(0x85)],_0x3d12a4[_0x254ae9(0x119)]=_0x5774a1[_0x254ae9(0x119)],_0x3d12a4[_0x254ae9(0x130)]=!0x1,_0x3d12a4['noFunctions']=!_0x47d44e,_0x3d12a4['depth']=0x1,_0x3d12a4[_0x254ae9(0xc1)]=0x0,_0x3d12a4['expId']=_0x254ae9(0xf3),_0x3d12a4[_0x254ae9(0x12f)]=_0x254ae9(0xe4),_0x3d12a4[_0x254ae9(0x9a)]=!0x0,_0x3d12a4['autoExpandPreviousObjects']=[],_0x3d12a4[_0x254ae9(0x157)]=0x0,_0x3d12a4[_0x254ae9(0x14e)]=!0x0,_0x3d12a4[_0x254ae9(0x144)]=0x0,_0x3d12a4['node']={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3d12a4;};for(var _0x33a044=0x0;_0x33a044<_0x56d609['length'];_0x33a044++)_0x1c7816['push'](_0x5ea175[_0x1616f1(0xca)]({'timeNode':_0x144ff==='time'||void 0x0},_0x56d609[_0x33a044],_0x3d83dc(_0x1f9a1a),{}));if(_0x144ff===_0x1616f1(0x14f)){let _0xa6b9b9=Error['stackTraceLimit'];try{Error[_0x1616f1(0xcd)]=0x1/0x0,_0x1c7816[_0x1616f1(0x10f)](_0x5ea175['serialize']({'stackNode':!0x0},new Error()[_0x1616f1(0x7d)],_0x3d83dc(_0x1f9a1a),{'strLength':0x1/0x0}));}finally{Error[_0x1616f1(0xcd)]=_0xa6b9b9;}}return{'method':_0x1616f1(0x76),'version':_0x43f59d,'args':[{'ts':_0x3d2663,'session':_0x5c2990,'args':_0x1c7816,'id':_0x387a65,'context':_0x3f4eb9}]};}catch(_0x4801cd){return{'method':_0x1616f1(0x76),'version':_0x43f59d,'args':[{'ts':_0x3d2663,'session':_0x5c2990,'args':[{'type':'unknown','error':_0x4801cd&&_0x4801cd[_0x1616f1(0x11b)]}],'id':_0x387a65,'context':_0x3f4eb9}]};}finally{try{if(_0x53dd48&&_0x354d69){let _0x245cf=_0x1bb66c();_0x53dd48['count']++,_0x53dd48[_0x1616f1(0x116)]+=_0x2506c2(_0x354d69,_0x245cf),_0x53dd48['ts']=_0x245cf,_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0x102)]++,_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0x116)]+=_0x2506c2(_0x354d69,_0x245cf),_0x895fcc[_0x1616f1(0xd0)]['ts']=_0x245cf,(_0x53dd48['count']>0x32||_0x53dd48[_0x1616f1(0x116)]>0x64)&&(_0x53dd48[_0x1616f1(0xe0)]=!0x0),(_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0x102)]>0x3e8||_0x895fcc[_0x1616f1(0xd0)][_0x1616f1(0x116)]>0x12c)&&(_0x895fcc[_0x1616f1(0xd0)]['reduceLimits']=!0x0);}}catch{}}}return _0x213bb5;}((_0x406bb4,_0x4089bc,_0x3915b8,_0x5da571,_0x4c2241,_0x628da1,_0x57553e,_0x440ae7,_0x24c08a,_0x58a5e0,_0x2f40b5)=>{var _0x114182=_0x3e2841;if(_0x406bb4[_0x114182(0x9d)])return _0x406bb4[_0x114182(0x9d)];if(!H(_0x406bb4,_0x440ae7,_0x4c2241))return _0x406bb4['_console_ninja']={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x406bb4[_0x114182(0x9d)];let _0x249cc9=b(_0x406bb4),_0x62627b=_0x249cc9[_0x114182(0xd2)],_0x557c9a=_0x249cc9[_0x114182(0x158)],_0x21ec4b=_0x249cc9[_0x114182(0xf8)],_0x434558={'hits':{},'ts':{}},_0x58c6ff=J(_0x406bb4,_0x24c08a,_0x434558,_0x628da1),_0x2418b4=_0xe09bb3=>{_0x434558['ts'][_0xe09bb3]=_0x557c9a();},_0x5a1e43=(_0x4b49c9,_0x194c53)=>{var _0x5c13bb=_0x114182;let _0x263aa9=_0x434558['ts'][_0x194c53];if(delete _0x434558['ts'][_0x194c53],_0x263aa9){let _0x16bd1f=_0x62627b(_0x263aa9,_0x557c9a());_0x47ed7f(_0x58c6ff(_0x5c13bb(0x116),_0x4b49c9,_0x21ec4b(),_0x62d223,[_0x16bd1f],_0x194c53));}},_0x48b3c4=_0x160d79=>{var _0xb8e784=_0x114182,_0x1239c0;return _0x4c2241===_0xb8e784(0x7c)&&_0x406bb4['origin']&&((_0x1239c0=_0x160d79==null?void 0x0:_0x160d79[_0xb8e784(0x78)])==null?void 0x0:_0x1239c0[_0xb8e784(0x99)])&&(_0x160d79[_0xb8e784(0x78)][0x0][_0xb8e784(0x113)]=_0x406bb4[_0xb8e784(0x113)]),_0x160d79;};_0x406bb4[_0x114182(0x9d)]={'consoleLog':(_0x4c46bb,_0x1376c7)=>{var _0x5ef77b=_0x114182;_0x406bb4[_0x5ef77b(0x148)]['log']['name']!==_0x5ef77b(0x14a)&&_0x47ed7f(_0x58c6ff(_0x5ef77b(0x76),_0x4c46bb,_0x21ec4b(),_0x62d223,_0x1376c7));},'consoleTrace':(_0x44f3f6,_0x357ab5)=>{var _0x59297b=_0x114182;_0x406bb4['console']['log'][_0x59297b(0xf7)]!=='disabledTrace'&&_0x47ed7f(_0x48b3c4(_0x58c6ff(_0x59297b(0x14f),_0x44f3f6,_0x21ec4b(),_0x62d223,_0x357ab5)));},'consoleTime':_0x22f943=>{_0x2418b4(_0x22f943);},'consoleTimeEnd':(_0x557cf4,_0x2d0460)=>{_0x5a1e43(_0x2d0460,_0x557cf4);},'autoLog':(_0x2ad48f,_0x707b07)=>{var _0x5a51ba=_0x114182;_0x47ed7f(_0x58c6ff(_0x5a51ba(0x76),_0x707b07,_0x21ec4b(),_0x62d223,[_0x2ad48f]));},'autoLogMany':(_0x400dd3,_0x2cee87)=>{_0x47ed7f(_0x58c6ff('log',_0x400dd3,_0x21ec4b(),_0x62d223,_0x2cee87));},'autoTrace':(_0x400130,_0x556fcc)=>{_0x47ed7f(_0x48b3c4(_0x58c6ff('trace',_0x556fcc,_0x21ec4b(),_0x62d223,[_0x400130])));},'autoTraceMany':(_0x585351,_0x5de90e)=>{var _0x2c854a=_0x114182;_0x47ed7f(_0x48b3c4(_0x58c6ff(_0x2c854a(0x14f),_0x585351,_0x21ec4b(),_0x62d223,_0x5de90e)));},'autoTime':(_0x26b073,_0x4abb72,_0x2bcb6e)=>{_0x2418b4(_0x2bcb6e);},'autoTimeEnd':(_0x5ce938,_0x4e70e7,_0x3ae31f)=>{_0x5a1e43(_0x4e70e7,_0x3ae31f);},'coverage':_0x47e26a=>{var _0x46ec02=_0x114182;_0x47ed7f({'method':_0x46ec02(0x107),'version':_0x628da1,'args':[{'id':_0x47e26a}]});}};let _0x47ed7f=X(_0x406bb4,_0x4089bc,_0x3915b8,_0x5da571,_0x4c2241,_0x58a5e0,_0x2f40b5),_0x62d223=_0x406bb4[_0x114182(0x7b)];return _0x406bb4['_console_ninja'];})(globalThis,_0x3e2841(0xea),_0x3e2841(0xb8),_0x3e2841(0x15d),_0x3e2841(0xcf),'1.0.0',_0x3e2841(0x134),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'',_0x3e2841(0x10e),_0x3e2841(0xb0));")}catch(e){}}function c(e,...t){try{r().consoleLog(e,t)}catch(e){}return t}},"./src/components/audio-player.ts":(e,t,s)=>{s.r(t),s.d(t,{AudioPlayer:()=>i});class i{audioContext;sourceNode;audioQueue;promptAudioBuffer;static audioBuffers=new Map;audioSourcs=[];constructor(){this.audioContext=a.getAudioContext(),this.sourceNode=null,this.audioQueue=[]}async preloadPromptAudio(e){const t=await this.loadAndDecodeAudio(e);t&&(this.promptAudioBuffer=t)}async preloadGameAudio(e){if(i.audioBuffers.has(e))return;const t=await this.loadAndDecodeAudio(e);t&&i.audioBuffers.set(e,t)}playAudio(e){const t=i.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}}playFeedbackAudios=(e=!1,...t)=>{t.length>0&&(this.audioQueue=t,this.playFetch(0,e))};playPromptAudio=e=>{if(this.promptAudioBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.promptAudioBuffer,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}};playButtonClickSound=e=>{const t=i.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),e.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((e=>{e.stop()})),this.audioSourcs=[]};playFetch=(e,t)=>{e>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[e]&&fetch(this.audioQueue[e]).then((e=>e.arrayBuffer())).then((s=>{this.audioContext?.decodeAudioData(s,(s=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=s,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=t,this.sourceNode.onended=()=>this.handleAudioEnded(e,t),this.sourceNode.start()}))}))};handleAudioEnded=(e,t)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(e+1,t)};async loadAndDecodeAudio(e){return new Promise((async(t,s)=>{try{const s=await fetch(e),i=await s.arrayBuffer();t(await this.audioContext.decodeAudioData(i))}catch(e){console.error("Error loading or decoding audio:",e),s(e)}}))}}class a{static instance=null;static getAudioContext(){return a.instance||(a.instance=new(window.AudioContext||window.webkitAudioContext)),a.instance}}},"./src/components/background.ts":(e,t,s)=>{s.r(t),s.d(t,{Background:()=>n});var i=s("./src/common/common.ts"),a={bgImg:"./assets/images/bg_v01.jpg",hillImg:"./assets/images/hill_v01.png",pillerImg:"./assets/images/Totem_v02_v01.png",fenchImg:"./assets/images/fence_v01.png",autumnBgImg:"./assets/images/Autumn_bg_v01.jpg",autumnHillImg:"./assets/images/Autumn_hill_v01.png",autumnPillerImg:"./assets/images/Autumn_sign_v01.png",autumnSignImg:"./assets/images/Autumn_sign_v01.png",autumnFenceImg:"./assets/images/Autumn_fence_v01.png",winterBgImg:"./assets/images/Winter_bg_01.jpg",winterHillImg:"./assets/images/Winter_hill_v01.png",winterSignImg:"./assets/images/Winter_sign_v01.png",winterFenceImg:"./assets/images/Winter_fence_v01.png",winterPillerImg:"./assets/images/Winter_sign_v01.png"};class n{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(e,t,s,n){this.width=t,this.height=s,this.context=e,this.levelNumber=n,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,i.loadImages)(a,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;constructor(e,t){this.posX=.1*t.width+.15*t.width/2,this.posY=.2*t.height,this.context=e,this.canvas=t,this.cancel_button_image=new Image,this.cancel_button_image.src="./assets/images/close_btn.png",this.cancel_button_image.onload=e=>{this.imagesLoaded=!0,this.cancel_button_image=this.cancel_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.cancel_button_image,this.posX,this.posY,.15*this.canvas.width,.15*this.canvas.width)}onClick(e,t){if(Math.sqrt((e-this.posX-.15*this.canvas.width/2)*(e-this.posX-.15*this.canvas.width/2)+(t-this.posY-.15*this.canvas.width/2)*(t-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/close-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;constructor(e,t,s,i){this.posX=s,this.posY=i,this.context=e,this.canvas=t,this.close_button_image=new Image,this.close_button_image.src="./assets/images/map_btn.png",this.close_button_image.onload=e=>{this.imagesLoaded=!0,this.close_button_image=this.close_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.close_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(e,t){if(Math.sqrt((e-this.posX-.19*this.canvas.width/2)*(e-this.posX-.19*this.canvas.width/2)+(t-this.posY-.19*this.canvas.width/2)*(t-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/next-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;constructor(e,t,s,i,a){this.posX=i,this.posY=a,this.context=e,this.width=t,this.height=s,this.next_button_image=new Image,this.next_button_image.src="./assets/images/next_btn.png",this.next_button_image.onload=e=>{this.imagesLoaded=!0,this.next_button_image=this.next_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.next_button_image,this.posX,this.posY,.19*this.width,.19*this.width)}onClick(e,t){if(Math.sqrt((e-this.posX-.19*this.width/2)*(e-this.posX-.19*this.width/2)+(t-this.posY-.19*this.width/2)*(t-this.posY-.19*this.width/2))<.19*this.width/2)return!0}}},"./src/components/buttons/no-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;constructor(e,t,s,i){this.posX=s,this.posY=i,this.context=e,this.canvas=t,this.no_button_image=new Image,this.no_button_image.src="./assets/images/close_btn.png",this.no_button_image.onload=e=>{this.imagesLoaded=!0,this.no_button_image=this.no_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.no_button_image,this.posX+5,this.posY+10,.18*this.canvas.width,.18*this.canvas.width)}onClick(e,t){if(Math.sqrt((e-this.posX-.15*this.canvas.width/2)*(e-this.posX-.15*this.canvas.width/2)+(t-this.posY-.15*this.canvas.width/2)*(t-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/pause-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;constructor(e,t){this.posX=t.width-.09*t.height,this.posY=0,this.context=e,this.canvas=t,this.pause_button_image=new Image,this.pause_button_image.src="./assets/images/pause_v01.png",this.pause_button_image.onload=e=>{this.imagesLoaded=!0,this.pause_button_image=this.pause_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.pause_button_image,this.posX,this.posY,.09*this.canvas.height,.09*this.canvas.height)}onClick(e,t){if(Math.sqrt((e-this.posX-.09*this.canvas.height/2)*(e-this.posX-.09*this.canvas.height/2)+(t-this.posY-.09*this.canvas.height/2)*(t-this.posY-.09*this.canvas.height/2))<.09*this.canvas.height/2)return!0}}},"./src/components/buttons/retry-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;constructor(e,t,s,i){this.posX=s,this.posY=i,this.context=e,this.canvas=t,this.retry_button_image=new Image,this.retry_button_image.src="./assets/images/retry_btn.png",this.retry_button_image.onload=e=>{this.imagesLoaded=!0,this.retry_button_image=this.retry_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.retry_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(e,t){if(Math.sqrt((e-this.posX-.19*this.canvas.width/2)*(e-this.posX-.19*this.canvas.width/2)+(t-this.posY-.19*this.canvas.width/2)*(t-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/yes-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;constructor(e,t,s,i){this.posX=s,this.posY=i,this.context=e,this.canvas=t,this.yes_button_image=new Image,this.yes_button_image.src="./assets/images/confirm_btn.png",this.yes_button_image.onload=e=>{this.imagesLoaded=!0,this.yes_button_image=this.yes_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.yes_button_image,this.posX-5,this.posY,.2*this.canvas.width,.2*this.canvas.width)}onClick(e,t){if(Math.sqrt((e-this.posX-.15*this.canvas.width/2)*(e-this.posX-.15*this.canvas.width/2)+(t-this.posY-.15*this.canvas.width/2)*(t-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/feedback-particle-effect/feedback-text-effects.ts":(e,t,s)=>{s.r(t),s.d(t,{FeedbackTextEffects:()=>n});var i=s("./src/components/feedback-particle-effect/text-particle.ts"),a=s("./global-variables.ts");class n{context;canvasWidth;canvasHeight;textX;textY;fontSize;lineHeight;maxTextWidth;particleDuration;startTime;particles;gap;mouse;textWorker;constructor(e,t,s){this.context=e,this.canvasWidth=t,this.canvasHeight=s,this.textX=this.canvasWidth/1.8,this.textY=this.canvasHeight/2,this.fontSize=this.canvasWidth/7.5,this.lineHeight=.8*this.fontSize,this.maxTextWidth=5*this.canvasWidth,this.particleDuration=5e3,this.startTime=null,this.particles=[],this.gap=3,this.mouse={radius:2e3,x:0,y:0},this.textWorker=new Worker(window.feedbackTextWorkerPath),this.textWorker.addEventListener("message",this.handleTextWorkerMessage.bind(this))}wrapText(e){const t=this.context.createLinearGradient(0,0,this.canvasWidth,this.canvasHeight);t.addColorStop(.3,"#F8E218"),t.addColorStop(.5,"#F8E218"),t.addColorStop(.7,"#E39D37"),this.context.fillStyle=t,this.context.textAlign="center",this.context.textBaseline="middle",this.context.lineWidth=3,this.context.strokeStyle="#A46225",this.context.font=`${this.fontSize-.3*e.length}px ${a.font}, monospace`;let s=[],i=e.split(" "),n=0,o="";for(let e=0;e<i.length;e++){let t=o+i[e]+" ";this.context.measureText(t).width>this.maxTextWidth?(o=i[e]+"",n++):o=t,s[n]=o}let r=this.lineHeight*n;this.textY=this.canvasHeight/4.2-r/2;e=e.trim(),s.forEach(((e,t)=>{let s=e.lastIndexOf(" ",e.lastIndexOf(" ")-1);if(this.fontSize*e.length>1.7*this.canvasWidth&&-1!=s){let i=e.slice(0,s),a=" "+e.slice(s+1);this.context.fillText(i,this.textX,this.textY+t*this.lineHeight),this.context.fillText(a,this.textX,this.textY+t*this.lineHeight+this.canvasHeight/12)}else this.context.fillText(e,this.textX,this.textY+t*this.lineHeight)})),this.convertToParticle()}handleTextWorkerMessage(e){this.particles=e.data.map((({x:e,y:t,color:s})=>new i.TextParticle(this,e,t,s)))}convertToParticle(){const e=this.context.getImageData(0,0,this.canvasWidth,this.canvasHeight);this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.textWorker.postMessage({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,gap:this.gap,pixels:e.data})}render(){this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.particles.forEach((e=>{e.draw(),e.update()}))}updateParticles(){this.textWorker.postMessage({particles:this.particles,particleDuration:this.particleDuration,startTime:this.startTime})}clearParticle(){this.particles=[]}unregisterEventListener(){this.textWorker.removeEventListener("message",this.handleTextWorkerMessage),this.textWorker.terminate()}}},"./src/components/feedback-particle-effect/sure-popup.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./src/common/event-names.ts"),a=s("./src/components/audio-player.ts"),n=s("./src/components/buttons/yes-button.ts"),o=s("./src/components/buttons/no-button.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(e,t,s){this.canvas=e,this.yesCallback=t,this.noCallback=s,this.context=this.canvas.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.yesButton=new n.default(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new o.default(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=e=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0}}addListner=()=>{this.canvas.addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var s=t.getBoundingClientRect();const i=e.clientX-s.left,a=e.clientY-s.top;this.yesButton.onClick(i,a)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(i,a)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};dispose=()=>{this.canvas.removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/feedback-particle-effect/text-particle.ts":(e,t,s)=>{s.r(t),s.d(t,{TextParticle:()=>i});class i{feedbackTextEffects;x;y;color;originX;originY;size;ease;constructor(e,t,s,i){this.feedbackTextEffects=e,this.x=Math.random()*this.feedbackTextEffects.canvasWidth,this.y=0,this.color=i,this.originX=t,this.originY=s,this.size=this.feedbackTextEffects.gap,this.ease=.1*Math.random()+.055}draw(){this.feedbackTextEffects.context.fillStyle=this.color,this.feedbackTextEffects.context.fillRect(this.x,this.y,this.size,this.size)}update(){this.x+=(this.originX-this.x)*this.ease,this.y+=this.originY-this.y}}},"./src/components/index.ts":(e,t,s)=>{s.r(t),s.d(t,{AudioPlayer:()=>u.AudioPlayer,Background:()=>l.Background,FeedbackTextEffects:()=>x.FeedbackTextEffects,LevelIndicators:()=>a.LevelIndicators,Monster:()=>h.Monster,PauseButton:()=>i.default,PausePopUp:()=>n.default,PromptText:()=>o.PromptText,StoneHandler:()=>r.default,TimerTicking:()=>d.TimerTicking,Tutorial:()=>c.Tutorial});var i=s("./src/components/buttons/pause-button.ts"),a=s("./src/components/level-indicator.ts"),n=s("./src/components/pause-popup.ts"),o=s("./src/components/prompt-text.ts"),r=s("./src/components/stone-handler.ts"),c=s("./src/components/tutorial.ts"),h=s("./src/components/monster.ts"),d=s("./src/components/timer-ticking.ts"),l=s("./src/components/background.ts"),x=s("./src/components/feedback-particle-effect/feedback-text-effects.ts"),u=s("./src/components/audio-player.ts")},"./src/components/level-indicator.ts":(e,t,s)=>{s.r(t),s.d(t,{LevelIndicators:()=>n});var i=s("./src/common/common.ts"),a=s("./src/events/EventManager.ts");class n extends a.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(e,t,s){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.activeIndicators=s,this.images={level_indicator:"./assets/images/levels_v01.png",bar_empty:"./assets/images/bar_empty_v01.png",bar_full:"./assets/images/bar_full_v01.png"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}setIndicators(e){this.activeIndicators=e}addDropStoneEvent(){document.addEventListener("dropstone",(e=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var e=0;e<5;e++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(e=0;e<this.activeIndicators;e++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(e){}handleLoadPuzzle(e){this.setIndicators(e.detail.counter)}}},"./src/components/monster.ts":(e,t,s)=>{s.r(t),s.d(t,{Monster:()=>n});var i=s("./src/common/common.ts"),a=s("./src/events/EventManager.ts");class n extends a.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(e,t,s){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.game=e,this.monsterPhase=t,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.changeToIdleAnimation(),this.imagesLoaded=!0,s&&s()}))}update(e){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=e,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(e){this.image.src=e}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(e){e.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(e){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(e,t){if(Math.sqrt((e-this.x-this.width/4)*(e-this.x-this.width/4)+(t-this.y-this.height/2.2)*(t-this.y-this.height/2.2))<=100)return!0}}},"./src/components/pause-popup.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>d});var i=s("./src/components/buttons/cancel-button.ts"),a=s("./src/components/buttons/close-button.ts"),n=s("./src/components/buttons/retry-button.ts"),o=s("./src/common/event-names.ts"),r=s("./src/components/audio-player.ts"),c=s("./src/components/feedback-particle-effect/sure-popup.ts"),h=s("./global-variables.ts");class d{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(e,t,s,o,h){this.canvas=e,this.callback=t,this.gameplayData=h,this.switchToLevelSelection=s,this.reloadScene=o;const d=document.getElementById("canvas");this.context=d.getContext("2d"),this.audioPlayer=new r.AudioPlayer,this.cancelButton=new i.default(this.context,this.canvas),this.retryButton=new n.default(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new a.default(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=e=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0},this.retrySurePopup=new c.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new c.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(o.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var s=t.getBoundingClientRect();const i=e.clientX-s.left,a=e.clientY-s.top;this.cancelButton.onClick(i,a)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(i,a)&&("english"==h.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(i,a)&&("english"==h.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==h.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==h.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};playAreYouSureSound=()=>{this.audioPlayer.playAudio("./assets/audios/are-you-sure.mp3")};dispose=()=>{document.getElementById("canvas").removeEventListener(o.CLICK,this.handleMouseClick,!1)}}},"./src/components/play-button.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>r});var i=s("./src/common/common.ts"),a=s("./src/Firebase/firebase-integration.ts"),n=s("./global-variables.ts"),o=s("./src/data/api-data.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(e,t,s,n){this.posX=s,this.posY=n,this.context=e,this.canvas=t,this.firebaseIntegration=new a.FirebaseIntegration,this.init(),this.images={pause_button_image:"./assets/images/Play_button.png"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}async init(){const e=await(0,o.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(e,t){const s=Math.sqrt((e-this.posX-this.canvas.width/6)*(e-this.posX-this.canvas.width/6)+(t-this.posY-this.canvas.width/6)*(t-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),s<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const e={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(e)}}},"./src/components/prompt-text.ts":(e,t,s)=>{s.r(t),s.d(t,{PromptText:()=>c});var i=s("./src/events/EventManager.ts"),a=s("./src/common/utils.ts"),n=s("./src/components/audio-player.ts"),o=s("./src/common/event-names.ts"),r=s("./global-variables.ts");class c extends i.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(e,t,s,i,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.levelData=i,this.rightToLeft=a,this.currentPromptText=s.prompt.promptText,this.currentPuzzleData=s,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=e=>{const t=document.getElementById("canvas");e.preventDefault();var s=t.getBoundingClientRect();const i=e.clientX-s.left,a=e.clientY-s.top;this.onClick(i,a)&&this.playSound()};getPromptAudioUrl=()=>a.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(a.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(e,t){return Math.sqrt(e-this.width/3)<12&&Math.sqrt(t-this.height/5.5)<10}setCurrrentPuzzleData(e){this.currentPuzzleData=e,this.currentPromptText=e.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var e=this.width/2;const t=.26*this.height;this.context.textAlign="center";var s=this.calculateFont();const i=this.promptImageWidth,a=this.promptImageHeight;if(this.context.font=`${s}px ${r.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var n=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],e+this.context.measureText(n).width/2,t),this.context.fillStyle="black",this.context.fillText(n,e-this.context.measureText(this.targetStones[0]).width/2,t)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,i/4,a/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){e-=.5*this.context.measureText(this.currentPromptText).width;for(let s=this.targetStones.length-1;s>=0;s--)this.droppedStones>s||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[s],e,t)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[s],e,t)),e=e+this.context.measureText(this.targetStones[s]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,i/4,a/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const e=1.25*(this.width-i),t=.33*(this.height-a);this.context.drawImage(this.promptPlayButton,e,t,i/4,a/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,e,t)):this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,i/4,a/4)}drawOthers(){const e=this.currentPromptText.split(""),t=(this.width,.28*this.height),s=this.promptImageWidth,i=this.promptImageHeight;var a=this.calculateFont();this.context.font=`${a}px ${r.font}, monospace`;let n=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var c=this.currentPuzzleData.targetStones[0].split("");for(let a=0;a<e.length;a++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){c.includes(e[a])?(c=c.slice(1,c.length),this.context.fillStyle="red",this.context.fillText(e[a],n,t)):(this.context.fillStyle="black",this.context.fillText(e[a],n,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,s/4,i/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>a||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(e[a],n,t)):(this.context.fillStyle="red",this.context.fillText(e[a],n,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,s/4,i/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,s/4,i/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,s/4,i/4)}o=(this.context.measureText(e[a]).width+this.context.measureText(e[a+1]).width)/2,n+=o}}draw(e){if(this.updateScaling(),this.time=e<17?this.time+Math.floor(e):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const e=this.promptImageWidth*this.scale,t=this.promptImageHeight*this.scale,s=(this.width-e)/2,i=(this.height-t)/5;this.context.drawImage(this.prompt_image,s,i,e,t),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[e.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(e){this.droppedStones=e}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const e=this.loadImage(this.prompt_image,"./assets/images/promptTextBg.png"),t=this.loadImage(this.promptPlayButton,"./assets/images/promptPlayButton.png");await Promise.all([e,t]),this.imagesLoaded=!0}loadImage(e,t){return new Promise(((s,i)=>{e.onload=()=>{s()},e.src=t,e.onerror=e=>{i(e)}}))}}},"./src/components/stone-handler.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var i=s("./src/common/index.ts"),a=s("./src/events/EventManager.ts"),n=s("./src/components/tutorial.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/data/game-score.ts"),c=s("./src/constants/index.ts");class h extends a.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==r.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(e,t,s,a,r,h){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.puzzleNumber=s,this.levelData=a,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(c.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(r),this.puzzleStartTime=new Date,this.tutorial=new n.Tutorial(e,t.width,t.height,s),this.stonebg=new Image,this.stonebg.src=c.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new o.AudioPlayer,this.stonebg.onload=e=>{this.createStones(this.stonebg)},this.audioPlayer=new o.AudioPlayer,this.timerTickingInstance=h,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(e){const t=this.getFoilStones();for(let s=0;s<t.length;s++)t[s]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[s]),this.foilStones.push(new i.StoneConfig(this.context,this.canvas.width,this.canvas.height,t[s],this.stonePos[s][0],this.stonePos[s][1],e,this.timerTickingInstance,s==t.length-1?this.tutorial:null))}draw(e){for(let t=0;t<this.foilStones.length;t++)this.foilStones[t].draw(e);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}initializeStonePos(){let e=32;this.stonePos=[[this.canvas.width/5-e,this.canvas.height/1.9-e],[this.canvas.width/2-e,this.canvas.height/1.15-e],[this.canvas.width/3.5+this.canvas.width/2-e,this.canvas.height/1.2-e],[this.canvas.width/4-e,this.canvas.height/1.28-e],[this.canvas.width/7-e,this.canvas.height/1.5-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.9-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.42-e],[this.canvas.width/6-e,this.canvas.height/1.1-e]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(e){this.currentPuzzleData=this.levelData.puzzles[e],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}isDroppedStoneCorrect(e){return e==this.correctTargetStone}handleStoneDrop(e){this.foilStones=[]}handleLoadPuzzle(e){this.foilStones=[],this.tutorial.setPuzzleNumber(e.detail.counter),this.puzzleNumber=e.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(e,t,s=!1){const i=s?e==this.correctTargetStone.substring(0,e.length):e==this.correctTargetStone;return this.processLetterDropFeedbackAudio(t,i,s,e),i}processLetterDropFeedbackAudio(e,t,s,i){if(t){(s?i===this.getCorrectTargetStone():t)?this.playCorrectAnswerFeedbackSound(e):this.audioPlayer.playFeedbackAudios(!1,c.AUDIO_PATH_EATS,(0,c.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,c.AUDIO_PATH_EATS,c.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?c.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((e=>{const t=this.currentPuzzleData.foilStones.indexOf(e);-1!==t&&this.currentPuzzleData.foilStones.splice(t,1)}));const e=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(e>8){const t=e-8;this.currentPuzzleData.foilStones.splice(0,t)}return this.currentPuzzleData.targetStones.forEach((e=>{this.currentPuzzleData.foilStones.push(e)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(e){return[e.fantastic,e.great,e.amazing]}setGamePause(e){this.isGamePaused=e}playCorrectAnswerFeedbackSound(e){const t=i.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,c.AUDIO_PATH_EATS,(0,c.AUDIO_PATH_CHEERING_FUNC)(t),c.AUDIO_PATH_POINTS_ADD,i.Utils.getConvertedDevProdURL(this.feedbackAudios[e])),this.correctStoneAudio.play()}}},"./src/components/timer-ticking.ts":(e,t,s)=>{s.r(t),s.d(t,{TimerTicking:()=>o});var i=s("./src/common/common.ts"),a=s("./src/events/EventManager.ts"),n=s("./src/components/audio-player.ts");class o extends a.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(e,t,s){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=s,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new n.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:"./assets/images/timer_empty.png",rotating_clock:"./assets/images/timer.png",timer_full:"./assets/images/timer_full.png"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(e){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*e),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio("./assets/audios/timeout.mp3"),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,5,.09*this.height,.12*this.width,.06*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/tutorial.ts":(e,t,s)=>{s.r(t),s.d(t,{Tutorial:()=>n});var i=s("./src/common/utils.ts"),a=s("./src/data/game-score.ts");class n{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(e,t,s,a){this.width=t,this.height=s,this.context=e,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=a>=0?a:null,this.tutorialImg=new Image,this.tutorialImg.src="./assets/images/tutorial_hand.png",this.drawRipple=(0,i.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(e){this.startx=e[0]-22,this.starty=e[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(e){this.endTutorial=e}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(e,t,s){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*e:this.x-this.absdx*e,this.y=this.dy>=0?this.y+this.absdy*e:this.y-this.absdy*e;const i=this.x-this.endx+this.absdx,a=this.y-this.endy+this.absdy;let n=100*Math.sqrt(i*i+a*a)/this.monsterStoneDifference;if(n<15)n>1?this.createHandScaleAnimation(e,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(n>80)this.createHandScaleAnimation(e,this.startx+15,this.starty+10,!1);else{let e=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(t,this.x,this.y+20,s,s),this.context.globalAlpha=e,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(e,t,s,i){this.totalTime+=Math.floor(e);const a=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),n=this.tutorialImg.width*a,o=this.tutorialImg.height*a;this.context.drawImage(this.tutorialImg,t,s,n,o),!i&&this.drawRipple(t+.02*this.width,s+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(e,t,s,i){const a=(s-t)/2,n=Math.PI/i;return t+a*Math.sin(n*e)}clickOnMonsterTutorial(e){if(this.shouldPlayMonsterClickTutorialAnimation()){const t=2e3,s=this.height/1.9+this.tutorialImg.height/.8,i=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let a;const n=this.endx;this.totalTime<t/2?(a=i+this.totalTime/(t/2)*(s-i),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.5,!0)):(a=s-(this.totalTime-t/2)/(t/2)*(s-i),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,n,a,this.tutorialImg.width,this.tutorialImg.height),a<=i&&(this.totalTime=0),this.totalTime+=e}}shouldPlayTutorial(){return a.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return a.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(e){this.puzzleNumber=e}setPlayMonsterClickAnimation(e){this.playMnstrClkTtrlAnim=e}}},"./src/constants/index.ts":(e,t,s)=>{s.r(t),s.d(t,{ASSETS_PATH_BG_01:()=>u,ASSETS_PATH_FENCE:()=>g,ASSETS_PATH_HILL:()=>_,ASSETS_PATH_MONSTER_IDLE:()=>m,ASSETS_PATH_STONE_PINK_BG:()=>l,ASSETS_PATH_TOTEM:()=>x,AUDIO_PATH_BTN_CLICK:()=>h,AUDIO_PATH_CHEERING_FUNC:()=>c,AUDIO_PATH_CORRECT_STONE:()=>r,AUDIO_PATH_EATS:()=>i,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>n,AUDIO_PATH_MONSTER_SPIT:()=>a,AUDIO_PATH_ON_DRAG:()=>d,AUDIO_PATH_POINTS_ADD:()=>o,SCENE_NAME_GAME_PLAY:()=>b,SCENE_NAME_LEVEL_END:()=>v,SCENE_NAME_LEVEL_SELECT:()=>p,SCENE_NAME_START:()=>f});const i="./assets/audios/Eat.mp3",a="./assets/audios/MonsterSpit.mp3",n="./assets/audios/Disapointed-05.mp3",o="assets/audios/PointsAdd.wav",r="assets/audios/CorrectStoneFinal.mp3",c=e=>`./assets/audios/Cheering-0${e}.mp3`,h="./assets/audios/ButtonClick.mp3",d="./assets/audios/onDrag.mp3",l="./assets/images/stone_pink_v02.png",x="./assets/images/Totem_v02_v01.png",u="./assets/images/bg_v01.jpg",_="./assets/images/hill_v01.png",g="./assets/images/fence_v01.png",m="./assets/images/idle4.png",f="StartScene",p="LevelSelection",b="GamePlay",v="LevelEnd"},"./src/data/api-data.ts":(e,t,s)=>{s.r(t),s.d(t,{getData:()=>o,getFtmData:()=>n});var i=s("./global-variables.ts");const a="./lang/"+i.lang+"/ftm_"+i.lang+".json";function n(){return fetch(a,{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json().then((e=>e))))}async function o(){return await n()}},"./src/data/data-modal.ts":(e,t,s)=>{s.r(t),s.d(t,{DataModal:()=>i,FeedbackAudios:()=>o,FeedbackTexts:()=>n,FoilStone:()=>h,LevelMeta:()=>x,Levels:()=>r,OtherAudios:()=>a,Prompt:()=>l,Puzzles:()=>c,TargetStone:()=>d});class i{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(e,t,s,i,r,c,h,d,l){this.title=e,this.otherAudios=new a(t),this.levels=this.getLevels(s),this.FeedbackTexts=new n(i),this.FeedbackAudios=new o(c),this.rightToLeft=r,this.majVersion=h,this.minVersion=d,this.version=l}getLevels(e){let t=[];for(let s=0;s<e.length;s++)t.push(new r(e[s]));return t}}class a{selctYourPlayer;watchMeGrow;areYouSure;constructor(e){this.selctYourPlayer=e["Select your player"],this.watchMeGrow=e["Watch me grow"],this.areYouSure=e["Are you sure"]}}class n{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class o{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class r{puzzles;levelMeta;levelNumber;constructor(e){this.puzzles=this.getPuzzleData(e),this.levelMeta=new x(e.LevelMeta),this.levelNumber=e.LevelNumber}getPuzzleData(e){let t=[];return e.Puzzles.map(((e,s)=>{t.push(new c(e))})),t}}class c{segmentNumber;prompt;foilStones;targetStones;constructor(e){this.segmentNumber=e.SegmentNumber,this.prompt=new l(e.prompt),this.foilStones=this.getFoilStones(e),this.targetStones=this.getTargetStones(e)}getFoilStones(e){let t=[];return e.foilstones.map(((e,s)=>{t.push(e.StoneText)})),t}getTargetStones(e){let t=[];return e.targetstones.map(((e,s)=>{t.push(e.StoneText)})),t}}class h{stoneText;constructor(e){this.stoneText=e}}class d{stoneText;constructor(){this.stoneText}}class l{promptText;promptAudio;constructor(e){this.promptText=e.PromptText,this.promptAudio=e.PromptAudio}}class x{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(e){this.promptFadeOut=e.PromptFadeout,this.letterGroup=e.LetterGroup,this.levelNumber=e.LevelNumber,this.protoType=e.PromptType,this.levelType=e.LevelType}}},"./src/data/game-score.ts":(e,t,s)=>{s.r(t),s.d(t,{GameScore:()=>a});var i=s("./global-variables.ts");class a{static currentlanguage=i.lang;static setGameLevelScore(e,t){let s=this.calculateStarCount(t),i={levelName:e.levelMeta.levelType,levelNumber:e.levelMeta.levelNumber,score:t,starCount:s};this.setTotalStarCount(s);let a=this.getAllGameLevelInfo(),n=-1;for(let e=0;e<a.length;e++)if(a[e].levelNumber===i.levelNumber){n=e;break}-1!==n&&i.score>a[n].score?a[n]=i:a.push(i),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(a))}static getAllGameLevelInfo(){const e=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==e?[]:JSON.parse(e)}static setTotalStarCount(e){let t=this.getTotalStarCount()+e;localStorage.setItem(this.currentlanguage+"totalStarCount",t)}static getTotalStarCount(){const e=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==e?0:parseInt(e)}static calculateStarCount(e){return 200==e?1:300==e||400==e?2:500==e?3:0}static getDatafromStorage(){return i.Debugger.DebugMode?JSON.parse(localStorage.getItem(i.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(i.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(e,t,s)=>{s.r(t),s.d(t,{default:()=>i});const i={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/events/EventManager.ts":(e,t,s)=>{s.r(t),s.d(t,{EventManager:()=>a});var i=s("./src/common/event-names.ts");class a{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(e){this.handler=e,this.stoneDropCallbackHandler=e.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=e.loadPuzzleCallbackHandler,document.addEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=e=>{this.stoneDropCallbackHandler(e)};handleLoadPuzzleEvent=e=>{this.loadPuzzleCallbackHandler(e)};unregisterEventListener=()=>{document.removeEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/sceneHandler/scene-handler.ts":(e,t,s)=>{s.r(t),s.d(t,{SceneHandler:()=>x});var i=s("./src/common/common.ts"),a=s("./src/scenes/start-scene.ts"),n=s("./src/scenes/level-selection-scene.ts"),o=s("./global-variables.ts"),r=s("./src/scenes/gameplay-scene.ts"),c=s("./src/data/game-score.ts"),h=s("./src/scenes/loading-scene.ts"),d=s("./src/scenes/levelend-scene.ts"),l=s("./src/constants/index.ts");class x{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;pwa_install_status;toggleBtn;constructor(e,t){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new a.StartScene(e,t,this.switchSceneToLevelSelection),x.SceneName=i.StartScene1,this.loadingScreen=new h.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const e=t=>{this.animation(t),requestAnimationFrame(e)};requestAnimationFrame(e)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(o.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(o.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let e=c.GameScore.getTotalStarCount(),t=Math.floor(e/12)+1||1;return t<=4?t:4}animation=e=>{let t=e-this.lastTime;this.lastTime=e,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(t),x.SceneName===i.StartScene1?this.startScene.animation(t):x.SceneName===i.LevelSelection1?this.levelSelectionScene.drawLevelSelection():x.SceneName===i.GameScene1?this.gameplayScene.draw(t):x.SceneName===i.EndScene1&&this.levelEndScene.draw(t)};switchSceneToGameplay=(e,t)=>{this.showLoading(),this.dispose(t);let s=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new r.GameplayScene(this.canvas,e.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,e.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(l.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,s,this.data.FeedbackAudios),x.SceneName=i.GameScene1}),800)};switchSceneToEndLevel=(e,t,s,a)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(l.SCENE_NAME_GAME_PLAY),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new d.LevelEndScene(this.canvas,this.height,this.width,this.context,e,s,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,t),x.SceneName=i.EndScene1}),a?0:4e3)};switchSceneToLevelSelection=e=>{this.showLoading(),this.dispose(e),setTimeout((()=>{this.levelSelectionScene=new n.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),x.SceneName=i.LevelSelection1}),800)};dispose=e=>{e==l.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():e===l.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():e===l.SCENE_NAME_START?this.startScene.dispose():e==l.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(i.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(e,t,s)=>{s.r(t),s.d(t,{GameplayScene:()=>h});var i=s("./src/components/index.ts"),a=s("./src/common/index.ts"),n=s("./global-variables.ts"),o=s("./src/data/game-score.ts"),r=s("./src/Firebase/firebase-integration.ts"),c=s("./src/constants/index.ts");class h{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background1;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;constructor(e,t,s,o,h,d,l,x,u,_,g){this.width=e.width,this.height=e.height,this.rightToLeft=h,this.canvas=e,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.monsterPhaseNumber=s||1,this.levelData=t,this.switchSceneToEnd=d,this.levelNumber=l,this.switchToLevelSelection=x,this.reloadScene=u,this.jsonVersionNumber=_,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new i.PauseButton(this.context,this.canvas),this.timerTicking=new i.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new i.StoneHandler(this.context,this.canvas,this.counter,this.levelData,g,this.timerTicking),this.tutorial=new i.Tutorial(this.context,e.width,e.height),this.promptText=new i.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new i.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new i.PausePopUp(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:t,selectedLevelNumber:l}),this.background1=new i.Background(this.context,this.width,this.height,this.levelData.levelNumber),this.firebaseIntegration=new r.FirebaseIntegration,this.feedBackTextCanavsElement=document.getElementById("feedback-text"),this.feedBackTextCanavsElement.height=this.height,this.feedBackTextCanavsElement.width=this.width,this.feedbackTextEffects=new i.FeedbackTextEffects(this.feedBackTextCanavsElement.getContext("2d",{willReadFrequently:!0}),this.width,this.height),this.audioPlayer=new i.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=t.puzzles,this.feedBackTexts=o,this.images={pillerImg:c.ASSETS_PATH_TOTEM,bgImg:c.ASSETS_PATH_BG_01,hillImg:c.ASSETS_PATH_HILL,fenchImg:c.ASSETS_PATH_FENCE,profileMonster:c.ASSETS_PATH_MONSTER_IDLE},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}));var m=this.levelData.levelMeta.levelNumber;n.Debugger.DebugMode?localStorage.setItem(a.PreviousPlayedLevel+n.lang+"Debug",m):localStorage.setItem(a.PreviousPlayedLevel+n.lang,m),this.addEventListeners(),this.resetAnimationID=0}resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(e){const t=Object.keys(this.feedBackTexts)[e];return this.feedBackTexts[t]}getRandomInt(e,t){const s=Object.values(this.feedBackTexts).filter((e=>null!=e)).length-1;return Math.floor(Math.random()*(s-e+1))+e}handleMouseUp=e=>{let t=this.canvas.getBoundingClientRect();const s=e.clientX-t.left,i=e.clientY-t.top;if(Math.sqrt((s-this.monster.x-this.canvas.width/4)**2+(i-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:e}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(e);break;case"Word":case"SoundWord":this.wordPuzzle(e,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const e=50,t=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<e&&this.pickedStoneObject.origx<t?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null};handleMouseDown=e=>{let t=this.canvas.getBoundingClientRect();const s=e.clientX-t.left,i=e.clientY-t.top;for(let e of this.stoneHandler.foilStones){if(Math.sqrt((s-e.x)**2+(i-e.y)**2)<=40){this.pickedStoneObject=e,this.pickedStone=e,this.audioPlayer.playAudio(c.AUDIO_PATH_ON_DRAG);break}}};handleMouseMove=e=>{if(this.pickedStone){let t=this.canvas.getBoundingClientRect();const s=e.clientX-t.left,i=e.clientY-t.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=i}};handleMouseClick=e=>{let t=this.canvas.getBoundingClientRect();const s=e.clientX-t.left,i=e.clientY-t.top;this.monster.onClick(s,i)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound(c.AUDIO_PATH_BTN_CLICK),this.pauseGamePlay()),this.promptText.onClick(s,i)&&this.promptText.playSound()};handleTouchStart=e=>{const t=e.touches[0];this.handleMouseDown({clientX:t.clientX,clientY:t.clientY})};handleTouchMove=e=>{const t=e.touches[0];this.handleMouseMove({clientX:t.clientX,clientY:t.clientY})};handleTouchEnd=e=>{const t=e.changedTouches[0];this.handleMouseUp({clientX:t.clientX,clientY:t.clientY})};draw(e){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+e,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background1.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(e),this.monster.update(e),this.timerTicking.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(e),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||(this.feedbackTextEffects.render(),0==this.counter&&this.tutorial.clickOnMonsterTutorial(e)),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(e)}addEventListeners(){this.handler.addEventListener(a.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(a.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(a.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(a.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(a.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(a.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(a.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=e=>{this.removeEventListeners(),this.stonesCount=1;const t=Boolean(e);if(t&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,t);else{const e=new CustomEvent(a.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(e)}),t?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.feedbackTextEffects.unregisterEventListener(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};letterPuzzle(e){const t=this.getRandomInt(0,1),s=this.stoneHandler.isStoneLetterDropCorrect(e,t);s&&this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(s)}wordPuzzle(e,t){this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const s=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+e;const i=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,s,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&i)return this.handleCorrectStoneDrop(s),this.handleStoneDropEnd(i,"Word"),void(this.stonesCount=1);i?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==n.lang?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation()}),2e3)):(this.handleStoneDropEnd(i,"Word"),this.stonesCount=1)}resetToIdleAnimation(e,t){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(e,t)}handleStoneDropEnd(e,t=null){this.logPuzzleEndFirebaseEvent(e,t),this.dispatchStoneDropEvent(e),this.loadPuzzle()}handleCorrectStoneDrop=e=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(e)),this.feedBackTextCanavsElement.style.zIndex="2"};dispatchStoneDropEvent(e){const t=new CustomEvent(a.STONEDROP,{detail:{isCorrect:e}});document.dispatchEvent(t)}initNewPuzzle(e){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,this.feedbackTextEffects.clearParticle(),this.feedBackTextCanavsElement.style.zIndex="0",document.dispatchEvent(e),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(e,t){let s=Date.now();const i={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:e?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==t?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(s-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let e=Date.now();const t={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(e-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(t)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/level-selection-scene.ts":(e,t,s)=>{s.r(t),s.d(t,{LevelSelectionScreen:()=>d});var i=s("./global-variables.ts"),a=s("./src/common/common.ts"),n=s("./src/common/level-config.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/data/api-data.ts"),c=s("./src/data/game-score.ts"),h=s("./src/Firebase/firebase-integration.ts");class d{canvas;data;levelButtonPos;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;constructor(e,t,s){this.canvas=e,this.data=t;let n=this;this.callBack=s,this.levelsSectionCount=n.data.levels.length/10>Math.floor(n.data.levels.length/10)?Math.floor(n.data.levels.length/10)+1:Math.floor(n.data.levels.length/10),this.initialiseButtonPos(),this.levels=[],this.firebaseIntegration=new h.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(this.levelButtonPos),this.gameLevelData=c.GameScore.getAllGameLevelInfo(),this.callBack=s,this.audioPlayer=new o.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(i.Debugger.DebugMode?localStorage.getItem(a.PreviousPlayedLevel+i.lang+"Debug"):localStorage.getItem(a.PreviousPlayedLevel+i.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.images={mapIcon:"./assets/images/mapIcon.png",mapIconSpecial:"./assets/images/map_icon_monster_level_v01.png",mapLock:"./assets/images/mapLock.png",map:"./assets/images/map.jpg",star:"./assets/images/star.png",nextbtn:"./assets/images/next_btn.png",backbtn:"./assets/images/back_btn.png"},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/intro.mp3")})),this.addListeners()}async init(){const e=await(0,r.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}initialiseButtonPos(){this.levelButtonPos=[[[this.canvas.width/10,this.canvas.height/10],[this.canvas.width/2.5,this.canvas.height/10],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/10],[this.canvas.width/10,this.canvas.height/3],[this.canvas.width/2.5,this.canvas.height/3],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/3],[this.canvas.width/10,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.8],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.3]]]}createLevelButtons(e){let t=e[0],s=0;for(let e=0;e<10;e++){let e=new n.LevelConfig(t[s][0],t[s][1],s+1);this.levels.push(e),s+=1}}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};getTouches(e){return e.touches||e.originalEvent.touches}handleTouchStart=e=>{const t=this.getTouches(e)[0];this.xDown=t.clientX,this.yDown=t.clientY};handleTouchMove=e=>{if(!this.xDown||!this.yDown)return;let t=e.touches[0].clientX,s=e.touches[0].clientY,i=this.xDown-t,a=this.yDown-s;Math.abs(i)>Math.abs(a)&&(i>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=e=>{e.preventDefault();let t=document.getElementById("canvas").getBoundingClientRect();const s=e.clientX-t.left,a=e.clientY-t.top;s>=.7*this.canvas.width&&s<.7*this.canvas.width+this.canvas.height/10&&a>this.canvas.height/1.3&&a<this.canvas.height/1.3+this.canvas.height/10&&this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)),s>=this.canvas.width/10&&s<this.canvas.width/10+this.canvas.height/10&&a>this.canvas.height/1.3&&a<this.canvas.height/1.3+this.canvas.height/10&&(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex));for(let e of this.levels)Math.sqrt((s-e.x-this.canvas.height/20)*(s-e.x-this.canvas.height/20)+(a-e.y-this.canvas.height/20)*(a-e.y-this.canvas.height/20))<45&&(i.Debugger.DebugMode||e.index+this.levelSelectionPageIndex-1<=this.unlockLevelIndex+1)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.levelNumber=e.index+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber))};drawLevel(e,t){let s=t.height/5,a=s/6;const n=[5,13,20,30,42];if(e.index+this.levelSelectionPageIndex<=this.data.levels.length){const t=e.index+this.levelSelectionPageIndex,o=n.includes(t);this.context.drawImage(o?this.loadedImages.mapIconSpecial:this.loadedImages.mapIcon,e.x,e.y,o?.9*s:s,o?.9*s:s),this.context.fillStyle="white",this.context.font=a+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(e.index+this.levelSelectionPageIndex,e.x+s/3.5,e.y+s/3),this.context.font=a-s/30+`px ${i.font}, monospace`,i.Debugger.DebugMode&&this.context.fillText(this.data.levels[e.index+this.levelSelectionPageIndex-1].levelMeta.levelType,e.x+s/3.5,e.y+s/1.3)}}draw(){for(let e of this.levels)this.drawLevel(e,this.canvas)}downButton(e){let t=this.canvas.height/10;e!=10*this.levelsSectionCount-10&&this.context.drawImage(this.loadedImages.nextbtn,.7*this.canvas.width,this.canvas.height/1.3,t,t),0!=e&&this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/10,this.canvas.height/1.3,t,t)}drawStars(e){if(null!=e){if(null!=e.length)for(let t of e)this.unlockLevelIndex<parseInt(t.levelNumber)&&t.starCount>=2&&(this.unlockLevelIndex=parseInt(t.levelNumber));for(let t of this.levels)if(t.index+this.levelSelectionPageIndex<=this.data.levels.length){i.Debugger.DebugMode||t.index+this.levelSelectionPageIndex-1>this.unlockLevelIndex+1&&this.context.drawImage(this.loadedImages.mapLock,t.x,t.y,this.canvas.height/13,this.canvas.height/13);for(let s=0;s<e.length;s++)if(t.index-1+this.levelSelectionPageIndex==parseInt(e[s].levelNumber)){this.drawStar(t,this.canvas,e[s].starCount,this.context);break}}}}drawStar(e,t,s,i){let a=t.height/5;s>=1&&i.drawImage(this.loadedImages.star,e.x,e.y-.01*a,a/5,a/5),s>1&&i.drawImage(this.loadedImages.star,e.x+a/2.5,e.y-.01*a,a/5,a/5),3==s&&i.drawImage(this.loadedImages.star,e.x+a/5,e.y-.1*a,a/5,a/5)}startGame(e){this.dispose(),this.audioPlayer.stopAllAudios();let t={currentLevelData:this.data.levels[e],selectedLevelNumber:e};this.logSelectedLevelEvent(),this.callBack(t,"LevelSelection")}logSelectedLevelEvent(){const e={cr_user_id:i.pseudoId,ftm_language:i.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(e)}drawLevelSelection(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.map,0,0,this.canvas.width,this.canvas.height),this.draw(),this.downButton(this.levelSelectionPageIndex),this.drawStars(this.gameLevelData))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(e,t,s)=>{s.r(t),s.d(t,{LevelEndScene:()=>l});var i=s("./src/common/common.ts"),a=s("./src/common/event-names.ts"),n=s("./src/components/audio-player.ts"),o=s("./src/components/background.ts"),r=s("./src/components/buttons/close-button.ts"),c=s("./src/components/buttons/next-button.ts"),h=s("./src/components/buttons/retry-button.ts"),d=s("./src/components/monster.ts");class l{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(e,t,s,a,l,x,u,_,g,m){this.canvas=e,this.height=t,this.width=s,this.context=a,this.monster=new d.Monster(this.canvas,m,this.switchToReactionAnimation),this.background=new o.Background(this.context,this.width,this.height,x),this.switchToGameplayCB=u,this.switchToLevelSelectionCB=_,this.data=g,this.starDrawnCount=0,this.closeButton=new r.default(a,e,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new h.default(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new c.default(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new n.AudioPlayer,this.starCount=l,this.currentLevel=x,this.images={backgroundImg:"./assets/images/WIN_screen_bg.png",star1Img:"./assets/images/pinStar1.png",star2Img:"./assets/images/pinStar2.png",star3Img:"./assets/images/pinStar3.png",winBackgroundImg:"./assets/images/bg_v01.jpg"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new n.AudioPlayer}switchToReactionAnimation=()=>{this.starCount<=1?("visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/LevelLoseFanfare.mp3"),this.monster.changeToSpitAnimation()):("visible"===document.visibilityState&&(this.audioPlayer.playAudio("./assets/audios/LevelWinFanfare.mp3"),this.audioPlayer.playAudio("./assets/audios/intro.mp3")),this.monster.changeToEatAnimation())};draw(e){this.background.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(e),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((e=>setTimeout((()=>{this.starDrawnCount=e.count}),e.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=e=>{var t=document.getElementById("canvas").getBoundingClientRect();const s=e.clientX-t.left,i=e.clientY-t.top;if(this.closeButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(s,i)){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let e={currentLevelData:this.data.levels[this.currentLevel],selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(e,"LevelEnd")}if(this.nextButton.onClick(s,i)&&this.starCount>=2){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let e=Number(this.currentLevel)+1,t={currentLevelData:this.data.levels[e],selectedLevelNumber:e};this.switchToGameplayCB(t,"LevelEnd")}};pauseAudios=()=>{"visible"===document.visibilityState?this.starCount>=2&&this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((e=>clearTimeout(e))),document.getElementById("canvas").removeEventListener(a.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(e,t,s)=>{s.r(t),s.d(t,{LoadingScene:()=>a});var i=s("./src/common/common.ts");class a{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(e,t,s){this.canvas=document.getElementById("loading"),this.canvas.height=t,this.canvas.width=e,this.height=t,this.width=e,this.removeLoading=s,this.context=this.canvas.getContext("2d"),this.images={cloud6:"./assets/images/cloud_01.png",cloud7:"./assets/images/cloud_02.png",cloud8:"./assets/images/cloud_03.png"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(e){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*e,this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(e,t,s)=>{s.r(t),s.d(t,{StartScene:()=>l});var i=s("./src/common/common.ts"),a=s("./src/components/monster.ts"),n=s("./global-variables.ts"),o=s("./src/components/background.ts"),r=s("./src/components/audio-player.ts"),c=s("./src/Firebase/firebase-integration.ts"),h=s("./src/common/utils.ts"),d=s("./src/components/play-button.ts");class l{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background1;audioPlayer;toggleBtn;pwa_install_status;constructor(e,t,s){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new a.Monster(this.canvas,4),this.switchSceneToLevelSelection=s,this.background1=new o.Background(this.context,this.width,this.height,1),this.audioPlayer=new r.AudioPlayer,this.pwa_status=localStorage.getItem(i.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.createPlayButton(),l.SceneName=i.StartScene1,window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt)}animation=e=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),l.SceneName==i.StartScene1&&(this.background1.draw(),this.context.font=`${this.titleFont}px ${n.font}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(e),this.playButton.draw())};createPlayButton(){this.playButton=new d.default(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(e){e.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=e=>{let t=this;const s=document.getElementById("canvas");e.preventDefault();var a=s.getBoundingClientRect();const n=e.clientX-a.left,o=e.clientY-a.top,{excludeX:r,excludeY:d}=h.Utils.getExcludedCoordinates(s,15);n<r&&o<d||(c.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",i.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),t.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data?.title?.length}handlerInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(i.PWAInstallStatus,"false")}}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(e,t,s)=>{s.r(t),s.d(t,{getAnalytics:()=>W,getGoogleAnalyticsClientId:()=>G,initializeAnalytics:()=>U,isSupported:()=>V,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>q,setConsent:()=>Z,setCurrentScreen:()=>X,setDefaultEventParameters:()=>K,setUserId:()=>$,setUserProperties:()=>Y,settings:()=>H});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js");s("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",c="firebase_id",h="origin",d=6e4,l="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",x="https://www.googletagmanager.com/gtag/js",u=new a.Logger("@firebase/analytics"),_={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},g=new n.ErrorFactory("analytics","Analytics",_);function m(e){if(!e.startsWith(x)){const t=g.create("invalid-gtag-resource",{gtagURL:e});return u.warn(t.message),""}return e}function f(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}function p(e,t){const s=function(e,t){let s;return window.trustedTypes&&(s=window.trustedTypes.createPolicy(e,t)),s}("firebase-js-sdk-policy",{createScriptURL:m}),i=document.createElement("script"),a=`${x}?l=${e}&id=${t}`;i.src=s?null==s?void 0:s.createScriptURL(a):a,i.async=!0,document.head.appendChild(i)}function b(e,t,s,i){return async function(a,...n){try{if("event"===a){const[i,a]=n;await async function(e,t,s,i,a){try{let n=[];if(a&&a.send_to){let e=a.send_to;Array.isArray(e)||(e=[e]);const i=await f(s);for(const s of e){const e=i.find((e=>e.measurementId===s)),a=e&&t[e.appId];if(!a){n=[];break}n.push(a)}}0===n.length&&(n=Object.values(t)),await Promise.all(n),e("event",i,a||{})}catch(e){u.error(e)}}(e,t,s,i,a)}else if("config"===a){const[a,o]=n;await async function(e,t,s,i,a,n){const o=i[a];try{if(o)await t[o];else{const e=(await f(s)).find((e=>e.measurementId===a));e&&await t[e.appId]}}catch(e){u.error(e)}e("config",a,n)}(e,t,s,i,a,o)}else if("consent"===a){const[t]=n;e("consent","update",t)}else if("get"===a){const[t,s,i]=n;e("get",t,s,i)}else if("set"===a){const[t]=n;e("set",t)}else e(a,...n)}catch(e){u.error(e)}}}const v=30;const w=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function y(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function S(e,t=w,s){const{appId:i,apiKey:a,measurementId:n}=e.options;if(!i)throw g.create("no-app-id");if(!a){if(n)return{measurementId:n,appId:i};throw g.create("no-api-key")}const o=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new E;return setTimeout((async()=>{r.abort()}),void 0!==s?s:d),I({appId:i,apiKey:a,measurementId:n},o,r,t)}async function I(e,{throttleEndTimeMillis:t,backoffCount:s},i,a=w){var o;const{appId:r,measurementId:c}=e;try{await function(e,t){return new Promise(((s,i)=>{const a=Math.max(t-Date.now(),0),n=setTimeout(s,a);e.addEventListener((()=>{clearTimeout(n),i(g.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(c)return u.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:r,measurementId:c};throw e}try{const t=await async function(e){var t;const{appId:s,apiKey:i}=e,a={method:"GET",headers:y(i)},n=l.replace("{app-id}",s),o=await fetch(n,a);if(200!==o.status&&304!==o.status){let e="";try{const s=await o.json();(null===(t=s.error)||void 0===t?void 0:t.message)&&(e=s.error.message)}catch(e){}throw g.create("config-fetch-failed",{httpStatus:o.status,responseMessage:e})}return o.json()}(e);return a.deleteThrottleMetadata(r),t}catch(t){const h=t;if(!function(e){if(!(e instanceof n.FirebaseError&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(h)){if(a.deleteThrottleMetadata(r),c)return u.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${c} provided in the "measurementId" field in the local Firebase config. [${null==h?void 0:h.message}]`),{appId:r,measurementId:c};throw t}const d=503===Number(null===(o=null==h?void 0:h.customData)||void 0===o?void 0:o.httpStatus)?(0,n.calculateBackoffMillis)(s,a.intervalMillis,v):(0,n.calculateBackoffMillis)(s,a.intervalMillis),l={throttleEndTimeMillis:Date.now()+d,backoffCount:s+1};return a.setThrottleMetadata(r,l),u.debug(`Calling attemptFetch again in ${d} millis`),I(e,l,i,a)}}class E{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let T,C;function P(e){C=e}function L(e){T=e}async function k(e,t,s,i,a,o,r){var d;const l=S(e);l.then((t=>{s[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&u.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>u.error(e))),t.push(l);const _=async function(){if(!(0,n.isIndexedDBAvailable)())return u.warn(g.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,n.validateIndexedDBOpenable)()}catch(e){return u.warn(g.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[m,f]=await Promise.all([l,_]);(function(e){const t=window.document.getElementsByTagName("script");for(const s of Object.values(t))if(s.src&&s.src.includes(x)&&s.src.includes(e))return s;return null})(o)||p(o,m.measurementId),C&&(a("consent","default",C),P(void 0)),a("js",new Date);const b=null!==(d=null==r?void 0:r.config)&&void 0!==d?d:{};return b[h]="firebase",b.update=!0,null!=f&&(b[c]=f),a("config",m.measurementId,b),T&&(a("set",T),L(void 0)),m.measurementId}class A{constructor(e){this.app=e}_delete(){return delete D[this.app.options.appId],Promise.resolve()}}let D={},B=[];const M={};let O,N,z="dataLayer",j="gtag",F=!1;function H(e){if(F)throw g.create("already-initialized");e.dataLayerName&&(z=e.dataLayerName),e.gtagName&&(j=e.gtagName)}function R(e,t,s){!function(){const e=[];if((0,n.isBrowserExtension)()&&e.push("This is a browser extension environment."),(0,n.areCookiesEnabled)()||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),s=g.create("invalid-analytics-context",{errorInfo:t});u.warn(s.message)}}();const i=e.options.appId;if(!i)throw g.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw g.create("no-api-key");u.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=D[i])throw g.create("already-exists",{id:i});if(!F){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(z);const{wrappedGtag:e,gtagCore:t}=function(e,t,s,i,a){let n=function(...e){window[i].push(arguments)};return window[a]&&"function"==typeof window[a]&&(n=window[a]),window[a]=b(n,e,t,s),{gtagCore:n,wrappedGtag:window[a]}}(D,B,M,z,j);N=e,O=t,F=!0}D[i]=k(e,B,M,t,O,z,s);return new A(e)}function W(e=(0,i.getApp)()){e=(0,n.getModularInstance)(e);const t=(0,i._getProvider)(e,r);return t.isInitialized()?t.getImmediate():U(e)}function U(e,t={}){const s=(0,i._getProvider)(e,r);if(s.isInitialized()){const e=s.getImmediate();if((0,n.deepEqual)(t,s.getOptions()))return e;throw g.create("already-initialized")}return s.initialize({options:t})}async function V(){if((0,n.isBrowserExtension)())return!1;if(!(0,n.areCookiesEnabled)())return!1;if(!(0,n.isIndexedDBAvailable)())return!1;try{return await(0,n.validateIndexedDBOpenable)()}catch(e){return!1}}function X(e,t,s){e=(0,n.getModularInstance)(e),async function(e,t,s,i){if(i&&i.global)return e("set",{screen_name:s}),Promise.resolve();e("config",await t,{update:!0,screen_name:s})}(N,D[e.app.options.appId],t,s).catch((e=>u.error(e)))}async function G(e){return e=(0,n.getModularInstance)(e),async function(e,t){const s=await t;return new Promise(((t,i)=>{e("get",s,"client_id",(e=>{e||i(g.create("no-client-id")),t(e)}))}))}(N,D[e.app.options.appId])}function $(e,t,s){e=(0,n.getModularInstance)(e),async function(e,t,s,i){if(i&&i.global)return e("set",{user_id:s}),Promise.resolve();e("config",await t,{update:!0,user_id:s})}(N,D[e.app.options.appId],t,s).catch((e=>u.error(e)))}function Y(e,t,s){e=(0,n.getModularInstance)(e),async function(e,t,s,i){if(i&&i.global){const t={};for(const e of Object.keys(s))t[`user_properties.${e}`]=s[e];return e("set",t),Promise.resolve()}e("config",await t,{update:!0,user_properties:s})}(N,D[e.app.options.appId],t,s).catch((e=>u.error(e)))}function q(e,t){e=(0,n.getModularInstance)(e),async function(e,t){const s=await e;window[`ga-disable-${s}`]=!t}(D[e.app.options.appId],t).catch((e=>u.error(e)))}function K(e){N?N("set",e):L(e)}function J(e,t,s,i){e=(0,n.getModularInstance)(e),async function(e,t,s,i,a){if(a&&a.global)e("event",s,i);else{const a=await t;e("event",s,Object.assign(Object.assign({},i),{send_to:a}))}}(N,D[e.app.options.appId],t,s,i).catch((e=>u.error(e)))}function Z(e){N?N("consent","update",e):P(e)}const Q="@firebase/analytics",ee="0.10.0";(0,i._registerComponent)(new o.Component(r,((e,{options:t})=>R(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),(0,i._registerComponent)(new o.Component("analytics-internal",(function(e){try{const t=e.getProvider(r).getImmediate();return{logEvent:(e,s,i)=>J(t,e,s,i)}}catch(e){throw g.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),(0,i.registerVersion)(Q,ee),(0,i.registerVersion)(Q,ee,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(e,t,s)=>{s.r(t),s.d(t,{FirebaseError:()=>n.FirebaseError,SDK_VERSION:()=>Y,_DEFAULT_ENTRY_NAME:()=>O,_addComponent:()=>F,_addOrOverwriteComponent:()=>H,_apps:()=>z,_clearComponents:()=>V,_components:()=>j,_getProvider:()=>W,_registerComponent:()=>R,_removeServiceInstance:()=>U,deleteApp:()=>Z,getApp:()=>K,getApps:()=>J,initializeApp:()=>q,onLog:()=>ee,registerVersion:()=>Q,setLogLevel:()=>te});var i=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/idb/build/index.js");class r{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const c="@firebase/app",h="0.9.15",d=new a.Logger("@firebase/app"),l="@firebase/app-compat",x="@firebase/analytics-compat",u="@firebase/analytics",_="@firebase/app-check-compat",g="@firebase/app-check",m="@firebase/auth",f="@firebase/auth-compat",p="@firebase/database",b="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",y="@firebase/installations",S="@firebase/installations-compat",I="@firebase/messaging",E="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",P="@firebase/remote-config",L="@firebase/remote-config-compat",k="@firebase/storage",A="@firebase/storage-compat",D="@firebase/firestore",B="@firebase/firestore-compat",M="firebase",O="[DEFAULT]",N={[c]:"fire-core",[l]:"fire-core-compat",[u]:"fire-analytics",[x]:"fire-analytics-compat",[g]:"fire-app-check",[_]:"fire-app-check-compat",[m]:"fire-auth",[f]:"fire-auth-compat",[p]:"fire-rtdb",[b]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[y]:"fire-iid",[S]:"fire-iid-compat",[I]:"fire-fcm",[E]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[P]:"fire-rc",[L]:"fire-rc-compat",[k]:"fire-gcs",[A]:"fire-gcs-compat",[D]:"fire-fst",[B]:"fire-fst-compat","fire-js":"fire-js",[M]:"fire-js-all"},z=new Map,j=new Map;function F(e,t){try{e.container.addComponent(t)}catch(s){d.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,s)}}function H(e,t){e.container.addOrOverwriteComponent(t)}function R(e){const t=e.name;if(j.has(t))return d.debug(`There were multiple attempts to register component ${t}.`),!1;j.set(t,e);for(const t of z.values())F(t,e);return!0}function W(e,t){const s=e.container.getProvider("heartbeat").getImmediate({optional:!0});return s&&s.triggerHeartbeat(),e.container.getProvider(t)}function U(e,t,s=O){W(e,t).clearInstance(s)}function V(){j.clear()}const X={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},G=new n.ErrorFactory("app","Firebase",X);class ${constructor(e,t,s){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=s,this.container.addComponent(new i.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw G.create("app-deleted",{appName:this._name})}}const Y="10.1.0";function q(e,t={}){let s=e;if("object"!=typeof t){t={name:t}}const a=Object.assign({name:O,automaticDataCollectionEnabled:!1},t),o=a.name;if("string"!=typeof o||!o)throw G.create("bad-app-name",{appName:String(o)});if(s||(s=(0,n.getDefaultAppConfig)()),!s)throw G.create("no-options");const r=z.get(o);if(r){if((0,n.deepEqual)(s,r.options)&&(0,n.deepEqual)(a,r.config))return r;throw G.create("duplicate-app",{appName:o})}const c=new i.ComponentContainer(o);for(const e of j.values())c.addComponent(e);const h=new $(s,a,c);return z.set(o,h),h}function K(e=O){const t=z.get(e);if(!t&&e===O&&(0,n.getDefaultAppConfig)())return q();if(!t)throw G.create("no-app",{appName:e});return t}function J(){return Array.from(z.values())}async function Z(e){const t=e.name;z.has(t)&&(z.delete(t),await Promise.all(e.container.getProviders().map((e=>e.delete()))),e.isDeleted=!0)}function Q(e,t,s){var a;let n=null!==(a=N[e])&&void 0!==a?a:e;s&&(n+=`-${s}`);const o=n.match(/\s|\//),r=t.match(/\s|\//);if(o||r){const e=[`Unable to register library "${n}" with version "${t}":`];return o&&e.push(`library name "${n}" contains illegal characters (whitespace or "/")`),o&&r&&e.push("and"),r&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void d.warn(e.join(" "))}R(new i.Component(`${n}-version`,(()=>({library:n,version:t})),"VERSION"))}function ee(e,t){if(null!==e&&"function"!=typeof e)throw G.create("invalid-log-argument");(0,a.setUserLogHandler)(e,t)}function te(e){(0,a.setLogLevel)(e)}const se="firebase-heartbeat-database",ie=1,ae="firebase-heartbeat-store";let ne=null;function oe(){return ne||(ne=(0,o.openDB)(se,ie,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(ae)}}).catch((e=>{throw G.create("idb-open",{originalErrorMessage:e.message})}))),ne}async function re(e,t){try{const s=(await oe()).transaction(ae,"readwrite"),i=s.objectStore(ae);await i.put(t,ce(e)),await s.done}catch(e){if(e instanceof n.FirebaseError)d.warn(e.message);else{const t=G.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});d.warn(t.message)}}}function ce(e){return`${e.name}!${e.options.appId}`}class he{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new le(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=de();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=de(),{heartbeatsToSend:t,unsentEntries:s}=function(e,t=1024){const s=[];let i=e.slice();for(const a of e){const e=s.find((e=>e.agent===a.agent));if(e){if(e.dates.push(a.date),xe(s)>t){e.dates.pop();break}}else if(s.push({agent:a.agent,dates:[a.date]}),xe(s)>t){s.pop();break}i=i.slice(1)}return{heartbeatsToSend:s,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=(0,n.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,s.length>0?(this._heartbeatsCache.heartbeats=s,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function de(){return(new Date).toISOString().substring(0,10)}class le{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,n.isIndexedDBAvailable)()&&(0,n.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{const t=await oe();return await t.transaction(ae).objectStore(ae).get(ce(e))}catch(e){if(e instanceof n.FirebaseError)d.warn(e.message);else{const t=G.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});d.warn(t.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const s=await this.read();return re(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:s.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const s=await this.read();return re(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:s.lastSentHeartbeatDate,heartbeats:[...s.heartbeats,...e.heartbeats]})}}}function xe(e){return(0,n.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e})).length}var ue;ue="",R(new i.Component("platform-logger",(e=>new r(e)),"PRIVATE")),R(new i.Component("heartbeat",(e=>new he(e)),"PRIVATE")),Q(c,h,ue),Q(c,h,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(e,t,s)=>{s.r(t),s.d(t,{Component:()=>a,ComponentContainer:()=>r,Provider:()=>o});var i=s("./node_modules/@firebase/util/dist/index.esm2017.js");class a{constructor(e,t,s){this.name=e,this.instanceFactory=t,this.type=s,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const n="[DEFAULT]";class o{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new i.Deferred;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const s=this.getOrInitializeService({instanceIdentifier:t});s&&e.resolve(s)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const s=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(s)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:s})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:n})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const s=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:s});t.resolve(e)}catch(e){}}}}clearInstance(e=n){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=n){return this.instances.has(e)}getOptions(e=n){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,s=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(s))throw Error(`${this.name}(${s}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:s,options:t});for(const[e,t]of this.instancesDeferred.entries()){s===this.normalizeInstanceIdentifier(e)&&t.resolve(i)}return i}onInit(e,t){var s;const i=this.normalizeInstanceIdentifier(t),a=null!==(s=this.onInitCallbacks.get(i))&&void 0!==s?s:new Set;a.add(e),this.onInitCallbacks.set(i,a);const n=this.instances.get(i);return n&&e(n,i),()=>{a.delete(e)}}invokeOnInitCallbacks(e,t){const s=this.onInitCallbacks.get(t);if(s)for(const i of s)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let s=this.instances.get(e);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===n?void 0:i),options:t}),this.instances.set(e,s),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(s,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,s)}catch(e){}var i;return s||null}normalizeInstanceIdentifier(e=n){return this.component?this.component.multipleInstances?e:n:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new o(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(e,t,s)=>{s.r(t),s.d(t,{deleteInstallations:()=>Q,getId:()=>K,getInstallations:()=>te,getToken:()=>J,onIdChange:()=>ee});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",c="0.6.4",h=1e4,d=`w:${c}`,l="FIS_v2",x="https://firebaseinstallations.googleapis.com/v1",u=36e5,_={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},g=new n.ErrorFactory("installations","Installations",_);function m(e){return e instanceof n.FirebaseError&&e.code.includes("request-failed")}function f({projectId:e}){return`${x}/projects/${e}/installations`}function p(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function b(e,t){const s=(await t.json()).error;return g.create("request-failed",{requestName:e,serverCode:s.code,serverMessage:s.message,serverStatus:s.status})}function v({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function w(e,{refreshToken:t}){const s=v(e);return s.append("Authorization",function(e){return`${l} ${e}`}(t)),s}async function y(e){const t=await e();return t.status>=500&&t.status<600?e():t}function S(e){return new Promise((t=>{setTimeout(t,e)}))}const I=/^[cdef][\w-]{21}$/,E="";function T(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){const t=(s=e,btoa(String.fromCharCode(...s)).replace(/\+/g,"-").replace(/\//g,"_"));var s;return t.substr(0,22)}(e);return I.test(t)?t:E}catch(e){return E}}function C(e){return`${e.appName}!${e.appId}`}const P=new Map;function L(e,t){const s=C(e);k(s,t),function(e,t){const s=D();s&&s.postMessage({key:e,fid:t});B()}(s,t)}function k(e,t){const s=P.get(e);if(s)for(const e of s)e(t)}let A=null;function D(){return!A&&"BroadcastChannel"in self&&(A=new BroadcastChannel("[Firebase] FID Change"),A.onmessage=e=>{k(e.data.key,e.data.fid)}),A}function B(){0===P.size&&A&&(A.close(),A=null)}const M="firebase-installations-database",O=1,N="firebase-installations-store";let z=null;function j(){return z||(z=(0,o.openDB)(M,O,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(N)}})),z}async function F(e,t){const s=C(e),i=(await j()).transaction(N,"readwrite"),a=i.objectStore(N),n=await a.get(s);return await a.put(t,s),await i.done,n&&n.fid===t.fid||L(e,t.fid),t}async function H(e){const t=C(e),s=(await j()).transaction(N,"readwrite");await s.objectStore(N).delete(t),await s.done}async function R(e,t){const s=C(e),i=(await j()).transaction(N,"readwrite"),a=i.objectStore(N),n=await a.get(s),o=t(n);return void 0===o?await a.delete(s):await a.put(o,s),await i.done,!o||n&&n.fid===o.fid||L(e,o.fid),o}async function W(e){let t;const s=await R(e.appConfig,(s=>{const i=function(e){const t=e||{fid:T(),registrationStatus:0};return X(t)}(s),a=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){return{installationEntry:t,registrationPromise:Promise.reject(g.create("app-offline"))}}const s={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const s=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:s}){const i=f(e),a=v(e),n=t.getImmediate({optional:!0});if(n){const e=await n.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const o={fid:s,authVersion:l,appId:e.appId,sdkVersion:d},r={method:"POST",headers:a,body:JSON.stringify(o)},c=await y((()=>fetch(i,r)));if(c.ok){const e=await c.json();return{fid:e.fid||s,registrationStatus:2,refreshToken:e.refreshToken,authToken:p(e.authToken)}}throw await b("Create Installation",c)}(e,t);return F(e.appConfig,s)}catch(s){throw m(s)&&409===s.customData.serverCode?await H(e.appConfig):await F(e.appConfig,{fid:t.fid,registrationStatus:0}),s}}(e,s);return{installationEntry:s,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:U(e)}:{installationEntry:t}}(e,i);return t=a.registrationPromise,a.installationEntry}));return s.fid===E?{installationEntry:await t}:{installationEntry:s,registrationPromise:t}}async function U(e){let t=await V(e.appConfig);for(;1===t.registrationStatus;)await S(100),t=await V(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:s}=await W(e);return s||t}return t}function V(e){return R(e,(e=>{if(!e)throw g.create("installation-not-found");return X(e)}))}function X(e){return 1===(t=e).registrationStatus&&t.registrationTime+h<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function G({appConfig:e,heartbeatServiceProvider:t},s){const i=function(e,{fid:t}){return`${f(e)}/${t}/authTokens:generate`}(e,s),a=w(e,s),n=t.getImmediate({optional:!0});if(n){const e=await n.getHeartbeatsHeader();e&&a.append("x-firebase-client",e)}const o={installation:{sdkVersion:d,appId:e.appId}},r={method:"POST",headers:a,body:JSON.stringify(o)},c=await y((()=>fetch(i,r)));if(c.ok){return p(await c.json())}throw await b("Generate Auth Token",c)}async function $(e,t=!1){let s;const i=await R(e.appConfig,(i=>{if(!q(i))throw g.create("not-registered");const a=i.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+u}(e)}(a))return i;if(1===a.requestStatus)return s=async function(e,t){let s=await Y(e.appConfig);for(;1===s.authToken.requestStatus;)await S(100),s=await Y(e.appConfig);const i=s.authToken;return 0===i.requestStatus?$(e,t):i}(e,t),i;{if(!navigator.onLine)throw g.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return s=async function(e,t){try{const s=await G(e,t),i=Object.assign(Object.assign({},t),{authToken:s});return await F(e.appConfig,i),s}catch(s){if(!m(s)||401!==s.customData.serverCode&&404!==s.customData.serverCode){const s=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await F(e.appConfig,s)}else await H(e.appConfig);throw s}}(e,t),t}}));return s?await s:i.authToken}function Y(e){return R(e,(e=>{if(!q(e))throw g.create("not-registered");const t=e.authToken;return 1===(s=t).requestStatus&&s.requestTime+h<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var s}))}function q(e){return void 0!==e&&2===e.registrationStatus}async function K(e){const t=e,{installationEntry:s,registrationPromise:i}=await W(t);return i?i.catch(console.error):$(t).catch(console.error),s.fid}async function J(e,t=!1){const s=e;await async function(e){const{registrationPromise:t}=await W(e);t&&await t}(s);return(await $(s,t)).token}async function Z(e,t){const s=function(e,{fid:t}){return`${f(e)}/${t}`}(e,t),i={method:"DELETE",headers:w(e,t)},a=await y((()=>fetch(s,i)));if(!a.ok)throw await b("Delete Installation",a)}async function Q(e){const{appConfig:t}=e,s=await R(t,(e=>{if(!e||0!==e.registrationStatus)return e}));if(s){if(1===s.registrationStatus)throw g.create("delete-pending-registration");if(2===s.registrationStatus){if(!navigator.onLine)throw g.create("app-offline");await Z(t,s),await H(t)}}}function ee(e,t){const{appConfig:s}=e;return function(e,t){D();const s=C(e);let i=P.get(s);i||(i=new Set,P.set(s,i)),i.add(t)}(s,t),()=>{!function(e,t){const s=C(e),i=P.get(s);i&&(i.delete(t),0===i.size&&P.delete(s),B())}(s,t)}}function te(e=(0,i.getApp)()){return(0,i._getProvider)(e,"installations").getImmediate()}function se(e){return g.create("missing-app-config-values",{valueName:e})}const ie="installations",ae=e=>{const t=e.getProvider("app").getImmediate(),s=function(e){if(!e||!e.options)throw se("App Configuration");if(!e.name)throw se("App Name");const t=["projectId","apiKey","appId"];for(const s of t)if(!e.options[s])throw se(s);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:s,heartbeatServiceProvider:(0,i._getProvider)(t,"heartbeat"),_delete:()=>Promise.resolve()}},ne=e=>{const t=e.getProvider("app").getImmediate(),s=(0,i._getProvider)(t,ie).getImmediate();return{getId:()=>K(s),getToken:e=>J(s,e)}};(0,i._registerComponent)(new a.Component(ie,ae,"PUBLIC")),(0,i._registerComponent)(new a.Component("installations-internal",ne,"PRIVATE")),(0,i.registerVersion)(r,c),(0,i.registerVersion)(r,c,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(e,t,s)=>{s.r(t),s.d(t,{deleteDB:()=>n,openDB:()=>a,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function a(e,t,{blocked:s,upgrade:a,blocking:n,terminated:o}={}){const r=indexedDB.open(e,t),c=(0,i.w)(r);return a&&r.addEventListener("upgradeneeded",(e=>{a((0,i.w)(r.result),e.oldVersion,e.newVersion,(0,i.w)(r.transaction))})),s&&r.addEventListener("blocked",(()=>s())),c.then((e=>{o&&e.addEventListener("close",(()=>o())),n&&e.addEventListener("versionchange",(()=>n()))})).catch((()=>{})),c}function n(e,{blocked:t}={}){const s=indexedDB.deleteDatabase(e);return t&&s.addEventListener("blocked",(()=>t())),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],c=new Map;function h(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(c.get(t))return c.get(t);const s=t.replace(/FromIndex$/,""),i=t!==s,a=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!a&&!o.includes(s))return;const n=async function(e,...t){const n=this.transaction(e,a?"readwrite":"readonly");let o=n.store;return i&&(o=o.index(t.shift())),(await Promise.all([o[s](...t),a&&n.done]))[0]};return c.set(t,n),n}(0,i.r)((e=>({...e,get:(t,s,i)=>h(t,s)||e.get(t,s,i),has:(t,s)=>!!h(t,s)||e.has(t,s)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(e,t,s)=>{s.r(t),s.d(t,{a:()=>d,i:()=>i,r:()=>x,u:()=>m,w:()=>g});const i=(e,t)=>t.some((t=>e instanceof t));let a,n;const o=new WeakMap,r=new WeakMap,c=new WeakMap,h=new WeakMap,d=new WeakMap;let l={get(e,t,s){if(e instanceof IDBTransaction){if("done"===t)return r.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return g(e[t])},set:(e,t,s)=>(e[t]=s,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function x(e){l=e(l)}function u(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(m(this),t),g(o.get(this))}:function(...t){return g(e.apply(m(this),t))}:function(t,...s){const i=e.call(m(this),t,...s);return c.set(i,t.sort?t.sort():[t]),g(i)}}function _(e){return"function"==typeof e?u(e):(e instanceof IDBTransaction&&function(e){if(r.has(e))return;const t=new Promise(((t,s)=>{const i=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",n),e.removeEventListener("abort",n)},a=()=>{t(),i()},n=()=>{s(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",a),e.addEventListener("error",n),e.addEventListener("abort",n)}));r.set(e,t)}(e),i(e,a||(a=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,l):e)}function g(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,s)=>{const i=()=>{e.removeEventListener("success",a),e.removeEventListener("error",n)},a=()=>{t(g(e.result)),i()},n=()=>{s(e.error),i()};e.addEventListener("success",a),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&o.set(t,e)})).catch((()=>{})),d.set(t,e),t}(e);if(h.has(e))return h.get(e);const t=_(e);return t!==e&&(h.set(e,t),d.set(t,e)),t}const m=e=>d.get(e)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(e,t,s)=>{s.r(t),s.d(t,{LogLevel:()=>a,Logger:()=>h,setLogLevel:()=>d,setUserLogHandler:()=>l});const i=[];var a;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(a||(a={}));const n={debug:a.DEBUG,verbose:a.VERBOSE,info:a.INFO,warn:a.WARN,error:a.ERROR,silent:a.SILENT},o=a.INFO,r={[a.DEBUG]:"log",[a.VERBOSE]:"log",[a.INFO]:"info",[a.WARN]:"warn",[a.ERROR]:"error"},c=(e,t,...s)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),a=r[t];if(!a)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[a](`[${i}]  ${e.name}:`,...s)};class h{constructor(e){this.name=e,this._logLevel=o,this._logHandler=c,this._userLogHandler=null,i.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in a))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?n[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,a.DEBUG,...e),this._logHandler(this,a.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,a.VERBOSE,...e),this._logHandler(this,a.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,a.INFO,...e),this._logHandler(this,a.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,a.WARN,...e),this._logHandler(this,a.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,a.ERROR,...e),this._logHandler(this,a.ERROR,...e)}}function d(e){i.forEach((t=>{t.setLogLevel(e)}))}function l(e,t){for(const s of i){let i=null;t&&t.level&&(i=n[t.level]),s.userLogHandler=null===e?null:(t,s,...n)=>{const o=n.map((e=>{if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((e=>e)).join(" ");s>=(null!=i?i:t.logLevel)&&e({level:a[s].toLowerCase(),message:o,args:n,type:t.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(e,t,s)=>{s.r(t),s.d(t,{getAnalytics:()=>i.getAnalytics,getGoogleAnalyticsClientId:()=>i.getGoogleAnalyticsClientId,initializeAnalytics:()=>i.initializeAnalytics,isSupported:()=>i.isSupported,logEvent:()=>i.logEvent,setAnalyticsCollectionEnabled:()=>i.setAnalyticsCollectionEnabled,setConsent:()=>i.setConsent,setCurrentScreen:()=>i.setCurrentScreen,setDefaultEventParameters:()=>i.setDefaultEventParameters,setUserId:()=>i.setUserId,setUserProperties:()=>i.setUserProperties,settings:()=>i.settings});var i=s("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(e,t,s)=>{s.r(t),s.d(t,{FirebaseError:()=>i.FirebaseError,SDK_VERSION:()=>i.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>i._DEFAULT_ENTRY_NAME,_addComponent:()=>i._addComponent,_addOrOverwriteComponent:()=>i._addOrOverwriteComponent,_apps:()=>i._apps,_clearComponents:()=>i._clearComponents,_components:()=>i._components,_getProvider:()=>i._getProvider,_registerComponent:()=>i._registerComponent,_removeServiceInstance:()=>i._removeServiceInstance,deleteApp:()=>i.deleteApp,getApp:()=>i.getApp,getApps:()=>i.getApps,initializeApp:()=>i.initializeApp,onLog:()=>i.onLog,registerVersion:()=>i.registerVersion,setLogLevel:()=>i.setLogLevel});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,i.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(e,t,s)=>{s.r(t),s.d(t,{deleteDB:()=>n,openDB:()=>a,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/idb/build/wrap-idb-value.js");function a(e,t,{blocked:s,upgrade:a,blocking:n,terminated:o}={}){const r=indexedDB.open(e,t),c=(0,i.w)(r);return a&&r.addEventListener("upgradeneeded",(e=>{a((0,i.w)(r.result),e.oldVersion,e.newVersion,(0,i.w)(r.transaction),e)})),s&&r.addEventListener("blocked",(e=>s(e.oldVersion,e.newVersion,e))),c.then((e=>{o&&e.addEventListener("close",(()=>o())),n&&e.addEventListener("versionchange",(e=>n(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),c}function n(e,{blocked:t}={}){const s=indexedDB.deleteDatabase(e);return t&&s.addEventListener("blocked",(e=>t(e.oldVersion,e))),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],c=new Map;function h(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(c.get(t))return c.get(t);const s=t.replace(/FromIndex$/,""),i=t!==s,a=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!a&&!o.includes(s))return;const n=async function(e,...t){const n=this.transaction(e,a?"readwrite":"readonly");let o=n.store;return i&&(o=o.index(t.shift())),(await Promise.all([o[s](...t),a&&n.done]))[0]};return c.set(t,n),n}(0,i.r)((e=>({...e,get:(t,s,i)=>h(t,s)||e.get(t,s,i),has:(t,s)=>!!h(t,s)||e.has(t,s)})))},"./node_modules/idb/build/wrap-idb-value.js":(e,t,s)=>{s.r(t),s.d(t,{a:()=>d,i:()=>i,r:()=>x,u:()=>m,w:()=>g});const i=(e,t)=>t.some((t=>e instanceof t));let a,n;const o=new WeakMap,r=new WeakMap,c=new WeakMap,h=new WeakMap,d=new WeakMap;let l={get(e,t,s){if(e instanceof IDBTransaction){if("done"===t)return r.get(e);if("objectStoreNames"===t)return e.objectStoreNames||c.get(e);if("store"===t)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return g(e[t])},set:(e,t,s)=>(e[t]=s,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function x(e){l=e(l)}function u(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(m(this),t),g(o.get(this))}:function(...t){return g(e.apply(m(this),t))}:function(t,...s){const i=e.call(m(this),t,...s);return c.set(i,t.sort?t.sort():[t]),g(i)}}function _(e){return"function"==typeof e?u(e):(e instanceof IDBTransaction&&function(e){if(r.has(e))return;const t=new Promise(((t,s)=>{const i=()=>{e.removeEventListener("complete",a),e.removeEventListener("error",n),e.removeEventListener("abort",n)},a=()=>{t(),i()},n=()=>{s(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",a),e.addEventListener("error",n),e.addEventListener("abort",n)}));r.set(e,t)}(e),i(e,a||(a=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,l):e)}function g(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,s)=>{const i=()=>{e.removeEventListener("success",a),e.removeEventListener("error",n)},a=()=>{t(g(e.result)),i()},n=()=>{s(e.error),i()};e.addEventListener("success",a),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&o.set(t,e)})).catch((()=>{})),d.set(t,e),t}(e);if(h.has(e))return h.get(e);const t=_(e);return t!==e&&(h.set(e,t),d.set(t,e)),t}const m=e=>d.get(e)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(e,t,s)=>{s.r(t),s.d(t,{Workbox:()=>x,messageSW:()=>i});try{self["workbox:window:4.3.1"]&&_()}catch(i){}var i=function(e,t){return new Promise((function(s){var i=new MessageChannel;i.port1.onmessage=function(e){return s(e.data)},e.postMessage(t,[i.port2])}))};function a(e,t){for(var s=0;s<t.length;s++){var i=t[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}try{self["workbox:core:4.3.1"]&&_()}catch(i){}var o=function(){var e=this;this.promise=new Promise((function(t,s){e.resolve=t,e.reject=s}))},r=function(e,t){return new URL(e,location).href===new URL(t,location).href},c=function(e,t){Object.assign(this,t,{type:e})};function h(e){return function(){for(var t=[],s=0;s<arguments.length;s++)t[s]=arguments[s];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function d(e,t,s){return s?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function l(){}var x=function(e){var t,s;function x(t,s){var i;return void 0===s&&(s={}),(i=e.call(this)||this).t=t,i.i=s,i.o=0,i.u=new o,i.s=new o,i.h=new o,i.v=i.v.bind(n(n(i))),i.l=i.l.bind(n(n(i))),i.g=i.g.bind(n(n(i))),i.m=i.m.bind(n(n(i))),i}s=e,(t=x).prototype=Object.create(s.prototype),t.prototype.constructor=t,t.__proto__=s;var u,_,g=x.prototype;return g.register=h((function(e){var t,s,i=this,a=(void 0===e?{}:e).immediate,n=void 0!==a&&a;return t=function(){return i.p=Boolean(navigator.serviceWorker.controller),i.P=i.R(),d(i.k(),(function(e){i.B=e,i.P&&(i.O=i.P,i.s.resolve(i.P),i.h.resolve(i.P),i.j(i.P),i.P.addEventListener("statechange",i.l,{once:!0}));var t=i.B.waiting;return t&&r(t.scriptURL,i.t)&&(i.O=t,Promise.resolve().then((function(){i.dispatchEvent(new c("waiting",{sw:t,wasWaitingBeforeRegister:!0}))}))),i.O&&i.u.resolve(i.O),i.B.addEventListener("updatefound",i.g),navigator.serviceWorker.addEventListener("controllerchange",i.m,{once:!0}),"BroadcastChannel"in self&&(i.C=new BroadcastChannel("workbox"),i.C.addEventListener("message",i.v)),navigator.serviceWorker.addEventListener("message",i.v),i.B}))},(s=function(){if(!n&&"complete"!==document.readyState)return function(e,t){return e&&e.then?e.then(l):Promise.resolve()}(new Promise((function(e){return addEventListener("load",e)})))}())&&s.then?s.then(t):t()})),g.getSW=h((function(){return this.O||this.u.promise})),g.messageSW=h((function(e){return d(this.getSW(),(function(t){return i(t,e)}))})),g.R=function(){var e=navigator.serviceWorker.controller;if(e&&r(e.scriptURL,this.t))return e},g.k=h((function(){var e=this;return function(e,t){try{var s=e()}catch(e){return t(e)}return s&&s.then?s.then(void 0,t):s}((function(){return d(navigator.serviceWorker.register(e.t,e.i),(function(t){return e.L=performance.now(),t}))}),(function(e){throw e}))})),g.j=function(e){i(e,{type:"WINDOW_READY",meta:"workbox-window"})},g.g=function(){var e=this.B.installing;this.o>0||!r(e.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=e,this.B.removeEventListener("updatefound",this.g)):(this.O=e,this.u.resolve(e)),++this.o,e.addEventListener("statechange",this.l)},g.l=function(e){var t=this,s=e.target,i=s.state,a=s===this.W,n=a?"external":"",o={sw:s,originalEvent:e};!a&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new c(n+i,o)),"installed"===i?this._=setTimeout((function(){"installed"===i&&t.B.waiting===s&&t.dispatchEvent(new c(n+"waiting",o))}),200):"activating"===i&&(clearTimeout(this._),a||this.s.resolve(s))},g.m=function(e){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new c("controlling",{sw:t,originalEvent:e})),this.h.resolve(t))},g.v=function(e){var t=e.data;this.dispatchEvent(new c("message",{data:t,originalEvent:e}))},u=x,(_=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&a(u.prototype,_),x}(function(){function e(){this.D={}}var t=e.prototype;return t.addEventListener=function(e,t){this.T(e).add(t)},t.removeEventListener=function(e,t){this.T(e).delete(t)},t.dispatchEvent=function(e){e.target=this,this.T(e.type).forEach((function(t){return t(e)}))},t.T=function(e){return this.D[e]=this.D[e]||new Set},e}())}},t={};function s(i){var a=t[i];if(void 0!==a)return a.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,s),n.exports}s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{s.r(i);var e=s("./src/data/api-data.ts"),t=s("./src/data/data-modal.ts"),a=s("./src/sceneHandler/scene-handler.ts"),n=s("./src/common/common.ts"),o=s("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),r=s("./global-variables.ts"),c=s("./src/Firebase/firebase-integration.ts"),h=s("./src/common/utils.ts"),d=s("./src/components/audio-player.ts"),l=s("./src/common/event-names.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;startSessionTime;toggleBtn;firebaseIntegration;constructor(e){this.lang=e,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new c.FirebaseIntegration,this.startSessionTime=0,this.toggleBtn=document.getElementById("toggle-btn"),this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(l.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const t=h.Utils.getLanguageSpecificFont(this.lang);await this.devToggle(),await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.registerWorkbox(),this.setupCanvas();const s=await(0,e.getData)();this.majVersion=s.majversion,this.minVersion=s.minversion;const i=this.createDataModal(s);this.globalInitialization(s),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(i)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(i)}devToggle=()=>{this.toggleBtn?this.toggleBtn.addEventListener("click",(()=>{const e=this.toggleBtn.classList.toggle("on");r.Debugger.DebugMode=e,this.toggleBtn.innerText=e?"Dev (On)":"Dev (Off)"})):console.error("Toggle button not found!")};logSessionStartFirebaseEvent(){let e=localStorage.getItem("lastSessionEndTime"),t=0;if(this.startSessionTime=(new Date).getTime(),e){let s=parseInt(e);isNaN(s)||(t=Math.abs((new Date).getTime()-s))}const s=parseFloat((t?t/864e5:0).toFixed(3)),i={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:s};this.firebaseIntegration.sendSessionStartEvent(i)}logSessionEndFirebaseEvent(){const e={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(e)}initializeCachedData(){const e=localStorage.getItem(n.IsCached)||'[["english",true]]';return e?new Map(JSON.parse(e)):new Map}async loadAndCacheFont(e,t){try{const s=await caches.open("fontCache");if(!await s.match(t)){const e=await fetch(t),i=await e.blob();await s.put(t,new Response(i))}const i=new FontFace(e,`url(${t}) format('truetype')`);await i.load(),document.fonts.add(i)}catch(e){console.error(`Failed to load and cache font: ${e}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const e=new o.Workbox("./sw.js",{});await e.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)||this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(e){console.error(`Failed to register service worker: ${e}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(e){return new t.DataModal(e.title,e.OtherAudios,e.Levels,e.FeedbackTexts,e.RightToLeft,e.FeedbackAudios,e.majversion,e.minversion,e.version)}globalInitialization(e){globalThis.aboutCompany=e.aboutCompany,globalThis.descriptionText=e.descriptionText}handleResize(e){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(e),this.setupCanvas(),this.reinitializeSceneHandler(e))}updateVersionInfoElement(e){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(e.majVersion&&e.minVersion?this.versionInfoElement.innerHTML+=`/j.v${e.majVersion}.${e.minVersion}`:e.version&&(this.versionInfoElement.innerHTML+=`/j.v${e.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(e){delete this.sceneHandler,this.sceneHandler=new a.SceneHandler(this.canvas,e),this.passingDataToContainer()}handleCachedScenario(e){this.updateVersionInfoElement(e),this.sceneHandler=new a.SceneHandler(this.canvas,e),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=e=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${e.data}%`),e.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(n.IsCached,JSON.stringify(Array.from(this.is_cached.entries())));const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(t),localStorage.setItem("version"+this.lang,e.version),window.location.reload()}this.progressBar.style.width=`${e.data}%`}};handleServiceWorkerMessage=e=>{"Loading"===e.data.msg?this.handleLoadingMessage(e.data):"Update Found"===e.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{"visible"===document.visibilityState?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async e=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let e=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"];return new Promise(((t,s)=>{const i=e.map((e=>(new d.AudioPlayer).preloadGameAudio(e)));Promise.all(i).then((()=>t())).catch((e=>{console.error("Error preloading audio:",e),s(e)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(l.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,