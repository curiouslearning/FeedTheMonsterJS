/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/@firebase/util/dist/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{CONSTANTS:()=>i,DecodeBase64StringError:()=>r,Deferred:()=>v,ErrorFactory:()=>z,FirebaseError:()=>M,MAX_VALUE_MILLIS:()=>ge,RANDOM_FACTOR:()=>me,Sha1:()=>ae,areCookiesEnabled:()=>B,assert:()=>s,assertionError:()=>n,async:()=>ne,base64:()=>o,base64Decode:()=>d,base64Encode:()=>c,base64urlEncodeWithoutPadding:()=>_,calculateBackoffMillis:()=>pe,contains:()=>X,createMockUserToken:()=>w,createSubscribe:()=>ie,decode:()=>U,deepCopy:()=>h,deepEqual:()=>q,deepExtend:()=>l,errorPrefix:()=>re,extractQuerystring:()=>te,getDefaultAppConfig:()=>m,getDefaultEmulatorHost:()=>b,getDefaultEmulatorHostnameAndPort:()=>g,getDefaults:()=>u,getExperimentalSetting:()=>p,getGlobal:()=>f,getModularInstance:()=>we,getUA:()=>S,isAdmin:()=>V,isBrowser:()=>E,isBrowserExtension:()=>T,isElectron:()=>A,isEmpty:()=>$,isIE:()=>P,isIndexedDBAvailable:()=>O,isMobileCordova:()=>y,isNode:()=>I,isNodeSdk:()=>k,isReactNative:()=>C,isSafari:()=>D,isUWP:()=>L,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>R,map:()=>K,ordinal:()=>ve,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>ee,safeGet:()=>Y,stringLength:()=>le,stringToByteArray:()=>he,stringify:()=>F,uuidv4:()=>fe,validateArgCount:()=>oe,validateCallback:()=>_e,validateContextObject:()=>de,validateIndexedDBOpenable:()=>N,validateNamespace:()=>ce});const i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},s=function(e,t){if(!e)throw n(t)},n=function(e){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},x=function(e){const t=[];let a=0;for(let i=0;i<e.length;i++){let s=e.charCodeAt(i);s<128?t[a++]=s:s<2048?(t[a++]=s>>6|192,t[a++]=63&s|128):55296==(64512&s)&&i+1<e.length&&56320==(64512&e.charCodeAt(i+1))?(s=65536+((1023&s)<<10)+(1023&e.charCodeAt(++i)),t[a++]=s>>18|240,t[a++]=s>>12&63|128,t[a++]=s>>6&63|128,t[a++]=63&s|128):(t[a++]=s>>12|224,t[a++]=s>>6&63|128,t[a++]=63&s|128)}return t},o={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const a=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let t=0;t<e.length;t+=3){const s=e[t],n=t+1<e.length,x=n?e[t+1]:0,o=t+2<e.length,r=o?e[t+2]:0,c=s>>2,_=(3&s)<<4|x>>4;let d=(15&x)<<2|r>>6,h=63&r;o||(h=64,n||(d=64)),i.push(a[c],a[_],a[d],a[h])}return i.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(x(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let a=0,i=0;for(;a<e.length;){const s=e[a++];if(s<128)t[i++]=String.fromCharCode(s);else if(s>191&&s<224){const n=e[a++];t[i++]=String.fromCharCode((31&s)<<6|63&n)}else if(s>239&&s<365){const n=((7&s)<<18|(63&e[a++])<<12|(63&e[a++])<<6|63&e[a++])-65536;t[i++]=String.fromCharCode(55296+(n>>10)),t[i++]=String.fromCharCode(56320+(1023&n))}else{const n=e[a++],x=e[a++];t[i++]=String.fromCharCode((15&s)<<12|(63&n)<<6|63&x)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const a=t?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let t=0;t<e.length;){const s=a[e.charAt(t++)],n=t<e.length?a[e.charAt(t)]:0;++t;const x=t<e.length?a[e.charAt(t)]:64;++t;const o=t<e.length?a[e.charAt(t)]:64;if(++t,null==s||null==n||null==x||null==o)throw new r;const c=s<<2|n>>4;if(i.push(c),64!==x){const e=n<<4&240|x>>2;if(i.push(e),64!==o){const e=x<<6&192|o;i.push(e)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class r extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const c=function(e){const t=x(e);return o.encodeByteArray(t,!0)},_=function(e){return c(e).replace(/\./g,"")},d=function(e){try{return o.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function h(e){return l(void 0,e)}function l(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const a in t)t.hasOwnProperty(a)&&"__proto__"!==a&&(e[a]=l(e[a],t[a]));return e}function f(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==a.g)return a.g;throw new Error("Unable to locate global object.")}const u=()=>{try{return f().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&d(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},b=e=>{var t,a;return null===(a=null===(t=u())||void 0===t?void 0:t.emulatorHosts)||void 0===a?void 0:a[e]},g=e=>{const t=b(e);if(!t)return;const a=t.lastIndexOf(":");if(a<=0||a+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const i=parseInt(t.substring(a+1),10);return"["===t[0]?[t.substring(1,a-1),i]:[t.substring(0,a),i]},m=()=>{var e;return null===(e=u())||void 0===e?void 0:e.config},p=e=>{var t;return null===(t=u())||void 0===t?void 0:t[`_${e}`]};class v{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,a)=>{t?this.reject(t):this.resolve(a),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,a))}}}function w(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const a=t||"demo-project",i=e.iat||0,s=e.sub||e.user_id;if(!s)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const n=Object.assign({iss:`https://securetoken.google.com/${a}`,aud:a,iat:i,exp:i+3600,auth_time:i,sub:s,user_id:s,firebase:{sign_in_provider:"custom",identities:{}}},e);return[_(JSON.stringify({alg:"none",type:"JWT"})),_(JSON.stringify(n)),""].join(".")}function S(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function y(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(S())}function I(){var e;const t=null===(e=u())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(a.g.process)}catch(e){return!1}}function E(){return"object"==typeof self&&self.self===self}function T(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function A(){return S().indexOf("Electron/")>=0}function P(){const e=S();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function L(){return S().indexOf("MSAppHost/")>=0}function k(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN}function D(){return!I()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function O(){try{return"object"==typeof indexedDB}catch(e){return!1}}function N(){return new Promise(((e,t)=>{try{let a=!0;const i="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(i);s.onsuccess=()=>{s.result.close(),a||self.indexedDB.deleteDatabase(i),e(!0)},s.onupgradeneeded=()=>{a=!1},s.onerror=()=>{var e;t((null===(e=s.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}function B(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class M extends Error{constructor(e,t,a){super(t),this.code=e,this.customData=a,this.name="FirebaseError",Object.setPrototypeOf(this,M.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(e,t,a){this.service=e,this.serviceName=t,this.errors=a}create(e,...t){const a=t[0]||{},i=`${this.service}/${e}`,s=this.errors[e],n=s?function(e,t){return e.replace(j,((e,a)=>{const i=t[a];return null!=i?String(i):`<${a}?>`}))}(s,a):"Error",x=`${this.serviceName}: ${n} (${i}).`;return new M(i,x,a)}}const j=/\{\$([^}]+)}/g;function R(e){return JSON.parse(e)}function F(e){return JSON.stringify(e)}const U=function(e){let t={},a={},i={},s="";try{const n=e.split(".");t=R(d(n[0])||""),a=R(d(n[1])||""),s=n[2],i=a.d||{},delete a.d}catch(e){}return{header:t,claims:a,data:i,signature:s}},H=function(e){const t=U(e).claims,a=Math.floor((new Date).getTime()/1e3);let i=0,s=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?i=t.nbf:t.hasOwnProperty("iat")&&(i=t.iat),s=t.hasOwnProperty("exp")?t.exp:i+86400),!!a&&!!i&&!!s&&a>=i&&a<=s},G=function(e){const t=U(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},W=function(e){const t=U(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},V=function(e){const t=U(e).claims;return"object"==typeof t&&!0===t.admin};function X(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Y(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function $(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function K(e,t,a){const i={};for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&(i[s]=t.call(a,e[s],s,e));return i}function q(e,t){if(e===t)return!0;const a=Object.keys(e),i=Object.keys(t);for(const s of a){if(!i.includes(s))return!1;const a=e[s],n=t[s];if(J(a)&&J(n)){if(!q(a,n))return!1}else if(a!==n)return!1}for(const e of i)if(!a.includes(e))return!1;return!0}function J(e){return null!==e&&"object"==typeof e}function Z(e,t=2e3){const a=new v;return setTimeout((()=>a.reject("timeout!")),t),e.then(a.resolve,a.reject),a.promise}function Q(e){const t=[];for(const[a,i]of Object.entries(e))Array.isArray(i)?i.forEach((e=>{t.push(encodeURIComponent(a)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(a)+"="+encodeURIComponent(i));return t.length?"&"+t.join("&"):""}function ee(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[a,i]=e.split("=");t[decodeURIComponent(a)]=decodeURIComponent(i)}})),t}function te(e){const t=e.indexOf("?");if(!t)return"";const a=e.indexOf("#",t);return e.substring(t,a>0?a:void 0)}class ae{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const a=this.W_;if("string"==typeof e)for(let i=0;i<16;i++)a[i]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let i=0;i<16;i++)a[i]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=a[e-3]^a[e-8]^a[e-14]^a[e-16];a[e]=4294967295&(t<<1|t>>>31)}let i,s,n=this.chain_[0],x=this.chain_[1],o=this.chain_[2],r=this.chain_[3],c=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(i=r^x&(o^r),s=1518500249):(i=x^o^r,s=1859775393):e<60?(i=x&o|r&(x|o),s=2400959708):(i=x^o^r,s=3395469782);const t=(n<<5|n>>>27)+i+c+s+a[e]&4294967295;c=r,r=o,o=4294967295&(x<<30|x>>>2),x=n,n=t}this.chain_[0]=this.chain_[0]+n&4294967295,this.chain_[1]=this.chain_[1]+x&4294967295,this.chain_[2]=this.chain_[2]+o&4294967295,this.chain_[3]=this.chain_[3]+r&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const a=t-this.blockSize;let i=0;const s=this.buf_;let n=this.inbuf_;for(;i<t;){if(0===n)for(;i<=a;)this.compress_(e,i),i+=this.blockSize;if("string"==typeof e){for(;i<t;)if(s[n]=e.charCodeAt(i),++n,++i,n===this.blockSize){this.compress_(s),n=0;break}}else for(;i<t;)if(s[n]=e[i],++n,++i,n===this.blockSize){this.compress_(s),n=0;break}}this.inbuf_=n,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let a=0;for(let t=0;t<5;t++)for(let i=24;i>=0;i-=8)e[a]=this.chain_[t]>>i&255,++a;return e}}function ie(e,t){const a=new se(e,t);return a.subscribe.bind(a)}class se{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,a){let i;if(void 0===e&&void 0===t&&void 0===a)throw new Error("Missing Observer.");i=function(e,t){if("object"!=typeof e||null===e)return!1;for(const a of t)if(a in e&&"function"==typeof e[a])return!0;return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:a},void 0===i.next&&(i.next=xe),void 0===i.error&&(i.error=xe),void 0===i.complete&&(i.complete=xe);const s=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?i.error(this.finalError):i.complete()}catch(e){}})),this.observers.push(i),s}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function ne(e,t){return(...a)=>{Promise.resolve(!0).then((()=>{e(...a)})).catch((e=>{t&&t(e)}))}}function xe(){}const oe=function(e,t,a,i){let s;if(i<t?s="at least "+t:i>a&&(s=0===a?"none":"no more than "+a),s){throw new Error(e+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+s+".")}};function re(e,t){return`${e} failed: ${t} argument `}function ce(e,t,a){if((!a||t)&&"string"!=typeof t)throw new Error(re(e,"namespace")+"must be a valid firebase namespace.")}function _e(e,t,a,i){if((!i||a)&&"function"!=typeof a)throw new Error(re(e,t)+"must be a valid function.")}function de(e,t,a,i){if((!i||a)&&("object"!=typeof a||null===a))throw new Error(re(e,t)+"must be a valid context object.")}const he=function(e){const t=[];let a=0;for(let i=0;i<e.length;i++){let n=e.charCodeAt(i);if(n>=55296&&n<=56319){const t=n-55296;i++,s(i<e.length,"Surrogate pair missing trail surrogate.");n=65536+(t<<10)+(e.charCodeAt(i)-56320)}n<128?t[a++]=n:n<2048?(t[a++]=n>>6|192,t[a++]=63&n|128):n<65536?(t[a++]=n>>12|224,t[a++]=n>>6&63|128,t[a++]=63&n|128):(t[a++]=n>>18|240,t[a++]=n>>12&63|128,t[a++]=n>>6&63|128,t[a++]=63&n|128)}return t},le=function(e){let t=0;for(let a=0;a<e.length;a++){const i=e.charCodeAt(a);i<128?t++:i<2048?t+=2:i>=55296&&i<=56319?(t+=4,a++):t+=3}return t},fe=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},ue=1e3,be=2,ge=144e5,me=.5;function pe(e,t=ue,a=be){const i=t*Math.pow(a,e),s=Math.round(me*i*(Math.random()-.5)*2);return Math.min(ge,i+s)}function ve(e){return Number.isFinite(e)?e+function(e){e=Math.abs(e);const t=e%100;if(t>=10&&t<=20)return"th";const a=e%10;if(1===a)return"st";if(2===a)return"nd";if(3===a)return"rd";return"th"}(e):`${e}`}function we(e){return e&&e._delegate?e._delegate:e}},"./src/Firebase/base-firebase-integration.ts":(e,t,a)=>{a.r(t),a.d(t,{BaseFirebaseIntegration:()=>x});var i=a("./node_modules/firebase/app/dist/esm/index.esm.js"),s=a("./node_modules/firebase/analytics/dist/esm/index.esm.js"),n=a("./src/Firebase/firebase-config.ts");class x{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(e,t){try{(0,s.logEvent)(this.analytics,e,t)}catch(e){console.error("Error while logging custom event:",e)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,s.logEvent)(this.analytics,"session_end")}catch(e){console.error("Error while logging session_end event:",e)}}initializeFirebase(){try{this.firebaseApp=(0,i.initializeApp)(n.firebaseConfig),this.analytics=(0,s.getAnalytics)(this.firebaseApp)}catch(e){console.error("Error while initializing Firebase:",e)}}}},"./src/Firebase/firebase-config.ts":(e,t,a)=>{a.r(t),a.d(t,{firebaseConfig:()=>i});const i={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(e,t,a)=>{a.r(t),a.d(t,{FirebaseIntegration:()=>s});var i=a("./src/Firebase/base-firebase-integration.ts");class s extends i.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return s.instance||(s.instance=new s),s.instance}sendSessionStartEvent(e){this.customEvents("session_start",e)}sendSessionEndEvent(e){this.customEvents("session_end",e)}sendSelectedLevelEvent(e){this.customEvents("selected_level",e)}sendTappedStartEvent(e){this.customEvents("tapped_start",e)}sendPuzzleCompletedEvent(e){this.customEvents("puzzle_completed",e)}sendLevelCompletedEvent(e){this.customEvents("level_completed",e)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(e){this.customEvents("download_completed",e)}}},"./src/common/event-names.ts":(e,t,a)=>{a.r(t),a.d(t,{CLICK:()=>d,LOADPUZZLE:()=>i,MOUSEDOWN:()=>x,MOUSEMOVE:()=>n,MOUSEUP:()=>o,STONEDROP:()=>s,TOUCHEND:()=>_,TOUCHMOVE:()=>c,TOUCHSTART:()=>r,VISIBILITY_CHANGE:()=>h});const i="loadpuzzle",s="stonesdropped",n="mousemove",x="mousedown",o="mouseup",r="touchstart",c="touchmove",_="touchend",d="click",h="visibilitychange"},"./src/common/global-variables.ts":(e,t,a)=>{a.r(t),a.d(t,{Debugger:()=>c,font:()=>r,lang:()=>o,pseudoId:()=>x});var i=a("./src/constants/index.ts"),s=a("./src/common/index.ts");const n=new URLSearchParams(window.location.search);var x=n.get("cr_user_id"),o=null==n.get("cr_lang")?"english":n.get("cr_lang");const r=s.Utils.getLanguageSpecificFont(o),c={DevelopmentLink:!!window.location.href.includes(i.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(e,t,a)=>{a.r(t),a.d(t,{CLICK:()=>x.CLICK,Debugger:()=>n.Debugger,LOADPUZZLE:()=>x.LOADPUZZLE,MOUSEDOWN:()=>x.MOUSEDOWN,MOUSEMOVE:()=>x.MOUSEMOVE,MOUSEUP:()=>x.MOUSEUP,STONEDROP:()=>x.STONEDROP,StoneConfig:()=>i.StoneConfig,TOUCHEND:()=>x.TOUCHEND,TOUCHMOVE:()=>x.TOUCHMOVE,TOUCHSTART:()=>x.TOUCHSTART,Utils:()=>s.Utils,VISIBILITY_CHANGE:()=>x.VISIBILITY_CHANGE,createRippleEffect:()=>s.createRippleEffect,font:()=>n.font,hideElement:()=>s.hideElement,isClickInsideButton:()=>s.isClickInsideButton,isDocumentVisible:()=>s.isDocumentVisible,lang:()=>n.lang,loadImages:()=>s.loadImages,pseudoId:()=>n.pseudoId,syncLoadingImages:()=>s.syncLoadingImages,toggleDebugMode:()=>s.toggleDebugMode});var i=a("./src/common/stone-config.ts"),s=a("./src/common/utils.ts"),n=a("./src/common/global-variables.ts"),x=a("./src/common/event-names.ts")},"./src/common/stone-config.ts":(e,t,a)=>{a.r(t),a.d(t,{StoneConfig:()=>s});var i=a("./src/common/index.ts");class s{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(e,t,a,i,s,n,x,o,r){this.x=s,this.y=n,this.origx=s,this.origy=n,this.canvasWidth=t,this.canvasHeight=a,this.tutorialInstance=r,this.text=i,this.img=x,this.context=e,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=o}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(e,t,a,i)=>-a/2*(Math.cos(Math.PI*e/i)-1)+t;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(e){this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(e,this.img,this.imageSize)}}},"./src/common/utils.ts":(e,t,a)=>{a.r(t),a.d(t,{Utils:()=>n,createRippleEffect:()=>x,hideElement:()=>h,isClickInsideButton:()=>c,isDocumentVisible:()=>_,loadImages:()=>o,syncLoadingImages:()=>r,toggleDebugMode:()=>d});var i=a("./src/common/index.ts"),s=a("./src/data/i18-font-mapping.ts");class n{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(e){return i.Debugger.DevelopmentLink?e.slice(0,e.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+e.slice(e.indexOf(this.UrlSubstring)+this.UrlSubstring.length):e}static getLanguageSpecificFont(e){const t=e.toLowerCase();for(const e in s.languageFontMapping)if(e.toLowerCase()===t)return s.languageFontMapping[e];return console.log(...f("1001872120_26_4_26_59_4",`Font not found for language: ${e}`)),"NotoSans-Regular"}static getRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}static getExcludedCoordinates(e,t){return{excludeX:e.width*(t/100),excludeY:e.height*(t/100)}}}function x(e){const t=e;if(!t)throw new Error("Canvas context is null");let a=0,i=0;let s=10,n=10;return function(e,x,o){o&&(s=0,n=0),a=e,i=x,t.beginPath(),t.arc(a,i,s,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),t.beginPath(),t.arc(a,i,n,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),s+=.5,n+=.5,(s>=60||n>=60)&&(s=10,n=10)}}function o(e,t){const a={};let i=0;const s=Object.keys(e).length;for(let n in e)a[n]=new Image,a[n].onload=function(){++i>=s&&t(a)},a[n].src=e[n]}const r=async e=>{const t=Object.keys(e).map((async t=>{const a=await(async e=>{const t=new Image;return new Promise((a=>{t.onload=()=>a(t),t.src=e}))})(e[t]);return{[t]:a}}));return(await Promise.all(t)).reduce(((e,t)=>({...e,...t})),{})};function c(e,t,a,i,s,n,x=!1){if(x){return Math.sqrt((e-(a+s/2))**2+(t-(i+n/2))**2)<s/2}return e>=a&&e<=a+s&&t>=i&&t<=i+n}const _=()=>"visible"===document.visibilityState,d=e=>{e.classList.toggle("on");const t=e.classList.contains("on");i.Debugger.DebugMode=t,e.innerText="Dev"},h=(e=!1,t)=>{e?t.classList.remove("show"):t.classList.add("show")};function l(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x277122=_0xc5ab;function _0x16b5(){var _0xa1823c=['_hasSetOnItsPath','_connecting','autoExpandLimit','sortProps','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','_treeNodePropertiesBeforeFullValue','getPrototypeOf','replace','pathToFileURL','unshift','date','_additionalMetadata','default','stringify','process','setter','_isSet','now','[object\\x20Set]','autoExpandPropertyCount','elements','stackTraceLimit','18372740bHyhYr','toLowerCase','_setNodeLabel','_dateToString','edge','_propertyName','63361icYNzh','array','_connected','index','Number','concat','expId','WebSocket','getOwnPropertyDescriptor','_numberRegExp','current','negativeInfinity','match','next.js','map','HTMLAllCollection','_getOwnPropertyDescriptor','toString',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'parse','autoExpand','props','webpack','positiveInfinity','join','disabledLog','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','Buffer','_socket','name','null','_setNodeExpandableState','method','root_exp','60591','[object\\x20BigInt]','undefined','nodeModules','_sendErrorMessage','depth','global','_addProperty','defineProperty','nan','_blacklistedProperty','\\x20browser','3606463hpwOgk','test','_allowedToSend','send','some','object','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','_HTMLAllCollection','unknown','split','indexOf','Map','_getOwnPropertyNames','_setNodePermissions','1726146029714','_isMap','_isUndefined','Symbol','_property','RegExp','astro','_ws','3123JAjneK','get','totalStrLength','[object\\x20Map]','_connectAttemptCount','host','[object\\x20Array]','Boolean','_getOwnPropertySymbols','sort','root_exp_id','unref','reload','','3ABiXMk','\\x20server','error','gateway.docker.internal','bigint','_console_ninja','negativeZero','getOwnPropertySymbols','cappedProps','string','hostname','_objectToString','_setNodeExpressionPath','resolveGetters','_setNodeId','_reconnectTimeout','Set','console','onmessage','endsWith','_Symbol','_undefined','_inBrowser','timeStamp','127.0.0.1','getOwnPropertyNames','_addFunctionsNode','elapsed','enumerable','isExpressionToEvaluate','node','function','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','data','https://tinyurl.com/37x8b79t','_allowedToConnectOnSend','_addObjectProperty','noFunctions','startsWith','_isNegativeZero','reduceLimits','3574804wGdXXu','bind','log','substr','_isPrimitiveWrapperType','_isPrimitiveType','create','_treeNodePropertiesAfterFullValue','_connectToHostNow','_keyStrRegExp','1.0.0','performance','getWebSocketClass','message','prototype','constructor','38408OqGOST','then','ws://','18FXuSSO','stack','port','angular','_consoleNinjaAllowedToStart','5141040bNQfuK','number','','_console_ninja_session','warn','boolean','location','_isArray','allStrLength','_attemptToReconnectShortly','slice','versions','origin','perf_hooks','strLength','length','_p_name','onopen','eventReceivedCallback','autoExpandMaxDepth','_regExpToString','count','getter','set','String','capped','forEach','hasOwnProperty','ws/index.js','path','parent','_processTreeNodeResult','dockerizedApp','_p_','NEGATIVE_INFINITY','logger\\x20websocket\\x20error','1','charAt','...','trace','_maxConnectAttemptCount','value','onerror','args','_hasSymbolPropertyOnItsPath','_inNextEdge','hits','_WebSocketClass','_capIfString','_sortProps','time','onclose','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','level','_webSocketErrorDocsLink',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.357\\\\node_modules\",'pop','env','valueOf','fromCharCode','_setNodeQueryPath','type','cappedElements','symbol','push','call','rootExpression','close','6452480sIuOir','hrtime','expressionsToEvaluate','serialize','readyState','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','autoExpandPreviousObjects','toUpperCase','_disposeWebsocket','_WebSocket','__es'+'Module','catch','_cleanNode','_type','NEXT_RUNTIME'];_0x16b5=function(){return _0xa1823c;};return _0x16b5();}(function(_0x3042d2,_0x53ea59){var _0x46f915=_0xc5ab,_0x23aa03=_0x3042d2();while(!![]){try{var _0x5b63f1=parseInt(_0x46f915(0x182))/0x1+parseInt(_0x46f915(0x1fd))/0x2*(parseInt(_0x46f915(0x1d4))/0x3)+-parseInt(_0x46f915(0x215))/0x4+-parseInt(_0x46f915(0x157))/0x5+-parseInt(_0x46f915(0x210))/0x6*(-parseInt(_0x46f915(0x1b0))/0x7)+-parseInt(_0x46f915(0x20d))/0x8*(parseInt(_0x46f915(0x1c6))/0x9)+parseInt(_0x46f915(0x17c))/0xa;if(_0x5b63f1===_0x53ea59)break;else _0x23aa03['push'](_0x23aa03['shift']());}catch(_0xcd60bd){_0x23aa03['push'](_0x23aa03['shift']());}}}(_0x16b5,0xf22d9));var K=Object[_0x277122(0x203)],Q=Object[_0x277122(0x1ac)],G=Object[_0x277122(0x18a)],ee=Object[_0x277122(0x1ed)],te=Object[_0x277122(0x16c)],ne=Object[_0x277122(0x20b)][_0x277122(0x12e)],re=(_0x371906,_0x55a3e2,_0x3af47c,_0x165ef5)=>{var _0x575e23=_0x277122;if(_0x55a3e2&&typeof _0x55a3e2==_0x575e23(0x1b5)||typeof _0x55a3e2=='function'){for(let _0x27bee9 of ee(_0x55a3e2))!ne[_0x575e23(0x154)](_0x371906,_0x27bee9)&&_0x27bee9!==_0x3af47c&&Q(_0x371906,_0x27bee9,{'get':()=>_0x55a3e2[_0x27bee9],'enumerable':!(_0x165ef5=G(_0x55a3e2,_0x27bee9))||_0x165ef5[_0x575e23(0x1f0)]});}return _0x371906;},V=(_0x169a06,_0x165248,_0x5c1060)=>(_0x5c1060=_0x169a06!=null?K(te(_0x169a06)):{},re(_0x165248||!_0x169a06||!_0x169a06[_0x277122(0x161)]?Q(_0x5c1060,_0x277122(0x172),{'value':_0x169a06,'enumerable':!0x0}):_0x5c1060,_0x169a06)),x=class{constructor(_0xba3f07,_0xbb405a,_0x4c765b,_0x167a4f,_0x38af46,_0x2c79b5){var _0x3fa3fb=_0x277122,_0x8aa9f5,_0x290311,_0x176214,_0xf92787;this[_0x3fa3fb(0x1aa)]=_0xba3f07,this[_0x3fa3fb(0x1cb)]=_0xbb405a,this[_0x3fa3fb(0x212)]=_0x4c765b,this[_0x3fa3fb(0x1a7)]=_0x167a4f,this[_0x3fa3fb(0x133)]=_0x38af46,this[_0x3fa3fb(0x125)]=_0x2c79b5,this[_0x3fa3fb(0x1b2)]=!0x0,this['_allowedToConnectOnSend']=!0x0,this[_0x3fa3fb(0x184)]=!0x1,this[_0x3fa3fb(0x167)]=!0x1,this['_inNextEdge']=((_0x290311=(_0x8aa9f5=_0xba3f07['process'])==null?void 0x0:_0x8aa9f5[_0x3fa3fb(0x14c)])==null?void 0x0:_0x290311[_0x3fa3fb(0x165)])===_0x3fa3fb(0x180),this[_0x3fa3fb(0x1ea)]=!((_0xf92787=(_0x176214=this[_0x3fa3fb(0x1aa)][_0x3fa3fb(0x174)])==null?void 0x0:_0x176214[_0x3fa3fb(0x220)])!=null&&_0xf92787[_0x3fa3fb(0x1f2)])&&!this[_0x3fa3fb(0x140)],this[_0x3fa3fb(0x142)]=null,this[_0x3fa3fb(0x1ca)]=0x0,this[_0x3fa3fb(0x13b)]=0x14,this[_0x3fa3fb(0x149)]=_0x3fa3fb(0x1f6),this['_sendErrorMessage']=(this[_0x3fa3fb(0x1ea)]?'Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20':_0x3fa3fb(0x15c))+this[_0x3fa3fb(0x149)];}async['getWebSocketClass'](){var _0x166d81=_0x277122,_0x4a3567,_0x31201e;if(this['_WebSocketClass'])return this[_0x166d81(0x142)];let _0x15eef9;if(this[_0x166d81(0x1ea)]||this[_0x166d81(0x140)])_0x15eef9=this['global'][_0x166d81(0x189)];else{if((_0x4a3567=this[_0x166d81(0x1aa)][_0x166d81(0x174)])!=null&&_0x4a3567[_0x166d81(0x160)])_0x15eef9=(_0x31201e=this[_0x166d81(0x1aa)][_0x166d81(0x174)])==null?void 0x0:_0x31201e[_0x166d81(0x160)];else try{let _0x4e48a3=await import(_0x166d81(0x130));_0x15eef9=(await import((await import('url'))[_0x166d81(0x16e)](_0x4e48a3[_0x166d81(0x19a)](this['nodeModules'],_0x166d81(0x12f)))['toString']()))[_0x166d81(0x172)];}catch{try{_0x15eef9=require(require(_0x166d81(0x130))[_0x166d81(0x19a)](this[_0x166d81(0x1a7)],'ws'));}catch{throw new Error(_0x166d81(0x147));}}}return this[_0x166d81(0x142)]=_0x15eef9,_0x15eef9;}[_0x277122(0x205)](){var _0x51dc96=_0x277122;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this[_0x51dc96(0x13b)]||(this[_0x51dc96(0x1f7)]=!0x1,this[_0x51dc96(0x167)]=!0x0,this[_0x51dc96(0x1ca)]++,this[_0x51dc96(0x1c5)]=new Promise((_0x58c90f,_0x112630)=>{var _0x4c12d5=_0x51dc96;this[_0x4c12d5(0x209)]()[_0x4c12d5(0x20e)](_0x40518d=>{var _0x1b75d4=_0x4c12d5;let _0x49f47e=new _0x40518d(_0x1b75d4(0x20f)+(!this[_0x1b75d4(0x1ea)]&&this[_0x1b75d4(0x133)]?_0x1b75d4(0x1d7):this[_0x1b75d4(0x1cb)])+':'+this[_0x1b75d4(0x212)]);_0x49f47e[_0x1b75d4(0x13d)]=()=>{var _0x4ba6ce=_0x1b75d4;this[_0x4ba6ce(0x1b2)]=!0x1,this[_0x4ba6ce(0x15f)](_0x49f47e),this[_0x4ba6ce(0x21e)](),_0x112630(new Error(_0x4ba6ce(0x136)));},_0x49f47e[_0x1b75d4(0x124)]=()=>{var _0x8fc509=_0x1b75d4;this[_0x8fc509(0x1ea)]||_0x49f47e['_socket']&&_0x49f47e[_0x8fc509(0x19e)][_0x8fc509(0x1d1)]&&_0x49f47e[_0x8fc509(0x19e)][_0x8fc509(0x1d1)](),_0x58c90f(_0x49f47e);},_0x49f47e['onclose']=()=>{var _0x163a4c=_0x1b75d4;this[_0x163a4c(0x1f7)]=!0x0,this[_0x163a4c(0x15f)](_0x49f47e),this[_0x163a4c(0x21e)]();},_0x49f47e[_0x1b75d4(0x1e6)]=_0x36072=>{var _0x53acf1=_0x1b75d4;try{if(!(_0x36072!=null&&_0x36072[_0x53acf1(0x1f5)])||!this[_0x53acf1(0x125)])return;let _0x23adf4=JSON[_0x53acf1(0x195)](_0x36072['data']);this[_0x53acf1(0x125)](_0x23adf4[_0x53acf1(0x1a2)],_0x23adf4['args'],this[_0x53acf1(0x1aa)],this[_0x53acf1(0x1ea)]);}catch{}};})[_0x4c12d5(0x20e)](_0x261db6=>(this[_0x4c12d5(0x184)]=!0x0,this['_connecting']=!0x1,this['_allowedToConnectOnSend']=!0x1,this['_allowedToSend']=!0x0,this['_connectAttemptCount']=0x0,_0x261db6))[_0x4c12d5(0x162)](_0xd17c7c=>(this[_0x4c12d5(0x184)]=!0x1,this['_connecting']=!0x1,console['warn'](_0x4c12d5(0x1f4)+this[_0x4c12d5(0x149)]),_0x112630(new Error('failed\\x20to\\x20connect\\x20to\\x20host:\\x20'+(_0xd17c7c&&_0xd17c7c[_0x4c12d5(0x20a)])))));}));}[_0x277122(0x15f)](_0x2d53d4){var _0x112345=_0x277122;this[_0x112345(0x184)]=!0x1,this[_0x112345(0x167)]=!0x1;try{_0x2d53d4[_0x112345(0x146)]=null,_0x2d53d4[_0x112345(0x13d)]=null,_0x2d53d4[_0x112345(0x124)]=null;}catch{}try{_0x2d53d4[_0x112345(0x15b)]<0x2&&_0x2d53d4[_0x112345(0x156)]();}catch{}}['_attemptToReconnectShortly'](){var _0x5da88c=_0x277122;clearTimeout(this[_0x5da88c(0x1e3)]),!(this[_0x5da88c(0x1ca)]>=this[_0x5da88c(0x13b)])&&(this[_0x5da88c(0x1e3)]=setTimeout(()=>{var _0x3b3ae8=_0x5da88c,_0x36cd16;this[_0x3b3ae8(0x184)]||this[_0x3b3ae8(0x167)]||(this['_connectToHostNow'](),(_0x36cd16=this['_ws'])==null||_0x36cd16[_0x3b3ae8(0x162)](()=>this[_0x3b3ae8(0x21e)]()));},0x1f4),this[_0x5da88c(0x1e3)][_0x5da88c(0x1d1)]&&this['_reconnectTimeout'][_0x5da88c(0x1d1)]());}async[_0x277122(0x1b3)](_0x441b31){var _0x3de3cf=_0x277122;try{if(!this[_0x3de3cf(0x1b2)])return;this[_0x3de3cf(0x1f7)]&&this['_connectToHostNow'](),(await this[_0x3de3cf(0x1c5)])[_0x3de3cf(0x1b3)](JSON[_0x3de3cf(0x173)](_0x441b31));}catch(_0x5a238c){console[_0x3de3cf(0x219)](this[_0x3de3cf(0x1a8)]+':\\x20'+(_0x5a238c&&_0x5a238c[_0x3de3cf(0x20a)])),this[_0x3de3cf(0x1b2)]=!0x1,this[_0x3de3cf(0x21e)]();}}};function q(_0x436ba9,_0x141603,_0x5dc200,_0x26756b,_0x1ff14a,_0x6a31ab,_0x390747,_0x39e67e=ie){var _0x4f2c74=_0x277122;let _0x2776b7=_0x5dc200[_0x4f2c74(0x1b9)](',')[_0x4f2c74(0x190)](_0x4893f9=>{var _0x262543=_0x4f2c74,_0x5cc178,_0x5c0c95,_0x273a6c,_0x11f45d;try{if(!_0x436ba9[_0x262543(0x218)]){let _0x5497ef=((_0x5c0c95=(_0x5cc178=_0x436ba9[_0x262543(0x174)])==null?void 0x0:_0x5cc178[_0x262543(0x220)])==null?void 0x0:_0x5c0c95[_0x262543(0x1f2)])||((_0x11f45d=(_0x273a6c=_0x436ba9['process'])==null?void 0x0:_0x273a6c['env'])==null?void 0x0:_0x11f45d[_0x262543(0x165)])===_0x262543(0x180);(_0x1ff14a==='next.js'||_0x1ff14a==='remix'||_0x1ff14a===_0x262543(0x1c4)||_0x1ff14a===_0x262543(0x213))&&(_0x1ff14a+=_0x5497ef?_0x262543(0x1d5):_0x262543(0x1af)),_0x436ba9[_0x262543(0x218)]={'id':+new Date(),'tool':_0x1ff14a},_0x390747&&_0x1ff14a&&!_0x5497ef&&console[_0x262543(0x1ff)](_0x262543(0x19c)+(_0x1ff14a[_0x262543(0x138)](0x0)[_0x262543(0x15e)]()+_0x1ff14a[_0x262543(0x200)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x262543(0x1b6));}let _0x5903dc=new x(_0x436ba9,_0x141603,_0x4893f9,_0x26756b,_0x6a31ab,_0x39e67e);return _0x5903dc['send'][_0x262543(0x1fe)](_0x5903dc);}catch(_0x3862d9){return console[_0x262543(0x219)](_0x262543(0x16a),_0x3862d9&&_0x3862d9[_0x262543(0x20a)]),()=>{};}});return _0x105a50=>_0x2776b7['forEach'](_0xb52cb0=>_0xb52cb0(_0x105a50));}function ie(_0x57c726,_0x25e1a6,_0x4b918e,_0x393acd){var _0x30aa88=_0x277122;_0x393acd&&_0x57c726===_0x30aa88(0x1d2)&&_0x4b918e[_0x30aa88(0x21b)][_0x30aa88(0x1d2)]();}function b(_0x51a80f){var _0x22a25f=_0x277122,_0x403a3b,_0x191ef6;let _0x1cc190=function(_0x2c9f39,_0x181012){return _0x181012-_0x2c9f39;},_0x4a578f;if(_0x51a80f['performance'])_0x4a578f=function(){var _0x3c9dfa=_0xc5ab;return _0x51a80f[_0x3c9dfa(0x208)]['now']();};else{if(_0x51a80f[_0x22a25f(0x174)]&&_0x51a80f[_0x22a25f(0x174)][_0x22a25f(0x158)]&&((_0x191ef6=(_0x403a3b=_0x51a80f['process'])==null?void 0x0:_0x403a3b[_0x22a25f(0x14c)])==null?void 0x0:_0x191ef6[_0x22a25f(0x165)])!==_0x22a25f(0x180))_0x4a578f=function(){var _0x2444fc=_0x22a25f;return _0x51a80f[_0x2444fc(0x174)][_0x2444fc(0x158)]();},_0x1cc190=function(_0x429c4e,_0x2e24d2){return 0x3e8*(_0x2e24d2[0x0]-_0x429c4e[0x0])+(_0x2e24d2[0x1]-_0x429c4e[0x1])/0xf4240;};else try{let {performance:_0x10386f}=require(_0x22a25f(0x120));_0x4a578f=function(){return _0x10386f['now']();};}catch{_0x4a578f=function(){return+new Date();};}}return{'elapsed':_0x1cc190,'timeStamp':_0x4a578f,'now':()=>Date['now']()};}function _0xc5ab(_0x2fbc92,_0x10d741){var _0x16b566=_0x16b5();return _0xc5ab=function(_0xc5ab16,_0x5acc82){_0xc5ab16=_0xc5ab16-0x120;var _0x534c80=_0x16b566[_0xc5ab16];return _0x534c80;},_0xc5ab(_0x2fbc92,_0x10d741);}function H(_0x410216,_0xd35cc7,_0xbf32c5){var _0x14cd8d=_0x277122,_0x16579a,_0x23a1e8,_0x5506c0,_0x31ef37,_0x53bbed;if(_0x410216[_0x14cd8d(0x214)]!==void 0x0)return _0x410216[_0x14cd8d(0x214)];let _0xdc0a0b=((_0x23a1e8=(_0x16579a=_0x410216[_0x14cd8d(0x174)])==null?void 0x0:_0x16579a['versions'])==null?void 0x0:_0x23a1e8[_0x14cd8d(0x1f2)])||((_0x31ef37=(_0x5506c0=_0x410216[_0x14cd8d(0x174)])==null?void 0x0:_0x5506c0[_0x14cd8d(0x14c)])==null?void 0x0:_0x31ef37['NEXT_RUNTIME'])===_0x14cd8d(0x180);function _0x164729(_0x2cc8cb){var _0x5dd6b2=_0x14cd8d;if(_0x2cc8cb[_0x5dd6b2(0x1fa)]('/')&&_0x2cc8cb[_0x5dd6b2(0x1e7)]('/')){let _0xc83b4c=new RegExp(_0x2cc8cb[_0x5dd6b2(0x21f)](0x1,-0x1));return _0x71c0d3=>_0xc83b4c[_0x5dd6b2(0x1b1)](_0x71c0d3);}else{if(_0x2cc8cb['includes']('*')||_0x2cc8cb['includes']('?')){let _0x3874c4=new RegExp('^'+_0x2cc8cb[_0x5dd6b2(0x16d)](/\\./g,String[_0x5dd6b2(0x14e)](0x5c)+'.')[_0x5dd6b2(0x16d)](/\\*/g,'.*')[_0x5dd6b2(0x16d)](/\\?/g,'.')+String[_0x5dd6b2(0x14e)](0x24));return _0x48cfa3=>_0x3874c4[_0x5dd6b2(0x1b1)](_0x48cfa3);}else return _0x4e1229=>_0x4e1229===_0x2cc8cb;}}let _0x12eb1d=_0xd35cc7[_0x14cd8d(0x190)](_0x164729);return _0x410216[_0x14cd8d(0x214)]=_0xdc0a0b||!_0xd35cc7,!_0x410216[_0x14cd8d(0x214)]&&((_0x53bbed=_0x410216['location'])==null?void 0x0:_0x53bbed[_0x14cd8d(0x1de)])&&(_0x410216[_0x14cd8d(0x214)]=_0x12eb1d[_0x14cd8d(0x1b4)](_0x59667b=>_0x59667b(_0x410216[_0x14cd8d(0x21b)][_0x14cd8d(0x1de)]))),_0x410216['_consoleNinjaAllowedToStart'];}function X(_0x2b666a,_0x4cdb6e,_0x2e19ea,_0x489f64){var _0xc83fb0=_0x277122;_0x2b666a=_0x2b666a,_0x4cdb6e=_0x4cdb6e,_0x2e19ea=_0x2e19ea,_0x489f64=_0x489f64;let _0x341dd5=b(_0x2b666a),_0xb59bb1=_0x341dd5[_0xc83fb0(0x1ef)],_0x7ae3d3=_0x341dd5[_0xc83fb0(0x1eb)];class _0x3433bd{constructor(){var _0x5f27e6=_0xc83fb0;this[_0x5f27e6(0x206)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x5f27e6(0x18b)]=/^(0|[1-9][0-9]*)$/,this['_quotedRegExp']=/'([^\\\\']|\\\\')*'/,this[_0x5f27e6(0x1e9)]=_0x2b666a[_0x5f27e6(0x1a6)],this['_HTMLAllCollection']=_0x2b666a['HTMLAllCollection'],this[_0x5f27e6(0x192)]=Object[_0x5f27e6(0x18a)],this[_0x5f27e6(0x1bc)]=Object[_0x5f27e6(0x1ed)],this[_0x5f27e6(0x1e8)]=_0x2b666a[_0x5f27e6(0x1c1)],this[_0x5f27e6(0x127)]=RegExp[_0x5f27e6(0x20b)][_0x5f27e6(0x193)],this[_0x5f27e6(0x17f)]=Date[_0x5f27e6(0x20b)][_0x5f27e6(0x193)];}['serialize'](_0x2974e5,_0x3545b9,_0x3efb50,_0x496b06){var _0x481a9d=_0xc83fb0,_0x3b5534=this,_0x243f09=_0x3efb50['autoExpand'];function _0x29e913(_0x52177f,_0xff78c8,_0x71f387){var _0x3afd02=_0xc5ab;_0xff78c8['type']=_0x3afd02(0x1b8),_0xff78c8[_0x3afd02(0x1d6)]=_0x52177f[_0x3afd02(0x20a)],_0x8497a7=_0x71f387[_0x3afd02(0x1f2)][_0x3afd02(0x18c)],_0x71f387[_0x3afd02(0x1f2)][_0x3afd02(0x18c)]=_0xff78c8,_0x3b5534[_0x3afd02(0x16b)](_0xff78c8,_0x71f387);}try{_0x3efb50[_0x481a9d(0x148)]++,_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x15d)][_0x481a9d(0x153)](_0x3545b9);var _0xd6bb22,_0x3aea1c,_0x31a2fd,_0x182842,_0x6ddd0=[],_0xab73e6=[],_0x4bcc75,_0xcd237d=this['_type'](_0x3545b9),_0x2ce24b=_0xcd237d===_0x481a9d(0x183),_0x22b2e9=!0x1,_0x3d29d9=_0xcd237d===_0x481a9d(0x1f3),_0x53ba8c=this[_0x481a9d(0x202)](_0xcd237d),_0x4af369=this[_0x481a9d(0x201)](_0xcd237d),_0x22bb70=_0x53ba8c||_0x4af369,_0x286ee0={},_0x1fe6b7=0x0,_0x598e0b=!0x1,_0x8497a7,_0x31a94=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x3efb50['depth']){if(_0x2ce24b){if(_0x3aea1c=_0x3545b9['length'],_0x3aea1c>_0x3efb50[_0x481a9d(0x17a)]){for(_0x31a2fd=0x0,_0x182842=_0x3efb50[_0x481a9d(0x17a)],_0xd6bb22=_0x31a2fd;_0xd6bb22<_0x182842;_0xd6bb22++)_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1ab)](_0x6ddd0,_0x3545b9,_0xcd237d,_0xd6bb22,_0x3efb50));_0x2974e5[_0x481a9d(0x151)]=!0x0;}else{for(_0x31a2fd=0x0,_0x182842=_0x3aea1c,_0xd6bb22=_0x31a2fd;_0xd6bb22<_0x182842;_0xd6bb22++)_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1ab)](_0x6ddd0,_0x3545b9,_0xcd237d,_0xd6bb22,_0x3efb50));}_0x3efb50[_0x481a9d(0x179)]+=_0xab73e6[_0x481a9d(0x122)];}if(!(_0xcd237d===_0x481a9d(0x1a0)||_0xcd237d===_0x481a9d(0x1a6))&&!_0x53ba8c&&_0xcd237d!==_0x481a9d(0x12b)&&_0xcd237d!==_0x481a9d(0x19d)&&_0xcd237d!=='bigint'){var _0x4aa6af=_0x496b06['props']||_0x3efb50['props'];if(this[_0x481a9d(0x176)](_0x3545b9)?(_0xd6bb22=0x0,_0x3545b9[_0x481a9d(0x12d)](function(_0x5c22f4){var _0x5623fa=_0x481a9d;if(_0x1fe6b7++,_0x3efb50[_0x5623fa(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;return;}if(!_0x3efb50[_0x5623fa(0x1f1)]&&_0x3efb50[_0x5623fa(0x196)]&&_0x3efb50[_0x5623fa(0x179)]>_0x3efb50[_0x5623fa(0x168)]){_0x598e0b=!0x0;return;}_0xab73e6[_0x5623fa(0x153)](_0x3b5534['_addProperty'](_0x6ddd0,_0x3545b9,'Set',_0xd6bb22++,_0x3efb50,function(_0x1fd311){return function(){return _0x1fd311;};}(_0x5c22f4)));})):this[_0x481a9d(0x1bf)](_0x3545b9)&&_0x3545b9['forEach'](function(_0x55efdb,_0xab32c5){var _0x2c0851=_0x481a9d;if(_0x1fe6b7++,_0x3efb50[_0x2c0851(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;return;}if(!_0x3efb50['isExpressionToEvaluate']&&_0x3efb50[_0x2c0851(0x196)]&&_0x3efb50['autoExpandPropertyCount']>_0x3efb50[_0x2c0851(0x168)]){_0x598e0b=!0x0;return;}var _0x20c352=_0xab32c5[_0x2c0851(0x193)]();_0x20c352[_0x2c0851(0x122)]>0x64&&(_0x20c352=_0x20c352['slice'](0x0,0x64)+_0x2c0851(0x139)),_0xab73e6['push'](_0x3b5534[_0x2c0851(0x1ab)](_0x6ddd0,_0x3545b9,'Map',_0x20c352,_0x3efb50,function(_0x20b4d2){return function(){return _0x20b4d2;};}(_0x55efdb)));}),!_0x22b2e9){try{for(_0x4bcc75 in _0x3545b9)if(!(_0x2ce24b&&_0x31a94[_0x481a9d(0x1b1)](_0x4bcc75))&&!this[_0x481a9d(0x1ae)](_0x3545b9,_0x4bcc75,_0x3efb50)){if(_0x1fe6b7++,_0x3efb50[_0x481a9d(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;break;}if(!_0x3efb50[_0x481a9d(0x1f1)]&&_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x179)]>_0x3efb50['autoExpandLimit']){_0x598e0b=!0x0;break;}_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1f8)](_0x6ddd0,_0x286ee0,_0x3545b9,_0xcd237d,_0x4bcc75,_0x3efb50));}}catch{}if(_0x286ee0['_p_length']=!0x0,_0x3d29d9&&(_0x286ee0[_0x481a9d(0x123)]=!0x0),!_0x598e0b){var _0x55fd1e=[][_0x481a9d(0x187)](this[_0x481a9d(0x1bc)](_0x3545b9))[_0x481a9d(0x187)](this['_getOwnPropertySymbols'](_0x3545b9));for(_0xd6bb22=0x0,_0x3aea1c=_0x55fd1e['length'];_0xd6bb22<_0x3aea1c;_0xd6bb22++)if(_0x4bcc75=_0x55fd1e[_0xd6bb22],!(_0x2ce24b&&_0x31a94[_0x481a9d(0x1b1)](_0x4bcc75[_0x481a9d(0x193)]()))&&!this['_blacklistedProperty'](_0x3545b9,_0x4bcc75,_0x3efb50)&&!_0x286ee0[_0x481a9d(0x134)+_0x4bcc75[_0x481a9d(0x193)]()]){if(_0x1fe6b7++,_0x3efb50[_0x481a9d(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;break;}if(!_0x3efb50[_0x481a9d(0x1f1)]&&_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x179)]>_0x3efb50['autoExpandLimit']){_0x598e0b=!0x0;break;}_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1f8)](_0x6ddd0,_0x286ee0,_0x3545b9,_0xcd237d,_0x4bcc75,_0x3efb50));}}}}}if(_0x2974e5[_0x481a9d(0x150)]=_0xcd237d,_0x22bb70?(_0x2974e5[_0x481a9d(0x13c)]=_0x3545b9['valueOf'](),this[_0x481a9d(0x143)](_0xcd237d,_0x2974e5,_0x3efb50,_0x496b06)):_0xcd237d===_0x481a9d(0x170)?_0x2974e5['value']=this[_0x481a9d(0x17f)][_0x481a9d(0x154)](_0x3545b9):_0xcd237d===_0x481a9d(0x1d8)?_0x2974e5[_0x481a9d(0x13c)]=_0x3545b9[_0x481a9d(0x193)]():_0xcd237d===_0x481a9d(0x1c3)?_0x2974e5['value']=this[_0x481a9d(0x127)][_0x481a9d(0x154)](_0x3545b9):_0xcd237d==='symbol'&&this['_Symbol']?_0x2974e5[_0x481a9d(0x13c)]=this[_0x481a9d(0x1e8)][_0x481a9d(0x20b)][_0x481a9d(0x193)][_0x481a9d(0x154)](_0x3545b9):!_0x3efb50[_0x481a9d(0x1a9)]&&!(_0xcd237d===_0x481a9d(0x1a0)||_0xcd237d===_0x481a9d(0x1a6))&&(delete _0x2974e5[_0x481a9d(0x13c)],_0x2974e5[_0x481a9d(0x12c)]=!0x0),_0x598e0b&&(_0x2974e5[_0x481a9d(0x1dc)]=!0x0),_0x8497a7=_0x3efb50[_0x481a9d(0x1f2)]['current'],_0x3efb50[_0x481a9d(0x1f2)][_0x481a9d(0x18c)]=_0x2974e5,this[_0x481a9d(0x16b)](_0x2974e5,_0x3efb50),_0xab73e6[_0x481a9d(0x122)]){for(_0xd6bb22=0x0,_0x3aea1c=_0xab73e6[_0x481a9d(0x122)];_0xd6bb22<_0x3aea1c;_0xd6bb22++)_0xab73e6[_0xd6bb22](_0xd6bb22);}_0x6ddd0[_0x481a9d(0x122)]&&(_0x2974e5[_0x481a9d(0x197)]=_0x6ddd0);}catch(_0x202c18){_0x29e913(_0x202c18,_0x2974e5,_0x3efb50);}return this[_0x481a9d(0x171)](_0x3545b9,_0x2974e5),this[_0x481a9d(0x204)](_0x2974e5,_0x3efb50),_0x3efb50[_0x481a9d(0x1f2)][_0x481a9d(0x18c)]=_0x8497a7,_0x3efb50[_0x481a9d(0x148)]--,_0x3efb50[_0x481a9d(0x196)]=_0x243f09,_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x15d)][_0x481a9d(0x14b)](),_0x2974e5;}[_0xc83fb0(0x1ce)](_0x453c25){var _0x1c6ef1=_0xc83fb0;return Object[_0x1c6ef1(0x1db)]?Object[_0x1c6ef1(0x1db)](_0x453c25):[];}[_0xc83fb0(0x176)](_0x26e14a){var _0x5c57ea=_0xc83fb0;return!!(_0x26e14a&&_0x2b666a['Set']&&this['_objectToString'](_0x26e14a)===_0x5c57ea(0x178)&&_0x26e14a[_0x5c57ea(0x12d)]);}[_0xc83fb0(0x1ae)](_0x3e947d,_0x4d1e75,_0x149612){var _0x3cf397=_0xc83fb0;return _0x149612[_0x3cf397(0x1f9)]?typeof _0x3e947d[_0x4d1e75]=='function':!0x1;}[_0xc83fb0(0x164)](_0x132cfb){var _0x123d06=_0xc83fb0,_0x1f311c='';return _0x1f311c=typeof _0x132cfb,_0x1f311c===_0x123d06(0x1b5)?this[_0x123d06(0x1df)](_0x132cfb)===_0x123d06(0x1cc)?_0x1f311c='array':this[_0x123d06(0x1df)](_0x132cfb)==='[object\\x20Date]'?_0x1f311c=_0x123d06(0x170):this[_0x123d06(0x1df)](_0x132cfb)===_0x123d06(0x1a5)?_0x1f311c=_0x123d06(0x1d8):_0x132cfb===null?_0x1f311c=_0x123d06(0x1a0):_0x132cfb[_0x123d06(0x20c)]&&(_0x1f311c=_0x132cfb[_0x123d06(0x20c)][_0x123d06(0x19f)]||_0x1f311c):_0x1f311c===_0x123d06(0x1a6)&&this[_0x123d06(0x1b7)]&&_0x132cfb instanceof this[_0x123d06(0x1b7)]&&(_0x1f311c=_0x123d06(0x191)),_0x1f311c;}['_objectToString'](_0xe15424){var _0x2dfa4f=_0xc83fb0;return Object['prototype'][_0x2dfa4f(0x193)][_0x2dfa4f(0x154)](_0xe15424);}[_0xc83fb0(0x202)](_0x1c7e27){var _0x437108=_0xc83fb0;return _0x1c7e27===_0x437108(0x21a)||_0x1c7e27==='string'||_0x1c7e27===_0x437108(0x216);}[_0xc83fb0(0x201)](_0x2daba1){var _0x5ae4a7=_0xc83fb0;return _0x2daba1===_0x5ae4a7(0x1cd)||_0x2daba1===_0x5ae4a7(0x12b)||_0x2daba1===_0x5ae4a7(0x186);}[_0xc83fb0(0x1ab)](_0x20f9a1,_0x327b4a,_0xbf4be6,_0x48d02d,_0x1f56f9,_0x5da251){var _0x4f6931=this;return function(_0x5c3cf3){var _0x7d5aec=_0xc5ab,_0xfcd658=_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x18c)],_0xb428d1=_0x1f56f9[_0x7d5aec(0x1f2)]['index'],_0x50ca98=_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)];_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)]=_0xfcd658,_0x1f56f9[_0x7d5aec(0x1f2)]['index']=typeof _0x48d02d=='number'?_0x48d02d:_0x5c3cf3,_0x20f9a1[_0x7d5aec(0x153)](_0x4f6931[_0x7d5aec(0x1c2)](_0x327b4a,_0xbf4be6,_0x48d02d,_0x1f56f9,_0x5da251)),_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)]=_0x50ca98,_0x1f56f9[_0x7d5aec(0x1f2)]['index']=_0xb428d1;};}[_0xc83fb0(0x1f8)](_0x2a642f,_0x33d34f,_0x48f024,_0x3bdd75,_0x155f6d,_0x230db2,_0x20acf6){var _0x58110a=_0xc83fb0,_0x145cac=this;return _0x33d34f[_0x58110a(0x134)+_0x155f6d[_0x58110a(0x193)]()]=!0x0,function(_0x4c8a4a){var _0x1eeefc=_0x58110a,_0x3e6bce=_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x18c)],_0x57c08c=_0x230db2[_0x1eeefc(0x1f2)]['index'],_0x3070c4=_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)];_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)]=_0x3e6bce,_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x185)]=_0x4c8a4a,_0x2a642f[_0x1eeefc(0x153)](_0x145cac['_property'](_0x48f024,_0x3bdd75,_0x155f6d,_0x230db2,_0x20acf6)),_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)]=_0x3070c4,_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x185)]=_0x57c08c;};}[_0xc83fb0(0x1c2)](_0x4bb40b,_0x2412f1,_0x415f45,_0x3d4542,_0xa974f0){var _0x2cc493=_0xc83fb0,_0x36d7ed=this;_0xa974f0||(_0xa974f0=function(_0x576be5,_0x26eb48){return _0x576be5[_0x26eb48];});var _0x4d18a9=_0x415f45['toString'](),_0x32e6ca=_0x3d4542[_0x2cc493(0x159)]||{},_0x4a8ccb=_0x3d4542[_0x2cc493(0x1a9)],_0x11c1e4=_0x3d4542[_0x2cc493(0x1f1)];try{var _0x256ca3=this[_0x2cc493(0x1bf)](_0x4bb40b),_0x4a8251=_0x4d18a9;_0x256ca3&&_0x4a8251[0x0]==='\\x27'&&(_0x4a8251=_0x4a8251[_0x2cc493(0x200)](0x1,_0x4a8251[_0x2cc493(0x122)]-0x2));var _0x4f325a=_0x3d4542[_0x2cc493(0x159)]=_0x32e6ca[_0x2cc493(0x134)+_0x4a8251];_0x4f325a&&(_0x3d4542['depth']=_0x3d4542[_0x2cc493(0x1a9)]+0x1),_0x3d4542[_0x2cc493(0x1f1)]=!!_0x4f325a;var _0x5c5c9b=typeof _0x415f45==_0x2cc493(0x152),_0xe03d99={'name':_0x5c5c9b||_0x256ca3?_0x4d18a9:this[_0x2cc493(0x181)](_0x4d18a9)};if(_0x5c5c9b&&(_0xe03d99[_0x2cc493(0x152)]=!0x0),!(_0x2412f1===_0x2cc493(0x183)||_0x2412f1==='Error')){var _0x33f2ab=this[_0x2cc493(0x192)](_0x4bb40b,_0x415f45);if(_0x33f2ab&&(_0x33f2ab[_0x2cc493(0x12a)]&&(_0xe03d99[_0x2cc493(0x175)]=!0x0),_0x33f2ab[_0x2cc493(0x1c7)]&&!_0x4f325a&&!_0x3d4542[_0x2cc493(0x1e1)]))return _0xe03d99[_0x2cc493(0x129)]=!0x0,this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542),_0xe03d99;}var _0x5932aa;try{_0x5932aa=_0xa974f0(_0x4bb40b,_0x415f45);}catch(_0x1c6417){return _0xe03d99={'name':_0x4d18a9,'type':_0x2cc493(0x1b8),'error':_0x1c6417[_0x2cc493(0x20a)]},this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542),_0xe03d99;}var _0x5608f4=this['_type'](_0x5932aa),_0x5934ea=this[_0x2cc493(0x202)](_0x5608f4);if(_0xe03d99['type']=_0x5608f4,_0x5934ea)this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542,_0x5932aa,function(){var _0xacdd1e=_0x2cc493;_0xe03d99[_0xacdd1e(0x13c)]=_0x5932aa[_0xacdd1e(0x14d)](),!_0x4f325a&&_0x36d7ed['_capIfString'](_0x5608f4,_0xe03d99,_0x3d4542,{});});else{var _0x1e345c=_0x3d4542[_0x2cc493(0x196)]&&_0x3d4542[_0x2cc493(0x148)]<_0x3d4542[_0x2cc493(0x126)]&&_0x3d4542[_0x2cc493(0x15d)][_0x2cc493(0x1ba)](_0x5932aa)<0x0&&_0x5608f4!==_0x2cc493(0x1f3)&&_0x3d4542['autoExpandPropertyCount']<_0x3d4542[_0x2cc493(0x168)];_0x1e345c||_0x3d4542[_0x2cc493(0x148)]<_0x4a8ccb||_0x4f325a?(this[_0x2cc493(0x15a)](_0xe03d99,_0x5932aa,_0x3d4542,_0x4f325a||{}),this[_0x2cc493(0x171)](_0x5932aa,_0xe03d99)):this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542,_0x5932aa,function(){var _0x10bd66=_0x2cc493;_0x5608f4==='null'||_0x5608f4===_0x10bd66(0x1a6)||(delete _0xe03d99[_0x10bd66(0x13c)],_0xe03d99[_0x10bd66(0x12c)]=!0x0);});}return _0xe03d99;}finally{_0x3d4542[_0x2cc493(0x159)]=_0x32e6ca,_0x3d4542[_0x2cc493(0x1a9)]=_0x4a8ccb,_0x3d4542['isExpressionToEvaluate']=_0x11c1e4;}}[_0xc83fb0(0x143)](_0x26e91d,_0x24781c,_0x5bd42e,_0x4a720a){var _0x3aa044=_0xc83fb0,_0x2b3bda=_0x4a720a[_0x3aa044(0x121)]||_0x5bd42e[_0x3aa044(0x121)];if((_0x26e91d===_0x3aa044(0x1dd)||_0x26e91d===_0x3aa044(0x12b))&&_0x24781c['value']){let _0x53f015=_0x24781c['value'][_0x3aa044(0x122)];_0x5bd42e[_0x3aa044(0x21d)]+=_0x53f015,_0x5bd42e['allStrLength']>_0x5bd42e[_0x3aa044(0x1c8)]?(_0x24781c[_0x3aa044(0x12c)]='',delete _0x24781c['value']):_0x53f015>_0x2b3bda&&(_0x24781c[_0x3aa044(0x12c)]=_0x24781c[_0x3aa044(0x13c)][_0x3aa044(0x200)](0x0,_0x2b3bda),delete _0x24781c[_0x3aa044(0x13c)]);}}['_isMap'](_0x13d4b6){var _0x5a2e33=_0xc83fb0;return!!(_0x13d4b6&&_0x2b666a[_0x5a2e33(0x1bb)]&&this[_0x5a2e33(0x1df)](_0x13d4b6)===_0x5a2e33(0x1c9)&&_0x13d4b6[_0x5a2e33(0x12d)]);}[_0xc83fb0(0x181)](_0x249276){var _0x265167=_0xc83fb0;if(_0x249276[_0x265167(0x18e)](/^\\d+$/))return _0x249276;var _0x249664;try{_0x249664=JSON['stringify'](''+_0x249276);}catch{_0x249664='\\x22'+this[_0x265167(0x1df)](_0x249276)+'\\x22';}return _0x249664[_0x265167(0x18e)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x249664=_0x249664[_0x265167(0x200)](0x1,_0x249664[_0x265167(0x122)]-0x2):_0x249664=_0x249664[_0x265167(0x16d)](/'/g,'\\x5c\\x27')[_0x265167(0x16d)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x249664;}[_0xc83fb0(0x132)](_0x45f4f2,_0x1a9b2b,_0x2029c2,_0x31d872){var _0xb6755c=_0xc83fb0;this[_0xb6755c(0x16b)](_0x45f4f2,_0x1a9b2b),_0x31d872&&_0x31d872(),this[_0xb6755c(0x171)](_0x2029c2,_0x45f4f2),this['_treeNodePropertiesAfterFullValue'](_0x45f4f2,_0x1a9b2b);}[_0xc83fb0(0x16b)](_0x34c63e,_0xe2d82b){var _0x50a303=_0xc83fb0;this[_0x50a303(0x1e2)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x14f)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x1e0)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x1bd)](_0x34c63e,_0xe2d82b);}['_setNodeId'](_0x5e991e,_0x9dba11){}[_0xc83fb0(0x14f)](_0x252482,_0x2ec202){}[_0xc83fb0(0x17e)](_0xd737d3,_0x48958c){}[_0xc83fb0(0x1c0)](_0x25e050){var _0x86a0a0=_0xc83fb0;return _0x25e050===this[_0x86a0a0(0x1e9)];}[_0xc83fb0(0x204)](_0x59a6ad,_0x21713c){var _0x417cc8=_0xc83fb0;this[_0x417cc8(0x17e)](_0x59a6ad,_0x21713c),this[_0x417cc8(0x1a1)](_0x59a6ad),_0x21713c[_0x417cc8(0x169)]&&this[_0x417cc8(0x144)](_0x59a6ad),this[_0x417cc8(0x1ee)](_0x59a6ad,_0x21713c),this['_addLoadNode'](_0x59a6ad,_0x21713c),this[_0x417cc8(0x163)](_0x59a6ad);}[_0xc83fb0(0x171)](_0x368a80,_0x3bf559){var _0x5e4474=_0xc83fb0;let _0x15b644;try{_0x2b666a[_0x5e4474(0x1e5)]&&(_0x15b644=_0x2b666a[_0x5e4474(0x1e5)][_0x5e4474(0x1d6)],_0x2b666a[_0x5e4474(0x1e5)]['error']=function(){}),_0x368a80&&typeof _0x368a80['length']==_0x5e4474(0x216)&&(_0x3bf559[_0x5e4474(0x122)]=_0x368a80['length']);}catch{}finally{_0x15b644&&(_0x2b666a['console'][_0x5e4474(0x1d6)]=_0x15b644);}if(_0x3bf559['type']===_0x5e4474(0x216)||_0x3bf559['type']===_0x5e4474(0x186)){if(isNaN(_0x3bf559[_0x5e4474(0x13c)]))_0x3bf559[_0x5e4474(0x1ad)]=!0x0,delete _0x3bf559[_0x5e4474(0x13c)];else switch(_0x3bf559[_0x5e4474(0x13c)]){case Number['POSITIVE_INFINITY']:_0x3bf559[_0x5e4474(0x199)]=!0x0,delete _0x3bf559['value'];break;case Number[_0x5e4474(0x135)]:_0x3bf559[_0x5e4474(0x18d)]=!0x0,delete _0x3bf559[_0x5e4474(0x13c)];break;case 0x0:this['_isNegativeZero'](_0x3bf559[_0x5e4474(0x13c)])&&(_0x3bf559[_0x5e4474(0x1da)]=!0x0);break;}}else _0x3bf559[_0x5e4474(0x150)]===_0x5e4474(0x1f3)&&typeof _0x368a80[_0x5e4474(0x19f)]==_0x5e4474(0x1dd)&&_0x368a80[_0x5e4474(0x19f)]&&_0x3bf559[_0x5e4474(0x19f)]&&_0x368a80[_0x5e4474(0x19f)]!==_0x3bf559[_0x5e4474(0x19f)]&&(_0x3bf559['funcName']=_0x368a80[_0x5e4474(0x19f)]);}[_0xc83fb0(0x1fb)](_0x340a19){var _0x2e6ef9=_0xc83fb0;return 0x1/_0x340a19===Number[_0x2e6ef9(0x135)];}[_0xc83fb0(0x144)](_0x2109f2){var _0x1074c3=_0xc83fb0;!_0x2109f2['props']||!_0x2109f2[_0x1074c3(0x197)][_0x1074c3(0x122)]||_0x2109f2[_0x1074c3(0x150)]===_0x1074c3(0x183)||_0x2109f2[_0x1074c3(0x150)]===_0x1074c3(0x1bb)||_0x2109f2['type']===_0x1074c3(0x1e4)||_0x2109f2[_0x1074c3(0x197)][_0x1074c3(0x1cf)](function(_0x579bbe,_0xd3668f){var _0x5c0a3c=_0x1074c3,_0x179ea1=_0x579bbe[_0x5c0a3c(0x19f)][_0x5c0a3c(0x17d)](),_0x394e8a=_0xd3668f[_0x5c0a3c(0x19f)][_0x5c0a3c(0x17d)]();return _0x179ea1<_0x394e8a?-0x1:_0x179ea1>_0x394e8a?0x1:0x0;});}['_addFunctionsNode'](_0x5b4bf1,_0x74c4fe){var _0x87fdfe=_0xc83fb0;if(!(_0x74c4fe[_0x87fdfe(0x1f9)]||!_0x5b4bf1[_0x87fdfe(0x197)]||!_0x5b4bf1[_0x87fdfe(0x197)]['length'])){for(var _0x3ac3f4=[],_0x4ceb3a=[],_0x260f45=0x0,_0xf2dbe6=_0x5b4bf1[_0x87fdfe(0x197)][_0x87fdfe(0x122)];_0x260f45<_0xf2dbe6;_0x260f45++){var _0x22c70b=_0x5b4bf1[_0x87fdfe(0x197)][_0x260f45];_0x22c70b['type']===_0x87fdfe(0x1f3)?_0x3ac3f4[_0x87fdfe(0x153)](_0x22c70b):_0x4ceb3a[_0x87fdfe(0x153)](_0x22c70b);}if(!(!_0x4ceb3a[_0x87fdfe(0x122)]||_0x3ac3f4[_0x87fdfe(0x122)]<=0x1)){_0x5b4bf1['props']=_0x4ceb3a;var _0x4a6b3b={'functionsNode':!0x0,'props':_0x3ac3f4};this[_0x87fdfe(0x1e2)](_0x4a6b3b,_0x74c4fe),this[_0x87fdfe(0x17e)](_0x4a6b3b,_0x74c4fe),this[_0x87fdfe(0x1a1)](_0x4a6b3b),this[_0x87fdfe(0x1bd)](_0x4a6b3b,_0x74c4fe),_0x4a6b3b['id']+='\\x20f',_0x5b4bf1[_0x87fdfe(0x197)][_0x87fdfe(0x16f)](_0x4a6b3b);}}}['_addLoadNode'](_0xe0c1f5,_0x16df52){}[_0xc83fb0(0x1a1)](_0x5e776f){}[_0xc83fb0(0x21c)](_0xed4fe0){var _0x3c283a=_0xc83fb0;return Array['isArray'](_0xed4fe0)||typeof _0xed4fe0==_0x3c283a(0x1b5)&&this[_0x3c283a(0x1df)](_0xed4fe0)===_0x3c283a(0x1cc);}[_0xc83fb0(0x1bd)](_0x45e6db,_0x317a4d){}[_0xc83fb0(0x163)](_0x403816){var _0x587472=_0xc83fb0;delete _0x403816[_0x587472(0x13f)],delete _0x403816[_0x587472(0x166)],delete _0x403816['_hasMapOnItsPath'];}[_0xc83fb0(0x1e0)](_0x420717,_0x51ec4d){}}let _0x4c6fbe=new _0x3433bd(),_0x1c73d6={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x1300f9={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x3fb167(_0x4da0e2,_0x234c63,_0x2f0b10,_0x2a70ca,_0x22e30a,_0x32659a){var _0x31c0e5=_0xc83fb0;let _0x2e43e2,_0x3be46a;try{_0x3be46a=_0x7ae3d3(),_0x2e43e2=_0x2e19ea[_0x234c63],!_0x2e43e2||_0x3be46a-_0x2e43e2['ts']>0x1f4&&_0x2e43e2[_0x31c0e5(0x128)]&&_0x2e43e2[_0x31c0e5(0x145)]/_0x2e43e2[_0x31c0e5(0x128)]<0x64?(_0x2e19ea[_0x234c63]=_0x2e43e2={'count':0x0,'time':0x0,'ts':_0x3be46a},_0x2e19ea[_0x31c0e5(0x141)]={}):_0x3be46a-_0x2e19ea[_0x31c0e5(0x141)]['ts']>0x32&&_0x2e19ea[_0x31c0e5(0x141)]['count']&&_0x2e19ea[_0x31c0e5(0x141)]['time']/_0x2e19ea[_0x31c0e5(0x141)]['count']<0x64&&(_0x2e19ea[_0x31c0e5(0x141)]={});let _0x5d2500=[],_0x13b8c2=_0x2e43e2[_0x31c0e5(0x1fc)]||_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x1fc)]?_0x1300f9:_0x1c73d6,_0x13c005=_0x48a809=>{var _0x12d5d2=_0x31c0e5;let _0x5f41a5={};return _0x5f41a5['props']=_0x48a809[_0x12d5d2(0x197)],_0x5f41a5[_0x12d5d2(0x17a)]=_0x48a809[_0x12d5d2(0x17a)],_0x5f41a5[_0x12d5d2(0x121)]=_0x48a809[_0x12d5d2(0x121)],_0x5f41a5['totalStrLength']=_0x48a809[_0x12d5d2(0x1c8)],_0x5f41a5[_0x12d5d2(0x168)]=_0x48a809[_0x12d5d2(0x168)],_0x5f41a5['autoExpandMaxDepth']=_0x48a809[_0x12d5d2(0x126)],_0x5f41a5['sortProps']=!0x1,_0x5f41a5[_0x12d5d2(0x1f9)]=!_0x4cdb6e,_0x5f41a5[_0x12d5d2(0x1a9)]=0x1,_0x5f41a5['level']=0x0,_0x5f41a5[_0x12d5d2(0x188)]=_0x12d5d2(0x1d0),_0x5f41a5[_0x12d5d2(0x155)]=_0x12d5d2(0x1a3),_0x5f41a5['autoExpand']=!0x0,_0x5f41a5[_0x12d5d2(0x15d)]=[],_0x5f41a5[_0x12d5d2(0x179)]=0x0,_0x5f41a5[_0x12d5d2(0x1e1)]=!0x0,_0x5f41a5[_0x12d5d2(0x21d)]=0x0,_0x5f41a5[_0x12d5d2(0x1f2)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x5f41a5;};for(var _0x14027d=0x0;_0x14027d<_0x22e30a[_0x31c0e5(0x122)];_0x14027d++)_0x5d2500[_0x31c0e5(0x153)](_0x4c6fbe[_0x31c0e5(0x15a)]({'timeNode':_0x4da0e2===_0x31c0e5(0x145)||void 0x0},_0x22e30a[_0x14027d],_0x13c005(_0x13b8c2),{}));if(_0x4da0e2==='trace'){let _0xe6083e=Error[_0x31c0e5(0x17b)];try{Error[_0x31c0e5(0x17b)]=0x1/0x0,_0x5d2500['push'](_0x4c6fbe['serialize']({'stackNode':!0x0},new Error()[_0x31c0e5(0x211)],_0x13c005(_0x13b8c2),{'strLength':0x1/0x0}));}finally{Error[_0x31c0e5(0x17b)]=_0xe6083e;}}return{'method':_0x31c0e5(0x1ff),'version':_0x489f64,'args':[{'ts':_0x2f0b10,'session':_0x2a70ca,'args':_0x5d2500,'id':_0x234c63,'context':_0x32659a}]};}catch(_0x2b4f8b){return{'method':_0x31c0e5(0x1ff),'version':_0x489f64,'args':[{'ts':_0x2f0b10,'session':_0x2a70ca,'args':[{'type':'unknown','error':_0x2b4f8b&&_0x2b4f8b[_0x31c0e5(0x20a)]}],'id':_0x234c63,'context':_0x32659a}]};}finally{try{if(_0x2e43e2&&_0x3be46a){let _0xff9c1d=_0x7ae3d3();_0x2e43e2[_0x31c0e5(0x128)]++,_0x2e43e2[_0x31c0e5(0x145)]+=_0xb59bb1(_0x3be46a,_0xff9c1d),_0x2e43e2['ts']=_0xff9c1d,_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x128)]++,_0x2e19ea['hits']['time']+=_0xb59bb1(_0x3be46a,_0xff9c1d),_0x2e19ea['hits']['ts']=_0xff9c1d,(_0x2e43e2['count']>0x32||_0x2e43e2[_0x31c0e5(0x145)]>0x64)&&(_0x2e43e2[_0x31c0e5(0x1fc)]=!0x0),(_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x128)]>0x3e8||_0x2e19ea[_0x31c0e5(0x141)]['time']>0x12c)&&(_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x1fc)]=!0x0);}}catch{}}}return _0x3fb167;}((_0xd84dda,_0x5747d3,_0x5b0082,_0x477f21,_0x2a68c3,_0x3f8562,_0x3a0549,_0x3db78c,_0x46c513,_0xbfe5dd,_0x18f1a0)=>{var _0x320b2d=_0x277122;if(_0xd84dda[_0x320b2d(0x1d9)])return _0xd84dda['_console_ninja'];if(!H(_0xd84dda,_0x3db78c,_0x2a68c3))return _0xd84dda[_0x320b2d(0x1d9)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0xd84dda['_console_ninja'];let _0x4fb6c4=b(_0xd84dda),_0x5b3f8e=_0x4fb6c4[_0x320b2d(0x1ef)],_0x479531=_0x4fb6c4[_0x320b2d(0x1eb)],_0x177654=_0x4fb6c4[_0x320b2d(0x177)],_0x25d606={'hits':{},'ts':{}},_0x6aa2d2=X(_0xd84dda,_0x46c513,_0x25d606,_0x3f8562),_0x2f092d=_0x4d5c8f=>{_0x25d606['ts'][_0x4d5c8f]=_0x479531();},_0x492afb=(_0x3065ce,_0x3451d9)=>{var _0x43323f=_0x320b2d;let _0x378abc=_0x25d606['ts'][_0x3451d9];if(delete _0x25d606['ts'][_0x3451d9],_0x378abc){let _0xc54ea1=_0x5b3f8e(_0x378abc,_0x479531());_0x4abd9f(_0x6aa2d2(_0x43323f(0x145),_0x3065ce,_0x177654(),_0x1dcfcb,[_0xc54ea1],_0x3451d9));}},_0x4f8d09=_0x51145b=>{var _0x3296a6=_0x320b2d,_0x2e7901;return _0x2a68c3===_0x3296a6(0x18f)&&_0xd84dda[_0x3296a6(0x221)]&&((_0x2e7901=_0x51145b==null?void 0x0:_0x51145b[_0x3296a6(0x13e)])==null?void 0x0:_0x2e7901[_0x3296a6(0x122)])&&(_0x51145b[_0x3296a6(0x13e)][0x0][_0x3296a6(0x221)]=_0xd84dda[_0x3296a6(0x221)]),_0x51145b;};_0xd84dda['_console_ninja']={'consoleLog':(_0x34542f,_0x1e7acf)=>{var _0x33d79c=_0x320b2d;_0xd84dda[_0x33d79c(0x1e5)]['log'][_0x33d79c(0x19f)]!==_0x33d79c(0x19b)&&_0x4abd9f(_0x6aa2d2(_0x33d79c(0x1ff),_0x34542f,_0x177654(),_0x1dcfcb,_0x1e7acf));},'consoleTrace':(_0x58cfc2,_0x3b1473)=>{var _0x43d259=_0x320b2d;_0xd84dda[_0x43d259(0x1e5)][_0x43d259(0x1ff)][_0x43d259(0x19f)]!=='disabledTrace'&&_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x43d259(0x13a),_0x58cfc2,_0x177654(),_0x1dcfcb,_0x3b1473)));},'consoleTime':_0x19ca9e=>{_0x2f092d(_0x19ca9e);},'consoleTimeEnd':(_0x3c1c7d,_0x259c13)=>{_0x492afb(_0x259c13,_0x3c1c7d);},'autoLog':(_0x50a502,_0x2ec9ac)=>{var _0x11fb8c=_0x320b2d;_0x4abd9f(_0x6aa2d2(_0x11fb8c(0x1ff),_0x2ec9ac,_0x177654(),_0x1dcfcb,[_0x50a502]));},'autoLogMany':(_0x39367a,_0x33dff6)=>{var _0x3f364b=_0x320b2d;_0x4abd9f(_0x6aa2d2(_0x3f364b(0x1ff),_0x39367a,_0x177654(),_0x1dcfcb,_0x33dff6));},'autoTrace':(_0x4de991,_0x1c9190)=>{var _0x31dbb7=_0x320b2d;_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x31dbb7(0x13a),_0x1c9190,_0x177654(),_0x1dcfcb,[_0x4de991])));},'autoTraceMany':(_0x48d7ba,_0x5770f9)=>{var _0x445bc1=_0x320b2d;_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x445bc1(0x13a),_0x48d7ba,_0x177654(),_0x1dcfcb,_0x5770f9)));},'autoTime':(_0x456f75,_0x2d3903,_0x58530c)=>{_0x2f092d(_0x58530c);},'autoTimeEnd':(_0x3faefd,_0x1c4496,_0x5d7ac7)=>{_0x492afb(_0x1c4496,_0x5d7ac7);},'coverage':_0x3e26ed=>{_0x4abd9f({'method':'coverage','version':_0x3f8562,'args':[{'id':_0x3e26ed}]});}};let _0x4abd9f=q(_0xd84dda,_0x5747d3,_0x5b0082,_0x477f21,_0x2a68c3,_0xbfe5dd,_0x18f1a0),_0x1dcfcb=_0xd84dda[_0x320b2d(0x218)];return _0xd84dda[_0x320b2d(0x1d9)];})(globalThis,_0x277122(0x1ec),_0x277122(0x1a4),_0x277122(0x14a),_0x277122(0x198),_0x277122(0x207),_0x277122(0x1be),_0x277122(0x194),_0x277122(0x217),_0x277122(0x1d3),_0x277122(0x137));")}catch(e){}}function f(e,...t){try{l().consoleLog(e,t)}catch(e){}return t}},"./src/components/audio-player.ts":(e,t,a)=>{a.r(t),a.d(t,{AudioPlayer:()=>s});var i=a("./src/constants/index.ts");class s{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=n.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const e=i.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(e),s.audioBuffers.set(e,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(e){return void console.error("Error loading or decoding click sound:",e)}if(this.clickSoundBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.clickSoundBuffer,e.connect(this.audioContext.destination),e.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(e){return new Promise((async(t,a)=>{try{const a=await fetch(e),i=await a.arrayBuffer();t(await this.audioContext.decodeAudioData(i))}catch(e){console.error("Error loading or decoding audio:",e),a(e)}}))}async preloadPromptAudio(e){const t=await this.loadAndDecodeAudio(e);t&&(this.promptAudioBuffer=t)}async preloadGameAudio(e){if(s.audioBuffers.has(e))return;const t=await this.loadAndDecodeAudio(e);t&&s.audioBuffers.set(e,t)}playAudio(e){const t=s.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}}playFeedbackAudios=(e=!1,...t)=>{t.length>0&&(this.audioQueue=t,this.playFetch(0,e))};playPromptAudio=e=>{if(this.promptAudioBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.promptAudioBuffer,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((e=>{e.stop()})),this.audioSourcs=[]};playFetch=(e,t)=>{e>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[e]&&fetch(this.audioQueue[e]).then((e=>e.arrayBuffer())).then((a=>{this.audioContext?.decodeAudioData(a,(a=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=a,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=t,this.sourceNode.onended=()=>this.handleAudioEnded(e,t),this.sourceNode.start()}))}))};handleAudioEnded=(e,t)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(e+1,t)}}class n{static instance=null;static getAudioContext(){return n.instance||(n.instance=new(window.AudioContext||window.webkitAudioContext)),n.instance}}},"./src/components/background.ts":(e,t,a)=>{a.r(t),a.d(t,{Background:()=>x});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts"),n={bgImg:s.DEFAULT_BACKGROUND_1,hillImg:s.ASSETS_PATH_HILL,pillerImg:s.ASSETS_PATH_TOTEM,fenchImg:s.ASSETS_PATH_FENCE,autumnBgImg:s.AUTUMN_BACKGROUND_1,autumnHillImg:s.AUTUMN_HILL_1,autumnPillerImg:s.AUTUMN_PILLAR_1,autumnSignImg:s.AUTUMN_SIGN_1,autumnFenceImg:s.AUTUMN_FENCE_1,winterBgImg:s.WINTER_BACKGROUND_1,winterHillImg:s.WINTER_HILL_1,winterSignImg:s.WINTER_SIGN_1,winterFenceImg:s.WINTER_FENCE_1,winterPillerImg:s.WINTER_PILLAR_1};class x{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(e,t,a,s){this.width=t,this.height=a,this.context=e,this.levelNumber=s,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,i.loadImages)(n,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=.1*t.width+.15*t.width/2,this.posY=.2*t.height,this.context=e,this.canvas=t,(0,i.loadImages)({cancel_button_image:s.CANCEL_BTN_IMG},(e=>{this.cancel_button_image=e.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/close-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,n){this.posX=a,this.posY=n,this.context=e,this.canvas=t,(0,i.loadImages)({close_button_image:s.MAP_BTN_IMG},(e=>{this.close_button_image=e.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:a,y:n}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/index.ts":(e,t,a)=>{a.r(t),a.d(t,{CancelButton:()=>s.default,CloseButton:()=>i.default,LevelBloonButton:()=>d.default,NextButton:()=>n.default,NoButton:()=>x.default,PauseButton:()=>o.default,PlayButton:()=>_.default,RetryButton:()=>r.default,YesButton:()=>c.default});var i=a("./src/components/buttons/close-button.ts"),s=a("./src/components/buttons/cancel-button.ts"),n=a("./src/components/buttons/next-button.ts"),x=a("./src/components/buttons/no-button.ts"),o=a("./src/components/buttons/pause-button.ts"),r=a("./src/components/buttons/retry-button.ts"),c=a("./src/components/buttons/yes-button.ts"),_=a("./src/components/buttons/play-button.ts"),d=a("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{context;levelData;posX;posY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(e,t,a){this.context=t,this.levelData=a,this.posX=this.levelData.x,this.posY=this.levelData.y,this.size=e.height/5,this.radiusOffSet=e.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=e.height/13,this.textFontSize=this.size/6}isSpecialLevel(e){return s.SPECIAL_LEVELS.includes(e)}isLevelSpecial(e){return this.levelData?.isSpecial?.9*e:e}draw(e,t,a,s){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+e}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${i.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.25:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(e,t,a,s)}drawIcons(e,t,a,s){const n=this.levelData.index;if(i.Debugger.DebugMode||n+e-1>t+1&&this.drawLock(),a.length&&n+e<=s)for(let t=0;t<a.length;t++)if(n-1+e===parseInt(a[t].levelNumber)){this.checkStars(a[t].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(e){const t=this.levelData.x,a=this.levelData.y,i=this.size;e>=1&&this.drawStar(t,a-.01*i),e>1&&this.drawStar(t+i/2.5,a-.01*i),3===e&&this.drawStar(t+i/5,a-.1*i)}drawStar(e,t){this.context.drawImage(this.levelData?.starImg,e,t,this.size/5,this.size/5)}onClick(e,t,a,s,n){Math.sqrt((e-this.levelData.x-this.radiusOffSet)*(e-this.levelData.x-this.radiusOffSet)+(t-this.levelData.y-this.radiusOffSet)*(t-this.levelData.y-this.radiusOffSet))<45&&(i.Debugger.DebugMode||this.levelData.index+a<=s)&&(this.btnSize=this.bloonSize-4,this.posX=this.posX+.75,this.posY=this.posY+.75,n(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,n,x){this.posX=n,this.posY=x,this.context=e,this.width=t,this.height=a,(0,i.loadImages)({next_button_image:s.NEXT_BTN_IMG},(e=>{this.next_button_image=e.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/no-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,n){this.posX=a+5,this.posY=n+10,this.context=e,this.canvas=t,(0,i.loadImages)({no_button_image:s.CANCEL_BTN_IMG},(e=>{this.no_button_image=e.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/pause-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=t.width-.09*t.height,this.posY=0,this.context=e,this.canvas=t,(0,i.loadImages)({pause_button_image:s.PAUSE_BTN_IMG},(e=>{this.pause_button_image=e.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9),a}}},"./src/components/buttons/play-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var i=a("./src/constants/index.ts"),s=a("./src/Firebase/firebase-integration.ts"),n=a("./src/common/index.ts"),x=a("./src/data/index.ts");class o{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(e,t,a,x){this.posX=a,this.posY=x,this.context=e,this.canvas=t,this.firebaseIntegration=new s.FirebaseIntegration,this.init(),this.images={pause_button_image:i.PLAY_BTN_IMG},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}async init(){const e=await(0,x.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(e,t){const a=Math.sqrt((e-this.posX-this.canvas.width/6)*(e-this.posX-this.canvas.width/6)+(t-this.posY-this.canvas.width/6)*(t-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),a<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const e={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(e)}}},"./src/components/buttons/retry-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,n){this.posX=a,this.posY=n,this.context=e,this.canvas=t,(0,i.loadImages)({retry_button_image:s.RETRY_BTN_IMG},(e=>{this.retry_button_image=e.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:a,y:n}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/yes-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,n){this.posX=a-5,this.posY=n,this.context=e,this.canvas=t,(0,i.loadImages)({yes_button_image:s.YES_BTN_IMG},(e=>{this.yes_button_image=e.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,i.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/feedback-particle-effect/feedback-text-effects.ts":(e,t,a)=>{a.r(t),a.d(t,{FeedbackTextEffects:()=>x});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts"),n=a("./src/data/feedback-fonts.ts");class x{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()&&this.loadFont()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}async loadFont(){const e=n.feedbackCustomFonts[i.lang]||s.feedbackTextDefault,t=`${s.FONT_BASE_PATH}${e}.ttf`;this.applyFontToElement(e,t)}applyFontToElement(e,t){if(t){const a=document.createElement("style");a.textContent=`\n        @font-face {\n          font-family: '${e}';\n          src: url('${t}') format('truetype');\n        }\n      `,document.head.appendChild(a)}this.isFeedbackElementAvailable()&&(this.feedbackTextElement.style.fontFamily=`${e}, sans-serif`)}wrapText(e){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=e,(0,i.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,i.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(e,t,a)=>{a.r(t),a.d(t,{AudioPlayer:()=>h.AudioPlayer,Background:()=>_.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>s.LevelIndicators,Monster:()=>r.Monster,PauseButton:()=>i.default,PromptText:()=>n.PromptText,StoneHandler:()=>x.default,TimerTicking:()=>c.TimerTicking,TrailEffect:()=>l.default,Tutorial:()=>o.Tutorial});var i=a("./src/components/buttons/pause-button.ts"),s=a("./src/components/level-indicator.ts"),n=a("./src/components/prompt-text.ts"),x=a("./src/components/stone-handler.ts"),o=a("./src/components/tutorial.ts"),r=a("./src/components/monster.ts"),c=a("./src/components/timer-ticking.ts"),_=a("./src/components/background.ts"),d=a("./src/components/feedback-particle-effect/feedback-text-effects.ts"),h=a("./src/components/audio-player.ts"),l=a("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(e,t,a)=>{a.r(t),a.d(t,{LevelIndicators:()=>x});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts"),n=a("./src/events/index.ts");class x extends n.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.activeIndicators=a,this.images={level_indicator:s.LEVEL_INDICATOR,bar_empty:s.BAR_EMPTY,bar_full:s.BAR_FULL},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}setIndicators(e){this.activeIndicators=e}addDropStoneEvent(){document.addEventListener("dropstone",(e=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var e=0;e<5;e++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(e=0;e<this.activeIndicators;e++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(e){}handleLoadPuzzle(e){this.setIndicators(e.detail.counter)}}},"./src/components/monster.ts":(e,t,a)=>{a.r(t),a.d(t,{Monster:()=>n});var i=a("./src/common/index.ts"),s=a("./src/events/index.ts");class n extends s.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.game=e,this.monsterPhase=t,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.changeToIdleAnimation(),this.imagesLoaded=!0,a&&a()}))}update(e){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=e,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(e){this.image.src=e}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(e){e.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(e){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(e,t){if(Math.sqrt((e-this.x-this.width/4)*(e-this.x-this.width/4)+(t-this.y-this.height/2.2)*(t-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});var i=a("./src/components/buttons/index.ts"),s=a("./src/common/index.ts"),n=a("./src/components/index.ts"),x=a("./src/components/popups/sure-popup.ts"),o=a("./src/constants/index.ts");class r{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(e,t,a,r,c){this.canvas=e,this.callback=t,this.gameplayData=c,this.switchToLevelSelection=a,this.reloadScene=r;const _=document.getElementById("canvas");this.context=_.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.cancelButton=new i.CancelButton(this.context,this.canvas),this.retryButton=new i.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new i.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,s.loadImages)({pop_up_image:o.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new x.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new x.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(s.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const i=e.clientX-a.left,n=e.clientY-a.top;this.cancelButton.onClick(i,n)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(i,n)&&("english"==s.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(i,n)&&("english"==s.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==s.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==s.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(o.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(s.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var i=a("./src/common/index.ts"),s=a("./src/components/index.ts"),n=a("./src/components/buttons/index.ts"),x=a("./src/constants/index.ts");class o{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(e,t,a){this.canvas=e,this.yesCallback=t,this.noCallback=a,this.context=this.canvas.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.yesButton=new n.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new n.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,i.loadImages)({pop_up_image:x.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const i=e.clientX-a.left,s=e.clientY-a.top;this.yesButton.onClick(i,s)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(i,s)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(e,t,a)=>{a.r(t),a.d(t,{PromptText:()=>o});var i=a("./src/events/index.ts"),s=a("./src/common/index.ts"),n=a("./src/components/index.ts"),x=a("./src/constants/index.ts");class o extends i.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(e,t,a,i,x){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.levelData=i,this.rightToLeft=x,this.currentPromptText=a.prompt.promptText,this.currentPuzzleData=a,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const i=e.clientX-a.left,s=e.clientY-a.top;this.onClick(i,s)&&this.playSound()};getPromptAudioUrl=()=>s.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(s.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(e,t){return Math.sqrt(e-this.width/3)<12&&Math.sqrt(t-this.height/5.5)<10}setCurrrentPuzzleData(e){this.currentPuzzleData=e,this.currentPromptText=e.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var e=this.width/2;const t=.26*this.height;this.context.textAlign="center";var a=this.calculateFont();const i=this.promptImageWidth,n=this.promptImageHeight;if(this.context.font=`${a}px ${s.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var x=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],e+this.context.measureText(x).width/2,t),this.context.fillStyle="black",this.context.fillText(x,e-this.context.measureText(this.targetStones[0]).width/2,t)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,i/4,n/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){e-=.5*this.context.measureText(this.currentPromptText).width;for(let a=this.targetStones.length-1;a>=0;a--)this.droppedStones>a||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[a],e,t)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[a],e,t)),e=e+this.context.measureText(this.targetStones[a]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,i/4,n/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const e=1.25*(this.width-i),t=.33*(this.height-n);this.context.drawImage(this.promptPlayButton,e,t,i/4,n/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,e,t)):this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,i/4,n/4)}drawOthers(){const e=this.currentPromptText.split(""),t=(this.width,.28*this.height),a=this.promptImageWidth,i=this.promptImageHeight;var n=this.calculateFont();this.context.font=`${n}px ${s.font}, monospace`;let x=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var r=this.currentPuzzleData.targetStones[0].split("");for(let s=0;s<e.length;s++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){r.includes(e[s])?(r=r.slice(1,r.length),this.context.fillStyle="red",this.context.fillText(e[s],x,t)):(this.context.fillStyle="black",this.context.fillText(e[s],x,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,i/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>s||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(e[s],x,t)):(this.context.fillStyle="red",this.context.fillText(e[s],x,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,i/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,i/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,i/4)}o=(this.context.measureText(e[s]).width+this.context.measureText(e[s+1]).width)/2,x+=o}}draw(e){if(this.updateScaling(),this.time=e<17?this.time+Math.floor(e):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const e=this.promptImageWidth*this.scale,t=this.promptImageHeight*this.scale,a=(this.width-e)/2,i=(this.height-t)/5;this.context.drawImage(this.prompt_image,a,i,e,t),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[e.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(e){this.droppedStones=e}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const e=this.loadImage(this.prompt_image,x.PROMPT_TEXT_BG),t=this.loadImage(this.promptPlayButton,x.PROMPT_PLAY_BUTTON);await Promise.all([e,t]),this.imagesLoaded=!0}loadImage(e,t){return new Promise(((a,i)=>{e.onload=()=>{a()},e.src=t,e.onerror=e=>{i(e)}}))}}},"./src/components/stone-handler.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>r});var i=a("./src/common/index.ts"),s=a("./src/events/index.ts"),n=a("./src/components/index.ts"),x=a("./src/data/index.ts"),o=a("./src/constants/index.ts");class r extends s.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==x.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(e,t,a,s,x,r){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.puzzleNumber=a,this.levelData=s,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(o.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(x),this.puzzleStartTime=new Date,this.tutorial=new n.Tutorial(e,t.width,t.height,a),this.stonebg=new Image,this.stonebg.src=o.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new n.AudioPlayer,this.stonebg.onload=e=>{this.createStones(this.stonebg)},this.audioPlayer=new n.AudioPlayer,this.timerTickingInstance=r,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(e){const t=this.getFoilStones();for(let a=0;a<t.length;a++)t[a]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[a]),this.foilStones.push(new i.StoneConfig(this.context,this.canvas.width,this.canvas.height,t[a],this.stonePos[a][0],this.stonePos[a][1],e,this.timerTickingInstance,a==t.length-1?this.tutorial:null))}draw(e){for(let t=0;t<this.foilStones.length;t++)this.foilStones[t].draw(e);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}initializeStonePos(){let e=32;this.stonePos=[[this.canvas.width/5-e,this.canvas.height/1.9-e],[this.canvas.width/2-e,this.canvas.height/1.15-e],[this.canvas.width/3.5+this.canvas.width/2-e,this.canvas.height/1.2-e],[this.canvas.width/4-e,this.canvas.height/1.28-e],[this.canvas.width/7-e,this.canvas.height/1.5-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.9-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.42-e],[this.canvas.width/6-e,this.canvas.height/1.1-e]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(e){this.currentPuzzleData=this.levelData.puzzles[e],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(e){this.foilStones=[]}handleLoadPuzzle(e){this.foilStones=[],this.tutorial.setPuzzleNumber(e.detail.counter),this.puzzleNumber=e.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(e,t,a=!1){const i=a?e==this.correctTargetStone.substring(0,e.length):e==this.correctTargetStone;return this.processLetterDropFeedbackAudio(t,i,a,e),i}processLetterDropFeedbackAudio(e,t,a,i){if(t){(a?i===this.getCorrectTargetStone():t)?this.playCorrectAnswerFeedbackSound(e):this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,(0,o.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,o.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?o.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((e=>{const t=this.currentPuzzleData.foilStones.indexOf(e);-1!==t&&this.currentPuzzleData.foilStones.splice(t,1)}));const e=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(e>8){const t=e-8;this.currentPuzzleData.foilStones.splice(0,t)}return this.currentPuzzleData.targetStones.forEach((e=>{this.currentPuzzleData.foilStones.push(e)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(e){return[e.fantastic,e.great,e.amazing]}setGamePause(e){this.isGamePaused=e}playCorrectAnswerFeedbackSound(e){const t=i.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,(0,o.AUDIO_PATH_CHEERING_FUNC)(t),o.AUDIO_PATH_POINTS_ADD,i.Utils.getConvertedDevProdURL(this.feedbackAudios[e])),this.correctStoneAudio.play()}}},"./src/components/timer-ticking.ts":(e,t,a)=>{a.r(t),a.d(t,{TimerTicking:()=>o});var i=a("./src/common/index.ts"),s=a("./src/events/index.ts"),n=a("./src/components/index.ts"),x=a("./src/constants/index.ts");class o extends s.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=a,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new n.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:x.TIMER_EMPTY,rotating_clock:x.ROTATING_CLOCK,timer_full:x.TIMER_FULL},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(e){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*e),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(x.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>i});class i{canvas;ctx;particles;mouse;constructor(e){this.canvas=e,this.ctx=e.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0}}init(){this.draw()}draw(){this.drawTrail();let e=[];for(let t=0;t<this.particles.length;t++)this.particles[t].time<=this.particles[t].ttl&&e.push(this.particles[t]);this.particles=e}drawTrail(){for(let e=0;e<this.particles.length;e++)this.particles[e].update(),this.particles[e].draw()}addTrailParticlesOnMove(e,t){this.mouse.x=e,this.mouse.y=t,this.particles.push(new s(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class s{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(e,t){this.ctx=e,this.rgb=["rgb(255,255,255,255)","rgb(243,208,144,255)","rgb(229,170,100,255)"],this.start={x:t.x+this.getRandomInt(-15,15),y:t.y+this.getRandomInt(-15,15),size:5.5},this.end={x:this.start.x+this.getRandomInt(-25,25),y:this.start.y+this.getRandomInt(-30,30)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=90,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}update(){if(this.time<=this.ttl){const e=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(e)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(){this.starParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(e,t){return Math.round(Math.random()*(t-e))+e}easeOutQuart(e){return 1-Math.pow(1-e,4)}}},"./src/components/tutorial.ts":(e,t,a)=>{a.r(t),a.d(t,{Tutorial:()=>x});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts"),n=a("./src/data/index.ts");class x{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(e,t,a,n){this.width=t,this.height=a,this.context=e,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=n>=0?n:null,this.tutorialImg=new Image,this.tutorialImg.src=s.TUTORIAL_HAND,this.drawRipple=(0,i.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(e){this.startx=e[0]-22,this.starty=e[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(e){this.endTutorial=e}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(e,t,a){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*e:this.x-this.absdx*e,this.y=this.dy>=0?this.y+this.absdy*e:this.y-this.absdy*e;const i=this.x-this.endx+this.absdx,s=this.y-this.endy+this.absdy;let n=100*Math.sqrt(i*i+s*s)/this.monsterStoneDifference;if(n<15)n>1?this.createHandScaleAnimation(e,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(n>80)this.createHandScaleAnimation(e,this.startx+15,this.starty+10,!1);else{let e=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(t,this.x,this.y+20,a,a),this.context.globalAlpha=e,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(e,t,a,i){this.totalTime+=Math.floor(e);const s=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),n=this.tutorialImg.width*s,x=this.tutorialImg.height*s;this.context.drawImage(this.tutorialImg,t,a,n,x),!i&&this.drawRipple(t+.02*this.width,a+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(e,t,a,i){const s=(a-t)/2,n=Math.PI/i;return t+s*Math.sin(n*e)}clickOnMonsterTutorial(e){if(this.shouldPlayMonsterClickTutorialAnimation()){const t=2e3,a=this.height/1.9+this.tutorialImg.height/.8,i=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let s;const n=this.endx;this.totalTime<t/2?(s=i+this.totalTime/(t/2)*(a-i),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.5,!0)):(s=a-(this.totalTime-t/2)/(t/2)*(a-i),this.drawRipple(n,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,n,s,this.tutorialImg.width,this.tutorialImg.height),s<=i&&(this.totalTime=0),this.totalTime+=e}}shouldPlayTutorial(){return n.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return n.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(e){this.puzzleNumber=e}setPlayMonsterClickAnimation(e){this.playMnstrClkTtrlAnim=e}}},"./src/compositions/background.ts":(e,t,a)=>{a.r(t),a.d(t,{BACKGROUND_ASSET_LIST:()=>n,autumBgDrawing:()=>c,createBackground:()=>x,defaultBgDrawing:()=>r,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>o,winterBgDrawing:()=>_});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");const n={summer:{BG_GROUP_IMGS:s.DEFAULT_BG_GROUP_IMGS,draw:r},autumn:{BG_GROUP_IMGS:s.AUTUMN_BG_GROUP_IMGS,draw:c},winter:{BG_GROUP_IMGS:s.WINTER_BG_GROUP_IMGS,draw:_}};async function x(e,t,a,s,n){return{...{...n(e,t,a,{...await(0,i.syncLoadingImages)(s)})}}}const o=(e,t)=>{const a=Object.keys(t);let i=Math.floor(e/10)%a.length;return e>=30&&(i%=3),{...t[a[i]]}};function r(e,t,a,i){return{draw:()=>{e.drawImage(i?.DEFAULT_BACKGROUND_1,0,0,t,a),e.drawImage(i?.ASSETS_PATH_TOTEM,.6*t,a/6,t,a/2),e.drawImage(i?.ASSETS_PATH_FENCE,.4*-t,a/3,t,a/3),e.drawImage(i?.ASSETS_PATH_HILL,.25*-t,a/2,1.5*t,a/2)}}}function c(e,t,a,i){return{draw:()=>{e.drawImage(i.AUTUMN_BACKGROUND_1,0,0,t,a),e.drawImage(i.AUTUMN_PILLAR_1,.38*t,a/6,t/1.2,a/2),e.drawImage(i.AUTUMN_FENCE_1,.4*-t,a/4,t,a/2),e.drawImage(i.AUTUMN_HILL_1,.25*-t,a/2,1.5*t,a/2)}}}function _(e,t,a,i){return{draw:()=>{e.drawImage(i.WINTER_BACKGROUND_1,0,0,t,a),e.drawImage(i.WINTER_PILLAR_1,.38*t,a/6,t/1.2,a/2),e.drawImage(i.WINTER_FENCE_1,.4*-t,a/4,t,a/2),e.drawImage(i.WINTER_HILL_1,.25*-t,a/2,1.5*t,a/2)}}}function d(e,t,a,i){return{draw:()=>{e.drawImage(i?.LEVEL_SELECTION_BACKGROUND,0,0,t,a)}}}},"./src/compositions/index.ts":(e,t,a)=>{a.r(t),a.d(t,{BACKGROUND_ASSET_LIST:()=>i.BACKGROUND_ASSET_LIST,autumBgDrawing:()=>i.autumBgDrawing,createBackground:()=>i.createBackground,createLevelObject:()=>s.createLevelObject,defaultBgDrawing:()=>i.defaultBgDrawing,getdefaultCloudBtnsPos:()=>s.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>i.levelSelectBgDrawing,loadDynamicBgAssets:()=>i.loadDynamicBgAssets,loadLevelImages:()=>s.loadLevelImages,winterBgDrawing:()=>i.winterBgDrawing});var i=a("./src/compositions/background.ts"),s=a("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(e,t,a)=>{a.r(t),a.d(t,{createLevelObject:()=>r,getdefaultCloudBtnsPos:()=>x,loadLevelImages:()=>o});var i=a("./src/constants/index.ts"),s=a("./src/common/index.ts");const n=e=>i.SPECIAL_LEVELS.includes(e),x=e=>[[[e.width/10,e.height/10],[e.width/2.5,e.height/10],[e.width/3+e.width/2.8,e.height/10],[e.width/10,e.height/3],[e.width/2.5,e.height/3],[e.width/3+e.width/2.8,e.height/3],[e.width/10,e.height/1.8],[e.width/2.5,e.height/1.8],[e.width/3+e.width/2.8,e.height/1.8],[e.width/2.5,e.height/1.3]]],o=()=>(0,s.syncLoadingImages)({balloonImg:i.MAP_ICON_IMG,specialBloonImg:i.MAP_ICON_SPECIAL_IMG,lockImg:i.MAP_LOCK_IMG,starImg:i.STAR_IMG});async function r(e,t,a,i){const s=n(a);return{...{x:e,y:t,index:a,isSpecial:s,...i,balloonImg:s?i?.specialBloonImg:i?.balloonImg}}}},"./src/constants/index.ts":(e,t,a)=>{a.r(t),a.d(t,{ASSETS_PATH_BG_01:()=>W,ASSETS_PATH_FENCE:()=>X,ASSETS_PATH_HILL:()=>V,ASSETS_PATH_MONSTER_IDLE:()=>Y,ASSETS_PATH_STONE_PINK_BG:()=>H,ASSETS_PATH_TOTEM:()=>G,AUDIO_ARE_YOU_SURE:()=>M,AUDIO_INTRO:()=>j,AUDIO_LEVEL_LOSE:()=>R,AUDIO_LEVEL_WIN:()=>F,AUDIO_PATH_BTN_CLICK:()=>N,AUDIO_PATH_CHEERING_FUNC:()=>O,AUDIO_PATH_CORRECT_STONE:()=>D,AUDIO_PATH_EATS:()=>A,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>L,AUDIO_PATH_MONSTER_SPIT:()=>P,AUDIO_PATH_ON_DRAG:()=>B,AUDIO_PATH_POINTS_ADD:()=>k,AUDIO_TIMEOUT:()=>z,AUDIO_URL_PRELOAD:()=>U,AUTUMN_BACKGROUND_1:()=>K,AUTUMN_BG_GROUP_IMGS:()=>ze,AUTUMN_FENCE_1:()=>Q,AUTUMN_HILL_1:()=>q,AUTUMN_PILLAR_1:()=>J,AUTUMN_SIGN_1:()=>Z,BACK_BTN_IMG:()=>Le,BAR_EMPTY:()=>ce,BAR_FULL:()=>_e,ButtonClick:()=>u,CANCEL_BTN_IMG:()=>De,CLOUD_6:()=>pe,CLOUD_7:()=>ve,CLOUD_8:()=>we,DEFAULT_BACKGROUND_1:()=>$,DEFAULT_BG_GROUP_IMGS:()=>Me,DevelopmentServer:()=>w,EndScene1:()=>E,FONT_BASE_PATH:()=>T,FeedbackAudio:()=>h,FirebaseUserClicked:()=>i,FirebaseUserInstall:()=>s,GAMEPLAY_BG_GROUP_IMGS:()=>Be,GameScene1:()=>I,IntroMusic:()=>l,IsCached:()=>_,LEVEL_INDICATOR:()=>re,LEVEL_SELECTION_BACKGROUND:()=>ne,LevelEndAudio:()=>p,LevelSelection1:()=>y,MAP_BTN_IMG:()=>Ie,MAP_ICON_IMG:()=>Ee,MAP_ICON_SPECIAL_IMG:()=>Te,MAP_LOCK_IMG:()=>Ce,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>Pe,NativePlayButton:()=>o,PAUSE_BTN_IMG:()=>ye,PIN_STAR_1:()=>be,PIN_STAR_2:()=>ge,PIN_STAR_3:()=>me,PLAY_BTN_IMG:()=>Se,POPUP_BG_IMG:()=>Ne,PROMPT_PLAY_BUTTON:()=>oe,PROMPT_TEXT_BG:()=>xe,PWAInstallStatus:()=>n,PhraseAudio:()=>m,PreviousPlayedLevel:()=>r,PromptAudio:()=>f,RETRY_BTN_IMG:()=>ke,ROTATING_CLOCK:()=>he,SCENE_NAME_GAME_PLAY:()=>Ue,SCENE_NAME_LEVEL_END:()=>He,SCENE_NAME_LEVEL_SELECT:()=>Fe,SCENE_NAME_START:()=>Re,SPECIAL_LEVELS:()=>Ge,STAR_IMG:()=>Ae,StartScene1:()=>S,StoneMusic:()=>g,StoreMonsterPhaseNumber:()=>c,TIMER_EMPTY:()=>de,TIMER_FULL:()=>le,TUTORIAL_HAND:()=>fe,TimeOver:()=>b,UrlSubstring:()=>v,UserCancelled:()=>x,WINTER_BACKGROUND_1:()=>ee,WINTER_BG_GROUP_IMGS:()=>je,WINTER_FENCE_1:()=>ie,WINTER_HILL_1:()=>te,WINTER_PILLAR_1:()=>se,WINTER_SIGN_1:()=>ae,WIN_BG:()=>ue,YES_BTN_IMG:()=>Oe,feedbackTextDefault:()=>C});const i="user_clicked",s="user_installed",n="pwa_installed_status",x="user_cancel_installation",o="native_playbutton_clicked",r="storePreviousPlayedLevel",c="storeMonsterPhaseNumber",_="is_cached",d="monster_audio",h="feedback_audio",l="intro_music",f="prompt_audio",u="button_click",b="time_over",g="stone_music",m="phrase_audio",p="level_end_audio",v="/feedthemonster",w="https://feedthemonsterdev.curiouscontent.org",S="StartScene1",y="LevelSelection1",I="GameScene1",E="EndScene1",T="./assets/fonts/",C="Atma-SemiBold",A="./assets/audios/Eat.mp3",P="./assets/audios/MonsterSpit.mp3",L="./assets/audios/Disapointed-05.mp3",k="assets/audios/PointsAdd.wav",D="assets/audios/CorrectStoneFinal.mp3",O=e=>`./assets/audios/Cheering-0${e}.mp3`,N="./assets/audios/ButtonClick.mp3",B="./assets/audios/onDrag.mp3",M="./assets/audios/are-you-sure.mp3",z="./assets/audios/timeout.mp3",j="./assets/audios/intro.mp3",R="./assets/audios/LevelLoseFanfare.mp3",F="./assets/audios/LevelWinFanfare.mp3",U=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],H="./assets/images/stone_pink.webp",G="./assets/images/Totem_v02_v01.webp",W="./assets/images/bg_v01.webp",V="./assets/images/hill_v01.webp",X="./assets/images/fence_v01.webp",Y="./assets/images/idle4.png",$="./assets/images/bg_v01.webp",K="./assets/images/Autumn_bg_v01.webp",q="./assets/images/Autumn_hill_v01.webp",J="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_sign_v01.webp",Q="./assets/images/Autumn_fence_v01.webp",ee="./assets/images/Winter_bg_01.webp",te="./assets/images/Winter_hill_v01.webp",ae="./assets/images/Winter_sign_v01.webp",ie="./assets/images/Winter_fence_v01.webp",se="./assets/images/Winter_sign_v01.webp",ne="./assets/images/map.webp",xe="./assets/images/promptTextBg.webp",oe="./assets/images/promptPlayButton.webp",re="./assets/images/levels_v01.webp",ce="./assets/images/bar_empty_v01.webp",_e="./assets/images/bar_full_v01.webp",de="./assets/images/timer_empty.webp",he="./assets/images/timer.webp",le="./assets/images/timer_full.png",fe="./assets/images/tutorial_hand.webp",ue="./assets/images/WIN_screen_bg.webp",be="./assets/images/pinStar1.webp",ge="./assets/images/pinStar2.webp",me="./assets/images/pinStar3.webp",pe="./assets/images/cloud_01.png",ve="./assets/images/cloud_02.png",we="./assets/images/cloud_03.png",Se="./assets/images/Play_button.webp",ye="./assets/images/pause_v01.webp",Ie="./assets/images/map_btn.webp",Ee="./assets/images/mapIcon.webp",Te="./assets/images/map_icon_monster_level_v01.webp",Ce="./assets/images/mapLock.webp",Ae="./assets/images/star.webp",Pe="./assets/images/next_btn.webp",Le="./assets/images/back_btn.webp",ke="./assets/images/retry_btn.webp",De="./assets/images/close_btn.webp",Oe="./assets/images/confirm_btn.webp",Ne="./assets/images/popup_bg_v01.webp",Be={ASSETS_PATH_TOTEM:G,DEFAULT_BACKGROUND_1:$,ASSETS_PATH_HILL:V,ASSETS_PATH_FENCE:X,ASSETS_PATH_MONSTER_IDLE:Y},Me={DEFAULT_BACKGROUND_1:$,ASSETS_PATH_HILL:V,ASSETS_PATH_TOTEM:G,ASSETS_PATH_FENCE:X},ze={AUTUMN_BACKGROUND_1:K,AUTUMN_HILL_1:q,AUTUMN_PILLAR_1:J,AUTUMN_SIGN_1:Z,AUTUMN_FENCE_1:Q},je={WINTER_BACKGROUND_1:ee,WINTER_HILL_1:te,WINTER_SIGN_1:ae,WINTER_FENCE_1:ie,WINTER_PILLAR_1:se},Re="StartScene",Fe="LevelSelection",Ue="GamePlay",He="LevelEnd",Ge=[5,13,20,30,42]},"./src/data/api-data.ts":(e,t,a)=>{a.r(t),a.d(t,{URL:()=>s,getData:()=>x,getFtmData:()=>n});var i=a("./src/common/index.ts");const s="./lang/"+i.lang+"/ftm_"+i.lang+".json";function n(){return fetch(s,{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json().then((e=>e))))}async function x(){return await n()}},"./src/data/data-modal.ts":(e,t,a)=>{a.r(t),a.d(t,{DataModal:()=>i,FeedbackAudios:()=>x,FeedbackTexts:()=>n,FoilStone:()=>c,LevelMeta:()=>h,Levels:()=>o,OtherAudios:()=>s,Prompt:()=>d,Puzzles:()=>r,TargetStone:()=>_});class i{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(e,t,a,i,o,r,c,_,d){this.title=e,this.otherAudios=new s(t),this.levels=this.getLevels(a),this.FeedbackTexts=new n(i),this.FeedbackAudios=new x(r),this.rightToLeft=o,this.majVersion=c,this.minVersion=_,this.version=d}getLevels(e){let t=[];for(let a=0;a<e.length;a++)t.push(new o(e[a]));return t}}class s{selctYourPlayer;watchMeGrow;areYouSure;constructor(e){this.selctYourPlayer=e["Select your player"],this.watchMeGrow=e["Watch me grow"],this.areYouSure=e["Are you sure"]}}class n{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class x{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class o{puzzles;levelMeta;levelNumber;constructor(e){this.puzzles=this.getPuzzleData(e),this.levelMeta=new h(e.LevelMeta),this.levelNumber=e.LevelNumber}getPuzzleData(e){let t=[];return e.Puzzles.map(((e,a)=>{t.push(new r(e))})),t}}class r{segmentNumber;prompt;foilStones;targetStones;constructor(e){this.segmentNumber=e.SegmentNumber,this.prompt=new d(e.prompt),this.foilStones=this.getFoilStones(e),this.targetStones=this.getTargetStones(e)}getFoilStones(e){let t=[];return e.foilstones.map(((e,a)=>{t.push(e.StoneText)})),t}getTargetStones(e){let t=[];return e.targetstones.map(((e,a)=>{t.push(e.StoneText)})),t}}class c{stoneText;constructor(e){this.stoneText=e}}class _{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(e){this.promptText=e.PromptText,this.promptAudio=e.PromptAudio}}class h{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(e){this.promptFadeOut=e.PromptFadeout,this.letterGroup=e.LetterGroup,this.levelNumber=e.LevelNumber,this.protoType=e.PromptType,this.levelType=e.LevelType}}},"./src/data/feedback-fonts.ts":(e,t,a)=>{a.r(t),a.d(t,{feedbackCustomFonts:()=>i});const i={}},"./src/data/game-score.ts":(e,t,a)=>{a.r(t),a.d(t,{GameScore:()=>s});var i=a("./src/common/index.ts");class s{static currentlanguage=i.lang;static setGameLevelScore(e,t){let a=this.calculateStarCount(t),i={levelName:e.levelMeta.levelType,levelNumber:e.levelMeta.levelNumber,score:t,starCount:a};this.setTotalStarCount(a);let s=this.getAllGameLevelInfo(),n=-1;for(let e=0;e<s.length;e++)if(s[e].levelNumber===i.levelNumber){n=e;break}-1!==n&&i.score>s[n].score?s[n]=i:s.push(i),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(s))}static getAllGameLevelInfo(){const e=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==e?[]:JSON.parse(e)}static setTotalStarCount(e){let t=this.getTotalStarCount()+e;localStorage.setItem(this.currentlanguage+"totalStarCount",t)}static getTotalStarCount(){const e=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==e?0:parseInt(e)}static calculateStarCount(e){return 200==e?1:300==e||400==e?2:500==e?3:0}static getDatafromStorage(){return i.Debugger.DebugMode?JSON.parse(localStorage.getItem(i.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(i.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(e,t,a)=>{a.r(t),a.d(t,{languageFontMapping:()=>i});const i={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(e,t,a)=>{a.r(t),a.d(t,{DataModal:()=>s.DataModal,FeedbackAudios:()=>s.FeedbackAudios,FeedbackTexts:()=>s.FeedbackTexts,FoilStone:()=>s.FoilStone,GameScore:()=>n.GameScore,LevelMeta:()=>s.LevelMeta,Levels:()=>s.Levels,OtherAudios:()=>s.OtherAudios,Prompt:()=>s.Prompt,Puzzles:()=>s.Puzzles,TargetStone:()=>s.TargetStone,URL:()=>i.URL,feedbackCustomFonts:()=>o.feedbackCustomFonts,getData:()=>i.getData,getFtmData:()=>i.getFtmData,languageFontMapping:()=>x.languageFontMapping});var i=a("./src/data/api-data.ts"),s=a("./src/data/data-modal.ts"),n=a("./src/data/game-score.ts"),x=a("./src/data/i18-font-mapping.ts"),o=a("./src/data/feedback-fonts.ts")},"./src/events/index.ts":(e,t,a)=>{a.r(t),a.d(t,{EventManager:()=>s});var i=a("./src/common/index.ts");class s{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(e){this.handler=e,this.stoneDropCallbackHandler=e.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=e.loadPuzzleCallbackHandler,document.addEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=e=>{this.stoneDropCallbackHandler(e)};handleLoadPuzzleEvent=e=>{this.loadPuzzleCallbackHandler(e)};unregisterEventListener=()=>{document.removeEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/sceneHandler/index.ts":(e,t,a)=>{a.r(t),a.d(t,{SceneHandler:()=>o});var i=a("./src/scenes/index.ts"),s=a("./src/data/index.ts"),n=a("./src/common/index.ts"),x=a("./src/constants/index.ts");class o{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;constructor(e,t){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new i.StartScene(e,t,this.switchSceneToLevelSelection),o.SceneName=x.StartScene1,this.loadingScreen=new i.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const e=t=>{this.animation(t),requestAnimationFrame(e)};requestAnimationFrame(e)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(n.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(n.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let e=s.GameScore.getTotalStarCount(),t=Math.floor(e/12)+1||1;return t<=4?t:4}animation=e=>{let t=e-this.lastTime;this.lastTime=e,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(t),o.SceneName===x.StartScene1?this.startScene.animation(t):o.SceneName===x.LevelSelection1?this.levelSelectionScene.drawLevelSelection():o.SceneName===x.GameScene1?this.gameplayScene.draw(t):o.SceneName===x.EndScene1&&this.levelEndScene.draw(t)};switchSceneToGameplay=(e,t)=>{this.showLoading(),this.dispose(t);let a=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new i.GameplayScene(this.canvas,e.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,e.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(x.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,a,this.data.FeedbackAudios),o.SceneName=x.GameScene1}),800)};switchSceneToEndLevel=(e,t,a,s)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(x.SCENE_NAME_GAME_PLAY),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new i.LevelEndScene(this.canvas,this.height,this.width,this.context,e,a,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,t),o.SceneName=x.EndScene1}),s?0:4e3)};switchSceneToLevelSelection=e=>{this.showLoading(),this.dispose(e),setTimeout((()=>{this.levelSelectionScene=new i.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),o.SceneName=x.LevelSelection1}),800)};dispose=e=>{e==x.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():e===x.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():e===x.SCENE_NAME_START?this.startScene.dispose():e==x.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=e=>{e.preventDefault(),localStorage.setItem(x.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{GameplayScene:()=>_});var i=a("./src/components/index.ts"),s=a("./src/components/popups/pause-popup.ts"),n=a("./src/common/index.ts"),x=a("./src/data/index.ts"),o=a("./src/Firebase/firebase-integration.ts"),r=a("./src/constants/index.ts"),c=a("./src/compositions/index.ts");class _{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;constructor(e,t,a,x,c,_,d,h,l,f,u){this.width=e.width,this.height=e.height,this.rightToLeft=c,this.canvas=e,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new i.TrailEffect(e),this.monsterPhaseNumber=a||1,this.levelData=t,this.switchSceneToEnd=_,this.levelNumber=d,this.switchToLevelSelection=h,this.reloadScene=l,this.jsonVersionNumber=f,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new i.PauseButton(this.context,this.canvas),this.timerTicking=new i.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new i.StoneHandler(this.context,this.canvas,this.counter,this.levelData,u,this.timerTicking),this.tutorial=new i.Tutorial(this.context,e.width,e.height),this.promptText=new i.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new i.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new s.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:t,selectedLevelNumber:d}),this.firebaseIntegration=new o.FirebaseIntegration,this.feedbackTextEffects=new i.FeedbackTextEffects,this.audioPlayer=new i.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=t.puzzles,this.feedBackTexts=x,this.images={profileMonster:r.ASSETS_PATH_MONSTER_IDLE},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}));var b=this.levelData.levelMeta.levelNumber;n.Debugger.DebugMode?localStorage.setItem(r.PreviousPlayedLevel+n.lang+"Debug",b):localStorage.setItem(r.PreviousPlayedLevel+n.lang,b),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,c.loadDynamicBgAssets)(this.levelData.levelNumber,c.BACKGROUND_ASSET_LIST);this.background=await(0,c.createBackground)(this.context,this.width,this.height,e,t)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(e){const t=Object.keys(this.feedBackTexts)[e];return this.feedBackTexts[t]}getRandomInt(e,t){const a=Object.values(this.feedBackTexts).filter((e=>null!=e)).length-1;return Math.floor(Math.random()*(a-e+1))+e}handleMouseUp=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,i=e.clientY-t.top;if(Math.sqrt((a-this.monster.x-this.canvas.width/4)**2+(i-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:e}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(e);break;case"Word":case"SoundWord":this.wordPuzzle(e,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const e=50,t=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<e&&this.pickedStoneObject.origx<t?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.clickTrailToggle=!1};handleMouseDown=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,i=e.clientY-t.top;for(let e of this.stoneHandler.foilStones){if(Math.sqrt((a-e.x)**2+(i-e.y)**2)<=40){this.pickedStoneObject=e,this.pickedStone=e,this.audioPlayer.playAudio(r.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};handleMouseMove=e=>{if(this.pickedStone){let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,i=e.clientY-t.top;this.monster.changeToDragAnimation(),this.pickedStone.x=a,this.pickedStone.y=i,this.trailParticles?.addTrailParticlesOnMove(a,i)}else this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleMouseClick=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,i=e.clientY-t.top;this.monster.onClick(a,i)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(a,i)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(a,i)&&this.promptText.playSound()};handleTouchStart=e=>{const t=e.touches[0];this.handleMouseDown({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=e=>{const t=e.touches[0];this.handleMouseMove({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.addTrailParticlesOnMove(t.clientX,t.clientY)};handleTouchEnd=e=>{const t=e.changedTouches[0];this.handleMouseUp({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};draw(e){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+e,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(e),this.monster.update(e),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(e),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(e),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(e)}addEventListeners(){this.handler.addEventListener(n.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(n.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(n.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(n.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(n.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(n.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(n.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=e=>{this.removeEventListeners(),this.stonesCount=1;const t=Boolean(e);if(t&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),x.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(x.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,t);else{const e=new CustomEvent(n.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(e)}),t?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};letterPuzzle(e){const t=this.getRandomInt(0,1),a=this.stoneHandler.isStoneLetterDropCorrect(e,t);a&&this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(a)}wordPuzzle(e,t){this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const a=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+e;const i=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,a,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&i)return this.handleCorrectStoneDrop(a),this.handleStoneDropEnd(i,"Word"),void(this.stonesCount=1);i?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==n.lang?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation()}),2e3)):(this.handleStoneDropEnd(i,"Word"),this.stonesCount=1)}resetToIdleAnimation(e,t){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(e,t)}handleStoneDropEnd(e,t=null){this.logPuzzleEndFirebaseEvent(e,t),this.dispatchStoneDropEvent(e),this.loadPuzzle()}handleCorrectStoneDrop=e=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(e))};dispatchStoneDropEvent(e){const t=new CustomEvent(n.STONEDROP,{detail:{isCorrect:e}});document.dispatchEvent(t)}initNewPuzzle(e){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,document.dispatchEvent(e),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(e,t){let a=Date.now();const i={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:e?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==t?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(a-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let e=Date.now();const t={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:x.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(e-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(t)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(e,t,a)=>{a.r(t),a.d(t,{GameplayScene:()=>i.GameplayScene,LevelEndScene:()=>n.LevelEndScene,LevelSelectionScreen:()=>s.LevelSelectionScreen,LoadingScene:()=>x.LoadingScene,StartScene:()=>o.StartScene,TestGameplayScene:()=>r.TestGameplayScene});var i=a("./src/scenes/gameplay-scene.ts"),s=a("./src/scenes/level-selection-scene.ts"),n=a("./src/scenes/levelend-scene.ts"),x=a("./src/scenes/loading-scene.ts"),o=a("./src/scenes/start-scene.ts"),r=a("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{LevelSelectionScreen:()=>_});var i=a("./src/common/index.ts"),s=a("./src/components/index.ts"),n=a("./src/data/index.ts"),x=a("./src/Firebase/firebase-integration.ts"),o=a("./src/compositions/index.ts"),r=a("./src/constants/index.ts"),c=a("./src/components/buttons/index.ts");class _{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;constructor(e,t,a){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height;let o=this;this.callBack=a,this.levelsSectionCount=o.data.levels.length/10>Math.floor(o.data.levels.length/10)?Math.floor(o.data.levels.length/10)+1:Math.floor(o.data.levels.length/10),this.levels=[],this.firebaseIntegration=new x.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=n.GameScore.getAllGameLevelInfo(),this.audioPlayer=new s.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(i.Debugger.DebugMode?localStorage.getItem(r.PreviousPlayedLevel+i.lang+"Debug"):localStorage.getItem(r.PreviousPlayedLevel+i.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={nextbtn:r.NEXT_BTN_IMG,backbtn:r.BACK_BTN_IMG},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(r.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const e=await(0,n.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}setupBg=async()=>{this.background=await(0,o.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:r.LEVEL_SELECTION_BACKGROUND},o.levelSelectBgDrawing)};async createLevelButtons(){const e=await(0,o.loadLevelImages)(),t=(0,o.getdefaultCloudBtnsPos)(this.canvas)[0].map(((t,a)=>(0,o.createLevelObject)(t[0],t[1],a+1,e)));this.levels=await Promise.all(t),this.levelButtons=this.levels.map((e=>new c.LevelBloonButton(this.canvas,this.context,{...e})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(e){return e.touches||e.originalEvent.touches}handleTouchStart=e=>{const t=this.getTouches(e)[0];this.xDown=t.clientX,this.yDown=t.clientY};handleTouchMove=e=>{if(!this.xDown||!this.yDown)return;let t=e.touches[0].clientX,a=e.touches[0].clientY,i=this.xDown-t,s=this.yDown-a;Math.abs(i)>Math.abs(s)&&(i>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=e=>{e.preventDefault();let t=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-t.left,i=e.clientY-t.top,s=(e,t=1.3)=>a>=e&&a<e+this.canvas.height/10&&i>this.canvas.height/t&&i<this.canvas.height/t+this.canvas.height/10,n=s(.7*this.canvas.width),x=s(this.canvas.width/10);if(x||n){this.audioPlayer.playButtonClickSound();const e=this.levelSelectionPageIndex;n&&e!=10*this.levelsSectionCount-10?(this.levelSelectionPageIndex=e+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):x&&0!=e&&(this.levelSelectionPageIndex=e-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let e of this.levelButtons)e.onClick(a,i,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(e=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=e+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(e,t){e.levelData.index+this.levelSelectionPageIndex<=this.data.levels.length&&(this.checkUnlockedLevel(t),e.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,t,this.data.levels.length),i.Debugger.DebugMode&&this.context.fillText(this.data.levels[e.levelData.index+this.levelSelectionPageIndex-1].levelMeta.levelType,e.levelData.x+e.btnSize/3.5,e.levelData.y+e.btnSize/1.3))}draw(){for(let e of this.levelButtons)this.drawLevel(e,this.gameLevelData)}downButton(e){e!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=e?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(e){if(null!=e.length)for(let t of e)this.unlockLevelIndex<parseInt(t.levelNumber)&&t.starCount>=2&&(this.unlockLevelIndex=parseInt(t.levelNumber))}startGame(e){this.dispose(),this.audioPlayer.stopAllAudios();const t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.logSelectedLevelEvent(),this.callBack(t,"LevelSelection")}logSelectedLevelEvent(){const e={cr_user_id:i.pseudoId,ftm_language:i.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(e)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{LevelEndScene:()=>r});var i=a("./src/common/index.ts"),s=a("./src/components/index.ts"),n=a("./src/components/buttons/index.ts"),x=a("./src/compositions/index.ts"),o=a("./src/constants/index.ts");class r{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(e,t,a,x,r,c,_,d,h,l){this.canvas=e,this.height=t,this.width=a,this.context=x,this.monster=new s.Monster(this.canvas,l,this.switchToReactionAnimation),this.switchToGameplayCB=_,this.switchToLevelSelectionCB=d,this.data=h,this.starDrawnCount=0,this.closeButton=new n.CloseButton(x,e,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new n.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new n.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new s.AudioPlayer,this.starCount=r,this.currentLevel=c,this.images={backgroundImg:o.WIN_BG,star1Img:o.PIN_STAR_1,star2Img:o.PIN_STAR_2,star3Img:o.PIN_STAR_3,winBackgroundImg:o.DEFAULT_BACKGROUND_1},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new s.AudioPlayer,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,x.loadDynamicBgAssets)(this.currentLevel,x.BACKGROUND_ASSET_LIST);this.background=await(0,x.createBackground)(this.context,this.width,this.height,e,t)};switchToReactionAnimation=()=>{this.starCount<=1?((0,i.isDocumentVisible)()&&this.audioPlayer.playAudio(o.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,i.isDocumentVisible)()&&(this.audioPlayer.playAudio(o.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(o.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(e){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(e),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((e=>setTimeout((()=>{this.starDrawnCount=e.count}),e.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(i.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=e=>{var t=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-t.left,i=e.clientY-t.top;if(this.closeButton.onClick(a,i)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(a,i)){this.audioPlayer.playButtonClickSound();let e={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(e,"LevelEnd")}if(this.nextButton.onClick(a,i)&&this.starCount>=2){this.audioPlayer.playButtonClickSound();let e=Number(this.currentLevel)+1,t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.switchToGameplayCB(t,"LevelEnd")}};pauseAudios=()=>{(0,i.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(o.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((e=>clearTimeout(e))),document.getElementById("canvas").removeEventListener(i.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{LoadingScene:()=>n});var i=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class n{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(e,t,a){this.canvas=document.getElementById("loading"),this.canvas.height=t,this.canvas.width=e,this.height=t,this.width=e,this.removeLoading=a,this.context=this.canvas.getContext("2d"),this.images={cloud6:s.CLOUD_6,cloud7:s.CLOUD_7,cloud8:s.CLOUD_8},(0,i.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(e){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*e,this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{StartScene:()=>c});var i=a("./src/components/index.ts"),s=a("./src/components/buttons/index.ts"),n=a("./src/common/index.ts"),x=a("./src/Firebase/firebase-integration.ts"),o=a("./src/compositions/index.ts"),r=a("./src/constants/index.ts");class c{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background;audioPlayer;toggleBtn;pwa_install_status;constructor(e,t,a){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new i.Monster(this.canvas,4),this.switchSceneToLevelSelection=a,this.audioPlayer=new i.AudioPlayer,this.pwa_status=localStorage.getItem(r.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg()}setupBg=async()=>{this.background=await(0,o.createBackground)(this.context,this.width,this.height,r.DEFAULT_BG_GROUP_IMGS,o.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,n.toggleDebugMode)(this.toggleBtn)))};animation=e=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.context.font=`${this.titleFont}px ${n.font}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(e),this.playButton.draw()};createPlayButton(){this.playButton=new s.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(e){e.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=e=>{let t=this;const a=document.getElementById("canvas");e.preventDefault();var i=a.getBoundingClientRect();const s=e.clientX-i.left,o=e.clientY-i.top,{excludeX:c,excludeY:_}=n.Utils.getExcludedCoordinates(a,15);s<c&&o<_||(x.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",r.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),t.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data.title.length}handlerInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(r.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{TestGameplayScene:()=>r});var i=a("./src/constants/index.ts"),s=a("./src/components/index.ts"),n=a("./src/components/buttons/index.ts"),x=a("./src/common/index.ts");const o=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),localStorage.setItem(i.PWAInstallStatus,"false")}));class r{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(e,t,a,n){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new s.Monster(this.canvas,0),console.log(..._("2510688200_69_4_69_51_4",Date.now," ::: ",performance.now)),this.switchSceneToLevelSelection=n,this.stoneHandler=new s.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new s.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new s.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new s.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(i.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=a,this.animation(0),this.images={pillerImg:i.ASSETS_PATH_TOTEM,bgImg:i.DEFAULT_BACKGROUND_1,hillImg:i.ASSETS_PATH_HILL,fenchImg:i.ASSETS_PATH_FENCE,profileMonster:i.ASSETS_PATH_MONSTER_IDLE},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{o.addEventListener("click",(()=>(0,x.toggleDebugMode)(o)))};handleMouseUp=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const i=e.clientX-a.left,s=e.clientY-a.top;Math.sqrt((i-t.monster.x-t.canvas.width/4)*(i-t.monster.x-t.canvas.width/4)+(s-t.monster.y-t.canvas.height/2.7)*(s-t.monster.y-t.canvas.height/2.7))<=60||t.monster.changeToIdleAnimation(),t.pickedStone=null};handleMouseDown=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const i=e.clientX-a.left,s=e.clientY-a.top;for(let e of t.stoneHandler.foilStones)Math.sqrt((i-e.x)*(i-e.x)+(s-e.y)*(s-e.y))<=40&&(this.pickedStone=e)};handleMouseMove=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const i=e.clientX-a.left,s=e.clientY-a.top;t.pickedStone&&(t.monster.changeToDragAnimation(),t.pickedStone.x=i,t.pickedStone.y=s)};animation=e=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(e),this.promptText.draw(e),this.stoneHandler.draw(e),this.levelIndicator.draw(),this.timerTicking.update(e))};draw(){}createPlayButton=()=>{this.playButton=new n.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(e){var t=e.touches[0],a=new MouseEvent("mousedown",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1),this.handler.addEventListener("touchmove",(function(e){var t=e.touches[0],a=new MouseEvent("mousemove",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1),this.handler.addEventListener("touchend",(function(e){var t=e.changedTouches[0],a=new MouseEvent("mouseup",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1)};handleMouseClick=e=>{let t=this;const a=document.getElementById("canvas");e.preventDefault();var s=a.getBoundingClientRect();const n=e.clientX-s.left,x=e.clientY-s.top;t.playButton.onClick(n,x)&&(t.firebase_analytics&&t.firebase_analytics.logEvent(i.FirebaseUserClicked,"click"),fbq("trackCustom",i.FirebaseUserClicked,{event:"click"}),o.style.display="none",t.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}function c(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x277122=_0xc5ab;function _0x16b5(){var _0xa1823c=['_hasSetOnItsPath','_connecting','autoExpandLimit','sortProps','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','_treeNodePropertiesBeforeFullValue','getPrototypeOf','replace','pathToFileURL','unshift','date','_additionalMetadata','default','stringify','process','setter','_isSet','now','[object\\x20Set]','autoExpandPropertyCount','elements','stackTraceLimit','18372740bHyhYr','toLowerCase','_setNodeLabel','_dateToString','edge','_propertyName','63361icYNzh','array','_connected','index','Number','concat','expId','WebSocket','getOwnPropertyDescriptor','_numberRegExp','current','negativeInfinity','match','next.js','map','HTMLAllCollection','_getOwnPropertyDescriptor','toString',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'parse','autoExpand','props','webpack','positiveInfinity','join','disabledLog','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','Buffer','_socket','name','null','_setNodeExpandableState','method','root_exp','60591','[object\\x20BigInt]','undefined','nodeModules','_sendErrorMessage','depth','global','_addProperty','defineProperty','nan','_blacklistedProperty','\\x20browser','3606463hpwOgk','test','_allowedToSend','send','some','object','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','_HTMLAllCollection','unknown','split','indexOf','Map','_getOwnPropertyNames','_setNodePermissions','1726146029714','_isMap','_isUndefined','Symbol','_property','RegExp','astro','_ws','3123JAjneK','get','totalStrLength','[object\\x20Map]','_connectAttemptCount','host','[object\\x20Array]','Boolean','_getOwnPropertySymbols','sort','root_exp_id','unref','reload','','3ABiXMk','\\x20server','error','gateway.docker.internal','bigint','_console_ninja','negativeZero','getOwnPropertySymbols','cappedProps','string','hostname','_objectToString','_setNodeExpressionPath','resolveGetters','_setNodeId','_reconnectTimeout','Set','console','onmessage','endsWith','_Symbol','_undefined','_inBrowser','timeStamp','127.0.0.1','getOwnPropertyNames','_addFunctionsNode','elapsed','enumerable','isExpressionToEvaluate','node','function','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','data','https://tinyurl.com/37x8b79t','_allowedToConnectOnSend','_addObjectProperty','noFunctions','startsWith','_isNegativeZero','reduceLimits','3574804wGdXXu','bind','log','substr','_isPrimitiveWrapperType','_isPrimitiveType','create','_treeNodePropertiesAfterFullValue','_connectToHostNow','_keyStrRegExp','1.0.0','performance','getWebSocketClass','message','prototype','constructor','38408OqGOST','then','ws://','18FXuSSO','stack','port','angular','_consoleNinjaAllowedToStart','5141040bNQfuK','number','','_console_ninja_session','warn','boolean','location','_isArray','allStrLength','_attemptToReconnectShortly','slice','versions','origin','perf_hooks','strLength','length','_p_name','onopen','eventReceivedCallback','autoExpandMaxDepth','_regExpToString','count','getter','set','String','capped','forEach','hasOwnProperty','ws/index.js','path','parent','_processTreeNodeResult','dockerizedApp','_p_','NEGATIVE_INFINITY','logger\\x20websocket\\x20error','1','charAt','...','trace','_maxConnectAttemptCount','value','onerror','args','_hasSymbolPropertyOnItsPath','_inNextEdge','hits','_WebSocketClass','_capIfString','_sortProps','time','onclose','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','level','_webSocketErrorDocsLink',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.357\\\\node_modules\",'pop','env','valueOf','fromCharCode','_setNodeQueryPath','type','cappedElements','symbol','push','call','rootExpression','close','6452480sIuOir','hrtime','expressionsToEvaluate','serialize','readyState','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','autoExpandPreviousObjects','toUpperCase','_disposeWebsocket','_WebSocket','__es'+'Module','catch','_cleanNode','_type','NEXT_RUNTIME'];_0x16b5=function(){return _0xa1823c;};return _0x16b5();}(function(_0x3042d2,_0x53ea59){var _0x46f915=_0xc5ab,_0x23aa03=_0x3042d2();while(!![]){try{var _0x5b63f1=parseInt(_0x46f915(0x182))/0x1+parseInt(_0x46f915(0x1fd))/0x2*(parseInt(_0x46f915(0x1d4))/0x3)+-parseInt(_0x46f915(0x215))/0x4+-parseInt(_0x46f915(0x157))/0x5+-parseInt(_0x46f915(0x210))/0x6*(-parseInt(_0x46f915(0x1b0))/0x7)+-parseInt(_0x46f915(0x20d))/0x8*(parseInt(_0x46f915(0x1c6))/0x9)+parseInt(_0x46f915(0x17c))/0xa;if(_0x5b63f1===_0x53ea59)break;else _0x23aa03['push'](_0x23aa03['shift']());}catch(_0xcd60bd){_0x23aa03['push'](_0x23aa03['shift']());}}}(_0x16b5,0xf22d9));var K=Object[_0x277122(0x203)],Q=Object[_0x277122(0x1ac)],G=Object[_0x277122(0x18a)],ee=Object[_0x277122(0x1ed)],te=Object[_0x277122(0x16c)],ne=Object[_0x277122(0x20b)][_0x277122(0x12e)],re=(_0x371906,_0x55a3e2,_0x3af47c,_0x165ef5)=>{var _0x575e23=_0x277122;if(_0x55a3e2&&typeof _0x55a3e2==_0x575e23(0x1b5)||typeof _0x55a3e2=='function'){for(let _0x27bee9 of ee(_0x55a3e2))!ne[_0x575e23(0x154)](_0x371906,_0x27bee9)&&_0x27bee9!==_0x3af47c&&Q(_0x371906,_0x27bee9,{'get':()=>_0x55a3e2[_0x27bee9],'enumerable':!(_0x165ef5=G(_0x55a3e2,_0x27bee9))||_0x165ef5[_0x575e23(0x1f0)]});}return _0x371906;},V=(_0x169a06,_0x165248,_0x5c1060)=>(_0x5c1060=_0x169a06!=null?K(te(_0x169a06)):{},re(_0x165248||!_0x169a06||!_0x169a06[_0x277122(0x161)]?Q(_0x5c1060,_0x277122(0x172),{'value':_0x169a06,'enumerable':!0x0}):_0x5c1060,_0x169a06)),x=class{constructor(_0xba3f07,_0xbb405a,_0x4c765b,_0x167a4f,_0x38af46,_0x2c79b5){var _0x3fa3fb=_0x277122,_0x8aa9f5,_0x290311,_0x176214,_0xf92787;this[_0x3fa3fb(0x1aa)]=_0xba3f07,this[_0x3fa3fb(0x1cb)]=_0xbb405a,this[_0x3fa3fb(0x212)]=_0x4c765b,this[_0x3fa3fb(0x1a7)]=_0x167a4f,this[_0x3fa3fb(0x133)]=_0x38af46,this[_0x3fa3fb(0x125)]=_0x2c79b5,this[_0x3fa3fb(0x1b2)]=!0x0,this['_allowedToConnectOnSend']=!0x0,this[_0x3fa3fb(0x184)]=!0x1,this[_0x3fa3fb(0x167)]=!0x1,this['_inNextEdge']=((_0x290311=(_0x8aa9f5=_0xba3f07['process'])==null?void 0x0:_0x8aa9f5[_0x3fa3fb(0x14c)])==null?void 0x0:_0x290311[_0x3fa3fb(0x165)])===_0x3fa3fb(0x180),this[_0x3fa3fb(0x1ea)]=!((_0xf92787=(_0x176214=this[_0x3fa3fb(0x1aa)][_0x3fa3fb(0x174)])==null?void 0x0:_0x176214[_0x3fa3fb(0x220)])!=null&&_0xf92787[_0x3fa3fb(0x1f2)])&&!this[_0x3fa3fb(0x140)],this[_0x3fa3fb(0x142)]=null,this[_0x3fa3fb(0x1ca)]=0x0,this[_0x3fa3fb(0x13b)]=0x14,this[_0x3fa3fb(0x149)]=_0x3fa3fb(0x1f6),this['_sendErrorMessage']=(this[_0x3fa3fb(0x1ea)]?'Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20':_0x3fa3fb(0x15c))+this[_0x3fa3fb(0x149)];}async['getWebSocketClass'](){var _0x166d81=_0x277122,_0x4a3567,_0x31201e;if(this['_WebSocketClass'])return this[_0x166d81(0x142)];let _0x15eef9;if(this[_0x166d81(0x1ea)]||this[_0x166d81(0x140)])_0x15eef9=this['global'][_0x166d81(0x189)];else{if((_0x4a3567=this[_0x166d81(0x1aa)][_0x166d81(0x174)])!=null&&_0x4a3567[_0x166d81(0x160)])_0x15eef9=(_0x31201e=this[_0x166d81(0x1aa)][_0x166d81(0x174)])==null?void 0x0:_0x31201e[_0x166d81(0x160)];else try{let _0x4e48a3=await import(_0x166d81(0x130));_0x15eef9=(await import((await import('url'))[_0x166d81(0x16e)](_0x4e48a3[_0x166d81(0x19a)](this['nodeModules'],_0x166d81(0x12f)))['toString']()))[_0x166d81(0x172)];}catch{try{_0x15eef9=require(require(_0x166d81(0x130))[_0x166d81(0x19a)](this[_0x166d81(0x1a7)],'ws'));}catch{throw new Error(_0x166d81(0x147));}}}return this[_0x166d81(0x142)]=_0x15eef9,_0x15eef9;}[_0x277122(0x205)](){var _0x51dc96=_0x277122;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this[_0x51dc96(0x13b)]||(this[_0x51dc96(0x1f7)]=!0x1,this[_0x51dc96(0x167)]=!0x0,this[_0x51dc96(0x1ca)]++,this[_0x51dc96(0x1c5)]=new Promise((_0x58c90f,_0x112630)=>{var _0x4c12d5=_0x51dc96;this[_0x4c12d5(0x209)]()[_0x4c12d5(0x20e)](_0x40518d=>{var _0x1b75d4=_0x4c12d5;let _0x49f47e=new _0x40518d(_0x1b75d4(0x20f)+(!this[_0x1b75d4(0x1ea)]&&this[_0x1b75d4(0x133)]?_0x1b75d4(0x1d7):this[_0x1b75d4(0x1cb)])+':'+this[_0x1b75d4(0x212)]);_0x49f47e[_0x1b75d4(0x13d)]=()=>{var _0x4ba6ce=_0x1b75d4;this[_0x4ba6ce(0x1b2)]=!0x1,this[_0x4ba6ce(0x15f)](_0x49f47e),this[_0x4ba6ce(0x21e)](),_0x112630(new Error(_0x4ba6ce(0x136)));},_0x49f47e[_0x1b75d4(0x124)]=()=>{var _0x8fc509=_0x1b75d4;this[_0x8fc509(0x1ea)]||_0x49f47e['_socket']&&_0x49f47e[_0x8fc509(0x19e)][_0x8fc509(0x1d1)]&&_0x49f47e[_0x8fc509(0x19e)][_0x8fc509(0x1d1)](),_0x58c90f(_0x49f47e);},_0x49f47e['onclose']=()=>{var _0x163a4c=_0x1b75d4;this[_0x163a4c(0x1f7)]=!0x0,this[_0x163a4c(0x15f)](_0x49f47e),this[_0x163a4c(0x21e)]();},_0x49f47e[_0x1b75d4(0x1e6)]=_0x36072=>{var _0x53acf1=_0x1b75d4;try{if(!(_0x36072!=null&&_0x36072[_0x53acf1(0x1f5)])||!this[_0x53acf1(0x125)])return;let _0x23adf4=JSON[_0x53acf1(0x195)](_0x36072['data']);this[_0x53acf1(0x125)](_0x23adf4[_0x53acf1(0x1a2)],_0x23adf4['args'],this[_0x53acf1(0x1aa)],this[_0x53acf1(0x1ea)]);}catch{}};})[_0x4c12d5(0x20e)](_0x261db6=>(this[_0x4c12d5(0x184)]=!0x0,this['_connecting']=!0x1,this['_allowedToConnectOnSend']=!0x1,this['_allowedToSend']=!0x0,this['_connectAttemptCount']=0x0,_0x261db6))[_0x4c12d5(0x162)](_0xd17c7c=>(this[_0x4c12d5(0x184)]=!0x1,this['_connecting']=!0x1,console['warn'](_0x4c12d5(0x1f4)+this[_0x4c12d5(0x149)]),_0x112630(new Error('failed\\x20to\\x20connect\\x20to\\x20host:\\x20'+(_0xd17c7c&&_0xd17c7c[_0x4c12d5(0x20a)])))));}));}[_0x277122(0x15f)](_0x2d53d4){var _0x112345=_0x277122;this[_0x112345(0x184)]=!0x1,this[_0x112345(0x167)]=!0x1;try{_0x2d53d4[_0x112345(0x146)]=null,_0x2d53d4[_0x112345(0x13d)]=null,_0x2d53d4[_0x112345(0x124)]=null;}catch{}try{_0x2d53d4[_0x112345(0x15b)]<0x2&&_0x2d53d4[_0x112345(0x156)]();}catch{}}['_attemptToReconnectShortly'](){var _0x5da88c=_0x277122;clearTimeout(this[_0x5da88c(0x1e3)]),!(this[_0x5da88c(0x1ca)]>=this[_0x5da88c(0x13b)])&&(this[_0x5da88c(0x1e3)]=setTimeout(()=>{var _0x3b3ae8=_0x5da88c,_0x36cd16;this[_0x3b3ae8(0x184)]||this[_0x3b3ae8(0x167)]||(this['_connectToHostNow'](),(_0x36cd16=this['_ws'])==null||_0x36cd16[_0x3b3ae8(0x162)](()=>this[_0x3b3ae8(0x21e)]()));},0x1f4),this[_0x5da88c(0x1e3)][_0x5da88c(0x1d1)]&&this['_reconnectTimeout'][_0x5da88c(0x1d1)]());}async[_0x277122(0x1b3)](_0x441b31){var _0x3de3cf=_0x277122;try{if(!this[_0x3de3cf(0x1b2)])return;this[_0x3de3cf(0x1f7)]&&this['_connectToHostNow'](),(await this[_0x3de3cf(0x1c5)])[_0x3de3cf(0x1b3)](JSON[_0x3de3cf(0x173)](_0x441b31));}catch(_0x5a238c){console[_0x3de3cf(0x219)](this[_0x3de3cf(0x1a8)]+':\\x20'+(_0x5a238c&&_0x5a238c[_0x3de3cf(0x20a)])),this[_0x3de3cf(0x1b2)]=!0x1,this[_0x3de3cf(0x21e)]();}}};function q(_0x436ba9,_0x141603,_0x5dc200,_0x26756b,_0x1ff14a,_0x6a31ab,_0x390747,_0x39e67e=ie){var _0x4f2c74=_0x277122;let _0x2776b7=_0x5dc200[_0x4f2c74(0x1b9)](',')[_0x4f2c74(0x190)](_0x4893f9=>{var _0x262543=_0x4f2c74,_0x5cc178,_0x5c0c95,_0x273a6c,_0x11f45d;try{if(!_0x436ba9[_0x262543(0x218)]){let _0x5497ef=((_0x5c0c95=(_0x5cc178=_0x436ba9[_0x262543(0x174)])==null?void 0x0:_0x5cc178[_0x262543(0x220)])==null?void 0x0:_0x5c0c95[_0x262543(0x1f2)])||((_0x11f45d=(_0x273a6c=_0x436ba9['process'])==null?void 0x0:_0x273a6c['env'])==null?void 0x0:_0x11f45d[_0x262543(0x165)])===_0x262543(0x180);(_0x1ff14a==='next.js'||_0x1ff14a==='remix'||_0x1ff14a===_0x262543(0x1c4)||_0x1ff14a===_0x262543(0x213))&&(_0x1ff14a+=_0x5497ef?_0x262543(0x1d5):_0x262543(0x1af)),_0x436ba9[_0x262543(0x218)]={'id':+new Date(),'tool':_0x1ff14a},_0x390747&&_0x1ff14a&&!_0x5497ef&&console[_0x262543(0x1ff)](_0x262543(0x19c)+(_0x1ff14a[_0x262543(0x138)](0x0)[_0x262543(0x15e)]()+_0x1ff14a[_0x262543(0x200)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x262543(0x1b6));}let _0x5903dc=new x(_0x436ba9,_0x141603,_0x4893f9,_0x26756b,_0x6a31ab,_0x39e67e);return _0x5903dc['send'][_0x262543(0x1fe)](_0x5903dc);}catch(_0x3862d9){return console[_0x262543(0x219)](_0x262543(0x16a),_0x3862d9&&_0x3862d9[_0x262543(0x20a)]),()=>{};}});return _0x105a50=>_0x2776b7['forEach'](_0xb52cb0=>_0xb52cb0(_0x105a50));}function ie(_0x57c726,_0x25e1a6,_0x4b918e,_0x393acd){var _0x30aa88=_0x277122;_0x393acd&&_0x57c726===_0x30aa88(0x1d2)&&_0x4b918e[_0x30aa88(0x21b)][_0x30aa88(0x1d2)]();}function b(_0x51a80f){var _0x22a25f=_0x277122,_0x403a3b,_0x191ef6;let _0x1cc190=function(_0x2c9f39,_0x181012){return _0x181012-_0x2c9f39;},_0x4a578f;if(_0x51a80f['performance'])_0x4a578f=function(){var _0x3c9dfa=_0xc5ab;return _0x51a80f[_0x3c9dfa(0x208)]['now']();};else{if(_0x51a80f[_0x22a25f(0x174)]&&_0x51a80f[_0x22a25f(0x174)][_0x22a25f(0x158)]&&((_0x191ef6=(_0x403a3b=_0x51a80f['process'])==null?void 0x0:_0x403a3b[_0x22a25f(0x14c)])==null?void 0x0:_0x191ef6[_0x22a25f(0x165)])!==_0x22a25f(0x180))_0x4a578f=function(){var _0x2444fc=_0x22a25f;return _0x51a80f[_0x2444fc(0x174)][_0x2444fc(0x158)]();},_0x1cc190=function(_0x429c4e,_0x2e24d2){return 0x3e8*(_0x2e24d2[0x0]-_0x429c4e[0x0])+(_0x2e24d2[0x1]-_0x429c4e[0x1])/0xf4240;};else try{let {performance:_0x10386f}=require(_0x22a25f(0x120));_0x4a578f=function(){return _0x10386f['now']();};}catch{_0x4a578f=function(){return+new Date();};}}return{'elapsed':_0x1cc190,'timeStamp':_0x4a578f,'now':()=>Date['now']()};}function _0xc5ab(_0x2fbc92,_0x10d741){var _0x16b566=_0x16b5();return _0xc5ab=function(_0xc5ab16,_0x5acc82){_0xc5ab16=_0xc5ab16-0x120;var _0x534c80=_0x16b566[_0xc5ab16];return _0x534c80;},_0xc5ab(_0x2fbc92,_0x10d741);}function H(_0x410216,_0xd35cc7,_0xbf32c5){var _0x14cd8d=_0x277122,_0x16579a,_0x23a1e8,_0x5506c0,_0x31ef37,_0x53bbed;if(_0x410216[_0x14cd8d(0x214)]!==void 0x0)return _0x410216[_0x14cd8d(0x214)];let _0xdc0a0b=((_0x23a1e8=(_0x16579a=_0x410216[_0x14cd8d(0x174)])==null?void 0x0:_0x16579a['versions'])==null?void 0x0:_0x23a1e8[_0x14cd8d(0x1f2)])||((_0x31ef37=(_0x5506c0=_0x410216[_0x14cd8d(0x174)])==null?void 0x0:_0x5506c0[_0x14cd8d(0x14c)])==null?void 0x0:_0x31ef37['NEXT_RUNTIME'])===_0x14cd8d(0x180);function _0x164729(_0x2cc8cb){var _0x5dd6b2=_0x14cd8d;if(_0x2cc8cb[_0x5dd6b2(0x1fa)]('/')&&_0x2cc8cb[_0x5dd6b2(0x1e7)]('/')){let _0xc83b4c=new RegExp(_0x2cc8cb[_0x5dd6b2(0x21f)](0x1,-0x1));return _0x71c0d3=>_0xc83b4c[_0x5dd6b2(0x1b1)](_0x71c0d3);}else{if(_0x2cc8cb['includes']('*')||_0x2cc8cb['includes']('?')){let _0x3874c4=new RegExp('^'+_0x2cc8cb[_0x5dd6b2(0x16d)](/\\./g,String[_0x5dd6b2(0x14e)](0x5c)+'.')[_0x5dd6b2(0x16d)](/\\*/g,'.*')[_0x5dd6b2(0x16d)](/\\?/g,'.')+String[_0x5dd6b2(0x14e)](0x24));return _0x48cfa3=>_0x3874c4[_0x5dd6b2(0x1b1)](_0x48cfa3);}else return _0x4e1229=>_0x4e1229===_0x2cc8cb;}}let _0x12eb1d=_0xd35cc7[_0x14cd8d(0x190)](_0x164729);return _0x410216[_0x14cd8d(0x214)]=_0xdc0a0b||!_0xd35cc7,!_0x410216[_0x14cd8d(0x214)]&&((_0x53bbed=_0x410216['location'])==null?void 0x0:_0x53bbed[_0x14cd8d(0x1de)])&&(_0x410216[_0x14cd8d(0x214)]=_0x12eb1d[_0x14cd8d(0x1b4)](_0x59667b=>_0x59667b(_0x410216[_0x14cd8d(0x21b)][_0x14cd8d(0x1de)]))),_0x410216['_consoleNinjaAllowedToStart'];}function X(_0x2b666a,_0x4cdb6e,_0x2e19ea,_0x489f64){var _0xc83fb0=_0x277122;_0x2b666a=_0x2b666a,_0x4cdb6e=_0x4cdb6e,_0x2e19ea=_0x2e19ea,_0x489f64=_0x489f64;let _0x341dd5=b(_0x2b666a),_0xb59bb1=_0x341dd5[_0xc83fb0(0x1ef)],_0x7ae3d3=_0x341dd5[_0xc83fb0(0x1eb)];class _0x3433bd{constructor(){var _0x5f27e6=_0xc83fb0;this[_0x5f27e6(0x206)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x5f27e6(0x18b)]=/^(0|[1-9][0-9]*)$/,this['_quotedRegExp']=/'([^\\\\']|\\\\')*'/,this[_0x5f27e6(0x1e9)]=_0x2b666a[_0x5f27e6(0x1a6)],this['_HTMLAllCollection']=_0x2b666a['HTMLAllCollection'],this[_0x5f27e6(0x192)]=Object[_0x5f27e6(0x18a)],this[_0x5f27e6(0x1bc)]=Object[_0x5f27e6(0x1ed)],this[_0x5f27e6(0x1e8)]=_0x2b666a[_0x5f27e6(0x1c1)],this[_0x5f27e6(0x127)]=RegExp[_0x5f27e6(0x20b)][_0x5f27e6(0x193)],this[_0x5f27e6(0x17f)]=Date[_0x5f27e6(0x20b)][_0x5f27e6(0x193)];}['serialize'](_0x2974e5,_0x3545b9,_0x3efb50,_0x496b06){var _0x481a9d=_0xc83fb0,_0x3b5534=this,_0x243f09=_0x3efb50['autoExpand'];function _0x29e913(_0x52177f,_0xff78c8,_0x71f387){var _0x3afd02=_0xc5ab;_0xff78c8['type']=_0x3afd02(0x1b8),_0xff78c8[_0x3afd02(0x1d6)]=_0x52177f[_0x3afd02(0x20a)],_0x8497a7=_0x71f387[_0x3afd02(0x1f2)][_0x3afd02(0x18c)],_0x71f387[_0x3afd02(0x1f2)][_0x3afd02(0x18c)]=_0xff78c8,_0x3b5534[_0x3afd02(0x16b)](_0xff78c8,_0x71f387);}try{_0x3efb50[_0x481a9d(0x148)]++,_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x15d)][_0x481a9d(0x153)](_0x3545b9);var _0xd6bb22,_0x3aea1c,_0x31a2fd,_0x182842,_0x6ddd0=[],_0xab73e6=[],_0x4bcc75,_0xcd237d=this['_type'](_0x3545b9),_0x2ce24b=_0xcd237d===_0x481a9d(0x183),_0x22b2e9=!0x1,_0x3d29d9=_0xcd237d===_0x481a9d(0x1f3),_0x53ba8c=this[_0x481a9d(0x202)](_0xcd237d),_0x4af369=this[_0x481a9d(0x201)](_0xcd237d),_0x22bb70=_0x53ba8c||_0x4af369,_0x286ee0={},_0x1fe6b7=0x0,_0x598e0b=!0x1,_0x8497a7,_0x31a94=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x3efb50['depth']){if(_0x2ce24b){if(_0x3aea1c=_0x3545b9['length'],_0x3aea1c>_0x3efb50[_0x481a9d(0x17a)]){for(_0x31a2fd=0x0,_0x182842=_0x3efb50[_0x481a9d(0x17a)],_0xd6bb22=_0x31a2fd;_0xd6bb22<_0x182842;_0xd6bb22++)_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1ab)](_0x6ddd0,_0x3545b9,_0xcd237d,_0xd6bb22,_0x3efb50));_0x2974e5[_0x481a9d(0x151)]=!0x0;}else{for(_0x31a2fd=0x0,_0x182842=_0x3aea1c,_0xd6bb22=_0x31a2fd;_0xd6bb22<_0x182842;_0xd6bb22++)_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1ab)](_0x6ddd0,_0x3545b9,_0xcd237d,_0xd6bb22,_0x3efb50));}_0x3efb50[_0x481a9d(0x179)]+=_0xab73e6[_0x481a9d(0x122)];}if(!(_0xcd237d===_0x481a9d(0x1a0)||_0xcd237d===_0x481a9d(0x1a6))&&!_0x53ba8c&&_0xcd237d!==_0x481a9d(0x12b)&&_0xcd237d!==_0x481a9d(0x19d)&&_0xcd237d!=='bigint'){var _0x4aa6af=_0x496b06['props']||_0x3efb50['props'];if(this[_0x481a9d(0x176)](_0x3545b9)?(_0xd6bb22=0x0,_0x3545b9[_0x481a9d(0x12d)](function(_0x5c22f4){var _0x5623fa=_0x481a9d;if(_0x1fe6b7++,_0x3efb50[_0x5623fa(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;return;}if(!_0x3efb50[_0x5623fa(0x1f1)]&&_0x3efb50[_0x5623fa(0x196)]&&_0x3efb50[_0x5623fa(0x179)]>_0x3efb50[_0x5623fa(0x168)]){_0x598e0b=!0x0;return;}_0xab73e6[_0x5623fa(0x153)](_0x3b5534['_addProperty'](_0x6ddd0,_0x3545b9,'Set',_0xd6bb22++,_0x3efb50,function(_0x1fd311){return function(){return _0x1fd311;};}(_0x5c22f4)));})):this[_0x481a9d(0x1bf)](_0x3545b9)&&_0x3545b9['forEach'](function(_0x55efdb,_0xab32c5){var _0x2c0851=_0x481a9d;if(_0x1fe6b7++,_0x3efb50[_0x2c0851(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;return;}if(!_0x3efb50['isExpressionToEvaluate']&&_0x3efb50[_0x2c0851(0x196)]&&_0x3efb50['autoExpandPropertyCount']>_0x3efb50[_0x2c0851(0x168)]){_0x598e0b=!0x0;return;}var _0x20c352=_0xab32c5[_0x2c0851(0x193)]();_0x20c352[_0x2c0851(0x122)]>0x64&&(_0x20c352=_0x20c352['slice'](0x0,0x64)+_0x2c0851(0x139)),_0xab73e6['push'](_0x3b5534[_0x2c0851(0x1ab)](_0x6ddd0,_0x3545b9,'Map',_0x20c352,_0x3efb50,function(_0x20b4d2){return function(){return _0x20b4d2;};}(_0x55efdb)));}),!_0x22b2e9){try{for(_0x4bcc75 in _0x3545b9)if(!(_0x2ce24b&&_0x31a94[_0x481a9d(0x1b1)](_0x4bcc75))&&!this[_0x481a9d(0x1ae)](_0x3545b9,_0x4bcc75,_0x3efb50)){if(_0x1fe6b7++,_0x3efb50[_0x481a9d(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;break;}if(!_0x3efb50[_0x481a9d(0x1f1)]&&_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x179)]>_0x3efb50['autoExpandLimit']){_0x598e0b=!0x0;break;}_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1f8)](_0x6ddd0,_0x286ee0,_0x3545b9,_0xcd237d,_0x4bcc75,_0x3efb50));}}catch{}if(_0x286ee0['_p_length']=!0x0,_0x3d29d9&&(_0x286ee0[_0x481a9d(0x123)]=!0x0),!_0x598e0b){var _0x55fd1e=[][_0x481a9d(0x187)](this[_0x481a9d(0x1bc)](_0x3545b9))[_0x481a9d(0x187)](this['_getOwnPropertySymbols'](_0x3545b9));for(_0xd6bb22=0x0,_0x3aea1c=_0x55fd1e['length'];_0xd6bb22<_0x3aea1c;_0xd6bb22++)if(_0x4bcc75=_0x55fd1e[_0xd6bb22],!(_0x2ce24b&&_0x31a94[_0x481a9d(0x1b1)](_0x4bcc75[_0x481a9d(0x193)]()))&&!this['_blacklistedProperty'](_0x3545b9,_0x4bcc75,_0x3efb50)&&!_0x286ee0[_0x481a9d(0x134)+_0x4bcc75[_0x481a9d(0x193)]()]){if(_0x1fe6b7++,_0x3efb50[_0x481a9d(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;break;}if(!_0x3efb50[_0x481a9d(0x1f1)]&&_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x179)]>_0x3efb50['autoExpandLimit']){_0x598e0b=!0x0;break;}_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1f8)](_0x6ddd0,_0x286ee0,_0x3545b9,_0xcd237d,_0x4bcc75,_0x3efb50));}}}}}if(_0x2974e5[_0x481a9d(0x150)]=_0xcd237d,_0x22bb70?(_0x2974e5[_0x481a9d(0x13c)]=_0x3545b9['valueOf'](),this[_0x481a9d(0x143)](_0xcd237d,_0x2974e5,_0x3efb50,_0x496b06)):_0xcd237d===_0x481a9d(0x170)?_0x2974e5['value']=this[_0x481a9d(0x17f)][_0x481a9d(0x154)](_0x3545b9):_0xcd237d===_0x481a9d(0x1d8)?_0x2974e5[_0x481a9d(0x13c)]=_0x3545b9[_0x481a9d(0x193)]():_0xcd237d===_0x481a9d(0x1c3)?_0x2974e5['value']=this[_0x481a9d(0x127)][_0x481a9d(0x154)](_0x3545b9):_0xcd237d==='symbol'&&this['_Symbol']?_0x2974e5[_0x481a9d(0x13c)]=this[_0x481a9d(0x1e8)][_0x481a9d(0x20b)][_0x481a9d(0x193)][_0x481a9d(0x154)](_0x3545b9):!_0x3efb50[_0x481a9d(0x1a9)]&&!(_0xcd237d===_0x481a9d(0x1a0)||_0xcd237d===_0x481a9d(0x1a6))&&(delete _0x2974e5[_0x481a9d(0x13c)],_0x2974e5[_0x481a9d(0x12c)]=!0x0),_0x598e0b&&(_0x2974e5[_0x481a9d(0x1dc)]=!0x0),_0x8497a7=_0x3efb50[_0x481a9d(0x1f2)]['current'],_0x3efb50[_0x481a9d(0x1f2)][_0x481a9d(0x18c)]=_0x2974e5,this[_0x481a9d(0x16b)](_0x2974e5,_0x3efb50),_0xab73e6[_0x481a9d(0x122)]){for(_0xd6bb22=0x0,_0x3aea1c=_0xab73e6[_0x481a9d(0x122)];_0xd6bb22<_0x3aea1c;_0xd6bb22++)_0xab73e6[_0xd6bb22](_0xd6bb22);}_0x6ddd0[_0x481a9d(0x122)]&&(_0x2974e5[_0x481a9d(0x197)]=_0x6ddd0);}catch(_0x202c18){_0x29e913(_0x202c18,_0x2974e5,_0x3efb50);}return this[_0x481a9d(0x171)](_0x3545b9,_0x2974e5),this[_0x481a9d(0x204)](_0x2974e5,_0x3efb50),_0x3efb50[_0x481a9d(0x1f2)][_0x481a9d(0x18c)]=_0x8497a7,_0x3efb50[_0x481a9d(0x148)]--,_0x3efb50[_0x481a9d(0x196)]=_0x243f09,_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x15d)][_0x481a9d(0x14b)](),_0x2974e5;}[_0xc83fb0(0x1ce)](_0x453c25){var _0x1c6ef1=_0xc83fb0;return Object[_0x1c6ef1(0x1db)]?Object[_0x1c6ef1(0x1db)](_0x453c25):[];}[_0xc83fb0(0x176)](_0x26e14a){var _0x5c57ea=_0xc83fb0;return!!(_0x26e14a&&_0x2b666a['Set']&&this['_objectToString'](_0x26e14a)===_0x5c57ea(0x178)&&_0x26e14a[_0x5c57ea(0x12d)]);}[_0xc83fb0(0x1ae)](_0x3e947d,_0x4d1e75,_0x149612){var _0x3cf397=_0xc83fb0;return _0x149612[_0x3cf397(0x1f9)]?typeof _0x3e947d[_0x4d1e75]=='function':!0x1;}[_0xc83fb0(0x164)](_0x132cfb){var _0x123d06=_0xc83fb0,_0x1f311c='';return _0x1f311c=typeof _0x132cfb,_0x1f311c===_0x123d06(0x1b5)?this[_0x123d06(0x1df)](_0x132cfb)===_0x123d06(0x1cc)?_0x1f311c='array':this[_0x123d06(0x1df)](_0x132cfb)==='[object\\x20Date]'?_0x1f311c=_0x123d06(0x170):this[_0x123d06(0x1df)](_0x132cfb)===_0x123d06(0x1a5)?_0x1f311c=_0x123d06(0x1d8):_0x132cfb===null?_0x1f311c=_0x123d06(0x1a0):_0x132cfb[_0x123d06(0x20c)]&&(_0x1f311c=_0x132cfb[_0x123d06(0x20c)][_0x123d06(0x19f)]||_0x1f311c):_0x1f311c===_0x123d06(0x1a6)&&this[_0x123d06(0x1b7)]&&_0x132cfb instanceof this[_0x123d06(0x1b7)]&&(_0x1f311c=_0x123d06(0x191)),_0x1f311c;}['_objectToString'](_0xe15424){var _0x2dfa4f=_0xc83fb0;return Object['prototype'][_0x2dfa4f(0x193)][_0x2dfa4f(0x154)](_0xe15424);}[_0xc83fb0(0x202)](_0x1c7e27){var _0x437108=_0xc83fb0;return _0x1c7e27===_0x437108(0x21a)||_0x1c7e27==='string'||_0x1c7e27===_0x437108(0x216);}[_0xc83fb0(0x201)](_0x2daba1){var _0x5ae4a7=_0xc83fb0;return _0x2daba1===_0x5ae4a7(0x1cd)||_0x2daba1===_0x5ae4a7(0x12b)||_0x2daba1===_0x5ae4a7(0x186);}[_0xc83fb0(0x1ab)](_0x20f9a1,_0x327b4a,_0xbf4be6,_0x48d02d,_0x1f56f9,_0x5da251){var _0x4f6931=this;return function(_0x5c3cf3){var _0x7d5aec=_0xc5ab,_0xfcd658=_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x18c)],_0xb428d1=_0x1f56f9[_0x7d5aec(0x1f2)]['index'],_0x50ca98=_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)];_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)]=_0xfcd658,_0x1f56f9[_0x7d5aec(0x1f2)]['index']=typeof _0x48d02d=='number'?_0x48d02d:_0x5c3cf3,_0x20f9a1[_0x7d5aec(0x153)](_0x4f6931[_0x7d5aec(0x1c2)](_0x327b4a,_0xbf4be6,_0x48d02d,_0x1f56f9,_0x5da251)),_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)]=_0x50ca98,_0x1f56f9[_0x7d5aec(0x1f2)]['index']=_0xb428d1;};}[_0xc83fb0(0x1f8)](_0x2a642f,_0x33d34f,_0x48f024,_0x3bdd75,_0x155f6d,_0x230db2,_0x20acf6){var _0x58110a=_0xc83fb0,_0x145cac=this;return _0x33d34f[_0x58110a(0x134)+_0x155f6d[_0x58110a(0x193)]()]=!0x0,function(_0x4c8a4a){var _0x1eeefc=_0x58110a,_0x3e6bce=_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x18c)],_0x57c08c=_0x230db2[_0x1eeefc(0x1f2)]['index'],_0x3070c4=_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)];_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)]=_0x3e6bce,_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x185)]=_0x4c8a4a,_0x2a642f[_0x1eeefc(0x153)](_0x145cac['_property'](_0x48f024,_0x3bdd75,_0x155f6d,_0x230db2,_0x20acf6)),_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)]=_0x3070c4,_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x185)]=_0x57c08c;};}[_0xc83fb0(0x1c2)](_0x4bb40b,_0x2412f1,_0x415f45,_0x3d4542,_0xa974f0){var _0x2cc493=_0xc83fb0,_0x36d7ed=this;_0xa974f0||(_0xa974f0=function(_0x576be5,_0x26eb48){return _0x576be5[_0x26eb48];});var _0x4d18a9=_0x415f45['toString'](),_0x32e6ca=_0x3d4542[_0x2cc493(0x159)]||{},_0x4a8ccb=_0x3d4542[_0x2cc493(0x1a9)],_0x11c1e4=_0x3d4542[_0x2cc493(0x1f1)];try{var _0x256ca3=this[_0x2cc493(0x1bf)](_0x4bb40b),_0x4a8251=_0x4d18a9;_0x256ca3&&_0x4a8251[0x0]==='\\x27'&&(_0x4a8251=_0x4a8251[_0x2cc493(0x200)](0x1,_0x4a8251[_0x2cc493(0x122)]-0x2));var _0x4f325a=_0x3d4542[_0x2cc493(0x159)]=_0x32e6ca[_0x2cc493(0x134)+_0x4a8251];_0x4f325a&&(_0x3d4542['depth']=_0x3d4542[_0x2cc493(0x1a9)]+0x1),_0x3d4542[_0x2cc493(0x1f1)]=!!_0x4f325a;var _0x5c5c9b=typeof _0x415f45==_0x2cc493(0x152),_0xe03d99={'name':_0x5c5c9b||_0x256ca3?_0x4d18a9:this[_0x2cc493(0x181)](_0x4d18a9)};if(_0x5c5c9b&&(_0xe03d99[_0x2cc493(0x152)]=!0x0),!(_0x2412f1===_0x2cc493(0x183)||_0x2412f1==='Error')){var _0x33f2ab=this[_0x2cc493(0x192)](_0x4bb40b,_0x415f45);if(_0x33f2ab&&(_0x33f2ab[_0x2cc493(0x12a)]&&(_0xe03d99[_0x2cc493(0x175)]=!0x0),_0x33f2ab[_0x2cc493(0x1c7)]&&!_0x4f325a&&!_0x3d4542[_0x2cc493(0x1e1)]))return _0xe03d99[_0x2cc493(0x129)]=!0x0,this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542),_0xe03d99;}var _0x5932aa;try{_0x5932aa=_0xa974f0(_0x4bb40b,_0x415f45);}catch(_0x1c6417){return _0xe03d99={'name':_0x4d18a9,'type':_0x2cc493(0x1b8),'error':_0x1c6417[_0x2cc493(0x20a)]},this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542),_0xe03d99;}var _0x5608f4=this['_type'](_0x5932aa),_0x5934ea=this[_0x2cc493(0x202)](_0x5608f4);if(_0xe03d99['type']=_0x5608f4,_0x5934ea)this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542,_0x5932aa,function(){var _0xacdd1e=_0x2cc493;_0xe03d99[_0xacdd1e(0x13c)]=_0x5932aa[_0xacdd1e(0x14d)](),!_0x4f325a&&_0x36d7ed['_capIfString'](_0x5608f4,_0xe03d99,_0x3d4542,{});});else{var _0x1e345c=_0x3d4542[_0x2cc493(0x196)]&&_0x3d4542[_0x2cc493(0x148)]<_0x3d4542[_0x2cc493(0x126)]&&_0x3d4542[_0x2cc493(0x15d)][_0x2cc493(0x1ba)](_0x5932aa)<0x0&&_0x5608f4!==_0x2cc493(0x1f3)&&_0x3d4542['autoExpandPropertyCount']<_0x3d4542[_0x2cc493(0x168)];_0x1e345c||_0x3d4542[_0x2cc493(0x148)]<_0x4a8ccb||_0x4f325a?(this[_0x2cc493(0x15a)](_0xe03d99,_0x5932aa,_0x3d4542,_0x4f325a||{}),this[_0x2cc493(0x171)](_0x5932aa,_0xe03d99)):this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542,_0x5932aa,function(){var _0x10bd66=_0x2cc493;_0x5608f4==='null'||_0x5608f4===_0x10bd66(0x1a6)||(delete _0xe03d99[_0x10bd66(0x13c)],_0xe03d99[_0x10bd66(0x12c)]=!0x0);});}return _0xe03d99;}finally{_0x3d4542[_0x2cc493(0x159)]=_0x32e6ca,_0x3d4542[_0x2cc493(0x1a9)]=_0x4a8ccb,_0x3d4542['isExpressionToEvaluate']=_0x11c1e4;}}[_0xc83fb0(0x143)](_0x26e91d,_0x24781c,_0x5bd42e,_0x4a720a){var _0x3aa044=_0xc83fb0,_0x2b3bda=_0x4a720a[_0x3aa044(0x121)]||_0x5bd42e[_0x3aa044(0x121)];if((_0x26e91d===_0x3aa044(0x1dd)||_0x26e91d===_0x3aa044(0x12b))&&_0x24781c['value']){let _0x53f015=_0x24781c['value'][_0x3aa044(0x122)];_0x5bd42e[_0x3aa044(0x21d)]+=_0x53f015,_0x5bd42e['allStrLength']>_0x5bd42e[_0x3aa044(0x1c8)]?(_0x24781c[_0x3aa044(0x12c)]='',delete _0x24781c['value']):_0x53f015>_0x2b3bda&&(_0x24781c[_0x3aa044(0x12c)]=_0x24781c[_0x3aa044(0x13c)][_0x3aa044(0x200)](0x0,_0x2b3bda),delete _0x24781c[_0x3aa044(0x13c)]);}}['_isMap'](_0x13d4b6){var _0x5a2e33=_0xc83fb0;return!!(_0x13d4b6&&_0x2b666a[_0x5a2e33(0x1bb)]&&this[_0x5a2e33(0x1df)](_0x13d4b6)===_0x5a2e33(0x1c9)&&_0x13d4b6[_0x5a2e33(0x12d)]);}[_0xc83fb0(0x181)](_0x249276){var _0x265167=_0xc83fb0;if(_0x249276[_0x265167(0x18e)](/^\\d+$/))return _0x249276;var _0x249664;try{_0x249664=JSON['stringify'](''+_0x249276);}catch{_0x249664='\\x22'+this[_0x265167(0x1df)](_0x249276)+'\\x22';}return _0x249664[_0x265167(0x18e)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x249664=_0x249664[_0x265167(0x200)](0x1,_0x249664[_0x265167(0x122)]-0x2):_0x249664=_0x249664[_0x265167(0x16d)](/'/g,'\\x5c\\x27')[_0x265167(0x16d)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x249664;}[_0xc83fb0(0x132)](_0x45f4f2,_0x1a9b2b,_0x2029c2,_0x31d872){var _0xb6755c=_0xc83fb0;this[_0xb6755c(0x16b)](_0x45f4f2,_0x1a9b2b),_0x31d872&&_0x31d872(),this[_0xb6755c(0x171)](_0x2029c2,_0x45f4f2),this['_treeNodePropertiesAfterFullValue'](_0x45f4f2,_0x1a9b2b);}[_0xc83fb0(0x16b)](_0x34c63e,_0xe2d82b){var _0x50a303=_0xc83fb0;this[_0x50a303(0x1e2)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x14f)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x1e0)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x1bd)](_0x34c63e,_0xe2d82b);}['_setNodeId'](_0x5e991e,_0x9dba11){}[_0xc83fb0(0x14f)](_0x252482,_0x2ec202){}[_0xc83fb0(0x17e)](_0xd737d3,_0x48958c){}[_0xc83fb0(0x1c0)](_0x25e050){var _0x86a0a0=_0xc83fb0;return _0x25e050===this[_0x86a0a0(0x1e9)];}[_0xc83fb0(0x204)](_0x59a6ad,_0x21713c){var _0x417cc8=_0xc83fb0;this[_0x417cc8(0x17e)](_0x59a6ad,_0x21713c),this[_0x417cc8(0x1a1)](_0x59a6ad),_0x21713c[_0x417cc8(0x169)]&&this[_0x417cc8(0x144)](_0x59a6ad),this[_0x417cc8(0x1ee)](_0x59a6ad,_0x21713c),this['_addLoadNode'](_0x59a6ad,_0x21713c),this[_0x417cc8(0x163)](_0x59a6ad);}[_0xc83fb0(0x171)](_0x368a80,_0x3bf559){var _0x5e4474=_0xc83fb0;let _0x15b644;try{_0x2b666a[_0x5e4474(0x1e5)]&&(_0x15b644=_0x2b666a[_0x5e4474(0x1e5)][_0x5e4474(0x1d6)],_0x2b666a[_0x5e4474(0x1e5)]['error']=function(){}),_0x368a80&&typeof _0x368a80['length']==_0x5e4474(0x216)&&(_0x3bf559[_0x5e4474(0x122)]=_0x368a80['length']);}catch{}finally{_0x15b644&&(_0x2b666a['console'][_0x5e4474(0x1d6)]=_0x15b644);}if(_0x3bf559['type']===_0x5e4474(0x216)||_0x3bf559['type']===_0x5e4474(0x186)){if(isNaN(_0x3bf559[_0x5e4474(0x13c)]))_0x3bf559[_0x5e4474(0x1ad)]=!0x0,delete _0x3bf559[_0x5e4474(0x13c)];else switch(_0x3bf559[_0x5e4474(0x13c)]){case Number['POSITIVE_INFINITY']:_0x3bf559[_0x5e4474(0x199)]=!0x0,delete _0x3bf559['value'];break;case Number[_0x5e4474(0x135)]:_0x3bf559[_0x5e4474(0x18d)]=!0x0,delete _0x3bf559[_0x5e4474(0x13c)];break;case 0x0:this['_isNegativeZero'](_0x3bf559[_0x5e4474(0x13c)])&&(_0x3bf559[_0x5e4474(0x1da)]=!0x0);break;}}else _0x3bf559[_0x5e4474(0x150)]===_0x5e4474(0x1f3)&&typeof _0x368a80[_0x5e4474(0x19f)]==_0x5e4474(0x1dd)&&_0x368a80[_0x5e4474(0x19f)]&&_0x3bf559[_0x5e4474(0x19f)]&&_0x368a80[_0x5e4474(0x19f)]!==_0x3bf559[_0x5e4474(0x19f)]&&(_0x3bf559['funcName']=_0x368a80[_0x5e4474(0x19f)]);}[_0xc83fb0(0x1fb)](_0x340a19){var _0x2e6ef9=_0xc83fb0;return 0x1/_0x340a19===Number[_0x2e6ef9(0x135)];}[_0xc83fb0(0x144)](_0x2109f2){var _0x1074c3=_0xc83fb0;!_0x2109f2['props']||!_0x2109f2[_0x1074c3(0x197)][_0x1074c3(0x122)]||_0x2109f2[_0x1074c3(0x150)]===_0x1074c3(0x183)||_0x2109f2[_0x1074c3(0x150)]===_0x1074c3(0x1bb)||_0x2109f2['type']===_0x1074c3(0x1e4)||_0x2109f2[_0x1074c3(0x197)][_0x1074c3(0x1cf)](function(_0x579bbe,_0xd3668f){var _0x5c0a3c=_0x1074c3,_0x179ea1=_0x579bbe[_0x5c0a3c(0x19f)][_0x5c0a3c(0x17d)](),_0x394e8a=_0xd3668f[_0x5c0a3c(0x19f)][_0x5c0a3c(0x17d)]();return _0x179ea1<_0x394e8a?-0x1:_0x179ea1>_0x394e8a?0x1:0x0;});}['_addFunctionsNode'](_0x5b4bf1,_0x74c4fe){var _0x87fdfe=_0xc83fb0;if(!(_0x74c4fe[_0x87fdfe(0x1f9)]||!_0x5b4bf1[_0x87fdfe(0x197)]||!_0x5b4bf1[_0x87fdfe(0x197)]['length'])){for(var _0x3ac3f4=[],_0x4ceb3a=[],_0x260f45=0x0,_0xf2dbe6=_0x5b4bf1[_0x87fdfe(0x197)][_0x87fdfe(0x122)];_0x260f45<_0xf2dbe6;_0x260f45++){var _0x22c70b=_0x5b4bf1[_0x87fdfe(0x197)][_0x260f45];_0x22c70b['type']===_0x87fdfe(0x1f3)?_0x3ac3f4[_0x87fdfe(0x153)](_0x22c70b):_0x4ceb3a[_0x87fdfe(0x153)](_0x22c70b);}if(!(!_0x4ceb3a[_0x87fdfe(0x122)]||_0x3ac3f4[_0x87fdfe(0x122)]<=0x1)){_0x5b4bf1['props']=_0x4ceb3a;var _0x4a6b3b={'functionsNode':!0x0,'props':_0x3ac3f4};this[_0x87fdfe(0x1e2)](_0x4a6b3b,_0x74c4fe),this[_0x87fdfe(0x17e)](_0x4a6b3b,_0x74c4fe),this[_0x87fdfe(0x1a1)](_0x4a6b3b),this[_0x87fdfe(0x1bd)](_0x4a6b3b,_0x74c4fe),_0x4a6b3b['id']+='\\x20f',_0x5b4bf1[_0x87fdfe(0x197)][_0x87fdfe(0x16f)](_0x4a6b3b);}}}['_addLoadNode'](_0xe0c1f5,_0x16df52){}[_0xc83fb0(0x1a1)](_0x5e776f){}[_0xc83fb0(0x21c)](_0xed4fe0){var _0x3c283a=_0xc83fb0;return Array['isArray'](_0xed4fe0)||typeof _0xed4fe0==_0x3c283a(0x1b5)&&this[_0x3c283a(0x1df)](_0xed4fe0)===_0x3c283a(0x1cc);}[_0xc83fb0(0x1bd)](_0x45e6db,_0x317a4d){}[_0xc83fb0(0x163)](_0x403816){var _0x587472=_0xc83fb0;delete _0x403816[_0x587472(0x13f)],delete _0x403816[_0x587472(0x166)],delete _0x403816['_hasMapOnItsPath'];}[_0xc83fb0(0x1e0)](_0x420717,_0x51ec4d){}}let _0x4c6fbe=new _0x3433bd(),_0x1c73d6={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x1300f9={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x3fb167(_0x4da0e2,_0x234c63,_0x2f0b10,_0x2a70ca,_0x22e30a,_0x32659a){var _0x31c0e5=_0xc83fb0;let _0x2e43e2,_0x3be46a;try{_0x3be46a=_0x7ae3d3(),_0x2e43e2=_0x2e19ea[_0x234c63],!_0x2e43e2||_0x3be46a-_0x2e43e2['ts']>0x1f4&&_0x2e43e2[_0x31c0e5(0x128)]&&_0x2e43e2[_0x31c0e5(0x145)]/_0x2e43e2[_0x31c0e5(0x128)]<0x64?(_0x2e19ea[_0x234c63]=_0x2e43e2={'count':0x0,'time':0x0,'ts':_0x3be46a},_0x2e19ea[_0x31c0e5(0x141)]={}):_0x3be46a-_0x2e19ea[_0x31c0e5(0x141)]['ts']>0x32&&_0x2e19ea[_0x31c0e5(0x141)]['count']&&_0x2e19ea[_0x31c0e5(0x141)]['time']/_0x2e19ea[_0x31c0e5(0x141)]['count']<0x64&&(_0x2e19ea[_0x31c0e5(0x141)]={});let _0x5d2500=[],_0x13b8c2=_0x2e43e2[_0x31c0e5(0x1fc)]||_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x1fc)]?_0x1300f9:_0x1c73d6,_0x13c005=_0x48a809=>{var _0x12d5d2=_0x31c0e5;let _0x5f41a5={};return _0x5f41a5['props']=_0x48a809[_0x12d5d2(0x197)],_0x5f41a5[_0x12d5d2(0x17a)]=_0x48a809[_0x12d5d2(0x17a)],_0x5f41a5[_0x12d5d2(0x121)]=_0x48a809[_0x12d5d2(0x121)],_0x5f41a5['totalStrLength']=_0x48a809[_0x12d5d2(0x1c8)],_0x5f41a5[_0x12d5d2(0x168)]=_0x48a809[_0x12d5d2(0x168)],_0x5f41a5['autoExpandMaxDepth']=_0x48a809[_0x12d5d2(0x126)],_0x5f41a5['sortProps']=!0x1,_0x5f41a5[_0x12d5d2(0x1f9)]=!_0x4cdb6e,_0x5f41a5[_0x12d5d2(0x1a9)]=0x1,_0x5f41a5['level']=0x0,_0x5f41a5[_0x12d5d2(0x188)]=_0x12d5d2(0x1d0),_0x5f41a5[_0x12d5d2(0x155)]=_0x12d5d2(0x1a3),_0x5f41a5['autoExpand']=!0x0,_0x5f41a5[_0x12d5d2(0x15d)]=[],_0x5f41a5[_0x12d5d2(0x179)]=0x0,_0x5f41a5[_0x12d5d2(0x1e1)]=!0x0,_0x5f41a5[_0x12d5d2(0x21d)]=0x0,_0x5f41a5[_0x12d5d2(0x1f2)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x5f41a5;};for(var _0x14027d=0x0;_0x14027d<_0x22e30a[_0x31c0e5(0x122)];_0x14027d++)_0x5d2500[_0x31c0e5(0x153)](_0x4c6fbe[_0x31c0e5(0x15a)]({'timeNode':_0x4da0e2===_0x31c0e5(0x145)||void 0x0},_0x22e30a[_0x14027d],_0x13c005(_0x13b8c2),{}));if(_0x4da0e2==='trace'){let _0xe6083e=Error[_0x31c0e5(0x17b)];try{Error[_0x31c0e5(0x17b)]=0x1/0x0,_0x5d2500['push'](_0x4c6fbe['serialize']({'stackNode':!0x0},new Error()[_0x31c0e5(0x211)],_0x13c005(_0x13b8c2),{'strLength':0x1/0x0}));}finally{Error[_0x31c0e5(0x17b)]=_0xe6083e;}}return{'method':_0x31c0e5(0x1ff),'version':_0x489f64,'args':[{'ts':_0x2f0b10,'session':_0x2a70ca,'args':_0x5d2500,'id':_0x234c63,'context':_0x32659a}]};}catch(_0x2b4f8b){return{'method':_0x31c0e5(0x1ff),'version':_0x489f64,'args':[{'ts':_0x2f0b10,'session':_0x2a70ca,'args':[{'type':'unknown','error':_0x2b4f8b&&_0x2b4f8b[_0x31c0e5(0x20a)]}],'id':_0x234c63,'context':_0x32659a}]};}finally{try{if(_0x2e43e2&&_0x3be46a){let _0xff9c1d=_0x7ae3d3();_0x2e43e2[_0x31c0e5(0x128)]++,_0x2e43e2[_0x31c0e5(0x145)]+=_0xb59bb1(_0x3be46a,_0xff9c1d),_0x2e43e2['ts']=_0xff9c1d,_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x128)]++,_0x2e19ea['hits']['time']+=_0xb59bb1(_0x3be46a,_0xff9c1d),_0x2e19ea['hits']['ts']=_0xff9c1d,(_0x2e43e2['count']>0x32||_0x2e43e2[_0x31c0e5(0x145)]>0x64)&&(_0x2e43e2[_0x31c0e5(0x1fc)]=!0x0),(_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x128)]>0x3e8||_0x2e19ea[_0x31c0e5(0x141)]['time']>0x12c)&&(_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x1fc)]=!0x0);}}catch{}}}return _0x3fb167;}((_0xd84dda,_0x5747d3,_0x5b0082,_0x477f21,_0x2a68c3,_0x3f8562,_0x3a0549,_0x3db78c,_0x46c513,_0xbfe5dd,_0x18f1a0)=>{var _0x320b2d=_0x277122;if(_0xd84dda[_0x320b2d(0x1d9)])return _0xd84dda['_console_ninja'];if(!H(_0xd84dda,_0x3db78c,_0x2a68c3))return _0xd84dda[_0x320b2d(0x1d9)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0xd84dda['_console_ninja'];let _0x4fb6c4=b(_0xd84dda),_0x5b3f8e=_0x4fb6c4[_0x320b2d(0x1ef)],_0x479531=_0x4fb6c4[_0x320b2d(0x1eb)],_0x177654=_0x4fb6c4[_0x320b2d(0x177)],_0x25d606={'hits':{},'ts':{}},_0x6aa2d2=X(_0xd84dda,_0x46c513,_0x25d606,_0x3f8562),_0x2f092d=_0x4d5c8f=>{_0x25d606['ts'][_0x4d5c8f]=_0x479531();},_0x492afb=(_0x3065ce,_0x3451d9)=>{var _0x43323f=_0x320b2d;let _0x378abc=_0x25d606['ts'][_0x3451d9];if(delete _0x25d606['ts'][_0x3451d9],_0x378abc){let _0xc54ea1=_0x5b3f8e(_0x378abc,_0x479531());_0x4abd9f(_0x6aa2d2(_0x43323f(0x145),_0x3065ce,_0x177654(),_0x1dcfcb,[_0xc54ea1],_0x3451d9));}},_0x4f8d09=_0x51145b=>{var _0x3296a6=_0x320b2d,_0x2e7901;return _0x2a68c3===_0x3296a6(0x18f)&&_0xd84dda[_0x3296a6(0x221)]&&((_0x2e7901=_0x51145b==null?void 0x0:_0x51145b[_0x3296a6(0x13e)])==null?void 0x0:_0x2e7901[_0x3296a6(0x122)])&&(_0x51145b[_0x3296a6(0x13e)][0x0][_0x3296a6(0x221)]=_0xd84dda[_0x3296a6(0x221)]),_0x51145b;};_0xd84dda['_console_ninja']={'consoleLog':(_0x34542f,_0x1e7acf)=>{var _0x33d79c=_0x320b2d;_0xd84dda[_0x33d79c(0x1e5)]['log'][_0x33d79c(0x19f)]!==_0x33d79c(0x19b)&&_0x4abd9f(_0x6aa2d2(_0x33d79c(0x1ff),_0x34542f,_0x177654(),_0x1dcfcb,_0x1e7acf));},'consoleTrace':(_0x58cfc2,_0x3b1473)=>{var _0x43d259=_0x320b2d;_0xd84dda[_0x43d259(0x1e5)][_0x43d259(0x1ff)][_0x43d259(0x19f)]!=='disabledTrace'&&_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x43d259(0x13a),_0x58cfc2,_0x177654(),_0x1dcfcb,_0x3b1473)));},'consoleTime':_0x19ca9e=>{_0x2f092d(_0x19ca9e);},'consoleTimeEnd':(_0x3c1c7d,_0x259c13)=>{_0x492afb(_0x259c13,_0x3c1c7d);},'autoLog':(_0x50a502,_0x2ec9ac)=>{var _0x11fb8c=_0x320b2d;_0x4abd9f(_0x6aa2d2(_0x11fb8c(0x1ff),_0x2ec9ac,_0x177654(),_0x1dcfcb,[_0x50a502]));},'autoLogMany':(_0x39367a,_0x33dff6)=>{var _0x3f364b=_0x320b2d;_0x4abd9f(_0x6aa2d2(_0x3f364b(0x1ff),_0x39367a,_0x177654(),_0x1dcfcb,_0x33dff6));},'autoTrace':(_0x4de991,_0x1c9190)=>{var _0x31dbb7=_0x320b2d;_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x31dbb7(0x13a),_0x1c9190,_0x177654(),_0x1dcfcb,[_0x4de991])));},'autoTraceMany':(_0x48d7ba,_0x5770f9)=>{var _0x445bc1=_0x320b2d;_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x445bc1(0x13a),_0x48d7ba,_0x177654(),_0x1dcfcb,_0x5770f9)));},'autoTime':(_0x456f75,_0x2d3903,_0x58530c)=>{_0x2f092d(_0x58530c);},'autoTimeEnd':(_0x3faefd,_0x1c4496,_0x5d7ac7)=>{_0x492afb(_0x1c4496,_0x5d7ac7);},'coverage':_0x3e26ed=>{_0x4abd9f({'method':'coverage','version':_0x3f8562,'args':[{'id':_0x3e26ed}]});}};let _0x4abd9f=q(_0xd84dda,_0x5747d3,_0x5b0082,_0x477f21,_0x2a68c3,_0xbfe5dd,_0x18f1a0),_0x1dcfcb=_0xd84dda[_0x320b2d(0x218)];return _0xd84dda[_0x320b2d(0x1d9)];})(globalThis,_0x277122(0x1ec),_0x277122(0x1a4),_0x277122(0x14a),_0x277122(0x198),_0x277122(0x207),_0x277122(0x1be),_0x277122(0x194),_0x277122(0x217),_0x277122(0x1d3),_0x277122(0x137));")}catch(e){}}function _(e,...t){try{c().consoleLog(e,t)}catch(e){}return t}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>V,setDefaultEventParameters:()=>q,setUserId:()=>Y,setUserProperties:()=>$,settings:()=>F});var i=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),s=a("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),n=a("./node_modules/@firebase/util/dist/index.esm2017.js"),x=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js");a("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const o="analytics",r="firebase_id",c="origin",_=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",h="https://www.googletagmanager.com/gtag/js",l=new s.Logger("@firebase/analytics"),f={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},u=new n.ErrorFactory("analytics","Analytics",f);function b(e){if(!e.startsWith(h)){const t=u.create("invalid-gtag-resource",{gtagURL:e});return l.warn(t.message),""}return e}function g(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}function m(e,t){const a=function(e,t){let a;return window.trustedTypes&&(a=window.trustedTypes.createPolicy(e,t)),a}("firebase-js-sdk-policy",{createScriptURL:b}),i=document.createElement("script"),s=`${h}?l=${e}&id=${t}`;i.src=a?null==a?void 0:a.createScriptURL(s):s,i.async=!0,document.head.appendChild(i)}function p(e,t,a,i){return async function(s,...n){try{if("event"===s){const[i,s]=n;await async function(e,t,a,i,s){try{let n=[];if(s&&s.send_to){let e=s.send_to;Array.isArray(e)||(e=[e]);const i=await g(a);for(const a of e){const e=i.find((e=>e.measurementId===a)),s=e&&t[e.appId];if(!s){n=[];break}n.push(s)}}0===n.length&&(n=Object.values(t)),await Promise.all(n),e("event",i,s||{})}catch(e){l.error(e)}}(e,t,a,i,s)}else if("config"===s){const[s,x]=n;await async function(e,t,a,i,s,n){const x=i[s];try{if(x)await t[x];else{const e=(await g(a)).find((e=>e.measurementId===s));e&&await t[e.appId]}}catch(e){l.error(e)}e("config",s,n)}(e,t,a,i,s,x)}else if("consent"===s){const[t]=n;e("consent","update",t)}else if("get"===s){const[t,a,i]=n;e("get",t,a,i)}else if("set"===s){const[t]=n;e("set",t)}else e(s,...n)}catch(e){l.error(e)}}}const v=30;const w=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function S(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function y(e,t=w,a){const{appId:i,apiKey:s,measurementId:n}=e.options;if(!i)throw u.create("no-app-id");if(!s){if(n)return{measurementId:n,appId:i};throw u.create("no-api-key")}const x=t.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},o=new E;return setTimeout((async()=>{o.abort()}),void 0!==a?a:_),I({appId:i,apiKey:s,measurementId:n},x,o,t)}async function I(e,{throttleEndTimeMillis:t,backoffCount:a},i,s=w){var x;const{appId:o,measurementId:r}=e;try{await function(e,t){return new Promise(((a,i)=>{const s=Math.max(t-Date.now(),0),n=setTimeout(a,s);e.addEventListener((()=>{clearTimeout(n),i(u.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(i,t)}catch(e){if(r)return l.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:o,measurementId:r};throw e}try{const t=await async function(e){var t;const{appId:a,apiKey:i}=e,s={method:"GET",headers:S(i)},n=d.replace("{app-id}",a),x=await fetch(n,s);if(200!==x.status&&304!==x.status){let e="";try{const a=await x.json();(null===(t=a.error)||void 0===t?void 0:t.message)&&(e=a.error.message)}catch(e){}throw u.create("config-fetch-failed",{httpStatus:x.status,responseMessage:e})}return x.json()}(e);return s.deleteThrottleMetadata(o),t}catch(t){const c=t;if(!function(e){if(!(e instanceof n.FirebaseError&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(c)){if(s.deleteThrottleMetadata(o),r)return l.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==c?void 0:c.message}]`),{appId:o,measurementId:r};throw t}const _=503===Number(null===(x=null==c?void 0:c.customData)||void 0===x?void 0:x.httpStatus)?(0,n.calculateBackoffMillis)(a,s.intervalMillis,v):(0,n.calculateBackoffMillis)(a,s.intervalMillis),d={throttleEndTimeMillis:Date.now()+_,backoffCount:a+1};return s.setThrottleMetadata(o,d),l.debug(`Calling attemptFetch again in ${_} millis`),I(e,d,i,s)}}class E{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let T,C;function A(e){C=e}function P(e){T=e}async function L(e,t,a,i,s,x,o){var _;const d=y(e);d.then((t=>{a[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&l.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>l.error(e))),t.push(d);const f=async function(){if(!(0,n.isIndexedDBAvailable)())return l.warn(u.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,n.validateIndexedDBOpenable)()}catch(e){return l.warn(u.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?i.getId():void 0)),[b,g]=await Promise.all([d,f]);(function(e){const t=window.document.getElementsByTagName("script");for(const a of Object.values(t))if(a.src&&a.src.includes(h)&&a.src.includes(e))return a;return null})(x)||m(x,b.measurementId),C&&(s("consent","default",C),A(void 0)),s("js",new Date);const p=null!==(_=null==o?void 0:o.config)&&void 0!==_?_:{};return p[c]="firebase",p.update=!0,null!=g&&(p[r]=g),s("config",b.measurementId,p),T&&(s("set",T),P(void 0)),b.measurementId}class k{constructor(e){this.app=e}_delete(){return delete D[this.app.options.appId],Promise.resolve()}}let D={},O=[];const N={};let B,M,z="dataLayer",j="gtag",R=!1;function F(e){if(R)throw u.create("already-initialized");e.dataLayerName&&(z=e.dataLayerName),e.gtagName&&(j=e.gtagName)}function U(e,t,a){!function(){const e=[];if((0,n.isBrowserExtension)()&&e.push("This is a browser extension environment."),(0,n.areCookiesEnabled)()||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),a=u.create("invalid-analytics-context",{errorInfo:t});l.warn(a.message)}}();const i=e.options.appId;if(!i)throw u.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw u.create("no-api-key");l.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=D[i])throw u.create("already-exists",{id:i});if(!R){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(z);const{wrappedGtag:e,gtagCore:t}=function(e,t,a,i,s){let n=function(...e){window[i].push(arguments)};return window[s]&&"function"==typeof window[s]&&(n=window[s]),window[s]=p(n,e,t,a),{gtagCore:n,wrappedGtag:window[s]}}(D,O,N,z,j);M=e,B=t,R=!0}D[i]=L(e,O,N,t,B,z,a);return new k(e)}function H(e=(0,i.getApp)()){e=(0,n.getModularInstance)(e);const t=(0,i._getProvider)(e,o);return t.isInitialized()?t.getImmediate():G(e)}function G(e,t={}){const a=(0,i._getProvider)(e,o);if(a.isInitialized()){const e=a.getImmediate();if((0,n.deepEqual)(t,a.getOptions()))return e;throw u.create("already-initialized")}return a.initialize({options:t})}async function W(){if((0,n.isBrowserExtension)())return!1;if(!(0,n.areCookiesEnabled)())return!1;if(!(0,n.isIndexedDBAvailable)())return!1;try{return await(0,n.validateIndexedDBOpenable)()}catch(e){return!1}}function V(e,t,a){e=(0,n.getModularInstance)(e),async function(e,t,a,i){if(i&&i.global)return e("set",{screen_name:a}),Promise.resolve();e("config",await t,{update:!0,screen_name:a})}(M,D[e.app.options.appId],t,a).catch((e=>l.error(e)))}async function X(e){return e=(0,n.getModularInstance)(e),async function(e,t){const a=await t;return new Promise(((t,i)=>{e("get",a,"client_id",(e=>{e||i(u.create("no-client-id")),t(e)}))}))}(M,D[e.app.options.appId])}function Y(e,t,a){e=(0,n.getModularInstance)(e),async function(e,t,a,i){if(i&&i.global)return e("set",{user_id:a}),Promise.resolve();e("config",await t,{update:!0,user_id:a})}(M,D[e.app.options.appId],t,a).catch((e=>l.error(e)))}function $(e,t,a){e=(0,n.getModularInstance)(e),async function(e,t,a,i){if(i&&i.global){const t={};for(const e of Object.keys(a))t[`user_properties.${e}`]=a[e];return e("set",t),Promise.resolve()}e("config",await t,{update:!0,user_properties:a})}(M,D[e.app.options.appId],t,a).catch((e=>l.error(e)))}function K(e,t){e=(0,n.getModularInstance)(e),async function(e,t){const a=await e;window[`ga-disable-${a}`]=!t}(D[e.app.options.appId],t).catch((e=>l.error(e)))}function q(e){M?M("set",e):P(e)}function J(e,t,a,i){e=(0,n.getModularInstance)(e),async function(e,t,a,i,s){if(s&&s.global)e("event",a,i);else{const s=await t;e("event",a,Object.assign(Object.assign({},i),{send_to:s}))}}(M,D[e.app.options.appId],t,a,i).catch((e=>l.error(e)))}function Z(e){M?M("consent","update",e):A(e)}const Q="@firebase/analytics",ee="0.10.0";(0,i._registerComponent)(new x.Component(o,((e,{options:t})=>U(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),(0,i._registerComponent)(new x.Component("analytics-internal",(function(e){try{const t=e.getProvider(o).getImmediate();return{logEvent:(e,a,i)=>J(t,e,a,i)}}catch(e){throw u.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),(0,i.registerVersion)(Q,ee),(0,i.registerVersion)(Q,ee,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{FirebaseError:()=>n.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>B,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>z,_clearComponents:()=>W,_components:()=>j,_getProvider:()=>H,_registerComponent:()=>U,_removeServiceInstance:()=>G,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>ee,registerVersion:()=>Q,setLogLevel:()=>te});var i=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),s=a("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),n=a("./node_modules/@firebase/util/dist/index.esm2017.js"),x=a("./node_modules/idb/build/index.js");class o{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const r="@firebase/app",c="0.9.15",_=new s.Logger("@firebase/app"),d="@firebase/app-compat",h="@firebase/analytics-compat",l="@firebase/analytics",f="@firebase/app-check-compat",u="@firebase/app-check",b="@firebase/auth",g="@firebase/auth-compat",m="@firebase/database",p="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",S="@firebase/installations",y="@firebase/installations-compat",I="@firebase/messaging",E="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",A="@firebase/remote-config",P="@firebase/remote-config-compat",L="@firebase/storage",k="@firebase/storage-compat",D="@firebase/firestore",O="@firebase/firestore-compat",N="firebase",B="[DEFAULT]",M={[r]:"fire-core",[d]:"fire-core-compat",[l]:"fire-analytics",[h]:"fire-analytics-compat",[u]:"fire-app-check",[f]:"fire-app-check-compat",[b]:"fire-auth",[g]:"fire-auth-compat",[m]:"fire-rtdb",[p]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[S]:"fire-iid",[y]:"fire-iid-compat",[I]:"fire-fcm",[E]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[A]:"fire-rc",[P]:"fire-rc-compat",[L]:"fire-gcs",[k]:"fire-gcs-compat",[D]:"fire-fst",[O]:"fire-fst-compat","fire-js":"fire-js",[N]:"fire-js-all"},z=new Map,j=new Map;function R(e,t){try{e.container.addComponent(t)}catch(a){_.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,a)}}function F(e,t){e.container.addOrOverwriteComponent(t)}function U(e){const t=e.name;if(j.has(t))return _.debug(`There were multiple attempts to register component ${t}.`),!1;j.set(t,e);for(const t of z.values())R(t,e);return!0}function H(e,t){const a=e.container.getProvider("heartbeat").getImmediate({optional:!0});return a&&a.triggerHeartbeat(),e.container.getProvider(t)}function G(e,t,a=B){H(e,t).clearInstance(a)}function W(){j.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new n.ErrorFactory("app","Firebase",V);class Y{constructor(e,t,a){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=a,this.container.addComponent(new i.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(e,t={}){let a=e;if("object"!=typeof t){t={name:t}}const s=Object.assign({name:B,automaticDataCollectionEnabled:!1},t),x=s.name;if("string"!=typeof x||!x)throw X.create("bad-app-name",{appName:String(x)});if(a||(a=(0,n.getDefaultAppConfig)()),!a)throw X.create("no-options");const o=z.get(x);if(o){if((0,n.deepEqual)(a,o.options)&&(0,n.deepEqual)(s,o.config))return o;throw X.create("duplicate-app",{appName:x})}const r=new i.ComponentContainer(x);for(const e of j.values())r.addComponent(e);const c=new Y(a,s,r);return z.set(x,c),c}function q(e=B){const t=z.get(e);if(!t&&e===B&&(0,n.getDefaultAppConfig)())return K();if(!t)throw X.create("no-app",{appName:e});return t}function J(){return Array.from(z.values())}async function Z(e){const t=e.name;z.has(t)&&(z.delete(t),await Promise.all(e.container.getProviders().map((e=>e.delete()))),e.isDeleted=!0)}function Q(e,t,a){var s;let n=null!==(s=M[e])&&void 0!==s?s:e;a&&(n+=`-${a}`);const x=n.match(/\s|\//),o=t.match(/\s|\//);if(x||o){const e=[`Unable to register library "${n}" with version "${t}":`];return x&&e.push(`library name "${n}" contains illegal characters (whitespace or "/")`),x&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void _.warn(e.join(" "))}U(new i.Component(`${n}-version`,(()=>({library:n,version:t})),"VERSION"))}function ee(e,t){if(null!==e&&"function"!=typeof e)throw X.create("invalid-log-argument");(0,s.setUserLogHandler)(e,t)}function te(e){(0,s.setLogLevel)(e)}const ae="firebase-heartbeat-database",ie=1,se="firebase-heartbeat-store";let ne=null;function xe(){return ne||(ne=(0,x.openDB)(ae,ie,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(se)}}).catch((e=>{throw X.create("idb-open",{originalErrorMessage:e.message})}))),ne}async function oe(e,t){try{const a=(await xe()).transaction(se,"readwrite"),i=a.objectStore(se);await i.put(t,re(e)),await a.done}catch(e){if(e instanceof n.FirebaseError)_.warn(e.message);else{const t=X.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});_.warn(t.message)}}}function re(e){return`${e.name}!${e.options.appId}`}class ce{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new de(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=_e();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=_e(),{heartbeatsToSend:t,unsentEntries:a}=function(e,t=1024){const a=[];let i=e.slice();for(const s of e){const e=a.find((e=>e.agent===s.agent));if(e){if(e.dates.push(s.date),he(a)>t){e.dates.pop();break}}else if(a.push({agent:s.agent,dates:[s.date]}),he(a)>t){a.pop();break}i=i.slice(1)}return{heartbeatsToSend:a,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=(0,n.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,a.length>0?(this._heartbeatsCache.heartbeats=a,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function _e(){return(new Date).toISOString().substring(0,10)}class de{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,n.isIndexedDBAvailable)()&&(0,n.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{const t=await xe();return await t.transaction(se).objectStore(se).get(re(e))}catch(e){if(e instanceof n.FirebaseError)_.warn(e.message);else{const t=X.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});_.warn(t.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const a=await this.read();return oe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:a.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const a=await this.read();return oe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:a.lastSentHeartbeatDate,heartbeats:[...a.heartbeats,...e.heartbeats]})}}}function he(e){return(0,n.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e})).length}var le;le="",U(new i.Component("platform-logger",(e=>new o(e)),"PRIVATE")),U(new i.Component("heartbeat",(e=>new ce(e)),"PRIVATE")),Q(r,c,le),Q(r,c,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{Component:()=>s,ComponentContainer:()=>o,Provider:()=>x});var i=a("./node_modules/@firebase/util/dist/index.esm2017.js");class s{constructor(e,t,a){this.name=e,this.instanceFactory=t,this.type=a,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const n="[DEFAULT]";class x{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new i.Deferred;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const a=this.getOrInitializeService({instanceIdentifier:t});a&&e.resolve(a)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const a=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),i=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(a)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:a})}catch(e){if(i)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:n})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const a=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:a});t.resolve(e)}catch(e){}}}}clearInstance(e=n){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=n){return this.instances.has(e)}getOptions(e=n){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,a=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(a))throw Error(`${this.name}(${a}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:a,options:t});for(const[e,t]of this.instancesDeferred.entries()){a===this.normalizeInstanceIdentifier(e)&&t.resolve(i)}return i}onInit(e,t){var a;const i=this.normalizeInstanceIdentifier(t),s=null!==(a=this.onInitCallbacks.get(i))&&void 0!==a?a:new Set;s.add(e),this.onInitCallbacks.set(i,s);const n=this.instances.get(i);return n&&e(n,i),()=>{s.delete(e)}}invokeOnInitCallbacks(e,t){const a=this.onInitCallbacks.get(t);if(a)for(const i of a)try{i(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let a=this.instances.get(e);if(!a&&this.component&&(a=this.component.instanceFactory(this.container,{instanceIdentifier:(i=e,i===n?void 0:i),options:t}),this.instances.set(e,a),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(a,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,a)}catch(e){}var i;return a||null}normalizeInstanceIdentifier(e=n){return this.component?this.component.multipleInstances?e:n:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class o{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new x(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>te,getToken:()=>J,onIdChange:()=>ee});var i=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),s=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=a("./node_modules/@firebase/util/dist/index.esm2017.js"),x=a("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const o="@firebase/installations",r="0.6.4",c=1e4,_=`w:${r}`,d="FIS_v2",h="https://firebaseinstallations.googleapis.com/v1",l=36e5,f={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},u=new n.ErrorFactory("installations","Installations",f);function b(e){return e instanceof n.FirebaseError&&e.code.includes("request-failed")}function g({projectId:e}){return`${h}/projects/${e}/installations`}function m(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function p(e,t){const a=(await t.json()).error;return u.create("request-failed",{requestName:e,serverCode:a.code,serverMessage:a.message,serverStatus:a.status})}function v({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function w(e,{refreshToken:t}){const a=v(e);return a.append("Authorization",function(e){return`${d} ${e}`}(t)),a}async function S(e){const t=await e();return t.status>=500&&t.status<600?e():t}function y(e){return new Promise((t=>{setTimeout(t,e)}))}const I=/^[cdef][\w-]{21}$/,E="";function T(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){const t=(a=e,btoa(String.fromCharCode(...a)).replace(/\+/g,"-").replace(/\//g,"_"));var a;return t.substr(0,22)}(e);return I.test(t)?t:E}catch(e){return E}}function C(e){return`${e.appName}!${e.appId}`}const A=new Map;function P(e,t){const a=C(e);L(a,t),function(e,t){const a=D();a&&a.postMessage({key:e,fid:t});O()}(a,t)}function L(e,t){const a=A.get(e);if(a)for(const e of a)e(t)}let k=null;function D(){return!k&&"BroadcastChannel"in self&&(k=new BroadcastChannel("[Firebase] FID Change"),k.onmessage=e=>{L(e.data.key,e.data.fid)}),k}function O(){0===A.size&&k&&(k.close(),k=null)}const N="firebase-installations-database",B=1,M="firebase-installations-store";let z=null;function j(){return z||(z=(0,x.openDB)(N,B,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(M)}})),z}async function R(e,t){const a=C(e),i=(await j()).transaction(M,"readwrite"),s=i.objectStore(M),n=await s.get(a);return await s.put(t,a),await i.done,n&&n.fid===t.fid||P(e,t.fid),t}async function F(e){const t=C(e),a=(await j()).transaction(M,"readwrite");await a.objectStore(M).delete(t),await a.done}async function U(e,t){const a=C(e),i=(await j()).transaction(M,"readwrite"),s=i.objectStore(M),n=await s.get(a),x=t(n);return void 0===x?await s.delete(a):await s.put(x,a),await i.done,!x||n&&n.fid===x.fid||P(e,x.fid),x}async function H(e){let t;const a=await U(e.appConfig,(a=>{const i=function(e){const t=e||{fid:T(),registrationStatus:0};return V(t)}(a),s=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){return{installationEntry:t,registrationPromise:Promise.reject(u.create("app-offline"))}}const a={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(e,t){try{const a=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:a}){const i=g(e),s=v(e),n=t.getImmediate({optional:!0});if(n){const e=await n.getHeartbeatsHeader();e&&s.append("x-firebase-client",e)}const x={fid:a,authVersion:d,appId:e.appId,sdkVersion:_},o={method:"POST",headers:s,body:JSON.stringify(x)},r=await S((()=>fetch(i,o)));if(r.ok){const e=await r.json();return{fid:e.fid||a,registrationStatus:2,refreshToken:e.refreshToken,authToken:m(e.authToken)}}throw await p("Create Installation",r)}(e,t);return R(e.appConfig,a)}catch(a){throw b(a)&&409===a.customData.serverCode?await F(e.appConfig):await R(e.appConfig,{fid:t.fid,registrationStatus:0}),a}}(e,a);return{installationEntry:a,registrationPromise:i}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:G(e)}:{installationEntry:t}}(e,i);return t=s.registrationPromise,s.installationEntry}));return a.fid===E?{installationEntry:await t}:{installationEntry:a,registrationPromise:t}}async function G(e){let t=await W(e.appConfig);for(;1===t.registrationStatus;)await y(100),t=await W(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:a}=await H(e);return a||t}return t}function W(e){return U(e,(e=>{if(!e)throw u.create("installation-not-found");return V(e)}))}function V(e){return 1===(t=e).registrationStatus&&t.registrationTime+c<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function X({appConfig:e,heartbeatServiceProvider:t},a){const i=function(e,{fid:t}){return`${g(e)}/${t}/authTokens:generate`}(e,a),s=w(e,a),n=t.getImmediate({optional:!0});if(n){const e=await n.getHeartbeatsHeader();e&&s.append("x-firebase-client",e)}const x={installation:{sdkVersion:_,appId:e.appId}},o={method:"POST",headers:s,body:JSON.stringify(x)},r=await S((()=>fetch(i,o)));if(r.ok){return m(await r.json())}throw await p("Generate Auth Token",r)}async function Y(e,t=!1){let a;const i=await U(e.appConfig,(i=>{if(!K(i))throw u.create("not-registered");const s=i.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+l}(e)}(s))return i;if(1===s.requestStatus)return a=async function(e,t){let a=await $(e.appConfig);for(;1===a.authToken.requestStatus;)await y(100),a=await $(e.appConfig);const i=a.authToken;return 0===i.requestStatus?Y(e,t):i}(e,t),i;{if(!navigator.onLine)throw u.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(i);return a=async function(e,t){try{const a=await X(e,t),i=Object.assign(Object.assign({},t),{authToken:a});return await R(e.appConfig,i),a}catch(a){if(!b(a)||401!==a.customData.serverCode&&404!==a.customData.serverCode){const a=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await R(e.appConfig,a)}else await F(e.appConfig);throw a}}(e,t),t}}));return a?await a:i.authToken}function $(e){return U(e,(e=>{if(!K(e))throw u.create("not-registered");const t=e.authToken;return 1===(a=t).requestStatus&&a.requestTime+c<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var a}))}function K(e){return void 0!==e&&2===e.registrationStatus}async function q(e){const t=e,{installationEntry:a,registrationPromise:i}=await H(t);return i?i.catch(console.error):Y(t).catch(console.error),a.fid}async function J(e,t=!1){const a=e;await async function(e){const{registrationPromise:t}=await H(e);t&&await t}(a);return(await Y(a,t)).token}async function Z(e,t){const a=function(e,{fid:t}){return`${g(e)}/${t}`}(e,t),i={method:"DELETE",headers:w(e,t)},s=await S((()=>fetch(a,i)));if(!s.ok)throw await p("Delete Installation",s)}async function Q(e){const{appConfig:t}=e,a=await U(t,(e=>{if(!e||0!==e.registrationStatus)return e}));if(a){if(1===a.registrationStatus)throw u.create("delete-pending-registration");if(2===a.registrationStatus){if(!navigator.onLine)throw u.create("app-offline");await Z(t,a),await F(t)}}}function ee(e,t){const{appConfig:a}=e;return function(e,t){D();const a=C(e);let i=A.get(a);i||(i=new Set,A.set(a,i)),i.add(t)}(a,t),()=>{!function(e,t){const a=C(e),i=A.get(a);i&&(i.delete(t),0===i.size&&A.delete(a),O())}(a,t)}}function te(e=(0,i.getApp)()){return(0,i._getProvider)(e,"installations").getImmediate()}function ae(e){return u.create("missing-app-config-values",{valueName:e})}const ie="installations",se=e=>{const t=e.getProvider("app").getImmediate(),a=function(e){if(!e||!e.options)throw ae("App Configuration");if(!e.name)throw ae("App Name");const t=["projectId","apiKey","appId"];for(const a of t)if(!e.options[a])throw ae(a);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:a,heartbeatServiceProvider:(0,i._getProvider)(t,"heartbeat"),_delete:()=>Promise.resolve()}},ne=e=>{const t=e.getProvider("app").getImmediate(),a=(0,i._getProvider)(t,ie).getImmediate();return{getId:()=>q(a),getToken:e=>J(a,e)}};(0,i._registerComponent)(new s.Component(ie,se,"PUBLIC")),(0,i._registerComponent)(new s.Component("installations-internal",ne,"PRIVATE")),(0,i.registerVersion)(o,r),(0,i.registerVersion)(o,r,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(e,t,a)=>{a.r(t),a.d(t,{deleteDB:()=>n,openDB:()=>s,unwrap:()=>i.u,wrap:()=>i.w});var i=a("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function s(e,t,{blocked:a,upgrade:s,blocking:n,terminated:x}={}){const o=indexedDB.open(e,t),r=(0,i.w)(o);return s&&o.addEventListener("upgradeneeded",(e=>{s((0,i.w)(o.result),e.oldVersion,e.newVersion,(0,i.w)(o.transaction))})),a&&o.addEventListener("blocked",(()=>a())),r.then((e=>{x&&e.addEventListener("close",(()=>x())),n&&e.addEventListener("versionchange",(()=>n()))})).catch((()=>{})),r}function n(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);return t&&a.addEventListener("blocked",(()=>t())),(0,i.w)(a).then((()=>{}))}const x=["get","getKey","getAll","getAllKeys","count"],o=["put","add","delete","clear"],r=new Map;function c(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(r.get(t))return r.get(t);const a=t.replace(/FromIndex$/,""),i=t!==a,s=o.includes(a);if(!(a in(i?IDBIndex:IDBObjectStore).prototype)||!s&&!x.includes(a))return;const n=async function(e,...t){const n=this.transaction(e,s?"readwrite":"readonly");let x=n.store;return i&&(x=x.index(t.shift())),(await Promise.all([x[a](...t),s&&n.done]))[0]};return r.set(t,n),n}(0,i.r)((e=>({...e,get:(t,a,i)=>c(t,a)||e.get(t,a,i),has:(t,a)=>!!c(t,a)||e.has(t,a)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(e,t,a)=>{a.r(t),a.d(t,{a:()=>_,i:()=>i,r:()=>h,u:()=>b,w:()=>u});const i=(e,t)=>t.some((t=>e instanceof t));let s,n;const x=new WeakMap,o=new WeakMap,r=new WeakMap,c=new WeakMap,_=new WeakMap;let d={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("objectStoreNames"===t)return e.objectStoreNames||r.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function h(e){d=e(d)}function l(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(x.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...a){const i=e.call(b(this),t,...a);return r.set(i,t.sort?t.sort():[t]),u(i)}}function f(e){return"function"==typeof e?l(e):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,a)=>{const i=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",n),e.removeEventListener("abort",n)},s=()=>{t(),i()},n=()=>{a(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",s),e.addEventListener("error",n),e.addEventListener("abort",n)}));o.set(e,t)}(e),i(e,s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const i=()=>{e.removeEventListener("success",s),e.removeEventListener("error",n)},s=()=>{t(u(e.result)),i()},n=()=>{a(e.error),i()};e.addEventListener("success",s),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&x.set(t,e)})).catch((()=>{})),_.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=f(e);return t!==e&&(c.set(e,t),_.set(t,e)),t}const b=e=>_.get(e)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{LogLevel:()=>s,Logger:()=>c,setLogLevel:()=>_,setUserLogHandler:()=>d});const i=[];var s;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(s||(s={}));const n={debug:s.DEBUG,verbose:s.VERBOSE,info:s.INFO,warn:s.WARN,error:s.ERROR,silent:s.SILENT},x=s.INFO,o={[s.DEBUG]:"log",[s.VERBOSE]:"log",[s.INFO]:"info",[s.WARN]:"warn",[s.ERROR]:"error"},r=(e,t,...a)=>{if(t<e.logLevel)return;const i=(new Date).toISOString(),s=o[t];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[s](`[${i}]  ${e.name}:`,...a)};class c{constructor(e){this.name=e,this._logLevel=x,this._logHandler=r,this._userLogHandler=null,i.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in s))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?n[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,s.DEBUG,...e),this._logHandler(this,s.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,s.VERBOSE,...e),this._logHandler(this,s.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,s.INFO,...e),this._logHandler(this,s.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,s.WARN,...e),this._logHandler(this,s.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,s.ERROR,...e),this._logHandler(this,s.ERROR,...e)}}function _(e){i.forEach((t=>{t.setLogLevel(e)}))}function d(e,t){for(const a of i){let i=null;t&&t.level&&(i=n[t.level]),a.userLogHandler=null===e?null:(t,a,...n)=>{const x=n.map((e=>{if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((e=>e)).join(" ");a>=(null!=i?i:t.logLevel)&&e({level:s[a].toLowerCase(),message:x,args:n,type:t.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(e,t,a)=>{a.r(t),a.d(t,{getAnalytics:()=>i.getAnalytics,getGoogleAnalyticsClientId:()=>i.getGoogleAnalyticsClientId,initializeAnalytics:()=>i.initializeAnalytics,isSupported:()=>i.isSupported,logEvent:()=>i.logEvent,setAnalyticsCollectionEnabled:()=>i.setAnalyticsCollectionEnabled,setConsent:()=>i.setConsent,setCurrentScreen:()=>i.setCurrentScreen,setDefaultEventParameters:()=>i.setDefaultEventParameters,setUserId:()=>i.setUserId,setUserProperties:()=>i.setUserProperties,settings:()=>i.settings});var i=a("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(e,t,a)=>{a.r(t),a.d(t,{FirebaseError:()=>i.FirebaseError,SDK_VERSION:()=>i.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>i._DEFAULT_ENTRY_NAME,_addComponent:()=>i._addComponent,_addOrOverwriteComponent:()=>i._addOrOverwriteComponent,_apps:()=>i._apps,_clearComponents:()=>i._clearComponents,_components:()=>i._components,_getProvider:()=>i._getProvider,_registerComponent:()=>i._registerComponent,_removeServiceInstance:()=>i._removeServiceInstance,deleteApp:()=>i.deleteApp,getApp:()=>i.getApp,getApps:()=>i.getApps,initializeApp:()=>i.initializeApp,onLog:()=>i.onLog,registerVersion:()=>i.registerVersion,setLogLevel:()=>i.setLogLevel});var i=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,i.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(e,t,a)=>{a.r(t),a.d(t,{deleteDB:()=>n,openDB:()=>s,unwrap:()=>i.u,wrap:()=>i.w});var i=a("./node_modules/idb/build/wrap-idb-value.js");function s(e,t,{blocked:a,upgrade:s,blocking:n,terminated:x}={}){const o=indexedDB.open(e,t),r=(0,i.w)(o);return s&&o.addEventListener("upgradeneeded",(e=>{s((0,i.w)(o.result),e.oldVersion,e.newVersion,(0,i.w)(o.transaction),e)})),a&&o.addEventListener("blocked",(e=>a(e.oldVersion,e.newVersion,e))),r.then((e=>{x&&e.addEventListener("close",(()=>x())),n&&e.addEventListener("versionchange",(e=>n(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),r}function n(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);return t&&a.addEventListener("blocked",(e=>t(e.oldVersion,e))),(0,i.w)(a).then((()=>{}))}const x=["get","getKey","getAll","getAllKeys","count"],o=["put","add","delete","clear"],r=new Map;function c(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(r.get(t))return r.get(t);const a=t.replace(/FromIndex$/,""),i=t!==a,s=o.includes(a);if(!(a in(i?IDBIndex:IDBObjectStore).prototype)||!s&&!x.includes(a))return;const n=async function(e,...t){const n=this.transaction(e,s?"readwrite":"readonly");let x=n.store;return i&&(x=x.index(t.shift())),(await Promise.all([x[a](...t),s&&n.done]))[0]};return r.set(t,n),n}(0,i.r)((e=>({...e,get:(t,a,i)=>c(t,a)||e.get(t,a,i),has:(t,a)=>!!c(t,a)||e.has(t,a)})))},"./node_modules/idb/build/wrap-idb-value.js":(e,t,a)=>{a.r(t),a.d(t,{a:()=>_,i:()=>i,r:()=>h,u:()=>b,w:()=>u});const i=(e,t)=>t.some((t=>e instanceof t));let s,n;const x=new WeakMap,o=new WeakMap,r=new WeakMap,c=new WeakMap,_=new WeakMap;let d={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("objectStoreNames"===t)return e.objectStoreNames||r.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function h(e){d=e(d)}function l(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(n||(n=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(x.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...a){const i=e.call(b(this),t,...a);return r.set(i,t.sort?t.sort():[t]),u(i)}}function f(e){return"function"==typeof e?l(e):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,a)=>{const i=()=>{e.removeEventListener("complete",s),e.removeEventListener("error",n),e.removeEventListener("abort",n)},s=()=>{t(),i()},n=()=>{a(e.error||new DOMException("AbortError","AbortError")),i()};e.addEventListener("complete",s),e.addEventListener("error",n),e.addEventListener("abort",n)}));o.set(e,t)}(e),i(e,s||(s=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const i=()=>{e.removeEventListener("success",s),e.removeEventListener("error",n)},s=()=>{t(u(e.result)),i()},n=()=>{a(e.error),i()};e.addEventListener("success",s),e.addEventListener("error",n)}));return t.then((t=>{t instanceof IDBCursor&&x.set(t,e)})).catch((()=>{})),_.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=f(e);return t!==e&&(c.set(e,t),_.set(t,e)),t}const b=e=>_.get(e)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(e,t,a)=>{a.r(t),a.d(t,{Workbox:()=>l,messageSW:()=>i});try{self["workbox:window:4.3.1"]&&_()}catch(i){}var i=function(e,t){return new Promise((function(a){var i=new MessageChannel;i.port1.onmessage=function(e){return a(e.data)},e.postMessage(t,[i.port2])}))};function s(e,t){for(var a=0;a<t.length;a++){var i=t[a];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}try{self["workbox:core:4.3.1"]&&_()}catch(i){}var x=function(){var e=this;this.promise=new Promise((function(t,a){e.resolve=t,e.reject=a}))},o=function(e,t){return new URL(e,location).href===new URL(t,location).href},r=function(e,t){Object.assign(this,t,{type:e})};function c(e){return function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function d(e,t,a){return a?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function h(){}var l=function(e){var t,a;function _(t,a){var i;return void 0===a&&(a={}),(i=e.call(this)||this).t=t,i.i=a,i.o=0,i.u=new x,i.s=new x,i.h=new x,i.v=i.v.bind(n(n(i))),i.l=i.l.bind(n(n(i))),i.g=i.g.bind(n(n(i))),i.m=i.m.bind(n(n(i))),i}a=e,(t=_).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a;var l,f,u=_.prototype;return u.register=c((function(e){var t,a,i=this,s=(void 0===e?{}:e).immediate,n=void 0!==s&&s;return t=function(){return i.p=Boolean(navigator.serviceWorker.controller),i.P=i.R(),d(i.k(),(function(e){i.B=e,i.P&&(i.O=i.P,i.s.resolve(i.P),i.h.resolve(i.P),i.j(i.P),i.P.addEventListener("statechange",i.l,{once:!0}));var t=i.B.waiting;return t&&o(t.scriptURL,i.t)&&(i.O=t,Promise.resolve().then((function(){i.dispatchEvent(new r("waiting",{sw:t,wasWaitingBeforeRegister:!0}))}))),i.O&&i.u.resolve(i.O),i.B.addEventListener("updatefound",i.g),navigator.serviceWorker.addEventListener("controllerchange",i.m,{once:!0}),"BroadcastChannel"in self&&(i.C=new BroadcastChannel("workbox"),i.C.addEventListener("message",i.v)),navigator.serviceWorker.addEventListener("message",i.v),i.B}))},(a=function(){if(!n&&"complete"!==document.readyState)return function(e,t){return e&&e.then?e.then(h):Promise.resolve()}(new Promise((function(e){return addEventListener("load",e)})))}())&&a.then?a.then(t):t()})),u.getSW=c((function(){return this.O||this.u.promise})),u.messageSW=c((function(e){return d(this.getSW(),(function(t){return i(t,e)}))})),u.R=function(){var e=navigator.serviceWorker.controller;if(e&&o(e.scriptURL,this.t))return e},u.k=c((function(){var e=this;return function(e,t){try{var a=e()}catch(e){return t(e)}return a&&a.then?a.then(void 0,t):a}((function(){return d(navigator.serviceWorker.register(e.t,e.i),(function(t){return e.L=performance.now(),t}))}),(function(e){throw e}))})),u.j=function(e){i(e,{type:"WINDOW_READY",meta:"workbox-window"})},u.g=function(){var e=this.B.installing;this.o>0||!o(e.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=e,this.B.removeEventListener("updatefound",this.g)):(this.O=e,this.u.resolve(e)),++this.o,e.addEventListener("statechange",this.l)},u.l=function(e){var t=this,a=e.target,i=a.state,s=a===this.W,n=s?"external":"",x={sw:a,originalEvent:e};!s&&this.p&&(x.isUpdate=!0),this.dispatchEvent(new r(n+i,x)),"installed"===i?this._=setTimeout((function(){"installed"===i&&t.B.waiting===a&&t.dispatchEvent(new r(n+"waiting",x))}),200):"activating"===i&&(clearTimeout(this._),s||this.s.resolve(a))},u.m=function(e){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new r("controlling",{sw:t,originalEvent:e})),this.h.resolve(t))},u.v=function(e){var t=e.data;this.dispatchEvent(new r("message",{data:t,originalEvent:e}))},l=_,(f=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&s(l.prototype,f),_}(function(){function e(){this.D={}}var t=e.prototype;return t.addEventListener=function(e,t){this.T(e).add(t)},t.removeEventListener=function(e,t){this.T(e).delete(t)},t.dispatchEvent=function(e){e.target=this,this.T(e.type).forEach((function(t){return t(e)}))},t.T=function(e){return this.D[e]=this.D[e]||new Set},e}())}},t={};function a(i){var s=t[i];if(void 0!==s)return s.exports;var n=t[i]={exports:{}};return e[i](n,n.exports,a),n.exports}a.d=(e,t)=>{for(var i in t)a.o(t,i)&&!a.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var i={};(()=>{a.r(i);var e=a("./src/data/index.ts"),t=a("./src/sceneHandler/index.ts"),s=a("./src/constants/index.ts"),n=a("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),x=a("./src/Firebase/firebase-integration.ts"),o=a("./src/common/index.ts"),r=a("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;firebaseIntegration;constructor(e){this.lang=e,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new x.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){console.log(..._("2398043577_64_4_64_23_4","init"));const t=await o.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const a=await(0,e.getData)();this.majVersion=a.majversion,this.minVersion=a.minversion,this.dataModal=this.createDataModal(a),this.globalInitialization(a),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}logSessionStartFirebaseEvent(){let e=localStorage.getItem("lastSessionEndTime"),t=0;if(this.startSessionTime=(new Date).getTime(),e){let a=parseInt(e);isNaN(a)||(t=Math.abs((new Date).getTime()-a))}const a=parseFloat((t?t/864e5:0).toFixed(3)),i={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:a};this.firebaseIntegration.sendSessionStartEvent(i)}logSessionEndFirebaseEvent(){const e={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(e)}initializeCachedData(){const e=localStorage.getItem(s.IsCached);return e?new Map(JSON.parse(e)):new Map}async loadAndCacheFont(e,t){try{const a=await caches.open("fontCache");if(!await a.match(t)){const e=await fetch(t),i=await e.blob();await a.put(t,new Response(i))}const i=new FontFace(e,`url(${t}) format('truetype')`);await i.load(),document.fonts.add(i)}catch(e){console.error(`Failed to load and cache font: ${e}`)}}handleLoadingScreen=()=>{this.is_cached.get(o.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new n.Workbox("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(e.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async e=>{if(!e.ok)return void console.error("Failed to fetch the content file from the server!");const t=await e.json();console.log(..._("2398043577_192_14_192_45_4",t));const a=t.majversion+"."+t.minversion,i=localStorage.getItem("version"+o.lang.toLowerCase());if(console.log(..._("2398043577_200_14_200_77_4","No Cache Content version: "+a)),console.log(..._("2398043577_201_14_201_61_4","cached version :"+i)),a&&i!=a){console.log(..._("2398043577_206_16_206_69_4","Content version mismatch! Reloading..."));var n=JSON.parse(localStorage.getItem("is_cached"));console.log(..._("2398043577_208_16_208_52_4","current lang  "+o.lang));var x=n.filter((e=>!e.toString().includes(o.lang)));localStorage.setItem(s.IsCached,JSON.stringify(x)),localStorage.removeItem("version"+o.lang.toLowerCase()),caches.delete(o.lang),this.handleUpdateFoundMessage()}})).catch((e=>{console.error("Error fetching the content file: "+e)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(e){console.error(`Failed to register service worker: ${e}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(e){globalThis.aboutCompany=e.aboutCompany,globalThis.descriptionText=e.descriptionText}handleResize(e){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(e),this.setupCanvas(),this.reinitializeSceneHandler(e))}updateVersionInfoElement(e){this.is_cached.has(this.lang)&&o.Debugger.DevelopmentLink&&(e.majVersion&&e.minVersion?this.versionInfoElement.innerHTML+=`/j.v${e.majVersion}.${e.minVersion}`:e.version&&(this.versionInfoElement.innerHTML+=`/j.v${e.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(e){delete this.sceneHandler,this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}handleCachedScenario(e){this.updateVersionInfoElement(e),this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=e=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${e.data}%`),e.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(s.IsCached,JSON.stringify(Array.from(this.is_cached.entries())));const e={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(e),localStorage.setItem("version"+this.lang,this.majVersion+"."+this.minVersion),this.loadingElement.style.display="none",this.handleResize(this.dataModal),console.log(..._("2398043577_344_8_344_36_4","hide progress"))}this.progressBar.style.width=`${e.data}%`}};handleServiceWorkerMessage=e=>{"Loading"===e.data.msg?this.handleLoadingMessage(e.data):"Update Found"===e.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,o.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async e=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let e=s.AUDIO_URL_PRELOAD;return new Promise(((t,a)=>{const i=e.map((e=>(new r.AudioPlayer).preloadGameAudio(e)));Promise.all(i).then((()=>t())).catch((e=>{console.error("Error preloading audio:",e),a(e)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(o.lang);function c(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x277122=_0xc5ab;function _0x16b5(){var _0xa1823c=['_hasSetOnItsPath','_connecting','autoExpandLimit','sortProps','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','_treeNodePropertiesBeforeFullValue','getPrototypeOf','replace','pathToFileURL','unshift','date','_additionalMetadata','default','stringify','process','setter','_isSet','now','[object\\x20Set]','autoExpandPropertyCount','elements','stackTraceLimit','18372740bHyhYr','toLowerCase','_setNodeLabel','_dateToString','edge','_propertyName','63361icYNzh','array','_connected','index','Number','concat','expId','WebSocket','getOwnPropertyDescriptor','_numberRegExp','current','negativeInfinity','match','next.js','map','HTMLAllCollection','_getOwnPropertyDescriptor','toString',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'parse','autoExpand','props','webpack','positiveInfinity','join','disabledLog','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','Buffer','_socket','name','null','_setNodeExpandableState','method','root_exp','60591','[object\\x20BigInt]','undefined','nodeModules','_sendErrorMessage','depth','global','_addProperty','defineProperty','nan','_blacklistedProperty','\\x20browser','3606463hpwOgk','test','_allowedToSend','send','some','object','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','_HTMLAllCollection','unknown','split','indexOf','Map','_getOwnPropertyNames','_setNodePermissions','1726146029714','_isMap','_isUndefined','Symbol','_property','RegExp','astro','_ws','3123JAjneK','get','totalStrLength','[object\\x20Map]','_connectAttemptCount','host','[object\\x20Array]','Boolean','_getOwnPropertySymbols','sort','root_exp_id','unref','reload','','3ABiXMk','\\x20server','error','gateway.docker.internal','bigint','_console_ninja','negativeZero','getOwnPropertySymbols','cappedProps','string','hostname','_objectToString','_setNodeExpressionPath','resolveGetters','_setNodeId','_reconnectTimeout','Set','console','onmessage','endsWith','_Symbol','_undefined','_inBrowser','timeStamp','127.0.0.1','getOwnPropertyNames','_addFunctionsNode','elapsed','enumerable','isExpressionToEvaluate','node','function','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','data','https://tinyurl.com/37x8b79t','_allowedToConnectOnSend','_addObjectProperty','noFunctions','startsWith','_isNegativeZero','reduceLimits','3574804wGdXXu','bind','log','substr','_isPrimitiveWrapperType','_isPrimitiveType','create','_treeNodePropertiesAfterFullValue','_connectToHostNow','_keyStrRegExp','1.0.0','performance','getWebSocketClass','message','prototype','constructor','38408OqGOST','then','ws://','18FXuSSO','stack','port','angular','_consoleNinjaAllowedToStart','5141040bNQfuK','number','','_console_ninja_session','warn','boolean','location','_isArray','allStrLength','_attemptToReconnectShortly','slice','versions','origin','perf_hooks','strLength','length','_p_name','onopen','eventReceivedCallback','autoExpandMaxDepth','_regExpToString','count','getter','set','String','capped','forEach','hasOwnProperty','ws/index.js','path','parent','_processTreeNodeResult','dockerizedApp','_p_','NEGATIVE_INFINITY','logger\\x20websocket\\x20error','1','charAt','...','trace','_maxConnectAttemptCount','value','onerror','args','_hasSymbolPropertyOnItsPath','_inNextEdge','hits','_WebSocketClass','_capIfString','_sortProps','time','onclose','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','level','_webSocketErrorDocsLink',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.357\\\\node_modules\",'pop','env','valueOf','fromCharCode','_setNodeQueryPath','type','cappedElements','symbol','push','call','rootExpression','close','6452480sIuOir','hrtime','expressionsToEvaluate','serialize','readyState','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','autoExpandPreviousObjects','toUpperCase','_disposeWebsocket','_WebSocket','__es'+'Module','catch','_cleanNode','_type','NEXT_RUNTIME'];_0x16b5=function(){return _0xa1823c;};return _0x16b5();}(function(_0x3042d2,_0x53ea59){var _0x46f915=_0xc5ab,_0x23aa03=_0x3042d2();while(!![]){try{var _0x5b63f1=parseInt(_0x46f915(0x182))/0x1+parseInt(_0x46f915(0x1fd))/0x2*(parseInt(_0x46f915(0x1d4))/0x3)+-parseInt(_0x46f915(0x215))/0x4+-parseInt(_0x46f915(0x157))/0x5+-parseInt(_0x46f915(0x210))/0x6*(-parseInt(_0x46f915(0x1b0))/0x7)+-parseInt(_0x46f915(0x20d))/0x8*(parseInt(_0x46f915(0x1c6))/0x9)+parseInt(_0x46f915(0x17c))/0xa;if(_0x5b63f1===_0x53ea59)break;else _0x23aa03['push'](_0x23aa03['shift']());}catch(_0xcd60bd){_0x23aa03['push'](_0x23aa03['shift']());}}}(_0x16b5,0xf22d9));var K=Object[_0x277122(0x203)],Q=Object[_0x277122(0x1ac)],G=Object[_0x277122(0x18a)],ee=Object[_0x277122(0x1ed)],te=Object[_0x277122(0x16c)],ne=Object[_0x277122(0x20b)][_0x277122(0x12e)],re=(_0x371906,_0x55a3e2,_0x3af47c,_0x165ef5)=>{var _0x575e23=_0x277122;if(_0x55a3e2&&typeof _0x55a3e2==_0x575e23(0x1b5)||typeof _0x55a3e2=='function'){for(let _0x27bee9 of ee(_0x55a3e2))!ne[_0x575e23(0x154)](_0x371906,_0x27bee9)&&_0x27bee9!==_0x3af47c&&Q(_0x371906,_0x27bee9,{'get':()=>_0x55a3e2[_0x27bee9],'enumerable':!(_0x165ef5=G(_0x55a3e2,_0x27bee9))||_0x165ef5[_0x575e23(0x1f0)]});}return _0x371906;},V=(_0x169a06,_0x165248,_0x5c1060)=>(_0x5c1060=_0x169a06!=null?K(te(_0x169a06)):{},re(_0x165248||!_0x169a06||!_0x169a06[_0x277122(0x161)]?Q(_0x5c1060,_0x277122(0x172),{'value':_0x169a06,'enumerable':!0x0}):_0x5c1060,_0x169a06)),x=class{constructor(_0xba3f07,_0xbb405a,_0x4c765b,_0x167a4f,_0x38af46,_0x2c79b5){var _0x3fa3fb=_0x277122,_0x8aa9f5,_0x290311,_0x176214,_0xf92787;this[_0x3fa3fb(0x1aa)]=_0xba3f07,this[_0x3fa3fb(0x1cb)]=_0xbb405a,this[_0x3fa3fb(0x212)]=_0x4c765b,this[_0x3fa3fb(0x1a7)]=_0x167a4f,this[_0x3fa3fb(0x133)]=_0x38af46,this[_0x3fa3fb(0x125)]=_0x2c79b5,this[_0x3fa3fb(0x1b2)]=!0x0,this['_allowedToConnectOnSend']=!0x0,this[_0x3fa3fb(0x184)]=!0x1,this[_0x3fa3fb(0x167)]=!0x1,this['_inNextEdge']=((_0x290311=(_0x8aa9f5=_0xba3f07['process'])==null?void 0x0:_0x8aa9f5[_0x3fa3fb(0x14c)])==null?void 0x0:_0x290311[_0x3fa3fb(0x165)])===_0x3fa3fb(0x180),this[_0x3fa3fb(0x1ea)]=!((_0xf92787=(_0x176214=this[_0x3fa3fb(0x1aa)][_0x3fa3fb(0x174)])==null?void 0x0:_0x176214[_0x3fa3fb(0x220)])!=null&&_0xf92787[_0x3fa3fb(0x1f2)])&&!this[_0x3fa3fb(0x140)],this[_0x3fa3fb(0x142)]=null,this[_0x3fa3fb(0x1ca)]=0x0,this[_0x3fa3fb(0x13b)]=0x14,this[_0x3fa3fb(0x149)]=_0x3fa3fb(0x1f6),this['_sendErrorMessage']=(this[_0x3fa3fb(0x1ea)]?'Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20':_0x3fa3fb(0x15c))+this[_0x3fa3fb(0x149)];}async['getWebSocketClass'](){var _0x166d81=_0x277122,_0x4a3567,_0x31201e;if(this['_WebSocketClass'])return this[_0x166d81(0x142)];let _0x15eef9;if(this[_0x166d81(0x1ea)]||this[_0x166d81(0x140)])_0x15eef9=this['global'][_0x166d81(0x189)];else{if((_0x4a3567=this[_0x166d81(0x1aa)][_0x166d81(0x174)])!=null&&_0x4a3567[_0x166d81(0x160)])_0x15eef9=(_0x31201e=this[_0x166d81(0x1aa)][_0x166d81(0x174)])==null?void 0x0:_0x31201e[_0x166d81(0x160)];else try{let _0x4e48a3=await import(_0x166d81(0x130));_0x15eef9=(await import((await import('url'))[_0x166d81(0x16e)](_0x4e48a3[_0x166d81(0x19a)](this['nodeModules'],_0x166d81(0x12f)))['toString']()))[_0x166d81(0x172)];}catch{try{_0x15eef9=require(require(_0x166d81(0x130))[_0x166d81(0x19a)](this[_0x166d81(0x1a7)],'ws'));}catch{throw new Error(_0x166d81(0x147));}}}return this[_0x166d81(0x142)]=_0x15eef9,_0x15eef9;}[_0x277122(0x205)](){var _0x51dc96=_0x277122;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this[_0x51dc96(0x13b)]||(this[_0x51dc96(0x1f7)]=!0x1,this[_0x51dc96(0x167)]=!0x0,this[_0x51dc96(0x1ca)]++,this[_0x51dc96(0x1c5)]=new Promise((_0x58c90f,_0x112630)=>{var _0x4c12d5=_0x51dc96;this[_0x4c12d5(0x209)]()[_0x4c12d5(0x20e)](_0x40518d=>{var _0x1b75d4=_0x4c12d5;let _0x49f47e=new _0x40518d(_0x1b75d4(0x20f)+(!this[_0x1b75d4(0x1ea)]&&this[_0x1b75d4(0x133)]?_0x1b75d4(0x1d7):this[_0x1b75d4(0x1cb)])+':'+this[_0x1b75d4(0x212)]);_0x49f47e[_0x1b75d4(0x13d)]=()=>{var _0x4ba6ce=_0x1b75d4;this[_0x4ba6ce(0x1b2)]=!0x1,this[_0x4ba6ce(0x15f)](_0x49f47e),this[_0x4ba6ce(0x21e)](),_0x112630(new Error(_0x4ba6ce(0x136)));},_0x49f47e[_0x1b75d4(0x124)]=()=>{var _0x8fc509=_0x1b75d4;this[_0x8fc509(0x1ea)]||_0x49f47e['_socket']&&_0x49f47e[_0x8fc509(0x19e)][_0x8fc509(0x1d1)]&&_0x49f47e[_0x8fc509(0x19e)][_0x8fc509(0x1d1)](),_0x58c90f(_0x49f47e);},_0x49f47e['onclose']=()=>{var _0x163a4c=_0x1b75d4;this[_0x163a4c(0x1f7)]=!0x0,this[_0x163a4c(0x15f)](_0x49f47e),this[_0x163a4c(0x21e)]();},_0x49f47e[_0x1b75d4(0x1e6)]=_0x36072=>{var _0x53acf1=_0x1b75d4;try{if(!(_0x36072!=null&&_0x36072[_0x53acf1(0x1f5)])||!this[_0x53acf1(0x125)])return;let _0x23adf4=JSON[_0x53acf1(0x195)](_0x36072['data']);this[_0x53acf1(0x125)](_0x23adf4[_0x53acf1(0x1a2)],_0x23adf4['args'],this[_0x53acf1(0x1aa)],this[_0x53acf1(0x1ea)]);}catch{}};})[_0x4c12d5(0x20e)](_0x261db6=>(this[_0x4c12d5(0x184)]=!0x0,this['_connecting']=!0x1,this['_allowedToConnectOnSend']=!0x1,this['_allowedToSend']=!0x0,this['_connectAttemptCount']=0x0,_0x261db6))[_0x4c12d5(0x162)](_0xd17c7c=>(this[_0x4c12d5(0x184)]=!0x1,this['_connecting']=!0x1,console['warn'](_0x4c12d5(0x1f4)+this[_0x4c12d5(0x149)]),_0x112630(new Error('failed\\x20to\\x20connect\\x20to\\x20host:\\x20'+(_0xd17c7c&&_0xd17c7c[_0x4c12d5(0x20a)])))));}));}[_0x277122(0x15f)](_0x2d53d4){var _0x112345=_0x277122;this[_0x112345(0x184)]=!0x1,this[_0x112345(0x167)]=!0x1;try{_0x2d53d4[_0x112345(0x146)]=null,_0x2d53d4[_0x112345(0x13d)]=null,_0x2d53d4[_0x112345(0x124)]=null;}catch{}try{_0x2d53d4[_0x112345(0x15b)]<0x2&&_0x2d53d4[_0x112345(0x156)]();}catch{}}['_attemptToReconnectShortly'](){var _0x5da88c=_0x277122;clearTimeout(this[_0x5da88c(0x1e3)]),!(this[_0x5da88c(0x1ca)]>=this[_0x5da88c(0x13b)])&&(this[_0x5da88c(0x1e3)]=setTimeout(()=>{var _0x3b3ae8=_0x5da88c,_0x36cd16;this[_0x3b3ae8(0x184)]||this[_0x3b3ae8(0x167)]||(this['_connectToHostNow'](),(_0x36cd16=this['_ws'])==null||_0x36cd16[_0x3b3ae8(0x162)](()=>this[_0x3b3ae8(0x21e)]()));},0x1f4),this[_0x5da88c(0x1e3)][_0x5da88c(0x1d1)]&&this['_reconnectTimeout'][_0x5da88c(0x1d1)]());}async[_0x277122(0x1b3)](_0x441b31){var _0x3de3cf=_0x277122;try{if(!this[_0x3de3cf(0x1b2)])return;this[_0x3de3cf(0x1f7)]&&this['_connectToHostNow'](),(await this[_0x3de3cf(0x1c5)])[_0x3de3cf(0x1b3)](JSON[_0x3de3cf(0x173)](_0x441b31));}catch(_0x5a238c){console[_0x3de3cf(0x219)](this[_0x3de3cf(0x1a8)]+':\\x20'+(_0x5a238c&&_0x5a238c[_0x3de3cf(0x20a)])),this[_0x3de3cf(0x1b2)]=!0x1,this[_0x3de3cf(0x21e)]();}}};function q(_0x436ba9,_0x141603,_0x5dc200,_0x26756b,_0x1ff14a,_0x6a31ab,_0x390747,_0x39e67e=ie){var _0x4f2c74=_0x277122;let _0x2776b7=_0x5dc200[_0x4f2c74(0x1b9)](',')[_0x4f2c74(0x190)](_0x4893f9=>{var _0x262543=_0x4f2c74,_0x5cc178,_0x5c0c95,_0x273a6c,_0x11f45d;try{if(!_0x436ba9[_0x262543(0x218)]){let _0x5497ef=((_0x5c0c95=(_0x5cc178=_0x436ba9[_0x262543(0x174)])==null?void 0x0:_0x5cc178[_0x262543(0x220)])==null?void 0x0:_0x5c0c95[_0x262543(0x1f2)])||((_0x11f45d=(_0x273a6c=_0x436ba9['process'])==null?void 0x0:_0x273a6c['env'])==null?void 0x0:_0x11f45d[_0x262543(0x165)])===_0x262543(0x180);(_0x1ff14a==='next.js'||_0x1ff14a==='remix'||_0x1ff14a===_0x262543(0x1c4)||_0x1ff14a===_0x262543(0x213))&&(_0x1ff14a+=_0x5497ef?_0x262543(0x1d5):_0x262543(0x1af)),_0x436ba9[_0x262543(0x218)]={'id':+new Date(),'tool':_0x1ff14a},_0x390747&&_0x1ff14a&&!_0x5497ef&&console[_0x262543(0x1ff)](_0x262543(0x19c)+(_0x1ff14a[_0x262543(0x138)](0x0)[_0x262543(0x15e)]()+_0x1ff14a[_0x262543(0x200)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x262543(0x1b6));}let _0x5903dc=new x(_0x436ba9,_0x141603,_0x4893f9,_0x26756b,_0x6a31ab,_0x39e67e);return _0x5903dc['send'][_0x262543(0x1fe)](_0x5903dc);}catch(_0x3862d9){return console[_0x262543(0x219)](_0x262543(0x16a),_0x3862d9&&_0x3862d9[_0x262543(0x20a)]),()=>{};}});return _0x105a50=>_0x2776b7['forEach'](_0xb52cb0=>_0xb52cb0(_0x105a50));}function ie(_0x57c726,_0x25e1a6,_0x4b918e,_0x393acd){var _0x30aa88=_0x277122;_0x393acd&&_0x57c726===_0x30aa88(0x1d2)&&_0x4b918e[_0x30aa88(0x21b)][_0x30aa88(0x1d2)]();}function b(_0x51a80f){var _0x22a25f=_0x277122,_0x403a3b,_0x191ef6;let _0x1cc190=function(_0x2c9f39,_0x181012){return _0x181012-_0x2c9f39;},_0x4a578f;if(_0x51a80f['performance'])_0x4a578f=function(){var _0x3c9dfa=_0xc5ab;return _0x51a80f[_0x3c9dfa(0x208)]['now']();};else{if(_0x51a80f[_0x22a25f(0x174)]&&_0x51a80f[_0x22a25f(0x174)][_0x22a25f(0x158)]&&((_0x191ef6=(_0x403a3b=_0x51a80f['process'])==null?void 0x0:_0x403a3b[_0x22a25f(0x14c)])==null?void 0x0:_0x191ef6[_0x22a25f(0x165)])!==_0x22a25f(0x180))_0x4a578f=function(){var _0x2444fc=_0x22a25f;return _0x51a80f[_0x2444fc(0x174)][_0x2444fc(0x158)]();},_0x1cc190=function(_0x429c4e,_0x2e24d2){return 0x3e8*(_0x2e24d2[0x0]-_0x429c4e[0x0])+(_0x2e24d2[0x1]-_0x429c4e[0x1])/0xf4240;};else try{let {performance:_0x10386f}=require(_0x22a25f(0x120));_0x4a578f=function(){return _0x10386f['now']();};}catch{_0x4a578f=function(){return+new Date();};}}return{'elapsed':_0x1cc190,'timeStamp':_0x4a578f,'now':()=>Date['now']()};}function _0xc5ab(_0x2fbc92,_0x10d741){var _0x16b566=_0x16b5();return _0xc5ab=function(_0xc5ab16,_0x5acc82){_0xc5ab16=_0xc5ab16-0x120;var _0x534c80=_0x16b566[_0xc5ab16];return _0x534c80;},_0xc5ab(_0x2fbc92,_0x10d741);}function H(_0x410216,_0xd35cc7,_0xbf32c5){var _0x14cd8d=_0x277122,_0x16579a,_0x23a1e8,_0x5506c0,_0x31ef37,_0x53bbed;if(_0x410216[_0x14cd8d(0x214)]!==void 0x0)return _0x410216[_0x14cd8d(0x214)];let _0xdc0a0b=((_0x23a1e8=(_0x16579a=_0x410216[_0x14cd8d(0x174)])==null?void 0x0:_0x16579a['versions'])==null?void 0x0:_0x23a1e8[_0x14cd8d(0x1f2)])||((_0x31ef37=(_0x5506c0=_0x410216[_0x14cd8d(0x174)])==null?void 0x0:_0x5506c0[_0x14cd8d(0x14c)])==null?void 0x0:_0x31ef37['NEXT_RUNTIME'])===_0x14cd8d(0x180);function _0x164729(_0x2cc8cb){var _0x5dd6b2=_0x14cd8d;if(_0x2cc8cb[_0x5dd6b2(0x1fa)]('/')&&_0x2cc8cb[_0x5dd6b2(0x1e7)]('/')){let _0xc83b4c=new RegExp(_0x2cc8cb[_0x5dd6b2(0x21f)](0x1,-0x1));return _0x71c0d3=>_0xc83b4c[_0x5dd6b2(0x1b1)](_0x71c0d3);}else{if(_0x2cc8cb['includes']('*')||_0x2cc8cb['includes']('?')){let _0x3874c4=new RegExp('^'+_0x2cc8cb[_0x5dd6b2(0x16d)](/\\./g,String[_0x5dd6b2(0x14e)](0x5c)+'.')[_0x5dd6b2(0x16d)](/\\*/g,'.*')[_0x5dd6b2(0x16d)](/\\?/g,'.')+String[_0x5dd6b2(0x14e)](0x24));return _0x48cfa3=>_0x3874c4[_0x5dd6b2(0x1b1)](_0x48cfa3);}else return _0x4e1229=>_0x4e1229===_0x2cc8cb;}}let _0x12eb1d=_0xd35cc7[_0x14cd8d(0x190)](_0x164729);return _0x410216[_0x14cd8d(0x214)]=_0xdc0a0b||!_0xd35cc7,!_0x410216[_0x14cd8d(0x214)]&&((_0x53bbed=_0x410216['location'])==null?void 0x0:_0x53bbed[_0x14cd8d(0x1de)])&&(_0x410216[_0x14cd8d(0x214)]=_0x12eb1d[_0x14cd8d(0x1b4)](_0x59667b=>_0x59667b(_0x410216[_0x14cd8d(0x21b)][_0x14cd8d(0x1de)]))),_0x410216['_consoleNinjaAllowedToStart'];}function X(_0x2b666a,_0x4cdb6e,_0x2e19ea,_0x489f64){var _0xc83fb0=_0x277122;_0x2b666a=_0x2b666a,_0x4cdb6e=_0x4cdb6e,_0x2e19ea=_0x2e19ea,_0x489f64=_0x489f64;let _0x341dd5=b(_0x2b666a),_0xb59bb1=_0x341dd5[_0xc83fb0(0x1ef)],_0x7ae3d3=_0x341dd5[_0xc83fb0(0x1eb)];class _0x3433bd{constructor(){var _0x5f27e6=_0xc83fb0;this[_0x5f27e6(0x206)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x5f27e6(0x18b)]=/^(0|[1-9][0-9]*)$/,this['_quotedRegExp']=/'([^\\\\']|\\\\')*'/,this[_0x5f27e6(0x1e9)]=_0x2b666a[_0x5f27e6(0x1a6)],this['_HTMLAllCollection']=_0x2b666a['HTMLAllCollection'],this[_0x5f27e6(0x192)]=Object[_0x5f27e6(0x18a)],this[_0x5f27e6(0x1bc)]=Object[_0x5f27e6(0x1ed)],this[_0x5f27e6(0x1e8)]=_0x2b666a[_0x5f27e6(0x1c1)],this[_0x5f27e6(0x127)]=RegExp[_0x5f27e6(0x20b)][_0x5f27e6(0x193)],this[_0x5f27e6(0x17f)]=Date[_0x5f27e6(0x20b)][_0x5f27e6(0x193)];}['serialize'](_0x2974e5,_0x3545b9,_0x3efb50,_0x496b06){var _0x481a9d=_0xc83fb0,_0x3b5534=this,_0x243f09=_0x3efb50['autoExpand'];function _0x29e913(_0x52177f,_0xff78c8,_0x71f387){var _0x3afd02=_0xc5ab;_0xff78c8['type']=_0x3afd02(0x1b8),_0xff78c8[_0x3afd02(0x1d6)]=_0x52177f[_0x3afd02(0x20a)],_0x8497a7=_0x71f387[_0x3afd02(0x1f2)][_0x3afd02(0x18c)],_0x71f387[_0x3afd02(0x1f2)][_0x3afd02(0x18c)]=_0xff78c8,_0x3b5534[_0x3afd02(0x16b)](_0xff78c8,_0x71f387);}try{_0x3efb50[_0x481a9d(0x148)]++,_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x15d)][_0x481a9d(0x153)](_0x3545b9);var _0xd6bb22,_0x3aea1c,_0x31a2fd,_0x182842,_0x6ddd0=[],_0xab73e6=[],_0x4bcc75,_0xcd237d=this['_type'](_0x3545b9),_0x2ce24b=_0xcd237d===_0x481a9d(0x183),_0x22b2e9=!0x1,_0x3d29d9=_0xcd237d===_0x481a9d(0x1f3),_0x53ba8c=this[_0x481a9d(0x202)](_0xcd237d),_0x4af369=this[_0x481a9d(0x201)](_0xcd237d),_0x22bb70=_0x53ba8c||_0x4af369,_0x286ee0={},_0x1fe6b7=0x0,_0x598e0b=!0x1,_0x8497a7,_0x31a94=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x3efb50['depth']){if(_0x2ce24b){if(_0x3aea1c=_0x3545b9['length'],_0x3aea1c>_0x3efb50[_0x481a9d(0x17a)]){for(_0x31a2fd=0x0,_0x182842=_0x3efb50[_0x481a9d(0x17a)],_0xd6bb22=_0x31a2fd;_0xd6bb22<_0x182842;_0xd6bb22++)_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1ab)](_0x6ddd0,_0x3545b9,_0xcd237d,_0xd6bb22,_0x3efb50));_0x2974e5[_0x481a9d(0x151)]=!0x0;}else{for(_0x31a2fd=0x0,_0x182842=_0x3aea1c,_0xd6bb22=_0x31a2fd;_0xd6bb22<_0x182842;_0xd6bb22++)_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1ab)](_0x6ddd0,_0x3545b9,_0xcd237d,_0xd6bb22,_0x3efb50));}_0x3efb50[_0x481a9d(0x179)]+=_0xab73e6[_0x481a9d(0x122)];}if(!(_0xcd237d===_0x481a9d(0x1a0)||_0xcd237d===_0x481a9d(0x1a6))&&!_0x53ba8c&&_0xcd237d!==_0x481a9d(0x12b)&&_0xcd237d!==_0x481a9d(0x19d)&&_0xcd237d!=='bigint'){var _0x4aa6af=_0x496b06['props']||_0x3efb50['props'];if(this[_0x481a9d(0x176)](_0x3545b9)?(_0xd6bb22=0x0,_0x3545b9[_0x481a9d(0x12d)](function(_0x5c22f4){var _0x5623fa=_0x481a9d;if(_0x1fe6b7++,_0x3efb50[_0x5623fa(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;return;}if(!_0x3efb50[_0x5623fa(0x1f1)]&&_0x3efb50[_0x5623fa(0x196)]&&_0x3efb50[_0x5623fa(0x179)]>_0x3efb50[_0x5623fa(0x168)]){_0x598e0b=!0x0;return;}_0xab73e6[_0x5623fa(0x153)](_0x3b5534['_addProperty'](_0x6ddd0,_0x3545b9,'Set',_0xd6bb22++,_0x3efb50,function(_0x1fd311){return function(){return _0x1fd311;};}(_0x5c22f4)));})):this[_0x481a9d(0x1bf)](_0x3545b9)&&_0x3545b9['forEach'](function(_0x55efdb,_0xab32c5){var _0x2c0851=_0x481a9d;if(_0x1fe6b7++,_0x3efb50[_0x2c0851(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;return;}if(!_0x3efb50['isExpressionToEvaluate']&&_0x3efb50[_0x2c0851(0x196)]&&_0x3efb50['autoExpandPropertyCount']>_0x3efb50[_0x2c0851(0x168)]){_0x598e0b=!0x0;return;}var _0x20c352=_0xab32c5[_0x2c0851(0x193)]();_0x20c352[_0x2c0851(0x122)]>0x64&&(_0x20c352=_0x20c352['slice'](0x0,0x64)+_0x2c0851(0x139)),_0xab73e6['push'](_0x3b5534[_0x2c0851(0x1ab)](_0x6ddd0,_0x3545b9,'Map',_0x20c352,_0x3efb50,function(_0x20b4d2){return function(){return _0x20b4d2;};}(_0x55efdb)));}),!_0x22b2e9){try{for(_0x4bcc75 in _0x3545b9)if(!(_0x2ce24b&&_0x31a94[_0x481a9d(0x1b1)](_0x4bcc75))&&!this[_0x481a9d(0x1ae)](_0x3545b9,_0x4bcc75,_0x3efb50)){if(_0x1fe6b7++,_0x3efb50[_0x481a9d(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;break;}if(!_0x3efb50[_0x481a9d(0x1f1)]&&_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x179)]>_0x3efb50['autoExpandLimit']){_0x598e0b=!0x0;break;}_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1f8)](_0x6ddd0,_0x286ee0,_0x3545b9,_0xcd237d,_0x4bcc75,_0x3efb50));}}catch{}if(_0x286ee0['_p_length']=!0x0,_0x3d29d9&&(_0x286ee0[_0x481a9d(0x123)]=!0x0),!_0x598e0b){var _0x55fd1e=[][_0x481a9d(0x187)](this[_0x481a9d(0x1bc)](_0x3545b9))[_0x481a9d(0x187)](this['_getOwnPropertySymbols'](_0x3545b9));for(_0xd6bb22=0x0,_0x3aea1c=_0x55fd1e['length'];_0xd6bb22<_0x3aea1c;_0xd6bb22++)if(_0x4bcc75=_0x55fd1e[_0xd6bb22],!(_0x2ce24b&&_0x31a94[_0x481a9d(0x1b1)](_0x4bcc75[_0x481a9d(0x193)]()))&&!this['_blacklistedProperty'](_0x3545b9,_0x4bcc75,_0x3efb50)&&!_0x286ee0[_0x481a9d(0x134)+_0x4bcc75[_0x481a9d(0x193)]()]){if(_0x1fe6b7++,_0x3efb50[_0x481a9d(0x179)]++,_0x1fe6b7>_0x4aa6af){_0x598e0b=!0x0;break;}if(!_0x3efb50[_0x481a9d(0x1f1)]&&_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x179)]>_0x3efb50['autoExpandLimit']){_0x598e0b=!0x0;break;}_0xab73e6[_0x481a9d(0x153)](_0x3b5534[_0x481a9d(0x1f8)](_0x6ddd0,_0x286ee0,_0x3545b9,_0xcd237d,_0x4bcc75,_0x3efb50));}}}}}if(_0x2974e5[_0x481a9d(0x150)]=_0xcd237d,_0x22bb70?(_0x2974e5[_0x481a9d(0x13c)]=_0x3545b9['valueOf'](),this[_0x481a9d(0x143)](_0xcd237d,_0x2974e5,_0x3efb50,_0x496b06)):_0xcd237d===_0x481a9d(0x170)?_0x2974e5['value']=this[_0x481a9d(0x17f)][_0x481a9d(0x154)](_0x3545b9):_0xcd237d===_0x481a9d(0x1d8)?_0x2974e5[_0x481a9d(0x13c)]=_0x3545b9[_0x481a9d(0x193)]():_0xcd237d===_0x481a9d(0x1c3)?_0x2974e5['value']=this[_0x481a9d(0x127)][_0x481a9d(0x154)](_0x3545b9):_0xcd237d==='symbol'&&this['_Symbol']?_0x2974e5[_0x481a9d(0x13c)]=this[_0x481a9d(0x1e8)][_0x481a9d(0x20b)][_0x481a9d(0x193)][_0x481a9d(0x154)](_0x3545b9):!_0x3efb50[_0x481a9d(0x1a9)]&&!(_0xcd237d===_0x481a9d(0x1a0)||_0xcd237d===_0x481a9d(0x1a6))&&(delete _0x2974e5[_0x481a9d(0x13c)],_0x2974e5[_0x481a9d(0x12c)]=!0x0),_0x598e0b&&(_0x2974e5[_0x481a9d(0x1dc)]=!0x0),_0x8497a7=_0x3efb50[_0x481a9d(0x1f2)]['current'],_0x3efb50[_0x481a9d(0x1f2)][_0x481a9d(0x18c)]=_0x2974e5,this[_0x481a9d(0x16b)](_0x2974e5,_0x3efb50),_0xab73e6[_0x481a9d(0x122)]){for(_0xd6bb22=0x0,_0x3aea1c=_0xab73e6[_0x481a9d(0x122)];_0xd6bb22<_0x3aea1c;_0xd6bb22++)_0xab73e6[_0xd6bb22](_0xd6bb22);}_0x6ddd0[_0x481a9d(0x122)]&&(_0x2974e5[_0x481a9d(0x197)]=_0x6ddd0);}catch(_0x202c18){_0x29e913(_0x202c18,_0x2974e5,_0x3efb50);}return this[_0x481a9d(0x171)](_0x3545b9,_0x2974e5),this[_0x481a9d(0x204)](_0x2974e5,_0x3efb50),_0x3efb50[_0x481a9d(0x1f2)][_0x481a9d(0x18c)]=_0x8497a7,_0x3efb50[_0x481a9d(0x148)]--,_0x3efb50[_0x481a9d(0x196)]=_0x243f09,_0x3efb50[_0x481a9d(0x196)]&&_0x3efb50[_0x481a9d(0x15d)][_0x481a9d(0x14b)](),_0x2974e5;}[_0xc83fb0(0x1ce)](_0x453c25){var _0x1c6ef1=_0xc83fb0;return Object[_0x1c6ef1(0x1db)]?Object[_0x1c6ef1(0x1db)](_0x453c25):[];}[_0xc83fb0(0x176)](_0x26e14a){var _0x5c57ea=_0xc83fb0;return!!(_0x26e14a&&_0x2b666a['Set']&&this['_objectToString'](_0x26e14a)===_0x5c57ea(0x178)&&_0x26e14a[_0x5c57ea(0x12d)]);}[_0xc83fb0(0x1ae)](_0x3e947d,_0x4d1e75,_0x149612){var _0x3cf397=_0xc83fb0;return _0x149612[_0x3cf397(0x1f9)]?typeof _0x3e947d[_0x4d1e75]=='function':!0x1;}[_0xc83fb0(0x164)](_0x132cfb){var _0x123d06=_0xc83fb0,_0x1f311c='';return _0x1f311c=typeof _0x132cfb,_0x1f311c===_0x123d06(0x1b5)?this[_0x123d06(0x1df)](_0x132cfb)===_0x123d06(0x1cc)?_0x1f311c='array':this[_0x123d06(0x1df)](_0x132cfb)==='[object\\x20Date]'?_0x1f311c=_0x123d06(0x170):this[_0x123d06(0x1df)](_0x132cfb)===_0x123d06(0x1a5)?_0x1f311c=_0x123d06(0x1d8):_0x132cfb===null?_0x1f311c=_0x123d06(0x1a0):_0x132cfb[_0x123d06(0x20c)]&&(_0x1f311c=_0x132cfb[_0x123d06(0x20c)][_0x123d06(0x19f)]||_0x1f311c):_0x1f311c===_0x123d06(0x1a6)&&this[_0x123d06(0x1b7)]&&_0x132cfb instanceof this[_0x123d06(0x1b7)]&&(_0x1f311c=_0x123d06(0x191)),_0x1f311c;}['_objectToString'](_0xe15424){var _0x2dfa4f=_0xc83fb0;return Object['prototype'][_0x2dfa4f(0x193)][_0x2dfa4f(0x154)](_0xe15424);}[_0xc83fb0(0x202)](_0x1c7e27){var _0x437108=_0xc83fb0;return _0x1c7e27===_0x437108(0x21a)||_0x1c7e27==='string'||_0x1c7e27===_0x437108(0x216);}[_0xc83fb0(0x201)](_0x2daba1){var _0x5ae4a7=_0xc83fb0;return _0x2daba1===_0x5ae4a7(0x1cd)||_0x2daba1===_0x5ae4a7(0x12b)||_0x2daba1===_0x5ae4a7(0x186);}[_0xc83fb0(0x1ab)](_0x20f9a1,_0x327b4a,_0xbf4be6,_0x48d02d,_0x1f56f9,_0x5da251){var _0x4f6931=this;return function(_0x5c3cf3){var _0x7d5aec=_0xc5ab,_0xfcd658=_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x18c)],_0xb428d1=_0x1f56f9[_0x7d5aec(0x1f2)]['index'],_0x50ca98=_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)];_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)]=_0xfcd658,_0x1f56f9[_0x7d5aec(0x1f2)]['index']=typeof _0x48d02d=='number'?_0x48d02d:_0x5c3cf3,_0x20f9a1[_0x7d5aec(0x153)](_0x4f6931[_0x7d5aec(0x1c2)](_0x327b4a,_0xbf4be6,_0x48d02d,_0x1f56f9,_0x5da251)),_0x1f56f9[_0x7d5aec(0x1f2)][_0x7d5aec(0x131)]=_0x50ca98,_0x1f56f9[_0x7d5aec(0x1f2)]['index']=_0xb428d1;};}[_0xc83fb0(0x1f8)](_0x2a642f,_0x33d34f,_0x48f024,_0x3bdd75,_0x155f6d,_0x230db2,_0x20acf6){var _0x58110a=_0xc83fb0,_0x145cac=this;return _0x33d34f[_0x58110a(0x134)+_0x155f6d[_0x58110a(0x193)]()]=!0x0,function(_0x4c8a4a){var _0x1eeefc=_0x58110a,_0x3e6bce=_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x18c)],_0x57c08c=_0x230db2[_0x1eeefc(0x1f2)]['index'],_0x3070c4=_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)];_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)]=_0x3e6bce,_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x185)]=_0x4c8a4a,_0x2a642f[_0x1eeefc(0x153)](_0x145cac['_property'](_0x48f024,_0x3bdd75,_0x155f6d,_0x230db2,_0x20acf6)),_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x131)]=_0x3070c4,_0x230db2[_0x1eeefc(0x1f2)][_0x1eeefc(0x185)]=_0x57c08c;};}[_0xc83fb0(0x1c2)](_0x4bb40b,_0x2412f1,_0x415f45,_0x3d4542,_0xa974f0){var _0x2cc493=_0xc83fb0,_0x36d7ed=this;_0xa974f0||(_0xa974f0=function(_0x576be5,_0x26eb48){return _0x576be5[_0x26eb48];});var _0x4d18a9=_0x415f45['toString'](),_0x32e6ca=_0x3d4542[_0x2cc493(0x159)]||{},_0x4a8ccb=_0x3d4542[_0x2cc493(0x1a9)],_0x11c1e4=_0x3d4542[_0x2cc493(0x1f1)];try{var _0x256ca3=this[_0x2cc493(0x1bf)](_0x4bb40b),_0x4a8251=_0x4d18a9;_0x256ca3&&_0x4a8251[0x0]==='\\x27'&&(_0x4a8251=_0x4a8251[_0x2cc493(0x200)](0x1,_0x4a8251[_0x2cc493(0x122)]-0x2));var _0x4f325a=_0x3d4542[_0x2cc493(0x159)]=_0x32e6ca[_0x2cc493(0x134)+_0x4a8251];_0x4f325a&&(_0x3d4542['depth']=_0x3d4542[_0x2cc493(0x1a9)]+0x1),_0x3d4542[_0x2cc493(0x1f1)]=!!_0x4f325a;var _0x5c5c9b=typeof _0x415f45==_0x2cc493(0x152),_0xe03d99={'name':_0x5c5c9b||_0x256ca3?_0x4d18a9:this[_0x2cc493(0x181)](_0x4d18a9)};if(_0x5c5c9b&&(_0xe03d99[_0x2cc493(0x152)]=!0x0),!(_0x2412f1===_0x2cc493(0x183)||_0x2412f1==='Error')){var _0x33f2ab=this[_0x2cc493(0x192)](_0x4bb40b,_0x415f45);if(_0x33f2ab&&(_0x33f2ab[_0x2cc493(0x12a)]&&(_0xe03d99[_0x2cc493(0x175)]=!0x0),_0x33f2ab[_0x2cc493(0x1c7)]&&!_0x4f325a&&!_0x3d4542[_0x2cc493(0x1e1)]))return _0xe03d99[_0x2cc493(0x129)]=!0x0,this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542),_0xe03d99;}var _0x5932aa;try{_0x5932aa=_0xa974f0(_0x4bb40b,_0x415f45);}catch(_0x1c6417){return _0xe03d99={'name':_0x4d18a9,'type':_0x2cc493(0x1b8),'error':_0x1c6417[_0x2cc493(0x20a)]},this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542),_0xe03d99;}var _0x5608f4=this['_type'](_0x5932aa),_0x5934ea=this[_0x2cc493(0x202)](_0x5608f4);if(_0xe03d99['type']=_0x5608f4,_0x5934ea)this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542,_0x5932aa,function(){var _0xacdd1e=_0x2cc493;_0xe03d99[_0xacdd1e(0x13c)]=_0x5932aa[_0xacdd1e(0x14d)](),!_0x4f325a&&_0x36d7ed['_capIfString'](_0x5608f4,_0xe03d99,_0x3d4542,{});});else{var _0x1e345c=_0x3d4542[_0x2cc493(0x196)]&&_0x3d4542[_0x2cc493(0x148)]<_0x3d4542[_0x2cc493(0x126)]&&_0x3d4542[_0x2cc493(0x15d)][_0x2cc493(0x1ba)](_0x5932aa)<0x0&&_0x5608f4!==_0x2cc493(0x1f3)&&_0x3d4542['autoExpandPropertyCount']<_0x3d4542[_0x2cc493(0x168)];_0x1e345c||_0x3d4542[_0x2cc493(0x148)]<_0x4a8ccb||_0x4f325a?(this[_0x2cc493(0x15a)](_0xe03d99,_0x5932aa,_0x3d4542,_0x4f325a||{}),this[_0x2cc493(0x171)](_0x5932aa,_0xe03d99)):this[_0x2cc493(0x132)](_0xe03d99,_0x3d4542,_0x5932aa,function(){var _0x10bd66=_0x2cc493;_0x5608f4==='null'||_0x5608f4===_0x10bd66(0x1a6)||(delete _0xe03d99[_0x10bd66(0x13c)],_0xe03d99[_0x10bd66(0x12c)]=!0x0);});}return _0xe03d99;}finally{_0x3d4542[_0x2cc493(0x159)]=_0x32e6ca,_0x3d4542[_0x2cc493(0x1a9)]=_0x4a8ccb,_0x3d4542['isExpressionToEvaluate']=_0x11c1e4;}}[_0xc83fb0(0x143)](_0x26e91d,_0x24781c,_0x5bd42e,_0x4a720a){var _0x3aa044=_0xc83fb0,_0x2b3bda=_0x4a720a[_0x3aa044(0x121)]||_0x5bd42e[_0x3aa044(0x121)];if((_0x26e91d===_0x3aa044(0x1dd)||_0x26e91d===_0x3aa044(0x12b))&&_0x24781c['value']){let _0x53f015=_0x24781c['value'][_0x3aa044(0x122)];_0x5bd42e[_0x3aa044(0x21d)]+=_0x53f015,_0x5bd42e['allStrLength']>_0x5bd42e[_0x3aa044(0x1c8)]?(_0x24781c[_0x3aa044(0x12c)]='',delete _0x24781c['value']):_0x53f015>_0x2b3bda&&(_0x24781c[_0x3aa044(0x12c)]=_0x24781c[_0x3aa044(0x13c)][_0x3aa044(0x200)](0x0,_0x2b3bda),delete _0x24781c[_0x3aa044(0x13c)]);}}['_isMap'](_0x13d4b6){var _0x5a2e33=_0xc83fb0;return!!(_0x13d4b6&&_0x2b666a[_0x5a2e33(0x1bb)]&&this[_0x5a2e33(0x1df)](_0x13d4b6)===_0x5a2e33(0x1c9)&&_0x13d4b6[_0x5a2e33(0x12d)]);}[_0xc83fb0(0x181)](_0x249276){var _0x265167=_0xc83fb0;if(_0x249276[_0x265167(0x18e)](/^\\d+$/))return _0x249276;var _0x249664;try{_0x249664=JSON['stringify'](''+_0x249276);}catch{_0x249664='\\x22'+this[_0x265167(0x1df)](_0x249276)+'\\x22';}return _0x249664[_0x265167(0x18e)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x249664=_0x249664[_0x265167(0x200)](0x1,_0x249664[_0x265167(0x122)]-0x2):_0x249664=_0x249664[_0x265167(0x16d)](/'/g,'\\x5c\\x27')[_0x265167(0x16d)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x249664;}[_0xc83fb0(0x132)](_0x45f4f2,_0x1a9b2b,_0x2029c2,_0x31d872){var _0xb6755c=_0xc83fb0;this[_0xb6755c(0x16b)](_0x45f4f2,_0x1a9b2b),_0x31d872&&_0x31d872(),this[_0xb6755c(0x171)](_0x2029c2,_0x45f4f2),this['_treeNodePropertiesAfterFullValue'](_0x45f4f2,_0x1a9b2b);}[_0xc83fb0(0x16b)](_0x34c63e,_0xe2d82b){var _0x50a303=_0xc83fb0;this[_0x50a303(0x1e2)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x14f)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x1e0)](_0x34c63e,_0xe2d82b),this[_0x50a303(0x1bd)](_0x34c63e,_0xe2d82b);}['_setNodeId'](_0x5e991e,_0x9dba11){}[_0xc83fb0(0x14f)](_0x252482,_0x2ec202){}[_0xc83fb0(0x17e)](_0xd737d3,_0x48958c){}[_0xc83fb0(0x1c0)](_0x25e050){var _0x86a0a0=_0xc83fb0;return _0x25e050===this[_0x86a0a0(0x1e9)];}[_0xc83fb0(0x204)](_0x59a6ad,_0x21713c){var _0x417cc8=_0xc83fb0;this[_0x417cc8(0x17e)](_0x59a6ad,_0x21713c),this[_0x417cc8(0x1a1)](_0x59a6ad),_0x21713c[_0x417cc8(0x169)]&&this[_0x417cc8(0x144)](_0x59a6ad),this[_0x417cc8(0x1ee)](_0x59a6ad,_0x21713c),this['_addLoadNode'](_0x59a6ad,_0x21713c),this[_0x417cc8(0x163)](_0x59a6ad);}[_0xc83fb0(0x171)](_0x368a80,_0x3bf559){var _0x5e4474=_0xc83fb0;let _0x15b644;try{_0x2b666a[_0x5e4474(0x1e5)]&&(_0x15b644=_0x2b666a[_0x5e4474(0x1e5)][_0x5e4474(0x1d6)],_0x2b666a[_0x5e4474(0x1e5)]['error']=function(){}),_0x368a80&&typeof _0x368a80['length']==_0x5e4474(0x216)&&(_0x3bf559[_0x5e4474(0x122)]=_0x368a80['length']);}catch{}finally{_0x15b644&&(_0x2b666a['console'][_0x5e4474(0x1d6)]=_0x15b644);}if(_0x3bf559['type']===_0x5e4474(0x216)||_0x3bf559['type']===_0x5e4474(0x186)){if(isNaN(_0x3bf559[_0x5e4474(0x13c)]))_0x3bf559[_0x5e4474(0x1ad)]=!0x0,delete _0x3bf559[_0x5e4474(0x13c)];else switch(_0x3bf559[_0x5e4474(0x13c)]){case Number['POSITIVE_INFINITY']:_0x3bf559[_0x5e4474(0x199)]=!0x0,delete _0x3bf559['value'];break;case Number[_0x5e4474(0x135)]:_0x3bf559[_0x5e4474(0x18d)]=!0x0,delete _0x3bf559[_0x5e4474(0x13c)];break;case 0x0:this['_isNegativeZero'](_0x3bf559[_0x5e4474(0x13c)])&&(_0x3bf559[_0x5e4474(0x1da)]=!0x0);break;}}else _0x3bf559[_0x5e4474(0x150)]===_0x5e4474(0x1f3)&&typeof _0x368a80[_0x5e4474(0x19f)]==_0x5e4474(0x1dd)&&_0x368a80[_0x5e4474(0x19f)]&&_0x3bf559[_0x5e4474(0x19f)]&&_0x368a80[_0x5e4474(0x19f)]!==_0x3bf559[_0x5e4474(0x19f)]&&(_0x3bf559['funcName']=_0x368a80[_0x5e4474(0x19f)]);}[_0xc83fb0(0x1fb)](_0x340a19){var _0x2e6ef9=_0xc83fb0;return 0x1/_0x340a19===Number[_0x2e6ef9(0x135)];}[_0xc83fb0(0x144)](_0x2109f2){var _0x1074c3=_0xc83fb0;!_0x2109f2['props']||!_0x2109f2[_0x1074c3(0x197)][_0x1074c3(0x122)]||_0x2109f2[_0x1074c3(0x150)]===_0x1074c3(0x183)||_0x2109f2[_0x1074c3(0x150)]===_0x1074c3(0x1bb)||_0x2109f2['type']===_0x1074c3(0x1e4)||_0x2109f2[_0x1074c3(0x197)][_0x1074c3(0x1cf)](function(_0x579bbe,_0xd3668f){var _0x5c0a3c=_0x1074c3,_0x179ea1=_0x579bbe[_0x5c0a3c(0x19f)][_0x5c0a3c(0x17d)](),_0x394e8a=_0xd3668f[_0x5c0a3c(0x19f)][_0x5c0a3c(0x17d)]();return _0x179ea1<_0x394e8a?-0x1:_0x179ea1>_0x394e8a?0x1:0x0;});}['_addFunctionsNode'](_0x5b4bf1,_0x74c4fe){var _0x87fdfe=_0xc83fb0;if(!(_0x74c4fe[_0x87fdfe(0x1f9)]||!_0x5b4bf1[_0x87fdfe(0x197)]||!_0x5b4bf1[_0x87fdfe(0x197)]['length'])){for(var _0x3ac3f4=[],_0x4ceb3a=[],_0x260f45=0x0,_0xf2dbe6=_0x5b4bf1[_0x87fdfe(0x197)][_0x87fdfe(0x122)];_0x260f45<_0xf2dbe6;_0x260f45++){var _0x22c70b=_0x5b4bf1[_0x87fdfe(0x197)][_0x260f45];_0x22c70b['type']===_0x87fdfe(0x1f3)?_0x3ac3f4[_0x87fdfe(0x153)](_0x22c70b):_0x4ceb3a[_0x87fdfe(0x153)](_0x22c70b);}if(!(!_0x4ceb3a[_0x87fdfe(0x122)]||_0x3ac3f4[_0x87fdfe(0x122)]<=0x1)){_0x5b4bf1['props']=_0x4ceb3a;var _0x4a6b3b={'functionsNode':!0x0,'props':_0x3ac3f4};this[_0x87fdfe(0x1e2)](_0x4a6b3b,_0x74c4fe),this[_0x87fdfe(0x17e)](_0x4a6b3b,_0x74c4fe),this[_0x87fdfe(0x1a1)](_0x4a6b3b),this[_0x87fdfe(0x1bd)](_0x4a6b3b,_0x74c4fe),_0x4a6b3b['id']+='\\x20f',_0x5b4bf1[_0x87fdfe(0x197)][_0x87fdfe(0x16f)](_0x4a6b3b);}}}['_addLoadNode'](_0xe0c1f5,_0x16df52){}[_0xc83fb0(0x1a1)](_0x5e776f){}[_0xc83fb0(0x21c)](_0xed4fe0){var _0x3c283a=_0xc83fb0;return Array['isArray'](_0xed4fe0)||typeof _0xed4fe0==_0x3c283a(0x1b5)&&this[_0x3c283a(0x1df)](_0xed4fe0)===_0x3c283a(0x1cc);}[_0xc83fb0(0x1bd)](_0x45e6db,_0x317a4d){}[_0xc83fb0(0x163)](_0x403816){var _0x587472=_0xc83fb0;delete _0x403816[_0x587472(0x13f)],delete _0x403816[_0x587472(0x166)],delete _0x403816['_hasMapOnItsPath'];}[_0xc83fb0(0x1e0)](_0x420717,_0x51ec4d){}}let _0x4c6fbe=new _0x3433bd(),_0x1c73d6={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x1300f9={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x3fb167(_0x4da0e2,_0x234c63,_0x2f0b10,_0x2a70ca,_0x22e30a,_0x32659a){var _0x31c0e5=_0xc83fb0;let _0x2e43e2,_0x3be46a;try{_0x3be46a=_0x7ae3d3(),_0x2e43e2=_0x2e19ea[_0x234c63],!_0x2e43e2||_0x3be46a-_0x2e43e2['ts']>0x1f4&&_0x2e43e2[_0x31c0e5(0x128)]&&_0x2e43e2[_0x31c0e5(0x145)]/_0x2e43e2[_0x31c0e5(0x128)]<0x64?(_0x2e19ea[_0x234c63]=_0x2e43e2={'count':0x0,'time':0x0,'ts':_0x3be46a},_0x2e19ea[_0x31c0e5(0x141)]={}):_0x3be46a-_0x2e19ea[_0x31c0e5(0x141)]['ts']>0x32&&_0x2e19ea[_0x31c0e5(0x141)]['count']&&_0x2e19ea[_0x31c0e5(0x141)]['time']/_0x2e19ea[_0x31c0e5(0x141)]['count']<0x64&&(_0x2e19ea[_0x31c0e5(0x141)]={});let _0x5d2500=[],_0x13b8c2=_0x2e43e2[_0x31c0e5(0x1fc)]||_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x1fc)]?_0x1300f9:_0x1c73d6,_0x13c005=_0x48a809=>{var _0x12d5d2=_0x31c0e5;let _0x5f41a5={};return _0x5f41a5['props']=_0x48a809[_0x12d5d2(0x197)],_0x5f41a5[_0x12d5d2(0x17a)]=_0x48a809[_0x12d5d2(0x17a)],_0x5f41a5[_0x12d5d2(0x121)]=_0x48a809[_0x12d5d2(0x121)],_0x5f41a5['totalStrLength']=_0x48a809[_0x12d5d2(0x1c8)],_0x5f41a5[_0x12d5d2(0x168)]=_0x48a809[_0x12d5d2(0x168)],_0x5f41a5['autoExpandMaxDepth']=_0x48a809[_0x12d5d2(0x126)],_0x5f41a5['sortProps']=!0x1,_0x5f41a5[_0x12d5d2(0x1f9)]=!_0x4cdb6e,_0x5f41a5[_0x12d5d2(0x1a9)]=0x1,_0x5f41a5['level']=0x0,_0x5f41a5[_0x12d5d2(0x188)]=_0x12d5d2(0x1d0),_0x5f41a5[_0x12d5d2(0x155)]=_0x12d5d2(0x1a3),_0x5f41a5['autoExpand']=!0x0,_0x5f41a5[_0x12d5d2(0x15d)]=[],_0x5f41a5[_0x12d5d2(0x179)]=0x0,_0x5f41a5[_0x12d5d2(0x1e1)]=!0x0,_0x5f41a5[_0x12d5d2(0x21d)]=0x0,_0x5f41a5[_0x12d5d2(0x1f2)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x5f41a5;};for(var _0x14027d=0x0;_0x14027d<_0x22e30a[_0x31c0e5(0x122)];_0x14027d++)_0x5d2500[_0x31c0e5(0x153)](_0x4c6fbe[_0x31c0e5(0x15a)]({'timeNode':_0x4da0e2===_0x31c0e5(0x145)||void 0x0},_0x22e30a[_0x14027d],_0x13c005(_0x13b8c2),{}));if(_0x4da0e2==='trace'){let _0xe6083e=Error[_0x31c0e5(0x17b)];try{Error[_0x31c0e5(0x17b)]=0x1/0x0,_0x5d2500['push'](_0x4c6fbe['serialize']({'stackNode':!0x0},new Error()[_0x31c0e5(0x211)],_0x13c005(_0x13b8c2),{'strLength':0x1/0x0}));}finally{Error[_0x31c0e5(0x17b)]=_0xe6083e;}}return{'method':_0x31c0e5(0x1ff),'version':_0x489f64,'args':[{'ts':_0x2f0b10,'session':_0x2a70ca,'args':_0x5d2500,'id':_0x234c63,'context':_0x32659a}]};}catch(_0x2b4f8b){return{'method':_0x31c0e5(0x1ff),'version':_0x489f64,'args':[{'ts':_0x2f0b10,'session':_0x2a70ca,'args':[{'type':'unknown','error':_0x2b4f8b&&_0x2b4f8b[_0x31c0e5(0x20a)]}],'id':_0x234c63,'context':_0x32659a}]};}finally{try{if(_0x2e43e2&&_0x3be46a){let _0xff9c1d=_0x7ae3d3();_0x2e43e2[_0x31c0e5(0x128)]++,_0x2e43e2[_0x31c0e5(0x145)]+=_0xb59bb1(_0x3be46a,_0xff9c1d),_0x2e43e2['ts']=_0xff9c1d,_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x128)]++,_0x2e19ea['hits']['time']+=_0xb59bb1(_0x3be46a,_0xff9c1d),_0x2e19ea['hits']['ts']=_0xff9c1d,(_0x2e43e2['count']>0x32||_0x2e43e2[_0x31c0e5(0x145)]>0x64)&&(_0x2e43e2[_0x31c0e5(0x1fc)]=!0x0),(_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x128)]>0x3e8||_0x2e19ea[_0x31c0e5(0x141)]['time']>0x12c)&&(_0x2e19ea[_0x31c0e5(0x141)][_0x31c0e5(0x1fc)]=!0x0);}}catch{}}}return _0x3fb167;}((_0xd84dda,_0x5747d3,_0x5b0082,_0x477f21,_0x2a68c3,_0x3f8562,_0x3a0549,_0x3db78c,_0x46c513,_0xbfe5dd,_0x18f1a0)=>{var _0x320b2d=_0x277122;if(_0xd84dda[_0x320b2d(0x1d9)])return _0xd84dda['_console_ninja'];if(!H(_0xd84dda,_0x3db78c,_0x2a68c3))return _0xd84dda[_0x320b2d(0x1d9)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0xd84dda['_console_ninja'];let _0x4fb6c4=b(_0xd84dda),_0x5b3f8e=_0x4fb6c4[_0x320b2d(0x1ef)],_0x479531=_0x4fb6c4[_0x320b2d(0x1eb)],_0x177654=_0x4fb6c4[_0x320b2d(0x177)],_0x25d606={'hits':{},'ts':{}},_0x6aa2d2=X(_0xd84dda,_0x46c513,_0x25d606,_0x3f8562),_0x2f092d=_0x4d5c8f=>{_0x25d606['ts'][_0x4d5c8f]=_0x479531();},_0x492afb=(_0x3065ce,_0x3451d9)=>{var _0x43323f=_0x320b2d;let _0x378abc=_0x25d606['ts'][_0x3451d9];if(delete _0x25d606['ts'][_0x3451d9],_0x378abc){let _0xc54ea1=_0x5b3f8e(_0x378abc,_0x479531());_0x4abd9f(_0x6aa2d2(_0x43323f(0x145),_0x3065ce,_0x177654(),_0x1dcfcb,[_0xc54ea1],_0x3451d9));}},_0x4f8d09=_0x51145b=>{var _0x3296a6=_0x320b2d,_0x2e7901;return _0x2a68c3===_0x3296a6(0x18f)&&_0xd84dda[_0x3296a6(0x221)]&&((_0x2e7901=_0x51145b==null?void 0x0:_0x51145b[_0x3296a6(0x13e)])==null?void 0x0:_0x2e7901[_0x3296a6(0x122)])&&(_0x51145b[_0x3296a6(0x13e)][0x0][_0x3296a6(0x221)]=_0xd84dda[_0x3296a6(0x221)]),_0x51145b;};_0xd84dda['_console_ninja']={'consoleLog':(_0x34542f,_0x1e7acf)=>{var _0x33d79c=_0x320b2d;_0xd84dda[_0x33d79c(0x1e5)]['log'][_0x33d79c(0x19f)]!==_0x33d79c(0x19b)&&_0x4abd9f(_0x6aa2d2(_0x33d79c(0x1ff),_0x34542f,_0x177654(),_0x1dcfcb,_0x1e7acf));},'consoleTrace':(_0x58cfc2,_0x3b1473)=>{var _0x43d259=_0x320b2d;_0xd84dda[_0x43d259(0x1e5)][_0x43d259(0x1ff)][_0x43d259(0x19f)]!=='disabledTrace'&&_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x43d259(0x13a),_0x58cfc2,_0x177654(),_0x1dcfcb,_0x3b1473)));},'consoleTime':_0x19ca9e=>{_0x2f092d(_0x19ca9e);},'consoleTimeEnd':(_0x3c1c7d,_0x259c13)=>{_0x492afb(_0x259c13,_0x3c1c7d);},'autoLog':(_0x50a502,_0x2ec9ac)=>{var _0x11fb8c=_0x320b2d;_0x4abd9f(_0x6aa2d2(_0x11fb8c(0x1ff),_0x2ec9ac,_0x177654(),_0x1dcfcb,[_0x50a502]));},'autoLogMany':(_0x39367a,_0x33dff6)=>{var _0x3f364b=_0x320b2d;_0x4abd9f(_0x6aa2d2(_0x3f364b(0x1ff),_0x39367a,_0x177654(),_0x1dcfcb,_0x33dff6));},'autoTrace':(_0x4de991,_0x1c9190)=>{var _0x31dbb7=_0x320b2d;_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x31dbb7(0x13a),_0x1c9190,_0x177654(),_0x1dcfcb,[_0x4de991])));},'autoTraceMany':(_0x48d7ba,_0x5770f9)=>{var _0x445bc1=_0x320b2d;_0x4abd9f(_0x4f8d09(_0x6aa2d2(_0x445bc1(0x13a),_0x48d7ba,_0x177654(),_0x1dcfcb,_0x5770f9)));},'autoTime':(_0x456f75,_0x2d3903,_0x58530c)=>{_0x2f092d(_0x58530c);},'autoTimeEnd':(_0x3faefd,_0x1c4496,_0x5d7ac7)=>{_0x492afb(_0x1c4496,_0x5d7ac7);},'coverage':_0x3e26ed=>{_0x4abd9f({'method':'coverage','version':_0x3f8562,'args':[{'id':_0x3e26ed}]});}};let _0x4abd9f=q(_0xd84dda,_0x5747d3,_0x5b0082,_0x477f21,_0x2a68c3,_0xbfe5dd,_0x18f1a0),_0x1dcfcb=_0xd84dda[_0x320b2d(0x218)];return _0xd84dda[_0x320b2d(0x1d9)];})(globalThis,_0x277122(0x1ec),_0x277122(0x1a4),_0x277122(0x14a),_0x277122(0x198),_0x277122(0x207),_0x277122(0x1be),_0x277122(0x194),_0x277122(0x217),_0x277122(0x1d3),_0x277122(0x137));")}catch(e){}}function _(e,...t){try{c().consoleLog(e,t)}catch(e){}return t}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,