/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@firebase/util/dist/index.esm2017.js":
/*!***********************************************************!*\
  !*** ./node_modules/@firebase/util/dist/index.esm2017.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CONSTANTS: () => (/* binding */ CONSTANTS),
/* harmony export */   DecodeBase64StringError: () => (/* binding */ DecodeBase64StringError),
/* harmony export */   Deferred: () => (/* binding */ Deferred),
/* harmony export */   ErrorFactory: () => (/* binding */ ErrorFactory),
/* harmony export */   FirebaseError: () => (/* binding */ FirebaseError),
/* harmony export */   MAX_VALUE_MILLIS: () => (/* binding */ MAX_VALUE_MILLIS),
/* harmony export */   RANDOM_FACTOR: () => (/* binding */ RANDOM_FACTOR),
/* harmony export */   Sha1: () => (/* binding */ Sha1),
/* harmony export */   areCookiesEnabled: () => (/* binding */ areCookiesEnabled),
/* harmony export */   assert: () => (/* binding */ assert),
/* harmony export */   assertionError: () => (/* binding */ assertionError),
/* harmony export */   async: () => (/* binding */ async),
/* harmony export */   base64: () => (/* binding */ base64),
/* harmony export */   base64Decode: () => (/* binding */ base64Decode),
/* harmony export */   base64Encode: () => (/* binding */ base64Encode),
/* harmony export */   base64urlEncodeWithoutPadding: () => (/* binding */ base64urlEncodeWithoutPadding),
/* harmony export */   calculateBackoffMillis: () => (/* binding */ calculateBackoffMillis),
/* harmony export */   contains: () => (/* binding */ contains),
/* harmony export */   createMockUserToken: () => (/* binding */ createMockUserToken),
/* harmony export */   createSubscribe: () => (/* binding */ createSubscribe),
/* harmony export */   decode: () => (/* binding */ decode),
/* harmony export */   deepCopy: () => (/* binding */ deepCopy),
/* harmony export */   deepEqual: () => (/* binding */ deepEqual),
/* harmony export */   deepExtend: () => (/* binding */ deepExtend),
/* harmony export */   errorPrefix: () => (/* binding */ errorPrefix),
/* harmony export */   extractQuerystring: () => (/* binding */ extractQuerystring),
/* harmony export */   getDefaultAppConfig: () => (/* binding */ getDefaultAppConfig),
/* harmony export */   getDefaultEmulatorHost: () => (/* binding */ getDefaultEmulatorHost),
/* harmony export */   getDefaultEmulatorHostnameAndPort: () => (/* binding */ getDefaultEmulatorHostnameAndPort),
/* harmony export */   getDefaults: () => (/* binding */ getDefaults),
/* harmony export */   getExperimentalSetting: () => (/* binding */ getExperimentalSetting),
/* harmony export */   getGlobal: () => (/* binding */ getGlobal),
/* harmony export */   getModularInstance: () => (/* binding */ getModularInstance),
/* harmony export */   getUA: () => (/* binding */ getUA),
/* harmony export */   isAdmin: () => (/* binding */ isAdmin),
/* harmony export */   isBrowser: () => (/* binding */ isBrowser),
/* harmony export */   isBrowserExtension: () => (/* binding */ isBrowserExtension),
/* harmony export */   isElectron: () => (/* binding */ isElectron),
/* harmony export */   isEmpty: () => (/* binding */ isEmpty),
/* harmony export */   isIE: () => (/* binding */ isIE),
/* harmony export */   isIndexedDBAvailable: () => (/* binding */ isIndexedDBAvailable),
/* harmony export */   isMobileCordova: () => (/* binding */ isMobileCordova),
/* harmony export */   isNode: () => (/* binding */ isNode),
/* harmony export */   isNodeSdk: () => (/* binding */ isNodeSdk),
/* harmony export */   isReactNative: () => (/* binding */ isReactNative),
/* harmony export */   isSafari: () => (/* binding */ isSafari),
/* harmony export */   isUWP: () => (/* binding */ isUWP),
/* harmony export */   isValidFormat: () => (/* binding */ isValidFormat),
/* harmony export */   isValidTimestamp: () => (/* binding */ isValidTimestamp),
/* harmony export */   issuedAtTime: () => (/* binding */ issuedAtTime),
/* harmony export */   jsonEval: () => (/* binding */ jsonEval),
/* harmony export */   map: () => (/* binding */ map),
/* harmony export */   ordinal: () => (/* binding */ ordinal),
/* harmony export */   promiseWithTimeout: () => (/* binding */ promiseWithTimeout),
/* harmony export */   querystring: () => (/* binding */ querystring),
/* harmony export */   querystringDecode: () => (/* binding */ querystringDecode),
/* harmony export */   safeGet: () => (/* binding */ safeGet),
/* harmony export */   stringLength: () => (/* binding */ stringLength),
/* harmony export */   stringToByteArray: () => (/* binding */ stringToByteArray),
/* harmony export */   stringify: () => (/* binding */ stringify),
/* harmony export */   uuidv4: () => (/* binding */ uuidv4),
/* harmony export */   validateArgCount: () => (/* binding */ validateArgCount),
/* harmony export */   validateCallback: () => (/* binding */ validateCallback),
/* harmony export */   validateContextObject: () => (/* binding */ validateContextObject),
/* harmony export */   validateIndexedDBOpenable: () => (/* binding */ validateIndexedDBOpenable),
/* harmony export */   validateNamespace: () => (/* binding */ validateNamespace)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
const CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */
    NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */
    NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */
    SDK_VERSION: '${JSCORE_VERSION}'
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Throws an error if the provided assertion is falsy
 */
const assert = function (assertion, message) {
    if (!assertion) {
        throw assertionError(message);
    }
};
/**
 * Returns an Error object suitable for throwing.
 */
const assertionError = function (message) {
    return new Error('Firebase Database (' +
        CONSTANTS.SDK_VERSION +
        ') INTERNAL ASSERT FAILED: ' +
        message);
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const stringToByteArray$1 = function (str) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if ((c & 0xfc00) === 0xd800 &&
            i + 1 < str.length &&
            (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */
const byteArrayToString = function (bytes) {
    // TODO(user): Use native implementations if/when available
    const out = [];
    let pos = 0, c = 0;
    while (pos < bytes.length) {
        const c1 = bytes[pos++];
        if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
        }
        else if (c1 > 191 && c1 < 224) {
            const c2 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
        }
        else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            const c4 = bytes[pos++];
            const u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        }
        else {
            const c2 = bytes[pos++];
            const c3 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        }
    }
    return out.join('');
};
// We define it as an object literal instead of a class because a class compiled down to es5 can't
// be treeshaked. https://github.com/rollup/rollup/issues/1691
// Static lookup maps, lazily populated by init_()
const base64 = {
    /**
     * Maps bytes to characters.
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     */
    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     */
    get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     */
    get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     */
    HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeByteArray(input, webSafe) {
        if (!Array.isArray(input)) {
            throw Error('encodeByteArray takes an array as a parameter');
        }
        this.init_();
        const byteToCharMap = webSafe
            ? this.byteToCharMapWebSafe_
            : this.byteToCharMap_;
        const output = [];
        for (let i = 0; i < input.length; i += 3) {
            const byte1 = input[i];
            const haveByte2 = i + 1 < input.length;
            const byte2 = haveByte2 ? input[i + 1] : 0;
            const haveByte3 = i + 2 < input.length;
            const byte3 = haveByte3 ? input[i + 2] : 0;
            const outByte1 = byte1 >> 2;
            const outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            let outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
            let outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param input A string to encode.
     * @param webSafe If true, we should use the
     *     alternative alphabet.
     * @return The base64 encoded string.
     */
    encodeString(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$1(input), webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param input to decode.
     * @param webSafe True if we should use the
     *     alternative alphabet.
     * @return string representing the decoded value.
     */
    decodeString(input, webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
            return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param input Input to decode.
     * @param webSafe True if we should use the web-safe alphabet.
     * @return bytes representing the decoded value.
     */
    decodeStringToByteArray(input, webSafe) {
        this.init_();
        const charToByteMap = webSafe
            ? this.charToByteMapWebSafe_
            : this.charToByteMap_;
        const output = [];
        for (let i = 0; i < input.length;) {
            const byte1 = charToByteMap[input.charAt(i++)];
            const haveByte2 = i < input.length;
            const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            const haveByte3 = i < input.length;
            const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            const haveByte4 = i < input.length;
            const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw new DecodeBase64StringError();
            }
            const outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 !== 64) {
                const outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 !== 64) {
                    const outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_() {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (let i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * An error encountered while decoding base64 string.
 */
class DecodeBase64StringError extends Error {
    constructor() {
        super(...arguments);
        this.name = 'DecodeBase64StringError';
    }
}
/**
 * URL-safe base64 encoding
 */
const base64Encode = function (str) {
    const utf8Bytes = stringToByteArray$1(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 encoding (without "." padding in the end).
 * e.g. Used in JSON Web Token (JWT) parts.
 */
const base64urlEncodeWithoutPadding = function (str) {
    // Use base64url encoding and remove padding in the end (dot characters).
    return base64Encode(str).replace(/\./g, '');
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */
const base64Decode = function (str) {
    try {
        return base64.decodeString(str, true);
    }
    catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 *
 * Note: we don't merge __proto__ to prevent prototype pollution
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            const dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (const prop in source) {
        // use isValidKey to guard against prototype pollution. See https://snyk.io/vuln/SNYK-JS-LODASH-450202
        if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
function isValidKey(key) {
    return key !== '__proto__';
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Polyfill for `globalThis` object.
 * @returns the `globalThis` object for the given environment.
 * @public
 */
function getGlobal() {
    if (typeof self !== 'undefined') {
        return self;
    }
    if (typeof window !== 'undefined') {
        return window;
    }
    if (typeof __webpack_require__.g !== 'undefined') {
        return __webpack_require__.g;
    }
    throw new Error('Unable to locate global object.');
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const getDefaultsFromGlobal = () => getGlobal().__FIREBASE_DEFAULTS__;
/**
 * Attempt to read defaults from a JSON string provided to
 * process(.)env(.)__FIREBASE_DEFAULTS__ or a JSON file whose path is in
 * process(.)env(.)__FIREBASE_DEFAULTS_PATH__
 * The dots are in parens because certain compilers (Vite?) cannot
 * handle seeing that variable in comments.
 * See https://github.com/firebase/firebase-js-sdk/issues/6838
 */
const getDefaultsFromEnvVariable = () => {
    if (typeof process === 'undefined' || typeof process.env === 'undefined') {
        return;
    }
    const defaultsJsonString = process.env.__FIREBASE_DEFAULTS__;
    if (defaultsJsonString) {
        return JSON.parse(defaultsJsonString);
    }
};
const getDefaultsFromCookie = () => {
    if (typeof document === 'undefined') {
        return;
    }
    let match;
    try {
        match = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
    }
    catch (e) {
        // Some environments such as Angular Universal SSR have a
        // `document` object but error on accessing `document.cookie`.
        return;
    }
    const decoded = match && base64Decode(match[1]);
    return decoded && JSON.parse(decoded);
};
/**
 * Get the __FIREBASE_DEFAULTS__ object. It checks in order:
 * (1) if such an object exists as a property of `globalThis`
 * (2) if such an object was provided on a shell environment variable
 * (3) if such an object exists in a cookie
 * @public
 */
const getDefaults = () => {
    try {
        return (getDefaultsFromGlobal() ||
            getDefaultsFromEnvVariable() ||
            getDefaultsFromCookie());
    }
    catch (e) {
        /**
         * Catch-all for being unable to get __FIREBASE_DEFAULTS__ due
         * to any environment case we have not accounted for. Log to
         * info instead of swallowing so we can find these unknown cases
         * and add paths for them if needed.
         */
        console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
        return;
    }
};
/**
 * Returns emulator host stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a URL host formatted like `127.0.0.1:9999` or `[::1]:4000` if available
 * @public
 */
const getDefaultEmulatorHost = (productName) => { var _a, _b; return (_b = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.emulatorHosts) === null || _b === void 0 ? void 0 : _b[productName]; };
/**
 * Returns emulator hostname and port stored in the __FIREBASE_DEFAULTS__ object
 * for the given product.
 * @returns a pair of hostname and port like `["::1", 4000]` if available
 * @public
 */
const getDefaultEmulatorHostnameAndPort = (productName) => {
    const host = getDefaultEmulatorHost(productName);
    if (!host) {
        return undefined;
    }
    const separatorIndex = host.lastIndexOf(':'); // Finding the last since IPv6 addr also has colons.
    if (separatorIndex <= 0 || separatorIndex + 1 === host.length) {
        throw new Error(`Invalid host ${host} with no separate hostname and port!`);
    }
    // eslint-disable-next-line no-restricted-globals
    const port = parseInt(host.substring(separatorIndex + 1), 10);
    if (host[0] === '[') {
        // Bracket-quoted `[ipv6addr]:port` => return "ipv6addr" (without brackets).
        return [host.substring(1, separatorIndex - 1), port];
    }
    else {
        return [host.substring(0, separatorIndex), port];
    }
};
/**
 * Returns Firebase app config stored in the __FIREBASE_DEFAULTS__ object.
 * @public
 */
const getDefaultAppConfig = () => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.config; };
/**
 * Returns an experimental setting on the __FIREBASE_DEFAULTS__ object (properties
 * prefixed by "_")
 * @public
 */
const getExperimentalSetting = (name) => { var _a; return (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a[`_${name}`]; };

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class Deferred {
    constructor() {
        this.reject = () => { };
        this.resolve = () => { };
        this.promise = new Promise((resolve, reject) => {
            this.resolve = resolve;
            this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     */
    wrapCallback(callback) {
        return (error, value) => {
            if (error) {
                this.reject(error);
            }
            else {
                this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                this.promise.catch(() => { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    }
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function createMockUserToken(token, projectId) {
    if (token.uid) {
        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
    }
    // Unsecured JWTs use "none" as the algorithm.
    const header = {
        alg: 'none',
        type: 'JWT'
    };
    const project = projectId || 'demo-project';
    const iat = token.iat || 0;
    const sub = token.sub || token.user_id;
    if (!sub) {
        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
    }
    const payload = Object.assign({ 
        // Set all required fields to decent defaults
        iss: `https://securetoken.google.com/${project}`, aud: project, iat, exp: iat + 3600, auth_time: iat, sub, user_id: sub, firebase: {
            sign_in_provider: 'custom',
            identities: {}
        } }, token);
    // Unsecured JWTs use the empty string as a signature.
    const signature = '';
    return [
        base64urlEncodeWithoutPadding(JSON.stringify(header)),
        base64urlEncodeWithoutPadding(JSON.stringify(payload)),
        signature
    ].join('.');
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */
function getUA() {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */
function isMobileCordova() {
    return (typeof window !== 'undefined' &&
        // @ts-ignore Setting up an broadly applicable index signature for Window
        // just to deal with this case would probably be a bad idea.
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected or specified.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/
function isNode() {
    var _a;
    const forceEnvironment = (_a = getDefaults()) === null || _a === void 0 ? void 0 : _a.forceEnvironment;
    if (forceEnvironment === 'node') {
        return true;
    }
    else if (forceEnvironment === 'browser') {
        return false;
    }
    try {
        return (Object.prototype.toString.call(__webpack_require__.g.process) === '[object process]');
    }
    catch (e) {
        return false;
    }
}
/**
 * Detect Browser Environment
 */
function isBrowser() {
    return typeof self === 'object' && self.self === self;
}
function isBrowserExtension() {
    const runtime = typeof chrome === 'object'
        ? chrome.runtime
        : typeof browser === 'object'
            ? browser.runtime
            : undefined;
    return typeof runtime === 'object' && runtime.id !== undefined;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */
function isReactNative() {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
}
/** Detects Electron apps. */
function isElectron() {
    return getUA().indexOf('Electron/') >= 0;
}
/** Detects Internet Explorer. */
function isIE() {
    const ua = getUA();
    return ua.indexOf('MSIE ') >= 0 || ua.indexOf('Trident/') >= 0;
}
/** Detects Universal Windows Platform apps. */
function isUWP() {
    return getUA().indexOf('MSAppHost/') >= 0;
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */
function isNodeSdk() {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/** Returns true if we are running in Safari. */
function isSafari() {
    return (!isNode() &&
        navigator.userAgent.includes('Safari') &&
        !navigator.userAgent.includes('Chrome'));
}
/**
 * This method checks if indexedDB is supported by current browser/service worker context
 * @return true if indexedDB is supported by current browser/service worker context
 */
function isIndexedDBAvailable() {
    try {
        return typeof indexedDB === 'object';
    }
    catch (e) {
        return false;
    }
}
/**
 * This method validates browser/sw context for indexedDB by opening a dummy indexedDB database and reject
 * if errors occur during the database open operation.
 *
 * @throws exception if current browser/sw context can't run idb.open (ex: Safari iframe, Firefox
 * private browsing)
 */
function validateIndexedDBOpenable() {
    return new Promise((resolve, reject) => {
        try {
            let preExist = true;
            const DB_CHECK_NAME = 'validate-browser-context-for-indexeddb-analytics-module';
            const request = self.indexedDB.open(DB_CHECK_NAME);
            request.onsuccess = () => {
                request.result.close();
                // delete database only when it doesn't pre-exist
                if (!preExist) {
                    self.indexedDB.deleteDatabase(DB_CHECK_NAME);
                }
                resolve(true);
            };
            request.onupgradeneeded = () => {
                preExist = false;
            };
            request.onerror = () => {
                var _a;
                reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || '');
            };
        }
        catch (error) {
            reject(error);
        }
    });
}
/**
 *
 * This method checks whether cookie is enabled within current browser
 * @return true if cookie is enabled within current browser
 */
function areCookiesEnabled() {
    if (typeof navigator === 'undefined' || !navigator.cookieEnabled) {
        return false;
    }
    return true;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Standardized Firebase Error.
 *
 * Usage:
 *
 *   // Typescript string literals for type-safe codes
 *   type Err =
 *     'unknown' |
 *     'object-not-found'
 *     ;
 *
 *   // Closure enum for type-safe error codes
 *   // at-enum {string}
 *   var Err = {
 *     UNKNOWN: 'unknown',
 *     OBJECT_NOT_FOUND: 'object-not-found',
 *   }
 *
 *   let errors: Map<Err, string> = {
 *     'generic-error': "Unknown error",
 *     'file-not-found': "Could not find file: {$file}",
 *   };
 *
 *   // Type-safe function - must pass a valid error code as param.
 *   let error = new ErrorFactory<Err>('service', 'Service', errors);
 *
 *   ...
 *   throw error.create(Err.GENERIC);
 *   ...
 *   throw error.create(Err.FILE_NOT_FOUND, {'file': fileName});
 *   ...
 *   // Service: Could not file file: foo.txt (service/file-not-found).
 *
 *   catch (e) {
 *     assert(e.message === "Could not find file: foo.txt.");
 *     if ((e as FirebaseError)?.code === 'service/file-not-found') {
 *       console.log("Could not read file: " + e['file']);
 *     }
 *   }
 */
const ERROR_NAME = 'FirebaseError';
// Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types
class FirebaseError extends Error {
    constructor(
    /** The error code for this error. */
    code, message, 
    /** Custom data for this error. */
    customData) {
        super(message);
        this.code = code;
        this.customData = customData;
        /** The custom name for all FirebaseErrors. */
        this.name = ERROR_NAME;
        // Fix For ES5
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        Object.setPrototypeOf(this, FirebaseError.prototype);
        // Maintains proper stack trace for where our error was thrown.
        // Only available on V8.
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, ErrorFactory.prototype.create);
        }
    }
}
class ErrorFactory {
    constructor(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
    }
    create(code, ...data) {
        const customData = data[0] || {};
        const fullCode = `${this.service}/${code}`;
        const template = this.errors[code];
        const message = template ? replaceTemplate(template, customData) : 'Error';
        // Service Name: Error message (service/code).
        const fullMessage = `${this.serviceName}: ${message} (${fullCode}).`;
        const error = new FirebaseError(fullCode, fullMessage, customData);
        return error;
    }
}
function replaceTemplate(template, data) {
    return template.replace(PATTERN, (_, key) => {
        const value = data[key];
        return value != null ? String(value) : `<${key}?>`;
    });
}
const PATTERN = /\{\$([^}]+)}/g;

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */
function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */
function stringify(data) {
    return JSON.stringify(data);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const decode = function (token) {
    let header = {}, claims = {}, data = {}, signature = '';
    try {
        const parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    }
    catch (e) { }
    return {
        header,
        claims,
        data,
        signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const isValidTimestamp = function (token) {
    const claims = decode(token).claims;
    const now = Math.floor(new Date().getTime() / 1000);
    let validSince = 0, validUntil = 0;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) {
            validSince = claims['nbf'];
        }
        else if (claims.hasOwnProperty('iat')) {
            validSince = claims['iat'];
        }
        if (claims.hasOwnProperty('exp')) {
            validUntil = claims['exp'];
        }
        else {
            // token will expire after 24h by default
            validUntil = validSince + 86400;
        }
    }
    return (!!now &&
        !!validSince &&
        !!validUntil &&
        now >= validSince &&
        now <= validUntil);
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const issuedAtTime = function (token) {
    const claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
        return claims['iat'];
    }
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const isValidFormat = function (token) {
    const decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */
const isAdmin = function (token) {
    const claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function contains(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
    }
    else {
        return undefined;
    }
}
function isEmpty(obj) {
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            return false;
        }
    }
    return true;
}
function map(obj, fn, contextObj) {
    const res = {};
    for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            res[key] = fn.call(contextObj, obj[key], key, obj);
        }
    }
    return res;
}
/**
 * Deep equal two objects. Support Arrays and Objects.
 */
function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    const aKeys = Object.keys(a);
    const bKeys = Object.keys(b);
    for (const k of aKeys) {
        if (!bKeys.includes(k)) {
            return false;
        }
        const aProp = a[k];
        const bProp = b[k];
        if (isObject(aProp) && isObject(bProp)) {
            if (!deepEqual(aProp, bProp)) {
                return false;
            }
        }
        else if (aProp !== bProp) {
            return false;
        }
    }
    for (const k of bKeys) {
        if (!aKeys.includes(k)) {
            return false;
        }
    }
    return true;
}
function isObject(thing) {
    return thing !== null && typeof thing === 'object';
}

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Rejects if the given promise doesn't resolve in timeInMS milliseconds.
 * @internal
 */
function promiseWithTimeout(promise, timeInMS = 2000) {
    const deferredPromise = new Deferred();
    setTimeout(() => deferredPromise.reject('timeout!'), timeInMS);
    promise.then(deferredPromise.resolve, deferredPromise.reject);
    return deferredPromise.promise;
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a
 * params object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */
function querystring(querystringParams) {
    const params = [];
    for (const [key, value] of Object.entries(querystringParams)) {
        if (Array.isArray(value)) {
            value.forEach(arrayVal => {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
            });
        }
        else {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
        }
    }
    return params.length ? '&' + params.join('&') : '';
}
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object
 * (e.g. {arg: 'val', arg2: 'val2'})
 */
function querystringDecode(querystring) {
    const obj = {};
    const tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach(token => {
        if (token) {
            const [key, value] = token.split('=');
            obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
    });
    return obj;
}
/**
 * Extract the query string part of a URL, including the leading question mark (if present).
 */
function extractQuerystring(url) {
    const queryStart = url.indexOf('?');
    if (!queryStart) {
        return '';
    }
    const fragmentStart = url.indexOf('#', queryStart);
    return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : undefined);
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */
/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */
class Sha1 {
    constructor() {
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @private
         */
        this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @private
         */
        this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @private
         */
        this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @private
         */
        this.pad_ = [];
        /**
         * @private {number}
         */
        this.inbuf_ = 0;
        /**
         * @private {number}
         */
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (let i = 1; i < this.blockSize; ++i) {
            this.pad_[i] = 0;
        }
        this.reset();
    }
    reset() {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    }
    /**
     * Internal compress helper function.
     * @param buf Block to compress.
     * @param offset Offset of the block in the buffer.
     * @private
     */
    compress_(buf, offset) {
        if (!offset) {
            offset = 0;
        }
        const W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') {
            for (let i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                    (buf.charCodeAt(offset) << 24) |
                        (buf.charCodeAt(offset + 1) << 16) |
                        (buf.charCodeAt(offset + 2) << 8) |
                        buf.charCodeAt(offset + 3);
                offset += 4;
            }
        }
        else {
            for (let i = 0; i < 16; i++) {
                W[i] =
                    (buf[offset] << 24) |
                        (buf[offset + 1] << 16) |
                        (buf[offset + 2] << 8) |
                        buf[offset + 3];
                offset += 4;
            }
        }
        // expand to 80 words
        for (let i = 16; i < 80; i++) {
            const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
        }
        let a = this.chain_[0];
        let b = this.chain_[1];
        let c = this.chain_[2];
        let d = this.chain_[3];
        let e = this.chain_[4];
        let f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for (let i = 0; i < 80; i++) {
            if (i < 40) {
                if (i < 20) {
                    f = d ^ (b & (c ^ d));
                    k = 0x5a827999;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            }
            else {
                if (i < 60) {
                    f = (b & c) | (d & (b | c));
                    k = 0x8f1bbcdc;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0xca62c1d6;
                }
            }
            const t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
    }
    update(bytes, length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) {
            return;
        }
        if (length === undefined) {
            length = bytes.length;
        }
        const lengthMinusBlock = length - this.blockSize;
        let n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        const buf = this.buf_;
        let inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while (n < length) {
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf === 0) {
                while (n <= lengthMinusBlock) {
                    this.compress_(bytes, n);
                    n += this.blockSize;
                }
            }
            if (typeof bytes === 'string') {
                while (n < length) {
                    buf[inbuf] = bytes.charCodeAt(n);
                    ++inbuf;
                    ++n;
                    if (inbuf === this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
            else {
                while (n < length) {
                    buf[inbuf] = bytes[n];
                    ++inbuf;
                    ++n;
                    if (inbuf === this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += length;
    }
    /** @override */
    digest() {
        const digest = [];
        let totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) {
            this.update(this.pad_, 56 - this.inbuf_);
        }
        else {
            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        // Add # bits.
        for (let i = this.blockSize - 1; i >= 56; i--) {
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        let n = 0;
        for (let i = 0; i < 5; i++) {
            for (let j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
            }
        }
        return digest;
    }
}

/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    const proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
class ObserverProxy {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    constructor(executor, onNoObservers) {
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(() => {
            executor(this);
        })
            .catch(e => {
            this.error(e);
        });
    }
    next(value) {
        this.forEachObserver((observer) => {
            observer.next(value);
        });
    }
    error(error) {
        this.forEachObserver((observer) => {
            observer.error(error);
        });
        this.close(error);
    }
    complete() {
        this.forEachObserver((observer) => {
            observer.complete();
        });
        this.close();
    }
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    subscribe(nextOrObserver, error, complete) {
        let observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, [
            'next',
            'error',
            'complete'
        ])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error,
                complete
            };
        }
        if (observer.next === undefined) {
            observer.next = noop;
        }
        if (observer.error === undefined) {
            observer.error = noop;
        }
        if (observer.complete === undefined) {
            observer.complete = noop;
        }
        const unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.task.then(() => {
                try {
                    if (this.finalError) {
                        observer.error(this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    }
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    unsubscribeOne(i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    }
    forEachObserver(fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (let i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    }
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    sendOne(i, fn) {
        // Execute the callback asynchronously
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(() => {
            if (this.observers !== undefined && this.observers[i] !== undefined) {
                try {
                    fn(this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    }
    close(err) {
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        this.task.then(() => {
            this.observers = undefined;
            this.onNoObservers = undefined;
        });
    }
}
/** Turn synchronous function into one called asynchronously. */
// eslint-disable-next-line @typescript-eslint/ban-types
function async(fn, onError) {
    return (...args) => {
        Promise.resolve(true)
            .then(() => {
            fn(...args);
        })
            .catch((error) => {
            if (onError) {
                onError(error);
            }
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (const method of methods) {
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function noop() {
    // do nothing
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */
const validateArgCount = function (fnName, minCount, maxCount, argCount) {
    let argError;
    if (argCount < minCount) {
        argError = 'at least ' + minCount;
    }
    else if (argCount > maxCount) {
        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    }
    if (argError) {
        const error = fnName +
            ' failed: Was called with ' +
            argCount +
            (argCount === 1 ? ' argument.' : ' arguments.') +
            ' Expects ' +
            argError +
            '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argName The name of the argument
 * @return The prefix to add to the error thrown for validation.
 */
function errorPrefix(fnName, argName) {
    return `${fnName} failed: ${argName} argument `;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */
function validateNamespace(fnName, namespace, optional) {
    if (optional && !namespace) {
        return;
    }
    if (typeof namespace !== 'string') {
        //TODO: I should do more validation here. We only allow certain chars in namespaces.
        throw new Error(errorPrefix(fnName, 'namespace') + 'must be a valid firebase namespace.');
    }
}
function validateCallback(fnName, argumentName, 
// eslint-disable-next-line @typescript-eslint/ban-types
callback, optional) {
    if (optional && !callback) {
        return;
    }
    if (typeof callback !== 'function') {
        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid function.');
    }
}
function validateContextObject(fnName, argumentName, context, optional) {
    if (optional && !context) {
        return;
    }
    if (typeof context !== 'object' || context === null) {
        throw new Error(errorPrefix(fnName, argumentName) + 'must be a valid context object.');
    }
}

/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */
const stringToByteArray = function (str) {
    const out = [];
    let p = 0;
    for (let i = 0; i < str.length; i++) {
        let c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            const high = c - 0xd800; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            const low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if (c < 65536) {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */
const stringLength = function (str) {
    let p = 0;
    for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
            p++;
        }
        else if (c < 2048) {
            p += 2;
        }
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        }
        else {
            p += 3;
        }
    }
    return p;
};

/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Copied from https://stackoverflow.com/a/2117523
 * Generates a new uuid.
 * @public
 */
const uuidv4 = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
};

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The amount of milliseconds to exponentially increase.
 */
const DEFAULT_INTERVAL_MILLIS = 1000;
/**
 * The factor to backoff by.
 * Should be a number greater than 1.
 */
const DEFAULT_BACKOFF_FACTOR = 2;
/**
 * The maximum milliseconds to increase to.
 *
 * <p>Visible for testing
 */
const MAX_VALUE_MILLIS = 4 * 60 * 60 * 1000; // Four hours, like iOS and Android.
/**
 * The percentage of backoff time to randomize by.
 * See
 * http://go/safe-client-behavior#step-1-determine-the-appropriate-retry-interval-to-handle-spike-traffic
 * for context.
 *
 * <p>Visible for testing
 */
const RANDOM_FACTOR = 0.5;
/**
 * Based on the backoff method from
 * https://github.com/google/closure-library/blob/master/closure/goog/math/exponentialbackoff.js.
 * Extracted here so we don't need to pass metadata and a stateful ExponentialBackoff object around.
 */
function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR) {
    // Calculates an exponentially increasing value.
    // Deviation: calculates value from count and a constant interval, so we only need to save value
    // and count to restore state.
    const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
    // A random "fuzz" to avoid waves of retries.
    // Deviation: randomFactor is required.
    const randomWait = Math.round(
    // A fraction of the backoff value to add/subtract.
    // Deviation: changes multiplication order to improve readability.
    RANDOM_FACTOR *
        currBaseValue *
        // A random float (rounded to int by Math.round above) in the range [-1, 1]. Determines
        // if we add or subtract.
        (Math.random() - 0.5) *
        2);
    // Limits backoff to max to avoid effectively permanent backoff.
    return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provide English ordinal letters after a number
 */
function ordinal(i) {
    if (!Number.isFinite(i)) {
        return `${i}`;
    }
    return i + indicator(i);
}
function indicator(i) {
    i = Math.abs(i);
    const cent = i % 100;
    if (cent >= 10 && cent <= 20) {
        return 'th';
    }
    const dec = i % 10;
    if (dec === 1) {
        return 'st';
    }
    if (dec === 2) {
        return 'nd';
    }
    if (dec === 3) {
        return 'rd';
    }
    return 'th';
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getModularInstance(service) {
    if (service && service._delegate) {
        return service._delegate;
    }
    else {
        return service;
    }
}


//# sourceMappingURL=index.esm2017.js.map


/***/ }),

/***/ "./global-variables.ts":
/*!*****************************!*\
  !*** ./global-variables.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Debugger: () => (/* binding */ Debugger),
/* harmony export */   font: () => (/* binding */ font),
/* harmony export */   lang: () => (/* binding */ lang),
/* harmony export */   pseudoId: () => (/* binding */ pseudoId)
/* harmony export */ });
/* harmony import */ var _src_common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/common/common */ "./src/common/common.ts");
/* harmony import */ var _src_common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/common/utils */ "./src/common/utils.ts");
const urlParams = new URLSearchParams(window.location.search);


var pseudoId = urlParams.get("cr_user_id");
var lang = urlParams.get("cr_lang") == null ? "english" : urlParams.get("cr_lang");
const font = _src_common_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getLanguageSpecificFont(lang);
const Debugger = {
    DevelopmentLink: window.location.href.includes(_src_common_common__WEBPACK_IMPORTED_MODULE_0__.DevelopmentServer)
        ? true
        : false,
    DebugMode: false,
};
window.feedbackTextWorkerPath = './workers/feedback-text-worker.js';


/***/ }),

/***/ "./src/Firebase/base-firebase-integration.ts":
/*!***************************************************!*\
  !*** ./src/Firebase/base-firebase-integration.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BaseFirebaseIntegration: () => (/* binding */ BaseFirebaseIntegration)
/* harmony export */ });
/* harmony import */ var firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! firebase/app */ "./node_modules/firebase/app/dist/esm/index.esm.js");
/* harmony import */ var firebase_analytics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! firebase/analytics */ "./node_modules/firebase/analytics/dist/esm/index.esm.js");
/* harmony import */ var _firebase_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./firebase-config */ "./src/Firebase/firebase-config.ts");



class BaseFirebaseIntegration {
    firebaseApp;
    analytics;
    constructor() {
        this.initializeFirebase();
    }
    customEvents(eventName, event) {
        try {
            console.log(`Sending custom event ${eventName} with data:`, event);
            (0,firebase_analytics__WEBPACK_IMPORTED_MODULE_1__.logEvent)(this.analytics, eventName, event);
        }
        catch (error) {
            console.error("Error while logging custom event:", error);
        }
    }
    sessionEnd() {
        try {
            if (navigator.onLine && this.analytics !== undefined) {
                (0,firebase_analytics__WEBPACK_IMPORTED_MODULE_1__.logEvent)(this.analytics, "session_end");
            }
        }
        catch (error) {
            console.error("Error while logging session_end event:", error);
        }
    }
    initializeFirebase() {
        try {
            this.firebaseApp = (0,firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp)(_firebase_config__WEBPACK_IMPORTED_MODULE_2__.firebaseConfig);
            this.analytics = (0,firebase_analytics__WEBPACK_IMPORTED_MODULE_1__.getAnalytics)(this.firebaseApp);
        }
        catch (error) {
            console.error("Error while initializing Firebase:", error);
        }
    }
}


/***/ }),

/***/ "./src/Firebase/firebase-config.ts":
/*!*****************************************!*\
  !*** ./src/Firebase/firebase-config.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   firebaseConfig: () => (/* binding */ firebaseConfig)
/* harmony export */ });
const firebaseConfig = {
    apiKey: "AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",
    authDomain: "ftm-b9d99.firebaseapp.com",
    databaseURL: "https://ftm-b9d99.firebaseio.com",
    projectId: "ftm-b9d99",
    storageBucket: "ftm-b9d99.appspot.com",
    messagingSenderId: "602402387941",
    appId: "1:602402387941:web:a63f4eaddc949f539de10c",
    measurementId: "G-FVLSN7D7NM",
};


/***/ }),

/***/ "./src/Firebase/firebase-integration.ts":
/*!**********************************************!*\
  !*** ./src/Firebase/firebase-integration.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FirebaseIntegration: () => (/* binding */ FirebaseIntegration)
/* harmony export */ });
/* harmony import */ var _base_firebase_integration__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base-firebase-integration */ "./src/Firebase/base-firebase-integration.ts");

class FirebaseIntegration extends _base_firebase_integration__WEBPACK_IMPORTED_MODULE_0__.BaseFirebaseIntegration {
    static instance;
    constructor() {
        super();
    }
    static getInstance() {
        if (!FirebaseIntegration.instance) {
            FirebaseIntegration.instance = new FirebaseIntegration();
        }
        return FirebaseIntegration.instance;
    }
    sendSessionStartEvent(data) {
        this.customEvents("session_start", data);
    }
    sendSessionEndEvent(data) {
        this.customEvents("session_end", data);
    }
    sendPuzzleCompletedEvent(data) {
        this.customEvents("puzzle_completed", data);
    }
    sendLevelCompletedEvent(data) {
        this.customEvents("level_completed", data);
    }
    sendUserClickedOnPlayEvent() {
        this.customEvents('user_clicked', { click: 'Click' });
    }
}


/***/ }),

/***/ "./src/common/common.ts":
/*!******************************!*\
  !*** ./src/common/common.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ButtonClick: () => (/* binding */ ButtonClick),
/* harmony export */   DevelopmentServer: () => (/* binding */ DevelopmentServer),
/* harmony export */   EndScene1: () => (/* binding */ EndScene1),
/* harmony export */   FeedbackAudio: () => (/* binding */ FeedbackAudio),
/* harmony export */   FirebaseUserClicked: () => (/* binding */ FirebaseUserClicked),
/* harmony export */   FirebaseUserInstall: () => (/* binding */ FirebaseUserInstall),
/* harmony export */   GameScene1: () => (/* binding */ GameScene1),
/* harmony export */   IntroMusic: () => (/* binding */ IntroMusic),
/* harmony export */   IsCached: () => (/* binding */ IsCached),
/* harmony export */   LevelEndAudio: () => (/* binding */ LevelEndAudio),
/* harmony export */   LevelSelection1: () => (/* binding */ LevelSelection1),
/* harmony export */   MonsterAudio: () => (/* binding */ MonsterAudio),
/* harmony export */   NativePlayButton: () => (/* binding */ NativePlayButton),
/* harmony export */   PWAInstallStatus: () => (/* binding */ PWAInstallStatus),
/* harmony export */   PhraseAudio: () => (/* binding */ PhraseAudio),
/* harmony export */   PreviousPlayedLevel: () => (/* binding */ PreviousPlayedLevel),
/* harmony export */   PromptAudio: () => (/* binding */ PromptAudio),
/* harmony export */   StartScene1: () => (/* binding */ StartScene1),
/* harmony export */   StoneMusic: () => (/* binding */ StoneMusic),
/* harmony export */   StoreMonsterPhaseNumber: () => (/* binding */ StoreMonsterPhaseNumber),
/* harmony export */   TimeOver: () => (/* binding */ TimeOver),
/* harmony export */   UrlSubstring: () => (/* binding */ UrlSubstring),
/* harmony export */   UserCancelled: () => (/* binding */ UserCancelled),
/* harmony export */   loadImages: () => (/* binding */ loadImages)
/* harmony export */ });
function loadImages(sources, callback) {
    var images = {};
    var loadedImages = 0;
    var numImages = 0;
    // get num of sources
    for (var src in sources) {
        numImages++;
    }
    for (var src in sources) {
        images[src] = new Image();
        images[src].onload = function () {
            if (++loadedImages >= numImages) {
                callback(images);
            }
        };
        images[src].src = sources[src];
    }
}
const FirebaseUserClicked = "user_clicked";
const FirebaseUserInstall = "user_installed";
const PWAInstallStatus = "pwa_installed_status";
const UserCancelled = "user_cancel_installation";
const NativePlayButton = "native_playbutton_clicked";
const PreviousPlayedLevel = "storePreviousPlayedLevel";
const StoreMonsterPhaseNumber = "storeMonsterPhaseNumber";
const IsCached = "is_cached";
const MonsterAudio = "monster_audio";
const FeedbackAudio = "feedback_audio";
const IntroMusic = "intro_music";
const PromptAudio = "prompt_audio";
const ButtonClick = "button_click";
const TimeOver = "time_over";
const StoneMusic = "stone_music";
const PhraseAudio = "phrase_audio";
const LevelEndAudio = "level_end_audio";
const UrlSubstring = "/feedthemonster";
const DevelopmentServer = "https://feedthemonsterdev.curiouscontent.org";
const StartScene1 = "StartScene1";
const LevelSelection1 = "LevelSelection1";
const GameScene1 = "GameScene1";
const EndScene1 = "EndScene1";


/***/ }),

/***/ "./src/common/event-names.ts":
/*!***********************************!*\
  !*** ./src/common/event-names.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CLICK: () => (/* binding */ CLICK),
/* harmony export */   LOADPUZZLE: () => (/* binding */ LOADPUZZLE),
/* harmony export */   MOUSEDOWN: () => (/* binding */ MOUSEDOWN),
/* harmony export */   MOUSEMOVE: () => (/* binding */ MOUSEMOVE),
/* harmony export */   MOUSEUP: () => (/* binding */ MOUSEUP),
/* harmony export */   STONEDROP: () => (/* binding */ STONEDROP),
/* harmony export */   TOUCHEND: () => (/* binding */ TOUCHEND),
/* harmony export */   TOUCHMOVE: () => (/* binding */ TOUCHMOVE),
/* harmony export */   TOUCHSTART: () => (/* binding */ TOUCHSTART),
/* harmony export */   VISIBILITY_CHANGE: () => (/* binding */ VISIBILITY_CHANGE)
/* harmony export */ });
// custom Events
const LOADPUZZLE = "loadpuzzle";
const STONEDROP = "stonesdropped";
// default Events
const MOUSEMOVE = "mousemove";
const MOUSEDOWN = "mousedown";
const MOUSEUP = "mouseup";
const TOUCHSTART = "touchstart";
const TOUCHMOVE = "touchmove";
const TOUCHEND = "touchend";
const CLICK = "click";
const VISIBILITY_CHANGE = "visibilitychange";


/***/ }),

/***/ "./src/common/level-config.ts":
/*!************************************!*\
  !*** ./src/common/level-config.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LevelConfig: () => (/* binding */ LevelConfig)
/* harmony export */ });
class LevelConfig {
    x;
    y;
    index;
    drawready;
    img;
    constructor(xPos, yPos, index) {
        this.x = xPos;
        this.y = yPos;
        this.index = index;
        this.drawready = false;
        this.img = new Image();
        this.img.src = "./assets/images/mapIcon.png";
        this.img.onload = function () {
            console.log("mapIcon loadededed");
        };
    }
}


/***/ }),

/***/ "./src/common/stone-config.ts":
/*!************************************!*\
  !*** ./src/common/stone-config.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StoneConfig: () => (/* binding */ StoneConfig)
/* harmony export */ });
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");

class StoneConfig {
    x;
    y;
    origx;
    origy;
    text;
    img;
    imageSize;
    textFontSize;
    canvasWidth;
    canvasHeight;
    imageCenterOffsetX;
    imageCenterOffsetY;
    context;
    tutorialInstance;
    timerTickingInstance;
    frame = 0;
    constructor(context, canvasWidth, canvasHeight, stoneLetter, xPos, yPos, img, timerTickingInstance, tutorialInstance) {
        this.x = xPos;
        this.y = yPos;
        this.origx = xPos;
        this.origy = yPos;
        this.canvasWidth = canvasWidth;
        this.canvasHeight = canvasHeight;
        this.tutorialInstance = tutorialInstance;
        this.text = stoneLetter;
        this.img = img;
        this.context = context;
        this.calculateImageAndFontSize();
        this.imageCenterOffsetX = this.imageSize / 2.3;
        this.imageCenterOffsetY = this.imageSize / 1.5;
        this.timerTickingInstance = timerTickingInstance;
    }
    calculateImageAndFontSize() {
        if (this.context.measureText(this.text).width * 1.4 >
            this.canvasHeight / 13) {
            this.imageSize = this.context.measureText(this.text).width * 1.1;
            this.textFontSize = this.canvasHeight / 25;
            if (this.text.length >= 3 && this.origx < 50 && this.origx < this.canvasWidth / 2) {
                this.x = this.origx + 25;
            }
        }
        else {
            this.imageSize = this.canvasHeight / 13;
            this.textFontSize = this.canvasHeight / 20;
        }
    }
    getEase = (currentProgress, start, distance, steps) => {
        return -distance / 2 * (Math.cos(Math.PI * currentProgress / steps) - 1) + start;
    };
    getX = () => {
        if (this.frame >= 100) {
            // Animation has ended, return the final stone position
            return this.x;
        }
        return this.getEase(this.frame, 0, this.x, 100);
    };
    getY = () => {
        if (this.frame >= 100) {
            // Animation has ended, return the final stone position
            return this.y;
        }
        return this.getEase(this.frame, 0, this.y, 100);
    };
    draw(deltaTime) {
        if (this.frame < 100) {
            this.frame = this.frame + 1;
        }
        else {
            if (this.tutorialInstance != null || this.tutorialInstance != undefined) {
                this.tutorialInstance.draw(deltaTime);
            }
        }
        this.context.drawImage(this.img, this.getX() - this.imageCenterOffsetX, this.getY() - this.imageCenterOffsetY, this.imageSize, this.imageSize);
        this.context.fillStyle = "white";
        this.context.font = this.textFontSize + `px ${_global_variables__WEBPACK_IMPORTED_MODULE_0__.font}, monospace`;
        this.context.textAlign = "center";
        this.context.fillText(this.text, this.getX(), this.getY());
    }
}


/***/ }),

/***/ "./src/common/utils.ts":
/*!*****************************!*\
  !*** ./src/common/utils.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Utils: () => (/* binding */ Utils)
/* harmony export */ });
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");
/* harmony import */ var _data_i18_font_mapping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/i18-font-mapping */ "./src/data/i18-font-mapping.ts");


class Utils {
    static UrlSubstring = '/feedthemonster';
    static getConvertedDevProdURL(url) {
        return _global_variables__WEBPACK_IMPORTED_MODULE_0__.Debugger.DevelopmentLink
            ? url.slice(0, url.indexOf(this.UrlSubstring) +
                this.UrlSubstring.length) +
                "dev" +
                url.slice(url.indexOf(this.UrlSubstring) +
                    this.UrlSubstring.length)
            : url;
    }
    static getLanguageSpecificFont(language) {
        const lowerCaseLanguage = language.toLowerCase();
        for (const key in _data_i18_font_mapping__WEBPACK_IMPORTED_MODULE_1__["default"]) {
            if (key.toLowerCase() === lowerCaseLanguage) {
                return _data_i18_font_mapping__WEBPACK_IMPORTED_MODULE_1__["default"][key];
            }
        }
        console.log(`Font not found for language: ${language}`);
        return 'NotoSans-Regular';
    }
}


/***/ }),

/***/ "./src/components/audio-player.ts":
/*!****************************************!*\
  !*** ./src/components/audio-player.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AudioPlayer: () => (/* binding */ AudioPlayer)
/* harmony export */ });
class AudioPlayer {
    audioContext;
    sourceNode;
    audioQueue;
    promptAudioBuffer;
    static audioBuffers = new Map();
    audioSourcs = [];
    constructor() {
        this.audioContext = AudioContextManager.getAudioContext();
        this.sourceNode = null;
        this.audioQueue = [];
    }
    async preloadPromptAudio(audioSrc) {
        const audioBuffer = await this.loadAndDecodeAudio(audioSrc);
        if (audioBuffer) {
            this.promptAudioBuffer = audioBuffer;
        }
    }
    async preloadGameAudio(audioSrc) {
        if (AudioPlayer.audioBuffers.has(audioSrc)) {
            return;
        }
        const audioBuffer = await this.loadAndDecodeAudio(audioSrc);
        if (audioBuffer) {
            AudioPlayer.audioBuffers.set(audioSrc, audioBuffer);
        }
    }
    playAudio(audioSrc) {
        const audioBuffer = AudioPlayer.audioBuffers.get(audioSrc);
        if (audioBuffer) {
            const sourceNode = this.audioContext.createBufferSource();
            sourceNode.buffer = audioBuffer;
            sourceNode.connect(this.audioContext.destination);
            this.audioSourcs.push(sourceNode);
            sourceNode.start();
        }
    }
    playFeedbackAudios = (loop = false, ...fileUrl) => {
        this.audioQueue = fileUrl;
        if (this.audioQueue.length > 0) {
            this.playFetch(0, loop);
        }
    };
    playPromptAudio = (audioSrc) => {
        if (this.promptAudioBuffer) {
            const sourceNode = this.audioContext.createBufferSource();
            sourceNode.buffer = this.promptAudioBuffer;
            sourceNode.connect(this.audioContext.destination);
            this.audioSourcs.push(sourceNode);
            sourceNode.start();
        }
    };
    playButtonClickSound = (audioSrc) => {
        const audioBuffer = AudioPlayer.audioBuffers.get(audioSrc);
        if (audioBuffer) {
            const sourceNode = this.audioContext.createBufferSource();
            sourceNode.buffer = audioBuffer;
            sourceNode.connect(this.audioContext.destination);
            sourceNode.start();
        }
    };
    stopFeedbackAudio = () => {
        if (this.sourceNode) {
            this.sourceNode.stop();
            this.sourceNode = null;
        }
        this.audioQueue = [];
    };
    stopAllAudios = () => {
        if (this.sourceNode) {
            this.sourceNode.stop();
            this.sourceNode = null;
        }
        this.audioQueue = [];
        this.audioSourcs.forEach((sourceNode) => {
            sourceNode.stop();
        });
        this.audioSourcs = [];
    };
    playFetch = (index, loop) => {
        if (index >= this.audioQueue.length) {
            this.stopFeedbackAudio();
            return;
        }
        fetch(this.audioQueue[index])
            .then((response) => response.arrayBuffer())
            .then((buffer) => {
            this.audioContext?.decodeAudioData(buffer, (audioBuffer) => {
                this.sourceNode = this.audioContext?.createBufferSource();
                this.sourceNode.buffer = audioBuffer;
                this.sourceNode.connect(this.audioContext?.destination);
                this.sourceNode.loop = loop;
                this.sourceNode.onended = () => this.handleAudioEnded(index, loop);
                this.sourceNode.start();
            });
        });
    };
    handleAudioEnded = (index, loop) => {
        // this.sourceNode.removeEventListener("ended", this.handleAudioEnded, false);
        if (this.sourceNode) {
            this.sourceNode.onended = null;
            this.sourceNode.stop();
            this.sourceNode.disconnect();
            this.sourceNode = null;
        }
        this.playFetch(index + 1, loop);
    };
    async loadAndDecodeAudio(audioSrc) {
        return new Promise(async (resolve, reject) => {
            try {
                const response = await fetch(audioSrc);
                const arrayBuffer = await response.arrayBuffer();
                const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);
                resolve(audioBuffer);
            }
            catch (error) {
                console.error('Error loading or decoding audio:', error);
                reject(error);
            }
        });
    }
}
class AudioContextManager {
    static instance = null;
    static getAudioContext() {
        if (!AudioContextManager.instance) {
            AudioContextManager.instance = new (window.AudioContext || window.webkitAudioContext)();
        }
        return AudioContextManager.instance;
    }
}


/***/ }),

/***/ "./src/components/background.ts":
/*!**************************************!*\
  !*** ./src/components/background.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Background: () => (/* binding */ Background)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");

// to do need to optimize more
var images = {
    bgImg: "./assets/images/bg_v01.jpg",
    hillImg: "./assets/images/hill_v01.png",
    pillerImg: "./assets/images/Totem_v02_v01.png",
    grassImg: "./assets/images/FG_a_v01.png",
    fenchImg: "./assets/images/fence_v01.png",
    autumnBgImg: "./assets/images/Autumn_bg_v01.jpg",
    autumnHillImg: "./assets/images/Autumn_hill_v01.png",
    autumnPillerImg: "./assets/images/Autumn_sign_v01.png",
    autumnSignImg: "./assets/images/Autumn_sign_v01.png",
    autumnGrassImg: "./assets/images/Autumn_FG_v01.png",
    autumnFenceImg: "./assets/images/Autumn_fence_v01.png",
    winterBgImg: "./assets/images/Winter_bg_01.jpg",
    winterHillImg: "./assets/images/Winter_hill_v01.png",
    winterSignImg: "./assets/images/Winter_sign_v01.png",
    winterGrassImg: "./assets/images/Winter_FG_v01.png",
    winterFenceImg: "./assets/images/Winter_fence_v01.png",
    winterPillerImg: "./assets/images/Winter_sign_v01.png",
};
class Background {
    width;
    height;
    context;
    imagesLoaded = false;
    loadedImages;
    levelNumber;
    availableBackgroundTypes = ["Summer", "Autumn", "Winter"];
    backgroundType;
    constructor(context, width, height, levelNumber) {
        this.width = width;
        this.height = height;
        this.context = context;
        this.levelNumber = levelNumber;
        this.backgroundType =
            Math.floor(this.levelNumber / 10) %
                this.availableBackgroundTypes.length;
        if (this.levelNumber >= 30) {
            this.backgroundType = this.backgroundType % 3;
        }
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
        });
    }
    draw() {
        if (this.imagesLoaded) {
            switch (this.availableBackgroundTypes[this.backgroundType]) {
                case "Winter":
                    {
                        this.context.drawImage(this.loadedImages.winterBgImg, 0, 0, this.width, this.height);
                        this.context.drawImage(this.loadedImages.winterPillerImg, this.width * 0.38, this.height / 6, this.width / 1.2, this.height / 2);
                        this.context.drawImage(this.loadedImages.winterFenceImg, -this.width * 0.4, this.height / 4, this.width, this.height / 2);
                        this.context.drawImage(this.loadedImages.winterHillImg, -this.width * 0.25, this.height / 2, this.width * 1.5, this.height / 2);
                        this.context.drawImage(this.loadedImages.winterGrassImg, -this.width * 0.25, this.height / 2 + (this.height / 2) * 0.1, this.width * 1.5, this.height / 2);
                    }
                    break;
                case "Autumn":
                    {
                        this.context.drawImage(this.loadedImages.autumnBgImg, 0, 0, this.width, this.height);
                        this.context.drawImage(this.loadedImages.autumnPillerImg, this.width * 0.38, this.height / 6, this.width / 1.2, this.height / 2);
                        this.context.drawImage(this.loadedImages.autumnFenceImg, -this.width * 0.4, this.height / 4, this.width, this.height / 2);
                        this.context.drawImage(this.loadedImages.autumnHillImg, -this.width * 0.25, this.height / 2, this.width * 1.5, this.height / 2);
                        this.context.drawImage(this.loadedImages.autumnGrassImg, -this.width * 0.25, this.height / 2 + (this.height / 2) * 0.1, this.width * 1.5, this.height / 2);
                    }
                    break;
                default:
                    {
                        this.context.drawImage(this.loadedImages.bgImg, 0, 0, this.width, this.height);
                        this.context.drawImage(this.loadedImages.pillerImg, this.width * 0.6, this.height / 6, this.width, this.height / 2);
                        this.context.drawImage(this.loadedImages.fenchImg, -this.width * 0.4, this.height / 3, this.width, this.height / 3);
                        this.context.drawImage(this.loadedImages.hillImg, -this.width * 0.25, this.height / 2, this.width * 1.5, this.height / 2);
                        this.context.drawImage(this.loadedImages.grassImg, -this.width * 0.25, this.height / 2 + (this.height / 2) * 0.1, this.width * 1.5, this.height / 2);
                    }
                    break;
            }
        }
    }
}


/***/ }),

/***/ "./src/components/buttons/cancel-button.ts":
/*!*************************************************!*\
  !*** ./src/components/buttons/cancel-button.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CancelButton)
/* harmony export */ });
class CancelButton {
    posX;
    posY;
    context;
    canvas;
    imagesLoaded = false;
    cancel_button_image;
    constructor(context, canvas) {
        this.posX = canvas.width * 0.1 + (canvas.width * 0.15) / 2;
        this.posY = canvas.height * 0.2;
        this.context = context;
        this.canvas = canvas;
        this.cancel_button_image = new Image();
        this.cancel_button_image.src = "./assets/images/close_btn.png";
        this.cancel_button_image.onload = (e) => {
            this.imagesLoaded = true;
            this.cancel_button_image = this.cancel_button_image;
        };
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.cancel_button_image, this.posX, this.posY, this.canvas.width * 0.15, this.canvas.width * 0.15);
        }
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.posX - (this.canvas.width * 0.15) / 2) *
            (xClick - this.posX - (this.canvas.width * 0.15) / 2) +
            (yClick - this.posY - (this.canvas.width * 0.15) / 2) *
                (yClick - this.posY - (this.canvas.width * 0.15) / 2));
        if (distance < (this.canvas.width * 0.15) / 2) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/buttons/close-button.ts":
/*!************************************************!*\
  !*** ./src/components/buttons/close-button.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ CloseButton)
/* harmony export */ });
class CloseButton {
    posX;
    posY;
    context;
    canvas;
    imagesLoaded = false;
    close_button_image;
    constructor(context, canvas, posX, posY) {
        this.posX = posX;
        this.posY = posY;
        this.context = context;
        this.canvas = canvas;
        this.close_button_image = new Image();
        this.close_button_image.src = "./assets/images/map_btn.png";
        this.close_button_image.onload = (e) => {
            this.imagesLoaded = true;
            this.close_button_image = this.close_button_image;
        };
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.close_button_image, this.posX, this.posY, this.canvas.width * 0.19, this.canvas.width * 0.19);
        }
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.posX - (this.canvas.width * 0.19) / 2) *
            (xClick - this.posX - (this.canvas.width * 0.19) / 2) +
            (yClick - this.posY - (this.canvas.width * 0.19) / 2) *
                (yClick - this.posY - (this.canvas.width * 0.19) / 2));
        if (distance < (this.canvas.width * 0.19) / 2) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/buttons/next-button.ts":
/*!***********************************************!*\
  !*** ./src/components/buttons/next-button.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ NextButton)
/* harmony export */ });
// import { Game } from "../../../scenes/game";
class NextButton {
    posX;
    posY;
    context;
    width;
    height;
    imagesLoaded = false;
    next_button_image;
    constructor(context, width, height, posX, posY) {
        this.posX = posX;
        this.posY = posY;
        this.context = context;
        this.width = width;
        this.height = height;
        this.next_button_image = new Image();
        this.next_button_image.src = "./assets/images/next_btn.png";
        this.next_button_image.onload = (e) => {
            this.imagesLoaded = true;
            this.next_button_image = this.next_button_image;
        };
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.next_button_image, this.posX, this.posY, this.width * 0.19, this.width * 0.19);
        }
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.posX - (this.width * 0.19) / 2) *
            (xClick - this.posX - (this.width * 0.19) / 2) +
            (yClick - this.posY - (this.width * 0.19) / 2) *
                (yClick - this.posY - (this.width * 0.19) / 2));
        if (distance < (this.width * 0.19) / 2) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/buttons/pause-button.ts":
/*!************************************************!*\
  !*** ./src/components/buttons/pause-button.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PauseButton)
/* harmony export */ });
class PauseButton {
    posX;
    posY;
    context;
    canvas;
    imagesLoaded = false;
    pause_button_image;
    constructor(context, canvas) {
        this.posX = canvas.width - canvas.height * 0.09;
        this.posY = 0;
        this.context = context;
        this.canvas = canvas;
        this.pause_button_image = new Image();
        this.pause_button_image.src = "./assets/images/pause_v01.png";
        this.pause_button_image.onload = (e) => {
            this.imagesLoaded = true;
            this.pause_button_image = this.pause_button_image;
        };
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.pause_button_image, this.posX, this.posY, this.canvas.height * 0.09, this.canvas.height * 0.09);
        }
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.posX - (this.canvas.height * 0.09) / 2) *
            (xClick - this.posX - (this.canvas.height * 0.09) / 2) +
            (yClick - this.posY - (this.canvas.height * 0.09) / 2) *
                (yClick - this.posY - (this.canvas.height * 0.09) / 2));
        if (distance < (this.canvas.height * 0.09) / 2) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/buttons/retry-button.ts":
/*!************************************************!*\
  !*** ./src/components/buttons/retry-button.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ RetryButton)
/* harmony export */ });
class RetryButton {
    posX;
    posY;
    context;
    canvas;
    imagesLoaded = false;
    retry_button_image;
    constructor(context, canvas, posX, posY) {
        this.posX = posX;
        this.posY = posY;
        this.context = context;
        this.canvas = canvas;
        this.retry_button_image = new Image();
        this.retry_button_image.src = "./assets/images/retry_btn.png";
        this.retry_button_image.onload = (e) => {
            this.imagesLoaded = true;
            this.retry_button_image = this.retry_button_image;
        };
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.retry_button_image, this.posX, this.posY, this.canvas.width * 0.19, this.canvas.width * 0.19);
        }
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.posX - (this.canvas.width * 0.19) / 2) *
            (xClick - this.posX - (this.canvas.width * 0.19) / 2) +
            (yClick - this.posY - (this.canvas.width * 0.19) / 2) *
                (yClick - this.posY - (this.canvas.width * 0.19) / 2));
        if (distance < (this.canvas.width * 0.19) / 2) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/feedback-particle-effect/feedback-text-effects.ts":
/*!**************************************************************************!*\
  !*** ./src/components/feedback-particle-effect/feedback-text-effects.ts ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FeedbackTextEffects: () => (/* binding */ FeedbackTextEffects)
/* harmony export */ });
/* harmony import */ var _text_particle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./text-particle */ "./src/components/feedback-particle-effect/text-particle.ts");

class FeedbackTextEffects {
    context;
    canvasWidth;
    canvasHeight;
    textX;
    textY;
    fontSize;
    lineHeight;
    maxTextWidth;
    particleDuration;
    startTime;
    particles;
    gap;
    mouse;
    textWorker;
    constructor(context, canvasWidth, canvasHeight) {
        this.context = context;
        this.canvasWidth = canvasWidth;
        this.canvasHeight = canvasHeight;
        this.textX = this.canvasWidth / 1.8;
        this.textY = this.canvasHeight / 2;
        this.fontSize = 65;
        this.lineHeight = this.fontSize * 0.8;
        this.maxTextWidth = this.canvasWidth * 5;
        this.particleDuration = 5000;
        this.startTime = null;
        this.particles = [];
        this.gap = 3;
        this.mouse = {
            radius: 2000,
            x: 0,
            y: 0,
        };
        this.textWorker = new Worker(window.feedbackTextWorkerPath);
        this.textWorker.addEventListener("message", this.handleTextWorkerMessage.bind(this));
    }
    wrapText(text) {
        console.log(text, ">>>>>>>>>");
        const gradient = this.context.createLinearGradient(0, 0, this.canvasWidth, this.canvasHeight);
        gradient.addColorStop(0.3, "#F8E218");
        gradient.addColorStop(0.5, "#F8E218");
        gradient.addColorStop(0.7, "#E39D37");
        this.context.fillStyle = gradient;
        this.context.textAlign = "center";
        this.context.textBaseline = "middle";
        this.context.lineWidth = 3;
        this.context.strokeStyle = "#A46225";
        this.context.font = `bold ${this.fontSize}px Kalam, cursive`;
        // break multiline text
        let lineArray = [];
        let words = text.split(" ");
        let lineCounter = 0;
        let line = "";
        for (let i = 0; i < words.length; i++) {
            let testLine = line + words[i] + " ";
            if (this.context.measureText(testLine).width > this.maxTextWidth) {
                line = words[i] + " ";
                lineCounter++;
            }
            else {
                line = testLine;
            }
            lineArray[lineCounter] = line;
        }
        let textHeight = this.lineHeight * lineCounter;
        this.textY = this.canvasHeight / 4.2 - textHeight / 2;
        const initialX = 50;
        const spacing = 0.3;
        lineArray.forEach((text, index) => {
            let x = initialX;
            console.log(text.length);
            this.context.fillText(text, this.textX, this.textY + index * this.lineHeight);
        });
        this.convertToParticle();
    }
    handleTextWorkerMessage = (event) => {
        const particles = event.data;
        this.particles = particles.map(({ x, y, color }) => new _text_particle__WEBPACK_IMPORTED_MODULE_0__.TextParticle(this, x, y, color));
    };
    convertToParticle() {
        const pixels = this.context.getImageData(0, 0, this.canvasWidth, this.canvasHeight).data;
        this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
        this.textWorker.postMessage({
            canvasWidth: this.canvasWidth,
            canvasHeight: this.canvasHeight,
            gap: this.gap,
            pixels,
        });
    }
    render() {
        this.context.clearRect(0, 0, this.canvasWidth, this.canvasHeight);
        this.particles.forEach((particle) => {
            particle.draw();
            particle.update();
        });
        // if (this.startTime === null) {
        //   this.startTime = Date.now();
        // }
        // const currentTime = Date.now();
        // const elapsedTime = currentTime - this.startTime;
        // if (elapsedTime >= this.particleDuration) {
        //   this.startTime = null;
        //   // this.particles = [];
        // } else {
        //   this.particles.forEach((particle) => {
        //     particle.draw();
        //     particle.update();
        //   });
        // }
    }
    updateParticles() {
        this.textWorker.postMessage({
            particles: this.particles,
            particleDuration: this.particleDuration,
            startTime: this.startTime,
        });
    }
    clearParticle() {
        this.particles = [];
    }
    unregisterEventListener = () => {
        this.textWorker.removeEventListener("message", this.handleTextWorkerMessage);
    };
}


/***/ }),

/***/ "./src/components/feedback-particle-effect/text-particle.ts":
/*!******************************************************************!*\
  !*** ./src/components/feedback-particle-effect/text-particle.ts ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextParticle: () => (/* binding */ TextParticle)
/* harmony export */ });
class TextParticle {
    feedbackTextEffects;
    x;
    y;
    color;
    originX;
    originY;
    size;
    ease;
    constructor(feedbackTextEffects, x, y, color) {
        this.feedbackTextEffects = feedbackTextEffects;
        this.x = Math.random() * this.feedbackTextEffects.canvasWidth;
        this.y = 0;
        this.color = color;
        this.originX = x;
        this.originY = y;
        this.size = this.feedbackTextEffects.gap;
        this.ease = Math.random() * 0.1 + 0.055;
    }
    draw() {
        this.feedbackTextEffects.context.fillStyle = this.color;
        this.feedbackTextEffects.context.fillRect(this.x, this.y, this.size, this.size);
    }
    update() {
        this.x += (this.originX - this.x) * this.ease;
        this.y += this.originY - this.y;
    }
}


/***/ }),

/***/ "./src/components/level-indicator.ts":
/*!*******************************************!*\
  !*** ./src/components/level-indicator.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LevelIndicators: () => (/* binding */ LevelIndicators)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _events_EventManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/EventManager */ "./src/events/EventManager.ts");


class LevelIndicators extends _events_EventManager__WEBPACK_IMPORTED_MODULE_1__.EventManager {
    context;
    canvas;
    activeIndicators;
    images;
    loadedImages;
    imagesLoaded = false;
    constructor(context, canvas, activeIndicators) {
        super({
            stoneDropCallbackHandler: (event) => this.handleStoneDrop(event),
            loadPuzzleCallbackHandler: (event) => this.handleLoadPuzzle(event)
        });
        this.context = context;
        this.canvas = canvas;
        this.activeIndicators = activeIndicators;
        this.images = {
            level_indicator: "./assets/images/levels_v01.png",
            bar_empty: "./assets/images/bar_empty_v01.png",
            bar_full: "./assets/images/bar_full_v01.png"
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
        });
    }
    setIndicators(indicatorCount) {
        this.activeIndicators = indicatorCount;
    }
    addDropStoneEvent() {
        document.addEventListener('dropstone', (event) => {
            console.log("Yeee recived from level-indicator");
            this.setIndicators(2);
        });
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.loadedImages.level_indicator, this.canvas.width * 0.15, 0, this.canvas.width * 0.35, this.canvas.height * 0.09);
            for (var i = 0; i < 5; i++) {
                this.context.drawImage(this.loadedImages.bar_empty, ((this.canvas.width * 0.35) / 7) * (i + 1) +
                    this.canvas.width * 0.15, (this.canvas.height * 0.09) / 2 - (this.canvas.height * 0.09) / 6, (this.canvas.width * 0.35) / 10, (this.canvas.height * 0.09) / 3);
            }
            for (var i = 0; i < this.activeIndicators; i++) {
                this.context.drawImage(this.loadedImages.bar_full, ((this.canvas.width * 0.35) / 7) * (i + 1) + this.canvas.width * 0.15, (this.canvas.height * 0.09) / 2 - (this.canvas.height * 0.09) / 6, (this.canvas.width * 0.35) / 10, (this.canvas.height * 0.09) / 3);
            }
        }
    }
    dispose() {
        this.unregisterEventListener();
    }
    handleStoneDrop(event) {
        // this.isStoneDropped = true;
    }
    handleLoadPuzzle(event) {
        this.setIndicators(event.detail.counter);
    }
}


/***/ }),

/***/ "./src/components/monster.ts":
/*!***********************************!*\
  !*** ./src/components/monster.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Monster: () => (/* binding */ Monster)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _events_EventManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/EventManager */ "./src/events/EventManager.ts");


class Monster extends _events_EventManager__WEBPACK_IMPORTED_MODULE_1__.EventManager {
    zindex;
    width;
    height;
    image;
    frameX;
    frameY;
    maxFrame;
    x;
    y;
    fps;
    countFrame;
    frameInterval;
    frameTimer;
    canvasStack;
    canavsElement;
    context;
    game;
    images;
    loadedImages;
    imagesLoaded = false;
    monsterPhase;
    constructor(game, monsterPhase, callBackFunction) {
        super({
            stoneDropCallbackHandler: (event) => this.handleStoneDrop(event),
            loadPuzzleCallbackHandler: (event) => this.handleLoadPuzzle(event),
        });
        this.game = game;
        this.monsterPhase = monsterPhase;
        this.width = this.game.width;
        this.height = this.game.height;
        this.canavsElement = document.getElementById("canvas");
        this.context = this.canavsElement.getContext("2d");
        this.image = document.getElementById("monster");
        this.frameX = 0;
        this.frameY = 0;
        this.maxFrame = 6;
        this.x = this.game.width / 2 - this.game.width * 0.243;
        this.y = this.game.width / 3;
        this.fps = 10;
        this.countFrame = 0;
        this.frameInterval = 1000 / this.fps;
        this.frameTimer = 0;
        this.images = {
            eatImg: "./assets/images/eat1" + this.monsterPhase + ".png",
            idleImg: "./assets/images/idle1" + this.monsterPhase + ".png",
            spitImg: "./assets/images/spit1" + this.monsterPhase + ".png",
            dragImg: "./assets/images/drag1" + this.monsterPhase + ".png",
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.changeToIdleAnimation();
            this.imagesLoaded = true;
            if (callBackFunction) {
                console.log(this.imagesLoaded);
                callBackFunction();
            }
        });
    }
    update(deltaTime) {
        if (this.frameTimer >= this.frameInterval) {
            this.frameTimer = 0;
            if (this.frameX < this.maxFrame) {
                this.frameX++;
            }
            else {
                this.frameX = 0;
            }
        }
        else {
            this.frameTimer += deltaTime;
        }
        this.draw();
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.image, 770 * this.frameX, 1386 * this.frameY, 768, 1386, this.x, this.y * 0.8, this.width / 2, this.height / 1.5);
        }
    }
    changeImage(src) {
        this.image.src = src;
    }
    changeToDragAnimation() {
        this.image = this.loadedImages.dragImg;
    }
    changeToEatAnimation() {
        this.image = this.loadedImages.eatImg;
    }
    changeToIdleAnimation() {
        this.image = this.loadedImages.idleImg;
    }
    changeToSpitAnimation() {
        this.image = this.loadedImages.spitImg;
    }
    handleStoneDrop(event) {
        if (event.detail.isCorrect) {
            this.changeToEatAnimation();
        }
        else {
            this.changeToSpitAnimation();
        }
    }
    handleLoadPuzzle(event) {
        this.changeToIdleAnimation();
    }
    dispose() {
        this.unregisterEventListener();
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.x - this.width / 4) * (xClick - this.x - this.width / 4) +
            (yClick - this.y - this.height / 2.7) *
                (yClick - this.y - this.height / 2.7));
        if (distance <= 60) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/pause-popup.ts":
/*!***************************************!*\
  !*** ./src/components/pause-popup.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PausePopUp)
/* harmony export */ });
/* harmony import */ var _components_buttons_cancel_button__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/buttons/cancel-button */ "./src/components/buttons/cancel-button.ts");
/* harmony import */ var _components_buttons_close_button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/buttons/close-button */ "./src/components/buttons/close-button.ts");
/* harmony import */ var _components_buttons_retry_button__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/buttons/retry-button */ "./src/components/buttons/retry-button.ts");
/* harmony import */ var _common_event_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/event-names */ "./src/common/event-names.ts");
/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./audio-player */ "./src/components/audio-player.ts");





class PausePopUp {
    canvas;
    context;
    cancelButton;
    retryButton;
    closeButton;
    imagesLoaded = false;
    pop_up_image;
    callback;
    switchToLevelSelection;
    reloadScene;
    gameplayData;
    audioPlayer;
    constructor(canvas, callback, switchToLevelSelection, reloadScene, gameplayData) {
        this.canvas = canvas;
        this.callback = callback;
        this.gameplayData = gameplayData;
        this.switchToLevelSelection = switchToLevelSelection;
        this.reloadScene = reloadScene;
        const selfIdElement = document.getElementById("canvas");
        this.context = selfIdElement.getContext("2d");
        this.audioPlayer = new _audio_player__WEBPACK_IMPORTED_MODULE_4__.AudioPlayer();
        this.cancelButton = new _components_buttons_cancel_button__WEBPACK_IMPORTED_MODULE_0__["default"](this.context, this.canvas);
        this.retryButton = new _components_buttons_retry_button__WEBPACK_IMPORTED_MODULE_2__["default"](this.context, this.canvas, this.canvas.width * 0.55, this.canvas.height * 0.2 +
            this.canvas.width * 0.4 -
            (this.canvas.width * 0.19) / 2);
        this.closeButton = new _components_buttons_close_button__WEBPACK_IMPORTED_MODULE_1__["default"](this.context, this.canvas, this.canvas.width * 0.25, this.canvas.height * 0.2 +
            this.canvas.width * 0.4 -
            (this.canvas.width * 0.19) / 2);
        this.pop_up_image = new Image();
        this.pop_up_image.src = "./assets/images/popup_bg_v01.png";
        this.pop_up_image.onload = (e) => {
            this.pop_up_image = this.pop_up_image;
            this.imagesLoaded = true;
        };
        // this.createCanvas();
    }
    addListner = () => {
        document
            .getElementById("canvas")
            .addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_3__.CLICK, this.handleMouseClick, false);
    };
    handleMouseClick = (event) => {
        const selfElement = document.getElementById("canvas");
        event.preventDefault();
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (this.cancelButton.onClick(x, y)) {
            console.log(" cancel button clicked");
            this.playClickSound();
            this.callback();
        }
        if (this.retryButton.onClick(x, y)) {
            this.playClickSound();
            this.dispose();
            console.log(" retry button clicked");
            this.reloadScene(this.gameplayData, "GamePlay");
        }
        if (this.closeButton.onClick(x, y)) {
            this.playClickSound();
            this.dispose();
            console.log(" close button clicked");
            this.switchToLevelSelection("GamePlay");
        }
    };
    draw() {
        if (this.imagesLoaded) {
            this.context.fillStyle = "rgba(0,0,0,0.5)";
            this.context.fillRect(0, 0, this.canvas.width, this.canvas.height);
            this.context.drawImage(this.pop_up_image, this.canvas.width * 0.1, this.canvas.height * 0.2, this.canvas.width * 0.8, this.canvas.width * 0.8);
            this.cancelButton.draw();
            this.retryButton.draw();
            this.closeButton.draw();
        }
    }
    playClickSound = () => {
        this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
    };
    dispose = () => {
        document
            .getElementById("canvas")
            .removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_3__.CLICK, this.handleMouseClick, false);
    };
}


/***/ }),

/***/ "./src/components/play-button.ts":
/*!***************************************!*\
  !*** ./src/components/play-button.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PlayButton)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");

class PlayButton {
    posX;
    posY;
    context;
    canvas;
    images;
    loadedImages;
    imagesLoaded = false;
    constructor(context, canvas, posX, posY) {
        this.posX = posX;
        this.posY = posY;
        this.context = context;
        this.canvas = canvas;
        this.images = {
            pause_button_image: "./assets/images/Play_button.png"
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
        });
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.loadedImages.pause_button_image, this.posX, this.posY, this.canvas.width / 3, this.canvas.width / 3);
        }
    }
    onClick(xClick, yClick) {
        const distance = Math.sqrt((xClick - this.posX - this.canvas.width / 6) *
            (xClick - this.posX - this.canvas.width / 6) +
            (yClick - this.posY - this.canvas.width / 6) *
                (yClick - this.posY - this.canvas.width / 6));
        if (distance < this.canvas.width / 8) {
            return true;
        }
    }
}


/***/ }),

/***/ "./src/components/prompt-text.ts":
/*!***************************************!*\
  !*** ./src/components/prompt-text.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PromptText: () => (/* binding */ PromptText)
/* harmony export */ });
/* harmony import */ var _events_EventManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/EventManager */ "./src/events/EventManager.ts");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.ts");
/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _common_event_names__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/event-names */ "./src/common/event-names.ts");
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");





class PromptText extends _events_EventManager__WEBPACK_IMPORTED_MODULE_0__.EventManager {
    width;
    height;
    levelData;
    currentPromptText;
    currentPuzzleData;
    canavsElement;
    context;
    prompt_image;
    targetStones;
    rightToLeft;
    imagesLoaded = false;
    audioPlayer;
    isStoneDropped = false;
    droppedStones = 0;
    time = 0;
    promptImageWidth = 0;
    isAppForeground = true;
    scale = 1;
    isScalingUp = true;
    scaleFactor = 0.00050;
    promptImageHeight = 0;
    promptPlayButton;
    constructor(width, height, currentPuzzleData, levelData, rightToLeft) {
        super({
            stoneDropCallbackHandler: (event) => this.handleStoneDrop(event),
            loadPuzzleCallbackHandler: (event) => this.handleLoadPuzzle(event)
        });
        this.width = width;
        this.height = height;
        this.levelData = levelData;
        this.rightToLeft = rightToLeft;
        this.currentPromptText = currentPuzzleData.prompt.promptText;
        this.currentPuzzleData = currentPuzzleData;
        this.targetStones = this.currentPuzzleData.targetStones;
        this.canavsElement = document.getElementById("canvas");
        this.context = this.canavsElement.getContext("2d");
        this.audioPlayer = new _audio_player__WEBPACK_IMPORTED_MODULE_2__.AudioPlayer();
        this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl());
        this.prompt_image = new Image();
        this.promptPlayButton = new Image();
        this.loadImages().then(() => {
            console.log('Images loaded');
        });
        this.time = 0;
        this.promptImageWidth = this.width * 0.65;
        this.promptImageHeight = this.height * 0.3;
        document.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_3__.VISIBILITY_CHANGE, this.handleVisibilityChange, false);
    }
    handleMouseDown = (event) => {
        let self = this;
        const selfElement = document.getElementById("canvas");
        event.preventDefault();
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (self.onClick(x, y)) {
            console.log('Clicked on Play prompt audio');
            this.playSound();
        }
    };
    getPromptAudioUrl = () => {
        return _common_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);
    };
    playSound = () => {
        console.log('PromptAudio', _common_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio));
        if (this.isAppForeground) {
            this.audioPlayer.playPromptAudio(_common_utils__WEBPACK_IMPORTED_MODULE_1__.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio));
        }
    };
    onClick(xClick, yClick) {
        if (Math.sqrt(xClick - this.width / 3) < 12 &&
            Math.sqrt(yClick - this.height / 5.5) < 10) {
            return true;
        }
    }
    setCurrrentPuzzleData(data) {
        this.currentPuzzleData = data;
        this.currentPromptText = data.prompt.promptText;
        this.targetStones = this.currentPuzzleData.targetStones;
    }
    drawRTLLang() {
        var x = this.width / 2;
        const y = this.height * 0.26;
        this.context.textAlign = "center";
        var fontSize = this.calculateFont();
        const scaledWidth = this.promptImageWidth;
        const scaledHeight = this.promptImageHeight;
        this.context.font = `${fontSize}px ${_global_variables__WEBPACK_IMPORTED_MODULE_4__.font}, monospace`;
        if (this.levelData.levelMeta.levelType == "LetterInWord") {
            if (this.levelData.levelMeta.protoType == "Visible") {
                var letterInWord = this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0], "g"), "");
                this.context.fillStyle = "red";
                this.context.fillText(this.targetStones[0], x + this.context.measureText(letterInWord).width / 2, y);
                this.context.fillStyle = "black";
                this.context.fillText(letterInWord, x - this.context.measureText(this.targetStones[0]).width / 2, y);
            }
            else {
                this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.15, scaledWidth / 4, scaledHeight / 4);
            }
        }
        else if (this.levelData.levelMeta.levelType == "Word") {
            if (this.levelData.levelMeta.protoType == "Visible") {
                x = x - this.context.measureText(this.currentPromptText).width * 0.5;
                for (let i = this.targetStones.length - 1; i >= 0; i--) {
                    if (this.droppedStones > i || this.droppedStones == undefined) {
                        this.context.fillStyle = "black";
                        this.context.fillText(this.targetStones[i], x, y);
                    }
                    else {
                        this.context.fillStyle = "red";
                        this.context.fillText(this.targetStones[i], x, y);
                    }
                    x = x + this.context.measureText(this.targetStones[i]).width + 5;
                }
            }
            else {
                this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.15, scaledWidth / 4, scaledHeight / 4);
            }
        }
        else if (this.levelData.levelMeta.levelType == "audioPlayerWord") {
            // const offsetX = (this.width - scaledWidth) / 2;
            // const offsetY = (this.height - scaledHeight) / 5;
            const offsetX = (this.width - scaledWidth) * 1.25;
            const offsetY = (this.height - scaledHeight) * 0.33;
            this.context.drawImage(this.promptPlayButton, offsetX, offsetY, scaledWidth / 4, scaledHeight / 4);
        }
        else {
            if (this.levelData.levelMeta.protoType == "Visible") {
                this.context.fillStyle = "black";
                this.context.fillText(this.currentPromptText, x, y);
            }
            else {
                this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.15, scaledWidth / 4, scaledHeight / 4);
            }
        }
    }
    drawOthers() {
        const promptTextLetters = this.currentPromptText.split("");
        const x = this.width / 2;
        const y = this.height * 0.28;
        const scaledWidth = this.promptImageWidth;
        const scaledHeight = this.promptImageHeight;
        var fontSize = this.calculateFont();
        this.context.font = `${fontSize}px ${_global_variables__WEBPACK_IMPORTED_MODULE_4__.font}, monospace`;
        let startPrompttextX = this.width / 2 -
            this.context.measureText(this.currentPromptText).width / 2;
        let currentWordWidth = 0;
        var letterHighlight = this.currentPuzzleData.targetStones[0].split("");
        for (let i = 0; i < promptTextLetters.length; i++) {
            switch (this.levelData.levelMeta.levelType) {
                case "LetterInWord": {
                    if (this.levelData.levelMeta.protoType == "Visible") {
                        if (letterHighlight.includes(promptTextLetters[i])) {
                            letterHighlight = letterHighlight.slice(1, letterHighlight.length);
                            this.context.fillStyle = "red";
                            this.context.fillText(promptTextLetters[i], startPrompttextX, y);
                        }
                        else {
                            this.context.fillStyle = "black";
                            this.context.fillText(promptTextLetters[i], startPrompttextX, y);
                        }
                        break;
                    }
                    else {
                        this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.25, scaledWidth / 4, scaledHeight / 4);
                    }
                }
                case "Word": {
                    if (this.levelData.levelMeta.protoType == "Visible") {
                        if (this.droppedStones > i || this.droppedStones == undefined) {
                            this.context.fillStyle = "black";
                            this.context.fillText(promptTextLetters[i], startPrompttextX, y);
                        }
                        else {
                            this.context.fillStyle = "red";
                            this.context.fillText(promptTextLetters[i], startPrompttextX, y);
                        }
                        break;
                    }
                    else {
                        this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.25, scaledWidth / 4, scaledHeight / 4);
                    }
                }
                case "SoundWord": {
                    this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.25, scaledWidth / 4, scaledHeight / 4);
                    break;
                }
                default: {
                    if (this.levelData.levelMeta.protoType == "Visible") {
                        this.context.fillStyle = "black";
                        this.context.fillText(this.currentPromptText, this.width / 2.1, y);
                        break;
                    }
                    else {
                        this.context.drawImage(this.promptPlayButton, this.width / 2.4, y / 1.25, scaledWidth / 4, scaledHeight / 4);
                    }
                }
            }
            currentWordWidth = (this.context.measureText(promptTextLetters[i]).width + this.context.measureText(promptTextLetters[i + 1]).width) / 2;
            startPrompttextX += currentWordWidth;
        }
    }
    draw(deltaTime) {
        this.updateScaling();
        this.time = (deltaTime < 17) ? this.time + Math.floor(deltaTime) : this.time + 16;
        if (Math.floor(this.time) >= 1910 && Math.floor(this.time) <= 1926) {
            this.playSound();
        }
        if (!this.isStoneDropped) {
            const scaledWidth = this.promptImageWidth * this.scale;
            const scaledHeight = this.promptImageHeight * this.scale;
            const offsetX = (this.width - scaledWidth) / 2;
            const offsetY = (this.height - scaledHeight) / 5;
            this.context.drawImage(this.prompt_image, offsetX, offsetY, scaledWidth, scaledHeight);
            this.context.fillStyle = "black";
            this.rightToLeft
                ? this.drawRTLLang()
                : this.drawOthers();
        }
    }
    handleStoneDrop(event) {
        this.isStoneDropped = true;
    }
    handleLoadPuzzle(event) {
        this.droppedStones = 0;
        this.currentPuzzleData = this.levelData.puzzles[event.detail.counter];
        this.currentPromptText = this.currentPuzzleData.prompt.promptText;
        this.targetStones = this.currentPuzzleData.targetStones;
        this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl());
        this.isStoneDropped = false;
        this.time = 0;
    }
    dispose() {
        document.removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_3__.VISIBILITY_CHANGE, this.handleVisibilityChange, false);
        this.unregisterEventListener();
    }
    update() {
    }
    droppedStoneIndex(index) {
        this.droppedStones = index;
    }
    calculateFont() {
        return (this.promptImageWidth / this.currentPromptText.length > 35) ? 35 : this.width * 0.65 / this.currentPromptText.length;
    }
    updateScaling() {
        if (this.isScalingUp) {
            this.scale += this.scaleFactor;
            if (this.scale >= 1.05) {
                this.isScalingUp = false;
            }
        }
        else {
            this.scale -= this.scaleFactor;
            if (this.scale <= 1) {
                this.scale = 1;
                this.isScalingUp = true;
            }
        }
    }
    handleVisibilityChange = () => {
        if (document.visibilityState == "hidden") {
            this.audioPlayer.stopAllAudios();
            this.isAppForeground = false;
        }
        if (document.visibilityState == "visible") {
            this.isAppForeground = true;
        }
    };
    async loadImages() {
        const image1Promise = this.loadImage(this.prompt_image, "./assets/images/promptTextBg.png");
        const image2Promise = this.loadImage(this.promptPlayButton, "./assets/images/promptPlayButton.png");
        await Promise.all([image1Promise, image2Promise]);
        this.imagesLoaded = true;
        // You can do additional actions here after both images are loaded.
    }
    loadImage(image, src) {
        return new Promise((resolve, reject) => {
            image.onload = () => {
                resolve();
            };
            image.src = src;
            image.onerror = (error) => {
                reject(error);
            };
        });
    }
}


/***/ }),

/***/ "./src/components/stone-handler.ts":
/*!*****************************************!*\
  !*** ./src/components/stone-handler.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StoneHandler)
/* harmony export */ });
/* harmony import */ var _common_stone_config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/stone-config */ "./src/common/stone-config.ts");
/* harmony import */ var _events_EventManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/EventManager */ "./src/events/EventManager.ts");
/* harmony import */ var _tutorial__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tutorial */ "./src/components/tutorial.ts");
/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _common_event_names__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/event-names */ "./src/common/event-names.ts");
/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/utils */ "./src/common/utils.ts");
/* harmony import */ var _data_game_score__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../data/game-score */ "./src/data/game-score.ts");







class StoneHandler extends _events_EventManager__WEBPACK_IMPORTED_MODULE_1__.EventManager {
    context;
    canvas;
    currentPuzzleData;
    targetStones;
    stonePos;
    pickedStone;
    foilStones = new Array();
    answer = "";
    puzzleNumber;
    levelData;
    correctAnswer;
    puzzleStartTime;
    showTutorial = _data_game_score__WEBPACK_IMPORTED_MODULE_6__.GameScore.getDatafromStorage().length == undefined ? true : false;
    tutorial;
    correctTargetStone;
    stonebg;
    audioPlayer;
    feedbackAudios;
    timerTickingInstance;
    isGamePaused = false;
    constructor(context, canvas, puzzleNumber, levelData, feedbackAudios, timerTickingInstance) {
        super({
            stoneDropCallbackHandler: (event) => this.handleStoneDrop(event),
            loadPuzzleCallbackHandler: (event) => this.handleLoadPuzzle(event),
        });
        this.context = context;
        this.canvas = canvas;
        this.puzzleNumber = puzzleNumber;
        this.levelData = levelData;
        this.setTargetStone(this.puzzleNumber);
        this.initializeStonePos();
        this.feedbackAudios = this.convertFeedBackAudiosToList(feedbackAudios);
        this.puzzleStartTime = new Date();
        this.tutorial = new _tutorial__WEBPACK_IMPORTED_MODULE_2__.Tutorial(context, canvas.width, canvas.height, puzzleNumber);
        this.stonebg = new Image();
        this.stonebg.src = "./assets/images/stone_pink_v02.png";
        this.audioPlayer = new _audio_player__WEBPACK_IMPORTED_MODULE_3__.AudioPlayer();
        this.stonebg.onload = (e) => {
            this.createStones(this.stonebg);
        };
        this.audioPlayer = new _audio_player__WEBPACK_IMPORTED_MODULE_3__.AudioPlayer();
        this.timerTickingInstance = timerTickingInstance;
        document.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_4__.VISIBILITY_CHANGE, this.handleVisibilityChange, false);
    }
    createStones(img) {
        const foilStones = this.getFoilStones();
        for (var i = 0; i < foilStones.length; i++) {
            if (foilStones[i] == this.correctTargetStone) {
                this.tutorial.updateTargetStonePositions(this.stonePos[i]);
            }
            this.foilStones.push(new _common_stone_config__WEBPACK_IMPORTED_MODULE_0__.StoneConfig(this.context, this.canvas.width, this.canvas.height, foilStones[i], this.stonePos[i][0], this.stonePos[i][1], img, this.timerTickingInstance, i == foilStones.length - 1 ? this.tutorial : null));
        }
    }
    draw(deltaTime) {
        for (var i = 0; i < this.foilStones.length; i++) {
            this.foilStones[i].draw(deltaTime);
        }
        if (this.foilStones[this.foilStones.length - 1].frame >= 100 &&
            !this.isGamePaused) {
            this.timerTickingInstance.update(deltaTime);
        }
    }
    initializeStonePos() {
        var offsetCoordinateValue = 32;
        this.stonePos = [
            [
                this.canvas.width / 5 - offsetCoordinateValue,
                this.canvas.height / 1.9 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 2 - offsetCoordinateValue,
                this.canvas.height / 1.15 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 3.5 + this.canvas.width / 2 - offsetCoordinateValue,
                this.canvas.height / 1.2 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 4 - offsetCoordinateValue,
                this.canvas.height / 1.28 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 7 - offsetCoordinateValue,
                this.canvas.height / 1.5 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 2.3 +
                    this.canvas.width / 2.1 -
                    offsetCoordinateValue,
                this.canvas.height / 1.9 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 2.3 +
                    this.canvas.width / 2.1 -
                    offsetCoordinateValue,
                this.canvas.height / 1.42 - offsetCoordinateValue,
            ],
            [
                this.canvas.width / 6 - offsetCoordinateValue,
                this.canvas.height / 1.1 - offsetCoordinateValue,
            ],
        ];
        this.stonePos = this.stonePos.sort(() => Math.random() - 0.5);
    }
    setTargetStone(puzzleNumber) {
        this.currentPuzzleData = this.levelData.puzzles[puzzleNumber];
        this.targetStones = [...this.currentPuzzleData.targetStones];
        this.correctTargetStone = this.targetStones.join("");
    }
    isDroppedStoneCorrect(droppedStone) {
        if (droppedStone == this.correctTargetStone) {
            return true;
        }
        else {
            return false;
        }
    }
    handleStoneDrop(event) {
        // this.isStoneDropped = true;
        this.foilStones = [];
    }
    handleLoadPuzzle(event) {
        this.foilStones = [];
        this.tutorial.setPuzzleNumber(event.detail.counter);
        this.puzzleNumber = event.detail.counter;
        this.setTargetStone(this.puzzleNumber);
        this.initializeStonePos();
        this.createStones(this.stonebg);
    }
    dispose() {
        document.removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_4__.VISIBILITY_CHANGE, this.handleVisibilityChange, false);
        this.unregisterEventListener();
    }
    isStoneDroppedCorrectForLetterOnly(droppedStone, feedBackIndex) {
        if (droppedStone == this.correctTargetStone) {
            this.audioPlayer.playFeedbackAudios(false, "./assets/audios/Eat.mp3", "./assets/audios/Cheering-02.mp3", _common_utils__WEBPACK_IMPORTED_MODULE_5__.Utils.getConvertedDevProdURL(this.feedbackAudios[feedBackIndex]));
            return true;
        }
        else {
            this.audioPlayer.playFeedbackAudios(false, "./assets/audios/MonsterSpit.mp3");
            return false;
        }
    }
    isStoneDroppedCorrectForLetterInWord(droppedStone, feedBackIndex) {
        if (droppedStone == this.correctTargetStone) {
            this.audioPlayer.playFeedbackAudios(false, "./assets/audios/Eat.mp3", "./assets/audios/Cheering-02.mp3", _common_utils__WEBPACK_IMPORTED_MODULE_5__.Utils.getConvertedDevProdURL(this.feedbackAudios[feedBackIndex]));
            return true;
        }
        else {
            this.audioPlayer.playFeedbackAudios(false, "./assets/audios/MonsterSpit.mp3");
            return false;
        }
    }
    isStonDroppedCorrectForWord(droppedStone, feedBackIndex) {
        if (droppedStone == this.correctTargetStone.substring(0, droppedStone.length)) {
            if (droppedStone == this.getCorrectTargetStone()) {
                this.audioPlayer.playFeedbackAudios(false, "./assets/audios/Eat.mp3", "./assets/audios/Cheering-02.mp3", _common_utils__WEBPACK_IMPORTED_MODULE_5__.Utils.getConvertedDevProdURL(this.feedbackAudios[feedBackIndex]));
            }
            else {
                this.audioPlayer.playFeedbackAudios(false, "./assets/audios/Eat.mp3", "./assets/audios/Cheering-02.mp3");
            }
            return true;
        }
        else {
            return false;
        }
    }
    getCorrectTargetStone() {
        return this.correctTargetStone;
    }
    getFoilStones() {
        this.currentPuzzleData.targetStones.forEach((e) => {
            const index = this.currentPuzzleData.foilStones.indexOf(e);
            if (index !== -1) {
                this.currentPuzzleData.foilStones.splice(index, 1);
            }
        });
        const totalStonesCount = this.currentPuzzleData.targetStones.length +
            this.currentPuzzleData.foilStones.length;
        if (totalStonesCount > 8) {
            const extraStonesCount = totalStonesCount - 8;
            this.currentPuzzleData.foilStones.splice(0, extraStonesCount);
        }
        this.currentPuzzleData.targetStones.forEach((e) => {
            this.currentPuzzleData.foilStones.push(e);
        });
        return this.currentPuzzleData.foilStones.sort(() => Math.random() - 0.5);
    }
    handleVisibilityChange = () => {
        this.audioPlayer.stopAllAudios();
    };
    convertFeedBackAudiosToList(feedbackAudios) {
        let feedBackAudioArray = [];
        feedBackAudioArray.push(feedbackAudios["fantastic"], feedbackAudios["great"]);
        return feedBackAudioArray;
    }
    setGamePause(isGamePaused) {
        this.isGamePaused = isGamePaused;
    }
}


/***/ }),

/***/ "./src/components/timer-ticking.ts":
/*!*****************************************!*\
  !*** ./src/components/timer-ticking.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TimerTicking: () => (/* binding */ TimerTicking)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _events_EventManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/EventManager */ "./src/events/EventManager.ts");
/* harmony import */ var _audio_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audio-player */ "./src/components/audio-player.ts");



class TimerTicking extends _events_EventManager__WEBPACK_IMPORTED_MODULE_1__.EventManager {
    width;
    height;
    timerWidth;
    timerHeight;
    widthToClear;
    timer;
    isTimerStarted;
    isTimerEnded;
    isTimerRunningOut;
    canavsElement;
    context;
    timer_full;
    pauseButtonClicked;
    images;
    loadedImages;
    callback;
    imagesLoaded = false;
    startMyTimer = true;
    isMyTimerOver = false;
    isStoneDropped = false;
    audioPlayer;
    playLevelEndAudioOnce = true;
    constructor(width, height, callback) {
        super({
            stoneDropCallbackHandler: (event) => this.handleStoneDrop(event),
            loadPuzzleCallbackHandler: (event) => this.handleLoadPuzzle(event)
        });
        this.width = width;
        this.height = height;
        this.widthToClear = this.width / 3.4;
        this.timerHeight = 112;
        this.timerWidth = 888;
        this.callback = callback;
        this.canavsElement = document.getElementById("canvas");
        this.context = this.canavsElement.getContext("2d");
        this.timer = 0;
        this.isTimerStarted = false;
        this.isTimerEnded = false;
        this.isTimerRunningOut = false;
        this.audioPlayer = new _audio_player__WEBPACK_IMPORTED_MODULE_2__.AudioPlayer();
        this.playLevelEndAudioOnce = true;
        this.images = {
            timer_empty: "./assets/images/timer_empty.png",
            rotating_clock: "./assets/images/timer.png",
            timer_full: "./assets/images/timer_full.png"
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
        });
    }
    startTimer() {
        // it will start timer immediatly
        this.readyTimer();
        this.startMyTimer = true;
        this.isMyTimerOver = false;
    }
    readyTimer() {
        // make timer look full so as it get start signal..... it will start decreasing
        this.timer = 0;
    }
    update(deltaTime) {
        if (this.startMyTimer && !this.isStoneDropped) {
            this.timer += deltaTime * 0.008;
        }
        if (Math.floor(this.width * 0.87 - (this.width * 0.87 * this.timer * 0.01)) == 40 && !this.isMyTimerOver) {
            this.playLevelEndAudioOnce ? this.audioPlayer.playAudio('./assets/audios/timeout.mp3') : null;
            this.playLevelEndAudioOnce = false;
        }
        if ((this.width * 0.87 - (this.width * 0.87 * this.timer * 0.01)) < 0 && !this.isMyTimerOver) {
            this.isMyTimerOver = true;
            this.callback(true);
        }
    }
    draw() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.loadedImages.timer_empty, 0, this.height * 0.1, this.width, this.height * 0.05);
            this.context.drawImage(this.loadedImages.rotating_clock, 5, this.height * 0.09, this.width * 0.12, this.height * 0.06);
            this.context.drawImage(this.loadedImages.timer_full, 0, 0, this.timerWidth - (this.timerWidth * this.timer * 0.01), this.timerHeight, this.width * 0.14, this.height * 0.099, this.width * 0.87 - (this.width * 0.87 * this.timer * 0.01), this.height * 0.05);
        }
    }
    handleStoneDrop(event) {
        this.isStoneDropped = true;
    }
    handleLoadPuzzle(event) {
        this.playLevelEndAudioOnce = true;
        this.isStoneDropped = false;
        this.startTimer();
    }
    dispose() {
        this.unregisterEventListener();
    }
}


/***/ }),

/***/ "./src/components/tutorial.ts":
/*!************************************!*\
  !*** ./src/components/tutorial.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Tutorial: () => (/* binding */ Tutorial)
/* harmony export */ });
/* harmony import */ var _data_game_score__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../data/game-score */ "./src/data/game-score.ts");

class Tutorial {
    width;
    height;
    context;
    tutorialImg;
    imagesLoaded = false;
    targetStonePositions;
    startx;
    starty;
    endx;
    endy;
    endTutorial = false;
    puzzleNumber;
    x;
    y;
    dx;
    dy;
    absdx;
    absdy;
    constructor(context, width, height, puzzleNumber) {
        this.width = width;
        this.height = height;
        this.context = context;
        this.startx = 0;
        this.starty = 0;
        this.endx = this.width / 2;
        this.endy = this.height / 2 - 30;
        this.puzzleNumber = puzzleNumber;
        this.tutorialImg = new Image();
        this.tutorialImg.src = "./assets/images/tutorial_hand.png";
        this.tutorialImg.onload = () => {
            this.imagesLoaded = true;
        };
    }
    updateTargetStonePositions(targetStonePosition) {
        this.startx = targetStonePosition[0] - 22;
        this.starty = targetStonePosition[1] - 50;
        this.animateImage();
    }
    isMobile() {
        return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    }
    setTutorialEnd(endTutorial) {
        this.endTutorial = endTutorial;
    }
    animateImage() {
        this.x = this.startx;
        this.y = this.starty;
        this.dx = (this.endx - this.startx) / 5000;
        this.dy = (this.endy - this.starty) / 5000;
        this.absdx = this.isMobile() ? Math.abs(this.dx) * 3 : Math.abs(this.dx);
        this.absdy = this.isMobile() ? Math.abs(this.dy) * 3 : Math.abs(this.dy);
        this.setTutorialEnd(false);
    }
    draw(deltaTime) {
        if (this.imagesLoaded && !this.endTutorial && this.shouldPlayTutorial()) {
            this.x =
                this.dx >= 0
                    ? this.x + this.absdx * (deltaTime)
                    : this.x - this.absdx * (deltaTime);
            this.y =
                this.dy >= 0
                    ? this.y + this.absdy * deltaTime
                    : this.y - this.absdy * deltaTime;
            const disx = this.x - this.endx + this.absdx;
            const disy = this.y - this.endy + this.absdy;
            const distance = Math.sqrt(disx * disx + disy * disy);
            if (distance < 1) {
                this.endTutorial = true;
                // GameFields.tutorialStatus = true;
            }
            this.context.drawImage(this.tutorialImg, this.x, this.y);
        }
    }
    shouldPlayTutorial() {
        let playDragAnimationForFirstPuzzle = _data_game_score__WEBPACK_IMPORTED_MODULE_0__.GameScore.getAllGameLevelInfo().length <= 0 && this.puzzleNumber == 0;
        return playDragAnimationForFirstPuzzle;
    }
    setPuzzleNumber(puzzleNumer) {
        this.puzzleNumber = puzzleNumer;
    }
}


/***/ }),

/***/ "./src/data/api-data.ts":
/*!******************************!*\
  !*** ./src/data/api-data.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getData: () => (/* binding */ getData),
/* harmony export */   getFtmData: () => (/* binding */ getFtmData)
/* harmony export */ });
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");

const URL = "./lang/" + _global_variables__WEBPACK_IMPORTED_MODULE_0__.lang + "/ftm_" + _global_variables__WEBPACK_IMPORTED_MODULE_0__.lang + ".json";
function getFtmData() {
    return fetch(URL, {
        method: "GET",
        headers: {
            "Content-Type": "application/json",
        },
    }).then((res) => res.json().then((data) => {
        return data;
    }));
}
async function getData() {
    // let d = {
    //     "OtherAudios": null,
    //     "FeedbackTexts": null,
    //     "Levels": null,
    //     "FeedbackAudios": null,
    //     "RightToLeft": null
    // }
    return await getFtmData();
}


/***/ }),

/***/ "./src/data/data-modal.ts":
/*!********************************!*\
  !*** ./src/data/data-modal.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DataModal: () => (/* binding */ DataModal),
/* harmony export */   FeedbackAudios: () => (/* binding */ FeedbackAudios),
/* harmony export */   FeedbackTexts: () => (/* binding */ FeedbackTexts),
/* harmony export */   FoilStone: () => (/* binding */ FoilStone),
/* harmony export */   LevelMeta: () => (/* binding */ LevelMeta),
/* harmony export */   Levels: () => (/* binding */ Levels),
/* harmony export */   OtherAudios: () => (/* binding */ OtherAudios),
/* harmony export */   Prompt: () => (/* binding */ Prompt),
/* harmony export */   Puzzles: () => (/* binding */ Puzzles),
/* harmony export */   TargetStone: () => (/* binding */ TargetStone)
/* harmony export */ });
class DataModal {
    title;
    otherAudios;
    levels;
    FeedbackTexts;
    FeedbackAudios;
    rightToLeft;
    majVersion;
    minVersion;
    version;
    constructor(title, otherAudios, levels, feedbackTexts, rightToLeft, feedbackAudios, majVersion, minVersion, version) {
        this.title = title;
        this.otherAudios = new OtherAudios(otherAudios);
        this.levels = this.getLevels(levels);
        this.FeedbackTexts = new FeedbackTexts(feedbackTexts);
        this.FeedbackAudios = new FeedbackAudios(feedbackAudios);
        this.rightToLeft = rightToLeft;
        this.majVersion = majVersion;
        this.minVersion = minVersion;
        this.version = version;
    }
    getLevels(levels) {
        let levelArray = [];
        for (let i = 0; i < levels.length; i++) {
            levelArray.push(new Levels(levels[i]));
        }
        return levelArray;
    }
}
class OtherAudios {
    selctYourPlayer;
    watchMeGrow;
    areYouSure;
    constructor(otherAudios) {
        this.selctYourPlayer = otherAudios["Select your player"];
        this.watchMeGrow = otherAudios["Watch me grow"];
        this.areYouSure = otherAudios["Are you sure"];
    }
}
class FeedbackTexts {
    fantastic;
    great;
    amazing;
    constructor(feedbackTexts) {
        if (feedbackTexts.length >= 1) {
            this.fantastic = feedbackTexts[0];
        }
        if (feedbackTexts.length >= 2) {
            this.great = feedbackTexts[1];
        }
        if (feedbackTexts.length >= 3) {
            this.amazing = feedbackTexts[2];
        }
    }
}
class FeedbackAudios {
    fantastic;
    great;
    amazing;
    constructor(feedbackAudios) {
        if (feedbackAudios.length >= 1) {
            this.fantastic = feedbackAudios[0];
        }
        if (feedbackAudios.length >= 2) {
            this.great = feedbackAudios[1];
        }
        if (feedbackAudios.length >= 3) {
            this.amazing = feedbackAudios[2];
        }
    }
}
class Levels {
    puzzles;
    levelMeta;
    levelNumber;
    constructor(levels) {
        this.puzzles = this.getPuzzleData(levels);
        this.levelMeta = new LevelMeta(levels.LevelMeta);
        this.levelNumber = levels.LevelNumber;
    }
    getPuzzleData(levels) {
        let puzzleObjects = [];
        levels.Puzzles.map((puzzleData, index) => {
            puzzleObjects.push(new Puzzles(puzzleData));
        });
        return puzzleObjects;
    }
}
class Puzzles {
    segmentNumber;
    prompt;
    foilStones;
    targetStones;
    constructor(puzzle) {
        this.segmentNumber = puzzle.SegmentNumber;
        this.prompt = new Prompt(puzzle.prompt);
        this.foilStones = this.getFoilStones(puzzle);
        this.targetStones = this.getTargetStones(puzzle);
    }
    getFoilStones(puzzle) {
        let foilStoneArray = [];
        puzzle.foilstones.map((stones, index) => {
            foilStoneArray.push(stones.StoneText);
        });
        return foilStoneArray;
    }
    getTargetStones(puzzle) {
        let targetStoneArray = [];
        puzzle.targetstones.map((stones, index) => {
            targetStoneArray.push(stones.StoneText);
        });
        return targetStoneArray;
    }
}
class FoilStone {
    stoneText;
    constructor(stoneText) {
        this.stoneText = stoneText;
    }
}
class TargetStone {
    stoneText;
    constructor() {
        this.stoneText;
    }
}
class Prompt {
    promptText;
    promptAudio;
    constructor(prompt) {
        this.promptText = prompt.PromptText;
        this.promptAudio = prompt.PromptAudio;
    }
}
class LevelMeta {
    promptFadeOut;
    letterGroup;
    levelNumber;
    protoType;
    levelType;
    constructor(levelMeta) {
        this.promptFadeOut = levelMeta.PromptFadeout;
        this.letterGroup = levelMeta.LetterGroup;
        this.levelNumber = levelMeta.LevelNumber;
        this.protoType = levelMeta.PromptType;
        this.levelType = levelMeta.LevelType;
    }
}


/***/ }),

/***/ "./src/data/game-score.ts":
/*!********************************!*\
  !*** ./src/data/game-score.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GameScore: () => (/* binding */ GameScore)
/* harmony export */ });
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");

class GameScore {
    static currentlanguage = _global_variables__WEBPACK_IMPORTED_MODULE_0__.lang;
    static setGameLevelScore(currentLevelInfo, score) {
        let starsGained = this.calculateStarCount(score);
        let levelPlayedInfo = {
            levelName: currentLevelInfo.levelMeta.levelType,
            levelNumber: currentLevelInfo.levelMeta.levelNumber,
            score: score,
            starCount: starsGained,
        };
        this.setTotalStarCount(starsGained);
        let allGamelevelInfo = this.getAllGameLevelInfo();
        let index = -1;
        for (let i = 0; i < allGamelevelInfo.length; i++) {
            if (allGamelevelInfo[i].levelNumber === levelPlayedInfo.levelNumber) {
                index = i;
                break;
            }
        }
        if (index !== -1 && levelPlayedInfo.score > allGamelevelInfo[index].score) {
            allGamelevelInfo[index] = levelPlayedInfo;
        }
        else {
            allGamelevelInfo.push(levelPlayedInfo);
        }
        localStorage.setItem(this.currentlanguage + "gamePlayedInfo", JSON.stringify(allGamelevelInfo));
    }
    static getAllGameLevelInfo() {
        const data = localStorage.getItem(this.currentlanguage + "gamePlayedInfo");
        return data == undefined ? [] : JSON.parse(data);
    }
    static setTotalStarCount(starsGained) {
        let starCount = this.getTotalStarCount();
        let totalStarCount = starCount + starsGained;
        localStorage.setItem(this.currentlanguage + "totalStarCount", totalStarCount);
    }
    static getTotalStarCount() {
        const starCount = localStorage.getItem(this.currentlanguage + "totalStarCount");
        return starCount == undefined ? 0 : parseInt(starCount);
    }
    static calculateStarCount(score) {
        return score == 200
            ? 1
            : score == 300
                ? 2
                : score == 400
                    ? 2
                    : score == 500
                        ? 3
                        : 0;
    }
    static getDatafromStorage() {
        const data = _global_variables__WEBPACK_IMPORTED_MODULE_0__.Debugger.DebugMode
            ? JSON.parse(localStorage.getItem(_global_variables__WEBPACK_IMPORTED_MODULE_0__.lang + "ProfileDebug") || "{}")
            : JSON.parse(localStorage.getItem(_global_variables__WEBPACK_IMPORTED_MODULE_0__.lang + "Profile") || "{}");
        return data;
    }
}


/***/ }),

/***/ "./src/data/i18-font-mapping.ts":
/*!**************************************!*\
  !*** ./src/data/i18-font-mapping.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const languageFontMapping = {
    english: "Consolas",
    swahili: "Consolas",
    wolof: "Consolas",
    tajik: "Consolas",
    marathi: "Consolas",
    amharic: "Consolas",
    punjabi: "Consolas",
    tamil: "Consolas",
    sepedi: "Consolas",
    gujarati: "Consolas",
    telugu: "Consolas",
    tsonga: "Consolas",
    malay: "Consolas",
    ndebele: "Consolas",
    venda: "NotoSans-Regular",
    siswati: "Consolas",
    tswana: "Consolas",
    thai: "Consolas",
    fula: "Consolas",
    farsi: "Consolas",
    burmese: "Consolas",
    bengali: "Consolas",
    Azerbaijani: "NotoSans-Regular",
    Sesotho: "Consolas",
    Georgian: "Consolas",
    BrazilianPortuguese: "Consolas",
    Somali: "Consolas",
    Hausa: "Consolas",
    Igbo: "Consolas",
    HatianCreole: "Consolas",
    Oromo: "Consolas",
    Luganda: "Consolas",
    Yoruba: "Consolas",
    Khmer: "Consolas",
    Javanese: "Consolas",
    Urdu: "Consolas",
    Kinyarwanda: "Consolas",
    Shona: "Consolas",
    Kurdish: "Consolas",
    French: "Consolas",
    isiXhosa: "Consolas",
    Afrikaans: "Consolas",
    Nepali: "Consolas",
    Ukrainian: "Consolas",
    Hindi: "Consolas",
    Tagalog: "Consolas",
    Vietnamese: "NotoSans-Regular",
    Pashto: "Consolas",
    Twi: "NotoSans-Regular",
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (languageFontMapping);


/***/ }),

/***/ "./src/events/EventManager.ts":
/*!************************************!*\
  !*** ./src/events/EventManager.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EventManager: () => (/* binding */ EventManager)
/* harmony export */ });
/* harmony import */ var _common_event_names__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/event-names */ "./src/common/event-names.ts");

class EventManager {
    handler;
    stoneDropCallbackHandler;
    loadPuzzleCallbackHandler;
    constructor(handler) {
        this.handler = handler;
        this.stoneDropCallbackHandler = handler.stoneDropCallbackHandler;
        this.loadPuzzleCallbackHandler = handler.loadPuzzleCallbackHandler;
        document.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_0__.STONEDROP, this.handleStoneDroppedEvent, false);
        document.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_0__.LOADPUZZLE, this.handleLoadPuzzleEvent, false);
    }
    handleStoneDroppedEvent = (event) => {
        this.stoneDropCallbackHandler(event);
    };
    handleLoadPuzzleEvent = (event) => {
        this.loadPuzzleCallbackHandler(event);
    };
    unregisterEventListener = () => {
        document.removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_0__.STONEDROP, this.handleStoneDroppedEvent, false);
        document.removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_0__.LOADPUZZLE, this.handleLoadPuzzleEvent, false);
    };
}


/***/ }),

/***/ "./src/sceneHandler/scene-handler.ts":
/*!*******************************************!*\
  !*** ./src/sceneHandler/scene-handler.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SceneHandler: () => (/* binding */ SceneHandler)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _scenes_start_scene__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scenes/start-scene */ "./src/scenes/start-scene.ts");
/* harmony import */ var _scenes_level_selection_scene__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scenes/level-selection-scene */ "./src/scenes/level-selection-scene.ts");
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");
/* harmony import */ var _scenes_gameplay_scene__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../scenes/gameplay-scene */ "./src/scenes/gameplay-scene.ts");
/* harmony import */ var _data_game_score__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../data/game-score */ "./src/data/game-score.ts");
/* harmony import */ var _scenes_loading_scene__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../scenes/loading-scene */ "./src/scenes/loading-scene.ts");
/* harmony import */ var _scenes_levelend_scene__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../scenes/levelend-scene */ "./src/scenes/levelend-scene.ts");








class SceneHandler {
    canvas;
    data;
    width;
    height;
    startScene;
    levelSelectionScene;
    gameplayScene;
    levelEndScene;
    testGameplayScene;
    canavsElement;
    context;
    static SceneName;
    loadingScreen;
    loading = false;
    lastTime = 0;
    pwa_install_status;
    toggleBtn;
    constructor(canvas, data) {
        this.canvas = canvas;
        this.data = data;
        this.width = canvas.width;
        this.height = canvas.height;
        this.canavsElement = document.getElementById("canvas");
        this.toggleBtn = document.getElementById("this.toggleBtn");
        window.addEventListener("beforeinstallprompt", this.handleInstallPrompt);
        this.context = this.canavsElement.getContext("2d");
        this.startScene = new _scenes_start_scene__WEBPACK_IMPORTED_MODULE_1__.StartScene(canvas, data, this.switchSceneToLevelSelection);
        SceneHandler.SceneName = _common_common__WEBPACK_IMPORTED_MODULE_0__.StartScene1;
        this.loadingScreen = new _scenes_loading_scene__WEBPACK_IMPORTED_MODULE_6__.LoadingScene(this.width, this.height, this.removeLoading);
        this.animation(0);
    }
    devToggle() {
        this.toggleBtn.addEventListener("click", () => {
            this.toggleBtn.classList.toggle("on");
            if (this.toggleBtn.classList.contains("on")) {
                _global_variables__WEBPACK_IMPORTED_MODULE_3__.Debugger.DebugMode = true;
                this.toggleBtn.innerText = "Dev";
            }
            else {
                _global_variables__WEBPACK_IMPORTED_MODULE_3__.Debugger.DebugMode = false;
                this.toggleBtn.innerText = "Dev";
            }
        });
    }
    checkMonsterPhaseUpdation() {
        let totalStarCount = _data_game_score__WEBPACK_IMPORTED_MODULE_5__.GameScore.getTotalStarCount();
        let monsterPhaseNumber = Math.floor(totalStarCount / 12) + 1 || 1;
        return monsterPhaseNumber <= 4 ? monsterPhaseNumber : 4;
    }
    animation = (timeStamp) => {
        let deltaTime = timeStamp - this.lastTime;
        this.lastTime = timeStamp;
        this.context.clearRect(0, 0, this.width, this.height);
        if (SceneHandler.SceneName == _common_common__WEBPACK_IMPORTED_MODULE_0__.StartScene1) {
            this.startScene.animation(deltaTime);
            this.loading ? this.loadingScreen.draw(deltaTime) : null;
        }
        else if (SceneHandler.SceneName == _common_common__WEBPACK_IMPORTED_MODULE_0__.LevelSelection1) {
            this.loading ? this.loadingScreen.draw(deltaTime) : null;
            this.levelSelectionScene.drawLevelSelection();
        }
        else if (SceneHandler.SceneName == _common_common__WEBPACK_IMPORTED_MODULE_0__.GameScene1) {
            this.loading ? this.loadingScreen.draw(deltaTime) : null;
            this.gameplayScene.draw(deltaTime);
        }
        else if (SceneHandler.SceneName == _common_common__WEBPACK_IMPORTED_MODULE_0__.EndScene1) {
            this.loading ? this.loadingScreen.draw(deltaTime) : null;
            this.levelEndScene.draw(deltaTime);
        }
        requestAnimationFrame(this.animation);
    };
    switchSceneToGameplay = (gamePlayData, changeSceneRequestFrom) => {
        this.showLoading();
        this.dispose(changeSceneRequestFrom, "GamePlay");
        let jsonVersionNumber = !!this.data.majVersion && !!this.data.minVersion ? this.data.majVersion.toString() + "." + this.data.minVersion.toString() : "";
        setTimeout(() => {
            this.gameplayScene = new _scenes_gameplay_scene__WEBPACK_IMPORTED_MODULE_4__.GameplayScene(this.canvas, gamePlayData.currentLevelData, this.checkMonsterPhaseUpdation(), this.data.FeedbackTexts, this.data.rightToLeft, this.switchSceneToEndLevel, gamePlayData.selectedLevelNumber, this.switchSceneToLevelSelection, this.switchSceneToGameplay, jsonVersionNumber, this.data.FeedbackAudios);
            SceneHandler.SceneName = _common_common__WEBPACK_IMPORTED_MODULE_0__.GameScene1;
        }, 800);
    };
    switchSceneToEndLevel = (currentlevelPlayed, starCount, monsterPhaseNumber, currentLevelNumber, isTimerEnded) => {
        console.log(" currentlevelPlayed: ", currentlevelPlayed);
        this.loadingScreen.initCloud();
        var self = this;
        function createEndLevelScene() {
            self.gameplayScene.dispose();
            document.getElementById("feedback-text").style.zIndex = "0";
            self.levelEndScene = new _scenes_levelend_scene__WEBPACK_IMPORTED_MODULE_7__.LevelEndScene(self.canvas, self.height, self.width, self.context, starCount, currentLevelNumber, self.switchSceneToGameplay, self.switchSceneToLevelSelection, self.data, monsterPhaseNumber);
            SceneHandler.SceneName = _common_common__WEBPACK_IMPORTED_MODULE_0__.EndScene1;
        }
        if (isTimerEnded) {
            createEndLevelScene();
        }
        else {
            setTimeout(() => {
                createEndLevelScene();
            }, 4000);
        }
    };
    switchSceneToLevelSelection = (changeSceneRequestFrom) => {
        this.showLoading();
        this.dispose(changeSceneRequestFrom, "LevelSelection");
        setTimeout(() => {
            this.levelSelectionScene = new _scenes_level_selection_scene__WEBPACK_IMPORTED_MODULE_2__.LevelSelectionScreen(this.canvas, this.data, this.switchSceneToGameplay);
            SceneHandler.SceneName = _common_common__WEBPACK_IMPORTED_MODULE_0__.LevelSelection1;
        }, 800);
    };
    dispose = (lastSceneName, nextSceneName) => {
        if (lastSceneName == "LevelSelection" && nextSceneName == "GamePlay") {
            this.levelSelectionScene.dispose();
            return;
        }
        if (lastSceneName == "GamePlay" && nextSceneName == "GamePlay") {
            this.gameplayScene.dispose();
            return;
        }
        if (lastSceneName == "GamePlay" && nextSceneName == "LevelSelection") {
            this.gameplayScene.dispose();
            return;
        }
        if (lastSceneName == "StartScene" && nextSceneName == "LevelSelection") {
            this.startScene.dispose();
            return;
        }
        if (lastSceneName == "LevelEnd" && nextSceneName == "LevelSelection") {
            this.levelEndScene.dispose();
            return;
        }
        if (lastSceneName == "LevelEnd" && nextSceneName == "GamePlay") {
            this.levelEndScene.dispose();
            return;
        }
    };
    showLoading = () => {
        this.loadingScreen.initCloud();
        this.loading = true;
        document.getElementById("loading").style.zIndex = "3";
    };
    removeLoading = () => {
        document.getElementById("loading").style.zIndex = "-1";
        this.loading = false;
    };
    handleInstallPrompt = (event) => {
        //currently not in use
        event.preventDefault();
        this.pwa_install_status = event;
        localStorage.setItem(_common_common__WEBPACK_IMPORTED_MODULE_0__.PWAInstallStatus, "false");
    };
}


/***/ }),

/***/ "./src/scenes/gameplay-scene.ts":
/*!**************************************!*\
  !*** ./src/scenes/gameplay-scene.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GameplayScene: () => (/* binding */ GameplayScene)
/* harmony export */ });
/* harmony import */ var _components_monster__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/monster */ "./src/components/monster.ts");
/* harmony import */ var _components_timer_ticking__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/timer-ticking */ "./src/components/timer-ticking.ts");
/* harmony import */ var _components_prompt_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/prompt-text */ "./src/components/prompt-text.ts");
/* harmony import */ var _components_buttons_pause_button__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/buttons/pause-button */ "./src/components/buttons/pause-button.ts");
/* harmony import */ var _components_level_indicator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/level-indicator */ "./src/components/level-indicator.ts");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");
/* harmony import */ var _components_stone_handler__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/stone-handler */ "./src/components/stone-handler.ts");
/* harmony import */ var _components_pause_popup__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/pause-popup */ "./src/components/pause-popup.ts");
/* harmony import */ var _common_event_names__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/event-names */ "./src/common/event-names.ts");
/* harmony import */ var _components_background__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/background */ "./src/components/background.ts");
/* harmony import */ var _components_feedback_particle_effect_feedback_text_effects__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/feedback-particle-effect/feedback-text-effects */ "./src/components/feedback-particle-effect/feedback-text-effects.ts");
/* harmony import */ var _data_game_score__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../data/game-score */ "./src/data/game-score.ts");
/* harmony import */ var _components_audio_player__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _Firebase_firebase_integration__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../Firebase/firebase-integration */ "./src/Firebase/firebase-integration.ts");















class GameplayScene {
    width;
    height;
    monster;
    jsonVersionNumber;
    canvas;
    levelData;
    timerTicking;
    promptText;
    pauseButton;
    puzzleData;
    id;
    context;
    levelIndicators;
    stonesCount = 1;
    monsterPhaseNumber;
    pickedStone;
    puzzleStartTime;
    showTutorial;
    feedBackTexts;
    isPuzzleCompleted;
    rightToLeft;
    imagesLoaded = false;
    switchSceneToEnd;
    levelNumber;
    loadedImages;
    stoneHandler;
    counter = 0;
    tutorial;
    images;
    handler;
    pickedStoneObject;
    pausePopup;
    isPauseButtonClicked = false;
    background1;
    feedBackTextCanavsElement;
    feedbackTextEffects;
    isGameStarted = false;
    time = 0;
    score = 0;
    tempWordforWordPuzzle = "";
    switchToLevelSelection;
    reloadScene;
    audioPlayer;
    firebaseIntegration;
    startTime;
    puzzleTime;
    constructor(canvas, levelData, monsterPhaseNumber, feedBackTexts, rightToLeft, switchSceneToEnd, levelNumber, switchToLevelSelection, reloadScene, jsonVersionNumber, feedbackAudios) {
        this.width = canvas.width;
        this.height = canvas.height;
        this.rightToLeft = rightToLeft;
        this.canvas = canvas;
        this.context = this.canvas.getContext("2d");
        this.monsterPhaseNumber = monsterPhaseNumber || 1;
        this.levelData = levelData;
        this.switchSceneToEnd = switchSceneToEnd;
        this.levelNumber = levelNumber;
        this.switchToLevelSelection = switchToLevelSelection;
        this.reloadScene = reloadScene;
        this.jsonVersionNumber = jsonVersionNumber;
        this.startGameTime();
        this.startPuzzleTime();
        this.pauseButton = new _components_buttons_pause_button__WEBPACK_IMPORTED_MODULE_3__["default"](this.context, this.canvas);
        this.timerTicking = new _components_timer_ticking__WEBPACK_IMPORTED_MODULE_1__.TimerTicking(this.width, this.height, this.loadPuzzle);
        this.stoneHandler = new _components_stone_handler__WEBPACK_IMPORTED_MODULE_7__["default"](this.context, this.canvas, this.counter, this.levelData, feedbackAudios, this.timerTicking);
        this.promptText = new _components_prompt_text__WEBPACK_IMPORTED_MODULE_2__.PromptText(this.width, this.height, this.levelData.puzzles[this.counter], this.levelData, this.rightToLeft);
        this.levelIndicators = new _components_level_indicator__WEBPACK_IMPORTED_MODULE_4__.LevelIndicators(this.context, this.canvas, 0);
        this.levelIndicators.setIndicators(this.counter);
        this.monster = new _components_monster__WEBPACK_IMPORTED_MODULE_0__.Monster(this.canvas, this.monsterPhaseNumber);
        let gamePlayData = {
            currentLevelData: levelData,
            selectedLevelNumber: levelNumber,
        };
        this.pausePopup = new _components_pause_popup__WEBPACK_IMPORTED_MODULE_8__["default"](this.canvas, this.resumeGame, this.switchToLevelSelection, this.reloadScene, gamePlayData);
        this.background1 = new _components_background__WEBPACK_IMPORTED_MODULE_10__.Background(this.context, this.width, this.height, this.levelData.levelNumber);
        this.firebaseIntegration = new _Firebase_firebase_integration__WEBPACK_IMPORTED_MODULE_14__.FirebaseIntegration();
        this.feedBackTextCanavsElement = document.getElementById("feedback-text");
        this.feedBackTextCanavsElement.height = this.height;
        this.feedBackTextCanavsElement.width = this.width;
        this.feedbackTextEffects = new _components_feedback_particle_effect_feedback_text_effects__WEBPACK_IMPORTED_MODULE_11__.FeedbackTextEffects(this.feedBackTextCanavsElement.getContext("2d"), this.width, this.height);
        this.audioPlayer = new _components_audio_player__WEBPACK_IMPORTED_MODULE_13__.AudioPlayer();
        this.handler = document.getElementById("canvas");
        this.puzzleData = levelData.puzzles;
        this.feedBackTexts = feedBackTexts;
        this.images = {
            pillerImg: "./assets/images/Totem_v02_v01.png",
            bgImg: "./assets/images/bg_v01.jpg",
            hillImg: "./assets/images/hill_v01.png",
            grassImg: "./assets/images/FG_a_v01.png",
            fenchImg: "./assets/images/fence_v01.png",
            profileMonster: "./assets/images/idle4.png",
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_5__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
        });
        var previousPlayedLevel = this.levelData.levelMeta.levelNumber;
        _global_variables__WEBPACK_IMPORTED_MODULE_6__.Debugger.DebugMode
            ? localStorage.setItem(_common_common__WEBPACK_IMPORTED_MODULE_5__.PreviousPlayedLevel + _global_variables__WEBPACK_IMPORTED_MODULE_6__.lang + "Debug", previousPlayedLevel)
            : localStorage.setItem(_common_common__WEBPACK_IMPORTED_MODULE_5__.PreviousPlayedLevel + _global_variables__WEBPACK_IMPORTED_MODULE_6__.lang, previousPlayedLevel);
        this.addEventListeners();
    }
    resumeGame = () => {
        this.addEventListeners();
        this.isPauseButtonClicked = false;
        this.stoneHandler.setGamePause(false);
        this.pausePopup.dispose();
    };
    getRandomFeedBackText(randomIndex) {
        const keys = Object.keys(this.feedBackTexts);
        const selectedKey = keys[randomIndex];
        return this.feedBackTexts[selectedKey];
    }
    getRandomInt(min, max) {
        const feedbackValues = Object.values(this.feedBackTexts);
        const definedValuesMaxCount = (feedbackValues.filter(value => value != undefined).length) - 1;
        return Math.floor(Math.random() * (definedValuesMaxCount - min + 1)) + min;
    }
    handleMouseUp = (event) => {
        console.log(" upping mouse like a pro ");
        let self = this;
        const selfElement = document.getElementById("canvas");
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        // event.preventDefault();
        if (Math.sqrt((x - self.monster.x - self.canvas.width / 4) *
            (x - self.monster.x - self.canvas.width / 4) +
            (y - self.monster.y - self.canvas.height / 2.7) *
                (y - self.monster.y - self.canvas.height / 2.7)) <= 60) {
            if (this.pickedStone != null || this.pickedStone != null) {
                if (this.levelData.levelMeta.levelType == "LetterOnly") {
                    this.letterOnlyPuzzle(this.pickedStone.text);
                }
                if (this.levelData.levelMeta.levelType == "LetterInWord") {
                    this.letterInWordPuzzle(this.pickedStone.text);
                }
                if (this.levelData.levelMeta.levelType == "Word" ||
                    this.levelData.levelMeta.levelType == "SoundWord") {
                    this.wordPuzzle(this.pickedStone.text, this.pickedStone);
                }
            }
        }
        else {
            try {
                if (this.pickedStoneObject != null) {
                    if (this.pickedStoneObject.origx != null &&
                        this.pickedStoneObject.origy != null) {
                        if (this.pickedStone.text.length >= 3 && this.pickedStoneObject.origx < 50 && this.pickedStoneObject.origx < this.width / 2) {
                            this.pickedStone.x = this.pickedStoneObject.origx + 25;
                        }
                        else {
                            this.pickedStone.x = this.pickedStoneObject.origx;
                        }
                        this.pickedStone.y = this.pickedStoneObject.origy;
                        this.monster.changeToIdleAnimation();
                    }
                }
            }
            catch (error) {
                //  console.log(error);
            }
        }
        this.pickedStone = null;
    };
    handleMouseDown = (event) => {
        let self = this;
        const selfElement = document.getElementById("canvas");
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        for (let sc of self.stoneHandler.foilStones) {
            if (Math.sqrt((x - sc.x) * (x - sc.x) + (y - sc.y) * (y - sc.y)) <= 40) {
                console.log(" clickkedon stone", sc);
                this.pickedStoneObject = sc;
                this.pickedStone = sc;
                this.audioPlayer.playAudio("./assets/audios/onDrag.mp3");
            }
        }
    };
    handleMouseMove = (event) => {
        let self = this;
        const selfElement = document.getElementById("canvas");
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (self.pickedStone) {
            self.monster.changeToDragAnimation();
            self.pickedStone.x = x;
            self.pickedStone.y = y;
        }
    };
    handleMouseClick = (event) => {
        const selfElement = document.getElementById("canvas");
        event.preventDefault();
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (this.monster.onClick(x, y)) {
            this.isGameStarted = true;
            this.time = 0;
        }
        if (this.pauseButton.onClick(x, y)) {
            console.log(" pause button getting click from gameplay");
            this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
            this.pauseGamePlay();
        }
        // send click to play prompt
        if (this.promptText.onClick(x, y)) {
            this.promptText.playSound();
            // this.audioPlayer.playAudio(false, this.promptText.getPromptAudioUrl());
        }
    };
    handleTouchStart = (event) => {
        var touch = event.touches[0];
        var mouseEvent = new MouseEvent("mousedown", {
            clientX: touch.clientX,
            clientY: touch.clientY,
        });
        document.getElementById("canvas").dispatchEvent(mouseEvent);
    };
    handleTouchMove = (event) => {
        console.log("itstouchmove");
        var touch = event.touches[0];
        var mouseEvent = new MouseEvent("mousemove", {
            clientX: touch.clientX,
            clientY: touch.clientY,
        });
        document.getElementById("canvas").dispatchEvent(mouseEvent);
    };
    handleTouchEnd = (event) => {
        var touch = event.changedTouches[0];
        var mouseEvent = new MouseEvent("mouseup", {
            clientX: touch.clientX,
            clientY: touch.clientY,
        });
        document.getElementById("canvas").dispatchEvent(mouseEvent);
    };
    draw(deltaTime) {
        if (!this.isGameStarted && !this.isPauseButtonClicked) {
            this.time = this.time + deltaTime;
            if (this.time >= 5000) {
                this.isGameStarted = true;
                this.time = 0;
            }
        }
        if (this.imagesLoaded) {
            this.background1.draw();
        }
        if (this.isPauseButtonClicked && this.isGameStarted) {
            this.pauseButton.draw();
            this.levelIndicators.draw();
            this.promptText.draw(deltaTime);
            this.monster.update(deltaTime);
            this.timerTicking.draw();
            this.stoneHandler.draw(deltaTime);
            this.pausePopup.draw();
        }
        if (!this.isPauseButtonClicked && !this.isGameStarted) {
            this.pauseButton.draw();
            this.levelIndicators.draw();
            this.promptText.draw(deltaTime);
            this.monster.update(deltaTime);
            this.timerTicking.draw();
            this.feedbackTextEffects.render();
        }
        if (this.isPauseButtonClicked && !this.isGameStarted) {
            this.pauseButton.draw();
            this.levelIndicators.draw();
            this.promptText.draw(deltaTime);
            this.monster.update(deltaTime);
            this.timerTicking.draw();
            this.pausePopup.draw();
        }
        if (!this.isPauseButtonClicked && this.isGameStarted) {
            this.pauseButton.draw();
            this.levelIndicators.draw();
            this.promptText.draw(deltaTime);
            this.monster.update(deltaTime);
            // this.timerTicking.update(deltaTime);
            this.timerTicking.draw();
            this.stoneHandler.draw(deltaTime);
        }
    }
    addEventListeners() {
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.MOUSEUP, this.handleMouseUp, false);
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.MOUSEMOVE, this.handleMouseMove, false);
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.MOUSEDOWN, this.handleMouseDown, false);
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.TOUCHSTART, this.handleTouchStart, false);
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.TOUCHMOVE, this.handleTouchMove, false);
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.TOUCHEND, this.handleTouchEnd, false);
        this.handler.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.CLICK, this.handleMouseClick, false);
        document.addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.VISIBILITY_CHANGE, this.handleVisibilityChange, false);
    }
    removeEventListeners() {
        // Remove event listeners using the defined functions
        this.handler.removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.CLICK, this.handleMouseClick, false);
        this.handler.removeEventListener("mouseup", this.handleMouseUp, false);
        this.handler.removeEventListener("mousemove", this.handleMouseMove, false);
        this.handler.removeEventListener("mousedown", this.handleMouseDown, false);
        this.handler.removeEventListener("touchstart", this.handleTouchStart, false);
        this.handler.removeEventListener("touchmove", this.handleTouchMove, false);
        this.handler.removeEventListener("touchend", this.handleTouchEnd, false);
    }
    loadPuzzle = (isTimerEnded) => {
        this.stonesCount = 1;
        let timerEnded = isTimerEnded == undefined ? false : true;
        if (timerEnded) {
            this.logPuzzleEndFirebaseEvent(false);
        }
        this.removeEventListeners();
        this.incrementPuzzle();
        this.isGameStarted = false;
        if (this.counter == this.levelData.puzzles.length) {
            this.levelIndicators.setIndicators(this.counter);
            this.logLevelEndFirebaseEvent();
            _data_game_score__WEBPACK_IMPORTED_MODULE_12__.GameScore.setGameLevelScore(this.levelData, this.score);
            this.switchSceneToEnd(this.levelData, _data_game_score__WEBPACK_IMPORTED_MODULE_12__.GameScore.calculateStarCount(this.score), this.monsterPhaseNumber, this.levelNumber, timerEnded);
        }
        else {
            const loadPuzzleData = {
                counter: this.counter,
            };
            const loadPuzzleEvent = new CustomEvent(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.LOADPUZZLE, {
                detail: loadPuzzleData,
            });
            if (timerEnded) {
                // this.monster.changeToIdleAnimation();
                this.initNewPuzzle(loadPuzzleEvent);
            }
            else {
                setTimeout(() => {
                    // this.changeToNextPuzzle();
                    this.initNewPuzzle(loadPuzzleEvent);
                }, 4000);
            }
        }
    };
    dispose = () => {
        this.audioPlayer.stopAllAudios();
        this.removeEventListeners();
        this.feedbackTextEffects.unregisterEventListener();
        this.monster.unregisterEventListener();
        this.timerTicking.unregisterEventListener();
        this.levelIndicators.unregisterEventListener();
        this.stoneHandler.unregisterEventListener();
        this.promptText.unregisterEventListener();
        document.removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.VISIBILITY_CHANGE, this.handleVisibilityChange, false);
        // this.deleteComponentInstances();
    };
    letterInWordPuzzle(droppedStone) {
        const feedBackIndex = this.getRandomInt(0, 1);
        const isCorrect = this.stoneHandler.isStoneDroppedCorrectForLetterInWord(droppedStone, feedBackIndex);
        if (isCorrect) {
            this.handleCorrectStoneDrop(feedBackIndex);
        }
        this.logPuzzleEndFirebaseEvent(isCorrect);
        this.dispatchStoneDropEvent(isCorrect);
        this.loadPuzzle();
    }
    letterOnlyPuzzle(droppedStone) {
        const feedBackIndex = this.getRandomInt(0, 1);
        const isCorrect = this.stoneHandler.isStoneDroppedCorrectForLetterOnly(droppedStone, feedBackIndex);
        if (isCorrect) {
            this.handleCorrectStoneDrop(feedBackIndex);
        }
        this.logPuzzleEndFirebaseEvent(isCorrect);
        this.dispatchStoneDropEvent(isCorrect);
        this.loadPuzzle();
    }
    wordPuzzle(droppedStone, droppedStoneInstance) {
        this.audioPlayer.stopFeedbackAudio();
        droppedStoneInstance.x = -999;
        droppedStoneInstance.y = -999;
        const feedBackIndex = this.getRandomInt(0, 1);
        this.tempWordforWordPuzzle = this.tempWordforWordPuzzle + droppedStone;
        const isCorrect = this.stoneHandler.isStonDroppedCorrectForWord(this.tempWordforWordPuzzle, feedBackIndex);
        if (this.stoneHandler.getCorrectTargetStone() == this.tempWordforWordPuzzle &&
            isCorrect) {
            this.handleCorrectStoneDrop(feedBackIndex);
            this.logPuzzleEndFirebaseEvent(isCorrect, "Word");
            this.dispatchStoneDropEvent(isCorrect);
            this.loadPuzzle();
            this.stonesCount = 1;
            return;
        }
        if (isCorrect) {
            this.timerTicking.startTimer();
            this.monster.changeToEatAnimation();
            _global_variables__WEBPACK_IMPORTED_MODULE_6__.lang == "arabic"
                ? this.promptText.droppedStoneIndex(this.stonesCount)
                : this.promptText.droppedStoneIndex(this.tempWordforWordPuzzle.length);
            this.stonesCount++;
            setTimeout(() => {
                this.monster.changeToIdleAnimation();
            }, 1500);
        }
        else {
            this.audioPlayer.playAudio("./assets/audios/MonsterSpit.mp3");
            this.logPuzzleEndFirebaseEvent(isCorrect, "Word");
            this.dispatchStoneDropEvent(isCorrect);
            this.loadPuzzle();
            this.stonesCount = 1;
        }
    }
    handleCorrectStoneDrop = (feedbackIndex) => {
        this.score += 100;
        console.log("handleCorrectStone->");
        // this.audioPlayer.playAudio(false, "./assets/audios/Eat.mp3","./assets/audios/Cheering-02.mp3", "./assets/audios/fantastic.WAV");
        console.log(this.getRandomFeedBackText(feedbackIndex));
        this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(feedbackIndex));
        this.feedBackTextCanavsElement.style.zIndex = "2";
    };
    dispatchStoneDropEvent(isCorrect) {
        const loadPuzzleData = { isCorrect: isCorrect };
        const dropStoneEvent = new CustomEvent(_common_event_names__WEBPACK_IMPORTED_MODULE_9__.STONEDROP, {
            detail: loadPuzzleData,
        });
        document.dispatchEvent(dropStoneEvent);
    }
    initNewPuzzle(loadPuzzleEvent) {
        this.isGameStarted = false;
        this.time = 0;
        this.tempWordforWordPuzzle = "";
        this.pickedStone = null;
        this.feedbackTextEffects.clearParticle();
        this.feedBackTextCanavsElement.style.zIndex = "0";
        document.dispatchEvent(loadPuzzleEvent);
        this.addEventListeners();
        this.audioPlayer.stopAllAudios();
        this.startPuzzleTime();
    }
    incrementPuzzle() {
        this.counter += 1;
    }
    logPuzzleEndFirebaseEvent(isCorrect, puzzleType) {
        let endTime = Date.now();
        const puzzleCompletedData = {
            cr_user_id: _global_variables__WEBPACK_IMPORTED_MODULE_6__.pseudoId,
            ftm_language: _global_variables__WEBPACK_IMPORTED_MODULE_6__.lang,
            profile_number: 0,
            version_number: document.getElementById("version-info-id").innerHTML,
            json_version_number: this.jsonVersionNumber,
            success_or_failure: isCorrect ? "success" : "failure",
            level_number: this.levelData.levelMeta.levelNumber,
            puzzle_number: this.counter,
            item_selected: puzzleType == "Word"
                ? this.tempWordforWordPuzzle
                : this.pickedStone?.text,
            target: this.stoneHandler.getCorrectTargetStone(),
            foils: this.stoneHandler.getFoilStones(),
            response_time: (endTime - this.puzzleTime) / 1000,
            event_date_with_timestamp: new Date() + ' ' + new Date().getTime(),
        };
        this.firebaseIntegration.sendPuzzleCompletedEvent(puzzleCompletedData);
    }
    logLevelEndFirebaseEvent() {
        let endTime = Date.now();
        const levelCompletedData = {
            cr_user_id: _global_variables__WEBPACK_IMPORTED_MODULE_6__.pseudoId,
            ftm_language: _global_variables__WEBPACK_IMPORTED_MODULE_6__.lang,
            profile_number: 0,
            version_number: document.getElementById("version-info-id").innerHTML,
            json_version_number: this.jsonVersionNumber,
            success_or_failure: _data_game_score__WEBPACK_IMPORTED_MODULE_12__.GameScore.calculateStarCount(this.score) >= 3 ? "success" : "failure",
            number_of_successful_puzzles: this.score / 100,
            level_number: this.levelData.levelMeta.levelNumber,
            duration: (endTime - this.startTime) / 1000,
        };
        this.firebaseIntegration.sendLevelCompletedEvent(levelCompletedData);
    }
    startGameTime() {
        this.startTime = Date.now();
    }
    startPuzzleTime() {
        this.puzzleTime = Date.now();
    }
    pauseGamePlay = () => {
        this.isPauseButtonClicked = true;
        this.stoneHandler.setGamePause(true);
        this.removeEventListeners();
        this.pausePopup.addListner();
        this.audioPlayer.stopAllAudios();
    };
    handleVisibilityChange = () => {
        this.audioPlayer.stopAllAudios();
        this.pauseGamePlay();
    };
}


/***/ }),

/***/ "./src/scenes/level-selection-scene.ts":
/*!*********************************************!*\
  !*** ./src/scenes/level-selection-scene.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LevelSelectionScreen: () => (/* binding */ LevelSelectionScreen)
/* harmony export */ });
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _common_level_config__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/level-config */ "./src/common/level-config.ts");
/* harmony import */ var _components_audio_player__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _data_game_score__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../data/game-score */ "./src/data/game-score.ts");





class LevelSelectionScreen {
    canvas;
    data;
    levelButtonPos;
    canvasElement;
    context;
    levels;
    gameLevelData;
    callBack;
    audioPlayer;
    images;
    loadedImages;
    imagesLoaded = false;
    xDown;
    yDown;
    previousPlayedLevelNumber;
    levelSelectionPageIndex = 0;
    levelNumber;
    levelsSectionCount;
    unlockLevelIndex;
    constructor(canvas, data, callBack) {
        this.canvas = canvas;
        this.data = data;
        let self = this;
        this.callBack = callBack;
        this.levelsSectionCount =
            self.data.levels.length / 10 > Math.floor(self.data.levels.length / 10)
                ? Math.floor(self.data.levels.length / 10) + 1
                : Math.floor(self.data.levels.length / 10);
        this.initialiseButtonPos();
        this.levels = [];
        this.canvasElement = document.getElementById("canvas");
        this.context = this.canvasElement.getContext("2d");
        this.createLevelButtons(this.levelButtonPos);
        this.gameLevelData = _data_game_score__WEBPACK_IMPORTED_MODULE_4__.GameScore.getAllGameLevelInfo();
        this.callBack = callBack;
        this.audioPlayer = new _components_audio_player__WEBPACK_IMPORTED_MODULE_3__.AudioPlayer();
        this.unlockLevelIndex = -1;
        this.previousPlayedLevelNumber =
            parseInt(_global_variables__WEBPACK_IMPORTED_MODULE_0__.Debugger.DebugMode
                ? localStorage.getItem(_common_common__WEBPACK_IMPORTED_MODULE_1__.PreviousPlayedLevel + _global_variables__WEBPACK_IMPORTED_MODULE_0__.lang + "Debug")
                : localStorage.getItem(_common_common__WEBPACK_IMPORTED_MODULE_1__.PreviousPlayedLevel + _global_variables__WEBPACK_IMPORTED_MODULE_0__.lang)) | 0;
        if (this.previousPlayedLevelNumber != null) {
            this.levelSelectionPageIndex =
                10 * Math.floor(this.previousPlayedLevelNumber / 10);
        }
        // loading images
        this.images = {
            mapIcon: "./assets/images/mapIcon.png",
            mapLock: "./assets/images/mapLock.png",
            map: "./assets/images/map.jpg",
            star: "./assets/images/star.png",
            nextbtn: "./assets/images/next_btn.png",
            backbtn: "./assets/images/back_btn.png",
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_1__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
            if (document.visibilityState === "visible") {
                this.audioPlayer.playAudio("./assets/audios/intro.mp3");
            }
        });
        this.addListeners();
    }
    initialiseButtonPos() {
        this.levelButtonPos = [
            [
                [this.canvas.width / 10, this.canvas.height / 10],
                [this.canvas.width / 2.5, this.canvas.height / 10],
                [
                    this.canvas.width / 3 + this.canvas.width / 2.8,
                    this.canvas.height / 10,
                ],
                [this.canvas.width / 10, this.canvas.height / 3],
                [this.canvas.width / 2.5, this.canvas.height / 3],
                [
                    this.canvas.width / 3 + this.canvas.width / 2.8,
                    this.canvas.height / 3,
                ],
                [this.canvas.width / 10, this.canvas.height / 1.8],
                [this.canvas.width / 2.5, this.canvas.height / 1.8],
                [
                    this.canvas.width / 3 + this.canvas.width / 2.8,
                    this.canvas.height / 1.8,
                ],
                [this.canvas.width / 2.5, this.canvas.height / 1.3],
            ],
        ];
    }
    createLevelButtons(levelButtonpos) {
        let poss = levelButtonpos[0];
        let i = 0;
        for (let s = 0; s < 10; s++) {
            let ns = new _common_level_config__WEBPACK_IMPORTED_MODULE_2__.LevelConfig(poss[i][0], poss[i][1], i + 1);
            this.levels.push(ns);
            i += 1;
        }
    }
    addListeners() {
        // next prev button listner #1
        document
            .getElementById("canvas")
            .addEventListener("mousedown", this.handleMouseDown, false);
        // when app goes background #2
        document.addEventListener("visibilitychange", this.pausePlayAudios, false);
        /// swipe listener #3
        document
            .getElementById("canvas")
            .addEventListener("touchstart", this.handleTouchStart, false);
        // #4
        document
            .getElementById("canvas")
            .addEventListener("touchmove", this.handleTouchMove, false);
    }
    pausePlayAudios = () => {
        if (document.visibilityState === "visible") {
            this.audioPlayer.playAudio("./assets/audios/intro.mp3");
        }
        else {
            this.audioPlayer.stopAllAudios();
        }
    };
    getTouches(evt) {
        return (evt.touches || // browser API
            evt.originalEvent.touches); // jQuery
    }
    handleTouchStart = (evt) => {
        const firstTouch = this.getTouches(evt)[0];
        this.xDown = firstTouch.clientX;
        this.yDown = firstTouch.clientY;
    };
    handleTouchMove = (evt) => {
        if (!this.xDown || !this.yDown) {
            return;
        }
        let xUp = evt.touches[0].clientX;
        let yUp = evt.touches[0].clientY;
        let xDiff = this.xDown - xUp;
        let yDiff = this.yDown - yUp;
        if (Math.abs(xDiff) > Math.abs(yDiff)) {
            /*most significant*/
            if (xDiff > 0) {
                if (this.levelSelectionPageIndex != this.levelsSectionCount * 10 - 10) {
                    this.levelSelectionPageIndex = this.levelSelectionPageIndex + 10;
                    this.downButton(this.levelSelectionPageIndex);
                }
                /* right swipe */
            }
            else {
                if (this.levelSelectionPageIndex != 0) {
                    this.levelSelectionPageIndex = this.levelSelectionPageIndex - 10;
                }
                this.downButton(this.levelSelectionPageIndex);
                /* left swipe */
            }
        }
        /* reset values */
        this.xDown = null;
        this.yDown = null;
    };
    handleMouseDown = (event) => {
        // return function (event) {
        event.preventDefault();
        let rect = document.getElementById("canvas").getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (x >= this.canvas.width * 0.7 &&
            x < this.canvas.width * 0.7 + this.canvas.height / 10 &&
            y > this.canvas.height / 1.3 &&
            y < this.canvas.height / 1.3 + this.canvas.height / 10) {
            if (this.levelSelectionPageIndex != this.levelsSectionCount * 10 - 10) {
                this.levelSelectionPageIndex = this.levelSelectionPageIndex + 10;
                this.downButton(this.levelSelectionPageIndex);
            }
        }
        if (x >= this.canvas.width / 10 &&
            x < this.canvas.width / 10 + this.canvas.height / 10 &&
            y > this.canvas.height / 1.3 &&
            y < this.canvas.height / 1.3 + this.canvas.height / 10) {
            if (this.levelSelectionPageIndex != 0) {
                this.levelSelectionPageIndex = this.levelSelectionPageIndex - 10;
            }
            this.downButton(this.levelSelectionPageIndex);
        }
        for (let s of this.levels) {
            if (Math.sqrt((x - s.x - this.canvas.height / 20) *
                (x - s.x - this.canvas.height / 20) +
                (y - s.y - this.canvas.height / 20) *
                    (y - s.y - this.canvas.height / 20)) < 45) {
                if (_global_variables__WEBPACK_IMPORTED_MODULE_0__.Debugger.DebugMode) {
                    this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
                    this.levelNumber = s.index + this.levelSelectionPageIndex - 1;
                    this.startGame(this.levelNumber);
                }
                else if (s.index + this.levelSelectionPageIndex - 1 <=
                    this.unlockLevelIndex + 1) {
                    this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
                    this.levelNumber = s.index + this.levelSelectionPageIndex - 1;
                    this.startGame(this.levelNumber);
                }
            }
        }
    };
    drawLevel(s, canvas) {
        let imageSize = canvas.height / 5;
        let textFontSize = imageSize / 6;
        if (s.index + this.levelSelectionPageIndex <= this.data.levels.length) {
            this.context.drawImage(this.loadedImages.mapIcon, s.x, s.y, imageSize, imageSize);
            this.context.fillStyle = "white";
            this.context.font =
                textFontSize + `px ${_global_variables__WEBPACK_IMPORTED_MODULE_0__.font}, monospace`;
            this.context.textAlign = "center";
            this.context.fillText(s.index + this.levelSelectionPageIndex, s.x + imageSize / 3.5, s.y + imageSize / 3);
            this.context.font =
                textFontSize -
                    imageSize / 30 +
                    `px ${_global_variables__WEBPACK_IMPORTED_MODULE_0__.font}, monospace`;
            _global_variables__WEBPACK_IMPORTED_MODULE_0__.Debugger.DebugMode
                ? this.context.fillText(this.data.levels[s.index + this.levelSelectionPageIndex - 1]
                    .levelMeta.levelType, s.x + imageSize / 3.5, s.y + imageSize / 1.3)
                : null;
        }
    }
    draw() {
        for (let s of this.levels) {
            this.drawLevel(s, this.canvas);
        }
    }
    downButton(level) {
        let imageSize = this.canvas.height / 10;
        if (level != this.levelsSectionCount * 10 - 10) {
            this.context.drawImage(this.loadedImages.nextbtn, this.canvas.width * 0.7, this.canvas.height / 1.3, imageSize, imageSize);
        }
        if (level != 0) {
            this.context.drawImage(this.loadedImages.backbtn, this.canvas.width / 10, this.canvas.height / 1.3, imageSize, imageSize);
        }
    }
    // draw stars on top of level number
    drawStars(gameLevelData) {
        if (gameLevelData != null) {
            if (gameLevelData.length != undefined) {
                for (let game of gameLevelData) {
                    if (this.unlockLevelIndex < parseInt(game.levelNumber)) {
                        game.starCount >= 2
                            ? (this.unlockLevelIndex = parseInt(game.levelNumber))
                            : null;
                    }
                }
            }
            for (let s of this.levels) {
                if (s.index + this.levelSelectionPageIndex <= this.data.levels.length) {
                    if (!_global_variables__WEBPACK_IMPORTED_MODULE_0__.Debugger.DebugMode) {
                        s.index + this.levelSelectionPageIndex - 1 >
                            this.unlockLevelIndex + 1
                            ? this.context.drawImage(this.loadedImages.mapLock, s.x, s.y, this.canvas.height / 13, this.canvas.height / 13)
                            : null;
                    }
                    for (let i = 0; i < gameLevelData.length; i++) {
                        if (s.index - 1 + this.levelSelectionPageIndex ==
                            parseInt(gameLevelData[i].levelNumber)) {
                            this.drawStar(s, this.canvas, gameLevelData[i].starCount, this.context);
                            break;
                        }
                    }
                }
            }
        }
    }
    drawStar(s, canvas, starCount, context) {
        let imageSize = canvas.height / 5;
        if (starCount >= 1) {
            context.drawImage(this.loadedImages.star, s.x, s.y - imageSize * 0.01, imageSize / 5, imageSize / 5);
        }
        if (starCount > 1) {
            context.drawImage(this.loadedImages.star, s.x + imageSize / 2.5, s.y - imageSize * 0.01, imageSize / 5, imageSize / 5);
        }
        if (starCount == 3) {
            context.drawImage(this.loadedImages.star, s.x + imageSize / 5, s.y - imageSize * 0.1, imageSize / 5, imageSize / 5);
        }
    }
    startGame(level_number) {
        this.dispose();
        this.audioPlayer.stopAllAudios();
        // StartScene.SceneName = GameScene1;
        let gamePlayData = {
            currentLevelData: this.data.levels[level_number],
            selectedLevelNumber: level_number,
        };
        this.callBack(gamePlayData, "LevelSelection");
    }
    drawLevelSelection() {
        if (this.imagesLoaded) {
            this.context.drawImage(this.loadedImages.map, 0, 0, this.canvas.width, this.canvas.height);
            this.draw();
            this.downButton(this.levelSelectionPageIndex);
            this.drawStars(this.gameLevelData);
        }
    }
    dispose() {
        this.audioPlayer.stopAllAudios();
        document
            .getElementById("canvas")
            .removeEventListener("mousedown", this.handleMouseDown, false);
        // when app goes background #2
        document.removeEventListener("visibilitychange", this.pausePlayAudios, false);
        /// swipe listener #3
        document
            .getElementById("canvas")
            .removeEventListener("touchstart", this.handleTouchStart, false);
        // #4
        document
            .getElementById("canvas")
            .removeEventListener("touchmove", this.handleTouchMove, false);
    }
}


/***/ }),

/***/ "./src/scenes/levelend-scene.ts":
/*!**************************************!*\
  !*** ./src/scenes/levelend-scene.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LevelEndScene: () => (/* binding */ LevelEndScene)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _common_event_names__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/event-names */ "./src/common/event-names.ts");
/* harmony import */ var _components_audio_player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _components_background__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/background */ "./src/components/background.ts");
/* harmony import */ var _components_buttons_close_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/buttons/close-button */ "./src/components/buttons/close-button.ts");
/* harmony import */ var _components_buttons_next_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/buttons/next-button */ "./src/components/buttons/next-button.ts");
/* harmony import */ var _components_buttons_retry_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/buttons/retry-button */ "./src/components/buttons/retry-button.ts");
/* harmony import */ var _components_monster__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/monster */ "./src/components/monster.ts");








class LevelEndScene {
    canvas;
    height;
    width;
    images;
    loadedImages;
    imagesLoaded;
    id;
    context;
    monster;
    closeButton;
    retryButton;
    nextButton;
    starCount;
    currentLevel;
    switchToGameplayCB;
    switchToLevelSelectionCB;
    data;
    background;
    audioPlayer;
    timeouts;
    starDrawnCount;
    constructor(canvas, height, width, context, starCount, currentLevel, switchToGameplayCB, switchToLevelSelectionCB, data, monsterPhaseNumber) {
        this.canvas = canvas;
        this.height = height;
        this.width = width;
        this.context = context;
        this.monster = new _components_monster__WEBPACK_IMPORTED_MODULE_7__.Monster(this.canvas, monsterPhaseNumber, this.switchToReactionAnimation);
        this.background = new _components_background__WEBPACK_IMPORTED_MODULE_3__.Background(this.context, this.width, this.height, currentLevel);
        this.switchToGameplayCB = switchToGameplayCB;
        this.switchToLevelSelectionCB = switchToLevelSelectionCB;
        this.data = data;
        this.starDrawnCount = 0;
        this.closeButton = new _components_buttons_close_button__WEBPACK_IMPORTED_MODULE_4__["default"](context, canvas, this.width * 0.2 - (this.width * 0.19) / 2, this.height * 0.7);
        this.retryButton = new _components_buttons_retry_button__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, this.canvas, this.width * 0.5 - (this.width * 0.19) / 2, this.height * 0.7);
        this.nextButton = new _components_buttons_next_button__WEBPACK_IMPORTED_MODULE_5__["default"](this.context, this.width, this.height, this.width * 0.8 - (this.width * 0.19) / 2, this.height * 0.7);
        this.audioPlayer = new _components_audio_player__WEBPACK_IMPORTED_MODULE_2__.AudioPlayer();
        this.starCount = starCount;
        this.currentLevel = currentLevel;
        this.images = {
            backgroundImg: "./assets/images/WIN_screen_bg.png",
            star1Img: "./assets/images/pinStar1.png",
            star2Img: "./assets/images/pinStar2.png",
            star3Img: "./assets/images/pinStar3.png",
            winBackgroundImg: "./assets/images/bg_v01.jpg",
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
            this.starAnimation();
        });
        this.addEventListener();
        this.audioPlayer = new _components_audio_player__WEBPACK_IMPORTED_MODULE_2__.AudioPlayer();
    }
    switchToReactionAnimation = () => {
        if (this.starCount <= 1) {
            if (document.visibilityState === "visible") {
                this.audioPlayer.playAudio("./assets/audios/LevelLoseFanfare.mp3");
            }
            this.monster.changeToSpitAnimation();
        }
        else {
            if (document.visibilityState === "visible") {
                this.audioPlayer.playAudio("./assets/audios/LevelWinFanfare.mp3");
                this.audioPlayer.playAudio("./assets/audios/intro.mp3");
            }
            this.monster.changeToEatAnimation();
        }
    };
    draw(deltaTime) {
        this.background.draw();
        if (this.imagesLoaded) {
            this.context.drawImage(this.loadedImages.backgroundImg, 0, 0, this.width, this.height);
            this.drawStars();
            this.monster.update(deltaTime);
            this.closeButton.draw();
            this.retryButton.draw();
            if (this.starCount >= 2) {
                this.nextButton.draw();
            }
        }
    }
    starAnimation() {
        const animations = [
            { delay: 500, count: 1 },
            { delay: 1000, count: 2 },
            { delay: 1500, count: 3 },
        ];
        this.timeouts = animations.map((animation) => {
            return setTimeout(() => {
                this.starDrawnCount = animation.count;
            }, animation.delay);
        });
    }
    drawStars() {
        if (this.starCount >= 1 && this.starDrawnCount >= 1) {
            this.context.drawImage(this.loadedImages.star1Img, this.width * 0.2 - (this.width * 0.19) / 2, this.height * 0.2, this.width * 0.19, this.width * 0.19);
            if (this.starCount <= 3 &&
                this.starCount > 1 &&
                this.starDrawnCount <= 3 &&
                this.starDrawnCount > 1) {
                this.context.drawImage(this.loadedImages.star2Img, this.width * 0.5 - (this.width * 0.19) / 2, this.height * 0.15, this.width * 0.19, this.width * 0.19);
                if (this.starCount >= 3 && this.starDrawnCount >= 3) {
                    this.context.drawImage(this.loadedImages.star3Img, this.width * 0.82 - (this.width * 0.19) / 2, this.height * 0.2, this.width * 0.19, this.width * 0.19);
                }
            }
        }
    }
    addEventListener() {
        document
            .getElementById("canvas")
            .addEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_1__.CLICK, this.handleMouseClick, false);
        document.addEventListener("visibilitychange", this.pauseAudios, false);
    }
    handleMouseClick = (event) => {
        console.log(" levelend mouseclick ");
        const selfElement = document.getElementById("canvas");
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (this.closeButton.onClick(x, y)) {
            this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
            console.log(" close button clicked");
            this.switchToLevelSelectionCB("LevelEnd");
        }
        if (this.retryButton.onClick(x, y)) {
            this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
            console.log(" retry button clicked");
            let gamePlayData = {
                currentLevelData: this.data.levels[this.currentLevel],
                selectedLevelNumber: this.currentLevel,
            };
            // pass same data as level is same
            this.switchToGameplayCB(gamePlayData, "LevelEnd");
        }
        if (this.nextButton.onClick(x, y) && this.starCount >= 2) {
            this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
            let next = Number(this.currentLevel) + 1;
            console.log(typeof next, " next button clicked", next);
            let gamePlayData = {
                currentLevelData: this.data.levels[next],
                selectedLevelNumber: next,
            };
            this.switchToGameplayCB(gamePlayData, "LevelEnd");
        }
    };
    pauseAudios = () => {
        if (document.visibilityState === "visible") {
            if (this.starCount >= 2) {
                this.audioPlayer.playAudio("./assets/audios/intro.mp3");
            }
        }
        else {
            this.audioPlayer.stopAllAudios();
        }
    };
    dispose = () => {
        this.audioPlayer.stopAllAudios();
        this.timeouts.forEach((timeout) => clearTimeout(timeout));
        document
            .getElementById("canvas")
            .removeEventListener(_common_event_names__WEBPACK_IMPORTED_MODULE_1__.CLICK, this.handleMouseClick, false);
        document.removeEventListener("visibilitychange", this.pauseAudios, false);
    };
}


/***/ }),

/***/ "./src/scenes/loading-scene.ts":
/*!*************************************!*\
  !*** ./src/scenes/loading-scene.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LoadingScene: () => (/* binding */ LoadingScene)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");

class LoadingScene {
    canvas;
    height;
    width;
    context;
    images;
    loadedImages;
    imagesLoaded;
    cloudXPosition = -500;
    stopCloudMoving = false;
    cloudMovingTimeOut = 0;
    removeLoading;
    constructor(width, height, removeLoading) {
        this.canvas = document.getElementById("loading");
        this.canvas.height = height;
        this.canvas.width = width;
        this.height = height;
        this.width = width;
        this.removeLoading = removeLoading;
        this.context = this.canvas.getContext("2d");
        this.images = {
            cloud6: "./assets/images/cloud_01.png",
            cloud7: "./assets/images/cloud_02.png",
            cloud8: "./assets/images/cloud_03.png",
        };
        (0,_common_common__WEBPACK_IMPORTED_MODULE_0__.loadImages)(this.images, (images) => {
            this.loadedImages = Object.assign({}, images);
            this.imagesLoaded = true;
        });
    }
    draw(deltaTime) {
        this.context.clearRect(0, 0, this.width, this.height);
        this.cloudXPosition += deltaTime * 0.75;
        this.cloudMovingTimeOut += deltaTime;
        if (this.cloudMovingTimeOut > 2983) {
            this.removeLoading();
        }
        if (this.cloudXPosition >= this.width * 0.5 && !this.stopCloudMoving) {
            this.cloudMovingTimeOut += deltaTime;
            if (this.cloudMovingTimeOut > 2000) {
                this.stopCloudMoving = true;
                this.cloudXPosition = 0;
            }
        }
        if (this.imagesLoaded) {
            if (!this.stopCloudMoving) {
                this.context.drawImage(this.loadedImages.cloud6, this.cloudXPosition >= 0 ? 0 : this.cloudXPosition, this.height * 0.6, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud6, this.cloudXPosition >= this.width * 0.4
                    ? this.width * 0.4
                    : this.cloudXPosition, this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud7, this.cloudXPosition >= 0 ? 0 : this.cloudXPosition, this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.cloudXPosition >= -this.width * 0.4
                    ? -this.width * 0.4
                    : this.cloudXPosition, -this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.cloudXPosition >= this.width * 0.4
                    ? this.width * 0.4
                    : this.cloudXPosition, -this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.cloudXPosition >= this.width * 0.05
                    ? this.width * 0.05
                    : this.cloudXPosition, -this.height * 0.2, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.cloudXPosition >= -this.width * 0.6
                    ? -this.width * 0.6
                    : this.cloudXPosition, this.height * 0.3, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud7, this.cloudXPosition >= this.width * 0.5
                    ? this.width * 0.5
                    : this.cloudXPosition, this.height * 0.4, this.width, this.height * 0.4);
                this.context.drawImage(this.loadedImages.cloud7, this.cloudXPosition >= -this.width * 0.4
                    ? -this.width * 0.4
                    : this.cloudXPosition, this.height * 0.7, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.cloudXPosition >= this.width * 0.4
                    ? this.width * 0.4
                    : this.cloudXPosition, this.height * 0.7, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud6, this.cloudXPosition >= -this.width * 0.2
                    ? -this.width * 0.2
                    : this.cloudXPosition, this.height * 0.2, this.width, this.height * 0.5);
            }
            else {
                this.context.drawImage(this.loadedImages.cloud6, 0 + this.cloudXPosition, this.height * 0.6, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud6, this.width * 0.4 + this.cloudXPosition, this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud7, 0 + this.cloudXPosition, this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, -this.width * 0.4 + this.cloudXPosition, -this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.width * 0.4 + this.cloudXPosition, -this.height * 0.15, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.width * 0.05 + this.cloudXPosition, -this.height * 0.2, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, -this.width * 0.6 + this.cloudXPosition, this.height * 0.3, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud7, this.width * 0.5 + this.cloudXPosition, this.height * 0.4, this.width, this.height * 0.4);
                this.context.drawImage(this.loadedImages.cloud7, -this.width * 0.4 + this.cloudXPosition, this.height * 0.7, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud8, this.width * 0.4 + this.cloudXPosition, this.height * 0.7, this.width, this.height * 0.5);
                this.context.drawImage(this.loadedImages.cloud6, -this.width * 0.2 + this.cloudXPosition, this.height * 0.2, this.width, this.height * 0.5);
            }
        }
    }
    initCloud = () => {
        this.cloudXPosition = -500;
        this.stopCloudMoving = false;
        this.cloudMovingTimeOut = 0;
    };
}


/***/ }),

/***/ "./src/scenes/start-scene.ts":
/*!***********************************!*\
  !*** ./src/scenes/start-scene.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   StartScene: () => (/* binding */ StartScene)
/* harmony export */ });
/* harmony import */ var _common_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/common */ "./src/common/common.ts");
/* harmony import */ var _components_monster__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/monster */ "./src/components/monster.ts");
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../global-variables */ "./global-variables.ts");
/* harmony import */ var _components_background__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/background */ "./src/components/background.ts");
/* harmony import */ var _components_audio_player__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _Firebase_firebase_integration__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Firebase/firebase-integration */ "./src/Firebase/firebase-integration.ts");
/* harmony import */ var _components_play_button__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/play-button */ "./src/components/play-button.ts");







class StartScene {
    canvas;
    data;
    width;
    height;
    monster;
    pickedStone;
    pwa_status;
    firebase_analytics;
    id;
    canavsElement;
    context;
    buttonContext;
    playButton;
    images;
    loadedImages;
    imagesLoaded = false;
    handler;
    static SceneName;
    switchSceneToLevelSelection;
    titleFont;
    background1;
    audioPlayer;
    toggleBtn;
    pwa_install_status;
    constructor(canvas, data, switchSceneToLevelSelection) {
        this.canvas = canvas;
        this.data = data;
        this.width = canvas.width;
        this.height = canvas.height;
        this.canavsElement = document.getElementById("canvas");
        this.context = this.canavsElement.getContext("2d");
        this.toggleBtn = document.getElementById("toggle-btn");
        this.monster = new _components_monster__WEBPACK_IMPORTED_MODULE_1__.Monster(this.canvas, 4);
        this.switchSceneToLevelSelection = switchSceneToLevelSelection;
        this.background1 = new _components_background__WEBPACK_IMPORTED_MODULE_3__.Background(this.context, this.width, this.height, 1);
        this.audioPlayer = new _components_audio_player__WEBPACK_IMPORTED_MODULE_4__.AudioPlayer();
        this.pwa_status = localStorage.getItem(_common_common__WEBPACK_IMPORTED_MODULE_0__.PWAInstallStatus);
        this.handler = document.getElementById("canvas");
        this.devToggle();
        this.createPlayButton();
        StartScene.SceneName = _common_common__WEBPACK_IMPORTED_MODULE_0__.StartScene1;
        window.addEventListener("beforeinstallprompt", this.handlerInstallPrompt);
    }
    devToggle = () => {
        this.toggleBtn.addEventListener("click", () => {
            this.toggleBtn.classList.toggle("on");
            if (this.toggleBtn.classList.contains("on")) {
                _global_variables__WEBPACK_IMPORTED_MODULE_2__.Debugger.DebugMode = true;
                this.toggleBtn.innerText = "Dev";
            }
            else {
                _global_variables__WEBPACK_IMPORTED_MODULE_2__.Debugger.DebugMode = false;
                this.toggleBtn.innerText = "Dev";
            }
        });
    };
    animation = (deltaTime) => {
        this.titleFont = this.getFontWidthOfTitle();
        this.context.clearRect(0, 0, this.width, this.height);
        if (StartScene.SceneName == _common_common__WEBPACK_IMPORTED_MODULE_0__.StartScene1) {
            this.background1.draw();
            this.context.font = `${this.titleFont}px ${_global_variables__WEBPACK_IMPORTED_MODULE_2__.font}, monospace`;
            this.context.fillStyle = "white";
            this.context.textAlign = "center";
            this.context.fillText(this.data.title, this.width * 0.5, this.height / 10);
            this.monster.update(deltaTime);
            this.playButton.draw();
        }
    };
    createPlayButton() {
        this.playButton = new _components_play_button__WEBPACK_IMPORTED_MODULE_6__["default"](this.context, this.canvas, this.canvas.width * 0.35, this.canvas.height / 7);
        document.addEventListener("selectstart", function (e) {
            e.preventDefault();
        });
        this.handler.addEventListener("click", this.handleMouseClick, false);
    }
    handleMouseClick = (event) => {
        let self = this;
        const selfElement = document.getElementById("canvas");
        event.preventDefault();
        var rect = selfElement.getBoundingClientRect();
        const x = event.clientX - rect.left;
        const y = event.clientY - rect.top;
        if (self.playButton.onClick(x, y)) {
            _Firebase_firebase_integration__WEBPACK_IMPORTED_MODULE_5__.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent();
            // @ts-ignore
            fbq("trackCustom", _common_common__WEBPACK_IMPORTED_MODULE_0__.FirebaseUserClicked, {
                event: "click",
            });
            this.toggleBtn.style.display = "none";
            this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");
            self.switchSceneToLevelSelection("StartScene");
        }
    };
    dispose() {
        this.audioPlayer.stopAllAudios();
        this.handler.removeEventListener("click", this.handleMouseClick, false);
        window.removeEventListener("beforeinstallprompt", this.handlerInstallPrompt, false);
    }
    getFontWidthOfTitle() {
        return (this.width + 200) / this.data.title.length;
    }
    handlerInstallPrompt = (event) => {
        event.preventDefault();
        this.pwa_install_status = event;
        localStorage.setItem(_common_common__WEBPACK_IMPORTED_MODULE_0__.PWAInstallStatus, "false");
    };
}


/***/ }),

/***/ "./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":
/*!********************************************************************!*\
  !*** ./node_modules/@firebase/analytics/dist/esm/index.esm2017.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAnalytics: () => (/* binding */ getAnalytics),
/* harmony export */   getGoogleAnalyticsClientId: () => (/* binding */ getGoogleAnalyticsClientId),
/* harmony export */   initializeAnalytics: () => (/* binding */ initializeAnalytics),
/* harmony export */   isSupported: () => (/* binding */ isSupported),
/* harmony export */   logEvent: () => (/* binding */ logEvent),
/* harmony export */   setAnalyticsCollectionEnabled: () => (/* binding */ setAnalyticsCollectionEnabled),
/* harmony export */   setConsent: () => (/* binding */ setConsent),
/* harmony export */   setCurrentScreen: () => (/* binding */ setCurrentScreen),
/* harmony export */   setDefaultEventParameters: () => (/* binding */ setDefaultEventParameters),
/* harmony export */   setUserId: () => (/* binding */ setUserId),
/* harmony export */   setUserProperties: () => (/* binding */ setUserProperties),
/* harmony export */   settings: () => (/* binding */ settings)
/* harmony export */ });
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/logger */ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js");
/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_installations__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @firebase/installations */ "./node_modules/@firebase/installations/dist/esm/index.esm2017.js");






/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Type constant for Firebase Analytics.
 */
const ANALYTICS_TYPE = 'analytics';
// Key to attach FID to in gtag params.
const GA_FID_KEY = 'firebase_id';
const ORIGIN_KEY = 'origin';
const FETCH_TIMEOUT_MILLIS = 60 * 1000;
const DYNAMIC_CONFIG_URL = 'https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig';
const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger = new _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.Logger('@firebase/analytics');

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERRORS = {
    ["already-exists" /* AnalyticsError.ALREADY_EXISTS */]: 'A Firebase Analytics instance with the appId {$id} ' +
        ' already exists. ' +
        'Only one Firebase Analytics instance can be created for each appId.',
    ["already-initialized" /* AnalyticsError.ALREADY_INITIALIZED */]: 'initializeAnalytics() cannot be called again with different options than those ' +
        'it was initially called with. It can be called again with the same options to ' +
        'return the existing instance, or getAnalytics() can be used ' +
        'to get a reference to the already-intialized instance.',
    ["already-initialized-settings" /* AnalyticsError.ALREADY_INITIALIZED_SETTINGS */]: 'Firebase Analytics has already been initialized.' +
        'settings() must be called before initializing any Analytics instance' +
        'or it will have no effect.',
    ["interop-component-reg-failed" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */]: 'Firebase Analytics Interop Component failed to instantiate: {$reason}',
    ["invalid-analytics-context" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */]: 'Firebase Analytics is not supported in this environment. ' +
        'Wrap initialization of analytics in analytics.isSupported() ' +
        'to prevent initialization in unsupported environments. Details: {$errorInfo}',
    ["indexeddb-unavailable" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */]: 'IndexedDB unavailable or restricted in this environment. ' +
        'Wrap initialization of analytics in analytics.isSupported() ' +
        'to prevent initialization in unsupported environments. Details: {$errorInfo}',
    ["fetch-throttle" /* AnalyticsError.FETCH_THROTTLE */]: 'The config fetch request timed out while in an exponential backoff state.' +
        ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',
    ["config-fetch-failed" /* AnalyticsError.CONFIG_FETCH_FAILED */]: 'Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}',
    ["no-api-key" /* AnalyticsError.NO_API_KEY */]: 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
        'contain a valid API key.',
    ["no-app-id" /* AnalyticsError.NO_APP_ID */]: 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field to' +
        'contain a valid app ID.',
    ["no-client-id" /* AnalyticsError.NO_CLIENT_ID */]: 'The "client_id" field is empty.',
    ["invalid-gtag-resource" /* AnalyticsError.INVALID_GTAG_RESOURCE */]: 'Trusted Types detected an invalid gtag resource: {$gtagURL}.'
};
const ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory('analytics', 'Analytics', ERRORS);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Verifies and creates a TrustedScriptURL.
 */
function createGtagTrustedTypesScriptURL(url) {
    if (!url.startsWith(GTAG_URL)) {
        const err = ERROR_FACTORY.create("invalid-gtag-resource" /* AnalyticsError.INVALID_GTAG_RESOURCE */, {
            gtagURL: url
        });
        logger.warn(err.message);
        return '';
    }
    return url;
}
/**
 * Makeshift polyfill for Promise.allSettled(). Resolves when all promises
 * have either resolved or rejected.
 *
 * @param promises Array of promises to wait for.
 */
function promiseAllSettled(promises) {
    return Promise.all(promises.map(promise => promise.catch(e => e)));
}
/**
 * Creates a TrustedTypePolicy object that implements the rules passed as policyOptions.
 *
 * @param policyName A string containing the name of the policy
 * @param policyOptions Object containing implementations of instance methods for TrustedTypesPolicy, see {@link https://developer.mozilla.org/en-US/docs/Web/API/TrustedTypePolicy#instance_methods
 * | the TrustedTypePolicy reference documentation}.
 */
function createTrustedTypesPolicy(policyName, policyOptions) {
    // Create a TrustedTypes policy that we can use for updating src
    // properties
    let trustedTypesPolicy;
    if (window.trustedTypes) {
        trustedTypesPolicy = window.trustedTypes.createPolicy(policyName, policyOptions);
    }
    return trustedTypesPolicy;
}
/**
 * Inserts gtag script tag into the page to asynchronously download gtag.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */
function insertScriptTag(dataLayerName, measurementId) {
    const trustedTypesPolicy = createTrustedTypesPolicy('firebase-js-sdk-policy', {
        createScriptURL: createGtagTrustedTypesScriptURL
    });
    const script = document.createElement('script');
    // We are not providing an analyticsId in the URL because it would trigger a `page_view`
    // without fid. We will initialize ga-id using gtag (config) command together with fid.
    const gtagScriptURL = `${GTAG_URL}?l=${dataLayerName}&id=${measurementId}`;
    script.src = trustedTypesPolicy
        ? trustedTypesPolicy === null || trustedTypesPolicy === void 0 ? void 0 : trustedTypesPolicy.createScriptURL(gtagScriptURL)
        : gtagScriptURL;
    script.async = true;
    document.head.appendChild(script);
}
/**
 * Get reference to, or create, global datalayer.
 * @param dataLayerName Name of datalayer (most often the default, "_dataLayer").
 */
function getOrCreateDataLayer(dataLayerName) {
    // Check for existing dataLayer and create if needed.
    let dataLayer = [];
    if (Array.isArray(window[dataLayerName])) {
        dataLayer = window[dataLayerName];
    }
    else {
        window[dataLayerName] = dataLayer;
    }
    return dataLayer;
}
/**
 * Wrapped gtag logic when gtag is called with 'config' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param measurementId GA Measurement ID to set config for.
 * @param gtagParams Gtag config params to set.
 */
async function gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams) {
    // If config is already fetched, we know the appId and can use it to look up what FID promise we
    /// are waiting for, and wait only on that one.
    const correspondingAppId = measurementIdToAppId[measurementId];
    try {
        if (correspondingAppId) {
            await initializationPromisesMap[correspondingAppId];
        }
        else {
            // If config is not fetched yet, wait for all configs (we don't know which one we need) and
            // find the appId (if any) corresponding to this measurementId. If there is one, wait on
            // that appId's initialization promise. If there is none, promise resolves and gtag
            // call goes through.
            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);
            const foundConfig = dynamicConfigResults.find(config => config.measurementId === measurementId);
            if (foundConfig) {
                await initializationPromisesMap[foundConfig.appId];
            }
        }
    }
    catch (e) {
        logger.error(e);
    }
    gtagCore("config" /* GtagCommand.CONFIG */, measurementId, gtagParams);
}
/**
 * Wrapped gtag logic when gtag is called with 'event' command.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementId GA Measurement ID to log event to.
 * @param gtagParams Params to log with this event.
 */
async function gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams) {
    try {
        let initializationPromisesToWaitFor = [];
        // If there's a 'send_to' param, check if any ID specified matches
        // an initializeIds() promise we are waiting for.
        if (gtagParams && gtagParams['send_to']) {
            let gaSendToList = gtagParams['send_to'];
            // Make it an array if is isn't, so it can be dealt with the same way.
            if (!Array.isArray(gaSendToList)) {
                gaSendToList = [gaSendToList];
            }
            // Checking 'send_to' fields requires having all measurement ID results back from
            // the dynamic config fetch.
            const dynamicConfigResults = await promiseAllSettled(dynamicConfigPromisesList);
            for (const sendToId of gaSendToList) {
                // Any fetched dynamic measurement ID that matches this 'send_to' ID
                const foundConfig = dynamicConfigResults.find(config => config.measurementId === sendToId);
                const initializationPromise = foundConfig && initializationPromisesMap[foundConfig.appId];
                if (initializationPromise) {
                    initializationPromisesToWaitFor.push(initializationPromise);
                }
                else {
                    // Found an item in 'send_to' that is not associated
                    // directly with an FID, possibly a group.  Empty this array,
                    // exit the loop early, and let it get populated below.
                    initializationPromisesToWaitFor = [];
                    break;
                }
            }
        }
        // This will be unpopulated if there was no 'send_to' field , or
        // if not all entries in the 'send_to' field could be mapped to
        // a FID. In these cases, wait on all pending initialization promises.
        if (initializationPromisesToWaitFor.length === 0) {
            initializationPromisesToWaitFor = Object.values(initializationPromisesMap);
        }
        // Run core gtag function with args after all relevant initialization
        // promises have been resolved.
        await Promise.all(initializationPromisesToWaitFor);
        // Workaround for http://b/141370449 - third argument cannot be undefined.
        gtagCore("event" /* GtagCommand.EVENT */, measurementId, gtagParams || {});
    }
    catch (e) {
        logger.error(e);
    }
}
/**
 * Wraps a standard gtag function with extra code to wait for completion of
 * relevant initialization promises before sending requests.
 *
 * @param gtagCore Basic gtag function that just appends to dataLayer.
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 */
function wrapGtag(gtagCore, 
/**
 * Allows wrapped gtag calls to wait on whichever intialization promises are required,
 * depending on the contents of the gtag params' `send_to` field, if any.
 */
initializationPromisesMap, 
/**
 * Wrapped gtag calls sometimes require all dynamic config fetches to have returned
 * before determining what initialization promises (which include FIDs) to wait for.
 */
dynamicConfigPromisesList, 
/**
 * Wrapped gtag config calls can narrow down which initialization promise (with FID)
 * to wait for if the measurementId is already fetched, by getting the corresponding appId,
 * which is the key for the initialization promises map.
 */
measurementIdToAppId) {
    /**
     * Wrapper around gtag that ensures FID is sent with gtag calls.
     * @param command Gtag command type.
     * @param idOrNameOrParams Measurement ID if command is EVENT/CONFIG, params if command is SET.
     * @param gtagParams Params if event is EVENT/CONFIG.
     */
    async function gtagWrapper(command, ...args) {
        try {
            // If event, check that relevant initialization promises have completed.
            if (command === "event" /* GtagCommand.EVENT */) {
                const [measurementId, gtagParams] = args;
                // If EVENT, second arg must be measurementId.
                await gtagOnEvent(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementId, gtagParams);
            }
            else if (command === "config" /* GtagCommand.CONFIG */) {
                const [measurementId, gtagParams] = args;
                // If CONFIG, second arg must be measurementId.
                await gtagOnConfig(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, measurementId, gtagParams);
            }
            else if (command === "consent" /* GtagCommand.CONSENT */) {
                const [gtagParams] = args;
                gtagCore("consent" /* GtagCommand.CONSENT */, 'update', gtagParams);
            }
            else if (command === "get" /* GtagCommand.GET */) {
                const [measurementId, fieldName, callback] = args;
                gtagCore("get" /* GtagCommand.GET */, measurementId, fieldName, callback);
            }
            else if (command === "set" /* GtagCommand.SET */) {
                const [customParams] = args;
                // If SET, second arg must be params.
                gtagCore("set" /* GtagCommand.SET */, customParams);
            }
            else {
                gtagCore(command, ...args);
            }
        }
        catch (e) {
            logger.error(e);
        }
    }
    return gtagWrapper;
}
/**
 * Creates global gtag function or wraps existing one if found.
 * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and
 * 'event' calls that belong to the GAID associated with this Firebase instance.
 *
 * @param initializationPromisesMap Map of appIds to their initialization promises.
 * @param dynamicConfigPromisesList Array of dynamic config fetch promises.
 * @param measurementIdToAppId Map of GA measurementIDs to corresponding Firebase appId.
 * @param dataLayerName Name of global GA datalayer array.
 * @param gtagFunctionName Name of global gtag function ("gtag" if not user-specified).
 */
function wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagFunctionName) {
    // Create a basic core gtag function
    let gtagCore = function (..._args) {
        // Must push IArguments object, not an array.
        window[dataLayerName].push(arguments);
    };
    // Replace it with existing one if found
    if (window[gtagFunctionName] &&
        typeof window[gtagFunctionName] === 'function') {
        // @ts-ignore
        gtagCore = window[gtagFunctionName];
    }
    window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId);
    return {
        gtagCore,
        wrappedGtag: window[gtagFunctionName]
    };
}
/**
 * Returns the script tag in the DOM matching both the gtag url pattern
 * and the provided data layer name.
 */
function findGtagScriptOnPage(dataLayerName) {
    const scriptTags = window.document.getElementsByTagName('script');
    for (const tag of Object.values(scriptTags)) {
        if (tag.src &&
            tag.src.includes(GTAG_URL) &&
            tag.src.includes(dataLayerName)) {
            return tag;
        }
    }
    return null;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Backoff factor for 503 errors, which we want to be conservative about
 * to avoid overloading servers. Each retry interval will be
 * BASE_INTERVAL_MILLIS * LONG_RETRY_FACTOR ^ retryCount, so the second one
 * will be ~30 seconds (with fuzzing).
 */
const LONG_RETRY_FACTOR = 30;
/**
 * Base wait interval to multiplied by backoffFactor^backoffCount.
 */
const BASE_INTERVAL_MILLIS = 1000;
/**
 * Stubbable retry data storage class.
 */
class RetryData {
    constructor(throttleMetadata = {}, intervalMillis = BASE_INTERVAL_MILLIS) {
        this.throttleMetadata = throttleMetadata;
        this.intervalMillis = intervalMillis;
    }
    getThrottleMetadata(appId) {
        return this.throttleMetadata[appId];
    }
    setThrottleMetadata(appId, metadata) {
        this.throttleMetadata[appId] = metadata;
    }
    deleteThrottleMetadata(appId) {
        delete this.throttleMetadata[appId];
    }
}
const defaultRetryData = new RetryData();
/**
 * Set GET request headers.
 * @param apiKey App API key.
 */
function getHeaders(apiKey) {
    return new Headers({
        Accept: 'application/json',
        'x-goog-api-key': apiKey
    });
}
/**
 * Fetches dynamic config from backend.
 * @param app Firebase app to fetch config for.
 */
async function fetchDynamicConfig(appFields) {
    var _a;
    const { appId, apiKey } = appFields;
    const request = {
        method: 'GET',
        headers: getHeaders(apiKey)
    };
    const appUrl = DYNAMIC_CONFIG_URL.replace('{app-id}', appId);
    const response = await fetch(appUrl, request);
    if (response.status !== 200 && response.status !== 304) {
        let errorMessage = '';
        try {
            // Try to get any error message text from server response.
            const jsonResponse = (await response.json());
            if ((_a = jsonResponse.error) === null || _a === void 0 ? void 0 : _a.message) {
                errorMessage = jsonResponse.error.message;
            }
        }
        catch (_ignored) { }
        throw ERROR_FACTORY.create("config-fetch-failed" /* AnalyticsError.CONFIG_FETCH_FAILED */, {
            httpStatus: response.status,
            responseMessage: errorMessage
        });
    }
    return response.json();
}
/**
 * Fetches dynamic config from backend, retrying if failed.
 * @param app Firebase app to fetch config for.
 */
async function fetchDynamicConfigWithRetry(app, 
// retryData and timeoutMillis are parameterized to allow passing a different value for testing.
retryData = defaultRetryData, timeoutMillis) {
    const { appId, apiKey, measurementId } = app.options;
    if (!appId) {
        throw ERROR_FACTORY.create("no-app-id" /* AnalyticsError.NO_APP_ID */);
    }
    if (!apiKey) {
        if (measurementId) {
            return {
                measurementId,
                appId
            };
        }
        throw ERROR_FACTORY.create("no-api-key" /* AnalyticsError.NO_API_KEY */);
    }
    const throttleMetadata = retryData.getThrottleMetadata(appId) || {
        backoffCount: 0,
        throttleEndTimeMillis: Date.now()
    };
    const signal = new AnalyticsAbortSignal();
    setTimeout(async () => {
        // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.
        signal.abort();
    }, timeoutMillis !== undefined ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
    return attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData);
}
/**
 * Runs one retry attempt.
 * @param appFields Necessary app config fields.
 * @param throttleMetadata Ongoing metadata to determine throttling times.
 * @param signal Abort signal.
 */
async function attemptFetchDynamicConfigWithRetry(appFields, { throttleEndTimeMillis, backoffCount }, signal, retryData = defaultRetryData // for testing
) {
    var _a;
    const { appId, measurementId } = appFields;
    // Starts with a (potentially zero) timeout to support resumption from stored state.
    // Ensures the throttle end time is honored if the last attempt timed out.
    // Note the SDK will never make a request if the fetch timeout expires at this point.
    try {
        await setAbortableTimeout(signal, throttleEndTimeMillis);
    }
    catch (e) {
        if (measurementId) {
            logger.warn(`Timed out fetching this Firebase app's measurement ID from the server.` +
                ` Falling back to the measurement ID ${measurementId}` +
                ` provided in the "measurementId" field in the local Firebase config. [${e === null || e === void 0 ? void 0 : e.message}]`);
            return { appId, measurementId };
        }
        throw e;
    }
    try {
        const response = await fetchDynamicConfig(appFields);
        // Note the SDK only clears throttle state if response is success or non-retriable.
        retryData.deleteThrottleMetadata(appId);
        return response;
    }
    catch (e) {
        const error = e;
        if (!isRetriableError(error)) {
            retryData.deleteThrottleMetadata(appId);
            if (measurementId) {
                logger.warn(`Failed to fetch this Firebase app's measurement ID from the server.` +
                    ` Falling back to the measurement ID ${measurementId}` +
                    ` provided in the "measurementId" field in the local Firebase config. [${error === null || error === void 0 ? void 0 : error.message}]`);
                return { appId, measurementId };
            }
            else {
                throw e;
            }
        }
        const backoffMillis = Number((_a = error === null || error === void 0 ? void 0 : error.customData) === null || _a === void 0 ? void 0 : _a.httpStatus) === 503
            ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.calculateBackoffMillis)(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR)
            : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.calculateBackoffMillis)(backoffCount, retryData.intervalMillis);
        // Increments backoff state.
        const throttleMetadata = {
            throttleEndTimeMillis: Date.now() + backoffMillis,
            backoffCount: backoffCount + 1
        };
        // Persists state.
        retryData.setThrottleMetadata(appId, throttleMetadata);
        logger.debug(`Calling attemptFetch again in ${backoffMillis} millis`);
        return attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData);
    }
}
/**
 * Supports waiting on a backoff by:
 *
 * <ul>
 *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>
 *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>
 *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled
 *       request appear the same.</li>
 * </ul>
 *
 * <p>Visible for testing.
 */
function setAbortableTimeout(signal, throttleEndTimeMillis) {
    return new Promise((resolve, reject) => {
        // Derives backoff from given end time, normalizing negative numbers to zero.
        const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
        const timeout = setTimeout(resolve, backoffMillis);
        // Adds listener, rather than sets onabort, because signal is a shared object.
        signal.addEventListener(() => {
            clearTimeout(timeout);
            // If the request completes before this timeout, the rejection has no effect.
            reject(ERROR_FACTORY.create("fetch-throttle" /* AnalyticsError.FETCH_THROTTLE */, {
                throttleEndTimeMillis
            }));
        });
    });
}
/**
 * Returns true if the {@link Error} indicates a fetch request may succeed later.
 */
function isRetriableError(e) {
    if (!(e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError) || !e.customData) {
        return false;
    }
    // Uses string index defined by ErrorData, which FirebaseError implements.
    const httpStatus = Number(e.customData['httpStatus']);
    return (httpStatus === 429 ||
        httpStatus === 500 ||
        httpStatus === 503 ||
        httpStatus === 504);
}
/**
 * Shims a minimal AbortSignal (copied from Remote Config).
 *
 * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects
 * of networking, such as retries. Firebase doesn't use AbortController enough to justify a
 * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be
 * swapped out if/when we do.
 */
class AnalyticsAbortSignal {
    constructor() {
        this.listeners = [];
    }
    addEventListener(listener) {
        this.listeners.push(listener);
    }
    abort() {
        this.listeners.forEach(listener => listener());
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Event parameters to set on 'gtag' during initialization.
 */
let defaultEventParametersForInit;
/**
 * Logs an analytics event through the Firebase SDK.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param eventName Google Analytics event name, choose from standard list or use a custom string.
 * @param eventParams Analytics event parameters.
 */
async function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options) {
    if (options && options.global) {
        gtagFunction("event" /* GtagCommand.EVENT */, eventName, eventParams);
        return;
    }
    else {
        const measurementId = await initializationPromise;
        const params = Object.assign(Object.assign({}, eventParams), { 'send_to': measurementId });
        gtagFunction("event" /* GtagCommand.EVENT */, eventName, params);
    }
}
/**
 * Set screen_name parameter for this Google Analytics ID.
 *
 * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.
 * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param screenName Screen name string to set.
 */
async function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options) {
    if (options && options.global) {
        gtagFunction("set" /* GtagCommand.SET */, { 'screen_name': screenName });
        return Promise.resolve();
    }
    else {
        const measurementId = await initializationPromise;
        gtagFunction("config" /* GtagCommand.CONFIG */, measurementId, {
            update: true,
            'screen_name': screenName
        });
    }
}
/**
 * Set user_id parameter for this Google Analytics ID.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param id User ID string to set
 */
async function setUserId$1(gtagFunction, initializationPromise, id, options) {
    if (options && options.global) {
        gtagFunction("set" /* GtagCommand.SET */, { 'user_id': id });
        return Promise.resolve();
    }
    else {
        const measurementId = await initializationPromise;
        gtagFunction("config" /* GtagCommand.CONFIG */, measurementId, {
            update: true,
            'user_id': id
        });
    }
}
/**
 * Set all other user properties other than user_id and screen_name.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 * @param properties Map of user properties to set
 */
async function setUserProperties$1(gtagFunction, initializationPromise, properties, options) {
    if (options && options.global) {
        const flatProperties = {};
        for (const key of Object.keys(properties)) {
            // use dot notation for merge behavior in gtag.js
            flatProperties[`user_properties.${key}`] = properties[key];
        }
        gtagFunction("set" /* GtagCommand.SET */, flatProperties);
        return Promise.resolve();
    }
    else {
        const measurementId = await initializationPromise;
        gtagFunction("config" /* GtagCommand.CONFIG */, measurementId, {
            update: true,
            'user_properties': properties
        });
    }
}
/**
 * Retrieves a unique Google Analytics identifier for the web client.
 * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.
 *
 * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event
 */
async function internalGetGoogleAnalyticsClientId(gtagFunction, initializationPromise) {
    const measurementId = await initializationPromise;
    return new Promise((resolve, reject) => {
        gtagFunction("get" /* GtagCommand.GET */, measurementId, 'client_id', (clientId) => {
            if (!clientId) {
                reject(ERROR_FACTORY.create("no-client-id" /* AnalyticsError.NO_CLIENT_ID */));
            }
            resolve(clientId);
        });
    });
}
/**
 * Set whether collection is enabled for this ID.
 *
 * @param enabled If true, collection is enabled for this ID.
 */
async function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {
    const measurementId = await initializationPromise;
    window[`ga-disable-${measurementId}`] = !enabled;
}
/**
 * Consent parameters to default to during 'gtag' initialization.
 */
let defaultConsentSettingsForInit;
/**
 * Sets the variable {@link defaultConsentSettingsForInit} for use in the initialization of
 * analytics.
 *
 * @param consentSettings Maps the applicable end user consent state for gtag.js.
 */
function _setConsentDefaultForInit(consentSettings) {
    defaultConsentSettingsForInit = consentSettings;
}
/**
 * Sets the variable `defaultEventParametersForInit` for use in the initialization of
 * analytics.
 *
 * @param customParams Any custom params the user may pass to gtag.js.
 */
function _setDefaultEventParametersForInit(customParams) {
    defaultEventParametersForInit = customParams;
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function validateIndexedDB() {
    if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()) {
        logger.warn(ERROR_FACTORY.create("indexeddb-unavailable" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {
            errorInfo: 'IndexedDB is not available in this environment.'
        }).message);
        return false;
    }
    else {
        try {
            await (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)();
        }
        catch (e) {
            logger.warn(ERROR_FACTORY.create("indexeddb-unavailable" /* AnalyticsError.INDEXEDDB_UNAVAILABLE */, {
                errorInfo: e === null || e === void 0 ? void 0 : e.toString()
            }).message);
            return false;
        }
    }
    return true;
}
/**
 * Initialize the analytics instance in gtag.js by calling config command with fid.
 *
 * NOTE: We combine analytics initialization and setting fid together because we want fid to be
 * part of the `page_view` event that's sent during the initialization
 * @param app Firebase app
 * @param gtagCore The gtag function that's not wrapped.
 * @param dynamicConfigPromisesList Array of all dynamic config promises.
 * @param measurementIdToAppId Maps measurementID to appID.
 * @param installations _FirebaseInstallationsInternal instance.
 *
 * @returns Measurement ID.
 */
async function _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCore, dataLayerName, options) {
    var _a;
    const dynamicConfigPromise = fetchDynamicConfigWithRetry(app);
    // Once fetched, map measurementIds to appId, for ease of lookup in wrapped gtag function.
    dynamicConfigPromise
        .then(config => {
        measurementIdToAppId[config.measurementId] = config.appId;
        if (app.options.measurementId &&
            config.measurementId !== app.options.measurementId) {
            logger.warn(`The measurement ID in the local Firebase config (${app.options.measurementId})` +
                ` does not match the measurement ID fetched from the server (${config.measurementId}).` +
                ` To ensure analytics events are always sent to the correct Analytics property,` +
                ` update the` +
                ` measurement ID field in the local config or remove it from the local config.`);
        }
    })
        .catch(e => logger.error(e));
    // Add to list to track state of all dynamic config promises.
    dynamicConfigPromisesList.push(dynamicConfigPromise);
    const fidPromise = validateIndexedDB().then(envIsValid => {
        if (envIsValid) {
            return installations.getId();
        }
        else {
            return undefined;
        }
    });
    const [dynamicConfig, fid] = await Promise.all([
        dynamicConfigPromise,
        fidPromise
    ]);
    // Detect if user has already put the gtag <script> tag on this page with the passed in
    // data layer name.
    if (!findGtagScriptOnPage(dataLayerName)) {
        insertScriptTag(dataLayerName, dynamicConfig.measurementId);
    }
    // Detects if there are consent settings that need to be configured.
    if (defaultConsentSettingsForInit) {
        gtagCore("consent" /* GtagCommand.CONSENT */, 'default', defaultConsentSettingsForInit);
        _setConsentDefaultForInit(undefined);
    }
    // This command initializes gtag.js and only needs to be called once for the entire web app,
    // but since it is idempotent, we can call it multiple times.
    // We keep it together with other initialization logic for better code structure.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    gtagCore('js', new Date());
    // User config added first. We don't want users to accidentally overwrite
    // base Firebase config properties.
    const configProperties = (_a = options === null || options === void 0 ? void 0 : options.config) !== null && _a !== void 0 ? _a : {};
    // guard against developers accidentally setting properties with prefix `firebase_`
    configProperties[ORIGIN_KEY] = 'firebase';
    configProperties.update = true;
    if (fid != null) {
        configProperties[GA_FID_KEY] = fid;
    }
    // It should be the first config command called on this GA-ID
    // Initialize this GA-ID and set FID on it using the gtag config API.
    // Note: This will trigger a page_view event unless 'send_page_view' is set to false in
    // `configProperties`.
    gtagCore("config" /* GtagCommand.CONFIG */, dynamicConfig.measurementId, configProperties);
    // Detects if there is data that will be set on every event logged from the SDK.
    if (defaultEventParametersForInit) {
        gtagCore("set" /* GtagCommand.SET */, defaultEventParametersForInit);
        _setDefaultEventParametersForInit(undefined);
    }
    return dynamicConfig.measurementId;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Analytics Service class.
 */
class AnalyticsService {
    constructor(app) {
        this.app = app;
    }
    _delete() {
        delete initializationPromisesMap[this.app.options.appId];
        return Promise.resolve();
    }
}
/**
 * Maps appId to full initialization promise. Wrapped gtag calls must wait on
 * all or some of these, depending on the call's `send_to` param and the status
 * of the dynamic config fetches (see below).
 */
let initializationPromisesMap = {};
/**
 * List of dynamic config fetch promises. In certain cases, wrapped gtag calls
 * wait on all these to be complete in order to determine if it can selectively
 * wait for only certain initialization (FID) promises or if it must wait for all.
 */
let dynamicConfigPromisesList = [];
/**
 * Maps fetched measurementIds to appId. Populated when the app's dynamic config
 * fetch completes. If already populated, gtag config calls can use this to
 * selectively wait for only this app's initialization promise (FID) instead of all
 * initialization promises.
 */
const measurementIdToAppId = {};
/**
 * Name for window global data layer array used by GA: defaults to 'dataLayer'.
 */
let dataLayerName = 'dataLayer';
/**
 * Name for window global gtag function used by GA: defaults to 'gtag'.
 */
let gtagName = 'gtag';
/**
 * Reproduction of standard gtag function or reference to existing
 * gtag function on window object.
 */
let gtagCoreFunction;
/**
 * Wrapper around gtag function that ensures FID is sent with all
 * relevant event and config calls.
 */
let wrappedGtagFunction;
/**
 * Flag to ensure page initialization steps (creation or wrapping of
 * dataLayer and gtag script) are only run once per page load.
 */
let globalInitDone = false;
/**
 * Configures Firebase Analytics to use custom `gtag` or `dataLayer` names.
 * Intended to be used if `gtag.js` script has been installed on
 * this page independently of Firebase Analytics, and is using non-default
 * names for either the `gtag` function or for `dataLayer`.
 * Must be called before calling `getAnalytics()` or it won't
 * have any effect.
 *
 * @public
 *
 * @param options - Custom gtag and dataLayer names.
 */
function settings(options) {
    if (globalInitDone) {
        throw ERROR_FACTORY.create("already-initialized" /* AnalyticsError.ALREADY_INITIALIZED */);
    }
    if (options.dataLayerName) {
        dataLayerName = options.dataLayerName;
    }
    if (options.gtagName) {
        gtagName = options.gtagName;
    }
}
/**
 * Returns true if no environment mismatch is found.
 * If environment mismatches are found, throws an INVALID_ANALYTICS_CONTEXT
 * error that also lists details for each mismatch found.
 */
function warnOnBrowserContextMismatch() {
    const mismatchedEnvMessages = [];
    if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isBrowserExtension)()) {
        mismatchedEnvMessages.push('This is a browser extension environment.');
    }
    if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.areCookiesEnabled)()) {
        mismatchedEnvMessages.push('Cookies are not available.');
    }
    if (mismatchedEnvMessages.length > 0) {
        const details = mismatchedEnvMessages
            .map((message, index) => `(${index + 1}) ${message}`)
            .join(' ');
        const err = ERROR_FACTORY.create("invalid-analytics-context" /* AnalyticsError.INVALID_ANALYTICS_CONTEXT */, {
            errorInfo: details
        });
        logger.warn(err.message);
    }
}
/**
 * Analytics instance factory.
 * @internal
 */
function factory(app, installations, options) {
    warnOnBrowserContextMismatch();
    const appId = app.options.appId;
    if (!appId) {
        throw ERROR_FACTORY.create("no-app-id" /* AnalyticsError.NO_APP_ID */);
    }
    if (!app.options.apiKey) {
        if (app.options.measurementId) {
            logger.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest` +
                ` measurement ID for this Firebase app. Falling back to the measurement ID ${app.options.measurementId}` +
                ` provided in the "measurementId" field in the local Firebase config.`);
        }
        else {
            throw ERROR_FACTORY.create("no-api-key" /* AnalyticsError.NO_API_KEY */);
        }
    }
    if (initializationPromisesMap[appId] != null) {
        throw ERROR_FACTORY.create("already-exists" /* AnalyticsError.ALREADY_EXISTS */, {
            id: appId
        });
    }
    if (!globalInitDone) {
        // Steps here should only be done once per page: creation or wrapping
        // of dataLayer and global gtag function.
        getOrCreateDataLayer(dataLayerName);
        const { wrappedGtag, gtagCore } = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName);
        wrappedGtagFunction = wrappedGtag;
        gtagCoreFunction = gtagCore;
        globalInitDone = true;
    }
    // Async but non-blocking.
    // This map reflects the completion state of all promises for each appId.
    initializationPromisesMap[appId] = _initializeAnalytics(app, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options);
    const analyticsInstance = new AnalyticsService(app);
    return analyticsInstance;
}

/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
function getAnalytics(app = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)()) {
    app = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(app);
    // Dependencies
    const analyticsProvider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, ANALYTICS_TYPE);
    if (analyticsProvider.isInitialized()) {
        return analyticsProvider.getImmediate();
    }
    return initializeAnalytics(app);
}
/**
 * Returns an {@link Analytics} instance for the given app.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
function initializeAnalytics(app, options = {}) {
    // Dependencies
    const analyticsProvider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, ANALYTICS_TYPE);
    if (analyticsProvider.isInitialized()) {
        const existingInstance = analyticsProvider.getImmediate();
        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(options, analyticsProvider.getOptions())) {
            return existingInstance;
        }
        else {
            throw ERROR_FACTORY.create("already-initialized" /* AnalyticsError.ALREADY_INITIALIZED */);
        }
    }
    const analyticsInstance = analyticsProvider.initialize({ options });
    return analyticsInstance;
}
/**
 * This is a public static method provided to users that wraps four different checks:
 *
 * 1. Check if it's not a browser extension environment.
 * 2. Check if cookies are enabled in current browser.
 * 3. Check if IndexedDB is supported by the browser environment.
 * 4. Check if the current browser context is valid for using `IndexedDB.open()`.
 *
 * @public
 *
 */
async function isSupported() {
    if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isBrowserExtension)()) {
        return false;
    }
    if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.areCookiesEnabled)()) {
        return false;
    }
    if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()) {
        return false;
    }
    try {
        const isDBOpenable = await (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)();
        return isDBOpenable;
    }
    catch (error) {
        return false;
    }
}
/**
 * Use gtag `config` command to set `screen_name`.
 *
 * @public
 *
 * @deprecated Use {@link logEvent} with `eventName` as 'screen_view' and add relevant `eventParams`.
 * See {@link https://firebase.google.com/docs/analytics/screenviews | Track Screenviews}.
 *
 * @param analyticsInstance - The {@link Analytics} instance.
 * @param screenName - Screen name to set.
 */
function setCurrentScreen(analyticsInstance, screenName, options) {
    analyticsInstance = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(analyticsInstance);
    setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options).catch(e => logger.error(e));
}
/**
 * Retrieves a unique Google Analytics identifier for the web client.
 * See {@link https://developers.google.com/analytics/devguides/collection/ga4/reference/config#client_id | client_id}.
 *
 * @public
 *
 * @param app - The {@link @firebase/app#FirebaseApp} to use.
 */
async function getGoogleAnalyticsClientId(analyticsInstance) {
    analyticsInstance = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(analyticsInstance);
    return internalGetGoogleAnalyticsClientId(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId]);
}
/**
 * Use gtag `config` command to set `user_id`.
 *
 * @public
 *
 * @param analyticsInstance - The {@link Analytics} instance.
 * @param id - User ID to set.
 */
function setUserId(analyticsInstance, id, options) {
    analyticsInstance = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(analyticsInstance);
    setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options).catch(e => logger.error(e));
}
/**
 * Use gtag `config` command to set all params specified.
 *
 * @public
 */
function setUserProperties(analyticsInstance, properties, options) {
    analyticsInstance = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(analyticsInstance);
    setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options).catch(e => logger.error(e));
}
/**
 * Sets whether Google Analytics collection is enabled for this app on this device.
 * Sets global `window['ga-disable-analyticsId'] = true;`
 *
 * @public
 *
 * @param analyticsInstance - The {@link Analytics} instance.
 * @param enabled - If true, enables collection, if false, disables it.
 */
function setAnalyticsCollectionEnabled(analyticsInstance, enabled) {
    analyticsInstance = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(analyticsInstance);
    setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(e => logger.error(e));
}
/**
 * Adds data that will be set on every event logged from the SDK, including automatic ones.
 * With gtag's "set" command, the values passed persist on the current page and are passed with
 * all subsequent events.
 * @public
 * @param customParams - Any custom params the user may pass to gtag.js.
 */
function setDefaultEventParameters(customParams) {
    // Check if reference to existing gtag function on window object exists
    if (wrappedGtagFunction) {
        wrappedGtagFunction("set" /* GtagCommand.SET */, customParams);
    }
    else {
        _setDefaultEventParametersForInit(customParams);
    }
}
/**
 * Sends a Google Analytics event with given `eventParams`. This method
 * automatically associates this logged event with this Firebase web
 * app instance on this device.
 * List of official event parameters can be found in the gtag.js
 * reference documentation:
 * {@link https://developers.google.com/gtagjs/reference/ga4-events
 * | the GA4 reference documentation}.
 *
 * @public
 */
function logEvent(analyticsInstance, eventName, eventParams, options) {
    analyticsInstance = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getModularInstance)(analyticsInstance);
    logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options).catch(e => logger.error(e));
}
/**
 * Sets the applicable end user consent state for this web app across all gtag references once
 * Firebase Analytics is initialized.
 *
 * Use the {@link ConsentSettings} to specify individual consent type values. By default consent
 * types are set to "granted".
 * @public
 * @param consentSettings - Maps the applicable end user consent state for gtag.js.
 */
function setConsent(consentSettings) {
    // Check if reference to existing gtag function on window object exists
    if (wrappedGtagFunction) {
        wrappedGtagFunction("consent" /* GtagCommand.CONSENT */, 'update', consentSettings);
    }
    else {
        _setConsentDefaultForInit(consentSettings);
    }
}

const name = "@firebase/analytics";
const version = "0.10.0";

/**
 * Firebase Analytics
 *
 * @packageDocumentation
 */
function registerAnalytics() {
    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_3__.Component(ANALYTICS_TYPE, (container, { options: analyticsOptions }) => {
        // getImmediate for FirebaseApp will always succeed
        const app = container.getProvider('app').getImmediate();
        const installations = container
            .getProvider('installations-internal')
            .getImmediate();
        return factory(app, installations, analyticsOptions);
    }, "PUBLIC" /* ComponentType.PUBLIC */));
    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_3__.Component('analytics-internal', internalFactory, "PRIVATE" /* ComponentType.PRIVATE */));
    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version);
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'esm2017');
    function internalFactory(container) {
        try {
            const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();
            return {
                logEvent: (eventName, eventParams, options) => logEvent(analytics, eventName, eventParams, options)
            };
        }
        catch (e) {
            throw ERROR_FACTORY.create("interop-component-reg-failed" /* AnalyticsError.INTEROP_COMPONENT_REG_FAILED */, {
                reason: e
            });
        }
    }
}
registerAnalytics();


//# sourceMappingURL=index.esm2017.js.map


/***/ }),

/***/ "./node_modules/@firebase/app/dist/esm/index.esm2017.js":
/*!**************************************************************!*\
  !*** ./node_modules/@firebase/app/dist/esm/index.esm2017.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FirebaseError: () => (/* reexport safe */ _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError),
/* harmony export */   SDK_VERSION: () => (/* binding */ SDK_VERSION),
/* harmony export */   _DEFAULT_ENTRY_NAME: () => (/* binding */ DEFAULT_ENTRY_NAME),
/* harmony export */   _addComponent: () => (/* binding */ _addComponent),
/* harmony export */   _addOrOverwriteComponent: () => (/* binding */ _addOrOverwriteComponent),
/* harmony export */   _apps: () => (/* binding */ _apps),
/* harmony export */   _clearComponents: () => (/* binding */ _clearComponents),
/* harmony export */   _components: () => (/* binding */ _components),
/* harmony export */   _getProvider: () => (/* binding */ _getProvider),
/* harmony export */   _registerComponent: () => (/* binding */ _registerComponent),
/* harmony export */   _removeServiceInstance: () => (/* binding */ _removeServiceInstance),
/* harmony export */   deleteApp: () => (/* binding */ deleteApp),
/* harmony export */   getApp: () => (/* binding */ getApp),
/* harmony export */   getApps: () => (/* binding */ getApps),
/* harmony export */   initializeApp: () => (/* binding */ initializeApp),
/* harmony export */   onLog: () => (/* binding */ onLog),
/* harmony export */   registerVersion: () => (/* binding */ registerVersion),
/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)
/* harmony export */ });
/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/logger */ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js");
/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! idb */ "./node_modules/idb/build/index.js");






/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class PlatformLoggerServiceImpl {
    constructor(container) {
        this.container = container;
    }
    // In initial implementation, this will be called by installations on
    // auth token refresh, and installations will send this string.
    getPlatformInfoString() {
        const providers = this.container.getProviders();
        // Loop through providers and get library/version pairs from any that are
        // version components.
        return providers
            .map(provider => {
            if (isVersionServiceProvider(provider)) {
                const service = provider.getImmediate();
                return `${service.library}/${service.version}`;
            }
            else {
                return null;
            }
        })
            .filter(logString => logString)
            .join(' ');
    }
}
/**
 *
 * @param provider check if this provider provides a VersionService
 *
 * NOTE: Using Provider<'app-version'> is a hack to indicate that the provider
 * provides VersionService. The provider is not necessarily a 'app-version'
 * provider.
 */
function isVersionServiceProvider(provider) {
    const component = provider.getComponent();
    return (component === null || component === void 0 ? void 0 : component.type) === "VERSION" /* ComponentType.VERSION */;
}

const name$o = "@firebase/app";
const version$1 = "0.9.15";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const logger = new _firebase_logger__WEBPACK_IMPORTED_MODULE_1__.Logger('@firebase/app');

const name$n = "@firebase/app-compat";

const name$m = "@firebase/analytics-compat";

const name$l = "@firebase/analytics";

const name$k = "@firebase/app-check-compat";

const name$j = "@firebase/app-check";

const name$i = "@firebase/auth";

const name$h = "@firebase/auth-compat";

const name$g = "@firebase/database";

const name$f = "@firebase/database-compat";

const name$e = "@firebase/functions";

const name$d = "@firebase/functions-compat";

const name$c = "@firebase/installations";

const name$b = "@firebase/installations-compat";

const name$a = "@firebase/messaging";

const name$9 = "@firebase/messaging-compat";

const name$8 = "@firebase/performance";

const name$7 = "@firebase/performance-compat";

const name$6 = "@firebase/remote-config";

const name$5 = "@firebase/remote-config-compat";

const name$4 = "@firebase/storage";

const name$3 = "@firebase/storage-compat";

const name$2 = "@firebase/firestore";

const name$1 = "@firebase/firestore-compat";

const name = "firebase";
const version = "10.1.0";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The default app name
 *
 * @internal
 */
const DEFAULT_ENTRY_NAME = '[DEFAULT]';
const PLATFORM_LOG_STRING = {
    [name$o]: 'fire-core',
    [name$n]: 'fire-core-compat',
    [name$l]: 'fire-analytics',
    [name$m]: 'fire-analytics-compat',
    [name$j]: 'fire-app-check',
    [name$k]: 'fire-app-check-compat',
    [name$i]: 'fire-auth',
    [name$h]: 'fire-auth-compat',
    [name$g]: 'fire-rtdb',
    [name$f]: 'fire-rtdb-compat',
    [name$e]: 'fire-fn',
    [name$d]: 'fire-fn-compat',
    [name$c]: 'fire-iid',
    [name$b]: 'fire-iid-compat',
    [name$a]: 'fire-fcm',
    [name$9]: 'fire-fcm-compat',
    [name$8]: 'fire-perf',
    [name$7]: 'fire-perf-compat',
    [name$6]: 'fire-rc',
    [name$5]: 'fire-rc-compat',
    [name$4]: 'fire-gcs',
    [name$3]: 'fire-gcs-compat',
    [name$2]: 'fire-fst',
    [name$1]: 'fire-fst-compat',
    'fire-js': 'fire-js',
    [name]: 'fire-js-all'
};

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @internal
 */
const _apps = new Map();
/**
 * Registered components.
 *
 * @internal
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const _components = new Map();
/**
 * @param component - the component being added to this app's container
 *
 * @internal
 */
function _addComponent(app, component) {
    try {
        app.container.addComponent(component);
    }
    catch (e) {
        logger.debug(`Component ${component.name} failed to register with FirebaseApp ${app.name}`, e);
    }
}
/**
 *
 * @internal
 */
function _addOrOverwriteComponent(app, component) {
    app.container.addOrOverwriteComponent(component);
}
/**
 *
 * @param component - the component to register
 * @returns whether or not the component is registered successfully
 *
 * @internal
 */
function _registerComponent(component) {
    const componentName = component.name;
    if (_components.has(componentName)) {
        logger.debug(`There were multiple attempts to register component ${componentName}.`);
        return false;
    }
    _components.set(componentName, component);
    // add the component to existing app instances
    for (const app of _apps.values()) {
        _addComponent(app, component);
    }
    return true;
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 *
 * @returns the provider for the service with the matching name
 *
 * @internal
 */
function _getProvider(app, name) {
    const heartbeatController = app.container
        .getProvider('heartbeat')
        .getImmediate({ optional: true });
    if (heartbeatController) {
        void heartbeatController.triggerHeartbeat();
    }
    return app.container.getProvider(name);
}
/**
 *
 * @param app - FirebaseApp instance
 * @param name - service name
 * @param instanceIdentifier - service instance identifier in case the service supports multiple instances
 *
 * @internal
 */
function _removeServiceInstance(app, name, instanceIdentifier = DEFAULT_ENTRY_NAME) {
    _getProvider(app, name).clearInstance(instanceIdentifier);
}
/**
 * Test only
 *
 * @internal
 */
function _clearComponents() {
    _components.clear();
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERRORS = {
    ["no-app" /* AppError.NO_APP */]: "No Firebase App '{$appName}' has been created - " +
        'call initializeApp() first',
    ["bad-app-name" /* AppError.BAD_APP_NAME */]: "Illegal App name: '{$appName}",
    ["duplicate-app" /* AppError.DUPLICATE_APP */]: "Firebase App named '{$appName}' already exists with different options or config",
    ["app-deleted" /* AppError.APP_DELETED */]: "Firebase App named '{$appName}' already deleted",
    ["no-options" /* AppError.NO_OPTIONS */]: 'Need to provide options, when not being deployed to hosting via source.',
    ["invalid-app-argument" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' +
        'Firebase App instance.',
    ["invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */]: 'First argument to `onLog` must be null or a function.',
    ["idb-open" /* AppError.IDB_OPEN */]: 'Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-get" /* AppError.IDB_GET */]: 'Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-set" /* AppError.IDB_WRITE */]: 'Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.',
    ["idb-delete" /* AppError.IDB_DELETE */]: 'Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}.'
};
const ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory('app', 'Firebase', ERRORS);

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class FirebaseAppImpl {
    constructor(options, config, container) {
        this._isDeleted = false;
        this._options = Object.assign({}, options);
        this._config = Object.assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled =
            config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('app', () => this, "PUBLIC" /* ComponentType.PUBLIC */));
    }
    get automaticDataCollectionEnabled() {
        this.checkDestroyed();
        return this._automaticDataCollectionEnabled;
    }
    set automaticDataCollectionEnabled(val) {
        this.checkDestroyed();
        this._automaticDataCollectionEnabled = val;
    }
    get name() {
        this.checkDestroyed();
        return this._name;
    }
    get options() {
        this.checkDestroyed();
        return this._options;
    }
    get config() {
        this.checkDestroyed();
        return this._config;
    }
    get container() {
        return this._container;
    }
    get isDeleted() {
        return this._isDeleted;
    }
    set isDeleted(val) {
        this._isDeleted = val;
    }
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    checkDestroyed() {
        if (this.isDeleted) {
            throw ERROR_FACTORY.create("app-deleted" /* AppError.APP_DELETED */, { appName: this._name });
        }
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * The current SDK version.
 *
 * @public
 */
const SDK_VERSION = version;
function initializeApp(_options, rawConfig = {}) {
    let options = _options;
    if (typeof rawConfig !== 'object') {
        const name = rawConfig;
        rawConfig = { name };
    }
    const config = Object.assign({ name: DEFAULT_ENTRY_NAME, automaticDataCollectionEnabled: false }, rawConfig);
    const name = config.name;
    if (typeof name !== 'string' || !name) {
        throw ERROR_FACTORY.create("bad-app-name" /* AppError.BAD_APP_NAME */, {
            appName: String(name)
        });
    }
    options || (options = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultAppConfig)());
    if (!options) {
        throw ERROR_FACTORY.create("no-options" /* AppError.NO_OPTIONS */);
    }
    const existingApp = _apps.get(name);
    if (existingApp) {
        // return the existing app if options and config deep equal the ones in the existing app.
        if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(options, existingApp.options) &&
            (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.deepEqual)(config, existingApp.config)) {
            return existingApp;
        }
        else {
            throw ERROR_FACTORY.create("duplicate-app" /* AppError.DUPLICATE_APP */, { appName: name });
        }
    }
    const container = new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.ComponentContainer(name);
    for (const component of _components.values()) {
        container.addComponent(component);
    }
    const newApp = new FirebaseAppImpl(options, config, container);
    _apps.set(name, newApp);
    return newApp;
}
/**
 * Retrieves a {@link @firebase/app#FirebaseApp} instance.
 *
 * When called with no arguments, the default app is returned. When an app name
 * is provided, the app corresponding to that name is returned.
 *
 * An exception is thrown if the app being retrieved has not yet been
 * initialized.
 *
 * @example
 * ```javascript
 * // Return the default app
 * const app = getApp();
 * ```
 *
 * @example
 * ```javascript
 * // Return a named app
 * const otherApp = getApp("otherApp");
 * ```
 *
 * @param name - Optional name of the app to return. If no name is
 *   provided, the default is `"[DEFAULT]"`.
 *
 * @returns The app corresponding to the provided app name.
 *   If no app name is provided, the default app is returned.
 *
 * @public
 */
function getApp(name = DEFAULT_ENTRY_NAME) {
    const app = _apps.get(name);
    if (!app && name === DEFAULT_ENTRY_NAME && (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.getDefaultAppConfig)()) {
        return initializeApp();
    }
    if (!app) {
        throw ERROR_FACTORY.create("no-app" /* AppError.NO_APP */, { appName: name });
    }
    return app;
}
/**
 * A (read-only) array of all initialized apps.
 * @public
 */
function getApps() {
    return Array.from(_apps.values());
}
/**
 * Renders this app unusable and frees the resources of all associated
 * services.
 *
 * @example
 * ```javascript
 * deleteApp(app)
 *   .then(function() {
 *     console.log("App deleted successfully");
 *   })
 *   .catch(function(error) {
 *     console.log("Error deleting app:", error);
 *   });
 * ```
 *
 * @public
 */
async function deleteApp(app) {
    const name = app.name;
    if (_apps.has(name)) {
        _apps.delete(name);
        await Promise.all(app.container
            .getProviders()
            .map(provider => provider.delete()));
        app.isDeleted = true;
    }
}
/**
 * Registers a library's name and version for platform logging purposes.
 * @param library - Name of 1p or 3p library (e.g. firestore, angularfire)
 * @param version - Current version of that library.
 * @param variant - Bundle variant, e.g., node, rn, etc.
 *
 * @public
 */
function registerVersion(libraryKeyOrName, version, variant) {
    var _a;
    // TODO: We can use this check to whitelist strings when/if we set up
    // a good whitelist system.
    let library = (_a = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a !== void 0 ? _a : libraryKeyOrName;
    if (variant) {
        library += `-${variant}`;
    }
    const libraryMismatch = library.match(/\s|\//);
    const versionMismatch = version.match(/\s|\//);
    if (libraryMismatch || versionMismatch) {
        const warning = [
            `Unable to register library "${library}" with version "${version}":`
        ];
        if (libraryMismatch) {
            warning.push(`library name "${library}" contains illegal characters (whitespace or "/")`);
        }
        if (libraryMismatch && versionMismatch) {
            warning.push('and');
        }
        if (versionMismatch) {
            warning.push(`version name "${version}" contains illegal characters (whitespace or "/")`);
        }
        logger.warn(warning.join(' '));
        return;
    }
    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component(`${library}-version`, () => ({ library, version }), "VERSION" /* ComponentType.VERSION */));
}
/**
 * Sets log handler for all Firebase SDKs.
 * @param logCallback - An optional custom log handler that executes user code whenever
 * the Firebase SDK makes a logging call.
 *
 * @public
 */
function onLog(logCallback, options) {
    if (logCallback !== null && typeof logCallback !== 'function') {
        throw ERROR_FACTORY.create("invalid-log-argument" /* AppError.INVALID_LOG_ARGUMENT */);
    }
    (0,_firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setUserLogHandler)(logCallback, options);
}
/**
 * Sets log level for all Firebase SDKs.
 *
 * All of the log types above the current log level are captured (i.e. if
 * you set the log level to `info`, errors are logged, but `debug` and
 * `verbose` logs are not).
 *
 * @public
 */
function setLogLevel(logLevel) {
    (0,_firebase_logger__WEBPACK_IMPORTED_MODULE_1__.setLogLevel)(logLevel);
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DB_NAME = 'firebase-heartbeat-database';
const DB_VERSION = 1;
const STORE_NAME = 'firebase-heartbeat-store';
let dbPromise = null;
function getDbPromise() {
    if (!dbPromise) {
        dbPromise = (0,idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(DB_NAME, DB_VERSION, {
            upgrade: (db, oldVersion) => {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (oldVersion) {
                    case 0:
                        db.createObjectStore(STORE_NAME);
                }
            }
        }).catch(e => {
            throw ERROR_FACTORY.create("idb-open" /* AppError.IDB_OPEN */, {
                originalErrorMessage: e.message
            });
        });
    }
    return dbPromise;
}
async function readHeartbeatsFromIndexedDB(app) {
    try {
        const db = await getDbPromise();
        const result = await db
            .transaction(STORE_NAME)
            .objectStore(STORE_NAME)
            .get(computeKey(app));
        return result;
    }
    catch (e) {
        if (e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError) {
            logger.warn(e.message);
        }
        else {
            const idbGetError = ERROR_FACTORY.create("idb-get" /* AppError.IDB_GET */, {
                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            logger.warn(idbGetError.message);
        }
    }
}
async function writeHeartbeatsToIndexedDB(app, heartbeatObject) {
    try {
        const db = await getDbPromise();
        const tx = db.transaction(STORE_NAME, 'readwrite');
        const objectStore = tx.objectStore(STORE_NAME);
        await objectStore.put(heartbeatObject, computeKey(app));
        await tx.done;
    }
    catch (e) {
        if (e instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError) {
            logger.warn(e.message);
        }
        else {
            const idbGetError = ERROR_FACTORY.create("idb-set" /* AppError.IDB_WRITE */, {
                originalErrorMessage: e === null || e === void 0 ? void 0 : e.message
            });
            logger.warn(idbGetError.message);
        }
    }
}
function computeKey(app) {
    return `${app.name}!${app.options.appId}`;
}

/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const MAX_HEADER_BYTES = 1024;
// 30 days
const STORED_HEARTBEAT_RETENTION_MAX_MILLIS = 30 * 24 * 60 * 60 * 1000;
class HeartbeatServiceImpl {
    constructor(container) {
        this.container = container;
        /**
         * In-memory cache for heartbeats, used by getHeartbeatsHeader() to generate
         * the header string.
         * Stores one record per date. This will be consolidated into the standard
         * format of one record per user agent string before being sent as a header.
         * Populated from indexedDB when the controller is instantiated and should
         * be kept in sync with indexedDB.
         * Leave public for easier testing.
         */
        this._heartbeatsCache = null;
        const app = this.container.getProvider('app').getImmediate();
        this._storage = new HeartbeatStorageImpl(app);
        this._heartbeatsCachePromise = this._storage.read().then(result => {
            this._heartbeatsCache = result;
            return result;
        });
    }
    /**
     * Called to report a heartbeat. The function will generate
     * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
     * to IndexedDB.
     * Note that we only store one heartbeat per day. So if a heartbeat for today is
     * already logged, subsequent calls to this function in the same day will be ignored.
     */
    async triggerHeartbeat() {
        const platformLogger = this.container
            .getProvider('platform-logger')
            .getImmediate();
        // This is the "Firebase user agent" string from the platform logger
        // service, not the browser user agent.
        const agent = platformLogger.getPlatformInfoString();
        const date = getUTCDateString();
        if (this._heartbeatsCache === null) {
            this._heartbeatsCache = await this._heartbeatsCachePromise;
        }
        // Do not store a heartbeat if one is already stored for this day
        // or if a header has already been sent today.
        if (this._heartbeatsCache.lastSentHeartbeatDate === date ||
            this._heartbeatsCache.heartbeats.some(singleDateHeartbeat => singleDateHeartbeat.date === date)) {
            return;
        }
        else {
            // There is no entry for this date. Create one.
            this._heartbeatsCache.heartbeats.push({ date, agent });
        }
        // Remove entries older than 30 days.
        this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter(singleDateHeartbeat => {
            const hbTimestamp = new Date(singleDateHeartbeat.date).valueOf();
            const now = Date.now();
            return now - hbTimestamp <= STORED_HEARTBEAT_RETENTION_MAX_MILLIS;
        });
        return this._storage.overwrite(this._heartbeatsCache);
    }
    /**
     * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
     * It also clears all heartbeats from memory as well as in IndexedDB.
     *
     * NOTE: Consuming product SDKs should not send the header if this method
     * returns an empty string.
     */
    async getHeartbeatsHeader() {
        if (this._heartbeatsCache === null) {
            await this._heartbeatsCachePromise;
        }
        // If it's still null or the array is empty, there is no data to send.
        if (this._heartbeatsCache === null ||
            this._heartbeatsCache.heartbeats.length === 0) {
            return '';
        }
        const date = getUTCDateString();
        // Extract as many heartbeats from the cache as will fit under the size limit.
        const { heartbeatsToSend, unsentEntries } = extractHeartbeatsForHeader(this._heartbeatsCache.heartbeats);
        const headerString = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64urlEncodeWithoutPadding)(JSON.stringify({ version: 2, heartbeats: heartbeatsToSend }));
        // Store last sent date to prevent another being logged/sent for the same day.
        this._heartbeatsCache.lastSentHeartbeatDate = date;
        if (unsentEntries.length > 0) {
            // Store any unsent entries if they exist.
            this._heartbeatsCache.heartbeats = unsentEntries;
            // This seems more likely than emptying the array (below) to lead to some odd state
            // since the cache isn't empty and this will be called again on the next request,
            // and is probably safest if we await it.
            await this._storage.overwrite(this._heartbeatsCache);
        }
        else {
            this._heartbeatsCache.heartbeats = [];
            // Do not wait for this, to reduce latency.
            void this._storage.overwrite(this._heartbeatsCache);
        }
        return headerString;
    }
}
function getUTCDateString() {
    const today = new Date();
    // Returns date format 'YYYY-MM-DD'
    return today.toISOString().substring(0, 10);
}
function extractHeartbeatsForHeader(heartbeatsCache, maxSize = MAX_HEADER_BYTES) {
    // Heartbeats grouped by user agent in the standard format to be sent in
    // the header.
    const heartbeatsToSend = [];
    // Single date format heartbeats that are not sent.
    let unsentEntries = heartbeatsCache.slice();
    for (const singleDateHeartbeat of heartbeatsCache) {
        // Look for an existing entry with the same user agent.
        const heartbeatEntry = heartbeatsToSend.find(hb => hb.agent === singleDateHeartbeat.agent);
        if (!heartbeatEntry) {
            // If no entry for this user agent exists, create one.
            heartbeatsToSend.push({
                agent: singleDateHeartbeat.agent,
                dates: [singleDateHeartbeat.date]
            });
            if (countBytes(heartbeatsToSend) > maxSize) {
                // If the header would exceed max size, remove the added heartbeat
                // entry and stop adding to the header.
                heartbeatsToSend.pop();
                break;
            }
        }
        else {
            heartbeatEntry.dates.push(singleDateHeartbeat.date);
            // If the header would exceed max size, remove the added date
            // and stop adding to the header.
            if (countBytes(heartbeatsToSend) > maxSize) {
                heartbeatEntry.dates.pop();
                break;
            }
        }
        // Pop unsent entry from queue. (Skipped if adding the entry exceeded
        // quota and the loop breaks early.)
        unsentEntries = unsentEntries.slice(1);
    }
    return {
        heartbeatsToSend,
        unsentEntries
    };
}
class HeartbeatStorageImpl {
    constructor(app) {
        this.app = app;
        this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
    }
    async runIndexedDBEnvironmentCheck() {
        if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.isIndexedDBAvailable)()) {
            return false;
        }
        else {
            return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.validateIndexedDBOpenable)()
                .then(() => true)
                .catch(() => false);
        }
    }
    /**
     * Read all heartbeats.
     */
    async read() {
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
            return { heartbeats: [] };
        }
        else {
            const idbHeartbeatObject = await readHeartbeatsFromIndexedDB(this.app);
            return idbHeartbeatObject || { heartbeats: [] };
        }
    }
    // overwrite the storage with the provided heartbeats
    async overwrite(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
            return;
        }
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: heartbeatsObject.heartbeats
            });
        }
    }
    // add heartbeats
    async add(heartbeatsObject) {
        var _a;
        const canUseIndexedDB = await this._canUseIndexedDBPromise;
        if (!canUseIndexedDB) {
            return;
        }
        else {
            const existingHeartbeatsObject = await this.read();
            return writeHeartbeatsToIndexedDB(this.app, {
                lastSentHeartbeatDate: (_a = heartbeatsObject.lastSentHeartbeatDate) !== null && _a !== void 0 ? _a : existingHeartbeatsObject.lastSentHeartbeatDate,
                heartbeats: [
                    ...existingHeartbeatsObject.heartbeats,
                    ...heartbeatsObject.heartbeats
                ]
            });
        }
    }
}
/**
 * Calculate bytes of a HeartbeatsByUserAgent array after being wrapped
 * in a platform logging header JSON object, stringified, and converted
 * to base 64.
 */
function countBytes(heartbeatsCache) {
    // base64 has a restricted set of characters, all of which should be 1 byte.
    return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_2__.base64urlEncodeWithoutPadding)(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: heartbeatsCache })).length;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function registerCoreComponents(variant) {
    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('platform-logger', container => new PlatformLoggerServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
    _registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_0__.Component('heartbeat', container => new HeartbeatServiceImpl(container), "PRIVATE" /* ComponentType.PRIVATE */));
    // Register `app` package.
    registerVersion(name$o, version$1, variant);
    // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
    registerVersion(name$o, version$1, 'esm2017');
    // Register platform SDK identifier (no version).
    registerVersion('fire-js', '');
}

/**
 * Firebase App
 *
 * @remarks This package coordinates the communication between the different Firebase components
 * @packageDocumentation
 */
registerCoreComponents('');


//# sourceMappingURL=index.esm2017.js.map


/***/ }),

/***/ "./node_modules/@firebase/component/dist/esm/index.esm2017.js":
/*!********************************************************************!*\
  !*** ./node_modules/@firebase/component/dist/esm/index.esm2017.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Component: () => (/* binding */ Component),
/* harmony export */   ComponentContainer: () => (/* binding */ ComponentContainer),
/* harmony export */   Provider: () => (/* binding */ Provider)
/* harmony export */ });
/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js");


/**
 * Component for service name T, e.g. `auth`, `auth-internal`
 */
class Component {
    /**
     *
     * @param name The public service name, e.g. app, auth, firestore, database
     * @param instanceFactory Service factory responsible for creating the public interface
     * @param type whether the service provided by the component is public or private
     */
    constructor(name, instanceFactory, type) {
        this.name = name;
        this.instanceFactory = instanceFactory;
        this.type = type;
        this.multipleInstances = false;
        /**
         * Properties to be added to the service namespace
         */
        this.serviceProps = {};
        this.instantiationMode = "LAZY" /* InstantiationMode.LAZY */;
        this.onInstanceCreated = null;
    }
    setInstantiationMode(mode) {
        this.instantiationMode = mode;
        return this;
    }
    setMultipleInstances(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
    }
    setServiceProps(props) {
        this.serviceProps = props;
        return this;
    }
    setInstanceCreatedCallback(callback) {
        this.onInstanceCreated = callback;
        return this;
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DEFAULT_ENTRY_NAME = '[DEFAULT]';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Provider for instance for service name T, e.g. 'auth', 'auth-internal'
 * NameServiceMapping[T] is an alias for the type of the instance
 */
class Provider {
    constructor(name, container) {
        this.name = name;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
    }
    /**
     * @param identifier A provider can provide mulitple instances of a service
     * if this.component.multipleInstances is true.
     */
    get(identifier) {
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
            const deferred = new _firebase_util__WEBPACK_IMPORTED_MODULE_0__.Deferred();
            this.instancesDeferred.set(normalizedIdentifier, deferred);
            if (this.isInitialized(normalizedIdentifier) ||
                this.shouldAutoInitialize()) {
                // initialize the service if it can be auto-initialized
                try {
                    const instance = this.getOrInitializeService({
                        instanceIdentifier: normalizedIdentifier
                    });
                    if (instance) {
                        deferred.resolve(instance);
                    }
                }
                catch (e) {
                    // when the instance factory throws an exception during get(), it should not cause
                    // a fatal error. We just return the unresolved promise in this case.
                }
            }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
    }
    getImmediate(options) {
        var _a;
        // if multipleInstances is not supported, use the default name
        const normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);
        const optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) ||
            this.shouldAutoInitialize()) {
            try {
                return this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
            }
            catch (e) {
                if (optional) {
                    return null;
                }
                else {
                    throw e;
                }
            }
        }
        else {
            // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw
            if (optional) {
                return null;
            }
            else {
                throw Error(`Service ${this.name} is not available`);
            }
        }
    }
    getComponent() {
        return this.component;
    }
    setComponent(component) {
        if (component.name !== this.name) {
            throw Error(`Mismatching Component ${component.name} for Provider ${this.name}.`);
        }
        if (this.component) {
            throw Error(`Component for ${this.name} has already been provided`);
        }
        this.component = component;
        // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)
        if (!this.shouldAutoInitialize()) {
            return;
        }
        // if the service is eager, initialize the default instance
        if (isComponentEager(component)) {
            try {
                this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
            }
            catch (e) {
                // when the instance factory for an eager Component throws an exception during the eager
                // initialization, it should not cause a fatal error.
                // TODO: Investigate if we need to make it configurable, because some component may want to cause
                // a fatal error in this case?
            }
        }
        // Create service instances for the pending promises and resolve them
        // NOTE: if this.multipleInstances is false, only the default instance will be created
        // and all promises with resolve with it regardless of the identifier.
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
            const normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
                // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.
                const instance = this.getOrInitializeService({
                    instanceIdentifier: normalizedIdentifier
                });
                instanceDeferred.resolve(instance);
            }
            catch (e) {
                // when the instance factory throws an exception, it should not cause
                // a fatal error. We just leave the promise unresolved.
            }
        }
    }
    clearInstance(identifier = DEFAULT_ENTRY_NAME) {
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
    }
    // app.delete() will call this method on every provider to delete the services
    // TODO: should we mark the provider as deleted?
    async delete() {
        const services = Array.from(this.instances.values());
        await Promise.all([
            ...services
                .filter(service => 'INTERNAL' in service) // legacy services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map(service => service.INTERNAL.delete()),
            ...services
                .filter(service => '_delete' in service) // modularized services
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                .map(service => service._delete())
        ]);
    }
    isComponentSet() {
        return this.component != null;
    }
    isInitialized(identifier = DEFAULT_ENTRY_NAME) {
        return this.instances.has(identifier);
    }
    getOptions(identifier = DEFAULT_ENTRY_NAME) {
        return this.instancesOptions.get(identifier) || {};
    }
    initialize(opts = {}) {
        const { options = {} } = opts;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
            throw Error(`${this.name}(${normalizedIdentifier}) has already been initialized`);
        }
        if (!this.isComponentSet()) {
            throw Error(`Component ${this.name} has not been registered yet`);
        }
        const instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier,
            options
        });
        // resolve any pending promise waiting for the service instance
        for (const [instanceIdentifier, instanceDeferred] of this.instancesDeferred.entries()) {
            const normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) {
                instanceDeferred.resolve(instance);
            }
        }
        return instance;
    }
    /**
     *
     * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().
     * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.
     *
     * @param identifier An optional instance identifier
     * @returns a function to unregister the callback
     */
    onInit(callback, identifier) {
        var _a;
        const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        const existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        const existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) {
            callback(existingInstance, normalizedIdentifier);
        }
        return () => {
            existingCallbacks.delete(callback);
        };
    }
    /**
     * Invoke onInit callbacks synchronously
     * @param instance the service instance`
     */
    invokeOnInitCallbacks(instance, identifier) {
        const callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) {
            return;
        }
        for (const callback of callbacks) {
            try {
                callback(instance, identifier);
            }
            catch (_a) {
                // ignore errors in the onInit callback
            }
        }
    }
    getOrInitializeService({ instanceIdentifier, options = {} }) {
        let instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
            instance = this.component.instanceFactory(this.container, {
                instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
                options
            });
            this.instances.set(instanceIdentifier, instance);
            this.instancesOptions.set(instanceIdentifier, options);
            /**
             * Invoke onInit listeners.
             * Note this.component.onInstanceCreated is different, which is used by the component creator,
             * while onInit listeners are registered by consumers of the provider.
             */
            this.invokeOnInitCallbacks(instance, instanceIdentifier);
            /**
             * Order is important
             * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which
             * makes `isInitialized()` return true.
             */
            if (this.component.onInstanceCreated) {
                try {
                    this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
                }
                catch (_a) {
                    // ignore errors in the onInstanceCreatedCallback
                }
            }
        }
        return instance || null;
    }
    normalizeInstanceIdentifier(identifier = DEFAULT_ENTRY_NAME) {
        if (this.component) {
            return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
        }
        else {
            return identifier; // assume multiple instances are supported before the component is provided.
        }
    }
    shouldAutoInitialize() {
        return (!!this.component &&
            this.component.instantiationMode !== "EXPLICIT" /* InstantiationMode.EXPLICIT */);
    }
}
// undefined should be passed to the service factory for the default instance
function normalizeIdentifierForFactory(identifier) {
    return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;
}
function isComponentEager(component) {
    return component.instantiationMode === "EAGER" /* InstantiationMode.EAGER */;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`
 */
class ComponentContainer {
    constructor(name) {
        this.name = name;
        this.providers = new Map();
    }
    /**
     *
     * @param component Component being added
     * @param overwrite When a component with the same name has already been registered,
     * if overwrite is true: overwrite the existing component with the new component and create a new
     * provider with the new component. It can be useful in tests where you want to use different mocks
     * for different tests.
     * if overwrite is false: throw an exception
     */
    addComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            throw new Error(`Component ${component.name} has already been registered with ${this.name}`);
        }
        provider.setComponent(component);
    }
    addOrOverwriteComponent(component) {
        const provider = this.getProvider(component.name);
        if (provider.isComponentSet()) {
            // delete the existing provider from the container, so we can register the new component
            this.providers.delete(component.name);
        }
        this.addComponent(component);
    }
    /**
     * getProvider provides a type safe interface where it can only be called with a field name
     * present in NameServiceMapping interface.
     *
     * Firebase SDKs providing services should extend NameServiceMapping interface to register
     * themselves.
     */
    getProvider(name) {
        if (this.providers.has(name)) {
            return this.providers.get(name);
        }
        // create a Provider for a service that hasn't registered with Firebase
        const provider = new Provider(name, this);
        this.providers.set(name, provider);
        return provider;
    }
    getProviders() {
        return Array.from(this.providers.values());
    }
}


//# sourceMappingURL=index.esm2017.js.map


/***/ }),

/***/ "./node_modules/@firebase/installations/dist/esm/index.esm2017.js":
/*!************************************************************************!*\
  !*** ./node_modules/@firebase/installations/dist/esm/index.esm2017.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteInstallations: () => (/* binding */ deleteInstallations),
/* harmony export */   getId: () => (/* binding */ getId),
/* harmony export */   getInstallations: () => (/* binding */ getInstallations),
/* harmony export */   getToken: () => (/* binding */ getToken),
/* harmony export */   onIdChange: () => (/* binding */ onIdChange)
/* harmony export */ });
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/component */ "./node_modules/@firebase/component/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ "./node_modules/@firebase/util/dist/index.esm2017.js");
/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! idb */ "./node_modules/@firebase/installations/node_modules/idb/build/index.js");





const name = "@firebase/installations";
const version = "0.6.4";

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const PENDING_TIMEOUT_MS = 10000;
const PACKAGE_VERSION = `w:${version}`;
const INTERNAL_AUTH_VERSION = 'FIS_v2';
const INSTALLATIONS_API_URL = 'https://firebaseinstallations.googleapis.com/v1';
const TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1000; // One hour
const SERVICE = 'installations';
const SERVICE_NAME = 'Installations';

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ERROR_DESCRIPTION_MAP = {
    ["missing-app-config-values" /* ErrorCode.MISSING_APP_CONFIG_VALUES */]: 'Missing App configuration value: "{$valueName}"',
    ["not-registered" /* ErrorCode.NOT_REGISTERED */]: 'Firebase Installation is not registered.',
    ["installation-not-found" /* ErrorCode.INSTALLATION_NOT_FOUND */]: 'Firebase Installation not found.',
    ["request-failed" /* ErrorCode.REQUEST_FAILED */]: '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',
    ["app-offline" /* ErrorCode.APP_OFFLINE */]: 'Could not process request. Application offline.',
    ["delete-pending-registration" /* ErrorCode.DELETE_PENDING_REGISTRATION */]: "Can't delete installation while there is a pending registration request."
};
const ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_2__.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
/** Returns true if error is a FirebaseError that is based on an error from the server. */
function isServerError(error) {
    return (error instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_2__.FirebaseError &&
        error.code.includes("request-failed" /* ErrorCode.REQUEST_FAILED */));
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function getInstallationsEndpoint({ projectId }) {
    return `${INSTALLATIONS_API_URL}/projects/${projectId}/installations`;
}
function extractAuthTokenInfoFromResponse(response) {
    return {
        token: response.token,
        requestStatus: 2 /* RequestStatus.COMPLETED */,
        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
        creationTime: Date.now()
    };
}
async function getErrorFromResponse(requestName, response) {
    const responseJson = await response.json();
    const errorData = responseJson.error;
    return ERROR_FACTORY.create("request-failed" /* ErrorCode.REQUEST_FAILED */, {
        requestName,
        serverCode: errorData.code,
        serverMessage: errorData.message,
        serverStatus: errorData.status
    });
}
function getHeaders({ apiKey }) {
    return new Headers({
        'Content-Type': 'application/json',
        Accept: 'application/json',
        'x-goog-api-key': apiKey
    });
}
function getHeadersWithAuth(appConfig, { refreshToken }) {
    const headers = getHeaders(appConfig);
    headers.append('Authorization', getAuthorizationHeader(refreshToken));
    return headers;
}
/**
 * Calls the passed in fetch wrapper and returns the response.
 * If the returned response has a status of 5xx, re-runs the function once and
 * returns the response.
 */
async function retryIfServerError(fn) {
    const result = await fn();
    if (result.status >= 500 && result.status < 600) {
        // Internal Server Error. Retry request.
        return fn();
    }
    return result;
}
function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
    // This works because the server will never respond with fractions of a second.
    return Number(responseExpiresIn.replace('s', '000'));
}
function getAuthorizationHeader(refreshToken) {
    return `${INTERNAL_AUTH_VERSION} ${refreshToken}`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function createInstallationRequest({ appConfig, heartbeatServiceProvider }, { fid }) {
    const endpoint = getInstallationsEndpoint(appConfig);
    const headers = getHeaders(appConfig);
    // If heartbeat service exists, add the heartbeat string to the header.
    const heartbeatService = heartbeatServiceProvider.getImmediate({
        optional: true
    });
    if (heartbeatService) {
        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();
        if (heartbeatsHeader) {
            headers.append('x-firebase-client', heartbeatsHeader);
        }
    }
    const body = {
        fid,
        authVersion: INTERNAL_AUTH_VERSION,
        appId: appConfig.appId,
        sdkVersion: PACKAGE_VERSION
    };
    const request = {
        method: 'POST',
        headers,
        body: JSON.stringify(body)
    };
    const response = await retryIfServerError(() => fetch(endpoint, request));
    if (response.ok) {
        const responseValue = await response.json();
        const registeredInstallationEntry = {
            fid: responseValue.fid || fid,
            registrationStatus: 2 /* RequestStatus.COMPLETED */,
            refreshToken: responseValue.refreshToken,
            authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
        };
        return registeredInstallationEntry;
    }
    else {
        throw await getErrorFromResponse('Create Installation', response);
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Returns a promise that resolves after given time passes. */
function sleep(ms) {
    return new Promise(resolve => {
        setTimeout(resolve, ms);
    });
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function bufferToBase64UrlSafe(array) {
    const b64 = btoa(String.fromCharCode(...array));
    return b64.replace(/\+/g, '-').replace(/\//g, '_');
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
const INVALID_FID = '';
/**
 * Generates a new FID using random values from Web Crypto API.
 * Returns an empty string if FID generation fails for any reason.
 */
function generateFid() {
    try {
        // A valid FID has exactly 22 base64 characters, which is 132 bits, or 16.5
        // bytes. our implementation generates a 17 byte array instead.
        const fidByteArray = new Uint8Array(17);
        const crypto = self.crypto || self.msCrypto;
        crypto.getRandomValues(fidByteArray);
        // Replace the first 4 random bits with the constant FID header of 0b0111.
        fidByteArray[0] = 0b01110000 + (fidByteArray[0] % 0b00010000);
        const fid = encode(fidByteArray);
        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
    }
    catch (_a) {
        // FID generation errored
        return INVALID_FID;
    }
}
/** Converts a FID Uint8Array to a base64 string representation. */
function encode(fidByteArray) {
    const b64String = bufferToBase64UrlSafe(fidByteArray);
    // Remove the 23rd character that was added because of the extra 4 bits at the
    // end of our 17 byte array, and the '=' padding.
    return b64String.substr(0, 22);
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** Returns a string key that can be used to identify the app. */
function getKey(appConfig) {
    return `${appConfig.appName}!${appConfig.appId}`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fidChangeCallbacks = new Map();
/**
 * Calls the onIdChange callbacks with the new FID value, and broadcasts the
 * change to other tabs.
 */
function fidChanged(appConfig, fid) {
    const key = getKey(appConfig);
    callFidChangeCallbacks(key, fid);
    broadcastFidChange(key, fid);
}
function addCallback(appConfig, callback) {
    // Open the broadcast channel if it's not already open,
    // to be able to listen to change events from other tabs.
    getBroadcastChannel();
    const key = getKey(appConfig);
    let callbackSet = fidChangeCallbacks.get(key);
    if (!callbackSet) {
        callbackSet = new Set();
        fidChangeCallbacks.set(key, callbackSet);
    }
    callbackSet.add(callback);
}
function removeCallback(appConfig, callback) {
    const key = getKey(appConfig);
    const callbackSet = fidChangeCallbacks.get(key);
    if (!callbackSet) {
        return;
    }
    callbackSet.delete(callback);
    if (callbackSet.size === 0) {
        fidChangeCallbacks.delete(key);
    }
    // Close broadcast channel if there are no more callbacks.
    closeBroadcastChannel();
}
function callFidChangeCallbacks(key, fid) {
    const callbacks = fidChangeCallbacks.get(key);
    if (!callbacks) {
        return;
    }
    for (const callback of callbacks) {
        callback(fid);
    }
}
function broadcastFidChange(key, fid) {
    const channel = getBroadcastChannel();
    if (channel) {
        channel.postMessage({ key, fid });
    }
    closeBroadcastChannel();
}
let broadcastChannel = null;
/** Opens and returns a BroadcastChannel if it is supported by the browser. */
function getBroadcastChannel() {
    if (!broadcastChannel && 'BroadcastChannel' in self) {
        broadcastChannel = new BroadcastChannel('[Firebase] FID Change');
        broadcastChannel.onmessage = e => {
            callFidChangeCallbacks(e.data.key, e.data.fid);
        };
    }
    return broadcastChannel;
}
function closeBroadcastChannel() {
    if (fidChangeCallbacks.size === 0 && broadcastChannel) {
        broadcastChannel.close();
        broadcastChannel = null;
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const DATABASE_NAME = 'firebase-installations-database';
const DATABASE_VERSION = 1;
const OBJECT_STORE_NAME = 'firebase-installations-store';
let dbPromise = null;
function getDbPromise() {
    if (!dbPromise) {
        dbPromise = (0,idb__WEBPACK_IMPORTED_MODULE_3__.openDB)(DATABASE_NAME, DATABASE_VERSION, {
            upgrade: (db, oldVersion) => {
                // We don't use 'break' in this switch statement, the fall-through
                // behavior is what we want, because if there are multiple versions between
                // the old version and the current version, we want ALL the migrations
                // that correspond to those versions to run, not only the last one.
                // eslint-disable-next-line default-case
                switch (oldVersion) {
                    case 0:
                        db.createObjectStore(OBJECT_STORE_NAME);
                }
            }
        });
    }
    return dbPromise;
}
/** Assigns or overwrites the record for the given key with the given value. */
async function set(appConfig, value) {
    const key = getKey(appConfig);
    const db = await getDbPromise();
    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
    const objectStore = tx.objectStore(OBJECT_STORE_NAME);
    const oldValue = (await objectStore.get(key));
    await objectStore.put(value, key);
    await tx.done;
    if (!oldValue || oldValue.fid !== value.fid) {
        fidChanged(appConfig, value.fid);
    }
    return value;
}
/** Removes record(s) from the objectStore that match the given key. */
async function remove(appConfig) {
    const key = getKey(appConfig);
    const db = await getDbPromise();
    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
    await tx.objectStore(OBJECT_STORE_NAME).delete(key);
    await tx.done;
}
/**
 * Atomically updates a record with the result of updateFn, which gets
 * called with the current value. If newValue is undefined, the record is
 * deleted instead.
 * @return Updated value
 */
async function update(appConfig, updateFn) {
    const key = getKey(appConfig);
    const db = await getDbPromise();
    const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
    const store = tx.objectStore(OBJECT_STORE_NAME);
    const oldValue = (await store.get(key));
    const newValue = updateFn(oldValue);
    if (newValue === undefined) {
        await store.delete(key);
    }
    else {
        await store.put(newValue, key);
    }
    await tx.done;
    if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
        fidChanged(appConfig, newValue.fid);
    }
    return newValue;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Updates and returns the InstallationEntry from the database.
 * Also triggers a registration request if it is necessary and possible.
 */
async function getInstallationEntry(installations) {
    let registrationPromise;
    const installationEntry = await update(installations.appConfig, oldEntry => {
        const installationEntry = updateOrCreateInstallationEntry(oldEntry);
        const entryWithPromise = triggerRegistrationIfNecessary(installations, installationEntry);
        registrationPromise = entryWithPromise.registrationPromise;
        return entryWithPromise.installationEntry;
    });
    if (installationEntry.fid === INVALID_FID) {
        // FID generation failed. Waiting for the FID from the server.
        return { installationEntry: await registrationPromise };
    }
    return {
        installationEntry,
        registrationPromise
    };
}
/**
 * Creates a new Installation Entry if one does not exist.
 * Also clears timed out pending requests.
 */
function updateOrCreateInstallationEntry(oldEntry) {
    const entry = oldEntry || {
        fid: generateFid(),
        registrationStatus: 0 /* RequestStatus.NOT_STARTED */
    };
    return clearTimedOutRequest(entry);
}
/**
 * If the Firebase Installation is not registered yet, this will trigger the
 * registration and return an InProgressInstallationEntry.
 *
 * If registrationPromise does not exist, the installationEntry is guaranteed
 * to be registered.
 */
function triggerRegistrationIfNecessary(installations, installationEntry) {
    if (installationEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {
        if (!navigator.onLine) {
            // Registration required but app is offline.
            const registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline" /* ErrorCode.APP_OFFLINE */));
            return {
                installationEntry,
                registrationPromise: registrationPromiseWithError
            };
        }
        // Try registering. Change status to IN_PROGRESS.
        const inProgressEntry = {
            fid: installationEntry.fid,
            registrationStatus: 1 /* RequestStatus.IN_PROGRESS */,
            registrationTime: Date.now()
        };
        const registrationPromise = registerInstallation(installations, inProgressEntry);
        return { installationEntry: inProgressEntry, registrationPromise };
    }
    else if (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {
        return {
            installationEntry,
            registrationPromise: waitUntilFidRegistration(installations)
        };
    }
    else {
        return { installationEntry };
    }
}
/** This will be executed only once for each new Firebase Installation. */
async function registerInstallation(installations, installationEntry) {
    try {
        const registeredInstallationEntry = await createInstallationRequest(installations, installationEntry);
        return set(installations.appConfig, registeredInstallationEntry);
    }
    catch (e) {
        if (isServerError(e) && e.customData.serverCode === 409) {
            // Server returned a "FID can not be used" error.
            // Generate a new ID next time.
            await remove(installations.appConfig);
        }
        else {
            // Registration failed. Set FID as not registered.
            await set(installations.appConfig, {
                fid: installationEntry.fid,
                registrationStatus: 0 /* RequestStatus.NOT_STARTED */
            });
        }
        throw e;
    }
}
/** Call if FID registration is pending in another request. */
async function waitUntilFidRegistration(installations) {
    // Unfortunately, there is no way of reliably observing when a value in
    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
    // so we need to poll.
    let entry = await updateInstallationRequest(installations.appConfig);
    while (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {
        // createInstallation request still in progress.
        await sleep(100);
        entry = await updateInstallationRequest(installations.appConfig);
    }
    if (entry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {
        // The request timed out or failed in a different call. Try again.
        const { installationEntry, registrationPromise } = await getInstallationEntry(installations);
        if (registrationPromise) {
            return registrationPromise;
        }
        else {
            // if there is no registrationPromise, entry is registered.
            return installationEntry;
        }
    }
    return entry;
}
/**
 * Called only if there is a CreateInstallation request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * CreateInstallation request.
 *
 * Returns the updated InstallationEntry.
 */
function updateInstallationRequest(appConfig) {
    return update(appConfig, oldEntry => {
        if (!oldEntry) {
            throw ERROR_FACTORY.create("installation-not-found" /* ErrorCode.INSTALLATION_NOT_FOUND */);
        }
        return clearTimedOutRequest(oldEntry);
    });
}
function clearTimedOutRequest(entry) {
    if (hasInstallationRequestTimedOut(entry)) {
        return {
            fid: entry.fid,
            registrationStatus: 0 /* RequestStatus.NOT_STARTED */
        };
    }
    return entry;
}
function hasInstallationRequestTimedOut(installationEntry) {
    return (installationEntry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */ &&
        installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now());
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function generateAuthTokenRequest({ appConfig, heartbeatServiceProvider }, installationEntry) {
    const endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
    const headers = getHeadersWithAuth(appConfig, installationEntry);
    // If heartbeat service exists, add the heartbeat string to the header.
    const heartbeatService = heartbeatServiceProvider.getImmediate({
        optional: true
    });
    if (heartbeatService) {
        const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();
        if (heartbeatsHeader) {
            headers.append('x-firebase-client', heartbeatsHeader);
        }
    }
    const body = {
        installation: {
            sdkVersion: PACKAGE_VERSION,
            appId: appConfig.appId
        }
    };
    const request = {
        method: 'POST',
        headers,
        body: JSON.stringify(body)
    };
    const response = await retryIfServerError(() => fetch(endpoint, request));
    if (response.ok) {
        const responseValue = await response.json();
        const completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
        return completedAuthToken;
    }
    else {
        throw await getErrorFromResponse('Generate Auth Token', response);
    }
}
function getGenerateAuthTokenEndpoint(appConfig, { fid }) {
    return `${getInstallationsEndpoint(appConfig)}/${fid}/authTokens:generate`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a valid authentication token for the installation. Generates a new
 * token if one doesn't exist, is expired or about to expire.
 *
 * Should only be called if the Firebase Installation is registered.
 */
async function refreshAuthToken(installations, forceRefresh = false) {
    let tokenPromise;
    const entry = await update(installations.appConfig, oldEntry => {
        if (!isEntryRegistered(oldEntry)) {
            throw ERROR_FACTORY.create("not-registered" /* ErrorCode.NOT_REGISTERED */);
        }
        const oldAuthToken = oldEntry.authToken;
        if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
            // There is a valid token in the DB.
            return oldEntry;
        }
        else if (oldAuthToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {
            // There already is a token request in progress.
            tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
            return oldEntry;
        }
        else {
            // No token or token expired.
            if (!navigator.onLine) {
                throw ERROR_FACTORY.create("app-offline" /* ErrorCode.APP_OFFLINE */);
            }
            const inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
            tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
            return inProgressEntry;
        }
    });
    const authToken = tokenPromise
        ? await tokenPromise
        : entry.authToken;
    return authToken;
}
/**
 * Call only if FID is registered and Auth Token request is in progress.
 *
 * Waits until the current pending request finishes. If the request times out,
 * tries once in this thread as well.
 */
async function waitUntilAuthTokenRequest(installations, forceRefresh) {
    // Unfortunately, there is no way of reliably observing when a value in
    // IndexedDB changes (yet, see https://github.com/WICG/indexed-db-observers),
    // so we need to poll.
    let entry = await updateAuthTokenRequest(installations.appConfig);
    while (entry.authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */) {
        // generateAuthToken still in progress.
        await sleep(100);
        entry = await updateAuthTokenRequest(installations.appConfig);
    }
    const authToken = entry.authToken;
    if (authToken.requestStatus === 0 /* RequestStatus.NOT_STARTED */) {
        // The request timed out or failed in a different call. Try again.
        return refreshAuthToken(installations, forceRefresh);
    }
    else {
        return authToken;
    }
}
/**
 * Called only if there is a GenerateAuthToken request in progress.
 *
 * Updates the InstallationEntry in the DB based on the status of the
 * GenerateAuthToken request.
 *
 * Returns the updated InstallationEntry.
 */
function updateAuthTokenRequest(appConfig) {
    return update(appConfig, oldEntry => {
        if (!isEntryRegistered(oldEntry)) {
            throw ERROR_FACTORY.create("not-registered" /* ErrorCode.NOT_REGISTERED */);
        }
        const oldAuthToken = oldEntry.authToken;
        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
            return Object.assign(Object.assign({}, oldEntry), { authToken: { requestStatus: 0 /* RequestStatus.NOT_STARTED */ } });
        }
        return oldEntry;
    });
}
async function fetchAuthTokenFromServer(installations, installationEntry) {
    try {
        const authToken = await generateAuthTokenRequest(installations, installationEntry);
        const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken });
        await set(installations.appConfig, updatedInstallationEntry);
        return authToken;
    }
    catch (e) {
        if (isServerError(e) &&
            (e.customData.serverCode === 401 || e.customData.serverCode === 404)) {
            // Server returned a "FID not found" or a "Invalid authentication" error.
            // Generate a new ID next time.
            await remove(installations.appConfig);
        }
        else {
            const updatedInstallationEntry = Object.assign(Object.assign({}, installationEntry), { authToken: { requestStatus: 0 /* RequestStatus.NOT_STARTED */ } });
            await set(installations.appConfig, updatedInstallationEntry);
        }
        throw e;
    }
}
function isEntryRegistered(installationEntry) {
    return (installationEntry !== undefined &&
        installationEntry.registrationStatus === 2 /* RequestStatus.COMPLETED */);
}
function isAuthTokenValid(authToken) {
    return (authToken.requestStatus === 2 /* RequestStatus.COMPLETED */ &&
        !isAuthTokenExpired(authToken));
}
function isAuthTokenExpired(authToken) {
    const now = Date.now();
    return (now < authToken.creationTime ||
        authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER);
}
/** Returns an updated InstallationEntry with an InProgressAuthToken. */
function makeAuthTokenRequestInProgressEntry(oldEntry) {
    const inProgressAuthToken = {
        requestStatus: 1 /* RequestStatus.IN_PROGRESS */,
        requestTime: Date.now()
    };
    return Object.assign(Object.assign({}, oldEntry), { authToken: inProgressAuthToken });
}
function hasAuthTokenRequestTimedOut(authToken) {
    return (authToken.requestStatus === 1 /* RequestStatus.IN_PROGRESS */ &&
        authToken.requestTime + PENDING_TIMEOUT_MS < Date.now());
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Creates a Firebase Installation if there isn't one for the app and
 * returns the Installation ID.
 * @param installations - The `Installations` instance.
 *
 * @public
 */
async function getId(installations) {
    const installationsImpl = installations;
    const { installationEntry, registrationPromise } = await getInstallationEntry(installationsImpl);
    if (registrationPromise) {
        registrationPromise.catch(console.error);
    }
    else {
        // If the installation is already registered, update the authentication
        // token if needed.
        refreshAuthToken(installationsImpl).catch(console.error);
    }
    return installationEntry.fid;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a Firebase Installations auth token, identifying the current
 * Firebase Installation.
 * @param installations - The `Installations` instance.
 * @param forceRefresh - Force refresh regardless of token expiration.
 *
 * @public
 */
async function getToken(installations, forceRefresh = false) {
    const installationsImpl = installations;
    await completeInstallationRegistration(installationsImpl);
    // At this point we either have a Registered Installation in the DB, or we've
    // already thrown an error.
    const authToken = await refreshAuthToken(installationsImpl, forceRefresh);
    return authToken.token;
}
async function completeInstallationRegistration(installations) {
    const { registrationPromise } = await getInstallationEntry(installations);
    if (registrationPromise) {
        // A createInstallation request is in progress. Wait until it finishes.
        await registrationPromise;
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
async function deleteInstallationRequest(appConfig, installationEntry) {
    const endpoint = getDeleteEndpoint(appConfig, installationEntry);
    const headers = getHeadersWithAuth(appConfig, installationEntry);
    const request = {
        method: 'DELETE',
        headers
    };
    const response = await retryIfServerError(() => fetch(endpoint, request));
    if (!response.ok) {
        throw await getErrorFromResponse('Delete Installation', response);
    }
}
function getDeleteEndpoint(appConfig, { fid }) {
    return `${getInstallationsEndpoint(appConfig)}/${fid}`;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Deletes the Firebase Installation and all associated data.
 * @param installations - The `Installations` instance.
 *
 * @public
 */
async function deleteInstallations(installations) {
    const { appConfig } = installations;
    const entry = await update(appConfig, oldEntry => {
        if (oldEntry && oldEntry.registrationStatus === 0 /* RequestStatus.NOT_STARTED */) {
            // Delete the unregistered entry without sending a deleteInstallation request.
            return undefined;
        }
        return oldEntry;
    });
    if (entry) {
        if (entry.registrationStatus === 1 /* RequestStatus.IN_PROGRESS */) {
            // Can't delete while trying to register.
            throw ERROR_FACTORY.create("delete-pending-registration" /* ErrorCode.DELETE_PENDING_REGISTRATION */);
        }
        else if (entry.registrationStatus === 2 /* RequestStatus.COMPLETED */) {
            if (!navigator.onLine) {
                throw ERROR_FACTORY.create("app-offline" /* ErrorCode.APP_OFFLINE */);
            }
            else {
                await deleteInstallationRequest(appConfig, entry);
                await remove(appConfig);
            }
        }
    }
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Sets a new callback that will get called when Installation ID changes.
 * Returns an unsubscribe function that will remove the callback when called.
 * @param installations - The `Installations` instance.
 * @param callback - The callback function that is invoked when FID changes.
 * @returns A function that can be called to unsubscribe.
 *
 * @public
 */
function onIdChange(installations, callback) {
    const { appConfig } = installations;
    addCallback(appConfig, callback);
    return () => {
        removeCallback(appConfig, callback);
    };
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns an instance of {@link Installations} associated with the given
 * {@link @firebase/app#FirebaseApp} instance.
 * @param app - The {@link @firebase/app#FirebaseApp} instance.
 *
 * @public
 */
function getInstallations(app = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)()) {
    const installationsImpl = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, 'installations').getImmediate();
    return installationsImpl;
}

/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function extractAppConfig(app) {
    if (!app || !app.options) {
        throw getMissingValueError('App Configuration');
    }
    if (!app.name) {
        throw getMissingValueError('App Name');
    }
    // Required app config keys
    const configKeys = [
        'projectId',
        'apiKey',
        'appId'
    ];
    for (const keyName of configKeys) {
        if (!app.options[keyName]) {
            throw getMissingValueError(keyName);
        }
    }
    return {
        appName: app.name,
        projectId: app.options.projectId,
        apiKey: app.options.apiKey,
        appId: app.options.appId
    };
}
function getMissingValueError(valueName) {
    return ERROR_FACTORY.create("missing-app-config-values" /* ErrorCode.MISSING_APP_CONFIG_VALUES */, {
        valueName
    });
}

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const INSTALLATIONS_NAME = 'installations';
const INSTALLATIONS_NAME_INTERNAL = 'installations-internal';
const publicFactory = (container) => {
    const app = container.getProvider('app').getImmediate();
    // Throws if app isn't configured properly.
    const appConfig = extractAppConfig(app);
    const heartbeatServiceProvider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, 'heartbeat');
    const installationsImpl = {
        app,
        appConfig,
        heartbeatServiceProvider,
        _delete: () => Promise.resolve()
    };
    return installationsImpl;
};
const internalFactory = (container) => {
    const app = container.getProvider('app').getImmediate();
    // Internal FIS instance relies on public FIS instance.
    const installations = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, INSTALLATIONS_NAME).getImmediate();
    const installationsInternal = {
        getId: () => getId(installations),
        getToken: (forceRefresh) => getToken(installations, forceRefresh)
    };
    return installationsInternal;
};
function registerInstallations() {
    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC" /* ComponentType.PUBLIC */));
    (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE" /* ComponentType.PRIVATE */));
}

/**
 * Firebase Installations
 *
 * @packageDocumentation
 */
registerInstallations();
(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version);
// BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation
(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'esm2017');


//# sourceMappingURL=index.esm2017.js.map


/***/ }),

/***/ "./node_modules/@firebase/installations/node_modules/idb/build/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@firebase/installations/node_modules/idb/build/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteDB: () => (/* binding */ deleteDB),
/* harmony export */   openDB: () => (/* binding */ openDB),
/* harmony export */   unwrap: () => (/* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.u),
/* harmony export */   wrap: () => (/* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)
/* harmony export */ });
/* harmony import */ var _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrap-idb-value.js */ "./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");



/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */
function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request);
    if (upgrade) {
        request.addEventListener('upgradeneeded', (event) => {
            upgrade((0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request.result), event.oldVersion, event.newVersion, (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request.transaction));
        });
    }
    if (blocked)
        request.addEventListener('blocked', () => blocked());
    openPromise
        .then((db) => {
        if (terminated)
            db.addEventListener('close', () => terminated());
        if (blocking)
            db.addEventListener('versionchange', () => blocking());
    })
        .catch(() => { });
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */
function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked)
        request.addEventListener('blocked', () => blocked());
    return (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request).then(() => undefined);
}

const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
const writeMethods = ['put', 'add', 'delete', 'clear'];
const cachedMethods = new Map();
function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase &&
        !(prop in target) &&
        typeof prop === 'string')) {
        return;
    }
    if (cachedMethods.get(prop))
        return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
        !(isWrite || readMethods.includes(targetFuncName))) {
        return;
    }
    const method = async function (storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex)
            target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done,
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
(0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.r)((oldTraps) => ({
    ...oldTraps,
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
}));




/***/ }),

/***/ "./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ reverseTransformCache),
/* harmony export */   i: () => (/* binding */ instanceOfAny),
/* harmony export */   r: () => (/* binding */ replaceTraps),
/* harmony export */   u: () => (/* binding */ unwrap),
/* harmony export */   w: () => (/* binding */ wrap)
/* harmony export */ });
const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return (idbProxyableTypes ||
        (idbProxyableTypes = [
            IDBDatabase,
            IDBObjectStore,
            IDBIndex,
            IDBCursor,
            IDBTransaction,
        ]));
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return (cursorAdvanceMethods ||
        (cursorAdvanceMethods = [
            IDBCursor.prototype.advance,
            IDBCursor.prototype.continue,
            IDBCursor.prototype.continuePrimaryKey,
        ]));
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
        const unlisten = () => {
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = () => {
            resolve(wrap(request.result));
            unlisten();
        };
        const error = () => {
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise
        .then((value) => {
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) {
            cursorRequestMap.set(value, request);
        }
        // Catching to avoid "Uncaught Promise exceptions"
    })
        .catch(() => { });
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx))
        return;
    const done = new Promise((resolve, reject) => {
        const unlisten = () => {
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = () => {
            resolve();
            unlisten();
        };
        const error = () => {
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done')
                return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') {
                return target.objectStoreNames || transactionStoreNamesMap.get(target);
            }
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') {
                return receiver.objectStoreNames[1]
                    ? undefined
                    : receiver.objectStore(receiver.objectStoreNames[0]);
            }
        }
        // Else transform whatever we get back.
        return wrap(target[prop]);
    },
    set(target, prop, value) {
        target[prop] = value;
        return true;
    },
    has(target, prop) {
        if (target instanceof IDBTransaction &&
            (prop === 'done' || prop === 'store')) {
            return true;
        }
        return prop in target;
    },
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction &&
        !('objectStoreNames' in IDBTransaction.prototype)) {
        return function (storeNames, ...args) {
            const tx = func.call(unwrap(this), storeNames, ...args);
            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
            return wrap(tx);
        };
    }
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) {
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            func.apply(unwrap(this), args);
            return wrap(cursorRequestMap.get(this));
        };
    }
    return function (...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === 'function')
        return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction)
        cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
        return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest)
        return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value))
        return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value) => reverseTransformCache.get(value);




/***/ }),

/***/ "./node_modules/@firebase/logger/dist/esm/index.esm2017.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@firebase/logger/dist/esm/index.esm2017.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LogLevel: () => (/* binding */ LogLevel),
/* harmony export */   Logger: () => (/* binding */ Logger),
/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),
/* harmony export */   setUserLogHandler: () => (/* binding */ setUserLogHandler)
/* harmony export */ });
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * A container for all of the Logger instances
 */
const instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
    LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
    LogLevel[LogLevel["INFO"] = 2] = "INFO";
    LogLevel[LogLevel["WARN"] = 3] = "WARN";
    LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
const levelStringToEnum = {
    'debug': LogLevel.DEBUG,
    'verbose': LogLevel.VERBOSE,
    'info': LogLevel.INFO,
    'warn': LogLevel.WARN,
    'error': LogLevel.ERROR,
    'silent': LogLevel.SILENT
};
/**
 * The default log level
 */
const defaultLogLevel = LogLevel.INFO;
/**
 * By default, `console.debug` is not displayed in the developer console (in
 * chrome). To avoid forcing users to have to opt-in to these logs twice
 * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
 * logs to the `console.log` function.
 */
const ConsoleMethod = {
    [LogLevel.DEBUG]: 'log',
    [LogLevel.VERBOSE]: 'log',
    [LogLevel.INFO]: 'info',
    [LogLevel.WARN]: 'warn',
    [LogLevel.ERROR]: 'error'
};
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */
const defaultLogHandler = (instance, logType, ...args) => {
    if (logType < instance.logLevel) {
        return;
    }
    const now = new Date().toISOString();
    const method = ConsoleMethod[logType];
    if (method) {
        console[method](`[${now}]  ${instance.name}:`, ...args);
    }
    else {
        throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
    }
};
class Logger {
    /**
     * Gives you an instance of a Logger to capture messages according to
     * Firebase's logging scheme.
     *
     * @param name The name that the logs will be associated with
     */
    constructor(name) {
        this.name = name;
        /**
         * The log level of the given Logger instance.
         */
        this._logLevel = defaultLogLevel;
        /**
         * The main (internal) log handler for the Logger instance.
         * Can be set to a new function in internal package code but not by user.
         */
        this._logHandler = defaultLogHandler;
        /**
         * The optional, additional, user-defined log handler for the Logger instance.
         */
        this._userLogHandler = null;
        /**
         * Capture the current instance for later use
         */
        instances.push(this);
    }
    get logLevel() {
        return this._logLevel;
    }
    set logLevel(val) {
        if (!(val in LogLevel)) {
            throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
        }
        this._logLevel = val;
    }
    // Workaround for setter/getter having to be the same type.
    setLogLevel(val) {
        this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;
    }
    get logHandler() {
        return this._logHandler;
    }
    set logHandler(val) {
        if (typeof val !== 'function') {
            throw new TypeError('Value assigned to `logHandler` must be a function');
        }
        this._logHandler = val;
    }
    get userLogHandler() {
        return this._userLogHandler;
    }
    set userLogHandler(val) {
        this._userLogHandler = val;
    }
    /**
     * The functions below are all based on the `console` interface
     */
    debug(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
        this._logHandler(this, LogLevel.DEBUG, ...args);
    }
    log(...args) {
        this._userLogHandler &&
            this._userLogHandler(this, LogLevel.VERBOSE, ...args);
        this._logHandler(this, LogLevel.VERBOSE, ...args);
    }
    info(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
        this._logHandler(this, LogLevel.INFO, ...args);
    }
    warn(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
        this._logHandler(this, LogLevel.WARN, ...args);
    }
    error(...args) {
        this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
        this._logHandler(this, LogLevel.ERROR, ...args);
    }
}
function setLogLevel(level) {
    instances.forEach(inst => {
        inst.setLogLevel(level);
    });
}
function setUserLogHandler(logCallback, options) {
    for (const instance of instances) {
        let customLogLevel = null;
        if (options && options.level) {
            customLogLevel = levelStringToEnum[options.level];
        }
        if (logCallback === null) {
            instance.userLogHandler = null;
        }
        else {
            instance.userLogHandler = (instance, level, ...args) => {
                const message = args
                    .map(arg => {
                    if (arg == null) {
                        return null;
                    }
                    else if (typeof arg === 'string') {
                        return arg;
                    }
                    else if (typeof arg === 'number' || typeof arg === 'boolean') {
                        return arg.toString();
                    }
                    else if (arg instanceof Error) {
                        return arg.message;
                    }
                    else {
                        try {
                            return JSON.stringify(arg);
                        }
                        catch (ignored) {
                            return null;
                        }
                    }
                })
                    .filter(arg => arg)
                    .join(' ');
                if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {
                    logCallback({
                        level: LogLevel[level].toLowerCase(),
                        message,
                        args,
                        type: instance.name
                    });
                }
            };
        }
    }
}


//# sourceMappingURL=index.esm2017.js.map


/***/ }),

/***/ "./node_modules/firebase/analytics/dist/esm/index.esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/firebase/analytics/dist/esm/index.esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getAnalytics: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.getAnalytics),
/* harmony export */   getGoogleAnalyticsClientId: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.getGoogleAnalyticsClientId),
/* harmony export */   initializeAnalytics: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.initializeAnalytics),
/* harmony export */   isSupported: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.isSupported),
/* harmony export */   logEvent: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.logEvent),
/* harmony export */   setAnalyticsCollectionEnabled: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setAnalyticsCollectionEnabled),
/* harmony export */   setConsent: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setConsent),
/* harmony export */   setCurrentScreen: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setCurrentScreen),
/* harmony export */   setDefaultEventParameters: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setDefaultEventParameters),
/* harmony export */   setUserId: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setUserId),
/* harmony export */   setUserProperties: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.setUserProperties),
/* harmony export */   settings: () => (/* reexport safe */ _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__.settings)
/* harmony export */ });
/* harmony import */ var _firebase_analytics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/analytics */ "./node_modules/@firebase/analytics/dist/esm/index.esm2017.js");

//# sourceMappingURL=index.esm.js.map


/***/ }),

/***/ "./node_modules/firebase/app/dist/esm/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/firebase/app/dist/esm/index.esm.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FirebaseError: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.FirebaseError),
/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION),
/* harmony export */   _DEFAULT_ENTRY_NAME: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._DEFAULT_ENTRY_NAME),
/* harmony export */   _addComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addComponent),
/* harmony export */   _addOrOverwriteComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addOrOverwriteComponent),
/* harmony export */   _apps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._apps),
/* harmony export */   _clearComponents: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._clearComponents),
/* harmony export */   _components: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._components),
/* harmony export */   _getProvider: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider),
/* harmony export */   _registerComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent),
/* harmony export */   _removeServiceInstance: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._removeServiceInstance),
/* harmony export */   deleteApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.deleteApp),
/* harmony export */   getApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp),
/* harmony export */   getApps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps),
/* harmony export */   initializeApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp),
/* harmony export */   onLog: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.onLog),
/* harmony export */   registerVersion: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion),
/* harmony export */   setLogLevel: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)
/* harmony export */ });
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/esm/index.esm2017.js");



var name = "firebase";
var version = "10.1.0";

/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'app');
//# sourceMappingURL=index.esm.js.map


/***/ }),

/***/ "./node_modules/idb/build/index.js":
/*!*****************************************!*\
  !*** ./node_modules/idb/build/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deleteDB: () => (/* binding */ deleteDB),
/* harmony export */   openDB: () => (/* binding */ openDB),
/* harmony export */   unwrap: () => (/* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.u),
/* harmony export */   wrap: () => (/* reexport safe */ _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)
/* harmony export */ });
/* harmony import */ var _wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrap-idb-value.js */ "./node_modules/idb/build/wrap-idb-value.js");



/**
 * Open a database.
 *
 * @param name Name of the database.
 * @param version Schema version.
 * @param callbacks Additional callbacks.
 */
function openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {
    const request = indexedDB.open(name, version);
    const openPromise = (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request);
    if (upgrade) {
        request.addEventListener('upgradeneeded', (event) => {
            upgrade((0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request.result), event.oldVersion, event.newVersion, (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request.transaction), event);
        });
    }
    if (blocked) {
        request.addEventListener('blocked', (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event.newVersion, event));
    }
    openPromise
        .then((db) => {
        if (terminated)
            db.addEventListener('close', () => terminated());
        if (blocking) {
            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));
        }
    })
        .catch(() => { });
    return openPromise;
}
/**
 * Delete a database.
 *
 * @param name Name of the database.
 */
function deleteDB(name, { blocked } = {}) {
    const request = indexedDB.deleteDatabase(name);
    if (blocked) {
        request.addEventListener('blocked', (event) => blocked(
        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
        event.oldVersion, event));
    }
    return (0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.w)(request).then(() => undefined);
}

const readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];
const writeMethods = ['put', 'add', 'delete', 'clear'];
const cachedMethods = new Map();
function getMethod(target, prop) {
    if (!(target instanceof IDBDatabase &&
        !(prop in target) &&
        typeof prop === 'string')) {
        return;
    }
    if (cachedMethods.get(prop))
        return cachedMethods.get(prop);
    const targetFuncName = prop.replace(/FromIndex$/, '');
    const useIndex = prop !== targetFuncName;
    const isWrite = writeMethods.includes(targetFuncName);
    if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||
        !(isWrite || readMethods.includes(targetFuncName))) {
        return;
    }
    const method = async function (storeName, ...args) {
        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(
        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');
        let target = tx.store;
        if (useIndex)
            target = target.index(args.shift());
        // Must reject if op rejects.
        // If it's a write operation, must reject if tx.done rejects.
        // Must reject with op rejection first.
        // Must resolve with op value.
        // Must handle both promises (no unhandled rejections)
        return (await Promise.all([
            target[targetFuncName](...args),
            isWrite && tx.done,
        ]))[0];
    };
    cachedMethods.set(prop, method);
    return method;
}
(0,_wrap_idb_value_js__WEBPACK_IMPORTED_MODULE_0__.r)((oldTraps) => ({
    ...oldTraps,
    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),
    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),
}));




/***/ }),

/***/ "./node_modules/idb/build/wrap-idb-value.js":
/*!**************************************************!*\
  !*** ./node_modules/idb/build/wrap-idb-value.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   a: () => (/* binding */ reverseTransformCache),
/* harmony export */   i: () => (/* binding */ instanceOfAny),
/* harmony export */   r: () => (/* binding */ replaceTraps),
/* harmony export */   u: () => (/* binding */ unwrap),
/* harmony export */   w: () => (/* binding */ wrap)
/* harmony export */ });
const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);

let idbProxyableTypes;
let cursorAdvanceMethods;
// This is a function to prevent it throwing up in node environments.
function getIdbProxyableTypes() {
    return (idbProxyableTypes ||
        (idbProxyableTypes = [
            IDBDatabase,
            IDBObjectStore,
            IDBIndex,
            IDBCursor,
            IDBTransaction,
        ]));
}
// This is a function to prevent it throwing up in node environments.
function getCursorAdvanceMethods() {
    return (cursorAdvanceMethods ||
        (cursorAdvanceMethods = [
            IDBCursor.prototype.advance,
            IDBCursor.prototype.continue,
            IDBCursor.prototype.continuePrimaryKey,
        ]));
}
const cursorRequestMap = new WeakMap();
const transactionDoneMap = new WeakMap();
const transactionStoreNamesMap = new WeakMap();
const transformCache = new WeakMap();
const reverseTransformCache = new WeakMap();
function promisifyRequest(request) {
    const promise = new Promise((resolve, reject) => {
        const unlisten = () => {
            request.removeEventListener('success', success);
            request.removeEventListener('error', error);
        };
        const success = () => {
            resolve(wrap(request.result));
            unlisten();
        };
        const error = () => {
            reject(request.error);
            unlisten();
        };
        request.addEventListener('success', success);
        request.addEventListener('error', error);
    });
    promise
        .then((value) => {
        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval
        // (see wrapFunction).
        if (value instanceof IDBCursor) {
            cursorRequestMap.set(value, request);
        }
        // Catching to avoid "Uncaught Promise exceptions"
    })
        .catch(() => { });
    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This
    // is because we create many promises from a single IDBRequest.
    reverseTransformCache.set(promise, request);
    return promise;
}
function cacheDonePromiseForTransaction(tx) {
    // Early bail if we've already created a done promise for this transaction.
    if (transactionDoneMap.has(tx))
        return;
    const done = new Promise((resolve, reject) => {
        const unlisten = () => {
            tx.removeEventListener('complete', complete);
            tx.removeEventListener('error', error);
            tx.removeEventListener('abort', error);
        };
        const complete = () => {
            resolve();
            unlisten();
        };
        const error = () => {
            reject(tx.error || new DOMException('AbortError', 'AbortError'));
            unlisten();
        };
        tx.addEventListener('complete', complete);
        tx.addEventListener('error', error);
        tx.addEventListener('abort', error);
    });
    // Cache it for later retrieval.
    transactionDoneMap.set(tx, done);
}
let idbProxyTraps = {
    get(target, prop, receiver) {
        if (target instanceof IDBTransaction) {
            // Special handling for transaction.done.
            if (prop === 'done')
                return transactionDoneMap.get(target);
            // Polyfill for objectStoreNames because of Edge.
            if (prop === 'objectStoreNames') {
                return target.objectStoreNames || transactionStoreNamesMap.get(target);
            }
            // Make tx.store return the only store in the transaction, or undefined if there are many.
            if (prop === 'store') {
                return receiver.objectStoreNames[1]
                    ? undefined
                    : receiver.objectStore(receiver.objectStoreNames[0]);
            }
        }
        // Else transform whatever we get back.
        return wrap(target[prop]);
    },
    set(target, prop, value) {
        target[prop] = value;
        return true;
    },
    has(target, prop) {
        if (target instanceof IDBTransaction &&
            (prop === 'done' || prop === 'store')) {
            return true;
        }
        return prop in target;
    },
};
function replaceTraps(callback) {
    idbProxyTraps = callback(idbProxyTraps);
}
function wrapFunction(func) {
    // Due to expected object equality (which is enforced by the caching in `wrap`), we
    // only create one new func per func.
    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.
    if (func === IDBDatabase.prototype.transaction &&
        !('objectStoreNames' in IDBTransaction.prototype)) {
        return function (storeNames, ...args) {
            const tx = func.call(unwrap(this), storeNames, ...args);
            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);
            return wrap(tx);
        };
    }
    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In
    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the
    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense
    // with real promises, so each advance methods returns a new promise for the cursor object, or
    // undefined if the end of the cursor has been reached.
    if (getCursorAdvanceMethods().includes(func)) {
        return function (...args) {
            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
            // the original object.
            func.apply(unwrap(this), args);
            return wrap(cursorRequestMap.get(this));
        };
    }
    return function (...args) {
        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use
        // the original object.
        return wrap(func.apply(unwrap(this), args));
    };
}
function transformCachableValue(value) {
    if (typeof value === 'function')
        return wrapFunction(value);
    // This doesn't return, it just creates a 'done' promise for the transaction,
    // which is later returned for transaction.done (see idbObjectHandler).
    if (value instanceof IDBTransaction)
        cacheDonePromiseForTransaction(value);
    if (instanceOfAny(value, getIdbProxyableTypes()))
        return new Proxy(value, idbProxyTraps);
    // Return the same value back if we're not going to transform it.
    return value;
}
function wrap(value) {
    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because
    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.
    if (value instanceof IDBRequest)
        return promisifyRequest(value);
    // If we've already transformed this value before, reuse the transformed value.
    // This is faster, but it also provides object equality.
    if (transformCache.has(value))
        return transformCache.get(value);
    const newValue = transformCachableValue(value);
    // Not all types are transformed.
    // These may be primitive types, so they can't be WeakMap keys.
    if (newValue !== value) {
        transformCache.set(value, newValue);
        reverseTransformCache.set(newValue, value);
    }
    return newValue;
}
const unwrap = (value) => reverseTransformCache.get(value);




/***/ }),

/***/ "./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":
/*!***********************************************************************!*\
  !*** ./node_modules/workbox-window/build/workbox-window.prod.es5.mjs ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Workbox: () => (/* binding */ c),
/* harmony export */   messageSW: () => (/* binding */ n)
/* harmony export */ });
try{self["workbox:window:4.3.1"]&&_()}catch(n){}var n=function(n,t){return new Promise(function(i){var e=new MessageChannel;e.port1.onmessage=function(n){return i(n.data)},n.postMessage(t,[e.port2])})};function t(n,t){for(var i=0;i<t.length;i++){var e=t[i];e.enumerable=e.enumerable||!1,e.configurable=!0,"value"in e&&(e.writable=!0),Object.defineProperty(n,e.key,e)}}function i(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}try{self["workbox:core:4.3.1"]&&_()}catch(n){}var e=function(){var n=this;this.promise=new Promise(function(t,i){n.resolve=t,n.reject=i})},r=function(n,t){return new URL(n,location).href===new URL(t,location).href},o=function(n,t){Object.assign(this,t,{type:n})};function u(n){return function(){for(var t=[],i=0;i<arguments.length;i++)t[i]=arguments[i];try{return Promise.resolve(n.apply(this,t))}catch(n){return Promise.reject(n)}}}function a(n,t,i){return i?t?t(n):n:(n&&n.then||(n=Promise.resolve(n)),t?n.then(t):n)}function s(){}var c=function(c){var f,h;function v(n,t){var r;return void 0===t&&(t={}),(r=c.call(this)||this).t=n,r.i=t,r.o=0,r.u=new e,r.s=new e,r.h=new e,r.v=r.v.bind(i(i(r))),r.l=r.l.bind(i(i(r))),r.g=r.g.bind(i(i(r))),r.m=r.m.bind(i(i(r))),r}h=c,(f=v).prototype=Object.create(h.prototype),f.prototype.constructor=f,f.__proto__=h;var l,w,g,d=v.prototype;return d.register=u(function(n){var t,i,e=this,u=(void 0===n?{}:n).immediate,c=void 0!==u&&u;return t=function(){return e.p=Boolean(navigator.serviceWorker.controller),e.P=e.R(),a(e.k(),function(n){e.B=n,e.P&&(e.O=e.P,e.s.resolve(e.P),e.h.resolve(e.P),e.j(e.P),e.P.addEventListener("statechange",e.l,{once:!0}));var t=e.B.waiting;return t&&r(t.scriptURL,e.t)&&(e.O=t,Promise.resolve().then(function(){e.dispatchEvent(new o("waiting",{sw:t,wasWaitingBeforeRegister:!0}))})),e.O&&e.u.resolve(e.O),e.B.addEventListener("updatefound",e.g),navigator.serviceWorker.addEventListener("controllerchange",e.m,{once:!0}),"BroadcastChannel"in self&&(e.C=new BroadcastChannel("workbox"),e.C.addEventListener("message",e.v)),navigator.serviceWorker.addEventListener("message",e.v),e.B})},(i=function(){if(!c&&"complete"!==document.readyState)return function(n,t){if(!t)return n&&n.then?n.then(s):Promise.resolve()}(new Promise(function(n){return addEventListener("load",n)}))}())&&i.then?i.then(t):t(i)}),d.getSW=u(function(){return this.O||this.u.promise}),d.messageSW=u(function(t){return a(this.getSW(),function(i){return n(i,t)})}),d.R=function(){var n=navigator.serviceWorker.controller;if(n&&r(n.scriptURL,this.t))return n},d.k=u(function(){var n=this;return function(n,t){try{var i=n()}catch(n){return t(n)}return i&&i.then?i.then(void 0,t):i}(function(){return a(navigator.serviceWorker.register(n.t,n.i),function(t){return n.L=performance.now(),t})},function(n){throw n})}),d.j=function(t){n(t,{type:"WINDOW_READY",meta:"workbox-window"})},d.g=function(){var n=this.B.installing;this.o>0||!r(n.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=n,this.B.removeEventListener("updatefound",this.g)):(this.O=n,this.u.resolve(n)),++this.o,n.addEventListener("statechange",this.l)},d.l=function(n){var t=this,i=n.target,e=i.state,r=i===this.W,u=r?"external":"",a={sw:i,originalEvent:n};!r&&this.p&&(a.isUpdate=!0),this.dispatchEvent(new o(u+e,a)),"installed"===e?this._=setTimeout(function(){"installed"===e&&t.B.waiting===i&&t.dispatchEvent(new o(u+"waiting",a))},200):"activating"===e&&(clearTimeout(this._),r||this.s.resolve(i))},d.m=function(n){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new o("controlling",{sw:t,originalEvent:n})),this.h.resolve(t))},d.v=function(n){var t=n.data;this.dispatchEvent(new o("message",{data:t,originalEvent:n}))},l=v,(w=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&t(l.prototype,w),g&&t(l,g),v}(function(){function n(){this.D={}}var t=n.prototype;return t.addEventListener=function(n,t){this.T(n).add(t)},t.removeEventListener=function(n,t){this.T(n).delete(t)},t.dispatchEvent=function(n){n.target=this,this.T(n.type).forEach(function(t){return t(n)})},t.T=function(n){return this.D[n]=this.D[n]||new Set},n}());
//# sourceMappingURL=workbox-window.prod.es5.mjs.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************!*\
  !*** ./feedTheMonster.ts ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _src_data_api_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/data/api-data */ "./src/data/api-data.ts");
/* harmony import */ var _src_data_data_modal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./src/data/data-modal */ "./src/data/data-modal.ts");
/* harmony import */ var _src_sceneHandler_scene_handler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./src/sceneHandler/scene-handler */ "./src/sceneHandler/scene-handler.ts");
/* harmony import */ var _src_common_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/common/common */ "./src/common/common.ts");
/* harmony import */ var workbox_window__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! workbox-window */ "./node_modules/workbox-window/build/workbox-window.prod.es5.mjs");
/* harmony import */ var _global_variables__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./global-variables */ "./global-variables.ts");
/* harmony import */ var _src_Firebase_firebase_integration__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./src/Firebase/firebase-integration */ "./src/Firebase/firebase-integration.ts");
/* harmony import */ var _src_common_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./src/common/utils */ "./src/common/utils.ts");
/* harmony import */ var _src_components_audio_player__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./src/components/audio-player */ "./src/components/audio-player.ts");
/* harmony import */ var _src_common_event_names__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./src/common/event-names */ "./src/common/event-names.ts");










class App {
    canvas;
    versionInfoElement;
    lang;
    is_cached;
    progressBar;
    progressBarContainer;
    channel;
    sceneHandler;
    loadingElement;
    majVersion;
    minVersion;
    startSessionTime;
    firebaseIntegration;
    constructor(lang) {
        this.lang = lang;
        this.canvas = document.getElementById("canvas");
        this.channel = new BroadcastChannel("my-channel");
        this.progressBar = document.getElementById("progress-bar");
        this.progressBarContainer = document.getElementById("progress-bar-container");
        this.versionInfoElement = document.getElementById("version-info-id");
        this.loadingElement = document.getElementById('loading-screen');
        this.is_cached = this.initializeCachedData();
        this.firebaseIntegration = new _src_Firebase_firebase_integration__WEBPACK_IMPORTED_MODULE_6__.FirebaseIntegration();
        this.startSessionTime = 0;
        this.init();
        this.channel.addEventListener("message", this.handleServiceWorkerMessage);
        window.addEventListener("beforeunload", this.handleBeforeUnload);
        document.addEventListener(_src_common_event_names__WEBPACK_IMPORTED_MODULE_9__.VISIBILITY_CHANGE, this.handleVisibilityChange);
    }
    async init() {
        const font = _src_common_utils__WEBPACK_IMPORTED_MODULE_7__.Utils.getLanguageSpecificFont(this.lang);
        await this.loadAndCacheFont(font, `./assets/fonts/${font}.ttf`);
        await this.preloadGameAudios();
        this.handleLoadingScreen();
        this.registerWorkbox();
        this.setupCanvas();
        const data = await (0,_src_data_api_data__WEBPACK_IMPORTED_MODULE_0__.getData)();
        this.majVersion = data.majversion;
        this.minVersion = data.minversion;
        const dataModal = this.createDataModal(data);
        this.globalInitialization(data);
        this.logSessionStartFirebaseEvent();
        console.log(data);
        window.addEventListener("resize", async () => {
            this.handleResize(dataModal);
        });
        if (this.is_cached.has(this.lang)) {
            this.handleCachedScenario(dataModal);
        }
    }
    logSessionStartFirebaseEvent() {
        let lastSessionEndTime = localStorage.getItem("lastSessionEndTime");
        let lastTime = 0;
        this.startSessionTime = new Date().getTime();
        if (lastSessionEndTime) {
            let parsedTimestamp = parseInt(lastSessionEndTime);
            if (!isNaN(parsedTimestamp)) {
                lastTime = Math.abs(new Date().getTime() - parsedTimestamp);
            }
        }
        const daysSinceLast = lastTime ? lastTime / (1000 * 60 * 60 * 24) : 0;
        const roundedDaysSinceLast = parseFloat(daysSinceLast.toFixed(3));
        const sessionStartData = {
            cr_user_id: _global_variables__WEBPACK_IMPORTED_MODULE_5__.pseudoId,
            ftm_language: _global_variables__WEBPACK_IMPORTED_MODULE_5__.lang,
            profile_number: 0,
            version_number: document.getElementById("version-info-id").innerHTML,
            json_version_number: !!this.majVersion && !!this.minVersion ? this.majVersion.toString() + "." + this.minVersion.toString() : "",
            event_date_with_timestamp: new Date() + ' ' + new Date().getTime(),
            days_since_last: roundedDaysSinceLast,
        };
        this.firebaseIntegration.sendSessionStartEvent(sessionStartData);
    }
    logSessionEndFirebaseEvent() {
        const sessionEndData = {
            cr_user_id: _global_variables__WEBPACK_IMPORTED_MODULE_5__.pseudoId,
            ftm_language: _global_variables__WEBPACK_IMPORTED_MODULE_5__.lang,
            profile_number: 0,
            version_number: document.getElementById("version-info-id").innerHTML,
            json_version_number: !!this.majVersion && !!this.minVersion ? this.majVersion.toString() + "." + this.minVersion.toString() : "",
            event_date_with_timestamp: new Date() + ' ' + new Date().getTime(),
            duration: (new Date().getTime() - this.startSessionTime) / 1000,
        };
        localStorage.setItem("lastSessionEndTime", new Date().getTime().toString());
        this.firebaseIntegration.sendSessionEndEvent(sessionEndData);
    }
    initializeCachedData() {
        const storedData = localStorage.getItem(_src_common_common__WEBPACK_IMPORTED_MODULE_3__.IsCached);
        return storedData ? new Map(JSON.parse(storedData)) : new Map();
    }
    async loadAndCacheFont(fontName, fontPath) {
        try {
            const cache = await caches.open('fontCache');
            const response = await cache.match(fontPath);
            if (!response) {
                const fontResponse = await fetch(fontPath);
                const fontBlob = await fontResponse.blob();
                await cache.put(fontPath, new Response(fontBlob));
                const font = new FontFace(fontName, `url(${fontPath}) format('truetype')`);
                await font.load();
                document.fonts.add(font);
            }
            else {
                const font = new FontFace(fontName, `url(${fontPath}) format('truetype')`);
                await font.load();
                document.fonts.add(font);
            }
        }
        catch (error) {
            console.error(`Failed to load and cache font: ${error}`);
        }
    }
    handleLoadingScreen = () => {
        if (this.is_cached.get(_global_variables__WEBPACK_IMPORTED_MODULE_5__.lang)) {
            this.loadingElement.style.zIndex = '-1';
            this.loadingElement.style.display = 'none';
            this.progressBarContainer.style.display = "none";
            this.progressBar.style.display = "none";
        }
        else {
            this.progressBarContainer.style.display = "flex";
            this.progressBar.style.display = "flex";
            this.progressBar.style.width = "30%";
        }
    };
    async registerWorkbox() {
        if ("serviceWorker" in navigator) {
            try {
                const wb = new workbox_window__WEBPACK_IMPORTED_MODULE_4__.Workbox("./sw.js", {});
                await wb.register();
                await navigator.serviceWorker.ready;
                if (!this.is_cached.has(this.lang)) {
                    this.channel.postMessage({ command: "Cache", data: this.lang });
                }
                navigator.serviceWorker.addEventListener("message", this.handleServiceWorkerMessage);
            }
            catch (error) {
                console.error(`Failed to register service worker: ${error}`);
            }
        }
    }
    setupCanvas() {
        this.canvas.height = window.innerHeight;
        this.canvas.width = window.screen.width > 420 ? 420 : window.innerWidth;
    }
    createDataModal(data) {
        return new _src_data_data_modal__WEBPACK_IMPORTED_MODULE_1__.DataModal(data.title, data.OtherAudios, data.Levels, data.FeedbackTexts, data.RightToLeft, data.FeedbackAudios, data.majversion, data.minversion, data.version);
    }
    globalInitialization(data) {
        globalThis.aboutCompany = data.aboutCompany;
        globalThis.descriptionText = data.descriptionText;
    }
    handleResize(dataModal) {
        if (this.is_cached.has(this.lang)) {
            this.updateVersionInfoElement(dataModal);
            this.setupCanvas();
            this.reinitializeSceneHandler(dataModal);
        }
    }
    updateVersionInfoElement(dataModal) {
        if (this.is_cached.has(this.lang) && _global_variables__WEBPACK_IMPORTED_MODULE_5__.Debugger.DevelopmentLink) {
            if (dataModal.majVersion && dataModal.minVersion) {
                this.versionInfoElement.innerHTML += `/j.v${dataModal.majVersion}.${dataModal.minVersion}`;
            }
            else if (dataModal.version) {
                this.versionInfoElement.innerHTML += `/j.v${dataModal.version}`;
            }
            document.getElementById("toggle-btn").style.display = "block";
        }
    }
    reinitializeSceneHandler(dataModal) {
        delete this.sceneHandler;
        this.sceneHandler = new _src_sceneHandler_scene_handler__WEBPACK_IMPORTED_MODULE_2__.SceneHandler(this.canvas, dataModal);
        this.passingDataToContainer();
    }
    handleCachedScenario(dataModal) {
        this.updateVersionInfoElement(dataModal);
        this.sceneHandler = new _src_sceneHandler_scene_handler__WEBPACK_IMPORTED_MODULE_2__.SceneHandler(this.canvas, dataModal);
        this.passingDataToContainer();
    }
    passingDataToContainer = () => {
        if (window.Android) {
            if (this.is_cached.get(this.lang) == true) {
                window.Android.cachedStatus(true);
            }
            else {
                window.Android.cachedStatus(false);
            }
        }
    };
    setContainerAppOrientation() {
        if (window.Android) {
            window.Android.setContainerAppOrientation("portrait");
        }
    }
    handleUpdateFoundMessage() {
        let text = "Update Found\nPress ok to update";
        const userConfirmed = confirm(text);
        if (userConfirmed) {
            window.location.reload();
        }
        else {
            text = "You canceled!";
        }
    }
    handleLoadingMessage = (data) => {
        if (this.progressBarContainer && this.progressBar) {
            this.progressBarContainer.style.display = "flex";
            this.progressBar.style.display = "flex";
            if (parseInt(this.progressBar.style.width || "0") >= 40) {
                this.progressBar.style.width = `${data.data}%`;
            }
            if (data.data % 100 === 0) {
                this.is_cached.set(this.lang, true);
                localStorage.setItem(_src_common_common__WEBPACK_IMPORTED_MODULE_3__.IsCached, JSON.stringify(Array.from(this.is_cached.entries())));
                localStorage.setItem("version" + this.lang, data.version);
                window.location.reload();
            }
            this.progressBar.style.width = `${data.data}%`;
        }
    };
    handleServiceWorkerRegistration = (registration) => {
        if (registration.installing) {
            registration.installing.postMessage({
                type: "Registration",
                value: this.lang,
            });
        }
    };
    handleServiceWorkerMessage = (event) => {
        if (event.data.msg === "Loading") {
            this.handleLoadingMessage(event.data);
        }
        else if (event.data.msg === "Update Found") {
            this.handleUpdateFoundMessage();
        }
    };
    handleVisibilityChange = () => {
        if (document.visibilityState === "visible") {
            this.logSessionStartFirebaseEvent();
        }
        else {
            this.logSessionEndFirebaseEvent();
        }
    };
    handleBeforeUnload = async (event) => {
        this.logSessionEndFirebaseEvent();
    };
    preloadGameAudios = async () => {
        let audioUrls = [
            "./assets/audios/intro.mp3",
            "./assets/audios/Cheering-02.mp3",
            "./assets/audios/onDrag.mp3",
            "./assets/audios/timeout.mp3",
            "./assets/audios/LevelWinFanfare.mp3",
            "./assets/audios/LevelLoseFanfare.mp3",
            "./assets/audios/ButtonClick.mp3",
            "./assets/audios/Monster Spits wrong stones-01.mp3",
            "./assets/audios/Disapointed-05.mp3",
            "./assets/audios/MonsterSpit.mp3",
            "./assets/audios/Eat.mp3",
        ];
        return new Promise((resolve, reject) => {
            const preloadPromises = audioUrls.map((audioSrc) => new _src_components_audio_player__WEBPACK_IMPORTED_MODULE_8__.AudioPlayer().preloadGameAudio(audioSrc));
            Promise.all(preloadPromises)
                .then(() => {
                console.log("All Game audios files have been preloaded and are ready to use.");
                resolve();
            })
                .catch((error) => {
                console.error("Error preloading audio:", error);
                reject(error);
            });
        });
    };
}
const app = new App(_global_variables__WEBPACK_IMPORTED_MODULE_5__.lang);

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,