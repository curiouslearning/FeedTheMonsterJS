/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{var t={52:function(t){var e;e=()=>(()=>{"use strict";var t=[,(t,e,i)=>{i.r(e),i.d(e,{default:()=>a});var n,s=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(t={}){var e,i,s=t;function a(){function t(t){const a=n;i=e=0,n=new Map,a.forEach((e=>{try{e(t)}catch(t){console.error(t)}})),this.ob(),s&&s.Tb()}let e=0,i=0,n=new Map,s=null,a=null;this.requestAnimationFrame=function(s){e||(e=requestAnimationFrame(t.bind(this)));const a=++i;return n.set(a,s),a},this.cancelAnimationFrame=function(t){n.delete(t),e&&0==n.size&&(cancelAnimationFrame(e),e=0)},this.Rb=function(t){a&&(document.body.remove(a),a=null),t||(a=document.createElement("div"),a.style.backgroundColor="black",a.style.position="fixed",a.style.right=0,a.style.top=0,a.style.color="white",a.style.padding="4px",a.innerHTML="RIVE FPS",t=function(t){a.innerHTML="RIVE FPS "+t.toFixed(1)},document.body.appendChild(a)),s=new function(){let e=0,i=0;this.Tb=function(){var n=performance.now();i?(++e,1e3<(n-=i)&&(t(1e3*e/n),e=i=0)):(i=n,e=0)}}},this.Ob=function(){a&&(document.body.remove(a),a=null),s=null},this.ob=function(){}}function o(t){console.assert(!0);const e=new Map;let i=-1/0;this.push=function(n){return n=n+((1<<t)-1)>>t,e.has(n)&&clearTimeout(e.get(n)),e.set(n,setTimeout((function(){e.delete(n),0==e.length?i=-1/0:n==i&&(i=Math.max(...e.keys()),console.assert(i<n))}),1e3)),i=Math.max(n,i),i<<t}}s.ready=new Promise(((t,n)=>{e=t,i=n}));const r=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){r&&r();let t=s.decodeAudio;s.decodeAudio=function(e,i){i(e=t(e))};let e=s.decodeFont;s.decodeFont=function(t,i){i(t=e(t))};const i=s.FileAssetLoader;s.ptrToAsset=t=>{let e=s.ptrToFileAsset(t);return e.isImage?s.ptrToImageAsset(t):e.isFont?s.ptrToFontAsset(t):e.isAudio?s.ptrToAudioAsset(t):e},s.CustomFileAssetLoader=i.extend("CustomFileAssetLoader",{__construct:function({loadContents:t}){this.__parent.__construct.call(this),this.Gb=t},loadContents:function(t,e){return t=s.ptrToAsset(t),this.Gb(t,e)}}),s.CDNFileAssetLoader=i.extend("CDNFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this)},loadContents:function(t){let e=s.ptrToAsset(t);return""!==(t=e.cdnUuid)&&(i=e.cdnBaseUrl+"/"+t,(n=new XMLHttpRequest).responseType="arraybuffer",n.onreadystatechange=function(){4==n.readyState&&200==n.status&&(t=>{e.decode(new Uint8Array(t.response))})(n)},n.open("GET",i,!0),n.send(null),!0);var i,n}}),s.FallbackFileAssetLoader=i.extend("FallbackFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this),this.kb=[]},addLoader:function(t){this.kb.push(t)},loadContents:function(t,e){for(let i of this.kb)if(i.loadContents(t,e))return!0;return!1}})};const h="createConicGradient createImageData createLinearGradient createPattern createRadialGradient getContextAttributes getImageData getLineDash getTransform isContextLost isPointInPath isPointInStroke measureText".split(" "),l=new function(){function t(){if(!e){var t=document.createElement("canvas"),o={alpha:1,depth:0,stencil:0,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:1,renderViaOffscreenBackBuffer:1};let r;if(/iPhone|iPad|iPod/i.test(navigator.userAgent)){if(r=t.getContext("webgl",o),i=1,!r)return console.log("No WebGL support. Image mesh will not be drawn."),!1}else if(r=t.getContext("webgl2",o))i=2;else{if(!(r=t.getContext("webgl",o)))return console.log("No WebGL support. Image mesh will not be drawn."),!1;i=1}function h(t,e,i){if(e=r.createShader(e),r.shaderSource(e,i),r.compileShader(e),0<((i=r.getShaderInfoLog(e))||"").length)throw i;r.attachShader(t,e)}if(r=new Proxy(r,{get:(t,e)=>t.isContextLost()?(l||(console.error("Cannot render the mesh because the GL Context was lost. Tried to invoke ",e),l=!0),"function"==typeof t[e]?function(){}:void 0):"function"==typeof t[e]?function(...i){return t[e].apply(t,i)}:t[e],set(t,e,i){if(!t.isContextLost())return t[e]=i,!0;l||(console.error("Cannot render the mesh because the GL Context was lost. Tried to set property "+e),l=!0)}}),n=Math.min(r.getParameter(r.MAX_RENDERBUFFER_SIZE),r.getParameter(r.MAX_TEXTURE_SIZE)),h(t=r.createProgram(),r.VERTEX_SHADER,"attribute vec2 vertex;\n                attribute vec2 uv;\n                uniform vec4 mat;\n                uniform vec2 translate;\n                varying vec2 st;\n                void main() {\n                    st = uv;\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\n                }"),h(t,r.FRAGMENT_SHADER,"precision highp float;\n                uniform sampler2D image;\n                varying vec2 st;\n                void main() {\n                    gl_FragColor = texture2D(image, st);\n                }"),r.bindAttribLocation(t,0,"vertex"),r.bindAttribLocation(t,1,"uv"),r.linkProgram(t),0<((o=r.getProgramInfoLog(t))||"").trim().length)throw o;s=r.getUniformLocation(t,"mat"),a=r.getUniformLocation(t,"translate"),r.useProgram(t),r.bindBuffer(r.ARRAY_BUFFER,r.createBuffer()),r.enableVertexAttribArray(0),r.enableVertexAttribArray(1),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,r.createBuffer()),r.uniform1i(r.getUniformLocation(t,"image"),0),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),e=r}return!0}let e=null,i=0,n=0,s=null,a=null,r=0,h=0,l=!1;t(),this.hc=function(){return t(),n},this.Mb=function(t){e.deleteTexture&&e.deleteTexture(t)},this.Lb=function(n){if(!t())return null;const s=e.createTexture();return s?(e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),2==i?(e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_LINEAR),e.generateMipmap(e.TEXTURE_2D)):e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),s):null};const c=new o(8),u=new o(8),d=new o(10),m=new o(10);this.Qb=function(i,n,o,l,p){if(t()){var g=c.push(i),f=u.push(n);if(e.canvas){for(var v of(e.canvas.width==g&&e.canvas.height==f||(e.canvas.width=g,e.canvas.height=f),e.viewport(0,f-n,i,n),e.disable(e.SCISSOR_TEST),e.clearColor(0,0,0,0),e.clear(e.COLOR_BUFFER_BIT),e.enable(e.SCISSOR_TEST),o.sort(((t,e)=>e.wb-t.wb)),g=d.push(l),r!=g&&(e.bufferData(e.ARRAY_BUFFER,8*g,e.DYNAMIC_DRAW),r=g),g=0,o))e.bufferSubData(e.ARRAY_BUFFER,g,v.Ta),g+=4*v.Ta.length;for(var b of(console.assert(g==4*l),o))e.bufferSubData(e.ARRAY_BUFFER,g,b.Db),g+=4*b.Db.length;for(var w of(console.assert(g==8*l),g=m.push(p),h!=g&&(e.bufferData(e.ELEMENT_ARRAY_BUFFER,2*g,e.DYNAMIC_DRAW),h=g),v=0,o))e.bufferSubData(e.ELEMENT_ARRAY_BUFFER,v,w.indices),v+=2*w.indices.length;console.assert(v==2*p),w=0,b=!0,g=v=0;for(const t of o){t.image.Ka!=w&&(e.bindTexture(e.TEXTURE_2D,t.image.Ja||null),w=t.image.Ka),t.mc?(e.scissor(t.Ya,f-t.Za-t.jb,t.Ac,t.jb),b=!0):b&&(e.scissor(0,f-n,i,n),b=!1),o=2/i;const r=-2/n;e.uniform4f(s,t.ha[0]*o*t.Ba,t.ha[1]*r*t.Ca,t.ha[2]*o*t.Ba,t.ha[3]*r*t.Ca),e.uniform2f(a,t.ha[4]*o*t.Ba+o*(t.Ya-t.ic*t.Ba)-1,t.ha[5]*r*t.Ca+r*(t.Za-t.jc*t.Ca)+1),e.vertexAttribPointer(0,2,e.FLOAT,!1,0,g),e.vertexAttribPointer(1,2,e.FLOAT,!1,0,g+4*l),e.drawElements(e.TRIANGLES,t.indices.length,e.UNSIGNED_SHORT,v),g+=4*t.Ta.length,v+=2*t.indices.length}console.assert(g==4*l),console.assert(v==2*p)}}},this.canvas=function(){return t()&&e.canvas}},c=s.onRuntimeInitialized;s.onRuntimeInitialized=function(){function t(t){switch(t){case p.srcOver:return"source-over";case p.screen:return"screen";case p.overlay:return"overlay";case p.darken:return"darken";case p.lighten:return"lighten";case p.colorDodge:return"color-dodge";case p.colorBurn:return"color-burn";case p.hardLight:return"hard-light";case p.softLight:return"soft-light";case p.difference:return"difference";case p.exclusion:return"exclusion";case p.multiply:return"multiply";case p.hue:return"hue";case p.saturation:return"saturation";case p.color:return"color";case p.luminosity:return"luminosity"}}function e(t){return"rgba("+((16711680&t)>>>16)+","+((65280&t)>>>8)+","+((255&t)>>>0)+","+((4278190080&t)>>>24)/255+")"}function i(){0<T.length&&(l.Qb(E.drawWidth(),E.drawHeight(),T,A,I),T=[],I=A=0,E.reset(512,512));for(const t of _){for(const e of t.H)e();t.H=[]}_.clear()}c&&c();var n=s.RenderPaintStyle;const o=s.RenderPath,r=s.RenderPaint,u=s.Renderer,d=s.StrokeCap,m=s.StrokeJoin,p=s.BlendMode,g=n.fill,f=n.stroke,v=s.FillRule.evenOdd;let b=1;var w=s.RenderImage.extend("CanvasRenderImage",{__construct:function({la:t,xa:e}={}){this.__parent.__construct.call(this),this.Ka=b,b=b+1&2147483647||1,this.la=t,this.xa=e},__destruct:function(){this.Ja&&(l.Mb(this.Ja),URL.revokeObjectURL(this.Wa)),this.__parent.__destruct.call(this)},decode:function(t){var e=this;e.xa&&e.xa(e);var i=new Image;e.Wa=URL.createObjectURL(new Blob([t],{type:"image/png"})),i.onload=function(){e.Fb=i,e.Ja=l.Lb(i),e.size(i.width,i.height),e.la&&e.la(e)},i.src=e.Wa}}),y=o.extend("CanvasRenderPath",{__construct:function(){this.__parent.__construct.call(this),this.T=new Path2D},rewind:function(){this.T=new Path2D},addPath:function(t,e,i,n,s,a,o){var r=this.T,h=r.addPath;t=t.T;const l=new DOMMatrix;l.a=e,l.b=i,l.c=n,l.d=s,l.e=a,l.f=o,h.call(r,t,l)},fillRule:function(t){this.Va=t},moveTo:function(t,e){this.T.moveTo(t,e)},lineTo:function(t,e){this.T.lineTo(t,e)},cubicTo:function(t,e,i,n,s,a){this.T.bezierCurveTo(t,e,i,n,s,a)},close:function(){this.T.closePath()}}),S=r.extend("CanvasRenderPaint",{color:function(t){this.Xa=e(t)},thickness:function(t){this.Ib=t},join:function(t){switch(t){case m.miter:this.Ia="miter";break;case m.round:this.Ia="round";break;case m.bevel:this.Ia="bevel"}},cap:function(t){switch(t){case d.butt:this.Ha="butt";break;case d.round:this.Ha="round";break;case d.square:this.Ha="square"}},style:function(t){this.Hb=t},blendMode:function(e){this.Eb=t(e)},clearGradient:function(){this.ja=null},linearGradient:function(t,e,i,n){this.ja={yb:t,zb:e,bb:i,cb:n,Ra:[]}},radialGradient:function(t,e,i,n){this.ja={yb:t,zb:e,bb:i,cb:n,Ra:[],ec:!0}},addStop:function(t,e){this.ja.Ra.push({color:t,stop:e})},completeGradient:function(){},draw:function(t,i,n){let s=this.Hb;var a=this.Xa,o=this.ja;if(t.globalCompositeOperation=this.Eb,null!=o){a=o.yb;var r=o.zb;const i=o.bb;var h=o.cb;const n=o.Ra;o.ec?(o=i-a,h-=r,a=t.createRadialGradient(a,r,0,a,r,Math.sqrt(o*o+h*h))):a=t.createLinearGradient(a,r,i,h);for(let t=0,i=n.length;t<i;t++)r=n[t],a.addColorStop(r.stop,e(r.color));this.Xa=a,this.ja=null}switch(s){case f:t.strokeStyle=a,t.lineWidth=this.Ib,t.lineCap=this.Ha,t.lineJoin=this.Ia,t.stroke(i);break;case g:t.fillStyle=a,t.fill(i,n)}}});const _=new Set;let E=null,T=[],A=0,I=0;var C=s.CanvasRenderer=u.extend("Renderer",{__construct:function(t){this.__parent.__construct.call(this),this.S=[1,0,0,1,0,0],this.C=t.getContext("2d"),this.Ua=t,this.H=[]},save:function(){this.S.push(...this.S.slice(this.S.length-6)),this.H.push(this.C.save.bind(this.C))},restore:function(){const t=this.S.length-6;if(6>t)throw"restore() called without matching save().";this.S.splice(t),this.H.push(this.C.restore.bind(this.C))},transform:function(t,e,i,n,s,a){const o=this.S,r=o.length-6;o.splice(r,6,o[r]*t+o[r+2]*e,o[r+1]*t+o[r+3]*e,o[r]*i+o[r+2]*n,o[r+1]*i+o[r+3]*n,o[r]*s+o[r+2]*a+o[r+4],o[r+1]*s+o[r+3]*a+o[r+5]),this.H.push(this.C.transform.bind(this.C,t,e,i,n,s,a))},rotate:function(t){const e=Math.sin(t);t=Math.cos(t),this.transform(t,e,-e,t,0,0)},_drawPath:function(t,e){this.H.push(e.draw.bind(e,this.C,t.T,t.Va===v?"evenodd":"nonzero"))},_drawRiveImage:function(e,i,n){var s=e.Fb;if(s){var a=this.C,o=t(i);this.H.push((function(){a.globalCompositeOperation=o,a.globalAlpha=n,a.drawImage(s,0,0),a.globalAlpha=1}))}},_getMatrix:function(t){const e=this.S,i=e.length-6;for(let n=0;6>n;++n)t[n]=e[i+n]},_drawImageMesh:function(e,n,a,o,r,h,c,u,d,m){var p=this.C.canvas.width,g=this.C.canvas.height;const f=d-c,v=m-u;c=Math.max(c,0),u=Math.max(u,0),d=Math.min(d,p),m=Math.min(m,g);const b=d-c,w=m-u;if(console.assert(b<=Math.min(f,p)),console.assert(w<=Math.min(v,g)),!(0>=b||0>=w)){d=b<f||w<v,p=m=1;var y=Math.ceil(b*m),S=Math.ceil(w*p);g=l.hc(),y>g&&(m*=g/y,y=g),S>g&&(p*=g/S,S=g),E||(E=new s.DynamicRectanizer(g),E.reset(512,512)),0>(g=E.addRect(y,S))&&(i(),_.add(this),g=E.addRect(y,S),console.assert(0<=g));var C=65535&g,P=g>>16;T.push({ha:this.S.slice(this.S.length-6),image:e,Ya:C,Za:P,ic:c,jc:u,Ac:y,jb:S,Ba:m,Ca:p,Ta:new Float32Array(o),Db:new Float32Array(r),indices:new Uint16Array(h),mc:d,wb:e.Ka<<1|(d?1:0)}),A+=o.length,I+=h.length;var x=this.C,L=t(n);this.H.push((function(){x.save(),x.resetTransform(),x.globalCompositeOperation=L,x.globalAlpha=a;const t=l.canvas();t&&x.drawImage(t,C,P,y,S,c,u,b,w),x.restore()}))}},_clipPath:function(t){this.H.push(this.C.clip.bind(this.C,t.T,t.Va===v?"evenodd":"nonzero"))},clear:function(){_.add(this),this.H.push(this.C.clearRect.bind(this.C,0,0,this.Ua.width,this.Ua.height))},flush:function(){},translate:function(t,e){this.transform(1,0,0,1,t,e)}});s.makeRenderer=function(t){const e=new C(t),i=e.C;return new Proxy(e,{get(t,n){if("function"==typeof t[n])return function(...e){return t[n].apply(t,e)};if("function"==typeof i[n]){if(-1<h.indexOf(n))throw Error("RiveException: Method call to '"+n+"()' is not allowed, as the renderer cannot immediately pass through the return                 values of any canvas 2d context methods.");return function(...t){e.H.push(i[n].bind(i,...t))}}return t[n]},set(t,n,s){if(n in i)return e.H.push((()=>{i[n]=s})),!0}})},s.decodeImage=function(t,e){new w({la:e}).decode(t)},s.renderFactory={makeRenderPaint:function(){return new S},makeRenderPath:function(){return new y},makeRenderImage:function(){let t=x;return new w({xa:()=>{t.total++},la:()=>{if(t.loaded++,t.loaded===t.total){const e=t.ready;e&&(e(),t.ready=null)}}})}};let P=s.load,x=null;s.load=function(t,e,i=!0){const n=new s.FallbackFileAssetLoader;return void 0!==e&&n.addLoader(e),i&&(e=new s.CDNFileAssetLoader,n.addLoader(e)),new Promise((function(e){let i=null;x={total:0,loaded:0,ready:function(){e(i)}},i=P(t,n),0==x.total&&e(i)}))},n=new a,s.requestAnimationFrame=n.requestAnimationFrame.bind(n),s.cancelAnimationFrame=n.cancelAnimationFrame.bind(n),s.enableFPSCounter=n.Rb.bind(n),s.disableFPSCounter=n.Ob,n.ob=i,s.resolveAnimationFrame=i,s.cleanup=function(){E&&E.delete()}};var u,d,m=Object.assign({},s),p="./this.program",g="object"==typeof window,f="function"==typeof importScripts,v="";(g||f)&&(f?v=self.location.href:"undefined"!=typeof document&&document.currentScript&&(v=document.currentScript.src),n&&(v=n),v=0!==v.indexOf("blob:")?v.substr(0,v.replace(/[?#].*/,"").lastIndexOf("/")+1):"",f&&(d=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),u=(t,e,i)=>{var n=new XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?e(n.response):i()},n.onerror=i,n.send(null)});var b,w=s.print||console.log.bind(console),y=s.printErr||console.error.bind(console);Object.assign(s,m),m=null,s.thisProgram&&(p=s.thisProgram),s.wasmBinary&&(b=s.wasmBinary),s.noExitRuntime,"object"!=typeof WebAssembly&&V("no native wasm support detected");var S,_,E,T,A,I,C,P,x,L,k=!1;function D(){var t=S.buffer;s.HEAP8=E=new Int8Array(t),s.HEAP16=A=new Int16Array(t),s.HEAP32=C=new Int32Array(t),s.HEAPU8=T=new Uint8Array(t),s.HEAPU16=I=new Uint16Array(t),s.HEAPU32=P=new Uint32Array(t),s.HEAPF32=x=new Float32Array(t),s.HEAPF64=L=new Float64Array(t)}var B,M=[],z=[],O=[];function R(){var t=s.preRun.shift();M.unshift(t)}var N,F=0,j=null,U=null;function V(t){throw s.onAbort&&s.onAbort(t),y(t="Aborted("+t+")"),k=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),i(t),t}function W(t){return t.startsWith("data:application/octet-stream;base64,")}if(!W(N="canvas_advanced.wasm")){var H=N;N=s.locateFile?s.locateFile(H,v):v+H}function X(t){if(t==N&&b)return new Uint8Array(b);if(d)return d(t);throw"both async and sync fetching of the wasm failed"}function Y(t,e,i){return function(t){if(!b&&(g||f)){if("function"==typeof fetch&&!t.startsWith("file://"))return fetch(t,{credentials:"same-origin"}).then((e=>{if(!e.ok)throw"failed to load wasm binary file at '"+t+"'";return e.arrayBuffer()})).catch((()=>X(t)));if(u)return new Promise(((e,i)=>{u(t,(t=>e(new Uint8Array(t))),i)}))}return Promise.resolve().then((()=>X(t)))}(t).then((t=>WebAssembly.instantiate(t,e))).then((t=>t)).then(i,(t=>{y("failed to asynchronously prepare wasm: "+t),V(t)}))}var $,G,q={437756:(t,e,i,n,s)=>{if("undefined"==typeof window||void 0===(window.AudioContext||window.webkitAudioContext))return 0;if(void 0===window.h){window.h={Aa:0},window.h.I={},window.h.I.ya=t,window.h.I.capture=e,window.h.I.La=i,window.h.ga={},window.h.ga.stopped=n,window.h.ga.xb=s;let a=window.h;a.D=[],a.yc=function(t){for(var e=0;e<a.D.length;++e)if(null==a.D[e])return a.D[e]=t,e;return a.D.push(t),a.D.length-1},a.Cb=function(t){for(a.D[t]=null;0<a.D.length&&null==a.D[a.D.length-1];)a.D.pop()},a.Sc=function(t){for(var e=0;e<a.D.length;++e)if(a.D[e]==t)return a.Cb(e)},a.ra=function(t){return a.D[t]},a.Bb=["touchend","click"],a.unlock=function(){for(var t=0;t<a.D.length;++t){var e=a.D[t];null!=e&&null!=e.J&&e.state===a.ga.xb&&e.J.resume().then((()=>{xi(e.pb)}),(t=>{console.error("Failed to resume audiocontext",t)}))}a.Bb.map((function(t){document.removeEventListener(t,a.unlock,!0)}))},a.Bb.map((function(t){document.addEventListener(t,a.unlock,!0)}))}return window.h.Aa+=1,1},439934:()=>{void 0!==window.h&&(--window.h.Aa,0===window.h.Aa&&delete window.h)},440098:()=>void 0!==navigator.mediaDevices&&void 0!==navigator.mediaDevices.getUserMedia,440202:()=>{try{var t=new(window.AudioContext||window.webkitAudioContext),e=t.sampleRate;return t.close(),e}catch(t){return 0}},440373:(t,e,i,n,s,a)=>{if(void 0===window.h)return-1;var o={},r={};return t==window.h.I.ya&&0!=i&&(r.sampleRate=i),o.J=new(window.AudioContext||window.webkitAudioContext)(r),o.J.suspend(),o.state=window.h.ga.stopped,i=0,t!=window.h.I.ya&&(i=e),o.Z=o.J.createScriptProcessor(n,i,e),o.Z.onaudioprocess=function(i){if(null!=o.sa&&0!=o.sa.length||(o.sa=new Float32Array(x.buffer,s,n*e)),t==window.h.I.capture||t==window.h.I.La){for(var r=0;r<e;r+=1)for(var h=i.inputBuffer.getChannelData(r),l=o.sa,c=0;c<n;c+=1)l[c*e+r]=h[c];ki(a,n,s)}if(t==window.h.I.ya||t==window.h.I.La)for(Di(a,n,s),r=0;r<i.outputBuffer.numberOfChannels;++r)for(h=i.outputBuffer.getChannelData(r),l=o.sa,c=0;c<n;c+=1)h[c]=l[c*e+r];else for(r=0;r<i.outputBuffer.numberOfChannels;++r)i.outputBuffer.getChannelData(r).fill(0)},t!=window.h.I.capture&&t!=window.h.I.La||navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(t){o.Da=o.J.createMediaStreamSource(t),o.Da.connect(o.Z),o.Z.connect(o.J.destination)})).catch((function(t){console.log("Failed to get user media: "+t)})),t==window.h.I.ya&&o.Z.connect(o.J.destination),o.pb=a,window.h.yc(o)},443250:t=>window.h.ra(t).J.sampleRate,443323:t=>{void 0!==(t=window.h.ra(t)).Z&&(t.Z.onaudioprocess=function(){},t.Z.disconnect(),t.Z=void 0),void 0!==t.Da&&(t.Da.disconnect(),t.Da=void 0),t.J.close(),t.J=void 0,t.pb=void 0},443723:t=>{window.h.Cb(t)},443773:t=>{(t=window.h.ra(t)).J.resume(),t.state=window.h.ga.xb},443912:t=>{(t=window.h.ra(t)).J.suspend(),t.state=window.h.ga.stopped}},K=t=>{for(;0<t.length;)t.shift()(s)},J=(t,e)=>{for(var i=0,n=t.length-1;0<=n;n--){var s=t[n];"."===s?t.splice(n,1):".."===s?(t.splice(n,1),i++):i&&(t.splice(n,1),i--)}if(e)for(;i;i--)t.unshift("..");return t},Q=t=>{var e="/"===t.charAt(0),i="/"===t.substr(-1);return(t=J(t.split("/").filter((t=>!!t)),!e).join("/"))||e||(t="."),t&&i&&(t+="/"),(e?"/":"")+t},Z=t=>{var e=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(t).slice(1);return t=e[0],e=e[1],t||e?(e&&(e=e.substr(0,e.length-1)),t+e):"."},tt=t=>{if("/"===t)return"/";var e=(t=(t=Q(t)).replace(/\/$/,"")).lastIndexOf("/");return-1===e?t:t.substr(e+1)},et=t=>(et=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return t=>crypto.getRandomValues(t);V("initRandomDevice")})())(t);function it(){for(var t="",e=!1,i=arguments.length-1;-1<=i&&!e;i--){if("string"!=typeof(e=0<=i?arguments[i]:"/"))throw new TypeError("Arguments to path.resolve must be strings");if(!e)return"";t=e+"/"+t,e="/"===e.charAt(0)}return(e?"/":"")+(t=J(t.split("/").filter((t=>!!t)),!e).join("/"))||"."}var nt="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,st=(t,e,i)=>{var n=e+i;for(i=e;t[i]&&!(i>=n);)++i;if(16<i-e&&t.buffer&&nt)return nt.decode(t.subarray(e,i));for(n="";e<i;){var s=t[e++];if(128&s){var a=63&t[e++];if(192==(224&s))n+=String.fromCharCode((31&s)<<6|a);else{var o=63&t[e++];65536>(s=224==(240&s)?(15&s)<<12|a<<6|o:(7&s)<<18|a<<12|o<<6|63&t[e++])?n+=String.fromCharCode(s):(s-=65536,n+=String.fromCharCode(55296|s>>10,56320|1023&s))}}else n+=String.fromCharCode(s)}return n},at=[],ot=t=>{for(var e=0,i=0;i<t.length;++i){var n=t.charCodeAt(i);127>=n?e++:2047>=n?e+=2:55296<=n&&57343>=n?(e+=4,++i):e+=3}return e},rt=(t,e,i,n)=>{if(!(0<n))return 0;var s=i;n=i+n-1;for(var a=0;a<t.length;++a){var o=t.charCodeAt(a);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++a)),127>=o){if(i>=n)break;e[i++]=o}else{if(2047>=o){if(i+1>=n)break;e[i++]=192|o>>6}else{if(65535>=o){if(i+2>=n)break;e[i++]=224|o>>12}else{if(i+3>=n)break;e[i++]=240|o>>18,e[i++]=128|o>>12&63}e[i++]=128|o>>6&63}e[i++]=128|63&o}}return e[i]=0,i-s};function ht(t,e){var i=Array(ot(t)+1);return t=rt(t,i,0,i.length),e&&(i.length=t),i}var lt=[];function ct(t,e){lt[t]={input:[],F:[],V:e},Ft(t,ut)}var ut={open:function(t){var e=lt[t.node.za];if(!e)throw new It(43);t.s=e,t.seekable=!1},close:function(t){t.s.V.qa(t.s)},qa:function(t){t.s.V.qa(t.s)},read:function(t,e,i,n){if(!t.s||!t.s.V.ib)throw new It(60);for(var s=0,a=0;a<n;a++){try{var o=t.s.V.ib(t.s)}catch(t){throw new It(29)}if(void 0===o&&0===s)throw new It(6);if(null==o)break;s++,e[i+a]=o}return s&&(t.node.timestamp=Date.now()),s},write:function(t,e,i,n){if(!t.s||!t.s.V.Oa)throw new It(60);try{for(var s=0;s<n;s++)t.s.V.Oa(t.s,e[i+s])}catch(t){throw new It(29)}return n&&(t.node.timestamp=Date.now()),s}},dt={ib:function(){t:{if(!at.length){var t=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(t=window.prompt("Input: "))&&(t+="\n"):"function"==typeof readline&&null!==(t=readline())&&(t+="\n"),!t){t=null;break t}at=ht(t,!0)}t=at.shift()}return t},Oa:function(t,e){null===e||10===e?(w(st(t.F,0)),t.F=[]):0!=e&&t.F.push(e)},qa:function(t){t.F&&0<t.F.length&&(w(st(t.F,0)),t.F=[])},bc:function(){return{Fc:25856,Hc:5,Ec:191,Gc:35387,Dc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},cc:function(){return 0},dc:function(){return[24,80]}},mt={Oa:function(t,e){null===e||10===e?(y(st(t.F,0)),t.F=[]):0!=e&&t.F.push(e)},qa:function(t){t.F&&0<t.F.length&&(y(st(t.F,0)),t.F=[])}};function pt(t,e){var i=t.j?t.j.length:0;i>=e||(e=Math.max(e,i*(1048576>i?2:1.125)>>>0),0!=i&&(e=Math.max(e,256)),i=t.j,t.j=new Uint8Array(e),0<t.v&&t.j.set(i.subarray(0,t.v),0))}var gt,ft,vt,bt,wt={O:null,U:()=>wt.createNode(null,"/",16895,0),createNode(t,e,i,n){if(24576==(61440&i)||4096==(61440&i))throw new It(63);return wt.O||(wt.O={dir:{node:{Y:wt.l.Y,P:wt.l.P,ka:wt.l.ka,va:wt.l.va,ub:wt.l.ub,Ab:wt.l.Ab,vb:wt.l.vb,sb:wt.l.sb,Ea:wt.l.Ea},stream:{ba:wt.m.ba}},file:{node:{Y:wt.l.Y,P:wt.l.P},stream:{ba:wt.m.ba,read:wt.m.read,write:wt.m.write,pa:wt.m.pa,lb:wt.m.lb,nb:wt.m.nb}},link:{node:{Y:wt.l.Y,P:wt.l.P,ma:wt.l.ma},stream:{}},$a:{node:{Y:wt.l.Y,P:wt.l.P},stream:Nt}}),16384==(61440&(i=Dt(t,e,i,n)).mode)?(i.l=wt.O.dir.node,i.m=wt.O.dir.stream,i.j={}):32768==(61440&i.mode)?(i.l=wt.O.file.node,i.m=wt.O.file.stream,i.v=0,i.j=null):40960==(61440&i.mode)?(i.l=wt.O.link.node,i.m=wt.O.link.stream):8192==(61440&i.mode)&&(i.l=wt.O.$a.node,i.m=wt.O.$a.stream),i.timestamp=Date.now(),t&&(t.j[e]=i,t.timestamp=i.timestamp),i},Kc:t=>t.j?t.j.subarray?t.j.subarray(0,t.v):new Uint8Array(t.j):new Uint8Array(0),l:{Y(t){var e={};return e.Jc=8192==(61440&t.mode)?t.id:1,e.Mc=t.id,e.mode=t.mode,e.Oc=1,e.uid=0,e.Lc=0,e.za=t.za,16384==(61440&t.mode)?e.size=4096:32768==(61440&t.mode)?e.size=t.v:40960==(61440&t.mode)?e.size=t.link.length:e.size=0,e.Bc=new Date(t.timestamp),e.Nc=new Date(t.timestamp),e.Ic=new Date(t.timestamp),e.Jb=4096,e.Cc=Math.ceil(e.size/e.Jb),e},P(t,e){if(void 0!==e.mode&&(t.mode=e.mode),void 0!==e.timestamp&&(t.timestamp=e.timestamp),void 0!==e.size&&(e=e.size,t.v!=e))if(0==e)t.j=null,t.v=0;else{var i=t.j;t.j=new Uint8Array(e),i&&t.j.set(i.subarray(0,Math.min(e,t.v))),t.v=e}},ka(){throw Ct[44]},va:(t,e,i,n)=>wt.createNode(t,e,i,n),ub(t,e,i){if(16384==(61440&t.mode)){try{var n=kt(e,i)}catch(t){}if(n)for(var s in n.j)throw new It(55)}delete t.parent.j[t.name],t.parent.timestamp=Date.now(),t.name=i,e.j[i]=t,e.timestamp=t.parent.timestamp,t.parent=e},Ab(t,e){delete t.j[e],t.timestamp=Date.now()},vb(t,e){var i,n=kt(t,e);for(i in n.j)throw new It(55);delete t.j[e],t.timestamp=Date.now()},sb(t){var e,i=[".",".."];for(e in t.j)t.j.hasOwnProperty(e)&&i.push(e);return i},Ea:(t,e,i)=>((t=wt.createNode(t,e,41471,0)).link=i,t),ma(t){if(40960!=(61440&t.mode))throw new It(28);return t.link}},m:{read(t,e,i,n,s){var a=t.node.j;if(s>=t.node.v)return 0;if(8<(t=Math.min(t.node.v-s,n))&&a.subarray)e.set(a.subarray(s,s+t),i);else for(n=0;n<t;n++)e[i+n]=a[s+n];return t},write(t,e,i,n,s,a){if(e.buffer===E.buffer&&(a=!1),!n)return 0;if((t=t.node).timestamp=Date.now(),e.subarray&&(!t.j||t.j.subarray)){if(a)return t.j=e.subarray(i,i+n),t.v=n;if(0===t.v&&0===s)return t.j=e.slice(i,i+n),t.v=n;if(s+n<=t.v)return t.j.set(e.subarray(i,i+n),s),n}if(pt(t,s+n),t.j.subarray&&e.subarray)t.j.set(e.subarray(i,i+n),s);else for(a=0;a<n;a++)t.j[s+a]=e[i+a];return t.v=Math.max(t.v,s+n),n},ba(t,e,i){if(1===i?e+=t.position:2===i&&32768==(61440&t.node.mode)&&(e+=t.node.v),0>e)throw new It(28);return e},pa(t,e,i){pt(t.node,e+i),t.node.v=Math.max(t.node.v,e+i)},lb(t,e,i,n,s){if(32768!=(61440&t.node.mode))throw new It(43);if(t=t.node.j,2&s||t.buffer!==E.buffer){if((0<i||i+e<t.length)&&(t=t.subarray?t.subarray(i,i+e):Array.prototype.slice.call(t,i,i+e)),i=!0,V(),!(e=void 0))throw new It(48);E.set(t,e)}else i=!1,e=t.byteOffset;return{o:e,M:i}},nb:(t,e,i,n)=>(wt.m.write(t,e,0,n,i,!1),0)}},yt=null,St={},_t=[],Et=1,Tt=null,At=!0,It=null,Ct={},Pt=(t,e={})=>{if(!(t=it(t)))return{path:"",node:null};if(8<(e=Object.assign({gb:!0,Qa:0},e)).Qa)throw new It(32);t=t.split("/").filter((t=>!!t));for(var i=yt,n="/",s=0;s<t.length;s++){var a=s===t.length-1;if(a&&e.parent)break;if(i=kt(i,t[s]),n=Q(n+"/"+t[s]),i.wa&&(!a||a&&e.gb)&&(i=i.wa.root),!a||e.fb)for(a=0;40960==(61440&i.mode);)if(i=Ht(n),n=it(Z(n),i),i=Pt(n,{Qa:e.Qa+1}).node,40<a++)throw new It(32)}return{path:n,node:i}},xt=t=>{for(var e;;){if(t===t.parent)return t=t.U.mb,e?"/"!==t[t.length-1]?`${t}/${e}`:t+e:t;e=e?`${t.name}/${e}`:t.name,t=t.parent}},Lt=(t,e)=>{for(var i=0,n=0;n<e.length;n++)i=(i<<5)-i+e.charCodeAt(n)|0;return(t+i>>>0)%Tt.length},kt=(t,e)=>{var i;if(i=(i=Mt(t,"x"))?i:t.l.ka?0:2)throw new It(i,t);for(i=Tt[Lt(t.id,e)];i;i=i.lc){var n=i.name;if(i.parent.id===t.id&&n===e)return i}return t.l.ka(t,e)},Dt=(t,e,i,n)=>(t=new Ei(t,e,i,n),e=Lt(t.parent.id,t.name),t.lc=Tt[e],Tt[e]=t),Bt=t=>{var e=["r","w","rw"][3&t];return 512&t&&(e+="w"),e},Mt=(t,e)=>At?0:!e.includes("r")||292&t.mode?e.includes("w")&&!(146&t.mode)||e.includes("x")&&!(73&t.mode)?2:0:2,zt=(t,e)=>{try{return kt(t,e),20}catch(t){}return Mt(t,"wx")},Ot=t=>{if(!(t=_t[t]))throw new It(8);return t},Rt=(t,e=-1)=>(vt||((vt=function(){this.h={}}).prototype={},Object.defineProperties(vt.prototype,{object:{get(){return this.node},set(t){this.node=t}},flags:{get(){return this.h.flags},set(t){this.h.flags=t}},position:{get(){return this.h.position},set(t){this.h.position=t}}})),t=Object.assign(new vt,t),-1==e&&(e=(()=>{for(var t=0;4096>=t;t++)if(!_t[t])return t;throw new It(33)})()),t.X=e,_t[e]=t),Nt={open:t=>{t.m=St[t.node.za].m,t.m.open&&t.m.open(t)},ba:()=>{throw new It(70)}},Ft=(t,e)=>{St[t]={m:e}},jt=(t,e)=>{var i="/"===e,n=!e;if(i&&yt)throw new It(10);if(!i&&!n){var s=Pt(e,{gb:!1});if(e=s.path,(s=s.node).wa)throw new It(10);if(16384!=(61440&s.mode))throw new It(54)}e={type:t,Qc:{},mb:e,kc:[]},(t=t.U(e)).U=e,e.root=t,i?yt=t:s&&(s.wa=e,s.U&&s.U.kc.push(e))},Ut=(t,e,i)=>{var n=Pt(t,{parent:!0}).node;if(!(t=tt(t))||"."===t||".."===t)throw new It(28);var s=zt(n,t);if(s)throw new It(s);if(!n.l.va)throw new It(63);return n.l.va(n,t,e,i)},Vt=(t,e,i)=>{void 0===i&&(i=e,e=438),Ut(t,8192|e,i)},Wt=(t,e)=>{if(!it(t))throw new It(44);var i=Pt(e,{parent:!0}).node;if(!i)throw new It(44);e=tt(e);var n=zt(i,e);if(n)throw new It(n);if(!i.l.Ea)throw new It(63);i.l.Ea(i,e,t)},Ht=t=>{if(!(t=Pt(t).node))throw new It(44);if(!t.l.ma)throw new It(28);return it(xt(t.parent),t.l.ma(t))},Xt=(t,e,i)=>{if(""===t)throw new It(44);if("string"==typeof e){var n={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[e];if(void 0===n)throw Error(`Unknown file open mode: ${e}`);e=n}if(i=64&e?4095&(void 0===i?438:i)|32768:0,"object"==typeof t)var a=t;else{t=Q(t);try{a=Pt(t,{fb:!(131072&e)}).node}catch(t){}}if(n=!1,64&e)if(a){if(128&e)throw new It(20)}else a=Ut(t,i,0),n=!0;if(!a)throw new It(44);if(8192==(61440&a.mode)&&(e&=-513),65536&e&&16384!=(61440&a.mode))throw new It(54);if(!n&&(i=a?40960==(61440&a.mode)?32:16384==(61440&a.mode)&&("r"!==Bt(e)||512&e)?31:Mt(a,Bt(e)):44))throw new It(i);if(512&e&&!n){if(!(i="string"==typeof(i=a)?Pt(i,{fb:!0}).node:i).l.P)throw new It(63);if(16384==(61440&i.mode))throw new It(31);if(32768!=(61440&i.mode))throw new It(28);if(n=Mt(i,"w"))throw new It(n);i.l.P(i,{size:0,timestamp:Date.now()})}return e&=-131713,(a=Rt({node:a,path:xt(a),flags:e,seekable:!0,position:0,m:a.m,zc:[],error:!1})).m.open&&a.m.open(a),!s.logReadFiles||1&e||(bt||(bt={}),t in bt||(bt[t]=1)),a},Yt=(t,e,i)=>{if(null===t.X)throw new It(8);if(!t.seekable||!t.m.ba)throw new It(70);if(0!=i&&1!=i&&2!=i)throw new It(28);t.position=t.m.ba(t,e,i),t.zc=[]},$t=()=>{It||((It=function(t,e){this.name="ErrnoError",this.node=e,this.pc=function(t){this.aa=t},this.pc(t),this.message="FS error"}).prototype=Error(),It.prototype.constructor=It,[44].forEach((t=>{Ct[t]=new It(t),Ct[t].stack="<generic error, no stack>"})))},Gt=(t,e,i)=>{t=Q("/dev/"+t);var n=function(t,e){var i=0;return t&&(i|=365),e&&(i|=146),i}(!!e,!!i);ft||(ft=64);var s=ft++<<8;Ft(s,{open:t=>{t.seekable=!1},close:()=>{i&&i.buffer&&i.buffer.length&&i(10)},read:(t,i,n,s)=>{for(var a=0,o=0;o<s;o++){try{var r=e()}catch(t){throw new It(29)}if(void 0===r&&0===a)throw new It(6);if(null==r)break;a++,i[n+o]=r}return a&&(t.node.timestamp=Date.now()),a},write:(t,e,n,s)=>{for(var a=0;a<s;a++)try{i(e[n+a])}catch(t){throw new It(29)}return s&&(t.node.timestamp=Date.now()),a}}),Vt(t,n,s)},qt={},Kt=void 0;function Jt(){return C[(Kt+=4)-4>>2]}function Qt(t){if(void 0===t)return"_unknown";var e=(t=t.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return 48<=e&&57>=e?`_${t}`:t}function Zt(t,e){return t=Qt(t),{[t]:function(){return e.apply(this,arguments)}}[t]}function te(){this.M=[void 0],this.hb=[]}var ee=new te,ie=void 0;function ne(t){throw new ie(t)}var se=t=>(t||ne("Cannot use deleted val. handle = "+t),ee.get(t).value),ae=t=>{switch(t){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return ee.pa({tb:1,value:t})}};function oe(t){var e=Error,i=Zt(t,(function(e){this.name=t,this.message=e,void 0!==(e=Error(e).stack)&&(this.stack=this.toString()+"\n"+e.replace(/^Error(:[^\n]*)?\n/,""))}));return i.prototype=Object.create(e.prototype),i.prototype.constructor=i,i.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},i}var re=void 0,he=void 0;function le(t){for(var e="";T[t];)e+=he[T[t++]];return e}var ce=[];function ue(){for(;ce.length;){var t=ce.pop();t.g.fa=!1,t.delete()}}var de=void 0,me={};function pe(t,e){for(void 0===e&&ne("ptr should not be undefined");t.A;)e=t.na(e),t=t.A;return e}var ge={};function fe(t){var e=le(t=Mi(t));return Ci(t),e}function ve(t,e){var i=ge[t];return void 0===i&&ne(e+" has unknown type "+fe(t)),i}function be(){}var we=!1;function ye(t){--t.count.value,0===t.count.value&&(t.G?t.L.W(t.G):t.u.i.W(t.o))}function Se(t,e,i){return e===i?t:void 0===i.A||null===(t=Se(t,e,i.A))?null:i.Pb(t)}var _e={},Ee=void 0;function Te(t){throw new Ee(t)}function Ae(t,e){return e.u&&e.o||Te("makeClassHandle requires ptr and ptrType"),!!e.L!=!!e.G&&Te("Both smartPtrType and smartPtr must be specified"),e.count={value:1},Ie(Object.create(t,{g:{value:e}}))}function Ie(t){return"undefined"==typeof FinalizationRegistry?(Ie=t=>t,t):(we=new FinalizationRegistry((t=>{ye(t.g)})),be=t=>{we.unregister(t)},(Ie=t=>{var e=t.g;return e.G&&we.register(t,{g:e},t),t})(t))}var Ce={};function Pe(t){for(;t.length;){var e=t.pop();t.pop()(e)}}function xe(t){return this.fromWireType(C[t>>2])}var Le={},ke={};function De(t,e,i){function n(e){(e=i(e)).length!==t.length&&Te("Mismatched type converter count");for(var n=0;n<t.length;++n)Me(t[n],e[n])}t.forEach((function(t){ke[t]=e}));var s=Array(e.length),a=[],o=0;e.forEach(((t,e)=>{ge.hasOwnProperty(t)?s[e]=ge[t]:(a.push(t),Le.hasOwnProperty(t)||(Le[t]=[]),Le[t].push((()=>{s[e]=ge[t],++o===a.length&&n(s)})))})),0===a.length&&n(s)}function Be(t){switch(t){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${t}`)}}function Me(t,e,i={}){if(!("argPackAdvance"in e))throw new TypeError("registerType registeredInstance requires argPackAdvance");!function(t,e,i={}){var n=e.name;if(t||ne(`type "${n}" must have a positive integer typeid pointer`),ge.hasOwnProperty(t)){if(i.$b)return;ne(`Cannot register type '${n}' twice`)}ge[t]=e,delete ke[t],Le.hasOwnProperty(t)&&(e=Le[t],delete Le[t],e.forEach((t=>t())))}(t,e,i)}function ze(t){ne(t.g.u.i.name+" instance already deleted")}function Oe(){}function Re(t,e,i){if(void 0===t[e].B){var n=t[e];t[e]=function(){return t[e].B.hasOwnProperty(arguments.length)||ne(`Function '${i}' called with an invalid number of arguments (${arguments.length}) - expects one of (${t[e].B})!`),t[e].B[arguments.length].apply(this,arguments)},t[e].B=[],t[e].B[n.ea]=n}}function Ne(t,e,i){s.hasOwnProperty(t)?((void 0===i||void 0!==s[t].B&&void 0!==s[t].B[i])&&ne(`Cannot register public name '${t}' twice`),Re(s,t,t),s.hasOwnProperty(i)&&ne(`Cannot register multiple overloads of a function with the same number of arguments (${i})!`),s[t].B[i]=e):(s[t]=e,void 0!==i&&(s[t].Pc=i))}function Fe(t,e,i,n,s,a,o,r){this.name=t,this.constructor=e,this.N=i,this.W=n,this.A=s,this.Ub=a,this.na=o,this.Pb=r,this.qb=[]}function je(t,e,i){for(;e!==i;)e.na||ne(`Expected null or instance of ${i.name}, got an instance of ${e.name}`),t=e.na(t),e=e.A;return t}function Ue(t,e){return null===e?(this.Na&&ne(`null is not a valid ${this.name}`),0):(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),je(e.g.o,e.g.u.i,this.i))}function Ve(t,e){if(null===e){if(this.Na&&ne(`null is not a valid ${this.name}`),this.ua){var i=this.Pa();return null!==t&&t.push(this.W,i),i}return 0}if(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.ta&&e.g.u.ta&&ne(`Cannot convert argument of type ${e.g.L?e.g.L.name:e.g.u.name} to parameter type ${this.name}`),i=je(e.g.o,e.g.u.i,this.i),this.ua)switch(void 0===e.g.G&&ne("Passing raw pointer to smart pointer is illegal"),this.tc){case 0:e.g.L===this?i=e.g.G:ne(`Cannot convert argument of type ${e.g.L?e.g.L.name:e.g.u.name} to parameter type ${this.name}`);break;case 1:i=e.g.G;break;case 2:if(e.g.L===this)i=e.g.G;else{var n=e.clone();i=this.oc(i,ae((function(){n.delete()}))),null!==t&&t.push(this.W,i)}break;default:ne("Unsupporting sharing policy")}return i}function We(t,e){return null===e?(this.Na&&ne(`null is not a valid ${this.name}`),0):(e.g||ne(`Cannot pass "${ii(e)}" as a ${this.name}`),e.g.o||ne(`Cannot pass deleted object as a pointer of type ${this.name}`),e.g.u.ta&&ne(`Cannot convert argument of type ${e.g.u.name} to parameter type ${this.name}`),je(e.g.o,e.g.u.i,this.i))}function He(t,e,i,n){this.name=t,this.i=e,this.Na=i,this.ta=n,this.ua=!1,this.W=this.oc=this.Pa=this.rb=this.tc=this.nc=void 0,void 0!==e.A?this.toWireType=Ve:(this.toWireType=n?Ue:We,this.K=null)}function Xe(t,e,i){s.hasOwnProperty(t)||Te("Replacing nonexistant public symbol"),void 0!==s[t].B&&void 0!==i?s[t].B[i]=e:(s[t]=e,s[t].ea=i)}var Ye=[],$e=t=>{var e=Ye[t];return e||(t>=Ye.length&&(Ye.length=t+1),Ye[t]=e=B.get(t)),e};function Ge(t,e){var i=(t=le(t)).includes("j")?((t,e)=>{var i=[];return function(){if(i.length=0,Object.assign(i,arguments),t.includes("j")){var n=s["dynCall_"+t];n=i&&i.length?n.apply(null,[e].concat(i)):n.call(null,e)}else n=$e(e).apply(null,i);return n}})(t,e):$e(e);return"function"!=typeof i&&ne(`unknown function pointer with signature ${t}: ${e}`),i}var qe=void 0;function Ke(t,e){var i=[],n={};throw e.forEach((function t(e){n[e]||ge[e]||(ke[e]?ke[e].forEach(t):(i.push(e),n[e]=!0))})),new qe(`${t}: `+i.map(fe).join([", "]))}function Je(t,e,i,n,s){var a=e.length;2>a&&ne("argTypes array size mismatch! Must at least get return value and 'this' types!");var o=null!==e[1]&&null!==i,r=!1;for(i=1;i<e.length;++i)if(null!==e[i]&&void 0===e[i].K){r=!0;break}var h="void"!==e[0].name,l=a-2,c=Array(l),u=[],d=[];return function(){if(arguments.length!==l&&ne(`function ${t} called with ${arguments.length} arguments, expected ${l} args!`),d.length=0,u.length=o?2:1,u[0]=s,o){var i=e[1].toWireType(d,this);u[1]=i}for(var a=0;a<l;++a)c[a]=e[a+2].toWireType(d,arguments[a]),u.push(c[a]);if(a=n.apply(null,u),r)Pe(d);else for(var m=o?1:2;m<e.length;m++){var p=1===m?i:c[m-2];null!==e[m].K&&e[m].K(p)}return i=h?e[0].fromWireType(a):void 0}}function Qe(t,e){for(var i=[],n=0;n<t;n++)i.push(P[e+4*n>>2]);return i}function Ze(t,e,i){return t instanceof Object||ne(`${i} with invalid "this": ${t}`),t instanceof e.i.constructor||ne(`${i} incompatible with "this" of type ${t.constructor.name}`),t.g.o||ne(`cannot call emscripten binding method ${i} on deleted object`),je(t.g.o,t.g.u.i,e.i)}function ti(t){t>=ee.h&&0==--ee.get(t).tb&&ee.Zb(t)}function ei(t,e,i){switch(e){case 0:return function(t){return this.fromWireType((i?E:T)[t])};case 1:return function(t){return this.fromWireType((i?A:I)[t>>1])};case 2:return function(t){return this.fromWireType((i?C:P)[t>>2])};default:throw new TypeError("Unknown integer type: "+t)}}function ii(t){if(null===t)return"null";var e=typeof t;return"object"===e||"array"===e||"function"===e?t.toString():""+t}function ni(t,e){switch(e){case 2:return function(t){return this.fromWireType(x[t>>2])};case 3:return function(t){return this.fromWireType(L[t>>3])};default:throw new TypeError("Unknown float type: "+t)}}function si(t,e,i){switch(e){case 0:return i?function(t){return E[t]}:function(t){return T[t]};case 1:return i?function(t){return A[t>>1]}:function(t){return I[t>>1]};case 2:return i?function(t){return C[t>>2]}:function(t){return P[t>>2]};default:throw new TypeError("Unknown integer type: "+t)}}var ai="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,oi=(t,e)=>{for(var i=t>>1,n=i+e/2;!(i>=n)&&I[i];)++i;if(32<(i<<=1)-t&&ai)return ai.decode(T.subarray(t,i));for(i="",n=0;!(n>=e/2);++n){var s=A[t+2*n>>1];if(0==s)break;i+=String.fromCharCode(s)}return i},ri=(t,e,i)=>{if(void 0===i&&(i=2147483647),2>i)return 0;var n=e;i=(i-=2)<2*t.length?i/2:t.length;for(var s=0;s<i;++s)A[e>>1]=t.charCodeAt(s),e+=2;return A[e>>1]=0,e-n},hi=t=>2*t.length,li=(t,e)=>{for(var i=0,n="";!(i>=e/4);){var s=C[t+4*i>>2];if(0==s)break;++i,65536<=s?(s-=65536,n+=String.fromCharCode(55296|s>>10,56320|1023&s)):n+=String.fromCharCode(s)}return n},ci=(t,e,i)=>{if(void 0===i&&(i=2147483647),4>i)return 0;var n=e;i=n+i-4;for(var s=0;s<t.length;++s){var a=t.charCodeAt(s);if(55296<=a&&57343>=a&&(a=65536+((1023&a)<<10)|1023&t.charCodeAt(++s)),C[e>>2]=a,(e+=4)+4>i)break}return C[e>>2]=0,e-n},ui=t=>{for(var e=0,i=0;i<t.length;++i){var n=t.charCodeAt(i);55296<=n&&57343>=n&&++i,e+=4}return e},di={};function mi(t){var e=di[t];return void 0===e?le(t):e}var pi,gi=[],fi=[],vi=[],bi={},wi=()=>{if(!pi){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(t in bi)void 0===bi[t]?delete e[t]:e[t]=bi[t];var i=[];for(t in e)i.push(`${t}=${e[t]}`);pi=i}return pi},yi=t=>0==t%4&&(0!=t%100||0==t%400),Si=[31,29,31,30,31,30,31,31,30,31,30,31],_i=[31,28,31,30,31,30,31,31,30,31,30,31];function Ei(t,e,i,n){t||(t=this),this.parent=t,this.U=t.U,this.wa=null,this.id=Et++,this.name=e,this.mode=i,this.l={},this.m={},this.za=n}Object.defineProperties(Ei.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(t){t?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(t){t?this.mode|=146:this.mode&=-147}}}),$t(),Tt=Array(4096),jt(wt,"/"),Ut("/tmp",16895,0),Ut("/home",16895,0),Ut("/home/web_user",16895,0),(()=>{Ut("/dev",16895,0),Ft(259,{read:()=>0,write:(t,e,i,n)=>n}),Vt("/dev/null",259),ct(1280,dt),ct(1536,mt),Vt("/dev/tty",1280),Vt("/dev/tty1",1536);var t=new Uint8Array(1024),e=0,i=()=>(0===e&&(e=et(t).byteLength),t[--e]);Gt("random",i),Gt("urandom",i),Ut("/dev/shm",16895,0),Ut("/dev/shm/tmp",16895,0)})(),(()=>{Ut("/proc",16895,0);var t=Ut("/proc/self",16895,0);Ut("/proc/self/fd",16895,0),jt({U:()=>{var e=Dt(t,"fd",16895,73);return e.l={ka:(t,e)=>{var i=Ot(+e);return(t={parent:null,U:{mb:"fake"},l:{ma:()=>i.path}}).parent=t}},e}},"/proc/self/fd")})(),Object.assign(te.prototype,{get(t){return this.M[t]},has(t){return void 0!==this.M[t]},pa(t){var e=this.hb.pop()||this.M.length;return this.M[e]=t,e},Zb(t){this.M[t]=void 0,this.hb.push(t)}}),ie=s.BindingError=class extends Error{constructor(t){super(t),this.name="BindingError"}},ee.M.push({value:void 0},{value:null},{value:!0},{value:!1}),ee.h=ee.M.length,s.count_emval_handles=function(){for(var t=0,e=ee.h;e<ee.M.length;++e)void 0!==ee.M[e]&&++t;return t},re=s.PureVirtualError=oe("PureVirtualError");for(var Ti=Array(256),Ai=0;256>Ai;++Ai)Ti[Ai]=String.fromCharCode(Ai);he=Ti,s.getInheritedInstanceCount=function(){return Object.keys(me).length},s.getLiveInheritedInstances=function(){var t,e=[];for(t in me)me.hasOwnProperty(t)&&e.push(me[t]);return e},s.flushPendingDeletes=ue,s.setDelayFunction=function(t){de=t,ce.length&&de&&de(ue)},Ee=s.InternalError=class extends Error{constructor(t){super(t),this.name="InternalError"}},Oe.prototype.isAliasOf=function(t){if(!(this instanceof Oe&&t instanceof Oe))return!1;var e=this.g.u.i,i=this.g.o,n=t.g.u.i;for(t=t.g.o;e.A;)i=e.na(i),e=e.A;for(;n.A;)t=n.na(t),n=n.A;return e===n&&i===t},Oe.prototype.clone=function(){if(this.g.o||ze(this),this.g.ia)return this.g.count.value+=1,this;var t=Ie,e=Object,i=e.create,n=Object.getPrototypeOf(this),s=this.g;return(t=t(i.call(e,n,{g:{value:{count:s.count,fa:s.fa,ia:s.ia,o:s.o,u:s.u,G:s.G,L:s.L}}}))).g.count.value+=1,t.g.fa=!1,t},Oe.prototype.delete=function(){this.g.o||ze(this),this.g.fa&&!this.g.ia&&ne("Object already scheduled for deletion"),be(this),ye(this.g),this.g.ia||(this.g.G=void 0,this.g.o=void 0)},Oe.prototype.isDeleted=function(){return!this.g.o},Oe.prototype.deleteLater=function(){return this.g.o||ze(this),this.g.fa&&!this.g.ia&&ne("Object already scheduled for deletion"),ce.push(this),1===ce.length&&de&&de(ue),this.g.fa=!0,this},He.prototype.Vb=function(t){return this.rb&&(t=this.rb(t)),t},He.prototype.ab=function(t){this.W&&this.W(t)},He.prototype.argPackAdvance=8,He.prototype.readValueFromPointer=xe,He.prototype.deleteObject=function(t){null!==t&&t.delete()},He.prototype.fromWireType=function(t){function e(){return this.ua?Ae(this.i.N,{u:this.nc,o:i,L:this,G:t}):Ae(this.i.N,{u:this,o:t})}var i=this.Vb(t);if(!i)return this.ab(t),null;var n=function(t,e){return e=pe(t,e),me[e]}(this.i,i);if(void 0!==n)return 0===n.g.count.value?(n.g.o=i,n.g.G=t,n.clone()):(n=n.clone(),this.ab(t),n);if(n=this.i.Ub(i),!(n=_e[n]))return e.call(this);n=this.ta?n.Kb:n.pointerType;var s=Se(i,this.i,n.i);return null===s?e.call(this):this.ua?Ae(n.i.N,{u:n,o:s,L:this,G:t}):Ae(n.i.N,{u:n,o:s})},qe=s.UnboundTypeError=oe("UnboundTypeError");var Ii={__syscall_fcntl64:function(t,e,i){Kt=i;try{var n=Ot(t);switch(e){case 0:var s=Jt();return 0>s?-28:Rt(n,s).X;case 1:case 2:case 6:case 7:return 0;case 3:return n.flags;case 4:return s=Jt(),n.flags|=s,0;case 5:return s=Jt(),A[s+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return C[Bi()>>2]=28,-1}}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return-t.aa}},__syscall_ioctl:function(t,e,i){Kt=i;try{var n=Ot(t);switch(e){case 21509:case 21510:case 21511:case 21512:case 21524:case 21515:return n.s?0:-59;case 21505:if(!n.s)return-59;if(n.s.V.bc){e=[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];var s=Jt();C[s>>2]=25856,C[s+4>>2]=5,C[s+8>>2]=191,C[s+12>>2]=35387;for(var a=0;32>a;a++)E[s+a+17|0]=e[a]||0}return 0;case 21506:case 21507:case 21508:if(!n.s)return-59;if(n.s.V.cc)for(s=Jt(),e=[],a=0;32>a;a++)e.push(E[s+a+17|0]);return 0;case 21519:return n.s?(s=Jt(),C[s>>2]=0):-59;case 21520:return n.s?-28:-59;case 21531:if(s=Jt(),!n.m.ac)throw new It(59);return n.m.ac(n,e,s);case 21523:return n.s?(n.s.V.dc&&(a=[24,80],s=Jt(),A[s>>1]=a[0],A[s+2>>1]=a[1]),0):-59;default:return-28}}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return-t.aa}},__syscall_openat:function(t,e,i,n){Kt=n;try{var s=e=e?st(T,e):"";if("/"===s.charAt(0))e=s;else{var a=-100===t?"/":Ot(t).path;if(0==s.length)throw new It(44);e=Q(a+"/"+s)}var o=n?Jt():0;return Xt(e,i,o).X}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return-t.aa}},_embind_create_inheriting_constructor:function(t,e,i){t=le(t),e=ve(e,"wrapper"),i=se(i);var n=[].slice,s=e.i,a=s.N,o=s.A.N,r=s.A.constructor;for(var h in t=Zt(t,(function(){s.A.qb.forEach(function(t){if(this[t]===o[t])throw new re(`Pure virtual function ${t} must be implemented in JavaScript`)}.bind(this)),Object.defineProperty(this,"__parent",{value:a}),this.__construct.apply(this,n.call(arguments))})),a.__construct=function(){this===a&&ne("Pass correct 'this' to __construct");var t=r.implement.apply(void 0,[this].concat(n.call(arguments)));be(t);var e=t.g;t.notifyOnDestruction(),e.ia=!0,Object.defineProperties(this,{g:{value:e}}),Ie(this),t=e.o,t=pe(s,t),me.hasOwnProperty(t)?ne(`Tried to register registered instance: ${t}`):me[t]=this},a.__destruct=function(){this===a&&ne("Pass correct 'this' to __destruct"),be(this);var t=this.g.o;t=pe(s,t),me.hasOwnProperty(t)?delete me[t]:ne(`Tried to unregister unregistered instance: ${t}`)},t.prototype=Object.create(a),i)t.prototype[h]=i[h];return ae(t)},_embind_finalize_value_object:function(t){var e=Ce[t];delete Ce[t];var i=e.Pa,n=e.W,s=e.eb;De([t],s.map((t=>t.Yb)).concat(s.map((t=>t.rc))),(t=>{var a={};return s.forEach(((e,i)=>{var n=t[i],o=e.Wb,r=e.Xb,h=t[i+s.length],l=e.qc,c=e.sc;a[e.Sb]={read:t=>n.fromWireType(o(r,t)),write:(t,e)=>{var i=[];l(c,t,h.toWireType(i,e)),Pe(i)}}})),[{name:e.name,fromWireType:function(t){var e,i={};for(e in a)i[e]=a[e].read(t);return n(t),i},toWireType:function(t,e){for(var s in a)if(!(s in e))throw new TypeError(`Missing field: "${s}"`);var o=i();for(s in a)a[s].write(o,e[s]);return null!==t&&t.push(n,o),o},argPackAdvance:8,readValueFromPointer:xe,K:n}]}))},_embind_register_bigint:function(){},_embind_register_bool:function(t,e,i,n,s){var a=Be(i);Me(t,{name:e=le(e),fromWireType:function(t){return!!t},toWireType:function(t,e){return e?n:s},argPackAdvance:8,readValueFromPointer:function(t){if(1===i)var n=E;else if(2===i)n=A;else{if(4!==i)throw new TypeError("Unknown boolean type size: "+e);n=C}return this.fromWireType(n[t>>a])},K:null})},_embind_register_class:function(t,e,i,n,s,a,o,r,h,l,c,u,d){c=le(c),a=Ge(s,a),r&&(r=Ge(o,r)),l&&(l=Ge(h,l)),d=Ge(u,d);var m=Qt(c);Ne(m,(function(){Ke(`Cannot construct ${c} due to unbound types`,[n])})),De([t,e,i],n?[n]:[],(function(e){if(e=e[0],n)var i=e.i,s=i.N;else s=Oe.prototype;e=Zt(m,(function(){if(Object.getPrototypeOf(this)!==o)throw new ie("Use 'new' to construct "+c);if(void 0===h.$)throw new ie(c+" has no accessible constructor");var t=h.$[arguments.length];if(void 0===t)throw new ie(`Tried to invoke ctor of ${c} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(h.$).toString()}) parameters instead!`);return t.apply(this,arguments)}));var o=Object.create(s,{constructor:{value:e}});e.prototype=o;var h=new Fe(c,e,o,d,i,a,r,l);h.A&&(void 0===h.A.oa&&(h.A.oa=[]),h.A.oa.push(h)),i=new He(c,h,!0,!1),s=new He(c+"*",h,!1,!1);var u=new He(c+" const*",h,!1,!0);return _e[t]={pointerType:s,Kb:u},Xe(m,e),[i,s,u]}))},_embind_register_class_class_function:function(t,e,i,n,s,a,o){var r=Qe(i,n);e=le(e),a=Ge(s,a),De([],[t],(function(t){function n(){Ke(`Cannot call ${s} due to unbound types`,r)}var s=`${(t=t[0]).name}.${e}`;e.startsWith("@@")&&(e=Symbol[e.substring(2)]);var h=t.i.constructor;return void 0===h[e]?(n.ea=i-1,h[e]=n):(Re(h,e,s),h[e].B[i-1]=n),De([],r,(function(n){if(n=Je(s,[n[0],null].concat(n.slice(1)),null,a,o),void 0===h[e].B?(n.ea=i-1,h[e]=n):h[e].B[i-1]=n,t.i.oa)for(const i of t.i.oa)i.constructor.hasOwnProperty(e)||(i.constructor[e]=n);return[]})),[]}))},_embind_register_class_class_property:function(t,e,i,n,s,a,o,r){e=le(e),a=Ge(s,a),De([],[t],(function(t){var s=`${(t=t[0]).name}.${e}`,h={get(){Ke(`Cannot access ${s} due to unbound types`,[i])},enumerable:!0,configurable:!0};return h.set=r?()=>{Ke(`Cannot access ${s} due to unbound types`,[i])}:()=>{ne(`${s} is a read-only property`)},Object.defineProperty(t.i.constructor,e,h),De([],[i],(function(i){i=i[0];var s={get:()=>i.fromWireType(a(n)),enumerable:!0};return r&&(r=Ge(o,r),s.set=t=>{var e=[];r(n,i.toWireType(e,t)),Pe(e)}),Object.defineProperty(t.i.constructor,e,s),[]})),[]}))},_embind_register_class_constructor:function(t,e,i,n,s,a){var o=Qe(e,i);s=Ge(n,s),De([],[t],(function(t){var i=`constructor ${(t=t[0]).name}`;if(void 0===t.i.$&&(t.i.$=[]),void 0!==t.i.$[e-1])throw new ie(`Cannot register multiple constructors with identical number of parameters (${e-1}) for class '${t.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return t.i.$[e-1]=()=>{Ke(`Cannot construct ${t.name} due to unbound types`,o)},De([],o,(function(n){return n.splice(1,0,null),t.i.$[e-1]=Je(i,n,null,s,a),[]})),[]}))},_embind_register_class_function:function(t,e,i,n,s,a,o,r){var h=Qe(i,n);e=le(e),a=Ge(s,a),De([],[t],(function(t){function n(){Ke(`Cannot call ${s} due to unbound types`,h)}var s=`${(t=t[0]).name}.${e}`;e.startsWith("@@")&&(e=Symbol[e.substring(2)]),r&&t.i.qb.push(e);var l=t.i.N,c=l[e];return void 0===c||void 0===c.B&&c.className!==t.name&&c.ea===i-2?(n.ea=i-2,n.className=t.name,l[e]=n):(Re(l,e,s),l[e].B[i-2]=n),De([],h,(function(n){return n=Je(s,n,t,a,o),void 0===l[e].B?(n.ea=i-2,l[e]=n):l[e].B[i-2]=n,[]})),[]}))},_embind_register_class_property:function(t,e,i,n,s,a,o,r,h,l){e=le(e),s=Ge(n,s),De([],[t],(function(t){var n=`${(t=t[0]).name}.${e}`,c={get(){Ke(`Cannot access ${n} due to unbound types`,[i,o])},enumerable:!0,configurable:!0};return c.set=h?()=>{Ke(`Cannot access ${n} due to unbound types`,[i,o])}:()=>{ne(n+" is a read-only property")},Object.defineProperty(t.i.N,e,c),De([],h?[i,o]:[i],(function(i){var o=i[0],c={get(){var e=Ze(this,t,n+" getter");return o.fromWireType(s(a,e))},enumerable:!0};if(h){h=Ge(r,h);var u=i[1];c.set=function(e){var i=Ze(this,t,n+" setter"),s=[];h(l,i,u.toWireType(s,e)),Pe(s)}}return Object.defineProperty(t.i.N,e,c),[]})),[]}))},_embind_register_emval:function(t,e){Me(t,{name:e=le(e),fromWireType:function(t){var e=se(t);return ti(t),e},toWireType:function(t,e){return ae(e)},argPackAdvance:8,readValueFromPointer:xe,K:null})},_embind_register_enum:function(t,e,i,n){function s(){}i=Be(i),e=le(e),s.values={},Me(t,{name:e,constructor:s,fromWireType:function(t){return this.constructor.values[t]},toWireType:function(t,e){return e.value},argPackAdvance:8,readValueFromPointer:ei(e,i,n),K:null}),Ne(e,s)},_embind_register_enum_value:function(t,e,i){var n=ve(t,"enum");e=le(e),t=n.constructor,n=Object.create(n.constructor.prototype,{value:{value:i},constructor:{value:Zt(`${n.name}_${e}`,(function(){}))}}),t.values[i]=n,t[e]=n},_embind_register_float:function(t,e,i){i=Be(i),Me(t,{name:e=le(e),fromWireType:function(t){return t},toWireType:function(t,e){return e},argPackAdvance:8,readValueFromPointer:ni(e,i),K:null})},_embind_register_function:function(t,e,i,n,s,a){var o=Qe(e,i);t=le(t),s=Ge(n,s),Ne(t,(function(){Ke(`Cannot call ${t} due to unbound types`,o)}),e-1),De([],o,(function(i){return Xe(t,Je(t,[i[0],null].concat(i.slice(1)),null,s,a),e-1),[]}))},_embind_register_integer:function(t,e,i,n,s){e=le(e),-1===s&&(s=4294967295),s=Be(i);var a=t=>t;if(0===n){var o=32-8*i;a=t=>t<<o>>>o}i=e.includes("unsigned")?function(t,e){return e>>>0}:function(t,e){return e},Me(t,{name:e,fromWireType:a,toWireType:i,argPackAdvance:8,readValueFromPointer:si(e,s,0!==n),K:null})},_embind_register_memory_view:function(t,e,i){function n(t){t>>=2;var e=P;return new s(e.buffer,e[t+1],e[t])}var s=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][e];Me(t,{name:i=le(i),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{$b:!0})},_embind_register_std_string:function(t,e){var i="std::string"===(e=le(e));Me(t,{name:e,fromWireType:function(t){var e=P[t>>2],n=t+4;if(i)for(var s=n,a=0;a<=e;++a){var o=n+a;if(a==e||0==T[o]){if(s=s?st(T,s,o-s):"",void 0===r)var r=s;else r+=String.fromCharCode(0),r+=s;s=o+1}}else{for(r=Array(e),a=0;a<e;++a)r[a]=String.fromCharCode(T[n+a]);r=r.join("")}return Ci(t),r},toWireType:function(t,e){e instanceof ArrayBuffer&&(e=new Uint8Array(e));var n="string"==typeof e;n||e instanceof Uint8Array||e instanceof Uint8ClampedArray||e instanceof Int8Array||ne("Cannot pass non-string to std::string");var s=i&&n?ot(e):e.length,a=Pi(4+s+1),o=a+4;if(P[a>>2]=s,i&&n)rt(e,T,o,s+1);else if(n)for(n=0;n<s;++n){var r=e.charCodeAt(n);255<r&&(Ci(o),ne("String has UTF-16 code units that do not fit in 8 bits")),T[o+n]=r}else for(n=0;n<s;++n)T[o+n]=e[n];return null!==t&&t.push(Ci,a),a},argPackAdvance:8,readValueFromPointer:xe,K:function(t){Ci(t)}})},_embind_register_std_wstring:function(t,e,i){if(i=le(i),2===e)var n=oi,s=ri,a=hi,o=()=>I,r=1;else 4===e&&(n=li,s=ci,a=ui,o=()=>P,r=2);Me(t,{name:i,fromWireType:function(t){for(var i,s=P[t>>2],a=o(),h=t+4,l=0;l<=s;++l){var c=t+4+l*e;l!=s&&0!=a[c>>r]||(h=n(h,c-h),void 0===i?i=h:(i+=String.fromCharCode(0),i+=h),h=c+e)}return Ci(t),i},toWireType:function(t,n){"string"!=typeof n&&ne(`Cannot pass non-string to C++ string type ${i}`);var o=a(n),h=Pi(4+o+e);return P[h>>2]=o>>r,s(n,h+4,o+e),null!==t&&t.push(Ci,h),h},argPackAdvance:8,readValueFromPointer:xe,K:function(t){Ci(t)}})},_embind_register_value_object:function(t,e,i,n,s,a){Ce[t]={name:le(e),Pa:Ge(i,n),W:Ge(s,a),eb:[]}},_embind_register_value_object_field:function(t,e,i,n,s,a,o,r,h,l){Ce[t].eb.push({Sb:le(e),Yb:i,Wb:Ge(n,s),Xb:a,rc:o,qc:Ge(r,h),sc:l})},_embind_register_void:function(t,e){Me(t,{fc:!0,name:e=le(e),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},_emscripten_get_now_is_monotonic:()=>!0,_emval_as:function(t,e,i){t=se(t),e=ve(e,"emval::as");var n=[],s=ae(n);return P[i>>2]=s,e.toWireType(n,t)},_emval_call_method:function(t,e,i,n,s){t=gi[t],e=se(e),i=mi(i);var a=[];return P[n>>2]=ae(a),t(e,i,a,s)},_emval_call_void_method:function(t,e,i,n){(t=gi[t])(e=se(e),i=mi(i),null,n)},_emval_decref:ti,_emval_get_method_caller:function(t,e){var i=function(t,e){for(var i=Array(t),n=0;n<t;++n)i[n]=ve(P[e+4*n>>2],"parameter "+n);return i}(t,e),n=i[0];e=n.name+"_$"+i.slice(1).map((function(t){return t.name})).join("_")+"$";var s=fi[e];if(void 0!==s)return s;var a=Array(t-1);return s=function(t){var e=gi.length;return gi.push(t),e}(((e,s,o,r)=>{for(var h=0,l=0;l<t-1;++l)a[l]=i[l+1].readValueFromPointer(r+h),h+=i[l+1].argPackAdvance;for(e=e[s].apply(e,a),l=0;l<t-1;++l)i[l+1].Nb&&i[l+1].Nb(a[l]);if(!n.fc)return n.toWireType(o,e)})),fi[e]=s},_emval_get_module_property:function(t){return t=mi(t),ae(s[t])},_emval_get_property:function(t,e){return t=se(t),e=se(e),ae(t[e])},_emval_incref:function(t){4<t&&(ee.get(t).tb+=1)},_emval_new_cstring:function(t){return ae(mi(t))},_emval_new_object:function(){return ae({})},_emval_run_destructors:function(t){Pe(se(t)),ti(t)},_emval_set_property:function(t,e,i){t=se(t),e=se(e),i=se(i),t[e]=i},_emval_take_value:function(t,e){return t=(t=ve(t,"_emval_take_value")).readValueFromPointer(e),ae(t)},abort:()=>{V("")},emscripten_asm_const_int:(t,e,i)=>{var n;for(vi.length=0,i>>=2;n=T[e++];)i+=105!=n&i,vi.push(105==n?C[i]:L[i++>>1]),++i;return q[t].apply(null,vi)},emscripten_date_now:function(){return Date.now()},emscripten_get_now:()=>performance.now(),emscripten_memcpy_big:(t,e,i)=>T.copyWithin(t,e,e+i),emscripten_resize_heap:t=>{var e=T.length;if(2147483648<(t>>>=0))return!1;for(var i=1;4>=i;i*=2){var n=e*(1+.2/i);n=Math.min(n,t+100663296);var s=Math;n=Math.max(t,n);t:{s=s.min.call(s,2147483648,n+(65536-n%65536)%65536)-S.buffer.byteLength+65535>>>16;try{S.grow(s),D();var a=1;break t}catch(t){}a=void 0}if(a)return!0}return!1},environ_get:(t,e)=>{var i=0;return wi().forEach((function(n,s){var a=e+i;for(s=P[t+4*s>>2]=a,a=0;a<n.length;++a)E[0|s++]=n.charCodeAt(a);E[0|s]=0,i+=n.length+1})),0},environ_sizes_get:(t,e)=>{var i=wi();P[t>>2]=i.length;var n=0;return i.forEach((function(t){n+=t.length+1})),P[e>>2]=n,0},fd_close:function(t){try{var e=Ot(t);if(null===e.X)throw new It(8);e.Ma&&(e.Ma=null);try{e.m.close&&e.m.close(e)}catch(t){throw t}finally{_t[e.X]=null}return e.X=null,0}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_read:function(t,e,i,n){try{t:{var s=Ot(t);t=e;for(var a,o=e=0;o<i;o++){var r=P[t>>2],h=P[t+4>>2];t+=8;var l=s,c=r,u=h,d=a,m=E;if(0>u||0>d)throw new It(28);if(null===l.X)throw new It(8);if(1==(2097155&l.flags))throw new It(8);if(16384==(61440&l.node.mode))throw new It(31);if(!l.m.read)throw new It(28);var p=void 0!==d;if(p){if(!l.seekable)throw new It(70)}else d=l.position;var g=l.m.read(l,m,c,u,d);p||(l.position+=g);var f=g;if(0>f){var v=-1;break t}if(e+=f,f<h)break;void 0!==a&&(a+=f)}v=e}return P[n>>2]=v,0}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_seek:function(t,e,i,n,s){e=i+2097152>>>0<4194305-!!e?(e>>>0)+4294967296*i:NaN;try{if(isNaN(e))return 61;var a=Ot(t);return Yt(a,e,n),G=[a.position>>>0,($=a.position,1<=+Math.abs($)?0<$?+Math.floor($/4294967296)>>>0:~~+Math.ceil(($-+(~~$>>>0))/4294967296)>>>0:0)],C[s>>2]=G[0],C[s+4>>2]=G[1],a.Ma&&0===e&&0===n&&(a.Ma=null),0}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return t.aa}},fd_write:function(t,e,i,n){try{t:{var s=Ot(t);t=e;for(var a,o=e=0;o<i;o++){var r=P[t>>2],h=P[t+4>>2];t+=8;var l=s,c=r,u=h,d=a,m=E;if(0>u||0>d)throw new It(28);if(null===l.X)throw new It(8);if(!(2097155&l.flags))throw new It(8);if(16384==(61440&l.node.mode))throw new It(31);if(!l.m.write)throw new It(28);l.seekable&&1024&l.flags&&Yt(l,0,2);var p=void 0!==d;if(p){if(!l.seekable)throw new It(70)}else d=l.position;var g=l.m.write(l,m,c,u,d,void 0);p||(l.position+=g);var f=g;if(0>f){var v=-1;break t}e+=f,void 0!==a&&(a+=f)}v=e}return P[n>>2]=v,0}catch(t){if(void 0===qt||"ErrnoError"!==t.name)throw t;return t.aa}},strftime_l:(t,e,i,n)=>((t,e,i,n)=>{function s(t,e,i){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=i[0]+t;return t}function a(t,e){return s(t,e,"0")}function o(t,e){function i(t){return 0>t?-1:0<t?1:0}var n;return 0===(n=i(t.getFullYear()-e.getFullYear()))&&0===(n=i(t.getMonth()-e.getMonth()))&&(n=i(t.getDate()-e.getDate())),n}function r(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function h(t){var e=t.ca;for(t=new Date(new Date(t.da+1900,0,1).getTime());0<e;){var i=t.getMonth(),n=(yi(t.getFullYear())?Si:_i)[i];if(!(e>n-t.getDate())){t.setDate(t.getDate()+e);break}e-=n-t.getDate()+1,t.setDate(1),11>i?t.setMonth(i+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return i=new Date(t.getFullYear()+1,0,4),e=r(new Date(t.getFullYear(),0,4)),i=r(i),0>=o(e,t)?0>=o(i,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var l=C[n+40>>2];for(var c in n={wc:C[n>>2],vc:C[n+4>>2],Fa:C[n+8>>2],Sa:C[n+12>>2],Ga:C[n+16>>2],da:C[n+20>>2],R:C[n+24>>2],ca:C[n+28>>2],Rc:C[n+32>>2],uc:C[n+36>>2],xc:l&&l?st(T,l):""},i=i?st(T,i):"",l={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})i=i.replace(new RegExp(c,"g"),l[c]);var u="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),d="January February March April May June July August September October November December".split(" ");for(c in l={"%a":t=>u[t.R].substring(0,3),"%A":t=>u[t.R],"%b":t=>d[t.Ga].substring(0,3),"%B":t=>d[t.Ga],"%C":t=>a((t.da+1900)/100|0,2),"%d":t=>a(t.Sa,2),"%e":t=>s(t.Sa,2," "),"%g":t=>h(t).toString().substring(2),"%G":t=>h(t),"%H":t=>a(t.Fa,2),"%I":t=>(0==(t=t.Fa)?t=12:12<t&&(t-=12),a(t,2)),"%j":t=>{for(var e=0,i=0;i<=t.Ga-1;e+=(yi(t.da+1900)?Si:_i)[i++]);return a(t.Sa+e,3)},"%m":t=>a(t.Ga+1,2),"%M":t=>a(t.vc,2),"%n":()=>"\n","%p":t=>0<=t.Fa&&12>t.Fa?"AM":"PM","%S":t=>a(t.wc,2),"%t":()=>"\t","%u":t=>t.R||7,"%U":t=>a(Math.floor((t.ca+7-t.R)/7),2),"%V":t=>{var e=Math.floor((t.ca+7-(t.R+6)%7)/7);if(2>=(t.R+371-t.ca-2)%7&&e++,e)53==e&&(4==(i=(t.R+371-t.ca)%7)||3==i&&yi(t.da)||(e=1));else{e=52;var i=(t.R+7-t.ca-1)%7;(4==i||5==i&&yi(t.da%400-1))&&e++}return a(e,2)},"%w":t=>t.R,"%W":t=>a(Math.floor((t.ca+7-(t.R+6)%7)/7),2),"%y":t=>(t.da+1900).toString().substring(2),"%Y":t=>t.da+1900,"%z":t=>{var e=0<=(t=t.uc);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":t=>t.xc,"%%":()=>"%"},i=i.replace(/%%/g,"\0\0"),l)i.includes(c)&&(i=i.replace(new RegExp(c,"g"),l[c](n)));return(c=ht(i=i.replace(/\0\0/g,"%"),!1)).length>e?0:(E.set(c,t),c.length-1)})(t,e,i,n)};!function(){function t(t){if(_=t=t.exports,S=_.memory,D(),B=_.__indirect_function_table,z.unshift(_.__wasm_call_ctors),F--,s.monitorRunDependencies&&s.monitorRunDependencies(F),0==F&&(null!==j&&(clearInterval(j),j=null),U)){var e=U;U=null,e()}return t}var e={env:Ii,wasi_snapshot_preview1:Ii};if(F++,s.monitorRunDependencies&&s.monitorRunDependencies(F),s.instantiateWasm)try{return s.instantiateWasm(e,t)}catch(t){y("Module.instantiateWasm callback failed with error: "+t),i(t)}(function(t,e){var i=N;return b||"function"!=typeof WebAssembly.instantiateStreaming||W(i)||i.startsWith("file://")||"function"!=typeof fetch?Y(i,t,e):fetch(i,{credentials:"same-origin"}).then((n=>WebAssembly.instantiateStreaming(n,t).then(e,(function(n){return y("wasm streaming compile failed: "+n),y("falling back to ArrayBuffer instantiation"),Y(i,t,e)}))))})(e,(function(e){t(e.instance)})).catch(i)}();var Ci=t=>(Ci=_.free)(t),Pi=t=>(Pi=_.malloc)(t),xi=s._ma_device__on_notification_unlocked=t=>(xi=s._ma_device__on_notification_unlocked=_.ma_device__on_notification_unlocked)(t);s._ma_malloc_emscripten=(t,e)=>(s._ma_malloc_emscripten=_.ma_malloc_emscripten)(t,e),s._ma_free_emscripten=(t,e)=>(s._ma_free_emscripten=_.ma_free_emscripten)(t,e);var Li,ki=s._ma_device_process_pcm_frames_capture__webaudio=(t,e,i)=>(ki=s._ma_device_process_pcm_frames_capture__webaudio=_.ma_device_process_pcm_frames_capture__webaudio)(t,e,i),Di=s._ma_device_process_pcm_frames_playback__webaudio=(t,e,i)=>(Di=s._ma_device_process_pcm_frames_playback__webaudio=_.ma_device_process_pcm_frames_playback__webaudio)(t,e,i),Bi=()=>(Bi=_.__errno_location)(),Mi=t=>(Mi=_.__getTypeName)(t);function zi(){function t(){if(!Li&&(Li=!0,s.calledRun=!0,!k)){if(s.noFSInit||gt||(gt=!0,$t(),s.stdin=s.stdin,s.stdout=s.stdout,s.stderr=s.stderr,s.stdin?Gt("stdin",s.stdin):Wt("/dev/tty","/dev/stdin"),s.stdout?Gt("stdout",null,s.stdout):Wt("/dev/tty","/dev/stdout"),s.stderr?Gt("stderr",null,s.stderr):Wt("/dev/tty1","/dev/stderr"),Xt("/dev/stdin",0),Xt("/dev/stdout",1),Xt("/dev/stderr",1)),At=!1,K(z),e(s),s.onRuntimeInitialized&&s.onRuntimeInitialized(),s.postRun)for("function"==typeof s.postRun&&(s.postRun=[s.postRun]);s.postRun.length;){var t=s.postRun.shift();O.unshift(t)}K(O)}}if(!(0<F)){if(s.preRun)for("function"==typeof s.preRun&&(s.preRun=[s.preRun]);s.preRun.length;)R();K(M),0<F||(s.setStatus?(s.setStatus("Running..."),setTimeout((function(){setTimeout((function(){s.setStatus("")}),1),t()}),1)):t())}}if(s.__embind_initialize_bindings=()=>(s.__embind_initialize_bindings=_._embind_initialize_bindings)(),s.dynCall_iiji=(t,e,i,n,a)=>(s.dynCall_iiji=_.dynCall_iiji)(t,e,i,n,a),s.dynCall_jiji=(t,e,i,n,a)=>(s.dynCall_jiji=_.dynCall_jiji)(t,e,i,n,a),s.dynCall_iiiji=(t,e,i,n,a,o)=>(s.dynCall_iiiji=_.dynCall_iiiji)(t,e,i,n,a,o),s.dynCall_iij=(t,e,i,n)=>(s.dynCall_iij=_.dynCall_iij)(t,e,i,n),s.dynCall_jii=(t,e,i)=>(s.dynCall_jii=_.dynCall_jii)(t,e,i),s.dynCall_viijii=(t,e,i,n,a,o,r)=>(s.dynCall_viijii=_.dynCall_viijii)(t,e,i,n,a,o,r),s.dynCall_iiiiij=(t,e,i,n,a,o,r)=>(s.dynCall_iiiiij=_.dynCall_iiiiij)(t,e,i,n,a,o,r),s.dynCall_iiiiijj=(t,e,i,n,a,o,r,h,l)=>(s.dynCall_iiiiijj=_.dynCall_iiiiijj)(t,e,i,n,a,o,r,h,l),s.dynCall_iiiiiijj=(t,e,i,n,a,o,r,h,l,c)=>(s.dynCall_iiiiiijj=_.dynCall_iiiiiijj)(t,e,i,n,a,o,r,h,l,c),U=function t(){Li||zi(),Li||(U=t)},s.preInit)for("function"==typeof s.preInit&&(s.preInit=[s.preInit]);0<s.preInit.length;)s.preInit.pop()();return zi(),t.ready});const a=s},t=>{t.exports=JSON.parse('{"name":"@rive-app/canvas","version":"2.21.5","description":"Rive\'s canvas based web api.","main":"rive.js","homepage":"https://rive.app","repository":{"type":"git","url":"https://github.com/rive-app/rive-wasm/tree/master/js"},"keywords":["rive","animation"],"author":"Rive","contributors":["Luigi Rosso <luigi@rive.app> (https://rive.app)","Maxwell Talbot <max@rive.app> (https://rive.app)","Arthur Vivian <arthur@rive.app> (https://rive.app)","Umberto Sonnino <umberto@rive.app> (https://rive.app)","Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)"],"license":"MIT","files":["rive.js","rive.js.map","rive.wasm","rive_fallback.wasm","rive.d.ts","rive_advanced.mjs.d.ts"],"typings":"rive.d.ts","dependencies":{},"browser":{"fs":false,"path":false}}')},(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>n.Animation});var n=i(4)},(t,e,i)=>{i.r(e),i.d(e,{Animation:()=>n});var n=function(){function t(t,e,i,n){this.animation=t,this.artboard=e,this.playing=n,this.loopCount=0,this.scrubTo=null,this.instance=new i.LinearAnimationInstance(t,e)}return Object.defineProperty(t.prototype,"name",{get:function(){return this.animation.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"time",{get:function(){return this.instance.time},set:function(t){this.instance.time=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loopValue",{get:function(){return this.animation.loopValue},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"needsScrub",{get:function(){return null!==this.scrubTo},enumerable:!1,configurable:!0}),t.prototype.advance=function(t){null===this.scrubTo?this.instance.advance(t):(this.instance.time=0,this.instance.advance(this.scrubTo),this.scrubTo=null)},t.prototype.apply=function(t){this.instance.apply(t)},t.prototype.cleanup=function(){this.instance.delete()},t}()},(t,e,i)=>{i.r(e),i.d(e,{BLANK_URL:()=>s.BLANK_URL,registerTouchInteractions:()=>n.registerTouchInteractions,sanitizeUrl:()=>s.sanitizeUrl});var n=i(6),s=i(7)},(t,e,i)=>{i.r(e),i.d(e,{registerTouchInteractions:()=>n});var n=function(t){var e=t.canvas,i=t.artboard,n=t.stateMachines,s=void 0===n?[]:n,a=t.renderer,o=t.rive,r=t.fit,h=t.alignment,l=t.isTouchScrollEnabled,c=void 0!==l&&l;if(!(e&&s.length&&a&&o&&i&&"undefined"!=typeof window))return null;var u=null,d=!1,m=function(t){if(d&&t instanceof MouseEvent)"mouseup"==t.type&&(d=!1);else{d=c&&"touchend"===t.type&&"touchstart"===u,u=t.type;var e=t.currentTarget.getBoundingClientRect(),n=function(t,e){var i,n;return["touchstart","touchmove"].indexOf(t.type)>-1&&(null===(i=t.touches)||void 0===i?void 0:i.length)?(e||t.preventDefault(),{clientX:t.touches[0].clientX,clientY:t.touches[0].clientY}):"touchend"===t.type&&(null===(n=t.changedTouches)||void 0===n?void 0:n.length)?{clientX:t.changedTouches[0].clientX,clientY:t.changedTouches[0].clientY}:{clientX:t.clientX,clientY:t.clientY}}(t,c),a=n.clientX,l=n.clientY;if(a||l){var m=a-e.left,p=l-e.top,g=o.computeAlignment(r,h,{minX:0,minY:0,maxX:e.width,maxY:e.height},i.bounds),f=new o.Mat2D;g.invert(f);var v=new o.Vec2D(m,p),b=o.mapXY(f,v),w=b.x(),y=b.y();switch(b.delete(),f.delete(),v.delete(),g.delete(),t.type){case"mouseout":for(var S=0,_=s;S<_.length;S++)_[S].pointerMove(w<0?w-1e4:w+1e4,y<0?y-1e4:y+1e4);break;case"touchmove":case"mouseover":case"mousemove":for(var E=0,T=s;E<T.length;E++)T[E].pointerMove(w,y);break;case"touchstart":case"mousedown":for(var A=0,I=s;A<I.length;A++)I[A].pointerDown(w,y);break;case"touchend":case"mouseup":for(var C=0,P=s;C<P.length;C++)P[C].pointerUp(w,y)}}}}.bind(void 0);return e.addEventListener("mouseover",m),e.addEventListener("mouseout",m),e.addEventListener("mousemove",m),e.addEventListener("mousedown",m),e.addEventListener("mouseup",m),e.addEventListener("touchmove",m,{passive:c}),e.addEventListener("touchstart",m,{passive:c}),e.addEventListener("touchend",m),function(){e.removeEventListener("mouseover",m),e.removeEventListener("mouseout",m),e.removeEventListener("mousemove",m),e.removeEventListener("mousedown",m),e.removeEventListener("mouseup",m),e.removeEventListener("touchmove",m),e.removeEventListener("touchstart",m),e.removeEventListener("touchend",m)}}},(t,e,i)=>{i.r(e),i.d(e,{BLANK_URL:()=>l,sanitizeUrl:()=>c});var n=/^([^\w]*)(javascript|data|vbscript)/im,s=/&#(\w+)(^\w|;)?/g,a=/&(newline|tab);/gi,o=/[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim,r=/^.+(:|&colon;)/gim,h=[".","/"],l="about:blank";function c(t){if(!t)return l;var e,i=(e=t,e.replace(o,"").replace(s,(function(t,e){return String.fromCharCode(e)}))).replace(a,"").replace(o,"").trim();if(!i)return l;if(function(t){return h.indexOf(t[0])>-1}(i))return i;var c=i.match(r);if(!c)return i;var u=c[0];return n.test(u)?l:i}}],e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,i),a.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return(()=>{i.r(n),i.d(n,{Alignment:()=>s,EventType:()=>v,Fit:()=>e,Layout:()=>m,LoopType:()=>b,Rive:()=>L,RiveEventType:()=>g,RiveFile:()=>x,RuntimeLoader:()=>p,StateMachineInput:()=>f,StateMachineInputType:()=>d,Testing:()=>B,decodeAudio:()=>M,decodeFont:()=>O,decodeImage:()=>z});var t,e,s,a=i(1),o=i(2),r=i(3),h=i(5),l=(t=function(e,i){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])},t(e,i)},function(e,i){if("function"!=typeof i&&null!==i)throw new TypeError("Class extends value "+String(i)+" is not a constructor or null");function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}),c=function(t,e,i,n){return new(i||(i=Promise))((function(s,a){function o(t){try{h(n.next(t))}catch(t){a(t)}}function r(t){try{h(n.throw(t))}catch(t){a(t)}}function h(t){var e;t.done?s(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(o,r)}h((n=n.apply(t,e||[])).next())}))},u=function(t,e){var i,n,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function r(r){return function(h){return function(r){if(i)throw new TypeError("Generator is already executing.");for(;a&&(a=0,r[0]&&(o=0)),o;)try{if(i=1,n&&(s=2&r[0]?n.return:r[0]?n.throw||((s=n.return)&&s.call(n),0):n.next)&&!(s=s.call(n,r[1])).done)return s;switch(n=0,s&&(r=[2&r[0],s.value]),r[0]){case 0:case 1:s=r;break;case 4:return o.label++,{value:r[1],done:!1};case 5:o.label++,n=r[1],r=[0];continue;case 7:r=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==r[0]&&2!==r[0])){o=0;continue}if(3===r[0]&&(!s||r[1]>s[0]&&r[1]<s[3])){o.label=r[1];break}if(6===r[0]&&o.label<s[1]){o.label=s[1],s=r;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(r);break}s[2]&&o.ops.pop(),o.trys.pop();continue}r=e.call(t,o)}catch(t){r=[6,t],n=0}finally{i=s=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,h])}}};!function(t){t.Cover="cover",t.Contain="contain",t.Fill="fill",t.FitWidth="fitWidth",t.FitHeight="fitHeight",t.None="none",t.ScaleDown="scaleDown"}(e||(e={})),function(t){t.Center="center",t.TopLeft="topLeft",t.TopCenter="topCenter",t.TopRight="topRight",t.CenterLeft="centerLeft",t.CenterRight="centerRight",t.BottomLeft="bottomLeft",t.BottomCenter="bottomCenter",t.BottomRight="bottomRight"}(s||(s={}));var d,m=function(){function t(t){var i,n,a,o,r,h;this.fit=null!==(i=null==t?void 0:t.fit)&&void 0!==i?i:e.Contain,this.alignment=null!==(n=null==t?void 0:t.alignment)&&void 0!==n?n:s.Center,this.minX=null!==(a=null==t?void 0:t.minX)&&void 0!==a?a:0,this.minY=null!==(o=null==t?void 0:t.minY)&&void 0!==o?o:0,this.maxX=null!==(r=null==t?void 0:t.maxX)&&void 0!==r?r:0,this.maxY=null!==(h=null==t?void 0:t.maxY)&&void 0!==h?h:0}return t.new=function(e){var i=e.fit,n=e.alignment,s=e.minX,a=e.minY,o=e.maxX,r=e.maxY;return console.warn("This function is deprecated: please use `new Layout({})` instead"),new t({fit:i,alignment:n,minX:s,minY:a,maxX:o,maxY:r})},t.prototype.copyWith=function(e){var i=e.fit,n=e.alignment,s=e.minX,a=e.minY,o=e.maxX,r=e.maxY;return new t({fit:null!=i?i:this.fit,alignment:null!=n?n:this.alignment,minX:null!=s?s:this.minX,minY:null!=a?a:this.minY,maxX:null!=o?o:this.maxX,maxY:null!=r?r:this.maxY})},t.prototype.runtimeFit=function(t){return this.cachedRuntimeFit?this.cachedRuntimeFit:(i=this.fit===e.Cover?t.Fit.cover:this.fit===e.Contain?t.Fit.contain:this.fit===e.Fill?t.Fit.fill:this.fit===e.FitWidth?t.Fit.fitWidth:this.fit===e.FitHeight?t.Fit.fitHeight:this.fit===e.ScaleDown?t.Fit.scaleDown:t.Fit.none,this.cachedRuntimeFit=i,i);var i},t.prototype.runtimeAlignment=function(t){return this.cachedRuntimeAlignment?this.cachedRuntimeAlignment:(e=this.alignment===s.TopLeft?t.Alignment.topLeft:this.alignment===s.TopCenter?t.Alignment.topCenter:this.alignment===s.TopRight?t.Alignment.topRight:this.alignment===s.CenterLeft?t.Alignment.centerLeft:this.alignment===s.CenterRight?t.Alignment.centerRight:this.alignment===s.BottomLeft?t.Alignment.bottomLeft:this.alignment===s.BottomCenter?t.Alignment.bottomCenter:this.alignment===s.BottomRight?t.Alignment.bottomRight:t.Alignment.center,this.cachedRuntimeAlignment=e,e);var e},t}(),p=function(){function t(){}return t.loadRuntime=function(){a.default({locateFile:function(){return t.wasmURL}}).then((function(e){var i;for(t.runtime=e;t.callBackQueue.length>0;)null===(i=t.callBackQueue.shift())||void 0===i||i(t.runtime)})).catch((function(){var e="https://cdn.jsdelivr.net/npm/".concat(o.name,"@").concat(o.version,"/rive_fallback.wasm");t.wasmURL.toLowerCase()!==e?(console.warn("Failed to load WASM from ".concat(t.wasmURL,", trying jsdelivr as a backup")),t.setWasmUrl(e),t.loadRuntime()):console.error("Could not load Rive WASM file from unpkg or jsdelivr, network connection may be down, or         you may need to call set a new WASM source via RuntimeLoader.setWasmUrl() and call         RuntimeLoader.loadRuntime() again")}))},t.getInstance=function(e){t.isLoading||(t.isLoading=!0,t.loadRuntime()),t.runtime?e(t.runtime):t.callBackQueue.push(e)},t.awaitInstance=function(){return new Promise((function(e){return t.getInstance((function(t){return e(t)}))}))},t.setWasmUrl=function(e){t.wasmURL=e},t.isLoading=!1,t.callBackQueue=[],t.wasmURL="https://unpkg.com/".concat(o.name,"@").concat(o.version,"/rive.wasm"),t}();!function(t){t[t.Number=56]="Number",t[t.Trigger=58]="Trigger",t[t.Boolean=59]="Boolean"}(d||(d={}));var g,f=function(){function t(t,e){this.type=t,this.runtimeInput=e}return Object.defineProperty(t.prototype,"name",{get:function(){return this.runtimeInput.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"value",{get:function(){return this.runtimeInput.value},set:function(t){this.runtimeInput.value=t},enumerable:!1,configurable:!0}),t.prototype.fire=function(){this.type===d.Trigger&&this.runtimeInput.fire()},t}();!function(t){t[t.General=128]="General",t[t.OpenUrl=131]="OpenUrl"}(g||(g={}));var v,b,w=function(){function t(t,e,i,n){this.stateMachine=t,this.playing=i,this.artboard=n,this.inputs=[],this.instance=new e.StateMachineInstance(t,n),this.initInputs(e)}return Object.defineProperty(t.prototype,"name",{get:function(){return this.stateMachine.name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"statesChanged",{get:function(){for(var t=[],e=0;e<this.instance.stateChangedCount();e++)t.push(this.instance.stateChangedNameByIndex(e));return t},enumerable:!1,configurable:!0}),t.prototype.advance=function(t){this.instance.advance(t)},t.prototype.reportedEventCount=function(){return this.instance.reportedEventCount()},t.prototype.reportedEventAt=function(t){return this.instance.reportedEventAt(t)},t.prototype.initInputs=function(t){for(var e=0;e<this.instance.inputCount();e++){var i=this.instance.input(e);this.inputs.push(this.mapRuntimeInput(i,t))}},t.prototype.mapRuntimeInput=function(t,e){return t.type===e.SMIInput.bool?new f(d.Boolean,t.asBool()):t.type===e.SMIInput.number?new f(d.Number,t.asNumber()):t.type===e.SMIInput.trigger?new f(d.Trigger,t.asTrigger()):void 0},t.prototype.cleanup=function(){this.instance.delete()},t}(),y=function(){function t(t,e,i,n,s){void 0===n&&(n=[]),void 0===s&&(s=[]),this.runtime=t,this.artboard=e,this.eventManager=i,this.animations=n,this.stateMachines=s}return t.prototype.add=function(t,e,i){if(void 0===i&&(i=!0),0===(t=D(t)).length)this.animations.forEach((function(t){return t.playing=e})),this.stateMachines.forEach((function(t){return t.playing=e}));else for(var n=this.animations.map((function(t){return t.name})),s=this.stateMachines.map((function(t){return t.name})),a=0;a<t.length;a++){var o=n.indexOf(t[a]),h=s.indexOf(t[a]);if(o>=0||h>=0)o>=0?this.animations[o].playing=e:this.stateMachines[h].playing=e;else{var l=this.artboard.animationByName(t[a]);if(l){var c=new r.Animation(l,this.artboard,this.runtime,e);c.advance(0),c.apply(1),this.animations.push(c)}else{var u=this.artboard.stateMachineByName(t[a]);if(u){var d=new w(u,this.runtime,e,this.artboard);this.stateMachines.push(d)}}}}return i&&(e?this.eventManager.fire({type:v.Play,data:this.playing}):this.eventManager.fire({type:v.Pause,data:this.paused})),e?this.playing:this.paused},t.prototype.initLinearAnimations=function(t,e){for(var i=this.animations.map((function(t){return t.name})),n=0;n<t.length;n++){var s=i.indexOf(t[n]);if(s>=0)this.animations[s].playing=e;else{var a=this.artboard.animationByName(t[n]);if(a){var o=new r.Animation(a,this.artboard,this.runtime,e);o.advance(0),o.apply(1),this.animations.push(o)}}}},t.prototype.initStateMachines=function(t,e){for(var i=this.stateMachines.map((function(t){return t.name})),n=0;n<t.length;n++){var s=i.indexOf(t[n]);if(s>=0)this.stateMachines[s].playing=e;else{var a=this.artboard.stateMachineByName(t[n]);if(a){var o=new w(a,this.runtime,e,this.artboard);this.stateMachines.push(o)}else this.initLinearAnimations([t[n]],e)}}},t.prototype.play=function(t){return this.add(t,!0)},t.prototype.pause=function(t){return this.add(t,!1)},t.prototype.scrub=function(t,e){var i=this.animations.filter((function(e){return t.includes(e.name)}));return i.forEach((function(t){return t.scrubTo=e})),i.map((function(t){return t.name}))},Object.defineProperty(t.prototype,"playing",{get:function(){return this.animations.filter((function(t){return t.playing})).map((function(t){return t.name})).concat(this.stateMachines.filter((function(t){return t.playing})).map((function(t){return t.name})))},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"paused",{get:function(){return this.animations.filter((function(t){return!t.playing})).map((function(t){return t.name})).concat(this.stateMachines.filter((function(t){return!t.playing})).map((function(t){return t.name})))},enumerable:!1,configurable:!0}),t.prototype.stop=function(t){var e=this,i=[];if(0===(t=D(t)).length)i=this.animations.map((function(t){return t.name})).concat(this.stateMachines.map((function(t){return t.name}))),this.animations.forEach((function(t){return t.cleanup()})),this.stateMachines.forEach((function(t){return t.cleanup()})),this.animations.splice(0,this.animations.length),this.stateMachines.splice(0,this.stateMachines.length);else{var n=this.animations.filter((function(e){return t.includes(e.name)}));n.forEach((function(t){t.cleanup(),e.animations.splice(e.animations.indexOf(t),1)}));var s=this.stateMachines.filter((function(e){return t.includes(e.name)}));s.forEach((function(t){t.cleanup(),e.stateMachines.splice(e.stateMachines.indexOf(t),1)})),i=n.map((function(t){return t.name})).concat(s.map((function(t){return t.name})))}return this.eventManager.fire({type:v.Stop,data:i}),i},Object.defineProperty(t.prototype,"isPlaying",{get:function(){return this.animations.reduce((function(t,e){return t||e.playing}),!1)||this.stateMachines.reduce((function(t,e){return t||e.playing}),!1)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPaused",{get:function(){return!this.isPlaying&&(this.animations.length>0||this.stateMachines.length>0)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return 0===this.animations.length&&0===this.stateMachines.length},enumerable:!1,configurable:!0}),t.prototype.atLeastOne=function(t,e){var i;return void 0===e&&(e=!0),0===this.animations.length&&0===this.stateMachines.length&&(this.artboard.animationCount()>0?this.add([i=this.artboard.animationByIndex(0).name],t,e):this.artboard.stateMachineCount()>0&&this.add([i=this.artboard.stateMachineByIndex(0).name],t,e)),i},t.prototype.handleLooping=function(){for(var t=0,e=this.animations.filter((function(t){return t.playing}));t<e.length;t++){var i=e[t];0===i.loopValue&&i.loopCount?(i.loopCount=0,this.stop(i.name)):1===i.loopValue&&i.loopCount?(this.eventManager.fire({type:v.Loop,data:{animation:i.name,type:b.Loop}}),i.loopCount=0):2===i.loopValue&&i.loopCount>1&&(this.eventManager.fire({type:v.Loop,data:{animation:i.name,type:b.PingPong}}),i.loopCount=0)}},t.prototype.handleStateChanges=function(){for(var t=[],e=0,i=this.stateMachines.filter((function(t){return t.playing}));e<i.length;e++){var n=i[e];t.push.apply(t,n.statesChanged)}t.length>0&&this.eventManager.fire({type:v.StateChange,data:t})},t.prototype.handleAdvancing=function(t){this.eventManager.fire({type:v.Advance,data:t})},t}();!function(t){t.Load="load",t.LoadError="loaderror",t.Play="play",t.Pause="pause",t.Stop="stop",t.Loop="loop",t.Draw="draw",t.Advance="advance",t.StateChange="statechange",t.RiveEvent="riveevent",t.AudioStatusChange="audiostatuschange"}(v||(v={})),function(t){t.OneShot="oneshot",t.Loop="loop",t.PingPong="pingpong"}(b||(b={}));var S,_=function(){function t(t){void 0===t&&(t=[]),this.listeners=t}return t.prototype.getListeners=function(t){return this.listeners.filter((function(e){return e.type===t}))},t.prototype.add=function(t){this.listeners.includes(t)||this.listeners.push(t)},t.prototype.remove=function(t){for(var e=0;e<this.listeners.length;e++){var i=this.listeners[e];if(i.type===t.type&&i.callback===t.callback){this.listeners.splice(e,1);break}}},t.prototype.removeAll=function(t){var e=this;t?this.listeners.filter((function(e){return e.type===t})).forEach((function(t){return e.remove(t)})):this.listeners.splice(0,this.listeners.length)},t.prototype.fire=function(t){this.getListeners(t.type).forEach((function(e){return e.callback(t)}))},t}(),E=function(){function t(t){this.eventManager=t,this.queue=[]}return t.prototype.add=function(t){this.queue.push(t)},t.prototype.process=function(){for(;this.queue.length>0;){var t=this.queue.shift();(null==t?void 0:t.action)&&t.action(),(null==t?void 0:t.event)&&this.eventManager.fire(t.event)}},t}();!function(t){t[t.AVAILABLE=0]="AVAILABLE",t[t.UNAVAILABLE=1]="UNAVAILABLE"}(S||(S={}));var T=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._started=!1,e._enabled=!1,e._status=S.UNAVAILABLE,e}return l(e,t),e.prototype.delay=function(t){return c(this,void 0,void 0,(function(){return u(this,(function(e){return[2,new Promise((function(e){return setTimeout(e,t)}))]}))}))},e.prototype.timeout=function(){return c(this,void 0,void 0,(function(){return u(this,(function(t){return[2,new Promise((function(t,e){return setTimeout(e,50)}))]}))}))},e.prototype.reportToListeners=function(){this.fire({type:v.AudioStatusChange}),this.removeAll()},e.prototype.enableAudio=function(){return c(this,void 0,void 0,(function(){return u(this,(function(t){return this._enabled||(this._enabled=!0,this._status=S.AVAILABLE,this.reportToListeners()),[2]}))}))},e.prototype.testAudio=function(){return c(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:if(this._status!==S.UNAVAILABLE||null===this._audioContext)return[3,4];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,Promise.race([this._audioContext.resume(),this.timeout()])];case 2:return t.sent(),this.enableAudio(),[3,4];case 3:return t.sent(),[3,4];case 4:return[2]}}))}))},e.prototype._establishAudio=function(){return c(this,void 0,void 0,(function(){return u(this,(function(t){switch(t.label){case 0:return this._started?[3,5]:(this._started=!0,"undefined"!=typeof window?[3,1]:(this.enableAudio(),[3,5]));case 1:this._audioContext=new AudioContext,this.listenForUserAction(),t.label=2;case 2:return this._status!==S.UNAVAILABLE?[3,5]:[4,this.testAudio()];case 3:return t.sent(),[4,this.delay(1e3)];case 4:return t.sent(),[3,2];case 5:return[2]}}))}))},e.prototype.listenForUserAction=function(){var t=this;document.addEventListener("pointerdown",(function(){return c(t,void 0,void 0,(function(){return u(this,(function(t){return this.enableAudio(),[2]}))}))}),{once:!0})},e.prototype.establishAudio=function(){return c(this,void 0,void 0,(function(){return u(this,(function(t){return this._establishAudio(),[2]}))}))},Object.defineProperty(e.prototype,"systemVolume",{get:function(){return this._status===S.UNAVAILABLE?(this.testAudio(),0):1},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"status",{get:function(){return this._status},enumerable:!1,configurable:!0}),e}(_),A=new T,I=function(){function t(){}return t.prototype.observe=function(){},t.prototype.unobserve=function(){},t.prototype.disconnect=function(){},t}(),C=globalThis.ResizeObserver||I,P=new(function(){function t(){var t=this;this._elementsMap=new Map,this._onObservedEntry=function(e){var i=t._elementsMap.get(e.target);null!==i?i.onResize(0==e.target.clientWidth||0==e.target.clientHeight):t._resizeObserver.unobserve(e.target)},this._onObserved=function(e){e.forEach(t._onObservedEntry)},this._resizeObserver=new C(this._onObserved)}return t.prototype.add=function(t,e){var i={onResize:e,element:t};return this._elementsMap.set(t,i),this._resizeObserver.observe(t),i},t.prototype.remove=function(t){this._resizeObserver.unobserve(t.element),this._elementsMap.delete(t.element)},t}()),x=function(){function t(t){this.enableRiveAssetCDN=!0,this.referenceCount=0,this.src=t.src,this.buffer=t.buffer,t.assetLoader&&(this.assetLoader=t.assetLoader),this.enableRiveAssetCDN="boolean"!=typeof t.enableRiveAssetCDN||t.enableRiveAssetCDN,this.eventManager=new _,t.onLoad&&this.on(v.Load,t.onLoad),t.onLoadError&&this.on(v.LoadError,t.onLoadError)}return t.prototype.initData=function(){return c(this,void 0,void 0,(function(){var e,i,n;return u(this,(function(s){switch(s.label){case 0:return this.src?(e=this,[4,k(this.src)]):[3,2];case 1:e.buffer=s.sent(),s.label=2;case 2:return this.assetLoader&&(i=new this.runtime.CustomFileAssetLoader({loadContents:this.assetLoader})),n=this,[4,this.runtime.load(new Uint8Array(this.buffer),i,this.enableRiveAssetCDN)];case 3:if(n.file=s.sent(),null===this.file)throw this.eventManager.fire({type:v.LoadError,data:null}),new Error(t.fileLoadErrorMessage);return this.eventManager.fire({type:v.Load,data:this}),[2]}}))}))},t.prototype.init=function(){return c(this,void 0,void 0,(function(){var e;return u(this,(function(i){switch(i.label){case 0:if(!this.src&&!this.buffer)throw new Error(t.missingErrorMessage);return e=this,[4,p.awaitInstance()];case 1:return e.runtime=i.sent(),[4,this.initData()];case 2:return i.sent(),[2]}}))}))},t.prototype.on=function(t,e){this.eventManager.add({type:t,callback:e})},t.prototype.off=function(t,e){this.eventManager.remove({type:t,callback:e})},t.prototype.cleanup=function(){var t;this.referenceCount-=1,this.referenceCount<=0&&(this.removeAllRiveEventListeners(),null===(t=this.file)||void 0===t||t.delete())},t.prototype.removeAllRiveEventListeners=function(t){this.eventManager.removeAll(t)},t.prototype.getInstance=function(){if(null!==this.file)return this.referenceCount+=1,this.file},t.missingErrorMessage="Rive source file or data buffer required",t.fileLoadErrorMessage="The file failed to load",t}(),L=function(){function t(t){var e,i=this;this.loaded=!1,this.readyForPlaying=!1,this.artboard=null,this.eventCleanup=null,this.shouldDisableRiveListeners=!1,this.automaticallyHandleEvents=!1,this.enableRiveAssetCDN=!0,this._volume=1,this._hasZeroSize=!1,this.durations=[],this.frameTimes=[],this.frameCount=0,this.isTouchScrollEnabled=!1,this.onCanvasResize=function(t){i._hasZeroSize=t,i._layout.maxX&&i._layout.maxY||i.resizeToCanvas()},this.renderSecondTimer=0,this.canvas=t.canvas,t.canvas.constructor===HTMLCanvasElement&&(this._observed=P.add(this.canvas,this.onCanvasResize)),this.src=t.src,this.buffer=t.buffer,this.riveFile=t.riveFile,this.layout=null!==(e=t.layout)&&void 0!==e?e:new m,this.shouldDisableRiveListeners=!!t.shouldDisableRiveListeners,this.isTouchScrollEnabled=!!t.isTouchScrollEnabled,this.automaticallyHandleEvents=!!t.automaticallyHandleEvents,this.enableRiveAssetCDN=void 0===t.enableRiveAssetCDN||t.enableRiveAssetCDN,this.eventManager=new _,t.onLoad&&this.on(v.Load,t.onLoad),t.onLoadError&&this.on(v.LoadError,t.onLoadError),t.onPlay&&this.on(v.Play,t.onPlay),t.onPause&&this.on(v.Pause,t.onPause),t.onStop&&this.on(v.Stop,t.onStop),t.onLoop&&this.on(v.Loop,t.onLoop),t.onStateChange&&this.on(v.StateChange,t.onStateChange),t.onAdvance&&this.on(v.Advance,t.onAdvance),t.onload&&!t.onLoad&&this.on(v.Load,t.onload),t.onloaderror&&!t.onLoadError&&this.on(v.LoadError,t.onloaderror),t.onplay&&!t.onPlay&&this.on(v.Play,t.onplay),t.onpause&&!t.onPause&&this.on(v.Pause,t.onpause),t.onstop&&!t.onStop&&this.on(v.Stop,t.onstop),t.onloop&&!t.onLoop&&this.on(v.Loop,t.onloop),t.onstatechange&&!t.onStateChange&&this.on(v.StateChange,t.onstatechange),t.assetLoader&&(this.assetLoader=t.assetLoader),this.taskQueue=new E(this.eventManager),this.init({src:this.src,buffer:this.buffer,riveFile:this.riveFile,autoplay:t.autoplay,animations:t.animations,stateMachines:t.stateMachines,artboard:t.artboard,useOffscreenRenderer:t.useOffscreenRenderer})}return t.new=function(e){return console.warn("This function is deprecated: please use `new Rive({})` instead"),new t(e)},t.prototype.onSystemAudioChanged=function(){this.volume=this._volume},t.prototype.init=function(e){var i=this,n=e.src,s=e.buffer,a=e.riveFile,o=e.animations,r=e.stateMachines,h=e.artboard,l=e.autoplay,c=void 0!==l&&l,u=e.useOffscreenRenderer,d=void 0!==u&&u;if(this.src=n,this.buffer=s,this.riveFile=a,!this.src&&!this.buffer&&!this.riveFile)throw new Error(t.missingErrorMessage);var m=D(o),g=D(r);this.loaded=!1,this.readyForPlaying=!1,p.awaitInstance().then((function(t){i.runtime=t,i.renderer=i.runtime.makeRenderer(i.canvas,d),i.canvas.width||i.canvas.height||i.resizeDrawingSurfaceToCanvas(),i.initData(h,m,g,c).then((function(){return i.setupRiveListeners()})).catch((function(t){console.error(t)}))})).catch((function(t){console.error(t)}))},t.prototype.setupRiveListeners=function(t){var e=this;if(!this.shouldDisableRiveListeners){var i=(this.animator.stateMachines||[]).filter((function(t){return t.playing&&e.runtime.hasListeners(t.instance)})).map((function(t){return t.instance})),n=this.isTouchScrollEnabled;t&&"isTouchScrollEnabled"in t&&(n=t.isTouchScrollEnabled),this.eventCleanup=(0,h.registerTouchInteractions)({canvas:this.canvas,artboard:this.artboard,stateMachines:i,renderer:this.renderer,rive:this.runtime,fit:this._layout.runtimeFit(this.runtime),alignment:this._layout.runtimeAlignment(this.runtime),isTouchScrollEnabled:n})}},t.prototype.removeRiveListeners=function(){this.eventCleanup&&this.eventCleanup()},t.prototype.initializeAudio=function(){var t,e=this;A.status==S.UNAVAILABLE&&(null===(t=this.artboard)||void 0===t?void 0:t.hasAudio)&&(A.add({type:v.AudioStatusChange,callback:function(){return e.onSystemAudioChanged()}}),A.establishAudio())},t.prototype.initData=function(t,e,i,n){var s;return c(this,void 0,void 0,(function(){var a;return u(this,(function(o){switch(o.label){case 0:return o.trys.push([0,3,,4]),null!=this.riveFile?[3,2]:(this.riveFile=new x({src:this.src,buffer:this.buffer,enableRiveAssetCDN:this.enableRiveAssetCDN,assetLoader:this.assetLoader}),[4,this.riveFile.init()]);case 1:o.sent(),o.label=2;case 2:return this.file=this.riveFile.getInstance(),this.initArtboard(t,e,i,n),this.initializeAudio(),this.loaded=!0,this.eventManager.fire({type:v.Load,data:null!==(s=this.src)&&void 0!==s?s:"buffer"}),this.readyForPlaying=!0,this.taskQueue.process(),this.drawFrame(),[2,Promise.resolve()];case 3:return o.sent(),a="Problem loading file; may be corrupt!",console.warn(a),this.eventManager.fire({type:v.LoadError,data:a}),[2,Promise.reject(a)];case 4:return[2]}}))}))},t.prototype.initArtboard=function(t,e,i,n){if(this.file){var s,a=t?this.file.artboardByName(t):this.file.defaultArtboard();if(!a){var o="Invalid artboard name or no default artboard";return console.warn(o),void this.eventManager.fire({type:v.LoadError,data:o})}if(this.artboard=a,a.volume=this._volume*A.systemVolume,this.artboard.animationCount()<1)throw o="Artboard has no animations",this.eventManager.fire({type:v.LoadError,data:o}),o;this.animator=new y(this.runtime,this.artboard,this.eventManager),e.length>0||i.length>0?(s=e.concat(i),this.animator.initLinearAnimations(e,n),this.animator.initStateMachines(i,n)):s=[this.animator.atLeastOne(n,!1)],this.taskQueue.add({event:{type:n?v.Play:v.Pause,data:s}})}},t.prototype.drawFrame=function(){this.startRendering()},t.prototype.draw=function(t,e){this.frameRequestId=null;var i=performance.now();this.lastRenderTime||(this.lastRenderTime=t),this.renderSecondTimer+=t-this.lastRenderTime,this.renderSecondTimer>5e3&&(this.renderSecondTimer=0,null==e||e());var n=(t-this.lastRenderTime)/1e3;this.lastRenderTime=t;for(var s=0,a=this.animator.animations.filter((function(t){return t.playing||t.needsScrub})).sort((function(t){return t.needsScrub?-1:1}));s<a.length;s++){var o=a[s];o.advance(n),o.instance.didLoop&&(o.loopCount+=1),o.apply(1)}for(var r=0,l=this.animator.stateMachines.filter((function(t){return t.playing}));r<l.length;r++){var c=l[r],u=c.reportedEventCount();if(u)for(var d=0;d<u;d++){var m=c.reportedEventAt(d);if(m)if(m.type===g.OpenUrl){if(this.eventManager.fire({type:v.RiveEvent,data:m}),this.automaticallyHandleEvents){var p=document.createElement("a"),f=m,b=f.url,w=f.target,y=(0,h.sanitizeUrl)(b);b&&p.setAttribute("href",y),w&&p.setAttribute("target",w),y&&y!==h.BLANK_URL&&p.click()}}else this.eventManager.fire({type:v.RiveEvent,data:m})}c.advance(n)}this.artboard.advance(n);var S=this.renderer;S.clear(),S.save(),this.alignRenderer(),this._hasZeroSize||this.artboard.draw(S),S.restore(),S.flush(),this.animator.handleLooping(),this.animator.handleStateChanges(),this.animator.handleAdvancing(n),this.frameCount++;var _=performance.now();for(this.frameTimes.push(_),this.durations.push(_-i);this.frameTimes[0]<=_-1e3;)this.frameTimes.shift(),this.durations.shift();this.animator.isPlaying?this.startRendering():(this.animator.isPaused||this.animator.isStopped)&&(this.lastRenderTime=0)},t.prototype.alignRenderer=function(){var t=this,e=t.renderer,i=t.runtime,n=t._layout,s=t.artboard;e.align(n.runtimeFit(i),n.runtimeAlignment(i),{minX:n.minX,minY:n.minY,maxX:n.maxX,maxY:n.maxY},s.bounds)},Object.defineProperty(t.prototype,"fps",{get:function(){return this.durations.length},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"frameTime",{get:function(){return 0===this.durations.length?0:(this.durations.reduce((function(t,e){return t+e}),0)/this.durations.length).toFixed(4)},enumerable:!1,configurable:!0}),t.prototype.cleanup=function(){var t;this.stopRendering(),this.cleanupInstances(),null!==this._observed&&P.remove(this._observed),null===(t=this.riveFile)||void 0===t||t.cleanup(),this.riveFile=null,this.file=null},t.prototype.deleteRiveRenderer=function(){var t;null===(t=this.renderer)||void 0===t||t.delete(),this.renderer=null},t.prototype.cleanupInstances=function(){null!==this.eventCleanup&&this.eventCleanup(),this.stop(),this.artboard&&(this.artboard.delete(),this.artboard=null)},t.prototype.retrieveTextRun=function(t){var e;if(t)if(this.artboard){var i=this.artboard.textRun(t);if(i)return i;console.warn("Could not access a text run with name '".concat(t,"' in the '").concat(null===(e=this.artboard)||void 0===e?void 0:e.name,"' Artboard. Note that you must rename a text run node in the Rive editor to make it queryable at runtime."))}else console.warn("Tried to access text run, but the Artboard is null");else console.warn("No text run name provided")},t.prototype.getTextRunValue=function(t){var e=this.retrieveTextRun(t);return e?e.text:void 0},t.prototype.setTextRunValue=function(t,e){var i=this.retrieveTextRun(t);i&&(i.text=e)},t.prototype.play=function(t,e){var i=this;t=D(t),this.readyForPlaying?(this.animator.play(t),this.eventCleanup&&this.eventCleanup(),this.setupRiveListeners(),this.startRendering()):this.taskQueue.add({action:function(){return i.play(t,e)}})},t.prototype.pause=function(t){var e=this;t=D(t),this.readyForPlaying?(this.eventCleanup&&this.eventCleanup(),this.animator.pause(t)):this.taskQueue.add({action:function(){return e.pause(t)}})},t.prototype.scrub=function(t,e){var i=this;t=D(t),this.readyForPlaying?(this.animator.scrub(t,e||0),this.drawFrame()):this.taskQueue.add({action:function(){return i.scrub(t,e)}})},t.prototype.stop=function(t){var e=this;t=D(t),this.readyForPlaying?(this.animator.stop(t),this.eventCleanup&&this.eventCleanup()):this.taskQueue.add({action:function(){return e.stop(t)}})},t.prototype.reset=function(t){var e,i=null==t?void 0:t.artboard,n=D(null==t?void 0:t.animations),s=D(null==t?void 0:t.stateMachines),a=null!==(e=null==t?void 0:t.autoplay)&&void 0!==e&&e;this.cleanupInstances(),this.initArtboard(i,n,s,a),this.taskQueue.process()},t.prototype.load=function(t){this.file=null,this.stop(),this.init(t)},Object.defineProperty(t.prototype,"layout",{get:function(){return this._layout},set:function(t){this._layout=t,t.maxX&&t.maxY||this.resizeToCanvas(),this.loaded&&!this.animator.isPlaying&&this.drawFrame()},enumerable:!1,configurable:!0}),t.prototype.resizeToCanvas=function(){this._layout=this.layout.copyWith({minX:0,minY:0,maxX:this.canvas.width,maxY:this.canvas.height})},t.prototype.resizeDrawingSurfaceToCanvas=function(t){if(this.canvas instanceof HTMLCanvasElement&&window){var e=this.canvas.getBoundingClientRect(),i=e.width,n=e.height,s=t||window.devicePixelRatio||1;this.canvas.width=s*i,this.canvas.height=s*n,this.startRendering(),this.resizeToCanvas()}},Object.defineProperty(t.prototype,"source",{get:function(){return this.src},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"activeArtboard",{get:function(){return this.artboard?this.artboard.name:""},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"animationNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var t=[],e=0;e<this.artboard.animationCount();e++)t.push(this.artboard.animationByIndex(e).name);return t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"stateMachineNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var t=[],e=0;e<this.artboard.stateMachineCount();e++)t.push(this.artboard.stateMachineByIndex(e).name);return t},enumerable:!1,configurable:!0}),t.prototype.stateMachineInputs=function(t){if(this.loaded){var e=this.animator.stateMachines.find((function(e){return e.name===t}));return null==e?void 0:e.inputs}},t.prototype.retrieveInputAtPath=function(t,e){if(t)if(this.artboard){var i=this.artboard.inputByPath(t,e);if(i)return i;console.warn("Could not access an input with name: '".concat(t,"', at path:'").concat(e,"'"))}else console.warn("Tried to access input: '".concat(t,"', at path: '").concat(e,"', but the Artboard is null"));else console.warn("No input name provided for path '".concat(e,"'"))},t.prototype.setBooleanStateAtPath=function(t,e,i){var n=this.retrieveInputAtPath(t,i);n&&(n.type===d.Boolean?n.asBool().value=e:console.warn("Input with name: '".concat(t,"', at path:'").concat(i,"' is not a boolean")))},t.prototype.setNumberStateAtPath=function(t,e,i){var n=this.retrieveInputAtPath(t,i);n&&(n.type===d.Number?n.asNumber().value=e:console.warn("Input with name: '".concat(t,"', at path:'").concat(i,"' is not a number")))},t.prototype.fireStateAtPath=function(t,e){var i=this.retrieveInputAtPath(t,e);i&&(i.type===d.Trigger?i.asTrigger().fire():console.warn("Input with name: '".concat(t,"', at path:'").concat(e,"' is not a trigger")))},t.prototype.retrieveTextAtPath=function(t,e){if(t)if(e)if(this.artboard){var i=this.artboard.textByPath(t,e);if(i)return i;console.warn("Could not access text with name: '".concat(t,"', at path:'").concat(e,"'"))}else console.warn("Tried to access text: '".concat(t,"', at path: '").concat(e,"', but the Artboard is null"));else console.warn("No path provided for text '".concat(t,"'"));else console.warn("No text name provided for path '".concat(e,"'"))},t.prototype.getTextRunValueAtPath=function(t,e){var i=this.retrieveTextAtPath(t,e);if(i)return i.text;console.warn("Could not get text with name: '".concat(t,"', at path:'").concat(e,"'"))},t.prototype.setTextRunValueAtPath=function(t,e,i){var n=this.retrieveTextAtPath(t,i);n?n.text=e:console.warn("Could not set text with name: '".concat(t,"', at path:'").concat(i,"'"))},Object.defineProperty(t.prototype,"playingStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(t){return t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"playingAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(t){return t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pausedAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(t){return!t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"pausedStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(t){return!t.playing})).map((function(t){return t.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPlaying",{get:function(){return this.animator.isPlaying},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isPaused",{get:function(){return this.animator.isPaused},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"isStopped",{get:function(){return this.animator.isStopped},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bounds",{get:function(){return this.artboard?this.artboard.bounds:void 0},enumerable:!1,configurable:!0}),t.prototype.on=function(t,e){this.eventManager.add({type:t,callback:e})},t.prototype.off=function(t,e){this.eventManager.remove({type:t,callback:e})},t.prototype.unsubscribe=function(t,e){console.warn("This function is deprecated: please use `off()` instead."),this.off(t,e)},t.prototype.removeAllRiveEventListeners=function(t){this.eventManager.removeAll(t)},t.prototype.unsubscribeAll=function(t){console.warn("This function is deprecated: please use `removeAllRiveEventListeners()` instead."),this.removeAllRiveEventListeners(t)},t.prototype.stopRendering=function(){this.loaded&&this.frameRequestId&&(this.runtime.cancelAnimationFrame?this.runtime.cancelAnimationFrame(this.frameRequestId):cancelAnimationFrame(this.frameRequestId),this.frameRequestId=null)},t.prototype.startRendering=function(){this.loaded&&this.artboard&&!this.frameRequestId&&(this.runtime.requestAnimationFrame?this.frameRequestId=this.runtime.requestAnimationFrame(this.draw.bind(this)):this.frameRequestId=requestAnimationFrame(this.draw.bind(this)))},t.prototype.enableFPSCounter=function(t){this.runtime.enableFPSCounter(t)},t.prototype.disableFPSCounter=function(){this.runtime.disableFPSCounter()},Object.defineProperty(t.prototype,"contents",{get:function(){if(this.loaded){for(var t={artboards:[]},e=0;e<this.file.artboardCount();e++){for(var i=this.file.artboardByIndex(e),n={name:i.name,animations:[],stateMachines:[]},s=0;s<i.animationCount();s++){var a=i.animationByIndex(s);n.animations.push(a.name)}for(var o=0;o<i.stateMachineCount();o++){for(var r=i.stateMachineByIndex(o),h=r.name,l=new this.runtime.StateMachineInstance(r,i),c=[],u=0;u<l.inputCount();u++){var d=l.input(u);c.push({name:d.name,type:d.type})}n.stateMachines.push({name:h,inputs:c})}t.artboards.push(n)}return t}},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"volume",{get:function(){return this.artboard&&this.artboard.volume!==this._volume&&(this._volume=this.artboard.volume),this._volume},set:function(t){this._volume=t,this.artboard&&(this.artboard.volume=t*A.systemVolume)},enumerable:!1,configurable:!0}),t.missingErrorMessage="Rive source file or data buffer required",t}(),k=function(t){return c(void 0,void 0,void 0,(function(){var e;return u(this,(function(i){switch(i.label){case 0:return e=new Request(t),[4,fetch(e)];case 1:return[4,i.sent().arrayBuffer()];case 2:return[2,i.sent()]}}))}))},D=function(t){return"string"==typeof t?[t]:t instanceof Array?t:[]},B={EventManager:_,TaskQueueManager:E},M=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeAudio(t,e)}))}))},z=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeImage(t,e)}))}))},O=function(t){return new Promise((function(e){return p.getInstance((function(i){i.decodeFont(t,e)}))}))}})(),n})(),t.exports=e()}},e={};function i(n){var s=e[n];if(void 0!==s)return s.exports;var a=e[n]={exports:{}};return t[n].call(a.exports,a,a.exports,i),a.exports}i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";class t{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,i,n,s,a,o,r,h){this.x=s,this.y=a,this.origx=s,this.origy=a,this.canvasWidth=e,this.canvasHeight=i,this.tutorialInstance=h,this.text=n,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,i,n)=>-i/2*(Math.cos(Math.PI*t/n)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);adjustSize(t,e){return t?1.25*e:e}draw(t,e=!1){const i=this.getX()-this.adjustSize(e,this.imageCenterOffsetX),n=this.getY()-this.adjustSize(e,this.imageCenterOffsetY);this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,i,n,this.adjustSize(e,this.imageSize),this.adjustSize(e,this.imageSize)),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${N}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}const e={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"};class n{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return F.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const i=t.toLowerCase();for(const t in e)if(t.toLowerCase()===i)return e[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function s(t,e){const i={};let n=0;const s=Object.keys(t).length;for(let a in t)i[a]=new Image,i[a].onload=function(){++n>=s&&e(i)},i[a].src=t[a]}const a=async t=>{const e=Object.keys(t).map((async e=>{const i=await(async t=>{const e=new Image;return new Promise((i=>{e.onload=()=>i(e),e.src=t}))})(t[e]);return{[e]:i}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})};function o(t,e,i,n,s,a,o=!1){if(o){return Math.sqrt((t-(i+s/2))**2+(e-(n+a/2))**2)<s/2}return t>=i&&t<=i+s&&e>=n&&e<=n+a}const r=()=>"visible"===document.visibilityState,h=(t=!1,e)=>{t?e.classList.remove("show"):e.classList.add("show")},l="pwa_installed_status",c="storePreviousPlayedLevel",u="is_cached",d="./assets/audios/Eat.mp3",m=t=>`./assets/audios/Cheering-0${t}.mp3`,p="./assets/audios/onDrag.mp3",g="./assets/audios/intro.mp3",f=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],v="./assets/images/Totem_v02_v01.webp",b="./assets/images/hill_v01.webp",w="./assets/images/fence_v01.webp",y="./assets/images/bg_v01.webp",S="./assets/images/next_btn.webp",E="./assets/images/close_btn.webp",T="./assets/images/popup_bg_v01.webp",A={DEFAULT_BACKGROUND_1:y,ASSETS_PATH_HILL:b,ASSETS_PATH_TOTEM:v,ASSETS_PATH_FENCE:w},I={AUTUMN_BACKGROUND_1:"./assets/images/Autumn_bg_v01.webp",AUTUMN_HILL_1:"./assets/images/Autumn_hill_v01.webp",AUTUMN_PILLAR_1:"./assets/images/Autumn_sign_v01.webp",AUTUMN_SIGN_1:"./assets/images/Autumn_sign_v01.webp",AUTUMN_FENCE_1:"./assets/images/Autumn_fence_v01.webp"},C={WINTER_BACKGROUND_1:"./assets/images/Winter_bg_01.webp",WINTER_HILL_1:"./assets/images/Winter_hill_v01.webp",WINTER_SIGN_1:"./assets/images/Winter_sign_v01.webp",WINTER_FENCE_1:"./assets/images/Winter_fence_v01.webp",WINTER_PILLAR_1:"./assets/images/Winter_sign_v01.webp"},P="StartScene",x="LevelSelection",L="GamePlay",k="LevelEnd",D=[5,13,20,30,42],B=new URLSearchParams(window.location.search);var M=B.get("cr_user_id"),z=null==B.get("source")?null:B.get("source"),O=null==B.get("campaign_id")?null:B.get("campaign_id"),R=null==B.get("cr_lang")?"english":B.get("cr_lang");const N=n.getLanguageSpecificFont(R),F={DevelopmentLink:!!window.location.href.includes("https://feedthemonsterdev.curiouscontent.org"),DebugMode:!1},j="loadpuzzle",U="stonesdropped",V="click",W="visibilitychange",H="./lang/"+R+"/ftm_"+R+".json";async function X(){return await fetch(H,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}class Y{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,i,n,s,a,o,r,h){this.title=t,this.otherAudios=new $(e),this.levels=this.getLevels(i),this.FeedbackTexts=new G(n),this.FeedbackAudios=new q(a),this.rightToLeft=s,this.majVersion=o,this.minVersion=r,this.version=h}getLevels(t){let e=[];for(let i=0;i<t.length;i++)e.push(new K(t[i]));return e}}class ${selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class G{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class q{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class K{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new Z(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,i)=>{e.push(new J(t))})),e}}class J{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new Q(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,i)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,i)=>{e.push(t.StoneText)})),e}}class Q{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class Z{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}class tt{static currentlanguage=R;static setGameLevelScore(t,e){let i=this.calculateStarCount(e),n={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:i};this.setTotalStarCount(i);let s=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<s.length;t++)if(s[t].levelNumber===n.levelNumber){a=t;break}-1!==a&&n.score>s[a].score?s[a]=n:s.push(n),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(s))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return F.DebugMode?JSON.parse(localStorage.getItem(R+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(R+"Profile")||"{}")}}const et={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"};class it{subscribers;listenerIdCounter;constructor(){this.subscribers={},this.listenerIdCounter=0}checkSubscribers(){console.log("checkSubscribers ",this.subscribers)}subscribe(t,e){const i=this.listenerIdCounter++;return this.subscribers[t]||(this.subscribers[t]={}),this.subscribers[t][i]=e,()=>{this.unsubscribe(t,i)}}unsubscribe(t,e){this.subscribers[t]&&this.subscribers[t][e]&&delete this.subscribers[t][e]}publish(t,e){this.subscribers[t]&&Object.keys(this.subscribers[t]).forEach((i=>{this.subscribers[t][i]&&this.subscribers[t][i](e)}))}}const nt=new class extends it{EVENTS;data;canvas;width;height;canavsElement;context;gameCanvasContext;isGamePaused;currentScene;previousScene;gamePlayData;feedbackTexts;rightToLeft;majVersion;minVersion;feedbackAudios;clickTrailToggle;constructor(){super(),this.EVENTS={SCENE_NAME_EVENT:"SCENE_NAME_EVENT",GAMEPLAY_DATA_EVENT:"GAMEPLAY_DATA_EVENT",GAME_PAUSE_STATUS_EVENT:"GAME_PAUSE_STATUS_EVENT",GAME_TRAIL_EFFECT_TOGGLE_EVENT:"GAME_TRAIL_EFFECT_TOGGLE_EVENT"},this.data=null,this.canvas=null,this.width=null,this.height=null,this.canavsElement=null,this.context=null,this.gameCanvasContext=null,this.currentScene=P,this.previousScene="",this.isGamePaused=!1,this.gamePlayData=null,this.feedbackAudios=null,this.feedbackTexts=null,this.rightToLeft=!1,this.majVersion=null,this.minVersion=null,this.clickTrailToggle=!1,this.initListeners()}initListeners(){this.subscribe(this.EVENTS.SCENE_NAME_EVENT,(t=>{this.gameStateSetSceneListener(t)})),this.subscribe(this.EVENTS.GAMEPLAY_DATA_EVENT,(t=>{this.gameStateGamePlayDataListener(t)})),this.subscribe(this.EVENTS.GAME_PAUSE_STATUS_EVENT,(t=>{this.updateGamePauseActivity(t)})),this.subscribe(this.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,(t=>{this.updateGameTrailToggle(t)}))}gameStateSetSceneListener(t){}gameStateGamePlayDataListener(t){this.gamePlayData=t,this.isGamePaused=!1}updateGamePauseActivity(t){this.isGamePaused=t}updateGameTrailToggle(t){this.clickTrailToggle=t}setDefaultGameStateValues(t,e,i){this.data=t,this.canvas=e,this.width=e.width,this.height=e.height,this.canavsElement=i,this.context=i.getContext("2d"),this.gameCanvasContext=e.getContext("2d",{willReadFrequently:!0}),this.feedbackTexts=t.FeedbackTexts,this.feedbackAudios=t.FeedbackAudios,this.rightToLeft=t.rightToLeft,this.majVersion=t.majVersion,this.minVersion=t.minVersion}getGamePlaySceneDetails(){return(t=>{const e=t.majVersion&&t.minVersion?t.majVersion.toString()+"."+t.minVersion.toString():"";return{canvas:t.canvas,width:t.width,height:t.height,canavsElement:t.canavsElement,gameCanvasContext:t.gameCanvasContext,levelData:{...t.gamePlayData.currentLevelData},levelNumber:t.gamePlayData.selectedLevelNumber,feedBackTexts:{...t.feedbackTexts},rightToLeft:t?.rightToLeft,jsonVersionNumber:e,feedbackAudios:{...t.feedbackAudios},isGamePaused:t.isGamePaused}})(this)}};class st{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,s({pause_button_image:"./assets/images/pause_v01.webp"},(t=>{this.pause_button_image=t.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9,nt.publish(nt.EVENTS.GAME_PAUSE_STATUS_EVENT,!0)),i}}class at{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(U,this.handleStoneDroppedEvent,!1),document.addEventListener(j,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(U,this.handleStoneDroppedEvent,!1),document.removeEventListener(j,this.handleLoadPuzzleEvent,!1)}}class ot extends at{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=i,this.images={level_indicator:"./assets/images/levels_v01.webp",bar_empty:"./assets/images/bar_empty_v01.webp",bar_full:"./assets/images/bar_full_v01.webp"},s(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}class rt extends at{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;droppedStoneCount=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,i,n,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=n,this.rightToLeft=s,this.currentPromptText=i.prompt.promptText,this.currentPuzzleData=i,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new vt,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(W,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.onClick(n,s)&&this.playSound()};getPromptAudioUrl=()=>n.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(n.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var i=this.calculateFont();const n=this.promptImageWidth,s=this.promptImageHeight;if(this.context.font=`${i}px ${N}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var a=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(a).width/2,e),this.context.fillStyle="black",this.context.fillText(a,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,s/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let i=this.targetStones.length-1;i>=0;i--)this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[i],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[i],t,e)),t=t+this.context.measureText(this.targetStones[i]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,s/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-n),e=.33*(this.height-s);this.context.drawImage(this.promptPlayButton,t,e,n/4,s/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,n/4,s/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),i=this.promptImageWidth,n=this.promptImageHeight;var s=this.calculateFont();this.context.font=`${s}px ${N}, monospace`;let a=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var r=this.currentPuzzleData.targetStones[0].split("");for(let s=0;s<t.length;s++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){r.includes(t[s])?(r=r.slice(1,r.length),this.context.fillStyle="red",this.context.fillText(t[s],a,e)):(this.context.fillStyle="black",this.context.fillText(t[s],a,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){if(this.targetStones.length!=this.currentPromptText.length){this.targetStones.length>s&&(this.context.fillStyle=this.droppedStoneCount>s||null==this.droppedStoneCount?"black":"red",this.context.fillText(this.targetStones[s],a+a/10,e));break}this.context.fillStyle=this.droppedStones>s||null==this.droppedStones?"black":"red",this.context.fillText(t[s],a,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,i/4,n/4)}o=(this.context.measureText(t[s]).width+this.context.measureText(t[s+1]).width)/2,a+=o}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,i=(this.width-t)/2,n=(this.height-e)/5;this.context.drawImage(this.prompt_image,i,n,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.droppedStoneCount=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(W,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t,this.droppedStoneCount++}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,"./assets/images/promptTextBg.webp"),e=this.loadImage(this.promptPlayButton,"./assets/images/promptPlayButton.webp");await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((i,n)=>{t.onload=()=>{i()},t.src=e,t.onerror=t=>{n(t)}}))}}class ht extends at{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==tt.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;unsubscribeEvent;constructor(t,e,i,n,s,a){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=i,this.levelData=n,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio("assets/audios/CorrectStoneFinal.mp3"),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(s),this.puzzleStartTime=new Date,this.tutorial=new lt(t,e.width,e.height,i),this.stonebg=new Image,this.stonebg.src="./assets/images/stone_pink.webp",this.audioPlayer=new vt,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new vt,this.timerTickingInstance=a,document.addEventListener(W,this.handleVisibilityChange,!1),this.unsubscribeEvent=nt.subscribe(nt.EVENTS.GAME_PAUSE_STATUS_EVENT,(t=>{this.isGamePaused=t}))}createStones(e){const i=this.getFoilStones();for(let n=0;n<i.length;n++)i[n]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[n]),this.foilStones.push(new t(this.context,this.canvas.width,this.canvas.height,i[n],this.stonePos[n][0],this.stonePos[n][1],e,this.timerTickingInstance,n==i.length-1?this.tutorial:null))}draw(t){this.foilStones.length>0&&(this.foilStones.forEach((e=>{e&&void 0!==e.frame&&e.draw(t)})),this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t))}drawWordPuzzleLetters(t,e,i){for(let n=0;n<this.foilStones.length;n++)e(n)&&this.foilStones[n].draw(t,Object.keys(i).length>1&&void 0!==i[n]);this.foilStones.length>0&&this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){this.unsubscribeEvent(),document.removeEventListener(W,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,i=!1){const n=i?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,n,i,t),n}processLetterDropFeedbackAudio(t,e,i,n){if(e){(i?n===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,d,m(2))}else this.audioPlayer.playFeedbackAudios(!1,d,"./assets/audios/MonsterSpit.mp3",Math.round(Math.random())>0?"./assets/audios/Disapointed-05.mp3":null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}playCorrectAnswerFeedbackSound(t){const e=n.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,d,m(e),"assets/audios/PointsAdd.wav",n.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}resetStonePosition(t,e,i){const n=e,s=i;if(n&&s&&n.text&&"number"==typeof s.origx&&"number"==typeof s.origy){const e=50,i=t/2;n.x=n.text.length<=3&&s.origx<e&&s.origx<i?s.origx+25:s.origx,n.y=s.origy}return n}computeCursorDistance(t,e,i){return Math.sqrt((t-i.x)**2+(e-i.y)**2)}handlePickStoneUp(t,e){let i=null,n=0;for(let s of this.foilStones){if(this.computeCursorDistance(t,e,s)<=40){i=s,i.foilStoneIndex=n;break}n++}return i}handleHoveringToAnotherStone(t,e,i){let n=null,s=0;for(let a of this.foilStones){if(this.computeCursorDistance(t,e,a)<=40&&i(a.text,s)){n=a,n.foilStoneIndex=s;break}s++}return n}handleMovingStoneLetter(t,e,i){const n=t,s=this.canvas.getBoundingClientRect();return n.x=e-s.left,n.y=i-s.top,n}}class lt{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,i,n){this.width=e,this.height=i,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=n>=0?n:null,this.tutorialImg=new Image,this.tutorialImg.src="./assets/images/tutorial_hand.webp",this.drawRipple=function(t){const e=t;if(!e)throw new Error("Canvas context is null");let i=0,n=0,s=10,a=10;return function(t,o,r){r&&(s=0,a=0),i=t,n=o,e.beginPath(),e.arc(i,n,s,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(i,n,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),s+=.5,a+=.5,(s>=60||a>=60)&&(s=10,a=10)}}(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,i){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const n=this.x-this.endx+this.absdx,s=this.y-this.endy+this.absdy;let a=100*Math.sqrt(n*n+s*s)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,i,i),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,i,n){this.totalTime+=Math.floor(t);const s=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*s,o=this.tutorialImg.height*s;this.context.drawImage(this.tutorialImg,e,i,a,o),!n&&this.drawRipple(e+.02*this.width,i+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,i,n){const s=(i-e)/2,a=Math.PI/n;return e+s*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,i=this.height/1.9+this.tutorialImg.height/.8,n=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let s;const a=this.endx;this.totalTime<e/2?(s=n+this.totalTime/(e/2)*(i-n),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(s=i-(this.totalTime-e/2)/(e/2)*(i-n),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,s,this.tutorialImg.width,this.tutorialImg.height),s<=n&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return tt.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return tt.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}var ct=i(52);class ut{props;riveInstance;src="./assets/monsterrive.riv";stateMachines="State Machine 1";static Animations={OPENING_MOUTH_EAT:"Opening Mouth Eat",EAT_HAPPY:"Eat Happy",IDLE:"Idle",EAT_DISGUST:"Eat Disgust"};constructor(t){this.props=t,this.riveInstance=new ct.Rive({src:this.src,canvas:this.props.canvas,autoplay:this.props.autoplay,stateMachines:this.stateMachines,layout:new ct.Layout({fit:ct.Fit[this.props.fit||"Contain"],alignment:ct.Alignment[this.props.alignment||"TopCenter"]}),onLoad:()=>{this.props.onLoad&&this.props.onLoad()}})}play(t){this.riveInstance&&this.riveInstance.play(t)}stop(){this.riveInstance&&this.riveInstance.stop()}onStateChange(t){this.riveInstance.stateMachine.inputs.forEach((e=>{e.onStateChange((e=>{t(e)}))}))}}class dt extends at{zindex;width;height;x;y;fps;canvasStack;canvasElement;context;game;monsterPhase;riveMonster;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canvasElement=document.getElementById("rivecanvas"),this.context=this.canvasElement.getContext("2d"),this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.initializeRiveMonster(),i&&i()}initializeRiveMonster(){this.riveMonster=new ut({canvas:this.canvasElement,autoplay:!0,fit:"contain",alignment:"topCenter",width:this.canvasElement.width,height:this.canvasElement.height,onLoad:()=>{this.riveMonster.play(ut.Animations.IDLE)}})}stopRiveMonster(){this.riveMonster&&(this.riveMonster.stop(),console.log("Rive Monster animation stopped."))}changeToDragAnimation(){this.riveMonster.play(ut.Animations.OPENING_MOUTH_EAT)}changeToEatAnimation(){this.riveMonster.play(ut.Animations.EAT_HAPPY)}changeToIdleAnimation(){this.riveMonster.play(ut.Animations.IDLE)}changeToSpitAnimation(){this.riveMonster.play(ut.Animations.EAT_DISGUST)}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.stopRiveMonster(),this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}class mt extends at{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,i){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=i,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new vt,this.playLevelEndAudioOnce=!0,this.images={timer_empty:"./assets/images/timer_empty.webp",rotating_clock:"./assets/images/timer.webp",timer_full:"./assets/images/timer_full.png"},s(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio("./assets/audios/timeout.mp3"),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}class pt{element;constructor(t){this.element=document.getElementById(t)}setClassName(t){this.element&&(this.element.className="",this.element.classList.add(t))}createElementWithImage(t,e,i,n){const s=document.createElement("div");s.className=t;const a=document.createElement("img");return a.src=e,a.alt=i,a.id=n,s.appendChild(a),s}}class gt extends pt{constructor(){super("background")}generateBackground(t){const e=document.getElementById("background-elements");if(!e)return;const i=this.getAssetsForSeason(t);this.clearBackgroundContent();const n=this.createBackgroundSection(t,i);e.appendChild(n)}static createBackgroundComponent(t){const e=["summer","autumn","winter"],i=Math.floor(t/10)%e.length,n=t>=30?e[i%3]:e[i];return this.updateBackgroundClass(n),n}createBackgroundGameplay(t){const e=document.getElementById("background-elements");if(!e)return;const i=this.getAssetsForSeason(t),n=document.createElement("div");n.className=`${t}-section`;const s=this.createElementWithImage("ftm-mountain",i.hill,"Hill","hill-img"),a=this.createElementWithImage("ftm-fence",i.fence,"Fence","fence-img"),o=this.createElementWithImage("ftm-totem",i.totem,"Totem","totem-img");n.append(s,a,o),e.appendChild(n)}getAssetsForSeason(t){switch(t){case"summer":return{hill:A.ASSETS_PATH_HILL,fence:A.ASSETS_PATH_FENCE,totem:A.ASSETS_PATH_TOTEM};case"autumn":return{hill:I.AUTUMN_HILL_1,fence:I.AUTUMN_FENCE_1,totem:I.AUTUMN_SIGN_1};case"winter":return{hill:C.WINTER_HILL_1,fence:C.WINTER_FENCE_1,totem:C.WINTER_SIGN_1};default:throw new Error("Unknown season: "+t)}}clearBackgroundContent(){const t=document.getElementById("background-elements");t&&(t.innerHTML="")}createBackgroundSection(t,e){const i=document.createElement("div");i.className=t;const n=this.createElementWithImage("ftm-mountain",e.hill,"Hill","hill-img"),s=this.createElementWithImage("ftm-fence",e.fence,"Fence","fence-img"),a=this.createElementWithImage("ftm-totem",e.totem,"Totem","totem-img");return i.append(n,s,a),i}static updateBackgroundClass(t){const e=document.getElementById("background"),i=`${t}-bg`;e&&e.className!==i&&(e.className=i)}}class ft{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(t){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=t,h(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{h(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}class vt{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=bt.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const t="./assets/audios/ButtonClick.mp3";if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(t),vt.audioBuffers.set(t,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(t){return void console.error("Error loading or decoding click sound:",t)}if(this.clickSoundBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.clickSoundBuffer,t.connect(this.audioContext.destination),t.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(t){return new Promise((async(e,i)=>{try{const i=await fetch(t),n=await i.arrayBuffer();e(await this.audioContext.decodeAudioData(n))}catch(t){console.error("Error loading or decoding audio:",t),i(t)}}))}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(vt.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&vt.audioBuffers.set(t,e)}playAudio(t){const e=vt.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((i=>{this.audioContext?.decodeAudioData(i,(i=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=i,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)}}class bt{static instance=null;static getAudioContext(){return bt.instance||(bt.instance=new(window.AudioContext||window.webkitAudioContext)),bt.instance}}class wt{ctx;particles;mouse;isDiamond;clickTrailToggle;unsubscribeEvent;constructor(t){this.ctx=t.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1,this.clickTrailToggle=!1,this.init()}init(){this.draw(),this.unsubscribeEvent=nt.subscribe(nt.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,(t=>{this.clickTrailToggle=t}))}draw(){this.drawTrail();let t=[];for(let e=0;e<this.particles.length;e++)this.particles[e].time<=this.particles[e].ttl&&t.push(this.particles[e]);this.particles=t}drawTrail(){for(let t=0;t<this.particles.length;t++)this.particles[t].update(),this.isDiamond=!this.isDiamond,this.particles[t].draw(this.isDiamond)}addTrailParticlesOnMove(t,e){this.clickTrailToggle&&(this.mouse.x=t,this.mouse.y=e,this.particles.push(new yt(this.ctx,this.mouse)))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}clearTrailSubscription(){this.unsubscribeEvent()}}class yt{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(t,e){const i=this.determineValueByScreenWidth(30,15),n=this.determineValueByScreenWidth(30,15),s=this.determineValueByScreenWidth(3,.5),a=this.determineValueByScreenWidth(2,.5);this.ctx=t,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:e.x+this.getRandomInt(-i,i),y:e.y+this.getRandomInt(-n,n),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-s,s),y:this.start.y+this.getRandomInt(-a,a)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(t,e){return window.screen.width>768?t:e}update(){if(this.time<=this.ttl){const t=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(t)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(t){t?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(t,e){return Math.round(Math.random()*(e-t))+t}easeOutQuart(t){return 1-Math.pow(1-t,4)}}class St{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,n){this.posX=i,this.posY=n,this.context=t,this.canvas=e,s({close_button_image:"./assets/images/map_btn.webp"},(t=>{this.close_button_image=t.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:n}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}class _t{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,s({cancel_button_image:E},(t=>{this.cancel_button_image=t.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),i}}class Et{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,n,a){this.posX=n,this.posY=a,this.context=t,this.width=e,this.height=i,s({next_button_image:S},(t=>{this.next_button_image=t.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}class Tt{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,n){this.posX=i+5,this.posY=n+10,this.context=t,this.canvas=e,s({no_button_image:E},(t=>{this.no_button_image=t.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),i}}class At{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,n){this.posX=i,this.posY=n,this.context=t,this.canvas=e,s({retry_button_image:"./assets/images/retry_btn.webp"},(t=>{this.retry_button_image=t.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:i,y:n}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),i}}class It{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(t,e,i,n){this.posX=i-5,this.posY=n,this.context=t,this.canvas=e,s({yes_button_image:"./assets/images/confirm_btn.webp"},(t=>{this.yes_button_image=t.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(t,e){const i=o(t,e,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return i&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),i}}const Ct=function(t){const e=[];let i=0;for(let n=0;n<t.length;n++){let s=t.charCodeAt(n);s<128?e[i++]=s:s<2048?(e[i++]=s>>6|192,e[i++]=63&s|128):55296==(64512&s)&&n+1<t.length&&56320==(64512&t.charCodeAt(n+1))?(s=65536+((1023&s)<<10)+(1023&t.charCodeAt(++n)),e[i++]=s>>18|240,e[i++]=s>>12&63|128,e[i++]=s>>6&63|128,e[i++]=63&s|128):(e[i++]=s>>12|224,e[i++]=s>>6&63|128,e[i++]=63&s|128)}return e},Pt={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const i=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,n=[];for(let e=0;e<t.length;e+=3){const s=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,h=r?t[e+2]:0,l=s>>2,c=(3&s)<<4|o>>4;let u=(15&o)<<2|h>>6,d=63&h;r||(d=64,a||(u=64)),n.push(i[l],i[c],i[u],i[d])}return n.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(Ct(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let i=0,n=0;for(;i<t.length;){const s=t[i++];if(s<128)e[n++]=String.fromCharCode(s);else if(s>191&&s<224){const a=t[i++];e[n++]=String.fromCharCode((31&s)<<6|63&a)}else if(s>239&&s<365){const a=((7&s)<<18|(63&t[i++])<<12|(63&t[i++])<<6|63&t[i++])-65536;e[n++]=String.fromCharCode(55296+(a>>10)),e[n++]=String.fromCharCode(56320+(1023&a))}else{const a=t[i++],o=t[i++];e[n++]=String.fromCharCode((15&s)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const i=e?this.charToByteMapWebSafe_:this.charToByteMap_,n=[];for(let e=0;e<t.length;){const s=i[t.charAt(e++)],a=e<t.length?i[t.charAt(e)]:0;++e;const o=e<t.length?i[t.charAt(e)]:64;++e;const r=e<t.length?i[t.charAt(e)]:64;if(++e,null==s||null==a||null==o||null==r)throw new xt;const h=s<<2|a>>4;if(n.push(h),64!==o){const t=a<<4&240|o>>2;if(n.push(t),64!==r){const t=o<<6&192|r;n.push(t)}}}return n},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class xt extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const Lt=function(t){return function(t){const e=Ct(t);return Pt.encodeByteArray(e,!0)}(t).replace(/\./g,"")},kt=function(t){try{return Pt.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};const Dt=()=>function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==i.g)return i.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__,Bt=()=>{try{return Dt()||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&kt(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},Mt=()=>{var t;return null===(t=Bt())||void 0===t?void 0:t.config};class zt{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,i)=>{e?this.reject(e):this.resolve(i),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,i))}}}function Ot(){try{return"object"==typeof indexedDB}catch(t){return!1}}function Rt(){return new Promise(((t,e)=>{try{let i=!0;const n="validate-browser-context-for-indexeddb-analytics-module",s=self.indexedDB.open(n);s.onsuccess=()=>{s.result.close(),i||self.indexedDB.deleteDatabase(n),t(!0)},s.onupgradeneeded=()=>{i=!1},s.onerror=()=>{var t;e((null===(t=s.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}class Nt extends Error{constructor(t,e,i){super(e),this.code=t,this.customData=i,this.name="FirebaseError",Object.setPrototypeOf(this,Nt.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,Ft.prototype.create)}}class Ft{constructor(t,e,i){this.service=t,this.serviceName=e,this.errors=i}create(t,...e){const i=e[0]||{},n=`${this.service}/${t}`,s=this.errors[t],a=s?function(t,e){return t.replace(jt,((t,i)=>{const n=e[i];return null!=n?String(n):`<${i}?>`}))}(s,i):"Error",o=`${this.serviceName}: ${a} (${n}).`;return new Nt(n,o,i)}}const jt=/\{\$([^}]+)}/g;function Ut(t,e){if(t===e)return!0;const i=Object.keys(t),n=Object.keys(e);for(const s of i){if(!n.includes(s))return!1;const i=t[s],a=e[s];if(Vt(i)&&Vt(a)){if(!Ut(i,a))return!1}else if(i!==a)return!1}for(const t of n)if(!i.includes(t))return!1;return!0}function Vt(t){return null!==t&&"object"==typeof t}const Wt=1e3,Ht=2,Xt=144e5,Yt=.5;function $t(t,e=Wt,i=Ht){const n=e*Math.pow(i,t),s=Math.round(Yt*n*(Math.random()-.5)*2);return Math.min(Xt,n+s)}function Gt(t){return t&&t._delegate?t._delegate:t}class qt{constructor(t,e,i){this.name=t,this.instanceFactory=e,this.type=i,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const Kt="[DEFAULT]";class Jt{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new zt;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const i=this.getOrInitializeService({instanceIdentifier:e});i&&t.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const i=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),n=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(i)&&!this.shouldAutoInitialize()){if(n)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:i})}catch(t){if(n)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:Kt})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const i=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:i});e.resolve(t)}catch(t){}}}}clearInstance(t=Kt){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=Kt){return this.instances.has(t)}getOptions(t=Kt){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,i=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(i))throw Error(`${this.name}(${i}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const n=this.getOrInitializeService({instanceIdentifier:i,options:e});for(const[t,e]of this.instancesDeferred.entries()){i===this.normalizeInstanceIdentifier(t)&&e.resolve(n)}return n}onInit(t,e){var i;const n=this.normalizeInstanceIdentifier(e),s=null!==(i=this.onInitCallbacks.get(n))&&void 0!==i?i:new Set;s.add(t),this.onInitCallbacks.set(n,s);const a=this.instances.get(n);return a&&t(a,n),()=>{s.delete(t)}}invokeOnInitCallbacks(t,e){const i=this.onInitCallbacks.get(e);if(i)for(const n of i)try{n(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let i=this.instances.get(t);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(n=t,n===Kt?void 0:n),options:e}),this.instances.set(t,i),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(i,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,i)}catch(t){}var n;return i||null}normalizeInstanceIdentifier(t=Kt){return this.component?this.component.multipleInstances?t:Kt:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class Qt{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new Jt(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}const Zt=[];var te;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(te||(te={}));const ee={debug:te.DEBUG,verbose:te.VERBOSE,info:te.INFO,warn:te.WARN,error:te.ERROR,silent:te.SILENT},ie=te.INFO,ne={[te.DEBUG]:"log",[te.VERBOSE]:"log",[te.INFO]:"info",[te.WARN]:"warn",[te.ERROR]:"error"},se=(t,e,...i)=>{if(e<t.logLevel)return;const n=(new Date).toISOString(),s=ne[e];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[s](`[${n}]  ${t.name}:`,...i)};class ae{constructor(t){this.name=t,this._logLevel=ie,this._logHandler=se,this._userLogHandler=null,Zt.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in te))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?ee[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,te.DEBUG,...t),this._logHandler(this,te.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,te.VERBOSE,...t),this._logHandler(this,te.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,te.INFO,...t),this._logHandler(this,te.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,te.WARN,...t),this._logHandler(this,te.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,te.ERROR,...t),this._logHandler(this,te.ERROR,...t)}}const oe=(t,e)=>e.some((e=>t instanceof e));let re,he;const le=new WeakMap,ce=new WeakMap,ue=new WeakMap,de=new WeakMap,me=new WeakMap;let pe={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return ce.get(t);if("objectStoreNames"===e)return t.objectStoreNames||ue.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return ve(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function ge(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(he||(he=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(be(this),e),ve(le.get(this))}:function(...e){return ve(t.apply(be(this),e))}:function(e,...i){const n=t.call(be(this),e,...i);return ue.set(n,e.sort?e.sort():[e]),ve(n)}}function fe(t){return"function"==typeof t?ge(t):(t instanceof IDBTransaction&&function(t){if(ce.has(t))return;const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",a),t.removeEventListener("abort",a)},s=()=>{e(),n()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",s),t.addEventListener("error",a),t.addEventListener("abort",a)}));ce.set(t,e)}(t),oe(t,re||(re=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,pe):t)}function ve(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("success",s),t.removeEventListener("error",a)},s=()=>{e(ve(t.result)),n()},a=()=>{i(t.error),n()};t.addEventListener("success",s),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&le.set(e,t)})).catch((()=>{})),me.set(e,t),e}(t);if(de.has(t))return de.get(t);const e=fe(t);return e!==t&&(de.set(t,e),me.set(e,t)),e}const be=t=>me.get(t);const we=["get","getKey","getAll","getAllKeys","count"],ye=["put","add","delete","clear"],Se=new Map;function _e(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(Se.get(e))return Se.get(e);const i=e.replace(/FromIndex$/,""),n=e!==i,s=ye.includes(i);if(!(i in(n?IDBIndex:IDBObjectStore).prototype)||!s&&!we.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,s?"readwrite":"readonly");let o=a.store;return n&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),s&&a.done]))[0]};return Se.set(e,a),a}pe=(t=>({...t,get:(e,i,n)=>_e(e,i)||t.get(e,i,n),has:(e,i)=>!!_e(e,i)||t.has(e,i)}))(pe);class Ee{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const Te="@firebase/app",Ae="0.9.15",Ie=new ae("@firebase/app"),Ce="@firebase/app-compat",Pe="@firebase/analytics-compat",xe="@firebase/analytics",Le="@firebase/app-check-compat",ke="@firebase/app-check",De="@firebase/auth",Be="@firebase/auth-compat",Me="@firebase/database",ze="@firebase/database-compat",Oe="@firebase/functions",Re="@firebase/functions-compat",Ne="@firebase/installations",Fe="@firebase/installations-compat",je="@firebase/messaging",Ue="@firebase/messaging-compat",Ve="@firebase/performance",We="@firebase/performance-compat",He="@firebase/remote-config",Xe="@firebase/remote-config-compat",Ye="@firebase/storage",$e="@firebase/storage-compat",Ge="@firebase/firestore",qe="@firebase/firestore-compat",Ke="firebase",Je="[DEFAULT]",Qe={[Te]:"fire-core",[Ce]:"fire-core-compat",[xe]:"fire-analytics",[Pe]:"fire-analytics-compat",[ke]:"fire-app-check",[Le]:"fire-app-check-compat",[De]:"fire-auth",[Be]:"fire-auth-compat",[Me]:"fire-rtdb",[ze]:"fire-rtdb-compat",[Oe]:"fire-fn",[Re]:"fire-fn-compat",[Ne]:"fire-iid",[Fe]:"fire-iid-compat",[je]:"fire-fcm",[Ue]:"fire-fcm-compat",[Ve]:"fire-perf",[We]:"fire-perf-compat",[He]:"fire-rc",[Xe]:"fire-rc-compat",[Ye]:"fire-gcs",[$e]:"fire-gcs-compat",[Ge]:"fire-fst",[qe]:"fire-fst-compat","fire-js":"fire-js",[Ke]:"fire-js-all"},Ze=new Map,ti=new Map;function ei(t,e){try{t.container.addComponent(e)}catch(i){Ie.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,i)}}function ii(t){const e=t.name;if(ti.has(e))return Ie.debug(`There were multiple attempts to register component ${e}.`),!1;ti.set(e,t);for(const e of Ze.values())ei(e,t);return!0}function ni(t,e){const i=t.container.getProvider("heartbeat").getImmediate({optional:!0});return i&&i.triggerHeartbeat(),t.container.getProvider(e)}const si=new Ft("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class ai{constructor(t,e,i){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=i,this.container.addComponent(new qt("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw si.create("app-deleted",{appName:this._name})}}function oi(t,e={}){let i=t;if("object"!=typeof e){e={name:e}}const n=Object.assign({name:Je,automaticDataCollectionEnabled:!1},e),s=n.name;if("string"!=typeof s||!s)throw si.create("bad-app-name",{appName:String(s)});if(i||(i=Mt()),!i)throw si.create("no-options");const a=Ze.get(s);if(a){if(Ut(i,a.options)&&Ut(n,a.config))return a;throw si.create("duplicate-app",{appName:s})}const o=new Qt(s);for(const t of ti.values())o.addComponent(t);const r=new ai(i,n,o);return Ze.set(s,r),r}function ri(t,e,i){var n;let s=null!==(n=Qe[t])&&void 0!==n?n:t;i&&(s+=`-${i}`);const a=s.match(/\s|\//),o=e.match(/\s|\//);if(a||o){const t=[`Unable to register library "${s}" with version "${e}":`];return a&&t.push(`library name "${s}" contains illegal characters (whitespace or "/")`),a&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void Ie.warn(t.join(" "))}ii(new qt(`${s}-version`,(()=>({library:s,version:e})),"VERSION"))}const hi="firebase-heartbeat-database",li=1,ci="firebase-heartbeat-store";let ui=null;function di(){return ui||(ui=function(t,e,{blocked:i,upgrade:n,blocking:s,terminated:a}={}){const o=indexedDB.open(t,e),r=ve(o);return n&&o.addEventListener("upgradeneeded",(t=>{n(ve(o.result),t.oldVersion,t.newVersion,ve(o.transaction),t)})),i&&o.addEventListener("blocked",(t=>i(t.oldVersion,t.newVersion,t))),r.then((t=>{a&&t.addEventListener("close",(()=>a())),s&&t.addEventListener("versionchange",(t=>s(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),r}(hi,li,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(ci)}}).catch((t=>{throw si.create("idb-open",{originalErrorMessage:t.message})}))),ui}async function mi(t,e){try{const i=(await di()).transaction(ci,"readwrite"),n=i.objectStore(ci);await n.put(e,pi(t)),await i.done}catch(t){if(t instanceof Nt)Ie.warn(t.message);else{const e=si.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});Ie.warn(e.message)}}}function pi(t){return`${t.name}!${t.options.appId}`}class gi{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new vi(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=fi();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=fi(),{heartbeatsToSend:e,unsentEntries:i}=function(t,e=1024){const i=[];let n=t.slice();for(const s of t){const t=i.find((t=>t.agent===s.agent));if(t){if(t.dates.push(s.date),bi(i)>e){t.dates.pop();break}}else if(i.push({agent:s.agent,dates:[s.date]}),bi(i)>e){i.pop();break}n=n.slice(1)}return{heartbeatsToSend:i,unsentEntries:n}}(this._heartbeatsCache.heartbeats),n=Lt(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,i.length>0?(this._heartbeatsCache.heartbeats=i,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),n}}function fi(){return(new Date).toISOString().substring(0,10)}class vi{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!Ot()&&Rt().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const t=await async function(t){try{const e=await di();return await e.transaction(ci).objectStore(ci).get(pi(t))}catch(t){if(t instanceof Nt)Ie.warn(t.message);else{const e=si.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});Ie.warn(e.message)}}}(this.app);return t||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return mi(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const i=await this.read();return mi(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:i.lastSentHeartbeatDate,heartbeats:[...i.heartbeats,...t.heartbeats]})}}}function bi(t){return Lt(JSON.stringify({version:2,heartbeats:t})).length}var wi;wi="",ii(new qt("platform-logger",(t=>new Ee(t)),"PRIVATE")),ii(new qt("heartbeat",(t=>new gi(t)),"PRIVATE")),ri(Te,Ae,wi),ri(Te,Ae,"esm2017"),ri("fire-js","");ri("firebase","10.1.0","app");const yi=(t,e)=>e.some((e=>t instanceof e));let Si,_i;const Ei=new WeakMap,Ti=new WeakMap,Ai=new WeakMap,Ii=new WeakMap,Ci=new WeakMap;let Pi={get(t,e,i){if(t instanceof IDBTransaction){if("done"===e)return Ti.get(t);if("objectStoreNames"===e)return t.objectStoreNames||Ai.get(t);if("store"===e)return i.objectStoreNames[1]?void 0:i.objectStore(i.objectStoreNames[0])}return ki(t[e])},set:(t,e,i)=>(t[e]=i,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function xi(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(_i||(_i=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(Di(this),e),ki(Ei.get(this))}:function(...e){return ki(t.apply(Di(this),e))}:function(e,...i){const n=t.call(Di(this),e,...i);return Ai.set(n,e.sort?e.sort():[e]),ki(n)}}function Li(t){return"function"==typeof t?xi(t):(t instanceof IDBTransaction&&function(t){if(Ti.has(t))return;const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("complete",s),t.removeEventListener("error",a),t.removeEventListener("abort",a)},s=()=>{e(),n()},a=()=>{i(t.error||new DOMException("AbortError","AbortError")),n()};t.addEventListener("complete",s),t.addEventListener("error",a),t.addEventListener("abort",a)}));Ti.set(t,e)}(t),yi(t,Si||(Si=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,Pi):t)}function ki(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,i)=>{const n=()=>{t.removeEventListener("success",s),t.removeEventListener("error",a)},s=()=>{e(ki(t.result)),n()},a=()=>{i(t.error),n()};t.addEventListener("success",s),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&Ei.set(e,t)})).catch((()=>{})),Ci.set(e,t),e}(t);if(Ii.has(t))return Ii.get(t);const e=Li(t);return e!==t&&(Ii.set(t,e),Ci.set(e,t)),e}const Di=t=>Ci.get(t);const Bi=["get","getKey","getAll","getAllKeys","count"],Mi=["put","add","delete","clear"],zi=new Map;function Oi(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(zi.get(e))return zi.get(e);const i=e.replace(/FromIndex$/,""),n=e!==i,s=Mi.includes(i);if(!(i in(n?IDBIndex:IDBObjectStore).prototype)||!s&&!Bi.includes(i))return;const a=async function(t,...e){const a=this.transaction(t,s?"readwrite":"readonly");let o=a.store;return n&&(o=o.index(e.shift())),(await Promise.all([o[i](...e),s&&a.done]))[0]};return zi.set(e,a),a}!function(t){Pi=t(Pi)}((t=>({...t,get:(e,i,n)=>Oi(e,i)||t.get(e,i,n),has:(e,i)=>!!Oi(e,i)||t.has(e,i)})));const Ri="@firebase/installations",Ni="0.6.4",Fi=1e4,ji=`w:${Ni}`,Ui="FIS_v2",Vi="https://firebaseinstallations.googleapis.com/v1",Wi=36e5,Hi=new Ft("installations","Installations",{"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."});function Xi(t){return t instanceof Nt&&t.code.includes("request-failed")}function Yi({projectId:t}){return`${Vi}/projects/${t}/installations`}function $i(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function Gi(t,e){const i=(await e.json()).error;return Hi.create("request-failed",{requestName:t,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})}function qi({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function Ki(t,{refreshToken:e}){const i=qi(t);return i.append("Authorization",function(t){return`${Ui} ${t}`}(e)),i}async function Ji(t){const e=await t();return e.status>=500&&e.status<600?t():e}function Qi(t){return new Promise((e=>{setTimeout(e,t)}))}const Zi=/^[cdef][\w-]{21}$/,tn="";function en(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(i=t,btoa(String.fromCharCode(...i)).replace(/\+/g,"-").replace(/\//g,"_"));var i;return e.substr(0,22)}(t);return Zi.test(e)?e:tn}catch(t){return tn}}function nn(t){return`${t.appName}!${t.appId}`}const sn=new Map;function an(t,e){const i=nn(t);on(i,e),function(t,e){const i=hn();i&&i.postMessage({key:t,fid:e});ln()}(i,e)}function on(t,e){const i=sn.get(t);if(i)for(const t of i)t(e)}let rn=null;function hn(){return!rn&&"BroadcastChannel"in self&&(rn=new BroadcastChannel("[Firebase] FID Change"),rn.onmessage=t=>{on(t.data.key,t.data.fid)}),rn}function ln(){0===sn.size&&rn&&(rn.close(),rn=null)}const cn="firebase-installations-database",un=1,dn="firebase-installations-store";let mn=null;function pn(){return mn||(mn=function(t,e,{blocked:i,upgrade:n,blocking:s,terminated:a}={}){const o=indexedDB.open(t,e),r=ki(o);return n&&o.addEventListener("upgradeneeded",(t=>{n(ki(o.result),t.oldVersion,t.newVersion,ki(o.transaction))})),i&&o.addEventListener("blocked",(()=>i())),r.then((t=>{a&&t.addEventListener("close",(()=>a())),s&&t.addEventListener("versionchange",(()=>s()))})).catch((()=>{})),r}(cn,un,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(dn)}})),mn}async function gn(t,e){const i=nn(t),n=(await pn()).transaction(dn,"readwrite"),s=n.objectStore(dn),a=await s.get(i);return await s.put(e,i),await n.done,a&&a.fid===e.fid||an(t,e.fid),e}async function fn(t){const e=nn(t),i=(await pn()).transaction(dn,"readwrite");await i.objectStore(dn).delete(e),await i.done}async function vn(t,e){const i=nn(t),n=(await pn()).transaction(dn,"readwrite"),s=n.objectStore(dn),a=await s.get(i),o=e(a);return void 0===o?await s.delete(i):await s.put(o,i),await n.done,!o||a&&a.fid===o.fid||an(t,o.fid),o}async function bn(t){let e;const i=await vn(t.appConfig,(i=>{const n=function(t){const e=t||{fid:en(),registrationStatus:0};return Sn(e)}(i),s=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(Hi.create("app-offline"))}}const i={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},n=async function(t,e){try{const i=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:i}){const n=Yi(t),s=qi(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&s.append("x-firebase-client",t)}const o={fid:i,authVersion:Ui,appId:t.appId,sdkVersion:ji},r={method:"POST",headers:s,body:JSON.stringify(o)},h=await Ji((()=>fetch(n,r)));if(h.ok){const t=await h.json();return{fid:t.fid||i,registrationStatus:2,refreshToken:t.refreshToken,authToken:$i(t.authToken)}}throw await Gi("Create Installation",h)}(t,e);return gn(t.appConfig,i)}catch(i){throw Xi(i)&&409===i.customData.serverCode?await fn(t.appConfig):await gn(t.appConfig,{fid:e.fid,registrationStatus:0}),i}}(t,i);return{installationEntry:i,registrationPromise:n}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:wn(t)}:{installationEntry:e}}(t,n);return e=s.registrationPromise,s.installationEntry}));return i.fid===tn?{installationEntry:await e}:{installationEntry:i,registrationPromise:e}}async function wn(t){let e=await yn(t.appConfig);for(;1===e.registrationStatus;)await Qi(100),e=await yn(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:i}=await bn(t);return i||e}return e}function yn(t){return vn(t,(t=>{if(!t)throw Hi.create("installation-not-found");return Sn(t)}))}function Sn(t){return 1===(e=t).registrationStatus&&e.registrationTime+Fi<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function _n({appConfig:t,heartbeatServiceProvider:e},i){const n=function(t,{fid:e}){return`${Yi(t)}/${e}/authTokens:generate`}(t,i),s=Ki(t,i),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&s.append("x-firebase-client",t)}const o={installation:{sdkVersion:ji,appId:t.appId}},r={method:"POST",headers:s,body:JSON.stringify(o)},h=await Ji((()=>fetch(n,r)));if(h.ok){return $i(await h.json())}throw await Gi("Generate Auth Token",h)}async function En(t,e=!1){let i;const n=await vn(t.appConfig,(n=>{if(!An(n))throw Hi.create("not-registered");const s=n.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+Wi}(t)}(s))return n;if(1===s.requestStatus)return i=async function(t,e){let i=await Tn(t.appConfig);for(;1===i.authToken.requestStatus;)await Qi(100),i=await Tn(t.appConfig);const n=i.authToken;return 0===n.requestStatus?En(t,e):n}(t,e),n;{if(!navigator.onLine)throw Hi.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(n);return i=async function(t,e){try{const i=await _n(t,e),n=Object.assign(Object.assign({},e),{authToken:i});return await gn(t.appConfig,n),i}catch(i){if(!Xi(i)||401!==i.customData.serverCode&&404!==i.customData.serverCode){const i=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await gn(t.appConfig,i)}else await fn(t.appConfig);throw i}}(t,e),e}}));return i?await i:n.authToken}function Tn(t){return vn(t,(t=>{if(!An(t))throw Hi.create("not-registered");const e=t.authToken;return 1===(i=e).requestStatus&&i.requestTime+Fi<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var i}))}function An(t){return void 0!==t&&2===t.registrationStatus}async function In(t,e=!1){const i=t;await async function(t){const{registrationPromise:e}=await bn(t);e&&await e}(i);return(await En(i,e)).token}function Cn(t){return Hi.create("missing-app-config-values",{valueName:t})}const Pn="installations",xn=t=>{const e=t.getProvider("app").getImmediate(),i=function(t){if(!t||!t.options)throw Cn("App Configuration");if(!t.name)throw Cn("App Name");const e=["projectId","apiKey","appId"];for(const i of e)if(!t.options[i])throw Cn(i);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:i,heartbeatServiceProvider:ni(e,"heartbeat"),_delete:()=>Promise.resolve()}},Ln=t=>{const e=ni(t.getProvider("app").getImmediate(),Pn).getImmediate();return{getId:()=>async function(t){const e=t,{installationEntry:i,registrationPromise:n}=await bn(e);return n?n.catch(console.error):En(e).catch(console.error),i.fid}(e),getToken:t=>In(e,t)}};ii(new qt(Pn,xn,"PUBLIC")),ii(new qt("installations-internal",Ln,"PRIVATE")),ri(Ri,Ni),ri(Ri,Ni,"esm2017");const kn="analytics",Dn="firebase_id",Bn="origin",Mn=6e4,zn="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",On="https://www.googletagmanager.com/gtag/js",Rn=new ae("@firebase/analytics"),Nn=new Ft("analytics","Analytics",{"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."});function Fn(t){if(!t.startsWith(On)){const e=Nn.create("invalid-gtag-resource",{gtagURL:t});return Rn.warn(e.message),""}return t}function jn(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function Un(t,e){const i=function(t,e){let i;return window.trustedTypes&&(i=window.trustedTypes.createPolicy(t,e)),i}("firebase-js-sdk-policy",{createScriptURL:Fn}),n=document.createElement("script"),s=`${On}?l=${t}&id=${e}`;n.src=i?null==i?void 0:i.createScriptURL(s):s,n.async=!0,document.head.appendChild(n)}function Vn(t,e,i,n){return async function(s,...a){try{if("event"===s){const[n,s]=a;await async function(t,e,i,n,s){try{let a=[];if(s&&s.send_to){let t=s.send_to;Array.isArray(t)||(t=[t]);const n=await jn(i);for(const i of t){const t=n.find((t=>t.measurementId===i)),s=t&&e[t.appId];if(!s){a=[];break}a.push(s)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",n,s||{})}catch(t){Rn.error(t)}}(t,e,i,n,s)}else if("config"===s){const[s,o]=a;await async function(t,e,i,n,s,a){const o=n[s];try{if(o)await e[o];else{const t=(await jn(i)).find((t=>t.measurementId===s));t&&await e[t.appId]}}catch(t){Rn.error(t)}t("config",s,a)}(t,e,i,n,s,o)}else if("consent"===s){const[e]=a;t("consent","update",e)}else if("get"===s){const[e,i,n]=a;t("get",e,i,n)}else if("set"===s){const[e]=a;t("set",e)}else t(s,...a)}catch(t){Rn.error(t)}}}const Wn=30;const Hn=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function Xn(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function Yn(t,e=Hn,i){const{appId:n,apiKey:s,measurementId:a}=t.options;if(!n)throw Nn.create("no-app-id");if(!s){if(a)return{measurementId:a,appId:n};throw Nn.create("no-api-key")}const o=e.getThrottleMetadata(n)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new Gn;return setTimeout((async()=>{r.abort()}),void 0!==i?i:Mn),$n({appId:n,apiKey:s,measurementId:a},o,r,e)}async function $n(t,{throttleEndTimeMillis:e,backoffCount:i},n,s=Hn){var a;const{appId:o,measurementId:r}=t;try{await function(t,e){return new Promise(((i,n)=>{const s=Math.max(e-Date.now(),0),a=setTimeout(i,s);t.addEventListener((()=>{clearTimeout(a),n(Nn.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(n,e)}catch(t){if(r)return Rn.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:o,measurementId:r};throw t}try{const e=await async function(t){var e;const{appId:i,apiKey:n}=t,s={method:"GET",headers:Xn(n)},a=zn.replace("{app-id}",i),o=await fetch(a,s);if(200!==o.status&&304!==o.status){let t="";try{const i=await o.json();(null===(e=i.error)||void 0===e?void 0:e.message)&&(t=i.error.message)}catch(t){}throw Nn.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return s.deleteThrottleMetadata(o),e}catch(e){const h=e;if(!function(t){if(!(t instanceof Nt&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h)){if(s.deleteThrottleMetadata(o),r)return Rn.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${r} provided in the "measurementId" field in the local Firebase config. [${null==h?void 0:h.message}]`),{appId:o,measurementId:r};throw e}const l=503===Number(null===(a=null==h?void 0:h.customData)||void 0===a?void 0:a.httpStatus)?$t(i,s.intervalMillis,Wn):$t(i,s.intervalMillis),c={throttleEndTimeMillis:Date.now()+l,backoffCount:i+1};return s.setThrottleMetadata(o,c),Rn.debug(`Calling attemptFetch again in ${l} millis`),$n(t,c,n,s)}}class Gn{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let qn,Kn;function Jn(t){Kn=t}function Qn(t){qn=t}async function Zn(t,e,i,n,s,a,o){var r;const h=Yn(t);h.then((e=>{i[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&Rn.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>Rn.error(t))),e.push(h);const l=async function(){if(!Ot())return Rn.warn(Nn.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await Rt()}catch(t){return Rn.warn(Nn.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?n.getId():void 0)),[c,u]=await Promise.all([h,l]);(function(t){const e=window.document.getElementsByTagName("script");for(const i of Object.values(e))if(i.src&&i.src.includes(On)&&i.src.includes(t))return i;return null})(a)||Un(a,c.measurementId),Kn&&(s("consent","default",Kn),Jn(void 0)),s("js",new Date);const d=null!==(r=null==o?void 0:o.config)&&void 0!==r?r:{};return d[Bn]="firebase",d.update=!0,null!=u&&(d[Dn]=u),s("config",c.measurementId,d),qn&&(s("set",qn),Qn(void 0)),c.measurementId}class ts{constructor(t){this.app=t}_delete(){return delete es[this.app.options.appId],Promise.resolve()}}let es={},is=[];const ns={};let ss,as,os="dataLayer",rs="gtag",hs=!1;function ls(){const t=[];if(function(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}()&&t.push("This is a browser extension environment."),"undefined"!=typeof navigator&&navigator.cookieEnabled||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),i=Nn.create("invalid-analytics-context",{errorInfo:e});Rn.warn(i.message)}}function cs(t,e,i){ls();const n=t.options.appId;if(!n)throw Nn.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw Nn.create("no-api-key");Rn.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=es[n])throw Nn.create("already-exists",{id:n});if(!hs){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(os);const{wrappedGtag:t,gtagCore:e}=function(t,e,i,n,s){let a=function(...t){window[n].push(arguments)};return window[s]&&"function"==typeof window[s]&&(a=window[s]),window[s]=Vn(a,t,e,i),{gtagCore:a,wrappedGtag:window[s]}}(es,is,ns,os,rs);as=t,ss=e,hs=!0}es[n]=Zn(t,is,ns,e,ss,os,i);return new ts(t)}function us(t=function(t=Je){const e=Ze.get(t);if(!e&&t===Je&&Mt())return oi();if(!e)throw si.create("no-app",{appName:t});return e}()){const e=ni(t=Gt(t),kn);return e.isInitialized()?e.getImmediate():function(t,e={}){const i=ni(t,kn);if(i.isInitialized()){const t=i.getImmediate();if(Ut(e,i.getOptions()))return t;throw Nn.create("already-initialized")}const n=i.initialize({options:e});return n}(t)}function ds(t,e,i){t=Gt(t),async function(t,e,i,n){if(n&&n.global){const e={};for(const t of Object.keys(i))e[`user_properties.${t}`]=i[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:i})}(as,es[t.app.options.appId],e,i).catch((t=>Rn.error(t)))}function ms(t,e,i,n){t=Gt(t),async function(t,e,i,n,s){if(s&&s.global)t("event",i,n);else{const s=await e;t("event",i,Object.assign(Object.assign({},n),{send_to:s}))}}(as,es[t.app.options.appId],e,i,n).catch((t=>Rn.error(t)))}const ps="@firebase/analytics",gs="0.10.0";ii(new qt(kn,((t,{options:e})=>cs(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),ii(new qt("analytics-internal",(function(t){try{const e=t.getProvider(kn).getImmediate();return{logEvent:(t,i,n)=>ms(e,t,i,n)}}catch(t){throw Nn.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),ri(ps,gs),ri(ps,gs,"esm2017");const fs={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"};class vs{firebaseApp;analytics;constructor(){this.initializeFirebase(),console.log(" source : ",z," and  campaign_id: ",O),null==z&&null==O||this.setUserProperty(z,O)}customEvents(t,e){try{ms(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&ms(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}setUserProperty(t,e){try{ds(this.analytics,{source:t,campaign_id:e},{global:!0}),console.log("User properties set: ",{source:t,campaignId:e})}catch(t){console.error("Error while setting user properties:",t)}}initializeFirebase(){try{this.firebaseApp=oi(fs),this.analytics=us(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}class bs extends vs{static instance;constructor(){super()}static getInstance(){return bs.instance||(bs.instance=new bs),bs.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}class ws{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,i,n){this.posX=i,this.posY=n,this.context=t,this.canvas=e,this.firebaseIntegration=new bs,this.init(),this.images={pause_button_image:"./assets/images/Play_button.webp"},s(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await X();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const i=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),i<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:M,ftm_language:R,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}class ys{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(t,e,i){this.context=e,this.levelData=i,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=t.height/5,this.radiusOffSet=t.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=t.height/13,this.textFontSize=this.size/6}isSpecialLevel(t){return D.includes(t)}isLevelSpecial(t){return this.levelData?.isSpecial?.9*t:t}draw(t,e,i,n){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${N}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+t}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${N}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(t,e,i,n)}applyPulseEffect(){const t=.7,e=Date.now()%1500/1500,i=e<=t,n=i?e/t:(e-t)/(i?t:.30000000000000004),s=i?15*n:15+45*n,a=i?.5*(1-n):0;if(a<=0)return;const{x:o,y:r,radius:h}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},l=this.posX+this.btnSize/o,c=this.posY+this.btnSize/r,u=this.btnSize/h+s;this.context.save(),this.context.beginPath(),this.context.arc(l,c,u,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${a})`,this.context.fill(),this.context.restore()}drawIcons(t,e,i,n){const s=this.levelData.index;if(F.DebugMode||s+t-1>e+1&&this.drawLock(),i.length&&s+t<=n)for(let e=0;e<i.length;e++)if(s-1+t===parseInt(i[e].levelNumber)){this.checkStars(i[e].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(t){const e=this.levelData.x,i=this.levelData.y,n=this.size;t>=1&&this.drawStar(e,i-.01*n),t>1&&this.drawStar(e+n/2.5,i-.01*n),3===t&&this.drawStar(e+n/5,i-.1*n)}drawStar(t,e){this.context.drawImage(this.levelData?.starImg,t,e,this.size/5,this.size/5)}onClick(t,e,i,n,s){Math.sqrt((t-this.levelData.x-this.radiusOffSet)*(t-this.levelData.x-this.radiusOffSet)+(e-this.levelData.y-this.radiusOffSet)*(e-this.levelData.y-this.radiusOffSet))<45&&(F.DebugMode||this.levelData.index+i<=n)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,s(this.levelData.index))}}class Ss{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,i){this.canvas=t,this.yesCallback=e,this.noCallback=i,this.context=this.canvas.getContext("2d"),this.audioPlayer=new vt,this.yesButton=new It(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new Tt(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),s({pop_up_image:T},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(V,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.yesButton.onClick(n,s)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(n,s)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(V,this.handleMouseClick,!1)}}class _s{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,i,n,a){this.canvas=t,this.callback=e,this.gameplayData=a,this.switchToLevelSelection=i,this.reloadScene=n;const o=document.getElementById("canvas");this.context=o.getContext("2d"),this.audioPlayer=new vt,this.cancelButton=new _t(this.context,this.canvas),this.retryButton=new At(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new St(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),s({pop_up_image:T},(t=>{this.pop_up_image=t.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new Ss(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new Ss(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),nt.publish(nt.EVENTS.GAMEPLAY_DATA_EVENT,this.gameplayData),this.reloadScene("GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(nt.publish(nt.EVENTS.GAME_PAUSE_STATUS_EVENT,!1),this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(V,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var i=e.getBoundingClientRect();const n=t.clientX-i.left,s=t.clientY-i.top;this.cancelButton.onClick(n,s)&&(nt.publish(nt.EVENTS.GAME_PAUSE_STATUS_EVENT,!1),this.playClickSound(),this.callback()),this.retryButton.onClick(n,s)&&("english"==R?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(n,s)&&("english"==R?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==R&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==R&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio("./assets/audios/are-you-sure.mp3")};dispose=()=>{document.getElementById("canvas").removeEventListener(V,this.handleMouseClick,!1)}}class Es{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(t,e){this.levelData=t,this.puzzleNumber=e,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(t){this.clearAllValues(),this.puzzleNumber=t}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(t){return!this.hideListObj[t]}handleCheckHoveredStone(t,e){const i=this.groupedLetters,n=this.getTargetWord();if(!this.droppedLetters.length&&n[0]!==i[0])return!1;const s=!i.includes(t),a=!this.groupedObj[e];return n.includes(`${this.droppedLetters}${i}${t}`)&&(s||a)}validateFedLetters(){const t=this.getTargetWord();return this.droppedLetters===t.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const t=this.getTargetWord();return this.droppedLetters===t}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(t,e){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${t}`,this.groupedObj[e]=t}}class Ts{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;switchSceneToEnd;levelNumber;stoneHandler;counter=0;handler;pickedStoneObject;pausePopup;isPauseButtonClicked;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;trailParticles;wordPuzzleLogic;riveMonsterElement;unsubscribeEvent;constructor({monsterPhaseNumber:t,switchSceneToEnd:e,switchToLevelSelection:i,reloadScene:n}){const s=nt.getGamePlaySceneDetails();this.isPauseButtonClicked=s?.isGamePaused,this.width=s.width,this.height=s.height,this.rightToLeft=s.rightToLeft,this.canvas=s.canvas,this.context=s.gameCanvasContext,this.levelData=s.levelData,this.levelNumber=s.levelNumber,this.jsonVersionNumber=s.jsonVersionNumber,this.feedBackTexts=s.feedBackTexts,this.monsterPhaseNumber=t||1,this.switchSceneToEnd=e,this.switchToLevelSelection=i,this.reloadScene=n,this.handler=document.getElementById("canvas"),this.riveMonsterElement=document.getElementById("rivecanvas"),this.riveMonsterElement.style.zIndex="4",this.isDisposing=!1,this.trailParticles=new wt(this.canvas),this.pauseButton=new st(this.context,this.canvas),this.timerTicking=new mt(this.width,this.height,this.loadPuzzle),this.stoneHandler=new ht(this.context,this.canvas,this.counter,this.levelData,s.feedbackAudios,this.timerTicking),this.tutorial=new lt(this.context,this.width,this.height),this.promptText=new rt(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new ot(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new dt(this.canvas,this.monsterPhaseNumber),this.pausePopup=new _s(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:this.levelData,selectedLevelNumber:this.levelNumber});var a=this.levelData.levelMeta.levelNumber;F.DebugMode?localStorage.setItem(c+R+"Debug",a):localStorage.setItem(c+R,a),this.addEventListeners(),this.startGameTime(),this.startPuzzleTime(),this.firebaseIntegration=new bs,this.feedbackTextEffects=new ft,this.audioPlayer=new vt,this.wordPuzzleLogic=new Es(this.levelData,this.counter),this.unsubscribeEvent=nt.subscribe(nt.EVENTS.GAME_PAUSE_STATUS_EVENT,(t=>{this.isPauseButtonClicked=t})),this.setupBg()}setupBg=()=>{const t=gt.createBackgroundComponent(this.levelData.levelMeta.levelNumber);(new gt).generateBackground(t)};resumeGame=()=>{this.addEventListeners(),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const i=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(i-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(Math.sqrt((i-this.monster.x-this.canvas.width/4)**2+(n-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),nt.publish(nt.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,!1)};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(i,n);else for(let t of this.stoneHandler.foilStones){if(Math.sqrt((i-t.x)**2+(n-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(p);break}}nt.publish(nt.EVENTS.GAME_TRAIL_EFFECT_TOGGLE_EVENT,!0)};setPickedUp(t,e){const i=this.stoneHandler.handlePickStoneUp(t,e);i&&(this.pickedStoneObject=i,this.pickedStone=i,this.audioPlayer.playAudio(p),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(i?.text,i?.foilStoneIndex))}handleMouseMove=t=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;let e=t.clientX,i=t.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const n=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,t.clientX,t.clientY);if(this.pickedStone=n,e=n.x,i=n.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const t=this.stoneHandler.handleHoveringToAnotherStone(e,i,((t,e)=>this.wordPuzzleLogic.handleCheckHoveredStone(t,e)));t&&(this.wordPuzzleLogic.setPickUpLetter(t?.text,t?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=t,this.pickedStone=t)}}else{let n=this.canvas.getBoundingClientRect();const s=t.clientX-n.left,a=t.clientY-n.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=a,e=s,i=a}this.monster.changeToDragAnimation()}this.trailParticles?.addTrailParticlesOnMove(e,i)};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;this.monster.onClick(i,n)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(i,n)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(i,n)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(t),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(t)}handleStoneLetterDrawing(t){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const{groupedObj:e}=this.wordPuzzleLogic.getValues();this.stoneHandler.drawWordPuzzleLetters(t,(t=>this.wordPuzzleLogic.validateShouldHideLetter(t)),e)}else this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",this.handleTouchStart,!1),this.handler.addEventListener("touchmove",this.handleTouchMove,!1),this.handler.addEventListener("touchend",this.handleTouchEnd,!1),this.handler.addEventListener(V,this.handleMouseClick,!1),document.addEventListener(W,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(V,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),tt.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(tt.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(j,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.trailParticles.clearTrailSubscription(),this.unsubscribeEvent(),this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(W,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(t,e,i=!1){return this.stoneHandler.isStoneLetterDropCorrect(t,e,i)}letterPuzzle(t){if(this.pickedStone&&this.pickedStone.frame<=99)return;const e=this.getRandomInt(0,1),i=this.checkStoneDropped(t,e);i&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(i)}wordPuzzle(t){if(t.frame<=99)return;this.audioPlayer.stopFeedbackAudio(),t.x=-999,t.y=-999;const e=this.getRandomInt(0,1);this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:i}=this.wordPuzzleLogic.getValues(),n=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(e,n,!0,i),n){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(n,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==R?this.stonesCount:i.length),this.stonesCount++}else this.handleStoneDropEnd(n,"Word"),this.stonesCount=1}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t))};dispatchStoneDropEvent(t){const e=new CustomEvent(U,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.monster.changeToIdleAnimation(),this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(t?.detail?.counter),this.pickedStone=null,document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(t,e){let i=Date.now();const{droppedLetters:n}=this.wordPuzzleLogic.getValues(),s={cr_user_id:M,ftm_language:R,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==n||null==n?"TIMEOUT":n:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(i-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(s)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:M,ftm_language:R,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:tt.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),nt.publish(nt.EVENTS.GAME_PAUSE_STATUS_EVENT,!0),this.pauseGamePlay()}}const As={summer:{BG_GROUP_IMGS:A,draw:Cs},autumn:{BG_GROUP_IMGS:I,draw:function(t,e,i,n){return{draw:()=>{t.drawImage(n.AUTUMN_BACKGROUND_1,0,0,e,i),t.drawImage(n.AUTUMN_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(n.AUTUMN_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(n.AUTUMN_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}},winter:{BG_GROUP_IMGS:C,draw:function(t,e,i,n){return{draw:()=>{t.drawImage(n.WINTER_BACKGROUND_1,0,0,e,i),t.drawImage(n.WINTER_PILLAR_1,.38*e,i/6,e/1.2,i/2),t.drawImage(n.WINTER_FENCE_1,.4*-e,i/4,e,i/2),t.drawImage(n.WINTER_HILL_1,.25*-e,i/2,1.5*e,i/2)}}}}};async function Is(t,e,i,n,s){return{...{...s(t,e,i,{...await a(n)})}}}function Cs(t,e,i,n){return{draw:()=>{t.drawImage(n?.DEFAULT_BACKGROUND_1,0,0,e,i),t.drawImage(n?.ASSETS_PATH_TOTEM,.6*e,i/6,e,i/2),t.drawImage(n?.ASSETS_PATH_FENCE,.4*-e,i/3,e,i/3),t.drawImage(n?.ASSETS_PATH_HILL,.25*-e,i/2,1.5*e,i/2)}}}function Ps(t,e,i,n){return{draw:()=>{t.drawImage(n?.LEVEL_SELECTION_BACKGROUND,0,0,e,i)}}}async function xs(t,e,i,n){const s=(t=>D.includes(t))(i);return{...{x:t,y:e,index:i,isSpecial:s,...n,balloonImg:s?n?.specialBloonImg:n?.balloonImg}}}class Ls{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;riveMonsterElement;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let n=this;this.callBack=i,this.levelsSectionCount=n.data.levels.length/10>Math.floor(n.data.levels.length/10)?Math.floor(n.data.levels.length/10)+1:Math.floor(n.data.levels.length/10),this.levels=[],this.firebaseIntegration=new bs,this.init(),this.riveMonsterElement=document.getElementById("rivecanvas"),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=tt.getAllGameLevelInfo(),this.audioPlayer=new vt,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(F.DebugMode?localStorage.getItem(c+R+"Debug"):localStorage.getItem(c+R)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.riveMonsterElement.style.zIndex="-1",this.images={nextbtn:S,backbtn:"./assets/images/back_btn.webp"},s(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(g)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const t=await X();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await Is(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:"./assets/images/map.webp"},Ps)};async createLevelButtons(){const t=await a({balloonImg:"./assets/images/mapIcon.webp",specialBloonImg:"./assets/images/map_icon_monster_level_v01.webp",lockImg:"./assets/images/mapLock.webp",starImg:"./assets/images/star.webp"});var e;const i=[[[(e=this.canvas).width/10,e.height/10],[e.width/2.5,e.height/10],[e.width/3+e.width/2.8,e.height/10],[e.width/10,e.height/3],[e.width/2.5,e.height/3],[e.width/3+e.width/2.8,e.height/3],[e.width/10,e.height/1.8],[e.width/2.5,e.height/1.8],[e.width/3+e.width/2.8,e.height/1.8],[e.width/2.5,e.height/1.3]]][0].map(((e,i)=>xs(e[0],e[1],i+1,t)));this.levels=await Promise.all(i),this.levelButtons=this.levels.map((t=>new ys(this.canvas,this.context,{...t})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(g):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,i=t.touches[0].clientY,n=this.xDown-e,s=this.yDown-i;Math.abs(n)>Math.abs(s)&&(n>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top,s=(t,e=1.3)=>i>=t&&i<t+this.canvas.height/10&&n>this.canvas.height/e&&n<this.canvas.height/e+this.canvas.height/10,a=s(.7*this.canvas.width),o=s(this.canvas.width/10);if(o||a){const t=this.levelSelectionPageIndex;a&&t!=10*this.levelsSectionCount-10?(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):o&&0!=t&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=t-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let t of this.levelButtons)t.onClick(i,n,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(t=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=t+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(t,e){const i=t.levelData.index+this.levelSelectionPageIndex,n=i-1;this.unlockLevelIndex+1===n&&t.applyPulseEffect(),i<=this.data.levels.length&&(this.checkUnlockedLevel(e),t.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,e,this.data.levels.length),F.DebugMode&&this.context.fillText(this.data.levels[i-1].levelMeta.levelType,t.levelData.x+t.btnSize/3.5,t.levelData.y+t.btnSize/1.3))}draw(){for(let t of this.levelButtons)this.drawLevel(t,this.gameLevelData)}downButton(t){t!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=t?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber))}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};nt.publish(nt.EVENTS.GAMEPLAY_DATA_EVENT,e),this.logSelectedLevelEvent(),this.callBack(x)}logSelectedLevelEvent(){const t={cr_user_id:M,ftm_language:R,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}class ks{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(t,e,i,n,a,o,r,h,l,c){this.canvas=t,this.height=e,this.width=i,this.context=n,this.switchToGameplayCB=r,this.switchToLevelSelectionCB=h,this.data=l,this.starDrawnCount=0,this.closeButton=new St(n,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new At(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new Et(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new vt,this.starCount=a,this.currentLevel=o,this.images={backgroundImg:"./assets/images/WIN_screen_bg.webp",star1Img:"./assets/images/pinStar1.webp",star2Img:"./assets/images/pinStar2.webp",star3Img:"./assets/images/pinStar3.webp",winBackgroundImg:y},s(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new vt,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2,this.monster=new dt(this.canvas,c,(()=>{this.switchToReactionAnimation}))}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=((t,e)=>{const i=Object.keys(e);let n=Math.floor(t/10)%i.length;return t>=30&&(n%=3),{...e[i[n]]}})(this.currentLevel,As);this.background=await Is(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?(r()&&this.audioPlayer.playAudio("./assets/audios/LevelLoseFanfare.mp3"),this.monster.changeToSpitAnimation()):(r()&&(this.audioPlayer.playAudio("./assets/audios/LevelWinFanfare.mp3"),this.audioPlayer.playAudio(g)),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(V,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-e.left,n=t.clientY-e.top;if(this.closeButton.onClick(i,n)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB(k)),this.retryButton.onClick(i,n)){this.audioPlayer.playButtonClickSound();const t={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};nt.publish(nt.EVENTS.GAMEPLAY_DATA_EVENT,t),this.switchToGameplayCB(k)}if(this.isLastLevel&&this.nextButton.onClick(i,n)){this.audioPlayer.playButtonClickSound();const t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};nt.publish(nt.EVENTS.GAMEPLAY_DATA_EVENT,e),this.switchToGameplayCB(k)}};pauseAudios=()=>{r()?this.starCount>=2&&this.audioPlayer.playAudio(g):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(V,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}class Ds{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,i){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=i,this.context=this.canvas.getContext("2d"),this.images={cloud6:"./assets/images/cloud_01.png",cloud7:"./assets/images/cloud_02.png",cloud8:"./assets/images/cloud_03.png"},s(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}class Bs{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;riveMonsterElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;riveMonster;constructor(t,e,i){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.riveMonsterElement=document.getElementById("rivecanvas"),this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.riveMonster=new ut({canvas:this.riveMonsterElement,autoplay:!0,fit:"contain",alignment:"topCenter",width:this.canavsElement.width,height:this.canavsElement.height,onLoad:()=>{this.riveMonster.play(ut.Animations.IDLE)}}),this.switchSceneToLevelSelection=i,this.audioPlayer=new vt,this.pwa_status=localStorage.getItem(l),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle(),this.riveMonsterElement.style.zIndex="6"}setupBg=async()=>{this.background=await Is(this.context,this.width,this.height,A,Cs)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(t=>{t.classList.toggle("on");const e=t.classList.contains("on");F.DebugMode=e,t.innerText="Dev"})(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=t=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.playButton.draw()};createPlayButton(){this.playButton=new ws(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const i=document.getElementById("canvas");t.preventDefault();var s=i.getBoundingClientRect();const a=t.clientX-s.left,o=t.clientY-s.top,{excludeX:r,excludeY:h}=n.getExcludedCoordinates(i,15);a<r&&o<h||(bs.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom","user_clicked",{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(l,"false")}}document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),localStorage.setItem(l,"false")}));class Ms{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(t,e){nt.setDefaultGameStateValues(e,t,document.getElementById("canvas")),this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new Bs(t,e,this.switchSceneToLevelSelection),Ms.SceneName=P,this.loadingScreen=new Ds(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(F.DebugMode=!0,this.toggleBtn.innerText="Dev"):(F.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let t=tt.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),Ms.SceneName===P?this.startScene.animation(e):Ms.SceneName===x?this.levelSelectionScene.drawLevelSelection():Ms.SceneName===L?this.gameplayScene.draw(e):Ms.SceneName===k&&this.levelEndScene.draw(e)};switchSceneToGameplay=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.gameplayScene=new Ts({monsterPhaseNumber:this.checkMonsterPhaseUpdation(),switchSceneToEnd:this.switchSceneToEndLevel,switchToLevelSelection:()=>{this.switchSceneToLevelSelection(L)},reloadScene:this.switchSceneToGameplay}),Ms.SceneName=L}),800)};switchSceneToEndLevel=(t,e,i,n)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(L),this.levelEndScene=new ks(this.canvas,this.height,this.width,this.context,t,i,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),Ms.SceneName=k}),n?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new Ls(this.canvas,this.data,this.switchSceneToGameplay),Ms.SceneName=x,this.titleTextElement.style.display="none"}),800)};dispose=t=>{t==x?this.levelSelectionScene.dispose():t===L?this.gameplayScene.dispose():t===P?this.startScene.dispose():t==k&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="10"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),localStorage.setItem(l,"false")}}try{self["workbox:window:4.3.1"]&&_()}catch(zs){}var zs=function(t,e){return new Promise((function(i){var n=new MessageChannel;n.port1.onmessage=function(t){return i(t.data)},t.postMessage(e,[n.port2])}))};function Os(t,e){for(var i=0;i<e.length;i++){var n=e[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function Rs(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(zs){}var Ns=function(){var t=this;this.promise=new Promise((function(e,i){t.resolve=e,t.reject=i}))},Fs=function(t,e){return new URL(t,location).href===new URL(e,location).href},js=function(t,e){Object.assign(this,e,{type:t})};function Us(t){return function(){for(var e=[],i=0;i<arguments.length;i++)e[i]=arguments[i];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function Vs(t,e,i){return i?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function Ws(){}var Hs=function(t){var e,i;function n(e,i){var n;return void 0===i&&(i={}),(n=t.call(this)||this).t=e,n.i=i,n.o=0,n.u=new Ns,n.s=new Ns,n.h=new Ns,n.v=n.v.bind(Rs(Rs(n))),n.l=n.l.bind(Rs(Rs(n))),n.g=n.g.bind(Rs(Rs(n))),n.m=n.m.bind(Rs(Rs(n))),n}i=t,(e=n).prototype=Object.create(i.prototype),e.prototype.constructor=e,e.__proto__=i;var s,a,o=n.prototype;return o.register=Us((function(t){var e,i,n=this,s=(void 0===t?{}:t).immediate,a=void 0!==s&&s;return e=function(){return n.p=Boolean(navigator.serviceWorker.controller),n.P=n.R(),Vs(n.k(),(function(t){n.B=t,n.P&&(n.O=n.P,n.s.resolve(n.P),n.h.resolve(n.P),n.j(n.P),n.P.addEventListener("statechange",n.l,{once:!0}));var e=n.B.waiting;return e&&Fs(e.scriptURL,n.t)&&(n.O=e,Promise.resolve().then((function(){n.dispatchEvent(new js("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),n.O&&n.u.resolve(n.O),n.B.addEventListener("updatefound",n.g),navigator.serviceWorker.addEventListener("controllerchange",n.m,{once:!0}),"BroadcastChannel"in self&&(n.C=new BroadcastChannel("workbox"),n.C.addEventListener("message",n.v)),navigator.serviceWorker.addEventListener("message",n.v),n.B}))},(i=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(Ws):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&i.then?i.then(e):e()})),o.getSW=Us((function(){return this.O||this.u.promise})),o.messageSW=Us((function(t){return Vs(this.getSW(),(function(e){return zs(e,t)}))})),o.R=function(){var t=navigator.serviceWorker.controller;if(t&&Fs(t.scriptURL,this.t))return t},o.k=Us((function(){var t=this;return function(t,e){try{var i=t()}catch(t){return e(t)}return i&&i.then?i.then(void 0,e):i}((function(){return Vs(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),o.j=function(t){zs(t,{type:"WINDOW_READY",meta:"workbox-window"})},o.g=function(){var t=this.B.installing;this.o>0||!Fs(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},o.l=function(t){var e=this,i=t.target,n=i.state,s=i===this.W,a=s?"external":"",o={sw:i,originalEvent:t};!s&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new js(a+n,o)),"installed"===n?this._=setTimeout((function(){"installed"===n&&e.B.waiting===i&&e.dispatchEvent(new js(a+"waiting",o))}),200):"activating"===n&&(clearTimeout(this._),s||this.s.resolve(i))},o.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new js("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},o.v=function(t){var e=t.data;this.dispatchEvent(new js("message",{data:e,originalEvent:t}))},s=n,(a=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&Os(s.prototype,a),n}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}());new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(t){this.lang=t,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new bs,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(W,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const t=await n.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.loadTitleFeedbackCustomFont(),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const e=await X();this.majVersion=e.majversion,this.minVersion=e.minversion,this.dataModal=this.createDataModal(e),this.globalInitialization(e),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)}));const i=localStorage.getItem(this.lang+"gamePlayedInfo"),s=i?JSON.parse(i).length-1:0,a=F.DebugMode?c+this.lang+"Debug":c+this.lang;localStorage.setItem(a,s.toString()),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}async loadTitleFeedbackCustomFont(){const t=et[this.lang]||et.default,e=`'${t}', sans-serif`;await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((t=>{t&&(t.style.fontFamily=e)}))}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let i=parseInt(t);isNaN(i)||(e=Math.abs((new Date).getTime()-i))}const i=parseFloat((e?e/864e5:0).toFixed(3)),n={cr_user_id:M,ftm_language:R,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:i};this.firebaseIntegration.sendSessionStartEvent(n)}logSessionEndFirebaseEvent(){const t={cr_user_id:M,ftm_language:R,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(u);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const i=await caches.open("fontCache");if(!await i.match(e)){const t=await fetch(e),n=await t.blob();await i.put(e,new Response(n))}const n=new FontFace(t,`url(${e}) format('truetype')`);await n.load(),document.fonts.add(n)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(R)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new Hs("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(H+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async t=>{if(!t.ok)return void console.error("Failed to fetch the content file from the server!");const e=await t.json(),i=e.majversion+"."+e.minversion,n=localStorage.getItem("version"+R.toLowerCase());if(i&&n!=i){console.log("Content version mismatch! Reloading...");var s=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+R);var a=s.filter((t=>!t.toString().includes(R)));localStorage.setItem(u,JSON.stringify(a)),localStorage.removeItem("version"+R.toLowerCase()),caches.delete(R),this.handleUpdateFoundMessage()}})).catch((t=>{console.error("Error fetching the content file: "+t)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new Y(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&F.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new Ms(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new Ms(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const e=Math.min(100,Math.max(0,t.data));e>this.currentProgress&&(this.currentProgress=e,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(t){return 100===t&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(u,JSON.stringify(Array.from(this.is_cached.entries())))}catch(t){console.error("Error caching language:",t)}}sendCompletionEvent(){const t={cr_user_id:M,ftm_language:R,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(t)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(t){console.error("Error hiding loading screen:",t)}}handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{r()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=f;return new Promise(((e,i)=>{const n=t.map((t=>(new vt).preloadGameAudio(t)));Promise.all(n).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),i(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(W,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(R)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,