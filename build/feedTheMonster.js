/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var t={"./node_modules/@firebase/util/dist/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{CONSTANTS:()=>i,DecodeBase64StringError:()=>h,Deferred:()=>I,ErrorFactory:()=>z,FirebaseError:()=>O,MAX_VALUE_MILLIS:()=>vt,RANDOM_FACTOR:()=>wt,Sha1:()=>st,areCookiesEnabled:()=>N,assert:()=>n,assertionError:()=>a,async:()=>at,base64:()=>r,base64Decode:()=>d,base64Encode:()=>c,base64urlEncodeWithoutPadding:()=>l,calculateBackoffMillis:()=>bt,contains:()=>X,createMockUserToken:()=>y,createSubscribe:()=>it,decode:()=>j,deepCopy:()=>u,deepEqual:()=>q,deepExtend:()=>g,errorPrefix:()=>ht,extractQuerystring:()=>et,getDefaultAppConfig:()=>w,getDefaultEmulatorHost:()=>f,getDefaultEmulatorHostnameAndPort:()=>v,getDefaults:()=>p,getExperimentalSetting:()=>b,getGlobal:()=>m,getModularInstance:()=>yt,getUA:()=>S,isAdmin:()=>V,isBrowser:()=>x,isBrowserExtension:()=>T,isElectron:()=>P,isEmpty:()=>Y,isIE:()=>L,isIndexedDBAvailable:()=>B,isMobileCordova:()=>_,isNode:()=>E,isNodeSdk:()=>D,isReactNative:()=>C,isSafari:()=>k,isUWP:()=>A,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>R,map:()=>K,ordinal:()=>It,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>tt,safeGet:()=>$,stringLength:()=>gt,stringToByteArray:()=>ut,stringify:()=>F,uuidv4:()=>mt,validateArgCount:()=>rt,validateCallback:()=>lt,validateContextObject:()=>dt,validateIndexedDBOpenable:()=>M,validateNamespace:()=>ct});const i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},n=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},o=function(t){const e=[];let s=0;for(let i=0;i<t.length;i++){let n=t.charCodeAt(i);n<128?e[s++]=n:n<2048?(e[s++]=n>>6|192,e[s++]=63&n|128):55296==(64512&n)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(n=65536+((1023&n)<<10)+(1023&t.charCodeAt(++i)),e[s++]=n>>18|240,e[s++]=n>>12&63|128,e[s++]=n>>6&63|128,e[s++]=63&n|128):(e[s++]=n>>12|224,e[s++]=n>>6&63|128,e[s++]=63&n|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const s=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let e=0;e<t.length;e+=3){const n=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,h=r?t[e+2]:0,c=n>>2,l=(3&n)<<4|o>>4;let d=(15&o)<<2|h>>6,u=63&h;r||(u=64,a||(d=64)),i.push(s[c],s[l],s[d],s[u])}return i.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(o(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let s=0,i=0;for(;s<t.length;){const n=t[s++];if(n<128)e[i++]=String.fromCharCode(n);else if(n>191&&n<224){const a=t[s++];e[i++]=String.fromCharCode((31&n)<<6|63&a)}else if(n>239&&n<365){const a=((7&n)<<18|(63&t[s++])<<12|(63&t[s++])<<6|63&t[s++])-65536;e[i++]=String.fromCharCode(55296+(a>>10)),e[i++]=String.fromCharCode(56320+(1023&a))}else{const a=t[s++],o=t[s++];e[i++]=String.fromCharCode((15&n)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const s=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let e=0;e<t.length;){const n=s[t.charAt(e++)],a=e<t.length?s[t.charAt(e)]:0;++e;const o=e<t.length?s[t.charAt(e)]:64;++e;const r=e<t.length?s[t.charAt(e)]:64;if(++e,null==n||null==a||null==o||null==r)throw new h;const c=n<<2|a>>4;if(i.push(c),64!==o){const t=a<<4&240|o>>2;if(i.push(t),64!==r){const t=o<<6&192|r;i.push(t)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class h extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const c=function(t){const e=o(t);return r.encodeByteArray(e,!0)},l=function(t){return c(t).replace(/\./g,"")},d=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function u(t){return g(void 0,t)}function g(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(const s in e)e.hasOwnProperty(s)&&"__proto__"!==s&&(t[s]=g(t[s],e[s]));return t}function m(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s.g)return s.g;throw new Error("Unable to locate global object.")}const p=()=>{try{return m().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&d(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},f=t=>{var e,s;return null===(s=null===(e=p())||void 0===e?void 0:e.emulatorHosts)||void 0===s?void 0:s[t]},v=t=>{const e=f(t);if(!e)return;const s=e.lastIndexOf(":");if(s<=0||s+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const i=parseInt(e.substring(s+1),10);return"["===e[0]?[e.substring(1,s-1),i]:[e.substring(0,s),i]},w=()=>{var t;return null===(t=p())||void 0===t?void 0:t.config},b=t=>{var e;return null===(e=p())||void 0===e?void 0:e[`_${t}`]};class I{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,s)=>{e?this.reject(e):this.resolve(s),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,s))}}}function y(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const s=e||"demo-project",i=t.iat||0,n=t.sub||t.user_id;if(!n)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${s}`,aud:s,iat:i,exp:i+3600,auth_time:i,sub:n,user_id:n,firebase:{sign_in_provider:"custom",identities:{}}},t);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(a)),""].join(".")}function S(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function _(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(S())}function E(){var t;const e=null===(t=p())||void 0===t?void 0:t.forceEnvironment;if("node"===e)return!0;if("browser"===e)return!1;try{return"[object process]"===Object.prototype.toString.call(s.g.process)}catch(t){return!1}}function x(){return"object"==typeof self&&self.self===self}function T(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function P(){return S().indexOf("Electron/")>=0}function L(){const t=S();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function A(){return S().indexOf("MSAppHost/")>=0}function D(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN}function k(){return!E()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function B(){try{return"object"==typeof indexedDB}catch(t){return!1}}function M(){return new Promise(((t,e)=>{try{let s=!0;const i="validate-browser-context-for-indexeddb-analytics-module",n=self.indexedDB.open(i);n.onsuccess=()=>{n.result.close(),s||self.indexedDB.deleteDatabase(i),t(!0)},n.onupgradeneeded=()=>{s=!1},n.onerror=()=>{var t;e((null===(t=n.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function N(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class O extends Error{constructor(t,e,s){super(e),this.code=t,this.customData=s,this.name="FirebaseError",Object.setPrototypeOf(this,O.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(t,e,s){this.service=t,this.serviceName=e,this.errors=s}create(t,...e){const s=e[0]||{},i=`${this.service}/${t}`,n=this.errors[t],a=n?function(t,e){return t.replace(U,((t,s)=>{const i=e[s];return null!=i?String(i):`<${s}?>`}))}(n,s):"Error",o=`${this.serviceName}: ${a} (${i}).`;return new O(i,o,s)}}const U=/\{\$([^}]+)}/g;function R(t){return JSON.parse(t)}function F(t){return JSON.stringify(t)}const j=function(t){let e={},s={},i={},n="";try{const a=t.split(".");e=R(d(a[0])||""),s=R(d(a[1])||""),n=a[2],i=s.d||{},delete s.d}catch(t){}return{header:e,claims:s,data:i,signature:n}},H=function(t){const e=j(t).claims,s=Math.floor((new Date).getTime()/1e3);let i=0,n=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?i=e.nbf:e.hasOwnProperty("iat")&&(i=e.iat),n=e.hasOwnProperty("exp")?e.exp:i+86400),!!s&&!!i&&!!n&&s>=i&&s<=n},G=function(t){const e=j(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},W=function(t){const e=j(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},V=function(t){const e=j(t).claims;return"object"==typeof e&&!0===e.admin};function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function $(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function Y(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function K(t,e,s){const i={};for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=e.call(s,t[n],n,t));return i}function q(t,e){if(t===e)return!0;const s=Object.keys(t),i=Object.keys(e);for(const n of s){if(!i.includes(n))return!1;const s=t[n],a=e[n];if(J(s)&&J(a)){if(!q(s,a))return!1}else if(s!==a)return!1}for(const t of i)if(!s.includes(t))return!1;return!0}function J(t){return null!==t&&"object"==typeof t}function Z(t,e=2e3){const s=new I;return setTimeout((()=>s.reject("timeout!")),e),t.then(s.resolve,s.reject),s.promise}function Q(t){const e=[];for(const[s,i]of Object.entries(t))Array.isArray(i)?i.forEach((t=>{e.push(encodeURIComponent(s)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(s)+"="+encodeURIComponent(i));return e.length?"&"+e.join("&"):""}function tt(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[s,i]=t.split("=");e[decodeURIComponent(s)]=decodeURIComponent(i)}})),e}function et(t){const e=t.indexOf("?");if(!e)return"";const s=t.indexOf("#",e);return t.substring(e,s>0?s:void 0)}class st{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(t,e){e||(e=0);const s=this.W_;if("string"==typeof t)for(let i=0;i<16;i++)s[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(let i=0;i<16;i++)s[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(let t=16;t<80;t++){const e=s[t-3]^s[t-8]^s[t-14]^s[t-16];s[t]=4294967295&(e<<1|e>>>31)}let i,n,a=this.chain_[0],o=this.chain_[1],r=this.chain_[2],h=this.chain_[3],c=this.chain_[4];for(let t=0;t<80;t++){t<40?t<20?(i=h^o&(r^h),n=1518500249):(i=o^r^h,n=1859775393):t<60?(i=o&r|h&(o|r),n=2400959708):(i=o^r^h,n=3395469782);const e=(a<<5|a>>>27)+i+c+n+s[t]&4294967295;c=h,h=r,r=4294967295&(o<<30|o>>>2),o=a,a=e}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295}update(t,e){if(null==t)return;void 0===e&&(e=t.length);const s=e-this.blockSize;let i=0;const n=this.buf_;let a=this.inbuf_;for(;i<e;){if(0===a)for(;i<=s;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(n[a]=t.charCodeAt(i),++a,++i,a===this.blockSize){this.compress_(n),a=0;break}}else for(;i<e;)if(n[a]=t[i],++a,++i,a===this.blockSize){this.compress_(n),a=0;break}}this.inbuf_=a,this.total_+=e}digest(){const t=[];let e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let t=this.blockSize-1;t>=56;t--)this.buf_[t]=255&e,e/=256;this.compress_(this.buf_);let s=0;for(let e=0;e<5;e++)for(let i=24;i>=0;i-=8)t[s]=this.chain_[e]>>i&255,++s;return t}}function it(t,e){const s=new nt(t,e);return s.subscribe.bind(s)}class nt{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,s){let i;if(void 0===t&&void 0===e&&void 0===s)throw new Error("Missing Observer.");i=function(t,e){if("object"!=typeof t||null===t)return!1;for(const s of e)if(s in t&&"function"==typeof t[s])return!0;return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:s},void 0===i.next&&(i.next=ot),void 0===i.error&&(i.error=ot),void 0===i.complete&&(i.complete=ot);const n=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?i.error(this.finalError):i.complete()}catch(t){}})),this.observers.push(i),n}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function at(t,e){return(...s)=>{Promise.resolve(!0).then((()=>{t(...s)})).catch((t=>{e&&e(t)}))}}function ot(){}const rt=function(t,e,s,i){let n;if(i<e?n="at least "+e:i>s&&(n=0===s?"none":"no more than "+s),n){throw new Error(t+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+n+".")}};function ht(t,e){return`${t} failed: ${e} argument `}function ct(t,e,s){if((!s||e)&&"string"!=typeof e)throw new Error(ht(t,"namespace")+"must be a valid firebase namespace.")}function lt(t,e,s,i){if((!i||s)&&"function"!=typeof s)throw new Error(ht(t,e)+"must be a valid function.")}function dt(t,e,s,i){if((!i||s)&&("object"!=typeof s||null===s))throw new Error(ht(t,e)+"must be a valid context object.")}const ut=function(t){const e=[];let s=0;for(let i=0;i<t.length;i++){let a=t.charCodeAt(i);if(a>=55296&&a<=56319){const e=a-55296;i++,n(i<t.length,"Surrogate pair missing trail surrogate.");a=65536+(e<<10)+(t.charCodeAt(i)-56320)}a<128?e[s++]=a:a<2048?(e[s++]=a>>6|192,e[s++]=63&a|128):a<65536?(e[s++]=a>>12|224,e[s++]=a>>6&63|128,e[s++]=63&a|128):(e[s++]=a>>18|240,e[s++]=a>>12&63|128,e[s++]=a>>6&63|128,e[s++]=63&a|128)}return e},gt=function(t){let e=0;for(let s=0;s<t.length;s++){const i=t.charCodeAt(s);i<128?e++:i<2048?e+=2:i>=55296&&i<=56319?(e+=4,s++):e+=3}return e},mt=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))},pt=1e3,ft=2,vt=144e5,wt=.5;function bt(t,e=pt,s=ft){const i=e*Math.pow(s,t),n=Math.round(wt*i*(Math.random()-.5)*2);return Math.min(vt,i+n)}function It(t){return Number.isFinite(t)?t+function(t){t=Math.abs(t);const e=t%100;if(e>=10&&e<=20)return"th";const s=t%10;if(1===s)return"st";if(2===s)return"nd";if(3===s)return"rd";return"th"}(t):`${t}`}function yt(t){return t&&t._delegate?t._delegate:t}},"./global-variables.ts":(t,e,s)=>{s.r(e),s.d(e,{Debugger:()=>c,font:()=>h,lang:()=>r,pseudoId:()=>o});var i=s("./src/constants/index.ts"),n=s("./src/common/utils.ts");const a=new URLSearchParams(window.location.search);var o=a.get("cr_user_id"),r=null==a.get("cr_lang")?"english":a.get("cr_lang");const h=n.Utils.getLanguageSpecificFont(r),c={DevelopmentLink:!!window.location.href.includes(i.DevelopmentServer),DebugMode:!1};window.feedbackTextWorkerPath="./workers/feedback-text-worker.js"},"./src/Firebase/base-firebase-integration.ts":(t,e,s)=>{s.r(e),s.d(e,{BaseFirebaseIntegration:()=>o});var i=s("./node_modules/firebase/app/dist/esm/index.esm.js"),n=s("./node_modules/firebase/analytics/dist/esm/index.esm.js"),a=s("./src/Firebase/firebase-config.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(t,e){try{(0,n.logEvent)(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,n.logEvent)(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}initializeFirebase(){try{this.firebaseApp=(0,i.initializeApp)(a.firebaseConfig),this.analytics=(0,n.getAnalytics)(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}},"./src/Firebase/firebase-config.ts":(t,e,s)=>{s.r(e),s.d(e,{firebaseConfig:()=>i});const i={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(t,e,s)=>{s.r(e),s.d(e,{FirebaseIntegration:()=>n});var i=s("./src/Firebase/base-firebase-integration.ts");class n extends i.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return n.instance||(n.instance=new n),n.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}},"./src/common/event-names.ts":(t,e,s)=>{s.r(e),s.d(e,{CLICK:()=>d,LOADPUZZLE:()=>i,MOUSEDOWN:()=>o,MOUSEMOVE:()=>a,MOUSEUP:()=>r,STONEDROP:()=>n,TOUCHEND:()=>l,TOUCHMOVE:()=>c,TOUCHSTART:()=>h,VISIBILITY_CHANGE:()=>u});const i="loadpuzzle",n="stonesdropped",a="mousemove",o="mousedown",r="mouseup",h="touchstart",c="touchmove",l="touchend",d="click",u="visibilitychange"},"./src/common/index.ts":(t,e,s)=>{s.r(e),s.d(e,{CLICK:()=>a.CLICK,LOADPUZZLE:()=>a.LOADPUZZLE,MOUSEDOWN:()=>a.MOUSEDOWN,MOUSEMOVE:()=>a.MOUSEMOVE,MOUSEUP:()=>a.MOUSEUP,STONEDROP:()=>a.STONEDROP,StoneConfig:()=>i.StoneConfig,TOUCHEND:()=>a.TOUCHEND,TOUCHMOVE:()=>a.TOUCHMOVE,TOUCHSTART:()=>a.TOUCHSTART,Utils:()=>n.Utils,VISIBILITY_CHANGE:()=>a.VISIBILITY_CHANGE,loadImages:()=>n.loadImages,syncLoadingImages:()=>n.syncLoadingImages});var i=s("./src/common/stone-config.ts"),n=s("./src/common/utils.ts"),a=s("./src/common/event-names.ts")},"./src/common/level-config.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelConfig:()=>i});class i{x;y;index;drawready;img;constructor(t,e,s){this.x=t,this.y=e,this.index=s,this.drawready=!1,this.img=new Image,this.img.src="./assets/images/mapIcon.png",this.img.onload=function(){}}}},"./src/common/stone-config.ts":(t,e,s)=>{s.r(e),s.d(e,{StoneConfig:()=>n});var i=s("./global-variables.ts");class n{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,s,i,n,a,o,r,h){this.x=n,this.y=a,this.origx=n,this.origy=a,this.canvasWidth=e,this.canvasHeight=s,this.tutorialInstance=h,this.text=i,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/13?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+25)):(this.imageSize=this.canvasHeight/13,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,s,i)=>-s/2*(Math.cos(Math.PI*t/i)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(t){this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}},"./src/common/utils.ts":(t,e,s)=>{s.r(e),s.d(e,{Utils:()=>a,createRippleEffect:()=>o,loadImages:()=>r,syncLoadingImages:()=>h});var i=s("./global-variables.ts"),n=s("./src/data/i18-font-mapping.ts");class a{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return i.Debugger.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in n.default)if(t.toLowerCase()===e)return n.default[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function o(t){const e=t;if(!e)throw new Error("Canvas context is null");let s=0,i=0;let n=10,a=10;return function(t,o,r){r&&(n=0,a=0),s=t,i=o,e.beginPath(),e.arc(s,i,n,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(s,i,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),n+=.5,a+=.5,(n>=60||a>=60)&&(n=10,a=10)}}function r(t,e){const s={};let i=0;const n=Object.keys(t).length;for(let a in t)s[a]=new Image,s[a].onload=function(){++i>=n&&e(s)},s[a].src=t[a]}const h=async t=>{const e=Object.keys(t).map((async e=>{const s=await(async t=>{const e=new Image;return new Promise((s=>{e.onload=()=>s(e),e.src=t}))})(t[e]);return{[e]:s}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})}},"./src/components/audio-player.ts":(t,e,s)=>{s.r(e),s.d(e,{AudioPlayer:()=>i});class i{audioContext;sourceNode;audioQueue;promptAudioBuffer;static audioBuffers=new Map;audioSourcs=[];constructor(){this.audioContext=n.getAudioContext(),this.sourceNode=null,this.audioQueue=[]}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(i.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&i.audioBuffers.set(t,e)}playAudio(t){const e=i.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};playButtonClickSound=t=>{const e=i.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((s=>{this.audioContext?.decodeAudioData(s,(s=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=s,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)};async loadAndDecodeAudio(t){return new Promise((async(e,s)=>{try{const s=await fetch(t),i=await s.arrayBuffer();e(await this.audioContext.decodeAudioData(i))}catch(t){console.error("Error loading or decoding audio:",t),s(t)}}))}}class n{static instance=null;static getAudioContext(){return n.instance||(n.instance=new(window.AudioContext||window.webkitAudioContext)),n.instance}}},"./src/components/background.ts":(t,e,s)=>{s.r(e),s.d(e,{Background:()=>o});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts"),a={bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.HILL_IMAGE_1,pillerImg:n.PILLAR_IMAGE_1,fenchImg:n.FENCE_IMAGE_1,autumnBgImg:n.AUTUMN_BACKGROUND_1,autumnHillImg:n.AUTUMN_HILL_1,autumnPillerImg:n.AUTUMN_PILLAR_1,autumnSignImg:n.AUTUMN_SIGN_1,autumnFenceImg:n.AUTUMN_FENCE_1,winterBgImg:n.WINTER_BACKGROUND_1,winterHillImg:n.WINTER_HILL_1,winterSignImg:n.WINTER_SIGN_1,winterFenceImg:n.WINTER_FENCE_1,winterPillerImg:n.WINTER_PILLAR_1};class o{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,e,s,n){this.width=e,this.height=s,this.context=t,this.levelNumber=n,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,i.loadImages)(a,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,this.cancel_button_image=new Image,this.cancel_button_image.src="./assets/images/close_btn.png",this.cancel_button_image.onload=t=>{this.imagesLoaded=!0,this.cancel_button_image=this.cancel_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.cancel_button_image,this.posX,this.posY,.15*this.canvas.width,.15*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/close-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.close_button_image=new Image,this.close_button_image.src="./assets/images/map_btn.png",this.close_button_image.onload=t=>{this.imagesLoaded=!0,this.close_button_image=this.close_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.close_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/next-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;constructor(t,e,s,i,n){this.posX=i,this.posY=n,this.context=t,this.width=e,this.height=s,this.next_button_image=new Image,this.next_button_image.src="./assets/images/next_btn.png",this.next_button_image.onload=t=>{this.imagesLoaded=!0,this.next_button_image=this.next_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.next_button_image,this.posX,this.posY,.19*this.width,.19*this.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.width/2)*(t-this.posX-.19*this.width/2)+(e-this.posY-.19*this.width/2)*(e-this.posY-.19*this.width/2))<.19*this.width/2)return!0}}},"./src/components/buttons/no-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.no_button_image=new Image,this.no_button_image.src="./assets/images/close_btn.png",this.no_button_image.onload=t=>{this.imagesLoaded=!0,this.no_button_image=this.no_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.no_button_image,this.posX+5,this.posY+10,.18*this.canvas.width,.18*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/pause-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,this.pause_button_image=new Image,this.pause_button_image.src="./assets/images/pause_v01.png",this.pause_button_image.onload=t=>{this.imagesLoaded=!0,this.pause_button_image=this.pause_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.pause_button_image,this.posX,this.posY,.09*this.canvas.height,.09*this.canvas.height)}onClick(t,e){if(Math.sqrt((t-this.posX-.09*this.canvas.height/2)*(t-this.posX-.09*this.canvas.height/2)+(e-this.posY-.09*this.canvas.height/2)*(e-this.posY-.09*this.canvas.height/2))<.09*this.canvas.height/2)return!0}}},"./src/components/buttons/retry-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.retry_button_image=new Image,this.retry_button_image.src="./assets/images/retry_btn.png",this.retry_button_image.onload=t=>{this.imagesLoaded=!0,this.retry_button_image=this.retry_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.retry_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/yes-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;constructor(t,e,s,i){this.posX=s,this.posY=i,this.context=t,this.canvas=e,this.yes_button_image=new Image,this.yes_button_image.src="./assets/images/confirm_btn.png",this.yes_button_image.onload=t=>{this.imagesLoaded=!0,this.yes_button_image=this.yes_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.yes_button_image,this.posX-5,this.posY,.2*this.canvas.width,.2*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/feedback-particle-effect/feedback-text-effects.ts":(t,e,s)=>{s.r(e),s.d(e,{FeedbackTextEffects:()=>a});var i=s("./src/components/feedback-particle-effect/text-particle.ts"),n=s("./global-variables.ts");class a{context;canvasWidth;canvasHeight;textX;textY;fontSize;lineHeight;maxTextWidth;particleDuration;startTime;particles;gap;mouse;textWorker;constructor(t,e,s){this.context=t,this.canvasWidth=e,this.canvasHeight=s,this.textX=this.canvasWidth/1.8,this.textY=this.canvasHeight/2,this.fontSize=this.canvasWidth/7.5,this.lineHeight=.8*this.fontSize,this.maxTextWidth=5*this.canvasWidth,this.particleDuration=5e3,this.startTime=null,this.particles=[],this.gap=3,this.mouse={radius:2e3,x:0,y:0},this.textWorker=new Worker(window.feedbackTextWorkerPath),this.textWorker.addEventListener("message",this.handleTextWorkerMessage.bind(this))}wrapText(t){const e=this.context.createLinearGradient(0,0,this.canvasWidth,this.canvasHeight);e.addColorStop(.3,"#F8E218"),e.addColorStop(.5,"#F8E218"),e.addColorStop(.7,"#E39D37"),this.context.fillStyle=e,this.context.textAlign="center",this.context.textBaseline="middle",this.context.lineWidth=3,this.context.strokeStyle="#A46225",this.context.font=`${this.fontSize-.3*t.length}px ${n.font}, monospace`;let s=[],i=t.split(" "),a=0,o="";for(let t=0;t<i.length;t++){let e=o+i[t]+" ";this.context.measureText(e).width>this.maxTextWidth?(o=i[t]+"",a++):o=e,s[a]=o}let r=this.lineHeight*a;this.textY=this.canvasHeight/4.2-r/2;t=t.trim(),s.forEach(((t,e)=>{let s=t.lastIndexOf(" ",t.lastIndexOf(" ")-1);if(this.fontSize*t.length>1.7*this.canvasWidth&&-1!=s){let i=t.slice(0,s),n=" "+t.slice(s+1);this.context.fillText(i,this.textX,this.textY+e*this.lineHeight),this.context.fillText(n,this.textX,this.textY+e*this.lineHeight+this.canvasHeight/12)}else this.context.fillText(t,this.textX,this.textY+e*this.lineHeight)})),this.convertToParticle()}handleTextWorkerMessage(t){this.particles=t.data.map((({x:t,y:e,color:s})=>new i.TextParticle(this,t,e,s)))}convertToParticle(){const t=this.context.getImageData(0,0,this.canvasWidth,this.canvasHeight);this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.textWorker.postMessage({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,gap:this.gap,pixels:t.data})}render(){this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.particles.forEach((t=>{t.draw(),t.update()}))}updateParticles(){this.textWorker.postMessage({particles:this.particles,particleDuration:this.particleDuration,startTime:this.startTime})}clearParticle(){this.particles=[]}unregisterEventListener(){this.textWorker.removeEventListener("message",this.handleTextWorkerMessage),this.textWorker.terminate()}}},"./src/components/feedback-particle-effect/sure-popup.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/common/event-names.ts"),n=s("./src/components/audio-player.ts"),a=s("./src/components/buttons/yes-button.ts"),o=s("./src/components/buttons/no-button.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,s){this.canvas=t,this.yesCallback=e,this.noCallback=s,this.context=this.canvas.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.yesButton=new a.default(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new o.default(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0}}addListner=()=>{this.canvas.addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.yesButton.onClick(i,n)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(i,n)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};dispose=()=>{this.canvas.removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/feedback-particle-effect/text-particle.ts":(t,e,s)=>{s.r(e),s.d(e,{TextParticle:()=>i});class i{feedbackTextEffects;x;y;color;originX;originY;size;ease;constructor(t,e,s,i){this.feedbackTextEffects=t,this.x=Math.random()*this.feedbackTextEffects.canvasWidth,this.y=0,this.color=i,this.originX=e,this.originY=s,this.size=this.feedbackTextEffects.gap,this.ease=.1*Math.random()+.055}draw(){this.feedbackTextEffects.context.fillStyle=this.color,this.feedbackTextEffects.context.fillRect(this.x,this.y,this.size,this.size)}update(){this.x+=(this.originX-this.x)*this.ease,this.y+=this.originY-this.y}}},"./src/components/index.ts":(t,e,s)=>{s.r(e),s.d(e,{AudioPlayer:()=>g.AudioPlayer,Background:()=>d.Background,FeedbackTextEffects:()=>u.FeedbackTextEffects,LevelIndicators:()=>n.LevelIndicators,Monster:()=>c.Monster,PauseButton:()=>i.default,PausePopUp:()=>a.default,PromptText:()=>o.PromptText,StoneHandler:()=>r.default,TimerTicking:()=>l.TimerTicking,Tutorial:()=>h.Tutorial});var i=s("./src/components/buttons/pause-button.ts"),n=s("./src/components/level-indicator.ts"),a=s("./src/components/pause-popup.ts"),o=s("./src/components/prompt-text.ts"),r=s("./src/components/stone-handler.ts"),h=s("./src/components/tutorial.ts"),c=s("./src/components/monster.ts"),l=s("./src/components/timer-ticking.ts"),d=s("./src/components/background.ts"),u=s("./src/components/feedback-particle-effect/feedback-text-effects.ts"),g=s("./src/components/audio-player.ts")},"./src/components/level-indicator.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelIndicators:()=>a});var i=s("./src/common/index.ts"),n=s("./src/events/EventManager.ts");class a extends n.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=s,this.images={level_indicator:"./assets/images/levels_v01.png",bar_empty:"./assets/images/bar_empty_v01.png",bar_full:"./assets/images/bar_full_v01.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}},"./src/components/monster.ts":(t,e,s)=>{s.r(e),s.d(e,{Monster:()=>a});var i=s("./src/common/index.ts"),n=s("./src/events/EventManager.ts");class a extends n.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.changeToIdleAnimation(),this.imagesLoaded=!0,s&&s()}))}update(t){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=t,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(t){this.image.src=t}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}},"./src/components/pause-popup.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>l});var i=s("./src/components/buttons/cancel-button.ts"),n=s("./src/components/buttons/close-button.ts"),a=s("./src/components/buttons/retry-button.ts"),o=s("./src/common/event-names.ts"),r=s("./src/components/audio-player.ts"),h=s("./src/components/feedback-particle-effect/sure-popup.ts"),c=s("./global-variables.ts");class l{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,s,o,c){this.canvas=t,this.callback=e,this.gameplayData=c,this.switchToLevelSelection=s,this.reloadScene=o;const l=document.getElementById("canvas");this.context=l.getContext("2d"),this.audioPlayer=new r.AudioPlayer,this.cancelButton=new i.default(this.context,this.canvas),this.retryButton=new a.default(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new n.default(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src="./assets/images/popup_bg_v01.png",this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0},this.retrySurePopup=new h.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new h.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(o.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.cancelButton.onClick(i,n)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(i,n)&&("english"==c.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(i,n)&&("english"==c.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==c.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==c.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3")};playAreYouSureSound=()=>{this.audioPlayer.playAudio("./assets/audios/are-you-sure.mp3")};dispose=()=>{document.getElementById("canvas").removeEventListener(o.CLICK,this.handleMouseClick,!1)}}},"./src/components/play-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/common/index.ts"),n=s("./src/Firebase/firebase-integration.ts"),a=s("./global-variables.ts"),o=s("./src/data/api-data.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,s,a){this.posX=s,this.posY=a,this.context=t,this.canvas=e,this.firebaseIntegration=new n.FirebaseIntegration,this.init(),this.images={pause_button_image:"./assets/images/Play_button.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await(0,o.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const s=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),s<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}},"./src/components/prompt-text.ts":(t,e,s)=>{s.r(e),s.d(e,{PromptText:()=>h});var i=s("./src/events/EventManager.ts"),n=s("./src/common/utils.ts"),a=s("./src/components/audio-player.ts"),o=s("./src/common/event-names.ts"),r=s("./global-variables.ts");class h extends i.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,s,i,n){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=i,this.rightToLeft=n,this.currentPromptText=s.prompt.promptText,this.currentPuzzleData=s,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.onClick(i,n)&&this.playSound()};getPromptAudioUrl=()=>n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var s=this.calculateFont();const i=this.promptImageWidth,n=this.promptImageHeight;if(this.context.font=`${s}px ${r.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var a=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(a).width/2,e),this.context.fillStyle="black",this.context.fillText(a,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,n/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let s=this.targetStones.length-1;s>=0;s--)this.droppedStones>s||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[s],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[s],t,e)),t=t+this.context.measureText(this.targetStones[s]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,n/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-i),e=.33*(this.height-n);this.context.drawImage(this.promptPlayButton,t,e,i/4,n/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,n/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),s=this.promptImageWidth,i=this.promptImageHeight;var n=this.calculateFont();this.context.font=`${n}px ${r.font}, monospace`;let a=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var h=this.currentPuzzleData.targetStones[0].split("");for(let n=0;n<t.length;n++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){h.includes(t[n])?(h=h.slice(1,h.length),this.context.fillStyle="red",this.context.fillText(t[n],a,e)):(this.context.fillStyle="black",this.context.fillText(t[n],a,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>n||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(t[n],a,e)):(this.context.fillStyle="red",this.context.fillText(t[n],a,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4)}o=(this.context.measureText(t[n]).width+this.context.measureText(t[n+1]).width)/2,a+=o}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,s=(this.width-t)/2,i=(this.height-e)/5;this.context.drawImage(this.prompt_image,s,i,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,"./assets/images/promptTextBg.png"),e=this.loadImage(this.promptPlayButton,"./assets/images/promptPlayButton.png");await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((s,i)=>{t.onload=()=>{s()},t.src=e,t.onerror=t=>{i(t)}}))}}},"./src/components/stone-handler.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>c});var i=s("./src/common/index.ts"),n=s("./src/events/EventManager.ts"),a=s("./src/components/tutorial.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/data/game-score.ts"),h=s("./src/constants/index.ts");class c extends n.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==r.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,s,n,r,c){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=s,this.levelData=n,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(h.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(r),this.puzzleStartTime=new Date,this.tutorial=new a.Tutorial(t,e.width,e.height,s),this.stonebg=new Image,this.stonebg.src=h.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new o.AudioPlayer,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new o.AudioPlayer,this.timerTickingInstance=c,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(t){const e=this.getFoilStones();for(let s=0;s<e.length;s++)e[s]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[s]),this.foilStones.push(new i.StoneConfig(this.context,this.canvas.width,this.canvas.height,e[s],this.stonePos[s][0],this.stonePos[s][1],t,this.timerTickingInstance,s==e.length-1?this.tutorial:null))}draw(t){for(let e=0;e<this.foilStones.length;e++)this.foilStones[e].draw(t);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}isDroppedStoneCorrect(t){return t==this.correctTargetStone}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,s=!1){const i=s?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,i,s,t),i}processLetterDropFeedbackAudio(t,e,s,i){if(e){(s?i===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,h.AUDIO_PATH_EATS,(0,h.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,h.AUDIO_PATH_EATS,h.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?h.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=i.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,h.AUDIO_PATH_EATS,(0,h.AUDIO_PATH_CHEERING_FUNC)(e),h.AUDIO_PATH_POINTS_ADD,i.Utils.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}}},"./src/components/timer-ticking.ts":(t,e,s)=>{s.r(e),s.d(e,{TimerTicking:()=>o});var i=s("./src/common/index.ts"),n=s("./src/events/EventManager.ts"),a=s("./src/components/audio-player.ts");class o extends n.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=s,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new a.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:"./assets/images/timer_empty.png",rotating_clock:"./assets/images/timer.png",timer_full:"./assets/images/timer_full.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio("./assets/audios/timeout.mp3"),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,5,.09*this.height,.12*this.width,.06*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/tutorial.ts":(t,e,s)=>{s.r(e),s.d(e,{Tutorial:()=>a});var i=s("./src/common/utils.ts"),n=s("./src/data/game-score.ts");class a{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,s,n){this.width=e,this.height=s,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=n>=0?n:null,this.tutorialImg=new Image,this.tutorialImg.src="./assets/images/tutorial_hand.png",this.drawRipple=(0,i.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,s){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const i=this.x-this.endx+this.absdx,n=this.y-this.endy+this.absdy;let a=100*Math.sqrt(i*i+n*n)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,s,s),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,s,i){this.totalTime+=Math.floor(t);const n=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*n,o=this.tutorialImg.height*n;this.context.drawImage(this.tutorialImg,e,s,a,o),!i&&this.drawRipple(e+.02*this.width,s+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,s,i){const n=(s-e)/2,a=Math.PI/i;return e+n*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,s=this.height/1.9+this.tutorialImg.height/.8,i=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let n;const a=this.endx;this.totalTime<e/2?(n=i+this.totalTime/(e/2)*(s-i),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(n=s-(this.totalTime-e/2)/(e/2)*(s-i),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,n,this.tutorialImg.width,this.tutorialImg.height),n<=i&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return n.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return n.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}},"./src/compositions/background/index.ts":(t,e,s)=>{s.r(e),s.d(e,{BACKGROUND_ASSET_LIST:()=>a,autumBgDrawing:()=>c,createBackground:()=>o,defaultBgDrawing:()=>h,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>l});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts");const a={summer:{BG_GROUP_IMGS:n.DEFAULT_BG_GROUP_IMGS,draw:h},autumn:{BG_GROUP_IMGS:n.AUTUMN_BG_GROUP_IMGS,draw:c},winter:{BG_GROUP_IMGS:n.WINTER_BG_GROUP_IMGS,draw:l}};async function o(t,e,s,n,a){return{...{...a(t,e,s,{...await(0,i.syncLoadingImages)(n)})}}}const r=(t,e)=>{const s=Object.keys(e);let i=Math.floor(t/10)%s.length;return t>=30&&(i%=3),{...e[s[i]]}};function h(t,e,s,i){return{draw:()=>{t.drawImage(i?.DEFAULT_BACKGROUND_1,0,0,e,s),t.drawImage(i?.PILLAR_IMAGE_1,.6*e,s/6,e,s/2),t.drawImage(i?.FENCE_IMAGE_1,.4*-e,s/3,e,s/3),t.drawImage(i?.HILL_IMAGE_1,.25*-e,s/2,1.5*e,s/2)}}}function c(t,e,s,i){return{draw:()=>{t.drawImage(i.AUTUMN_BACKGROUND_1,0,0,e,s),t.drawImage(i.AUTUMN_PILLAR_1,.38*e,s/6,e/1.2,s/2),t.drawImage(i.AUTUMN_FENCE_1,.4*-e,s/4,e,s/2),t.drawImage(i.AUTUMN_HILL_1,.25*-e,s/2,1.5*e,s/2)}}}function l(t,e,s,i){return{draw:()=>{t.drawImage(i.WINTER_BACKGROUND_1,0,0,e,s),t.drawImage(i.WINTER_PILLAR_1,.38*e,s/6,e/1.2,s/2),t.drawImage(i.WINTER_FENCE_1,.4*-e,s/4,e,s/2),t.drawImage(i.WINTER_HILL_1,.25*-e,s/2,1.5*e,s/2)}}}function d(t,e,s,i){return{draw:()=>{t.drawImage(i?.LEVEL_SELECTION_BACKGROUND,0,0,e,s)}}}},"./src/constants/index.ts":(t,e,s)=>{s.r(e),s.d(e,{ASSETS_PATH_BG_01:()=>O,ASSETS_PATH_FENCE:()=>U,ASSETS_PATH_HILL:()=>z,ASSETS_PATH_MONSTER_IDLE:()=>R,ASSETS_PATH_STONE_PINK_BG:()=>M,ASSETS_PATH_TOTEM:()=>N,AUDIO_PATH_BTN_CLICK:()=>k,AUDIO_PATH_CHEERING_FUNC:()=>D,AUDIO_PATH_CORRECT_STONE:()=>A,AUDIO_PATH_EATS:()=>T,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>P,AUDIO_PATH_MONSTER_SPIT:()=>C,AUDIO_PATH_ON_DRAG:()=>B,AUDIO_PATH_POINTS_ADD:()=>L,AUTUMN_BACKGROUND_1:()=>W,AUTUMN_BG_GROUP_IMGS:()=>it,AUTUMN_FENCE_1:()=>Y,AUTUMN_HILL_1:()=>V,AUTUMN_PILLAR_1:()=>X,AUTUMN_SIGN_1:()=>$,ButtonClick:()=>p,DEFAULT_BACKGROUND_1:()=>F,DEFAULT_BG_GROUP_IMGS:()=>st,DevelopmentServer:()=>y,EndScene1:()=>x,FENCE_IMAGE_1:()=>G,FeedbackAudio:()=>u,FirebaseUserClicked:()=>i,FirebaseUserInstall:()=>n,GAMEPLAY_BG_GROUP_IMGS:()=>et,GameScene1:()=>E,HILL_IMAGE_1:()=>j,IntroMusic:()=>g,IsCached:()=>l,LEVEL_SELECTION_BACKGROUND:()=>tt,LevelEndAudio:()=>b,LevelSelection1:()=>_,MonsterAudio:()=>d,NativePlayButton:()=>r,PILLAR_IMAGE_1:()=>H,PWAInstallStatus:()=>a,PhraseAudio:()=>w,PreviousPlayedLevel:()=>h,PromptAudio:()=>m,SCENE_NAME_GAME_PLAY:()=>rt,SCENE_NAME_LEVEL_END:()=>ht,SCENE_NAME_LEVEL_SELECT:()=>ot,SCENE_NAME_START:()=>at,StartScene1:()=>S,StoneMusic:()=>v,StoreMonsterPhaseNumber:()=>c,TimeOver:()=>f,UrlSubstring:()=>I,UserCancelled:()=>o,WINTER_BACKGROUND_1:()=>K,WINTER_BG_GROUP_IMGS:()=>nt,WINTER_FENCE_1:()=>Z,WINTER_HILL_1:()=>q,WINTER_PILLAR_1:()=>Q,WINTER_SIGN_1:()=>J});const i="user_clicked",n="user_installed",a="pwa_installed_status",o="user_cancel_installation",r="native_playbutton_clicked",h="storePreviousPlayedLevel",c="storeMonsterPhaseNumber",l="is_cached",d="monster_audio",u="feedback_audio",g="intro_music",m="prompt_audio",p="button_click",f="time_over",v="stone_music",w="phrase_audio",b="level_end_audio",I="/feedthemonster",y="https://feedthemonsterdev.curiouscontent.org",S="StartScene1",_="LevelSelection1",E="GameScene1",x="EndScene1",T="./assets/audios/Eat.mp3",C="./assets/audios/MonsterSpit.mp3",P="./assets/audios/Disapointed-05.mp3",L="assets/audios/PointsAdd.wav",A="assets/audios/CorrectStoneFinal.mp3",D=t=>`./assets/audios/Cheering-0${t}.mp3`,k="./assets/audios/ButtonClick.mp3",B="./assets/audios/onDrag.mp3",M="./assets/images/stone_pink_v02.png",N="./assets/images/Totem_v02_v01.png",O="./assets/images/bg_v01.jpg",z="./assets/images/hill_v01.png",U="./assets/images/fence_v01.png",R="./assets/images/idle4.png",F="./assets/images/bg_v01.jpg",j="./assets/images/hill_v01.png",H="./assets/images/Totem_v02_v01.png",G="./assets/images/fence_v01.png",W="./assets/images/Autumn_bg_v01.jpg",V="./assets/images/Autumn_hill_v01.png",X="./assets/images/Autumn_sign_v01.png",$="./assets/images/Autumn_sign_v01.png",Y="./assets/images/Autumn_fence_v01.png",K="./assets/images/Winter_bg_01.jpg",q="./assets/images/Winter_hill_v01.png",J="./assets/images/Winter_sign_v01.png",Z="./assets/images/Winter_fence_v01.png",Q="./assets/images/Winter_sign_v01.png",tt="./assets/images/map.jpg",et={ASSETS_PATH_TOTEM:N,ASSETS_PATH_BG_01:O,ASSETS_PATH_HILL:z,ASSETS_PATH_FENCE:U,ASSETS_PATH_MONSTER_IDLE:R},st={DEFAULT_BACKGROUND_1:F,HILL_IMAGE_1:j,PILLAR_IMAGE_1:H,FENCE_IMAGE_1:G},it={AUTUMN_BACKGROUND_1:W,AUTUMN_HILL_1:V,AUTUMN_PILLAR_1:X,AUTUMN_SIGN_1:$,AUTUMN_FENCE_1:Y},nt={WINTER_BACKGROUND_1:K,WINTER_HILL_1:q,WINTER_SIGN_1:J,WINTER_FENCE_1:Z,WINTER_PILLAR_1:Q},at="StartScene",ot="LevelSelection",rt="GamePlay",ht="LevelEnd"},"./src/data/api-data.ts":(t,e,s)=>{s.r(e),s.d(e,{URL:()=>n,getData:()=>o,getFtmData:()=>a});var i=s("./global-variables.ts");const n="./lang/"+i.lang+"/ftm_"+i.lang+".json";function a(){return fetch(n,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}async function o(){return await a()}},"./src/data/data-modal.ts":(t,e,s)=>{s.r(e),s.d(e,{DataModal:()=>i,FeedbackAudios:()=>o,FeedbackTexts:()=>a,FoilStone:()=>c,LevelMeta:()=>u,Levels:()=>r,OtherAudios:()=>n,Prompt:()=>d,Puzzles:()=>h,TargetStone:()=>l});class i{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,s,i,r,h,c,l,d){this.title=t,this.otherAudios=new n(e),this.levels=this.getLevels(s),this.FeedbackTexts=new a(i),this.FeedbackAudios=new o(h),this.rightToLeft=r,this.majVersion=c,this.minVersion=l,this.version=d}getLevels(t){let e=[];for(let s=0;s<t.length;s++)e.push(new r(t[s]));return e}}class n{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class a{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class o{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class r{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new u(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,s)=>{e.push(new h(t))})),e}}class h{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new d(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,s)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,s)=>{e.push(t.StoneText)})),e}}class c{stoneText;constructor(t){this.stoneText=t}}class l{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class u{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}},"./src/data/game-score.ts":(t,e,s)=>{s.r(e),s.d(e,{GameScore:()=>n});var i=s("./global-variables.ts");class n{static currentlanguage=i.lang;static setGameLevelScore(t,e){let s=this.calculateStarCount(e),i={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:s};this.setTotalStarCount(s);let n=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<n.length;t++)if(n[t].levelNumber===i.levelNumber){a=t;break}-1!==a&&i.score>n[a].score?n[a]=i:n.push(i),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(n))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return i.Debugger.DebugMode?JSON.parse(localStorage.getItem(i.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(i.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const i={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/events/EventManager.ts":(t,e,s)=>{s.r(e),s.d(e,{EventManager:()=>n});var i=s("./src/common/event-names.ts");class n{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/sceneHandler/scene-handler.ts":(t,e,s)=>{s.r(e),s.d(e,{SceneHandler:()=>d});var i=s("./src/scenes/start-scene.ts"),n=s("./src/scenes/level-selection-scene.ts"),a=s("./global-variables.ts"),o=s("./src/scenes/gameplay-scene.ts"),r=s("./src/data/game-score.ts"),h=s("./src/scenes/loading-scene.ts"),c=s("./src/scenes/levelend-scene.ts"),l=s("./src/constants/index.ts");class d{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;pwa_install_status;toggleBtn;constructor(t,e){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new i.StartScene(t,e,this.switchSceneToLevelSelection),d.SceneName=l.StartScene1,this.loadingScreen=new h.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let t=r.GameScore.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),d.SceneName===l.StartScene1?this.startScene.animation(e):d.SceneName===l.LevelSelection1?this.levelSelectionScene.drawLevelSelection():d.SceneName===l.GameScene1?this.gameplayScene.draw(e):d.SceneName===l.EndScene1&&this.levelEndScene.draw(e)};switchSceneToGameplay=(t,e)=>{this.showLoading(),this.dispose(e);let s=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new o.GameplayScene(this.canvas,t.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,t.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(l.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,s,this.data.FeedbackAudios),d.SceneName=l.GameScene1}),800)};switchSceneToEndLevel=(t,e,s,i)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(l.SCENE_NAME_GAME_PLAY),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new c.LevelEndScene(this.canvas,this.height,this.width,this.context,t,s,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),d.SceneName=l.EndScene1}),i?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new n.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),d.SceneName=l.LevelSelection1}),800)};dispose=t=>{t==l.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():t===l.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():t===l.SCENE_NAME_START?this.startScene.dispose():t==l.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(l.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{GameplayScene:()=>l});var i=s("./src/components/index.ts"),n=s("./src/common/index.ts"),a=s("./global-variables.ts"),o=s("./src/data/game-score.ts"),r=s("./src/Firebase/firebase-integration.ts"),h=s("./src/constants/index.ts"),c=s("./src/compositions/background/index.ts");class l{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;constructor(t,e,s,o,c,l,d,u,g,m,p){this.width=t.width,this.height=t.height,this.rightToLeft=c,this.canvas=t,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.monsterPhaseNumber=s||1,this.levelData=e,this.switchSceneToEnd=l,this.levelNumber=d,this.switchToLevelSelection=u,this.reloadScene=g,this.jsonVersionNumber=m,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new i.PauseButton(this.context,this.canvas),this.timerTicking=new i.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new i.StoneHandler(this.context,this.canvas,this.counter,this.levelData,p,this.timerTicking),this.tutorial=new i.Tutorial(this.context,t.width,t.height),this.promptText=new i.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new i.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new i.PausePopUp(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:e,selectedLevelNumber:d}),this.firebaseIntegration=new r.FirebaseIntegration,this.feedBackTextCanavsElement=document.getElementById("feedback-text"),this.feedBackTextCanavsElement.height=this.height,this.feedBackTextCanavsElement.width=this.width,this.feedbackTextEffects=new i.FeedbackTextEffects(this.feedBackTextCanavsElement.getContext("2d",{willReadFrequently:!0}),this.width,this.height),this.audioPlayer=new i.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=e.puzzles,this.feedBackTexts=o,this.images={profileMonster:h.ASSETS_PATH_MONSTER_IDLE},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}));var f=this.levelData.levelMeta.levelNumber;a.Debugger.DebugMode?localStorage.setItem(h.PreviousPlayedLevel+a.lang+"Debug",f):localStorage.setItem(h.PreviousPlayedLevel+a.lang,f),this.addEventListeners(),this.resetAnimationID=0,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,c.loadDynamicBgAssets)(this.levelData.levelNumber,c.BACKGROUND_ASSET_LIST);this.background=await(0,c.createBackground)(this.context,this.width,this.height,t,e)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const s=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(s-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;if(Math.sqrt((s-this.monster.x-this.canvas.width/4)**2+(i-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(t,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;for(let t of this.stoneHandler.foilStones){if(Math.sqrt((s-t.x)**2+(i-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(h.AUDIO_PATH_ON_DRAG);break}}};handleMouseMove=t=>{if(this.pickedStone){let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=i}};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;this.monster.onClick(s,i)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound(h.AUDIO_PATH_BTN_CLICK),this.pauseGamePlay()),this.promptText.onClick(s,i)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY})};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY})};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY})};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.monster.update(t),this.timerTicking.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||(this.feedbackTextEffects.render(),0==this.counter&&this.tutorial.clickOnMonsterTutorial(t)),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener(n.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(n.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(n.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(n.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(n.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(n.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(n.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(n.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.feedbackTextEffects.unregisterEventListener(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};letterPuzzle(t){const e=this.getRandomInt(0,1),s=this.stoneHandler.isStoneLetterDropCorrect(t,e);s&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(s)}wordPuzzle(t,e){this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const s=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+t;const i=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,s,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&i)return this.handleCorrectStoneDrop(s),this.handleStoneDropEnd(i,"Word"),void(this.stonesCount=1);i?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==a.lang?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation()}),2e3)):(this.handleStoneDropEnd(i,"Word"),this.stonesCount=1)}resetToIdleAnimation(t,e){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(t,e)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t)),this.feedBackTextCanavsElement.style.zIndex="2"};dispatchStoneDropEvent(t){const e=new CustomEvent(n.STONEDROP,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,this.feedbackTextEffects.clearParticle(),this.feedBackTextCanavsElement.style.zIndex="0",document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(t,e){let s=Date.now();const i={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(s-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/level-selection-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelSelectionScreen:()=>u});var i=s("./global-variables.ts"),n=s("./src/common/index.ts"),a=s("./src/common/level-config.ts"),o=s("./src/components/audio-player.ts"),r=s("./src/data/api-data.ts"),h=s("./src/data/game-score.ts"),c=s("./src/Firebase/firebase-integration.ts"),l=s("./src/compositions/background/index.ts"),d=s("./src/constants/index.ts");class u{canvas;data;width;height;levelButtonPos;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let a=this;this.callBack=s,this.levelsSectionCount=a.data.levels.length/10>Math.floor(a.data.levels.length/10)?Math.floor(a.data.levels.length/10)+1:Math.floor(a.data.levels.length/10),this.initialiseButtonPos(),this.levels=[],this.firebaseIntegration=new c.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(this.levelButtonPos),this.gameLevelData=h.GameScore.getAllGameLevelInfo(),this.audioPlayer=new o.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(i.Debugger.DebugMode?localStorage.getItem(d.PreviousPlayedLevel+i.lang+"Debug"):localStorage.getItem(d.PreviousPlayedLevel+i.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={mapIcon:"./assets/images/mapIcon.png",mapIconSpecial:"./assets/images/map_icon_monster_level_v01.png",mapLock:"./assets/images/mapLock.png",star:"./assets/images/star.png",nextbtn:"./assets/images/next_btn.png",backbtn:"./assets/images/back_btn.png"},(0,n.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/intro.mp3")})),this.addListeners()}async init(){const t=await(0,r.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await(0,l.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:d.LEVEL_SELECTION_BACKGROUND},l.levelSelectBgDrawing)};initialiseButtonPos(){this.levelButtonPos=[[[this.canvas.width/10,this.canvas.height/10],[this.canvas.width/2.5,this.canvas.height/10],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/10],[this.canvas.width/10,this.canvas.height/3],[this.canvas.width/2.5,this.canvas.height/3],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/3],[this.canvas.width/10,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.8],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.3]]]}createLevelButtons(t){let e=t[0],s=0;for(let t=0;t<10;t++){let t=new a.LevelConfig(e[s][0],e[s][1],s+1);this.levels.push(t),s+=1}}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,s=t.touches[0].clientY,i=this.xDown-e,n=this.yDown-s;Math.abs(i)>Math.abs(n)&&(i>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-e.left,n=t.clientY-e.top;s>=.7*this.canvas.width&&s<.7*this.canvas.width+this.canvas.height/10&&n>this.canvas.height/1.3&&n<this.canvas.height/1.3+this.canvas.height/10&&this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)),s>=this.canvas.width/10&&s<this.canvas.width/10+this.canvas.height/10&&n>this.canvas.height/1.3&&n<this.canvas.height/1.3+this.canvas.height/10&&(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex));for(let t of this.levels)Math.sqrt((s-t.x-this.canvas.height/20)*(s-t.x-this.canvas.height/20)+(n-t.y-this.canvas.height/20)*(n-t.y-this.canvas.height/20))<45&&(i.Debugger.DebugMode||t.index+this.levelSelectionPageIndex-1<=this.unlockLevelIndex+1)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.levelNumber=t.index+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber))};drawLevel(t,e){let s=e.height/5,n=s/6;const a=[5,13,20,30,42];if(t.index+this.levelSelectionPageIndex<=this.data.levels.length){const e=t.index+this.levelSelectionPageIndex,o=a.includes(e);this.context.drawImage(o?this.loadedImages.mapIconSpecial:this.loadedImages.mapIcon,t.x,t.y,o?.9*s:s,o?.9*s:s),this.context.fillStyle="white",this.context.font=n+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(t.index+this.levelSelectionPageIndex,t.x+s/3.5,t.y+s/3),this.context.font=n-s/30+`px ${i.font}, monospace`,i.Debugger.DebugMode&&this.context.fillText(this.data.levels[t.index+this.levelSelectionPageIndex-1].levelMeta.levelType,t.x+s/3.5,t.y+s/1.3)}}draw(){for(let t of this.levels)this.drawLevel(t,this.canvas)}downButton(t){let e=this.canvas.height/10;t!=10*this.levelsSectionCount-10&&this.context.drawImage(this.loadedImages.nextbtn,.7*this.canvas.width,this.canvas.height/1.3,e,e),0!=t&&this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/10,this.canvas.height/1.3,e,e)}drawStars(t){if(null!=t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber));for(let e of this.levels)if(e.index+this.levelSelectionPageIndex<=this.data.levels.length){i.Debugger.DebugMode||e.index+this.levelSelectionPageIndex-1>this.unlockLevelIndex+1&&this.context.drawImage(this.loadedImages.mapLock,e.x,e.y,this.canvas.height/13,this.canvas.height/13);for(let s=0;s<t.length;s++)if(e.index-1+this.levelSelectionPageIndex==parseInt(t[s].levelNumber)){this.drawStar(e,this.canvas,t[s].starCount,this.context);break}}}}drawStar(t,e,s,i){let n=e.height/5;s>=1&&i.drawImage(this.loadedImages.star,t.x,t.y-.01*n,n/5,n/5),s>1&&i.drawImage(this.loadedImages.star,t.x+n/2.5,t.y-.01*n,n/5,n/5),3==s&&i.drawImage(this.loadedImages.star,t.x+n/5,t.y-.1*n,n/5,n/5)}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.logSelectedLevelEvent(),this.callBack(e,"LevelSelection")}logSelectedLevelEvent(){const t={cr_user_id:i.pseudoId,ftm_language:i.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex),this.drawStars(this.gameLevelData))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelEndScene:()=>d});var i=s("./src/common/index.ts"),n=s("./src/common/event-names.ts"),a=s("./src/components/audio-player.ts"),o=s("./src/components/buttons/close-button.ts"),r=s("./src/components/buttons/next-button.ts"),h=s("./src/components/buttons/retry-button.ts"),c=s("./src/components/monster.ts"),l=s("./src/compositions/background/index.ts");class d{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(t,e,s,n,l,d,u,g,m,p){this.canvas=t,this.height=e,this.width=s,this.context=n,this.monster=new c.Monster(this.canvas,p,this.switchToReactionAnimation),this.switchToGameplayCB=u,this.switchToLevelSelectionCB=g,this.data=m,this.starDrawnCount=0,this.closeButton=new o.default(n,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new h.default(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new r.default(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new a.AudioPlayer,this.starCount=l,this.currentLevel=d,this.images={backgroundImg:"./assets/images/WIN_screen_bg.png",star1Img:"./assets/images/pinStar1.png",star2Img:"./assets/images/pinStar2.png",star3Img:"./assets/images/pinStar3.png",winBackgroundImg:"./assets/images/bg_v01.jpg"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new a.AudioPlayer,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,l.loadDynamicBgAssets)(this.currentLevel,l.BACKGROUND_ASSET_LIST);this.background=await(0,l.createBackground)(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?("visible"===document.visibilityState&&this.audioPlayer.playAudio("./assets/audios/LevelLoseFanfare.mp3"),this.monster.changeToSpitAnimation()):("visible"===document.visibilityState&&(this.audioPlayer.playAudio("./assets/audios/LevelWinFanfare.mp3"),this.audioPlayer.playAudio("./assets/audios/intro.mp3")),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(t),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;if(this.closeButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(s,i)){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let t={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(t,"LevelEnd")}if(this.nextButton.onClick(s,i)&&this.starCount>=2){this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3");let t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.switchToGameplayCB(e,"LevelEnd")}};pauseAudios=()=>{"visible"===document.visibilityState?this.starCount>=2&&this.audioPlayer.playAudio("./assets/audios/intro.mp3"):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LoadingScene:()=>n});var i=s("./src/common/index.ts");class n{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,s){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=s,this.context=this.canvas.getContext("2d"),this.images={cloud6:"./assets/images/cloud_01.png",cloud7:"./assets/images/cloud_02.png",cloud8:"./assets/images/cloud_03.png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{StartScene:()=>d});var i=s("./src/components/monster.ts"),n=s("./global-variables.ts"),a=s("./src/components/audio-player.ts"),o=s("./src/Firebase/firebase-integration.ts"),r=s("./src/common/utils.ts"),h=s("./src/components/play-button.ts"),c=s("./src/compositions/background/index.ts"),l=s("./src/constants/index.ts");class d{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background;audioPlayer;toggleBtn;pwa_install_status;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new i.Monster(this.canvas,4),this.switchSceneToLevelSelection=s,this.audioPlayer=new a.AudioPlayer,this.pwa_status=localStorage.getItem(l.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg()}setupBg=async()=>{this.background=await(0,c.createBackground)(this.context,this.width,this.height,l.DEFAULT_BG_GROUP_IMGS,c.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(n.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(n.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))};animation=t=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.context.font=`${this.titleFont}px ${n.font}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(t),this.playButton.draw()};createPlayButton(){this.playButton=new h.default(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const s=document.getElementById("canvas");t.preventDefault();var i=s.getBoundingClientRect();const n=t.clientX-i.left,a=t.clientY-i.top,{excludeX:h,excludeY:c}=r.Utils.getExcludedCoordinates(s,15);n<h&&a<c||(o.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",l.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound("./assets/audios/ButtonClick.mp3"),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data.title.length}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(l.PWAInstallStatus,"false")}}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>V,setDefaultEventParameters:()=>q,setUserId:()=>$,setUserProperties:()=>Y,settings:()=>F});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js");s("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",h="firebase_id",c="origin",l=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",u="https://www.googletagmanager.com/gtag/js",g=new n.Logger("@firebase/analytics"),m={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},p=new a.ErrorFactory("analytics","Analytics",m);function f(t){if(!t.startsWith(u)){const e=p.create("invalid-gtag-resource",{gtagURL:t});return g.warn(e.message),""}return t}function v(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function w(t,e){const s=function(t,e){let s;return window.trustedTypes&&(s=window.trustedTypes.createPolicy(t,e)),s}("firebase-js-sdk-policy",{createScriptURL:f}),i=document.createElement("script"),n=`${u}?l=${t}&id=${e}`;i.src=s?null==s?void 0:s.createScriptURL(n):n,i.async=!0,document.head.appendChild(i)}function b(t,e,s,i){return async function(n,...a){try{if("event"===n){const[i,n]=a;await async function(t,e,s,i,n){try{let a=[];if(n&&n.send_to){let t=n.send_to;Array.isArray(t)||(t=[t]);const i=await v(s);for(const s of t){const t=i.find((t=>t.measurementId===s)),n=t&&e[t.appId];if(!n){a=[];break}a.push(n)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",i,n||{})}catch(t){g.error(t)}}(t,e,s,i,n)}else if("config"===n){const[n,o]=a;await async function(t,e,s,i,n,a){const o=i[n];try{if(o)await e[o];else{const t=(await v(s)).find((t=>t.measurementId===n));t&&await e[t.appId]}}catch(t){g.error(t)}t("config",n,a)}(t,e,s,i,n,o)}else if("consent"===n){const[e]=a;t("consent","update",e)}else if("get"===n){const[e,s,i]=a;t("get",e,s,i)}else if("set"===n){const[e]=a;t("set",e)}else t(n,...a)}catch(t){g.error(t)}}}const I=30;const y=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function S(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function _(t,e=y,s){const{appId:i,apiKey:n,measurementId:a}=t.options;if(!i)throw p.create("no-app-id");if(!n){if(a)return{measurementId:a,appId:i};throw p.create("no-api-key")}const o=e.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new x;return setTimeout((async()=>{r.abort()}),void 0!==s?s:l),E({appId:i,apiKey:n,measurementId:a},o,r,e)}async function E(t,{throttleEndTimeMillis:e,backoffCount:s},i,n=y){var o;const{appId:r,measurementId:h}=t;try{await function(t,e){return new Promise(((s,i)=>{const n=Math.max(e-Date.now(),0),a=setTimeout(s,n);t.addEventListener((()=>{clearTimeout(a),i(p.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(i,e)}catch(t){if(h)return g.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:r,measurementId:h};throw t}try{const e=await async function(t){var e;const{appId:s,apiKey:i}=t,n={method:"GET",headers:S(i)},a=d.replace("{app-id}",s),o=await fetch(a,n);if(200!==o.status&&304!==o.status){let t="";try{const s=await o.json();(null===(e=s.error)||void 0===e?void 0:e.message)&&(t=s.error.message)}catch(t){}throw p.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return n.deleteThrottleMetadata(r),e}catch(e){const c=e;if(!function(t){if(!(t instanceof a.FirebaseError&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(c)){if(n.deleteThrottleMetadata(r),h)return g.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==c?void 0:c.message}]`),{appId:r,measurementId:h};throw e}const l=503===Number(null===(o=null==c?void 0:c.customData)||void 0===o?void 0:o.httpStatus)?(0,a.calculateBackoffMillis)(s,n.intervalMillis,I):(0,a.calculateBackoffMillis)(s,n.intervalMillis),d={throttleEndTimeMillis:Date.now()+l,backoffCount:s+1};return n.setThrottleMetadata(r,d),g.debug(`Calling attemptFetch again in ${l} millis`),E(t,d,i,n)}}class x{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let T,C;function P(t){C=t}function L(t){T=t}async function A(t,e,s,i,n,o,r){var l;const d=_(t);d.then((e=>{s[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&g.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>g.error(t))),e.push(d);const m=async function(){if(!(0,a.isIndexedDBAvailable)())return g.warn(p.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,a.validateIndexedDBOpenable)()}catch(t){return g.warn(p.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?i.getId():void 0)),[f,v]=await Promise.all([d,m]);(function(t){const e=window.document.getElementsByTagName("script");for(const s of Object.values(e))if(s.src&&s.src.includes(u)&&s.src.includes(t))return s;return null})(o)||w(o,f.measurementId),C&&(n("consent","default",C),P(void 0)),n("js",new Date);const b=null!==(l=null==r?void 0:r.config)&&void 0!==l?l:{};return b[c]="firebase",b.update=!0,null!=v&&(b[h]=v),n("config",f.measurementId,b),T&&(n("set",T),L(void 0)),f.measurementId}class D{constructor(t){this.app=t}_delete(){return delete k[this.app.options.appId],Promise.resolve()}}let k={},B=[];const M={};let N,O,z="dataLayer",U="gtag",R=!1;function F(t){if(R)throw p.create("already-initialized");t.dataLayerName&&(z=t.dataLayerName),t.gtagName&&(U=t.gtagName)}function j(t,e,s){!function(){const t=[];if((0,a.isBrowserExtension)()&&t.push("This is a browser extension environment."),(0,a.areCookiesEnabled)()||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),s=p.create("invalid-analytics-context",{errorInfo:e});g.warn(s.message)}}();const i=t.options.appId;if(!i)throw p.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw p.create("no-api-key");g.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=k[i])throw p.create("already-exists",{id:i});if(!R){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(z);const{wrappedGtag:t,gtagCore:e}=function(t,e,s,i,n){let a=function(...t){window[i].push(arguments)};return window[n]&&"function"==typeof window[n]&&(a=window[n]),window[n]=b(a,t,e,s),{gtagCore:a,wrappedGtag:window[n]}}(k,B,M,z,U);O=t,N=e,R=!0}k[i]=A(t,B,M,e,N,z,s);return new D(t)}function H(t=(0,i.getApp)()){t=(0,a.getModularInstance)(t);const e=(0,i._getProvider)(t,r);return e.isInitialized()?e.getImmediate():G(t)}function G(t,e={}){const s=(0,i._getProvider)(t,r);if(s.isInitialized()){const t=s.getImmediate();if((0,a.deepEqual)(e,s.getOptions()))return t;throw p.create("already-initialized")}return s.initialize({options:e})}async function W(){if((0,a.isBrowserExtension)())return!1;if(!(0,a.areCookiesEnabled)())return!1;if(!(0,a.isIndexedDBAvailable)())return!1;try{return await(0,a.validateIndexedDBOpenable)()}catch(t){return!1}}function V(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global)return t("set",{screen_name:s}),Promise.resolve();t("config",await e,{update:!0,screen_name:s})}(O,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}async function X(t){return t=(0,a.getModularInstance)(t),async function(t,e){const s=await e;return new Promise(((e,i)=>{t("get",s,"client_id",(t=>{t||i(p.create("no-client-id")),e(t)}))}))}(O,k[t.app.options.appId])}function $(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global)return t("set",{user_id:s}),Promise.resolve();t("config",await e,{update:!0,user_id:s})}(O,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}function Y(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global){const e={};for(const t of Object.keys(s))e[`user_properties.${t}`]=s[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:s})}(O,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}function K(t,e){t=(0,a.getModularInstance)(t),async function(t,e){const s=await t;window[`ga-disable-${s}`]=!e}(k[t.app.options.appId],e).catch((t=>g.error(t)))}function q(t){O?O("set",t):L(t)}function J(t,e,s,i){t=(0,a.getModularInstance)(t),async function(t,e,s,i,n){if(n&&n.global)t("event",s,i);else{const n=await e;t("event",s,Object.assign(Object.assign({},i),{send_to:n}))}}(O,k[t.app.options.appId],e,s,i).catch((t=>g.error(t)))}function Z(t){O?O("consent","update",t):P(t)}const Q="@firebase/analytics",tt="0.10.0";(0,i._registerComponent)(new o.Component(r,((t,{options:e})=>j(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),(0,i._registerComponent)(new o.Component("analytics-internal",(function(t){try{const e=t.getProvider(r).getImmediate();return{logEvent:(t,s,i)=>J(e,t,s,i)}}catch(t){throw p.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),(0,i.registerVersion)(Q,tt),(0,i.registerVersion)(Q,tt,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>Y,_DEFAULT_ENTRY_NAME:()=>N,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>z,_clearComponents:()=>W,_components:()=>U,_getProvider:()=>H,_registerComponent:()=>j,_removeServiceInstance:()=>G,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>tt,registerVersion:()=>Q,setLogLevel:()=>et});var i=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/idb/build/index.js");class r{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const h="@firebase/app",c="0.9.15",l=new n.Logger("@firebase/app"),d="@firebase/app-compat",u="@firebase/analytics-compat",g="@firebase/analytics",m="@firebase/app-check-compat",p="@firebase/app-check",f="@firebase/auth",v="@firebase/auth-compat",w="@firebase/database",b="@firebase/database-compat",I="@firebase/functions",y="@firebase/functions-compat",S="@firebase/installations",_="@firebase/installations-compat",E="@firebase/messaging",x="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",P="@firebase/remote-config",L="@firebase/remote-config-compat",A="@firebase/storage",D="@firebase/storage-compat",k="@firebase/firestore",B="@firebase/firestore-compat",M="firebase",N="[DEFAULT]",O={[h]:"fire-core",[d]:"fire-core-compat",[g]:"fire-analytics",[u]:"fire-analytics-compat",[p]:"fire-app-check",[m]:"fire-app-check-compat",[f]:"fire-auth",[v]:"fire-auth-compat",[w]:"fire-rtdb",[b]:"fire-rtdb-compat",[I]:"fire-fn",[y]:"fire-fn-compat",[S]:"fire-iid",[_]:"fire-iid-compat",[E]:"fire-fcm",[x]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[P]:"fire-rc",[L]:"fire-rc-compat",[A]:"fire-gcs",[D]:"fire-gcs-compat",[k]:"fire-fst",[B]:"fire-fst-compat","fire-js":"fire-js",[M]:"fire-js-all"},z=new Map,U=new Map;function R(t,e){try{t.container.addComponent(e)}catch(s){l.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,s)}}function F(t,e){t.container.addOrOverwriteComponent(e)}function j(t){const e=t.name;if(U.has(e))return l.debug(`There were multiple attempts to register component ${e}.`),!1;U.set(e,t);for(const e of z.values())R(e,t);return!0}function H(t,e){const s=t.container.getProvider("heartbeat").getImmediate({optional:!0});return s&&s.triggerHeartbeat(),t.container.getProvider(e)}function G(t,e,s=N){H(t,e).clearInstance(s)}function W(){U.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new a.ErrorFactory("app","Firebase",V);class ${constructor(t,e,s){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=s,this.container.addComponent(new i.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const Y="10.1.0";function K(t,e={}){let s=t;if("object"!=typeof e){e={name:e}}const n=Object.assign({name:N,automaticDataCollectionEnabled:!1},e),o=n.name;if("string"!=typeof o||!o)throw X.create("bad-app-name",{appName:String(o)});if(s||(s=(0,a.getDefaultAppConfig)()),!s)throw X.create("no-options");const r=z.get(o);if(r){if((0,a.deepEqual)(s,r.options)&&(0,a.deepEqual)(n,r.config))return r;throw X.create("duplicate-app",{appName:o})}const h=new i.ComponentContainer(o);for(const t of U.values())h.addComponent(t);const c=new $(s,n,h);return z.set(o,c),c}function q(t=N){const e=z.get(t);if(!e&&t===N&&(0,a.getDefaultAppConfig)())return K();if(!e)throw X.create("no-app",{appName:t});return e}function J(){return Array.from(z.values())}async function Z(t){const e=t.name;z.has(e)&&(z.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function Q(t,e,s){var n;let a=null!==(n=O[t])&&void 0!==n?n:t;s&&(a+=`-${s}`);const o=a.match(/\s|\//),r=e.match(/\s|\//);if(o||r){const t=[`Unable to register library "${a}" with version "${e}":`];return o&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&r&&t.push("and"),r&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void l.warn(t.join(" "))}j(new i.Component(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}function tt(t,e){if(null!==t&&"function"!=typeof t)throw X.create("invalid-log-argument");(0,n.setUserLogHandler)(t,e)}function et(t){(0,n.setLogLevel)(t)}const st="firebase-heartbeat-database",it=1,nt="firebase-heartbeat-store";let at=null;function ot(){return at||(at=(0,o.openDB)(st,it,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(nt)}}).catch((t=>{throw X.create("idb-open",{originalErrorMessage:t.message})}))),at}async function rt(t,e){try{const s=(await ot()).transaction(nt,"readwrite"),i=s.objectStore(nt);await i.put(e,ht(t)),await s.done}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=X.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}function ht(t){return`${t.name}!${t.options.appId}`}class ct{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new dt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=lt();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=lt(),{heartbeatsToSend:e,unsentEntries:s}=function(t,e=1024){const s=[];let i=t.slice();for(const n of t){const t=s.find((t=>t.agent===n.agent));if(t){if(t.dates.push(n.date),ut(s)>e){t.dates.pop();break}}else if(s.push({agent:n.agent,dates:[n.date]}),ut(s)>e){s.pop();break}i=i.slice(1)}return{heartbeatsToSend:s,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,s.length>0?(this._heartbeatsCache.heartbeats=s,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function lt(){return(new Date).toISOString().substring(0,10)}class dt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.isIndexedDBAvailable)()&&(0,a.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(t){try{const e=await ot();return await e.transaction(nt).objectStore(nt).get(ht(t))}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=X.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const s=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:s.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const s=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:s.lastSentHeartbeatDate,heartbeats:[...s.heartbeats,...t.heartbeats]})}}}function ut(t){return(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t})).length}var gt;gt="",j(new i.Component("platform-logger",(t=>new r(t)),"PRIVATE")),j(new i.Component("heartbeat",(t=>new ct(t)),"PRIVATE")),Q(h,c,gt),Q(h,c,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{Component:()=>n,ComponentContainer:()=>r,Provider:()=>o});var i=s("./node_modules/@firebase/util/dist/index.esm2017.js");class n{constructor(t,e,s){this.name=t,this.instanceFactory=e,this.type=s,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const a="[DEFAULT]";class o{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new i.Deferred;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const s=this.getOrInitializeService({instanceIdentifier:e});s&&t.resolve(s)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const s=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(s)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:s})}catch(t){if(i)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:a})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const s=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:s});e.resolve(t)}catch(t){}}}}clearInstance(t=a){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=a){return this.instances.has(t)}getOptions(t=a){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,s=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(s))throw Error(`${this.name}(${s}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:s,options:e});for(const[t,e]of this.instancesDeferred.entries()){s===this.normalizeInstanceIdentifier(t)&&e.resolve(i)}return i}onInit(t,e){var s;const i=this.normalizeInstanceIdentifier(e),n=null!==(s=this.onInitCallbacks.get(i))&&void 0!==s?s:new Set;n.add(t),this.onInitCallbacks.set(i,n);const a=this.instances.get(i);return a&&t(a,i),()=>{n.delete(t)}}invokeOnInitCallbacks(t,e){const s=this.onInitCallbacks.get(e);if(s)for(const i of s)try{i(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let s=this.instances.get(t);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(i=t,i===a?void 0:i),options:e}),this.instances.set(t,s),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(s,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,s)}catch(t){}var i;return s||null}normalizeInstanceIdentifier(t=a){return this.component?this.component.multipleInstances?t:a:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new o(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>et,getToken:()=>J,onIdChange:()=>tt});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",h="0.6.4",c=1e4,l=`w:${h}`,d="FIS_v2",u="https://firebaseinstallations.googleapis.com/v1",g=36e5,m={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},p=new a.ErrorFactory("installations","Installations",m);function f(t){return t instanceof a.FirebaseError&&t.code.includes("request-failed")}function v({projectId:t}){return`${u}/projects/${t}/installations`}function w(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function b(t,e){const s=(await e.json()).error;return p.create("request-failed",{requestName:t,serverCode:s.code,serverMessage:s.message,serverStatus:s.status})}function I({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function y(t,{refreshToken:e}){const s=I(t);return s.append("Authorization",function(t){return`${d} ${t}`}(e)),s}async function S(t){const e=await t();return e.status>=500&&e.status<600?t():e}function _(t){return new Promise((e=>{setTimeout(e,t)}))}const E=/^[cdef][\w-]{21}$/,x="";function T(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(s=t,btoa(String.fromCharCode(...s)).replace(/\+/g,"-").replace(/\//g,"_"));var s;return e.substr(0,22)}(t);return E.test(e)?e:x}catch(t){return x}}function C(t){return`${t.appName}!${t.appId}`}const P=new Map;function L(t,e){const s=C(t);A(s,e),function(t,e){const s=k();s&&s.postMessage({key:t,fid:e});B()}(s,e)}function A(t,e){const s=P.get(t);if(s)for(const t of s)t(e)}let D=null;function k(){return!D&&"BroadcastChannel"in self&&(D=new BroadcastChannel("[Firebase] FID Change"),D.onmessage=t=>{A(t.data.key,t.data.fid)}),D}function B(){0===P.size&&D&&(D.close(),D=null)}const M="firebase-installations-database",N=1,O="firebase-installations-store";let z=null;function U(){return z||(z=(0,o.openDB)(M,N,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(O)}})),z}async function R(t,e){const s=C(t),i=(await U()).transaction(O,"readwrite"),n=i.objectStore(O),a=await n.get(s);return await n.put(e,s),await i.done,a&&a.fid===e.fid||L(t,e.fid),e}async function F(t){const e=C(t),s=(await U()).transaction(O,"readwrite");await s.objectStore(O).delete(e),await s.done}async function j(t,e){const s=C(t),i=(await U()).transaction(O,"readwrite"),n=i.objectStore(O),a=await n.get(s),o=e(a);return void 0===o?await n.delete(s):await n.put(o,s),await i.done,!o||a&&a.fid===o.fid||L(t,o.fid),o}async function H(t){let e;const s=await j(t.appConfig,(s=>{const i=function(t){const e=t||{fid:T(),registrationStatus:0};return V(e)}(s),n=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(p.create("app-offline"))}}const s={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(t,e){try{const s=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:s}){const i=v(t),n=I(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={fid:s,authVersion:d,appId:t.appId,sdkVersion:l},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await S((()=>fetch(i,r)));if(h.ok){const t=await h.json();return{fid:t.fid||s,registrationStatus:2,refreshToken:t.refreshToken,authToken:w(t.authToken)}}throw await b("Create Installation",h)}(t,e);return R(t.appConfig,s)}catch(s){throw f(s)&&409===s.customData.serverCode?await F(t.appConfig):await R(t.appConfig,{fid:e.fid,registrationStatus:0}),s}}(t,s);return{installationEntry:s,registrationPromise:i}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:G(t)}:{installationEntry:e}}(t,i);return e=n.registrationPromise,n.installationEntry}));return s.fid===x?{installationEntry:await e}:{installationEntry:s,registrationPromise:e}}async function G(t){let e=await W(t.appConfig);for(;1===e.registrationStatus;)await _(100),e=await W(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:s}=await H(t);return s||e}return e}function W(t){return j(t,(t=>{if(!t)throw p.create("installation-not-found");return V(t)}))}function V(t){return 1===(e=t).registrationStatus&&e.registrationTime+c<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function X({appConfig:t,heartbeatServiceProvider:e},s){const i=function(t,{fid:e}){return`${v(t)}/${e}/authTokens:generate`}(t,s),n=y(t,s),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={installation:{sdkVersion:l,appId:t.appId}},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await S((()=>fetch(i,r)));if(h.ok){return w(await h.json())}throw await b("Generate Auth Token",h)}async function $(t,e=!1){let s;const i=await j(t.appConfig,(i=>{if(!K(i))throw p.create("not-registered");const n=i.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+g}(t)}(n))return i;if(1===n.requestStatus)return s=async function(t,e){let s=await Y(t.appConfig);for(;1===s.authToken.requestStatus;)await _(100),s=await Y(t.appConfig);const i=s.authToken;return 0===i.requestStatus?$(t,e):i}(t,e),i;{if(!navigator.onLine)throw p.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(i);return s=async function(t,e){try{const s=await X(t,e),i=Object.assign(Object.assign({},e),{authToken:s});return await R(t.appConfig,i),s}catch(s){if(!f(s)||401!==s.customData.serverCode&&404!==s.customData.serverCode){const s=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await R(t.appConfig,s)}else await F(t.appConfig);throw s}}(t,e),e}}));return s?await s:i.authToken}function Y(t){return j(t,(t=>{if(!K(t))throw p.create("not-registered");const e=t.authToken;return 1===(s=e).requestStatus&&s.requestTime+c<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var s}))}function K(t){return void 0!==t&&2===t.registrationStatus}async function q(t){const e=t,{installationEntry:s,registrationPromise:i}=await H(e);return i?i.catch(console.error):$(e).catch(console.error),s.fid}async function J(t,e=!1){const s=t;await async function(t){const{registrationPromise:e}=await H(t);e&&await e}(s);return(await $(s,e)).token}async function Z(t,e){const s=function(t,{fid:e}){return`${v(t)}/${e}`}(t,e),i={method:"DELETE",headers:y(t,e)},n=await S((()=>fetch(s,i)));if(!n.ok)throw await b("Delete Installation",n)}async function Q(t){const{appConfig:e}=t,s=await j(e,(t=>{if(!t||0!==t.registrationStatus)return t}));if(s){if(1===s.registrationStatus)throw p.create("delete-pending-registration");if(2===s.registrationStatus){if(!navigator.onLine)throw p.create("app-offline");await Z(e,s),await F(e)}}}function tt(t,e){const{appConfig:s}=t;return function(t,e){k();const s=C(t);let i=P.get(s);i||(i=new Set,P.set(s,i)),i.add(e)}(s,e),()=>{!function(t,e){const s=C(t),i=P.get(s);i&&(i.delete(e),0===i.size&&P.delete(s),B())}(s,e)}}function et(t=(0,i.getApp)()){return(0,i._getProvider)(t,"installations").getImmediate()}function st(t){return p.create("missing-app-config-values",{valueName:t})}const it="installations",nt=t=>{const e=t.getProvider("app").getImmediate(),s=function(t){if(!t||!t.options)throw st("App Configuration");if(!t.name)throw st("App Name");const e=["projectId","apiKey","appId"];for(const s of e)if(!t.options[s])throw st(s);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:s,heartbeatServiceProvider:(0,i._getProvider)(e,"heartbeat"),_delete:()=>Promise.resolve()}},at=t=>{const e=t.getProvider("app").getImmediate(),s=(0,i._getProvider)(e,it).getImmediate();return{getId:()=>q(s),getToken:t=>J(s,t)}};(0,i._registerComponent)(new n.Component(it,nt,"PUBLIC")),(0,i._registerComponent)(new n.Component("installations-internal",at,"PRIVATE")),(0,i.registerVersion)(r,h),(0,i.registerVersion)(r,h,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(t,e,s)=>{s.r(e),s.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:s,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,i.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,i.w)(r.result),t.oldVersion,t.newVersion,(0,i.w)(r.transaction))})),s&&r.addEventListener("blocked",(()=>s())),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);return e&&s.addEventListener("blocked",(()=>e())),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function c(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const s=e.replace(/FromIndex$/,""),i=e!==s,n=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(s))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(e.shift())),(await Promise.all([o[s](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,i.r)((t=>({...t,get:(e,s,i)=>c(e,s)||t.get(e,s,i),has:(e,s)=>!!c(e,s)||t.has(e,s)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(t,e,s)=>{s.r(e),s.d(e,{a:()=>l,i:()=>i,r:()=>u,u:()=>f,w:()=>p});const i=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,c=new WeakMap,l=new WeakMap;let d={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return p(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function g(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...s){const i=t.call(f(this),e,...s);return h.set(i,e.sort?e.sort():[e]),p(i)}}function m(t){return"function"==typeof t?g(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),i()},a=()=>{s(t.error||new DOMException("AbortError","AbortError")),i()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),i(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),i()},a=()=>{s(t.error),i()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(c.has(t))return c.get(t);const e=m(t);return e!==t&&(c.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{LogLevel:()=>n,Logger:()=>c,setLogLevel:()=>l,setUserLogHandler:()=>d});const i=[];var n;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(n||(n={}));const a={debug:n.DEBUG,verbose:n.VERBOSE,info:n.INFO,warn:n.WARN,error:n.ERROR,silent:n.SILENT},o=n.INFO,r={[n.DEBUG]:"log",[n.VERBOSE]:"log",[n.INFO]:"info",[n.WARN]:"warn",[n.ERROR]:"error"},h=(t,e,...s)=>{if(e<t.logLevel)return;const i=(new Date).toISOString(),n=r[e];if(!n)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[n](`[${i}]  ${t.name}:`,...s)};class c{constructor(t){this.name=t,this._logLevel=o,this._logHandler=h,this._userLogHandler=null,i.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in n))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,n.DEBUG,...t),this._logHandler(this,n.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,n.VERBOSE,...t),this._logHandler(this,n.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,n.INFO,...t),this._logHandler(this,n.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,n.WARN,...t),this._logHandler(this,n.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,n.ERROR,...t),this._logHandler(this,n.ERROR,...t)}}function l(t){i.forEach((e=>{e.setLogLevel(t)}))}function d(t,e){for(const s of i){let i=null;e&&e.level&&(i=a[e.level]),s.userLogHandler=null===t?null:(e,s,...a)=>{const o=a.map((t=>{if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((t=>t)).join(" ");s>=(null!=i?i:e.logLevel)&&t({level:n[s].toLowerCase(),message:o,args:a,type:e.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(t,e,s)=>{s.r(e),s.d(e,{getAnalytics:()=>i.getAnalytics,getGoogleAnalyticsClientId:()=>i.getGoogleAnalyticsClientId,initializeAnalytics:()=>i.initializeAnalytics,isSupported:()=>i.isSupported,logEvent:()=>i.logEvent,setAnalyticsCollectionEnabled:()=>i.setAnalyticsCollectionEnabled,setConsent:()=>i.setConsent,setCurrentScreen:()=>i.setCurrentScreen,setDefaultEventParameters:()=>i.setDefaultEventParameters,setUserId:()=>i.setUserId,setUserProperties:()=>i.setUserProperties,settings:()=>i.settings});var i=s("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(t,e,s)=>{s.r(e),s.d(e,{FirebaseError:()=>i.FirebaseError,SDK_VERSION:()=>i.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>i._DEFAULT_ENTRY_NAME,_addComponent:()=>i._addComponent,_addOrOverwriteComponent:()=>i._addOrOverwriteComponent,_apps:()=>i._apps,_clearComponents:()=>i._clearComponents,_components:()=>i._components,_getProvider:()=>i._getProvider,_registerComponent:()=>i._registerComponent,_removeServiceInstance:()=>i._removeServiceInstance,deleteApp:()=>i.deleteApp,getApp:()=>i.getApp,getApps:()=>i.getApps,initializeApp:()=>i.initializeApp,onLog:()=>i.onLog,registerVersion:()=>i.registerVersion,setLogLevel:()=>i.setLogLevel});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,i.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(t,e,s)=>{s.r(e),s.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:s,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,i.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,i.w)(r.result),t.oldVersion,t.newVersion,(0,i.w)(r.transaction),t)})),s&&r.addEventListener("blocked",(t=>s(t.oldVersion,t.newVersion,t))),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);return e&&s.addEventListener("blocked",(t=>e(t.oldVersion,t))),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function c(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const s=e.replace(/FromIndex$/,""),i=e!==s,n=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(s))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(e.shift())),(await Promise.all([o[s](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,i.r)((t=>({...t,get:(e,s,i)=>c(e,s)||t.get(e,s,i),has:(e,s)=>!!c(e,s)||t.has(e,s)})))},"./node_modules/idb/build/wrap-idb-value.js":(t,e,s)=>{s.r(e),s.d(e,{a:()=>l,i:()=>i,r:()=>u,u:()=>f,w:()=>p});const i=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,c=new WeakMap,l=new WeakMap;let d={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return p(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function g(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...s){const i=t.call(f(this),e,...s);return h.set(i,e.sort?e.sort():[e]),p(i)}}function m(t){return"function"==typeof t?g(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),i()},a=()=>{s(t.error||new DOMException("AbortError","AbortError")),i()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),i(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),i()},a=()=>{s(t.error),i()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(c.has(t))return c.get(t);const e=m(t);return e!==t&&(c.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(t,e,s)=>{s.r(e),s.d(e,{Workbox:()=>u,messageSW:()=>i});try{self["workbox:window:4.3.1"]&&_()}catch(i){}var i=function(t,e){return new Promise((function(s){var i=new MessageChannel;i.port1.onmessage=function(t){return s(t.data)},t.postMessage(e,[i.port2])}))};function n(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(i){}var o=function(){var t=this;this.promise=new Promise((function(e,s){t.resolve=e,t.reject=s}))},r=function(t,e){return new URL(t,location).href===new URL(e,location).href},h=function(t,e){Object.assign(this,e,{type:t})};function c(t){return function(){for(var e=[],s=0;s<arguments.length;s++)e[s]=arguments[s];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function l(t,e,s){return s?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function d(){}var u=function(t){var e,s;function u(e,s){var i;return void 0===s&&(s={}),(i=t.call(this)||this).t=e,i.i=s,i.o=0,i.u=new o,i.s=new o,i.h=new o,i.v=i.v.bind(a(a(i))),i.l=i.l.bind(a(a(i))),i.g=i.g.bind(a(a(i))),i.m=i.m.bind(a(a(i))),i}s=t,(e=u).prototype=Object.create(s.prototype),e.prototype.constructor=e,e.__proto__=s;var g,m,p=u.prototype;return p.register=c((function(t){var e,s,i=this,n=(void 0===t?{}:t).immediate,a=void 0!==n&&n;return e=function(){return i.p=Boolean(navigator.serviceWorker.controller),i.P=i.R(),l(i.k(),(function(t){i.B=t,i.P&&(i.O=i.P,i.s.resolve(i.P),i.h.resolve(i.P),i.j(i.P),i.P.addEventListener("statechange",i.l,{once:!0}));var e=i.B.waiting;return e&&r(e.scriptURL,i.t)&&(i.O=e,Promise.resolve().then((function(){i.dispatchEvent(new h("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),i.O&&i.u.resolve(i.O),i.B.addEventListener("updatefound",i.g),navigator.serviceWorker.addEventListener("controllerchange",i.m,{once:!0}),"BroadcastChannel"in self&&(i.C=new BroadcastChannel("workbox"),i.C.addEventListener("message",i.v)),navigator.serviceWorker.addEventListener("message",i.v),i.B}))},(s=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(d):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&s.then?s.then(e):e()})),p.getSW=c((function(){return this.O||this.u.promise})),p.messageSW=c((function(t){return l(this.getSW(),(function(e){return i(e,t)}))})),p.R=function(){var t=navigator.serviceWorker.controller;if(t&&r(t.scriptURL,this.t))return t},p.k=c((function(){var t=this;return function(t,e){try{var s=t()}catch(t){return e(t)}return s&&s.then?s.then(void 0,e):s}((function(){return l(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),p.j=function(t){i(t,{type:"WINDOW_READY",meta:"workbox-window"})},p.g=function(){var t=this.B.installing;this.o>0||!r(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},p.l=function(t){var e=this,s=t.target,i=s.state,n=s===this.W,a=n?"external":"",o={sw:s,originalEvent:t};!n&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new h(a+i,o)),"installed"===i?this._=setTimeout((function(){"installed"===i&&e.B.waiting===s&&e.dispatchEvent(new h(a+"waiting",o))}),200):"activating"===i&&(clearTimeout(this._),n||this.s.resolve(s))},p.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new h("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},p.v=function(t){var e=t.data;this.dispatchEvent(new h("message",{data:e,originalEvent:t}))},g=u,(m=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&n(g.prototype,m),u}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}())}},e={};function s(i){var n=e[i];if(void 0!==n)return n.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,s),a.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{s.r(i);var t=s("./src/data/api-data.ts"),e=s("./src/data/data-modal.ts"),n=s("./src/sceneHandler/scene-handler.ts"),a=s("./src/constants/index.ts"),o=s("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),r=s("./global-variables.ts"),h=s("./src/Firebase/firebase-integration.ts"),c=s("./src/common/utils.ts"),l=s("./src/components/audio-player.ts"),d=s("./src/common/event-names.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;firebaseIntegration;constructor(t){this.lang=t,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new h.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(d.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const e=c.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const s=await(0,t.getData)();this.majVersion=s.majversion,this.minVersion=s.minversion,this.dataModal=this.createDataModal(s),this.globalInitialization(s),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let s=parseInt(t);isNaN(s)||(e=Math.abs((new Date).getTime()-s))}const s=parseFloat((e?e/864e5:0).toFixed(3)),i={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:s};this.firebaseIntegration.sendSessionStartEvent(i)}logSessionEndFirebaseEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(a.IsCached);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const s=await caches.open("fontCache");if(!await s.match(e)){const t=await fetch(e),i=await t.blob();await s.put(e,new Response(i))}const i=new FontFace(t,`url(${e}) format('truetype')`);await i.load(),document.fonts.add(i)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const e=new o.Workbox("./sw.js",{});await e.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(t.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async t=>{if(!t.ok)return void console.error("Failed to fetch the content file from the server!");const e=await t.json();console.log(e);const s=e.majversion+"."+e.minversion,i=localStorage.getItem("version"+r.lang.toLowerCase());if(console.log("No Cache Content version: "+s),console.log("cached version :"+i),s&&i!=s){console.log("Content version mismatch! Reloading...");var n=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+r.lang);var o=n.filter((t=>!t.toString().includes(r.lang)));localStorage.setItem(a.IsCached,JSON.stringify(o)),localStorage.removeItem("version"+r.lang.toLowerCase()),caches.delete(r.lang),this.handleUpdateFoundMessage()}})).catch((t=>{console.error("Error fetching the content file: "+t)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new n.SceneHandler(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new n.SceneHandler(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${t.data}%`),t.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(a.IsCached,JSON.stringify(Array.from(this.is_cached.entries())));const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(t),localStorage.setItem("version"+this.lang,this.majVersion+"."+this.minVersion),this.loadingElement.style.display="none",this.handleResize(this.dataModal),console.log("hide progress")}this.progressBar.style.width=`${t.data}%`}};handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{"visible"===document.visibilityState?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"];return new Promise(((e,s)=>{const i=t.map((t=>(new l.AudioPlayer).preloadGameAudio(t)));Promise.all(i).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),s(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(d.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cUNBQ0Esa0NBQ0EsMEJBQ0EsZ0NBQ0Esb0NBRUosT0FBTyxJQUFJMXZELFNBQVEsQ0FBQ0YsRUFBU0QsS0FDekIsTUFBTTh2RCxFQUFrQkQsRUFBVXBwRCxLQUFLMlIsSUFBYSxJQUFJLEVBQUFWLGFBQWNhLGlCQUFpQkgsS0FDdkZqWSxRQUFRbVgsSUFBSXc0QyxHQUNQbG9ELE1BQUssSUFBTTNILE1BQ1hLLE9BQU9wRCxJQUNSRCxRQUFRQyxNQUFNLDBCQUEyQkEsR0FDekM4QyxFQUFPOUMsRUFBTSxHQUNmLEdBQ0osRUFHTixPQUFBdWtCLEdBQ0kxbkIsS0FBSzJrRCxRQUFRditCLG9CQUFvQixVQUFXcG1CLEtBQUtpeUQsNEJBQ2pEaHVELE9BQU9taUIsb0JBQW9CLGVBQWdCcG1CLEtBQUtreUQsb0JBQ2hEdnRELFNBQVN5aEIsb0JBQW9CLEVBQUFoTyxrQkFBbUJwWSxLQUFLNHRCLHdCQUNyRDNwQixPQUFPbWlCLG9CQUFvQixTQUFVcG1CLEtBQUtteUQsY0FDdEN0cUQsVUFBVXduRCxlQUNWeG5ELFVBQVV3bkQsY0FBY2pwQyxvQkFBb0IsVUFBV3BtQixLQUFLaXlELDJCQUdwRSxHQUVnQixFQUFBajlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvdXRpbC9kaXN0L2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL2dsb2JhbC12YXJpYWJsZXMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9GaXJlYmFzZS9iYXNlLWZpcmViYXNlLWludGVncmF0aW9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvRmlyZWJhc2UvZmlyZWJhc2UtY29uZmlnLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21tb24vZXZlbnQtbmFtZXMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21tb24vbGV2ZWwtY29uZmlnLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL3N0b25lLWNvbmZpZy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbW1vbi91dGlscy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYXVkaW8tcGxheWVyLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL2NhbmNlbC1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvY2xvc2UtYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL25leHQtYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL25vLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9wYXVzZS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvcmV0cnktYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL3llcy1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2ZlZWRiYWNrLXBhcnRpY2xlLWVmZmVjdC9mZWVkYmFjay10ZXh0LWVmZmVjdHMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2ZlZWRiYWNrLXBhcnRpY2xlLWVmZmVjdC9zdXJlLXBvcHVwLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9mZWVkYmFjay1wYXJ0aWNsZS1lZmZlY3QvdGV4dC1wYXJ0aWNsZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvbGV2ZWwtaW5kaWNhdG9yLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9tb25zdGVyLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9wYXVzZS1wb3B1cC50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvcGxheS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3Byb21wdC10ZXh0LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9zdG9uZS1oYW5kbGVyLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy90aW1lci10aWNraW5nLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy90dXRvcmlhbC50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvc2l0aW9ucy9iYWNrZ3JvdW5kL2luZGV4LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29uc3RhbnRzL2luZGV4LnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9hcGktZGF0YS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2RhdGEvZGF0YS1tb2RhbC50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2RhdGEvZ2FtZS1zY29yZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2RhdGEvaTE4LWZvbnQtbWFwcGluZy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2V2ZW50cy9FdmVudE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZUhhbmRsZXIvc2NlbmUtaGFuZGxlci50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9nYW1lcGxheS1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9sZXZlbC1zZWxlY3Rpb24tc2NlbmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZXMvbGV2ZWxlbmQtc2NlbmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZXMvbG9hZGluZy1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL3NjZW5lcy9zdGFydC1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hbmFseXRpY3MvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2luc3RhbGxhdGlvbnMvbm9kZV9tb2R1bGVzL2lkYi9idWlsZC93cmFwLWlkYi12YWx1ZS5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9sb2dnZXIvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2FwcC9kaXN0L2VzbS9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvd3JhcC1pZGItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy93b3JrYm94LXdpbmRvdy9idWlsZC93b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vZmVlZFRoZU1vbnN0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbmNvbnN0IENPTlNUQU5UUyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQ0xJRU5UOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBBZG1pbiBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9BRE1JTjogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKi9cclxuY29uc3QgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICovXHJcbmNvbnN0IGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcclxuICAgICAgICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxyXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXHJcbiAqL1xyXG5jb25zdCBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHBvcyA9IDAsIGMgPSAwO1xyXG4gICAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gKCgoYzEgJiA3KSA8PCAxOCkgfCAoKGMyICYgNjMpIDw8IDEyKSB8ICgoYzMgJiA2MykgPDwgNikgfCAoYzQgJiA2MykpIC1cclxuICAgICAgICAgICAgICAgIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodSA+PiAxMCkpO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XHJcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbmNvbnN0IGJhc2U2NCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cclxuICAgICAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyB0aGUgYXRvYiBhbmQgYnRvYSBmdW5jdGlvbnMuIFRoaXMgZXh0ZW5zaW9uXHJcbiAgICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXHJcbiAgICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcclxuICAgICAqIGJ1dCBzdGlsbCBhbGxvd2luZyB0aGUgc3RhbmRhcmQgcGVyLWJyb3dzZXIgY29tcGlsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcclxuICAgICAgICAgICAgbGV0IG91dEJ5dGU0ID0gYnl0ZTMgJiAweDNmO1xyXG4gICAgICAgICAgICBpZiAoIWhhdmVCeXRlMykge1xyXG4gICAgICAgICAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcclxuICAgICAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0Qnl0ZTMgPSA2NDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChieXRlVG9DaGFyTWFwW291dEJ5dGUxXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLCBieXRlVG9DaGFyTWFwW291dEJ5dGU0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkkMShpbnB1dCksIHdlYlNhZmUpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgY29uc3QgY2hhclRvQnl0ZU1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuY2hhclRvQnl0ZU1hcF87XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEFuIGVycm9yIGVuY291bnRlcmVkIHdoaWxlIGRlY29kaW5nIGJhc2U2NCBzdHJpbmcuXHJcbiAqL1xyXG5jbGFzcyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0RlY29kZUJhc2U2NFN0cmluZ0Vycm9yJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqL1xyXG5jb25zdCBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBjb25zdCB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheSQxKHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nICh3aXRob3V0IFwiLlwiIHBhZGRpbmcgaW4gdGhlIGVuZCkuXHJcbiAqIGUuZy4gVXNlZCBpbiBKU09OIFdlYiBUb2tlbiAoSldUKSBwYXJ0cy5cclxuICovXHJcbmNvbnN0IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVXNlIGJhc2U2NHVybCBlbmNvZGluZyBhbmQgcmVtb3ZlIHBhZGRpbmcgaW4gdGhlIGVuZCAoZG90IGNoYXJhY3RlcnMpLlxyXG4gICAgcmV0dXJuIGJhc2U2NEVuY29kZShzdHIpLnJlcGxhY2UoL1xcLi9nLCAnJyk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcclxuICpcclxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXHJcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcclxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbmNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwQ29weSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cclxuICogb2YgT2JqZWN0cyBhbmQgQXJyYXlzKS4gIFNjYWxhciB2YWx1ZXMgaW4gdGhlIHRhcmdldCBhcmUgb3Zlci13cml0dGVuLlxyXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIChhbmQgcmV0dXJuZWQpLlxyXG4gKlxyXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cclxuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXHJcbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgY29uc3QgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBzb3VyY2UpIHtcclxuICAgICAgICAvLyB1c2UgaXNWYWxpZEtleSB0byBndWFyZCBhZ2FpbnN0IHByb3RvdHlwZSBwb2xsdXRpb24uIFNlZSBodHRwczovL3NueWsuaW8vdnVsbi9TTllLLUpTLUxPREFTSC00NTAyMDJcclxuICAgICAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCAhaXNWYWxpZEtleShwcm9wKSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4ga2V5ICE9PSAnX19wcm90b19fJztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QuJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsID0gKCkgPT4gZ2V0R2xvYmFsKCkuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4vKipcclxuICogQXR0ZW1wdCB0byByZWFkIGRlZmF1bHRzIGZyb20gYSBKU09OIHN0cmluZyBwcm92aWRlZCB0b1xyXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cclxuICogcHJvY2VzcyguKWVudiguKV9fRklSRUJBU0VfREVGQVVMVFNfUEFUSF9fXHJcbiAqIFRoZSBkb3RzIGFyZSBpbiBwYXJlbnMgYmVjYXVzZSBjZXJ0YWluIGNvbXBpbGVycyAoVml0ZT8pIGNhbm5vdFxyXG4gKiBoYW5kbGUgc2VlaW5nIHRoYXQgdmFyaWFibGUgaW4gY29tbWVudHMuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82ODM4XHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHByb2Nlc3MuZW52ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGRlZmF1bHRzSnNvblN0cmluZyA9IHByb2Nlc3MuZW52Ll9fRklSRUJBU0VfREVGQVVMVFNfXztcclxuICAgIGlmIChkZWZhdWx0c0pzb25TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWZhdWx0c0pzb25TdHJpbmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21Db29raWUgPSAoKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBtYXRjaDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goL19fRklSRUJBU0VfREVGQVVMVFNfXz0oW147XSspLyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQW5ndWxhciBVbml2ZXJzYWwgU1NSIGhhdmUgYVxyXG4gICAgICAgIC8vIGBkb2N1bWVudGAgb2JqZWN0IGJ1dCBlcnJvciBvbiBhY2Nlc3NpbmcgYGRvY3VtZW50LmNvb2tpZWAuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjb2RlZCA9IG1hdGNoICYmIGJhc2U2NERlY29kZShtYXRjaFsxXSk7XHJcbiAgICByZXR1cm4gZGVjb2RlZCAmJiBKU09OLnBhcnNlKGRlY29kZWQpO1xyXG59O1xyXG4vKipcclxuICogR2V0IHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LiBJdCBjaGVja3MgaW4gb3JkZXI6XHJcbiAqICgxKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgYXMgYSBwcm9wZXJ0eSBvZiBgZ2xvYmFsVGhpc2BcclxuICogKDIpIGlmIHN1Y2ggYW4gb2JqZWN0IHdhcyBwcm92aWRlZCBvbiBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqICgzKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgaW4gYSBjb29raWVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcclxuICAgICAgICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21Db29raWUoKSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXHJcbiAgICAgICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXHJcbiAgICAgICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xyXG4gICAgICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAocHJvZHVjdE5hbWUpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbXVsYXRvckhvc3RzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbcHJvZHVjdE5hbWVdOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0bmFtZSBhbmQgcG9ydCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcclxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxyXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0ID0gKHByb2R1Y3ROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XHJcbiAgICBpZiAoIWhvc3QpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cclxuICAgIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xyXG4gICAgaWYgKGhvc3RbMF0gPT09ICdbJykge1xyXG4gICAgICAgIC8vIEJyYWNrZXQtcXVvdGVkIGBbaXB2NmFkZHJdOnBvcnRgID0+IHJldHVybiBcImlwdjZhZGRyXCIgKHdpdGhvdXQgYnJhY2tldHMpLlxyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMSwgc2VwYXJhdG9ySW5kZXggLSAxKSwgcG9ydF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xyXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtgXyR7bmFtZX1gXTsgfTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgd3JhcENhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcnJvciwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKHRva2VuLCBwcm9qZWN0SWQpIHtcclxuICAgIGlmICh0b2tlbi51aWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nKTtcclxuICAgIH1cclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxyXG4gICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgIGFsZzogJ25vbmUnLFxyXG4gICAgICAgIHR5cGU6ICdKV1QnXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcclxuICAgIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xyXG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XHJcbiAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7IFxyXG4gICAgICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xyXG4gICAgICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCwgYXVkOiBwcm9qZWN0LCBpYXQsIGV4cDogaWF0ICsgMzYwMCwgYXV0aF90aW1lOiBpYXQsIHN1YiwgdXNlcl9pZDogc3ViLCBmaXJlYmFzZToge1xyXG4gICAgICAgICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgaWRlbnRpdGllczoge31cclxuICAgICAgICB9IH0sIHRva2VuKTtcclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIF0uam9pbignLicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXHJcbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFVBKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcclxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxyXG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcclxuICAgICAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cclxuICAgICAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxyXG4gICAgICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpKTtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IE5vZGUuanMuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkIG9yIHNwZWNpZmllZC5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG5mdW5jdGlvbiBpc05vZGUoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBmb3JjZUVudmlyb25tZW50ID0gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvcmNlRW52aXJvbm1lbnQ7XHJcbiAgICBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmb3JjZUVudmlyb25tZW50ID09PSAnYnJvd3NlcicpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGY7XHJcbn1cclxuZnVuY3Rpb24gaXNCcm93c2VyRXh0ZW5zaW9uKCkge1xyXG4gICAgY29uc3QgcnVudGltZSA9IHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnXHJcbiAgICAgICAgPyBjaHJvbWUucnVudGltZVxyXG4gICAgICAgIDogdHlwZW9mIGJyb3dzZXIgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgID8gYnJvd3Nlci5ydW50aW1lXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBydW50aW1lID09PSAnb2JqZWN0JyAmJiBydW50aW1lLmlkICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnKTtcclxufVxyXG4vKiogRGV0ZWN0cyBFbGVjdHJvbiBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc0VsZWN0cm9uKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignRWxlY3Ryb24vJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBJbnRlcm5ldCBFeHBsb3Jlci4gKi9cclxuZnVuY3Rpb24gaXNJRSgpIHtcclxuICAgIGNvbnN0IHVhID0gZ2V0VUEoKTtcclxuICAgIHJldHVybiB1YS5pbmRleE9mKCdNU0lFICcpID49IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIFVuaXZlcnNhbCBXaW5kb3dzIFBsYXRmb3JtIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzVVdQKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignTVNBcHBIb3N0LycpID49IDA7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCB3aGV0aGVyIHRoZSBjdXJyZW50IFNESyBidWlsZCBpcyB0aGUgTm9kZSB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaXQncyB0aGUgTm9kZSBTREsgYnVpbGQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc05vZGVTZGsoKSB7XHJcbiAgICByZXR1cm4gQ09OU1RBTlRTLk5PREVfQ0xJRU5UID09PSB0cnVlIHx8IENPTlNUQU5UUy5OT0RFX0FETUlOID09PSB0cnVlO1xyXG59XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gU2FmYXJpLiAqL1xyXG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcclxuICAgIHJldHVybiAoIWlzTm9kZSgpICYmXHJcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnU2FmYXJpJykgJiZcclxuICAgICAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJykpO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmRleGVkREJBdmFpbGFibGUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5kZXhlZERCID09PSAnb2JqZWN0JztcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XHJcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XHJcbiAqIHByaXZhdGUgYnJvd3NpbmcpXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgcHJlRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBEQl9DSEVDS19OQU1FID0gJ3ZhbGlkYXRlLWJyb3dzZXItY29udGV4dC1mb3ItaW5kZXhlZGRiLWFuYWx5dGljcy1tb2R1bGUnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGRhdGFiYXNlIG9ubHkgd2hlbiBpdCBkb2Vzbid0IHByZS1leGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmVFeGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKChfYSA9IHJlcXVlc3QuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB8fCAnJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3Mgd2hldGhlciBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqL1xyXG5mdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTdGFuZGFyZGl6ZWQgRmlyZWJhc2UgRXJyb3IuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKlxyXG4gKiAgIC8vIFR5cGVzY3JpcHQgc3RyaW5nIGxpdGVyYWxzIGZvciB0eXBlLXNhZmUgY29kZXNcclxuICogICB0eXBlIEVyciA9XHJcbiAqICAgICAndW5rbm93bicgfFxyXG4gKiAgICAgJ29iamVjdC1ub3QtZm91bmQnXHJcbiAqICAgICA7XHJcbiAqXHJcbiAqICAgLy8gQ2xvc3VyZSBlbnVtIGZvciB0eXBlLXNhZmUgZXJyb3IgY29kZXNcclxuICogICAvLyBhdC1lbnVtIHtzdHJpbmd9XHJcbiAqICAgdmFyIEVyciA9IHtcclxuICogICAgIFVOS05PV046ICd1bmtub3duJyxcclxuICogICAgIE9CSkVDVF9OT1RfRk9VTkQ6ICdvYmplY3Qtbm90LWZvdW5kJyxcclxuICogICB9XHJcbiAqXHJcbiAqICAgbGV0IGVycm9yczogTWFwPEVyciwgc3RyaW5nPiA9IHtcclxuICogICAgICdnZW5lcmljLWVycm9yJzogXCJVbmtub3duIGVycm9yXCIsXHJcbiAqICAgICAnZmlsZS1ub3QtZm91bmQnOiBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IHskZmlsZX1cIixcclxuICogICB9O1xyXG4gKlxyXG4gKiAgIC8vIFR5cGUtc2FmZSBmdW5jdGlvbiAtIG11c3QgcGFzcyBhIHZhbGlkIGVycm9yIGNvZGUgYXMgcGFyYW0uXHJcbiAqICAgbGV0IGVycm9yID0gbmV3IEVycm9yRmFjdG9yeTxFcnI+KCdzZXJ2aWNlJywgJ1NlcnZpY2UnLCBlcnJvcnMpO1xyXG4gKlxyXG4gKiAgIC4uLlxyXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuR0VORVJJQyk7XHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5GSUxFX05PVF9GT1VORCwgeydmaWxlJzogZmlsZU5hbWV9KTtcclxuICogICAuLi5cclxuICogICAvLyBTZXJ2aWNlOiBDb3VsZCBub3QgZmlsZSBmaWxlOiBmb28udHh0IChzZXJ2aWNlL2ZpbGUtbm90LWZvdW5kKS5cclxuICpcclxuICogICBjYXRjaCAoZSkge1xyXG4gKiAgICAgYXNzZXJ0KGUubWVzc2FnZSA9PT0gXCJDb3VsZCBub3QgZmluZCBmaWxlOiBmb28udHh0LlwiKTtcclxuICogICAgIGlmICgoZSBhcyBGaXJlYmFzZUVycm9yKT8uY29kZSA9PT0gJ3NlcnZpY2UvZmlsZS1ub3QtZm91bmQnKSB7XHJcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IHJlYWQgZmlsZTogXCIgKyBlWydmaWxlJ10pO1xyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICovXHJcbmNvbnN0IEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbi8vIEJhc2VkIG9uIGNvZGUgZnJvbTpcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXHJcbmNsYXNzIEZpcmViYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKiBUaGUgZXJyb3IgY29kZSBmb3IgdGhpcyBlcnJvci4gKi9cclxuICAgIGNvZGUsIG1lc3NhZ2UsIFxyXG4gICAgLyoqIEN1c3RvbSBkYXRhIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcclxuICAgICAgICAvKiogVGhlIGN1c3RvbSBuYW1lIGZvciBhbGwgRmlyZWJhc2VFcnJvcnMuICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gRVJST1JfTkFNRTtcclxuICAgICAgICAvLyBGaXggRm9yIEVTNVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZpcmViYXNlRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICAvLyBNYWludGFpbnMgcHJvcGVyIHN0YWNrIHRyYWNlIGZvciB3aGVyZSBvdXIgZXJyb3Igd2FzIHRocm93bi5cclxuICAgICAgICAvLyBPbmx5IGF2YWlsYWJsZSBvbiBWOC5cclxuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcclxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jbGFzcyBFcnJvckZhY3Rvcnkge1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZSwgc2VydmljZU5hbWUsIGVycm9ycykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlTmFtZSA9IHNlcnZpY2VOYW1lO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKGNvZGUsIC4uLmRhdGEpIHtcclxuICAgICAgICBjb25zdCBjdXN0b21EYXRhID0gZGF0YVswXSB8fCB7fTtcclxuICAgICAgICBjb25zdCBmdWxsQ29kZSA9IGAke3RoaXMuc2VydmljZX0vJHtjb2RlfWA7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLmVycm9yc1tjb2RlXTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcclxuICAgICAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXHJcbiAgICAgICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBgJHt0aGlzLnNlcnZpY2VOYW1lfTogJHttZXNzYWdlfSAoJHtmdWxsQ29kZX0pLmA7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgZnVsbE1lc3NhZ2UsIGN1c3RvbURhdGEpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIChfLCBrZXkpID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFba2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBgPCR7a2V5fT8+YDtcclxuICAgIH0pO1xyXG59XHJcbmNvbnN0IFBBVFRFUk4gPSAvXFx7XFwkKFtefV0rKX0vZztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEV2YWx1YXRlcyBhIEpTT04gc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHN0cmluZyBjb250YWluaW5nIEpTT04uXHJcbiAqIEByZXR1cm4geyp9IFRoZSBqYXZhc2NyaXB0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBKU09OLlxyXG4gKi9cclxuZnVuY3Rpb24ganNvbkV2YWwoc3RyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50aW5nIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YSBKYXZhc2NyaXB0IG9iamVjdCB0byBiZSBzdHJpbmdpZmllZC5cclxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgSlNPTiBjb250ZW50cyBvZiB0aGUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5KGRhdGEpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGludG8gY29uc3RpdHVlbnQgcGFydHMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gd2l0aCBpbnZhbGlkIC8gaW5jb21wbGV0ZSBjbGFpbXMgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGxldCBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcclxuICAgICAgICBoZWFkZXIgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMF0pIHx8ICcnKTtcclxuICAgICAgICBjbGFpbXMgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMV0pIHx8ICcnKTtcclxuICAgICAgICBzaWduYXR1cmUgPSBwYXJ0c1syXTtcclxuICAgICAgICBkYXRhID0gY2xhaW1zWydkJ10gfHwge307XHJcbiAgICAgICAgZGVsZXRlIGNsYWltc1snZCddO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAgc2lnbmF0dXJlXHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyB0aW1lLWJhc2VkIGNsYWltcy4gV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGVcclxuICogdG9rZW4gaXMgd2l0aGluIHRoZSB0aW1lIHdpbmRvdyBhdXRob3JpemVkIGJ5IHRoZSAnbmJmJyAobm90LWJlZm9yZSkgYW5kICdpYXQnIChpc3N1ZWQtYXQpIGNsYWltcy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZFRpbWVzdGFtcCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XHJcbiAgICBsZXQgdmFsaWRTaW5jZSA9IDAsIHZhbGlkVW50aWwgPSAwO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCEhbm93ICYmXHJcbiAgICAgICAgISF2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgISF2YWxpZFVudGlsICYmXHJcbiAgICAgICAgbm93ID49IHZhbGlkU2luY2UgJiZcclxuICAgICAgICBub3cgPD0gdmFsaWRVbnRpbCk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIHJldHVybnMgaXRzIGlzc3VlZCBhdCB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBudWxsIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNzdWVkQXRUaW1lID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUodG9rZW4pLCBjbGFpbXMgPSBkZWNvZGVkLmNsYWltcztcclxuICAgIHJldHVybiAhIWNsYWltcyAmJiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpO1xyXG59O1xyXG4vKipcclxuICogQXR0ZW1wdHMgdG8gcGVlciBpbnRvIGFuIGF1dGggdG9rZW4gYW5kIGRldGVybWluZSBpZiBpdCdzIGFuIGFkbWluIGF1dGggdG9rZW4gYnkgbG9va2luZyBhdCB0aGUgY2xhaW1zIHBvcnRpb24uXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltc1snYWRtaW4nXSA9PT0gdHJ1ZTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gY29udGFpbnMob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNhZmVHZXQob2JqLCBrZXkpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIG1hcChvYmosIGZuLCBjb250ZXh0T2JqKSB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gZm4uY2FsbChjb250ZXh0T2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyoqXHJcbiAqIERlZXAgZXF1YWwgdHdvIG9iamVjdHMuIFN1cHBvcnQgQXJyYXlzIGFuZCBPYmplY3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcclxuICAgIGZvciAoY29uc3QgayBvZiBhS2V5cykge1xyXG4gICAgICAgIGlmICghYktleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhUHJvcCA9IGFba107XHJcbiAgICAgICAgY29uc3QgYlByb3AgPSBiW2tdO1xyXG4gICAgICAgIGlmIChpc09iamVjdChhUHJvcCkgJiYgaXNPYmplY3QoYlByb3ApKSB7XHJcbiAgICAgICAgICAgIGlmICghZGVlcEVxdWFsKGFQcm9wLCBiUHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhUHJvcCAhPT0gYlByb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgayBvZiBiS2V5cykge1xyXG4gICAgICAgIGlmICghYUtleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVqZWN0cyBpZiB0aGUgZ2l2ZW4gcHJvbWlzZSBkb2Vzbid0IHJlc29sdmUgaW4gdGltZUluTVMgbWlsbGlzZWNvbmRzLlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIHByb21pc2VXaXRoVGltZW91dChwcm9taXNlLCB0aW1lSW5NUyA9IDIwMDApIHtcclxuICAgIGNvbnN0IGRlZmVycmVkUHJvbWlzZSA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBkZWZlcnJlZFByb21pc2UucmVqZWN0KCd0aW1lb3V0IScpLCB0aW1lSW5NUyk7XHJcbiAgICBwcm9taXNlLnRoZW4oZGVmZXJyZWRQcm9taXNlLnJlc29sdmUsIGRlZmVycmVkUHJvbWlzZS5yZWplY3QpO1xyXG4gICAgcmV0dXJuIGRlZmVycmVkUHJvbWlzZS5wcm9taXNlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxyXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zKSB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5c3RyaW5nUGFyYW1zKSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGFycmF5VmFsID0+IHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcclxufVxyXG4vKipcclxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3RcclxuICogKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqL1xyXG5mdW5jdGlvbiBxdWVyeXN0cmluZ0RlY29kZShxdWVyeXN0cmluZykge1xyXG4gICAgY29uc3Qgb2JqID0ge307XHJcbiAgICBjb25zdCB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XHJcbiAgICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHRva2VuLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIG9ialtkZWNvZGVVUklDb21wb25lbnQoa2V5KV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG4vKipcclxuICogRXh0cmFjdCB0aGUgcXVlcnkgc3RyaW5nIHBhcnQgb2YgYSBVUkwsIGluY2x1ZGluZyB0aGUgbGVhZGluZyBxdWVzdGlvbiBtYXJrIChpZiBwcmVzZW50KS5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RRdWVyeXN0cmluZyh1cmwpIHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RhcnQgPSB1cmwuaW5kZXhPZignPycpO1xyXG4gICAgaWYgKCFxdWVyeVN0YXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhZ21lbnRTdGFydCA9IHVybC5pbmRleE9mKCcjJywgcXVlcnlTdGFydCk7XHJcbiAgICByZXR1cm4gdXJsLnN1YnN0cmluZyhxdWVyeVN0YXJ0LCBmcmFnbWVudFN0YXJ0ID4gMCA/IGZyYWdtZW50U3RhcnQgOiB1bmRlZmluZWQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cclxuICogVmFyaWFibGUgbmFtZXMgZm9sbG93IHRoZSBub3RhdGlvbiBpbiBGSVBTIFBVQiAxODAtMzpcclxuICogaHR0cDovL2NzcmMubmlzdC5nb3YvcHVibGljYXRpb25zL2ZpcHMvZmlwczE4MC0zL2ZpcHMxODAtM19maW5hbC5wZGYuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiAgIHZhciBzaGExID0gbmV3IHNoYTEoKTtcclxuICogICBzaGExLnVwZGF0ZShieXRlcyk7XHJcbiAqICAgdmFyIGhhc2ggPSBzaGExLmRpZ2VzdCgpO1xyXG4gKlxyXG4gKiBQZXJmb3JtYW5jZTpcclxuICogICBDaHJvbWUgMjM6ICAgfjQwMCBNYml0L3NcclxuICogICBGaXJlZm94IDE2OiAgfjI1MCBNYml0L3NcclxuICpcclxuICovXHJcbi8qKlxyXG4gKiBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2ggY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBwcm9wZXJ0aWVzIGRlY2xhcmVkIGhlcmUgYXJlIGRpc2N1c3NlZCBpbiB0aGUgYWJvdmUgYWxnb3JpdGhtIGRvY3VtZW50LlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbmNsYXNzIFNoYTEge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgdGhlIHByZXZpb3VzIHZhbHVlcyBvZiBhY2N1bXVsYXRlZCB2YXJpYWJsZXMgYS1lIGluIHRoZSBjb21wcmVzc19cclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLldfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICB0aGlzLnBhZF9bMF0gPSAxMjg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIGJ1ZiBCbG9jayB0byBjb21wcmVzcy5cclxuICAgICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29tcHJlc3NfKGJ1Ziwgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgVyA9IHRoaXMuV187XHJcbiAgICAgICAgLy8gZ2V0IDE2IGJpZyBlbmRpYW4gd29yZHNcclxuICAgICAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHVzZXIpOiBbYnVnIDgxNDAxMjJdIFJlY2VudCB2ZXJzaW9ucyBvZiBTYWZhcmkgZm9yIE1hYyBPUyBhbmQgaU9TXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gIFdlIGhhdmUgY29kZSB0aGF0IGRlcGVuZHMgaGVhdmlseSBvbiBTSEEtMSBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3RuZXNzIGFuZCB3aGljaCBpcyBhZmZlY3RlZCBieSB0aGlzIGJ1Zywgc28gSSd2ZSByZW1vdmVkIGFsbCB1c2VzXHJcbiAgICAgICAgICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNoYW5nZSBvbmNlIHRoZSBTYWZhcmkgYnVnXHJcbiAgICAgICAgICAgICAgICAvLyAoaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEwOTAzNikgaGFzIGJlZW4gZml4ZWQgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0KSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMyk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldF0gPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvZmZzZXQgKyAxXSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmW29mZnNldCArIDNdO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXhwYW5kIHRvIDgwIHdvcmRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICBsZXQgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIGxldCBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgbGV0IGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICBsZXQgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIGxldCBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBlID0gZDtcclxuICAgICAgICAgICAgZCA9IGM7XHJcbiAgICAgICAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMV0gPSAodGhpcy5jaGFpbl9bMV0gKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAodGhpcy5jaGFpbl9bMl0gKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bNF0gPSAodGhpcy5jaGFpbl9bNF0gKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoYnl0ZXMsIGxlbmd0aCkge1xyXG4gICAgICAgIC8vIFRPRE8oam9obmxlbnopOiB0aWdodGVuIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kIHJlbW92ZSB0aGlzIGNoZWNrXHJcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZW5ndGhNaW51c0Jsb2NrID0gbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMuYnVmXztcclxuICAgICAgICBsZXQgaW5idWYgPSB0aGlzLmluYnVmXztcclxuICAgICAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxyXG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8PSBsZW5ndGhNaW51c0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnl0ZXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5idWZfID0gaW5idWY7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgZGlnZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IFtdO1xyXG4gICAgICAgIGxldCB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsXyAqIDg7XHJcbiAgICAgICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxyXG4gICAgICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgNTYgLSB0aGlzLmluYnVmXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkICMgYml0cy5cclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xyXG4gICAgICAgICAgICB0b3RhbEJpdHMgLz0gMjU2OyAvLyBEb24ndCB1c2UgYml0LXNoaWZ0aW5nIGhlcmUhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcclxuICAgICAgICAgICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcclxuICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlnZXN0O1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXHJcbiAqIFRoZW5hYmxlKS5cclxuICpcclxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAqICAgICBhcyBhIHByb3h5LlxyXG4gKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdWJzY3JpYmUoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpO1xyXG4gICAgcmV0dXJuIHByb3h5LnN1YnNjcmliZS5iaW5kKHByb3h5KTtcclxufVxyXG4vKipcclxuICogSW1wbGVtZW50IGZhbi1vdXQgZm9yIGFueSBudW1iZXIgb2YgT2JzZXJ2ZXJzIGF0dGFjaGVkIHZpYSBhIHN1YnNjcmliZVxyXG4gKiBmdW5jdGlvbi5cclxuICovXHJcbmNsYXNzIE9ic2VydmVyUHJveHkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICAgICAqICAgICBhcyBhIHByb3h5LlxyXG4gICAgICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBleGVjdXRvcih0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBuZXh0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXJyb3IoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBhZGQgYW4gT2JzZXJ2ZXIgdG8gdGhlIGZhbi1vdXQgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcclxuICAgICAqICAgY2FsbCB0byBzdWJzY3JpYmUoKS5cclxuICAgICAqL1xyXG4gICAgc3Vic2NyaWJlKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICBsZXQgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFtcclxuICAgICAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICAgICAnZXJyb3InLFxyXG4gICAgICAgICAgICAnY29tcGxldGUnXHJcbiAgICAgICAgXSkpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5uZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcclxuICAgICAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXHJcbiAgICAgICAgLy8gZXZlbnQuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5hbEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKHRoaXMuZmluYWxFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIHVuc3ViO1xyXG4gICAgfVxyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICB1bnN1YnNjcmliZU9uZShpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3JFYWNoT2JzZXJ2ZXIoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBjbG9zZWQgYnkgcHJldmlvdXMgZXZlbnQuLi4uanVzdCBlYXQgdGhlIGFkZGl0aW9uYWwgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpbmNlIHNlbmRPbmUgY2FsbHMgYXN5bmNocm9ub3VzbHkgLSB0aGVyZSBpcyBubyBjaGFuY2UgdGhhdFxyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2ZXJzIHdpbGwgYmVjb21lIHVuZGVmaW5lZC5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2FsbCB0aGUgT2JzZXJ2ZXIgdmlhIG9uZSBvZiBpdCdzIGNhbGxiYWNrIGZ1bmN0aW9uLiBXZSBhcmUgY2FyZWZ1bCB0b1xyXG4gICAgLy8gY29uZmlybSB0aGF0IHRoZSBvYnNlcnZlIGhhcyBub3QgYmVlbiB1bnN1YnNjcmliZWQgc2luY2UgdGhpcyBhc3luY2hyb25vdXNcclxuICAgIC8vIGZ1bmN0aW9uIGhhZCBiZWVuIHF1ZXVlZC5cclxuICAgIHNlbmRPbmUoaSwgZm4pIHtcclxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFjayBhc3luY2hyb25vdXNseVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4odGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ic2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZShlcnIpIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmZ1bmN0aW9uIGFzeW5jKGZuLCBvbkVycm9yKSB7XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUodHJ1ZSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBmbiguLi5hcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XHJcbiAgICAgICAgaWYgKG1ldGhvZCBpbiBvYmogJiYgdHlwZW9mIG9ialttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBub29wKCkge1xyXG4gICAgLy8gZG8gbm90aGluZ1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cclxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBtaW5Db3VudCBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGVBcmdDb3VudCA9IGZ1bmN0aW9uIChmbk5hbWUsIG1pbkNvdW50LCBtYXhDb3VudCwgYXJnQ291bnQpIHtcclxuICAgIGxldCBhcmdFcnJvcjtcclxuICAgIGlmIChhcmdDb3VudCA8IG1pbkNvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSAnYXQgbGVhc3QgJyArIG1pbkNvdW50O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYXJnQ291bnQgPiBtYXhDb3VudCkge1xyXG4gICAgICAgIGFyZ0Vycm9yID0gbWF4Q291bnQgPT09IDAgPyAnbm9uZScgOiAnbm8gbW9yZSB0aGFuICcgKyBtYXhDb3VudDtcclxuICAgIH1cclxuICAgIGlmIChhcmdFcnJvcikge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBhcmdOYW1lIFRoZSBuYW1lIG9mIHRoZSBhcmd1bWVudFxyXG4gKiBAcmV0dXJuIFRoZSBwcmVmaXggdG8gYWRkIHRvIHRoZSBlcnJvciB0aHJvd24gZm9yIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBlcnJvclByZWZpeChmbk5hbWUsIGFyZ05hbWUpIHtcclxuICAgIHJldHVybiBgJHtmbk5hbWV9IGZhaWxlZDogJHthcmdOYW1lfSBhcmd1bWVudCBgO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0gZm5OYW1lXHJcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlclxyXG4gKiBAcGFyYW0gbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBvcHRpb25hbFxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UoZm5OYW1lLCBuYW1lc3BhY2UsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsICduYW1lc3BhY2UnKSArICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCBhcmd1bWVudE5hbWUsIFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5jYWxsYmFjaywgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgYXJndW1lbnROYW1lLCBjb250ZXh0LCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JyB8fCBjb250ZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgY29udGV4dCBvYmplY3QuJyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XHJcbi8vIGF1dG9tYXRpY2FsbHkgcmVwbGFjZWQgJ1xcclxcbicgd2l0aCAnXFxuJywgYW5kIHRoZXkgZGlkbid0IGhhbmRsZSBzdXJyb2dhdGUgcGFpcnMsXHJcbi8vIHNvIGl0J3MgYmVlbiBtb2RpZmllZC5cclxuLy8gTm90ZSB0aGF0IG5vdCBhbGwgVW5pY29kZSBjaGFyYWN0ZXJzIGFwcGVhciBhcyBzaW5nbGUgY2hhcmFjdGVycyBpbiBKYXZhU2NyaXB0IHN0cmluZ3MuXHJcbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xyXG4vLyB1c2UgMiBjaGFyYWN0ZXJzIGluIEphdmFzY3JpcHQuICBBbGwgNC1ieXRlIFVURi04IGNoYXJhY3RlcnMgYmVnaW4gd2l0aCBhIGZpcnN0XHJcbi8vIGNoYXJhY3RlciBpbiB0aGUgcmFuZ2UgMHhEODAwIC0gMHhEQkZGICh0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc28tY2FsbGVkIHN1cnJvZ2F0ZVxyXG4vLyBwYWlyKS5cclxuLy8gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xLjNcclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XHJcbiAgICAgICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICBjb25zdCBsb3cgPSBzdHIuY2hhckNvZGVBdChpKSAtIDB4ZGMwMDsgLy8gdGhlIGxvdyAxMCBiaXRzLlxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArIChoaWdoIDw8IDEwKSArIGxvdztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgNjU1MzYpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBsZW5ndGggd2l0aG91dCBhY3R1YWxseSBjb252ZXJ0aW5nOyB1c2VmdWwgZm9yIGRvaW5nIGNoZWFwZXIgdmFsaWRhdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdMZW5ndGggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29waWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcclxuICogR2VuZXJhdGVzIGEgbmV3IHV1aWQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IHV1aWR2NCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGMgPT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gZXhwb25lbnRpYWxseSBpbmNyZWFzZS5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfSU5URVJWQUxfTUlMTElTID0gMTAwMDtcclxuLyoqXHJcbiAqIFRoZSBmYWN0b3IgdG8gYmFja29mZiBieS5cclxuICogU2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUiA9IDI7XHJcbi8qKlxyXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcclxuICovXHJcbmNvbnN0IE1BWF9WQUxVRV9NSUxMSVMgPSA0ICogNjAgKiA2MCAqIDEwMDA7IC8vIEZvdXIgaG91cnMsIGxpa2UgaU9TIGFuZCBBbmRyb2lkLlxyXG4vKipcclxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cclxuICogU2VlXHJcbiAqIGh0dHA6Ly9nby9zYWZlLWNsaWVudC1iZWhhdmlvciNzdGVwLTEtZGV0ZXJtaW5lLXRoZS1hcHByb3ByaWF0ZS1yZXRyeS1pbnRlcnZhbC10by1oYW5kbGUtc3Bpa2UtdHJhZmZpY1xyXG4gKiBmb3IgY29udGV4dC5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgUkFORE9NX0ZBQ1RPUiA9IDAuNTtcclxuLyoqXHJcbiAqIEJhc2VkIG9uIHRoZSBiYWNrb2ZmIG1ldGhvZCBmcm9tXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL2Nsb3N1cmUvZ29vZy9tYXRoL2V4cG9uZW50aWFsYmFja29mZi5qcy5cclxuICogRXh0cmFjdGVkIGhlcmUgc28gd2UgZG9uJ3QgbmVlZCB0byBwYXNzIG1ldGFkYXRhIGFuZCBhIHN0YXRlZnVsIEV4cG9uZW50aWFsQmFja29mZiBvYmplY3QgYXJvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIGludGVydmFsTWlsbGlzID0gREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMsIGJhY2tvZmZGYWN0b3IgPSBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SKSB7XHJcbiAgICAvLyBDYWxjdWxhdGVzIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyB2YWx1ZS5cclxuICAgIC8vIERldmlhdGlvbjogY2FsY3VsYXRlcyB2YWx1ZSBmcm9tIGNvdW50IGFuZCBhIGNvbnN0YW50IGludGVydmFsLCBzbyB3ZSBvbmx5IG5lZWQgdG8gc2F2ZSB2YWx1ZVxyXG4gICAgLy8gYW5kIGNvdW50IHRvIHJlc3RvcmUgc3RhdGUuXHJcbiAgICBjb25zdCBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xyXG4gICAgLy8gQSByYW5kb20gXCJmdXp6XCIgdG8gYXZvaWQgd2F2ZXMgb2YgcmV0cmllcy5cclxuICAgIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxyXG4gICAgY29uc3QgcmFuZG9tV2FpdCA9IE1hdGgucm91bmQoXHJcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cclxuICAgIC8vIERldmlhdGlvbjogY2hhbmdlcyBtdWx0aXBsaWNhdGlvbiBvcmRlciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxyXG4gICAgUkFORE9NX0ZBQ1RPUiAqXHJcbiAgICAgICAgY3VyckJhc2VWYWx1ZSAqXHJcbiAgICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXHJcbiAgICAgICAgLy8gaWYgd2UgYWRkIG9yIHN1YnRyYWN0LlxyXG4gICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqXHJcbiAgICAgICAgMik7XHJcbiAgICAvLyBMaW1pdHMgYmFja29mZiB0byBtYXggdG8gYXZvaWQgZWZmZWN0aXZlbHkgcGVybWFuZW50IGJhY2tvZmYuXHJcbiAgICByZXR1cm4gTWF0aC5taW4oTUFYX1ZBTFVFX01JTExJUywgY3VyckJhc2VWYWx1ZSArIHJhbmRvbVdhaXQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlIEVuZ2xpc2ggb3JkaW5hbCBsZXR0ZXJzIGFmdGVyIGEgbnVtYmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBvcmRpbmFsKGkpIHtcclxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2l9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBpICsgaW5kaWNhdG9yKGkpO1xyXG59XHJcbmZ1bmN0aW9uIGluZGljYXRvcihpKSB7XHJcbiAgICBpID0gTWF0aC5hYnMoaSk7XHJcbiAgICBjb25zdCBjZW50ID0gaSAlIDEwMDtcclxuICAgIGlmIChjZW50ID49IDEwICYmIGNlbnQgPD0gMjApIHtcclxuICAgICAgICByZXR1cm4gJ3RoJztcclxuICAgIH1cclxuICAgIGNvbnN0IGRlYyA9IGkgJSAxMDtcclxuICAgIGlmIChkZWMgPT09IDEpIHtcclxuICAgICAgICByZXR1cm4gJ3N0JztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDIpIHtcclxuICAgICAgICByZXR1cm4gJ25kJztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDMpIHtcclxuICAgICAgICByZXR1cm4gJ3JkJztcclxuICAgIH1cclxuICAgIHJldHVybiAndGgnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldE1vZHVsYXJJbnN0YW5jZShzZXJ2aWNlKSB7XHJcbiAgICBpZiAoc2VydmljZSAmJiBzZXJ2aWNlLl9kZWxlZ2F0ZSkge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlLl9kZWxlZ2F0ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENPTlNUQU5UUywgRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IsIERlZmVycmVkLCBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IsIE1BWF9WQUxVRV9NSUxMSVMsIFJBTkRPTV9GQUNUT1IsIFNoYTEsIGFyZUNvb2tpZXNFbmFibGVkLCBhc3NlcnQsIGFzc2VydGlvbkVycm9yLCBhc3luYywgYmFzZTY0LCBiYXNlNjREZWNvZGUsIGJhc2U2NEVuY29kZSwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMsIGNvbnRhaW5zLCBjcmVhdGVNb2NrVXNlclRva2VuLCBjcmVhdGVTdWJzY3JpYmUsIGRlY29kZSwgZGVlcENvcHksIGRlZXBFcXVhbCwgZGVlcEV4dGVuZCwgZXJyb3JQcmVmaXgsIGV4dHJhY3RRdWVyeXN0cmluZywgZ2V0RGVmYXVsdEFwcENvbmZpZywgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCwgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0LCBnZXREZWZhdWx0cywgZ2V0RXhwZXJpbWVudGFsU2V0dGluZywgZ2V0R2xvYmFsLCBnZXRNb2R1bGFySW5zdGFuY2UsIGdldFVBLCBpc0FkbWluLCBpc0Jyb3dzZXIsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNFbGVjdHJvbiwgaXNFbXB0eSwgaXNJRSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzTW9iaWxlQ29yZG92YSwgaXNOb2RlLCBpc05vZGVTZGssIGlzUmVhY3ROYXRpdmUsIGlzU2FmYXJpLCBpc1VXUCwgaXNWYWxpZEZvcm1hdCwgaXNWYWxpZFRpbWVzdGFtcCwgaXNzdWVkQXRUaW1lLCBqc29uRXZhbCwgbWFwLCBvcmRpbmFsLCBwcm9taXNlV2l0aFRpbWVvdXQsIHF1ZXJ5c3RyaW5nLCBxdWVyeXN0cmluZ0RlY29kZSwgc2FmZUdldCwgc3RyaW5nTGVuZ3RoLCBzdHJpbmdUb0J5dGVBcnJheSwgc3RyaW5naWZ5LCB1dWlkdjQsIHZhbGlkYXRlQXJnQ291bnQsIHZhbGlkYXRlQ2FsbGJhY2ssIHZhbGlkYXRlQ29udGV4dE9iamVjdCwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgdmFsaWRhdGVOYW1lc3BhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJjb25zdCB1cmxQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gpO1xyXG5pbXBvcnQgeyBEZXZlbG9wbWVudFNlcnZlciB9IGZyb20gXCIuL3NyYy9jb25zdGFudHMvXCI7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSBcIi4vc3JjL2NvbW1vbi91dGlsc1wiO1xyXG5leHBvcnQgdmFyIHBzZXVkb0lkID0gdXJsUGFyYW1zLmdldChcImNyX3VzZXJfaWRcIik7XHJcbmV4cG9ydCB2YXIgbGFuZyA9IHVybFBhcmFtcy5nZXQoXCJjcl9sYW5nXCIpID09IG51bGwgPyBcImVuZ2xpc2hcIiA6IHVybFBhcmFtcy5nZXQoXCJjcl9sYW5nXCIpO1xyXG5leHBvcnQgY29uc3QgZm9udCA9IFV0aWxzLmdldExhbmd1YWdlU3BlY2lmaWNGb250KGxhbmcpO1xyXG5leHBvcnQgY29uc3QgRGVidWdnZXIgPSB7XHJcbiAgICBEZXZlbG9wbWVudExpbms6IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluY2x1ZGVzKERldmVsb3BtZW50U2VydmVyKVxyXG4gICAgICAgID8gdHJ1ZVxyXG4gICAgICAgIDogZmFsc2UsXHJcbiAgICBEZWJ1Z01vZGU6IGZhbHNlLFxyXG59O1xyXG53aW5kb3cuZmVlZGJhY2tUZXh0V29ya2VyUGF0aCA9ICcuL3dvcmtlcnMvZmVlZGJhY2stdGV4dC13b3JrZXIuanMnO1xyXG4iLCJpbXBvcnQgeyBpbml0aWFsaXplQXBwIH0gZnJvbSBcImZpcmViYXNlL2FwcFwiO1xyXG5pbXBvcnQgeyBnZXRBbmFseXRpY3MsIGxvZ0V2ZW50IH0gZnJvbSBcImZpcmViYXNlL2FuYWx5dGljc1wiO1xyXG5pbXBvcnQgeyBmaXJlYmFzZUNvbmZpZyB9IGZyb20gXCIuL2ZpcmViYXNlLWNvbmZpZ1wiO1xyXG5leHBvcnQgY2xhc3MgQmFzZUZpcmViYXNlSW50ZWdyYXRpb24ge1xyXG4gICAgZmlyZWJhc2VBcHA7XHJcbiAgICBhbmFseXRpY3M7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVGaXJlYmFzZSgpO1xyXG4gICAgfVxyXG4gICAgY3VzdG9tRXZlbnRzKGV2ZW50TmFtZSwgZXZlbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKGBTZW5kaW5nIGN1c3RvbSBldmVudCAke2V2ZW50TmFtZX0gd2l0aCBkYXRhOmAsIGV2ZW50KTtcclxuICAgICAgICAgICAgbG9nRXZlbnQodGhpcy5hbmFseXRpY3MsIGV2ZW50TmFtZSwgZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIGxvZ2dpbmcgY3VzdG9tIGV2ZW50OlwiLCBlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2Vzc2lvbkVuZCgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLm9uTGluZSAmJiB0aGlzLmFuYWx5dGljcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dFdmVudCh0aGlzLmFuYWx5dGljcywgXCJzZXNzaW9uX2VuZFwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHdoaWxlIGxvZ2dpbmcgc2Vzc2lvbl9lbmQgZXZlbnQ6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplRmlyZWJhc2UoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5maXJlYmFzZUFwcCA9IGluaXRpYWxpemVBcHAoZmlyZWJhc2VDb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLmFuYWx5dGljcyA9IGdldEFuYWx5dGljcyh0aGlzLmZpcmViYXNlQXBwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciB3aGlsZSBpbml0aWFsaXppbmcgRmlyZWJhc2U6XCIsIGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xyXG4gICAgYXBpS2V5OiBcIkFJemFTeUI4YzJsQlZpMjZ1N1lSTDlzeE9QOTdVYXEzeU44aFRsNFwiLFxyXG4gICAgYXV0aERvbWFpbjogXCJmdG0tYjlkOTkuZmlyZWJhc2VhcHAuY29tXCIsXHJcbiAgICBkYXRhYmFzZVVSTDogXCJodHRwczovL2Z0bS1iOWQ5OS5maXJlYmFzZWlvLmNvbVwiLFxyXG4gICAgcHJvamVjdElkOiBcImZ0bS1iOWQ5OVwiLFxyXG4gICAgc3RvcmFnZUJ1Y2tldDogXCJmdG0tYjlkOTkuYXBwc3BvdC5jb21cIixcclxuICAgIG1lc3NhZ2luZ1NlbmRlcklkOiBcIjYwMjQwMjM4Nzk0MVwiLFxyXG4gICAgYXBwSWQ6IFwiMTo2MDI0MDIzODc5NDE6d2ViOmE2M2Y0ZWFkZGM5NDlmNTM5ZGUxMGNcIixcclxuICAgIG1lYXN1cmVtZW50SWQ6IFwiRy1GVkxTTjdEN05NXCIsXHJcbn07XHJcbiIsImltcG9ydCB7IEJhc2VGaXJlYmFzZUludGVncmF0aW9uIH0gZnJvbSBcIi4vYmFzZS1maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5leHBvcnQgY2xhc3MgRmlyZWJhc2VJbnRlZ3JhdGlvbiBleHRlbmRzIEJhc2VGaXJlYmFzZUludGVncmF0aW9uIHtcclxuICAgIHN0YXRpYyBpbnN0YW5jZTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgaWYgKCFGaXJlYmFzZUludGVncmF0aW9uLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIEZpcmViYXNlSW50ZWdyYXRpb24uaW5zdGFuY2UgPSBuZXcgRmlyZWJhc2VJbnRlZ3JhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gRmlyZWJhc2VJbnRlZ3JhdGlvbi5pbnN0YW5jZTtcclxuICAgIH1cclxuICAgIHNlbmRTZXNzaW9uU3RhcnRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJzZXNzaW9uX3N0YXJ0XCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZFNlc3Npb25FbmRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJzZXNzaW9uX2VuZFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRTZWxlY3RlZExldmVsRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwic2VsZWN0ZWRfbGV2ZWxcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kVGFwcGVkU3RhcnRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJ0YXBwZWRfc3RhcnRcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kUHV6emxlQ29tcGxldGVkRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwicHV6emxlX2NvbXBsZXRlZFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRMZXZlbENvbXBsZXRlZEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcImxldmVsX2NvbXBsZXRlZFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50KCkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKCd1c2VyX2NsaWNrZWQnLCB7IGNsaWNrOiAnQ2xpY2snIH0pO1xyXG4gICAgfVxyXG4gICAgc2VuZERvd25sb2FkQ29tcGxldGVkRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKCdkb3dubG9hZF9jb21wbGV0ZWQnLCBkYXRhKTtcclxuICAgIH1cclxufVxyXG4iLCIvLyBjdXN0b20gRXZlbnRzXHJcbmV4cG9ydCBjb25zdCBMT0FEUFVaWkxFID0gXCJsb2FkcHV6emxlXCI7XHJcbmV4cG9ydCBjb25zdCBTVE9ORURST1AgPSBcInN0b25lc2Ryb3BwZWRcIjtcclxuLy8gZGVmYXVsdCBFdmVudHNcclxuZXhwb3J0IGNvbnN0IE1PVVNFTU9WRSA9IFwibW91c2Vtb3ZlXCI7XHJcbmV4cG9ydCBjb25zdCBNT1VTRURPV04gPSBcIm1vdXNlZG93blwiO1xyXG5leHBvcnQgY29uc3QgTU9VU0VVUCA9IFwibW91c2V1cFwiO1xyXG5leHBvcnQgY29uc3QgVE9VQ0hTVEFSVCA9IFwidG91Y2hzdGFydFwiO1xyXG5leHBvcnQgY29uc3QgVE9VQ0hNT1ZFID0gXCJ0b3VjaG1vdmVcIjtcclxuZXhwb3J0IGNvbnN0IFRPVUNIRU5EID0gXCJ0b3VjaGVuZFwiO1xyXG5leHBvcnQgY29uc3QgQ0xJQ0sgPSBcImNsaWNrXCI7XHJcbmV4cG9ydCBjb25zdCBWSVNJQklMSVRZX0NIQU5HRSA9IFwidmlzaWJpbGl0eWNoYW5nZVwiO1xyXG4iLCJleHBvcnQgY2xhc3MgTGV2ZWxDb25maWcge1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICBpbmRleDtcclxuICAgIGRyYXdyZWFkeTtcclxuICAgIGltZztcclxuICAgIGNvbnN0cnVjdG9yKHhQb3MsIHlQb3MsIGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy54ID0geFBvcztcclxuICAgICAgICB0aGlzLnkgPSB5UG9zO1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBpbmRleDtcclxuICAgICAgICB0aGlzLmRyYXdyZWFkeSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5pbWcuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwSWNvbi5wbmdcIjtcclxuICAgICAgICB0aGlzLmltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwibWFwSWNvbiBsb2FkZWRlZGVkXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgZm9udCB9IGZyb20gXCIuLi8uLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmV4cG9ydCBjbGFzcyBTdG9uZUNvbmZpZyB7XHJcbiAgICB4O1xyXG4gICAgeTtcclxuICAgIG9yaWd4O1xyXG4gICAgb3JpZ3k7XHJcbiAgICB0ZXh0O1xyXG4gICAgaW1nO1xyXG4gICAgaW1hZ2VTaXplO1xyXG4gICAgdGV4dEZvbnRTaXplO1xyXG4gICAgY2FudmFzV2lkdGg7XHJcbiAgICBjYW52YXNIZWlnaHQ7XHJcbiAgICBpbWFnZUNlbnRlck9mZnNldFg7XHJcbiAgICBpbWFnZUNlbnRlck9mZnNldFk7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgdHV0b3JpYWxJbnN0YW5jZTtcclxuICAgIHRpbWVyVGlja2luZ0luc3RhbmNlO1xyXG4gICAgZnJhbWUgPSAwO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzV2lkdGgsIGNhbnZhc0hlaWdodCwgc3RvbmVMZXR0ZXIsIHhQb3MsIHlQb3MsIGltZywgdGltZXJUaWNraW5nSW5zdGFuY2UsIHR1dG9yaWFsSW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLnggPSB4UG9zO1xyXG4gICAgICAgIHRoaXMueSA9IHlQb3M7XHJcbiAgICAgICAgdGhpcy5vcmlneCA9IHhQb3M7XHJcbiAgICAgICAgdGhpcy5vcmlneSA9IHlQb3M7XHJcbiAgICAgICAgdGhpcy5jYW52YXNXaWR0aCA9IGNhbnZhc1dpZHRoO1xyXG4gICAgICAgIHRoaXMuY2FudmFzSGVpZ2h0ID0gY2FudmFzSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWxJbnN0YW5jZSA9IHR1dG9yaWFsSW5zdGFuY2U7XHJcbiAgICAgICAgdGhpcy50ZXh0ID0gc3RvbmVMZXR0ZXI7XHJcbiAgICAgICAgdGhpcy5pbWcgPSBpbWc7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbGN1bGF0ZUltYWdlQW5kRm9udFNpemUoKTtcclxuICAgICAgICB0aGlzLmltYWdlQ2VudGVyT2Zmc2V0WCA9IHRoaXMuaW1hZ2VTaXplIC8gMi4zO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRZID0gdGhpcy5pbWFnZVNpemUgLyAxLjU7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmdJbnN0YW5jZSA9IHRpbWVyVGlja2luZ0luc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMudGV4dCkud2lkdGggKiAxLjQgPlxyXG4gICAgICAgICAgICB0aGlzLmNhbnZhc0hlaWdodCAvIDEzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VTaXplID0gdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMudGV4dCkud2lkdGggKiAxLjE7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dEZvbnRTaXplID0gdGhpcy5jYW52YXNIZWlnaHQgLyAyNTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPj0gMyAmJiB0aGlzLm9yaWd4IDwgNTAgJiYgdGhpcy5vcmlneCA8IHRoaXMuY2FudmFzV2lkdGggLyAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLm9yaWd4ICsgMjU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VTaXplID0gdGhpcy5jYW52YXNIZWlnaHQgLyAxMztcclxuICAgICAgICAgICAgdGhpcy50ZXh0Rm9udFNpemUgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDIwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldEVhc2UgPSAoY3VycmVudFByb2dyZXNzLCBzdGFydCwgZGlzdGFuY2UsIHN0ZXBzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIC1kaXN0YW5jZSAvIDIgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIGN1cnJlbnRQcm9ncmVzcyAvIHN0ZXBzKSAtIDEpICsgc3RhcnQ7XHJcbiAgICB9O1xyXG4gICAgZ2V0WCA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZSA+PSAxMDApIHtcclxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGhhcyBlbmRlZCwgcmV0dXJuIHRoZSBmaW5hbCBzdG9uZSBwb3NpdGlvblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy54O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRFYXNlKHRoaXMuZnJhbWUsIDAsIHRoaXMueCwgMTAwKTtcclxuICAgIH07XHJcbiAgICBnZXRZID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lID49IDEwMCkge1xyXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaGFzIGVuZGVkLCByZXR1cm4gdGhlIGZpbmFsIHN0b25lIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEVhc2UodGhpcy5mcmFtZSwgMCwgdGhpcy55LCAxMDApO1xyXG4gICAgfTtcclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmltZywgdGhpcy5nZXRYKCkgLSB0aGlzLmltYWdlQ2VudGVyT2Zmc2V0WCwgdGhpcy5nZXRZKCkgLSB0aGlzLmltYWdlQ2VudGVyT2Zmc2V0WSwgdGhpcy5pbWFnZVNpemUsIHRoaXMuaW1hZ2VTaXplKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gdGhpcy50ZXh0Rm9udFNpemUgKyBgcHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy50ZXh0LCB0aGlzLmdldFgoKSwgdGhpcy5nZXRZKCkpO1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lIDwgMTAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSB0aGlzLmZyYW1lICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy50dXRvcmlhbEluc3RhbmNlICE9IG51bGwgfHwgdGhpcy50dXRvcmlhbEluc3RhbmNlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnR1dG9yaWFsSW5zdGFuY2UuZHJhdyhkZWx0YVRpbWUsIHRoaXMuaW1nLCB0aGlzLmltYWdlU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IGxhbmd1YWdlRm9udE1hcHBpbmcgZnJvbSBcIi4uL2RhdGEvaTE4LWZvbnQtbWFwcGluZ1wiO1xyXG5leHBvcnQgY2xhc3MgVXRpbHMge1xyXG4gICAgc3RhdGljIFVybFN1YnN0cmluZyA9IFwiL2ZlZWR0aGVtb25zdGVyXCI7XHJcbiAgICBzdGF0aWMgZ2V0Q29udmVydGVkRGV2UHJvZFVSTCh1cmwpIHtcclxuICAgICAgICByZXR1cm4gRGVidWdnZXIuRGV2ZWxvcG1lbnRMaW5rXHJcbiAgICAgICAgICAgID8gdXJsLnNsaWNlKDAsIHVybC5pbmRleE9mKHRoaXMuVXJsU3Vic3RyaW5nKSArIHRoaXMuVXJsU3Vic3RyaW5nLmxlbmd0aCkgK1xyXG4gICAgICAgICAgICAgICAgXCJkZXZcIiArXHJcbiAgICAgICAgICAgICAgICB1cmwuc2xpY2UodXJsLmluZGV4T2YodGhpcy5VcmxTdWJzdHJpbmcpICsgdGhpcy5VcmxTdWJzdHJpbmcubGVuZ3RoKVxyXG4gICAgICAgICAgICA6IHVybDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRMYW5ndWFnZVNwZWNpZmljRm9udChsYW5ndWFnZSkge1xyXG4gICAgICAgIGNvbnN0IGxvd2VyQ2FzZUxhbmd1YWdlID0gbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBsYW5ndWFnZUZvbnRNYXBwaW5nKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXkudG9Mb3dlckNhc2UoKSA9PT0gbG93ZXJDYXNlTGFuZ3VhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsYW5ndWFnZUZvbnRNYXBwaW5nW2tleV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coYEZvbnQgbm90IGZvdW5kIGZvciBsYW5ndWFnZTogJHtsYW5ndWFnZX1gKTtcclxuICAgICAgICByZXR1cm4gXCJOb3RvU2Fucy1SZWd1bGFyXCI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0UmFuZG9tTnVtYmVyKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RXhjbHVkZWRDb29yZGluYXRlcyhjYW52YXMsIGV4Y2x1c2lvblBlcmNlbnRhZ2UpIHtcclxuICAgICAgICBjb25zdCBleGNsdWRlZEFyZWFXaWR0aCA9IGNhbnZhcy53aWR0aCAqIChleGNsdXNpb25QZXJjZW50YWdlIC8gMTAwKTtcclxuICAgICAgICBjb25zdCBleGNsdWRlZEFyZWFIZWlnaHQgPSBjYW52YXMuaGVpZ2h0ICogKGV4Y2x1c2lvblBlcmNlbnRhZ2UgLyAxMDApO1xyXG4gICAgICAgIHJldHVybiB7IGV4Y2x1ZGVYOiBleGNsdWRlZEFyZWFXaWR0aCwgZXhjbHVkZVk6IGV4Y2x1ZGVkQXJlYUhlaWdodCB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSaXBwbGVFZmZlY3QoY29udGV4dCkge1xyXG4gICAgY29uc3QgY3R4ID0gY29udGV4dDtcclxuICAgIGlmICghY3R4KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FudmFzIGNvbnRleHQgaXMgbnVsbFwiKTtcclxuICAgIH1cclxuICAgIGxldCBjZW50ZXJYID0gMDtcclxuICAgIGxldCBjZW50ZXJZID0gMDtcclxuICAgIGNvbnN0IGluaXRpYWxPdXRlclJhZGl1cyA9IDEwO1xyXG4gICAgY29uc3QgaW5pdGlhbElubmVyUmFkaXVzID0gMTA7XHJcbiAgICBjb25zdCBtYXhSYWRpdXMgPSA2MDtcclxuICAgIGxldCBpbmNyZW1lbnQgPSAwLjU7XHJcbiAgICBsZXQgb3V0ZXJSYWRpdXMgPSBpbml0aWFsT3V0ZXJSYWRpdXM7XHJcbiAgICBsZXQgaW5uZXJSYWRpdXMgPSBpbml0aWFsSW5uZXJSYWRpdXM7XHJcbiAgICBmdW5jdGlvbiBkcmF3UmlwcGxlKHgsIHksIHJlc3RhcnQpIHtcclxuICAgICAgICBpZiAocmVzdGFydCkge1xyXG4gICAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XHJcbiAgICAgICAgICAgIGlubmVyUmFkaXVzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2VudGVyWCA9IHg7XHJcbiAgICAgICAgY2VudGVyWSA9IHk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgb3V0ZXJSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCBpbm5lclJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gMjtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIG91dGVyUmFkaXVzICs9IGluY3JlbWVudDtcclxuICAgICAgICBpbm5lclJhZGl1cyArPSBpbmNyZW1lbnQ7XHJcbiAgICAgICAgaWYgKG91dGVyUmFkaXVzID49IG1heFJhZGl1cyB8fCBpbm5lclJhZGl1cyA+PSBtYXhSYWRpdXMpIHtcclxuICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSBpbml0aWFsT3V0ZXJSYWRpdXM7XHJcbiAgICAgICAgICAgIGlubmVyUmFkaXVzID0gaW5pdGlhbElubmVyUmFkaXVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkcmF3UmlwcGxlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSW1hZ2VzKHNvdXJjZXMsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBpbWFnZXMgPSB7fTtcclxuICAgIGxldCBsb2FkZWRJbWFnZXMgPSAwO1xyXG4gICAgY29uc3QgbnVtSW1hZ2VzID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgc3JjIGluIHNvdXJjZXMpIHtcclxuICAgICAgICBpbWFnZXNbc3JjXSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlc1tzcmNdLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCsrbG9hZGVkSW1hZ2VzID49IG51bUltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW1hZ2VzW3NyY10uc3JjID0gc291cmNlc1tzcmNdO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNyZWF0ZUltZyA9IGFzeW5jIChpbWFnZSkgPT4ge1xyXG4gICAgY29uc3QgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIG5ld0ltYWdlLm9ubG9hZCA9ICgpID0+IHJlc29sdmUobmV3SW1hZ2UpO1xyXG4gICAgICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBzeW5jTG9hZGluZ0ltYWdlcyA9IGFzeW5jIChpbWFnZXMpID0+IHtcclxuICAgIGNvbnN0IGxvYWRJbWdQcm9taXNlcyA9IE9iamVjdC5rZXlzKGltYWdlcykubWFwKGFzeW5jIChhcnJLZXkpID0+IHtcclxuICAgICAgICBjb25zdCBpbWcgPSBhd2FpdCBjcmVhdGVJbWcoaW1hZ2VzW2FycktleV0pO1xyXG4gICAgICAgIHJldHVybiB7IFthcnJLZXldOiBpbWcgfTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRJbWFnZSA9IGF3YWl0IFByb21pc2UuYWxsKGxvYWRJbWdQcm9taXNlcyk7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSByZXNvbHZlZEltYWdlLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQpID0+IHtcclxuICAgICAgICByZXR1cm4geyAuLi5hY2N1bXVsYXRvciwgLi4uY3VycmVudCB9O1xyXG4gICAgfSwge30pO1xyXG4gICAgcmV0dXJuIGxvYWRlZEltYWdlcztcclxufTtcclxuIiwiZXhwb3J0IGNsYXNzIEF1ZGlvUGxheWVyIHtcclxuICAgIGF1ZGlvQ29udGV4dDtcclxuICAgIHNvdXJjZU5vZGU7XHJcbiAgICBhdWRpb1F1ZXVlO1xyXG4gICAgcHJvbXB0QXVkaW9CdWZmZXI7XHJcbiAgICBzdGF0aWMgYXVkaW9CdWZmZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgYXVkaW9Tb3VyY3MgPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gQXVkaW9Db250ZXh0TWFuYWdlci5nZXRBdWRpb0NvbnRleHQoKTtcclxuICAgICAgICB0aGlzLnNvdXJjZU5vZGUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IFtdO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcHJlbG9hZFByb21wdEF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBbmREZWNvZGVBdWRpbyhhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucHJvbXB0QXVkaW9CdWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhc3luYyBwcmVsb2FkR2FtZUF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgaWYgKEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5oYXMoYXVkaW9TcmMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmxvYWRBbmREZWNvZGVBdWRpbyhhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5zZXQoYXVkaW9TcmMsIGF1ZGlvQnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5QXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IEF1ZGlvUGxheWVyLmF1ZGlvQnVmZmVycy5nZXQoYXVkaW9TcmMpO1xyXG4gICAgICAgIGlmIChhdWRpb0J1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gYXVkaW9CdWZmZXI7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MucHVzaChzb3VyY2VOb2RlKTtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5zdGFydCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlGZWVkYmFja0F1ZGlvcyA9IChsb29wID0gZmFsc2UsIC4uLmZpbGVVcmwpID0+IHtcclxuICAgICAgICBpZiAoZmlsZVVybC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IGZpbGVVcmw7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUZldGNoKDAsIGxvb3ApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBwbGF5UHJvbXB0QXVkaW8gPSAoYXVkaW9TcmMpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5wcm9tcHRBdWRpb0J1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gdGhpcy5wcm9tcHRBdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1NvdXJjcy5wdXNoKHNvdXJjZU5vZGUpO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHBsYXlCdXR0b25DbGlja1NvdW5kID0gKGF1ZGlvU3JjKSA9PiB7XHJcbiAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBBdWRpb1BsYXllci5hdWRpb0J1ZmZlcnMuZ2V0KGF1ZGlvU3JjKTtcclxuICAgICAgICBpZiAoYXVkaW9CdWZmZXIpIHtcclxuICAgICAgICAgICAgY29uc3Qgc291cmNlTm9kZSA9IHRoaXMuYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHN0b3BGZWVkYmFja0F1ZGlvID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdWRpb1F1ZXVlID0gW107XHJcbiAgICB9O1xyXG4gICAgc3RvcEFsbEF1ZGlvcyA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5zdG9wKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXVkaW9RdWV1ZSA9IFtdO1xyXG4gICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MuZm9yRWFjaCgoc291cmNlTm9kZSkgPT4ge1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmF1ZGlvU291cmNzID0gW107XHJcbiAgICB9O1xyXG4gICAgcGxheUZldGNoID0gKGluZGV4LCBsb29wKSA9PiB7XHJcbiAgICAgICAgaWYgKGluZGV4ID49IHRoaXMuYXVkaW9RdWV1ZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9wRmVlZGJhY2tBdWRpbygpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvUXVldWVbaW5kZXhdKSB7XHJcbiAgICAgICAgICAgIGZldGNoKHRoaXMuYXVkaW9RdWV1ZVtpbmRleF0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHJlc3BvbnNlLmFycmF5QnVmZmVyKCkpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoYnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dD8uZGVjb2RlQXVkaW9EYXRhKGJ1ZmZlciwgKGF1ZGlvQnVmZmVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQ/LmNyZWF0ZUJ1ZmZlclNvdXJjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dD8uZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5sb29wID0gbG9vcDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUub25lbmRlZCA9ICgpID0+IHRoaXMuaGFuZGxlQXVkaW9FbmRlZChpbmRleCwgbG9vcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZUF1ZGlvRW5kZWQgPSAoaW5kZXgsIGxvb3ApID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zb3VyY2VOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5vbmVuZGVkID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wbGF5RmV0Y2goaW5kZXggKyAxLCBsb29wKTtcclxuICAgIH07XHJcbiAgICBhc3luYyBsb2FkQW5kRGVjb2RlQXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhdWRpb1NyYyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheUJ1ZmZlciA9IGF3YWl0IHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IHRoaXMuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShhcnJheUJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKGF1ZGlvQnVmZmVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvYWRpbmcgb3IgZGVjb2RpbmcgYXVkaW86JywgZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbmNsYXNzIEF1ZGlvQ29udGV4dE1hbmFnZXIge1xyXG4gICAgc3RhdGljIGluc3RhbmNlID0gbnVsbDtcclxuICAgIHN0YXRpYyBnZXRBdWRpb0NvbnRleHQoKSB7XHJcbiAgICAgICAgaWYgKCFBdWRpb0NvbnRleHRNYW5hZ2VyLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIEF1ZGlvQ29udGV4dE1hbmFnZXIuaW5zdGFuY2UgPSBuZXcgKHdpbmRvdy5BdWRpb0NvbnRleHQgfHwgd2luZG93LndlYmtpdEF1ZGlvQ29udGV4dCkoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEF1ZGlvQ29udGV4dE1hbmFnZXIuaW5zdGFuY2U7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb25cIjtcclxuaW1wb3J0IHsgREVGQVVMVF9CQUNLR1JPVU5EXzEsIEhJTExfSU1BR0VfMSwgUElMTEFSX0lNQUdFXzEsIEZFTkNFX0lNQUdFXzEsIEFVVFVNTl9CQUNLR1JPVU5EXzEsIEFVVFVNTl9ISUxMXzEsIEFVVFVNTl9QSUxMQVJfMSwgQVVUVU1OX1NJR05fMSwgQVVUVU1OX0ZFTkNFXzEsIFdJTlRFUl9CQUNLR1JPVU5EXzEsIFdJTlRFUl9ISUxMXzEsIFdJTlRFUl9TSUdOXzEsIFdJTlRFUl9GRU5DRV8xLCBXSU5URVJfUElMTEFSXzEgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG4vLyB0byBkbyBuZWVkIHRvIG9wdGltaXplIG1vcmVcclxudmFyIGltYWdlcyA9IHtcclxuICAgIGJnSW1nOiBERUZBVUxUX0JBQ0tHUk9VTkRfMSxcclxuICAgIGhpbGxJbWc6IEhJTExfSU1BR0VfMSxcclxuICAgIHBpbGxlckltZzogUElMTEFSX0lNQUdFXzEsXHJcbiAgICBmZW5jaEltZzogRkVOQ0VfSU1BR0VfMSxcclxuICAgIGF1dHVtbkJnSW1nOiBBVVRVTU5fQkFDS0dST1VORF8xLFxyXG4gICAgYXV0dW1uSGlsbEltZzogQVVUVU1OX0hJTExfMSxcclxuICAgIGF1dHVtblBpbGxlckltZzogQVVUVU1OX1BJTExBUl8xLFxyXG4gICAgYXV0dW1uU2lnbkltZzogQVVUVU1OX1NJR05fMSxcclxuICAgIGF1dHVtbkZlbmNlSW1nOiBBVVRVTU5fRkVOQ0VfMSxcclxuICAgIHdpbnRlckJnSW1nOiBXSU5URVJfQkFDS0dST1VORF8xLFxyXG4gICAgd2ludGVySGlsbEltZzogV0lOVEVSX0hJTExfMSxcclxuICAgIHdpbnRlclNpZ25JbWc6IFdJTlRFUl9TSUdOXzEsXHJcbiAgICB3aW50ZXJGZW5jZUltZzogV0lOVEVSX0ZFTkNFXzEsXHJcbiAgICB3aW50ZXJQaWxsZXJJbWc6IFdJTlRFUl9QSUxMQVJfMSxcclxufTtcclxuZXhwb3J0IGNsYXNzIEJhY2tncm91bmQge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIGF2YWlsYWJsZUJhY2tncm91bmRUeXBlcyA9IFtcIlN1bW1lclwiLCBcIkF1dHVtblwiLCBcIldpbnRlclwiXTtcclxuICAgIGJhY2tncm91bmRUeXBlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgbGV2ZWxOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVHlwZSA9XHJcbiAgICAgICAgICAgIE1hdGguZmxvb3IodGhpcy5sZXZlbE51bWJlciAvIDEwKSAlXHJcbiAgICAgICAgICAgICAgICB0aGlzLmF2YWlsYWJsZUJhY2tncm91bmRUeXBlcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxOdW1iZXIgPj0gMzApIHtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVHlwZSA9IHRoaXMuYmFja2dyb3VuZFR5cGUgJSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2FkSW1hZ2VzKGltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5hdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXNbdGhpcy5iYWNrZ3JvdW5kVHlwZV0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXaW50ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVyQmdJbWcsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy53aW50ZXJQaWxsZXJJbWcsIHRoaXMud2lkdGggKiAwLjM4LCB0aGlzLmhlaWdodCAvIDYsIHRoaXMud2lkdGggLyAxLjIsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVyRmVuY2VJbWcsIC10aGlzLndpZHRoICogMC40LCB0aGlzLmhlaWdodCAvIDQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVySGlsbEltZywgLXRoaXMud2lkdGggKiAwLjI1LCB0aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkF1dHVtblwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5CZ0ltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmF1dHVtblBpbGxlckltZywgdGhpcy53aWR0aCAqIDAuMzgsIHRoaXMuaGVpZ2h0IC8gNiwgdGhpcy53aWR0aCAvIDEuMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5GZW5jZUltZywgLXRoaXMud2lkdGggKiAwLjQsIHRoaXMuaGVpZ2h0IC8gNCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5IaWxsSW1nLCAtdGhpcy53aWR0aCAqIDAuMjUsIHRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCAqIDEuNSwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iZ0ltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnBpbGxlckltZywgdGhpcy53aWR0aCAqIDAuNiwgdGhpcy5oZWlnaHQgLyA2LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmZlbmNoSW1nLCAtdGhpcy53aWR0aCAqIDAuNCwgdGhpcy5oZWlnaHQgLyAzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAvIDMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmhpbGxJbWcsIC10aGlzLndpZHRoICogMC4yNSwgdGhpcy5oZWlnaHQgLyAyLCB0aGlzLndpZHRoICogMS41LCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDYW5jZWxCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBjYW5jZWxfYnV0dG9uX2ltYWdlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gY2FudmFzLndpZHRoICogMC4xICsgKGNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMjtcclxuICAgICAgICB0aGlzLnBvc1kgPSBjYW52YXMuaGVpZ2h0ICogMC4yO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlLnNyYyA9IFwiLi9hc3NldHMvaW1hZ2VzL2Nsb3NlX2J0bi5wbmdcIjtcclxuICAgICAgICB0aGlzLmNhbmNlbF9idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbF9idXR0b25faW1hZ2UgPSB0aGlzLmNhbmNlbF9idXR0b25faW1hZ2U7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5jYW5jZWxfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2xvc2VCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBjbG9zZV9idXR0b25faW1hZ2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmNsb3NlX2J1dHRvbl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMuY2xvc2VfYnV0dG9uX2ltYWdlLnNyYyA9IFwiLi9hc3NldHMvaW1hZ2VzL21hcF9idG4ucG5nXCI7XHJcbiAgICAgICAgdGhpcy5jbG9zZV9idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlX2J1dHRvbl9pbWFnZSA9IHRoaXMuY2xvc2VfYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuY2xvc2VfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE5LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gaW1wb3J0IHsgR2FtZSB9IGZyb20gXCIuLi8uLi8uLi9zY2VuZXMvZ2FtZVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXh0QnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBuZXh0X2J1dHRvbl9pbWFnZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5uZXh0X2J1dHRvbl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMubmV4dF9idXR0b25faW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvbmV4dF9idG4ucG5nXCI7XHJcbiAgICAgICAgdGhpcy5uZXh0X2J1dHRvbl9pbWFnZS5vbmxvYWQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubmV4dF9idXR0b25faW1hZ2UgPSB0aGlzLm5leHRfYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubmV4dF9idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLndpZHRoICogMC4xOSwgdGhpcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMud2lkdGggKiAwLjE5KSAvIDIpICpcclxuICAgICAgICAgICAgKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyKSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyKSk7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgKHRoaXMud2lkdGggKiAwLjE5KSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgbm9fYnV0dG9uX2ltYWdlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWDtcclxuICAgICAgICB0aGlzLnBvc1kgPSBwb3NZO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5ub19idXR0b25faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLm5vX2J1dHRvbl9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9jbG9zZV9idG4ucG5nXCI7XHJcbiAgICAgICAgdGhpcy5ub19idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLm5vX2J1dHRvbl9pbWFnZSA9IHRoaXMubm9fYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubm9fYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1ggKyA1LCB0aGlzLnBvc1kgKyAxMCwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE4LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF1c2VCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBwYXVzZV9idXR0b25faW1hZ2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBjYW52YXMud2lkdGggLSBjYW52YXMuaGVpZ2h0ICogMC4wOTtcclxuICAgICAgICB0aGlzLnBvc1kgPSAwO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5wYXVzZV9idXR0b25faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnBhdXNlX2J1dHRvbl9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9wYXVzZV92MDEucG5nXCI7XHJcbiAgICAgICAgdGhpcy5wYXVzZV9idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlX2J1dHRvbl9pbWFnZSA9IHRoaXMucGF1c2VfYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucGF1c2VfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyKSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnBvc1kgLSAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyKSAqXHJcbiAgICAgICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFJldHJ5QnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgcmV0cnlfYnV0dG9uX2ltYWdlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWDtcclxuICAgICAgICB0aGlzLnBvc1kgPSBwb3NZO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5yZXRyeV9idXR0b25faW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnJldHJ5X2J1dHRvbl9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9yZXRyeV9idG4ucG5nXCI7XHJcbiAgICAgICAgdGhpcy5yZXRyeV9idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5X2J1dHRvbl9pbWFnZSA9IHRoaXMucmV0cnlfYnV0dG9uX2ltYWdlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucmV0cnlfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE5LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy5wb3NYIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKSAqXHJcbiAgICAgICAgICAgICh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMucG9zWSAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikpO1xyXG4gICAgICAgIGlmIChkaXN0YW5jZSA8ICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMikge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgWWVzQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgeWVzX2J1dHRvbl9pbWFnZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1g7XHJcbiAgICAgICAgdGhpcy5wb3NZID0gcG9zWTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMueWVzX2J1dHRvbl9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMueWVzX2J1dHRvbl9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9jb25maXJtX2J0bi5wbmdcIjtcclxuICAgICAgICB0aGlzLnllc19idXR0b25faW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnllc19idXR0b25faW1hZ2UgPSB0aGlzLnllc19idXR0b25faW1hZ2U7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy55ZXNfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1ggLSA1LCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogMC4yLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4Q2xpY2sgLSB0aGlzLnBvc1ggLSAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpICpcclxuICAgICAgICAgICAgKHhDbGljayAtIHRoaXMucG9zWCAtICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMikgK1xyXG4gICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSAqXHJcbiAgICAgICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSk7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDwgKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBUZXh0UGFydGljbGUgfSBmcm9tIFwiLi90ZXh0LXBhcnRpY2xlXCI7XHJcbmltcG9ydCB7IGZvbnQgfSBmcm9tIFwiLi4vLi4vLi4vZ2xvYmFsLXZhcmlhYmxlc1wiO1xyXG5leHBvcnQgY2xhc3MgRmVlZGJhY2tUZXh0RWZmZWN0cyB7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzV2lkdGg7XHJcbiAgICBjYW52YXNIZWlnaHQ7XHJcbiAgICB0ZXh0WDtcclxuICAgIHRleHRZO1xyXG4gICAgZm9udFNpemU7XHJcbiAgICBsaW5lSGVpZ2h0O1xyXG4gICAgbWF4VGV4dFdpZHRoO1xyXG4gICAgcGFydGljbGVEdXJhdGlvbjtcclxuICAgIHN0YXJ0VGltZTtcclxuICAgIHBhcnRpY2xlcztcclxuICAgIGdhcDtcclxuICAgIG1vdXNlO1xyXG4gICAgdGV4dFdvcmtlcjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzV2lkdGggPSBjYW52YXNXaWR0aDtcclxuICAgICAgICB0aGlzLmNhbnZhc0hlaWdodCA9IGNhbnZhc0hlaWdodDtcclxuICAgICAgICB0aGlzLnRleHRYID0gdGhpcy5jYW52YXNXaWR0aCAvIDEuODtcclxuICAgICAgICB0aGlzLnRleHRZID0gdGhpcy5jYW52YXNIZWlnaHQgLyAyO1xyXG4gICAgICAgIHRoaXMuZm9udFNpemUgPSB0aGlzLmNhbnZhc1dpZHRoIC8gNy41O1xyXG4gICAgICAgIHRoaXMubGluZUhlaWdodCA9IHRoaXMuZm9udFNpemUgKiAwLjg7XHJcbiAgICAgICAgdGhpcy5tYXhUZXh0V2lkdGggPSB0aGlzLmNhbnZhc1dpZHRoICogNTtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlRHVyYXRpb24gPSA1MDAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gbnVsbDtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZ2FwID0gMztcclxuICAgICAgICB0aGlzLm1vdXNlID0geyByYWRpdXM6IDIwMDAsIHg6IDAsIHk6IDAgfTtcclxuICAgICAgICB0aGlzLnRleHRXb3JrZXIgPSBuZXcgV29ya2VyKHdpbmRvdy5mZWVkYmFja1RleHRXb3JrZXJQYXRoKTtcclxuICAgICAgICB0aGlzLnRleHRXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVUZXh0V29ya2VyTWVzc2FnZS5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICAgIHdyYXBUZXh0KHRleHQpIHtcclxuICAgICAgICBjb25zdCBncmFkaWVudCA9IHRoaXMuY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCk7XHJcbiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAuMywgXCIjRjhFMjE4XCIpO1xyXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjUsIFwiI0Y4RTIxOFwiKTtcclxuICAgICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMC43LCBcIiNFMzlEMzdcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IGdyYWRpZW50O1xyXG4gICAgICAgIHRoaXMuY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC50ZXh0QmFzZWxpbmUgPSBcIm1pZGRsZVwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5saW5lV2lkdGggPSAzO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IFwiI0E0NjIyNVwiO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gYCR7dGhpcy5mb250U2l6ZSAtIHRleHQubGVuZ3RoICogMC4zfXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgLy8gYnJlYWsgbXVsdGlsaW5lIHRleHRcclxuICAgICAgICBsZXQgbGluZUFycmF5ID0gW107XHJcbiAgICAgICAgbGV0IHdvcmRzID0gdGV4dC5zcGxpdChcIiBcIik7XHJcbiAgICAgICAgbGV0IGxpbmVDb3VudGVyID0gMDtcclxuICAgICAgICBsZXQgbGluZSA9IFwiXCI7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3Jkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgdGVzdExpbmUgPSBsaW5lICsgd29yZHNbaV0gKyBcIiBcIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0ZXN0TGluZSkud2lkdGggPiB0aGlzLm1heFRleHRXaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgbGluZSA9IHdvcmRzW2ldICsgXCJcIjtcclxuICAgICAgICAgICAgICAgIGxpbmVDb3VudGVyKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsaW5lID0gdGVzdExpbmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGluZUFycmF5W2xpbmVDb3VudGVyXSA9IGxpbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCB0ZXh0SGVpZ2h0ID0gdGhpcy5saW5lSGVpZ2h0ICogbGluZUNvdW50ZXI7XHJcbiAgICAgICAgdGhpcy50ZXh0WSA9IHRoaXMuY2FudmFzSGVpZ2h0IC8gNC4yIC0gdGV4dEhlaWdodCAvIDI7XHJcbiAgICAgICAgY29uc3QgaW5pdGlhbFggPSA1MDtcclxuICAgICAgICAvLyBjb25zdCBzcGFjaW5nID0gMC4zO1xyXG4gICAgICAgIHRleHQgPSB0ZXh0LnRyaW0oKTtcclxuICAgICAgICBsaW5lQXJyYXkuZm9yRWFjaCgodGV4dCwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGxhc3RTcGFjZUluZGV4ID0gdGV4dC5sYXN0SW5kZXhPZihcIiBcIiwgdGV4dC5sYXN0SW5kZXhPZihcIiBcIikgLSAxKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9udFNpemUgKiB0ZXh0Lmxlbmd0aCA+IHRoaXMuY2FudmFzV2lkdGggKiAxLjcgJiYgbGFzdFNwYWNlSW5kZXggIT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbml0aWFsVGV4dCA9IHRleHQuc2xpY2UoMCwgbGFzdFNwYWNlSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RUZXh0ID0gXCIgXCIgKyB0ZXh0LnNsaWNlKGxhc3RTcGFjZUluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQoaW5pdGlhbFRleHQsIHRoaXMudGV4dFgsIHRoaXMudGV4dFkgKyBpbmRleCAqIHRoaXMubGluZUhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQobGFzdFRleHQsIHRoaXMudGV4dFgsIHRoaXMudGV4dFkgKyBpbmRleCAqIHRoaXMubGluZUhlaWdodCArIHRoaXMuY2FudmFzSGVpZ2h0IC8gMTIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRleHQsIHRoaXMudGV4dFgsIHRoaXMudGV4dFkgKyBpbmRleCAqIHRoaXMubGluZUhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNvbnZlcnRUb1BhcnRpY2xlKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVUZXh0V29ya2VyTWVzc2FnZShldmVudCkge1xyXG4gICAgICAgIHRoaXMucGFydGljbGVzID0gZXZlbnQuZGF0YS5tYXAoKHsgeCwgeSwgY29sb3IgfSkgPT4gbmV3IFRleHRQYXJ0aWNsZSh0aGlzLCB4LCB5LCBjb2xvcikpO1xyXG4gICAgfVxyXG4gICAgY29udmVydFRvUGFydGljbGUoKSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VEYXRhID0gdGhpcy5jb250ZXh0LmdldEltYWdlRGF0YSgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCk7XHJcbiAgICAgICAgdGhpcy50ZXh0V29ya2VyLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgY2FudmFzV2lkdGg6IHRoaXMuY2FudmFzV2lkdGgsXHJcbiAgICAgICAgICAgIGNhbnZhc0hlaWdodDogdGhpcy5jYW52YXNIZWlnaHQsXHJcbiAgICAgICAgICAgIGdhcDogdGhpcy5nYXAsXHJcbiAgICAgICAgICAgIHBpeGVsczogaW1hZ2VEYXRhLmRhdGEsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhc1dpZHRoLCB0aGlzLmNhbnZhc0hlaWdodCk7XHJcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXMuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XHJcbiAgICAgICAgICAgIHBhcnRpY2xlLmRyYXcoKTtcclxuICAgICAgICAgICAgcGFydGljbGUudXBkYXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVQYXJ0aWNsZXMoKSB7XHJcbiAgICAgICAgdGhpcy50ZXh0V29ya2VyLnBvc3RNZXNzYWdlKHtcclxuICAgICAgICAgICAgcGFydGljbGVzOiB0aGlzLnBhcnRpY2xlcyxcclxuICAgICAgICAgICAgcGFydGljbGVEdXJhdGlvbjogdGhpcy5wYXJ0aWNsZUR1cmF0aW9uLFxyXG4gICAgICAgICAgICBzdGFydFRpbWU6IHRoaXMuc3RhcnRUaW1lLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY2xlYXJQYXJ0aWNsZSgpIHtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgdW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKSB7XHJcbiAgICAgICAgdGhpcy50ZXh0V29ya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlVGV4dFdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMudGV4dFdvcmtlci50ZXJtaW5hdGUoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDTElDSyB9IGZyb20gXCIuLi8uLi9jb21tb24vZXZlbnQtbmFtZXNcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi4vYXVkaW8tcGxheWVyXCI7XHJcbmltcG9ydCBZZXNCdXR0b24gZnJvbSBcIi4uL2J1dHRvbnMveWVzLWJ1dHRvblwiO1xyXG5pbXBvcnQgTm9CdXR0b24gZnJvbSBcIi4uL2J1dHRvbnMvbm8tYnV0dG9uXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFyZVlvdVN1cmVQb3BVcCB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgeWVzQnV0dG9uO1xyXG4gICAgbm9CdXR0b247XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHBvcF91cF9pbWFnZTtcclxuICAgIHllc0NhbGxiYWNrO1xyXG4gICAgbm9DYWxsYmFjaztcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCB5ZXNDYWxsYmFjaywgbm9DYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMueWVzQ2FsbGJhY2sgPSB5ZXNDYWxsYmFjaztcclxuICAgICAgICB0aGlzLm5vQ2FsbGJhY2sgPSBub0NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy55ZXNCdXR0b24gPSBuZXcgWWVzQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC41NSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjQgLVxyXG4gICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggKiAwLjE1KSAvIDIpO1xyXG4gICAgICAgIHRoaXMubm9CdXR0b24gPSBuZXcgTm9CdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjI1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIgK1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNCAtXHJcbiAgICAgICAgICAgICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMik7XHJcbiAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICB0aGlzLnBvcF91cF9pbWFnZS5zcmMgPSBcIi4vYXNzZXRzL2ltYWdlcy9wb3B1cF9iZ192MDEucG5nXCI7XHJcbiAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2Uub25sb2FkID0gKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2UgPSB0aGlzLnBvcF91cF9pbWFnZTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBhZGRMaXN0bmVyID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2FudmFzXHJcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZUNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciByZWN0ID0gc2VsZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBpZiAodGhpcy55ZXNCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiBZZXMgYnV0dG9uIGNsaWNrZWRcIik7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgIHRoaXMueWVzQ2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubm9CdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiBObyBidXR0b24gY2xpY2tlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5ub0NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJnYmEoMCwwLDAsMC41KVwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wb3BfdXBfaW1hZ2UsIHRoaXMuY2FudmFzLndpZHRoICogMC4xLCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIsIHRoaXMuY2FudmFzLndpZHRoICogMC44LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRZID0gdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICsgODA7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gXCIyNHB4IEFyaWFsXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChcIkFyZSB5b3Ugc3VyZT9cIiwgdGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyLjgpO1xyXG4gICAgICAgICAgICB0aGlzLnllc0J1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9CdXR0b24uZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlDbGlja1NvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoXCIuL2Fzc2V0cy9hdWRpb3MvQnV0dG9uQ2xpY2subXAzXCIpO1xyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYW52YXNcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgVGV4dFBhcnRpY2xlIHtcclxuICAgIGZlZWRiYWNrVGV4dEVmZmVjdHM7XHJcbiAgICB4O1xyXG4gICAgeTtcclxuICAgIGNvbG9yO1xyXG4gICAgb3JpZ2luWDtcclxuICAgIG9yaWdpblk7XHJcbiAgICBzaXplO1xyXG4gICAgZWFzZTtcclxuICAgIGNvbnN0cnVjdG9yKGZlZWRiYWNrVGV4dEVmZmVjdHMsIHgsIHksIGNvbG9yKSB7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzID0gZmVlZGJhY2tUZXh0RWZmZWN0cztcclxuICAgICAgICB0aGlzLnggPSBNYXRoLnJhbmRvbSgpICogdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzLmNhbnZhc1dpZHRoO1xyXG4gICAgICAgIHRoaXMueSA9IDA7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yO1xyXG4gICAgICAgIHRoaXMub3JpZ2luWCA9IHg7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5ZID0geTtcclxuICAgICAgICB0aGlzLnNpemUgPSB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMuZ2FwO1xyXG4gICAgICAgIHRoaXMuZWFzZSA9IE1hdGgucmFuZG9tKCkgKiAwLjEgKyAwLjA1NTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzLmNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5jb2xvcjtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMuY29udGV4dC5maWxsUmVjdCh0aGlzLngsIHRoaXMueSwgdGhpcy5zaXplLCB0aGlzLnNpemUpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIHRoaXMueCArPSAodGhpcy5vcmlnaW5YIC0gdGhpcy54KSAqIHRoaXMuZWFzZTtcclxuICAgICAgICB0aGlzLnkgKz0gdGhpcy5vcmlnaW5ZIC0gdGhpcy55O1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGxvYWRJbWFnZXMgfSBmcm9tIFwiLi4vY29tbW9uXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCIuLi9ldmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmV4cG9ydCBjbGFzcyBMZXZlbEluZGljYXRvcnMgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGFjdGl2ZUluZGljYXRvcnM7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgYWN0aXZlSW5kaWNhdG9ycykge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmFjdGl2ZUluZGljYXRvcnMgPSBhY3RpdmVJbmRpY2F0b3JzO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0ge1xyXG4gICAgICAgICAgICBsZXZlbF9pbmRpY2F0b3I6IFwiLi9hc3NldHMvaW1hZ2VzL2xldmVsc192MDEucG5nXCIsXHJcbiAgICAgICAgICAgIGJhcl9lbXB0eTogXCIuL2Fzc2V0cy9pbWFnZXMvYmFyX2VtcHR5X3YwMS5wbmdcIixcclxuICAgICAgICAgICAgYmFyX2Z1bGw6IFwiLi9hc3NldHMvaW1hZ2VzL2Jhcl9mdWxsX3YwMS5wbmdcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNldEluZGljYXRvcnMoaW5kaWNhdG9yQ291bnQpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZUluZGljYXRvcnMgPSBpbmRpY2F0b3JDb3VudDtcclxuICAgIH1cclxuICAgIGFkZERyb3BTdG9uZUV2ZW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3BzdG9uZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlllZWUgcmVjaXZlZCBmcm9tIGxldmVsLWluZGljYXRvclwiKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRJbmRpY2F0b3JzKDIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5sZXZlbF9pbmRpY2F0b3IsIHRoaXMuY2FudmFzLndpZHRoICogMC4xNSwgMCwgdGhpcy5jYW52YXMud2lkdGggKiAwLjM1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmFyX2VtcHR5LCAoKHRoaXMuY2FudmFzLndpZHRoICogMC4zNSkgLyA3KSAqIChpICsgMSkgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICogMC4xNSwgKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMiAtICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDYsICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUpIC8gMTAsICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hY3RpdmVJbmRpY2F0b3JzOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmFyX2Z1bGwsICgodGhpcy5jYW52YXMud2lkdGggKiAwLjM1KSAvIDcpICogKGkgKyAxKSArIHRoaXMuY2FudmFzLndpZHRoICogMC4xNSwgKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMiAtICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDYsICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUpIC8gMTAsICh0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjA5KSAvIDMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICAvLyB0aGlzLmlzU3RvbmVEcm9wcGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnNldEluZGljYXRvcnMoZXZlbnQuZGV0YWlsLmNvdW50ZXIpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGxvYWRJbWFnZXMgfSBmcm9tIFwiLi4vY29tbW9uXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCIuLi9ldmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmV4cG9ydCBjbGFzcyBNb25zdGVyIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIHppbmRleDtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgaW1hZ2U7XHJcbiAgICBmcmFtZVg7XHJcbiAgICBmcmFtZVk7XHJcbiAgICBtYXhGcmFtZTtcclxuICAgIHg7XHJcbiAgICB5O1xyXG4gICAgZnBzO1xyXG4gICAgY291bnRGcmFtZTtcclxuICAgIGZyYW1lSW50ZXJ2YWw7XHJcbiAgICBmcmFtZVRpbWVyO1xyXG4gICAgY2FudmFzU3RhY2s7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIGdhbWU7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIG1vbnN0ZXJQaGFzZTtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIG1vbnN0ZXJQaGFzZSwgY2FsbEJhY2tGdW5jdGlvbikge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyUGhhc2UgPSBtb25zdGVyUGhhc2U7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZ2FtZS53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuZ2FtZS5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb25zdGVyXCIpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuaW1hZ2UpO1xyXG4gICAgICAgIHRoaXMuZnJhbWVYID0gMDtcclxuICAgICAgICB0aGlzLmZyYW1lWSA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDY7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy5nYW1lLndpZHRoIC8gMiAtIHRoaXMuZ2FtZS53aWR0aCAqIDAuMjQzO1xyXG4gICAgICAgIHRoaXMueSA9IHRoaXMuZ2FtZS53aWR0aCAvIDM7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2codGhpcy54LHRoaXMueSk7IFxyXG4gICAgICAgIHRoaXMuZnBzID0gMTA7XHJcbiAgICAgICAgdGhpcy5jb3VudEZyYW1lID0gMDtcclxuICAgICAgICB0aGlzLmZyYW1lSW50ZXJ2YWwgPSAxMDAwIC8gdGhpcy5mcHM7XHJcbiAgICAgICAgdGhpcy5mcmFtZVRpbWVyID0gMDtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgZWF0SW1nOiBcIi4vYXNzZXRzL2ltYWdlcy9lYXQxXCIgKyB0aGlzLm1vbnN0ZXJQaGFzZSArIFwiLnBuZ1wiLFxyXG4gICAgICAgICAgICBpZGxlSW1nOiBcIi4vYXNzZXRzL2ltYWdlcy9pZGxlMVwiICsgdGhpcy5tb25zdGVyUGhhc2UgKyBcIi5wbmdcIixcclxuICAgICAgICAgICAgc3BpdEltZzogXCIuL2Fzc2V0cy9pbWFnZXMvc3BpdDFcIiArIHRoaXMubW9uc3RlclBoYXNlICsgXCIucG5nXCIsXHJcbiAgICAgICAgICAgIGRyYWdJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL2RyYWcxXCIgKyB0aGlzLm1vbnN0ZXJQaGFzZSArIFwiLnBuZ1wiLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlVG9JZGxlQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGNhbGxCYWNrRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuaW1hZ2VzTG9hZGVkKTtcclxuICAgICAgICAgICAgICAgIGNhbGxCYWNrRnVuY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lVGltZXIgPj0gdGhpcy5mcmFtZUludGVydmFsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVUaW1lciA9IDA7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZyYW1lWCA8IHRoaXMubWF4RnJhbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVYKys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZyYW1lWCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWVUaW1lciArPSBkZWx0YVRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmltYWdlLCA3NzAgKiB0aGlzLmZyYW1lWCwgMTM4NiAqIHRoaXMuZnJhbWVZLCA3NjgsIDEzODYsIHRoaXMueCAqIDAuNSwgdGhpcy55ICogMC4xLCAodGhpcy53aWR0aCAvIDIpICogMS41LCAodGhpcy5oZWlnaHQgLyAxLjUpICogMS41KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VJbWFnZShzcmMpIHtcclxuICAgICAgICB0aGlzLmltYWdlLnNyYyA9IHNyYztcclxuICAgIH1cclxuICAgIGNoYW5nZVRvRHJhZ0FuaW1hdGlvbigpIHtcclxuICAgICAgICB0aGlzLm1heEZyYW1lID0gNjtcclxuICAgICAgICB0aGlzLmltYWdlID0gdGhpcy5sb2FkZWRJbWFnZXMuZHJhZ0ltZztcclxuICAgIH1cclxuICAgIGNoYW5nZVRvRWF0QW5pbWF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMubWF4RnJhbWUgPSAxMjtcclxuICAgICAgICB0aGlzLmltYWdlID0gdGhpcy5sb2FkZWRJbWFnZXMuZWF0SW1nO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlVG9JZGxlQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMubWF4RnJhbWUgPSA2O1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmxvYWRlZEltYWdlcy5pZGxlSW1nO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlVG9TcGl0QW5pbWF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMubWF4RnJhbWUgPSAxMjtcclxuICAgICAgICB0aGlzLmltYWdlID0gdGhpcy5sb2FkZWRJbWFnZXMuc3BpdEltZztcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcChldmVudCkge1xyXG4gICAgICAgIGlmIChldmVudC5kZXRhaWwuaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlVG9FYXRBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbmdlVG9TcGl0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZFB1enpsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuY2hhbmdlVG9JZGxlQW5pbWF0aW9uKCk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeENsaWNrIC0gdGhpcy54IC0gdGhpcy53aWR0aCAvIDQpICogKHhDbGljayAtIHRoaXMueCAtIHRoaXMud2lkdGggLyA0KSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLnkgLSB0aGlzLmhlaWdodCAvIDIuMikgKlxyXG4gICAgICAgICAgICAgICAgKHlDbGljayAtIHRoaXMueSAtIHRoaXMuaGVpZ2h0IC8gMi4yKSk7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDEwMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IENhbmNlbEJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9idXR0b25zL2NhbmNlbC1idXR0b25cIjtcclxuaW1wb3J0IENsb3NlQnV0dG9uIGZyb20gXCIuLi9jb21wb25lbnRzL2J1dHRvbnMvY2xvc2UtYnV0dG9uXCI7XHJcbmltcG9ydCBSZXRyeUJ1dHRvbiBmcm9tIFwiLi4vY29tcG9uZW50cy9idXR0b25zL3JldHJ5LWJ1dHRvblwiO1xyXG5pbXBvcnQgeyBDTElDSyB9IGZyb20gXCIuLi9jb21tb24vZXZlbnQtbmFtZXNcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IEFyZVlvdVN1cmVQb3BVcCBmcm9tIFwiLi9mZWVkYmFjay1wYXJ0aWNsZS1lZmZlY3Qvc3VyZS1wb3B1cFwiO1xyXG5pbXBvcnQgeyBsYW5nIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGF1c2VQb3BVcCB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FuY2VsQnV0dG9uO1xyXG4gICAgcmV0cnlCdXR0b247XHJcbiAgICBjbG9zZUJ1dHRvbjtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgcG9wX3VwX2ltYWdlO1xyXG4gICAgY2FsbGJhY2s7XHJcbiAgICBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgcmVsb2FkU2NlbmU7XHJcbiAgICBnYW1lcGxheURhdGE7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIHJldHJ5U3VyZVBvcHVwO1xyXG4gICAgQ2xvc2VTdXJlUG9wdXA7XHJcbiAgICBpc1JldHJ5QnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgaXNDbG9zZUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgY2FsbGJhY2ssIHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb24sIHJlbG9hZFNjZW5lLCBnYW1lcGxheURhdGEpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5nYW1lcGxheURhdGEgPSBnYW1lcGxheURhdGE7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uID0gc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgICAgICB0aGlzLnJlbG9hZFNjZW5lID0gcmVsb2FkU2NlbmU7XHJcbiAgICAgICAgY29uc3Qgc2VsZklkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHNlbGZJZEVsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvbiA9IG5ldyBDYW5jZWxCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcyk7XHJcbiAgICAgICAgdGhpcy5yZXRyeUJ1dHRvbiA9IG5ldyBSZXRyeUJ1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNTUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICogMC40IC1cclxuICAgICAgICAgICAgKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKTtcclxuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gbmV3IENsb3NlQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC4yNSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICtcclxuICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjQgLVxyXG4gICAgICAgICAgICAodGhpcy5jYW52YXMud2lkdGggKiAwLjE5KSAvIDIpO1xyXG4gICAgICAgIHRoaXMucG9wX3VwX2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5wb3BfdXBfaW1hZ2Uuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvcG9wdXBfYmdfdjAxLnBuZ1wiO1xyXG4gICAgICAgIHRoaXMucG9wX3VwX2ltYWdlLm9ubG9hZCA9IChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucG9wX3VwX2ltYWdlID0gdGhpcy5wb3BfdXBfaW1hZ2U7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMucmV0cnlTdXJlUG9wdXAgPSBuZXcgQXJlWW91U3VyZVBvcFVwKHRoaXMuY2FudmFzLCB0aGlzLnllc1JldHJ5Q2FsbGJhY2ssIHRoaXMubm9SZXRyeUNhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLkNsb3NlU3VyZVBvcHVwID0gbmV3IEFyZVlvdVN1cmVQb3BVcCh0aGlzLmNhbnZhcywgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCB0aGlzLm5vQ2xvc2VDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICB5ZXNSZXRyeUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIiByZXRyeSBidXR0b24gY2xpY2tlZFwiKTtcclxuICAgICAgICB0aGlzLnJlbG9hZFNjZW5lKHRoaXMuZ2FtZXBsYXlEYXRhLCBcIkdhbWVQbGF5XCIpO1xyXG4gICAgfTtcclxuICAgIG5vUmV0cnlDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzUmV0cnlCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbm9DbG9zZUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ2xvc2VCdXR0b25DbGlja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDbG9zZUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBhZGRMaXN0bmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgY2FuY2VsIGJ1dHRvbiBjbGlja2VkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucmV0cnlCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICBpZiAobGFuZyA9PSBcImVuZ2xpc2hcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmV0cnlCdXR0b25DbGlja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIHJldHJ5IGJ1dHRvbiBjbGlja2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXRyeVN1cmVQb3B1cC5hZGRMaXN0bmVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlBcmVZb3VTdXJlU291bmQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCIgcmV0cnkgYnV0dG9uIGNsaWNrZWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZFNjZW5lKHRoaXMuZ2FtZXBsYXlEYXRhLCBcIkdhbWVQbGF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcgPT0gXCJlbmdsaXNoXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0Nsb3NlQnV0dG9uQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlU3VyZVBvcHVwLmFkZExpc3RuZXIoKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIGNsb3NlIGJ1dHRvbiBjbGlja2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5QXJlWW91U3VyZVNvdW5kKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIGNsb3NlIGJ1dHRvbiBjbGlja2VkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uKFwiR2FtZVBsYXlcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiYSgwLDAsMCwwLjUpXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnBvcF91cF9pbWFnZSwgdGhpcy5jYW52YXMud2lkdGggKiAwLjEsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiwgdGhpcy5jYW52YXMud2lkdGggKiAwLjgsIHRoaXMuY2FudmFzLndpZHRoICogMC44KTtcclxuICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5QnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmV0cnlCdXR0b25DbGlja2VkID09IHRydWUgJiYgbGFuZyA9PSBcImVuZ2xpc2hcIilcclxuICAgICAgICAgICAgICAgIHRoaXMucmV0cnlTdXJlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0Nsb3NlQnV0dG9uQ2xpY2tlZCA9PSB0cnVlICYmIGxhbmcgPT0gXCJlbmdsaXNoXCIpXHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlU3VyZVBvcHVwLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwbGF5Q2xpY2tTb3VuZCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKFwiLi9hc3NldHMvYXVkaW9zL0J1dHRvbkNsaWNrLm1wM1wiKTtcclxuICAgIH07XHJcbiAgICBwbGF5QXJlWW91U3VyZVNvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL2FyZS15b3Utc3VyZS5tcDNcIik7XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzIH0gZnJvbSBcIi4uL2NvbW1vbi9cIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBsYW5nLCBwc2V1ZG9JZCB9IGZyb20gXCIuLi8uLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmltcG9ydCB7IGdldERhdGEgfSBmcm9tIFwiLi4vZGF0YS9hcGktZGF0YVwiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQbGF5QnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlcztcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgbWFqVmVyc2lvbjtcclxuICAgIG1pblZlcnNpb247XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgY2FudmFzLCBwb3NYLCBwb3NZKSB7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gcG9zWDtcclxuICAgICAgICB0aGlzLnBvc1kgPSBwb3NZO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgcGF1c2VfYnV0dG9uX2ltYWdlOiBcIi4vYXNzZXRzL2ltYWdlcy9QbGF5X2J1dHRvbi5wbmdcIlxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIGluaXQoKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldERhdGEoKTtcclxuICAgICAgICB0aGlzLm1halZlcnNpb24gPSBkYXRhLm1hanZlcnNpb247XHJcbiAgICAgICAgdGhpcy5taW5WZXJzaW9uID0gZGF0YS5taW52ZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5wYXVzZV9idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAvIDMsIHRoaXMuY2FudmFzLndpZHRoIC8gMyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4Q2xpY2sgLSB0aGlzLnBvc1ggLSB0aGlzLmNhbnZhcy53aWR0aCAvIDYpICpcclxuICAgICAgICAgICAgKHhDbGljayAtIHRoaXMucG9zWCAtIHRoaXMuY2FudmFzLndpZHRoIC8gNikgK1xyXG4gICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gdGhpcy5jYW52YXMud2lkdGggLyA2KSAqXHJcbiAgICAgICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gdGhpcy5jYW52YXMud2lkdGggLyA2KSk7XHJcbiAgICAgICAgdGhpcy5sb2dUYXBwZWRTdGFydEZpcmViYXNlRXZlbnQoKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCB0aGlzLmNhbnZhcy53aWR0aCAvIDgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nVGFwcGVkU3RhcnRGaXJlYmFzZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCB0YXBwZWRTdGFydERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZXJzaW9uLWluZm8taWRcIikuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvbiA/IHRoaXMubWFqVmVyc2lvbi50b1N0cmluZygpICsgXCIuXCIgKyB0aGlzLm1pblZlcnNpb24udG9TdHJpbmcoKSA6IFwiXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFRhcHBlZFN0YXJ0RXZlbnQodGFwcGVkU3RhcnREYXRhKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiLi4vZXZlbnRzL0V2ZW50TWFuYWdlclwiO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi9jb21tb24vdXRpbHNcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgVklTSUJJTElUWV9DSEFOR0UgfSBmcm9tIFwiLi4vY29tbW9uL2V2ZW50LW5hbWVzXCI7XHJcbmltcG9ydCB7IGZvbnQgfSBmcm9tIFwiLi4vLi4vZ2xvYmFsLXZhcmlhYmxlc1wiO1xyXG5leHBvcnQgY2xhc3MgUHJvbXB0VGV4dCBleHRlbmRzIEV2ZW50TWFuYWdlciB7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGxldmVsRGF0YTtcclxuICAgIGN1cnJlbnRQcm9tcHRUZXh0O1xyXG4gICAgY3VycmVudFB1enpsZURhdGE7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIHByb21wdF9pbWFnZTtcclxuICAgIHRhcmdldFN0b25lcztcclxuICAgIHJpZ2h0VG9MZWZ0O1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIGlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICBkcm9wcGVkU3RvbmVzID0gMDtcclxuICAgIHRpbWUgPSAwO1xyXG4gICAgcHJvbXB0SW1hZ2VXaWR0aCA9IDA7XHJcbiAgICBpc0FwcEZvcmVncm91bmQgPSB0cnVlO1xyXG4gICAgc2NhbGUgPSAxO1xyXG4gICAgaXNTY2FsaW5nVXAgPSB0cnVlO1xyXG4gICAgc2NhbGVGYWN0b3IgPSAwLjAwMDUwO1xyXG4gICAgcHJvbXB0SW1hZ2VIZWlnaHQgPSAwO1xyXG4gICAgcHJvbXB0UGxheUJ1dHRvbjtcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIGN1cnJlbnRQdXp6bGVEYXRhLCBsZXZlbERhdGEsIHJpZ2h0VG9MZWZ0KSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI6IChldmVudCkgPT4gdGhpcy5oYW5kbGVTdG9uZURyb3AoZXZlbnQpLFxyXG4gICAgICAgICAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlTG9hZFB1enpsZShldmVudClcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgPSBsZXZlbERhdGE7XHJcbiAgICAgICAgdGhpcy5yaWdodFRvTGVmdCA9IHJpZ2h0VG9MZWZ0O1xyXG4gICAgICAgIHRoaXMuY3VycmVudFByb21wdFRleHQgPSBjdXJyZW50UHV6emxlRGF0YS5wcm9tcHQucHJvbXB0VGV4dDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhID0gY3VycmVudFB1enpsZURhdGE7XHJcbiAgICAgICAgdGhpcy50YXJnZXRTdG9uZXMgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcztcclxuICAgICAgICB0aGlzLmNhbmF2c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbmF2c0VsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnByZWxvYWRQcm9tcHRBdWRpbyh0aGlzLmdldFByb21wdEF1ZGlvVXJsKCkpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0X2ltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRQbGF5QnV0dG9uID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkSW1hZ2VzKCk7XHJcbiAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICB0aGlzLnByb21wdEltYWdlV2lkdGggPSB0aGlzLndpZHRoICogMC42NTtcclxuICAgICAgICB0aGlzLnByb21wdEltYWdlSGVpZ2h0ID0gdGhpcy5oZWlnaHQgKiAwLjM7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihWSVNJQklMSVRZX0NIQU5HRSwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciByZWN0ID0gc2VsZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBpZiAoc2VsZi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGdldFByb21wdEF1ZGlvVXJsID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBVdGlscy5nZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHRoaXMuY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdEF1ZGlvKTtcclxuICAgIH07XHJcbiAgICBwbGF5U291bmQgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1Byb21wdEF1ZGlvJywgIFV0aWxzLmdldENvbnZlcnRlZERldlByb2RVUkwodGhpcy5jdXJyZW50UHV6emxlRGF0YS5wcm9tcHQucHJvbXB0QXVkaW8pKTtcclxuICAgICAgICBpZiAodGhpcy5pc0FwcEZvcmVncm91bmQpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5UHJvbXB0QXVkaW8oVXRpbHMuZ2V0Q29udmVydGVkRGV2UHJvZFVSTCh0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnByb21wdC5wcm9tcHRBdWRpbykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCh4Q2xpY2sgLSB0aGlzLndpZHRoIC8gMykgPCAxMiAmJiBNYXRoLnNxcnQoeUNsaWNrIC0gdGhpcy5oZWlnaHQgLyA1LjUpIDwgMTA7XHJcbiAgICB9XHJcbiAgICBzZXRDdXJycmVudFB1enpsZURhdGEoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFByb21wdFRleHQgPSBkYXRhLnByb21wdC5wcm9tcHRUZXh0O1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXM7XHJcbiAgICB9XHJcbiAgICBkcmF3UlRMTGFuZygpIHtcclxuICAgICAgICB2YXIgeCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgIGNvbnN0IHkgPSB0aGlzLmhlaWdodCAqIDAuMjY7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgdmFyIGZvbnRTaXplID0gdGhpcy5jYWxjdWxhdGVGb250KCk7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnByb21wdEltYWdlV2lkdGg7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gdGhpcy5wcm9tcHRJbWFnZUhlaWdodDtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke2ZvbnRTaXplfXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbFR5cGUgPT0gXCJMZXR0ZXJJbldvcmRcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxldHRlckluV29yZCA9IHRoaXMuY3VycmVudFByb21wdFRleHQucmVwbGFjZShuZXcgUmVnRXhwKHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzWzBdLCBcImdcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy50YXJnZXRTdG9uZXNbMF0sIHggKyB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQobGV0dGVySW5Xb3JkKS53aWR0aCAvIDIsIHkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChsZXR0ZXJJbldvcmQsIHggLSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50YXJnZXRTdG9uZXNbMF0pLndpZHRoIC8gMiwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMTUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsVHlwZSA9PSBcIldvcmRcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgeCA9IHggLSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy5jdXJyZW50UHJvbXB0VGV4dCkud2lkdGggKiAwLjU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGhpcy50YXJnZXRTdG9uZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5kcm9wcGVkU3RvbmVzID4gaSB8fCB0aGlzLmRyb3BwZWRTdG9uZXMgPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLnRhcmdldFN0b25lc1tpXSwgeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMudGFyZ2V0U3RvbmVzW2ldLCB4LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IHggKyB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50YXJnZXRTdG9uZXNbaV0pLndpZHRoICsgNTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4xNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlID09IFwiYXVkaW9QbGF5ZXJXb3JkXCIpIHtcclxuICAgICAgICAgICAgLy8gY29uc3Qgb2Zmc2V0WCA9ICh0aGlzLndpZHRoIC0gc2NhbGVkV2lkdGgpIC8gMjtcclxuICAgICAgICAgICAgLy8gY29uc3Qgb2Zmc2V0WSA9ICh0aGlzLmhlaWdodCAtIHNjYWxlZEhlaWdodCkgLyA1O1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gKHRoaXMud2lkdGggLSBzY2FsZWRXaWR0aCkgKiAxLjI1O1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gKHRoaXMuaGVpZ2h0IC0gc2NhbGVkSGVpZ2h0KSAqIDAuMzM7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCBvZmZzZXRYLCBvZmZzZXRZLCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5jdXJyZW50UHJvbXB0VGV4dCwgeCwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMTUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3T3RoZXJzKCkge1xyXG4gICAgICAgIGNvbnN0IHByb21wdFRleHRMZXR0ZXJzID0gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5zcGxpdChcIlwiKTtcclxuICAgICAgICBjb25zdCB4ID0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuaGVpZ2h0ICogMC4yODtcclxuICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHRoaXMucHJvbXB0SW1hZ2VXaWR0aDtcclxuICAgICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSB0aGlzLnByb21wdEltYWdlSGVpZ2h0O1xyXG4gICAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuY2FsY3VsYXRlRm9udCgpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gYCR7Zm9udFNpemV9cHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICBsZXQgc3RhcnRQcm9tcHR0ZXh0WCA9IHRoaXMud2lkdGggLyAyIC1cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQpLndpZHRoIC8gMjtcclxuICAgICAgICBsZXQgY3VycmVudFdvcmRXaWR0aCA9IDA7XHJcbiAgICAgICAgdmFyIGxldHRlckhpZ2hsaWdodCA9IHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzWzBdLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvbXB0VGV4dExldHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTGV0dGVySW5Xb3JkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGV0dGVySGlnaGxpZ2h0LmluY2x1ZGVzKHByb21wdFRleHRMZXR0ZXJzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVySGlnaGxpZ2h0ID0gbGV0dGVySGlnaGxpZ2h0LnNsaWNlKDEsIGxldHRlckhpZ2hsaWdodC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChwcm9tcHRUZXh0TGV0dGVyc1tpXSwgc3RhcnRQcm9tcHR0ZXh0WCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMjUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIldvcmRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEucHJvdG9UeXBlID09IFwiVmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyb3BwZWRTdG9uZXMgPiBpIHx8IHRoaXMuZHJvcHBlZFN0b25lcyA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjI1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTb3VuZFdvcmRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4yNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5jdXJyZW50UHJvbXB0VGV4dCwgdGhpcy53aWR0aCAvIDIuMSwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjI1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50V29yZFdpZHRoID0gKHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dChwcm9tcHRUZXh0TGV0dGVyc1tpXSkud2lkdGggKyB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQocHJvbXB0VGV4dExldHRlcnNbaSArIDFdKS53aWR0aCkgLyAyO1xyXG4gICAgICAgICAgICBzdGFydFByb21wdHRleHRYICs9IGN1cnJlbnRXb3JkV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNjYWxpbmcoKTtcclxuICAgICAgICB0aGlzLnRpbWUgPSAoZGVsdGFUaW1lIDwgMTcpID8gdGhpcy50aW1lICsgTWF0aC5mbG9vcihkZWx0YVRpbWUpIDogdGhpcy50aW1lICsgMTY7XHJcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodGhpcy50aW1lKSA+PSAxOTEwICYmIE1hdGguZmxvb3IodGhpcy50aW1lKSA8PSAxOTI2KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc1N0b25lRHJvcHBlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHRoaXMucHJvbXB0SW1hZ2VXaWR0aCAqIHRoaXMuc2NhbGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IHRoaXMucHJvbXB0SW1hZ2VIZWlnaHQgKiB0aGlzLnNjYWxlO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gKHRoaXMud2lkdGggLSBzY2FsZWRXaWR0aCkgLyAyO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gKHRoaXMuaGVpZ2h0IC0gc2NhbGVkSGVpZ2h0KSAvIDU7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRfaW1hZ2UsIG9mZnNldFgsIG9mZnNldFksIHNjYWxlZFdpZHRoLCBzY2FsZWRIZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0VG9MZWZ0XHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuZHJhd1JUTExhbmcoKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLmRyYXdPdGhlcnMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmlzU3RvbmVEcm9wcGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmRyb3BwZWRTdG9uZXMgPSAwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEgPSB0aGlzLmxldmVsRGF0YS5wdXp6bGVzW2V2ZW50LmRldGFpbC5jb3VudGVyXTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9tcHRUZXh0ID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS5wcm9tcHQucHJvbXB0VGV4dDtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucHJlbG9hZFByb21wdEF1ZGlvKHRoaXMuZ2V0UHJvbXB0QXVkaW9VcmwoKSk7XHJcbiAgICAgICAgdGhpcy5pc1N0b25lRHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGRyb3BwZWRTdG9uZUluZGV4KGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5kcm9wcGVkU3RvbmVzID0gaW5kZXg7XHJcbiAgICB9XHJcbiAgICBjYWxjdWxhdGVGb250KCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5wcm9tcHRJbWFnZVdpZHRoIC8gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5sZW5ndGggPiAzNSkgPyAzNSA6IHRoaXMud2lkdGggKiAwLjY1IC8gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVTY2FsaW5nKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2NhbGluZ1VwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgKz0gdGhpcy5zY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGUgPj0gMS4wNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1NjYWxpbmdVcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlIC09IHRoaXMuc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1NjYWxpbmdVcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT0gXCJoaWRkZW5cIikge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICAgICAgdGhpcy5pc0FwcEZvcmVncm91bmQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmlzQXBwRm9yZWdyb3VuZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFzeW5jIGxvYWRJbWFnZXMoKSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2UxUHJvbWlzZSA9IHRoaXMubG9hZEltYWdlKHRoaXMucHJvbXB0X2ltYWdlLCBcIi4vYXNzZXRzL2ltYWdlcy9wcm9tcHRUZXh0QmcucG5nXCIpO1xyXG4gICAgICAgIGNvbnN0IGltYWdlMlByb21pc2UgPSB0aGlzLmxvYWRJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIFwiLi9hc3NldHMvaW1hZ2VzL3Byb21wdFBsYXlCdXR0b24ucG5nXCIpO1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKFtpbWFnZTFQcm9taXNlLCBpbWFnZTJQcm9taXNlXSk7XHJcbiAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vIFlvdSBjYW4gZG8gYWRkaXRpb25hbCBhY3Rpb25zIGhlcmUgYWZ0ZXIgYm90aCBpbWFnZXMgYXJlIGxvYWRlZC5cclxuICAgIH1cclxuICAgIGxvYWRJbWFnZShpbWFnZSwgc3JjKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpbWFnZS5zcmMgPSBzcmM7XHJcbiAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSAoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgU3RvbmVDb25maWcsIFZJU0lCSUxJVFlfQ0hBTkdFLCBVdGlscyB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCIuLi9ldmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IFR1dG9yaWFsIH0gZnJvbSBcIi4vdHV0b3JpYWxcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIi4uL2RhdGEvZ2FtZS1zY29yZVwiO1xyXG5pbXBvcnQgeyBBVURJT19QQVRIX0VBVFMsIEFVRElPX1BBVEhfTU9OU1RFUl9TUElULCBBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVELCBBVURJT19QQVRIX1BPSU5UU19BREQsIEFVRElPX1BBVEhfQ09SUkVDVF9TVE9ORSwgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DLCBBU1NFVFNfUEFUSF9TVE9ORV9QSU5LX0JHIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvbmVIYW5kbGVyIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBjdXJyZW50UHV6emxlRGF0YTtcclxuICAgIHRhcmdldFN0b25lcztcclxuICAgIHN0b25lUG9zO1xyXG4gICAgcGlja2VkU3RvbmU7XHJcbiAgICBmb2lsU3RvbmVzID0gbmV3IEFycmF5KCk7XHJcbiAgICBhbnN3ZXIgPSBcIlwiO1xyXG4gICAgcHV6emxlTnVtYmVyO1xyXG4gICAgbGV2ZWxEYXRhO1xyXG4gICAgY29ycmVjdEFuc3dlcjtcclxuICAgIHB1enpsZVN0YXJ0VGltZTtcclxuICAgIHNob3dUdXRvcmlhbCA9IEdhbWVTY29yZS5nZXREYXRhZnJvbVN0b3JhZ2UoKS5sZW5ndGggPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgY29ycmVjdFN0b25lQXVkaW87XHJcbiAgICB0dXRvcmlhbDtcclxuICAgIGNvcnJlY3RUYXJnZXRTdG9uZTtcclxuICAgIHN0b25lYmc7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIGZlZWRiYWNrQXVkaW9zO1xyXG4gICAgdGltZXJUaWNraW5nSW5zdGFuY2U7XHJcbiAgICBpc0dhbWVQYXVzZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcHV6emxlTnVtYmVyLCBsZXZlbERhdGEsIGZlZWRiYWNrQXVkaW9zLCB0aW1lclRpY2tpbmdJbnN0YW5jZSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSBwdXp6bGVOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgPSBsZXZlbERhdGE7XHJcbiAgICAgICAgdGhpcy5zZXRUYXJnZXRTdG9uZSh0aGlzLnB1enpsZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplU3RvbmVQb3MoKTtcclxuICAgICAgICB0aGlzLmNvcnJlY3RTdG9uZUF1ZGlvID0gbmV3IEF1ZGlvKEFVRElPX1BBVEhfQ09SUkVDVF9TVE9ORSk7XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpby5sb29wID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja0F1ZGlvcyA9IHRoaXMuY29udmVydEZlZWRCYWNrQXVkaW9zVG9MaXN0KGZlZWRiYWNrQXVkaW9zKTtcclxuICAgICAgICB0aGlzLnB1enpsZVN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbCA9IG5ldyBUdXRvcmlhbChjb250ZXh0LCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQsIHB1enpsZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5zdG9uZWJnID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5zdG9uZWJnLnNyYyA9IEFTU0VUU19QQVRIX1NUT05FX1BJTktfQkc7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMuc3RvbmViZy5vbmxvYWQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVN0b25lcyh0aGlzLnN0b25lYmcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UgPSB0aW1lclRpY2tpbmdJbnN0YW5jZTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVN0b25lcyhpbWcpIHtcclxuICAgICAgICBjb25zdCBmb2lsU3RvbmVzID0gdGhpcy5nZXRGb2lsU3RvbmVzKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb2lsU3RvbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChmb2lsU3RvbmVzW2ldID09IHRoaXMuY29ycmVjdFRhcmdldFN0b25lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1dG9yaWFsLnVwZGF0ZVRhcmdldFN0b25lUG9zaXRpb25zKHRoaXMuc3RvbmVQb3NbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZm9pbFN0b25lcy5wdXNoKG5ldyBTdG9uZUNvbmZpZyh0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQsIGZvaWxTdG9uZXNbaV0sIHRoaXMuc3RvbmVQb3NbaV1bMF0sIHRoaXMuc3RvbmVQb3NbaV1bMV0sIGltZywgdGhpcy50aW1lclRpY2tpbmdJbnN0YW5jZSwgaSA9PSBmb2lsU3RvbmVzLmxlbmd0aCAtIDEgPyB0aGlzLnR1dG9yaWFsIDogbnVsbCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZvaWxTdG9uZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5mb2lsU3RvbmVzW2ldLmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZm9pbFN0b25lc1t0aGlzLmZvaWxTdG9uZXMubGVuZ3RoIC0gMV0uZnJhbWUgPj0gMTAwICYmXHJcbiAgICAgICAgICAgICF0aGlzLmlzR2FtZVBhdXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyVGlja2luZ0luc3RhbmNlLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluaXRpYWxpemVTdG9uZVBvcygpIHtcclxuICAgICAgICBsZXQgb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlID0gMzI7XHJcbiAgICAgICAgdGhpcy5zdG9uZVBvcyA9IFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyA1IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS45IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjE1IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDMuNSArIHRoaXMuY2FudmFzLndpZHRoIC8gMiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyA0IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4yOCAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyA3IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS41IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIuMyArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLjEgLVxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuOSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLjMgK1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMi4xIC1cclxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjQyIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDYgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjEgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgXTtcclxuICAgICAgICB0aGlzLnN0b25lUG9zID0gdGhpcy5zdG9uZVBvcy5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpO1xyXG4gICAgfVxyXG4gICAgc2V0VGFyZ2V0U3RvbmUocHV6emxlTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YSA9IHRoaXMubGV2ZWxEYXRhLnB1enpsZXNbcHV6emxlTnVtYmVyXTtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IFsuLi50aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lc107XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmUgPSB0aGlzLnRhcmdldFN0b25lcy5qb2luKFwiXCIpO1xyXG4gICAgfVxyXG4gICAgaXNEcm9wcGVkU3RvbmVDb3JyZWN0KGRyb3BwZWRTdG9uZSkge1xyXG4gICAgICAgIHJldHVybiBkcm9wcGVkU3RvbmUgPT0gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmU7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSBbXTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFB1enpsZU51bWJlcihldmVudC5kZXRhaWwuY291bnRlcik7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSBldmVudC5kZXRhaWwuY291bnRlcjtcclxuICAgICAgICB0aGlzLnNldFRhcmdldFN0b25lKHRoaXMucHV6emxlTnVtYmVyKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVTdG9uZVBvcygpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3RvbmVzKHRoaXMuc3RvbmViZyk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdChkcm9wcGVkU3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgY29uc3QgaXNMZXR0ZXJEcm9wQ29ycmVjdCA9IGlzV29yZFxyXG4gICAgICAgICAgICA/IGRyb3BwZWRTdG9uZSA9PSB0aGlzLmNvcnJlY3RUYXJnZXRTdG9uZS5zdWJzdHJpbmcoMCwgZHJvcHBlZFN0b25lLmxlbmd0aClcclxuICAgICAgICAgICAgOiBkcm9wcGVkU3RvbmUgPT0gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmU7XHJcbiAgICAgICAgdGhpcy5wcm9jZXNzTGV0dGVyRHJvcEZlZWRiYWNrQXVkaW8oZmVlZEJhY2tJbmRleCwgaXNMZXR0ZXJEcm9wQ29ycmVjdCwgaXNXb3JkLCBkcm9wcGVkU3RvbmUpO1xyXG4gICAgICAgIHJldHVybiBpc0xldHRlckRyb3BDb3JyZWN0O1xyXG4gICAgfVxyXG4gICAgcHJvY2Vzc0xldHRlckRyb3BGZWVkYmFja0F1ZGlvKGZlZWRCYWNrSW5kZXgsIGlzTGV0dGVyRHJvcENvcnJlY3QsIGlzV29yZCwgZHJvcHBlZFN0b25lKSB7XHJcbiAgICAgICAgaWYgKGlzTGV0dGVyRHJvcENvcnJlY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9uID0gaXNXb3JkXHJcbiAgICAgICAgICAgICAgICA/IGRyb3BwZWRTdG9uZSA9PT0gdGhpcy5nZXRDb3JyZWN0VGFyZ2V0U3RvbmUoKSAvLyBjb25kaXRpb24gZm9yIHdvcmQgcHV6emxlXHJcbiAgICAgICAgICAgICAgICA6IGlzTGV0dGVyRHJvcENvcnJlY3Q7IC8vIGZvciBsZXR0ZXIgYW5kIGxldHRlciBmb3Igd29yZCBwdXp6bGVcclxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5Q29ycmVjdEFuc3dlckZlZWRiYWNrU291bmQoZmVlZEJhY2tJbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlGZWVkYmFja0F1ZGlvcyhmYWxzZSwgQVVESU9fUEFUSF9FQVRTLCBBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMoMikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlGZWVkYmFja0F1ZGlvcyhmYWxzZSwgQVVESU9fUEFUSF9FQVRTLCBBVURJT19QQVRIX01PTlNURVJfU1BJVCwgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSA+IDAgPyBBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVEIDogbnVsbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0Q29ycmVjdFRhcmdldFN0b25lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvcnJlY3RUYXJnZXRTdG9uZTtcclxuICAgIH1cclxuICAgIGdldEZvaWxTdG9uZXMoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXMuZm9yRWFjaCgoZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuY3VycmVudFB1enpsZURhdGEuZm9pbFN0b25lcy5pbmRleE9mKGUpO1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsU3RvbmVzQ291bnQgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcy5sZW5ndGggK1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMubGVuZ3RoO1xyXG4gICAgICAgIGlmICh0b3RhbFN0b25lc0NvdW50ID4gOCkge1xyXG4gICAgICAgICAgICBjb25zdCBleHRyYVN0b25lc0NvdW50ID0gdG90YWxTdG9uZXNDb3VudCAtIDg7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEuZm9pbFN0b25lcy5zcGxpY2UoMCwgZXh0cmFTdG9uZXNDb3VudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLnB1c2goZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFB1enpsZURhdGEuZm9pbFN0b25lcy5zb3J0KCgpID0+IE1hdGgucmFuZG9tKCkgLSAwLjUpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLmNvcnJlY3RTdG9uZUF1ZGlvLnBhdXNlKCk7XHJcbiAgICB9O1xyXG4gICAgY29udmVydEZlZWRCYWNrQXVkaW9zVG9MaXN0KGZlZWRiYWNrQXVkaW9zKSB7XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgZmVlZGJhY2tBdWRpb3NbXCJmYW50YXN0aWNcIl0sXHJcbiAgICAgICAgICAgIGZlZWRiYWNrQXVkaW9zW1wiZ3JlYXRcIl0sXHJcbiAgICAgICAgICAgIGZlZWRiYWNrQXVkaW9zW1wiYW1hemluZ1wiXVxyXG4gICAgICAgIF07XHJcbiAgICB9XHJcbiAgICBzZXRHYW1lUGF1c2UoaXNHYW1lUGF1c2VkKSB7XHJcbiAgICAgICAgdGhpcy5pc0dhbWVQYXVzZWQgPSBpc0dhbWVQYXVzZWQ7XHJcbiAgICB9XHJcbiAgICBwbGF5Q29ycmVjdEFuc3dlckZlZWRiYWNrU291bmQoZmVlZEJhY2tJbmRleCkge1xyXG4gICAgICAgIGNvbnN0IHJhbmRvbU51bWJlciA9IFV0aWxzLmdldFJhbmRvbU51bWJlcigxLCAzKS50b1N0cmluZygpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUZlZWRiYWNrQXVkaW9zKGZhbHNlLCBBVURJT19QQVRIX0VBVFMsIEFVRElPX1BBVEhfQ0hFRVJJTkdfRlVOQyhyYW5kb21OdW1iZXIpLCBBVURJT19QQVRIX1BPSU5UU19BREQsIFV0aWxzLmdldENvbnZlcnRlZERldlByb2RVUkwodGhpcy5mZWVkYmFja0F1ZGlvc1tmZWVkQmFja0luZGV4XSkpO1xyXG4gICAgICAgIC8vIHRvIHBsYXkgdGhlIGF1ZGlvIHBhcnJhbGxlbHkuXHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpby5wbGF5KCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCIuLi9ldmVudHMvRXZlbnRNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIi4vYXVkaW8tcGxheWVyXCI7XHJcbmV4cG9ydCBjbGFzcyBUaW1lclRpY2tpbmcgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICB0aW1lcldpZHRoO1xyXG4gICAgdGltZXJIZWlnaHQ7XHJcbiAgICB3aWR0aFRvQ2xlYXI7XHJcbiAgICB0aW1lcjtcclxuICAgIGlzVGltZXJTdGFydGVkO1xyXG4gICAgaXNUaW1lckVuZGVkO1xyXG4gICAgaXNUaW1lclJ1bm5pbmdPdXQ7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIHRpbWVyX2Z1bGw7XHJcbiAgICBwYXVzZUJ1dHRvbkNsaWNrZWQ7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBjYWxsYmFjaztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgc3RhcnRNeVRpbWVyID0gdHJ1ZTtcclxuICAgIGlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgIGlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIHBsYXlMZXZlbEVuZEF1ZGlvT25jZSA9IHRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGhUb0NsZWFyID0gdGhpcy53aWR0aCAvIDMuNDtcclxuICAgICAgICB0aGlzLnRpbWVySGVpZ2h0ID0gMTEyO1xyXG4gICAgICAgIHRoaXMudGltZXJXaWR0aCA9IDg4ODtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnRpbWVyID0gMDtcclxuICAgICAgICB0aGlzLmlzVGltZXJTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1RpbWVyRW5kZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzVGltZXJSdW5uaW5nT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgdGltZXJfZW1wdHk6IFwiLi9hc3NldHMvaW1hZ2VzL3RpbWVyX2VtcHR5LnBuZ1wiLFxyXG4gICAgICAgICAgICByb3RhdGluZ19jbG9jazogXCIuL2Fzc2V0cy9pbWFnZXMvdGltZXIucG5nXCIsXHJcbiAgICAgICAgICAgIHRpbWVyX2Z1bGw6IFwiLi9hc3NldHMvaW1hZ2VzL3RpbWVyX2Z1bGwucG5nXCJcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGFydFRpbWVyKCkge1xyXG4gICAgICAgIC8vIGl0IHdpbGwgc3RhcnQgdGltZXIgaW1tZWRpYXRseVxyXG4gICAgICAgIHRoaXMucmVhZHlUaW1lcigpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRNeVRpbWVyID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJlYWR5VGltZXIoKSB7XHJcbiAgICAgICAgLy8gbWFrZSB0aW1lciBsb29rIGZ1bGwgc28gYXMgaXQgZ2V0IHN0YXJ0IHNpZ25hbC4uLi4uIGl0IHdpbGwgc3RhcnQgZGVjcmVhc2luZ1xyXG4gICAgICAgIHRoaXMudGltZXIgPSAwO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0TXlUaW1lciAmJiAhdGhpcy5pc1N0b25lRHJvcHBlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyICs9IGRlbHRhVGltZSAqIDAuMDA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5mbG9vcih0aGlzLndpZHRoICogMC44NyAtICh0aGlzLndpZHRoICogMC44NyAqIHRoaXMudGltZXIgKiAwLjAxKSkgPT0gNDAgJiYgIXRoaXMuaXNNeVRpbWVyT3Zlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlMZXZlbEVuZEF1ZGlvT25jZSA/IHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKCcuL2Fzc2V0cy9hdWRpb3MvdGltZW91dC5tcDMnKSA6IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICgodGhpcy53aWR0aCAqIDAuODcgLSAodGhpcy53aWR0aCAqIDAuODcgKiB0aGlzLnRpbWVyICogMC4wMSkpIDwgMCAmJiAhdGhpcy5pc015VGltZXJPdmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNNeVRpbWVyT3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2sodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy50aW1lcl9lbXB0eSwgMCwgdGhpcy5oZWlnaHQgKiAwLjEsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC4wNSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMucm90YXRpbmdfY2xvY2ssIDUsIHRoaXMuaGVpZ2h0ICogMC4wOSwgdGhpcy53aWR0aCAqIDAuMTIsIHRoaXMuaGVpZ2h0ICogMC4wNik7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMudGltZXJfZnVsbCwgMCwgMCwgdGhpcy50aW1lcldpZHRoIC0gKHRoaXMudGltZXJXaWR0aCAqIHRoaXMudGltZXIgKiAwLjAxKSwgdGhpcy50aW1lckhlaWdodCwgdGhpcy53aWR0aCAqIDAuMTQsIHRoaXMuaGVpZ2h0ICogMC4wOTksIHRoaXMud2lkdGggKiAwLjg3IC0gKHRoaXMud2lkdGggKiAwLjg3ICogdGhpcy50aW1lciAqIDAuMDEpLCB0aGlzLmhlaWdodCAqIDAuMDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcChldmVudCkge1xyXG4gICAgICAgIHRoaXMuaXNTdG9uZURyb3BwZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZFB1enpsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWVyKCk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBjcmVhdGVSaXBwbGVFZmZlY3QgfSBmcm9tIFwiLi4vY29tbW9uL3V0aWxzXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCIuLi9kYXRhL2dhbWUtc2NvcmVcIjtcclxuZXhwb3J0IGNsYXNzIFR1dG9yaWFsIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgY29udGV4dDtcclxuICAgIHR1dG9yaWFsSW1nO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICB0YXJnZXRTdG9uZVBvc2l0aW9ucztcclxuICAgIHN0YXJ0eDtcclxuICAgIHN0YXJ0eTtcclxuICAgIGVuZHg7XHJcbiAgICBlbmR5O1xyXG4gICAgZW5kVHV0b3JpYWwgPSBmYWxzZTtcclxuICAgIHB1enpsZU51bWJlcjtcclxuICAgIHBsYXlNbnN0ckNsa1R0cmxBbmltID0gdHJ1ZTtcclxuICAgIHRvdGFsVGltZSA9IDA7XHJcbiAgICBtb25zdGVyU3RvbmVEaWZmZXJlbmNlID0gMDtcclxuICAgIHg7XHJcbiAgICB5O1xyXG4gICAgZHg7XHJcbiAgICBkeTtcclxuICAgIGFic2R4O1xyXG4gICAgYWJzZHk7XHJcbiAgICBzdGFydFJpcHBsZSA9IGZhbHNlO1xyXG4gICAgZHJhd1JpcHBsZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIHB1enpsZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuc3RhcnR4ID0gMDtcclxuICAgICAgICB0aGlzLnN0YXJ0eSA9IDA7XHJcbiAgICAgICAgdGhpcy5lbmR4ID0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICAgICAgdGhpcy5lbmR5ID0gdGhpcy5oZWlnaHQgLyAyO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gKHB1enpsZU51bWJlciA+PSAwKSA/IHB1enpsZU51bWJlciA6IG51bGw7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbEltZyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWxJbWcuc3JjID0gXCIuL2Fzc2V0cy9pbWFnZXMvdHV0b3JpYWxfaGFuZC5wbmdcIjtcclxuICAgICAgICB0aGlzLmRyYXdSaXBwbGUgPSBjcmVhdGVSaXBwbGVFZmZlY3QodGhpcy5jb250ZXh0KTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsSW1nLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICB1cGRhdGVUYXJnZXRTdG9uZVBvc2l0aW9ucyh0YXJnZXRTdG9uZVBvc2l0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydHggPSB0YXJnZXRTdG9uZVBvc2l0aW9uWzBdIC0gMjI7XHJcbiAgICAgICAgdGhpcy5zdGFydHkgPSB0YXJnZXRTdG9uZVBvc2l0aW9uWzFdIC0gNTA7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyU3RvbmVEaWZmZXJlbmNlID0gTWF0aC5zcXJ0KCh0aGlzLnN0YXJ0eCAtIHRoaXMuZW5keCkgKiAodGhpcy5zdGFydHggLSB0aGlzLmVuZHgpICsgKHRoaXMuc3RhcnR5IC0gdGhpcy5lbmR5KSAqICh0aGlzLnN0YXJ0eSAtIHRoaXMuZW5keSkpO1xyXG4gICAgICAgIHRoaXMuYW5pbWF0ZUltYWdlKCk7XHJcbiAgICB9XHJcbiAgICBpc01vYmlsZSgpIHtcclxuICAgICAgICByZXR1cm4gL0FuZHJvaWR8d2ViT1N8aVBob25lfGlQYWR8aVBvZHxCbGFja0JlcnJ5fElFTW9iaWxlfE9wZXJhIE1pbmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG4gICAgfVxyXG4gICAgc2V0VHV0b3JpYWxFbmQoZW5kVHV0b3JpYWwpIHtcclxuICAgICAgICB0aGlzLmVuZFR1dG9yaWFsID0gZW5kVHV0b3JpYWw7XHJcbiAgICB9XHJcbiAgICBhbmltYXRlSW1hZ2UoKSB7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy5zdGFydHg7XHJcbiAgICAgICAgdGhpcy55ID0gdGhpcy5zdGFydHk7XHJcbiAgICAgICAgdGhpcy5keCA9ICh0aGlzLmVuZHggLSB0aGlzLnN0YXJ0eCkgLyA1MDAwO1xyXG4gICAgICAgIHRoaXMuZHkgPSAodGhpcy5lbmR5IC0gdGhpcy5zdGFydHkpIC8gNTAwMDtcclxuICAgICAgICB0aGlzLmFic2R4ID0gdGhpcy5pc01vYmlsZSgpID8gTWF0aC5hYnModGhpcy5keCkgKiAzIDogTWF0aC5hYnModGhpcy5keCk7XHJcbiAgICAgICAgdGhpcy5hYnNkeSA9IHRoaXMuaXNNb2JpbGUoKSA/IE1hdGguYWJzKHRoaXMuZHkpICogMyA6IE1hdGguYWJzKHRoaXMuZHkpO1xyXG4gICAgICAgIHRoaXMuc2V0VHV0b3JpYWxFbmQoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUsIGltZywgaW1hZ2VTaXplKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkICYmICF0aGlzLmVuZFR1dG9yaWFsICYmIHRoaXMuc2hvdWxkUGxheVR1dG9yaWFsKCkpIHtcclxuICAgICAgICAgICAgdGhpcy54ID1cclxuICAgICAgICAgICAgICAgIHRoaXMuZHggPj0gMFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy54ICsgdGhpcy5hYnNkeCAqIGRlbHRhVGltZVxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy54IC0gdGhpcy5hYnNkeCAqIGRlbHRhVGltZTtcclxuICAgICAgICAgICAgdGhpcy55ID1cclxuICAgICAgICAgICAgICAgIHRoaXMuZHkgPj0gMFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy55ICsgdGhpcy5hYnNkeSAqIGRlbHRhVGltZVxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy55IC0gdGhpcy5hYnNkeSAqIGRlbHRhVGltZTtcclxuICAgICAgICAgICAgY29uc3QgZGlzeCA9IHRoaXMueCAtIHRoaXMuZW5keCArIHRoaXMuYWJzZHg7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3kgPSB0aGlzLnkgLSB0aGlzLmVuZHkgKyB0aGlzLmFic2R5O1xyXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydChkaXN4ICogZGlzeCArIGRpc3kgKiBkaXN5KTtcclxuICAgICAgICAgICAgbGV0IG1vbnN0ZXJTdG9uZURpZmZlcmVuY2VJblBlcmNlbnRhZ2UgPSAoMTAwICogZGlzdGFuY2UgLyB0aGlzLm1vbnN0ZXJTdG9uZURpZmZlcmVuY2UpO1xyXG4gICAgICAgICAgICBpZiAobW9uc3RlclN0b25lRGlmZmVyZW5jZUluUGVyY2VudGFnZSA8IDE1KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobW9uc3RlclN0b25lRGlmZmVyZW5jZUluUGVyY2VudGFnZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUhhbmRTY2FsZUFuaW1hdGlvbihkZWx0YVRpbWUsIHRoaXMuZW5keCwgdGhpcy5lbmR5ICsgMzAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy54ID0gdGhpcy5zdGFydHg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55ID0gdGhpcy5zdGFydHk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAobW9uc3RlclN0b25lRGlmZmVyZW5jZUluUGVyY2VudGFnZSA+IDgwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUhhbmRTY2FsZUFuaW1hdGlvbihkZWx0YVRpbWUsIHRoaXMuc3RhcnR4ICsgMTUsIHRoaXMuc3RhcnR5ICsgMTAsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBwcmV2aW91c0FscGhhID0gdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gMC40O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZShpbWcsIHRoaXMueCwgdGhpcy55ICsgMjAsIGltYWdlU2l6ZSwgaW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbG9iYWxBbHBoYSA9IHByZXZpb3VzQWxwaGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMudHV0b3JpYWxJbWcsIHRoaXMueCArIDE1LCB0aGlzLnkgKyAxMCk7IC8vZHJhd3MgdGhlIGhhbmQgc3RvbmUgZHJhZyBhbmltYXRpb24hXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjcmVhdGVIYW5kU2NhbGVBbmltYXRpb24oZGVsdGFUaW1lLCBvZmZzZXRYLCBvZmZzZXRZLCBzaG91bGRDcmVhdGVSaXBwbGUpIHtcclxuICAgICAgICB0aGlzLnRvdGFsVGltZSArPSBNYXRoLmZsb29yKGRlbHRhVGltZSk7XHJcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gNTAwO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gdGhpcy5zaW51c29pZGFsSW50ZXJwb2xhdGlvbih0aGlzLnRvdGFsVGltZSwgMSwgMS41LCB0cmFuc2l0aW9uRHVyYXRpb24pO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gdGhpcy50dXRvcmlhbEltZy53aWR0aCAqIHNjYWxlRmFjdG9yO1xyXG4gICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0ICogc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnR1dG9yaWFsSW1nLCBvZmZzZXRYLCBvZmZzZXRZLCBzY2FsZWRXaWR0aCwgc2NhbGVkSGVpZ2h0KTtcclxuICAgICAgICBzaG91bGRDcmVhdGVSaXBwbGUgPyAobnVsbCkgOiAodGhpcy5kcmF3UmlwcGxlKG9mZnNldFggKyB0aGlzLndpZHRoICogMC4wMiwgb2Zmc2V0WSArIHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0IC8gMiwgZmFsc2UpKTtcclxuICAgIH1cclxuICAgIHNpbnVzb2lkYWxJbnRlcnBvbGF0aW9uKHRpbWUsIG1pblNjYWxlLCBtYXhTY2FsZSwgZHVyYXRpb24pIHtcclxuICAgICAgICBjb25zdCBhbXBsaXR1ZGUgPSAobWF4U2NhbGUgLSBtaW5TY2FsZSkgLyAyO1xyXG4gICAgICAgIGNvbnN0IGZyZXF1ZW5jeSA9IE1hdGguUEkgLyBkdXJhdGlvbjtcclxuICAgICAgICByZXR1cm4gbWluU2NhbGUgKyBhbXBsaXR1ZGUgKiBNYXRoLnNpbihmcmVxdWVuY3kgKiB0aW1lKTtcclxuICAgIH1cclxuICAgIGNsaWNrT25Nb25zdGVyVHV0b3JpYWwoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkUGxheU1vbnN0ZXJDbGlja1R1dG9yaWFsQW5pbWF0aW9uKCkpIHtcclxuICAgICAgICAgICAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9uID0gMjAwMDtcclxuICAgICAgICAgICAgY29uc3QgYm90dG9tUG9zaXRpb24gPSB0aGlzLmhlaWdodCAvIDEuOSArICh0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDAuOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcFBvc2l0aW9uID0gdGhpcy5oZWlnaHQgLyAxLjkgKyAodGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAwLjgpIC0gdGhpcy50dXRvcmlhbEltZy5oZWlnaHQ7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50T2Zmc2V0WTtcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WCA9IHRoaXMuZW5keDtcclxuICAgICAgICAgICAgaWYgKHRoaXMudG90YWxUaW1lIDwgdHJhbnNpdGlvbkR1cmF0aW9uIC8gMikge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE9mZnNldFkgPSB0b3BQb3NpdGlvbiArICh0aGlzLnRvdGFsVGltZSAvICh0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSkgKiAoYm90dG9tUG9zaXRpb24gLSB0b3BQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdSaXBwbGUob2Zmc2V0WCwgdGhpcy5oZWlnaHQgLyAxLjkgKyAodGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAxLjUpLCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRPZmZzZXRZID0gYm90dG9tUG9zaXRpb24gLSAoKHRoaXMudG90YWxUaW1lIC0gdHJhbnNpdGlvbkR1cmF0aW9uIC8gMikgLyAodHJhbnNpdGlvbkR1cmF0aW9uIC8gMikpICogKGJvdHRvbVBvc2l0aW9uIC0gdG9wUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3UmlwcGxlKG9mZnNldFgsIHRoaXMuaGVpZ2h0IC8gMS45ICsgKHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0IC8gMS4yKSArIHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMudHV0b3JpYWxJbWcsIG9mZnNldFgsIGN1cnJlbnRPZmZzZXRZLCB0aGlzLnR1dG9yaWFsSW1nLndpZHRoLCB0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50T2Zmc2V0WSA8PSB0b3BQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbFRpbWUgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudG90YWxUaW1lICs9IGRlbHRhVGltZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG91bGRQbGF5VHV0b3JpYWwoKSB7XHJcbiAgICAgICAgbGV0IHBsYXlEcmFnQW5pbWF0aW9uRm9yRmlyc3RQdXp6bGUgPSBHYW1lU2NvcmUuZ2V0QWxsR2FtZUxldmVsSW5mbygpLmxlbmd0aCA8PSAwICYmIHRoaXMucHV6emxlTnVtYmVyID09IDA7XHJcbiAgICAgICAgcmV0dXJuIHBsYXlEcmFnQW5pbWF0aW9uRm9yRmlyc3RQdXp6bGU7XHJcbiAgICB9XHJcbiAgICBzaG91bGRQbGF5TW9uc3RlckNsaWNrVHV0b3JpYWxBbmltYXRpb24oKSB7XHJcbiAgICAgICAgbGV0IHBsYXlEcmFnQW5pbWF0aW9uRm9yRmlyc3RQdXp6bGUgPSBHYW1lU2NvcmUuZ2V0QWxsR2FtZUxldmVsSW5mbygpLmxlbmd0aCA8PSAwICYmIHRoaXMucGxheU1uc3RyQ2xrVHRybEFuaW07XHJcbiAgICAgICAgcmV0dXJuIHBsYXlEcmFnQW5pbWF0aW9uRm9yRmlyc3RQdXp6bGU7XHJcbiAgICB9XHJcbiAgICBzZXRQdXp6bGVOdW1iZXIocHV6emxlTnVtZXIpIHtcclxuICAgICAgICB0aGlzLnB1enpsZU51bWJlciA9IHB1enpsZU51bWVyO1xyXG4gICAgfVxyXG4gICAgc2V0UGxheU1vbnN0ZXJDbGlja0FuaW1hdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMucGxheU1uc3RyQ2xrVHRybEFuaW0gPSB2YWx1ZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBzeW5jTG9hZGluZ0ltYWdlcyB9IGZyb20gJy4uLy4uL2NvbW1vbi8nO1xyXG5pbXBvcnQgeyBERUZBVUxUX0JHX0dST1VQX0lNR1MsIEFVVFVNTl9CR19HUk9VUF9JTUdTLCBXSU5URVJfQkdfR1JPVVBfSU1HUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy8nO1xyXG5leHBvcnQgY29uc3QgQkFDS0dST1VORF9BU1NFVF9MSVNUID0ge1xyXG4gICAgc3VtbWVyOiB7IEJHX0dST1VQX0lNR1M6IERFRkFVTFRfQkdfR1JPVVBfSU1HUywgZHJhdzogZGVmYXVsdEJnRHJhd2luZyB9LFxyXG4gICAgYXV0dW1uOiB7IEJHX0dST1VQX0lNR1M6IEFVVFVNTl9CR19HUk9VUF9JTUdTLCBkcmF3OiBhdXR1bUJnRHJhd2luZyB9LFxyXG4gICAgd2ludGVyOiB7IEJHX0dST1VQX0lNR1M6IFdJTlRFUl9CR19HUk9VUF9JTUdTLCBkcmF3OiB3aW50ZXJCZ0RyYXdpbmcgfSxcclxufTtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUJhY2tncm91bmQoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmFja2dyb3VuZEltZywgZHJhd01ldGhvZCkge1xyXG4gICAgY29uc3QgbG9hZGVkSW1hZ2VzID0geyAuLi5hd2FpdCBzeW5jTG9hZGluZ0ltYWdlcyhiYWNrZ3JvdW5kSW1nKSB9O1xyXG4gICAgY29uc3Qgb2JqID0ge1xyXG4gICAgICAgIC4uLmRyYXdNZXRob2QoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgbG9hZGVkSW1hZ2VzKVxyXG4gICAgfTtcclxuICAgIHJldHVybiAoeyAuLi5vYmogfSk7XHJcbn1cclxuO1xyXG5leHBvcnQgY29uc3QgbG9hZER5bmFtaWNCZ0Fzc2V0cyA9IChsZXZlbE51bWJlciwgYXNzZXRzTGlzdCkgPT4ge1xyXG4gICAgY29uc3QgYXJyID0gT2JqZWN0LmtleXMoYXNzZXRzTGlzdCk7IC8vYXZhaWxhYmxlQmFja2dyb3VuZFR5cGVzXHJcbiAgICBsZXQgYmFja2dyb3VuZFR5cGUgPSBNYXRoLmZsb29yKGxldmVsTnVtYmVyIC8gMTApICUgYXJyLmxlbmd0aDtcclxuICAgIGlmIChsZXZlbE51bWJlciA+PSAzMCkge1xyXG4gICAgICAgIGJhY2tncm91bmRUeXBlID0gYmFja2dyb3VuZFR5cGUgJSAzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgLi4uYXNzZXRzTGlzdFthcnJbYmFja2dyb3VuZFR5cGVdXSB9O1xyXG59O1xyXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdEJnRHJhd2luZyhjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiZ0ltYWdlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkcmF3OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzPy5ERUZBVUxUX0JBQ0tHUk9VTkRfMSwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzPy5QSUxMQVJfSU1BR0VfMSwgd2lkdGggKiAwLjYsIGhlaWdodCAvIDYsIHdpZHRoLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkZFTkNFX0lNQUdFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gMywgd2lkdGgsIGhlaWdodCAvIDMpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uSElMTF9JTUFHRV8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiBhdXR1bUJnRHJhd2luZyhjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiZ0ltYWdlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkcmF3OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzLkFVVFVNTl9CQUNLR1JPVU5EXzEsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fUElMTEFSXzEsIHdpZHRoICogMC4zOCwgaGVpZ2h0IC8gNiwgd2lkdGggLyAxLjIsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fRkVOQ0VfMSwgLXdpZHRoICogMC40LCBoZWlnaHQgLyA0LCB3aWR0aCwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzLkFVVFVNTl9ISUxMXzEsIC13aWR0aCAqIDAuMjUsIGhlaWdodCAvIDIsIHdpZHRoICogMS41LCBoZWlnaHQgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbjtcclxuZXhwb3J0IGZ1bmN0aW9uIHdpbnRlckJnRHJhd2luZyhjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiZ0ltYWdlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkcmF3OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzLldJTlRFUl9CQUNLR1JPVU5EXzEsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfUElMTEFSXzEsIHdpZHRoICogMC4zOCwgaGVpZ2h0IC8gNiwgd2lkdGggLyAxLjIsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfRkVOQ0VfMSwgLXdpZHRoICogMC40LCBoZWlnaHQgLyA0LCB3aWR0aCwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzLldJTlRFUl9ISUxMXzEsIC13aWR0aCAqIDAuMjUsIGhlaWdodCAvIDIsIHdpZHRoICogMS41LCBoZWlnaHQgLyAyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbjtcclxuZXhwb3J0IGZ1bmN0aW9uIGxldmVsU2VsZWN0QmdEcmF3aW5nKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGJnSW1hZ2VzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRyYXc6ICgpID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkxFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5ELCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbjtcclxuIiwiZXhwb3J0IGNvbnN0IEZpcmViYXNlVXNlckNsaWNrZWQgPSBcInVzZXJfY2xpY2tlZFwiO1xyXG5leHBvcnQgY29uc3QgRmlyZWJhc2VVc2VySW5zdGFsbCA9IFwidXNlcl9pbnN0YWxsZWRcIjtcclxuZXhwb3J0IGNvbnN0IFBXQUluc3RhbGxTdGF0dXMgPSBcInB3YV9pbnN0YWxsZWRfc3RhdHVzXCI7XHJcbmV4cG9ydCBjb25zdCBVc2VyQ2FuY2VsbGVkID0gXCJ1c2VyX2NhbmNlbF9pbnN0YWxsYXRpb25cIjtcclxuZXhwb3J0IGNvbnN0IE5hdGl2ZVBsYXlCdXR0b24gPSBcIm5hdGl2ZV9wbGF5YnV0dG9uX2NsaWNrZWRcIjtcclxuZXhwb3J0IGNvbnN0IFByZXZpb3VzUGxheWVkTGV2ZWwgPSBcInN0b3JlUHJldmlvdXNQbGF5ZWRMZXZlbFwiO1xyXG5leHBvcnQgY29uc3QgU3RvcmVNb25zdGVyUGhhc2VOdW1iZXIgPSBcInN0b3JlTW9uc3RlclBoYXNlTnVtYmVyXCI7XHJcbmV4cG9ydCBjb25zdCBJc0NhY2hlZCA9IFwiaXNfY2FjaGVkXCI7XHJcbmV4cG9ydCBjb25zdCBNb25zdGVyQXVkaW8gPSBcIm1vbnN0ZXJfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IEZlZWRiYWNrQXVkaW8gPSBcImZlZWRiYWNrX2F1ZGlvXCI7XHJcbmV4cG9ydCBjb25zdCBJbnRyb011c2ljID0gXCJpbnRyb19tdXNpY1wiO1xyXG5leHBvcnQgY29uc3QgUHJvbXB0QXVkaW8gPSBcInByb21wdF9hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgQnV0dG9uQ2xpY2sgPSBcImJ1dHRvbl9jbGlja1wiO1xyXG5leHBvcnQgY29uc3QgVGltZU92ZXIgPSBcInRpbWVfb3ZlclwiO1xyXG5leHBvcnQgY29uc3QgU3RvbmVNdXNpYyA9IFwic3RvbmVfbXVzaWNcIjtcclxuZXhwb3J0IGNvbnN0IFBocmFzZUF1ZGlvID0gXCJwaHJhc2VfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IExldmVsRW5kQXVkaW8gPSBcImxldmVsX2VuZF9hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgVXJsU3Vic3RyaW5nID0gXCIvZmVlZHRoZW1vbnN0ZXJcIjtcclxuZXhwb3J0IGNvbnN0IERldmVsb3BtZW50U2VydmVyID0gXCJodHRwczovL2ZlZWR0aGVtb25zdGVyZGV2LmN1cmlvdXNjb250ZW50Lm9yZ1wiO1xyXG5leHBvcnQgY29uc3QgU3RhcnRTY2VuZTEgPSBcIlN0YXJ0U2NlbmUxXCI7XHJcbmV4cG9ydCBjb25zdCBMZXZlbFNlbGVjdGlvbjEgPSBcIkxldmVsU2VsZWN0aW9uMVwiO1xyXG5leHBvcnQgY29uc3QgR2FtZVNjZW5lMSA9IFwiR2FtZVNjZW5lMVwiO1xyXG5leHBvcnQgY29uc3QgRW5kU2NlbmUxID0gXCJFbmRTY2VuZTFcIjtcclxuLy9BdWRpbyBwYXRoc1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9FQVRTID0gXCIuL2Fzc2V0cy9hdWRpb3MvRWF0Lm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9NT05TVEVSX1NQSVQgPSBcIi4vYXNzZXRzL2F1ZGlvcy9Nb25zdGVyU3BpdC5tcDNcIjtcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfTU9OU1RFUl9ESVNTQVBPSU5URUQgPSBcIi4vYXNzZXRzL2F1ZGlvcy9EaXNhcG9pbnRlZC0wNS5tcDNcIjtcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfUE9JTlRTX0FERCA9IFwiYXNzZXRzL2F1ZGlvcy9Qb2ludHNBZGQud2F2XCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX0NPUlJFQ1RfU1RPTkUgPSBcImFzc2V0cy9hdWRpb3MvQ29ycmVjdFN0b25lRmluYWwubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMgPSAocmFuZG9tTnVtYmVyKSA9PiBgLi9hc3NldHMvYXVkaW9zL0NoZWVyaW5nLTAke3JhbmRvbU51bWJlcn0ubXAzYDtcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfQlROX0NMSUNLID0gXCIuL2Fzc2V0cy9hdWRpb3MvQnV0dG9uQ2xpY2subXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX09OX0RSQUcgPSBcIi4vYXNzZXRzL2F1ZGlvcy9vbkRyYWcubXAzXCI7XHJcbi8vSW1hZ2UgcGF0aHNcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX1NUT05FX1BJTktfQkcgPSBcIi4vYXNzZXRzL2ltYWdlcy9zdG9uZV9waW5rX3YwMi5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX1RPVEVNID0gXCIuL2Fzc2V0cy9pbWFnZXMvVG90ZW1fdjAyX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0JHXzAxID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmdfdjAxLmpwZ1wiO1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfSElMTCA9IFwiLi9hc3NldHMvaW1hZ2VzL2hpbGxfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfRkVOQ0UgPSBcIi4vYXNzZXRzL2ltYWdlcy9mZW5jZV92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUgPSBcIi4vYXNzZXRzL2ltYWdlcy9pZGxlNC5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQkFDS0dST1VORF8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmdfdjAxLmpwZ1wiO1xyXG5leHBvcnQgY29uc3QgSElMTF9JTUFHRV8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvaGlsbF92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBQSUxMQVJfSU1BR0VfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1RvdGVtX3YwMl92MDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBGRU5DRV9JTUFHRV8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvZmVuY2VfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX0JBQ0tHUk9VTkRfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL0F1dHVtbl9iZ192MDEuanBnXCI7XHJcbmV4cG9ydCBjb25zdCBBVVRVTU5fSElMTF8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvQXV0dW1uX2hpbGxfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX1BJTExBUl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvQXV0dW1uX3NpZ25fdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX1NJR05fMSA9IFwiLi9hc3NldHMvaW1hZ2VzL0F1dHVtbl9zaWduX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9GRU5DRV8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvQXV0dW1uX2ZlbmNlX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9CQUNLR1JPVU5EXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfYmdfMDEuanBnXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfSElMTF8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX2hpbGxfdjAxLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgV0lOVEVSX1NJR05fMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1dpbnRlcl9zaWduX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9GRU5DRV8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX2ZlbmNlX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9QSUxMQVJfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1dpbnRlcl9zaWduX3YwMS5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IExFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5EID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwLmpwZ1wiO1xyXG4vL0JhY2tncm91bmQgR3JvdXAgSW1hZ2VzXHJcbmV4cG9ydCBjb25zdCBHQU1FUExBWV9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgQVNTRVRTX1BBVEhfVE9URU0sXHJcbiAgICBBU1NFVFNfUEFUSF9CR18wMSxcclxuICAgIEFTU0VUU19QQVRIX0hJTEwsXHJcbiAgICBBU1NFVFNfUEFUSF9GRU5DRSxcclxuICAgIEFTU0VUU19QQVRIX01PTlNURVJfSURMRVxyXG59O1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICBISUxMX0lNQUdFXzEsXHJcbiAgICBQSUxMQVJfSU1BR0VfMSxcclxuICAgIEZFTkNFX0lNQUdFXzFcclxufTtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgQVVUVU1OX0JBQ0tHUk9VTkRfMSxcclxuICAgIEFVVFVNTl9ISUxMXzEsXHJcbiAgICBBVVRVTU5fUElMTEFSXzEsXHJcbiAgICBBVVRVTU5fU0lHTl8xLFxyXG4gICAgQVVUVU1OX0ZFTkNFXzFcclxufTtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgV0lOVEVSX0JBQ0tHUk9VTkRfMSxcclxuICAgIFdJTlRFUl9ISUxMXzEsXHJcbiAgICBXSU5URVJfU0lHTl8xLFxyXG4gICAgV0lOVEVSX0ZFTkNFXzEsXHJcbiAgICBXSU5URVJfUElMTEFSXzFcclxufTtcclxuLy9TY2VuZSBOYW1lc1xyXG5leHBvcnQgY29uc3QgU0NFTkVfTkFNRV9TVEFSVCA9IFwiU3RhcnRTY2VuZVwiO1xyXG5leHBvcnQgY29uc3QgU0NFTkVfTkFNRV9MRVZFTF9TRUxFQ1QgPSBcIkxldmVsU2VsZWN0aW9uXCI7XHJcbmV4cG9ydCBjb25zdCBTQ0VORV9OQU1FX0dBTUVfUExBWSA9IFwiR2FtZVBsYXlcIjtcclxuZXhwb3J0IGNvbnN0IFNDRU5FX05BTUVfTEVWRUxfRU5EID0gXCJMZXZlbEVuZFwiO1xyXG4iLCJpbXBvcnQgeyBsYW5nIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGNvbnN0IFVSTCA9IFwiLi9sYW5nL1wiICsgbGFuZyArIFwiL2Z0bV9cIiArIGxhbmcgKyBcIi5qc29uXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRGdG1EYXRhKCkge1xyXG4gICAgcmV0dXJuIGZldGNoKFVSTCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJHRVRcIixcclxuICAgICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgIH0sXHJcbiAgICB9KS50aGVuKChyZXMpID0+IHJlcy5qc29uKCkudGhlbigoZGF0YSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfSkpO1xyXG59XHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREYXRhKCkge1xyXG4gICAgLy8gbGV0IGQgPSB7XHJcbiAgICAvLyAgICAgXCJPdGhlckF1ZGlvc1wiOiBudWxsLFxyXG4gICAgLy8gICAgIFwiRmVlZGJhY2tUZXh0c1wiOiBudWxsLFxyXG4gICAgLy8gICAgIFwiTGV2ZWxzXCI6IG51bGwsXHJcbiAgICAvLyAgICAgXCJGZWVkYmFja0F1ZGlvc1wiOiBudWxsLFxyXG4gICAgLy8gICAgIFwiUmlnaHRUb0xlZnRcIjogbnVsbFxyXG4gICAgLy8gfVxyXG4gICAgcmV0dXJuIGF3YWl0IGdldEZ0bURhdGEoKTtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgRGF0YU1vZGFsIHtcclxuICAgIHRpdGxlO1xyXG4gICAgb3RoZXJBdWRpb3M7XHJcbiAgICBsZXZlbHM7XHJcbiAgICBGZWVkYmFja1RleHRzO1xyXG4gICAgRmVlZGJhY2tBdWRpb3M7XHJcbiAgICByaWdodFRvTGVmdDtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgdmVyc2lvbjtcclxuICAgIGNvbnN0cnVjdG9yKHRpdGxlLCBvdGhlckF1ZGlvcywgbGV2ZWxzLCBmZWVkYmFja1RleHRzLCByaWdodFRvTGVmdCwgZmVlZGJhY2tBdWRpb3MsIG1halZlcnNpb24sIG1pblZlcnNpb24sIHZlcnNpb24pIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5vdGhlckF1ZGlvcyA9IG5ldyBPdGhlckF1ZGlvcyhvdGhlckF1ZGlvcyk7XHJcbiAgICAgICAgdGhpcy5sZXZlbHMgPSB0aGlzLmdldExldmVscyhsZXZlbHMpO1xyXG4gICAgICAgIHRoaXMuRmVlZGJhY2tUZXh0cyA9IG5ldyBGZWVkYmFja1RleHRzKGZlZWRiYWNrVGV4dHMpO1xyXG4gICAgICAgIHRoaXMuRmVlZGJhY2tBdWRpb3MgPSBuZXcgRmVlZGJhY2tBdWRpb3MoZmVlZGJhY2tBdWRpb3MpO1xyXG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgPSByaWdodFRvTGVmdDtcclxuICAgICAgICB0aGlzLm1halZlcnNpb24gPSBtYWpWZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IG1pblZlcnNpb247XHJcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcclxuICAgIH1cclxuICAgIGdldExldmVscyhsZXZlbHMpIHtcclxuICAgICAgICBsZXQgbGV2ZWxBcnJheSA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGV2ZWxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldmVsQXJyYXkucHVzaChuZXcgTGV2ZWxzKGxldmVsc1tpXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGV2ZWxBcnJheTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgT3RoZXJBdWRpb3Mge1xyXG4gICAgc2VsY3RZb3VyUGxheWVyO1xyXG4gICAgd2F0Y2hNZUdyb3c7XHJcbiAgICBhcmVZb3VTdXJlO1xyXG4gICAgY29uc3RydWN0b3Iob3RoZXJBdWRpb3MpIHtcclxuICAgICAgICB0aGlzLnNlbGN0WW91clBsYXllciA9IG90aGVyQXVkaW9zW1wiU2VsZWN0IHlvdXIgcGxheWVyXCJdO1xyXG4gICAgICAgIHRoaXMud2F0Y2hNZUdyb3cgPSBvdGhlckF1ZGlvc1tcIldhdGNoIG1lIGdyb3dcIl07XHJcbiAgICAgICAgdGhpcy5hcmVZb3VTdXJlID0gb3RoZXJBdWRpb3NbXCJBcmUgeW91IHN1cmVcIl07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZlZWRiYWNrVGV4dHMge1xyXG4gICAgZmFudGFzdGljO1xyXG4gICAgZ3JlYXQ7XHJcbiAgICBhbWF6aW5nO1xyXG4gICAgY29uc3RydWN0b3IoZmVlZGJhY2tUZXh0cykge1xyXG4gICAgICAgIGlmIChmZWVkYmFja1RleHRzLmxlbmd0aCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFudGFzdGljID0gZmVlZGJhY2tUZXh0c1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZlZWRiYWNrVGV4dHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmVhdCA9IGZlZWRiYWNrVGV4dHNbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmZWVkYmFja1RleHRzLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW1hemluZyA9IGZlZWRiYWNrVGV4dHNbMl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGZWVkYmFja0F1ZGlvcyB7XHJcbiAgICBmYW50YXN0aWM7XHJcbiAgICBncmVhdDtcclxuICAgIGFtYXppbmc7XHJcbiAgICBjb25zdHJ1Y3RvcihmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIGlmIChmZWVkYmFja0F1ZGlvcy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmZhbnRhc3RpYyA9IGZlZWRiYWNrQXVkaW9zWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmVlZGJhY2tBdWRpb3MubGVuZ3RoID49IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmVhdCA9IGZlZWRiYWNrQXVkaW9zWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmVlZGJhY2tBdWRpb3MubGVuZ3RoID49IDMpIHtcclxuICAgICAgICAgICAgdGhpcy5hbWF6aW5nID0gZmVlZGJhY2tBdWRpb3NbMl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBMZXZlbHMge1xyXG4gICAgcHV6emxlcztcclxuICAgIGxldmVsTWV0YTtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IobGV2ZWxzKSB7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVzID0gdGhpcy5nZXRQdXp6bGVEYXRhKGxldmVscyk7XHJcbiAgICAgICAgdGhpcy5sZXZlbE1ldGEgPSBuZXcgTGV2ZWxNZXRhKGxldmVscy5MZXZlbE1ldGEpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxOdW1iZXIgPSBsZXZlbHMuTGV2ZWxOdW1iZXI7XHJcbiAgICB9XHJcbiAgICBnZXRQdXp6bGVEYXRhKGxldmVscykge1xyXG4gICAgICAgIGxldCBwdXp6bGVPYmplY3RzID0gW107XHJcbiAgICAgICAgbGV2ZWxzLlB1enpsZXMubWFwKChwdXp6bGVEYXRhLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBwdXp6bGVPYmplY3RzLnB1c2gobmV3IFB1enpsZXMocHV6emxlRGF0YSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBwdXp6bGVPYmplY3RzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQdXp6bGVzIHtcclxuICAgIHNlZ21lbnROdW1iZXI7XHJcbiAgICBwcm9tcHQ7XHJcbiAgICBmb2lsU3RvbmVzO1xyXG4gICAgdGFyZ2V0U3RvbmVzO1xyXG4gICAgY29uc3RydWN0b3IocHV6emxlKSB7XHJcbiAgICAgICAgdGhpcy5zZWdtZW50TnVtYmVyID0gcHV6emxlLlNlZ21lbnROdW1iZXI7XHJcbiAgICAgICAgdGhpcy5wcm9tcHQgPSBuZXcgUHJvbXB0KHB1enpsZS5wcm9tcHQpO1xyXG4gICAgICAgIHRoaXMuZm9pbFN0b25lcyA9IHRoaXMuZ2V0Rm9pbFN0b25lcyhwdXp6bGUpO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gdGhpcy5nZXRUYXJnZXRTdG9uZXMocHV6emxlKTtcclxuICAgIH1cclxuICAgIGdldEZvaWxTdG9uZXMocHV6emxlKSB7XHJcbiAgICAgICAgbGV0IGZvaWxTdG9uZUFycmF5ID0gW107XHJcbiAgICAgICAgcHV6emxlLmZvaWxzdG9uZXMubWFwKChzdG9uZXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGZvaWxTdG9uZUFycmF5LnB1c2goc3RvbmVzLlN0b25lVGV4dCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGZvaWxTdG9uZUFycmF5O1xyXG4gICAgfVxyXG4gICAgZ2V0VGFyZ2V0U3RvbmVzKHB1enpsZSkge1xyXG4gICAgICAgIGxldCB0YXJnZXRTdG9uZUFycmF5ID0gW107XHJcbiAgICAgICAgcHV6emxlLnRhcmdldHN0b25lcy5tYXAoKHN0b25lcywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgdGFyZ2V0U3RvbmVBcnJheS5wdXNoKHN0b25lcy5TdG9uZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0YXJnZXRTdG9uZUFycmF5O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGb2lsU3RvbmUge1xyXG4gICAgc3RvbmVUZXh0O1xyXG4gICAgY29uc3RydWN0b3Ioc3RvbmVUZXh0KSB7XHJcbiAgICAgICAgdGhpcy5zdG9uZVRleHQgPSBzdG9uZVRleHQ7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIFRhcmdldFN0b25lIHtcclxuICAgIHN0b25lVGV4dDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuc3RvbmVUZXh0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBQcm9tcHQge1xyXG4gICAgcHJvbXB0VGV4dDtcclxuICAgIHByb21wdEF1ZGlvO1xyXG4gICAgY29uc3RydWN0b3IocHJvbXB0KSB7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRUZXh0ID0gcHJvbXB0LlByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRBdWRpbyA9IHByb21wdC5Qcm9tcHRBdWRpbztcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTGV2ZWxNZXRhIHtcclxuICAgIHByb21wdEZhZGVPdXQ7XHJcbiAgICBsZXR0ZXJHcm91cDtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgcHJvdG9UeXBlO1xyXG4gICAgbGV2ZWxUeXBlO1xyXG4gICAgY29uc3RydWN0b3IobGV2ZWxNZXRhKSB7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRGYWRlT3V0ID0gbGV2ZWxNZXRhLlByb21wdEZhZGVvdXQ7XHJcbiAgICAgICAgdGhpcy5sZXR0ZXJHcm91cCA9IGxldmVsTWV0YS5MZXR0ZXJHcm91cDtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxNZXRhLkxldmVsTnVtYmVyO1xyXG4gICAgICAgIHRoaXMucHJvdG9UeXBlID0gbGV2ZWxNZXRhLlByb21wdFR5cGU7XHJcbiAgICAgICAgdGhpcy5sZXZlbFR5cGUgPSBsZXZlbE1ldGEuTGV2ZWxUeXBlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyLCBsYW5nIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuZXhwb3J0IGNsYXNzIEdhbWVTY29yZSB7XHJcbiAgICBzdGF0aWMgY3VycmVudGxhbmd1YWdlID0gbGFuZztcclxuICAgIHN0YXRpYyBzZXRHYW1lTGV2ZWxTY29yZShjdXJyZW50TGV2ZWxJbmZvLCBzY29yZSkge1xyXG4gICAgICAgIGxldCBzdGFyc0dhaW5lZCA9IHRoaXMuY2FsY3VsYXRlU3RhckNvdW50KHNjb3JlKTtcclxuICAgICAgICBsZXQgbGV2ZWxQbGF5ZWRJbmZvID0ge1xyXG4gICAgICAgICAgICBsZXZlbE5hbWU6IGN1cnJlbnRMZXZlbEluZm8ubGV2ZWxNZXRhLmxldmVsVHlwZSxcclxuICAgICAgICAgICAgbGV2ZWxOdW1iZXI6IGN1cnJlbnRMZXZlbEluZm8ubGV2ZWxNZXRhLmxldmVsTnVtYmVyLFxyXG4gICAgICAgICAgICBzY29yZTogc2NvcmUsXHJcbiAgICAgICAgICAgIHN0YXJDb3VudDogc3RhcnNHYWluZWQsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnNldFRvdGFsU3RhckNvdW50KHN0YXJzR2FpbmVkKTtcclxuICAgICAgICBsZXQgYWxsR2FtZWxldmVsSW5mbyA9IHRoaXMuZ2V0QWxsR2FtZUxldmVsSW5mbygpO1xyXG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsR2FtZWxldmVsSW5mby5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYWxsR2FtZWxldmVsSW5mb1tpXS5sZXZlbE51bWJlciA9PT0gbGV2ZWxQbGF5ZWRJbmZvLmxldmVsTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaW5kZXggIT09IC0xICYmIGxldmVsUGxheWVkSW5mby5zY29yZSA+IGFsbEdhbWVsZXZlbEluZm9baW5kZXhdLnNjb3JlKSB7XHJcbiAgICAgICAgICAgIGFsbEdhbWVsZXZlbEluZm9baW5kZXhdID0gbGV2ZWxQbGF5ZWRJbmZvO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWxsR2FtZWxldmVsSW5mby5wdXNoKGxldmVsUGxheWVkSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuY3VycmVudGxhbmd1YWdlICsgXCJnYW1lUGxheWVkSW5mb1wiLCBKU09OLnN0cmluZ2lmeShhbGxHYW1lbGV2ZWxJbmZvKSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0QWxsR2FtZUxldmVsSW5mbygpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5jdXJyZW50bGFuZ3VhZ2UgKyBcImdhbWVQbGF5ZWRJbmZvXCIpO1xyXG4gICAgICAgIHJldHVybiBkYXRhID09IHVuZGVmaW5lZCA/IFtdIDogSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBzZXRUb3RhbFN0YXJDb3VudChzdGFyc0dhaW5lZCkge1xyXG4gICAgICAgIGxldCBzdGFyQ291bnQgPSB0aGlzLmdldFRvdGFsU3RhckNvdW50KCk7XHJcbiAgICAgICAgbGV0IHRvdGFsU3RhckNvdW50ID0gc3RhckNvdW50ICsgc3RhcnNHYWluZWQ7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0odGhpcy5jdXJyZW50bGFuZ3VhZ2UgKyBcInRvdGFsU3RhckNvdW50XCIsIHRvdGFsU3RhckNvdW50KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRUb3RhbFN0YXJDb3VudCgpIHtcclxuICAgICAgICBjb25zdCBzdGFyQ291bnQgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmN1cnJlbnRsYW5ndWFnZSArIFwidG90YWxTdGFyQ291bnRcIik7XHJcbiAgICAgICAgcmV0dXJuIHN0YXJDb3VudCA9PSB1bmRlZmluZWQgPyAwIDogcGFyc2VJbnQoc3RhckNvdW50KTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBjYWxjdWxhdGVTdGFyQ291bnQoc2NvcmUpIHtcclxuICAgICAgICByZXR1cm4gc2NvcmUgPT0gMjAwXHJcbiAgICAgICAgICAgID8gMVxyXG4gICAgICAgICAgICA6IHNjb3JlID09IDMwMFxyXG4gICAgICAgICAgICAgICAgPyAyXHJcbiAgICAgICAgICAgICAgICA6IHNjb3JlID09IDQwMFxyXG4gICAgICAgICAgICAgICAgICAgID8gMlxyXG4gICAgICAgICAgICAgICAgICAgIDogc2NvcmUgPT0gNTAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgID8gM1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA6IDA7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RGF0YWZyb21TdG9yYWdlKCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgPyBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGxhbmcgKyBcIlByb2ZpbGVEZWJ1Z1wiKSB8fCBcInt9XCIpXHJcbiAgICAgICAgICAgIDogSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsYW5nICsgXCJQcm9maWxlXCIpIHx8IFwie31cIik7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn1cclxuIiwiY29uc3QgbGFuZ3VhZ2VGb250TWFwcGluZyA9IHtcclxuICAgIGVuZ2xpc2g6IFwiQ29uc29sYXNcIixcclxuICAgIHN3YWhpbGk6IFwiQ29uc29sYXNcIixcclxuICAgIHdvbG9mOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0YWppazogXCJDb25zb2xhc1wiLFxyXG4gICAgbWFyYXRoaTogXCJDb25zb2xhc1wiLFxyXG4gICAgYW1oYXJpYzogXCJDb25zb2xhc1wiLFxyXG4gICAgcHVuamFiaTogXCJDb25zb2xhc1wiLFxyXG4gICAgdGFtaWw6IFwiQ29uc29sYXNcIixcclxuICAgIHNlcGVkaTogXCJDb25zb2xhc1wiLFxyXG4gICAgZ3VqYXJhdGk6IFwiQ29uc29sYXNcIixcclxuICAgIHRlbHVndTogXCJDb25zb2xhc1wiLFxyXG4gICAgdHNvbmdhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBtYWxheTogXCJDb25zb2xhc1wiLFxyXG4gICAgbmRlYmVsZTogXCJDb25zb2xhc1wiLFxyXG4gICAgdmVuZGE6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgc2lzd2F0aTogXCJDb25zb2xhc1wiLFxyXG4gICAgdHN3YW5hOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0aGFpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBmdWxhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBmYXJzaTogXCJDb25zb2xhc1wiLFxyXG4gICAgYnVybWVzZTogXCJDb25zb2xhc1wiLFxyXG4gICAgYmVuZ2FsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgQXplcmJhaWphbmk6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgU2Vzb3RobzogXCJDb25zb2xhc1wiLFxyXG4gICAgR2VvcmdpYW46IFwiQ29uc29sYXNcIixcclxuICAgIEJyYXppbGlhblBvcnR1Z3Vlc2U6IFwiQ29uc29sYXNcIixcclxuICAgIFNvbWFsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgSGF1c2E6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgSWdibzogXCJDb25zb2xhc1wiLFxyXG4gICAgSGF0aWFuQ3Jlb2xlOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBPcm9tbzogXCJDb25zb2xhc1wiLFxyXG4gICAgTHVnYW5kYTogXCJDb25zb2xhc1wiLFxyXG4gICAgWW9ydWJhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBLaG1lcjogXCJDb25zb2xhc1wiLFxyXG4gICAgSmF2YW5lc2U6IFwiQ29uc29sYXNcIixcclxuICAgIFVyZHU6IFwiQ29uc29sYXNcIixcclxuICAgIEtpbnlhcndhbmRhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBTaG9uYTogXCJDb25zb2xhc1wiLFxyXG4gICAgS3VyZGlzaDogXCJDb25zb2xhc1wiLFxyXG4gICAgRnJlbmNoOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBpc2lYaG9zYTogXCJDb25zb2xhc1wiLFxyXG4gICAgQWZyaWthYW5zOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBOZXBhbGk6IFwiQ29uc29sYXNcIixcclxuICAgIFVrcmFpbmlhbjogXCJDb25zb2xhc1wiLFxyXG4gICAgSGluZGk6IFwiQ29uc29sYXNcIixcclxuICAgIFRhZ2Fsb2c6IFwiQ29uc29sYXNcIixcclxuICAgIFZpZXRuYW1lc2U6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgUGFzaHRvOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBUd2k6IFwiTm90b1NhbnMtUmVndWxhclwiLFxyXG4gICAgQXJhYmljOiBcIkFkb2JlLUFyYWJpYy1Cb2xkXCJcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgbGFuZ3VhZ2VGb250TWFwcGluZztcclxuIiwiaW1wb3J0IHsgTE9BRFBVWlpMRSwgU1RPTkVEUk9QIH0gZnJvbSBcIi4uL2NvbW1vbi9ldmVudC1uYW1lc1wiO1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI7XHJcbiAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyO1xyXG4gICAgY29uc3RydWN0b3IoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgdGhpcy5zdG9uZURyb3BDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLnN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihTVE9ORURST1AsIHRoaXMuaGFuZGxlU3RvbmVEcm9wcGVkRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKExPQURQVVpaTEUsIHRoaXMuaGFuZGxlTG9hZFB1enpsZUV2ZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3BwZWRFdmVudCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyKGV2ZW50KTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlRXZlbnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIoZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIHVucmVnaXN0ZXJFdmVudExpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoU1RPTkVEUk9QLCB0aGlzLmhhbmRsZVN0b25lRHJvcHBlZEV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihMT0FEUFVaWkxFLCB0aGlzLmhhbmRsZUxvYWRQdXp6bGVFdmVudCwgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBTdGFydFNjZW5lIH0gZnJvbSBcIi4uL3NjZW5lcy9zdGFydC1zY2VuZVwiO1xyXG5pbXBvcnQgeyBMZXZlbFNlbGVjdGlvblNjcmVlbiB9IGZyb20gXCIuLi9zY2VuZXMvbGV2ZWwtc2VsZWN0aW9uLXNjZW5lXCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgR2FtZXBsYXlTY2VuZSB9IGZyb20gXCIuLi9zY2VuZXMvZ2FtZXBsYXktc2NlbmVcIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIi4uL2RhdGEvZ2FtZS1zY29yZVwiO1xyXG5pbXBvcnQgeyBMb2FkaW5nU2NlbmUgfSBmcm9tIFwiLi4vc2NlbmVzL2xvYWRpbmctc2NlbmVcIjtcclxuaW1wb3J0IHsgTGV2ZWxFbmRTY2VuZSB9IGZyb20gXCIuLi9zY2VuZXMvbGV2ZWxlbmQtc2NlbmVcIjtcclxuaW1wb3J0IHsgU0NFTkVfTkFNRV9TVEFSVCwgU0NFTkVfTkFNRV9MRVZFTF9TRUxFQ1QsIFNDRU5FX05BTUVfR0FNRV9QTEFZLCBTQ0VORV9OQU1FX0xFVkVMX0VORCwgUFdBSW5zdGFsbFN0YXR1cywgU3RhcnRTY2VuZTEsIExldmVsU2VsZWN0aW9uMSwgR2FtZVNjZW5lMSwgRW5kU2NlbmUxLCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XHJcbmV4cG9ydCBjbGFzcyBTY2VuZUhhbmRsZXIge1xyXG4gICAgY2FudmFzO1xyXG4gICAgZGF0YTtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgc3RhcnRTY2VuZTtcclxuICAgIGxldmVsU2VsZWN0aW9uU2NlbmU7XHJcbiAgICBnYW1lcGxheVNjZW5lO1xyXG4gICAgbGV2ZWxFbmRTY2VuZTtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgc3RhdGljIFNjZW5lTmFtZTtcclxuICAgIGxvYWRpbmdTY3JlZW47XHJcbiAgICBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICBsYXN0VGltZSA9IDA7XHJcbiAgICBwd2FfaW5zdGFsbF9zdGF0dXM7XHJcbiAgICB0b2dnbGVCdG47XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGRhdGEpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGUtYnRuXCIpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCB0aGlzLmhhbmRsZUluc3RhbGxQcm9tcHQpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5zdGFydFNjZW5lID0gbmV3IFN0YXJ0U2NlbmUoY2FudmFzLCBkYXRhLCB0aGlzLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbik7XHJcbiAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IFN0YXJ0U2NlbmUxO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NjcmVlbiA9IG5ldyBMb2FkaW5nU2NlbmUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMucmVtb3ZlTG9hZGluZyk7XHJcbiAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbkxvb3AoKTtcclxuICAgIH1cclxuICAgIHN0YXJ0QW5pbWF0aW9uTG9vcCgpIHtcclxuICAgICAgICBjb25zdCBhbmltYXRlID0gKHRpbWVTdGFtcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbih0aW1lU3RhbXApO1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICB9XHJcbiAgICBkZXZUb2dnbGUoKSB7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVCdG4uY2xhc3NMaXN0LnRvZ2dsZShcIm9uXCIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b2dnbGVCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwib25cIikpIHtcclxuICAgICAgICAgICAgICAgIERlYnVnZ2VyLkRlYnVnTW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjaGVja01vbnN0ZXJQaGFzZVVwZGF0aW9uKCkge1xyXG4gICAgICAgIGxldCB0b3RhbFN0YXJDb3VudCA9IEdhbWVTY29yZS5nZXRUb3RhbFN0YXJDb3VudCgpO1xyXG4gICAgICAgIGxldCBtb25zdGVyUGhhc2VOdW1iZXIgPSBNYXRoLmZsb29yKHRvdGFsU3RhckNvdW50IC8gMTIpICsgMSB8fCAxO1xyXG4gICAgICAgIHJldHVybiBtb25zdGVyUGhhc2VOdW1iZXIgPD0gNCA/IG1vbnN0ZXJQaGFzZU51bWJlciA6IDQ7XHJcbiAgICB9XHJcbiAgICBhbmltYXRpb24gPSAodGltZVN0YW1wKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlbHRhVGltZSA9IHRpbWVTdGFtcCAtIHRoaXMubGFzdFRpbWU7XHJcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPyB0aGlzLmxvYWRpbmdTY3JlZW4uZHJhdyhkZWx0YVRpbWUpIDogbnVsbDtcclxuICAgICAgICBpZiAoU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9PT0gU3RhcnRTY2VuZTEpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNjZW5lLmFuaW1hdGlvbihkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBMZXZlbFNlbGVjdGlvbjEpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lLmRyYXdMZXZlbFNlbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBHYW1lU2NlbmUxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZS5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPT09IEVuZFNjZW5lMSkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsRW5kU2NlbmUuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzd2l0Y2hTY2VuZVRvR2FtZXBsYXkgPSAoZ2FtZVBsYXlEYXRhLCBjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZShjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKTtcclxuICAgICAgICBsZXQganNvblZlcnNpb25OdW1iZXIgPSAhIXRoaXMuZGF0YS5tYWpWZXJzaW9uICYmICEhdGhpcy5kYXRhLm1pblZlcnNpb24gPyB0aGlzLmRhdGEubWFqVmVyc2lvbi50b1N0cmluZygpICsgXCIuXCIgKyB0aGlzLmRhdGEubWluVmVyc2lvbi50b1N0cmluZygpIDogXCJcIjtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lcGxheVNjZW5lID0gbmV3IEdhbWVwbGF5U2NlbmUodGhpcy5jYW52YXMsIGdhbWVQbGF5RGF0YS5jdXJyZW50TGV2ZWxEYXRhLCB0aGlzLmNoZWNrTW9uc3RlclBoYXNlVXBkYXRpb24oKSwgdGhpcy5kYXRhLkZlZWRiYWNrVGV4dHMsIHRoaXMuZGF0YS5yaWdodFRvTGVmdCwgdGhpcy5zd2l0Y2hTY2VuZVRvRW5kTGV2ZWwsIGdhbWVQbGF5RGF0YS5zZWxlY3RlZExldmVsTnVtYmVyLCAoKSA9PiB7IHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKFNDRU5FX05BTUVfR0FNRV9QTEFZKTsgfSwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXksIGpzb25WZXJzaW9uTnVtYmVyLCB0aGlzLmRhdGEuRmVlZGJhY2tBdWRpb3MpO1xyXG4gICAgICAgICAgICBTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID0gR2FtZVNjZW5lMTtcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuICAgIHN3aXRjaFNjZW5lVG9FbmRMZXZlbCA9IChzdGFyQ291bnQsIG1vbnN0ZXJQaGFzZU51bWJlciwgY3VycmVudExldmVsTnVtYmVyLCBpc1RpbWVyRW5kZWQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTY3JlZW4uaW5pdENsb3VkKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZShTQ0VORV9OQU1FX0dBTUVfUExBWSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmVlZGJhY2stdGV4dFwiKS5zdHlsZS56SW5kZXggPSBcIjBcIjtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbEVuZFNjZW5lID0gbmV3IExldmVsRW5kU2NlbmUodGhpcy5jYW52YXMsIHRoaXMuaGVpZ2h0LCB0aGlzLndpZHRoLCB0aGlzLmNvbnRleHQsIHN0YXJDb3VudCwgY3VycmVudExldmVsTnVtYmVyLCB0aGlzLnN3aXRjaFNjZW5lVG9HYW1lcGxheSwgdGhpcy5zd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24sIHRoaXMuZGF0YSwgbW9uc3RlclBoYXNlTnVtYmVyKTtcclxuICAgICAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IEVuZFNjZW5lMTtcclxuICAgICAgICB9LCBpc1RpbWVyRW5kZWQgPyAwIDogNDAwMCk7XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uID0gKGNoYW5nZVNjZW5lUmVxdWVzdEZyb20pID0+IHtcclxuICAgICAgICB0aGlzLnNob3dMb2FkaW5nKCk7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NlKGNoYW5nZVNjZW5lUmVxdWVzdEZyb20pO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uU2NlbmUgPSBuZXcgTGV2ZWxTZWxlY3Rpb25TY3JlZW4odGhpcy5jYW52YXMsIHRoaXMuZGF0YSwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXkpO1xyXG4gICAgICAgICAgICBTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID0gTGV2ZWxTZWxlY3Rpb24xO1xyXG4gICAgICAgIH0sIDgwMCk7XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSA9IChsYXN0U2NlbmVOYW1lKSA9PiB7XHJcbiAgICAgICAgaWYgKGxhc3RTY2VuZU5hbWUgPT0gU0NFTkVfTkFNRV9MRVZFTF9TRUxFQ1QpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFzdFNjZW5lTmFtZSA9PT0gU0NFTkVfTkFNRV9HQU1FX1BMQVkpIHtcclxuICAgICAgICAgICAgdGhpcy5nYW1lcGxheVNjZW5lLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFzdFNjZW5lTmFtZSA9PT0gU0NFTkVfTkFNRV9TVEFSVCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0U2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChsYXN0U2NlbmVOYW1lID09IFNDRU5FX05BTUVfTEVWRUxfRU5EKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxFbmRTY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHNob3dMb2FkaW5nID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NjcmVlbi5pbml0Q2xvdWQoKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZ1wiKS5zdHlsZS56SW5kZXggPSBcIjNcIjtcclxuICAgIH07XHJcbiAgICByZW1vdmVMb2FkaW5nID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZ1wiKS5zdHlsZS56SW5kZXggPSBcIi0xXCI7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlSW5zdGFsbFByb21wdCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vY3VycmVudGx5IG5vdCBpbiB1c2VcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMucHdhX2luc3RhbGxfc3RhdHVzID0gZXZlbnQ7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oUFdBSW5zdGFsbFN0YXR1cywgXCJmYWxzZVwiKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgTW9uc3RlciwgVGltZXJUaWNraW5nLCBQcm9tcHRUZXh0LCBQYXVzZUJ1dHRvbiwgTGV2ZWxJbmRpY2F0b3JzLCBTdG9uZUhhbmRsZXIsIFR1dG9yaWFsLCBQYXVzZVBvcFVwLCBGZWVkYmFja1RleHRFZmZlY3RzLCBBdWRpb1BsYXllciB9IGZyb20gJy4uL2NvbXBvbmVudHMvJztcclxuaW1wb3J0IHsgbG9hZEltYWdlcywgQ0xJQ0ssIExPQURQVVpaTEUsIE1PVVNFRE9XTiwgTU9VU0VNT1ZFLCBNT1VTRVVQLCBTVE9ORURST1AsIFRPVUNIRU5ELCBUT1VDSE1PVkUsIFRPVUNIU1RBUlQsIFZJU0lCSUxJVFlfQ0hBTkdFLCB9IGZyb20gXCIuLi9jb21tb24vXCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyLCBsYW5nLCBwc2V1ZG9JZCB9IGZyb20gXCIuLi8uLi9nbG9iYWwtdmFyaWFibGVzXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCIuLi9kYXRhL2dhbWUtc2NvcmVcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBBVURJT19QQVRIX0JUTl9DTElDSywgQVVESU9fUEFUSF9PTl9EUkFHLCBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUsIFByZXZpb3VzUGxheWVkTGV2ZWwsIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzIH0gZnJvbSAnLi4vY29tcG9zaXRpb25zL2JhY2tncm91bmQnO1xyXG5leHBvcnQgY2xhc3MgR2FtZXBsYXlTY2VuZSB7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBqc29uVmVyc2lvbk51bWJlcjtcclxuICAgIGNhbnZhcztcclxuICAgIGxldmVsRGF0YTtcclxuICAgIHRpbWVyVGlja2luZztcclxuICAgIHByb21wdFRleHQ7XHJcbiAgICBwYXVzZUJ1dHRvbjtcclxuICAgIHR1dG9yaWFsO1xyXG4gICAgcHV6emxlRGF0YTtcclxuICAgIGlkO1xyXG4gICAgY29udGV4dDtcclxuICAgIGxldmVsSW5kaWNhdG9ycztcclxuICAgIHN0b25lc0NvdW50ID0gMTtcclxuICAgIG1vbnN0ZXJQaGFzZU51bWJlcjtcclxuICAgIHBpY2tlZFN0b25lO1xyXG4gICAgcHV6emxlU3RhcnRUaW1lO1xyXG4gICAgc2hvd1R1dG9yaWFsO1xyXG4gICAgZmVlZEJhY2tUZXh0cztcclxuICAgIGlzUHV6emxlQ29tcGxldGVkO1xyXG4gICAgcmlnaHRUb0xlZnQ7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHN3aXRjaFNjZW5lVG9FbmQ7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIHN0b25lSGFuZGxlcjtcclxuICAgIGNvdW50ZXIgPSAwO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgaGFuZGxlcjtcclxuICAgIHBpY2tlZFN0b25lT2JqZWN0O1xyXG4gICAgcGF1c2VQb3B1cDtcclxuICAgIGlzUGF1c2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICBiYWNrZ3JvdW5kO1xyXG4gICAgZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudDtcclxuICAgIGZlZWRiYWNrVGV4dEVmZmVjdHM7XHJcbiAgICBpc0dhbWVTdGFydGVkID0gZmFsc2U7XHJcbiAgICB0aW1lID0gMDtcclxuICAgIHNjb3JlID0gMDtcclxuICAgIHRlbXBXb3JkZm9yV29yZFB1enpsZSA9IFwiXCI7XHJcbiAgICBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgcmVsb2FkU2NlbmU7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIGZpcmViYXNlSW50ZWdyYXRpb247XHJcbiAgICBzdGFydFRpbWU7XHJcbiAgICBwdXp6bGVUaW1lO1xyXG4gICAgaXNEaXNwb3Npbmc7XHJcbiAgICByZXNldEFuaW1hdGlvbklEO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBsZXZlbERhdGEsIG1vbnN0ZXJQaGFzZU51bWJlciwgZmVlZEJhY2tUZXh0cywgcmlnaHRUb0xlZnQsIHN3aXRjaFNjZW5lVG9FbmQsIGxldmVsTnVtYmVyLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCByZWxvYWRTY2VuZSwganNvblZlcnNpb25OdW1iZXIsIGZlZWRiYWNrQXVkaW9zKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IGNhbnZhcy53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5yaWdodFRvTGVmdCA9IHJpZ2h0VG9MZWZ0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiLCB7IHdpbGxSZWFkRnJlcXVlbnRseTogdHJ1ZSB9KTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXJQaGFzZU51bWJlciA9IG1vbnN0ZXJQaGFzZU51bWJlciB8fCAxO1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0VuZCA9IHN3aXRjaFNjZW5lVG9FbmQ7XHJcbiAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiA9IHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSA9IHJlbG9hZFNjZW5lO1xyXG4gICAgICAgIHRoaXMuanNvblZlcnNpb25OdW1iZXIgPSBqc29uVmVyc2lvbk51bWJlcjtcclxuICAgICAgICB0aGlzLnN0YXJ0R2FtZVRpbWUoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UHV6emxlVGltZSgpO1xyXG4gICAgICAgIHRoaXMuaXNEaXNwb3NpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnBhdXNlQnV0dG9uID0gbmV3IFBhdXNlQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nID0gbmV3IFRpbWVyVGlja2luZyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sb2FkUHV6emxlKTtcclxuICAgICAgICB0aGlzLnN0b25lSGFuZGxlciA9IG5ldyBTdG9uZUhhbmRsZXIodGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jb3VudGVyLCB0aGlzLmxldmVsRGF0YSwgZmVlZGJhY2tBdWRpb3MsIHRoaXMudGltZXJUaWNraW5nKTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsID0gbmV3IFR1dG9yaWFsKHRoaXMuY29udGV4dCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLnByb21wdFRleHQgPSBuZXcgUHJvbXB0VGV4dCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy5sZXZlbERhdGEucHV6emxlc1t0aGlzLmNvdW50ZXJdLCB0aGlzLmxldmVsRGF0YSwgdGhpcy5yaWdodFRvTGVmdCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMgPSBuZXcgTGV2ZWxJbmRpY2F0b3JzKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIDApO1xyXG4gICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3JzLnNldEluZGljYXRvcnModGhpcy5jb3VudGVyKTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIgPSBuZXcgTW9uc3Rlcih0aGlzLmNhbnZhcywgdGhpcy5tb25zdGVyUGhhc2VOdW1iZXIpO1xyXG4gICAgICAgIHRoaXMucGF1c2VQb3B1cCA9IG5ldyBQYXVzZVBvcFVwKHRoaXMuY2FudmFzLCB0aGlzLnJlc3VtZUdhbWUsIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgdGhpcy5yZWxvYWRTY2VuZSwge1xyXG4gICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiBsZXZlbERhdGEsXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IGxldmVsTnVtYmVyLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRDYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmZWVkYmFjay10ZXh0XCIpO1xyXG4gICAgICAgIHRoaXMuZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudC5oZWlnaHQgPSB0aGlzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmZlZWRCYWNrVGV4dENhbmF2c0VsZW1lbnQud2lkdGggPSB0aGlzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cyA9IG5ldyBGZWVkYmFja1RleHRFZmZlY3RzKHRoaXMuZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIiwgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSksIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVEYXRhID0gbGV2ZWxEYXRhLnB1enpsZXM7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRzID0gZmVlZEJhY2tUZXh0cztcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgcHJvZmlsZU1vbnN0ZXI6IEFTU0VUU19QQVRIX01PTlNURVJfSURMRSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHByZXZpb3VzUGxheWVkTGV2ZWwgPSB0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxOdW1iZXI7XHJcbiAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlLnNldEl0ZW0oUHJldmlvdXNQbGF5ZWRMZXZlbCArIGxhbmcgKyBcIkRlYnVnXCIsIHByZXZpb3VzUGxheWVkTGV2ZWwpXHJcbiAgICAgICAgICAgIDogbG9jYWxTdG9yYWdlLnNldEl0ZW0oUHJldmlvdXNQbGF5ZWRMZXZlbCArIGxhbmcsIHByZXZpb3VzUGxheWVkTGV2ZWwpO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLnJlc2V0QW5pbWF0aW9uSUQgPSAwO1xyXG4gICAgICAgIHRoaXMuc2V0dXBCZygpO1xyXG4gICAgfVxyXG4gICAgc2V0dXBCZyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBjb25zdCB7IEJHX0dST1VQX0lNR1MsIGRyYXcgfSA9IGxvYWREeW5hbWljQmdBc3NldHModGhpcy5sZXZlbERhdGEubGV2ZWxOdW1iZXIsIEJBQ0tHUk9VTkRfQVNTRVRfTElTVCk7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBCR19HUk9VUF9JTUdTLCBkcmF3KTtcclxuICAgIH07XHJcbiAgICByZXN1bWVHYW1lID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLmlzUGF1c2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuc2V0R2FtZVBhdXNlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLnBhdXNlUG9wdXAuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICAgIGdldFJhbmRvbUZlZWRCYWNrVGV4dChyYW5kb21JbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmZlZWRCYWNrVGV4dHMpO1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkS2V5ID0ga2V5c1tyYW5kb21JbmRleF07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmVlZEJhY2tUZXh0c1tzZWxlY3RlZEtleV07XHJcbiAgICB9XHJcbiAgICBnZXRSYW5kb21JbnQobWluLCBtYXgpIHtcclxuICAgICAgICBjb25zdCBmZWVkYmFja1ZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcy5mZWVkQmFja1RleHRzKTtcclxuICAgICAgICBjb25zdCBkZWZpbmVkVmFsdWVzTWF4Q291bnQgPSAoZmVlZGJhY2tWYWx1ZXMuZmlsdGVyKHZhbHVlID0+IHZhbHVlICE9IHVuZGVmaW5lZCkubGVuZ3RoKSAtIDE7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChkZWZpbmVkVmFsdWVzTWF4Q291bnQgLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBoYW5kbGVNb3VzZVVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgLy8gUmVtb3ZlIHVubmVjZXNzYXJ5IGxvZ2dpbmdcclxuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGNsaWNrIGlzIHdpdGhpbiByYW5nZSBvZiB0aGUgbW9uc3RlclxyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4IC0gdGhpcy5tb25zdGVyLnggLSB0aGlzLmNhbnZhcy53aWR0aCAvIDQpICoqIDIgK1xyXG4gICAgICAgICAgICAoeSAtIHRoaXMubW9uc3Rlci55IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMi4yKSAqKiAyKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMTAwICYmIHRoaXMucGlja2VkU3RvbmUpIHtcclxuICAgICAgICAgICAgY29uc3QgeyB0ZXh0IH0gPSB0aGlzLnBpY2tlZFN0b25lOyAvLyBVc2UgZGVzdHJ1Y3R1cmluZyBmb3IgY2xhcml0eVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbFR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJMZXR0ZXJPbmx5XCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTGV0dGVySW5Xb3JkXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXR0ZXJQdXp6bGUodGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiV29yZFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNvdW5kV29yZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud29yZFB1enpsZSh0ZXh0LCB0aGlzLnBpY2tlZFN0b25lKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGlja2VkU3RvbmUgJiYgdGhpcy5waWNrZWRTdG9uZU9iamVjdCAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS50ZXh0ICYmIHR5cGVvZiB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4ID09PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3kgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4TGltaXQgPSA1MDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IHRoaXMud2lkdGggLyAyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS54ID0gKHRoaXMucGlja2VkU3RvbmUudGV4dC5sZW5ndGggPD0gMyAmJiB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4IDwgeExpbWl0ICYmIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3ggPCBoYWxmV2lkdGgpXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4ICsgMjVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3g7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lLnkgPSB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGlja2VkU3RvbmUgPSBudWxsO1xyXG4gICAgfTtcclxuICAgIC8vIEV2ZW50IHRvIGlkZW50aWZ5IG1vdXNlIG1vdmVkIGRvd24gb24gdGhlIGNhbnZhc1xyXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGZvciAobGV0IHNjIG9mIHRoaXMuc3RvbmVIYW5kbGVyLmZvaWxTdG9uZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHggLSBzYy54KSAqKiAyICsgKHkgLSBzYy55KSAqKiAyKTtcclxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDQwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lT2JqZWN0ID0gc2M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gc2M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19QQVRIX09OX0RSQUcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucGlja2VkU3RvbmUpIHtcclxuICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0RyYWdBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS54ID0geDtcclxuICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS55ID0geTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBpZiAodGhpcy5tb25zdGVyLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICAgICAgdGhpcy50dXRvcmlhbC5zZXRQbGF5TW9uc3RlckNsaWNrQW5pbWF0aW9uKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucGF1c2VCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKEFVRElPX1BBVEhfQlROX0NMSUNLKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUdhbWVQbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb21wdFRleHQub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEV2ZW50IHRvIGlkZW50aWZ5IHRvdWNoIG9uIHRoZSBjYW52YXNcclxuICAgIGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd24oeyBjbGllbnRYOiB0b3VjaC5jbGllbnRYLCBjbGllbnRZOiB0b3VjaC5jbGllbnRZIH0pO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVRvdWNoTW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQudG91Y2hlc1swXTtcclxuICAgICAgICB0aGlzLmhhbmRsZU1vdXNlTW92ZSh7IGNsaWVudFg6IHRvdWNoLmNsaWVudFgsIGNsaWVudFk6IHRvdWNoLmNsaWVudFkgfSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlVG91Y2hFbmQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VVcCh7IGNsaWVudFg6IHRvdWNoLmNsaWVudFgsIGNsaWVudFk6IHRvdWNoLmNsaWVudFkgfSk7XHJcbiAgICB9O1xyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNHYW1lU3RhcnRlZCAmJiAhdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWUgPSB0aGlzLnRpbWUgKyBkZWx0YVRpbWU7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWUgPj0gNTAwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFBsYXlNb25zdGVyQ2xpY2tBbmltYXRpb24oZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmJhY2tncm91bmQ/LmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wYXVzZUJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuZHJhdygpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dC5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nLmRyYXcoKTtcclxuICAgICAgICBpZiAodGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiB0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgJiYgIXRoaXMuaXNHYW1lU3RhcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICh0aGlzLmNvdW50ZXIgPT0gMCkgPyB0aGlzLnR1dG9yaWFsLmNsaWNrT25Nb25zdGVyVHV0b3JpYWwoZGVsdGFUaW1lKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgJiYgIXRoaXMuaXNHYW1lU3RhcnRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnBhdXNlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIXRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgJiYgdGhpcy5pc0dhbWVTdGFydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihNT1VTRVVQLCB0aGlzLmhhbmRsZU1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihNT1VTRU1PVkUsIHRoaXMuaGFuZGxlTW91c2VNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoTU9VU0VET1dOLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFRPVUNIU1RBUlQsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFRPVUNITU9WRSwgdGhpcy5oYW5kbGVUb3VjaE1vdmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSEVORCwgdGhpcy5oYW5kbGVUb3VjaEVuZCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgICAgIC8vIFJlbW92ZSBldmVudCBsaXN0ZW5lcnMgdXNpbmcgdGhlIGRlZmluZWQgZnVuY3Rpb25zXHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZU1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCB0aGlzLmhhbmRsZVRvdWNoRW5kLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBsb2FkUHV6emxlID0gKGlzVGltZXJFbmRlZCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICBjb25zdCB0aW1lckVuZGVkID0gQm9vbGVhbihpc1RpbWVyRW5kZWQpO1xyXG4gICAgICAgIGlmICh0aW1lckVuZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nUHV6emxlRW5kRmlyZWJhc2VFdmVudChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY291bnRlciArPSAxOyAvL2luY3JlbWVudCBQdXp6bGVcclxuICAgICAgICB0aGlzLmlzR2FtZVN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5jb3VudGVyID09PSB0aGlzLmxldmVsRGF0YS5wdXp6bGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9ycy5zZXRJbmRpY2F0b3JzKHRoaXMuY291bnRlcik7XHJcbiAgICAgICAgICAgIHRoaXMubG9nTGV2ZWxFbmRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgICAgIEdhbWVTY29yZS5zZXRHYW1lTGV2ZWxTY29yZSh0aGlzLmxldmVsRGF0YSwgdGhpcy5zY29yZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0VuZChHYW1lU2NvcmUuY2FsY3VsYXRlU3RhckNvdW50KHRoaXMuc2NvcmUpLCB0aGlzLm1vbnN0ZXJQaGFzZU51bWJlciwgdGhpcy5sZXZlbE51bWJlciwgdGltZXJFbmRlZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBsb2FkUHV6emxlRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoTE9BRFBVWlpMRSwge1xyXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnRlcjogdGhpcy5jb3VudGVyLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzcG9zaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0TmV3UHV6emxlKGxvYWRQdXp6bGVFdmVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRpbWVyRW5kZWQgPyAwIDogNDUwMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2luZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFZmZlY3RzLnVucmVnaXN0ZXJFdmVudExpc3RlbmVyKCk7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZy5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnByb21wdFRleHQuZGlzcG9zZSgpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIH07XHJcbiAgICBsZXR0ZXJQdXp6bGUoZHJvcHBlZFN0b25lKSB7XHJcbiAgICAgICAgY29uc3QgZmVlZEJhY2tJbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMuc3RvbmVIYW5kbGVyLmlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdChkcm9wcGVkU3RvbmUsIGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgIGlmIChpc0NvcnJlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVDb3JyZWN0U3RvbmVEcm9wKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhhbmRsZVN0b25lRHJvcEVuZChpc0NvcnJlY3QpO1xyXG4gICAgfVxyXG4gICAgd29yZFB1enpsZShkcm9wcGVkU3RvbmUsIGRyb3BwZWRTdG9uZUluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wRmVlZGJhY2tBdWRpbygpO1xyXG4gICAgICAgIGRyb3BwZWRTdG9uZUluc3RhbmNlLnggPSAtOTk5O1xyXG4gICAgICAgIGRyb3BwZWRTdG9uZUluc3RhbmNlLnkgPSAtOTk5O1xyXG4gICAgICAgIGNvbnN0IGZlZWRCYWNrSW5kZXggPSB0aGlzLmdldFJhbmRvbUludCgwLCAxKTtcclxuICAgICAgICB0aGlzLnRlbXBXb3JkZm9yV29yZFB1enpsZSA9IHRoaXMudGVtcFdvcmRmb3JXb3JkUHV6emxlICsgZHJvcHBlZFN0b25lO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMuc3RvbmVIYW5kbGVyLmlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdCh0aGlzLnRlbXBXb3JkZm9yV29yZFB1enpsZSwgZmVlZEJhY2tJbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RvbmVIYW5kbGVyLmdldENvcnJlY3RUYXJnZXRTdG9uZSgpID09IHRoaXMudGVtcFdvcmRmb3JXb3JkUHV6emxlICYmXHJcbiAgICAgICAgICAgIGlzQ29ycmVjdCkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNvcnJlY3RTdG9uZURyb3AoZmVlZEJhY2tJbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RvbmVEcm9wRW5kKGlzQ29ycmVjdCwgXCJXb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJUaWNraW5nLnN0YXJ0VGltZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgIHRoaXMucHJvbXB0VGV4dC5kcm9wcGVkU3RvbmVJbmRleChsYW5nID09IFwiYXJhYmljXCJcclxuICAgICAgICAgICAgICAgID8gdGhpcy5zdG9uZXNDb3VudFxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnRlbXBXb3JkZm9yV29yZFB1enpsZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50Kys7XHJcbiAgICAgICAgICAgIHRoaXMucmVzZXRUb0lkbGVBbmltYXRpb24oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvSWRsZUFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RvbmVEcm9wRW5kKGlzQ29ycmVjdCwgXCJXb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXNldFRvSWRsZUFuaW1hdGlvbihjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNldEFuaW1hdGlvbklEICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzZXRBbmltYXRpb25JRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRBbmltYXRpb25JRCA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcEVuZChpc0NvcnJlY3QsIHB1enpsZVR5cGUgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5sb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50KGlzQ29ycmVjdCwgcHV6emxlVHlwZSk7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN0b25lRHJvcEV2ZW50KGlzQ29ycmVjdCk7XHJcbiAgICAgICAgdGhpcy5sb2FkUHV6emxlKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDb3JyZWN0U3RvbmVEcm9wID0gKGZlZWRiYWNrSW5kZXgpID0+IHtcclxuICAgICAgICB0aGlzLnNjb3JlICs9IDEwMDtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMud3JhcFRleHQodGhpcy5nZXRSYW5kb21GZWVkQmFja1RleHQoZmVlZGJhY2tJbmRleCkpO1xyXG4gICAgICAgIHRoaXMuZmVlZEJhY2tUZXh0Q2FuYXZzRWxlbWVudC5zdHlsZS56SW5kZXggPSBcIjJcIjtcclxuICAgIH07XHJcbiAgICBkaXNwYXRjaFN0b25lRHJvcEV2ZW50KGlzQ29ycmVjdCkge1xyXG4gICAgICAgIGNvbnN0IGRyb3BTdG9uZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KFNUT05FRFJPUCwge1xyXG4gICAgICAgICAgICBkZXRhaWw6IHsgaXNDb3JyZWN0OiBpc0NvcnJlY3QgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGRyb3BTdG9uZUV2ZW50KTtcclxuICAgIH1cclxuICAgIGluaXROZXdQdXp6bGUobG9hZFB1enpsZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuaXNHYW1lU3RhcnRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy50ZW1wV29yZGZvcldvcmRQdXp6bGUgPSBcIlwiO1xyXG4gICAgICAgIHRoaXMucGlja2VkU3RvbmUgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWZmZWN0cy5jbGVhclBhcnRpY2xlKCk7XHJcbiAgICAgICAgdGhpcy5mZWVkQmFja1RleHRDYW5hdnNFbGVtZW50LnN0eWxlLnpJbmRleCA9IFwiMFwiO1xyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobG9hZFB1enpsZUV2ZW50KTtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydFB1enpsZVRpbWUoKTtcclxuICAgIH1cclxuICAgIGxvZ1B1enpsZUVuZEZpcmViYXNlRXZlbnQoaXNDb3JyZWN0LCBwdXp6bGVUeXBlKSB7XHJcbiAgICAgICAgbGV0IGVuZFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIGNvbnN0IHB1enpsZUNvbXBsZXRlZERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZXJzaW9uLWluZm8taWRcIikuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiB0aGlzLmpzb25WZXJzaW9uTnVtYmVyLFxyXG4gICAgICAgICAgICBzdWNjZXNzX29yX2ZhaWx1cmU6IGlzQ29ycmVjdCA/IFwic3VjY2Vzc1wiIDogXCJmYWlsdXJlXCIsXHJcbiAgICAgICAgICAgIGxldmVsX251bWJlcjogdGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsTnVtYmVyLFxyXG4gICAgICAgICAgICBwdXp6bGVfbnVtYmVyOiB0aGlzLmNvdW50ZXIsXHJcbiAgICAgICAgICAgIGl0ZW1fc2VsZWN0ZWQ6IHB1enpsZVR5cGUgPT0gXCJXb3JkXCJcclxuICAgICAgICAgICAgICAgID8gKHRoaXMudGVtcFdvcmRmb3JXb3JkUHV6emxlID09IG51bGwgfHwgdGhpcy50ZW1wV29yZGZvcldvcmRQdXp6bGUgPT0gdW5kZWZpbmVkKSA/IFwiVElNRU9VVFwiIDogdGhpcy50ZW1wV29yZGZvcldvcmRQdXp6bGVcclxuICAgICAgICAgICAgICAgIDogKHRoaXMucGlja2VkU3RvbmUgPT0gbnVsbCB8fCB0aGlzLnBpY2tlZFN0b25lID09IHVuZGVmaW5lZCkgPyBcIlRJTUVPVVRcIiA6IHRoaXMucGlja2VkU3RvbmU/LnRleHQsXHJcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5zdG9uZUhhbmRsZXIuZ2V0Q29ycmVjdFRhcmdldFN0b25lKCksXHJcbiAgICAgICAgICAgIGZvaWxzOiB0aGlzLnN0b25lSGFuZGxlci5nZXRGb2lsU3RvbmVzKCksXHJcbiAgICAgICAgICAgIHJlc3BvbnNlX3RpbWU6IChlbmRUaW1lIC0gdGhpcy5wdXp6bGVUaW1lKSAvIDEwMDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFB1enpsZUNvbXBsZXRlZEV2ZW50KHB1enpsZUNvbXBsZXRlZERhdGEpO1xyXG4gICAgfVxyXG4gICAgbG9nTGV2ZWxFbmRGaXJlYmFzZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCBsZXZlbENvbXBsZXRlZERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZXJzaW9uLWluZm8taWRcIikuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiB0aGlzLmpzb25WZXJzaW9uTnVtYmVyLFxyXG4gICAgICAgICAgICBzdWNjZXNzX29yX2ZhaWx1cmU6IEdhbWVTY29yZS5jYWxjdWxhdGVTdGFyQ291bnQodGhpcy5zY29yZSkgPj0gMyA/IFwic3VjY2Vzc1wiIDogXCJmYWlsdXJlXCIsXHJcbiAgICAgICAgICAgIG51bWJlcl9vZl9zdWNjZXNzZnVsX3B1enpsZXM6IHRoaXMuc2NvcmUgLyAxMDAsXHJcbiAgICAgICAgICAgIGxldmVsX251bWJlcjogdGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsTnVtYmVyLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogKGVuZFRpbWUgLSB0aGlzLnN0YXJ0VGltZSkgLyAxMDAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRMZXZlbENvbXBsZXRlZEV2ZW50KGxldmVsQ29tcGxldGVkRGF0YSk7XHJcbiAgICB9XHJcbiAgICBzdGFydEdhbWVUaW1lKCkge1xyXG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuICAgIHN0YXJ0UHV6emxlVGltZSgpIHtcclxuICAgICAgICB0aGlzLnB1enpsZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG4gICAgcGF1c2VHYW1lUGxheSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuc2V0R2FtZVBhdXNlKHRydWUpO1xyXG4gICAgICAgIHRoaXMucGF1c2VQb3B1cC5hZGRMaXN0bmVyKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLnBhdXNlR2FtZVBsYXkoKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgRGVidWdnZXIsIGZvbnQsIGxhbmcsIHBzZXVkb0lkIH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vXCI7XHJcbmltcG9ydCB7IExldmVsQ29uZmlnIH0gZnJvbSBcIi4uL2NvbW1vbi9sZXZlbC1jb25maWdcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgZ2V0RGF0YSB9IGZyb20gXCIuLi9kYXRhL2FwaS1kYXRhXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCIuLi9kYXRhL2dhbWUtc2NvcmVcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCYWNrZ3JvdW5kLCBsZXZlbFNlbGVjdEJnRHJhd2luZyB9IGZyb20gJy4uL2NvbXBvc2l0aW9ucy9iYWNrZ3JvdW5kJztcclxuaW1wb3J0IHsgUHJldmlvdXNQbGF5ZWRMZXZlbCwgTEVWRUxfU0VMRUNUSU9OX0JBQ0tHUk9VTkQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5leHBvcnQgY2xhc3MgTGV2ZWxTZWxlY3Rpb25TY3JlZW4ge1xyXG4gICAgY2FudmFzO1xyXG4gICAgZGF0YTtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgbGV2ZWxCdXR0b25Qb3M7XHJcbiAgICBjYW52YXNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIGxldmVscztcclxuICAgIGdhbWVMZXZlbERhdGE7XHJcbiAgICBjYWxsQmFjaztcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICB4RG93bjtcclxuICAgIHlEb3duO1xyXG4gICAgcHJldmlvdXNQbGF5ZWRMZXZlbE51bWJlcjtcclxuICAgIGxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gMDtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgbGV2ZWxzU2VjdGlvbkNvdW50O1xyXG4gICAgdW5sb2NrTGV2ZWxJbmRleDtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgZmlyZWJhc2VJbnRlZ3JhdGlvbjtcclxuICAgIGJhY2tncm91bmQ7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGRhdGEsIGNhbGxCYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayA9IGNhbGxCYWNrO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzU2VjdGlvbkNvdW50ID1cclxuICAgICAgICAgICAgc2VsZi5kYXRhLmxldmVscy5sZW5ndGggLyAxMCA+IE1hdGguZmxvb3Ioc2VsZi5kYXRhLmxldmVscy5sZW5ndGggLyAxMClcclxuICAgICAgICAgICAgICAgID8gTWF0aC5mbG9vcihzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwKSArIDFcclxuICAgICAgICAgICAgICAgIDogTWF0aC5mbG9vcihzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpc2VCdXR0b25Qb3MoKTtcclxuICAgICAgICB0aGlzLmxldmVscyA9IFtdO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5jYW52YXNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUxldmVsQnV0dG9ucyh0aGlzLmxldmVsQnV0dG9uUG9zKTtcclxuICAgICAgICB0aGlzLmdhbWVMZXZlbERhdGEgPSBHYW1lU2NvcmUuZ2V0QWxsR2FtZUxldmVsSW5mbygpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnVubG9ja0xldmVsSW5kZXggPSAtMTtcclxuICAgICAgICB0aGlzLnByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIgPVxyXG4gICAgICAgICAgICBwYXJzZUludChEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgICAgID8gbG9jYWxTdG9yYWdlLmdldEl0ZW0oUHJldmlvdXNQbGF5ZWRMZXZlbCArIGxhbmcgKyBcIkRlYnVnXCIpXHJcbiAgICAgICAgICAgICAgICA6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFByZXZpb3VzUGxheWVkTGV2ZWwgKyBsYW5nKSkgfCAwO1xyXG4gICAgICAgIGlmICh0aGlzLnByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID1cclxuICAgICAgICAgICAgICAgIDEwICogTWF0aC5mbG9vcih0aGlzLnByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIgLyAxMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0dXBCZygpO1xyXG4gICAgICAgIC8vIGxvYWRpbmcgaW1hZ2VzXHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIG1hcEljb246IFwiLi9hc3NldHMvaW1hZ2VzL21hcEljb24ucG5nXCIsXHJcbiAgICAgICAgICAgIG1hcEljb25TcGVjaWFsOiBcIi4vYXNzZXRzL2ltYWdlcy9tYXBfaWNvbl9tb25zdGVyX2xldmVsX3YwMS5wbmdcIixcclxuICAgICAgICAgICAgbWFwTG9jazogXCIuL2Fzc2V0cy9pbWFnZXMvbWFwTG9jay5wbmdcIixcclxuICAgICAgICAgICAgc3RhcjogXCIuL2Fzc2V0cy9pbWFnZXMvc3Rhci5wbmdcIixcclxuICAgICAgICAgICAgbmV4dGJ0bjogXCIuL2Fzc2V0cy9pbWFnZXMvbmV4dF9idG4ucG5nXCIsXHJcbiAgICAgICAgICAgIGJhY2tidG46IFwiLi9hc3NldHMvaW1hZ2VzL2JhY2tfYnRuLnBuZ1wiLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkTGlzdGVuZXJzKCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gZGF0YS5tYWp2ZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IGRhdGEubWludmVyc2lvbjtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7IExFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5EIH0sIGxldmVsU2VsZWN0QmdEcmF3aW5nKTtcclxuICAgIH07XHJcbiAgICBpbml0aWFsaXNlQnV0dG9uUG9zKCkge1xyXG4gICAgICAgIHRoaXMubGV2ZWxCdXR0b25Qb3MgPSBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIFt0aGlzLmNhbnZhcy53aWR0aCAvIDEwLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMF0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAyLjUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDEwXSxcclxuICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDMgKyB0aGlzLmNhbnZhcy53aWR0aCAvIDIuOCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCxcclxuICAgICAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAxMCwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gM10sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAyLjUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDNdLFxyXG4gICAgICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMyArIHRoaXMuY2FudmFzLndpZHRoIC8gMi44LFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDMsXHJcbiAgICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICAgICAgW3RoaXMuY2FudmFzLndpZHRoIC8gMTAsIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuOF0sXHJcbiAgICAgICAgICAgICAgICBbdGhpcy5jYW52YXMud2lkdGggLyAyLjUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuOF0sXHJcbiAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAzICsgdGhpcy5jYW52YXMud2lkdGggLyAyLjgsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS44LFxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIFt0aGlzLmNhbnZhcy53aWR0aCAvIDIuNSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4zXSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlTGV2ZWxCdXR0b25zKGxldmVsQnV0dG9ucG9zKSB7XHJcbiAgICAgICAgbGV0IHBvc3MgPSBsZXZlbEJ1dHRvbnBvc1swXTtcclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCAxMDsgcysrKSB7XHJcbiAgICAgICAgICAgIGxldCBucyA9IG5ldyBMZXZlbENvbmZpZyhwb3NzW2ldWzBdLCBwb3NzW2ldWzFdLCBpICsgMSk7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxzLnB1c2gobnMpO1xyXG4gICAgICAgICAgICBpICs9IDE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIC8vIG5leHQgcHJldiBidXR0b24gbGlzdG5lciAjMVxyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIC8vIHdoZW4gYXBwIGdvZXMgYmFja2dyb3VuZCAjMlxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMucGF1c2VQbGF5QXVkaW9zLCBmYWxzZSk7XHJcbiAgICAgICAgLy8vIHN3aXBlIGxpc3RlbmVyICMzXHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICAvLyAjNFxyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgcGF1c2VQbGF5QXVkaW9zID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBnZXRUb3VjaGVzKGV2dCkge1xyXG4gICAgICAgIHJldHVybiAoZXZ0LnRvdWNoZXMgfHwgLy8gYnJvd3NlciBBUElcclxuICAgICAgICAgICAgZXZ0Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyk7IC8vIGpRdWVyeVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVG91Y2hTdGFydCA9IChldnQpID0+IHtcclxuICAgICAgICBjb25zdCBmaXJzdFRvdWNoID0gdGhpcy5nZXRUb3VjaGVzKGV2dClbMF07XHJcbiAgICAgICAgdGhpcy54RG93biA9IGZpcnN0VG91Y2guY2xpZW50WDtcclxuICAgICAgICB0aGlzLnlEb3duID0gZmlyc3RUb3VjaC5jbGllbnRZO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVRvdWNoTW92ZSA9IChldnQpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMueERvd24gfHwgIXRoaXMueURvd24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeFVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgICBsZXQgeVVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuICAgICAgICBsZXQgeERpZmYgPSB0aGlzLnhEb3duIC0geFVwO1xyXG4gICAgICAgIGxldCB5RGlmZiA9IHRoaXMueURvd24gLSB5VXA7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHhEaWZmKSA+IE1hdGguYWJzKHlEaWZmKSkge1xyXG4gICAgICAgICAgICAvKm1vc3Qgc2lnbmlmaWNhbnQqL1xyXG4gICAgICAgICAgICBpZiAoeERpZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSB0aGlzLmxldmVsc1NlY3Rpb25Db3VudCAqIDEwIC0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCArIDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qIHJpZ2h0IHN3aXBlICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9IHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIC8qIGxlZnQgc3dpcGUgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiByZXNldCB2YWx1ZXMgKi9cclxuICAgICAgICB0aGlzLnhEb3duID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlEb3duID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAvLyByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgcmVjdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHggPj0gdGhpcy5jYW52YXMud2lkdGggKiAwLjcgJiZcclxuICAgICAgICAgICAgeCA8IHRoaXMuY2FudmFzLndpZHRoICogMC43ICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTAgJiZcclxuICAgICAgICAgICAgeSA+IHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMyAmJlxyXG4gICAgICAgICAgICB5IDwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4zICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTApIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggIT0gdGhpcy5sZXZlbHNTZWN0aW9uQ291bnQgKiAxMCAtIDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCArIDEwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb3duQnV0dG9uKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh4ID49IHRoaXMuY2FudmFzLndpZHRoIC8gMTAgJiZcclxuICAgICAgICAgICAgeCA8IHRoaXMuY2FudmFzLndpZHRoIC8gMTAgKyB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCAmJlxyXG4gICAgICAgICAgICB5ID4gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4zICYmXHJcbiAgICAgICAgICAgIHkgPCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjMgKyB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAtIDEwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChsZXQgcyBvZiB0aGlzLmxldmVscykge1xyXG4gICAgICAgICAgICBpZiAoTWF0aC5zcXJ0KCh4IC0gcy54IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjApICpcclxuICAgICAgICAgICAgICAgICh4IC0gcy54IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjApICtcclxuICAgICAgICAgICAgICAgICh5IC0gcy55IC0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMjApICpcclxuICAgICAgICAgICAgICAgICAgICAoeSAtIHMueSAtIHRoaXMuY2FudmFzLmhlaWdodCAvIDIwKSkgPCA0NSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKERlYnVnZ2VyLkRlYnVnTW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoXCIuL2Fzc2V0cy9hdWRpb3MvQnV0dG9uQ2xpY2subXAzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxOdW1iZXIgPSBzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydEdhbWUodGhpcy5sZXZlbE51bWJlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAtIDEgPD1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVubG9ja0xldmVsSW5kZXggKyAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IHMuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0R2FtZSh0aGlzLmxldmVsTnVtYmVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkcmF3TGV2ZWwocywgY2FudmFzKSB7XHJcbiAgICAgICAgbGV0IGltYWdlU2l6ZSA9IGNhbnZhcy5oZWlnaHQgLyA1O1xyXG4gICAgICAgIGxldCB0ZXh0Rm9udFNpemUgPSBpbWFnZVNpemUgLyA2O1xyXG4gICAgICAgIGNvbnN0IHNwZWNpYWxMZXZlbHMgPSBbNSwgMTMsIDIwLCAzMCwgNDJdO1xyXG4gICAgICAgIGlmIChzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA8PSB0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBsZXZlbE51bWJlciA9IHMuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4O1xyXG4gICAgICAgICAgICBjb25zdCBpc1NwZWNpYWxMZXZlbCA9IHNwZWNpYWxMZXZlbHMuaW5jbHVkZXMobGV2ZWxOdW1iZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKGlzU3BlY2lhbExldmVsID8gdGhpcy5sb2FkZWRJbWFnZXMubWFwSWNvblNwZWNpYWwgOiB0aGlzLmxvYWRlZEltYWdlcy5tYXBJY29uLCBzLngsIHMueSwgaXNTcGVjaWFsTGV2ZWwgPyBpbWFnZVNpemUgKiAwLjkgOiBpbWFnZVNpemUsIGlzU3BlY2lhbExldmVsID8gaW1hZ2VTaXplICogMC45IDogaW1hZ2VTaXplKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPVxyXG4gICAgICAgICAgICAgICAgdGV4dEZvbnRTaXplICsgYHB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocy5pbmRleCArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgsIHMueCArIGltYWdlU2l6ZSAvIDMuNSwgcy55ICsgaW1hZ2VTaXplIC8gMyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5mb250ID1cclxuICAgICAgICAgICAgICAgIHRleHRGb250U2l6ZSAtXHJcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplIC8gMzAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBweCAke2ZvbnR9LCBtb25vc3BhY2VgO1xyXG4gICAgICAgICAgICBEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgICAgID8gdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMuZGF0YS5sZXZlbHNbcy5pbmRleCArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxXVxyXG4gICAgICAgICAgICAgICAgICAgIC5sZXZlbE1ldGEubGV2ZWxUeXBlLCBzLnggKyBpbWFnZVNpemUgLyAzLjUsIHMueSArIGltYWdlU2l6ZSAvIDEuMylcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGZvciAobGV0IHMgb2YgdGhpcy5sZXZlbHMpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3TGV2ZWwocywgdGhpcy5jYW52YXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRvd25CdXR0b24obGV2ZWwpIHtcclxuICAgICAgICBsZXQgaW1hZ2VTaXplID0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTA7XHJcbiAgICAgICAgaWYgKGxldmVsICE9IHRoaXMubGV2ZWxzU2VjdGlvbkNvdW50ICogMTAgLSAxMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLm5leHRidG4sIHRoaXMuY2FudmFzLndpZHRoICogMC43LCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjMsIGltYWdlU2l6ZSwgaW1hZ2VTaXplKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxldmVsICE9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYWNrYnRuLCB0aGlzLmNhbnZhcy53aWR0aCAvIDEwLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjMsIGltYWdlU2l6ZSwgaW1hZ2VTaXplKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBkcmF3IHN0YXJzIG9uIHRvcCBvZiBsZXZlbCBudW1iZXJcclxuICAgIGRyYXdTdGFycyhnYW1lTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgaWYgKGdhbWVMZXZlbERhdGEgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoZ2FtZUxldmVsRGF0YS5sZW5ndGggIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBnYW1lIG9mIGdhbWVMZXZlbERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy51bmxvY2tMZXZlbEluZGV4IDwgcGFyc2VJbnQoZ2FtZS5sZXZlbE51bWJlcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtZS5zdGFyQ291bnQgPj0gMlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAodGhpcy51bmxvY2tMZXZlbEluZGV4ID0gcGFyc2VJbnQoZ2FtZS5sZXZlbE51bWJlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHMgb2YgdGhpcy5sZXZlbHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzLmluZGV4ICsgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA8PSB0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghRGVidWdnZXIuRGVidWdNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMSA+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVubG9ja0xldmVsSW5kZXggKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMubWFwTG9jaywgcy54LCBzLnksIHRoaXMuY2FudmFzLmhlaWdodCAvIDEzLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBnYW1lTGV2ZWxEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmluZGV4IC0gMSArIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPT1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnNlSW50KGdhbWVMZXZlbERhdGFbaV0ubGV2ZWxOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRyYXdTdGFyKHMsIHRoaXMuY2FudmFzLCBnYW1lTGV2ZWxEYXRhW2ldLnN0YXJDb3VudCwgdGhpcy5jb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd1N0YXIocywgY2FudmFzLCBzdGFyQ291bnQsIGNvbnRleHQpIHtcclxuICAgICAgICBsZXQgaW1hZ2VTaXplID0gY2FudmFzLmhlaWdodCAvIDU7XHJcbiAgICAgICAgaWYgKHN0YXJDb3VudCA+PSAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnN0YXIsIHMueCwgcy55IC0gaW1hZ2VTaXplICogMC4wMSwgaW1hZ2VTaXplIC8gNSwgaW1hZ2VTaXplIC8gNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPiAxKSB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnN0YXIsIHMueCArIGltYWdlU2l6ZSAvIDIuNSwgcy55IC0gaW1hZ2VTaXplICogMC4wMSwgaW1hZ2VTaXplIC8gNSwgaW1hZ2VTaXplIC8gNSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdGFyQ291bnQgPT0gMykge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5zdGFyLCBzLnggKyBpbWFnZVNpemUgLyA1LCBzLnkgLSBpbWFnZVNpemUgKiAwLjEsIGltYWdlU2l6ZSAvIDUsIGltYWdlU2l6ZSAvIDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0R2FtZShsZXZlbF9udW1iZXIpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICBjb25zdCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0YS5sZXZlbHNbbGV2ZWxfbnVtYmVyXSxcclxuICAgICAgICAgICAgICAgIGxldmVsTnVtYmVyOiBsZXZlbF9udW1iZXIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IGxldmVsX251bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubG9nU2VsZWN0ZWRMZXZlbEV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayhnYW1lUGxheURhdGEsIFwiTGV2ZWxTZWxlY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBsb2dTZWxlY3RlZExldmVsRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRMZXZlbHREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb24gPyB0aGlzLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uLnRvU3RyaW5nKCkgOiBcIlwiLFxyXG4gICAgICAgICAgICBsZXZlbF9zZWxlY3RlZDogdGhpcy5sZXZlbE51bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kU2VsZWN0ZWRMZXZlbEV2ZW50KHNlbGVjdGVkTGV2ZWx0RGF0YSk7XHJcbiAgICB9XHJcbiAgICBkcmF3TGV2ZWxTZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZD8uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgICAgICAgICAgdGhpcy5kb3duQnV0dG9uKHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFycyh0aGlzLmdhbWVMZXZlbERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICAgICAgLy8gd2hlbiBhcHAgZ29lcyBiYWNrZ3JvdW5kICMyXHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZVBsYXlBdWRpb3MsIGZhbHNlKTtcclxuICAgICAgICAvLy8gc3dpcGUgbGlzdGVuZXIgIzNcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIHRoaXMuaGFuZGxlVG91Y2hTdGFydCwgZmFsc2UpO1xyXG4gICAgICAgIC8vICM0XHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb24vXCI7XHJcbmltcG9ydCB7IENMSUNLIH0gZnJvbSBcIi4uL2NvbW1vbi9ldmVudC1uYW1lc1wiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCIuLi9jb21wb25lbnRzL2F1ZGlvLXBsYXllclwiO1xyXG5pbXBvcnQgQ2xvc2VCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9jbG9zZS1idXR0b25cIjtcclxuaW1wb3J0IE5leHRCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9uZXh0LWJ1dHRvblwiO1xyXG5pbXBvcnQgUmV0cnlCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvYnV0dG9ucy9yZXRyeS1idXR0b25cIjtcclxuaW1wb3J0IHsgTW9uc3RlciB9IGZyb20gXCIuLi9jb21wb25lbnRzL21vbnN0ZXJcIjtcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzIH0gZnJvbSAnLi4vY29tcG9zaXRpb25zL2JhY2tncm91bmQnO1xyXG5leHBvcnQgY2xhc3MgTGV2ZWxFbmRTY2VuZSB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICB3aWR0aDtcclxuICAgIGltYWdlcztcclxuICAgIGxvYWRlZEltYWdlcztcclxuICAgIGltYWdlc0xvYWRlZDtcclxuICAgIGlkO1xyXG4gICAgY29udGV4dDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBjbG9zZUJ1dHRvbjtcclxuICAgIHJldHJ5QnV0dG9uO1xyXG4gICAgbmV4dEJ1dHRvbjtcclxuICAgIHN0YXJDb3VudDtcclxuICAgIGN1cnJlbnRMZXZlbDtcclxuICAgIHN3aXRjaFRvR2FtZXBsYXlDQjtcclxuICAgIHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb25DQjtcclxuICAgIGRhdGE7XHJcbiAgICBiYWNrZ3JvdW5kO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICB0aW1lb3V0cztcclxuICAgIHN0YXJEcmF3bkNvdW50O1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBoZWlnaHQsIHdpZHRoLCBjb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbCwgc3dpdGNoVG9HYW1lcGxheUNCLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IsIGRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCBtb25zdGVyUGhhc2VOdW1iZXIsIHRoaXMuc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbik7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IgPSBzd2l0Y2hUb0dhbWVwbGF5Q0I7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IgPSBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0I7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnN0YXJEcmF3bkNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gbmV3IENsb3NlQnV0dG9uKGNvbnRleHQsIGNhbnZhcywgdGhpcy53aWR0aCAqIDAuMiAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMucmV0cnlCdXR0b24gPSBuZXcgUmV0cnlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy53aWR0aCAqIDAuNSAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBOZXh0QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGggKiAwLjggLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgLyAxLjI1KTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdGFyQ291bnQgPSBzdGFyQ291bnQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL1dJTl9zY3JlZW5fYmcucG5nXCIsXHJcbiAgICAgICAgICAgIHN0YXIxSW1nOiBcIi4vYXNzZXRzL2ltYWdlcy9waW5TdGFyMS5wbmdcIixcclxuICAgICAgICAgICAgc3RhcjJJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL3BpblN0YXIyLnBuZ1wiLFxyXG4gICAgICAgICAgICBzdGFyM0ltZzogXCIuL2Fzc2V0cy9pbWFnZXMvcGluU3RhcjMucG5nXCIsXHJcbiAgICAgICAgICAgIHdpbkJhY2tncm91bmRJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL2JnX3YwMS5qcGdcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhckFuaW1hdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnNldHVwQmcoKTtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBCR19HUk9VUF9JTUdTLCBkcmF3IH0gPSBsb2FkRHluYW1pY0JnQXNzZXRzKHRoaXMuY3VycmVudExldmVsLCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgQkdfR1JPVVBfSU1HUywgZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGFyQ291bnQgPD0gMSkge1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oXCIuL2Fzc2V0cy9hdWRpb3MvTGV2ZWxMb3NlRmFuZmFyZS5tcDNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvU3BpdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKFwiLi9hc3NldHMvYXVkaW9zL0xldmVsV2luRmFuZmFyZS5tcDNcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhcIi4vYXNzZXRzL2F1ZGlvcy9pbnRyby5tcDNcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmFja2dyb3VuZEltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKyB0aGlzLmhlaWdodCAqIDAuMTIpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5QnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFyQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIHsgZGVsYXk6IDUwMCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTAwMCwgY291bnQ6IDIgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTUwMCwgY291bnQ6IDMgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMudGltZW91dHMgPSBhbmltYXRpb25zLm1hcCgoYW5pbWF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPSBhbmltYXRpb24uY291bnQ7XHJcbiAgICAgICAgICAgIH0sIGFuaW1hdGlvbi5kZWxheSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3U3RhcnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDEgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjFJbWcsIHRoaXMud2lkdGggKiAwLjIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJDb3VudCA8PSAzICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJDb3VudCA+IDEgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyRHJhd25Db3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjJJbWcsIHRoaXMud2lkdGggKiAwLjUgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoICogMC4xOSwgdGhpcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDMgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5zdGFyM0ltZywgdGhpcy53aWR0aCAqIDAuODIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiIGxldmVsZW5kIG1vdXNlY2xpY2sgXCIpO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbkNCKFwiTGV2ZWxFbmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJldHJ5QnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIGxldCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiB7IC4uLnRoaXMuZGF0YS5sZXZlbHNbdGhpcy5jdXJyZW50TGV2ZWxdLCBsZXZlbE51bWJlcjogdGhpcy5jdXJyZW50TGV2ZWwgfSxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IHRoaXMuY3VycmVudExldmVsLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBwYXNzIHNhbWUgZGF0YSBhcyBsZXZlbCBpcyBzYW1lXHJcbiAgICAgICAgICAgIHRoaXMuc3dpdGNoVG9HYW1lcGxheUNCKGdhbWVQbGF5RGF0YSwgXCJMZXZlbEVuZFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubmV4dEJ1dHRvbi5vbkNsaWNrKHgsIHkpICYmIHRoaXMuc3RhckNvdW50ID49IDIpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIGxldCBuZXh0ID0gTnVtYmVyKHRoaXMuY3VycmVudExldmVsKSArIDE7XHJcbiAgICAgICAgICAgIGxldCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiB7IC4uLnRoaXMuZGF0YS5sZXZlbHNbbmV4dF0sIGxldmVsTnVtYmVyOiBuZXh0LCB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRMZXZlbE51bWJlcjogbmV4dCxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IoZ2FtZVBsYXlEYXRhLCBcIkxldmVsRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBwYXVzZUF1ZGlvcyA9ICgpID0+IHtcclxuICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFyQ291bnQgPj0gMikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oXCIuL2Fzc2V0cy9hdWRpb3MvaW50cm8ubXAzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMudGltZW91dHMuZm9yRWFjaCgodGltZW91dCkgPT4gY2xlYXJUaW1lb3V0KHRpbWVvdXQpKTtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMucGF1c2VBdWRpb3MsIGZhbHNlKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCIuLi9jb21tb25cIjtcclxuZXhwb3J0IGNsYXNzIExvYWRpbmdTY2VuZSB7XHJcbiAgICBjYW52YXM7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICB3aWR0aDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQ7XHJcbiAgICBjbG91ZFhQb3NpdGlvbiA9IC01MDA7XHJcbiAgICBzdG9wQ2xvdWRNb3ZpbmcgPSBmYWxzZTtcclxuICAgIGNsb3VkTW92aW5nVGltZU91dCA9IDA7XHJcbiAgICByZW1vdmVMb2FkaW5nO1xyXG4gICAgY29uc3RydWN0b3Iod2lkdGgsIGhlaWdodCwgcmVtb3ZlTG9hZGluZykge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJsb2FkaW5nXCIpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLnJlbW92ZUxvYWRpbmcgPSByZW1vdmVMb2FkaW5nO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgY2xvdWQ2OiBcIi4vYXNzZXRzL2ltYWdlcy9jbG91ZF8wMS5wbmdcIixcclxuICAgICAgICAgICAgY2xvdWQ3OiBcIi4vYXNzZXRzL2ltYWdlcy9jbG91ZF8wMi5wbmdcIixcclxuICAgICAgICAgICAgY2xvdWQ4OiBcIi4vYXNzZXRzL2ltYWdlcy9jbG91ZF8wMy5wbmdcIixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3KGRlbHRhVGltZSkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuY2xvdWRYUG9zaXRpb24gKz0gZGVsdGFUaW1lICogMC43NTtcclxuICAgICAgICB0aGlzLmNsb3VkTW92aW5nVGltZU91dCArPSBkZWx0YVRpbWU7XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ID4gMjk4Mykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUxvYWRpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuNSAmJiAhdGhpcy5zdG9wQ2xvdWRNb3ZpbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgPiAyMDAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BDbG91ZE1vdmluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3VkWFBvc2l0aW9uID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0b3BDbG91ZE1vdmluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gMCA/IDAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNywgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSAwID8gMCA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gLXRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA/IC10aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSB0aGlzLndpZHRoICogMC4wNVxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy53aWR0aCAqIDAuMDVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gLXRoaXMud2lkdGggKiAwLjZcclxuICAgICAgICAgICAgICAgICAgICA/IC10aGlzLndpZHRoICogMC42XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuNVxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy53aWR0aCAqIDAuNVxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC40KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjcsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNiwgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSAtdGhpcy53aWR0aCAqIDAuMlxyXG4gICAgICAgICAgICAgICAgICAgID8gLXRoaXMud2lkdGggKiAwLjJcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNiwgMCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC42LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNiwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIDAgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCAtdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLndpZHRoICogMC40ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMud2lkdGggKiAwLjA1ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgLXRoaXMud2lkdGggKiAwLjYgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIHRoaXMud2lkdGggKiAwLjUgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIC10aGlzLndpZHRoICogMC40ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjcsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLndpZHRoICogMC40ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjcsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCAtdGhpcy53aWR0aCAqIDAuMiArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4yLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbml0Q2xvdWQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jbG91ZFhQb3NpdGlvbiA9IC01MDA7XHJcbiAgICAgICAgdGhpcy5zdG9wQ2xvdWRNb3ZpbmcgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmNsb3VkTW92aW5nVGltZU91dCA9IDA7XHJcbiAgICB9O1xyXG59XHJcbiIsImltcG9ydCB7IE1vbnN0ZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9tb25zdGVyXCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyLCBmb250IH0gZnJvbSBcIi4uLy4uL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi4vY29tcG9uZW50cy9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuLi9jb21tb24vdXRpbHNcIjtcclxuaW1wb3J0IFBsYXlCdXR0b24gZnJvbSBcIi4uL2NvbXBvbmVudHMvcGxheS1idXR0b25cIjtcclxuaW1wb3J0IHsgY3JlYXRlQmFja2dyb3VuZCwgZGVmYXVsdEJnRHJhd2luZyB9IGZyb20gJy4uL2NvbXBvc2l0aW9ucy9iYWNrZ3JvdW5kJztcclxuaW1wb3J0IHsgRmlyZWJhc2VVc2VyQ2xpY2tlZCwgUFdBSW5zdGFsbFN0YXR1cywgREVGQVVMVF9CR19HUk9VUF9JTUdTIH0gZnJvbSAnLi4vY29uc3RhbnRzLyc7XHJcbmV4cG9ydCBjbGFzcyBTdGFydFNjZW5lIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBwaWNrZWRTdG9uZTtcclxuICAgIHB3YV9zdGF0dXM7XHJcbiAgICBmaXJlYmFzZV9hbmFseXRpY3M7XHJcbiAgICBpZDtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgYnV0dG9uQ29udGV4dDtcclxuICAgIHBsYXlCdXR0b247XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdGF0aWMgU2NlbmVOYW1lO1xyXG4gICAgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgdGl0bGVGb250O1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgdG9nZ2xlQnRuO1xyXG4gICAgcHdhX2luc3RhbGxfc3RhdHVzO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBkYXRhLCBzd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FuYXZzRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1idG5cIik7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyID0gbmV3IE1vbnN0ZXIodGhpcy5jYW52YXMsIDQpO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uID0gc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnB3YV9zdGF0dXMgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmRldlRvZ2dsZSgpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlUGxheUJ1dHRvbigpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCB0aGlzLmhhbmRsZXJJbnN0YWxsUHJvbXB0KTtcclxuICAgICAgICB0aGlzLnNldHVwQmcoKTtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBERUZBVUxUX0JHX0dST1VQX0lNR1MsIGRlZmF1bHRCZ0RyYXdpbmcpO1xyXG4gICAgfTtcclxuICAgIGRldlRvZ2dsZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5jbGFzc0xpc3QudG9nZ2xlKFwib25cIik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvZ2dsZUJ0bi5jbGFzc0xpc3QuY29udGFpbnMoXCJvblwiKSkge1xyXG4gICAgICAgICAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLmlubmVyVGV4dCA9IFwiRGV2XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBEZWJ1Z2dlci5EZWJ1Z01vZGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLmlubmVyVGV4dCA9IFwiRGV2XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBhbmltYXRpb24gPSAoZGVsdGFUaW1lKSA9PiB7XHJcbiAgICAgICAgdGhpcy50aXRsZUZvbnQgPSB0aGlzLmdldEZvbnRXaWR0aE9mVGl0bGUoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmJhY2tncm91bmQ/LmRyYXcoKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IGAke3RoaXMudGl0bGVGb250fXB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5kYXRhLnRpdGxlLCB0aGlzLndpZHRoICogMC41LCB0aGlzLmhlaWdodCAvIDEwKTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy5wbGF5QnV0dG9uLmRyYXcoKTtcclxuICAgIH07XHJcbiAgICBjcmVhdGVQbGF5QnV0dG9uKCkge1xyXG4gICAgICAgIHRoaXMucGxheUJ1dHRvbiA9IG5ldyBQbGF5QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMsIHRoaXMuY2FudmFzLndpZHRoICogMC4zNSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gNyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGNvbnN0IHsgZXhjbHVkZVgsIGV4Y2x1ZGVZIH0gPSBVdGlscy5nZXRFeGNsdWRlZENvb3JkaW5hdGVzKHNlbGZFbGVtZW50LCAxNSk7XHJcbiAgICAgICAgaWYgKCEoeCA8IGV4Y2x1ZGVYICYmIHkgPCBleGNsdWRlWSkpIHtcclxuICAgICAgICAgICAgRmlyZWJhc2VJbnRlZ3JhdGlvbi5nZXRJbnN0YW5jZSgpLnNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50KCk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgZmJxKFwidHJhY2tDdXN0b21cIiwgRmlyZWJhc2VVc2VyQ2xpY2tlZCwge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IFwiY2xpY2tcIixcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZChcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIik7XHJcbiAgICAgICAgICAgIHNlbGYuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKFwiU3RhcnRTY2VuZVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmVpbnN0YWxscHJvbXB0XCIsIHRoaXMuaGFuZGxlckluc3RhbGxQcm9tcHQsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGdldEZvbnRXaWR0aE9mVGl0bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLndpZHRoICsgMjAwKSAvIHRoaXMuZGF0YS50aXRsZS5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVySW5zdGFsbFByb21wdCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5wd2FfaW5zdGFsbF9zdGF0dXMgPSBldmVudDtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzLCBcImZhbHNlXCIpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBfZ2V0UHJvdmlkZXIsIGdldEFwcCwgX3JlZ2lzdGVyQ29tcG9uZW50LCByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJ0BmaXJlYmFzZS9sb2dnZXInO1xuaW1wb3J0IHsgRXJyb3JGYWN0b3J5LCBjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzLCBGaXJlYmFzZUVycm9yLCBpc0luZGV4ZWREQkF2YWlsYWJsZSwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgaXNCcm93c2VyRXh0ZW5zaW9uLCBhcmVDb29raWVzRW5hYmxlZCwgZ2V0TW9kdWxhckluc3RhbmNlLCBkZWVwRXF1YWwgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCAnQGZpcmViYXNlL2luc3RhbGxhdGlvbnMnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVHlwZSBjb25zdGFudCBmb3IgRmlyZWJhc2UgQW5hbHl0aWNzLlxyXG4gKi9cclxuY29uc3QgQU5BTFlUSUNTX1RZUEUgPSAnYW5hbHl0aWNzJztcclxuLy8gS2V5IHRvIGF0dGFjaCBGSUQgdG8gaW4gZ3RhZyBwYXJhbXMuXHJcbmNvbnN0IEdBX0ZJRF9LRVkgPSAnZmlyZWJhc2VfaWQnO1xyXG5jb25zdCBPUklHSU5fS0VZID0gJ29yaWdpbic7XHJcbmNvbnN0IEZFVENIX1RJTUVPVVRfTUlMTElTID0gNjAgKiAxMDAwO1xyXG5jb25zdCBEWU5BTUlDX0NPTkZJR19VUkwgPSAnaHR0cHM6Ly9maXJlYmFzZS5nb29nbGVhcGlzLmNvbS92MWFscGhhL3Byb2plY3RzLy0vYXBwcy97YXBwLWlkfS93ZWJDb25maWcnO1xyXG5jb25zdCBHVEFHX1VSTCA9ICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndGFnL2pzJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcignQGZpcmViYXNlL2FuYWx5dGljcycpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBFUlJPUlMgPSB7XHJcbiAgICBbXCJhbHJlYWR5LWV4aXN0c1wiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfRVhJU1RTICovXTogJ0EgRmlyZWJhc2UgQW5hbHl0aWNzIGluc3RhbmNlIHdpdGggdGhlIGFwcElkIHskaWR9ICcgK1xyXG4gICAgICAgICcgYWxyZWFkeSBleGlzdHMuICcgK1xyXG4gICAgICAgICdPbmx5IG9uZSBGaXJlYmFzZSBBbmFseXRpY3MgaW5zdGFuY2UgY2FuIGJlIGNyZWF0ZWQgZm9yIGVhY2ggYXBwSWQuJyxcclxuICAgIFtcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEICovXTogJ2luaXRpYWxpemVBbmFseXRpY3MoKSBjYW5ub3QgYmUgY2FsbGVkIGFnYWluIHdpdGggZGlmZmVyZW50IG9wdGlvbnMgdGhhbiB0aG9zZSAnICtcclxuICAgICAgICAnaXQgd2FzIGluaXRpYWxseSBjYWxsZWQgd2l0aC4gSXQgY2FuIGJlIGNhbGxlZCBhZ2FpbiB3aXRoIHRoZSBzYW1lIG9wdGlvbnMgdG8gJyArXHJcbiAgICAgICAgJ3JldHVybiB0aGUgZXhpc3RpbmcgaW5zdGFuY2UsIG9yIGdldEFuYWx5dGljcygpIGNhbiBiZSB1c2VkICcgK1xyXG4gICAgICAgICd0byBnZXQgYSByZWZlcmVuY2UgdG8gdGhlIGFscmVhZHktaW50aWFsaXplZCBpbnN0YW5jZS4nLFxyXG4gICAgW1wiYWxyZWFkeS1pbml0aWFsaXplZC1zZXR0aW5nc1wiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfSU5JVElBTElaRURfU0VUVElOR1MgKi9dOiAnRmlyZWJhc2UgQW5hbHl0aWNzIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWQuJyArXHJcbiAgICAgICAgJ3NldHRpbmdzKCkgbXVzdCBiZSBjYWxsZWQgYmVmb3JlIGluaXRpYWxpemluZyBhbnkgQW5hbHl0aWNzIGluc3RhbmNlJyArXHJcbiAgICAgICAgJ29yIGl0IHdpbGwgaGF2ZSBubyBlZmZlY3QuJyxcclxuICAgIFtcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBBbmFseXRpY3NFcnJvci5JTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovXTogJ0ZpcmViYXNlIEFuYWx5dGljcyBJbnRlcm9wIENvbXBvbmVudCBmYWlsZWQgdG8gaW5zdGFudGlhdGU6IHskcmVhc29ufScsXHJcbiAgICBbXCJpbnZhbGlkLWFuYWx5dGljcy1jb250ZXh0XCIgLyogQW5hbHl0aWNzRXJyb3IuSU5WQUxJRF9BTkFMWVRJQ1NfQ09OVEVYVCAqL106ICdGaXJlYmFzZSBBbmFseXRpY3MgaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50LiAnICtcclxuICAgICAgICAnV3JhcCBpbml0aWFsaXphdGlvbiBvZiBhbmFseXRpY3MgaW4gYW5hbHl0aWNzLmlzU3VwcG9ydGVkKCkgJyArXHJcbiAgICAgICAgJ3RvIHByZXZlbnQgaW5pdGlhbGl6YXRpb24gaW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnRzLiBEZXRhaWxzOiB7JGVycm9ySW5mb30nLFxyXG4gICAgW1wiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5ERVhFRERCX1VOQVZBSUxBQkxFICovXTogJ0luZGV4ZWREQiB1bmF2YWlsYWJsZSBvciByZXN0cmljdGVkIGluIHRoaXMgZW52aXJvbm1lbnQuICcgK1xyXG4gICAgICAgICdXcmFwIGluaXRpYWxpemF0aW9uIG9mIGFuYWx5dGljcyBpbiBhbmFseXRpY3MuaXNTdXBwb3J0ZWQoKSAnICtcclxuICAgICAgICAndG8gcHJldmVudCBpbml0aWFsaXphdGlvbiBpbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudHMuIERldGFpbHM6IHskZXJyb3JJbmZvfScsXHJcbiAgICBbXCJmZXRjaC10aHJvdHRsZVwiIC8qIEFuYWx5dGljc0Vycm9yLkZFVENIX1RIUk9UVExFICovXTogJ1RoZSBjb25maWcgZmV0Y2ggcmVxdWVzdCB0aW1lZCBvdXQgd2hpbGUgaW4gYW4gZXhwb25lbnRpYWwgYmFja29mZiBzdGF0ZS4nICtcclxuICAgICAgICAnIFVuaXggdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kcyB3aGVuIGZldGNoIHJlcXVlc3QgdGhyb3R0bGluZyBlbmRzOiB7JHRocm90dGxlRW5kVGltZU1pbGxpc30uJyxcclxuICAgIFtcImNvbmZpZy1mZXRjaC1mYWlsZWRcIiAvKiBBbmFseXRpY3NFcnJvci5DT05GSUdfRkVUQ0hfRkFJTEVEICovXTogJ0R5bmFtaWMgY29uZmlnIGZldGNoIGZhaWxlZDogW3skaHR0cFN0YXR1c31dIHskcmVzcG9uc2VNZXNzYWdlfScsXHJcbiAgICBbXCJuby1hcGkta2V5XCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBJX0tFWSAqL106ICdUaGUgXCJhcGlLZXlcIiBmaWVsZCBpcyBlbXB0eSBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBGaXJlYmFzZSBBbmFseXRpY3MgcmVxdWlyZXMgdGhpcyBmaWVsZCB0bycgK1xyXG4gICAgICAgICdjb250YWluIGEgdmFsaWQgQVBJIGtleS4nLFxyXG4gICAgW1wibm8tYXBwLWlkXCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBQX0lEICovXTogJ1RoZSBcImFwcElkXCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gRmlyZWJhc2UgQW5hbHl0aWNzIHJlcXVpcmVzIHRoaXMgZmllbGQgdG8nICtcclxuICAgICAgICAnY29udGFpbiBhIHZhbGlkIGFwcCBJRC4nLFxyXG4gICAgW1wibm8tY2xpZW50LWlkXCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQ0xJRU5UX0lEICovXTogJ1RoZSBcImNsaWVudF9pZFwiIGZpZWxkIGlzIGVtcHR5LicsXHJcbiAgICBbXCJpbnZhbGlkLWd0YWctcmVzb3VyY2VcIiAvKiBBbmFseXRpY3NFcnJvci5JTlZBTElEX0dUQUdfUkVTT1VSQ0UgKi9dOiAnVHJ1c3RlZCBUeXBlcyBkZXRlY3RlZCBhbiBpbnZhbGlkIGd0YWcgcmVzb3VyY2U6IHskZ3RhZ1VSTH0uJ1xyXG59O1xyXG5jb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeSgnYW5hbHl0aWNzJywgJ0FuYWx5dGljcycsIEVSUk9SUyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBWZXJpZmllcyBhbmQgY3JlYXRlcyBhIFRydXN0ZWRTY3JpcHRVUkwuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVHdGFnVHJ1c3RlZFR5cGVzU2NyaXB0VVJMKHVybCkge1xyXG4gICAgaWYgKCF1cmwuc3RhcnRzV2l0aChHVEFHX1VSTCkpIHtcclxuICAgICAgICBjb25zdCBlcnIgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtZ3RhZy1yZXNvdXJjZVwiIC8qIEFuYWx5dGljc0Vycm9yLklOVkFMSURfR1RBR19SRVNPVVJDRSAqLywge1xyXG4gICAgICAgICAgICBndGFnVVJMOiB1cmxcclxuICAgICAgICB9KTtcclxuICAgICAgICBsb2dnZXIud2FybihlcnIubWVzc2FnZSk7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybDtcclxufVxyXG4vKipcclxuICogTWFrZXNoaWZ0IHBvbHlmaWxsIGZvciBQcm9taXNlLmFsbFNldHRsZWQoKS4gUmVzb2x2ZXMgd2hlbiBhbGwgcHJvbWlzZXNcclxuICogaGF2ZSBlaXRoZXIgcmVzb2x2ZWQgb3IgcmVqZWN0ZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSBwcm9taXNlcyBBcnJheSBvZiBwcm9taXNlcyB0byB3YWl0IGZvci5cclxuICovXHJcbmZ1bmN0aW9uIHByb21pc2VBbGxTZXR0bGVkKHByb21pc2VzKSB7XHJcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMubWFwKHByb21pc2UgPT4gcHJvbWlzZS5jYXRjaChlID0+IGUpKSk7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBUcnVzdGVkVHlwZVBvbGljeSBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIHRoZSBydWxlcyBwYXNzZWQgYXMgcG9saWN5T3B0aW9ucy5cclxuICpcclxuICogQHBhcmFtIHBvbGljeU5hbWUgQSBzdHJpbmcgY29udGFpbmluZyB0aGUgbmFtZSBvZiB0aGUgcG9saWN5XHJcbiAqIEBwYXJhbSBwb2xpY3lPcHRpb25zIE9iamVjdCBjb250YWluaW5nIGltcGxlbWVudGF0aW9ucyBvZiBpbnN0YW5jZSBtZXRob2RzIGZvciBUcnVzdGVkVHlwZXNQb2xpY3ksIHNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RydXN0ZWRUeXBlUG9saWN5I2luc3RhbmNlX21ldGhvZHNcclxuICogfCB0aGUgVHJ1c3RlZFR5cGVQb2xpY3kgcmVmZXJlbmNlIGRvY3VtZW50YXRpb259LlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlVHJ1c3RlZFR5cGVzUG9saWN5KHBvbGljeU5hbWUsIHBvbGljeU9wdGlvbnMpIHtcclxuICAgIC8vIENyZWF0ZSBhIFRydXN0ZWRUeXBlcyBwb2xpY3kgdGhhdCB3ZSBjYW4gdXNlIGZvciB1cGRhdGluZyBzcmNcclxuICAgIC8vIHByb3BlcnRpZXNcclxuICAgIGxldCB0cnVzdGVkVHlwZXNQb2xpY3k7XHJcbiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykge1xyXG4gICAgICAgIHRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHBvbGljeU5hbWUsIHBvbGljeU9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydXN0ZWRUeXBlc1BvbGljeTtcclxufVxyXG4vKipcclxuICogSW5zZXJ0cyBndGFnIHNjcmlwdCB0YWcgaW50byB0aGUgcGFnZSB0byBhc3luY2hyb25vdXNseSBkb3dubG9hZCBndGFnLlxyXG4gKiBAcGFyYW0gZGF0YUxheWVyTmFtZSBOYW1lIG9mIGRhdGFsYXllciAobW9zdCBvZnRlbiB0aGUgZGVmYXVsdCwgXCJfZGF0YUxheWVyXCIpLlxyXG4gKi9cclxuZnVuY3Rpb24gaW5zZXJ0U2NyaXB0VGFnKGRhdGFMYXllck5hbWUsIG1lYXN1cmVtZW50SWQpIHtcclxuICAgIGNvbnN0IHRydXN0ZWRUeXBlc1BvbGljeSA9IGNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSgnZmlyZWJhc2UtanMtc2RrLXBvbGljeScsIHtcclxuICAgICAgICBjcmVhdGVTY3JpcHRVUkw6IGNyZWF0ZUd0YWdUcnVzdGVkVHlwZXNTY3JpcHRVUkxcclxuICAgIH0pO1xyXG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAvLyBXZSBhcmUgbm90IHByb3ZpZGluZyBhbiBhbmFseXRpY3NJZCBpbiB0aGUgVVJMIGJlY2F1c2UgaXQgd291bGQgdHJpZ2dlciBhIGBwYWdlX3ZpZXdgXHJcbiAgICAvLyB3aXRob3V0IGZpZC4gV2Ugd2lsbCBpbml0aWFsaXplIGdhLWlkIHVzaW5nIGd0YWcgKGNvbmZpZykgY29tbWFuZCB0b2dldGhlciB3aXRoIGZpZC5cclxuICAgIGNvbnN0IGd0YWdTY3JpcHRVUkwgPSBgJHtHVEFHX1VSTH0/bD0ke2RhdGFMYXllck5hbWV9JmlkPSR7bWVhc3VyZW1lbnRJZH1gO1xyXG4gICAgc2NyaXB0LnNyYyA9IHRydXN0ZWRUeXBlc1BvbGljeVxyXG4gICAgICAgID8gdHJ1c3RlZFR5cGVzUG9saWN5ID09PSBudWxsIHx8IHRydXN0ZWRUeXBlc1BvbGljeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdHJ1c3RlZFR5cGVzUG9saWN5LmNyZWF0ZVNjcmlwdFVSTChndGFnU2NyaXB0VVJMKVxyXG4gICAgICAgIDogZ3RhZ1NjcmlwdFVSTDtcclxuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XHJcbiAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbn1cclxuLyoqXHJcbiAqIEdldCByZWZlcmVuY2UgdG8sIG9yIGNyZWF0ZSwgZ2xvYmFsIGRhdGFsYXllci5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBkYXRhbGF5ZXIgKG1vc3Qgb2Z0ZW4gdGhlIGRlZmF1bHQsIFwiX2RhdGFMYXllclwiKS5cclxuICovXHJcbmZ1bmN0aW9uIGdldE9yQ3JlYXRlRGF0YUxheWVyKGRhdGFMYXllck5hbWUpIHtcclxuICAgIC8vIENoZWNrIGZvciBleGlzdGluZyBkYXRhTGF5ZXIgYW5kIGNyZWF0ZSBpZiBuZWVkZWQuXHJcbiAgICBsZXQgZGF0YUxheWVyID0gW107XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh3aW5kb3dbZGF0YUxheWVyTmFtZV0pKSB7XHJcbiAgICAgICAgZGF0YUxheWVyID0gd2luZG93W2RhdGFMYXllck5hbWVdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgd2luZG93W2RhdGFMYXllck5hbWVdID0gZGF0YUxheWVyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGFMYXllcjtcclxufVxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGxvZ2ljIHdoZW4gZ3RhZyBpcyBjYWxsZWQgd2l0aCAnY29uZmlnJyBjb21tYW5kLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0NvcmUgQmFzaWMgZ3RhZyBmdW5jdGlvbiB0aGF0IGp1c3QgYXBwZW5kcyB0byBkYXRhTGF5ZXIuXHJcbiAqIEBwYXJhbSBpbml0aWFsaXphdGlvblByb21pc2VzTWFwIE1hcCBvZiBhcHBJZHMgdG8gdGhlaXIgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0IEFycmF5IG9mIGR5bmFtaWMgY29uZmlnIGZldGNoIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZFRvQXBwSWQgTWFwIG9mIEdBIG1lYXN1cmVtZW50SURzIHRvIGNvcnJlc3BvbmRpbmcgRmlyZWJhc2UgYXBwSWQuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkIEdBIE1lYXN1cmVtZW50IElEIHRvIHNldCBjb25maWcgZm9yLlxyXG4gKiBAcGFyYW0gZ3RhZ1BhcmFtcyBHdGFnIGNvbmZpZyBwYXJhbXMgdG8gc2V0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ3RhZ09uQ29uZmlnKGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcykge1xyXG4gICAgLy8gSWYgY29uZmlnIGlzIGFscmVhZHkgZmV0Y2hlZCwgd2Uga25vdyB0aGUgYXBwSWQgYW5kIGNhbiB1c2UgaXQgdG8gbG9vayB1cCB3aGF0IEZJRCBwcm9taXNlIHdlXHJcbiAgICAvLy8gYXJlIHdhaXRpbmcgZm9yLCBhbmQgd2FpdCBvbmx5IG9uIHRoYXQgb25lLlxyXG4gICAgY29uc3QgY29ycmVzcG9uZGluZ0FwcElkID0gbWVhc3VyZW1lbnRJZFRvQXBwSWRbbWVhc3VyZW1lbnRJZF07XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGlmIChjb3JyZXNwb25kaW5nQXBwSWQpIHtcclxuICAgICAgICAgICAgYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFtjb3JyZXNwb25kaW5nQXBwSWRdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSWYgY29uZmlnIGlzIG5vdCBmZXRjaGVkIHlldCwgd2FpdCBmb3IgYWxsIGNvbmZpZ3MgKHdlIGRvbid0IGtub3cgd2hpY2ggb25lIHdlIG5lZWQpIGFuZFxyXG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBhcHBJZCAoaWYgYW55KSBjb3JyZXNwb25kaW5nIHRvIHRoaXMgbWVhc3VyZW1lbnRJZC4gSWYgdGhlcmUgaXMgb25lLCB3YWl0IG9uXHJcbiAgICAgICAgICAgIC8vIHRoYXQgYXBwSWQncyBpbml0aWFsaXphdGlvbiBwcm9taXNlLiBJZiB0aGVyZSBpcyBub25lLCBwcm9taXNlIHJlc29sdmVzIGFuZCBndGFnXHJcbiAgICAgICAgICAgIC8vIGNhbGwgZ29lcyB0aHJvdWdoLlxyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljQ29uZmlnUmVzdWx0cyA9IGF3YWl0IHByb21pc2VBbGxTZXR0bGVkKGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QpO1xyXG4gICAgICAgICAgICBjb25zdCBmb3VuZENvbmZpZyA9IGR5bmFtaWNDb25maWdSZXN1bHRzLmZpbmQoY29uZmlnID0+IGNvbmZpZy5tZWFzdXJlbWVudElkID09PSBtZWFzdXJlbWVudElkKTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kQ29uZmlnKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2ZvdW5kQ29uZmlnLmFwcElkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgfVxyXG4gICAgZ3RhZ0NvcmUoXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMpO1xyXG59XHJcbi8qKlxyXG4gKiBXcmFwcGVkIGd0YWcgbG9naWMgd2hlbiBndGFnIGlzIGNhbGxlZCB3aXRoICdldmVudCcgY29tbWFuZC5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWQgR0EgTWVhc3VyZW1lbnQgSUQgdG8gbG9nIGV2ZW50IHRvLlxyXG4gKiBAcGFyYW0gZ3RhZ1BhcmFtcyBQYXJhbXMgdG8gbG9nIHdpdGggdGhpcyBldmVudC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGd0YWdPbkV2ZW50KGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGxldCBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yID0gW107XHJcbiAgICAgICAgLy8gSWYgdGhlcmUncyBhICdzZW5kX3RvJyBwYXJhbSwgY2hlY2sgaWYgYW55IElEIHNwZWNpZmllZCBtYXRjaGVzXHJcbiAgICAgICAgLy8gYW4gaW5pdGlhbGl6ZUlkcygpIHByb21pc2Ugd2UgYXJlIHdhaXRpbmcgZm9yLlxyXG4gICAgICAgIGlmIChndGFnUGFyYW1zICYmIGd0YWdQYXJhbXNbJ3NlbmRfdG8nXSkge1xyXG4gICAgICAgICAgICBsZXQgZ2FTZW5kVG9MaXN0ID0gZ3RhZ1BhcmFtc1snc2VuZF90byddO1xyXG4gICAgICAgICAgICAvLyBNYWtlIGl0IGFuIGFycmF5IGlmIGlzIGlzbid0LCBzbyBpdCBjYW4gYmUgZGVhbHQgd2l0aCB0aGUgc2FtZSB3YXkuXHJcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShnYVNlbmRUb0xpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICBnYVNlbmRUb0xpc3QgPSBbZ2FTZW5kVG9MaXN0XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBDaGVja2luZyAnc2VuZF90bycgZmllbGRzIHJlcXVpcmVzIGhhdmluZyBhbGwgbWVhc3VyZW1lbnQgSUQgcmVzdWx0cyBiYWNrIGZyb21cclxuICAgICAgICAgICAgLy8gdGhlIGR5bmFtaWMgY29uZmlnIGZldGNoLlxyXG4gICAgICAgICAgICBjb25zdCBkeW5hbWljQ29uZmlnUmVzdWx0cyA9IGF3YWl0IHByb21pc2VBbGxTZXR0bGVkKGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNlbmRUb0lkIG9mIGdhU2VuZFRvTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgLy8gQW55IGZldGNoZWQgZHluYW1pYyBtZWFzdXJlbWVudCBJRCB0aGF0IG1hdGNoZXMgdGhpcyAnc2VuZF90bycgSURcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kQ29uZmlnID0gZHluYW1pY0NvbmZpZ1Jlc3VsdHMuZmluZChjb25maWcgPT4gY29uZmlnLm1lYXN1cmVtZW50SWQgPT09IHNlbmRUb0lkKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRpYWxpemF0aW9uUHJvbWlzZSA9IGZvdW5kQ29uZmlnICYmIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbZm91bmRDb25maWcuYXBwSWRdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluaXRpYWxpemF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IucHVzaChpbml0aWFsaXphdGlvblByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRm91bmQgYW4gaXRlbSBpbiAnc2VuZF90bycgdGhhdCBpcyBub3QgYXNzb2NpYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRpcmVjdGx5IHdpdGggYW4gRklELCBwb3NzaWJseSBhIGdyb3VwLiAgRW1wdHkgdGhpcyBhcnJheSxcclxuICAgICAgICAgICAgICAgICAgICAvLyBleGl0IHRoZSBsb29wIGVhcmx5LCBhbmQgbGV0IGl0IGdldCBwb3B1bGF0ZWQgYmVsb3cuXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRoaXMgd2lsbCBiZSB1bnBvcHVsYXRlZCBpZiB0aGVyZSB3YXMgbm8gJ3NlbmRfdG8nIGZpZWxkICwgb3JcclxuICAgICAgICAvLyBpZiBub3QgYWxsIGVudHJpZXMgaW4gdGhlICdzZW5kX3RvJyBmaWVsZCBjb3VsZCBiZSBtYXBwZWQgdG9cclxuICAgICAgICAvLyBhIEZJRC4gSW4gdGhlc2UgY2FzZXMsIHdhaXQgb24gYWxsIHBlbmRpbmcgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAgICAgICAgaWYgKGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IgPSBPYmplY3QudmFsdWVzKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXApO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSdW4gY29yZSBndGFnIGZ1bmN0aW9uIHdpdGggYXJncyBhZnRlciBhbGwgcmVsZXZhbnQgaW5pdGlhbGl6YXRpb25cclxuICAgICAgICAvLyBwcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQuXHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvcik7XHJcbiAgICAgICAgLy8gV29ya2Fyb3VuZCBmb3IgaHR0cDovL2IvMTQxMzcwNDQ5IC0gdGhpcmQgYXJndW1lbnQgY2Fubm90IGJlIHVuZGVmaW5lZC5cclxuICAgICAgICBndGFnQ29yZShcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8sIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMgfHwge30pO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoZSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFdyYXBzIGEgc3RhbmRhcmQgZ3RhZyBmdW5jdGlvbiB3aXRoIGV4dHJhIGNvZGUgdG8gd2FpdCBmb3IgY29tcGxldGlvbiBvZlxyXG4gKiByZWxldmFudCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBiZWZvcmUgc2VuZGluZyByZXF1ZXN0cy5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcEd0YWcoZ3RhZ0NvcmUsIFxyXG4vKipcclxuICogQWxsb3dzIHdyYXBwZWQgZ3RhZyBjYWxscyB0byB3YWl0IG9uIHdoaWNoZXZlciBpbnRpYWxpemF0aW9uIHByb21pc2VzIGFyZSByZXF1aXJlZCxcclxuICogZGVwZW5kaW5nIG9uIHRoZSBjb250ZW50cyBvZiB0aGUgZ3RhZyBwYXJhbXMnIGBzZW5kX3RvYCBmaWVsZCwgaWYgYW55LlxyXG4gKi9cclxuaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgXHJcbi8qKlxyXG4gKiBXcmFwcGVkIGd0YWcgY2FsbHMgc29tZXRpbWVzIHJlcXVpcmUgYWxsIGR5bmFtaWMgY29uZmlnIGZldGNoZXMgdG8gaGF2ZSByZXR1cm5lZFxyXG4gKiBiZWZvcmUgZGV0ZXJtaW5pbmcgd2hhdCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyAod2hpY2ggaW5jbHVkZSBGSURzKSB0byB3YWl0IGZvci5cclxuICovXHJcbmR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIFxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGNvbmZpZyBjYWxscyBjYW4gbmFycm93IGRvd24gd2hpY2ggaW5pdGlhbGl6YXRpb24gcHJvbWlzZSAod2l0aCBGSUQpXHJcbiAqIHRvIHdhaXQgZm9yIGlmIHRoZSBtZWFzdXJlbWVudElkIGlzIGFscmVhZHkgZmV0Y2hlZCwgYnkgZ2V0dGluZyB0aGUgY29ycmVzcG9uZGluZyBhcHBJZCxcclxuICogd2hpY2ggaXMgdGhlIGtleSBmb3IgdGhlIGluaXRpYWxpemF0aW9uIHByb21pc2VzIG1hcC5cclxuICovXHJcbm1lYXN1cmVtZW50SWRUb0FwcElkKSB7XHJcbiAgICAvKipcclxuICAgICAqIFdyYXBwZXIgYXJvdW5kIGd0YWcgdGhhdCBlbnN1cmVzIEZJRCBpcyBzZW50IHdpdGggZ3RhZyBjYWxscy5cclxuICAgICAqIEBwYXJhbSBjb21tYW5kIEd0YWcgY29tbWFuZCB0eXBlLlxyXG4gICAgICogQHBhcmFtIGlkT3JOYW1lT3JQYXJhbXMgTWVhc3VyZW1lbnQgSUQgaWYgY29tbWFuZCBpcyBFVkVOVC9DT05GSUcsIHBhcmFtcyBpZiBjb21tYW5kIGlzIFNFVC5cclxuICAgICAqIEBwYXJhbSBndGFnUGFyYW1zIFBhcmFtcyBpZiBldmVudCBpcyBFVkVOVC9DT05GSUcuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIGZ1bmN0aW9uIGd0YWdXcmFwcGVyKGNvbW1hbmQsIC4uLmFyZ3MpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAvLyBJZiBldmVudCwgY2hlY2sgdGhhdCByZWxldmFudCBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBoYXZlIGNvbXBsZXRlZC5cclxuICAgICAgICAgICAgaWYgKGNvbW1hbmQgPT09IFwiZXZlbnRcIiAvKiBHdGFnQ29tbWFuZC5FVkVOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW21lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXNdID0gYXJncztcclxuICAgICAgICAgICAgICAgIC8vIElmIEVWRU5ULCBzZWNvbmQgYXJnIG11c3QgYmUgbWVhc3VyZW1lbnRJZC5cclxuICAgICAgICAgICAgICAgIGF3YWl0IGd0YWdPbkV2ZW50KGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcImNvbmZpZ1wiIC8qIEd0YWdDb21tYW5kLkNPTkZJRyAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW21lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXNdID0gYXJncztcclxuICAgICAgICAgICAgICAgIC8vIElmIENPTkZJRywgc2Vjb25kIGFyZyBtdXN0IGJlIG1lYXN1cmVtZW50SWQuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBndGFnT25Db25maWcoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcImNvbnNlbnRcIiAvKiBHdGFnQ29tbWFuZC5DT05TRU5UICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbZ3RhZ1BhcmFtc10gPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgZ3RhZ0NvcmUoXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLywgJ3VwZGF0ZScsIGd0YWdQYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1hbmQgPT09IFwiZ2V0XCIgLyogR3RhZ0NvbW1hbmQuR0VUICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbbWVhc3VyZW1lbnRJZCwgZmllbGROYW1lLCBjYWxsYmFja10gPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgZ3RhZ0NvcmUoXCJnZXRcIiAvKiBHdGFnQ29tbWFuZC5HRVQgKi8sIG1lYXN1cmVtZW50SWQsIGZpZWxkTmFtZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1hbmQgPT09IFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBbY3VzdG9tUGFyYW1zXSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBTRVQsIHNlY29uZCBhcmcgbXVzdCBiZSBwYXJhbXMuXHJcbiAgICAgICAgICAgICAgICBndGFnQ29yZShcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgY3VzdG9tUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKGNvbW1hbmQsIC4uLmFyZ3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZ3RhZ1dyYXBwZXI7XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gb3Igd3JhcHMgZXhpc3Rpbmcgb25lIGlmIGZvdW5kLlxyXG4gKiBUaGlzIHdyYXBwZWQgZnVuY3Rpb24gYXR0YWNoZXMgRmlyZWJhc2UgaW5zdGFuY2UgSUQgKEZJRCkgdG8gZ3RhZyAnY29uZmlnJyBhbmRcclxuICogJ2V2ZW50JyBjYWxscyB0aGF0IGJlbG9uZyB0byB0aGUgR0FJRCBhc3NvY2lhdGVkIHdpdGggdGhpcyBGaXJlYmFzZSBpbnN0YW5jZS5cclxuICpcclxuICogQHBhcmFtIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgTWFwIG9mIGFwcElkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXAgb2YgR0EgbWVhc3VyZW1lbnRJRHMgdG8gY29ycmVzcG9uZGluZyBGaXJlYmFzZSBhcHBJZC5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBnbG9iYWwgR0EgZGF0YWxheWVyIGFycmF5LlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uTmFtZSBOYW1lIG9mIGdsb2JhbCBndGFnIGZ1bmN0aW9uIChcImd0YWdcIiBpZiBub3QgdXNlci1zcGVjaWZpZWQpLlxyXG4gKi9cclxuZnVuY3Rpb24gd3JhcE9yQ3JlYXRlR3RhZyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgZGF0YUxheWVyTmFtZSwgZ3RhZ0Z1bmN0aW9uTmFtZSkge1xyXG4gICAgLy8gQ3JlYXRlIGEgYmFzaWMgY29yZSBndGFnIGZ1bmN0aW9uXHJcbiAgICBsZXQgZ3RhZ0NvcmUgPSBmdW5jdGlvbiAoLi4uX2FyZ3MpIHtcclxuICAgICAgICAvLyBNdXN0IHB1c2ggSUFyZ3VtZW50cyBvYmplY3QsIG5vdCBhbiBhcnJheS5cclxuICAgICAgICB3aW5kb3dbZGF0YUxheWVyTmFtZV0ucHVzaChhcmd1bWVudHMpO1xyXG4gICAgfTtcclxuICAgIC8vIFJlcGxhY2UgaXQgd2l0aCBleGlzdGluZyBvbmUgaWYgZm91bmRcclxuICAgIGlmICh3aW5kb3dbZ3RhZ0Z1bmN0aW9uTmFtZV0gJiZcclxuICAgICAgICB0eXBlb2Ygd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGd0YWdDb3JlID0gd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdO1xyXG4gICAgfVxyXG4gICAgd2luZG93W2d0YWdGdW5jdGlvbk5hbWVdID0gd3JhcEd0YWcoZ3RhZ0NvcmUsIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZ3RhZ0NvcmUsXHJcbiAgICAgICAgd3JhcHBlZEd0YWc6IHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXVxyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyB0aGUgc2NyaXB0IHRhZyBpbiB0aGUgRE9NIG1hdGNoaW5nIGJvdGggdGhlIGd0YWcgdXJsIHBhdHRlcm5cclxuICogYW5kIHRoZSBwcm92aWRlZCBkYXRhIGxheWVyIG5hbWUuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaW5kR3RhZ1NjcmlwdE9uUGFnZShkYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICBjb25zdCBzY3JpcHRUYWdzID0gd2luZG93LmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcclxuICAgIGZvciAoY29uc3QgdGFnIG9mIE9iamVjdC52YWx1ZXMoc2NyaXB0VGFncykpIHtcclxuICAgICAgICBpZiAodGFnLnNyYyAmJlxyXG4gICAgICAgICAgICB0YWcuc3JjLmluY2x1ZGVzKEdUQUdfVVJMKSAmJlxyXG4gICAgICAgICAgICB0YWcuc3JjLmluY2x1ZGVzKGRhdGFMYXllck5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0YWc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEJhY2tvZmYgZmFjdG9yIGZvciA1MDMgZXJyb3JzLCB3aGljaCB3ZSB3YW50IHRvIGJlIGNvbnNlcnZhdGl2ZSBhYm91dFxyXG4gKiB0byBhdm9pZCBvdmVybG9hZGluZyBzZXJ2ZXJzLiBFYWNoIHJldHJ5IGludGVydmFsIHdpbGwgYmVcclxuICogQkFTRV9JTlRFUlZBTF9NSUxMSVMgKiBMT05HX1JFVFJZX0ZBQ1RPUiBeIHJldHJ5Q291bnQsIHNvIHRoZSBzZWNvbmQgb25lXHJcbiAqIHdpbGwgYmUgfjMwIHNlY29uZHMgKHdpdGggZnV6emluZykuXHJcbiAqL1xyXG5jb25zdCBMT05HX1JFVFJZX0ZBQ1RPUiA9IDMwO1xyXG4vKipcclxuICogQmFzZSB3YWl0IGludGVydmFsIHRvIG11bHRpcGxpZWQgYnkgYmFja29mZkZhY3Rvcl5iYWNrb2ZmQ291bnQuXHJcbiAqL1xyXG5jb25zdCBCQVNFX0lOVEVSVkFMX01JTExJUyA9IDEwMDA7XHJcbi8qKlxyXG4gKiBTdHViYmFibGUgcmV0cnkgZGF0YSBzdG9yYWdlIGNsYXNzLlxyXG4gKi9cclxuY2xhc3MgUmV0cnlEYXRhIHtcclxuICAgIGNvbnN0cnVjdG9yKHRocm90dGxlTWV0YWRhdGEgPSB7fSwgaW50ZXJ2YWxNaWxsaXMgPSBCQVNFX0lOVEVSVkFMX01JTExJUykge1xyXG4gICAgICAgIHRoaXMudGhyb3R0bGVNZXRhZGF0YSA9IHRocm90dGxlTWV0YWRhdGE7XHJcbiAgICAgICAgdGhpcy5pbnRlcnZhbE1pbGxpcyA9IGludGVydmFsTWlsbGlzO1xyXG4gICAgfVxyXG4gICAgZ2V0VGhyb3R0bGVNZXRhZGF0YShhcHBJZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdO1xyXG4gICAgfVxyXG4gICAgc2V0VGhyb3R0bGVNZXRhZGF0YShhcHBJZCwgbWV0YWRhdGEpIHtcclxuICAgICAgICB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdID0gbWV0YWRhdGE7XHJcbiAgICB9XHJcbiAgICBkZWxldGVUaHJvdHRsZU1ldGFkYXRhKGFwcElkKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMudGhyb3R0bGVNZXRhZGF0YVthcHBJZF07XHJcbiAgICB9XHJcbn1cclxuY29uc3QgZGVmYXVsdFJldHJ5RGF0YSA9IG5ldyBSZXRyeURhdGEoKTtcclxuLyoqXHJcbiAqIFNldCBHRVQgcmVxdWVzdCBoZWFkZXJzLlxyXG4gKiBAcGFyYW0gYXBpS2V5IEFwcCBBUEkga2V5LlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SGVhZGVycyhhcGlLZXkpIHtcclxuICAgIHJldHVybiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3gtZ29vZy1hcGkta2V5JzogYXBpS2V5XHJcbiAgICB9KTtcclxufVxyXG4vKipcclxuICogRmV0Y2hlcyBkeW5hbWljIGNvbmZpZyBmcm9tIGJhY2tlbmQuXHJcbiAqIEBwYXJhbSBhcHAgRmlyZWJhc2UgYXBwIHRvIGZldGNoIGNvbmZpZyBmb3IuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBmZXRjaER5bmFtaWNDb25maWcoYXBwRmllbGRzKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCB7IGFwcElkLCBhcGlLZXkgfSA9IGFwcEZpZWxkcztcclxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICBoZWFkZXJzOiBnZXRIZWFkZXJzKGFwaUtleSlcclxuICAgIH07XHJcbiAgICBjb25zdCBhcHBVcmwgPSBEWU5BTUlDX0NPTkZJR19VUkwucmVwbGFjZSgne2FwcC1pZH0nLCBhcHBJZCk7XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGFwcFVybCwgcmVxdWVzdCk7XHJcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDAgJiYgcmVzcG9uc2Uuc3RhdHVzICE9PSAzMDQpIHtcclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJyc7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gVHJ5IHRvIGdldCBhbnkgZXJyb3IgbWVzc2FnZSB0ZXh0IGZyb20gc2VydmVyIHJlc3BvbnNlLlxyXG4gICAgICAgICAgICBjb25zdCBqc29uUmVzcG9uc2UgPSAoYXdhaXQgcmVzcG9uc2UuanNvbigpKTtcclxuICAgICAgICAgICAgaWYgKChfYSA9IGpzb25SZXNwb25zZS5lcnJvcikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZSA9IGpzb25SZXNwb25zZS5lcnJvci5tZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChfaWdub3JlZCkgeyB9XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJjb25maWctZmV0Y2gtZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQ09ORklHX0ZFVENIX0ZBSUxFRCAqLywge1xyXG4gICAgICAgICAgICBodHRwU3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXHJcbiAgICAgICAgICAgIHJlc3BvbnNlTWVzc2FnZTogZXJyb3JNZXNzYWdlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xyXG59XHJcbi8qKlxyXG4gKiBGZXRjaGVzIGR5bmFtaWMgY29uZmlnIGZyb20gYmFja2VuZCwgcmV0cnlpbmcgaWYgZmFpbGVkLlxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcCB0byBmZXRjaCBjb25maWcgZm9yLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KGFwcCwgXHJcbi8vIHJldHJ5RGF0YSBhbmQgdGltZW91dE1pbGxpcyBhcmUgcGFyYW1ldGVyaXplZCB0byBhbGxvdyBwYXNzaW5nIGEgZGlmZmVyZW50IHZhbHVlIGZvciB0ZXN0aW5nLlxyXG5yZXRyeURhdGEgPSBkZWZhdWx0UmV0cnlEYXRhLCB0aW1lb3V0TWlsbGlzKSB7XHJcbiAgICBjb25zdCB7IGFwcElkLCBhcGlLZXksIG1lYXN1cmVtZW50SWQgfSA9IGFwcC5vcHRpb25zO1xyXG4gICAgaWYgKCFhcHBJZCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwLWlkXCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBQX0lEICovKTtcclxuICAgIH1cclxuICAgIGlmICghYXBpS2V5KSB7XHJcbiAgICAgICAgaWYgKG1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG1lYXN1cmVtZW50SWQsXHJcbiAgICAgICAgICAgICAgICBhcHBJZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwaS1rZXlcIiAvKiBBbmFseXRpY3NFcnJvci5OT19BUElfS0VZICovKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRocm90dGxlTWV0YWRhdGEgPSByZXRyeURhdGEuZ2V0VGhyb3R0bGVNZXRhZGF0YShhcHBJZCkgfHwge1xyXG4gICAgICAgIGJhY2tvZmZDb3VudDogMCxcclxuICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXM6IERhdGUubm93KClcclxuICAgIH07XHJcbiAgICBjb25zdCBzaWduYWwgPSBuZXcgQW5hbHl0aWNzQWJvcnRTaWduYWwoKTtcclxuICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIC8vIE5vdGUgYSB2ZXJ5IGxvdyBkZWxheSwgZWcgPCAxMG1zLCBjYW4gZWxhcHNlIGJlZm9yZSBsaXN0ZW5lcnMgYXJlIGluaXRpYWxpemVkLlxyXG4gICAgICAgIHNpZ25hbC5hYm9ydCgpO1xyXG4gICAgfSwgdGltZW91dE1pbGxpcyAhPT0gdW5kZWZpbmVkID8gdGltZW91dE1pbGxpcyA6IEZFVENIX1RJTUVPVVRfTUlMTElTKTtcclxuICAgIHJldHVybiBhdHRlbXB0RmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KHsgYXBwSWQsIGFwaUtleSwgbWVhc3VyZW1lbnRJZCB9LCB0aHJvdHRsZU1ldGFkYXRhLCBzaWduYWwsIHJldHJ5RGF0YSk7XHJcbn1cclxuLyoqXHJcbiAqIFJ1bnMgb25lIHJldHJ5IGF0dGVtcHQuXHJcbiAqIEBwYXJhbSBhcHBGaWVsZHMgTmVjZXNzYXJ5IGFwcCBjb25maWcgZmllbGRzLlxyXG4gKiBAcGFyYW0gdGhyb3R0bGVNZXRhZGF0YSBPbmdvaW5nIG1ldGFkYXRhIHRvIGRldGVybWluZSB0aHJvdHRsaW5nIHRpbWVzLlxyXG4gKiBAcGFyYW0gc2lnbmFsIEFib3J0IHNpZ25hbC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwRmllbGRzLCB7IHRocm90dGxlRW5kVGltZU1pbGxpcywgYmFja29mZkNvdW50IH0sIHNpZ25hbCwgcmV0cnlEYXRhID0gZGVmYXVsdFJldHJ5RGF0YSAvLyBmb3IgdGVzdGluZ1xyXG4pIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IHsgYXBwSWQsIG1lYXN1cmVtZW50SWQgfSA9IGFwcEZpZWxkcztcclxuICAgIC8vIFN0YXJ0cyB3aXRoIGEgKHBvdGVudGlhbGx5IHplcm8pIHRpbWVvdXQgdG8gc3VwcG9ydCByZXN1bXB0aW9uIGZyb20gc3RvcmVkIHN0YXRlLlxyXG4gICAgLy8gRW5zdXJlcyB0aGUgdGhyb3R0bGUgZW5kIHRpbWUgaXMgaG9ub3JlZCBpZiB0aGUgbGFzdCBhdHRlbXB0IHRpbWVkIG91dC5cclxuICAgIC8vIE5vdGUgdGhlIFNESyB3aWxsIG5ldmVyIG1ha2UgYSByZXF1ZXN0IGlmIHRoZSBmZXRjaCB0aW1lb3V0IGV4cGlyZXMgYXQgdGhpcyBwb2ludC5cclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXdhaXQgc2V0QWJvcnRhYmxlVGltZW91dChzaWduYWwsIHRocm90dGxlRW5kVGltZU1pbGxpcyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChtZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGBUaW1lZCBvdXQgZmV0Y2hpbmcgdGhpcyBGaXJlYmFzZSBhcHAncyBtZWFzdXJlbWVudCBJRCBmcm9tIHRoZSBzZXJ2ZXIuYCArXHJcbiAgICAgICAgICAgICAgICBgIEZhbGxpbmcgYmFjayB0byB0aGUgbWVhc3VyZW1lbnQgSUQgJHttZWFzdXJlbWVudElkfWAgK1xyXG4gICAgICAgICAgICAgICAgYCBwcm92aWRlZCBpbiB0aGUgXCJtZWFzdXJlbWVudElkXCIgZmllbGQgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gWyR7ZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2V9XWApO1xyXG4gICAgICAgICAgICByZXR1cm4geyBhcHBJZCwgbWVhc3VyZW1lbnRJZCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoRHluYW1pY0NvbmZpZyhhcHBGaWVsZHMpO1xyXG4gICAgICAgIC8vIE5vdGUgdGhlIFNESyBvbmx5IGNsZWFycyB0aHJvdHRsZSBzdGF0ZSBpZiByZXNwb25zZSBpcyBzdWNjZXNzIG9yIG5vbi1yZXRyaWFibGUuXHJcbiAgICAgICAgcmV0cnlEYXRhLmRlbGV0ZVRocm90dGxlTWV0YWRhdGEoYXBwSWQpO1xyXG4gICAgICAgIHJldHVybiByZXNwb25zZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBlO1xyXG4gICAgICAgIGlmICghaXNSZXRyaWFibGVFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgcmV0cnlEYXRhLmRlbGV0ZVRocm90dGxlTWV0YWRhdGEoYXBwSWQpO1xyXG4gICAgICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oYEZhaWxlZCB0byBmZXRjaCB0aGlzIEZpcmViYXNlIGFwcCdzIG1lYXN1cmVtZW50IElEIGZyb20gdGhlIHNlcnZlci5gICtcclxuICAgICAgICAgICAgICAgICAgICBgIEZhbGxpbmcgYmFjayB0byB0aGUgbWVhc3VyZW1lbnQgSUQgJHttZWFzdXJlbWVudElkfWAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGAgcHJvdmlkZWQgaW4gdGhlIFwibWVhc3VyZW1lbnRJZFwiIGZpZWxkIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFske2Vycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5tZXNzYWdlfV1gKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IGFwcElkLCBtZWFzdXJlbWVudElkIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGJhY2tvZmZNaWxsaXMgPSBOdW1iZXIoKF9hID0gZXJyb3IgPT09IG51bGwgfHwgZXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVycm9yLmN1c3RvbURhdGEpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5odHRwU3RhdHVzKSA9PT0gNTAzXHJcbiAgICAgICAgICAgID8gY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIHJldHJ5RGF0YS5pbnRlcnZhbE1pbGxpcywgTE9OR19SRVRSWV9GQUNUT1IpXHJcbiAgICAgICAgICAgIDogY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIHJldHJ5RGF0YS5pbnRlcnZhbE1pbGxpcyk7XHJcbiAgICAgICAgLy8gSW5jcmVtZW50cyBiYWNrb2ZmIHN0YXRlLlxyXG4gICAgICAgIGNvbnN0IHRocm90dGxlTWV0YWRhdGEgPSB7XHJcbiAgICAgICAgICAgIHRocm90dGxlRW5kVGltZU1pbGxpczogRGF0ZS5ub3coKSArIGJhY2tvZmZNaWxsaXMsXHJcbiAgICAgICAgICAgIGJhY2tvZmZDb3VudDogYmFja29mZkNvdW50ICsgMVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gUGVyc2lzdHMgc3RhdGUuXHJcbiAgICAgICAgcmV0cnlEYXRhLnNldFRocm90dGxlTWV0YWRhdGEoYXBwSWQsIHRocm90dGxlTWV0YWRhdGEpO1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgQ2FsbGluZyBhdHRlbXB0RmV0Y2ggYWdhaW4gaW4gJHtiYWNrb2ZmTWlsbGlzfSBtaWxsaXNgKTtcclxuICAgICAgICByZXR1cm4gYXR0ZW1wdEZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeShhcHBGaWVsZHMsIHRocm90dGxlTWV0YWRhdGEsIHNpZ25hbCwgcmV0cnlEYXRhKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU3VwcG9ydHMgd2FpdGluZyBvbiBhIGJhY2tvZmYgYnk6XHJcbiAqXHJcbiAqIDx1bD5cclxuICogICA8bGk+UHJvbWlzaWZ5aW5nIHNldFRpbWVvdXQsIHNvIHdlIGNhbiBzZXQgYSB0aW1lb3V0IGluIG91ciBQcm9taXNlIGNoYWluPC9saT5cclxuICogICA8bGk+TGlzdGVuaW5nIG9uIGEgc2lnbmFsIGJ1cyBmb3IgYWJvcnQgZXZlbnRzLCBqdXN0IGxpa2UgdGhlIEZldGNoIEFQSTwvbGk+XHJcbiAqICAgPGxpPkZhaWxpbmcgaW4gdGhlIHNhbWUgd2F5IHRoZSBGZXRjaCBBUEkgZmFpbHMsIHNvIHRpbWluZyBvdXQgYSBsaXZlIHJlcXVlc3QgYW5kIGEgdGhyb3R0bGVkXHJcbiAqICAgICAgIHJlcXVlc3QgYXBwZWFyIHRoZSBzYW1lLjwvbGk+XHJcbiAqIDwvdWw+XHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmcuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRBYm9ydGFibGVUaW1lb3V0KHNpZ25hbCwgdGhyb3R0bGVFbmRUaW1lTWlsbGlzKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIC8vIERlcml2ZXMgYmFja29mZiBmcm9tIGdpdmVuIGVuZCB0aW1lLCBub3JtYWxpemluZyBuZWdhdGl2ZSBudW1iZXJzIHRvIHplcm8uXHJcbiAgICAgICAgY29uc3QgYmFja29mZk1pbGxpcyA9IE1hdGgubWF4KHRocm90dGxlRW5kVGltZU1pbGxpcyAtIERhdGUubm93KCksIDApO1xyXG4gICAgICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KHJlc29sdmUsIGJhY2tvZmZNaWxsaXMpO1xyXG4gICAgICAgIC8vIEFkZHMgbGlzdGVuZXIsIHJhdGhlciB0aGFuIHNldHMgb25hYm9ydCwgYmVjYXVzZSBzaWduYWwgaXMgYSBzaGFyZWQgb2JqZWN0LlxyXG4gICAgICAgIHNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCgpID0+IHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAvLyBJZiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMgYmVmb3JlIHRoaXMgdGltZW91dCwgdGhlIHJlamVjdGlvbiBoYXMgbm8gZWZmZWN0LlxyXG4gICAgICAgICAgICByZWplY3QoRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJmZXRjaC10aHJvdHRsZVwiIC8qIEFuYWx5dGljc0Vycm9yLkZFVENIX1RIUk9UVExFICovLCB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXNcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUge0BsaW5rIEVycm9yfSBpbmRpY2F0ZXMgYSBmZXRjaCByZXF1ZXN0IG1heSBzdWNjZWVkIGxhdGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNSZXRyaWFibGVFcnJvcihlKSB7XHJcbiAgICBpZiAoIShlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikgfHwgIWUuY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIFVzZXMgc3RyaW5nIGluZGV4IGRlZmluZWQgYnkgRXJyb3JEYXRhLCB3aGljaCBGaXJlYmFzZUVycm9yIGltcGxlbWVudHMuXHJcbiAgICBjb25zdCBodHRwU3RhdHVzID0gTnVtYmVyKGUuY3VzdG9tRGF0YVsnaHR0cFN0YXR1cyddKTtcclxuICAgIHJldHVybiAoaHR0cFN0YXR1cyA9PT0gNDI5IHx8XHJcbiAgICAgICAgaHR0cFN0YXR1cyA9PT0gNTAwIHx8XHJcbiAgICAgICAgaHR0cFN0YXR1cyA9PT0gNTAzIHx8XHJcbiAgICAgICAgaHR0cFN0YXR1cyA9PT0gNTA0KTtcclxufVxyXG4vKipcclxuICogU2hpbXMgYSBtaW5pbWFsIEFib3J0U2lnbmFsIChjb3BpZWQgZnJvbSBSZW1vdGUgQ29uZmlnKS5cclxuICpcclxuICogPHA+QWJvcnRDb250cm9sbGVyJ3MgQWJvcnRTaWduYWwgY29udmVuaWVudGx5IGRlY291cGxlcyBmZXRjaCB0aW1lb3V0IGxvZ2ljIGZyb20gb3RoZXIgYXNwZWN0c1xyXG4gKiBvZiBuZXR3b3JraW5nLCBzdWNoIGFzIHJldHJpZXMuIEZpcmViYXNlIGRvZXNuJ3QgdXNlIEFib3J0Q29udHJvbGxlciBlbm91Z2ggdG8ganVzdGlmeSBhXHJcbiAqIHBvbHlmaWxsIHJlY29tbWVuZGF0aW9uLCBsaWtlIHdlIGRvIHdpdGggdGhlIEZldGNoIEFQSSwgYnV0IHRoaXMgbWluaW1hbCBzaGltIGNhbiBlYXNpbHkgYmVcclxuICogc3dhcHBlZCBvdXQgaWYvd2hlbiB3ZSBkby5cclxuICovXHJcbmNsYXNzIEFuYWx5dGljc0Fib3J0U2lnbmFsIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9XHJcbiAgICBhYm9ydCgpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBFdmVudCBwYXJhbWV0ZXJzIHRvIHNldCBvbiAnZ3RhZycgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxyXG4gKi9cclxubGV0IGRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0O1xyXG4vKipcclxuICogTG9ncyBhbiBhbmFseXRpY3MgZXZlbnQgdGhyb3VnaCB0aGUgRmlyZWJhc2UgU0RLLlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBldmVudE5hbWUgR29vZ2xlIEFuYWx5dGljcyBldmVudCBuYW1lLCBjaG9vc2UgZnJvbSBzdGFuZGFyZCBsaXN0IG9yIHVzZSBhIGN1c3RvbSBzdHJpbmcuXHJcbiAqIEBwYXJhbSBldmVudFBhcmFtcyBBbmFseXRpY3MgZXZlbnQgcGFyYW1ldGVycy5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGxvZ0V2ZW50JDEoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiZXZlbnRcIiAvKiBHdGFnQ29tbWFuZC5FVkVOVCAqLywgZXZlbnROYW1lLCBldmVudFBhcmFtcyk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGV2ZW50UGFyYW1zKSwgeyAnc2VuZF90byc6IG1lYXN1cmVtZW50SWQgfSk7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiZXZlbnRcIiAvKiBHdGFnQ29tbWFuZC5FVkVOVCAqLywgZXZlbnROYW1lLCBwYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZXQgc2NyZWVuX25hbWUgcGFyYW1ldGVyIGZvciB0aGlzIEdvb2dsZSBBbmFseXRpY3MgSUQuXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgbG9nRXZlbnR9IHdpdGggYGV2ZW50TmFtZWAgYXMgJ3NjcmVlbl92aWV3JyBhbmQgYWRkIHJlbGV2YW50IGBldmVudFBhcmFtc2AuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvYW5hbHl0aWNzL3NjcmVlbnZpZXdzIHwgVHJhY2sgU2NyZWVudmlld3N9LlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBzY3JlZW5OYW1lIFNjcmVlbiBuYW1lIHN0cmluZyB0byBzZXQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzZXRDdXJyZW50U2NyZWVuJDEoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIHNjcmVlbk5hbWUsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCB7ICdzY3JlZW5fbmFtZSc6IHNjcmVlbk5hbWUgfSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAnc2NyZWVuX25hbWUnOiBzY3JlZW5OYW1lXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFNldCB1c2VyX2lkIHBhcmFtZXRlciBmb3IgdGhpcyBHb29nbGUgQW5hbHl0aWNzIElELlxyXG4gKlxyXG4gKiBAcGFyYW0gZ3RhZ0Z1bmN0aW9uIFdyYXBwZWQgZ3RhZyBmdW5jdGlvbiB0aGF0IHdhaXRzIGZvciBmaWQgdG8gYmUgc2V0IGJlZm9yZSBzZW5kaW5nIGFuIGV2ZW50XHJcbiAqIEBwYXJhbSBpZCBVc2VyIElEIHN0cmluZyB0byBzZXRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldFVzZXJJZCQxKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBpZCwgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpIHtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIHsgJ3VzZXJfaWQnOiBpZCB9KTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBtZWFzdXJlbWVudElkID0gYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImNvbmZpZ1wiIC8qIEd0YWdDb21tYW5kLkNPTkZJRyAqLywgbWVhc3VyZW1lbnRJZCwge1xyXG4gICAgICAgICAgICB1cGRhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICd1c2VyX2lkJzogaWRcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2V0IGFsbCBvdGhlciB1c2VyIHByb3BlcnRpZXMgb3RoZXIgdGhhbiB1c2VyX2lkIGFuZCBzY3JlZW5fbmFtZS5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gcHJvcGVydGllcyBNYXAgb2YgdXNlciBwcm9wZXJ0aWVzIHRvIHNldFxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0VXNlclByb3BlcnRpZXMkMShndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSwgcHJvcGVydGllcywgb3B0aW9ucykge1xyXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5nbG9iYWwpIHtcclxuICAgICAgICBjb25zdCBmbGF0UHJvcGVydGllcyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHByb3BlcnRpZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIHVzZSBkb3Qgbm90YXRpb24gZm9yIG1lcmdlIGJlaGF2aW9yIGluIGd0YWcuanNcclxuICAgICAgICAgICAgZmxhdFByb3BlcnRpZXNbYHVzZXJfcHJvcGVydGllcy4ke2tleX1gXSA9IHByb3BlcnRpZXNba2V5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCBmbGF0UHJvcGVydGllcyk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAndXNlcl9wcm9wZXJ0aWVzJzogcHJvcGVydGllc1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYSB1bmlxdWUgR29vZ2xlIEFuYWx5dGljcyBpZGVudGlmaWVyIGZvciB0aGUgd2ViIGNsaWVudC5cclxuICogU2VlIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9hbmFseXRpY3MvZGV2Z3VpZGVzL2NvbGxlY3Rpb24vZ2E0L3JlZmVyZW5jZS9jb25maWcjY2xpZW50X2lkIHwgY2xpZW50X2lkfS5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gaW50ZXJuYWxHZXRHb29nbGVBbmFseXRpY3NDbGllbnRJZChndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSkge1xyXG4gICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiZ2V0XCIgLyogR3RhZ0NvbW1hbmQuR0VUICovLCBtZWFzdXJlbWVudElkLCAnY2xpZW50X2lkJywgKGNsaWVudElkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghY2xpZW50SWQpIHtcclxuICAgICAgICAgICAgICAgIHJlamVjdChFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWNsaWVudC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0NMSUVOVF9JRCAqLykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUoY2xpZW50SWQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldCB3aGV0aGVyIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBJRC5cclxuICpcclxuICogQHBhcmFtIGVuYWJsZWQgSWYgdHJ1ZSwgY29sbGVjdGlvbiBpcyBlbmFibGVkIGZvciB0aGlzIElELlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQkMShpbml0aWFsaXphdGlvblByb21pc2UsIGVuYWJsZWQpIHtcclxuICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICB3aW5kb3dbYGdhLWRpc2FibGUtJHttZWFzdXJlbWVudElkfWBdID0gIWVuYWJsZWQ7XHJcbn1cclxuLyoqXHJcbiAqIENvbnNlbnQgcGFyYW1ldGVycyB0byBkZWZhdWx0IHRvIGR1cmluZyAnZ3RhZycgaW5pdGlhbGl6YXRpb24uXHJcbiAqL1xyXG5sZXQgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQ7XHJcbi8qKlxyXG4gKiBTZXRzIHRoZSB2YXJpYWJsZSB7QGxpbmsgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXR9IGZvciB1c2UgaW4gdGhlIGluaXRpYWxpemF0aW9uIG9mXHJcbiAqIGFuYWx5dGljcy5cclxuICpcclxuICogQHBhcmFtIGNvbnNlbnRTZXR0aW5ncyBNYXBzIHRoZSBhcHBsaWNhYmxlIGVuZCB1c2VyIGNvbnNlbnQgc3RhdGUgZm9yIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0KGNvbnNlbnRTZXR0aW5ncykge1xyXG4gICAgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQgPSBjb25zZW50U2V0dGluZ3M7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgdGhlIHZhcmlhYmxlIGBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdGAgZm9yIHVzZSBpbiB0aGUgaW5pdGlhbGl6YXRpb24gb2ZcclxuICogYW5hbHl0aWNzLlxyXG4gKlxyXG4gKiBAcGFyYW0gY3VzdG9tUGFyYW1zIEFueSBjdXN0b20gcGFyYW1zIHRoZSB1c2VyIG1heSBwYXNzIHRvIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQoY3VzdG9tUGFyYW1zKSB7XHJcbiAgICBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdCA9IGN1c3RvbVBhcmFtcztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQigpIHtcclxuICAgIGlmICghaXNJbmRleGVkREJBdmFpbGFibGUoKSkge1xyXG4gICAgICAgIGxvZ2dlci53YXJuKEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5ERVhFRERCX1VOQVZBSUxBQkxFICovLCB7XHJcbiAgICAgICAgICAgIGVycm9ySW5mbzogJ0luZGV4ZWREQiBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnQuJ1xyXG4gICAgICAgIH0pLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbmRleGVkZGItdW5hdmFpbGFibGVcIiAvKiBBbmFseXRpY3NFcnJvci5JTkRFWEVEREJfVU5BVkFJTEFCTEUgKi8sIHtcclxuICAgICAgICAgICAgICAgIGVycm9ySW5mbzogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgfSkubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICogSW5pdGlhbGl6ZSB0aGUgYW5hbHl0aWNzIGluc3RhbmNlIGluIGd0YWcuanMgYnkgY2FsbGluZyBjb25maWcgY29tbWFuZCB3aXRoIGZpZC5cclxuICpcclxuICogTk9URTogV2UgY29tYmluZSBhbmFseXRpY3MgaW5pdGlhbGl6YXRpb24gYW5kIHNldHRpbmcgZmlkIHRvZ2V0aGVyIGJlY2F1c2Ugd2Ugd2FudCBmaWQgdG8gYmVcclxuICogcGFydCBvZiB0aGUgYHBhZ2Vfdmlld2AgZXZlbnQgdGhhdCdzIHNlbnQgZHVyaW5nIHRoZSBpbml0aWFsaXphdGlvblxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcFxyXG4gKiBAcGFyYW0gZ3RhZ0NvcmUgVGhlIGd0YWcgZnVuY3Rpb24gdGhhdCdzIG5vdCB3cmFwcGVkLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBhbGwgZHluYW1pYyBjb25maWcgcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXBzIG1lYXN1cmVtZW50SUQgdG8gYXBwSUQuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIF9GaXJlYmFzZUluc3RhbGxhdGlvbnNJbnRlcm5hbCBpbnN0YW5jZS5cclxuICpcclxuICogQHJldHVybnMgTWVhc3VyZW1lbnQgSUQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBfaW5pdGlhbGl6ZUFuYWx5dGljcyhhcHAsIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QsIG1lYXN1cmVtZW50SWRUb0FwcElkLCBpbnN0YWxsYXRpb25zLCBndGFnQ29yZSwgZGF0YUxheWVyTmFtZSwgb3B0aW9ucykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgZHluYW1pY0NvbmZpZ1Byb21pc2UgPSBmZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwKTtcclxuICAgIC8vIE9uY2UgZmV0Y2hlZCwgbWFwIG1lYXN1cmVtZW50SWRzIHRvIGFwcElkLCBmb3IgZWFzZSBvZiBsb29rdXAgaW4gd3JhcHBlZCBndGFnIGZ1bmN0aW9uLlxyXG4gICAgZHluYW1pY0NvbmZpZ1Byb21pc2VcclxuICAgICAgICAudGhlbihjb25maWcgPT4ge1xyXG4gICAgICAgIG1lYXN1cmVtZW50SWRUb0FwcElkW2NvbmZpZy5tZWFzdXJlbWVudElkXSA9IGNvbmZpZy5hcHBJZDtcclxuICAgICAgICBpZiAoYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCAmJlxyXG4gICAgICAgICAgICBjb25maWcubWVhc3VyZW1lbnRJZCAhPT0gYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihgVGhlIG1lYXN1cmVtZW50IElEIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcgKCR7YXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZH0pYCArXHJcbiAgICAgICAgICAgICAgICBgIGRvZXMgbm90IG1hdGNoIHRoZSBtZWFzdXJlbWVudCBJRCBmZXRjaGVkIGZyb20gdGhlIHNlcnZlciAoJHtjb25maWcubWVhc3VyZW1lbnRJZH0pLmAgK1xyXG4gICAgICAgICAgICAgICAgYCBUbyBlbnN1cmUgYW5hbHl0aWNzIGV2ZW50cyBhcmUgYWx3YXlzIHNlbnQgdG8gdGhlIGNvcnJlY3QgQW5hbHl0aWNzIHByb3BlcnR5LGAgK1xyXG4gICAgICAgICAgICAgICAgYCB1cGRhdGUgdGhlYCArXHJcbiAgICAgICAgICAgICAgICBgIG1lYXN1cmVtZW50IElEIGZpZWxkIGluIHRoZSBsb2NhbCBjb25maWcgb3IgcmVtb3ZlIGl0IGZyb20gdGhlIGxvY2FsIGNvbmZpZy5gKTtcclxuICAgICAgICB9XHJcbiAgICB9KVxyXG4gICAgICAgIC5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbiAgICAvLyBBZGQgdG8gbGlzdCB0byB0cmFjayBzdGF0ZSBvZiBhbGwgZHluYW1pYyBjb25maWcgcHJvbWlzZXMuXHJcbiAgICBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LnB1c2goZHluYW1pY0NvbmZpZ1Byb21pc2UpO1xyXG4gICAgY29uc3QgZmlkUHJvbWlzZSA9IHZhbGlkYXRlSW5kZXhlZERCKCkudGhlbihlbnZJc1ZhbGlkID0+IHtcclxuICAgICAgICBpZiAoZW52SXNWYWxpZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFsbGF0aW9ucy5nZXRJZCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IFtkeW5hbWljQ29uZmlnLCBmaWRdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgIGR5bmFtaWNDb25maWdQcm9taXNlLFxyXG4gICAgICAgIGZpZFByb21pc2VcclxuICAgIF0pO1xyXG4gICAgLy8gRGV0ZWN0IGlmIHVzZXIgaGFzIGFscmVhZHkgcHV0IHRoZSBndGFnIDxzY3JpcHQ+IHRhZyBvbiB0aGlzIHBhZ2Ugd2l0aCB0aGUgcGFzc2VkIGluXHJcbiAgICAvLyBkYXRhIGxheWVyIG5hbWUuXHJcbiAgICBpZiAoIWZpbmRHdGFnU2NyaXB0T25QYWdlKGRhdGFMYXllck5hbWUpKSB7XHJcbiAgICAgICAgaW5zZXJ0U2NyaXB0VGFnKGRhdGFMYXllck5hbWUsIGR5bmFtaWNDb25maWcubWVhc3VyZW1lbnRJZCk7XHJcbiAgICB9XHJcbiAgICAvLyBEZXRlY3RzIGlmIHRoZXJlIGFyZSBjb25zZW50IHNldHRpbmdzIHRoYXQgbmVlZCB0byBiZSBjb25maWd1cmVkLlxyXG4gICAgaWYgKGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0KSB7XHJcbiAgICAgICAgZ3RhZ0NvcmUoXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLywgJ2RlZmF1bHQnLCBkZWZhdWx0Q29uc2VudFNldHRpbmdzRm9ySW5pdCk7XHJcbiAgICAgICAgX3NldENvbnNlbnREZWZhdWx0Rm9ySW5pdCh1bmRlZmluZWQpO1xyXG4gICAgfVxyXG4gICAgLy8gVGhpcyBjb21tYW5kIGluaXRpYWxpemVzIGd0YWcuanMgYW5kIG9ubHkgbmVlZHMgdG8gYmUgY2FsbGVkIG9uY2UgZm9yIHRoZSBlbnRpcmUgd2ViIGFwcCxcclxuICAgIC8vIGJ1dCBzaW5jZSBpdCBpcyBpZGVtcG90ZW50LCB3ZSBjYW4gY2FsbCBpdCBtdWx0aXBsZSB0aW1lcy5cclxuICAgIC8vIFdlIGtlZXAgaXQgdG9nZXRoZXIgd2l0aCBvdGhlciBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgYmV0dGVyIGNvZGUgc3RydWN0dXJlLlxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgIGd0YWdDb3JlKCdqcycsIG5ldyBEYXRlKCkpO1xyXG4gICAgLy8gVXNlciBjb25maWcgYWRkZWQgZmlyc3QuIFdlIGRvbid0IHdhbnQgdXNlcnMgdG8gYWNjaWRlbnRhbGx5IG92ZXJ3cml0ZVxyXG4gICAgLy8gYmFzZSBGaXJlYmFzZSBjb25maWcgcHJvcGVydGllcy5cclxuICAgIGNvbnN0IGNvbmZpZ1Byb3BlcnRpZXMgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29uZmlnKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB7fTtcclxuICAgIC8vIGd1YXJkIGFnYWluc3QgZGV2ZWxvcGVycyBhY2NpZGVudGFsbHkgc2V0dGluZyBwcm9wZXJ0aWVzIHdpdGggcHJlZml4IGBmaXJlYmFzZV9gXHJcbiAgICBjb25maWdQcm9wZXJ0aWVzW09SSUdJTl9LRVldID0gJ2ZpcmViYXNlJztcclxuICAgIGNvbmZpZ1Byb3BlcnRpZXMudXBkYXRlID0gdHJ1ZTtcclxuICAgIGlmIChmaWQgIT0gbnVsbCkge1xyXG4gICAgICAgIGNvbmZpZ1Byb3BlcnRpZXNbR0FfRklEX0tFWV0gPSBmaWQ7XHJcbiAgICB9XHJcbiAgICAvLyBJdCBzaG91bGQgYmUgdGhlIGZpcnN0IGNvbmZpZyBjb21tYW5kIGNhbGxlZCBvbiB0aGlzIEdBLUlEXHJcbiAgICAvLyBJbml0aWFsaXplIHRoaXMgR0EtSUQgYW5kIHNldCBGSUQgb24gaXQgdXNpbmcgdGhlIGd0YWcgY29uZmlnIEFQSS5cclxuICAgIC8vIE5vdGU6IFRoaXMgd2lsbCB0cmlnZ2VyIGEgcGFnZV92aWV3IGV2ZW50IHVubGVzcyAnc2VuZF9wYWdlX3ZpZXcnIGlzIHNldCB0byBmYWxzZSBpblxyXG4gICAgLy8gYGNvbmZpZ1Byb3BlcnRpZXNgLlxyXG4gICAgZ3RhZ0NvcmUoXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIGR5bmFtaWNDb25maWcubWVhc3VyZW1lbnRJZCwgY29uZmlnUHJvcGVydGllcyk7XHJcbiAgICAvLyBEZXRlY3RzIGlmIHRoZXJlIGlzIGRhdGEgdGhhdCB3aWxsIGJlIHNldCBvbiBldmVyeSBldmVudCBsb2dnZWQgZnJvbSB0aGUgU0RLLlxyXG4gICAgaWYgKGRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KSB7XHJcbiAgICAgICAgZ3RhZ0NvcmUoXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIGRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KTtcclxuICAgICAgICBfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQodW5kZWZpbmVkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBkeW5hbWljQ29uZmlnLm1lYXN1cmVtZW50SWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEFuYWx5dGljcyBTZXJ2aWNlIGNsYXNzLlxyXG4gKi9cclxuY2xhc3MgQW5hbHl0aWNzU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihhcHApIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgIH1cclxuICAgIF9kZWxldGUoKSB7XHJcbiAgICAgICAgZGVsZXRlIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbdGhpcy5hcHAub3B0aW9ucy5hcHBJZF07XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBNYXBzIGFwcElkIHRvIGZ1bGwgaW5pdGlhbGl6YXRpb24gcHJvbWlzZS4gV3JhcHBlZCBndGFnIGNhbGxzIG11c3Qgd2FpdCBvblxyXG4gKiBhbGwgb3Igc29tZSBvZiB0aGVzZSwgZGVwZW5kaW5nIG9uIHRoZSBjYWxsJ3MgYHNlbmRfdG9gIHBhcmFtIGFuZCB0aGUgc3RhdHVzXHJcbiAqIG9mIHRoZSBkeW5hbWljIGNvbmZpZyBmZXRjaGVzIChzZWUgYmVsb3cpLlxyXG4gKi9cclxubGV0IGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgPSB7fTtcclxuLyoqXHJcbiAqIExpc3Qgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuIEluIGNlcnRhaW4gY2FzZXMsIHdyYXBwZWQgZ3RhZyBjYWxsc1xyXG4gKiB3YWl0IG9uIGFsbCB0aGVzZSB0byBiZSBjb21wbGV0ZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgaWYgaXQgY2FuIHNlbGVjdGl2ZWx5XHJcbiAqIHdhaXQgZm9yIG9ubHkgY2VydGFpbiBpbml0aWFsaXphdGlvbiAoRklEKSBwcm9taXNlcyBvciBpZiBpdCBtdXN0IHdhaXQgZm9yIGFsbC5cclxuICovXHJcbmxldCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0ID0gW107XHJcbi8qKlxyXG4gKiBNYXBzIGZldGNoZWQgbWVhc3VyZW1lbnRJZHMgdG8gYXBwSWQuIFBvcHVsYXRlZCB3aGVuIHRoZSBhcHAncyBkeW5hbWljIGNvbmZpZ1xyXG4gKiBmZXRjaCBjb21wbGV0ZXMuIElmIGFscmVhZHkgcG9wdWxhdGVkLCBndGFnIGNvbmZpZyBjYWxscyBjYW4gdXNlIHRoaXMgdG9cclxuICogc2VsZWN0aXZlbHkgd2FpdCBmb3Igb25seSB0aGlzIGFwcCdzIGluaXRpYWxpemF0aW9uIHByb21pc2UgKEZJRCkgaW5zdGVhZCBvZiBhbGxcclxuICogaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqL1xyXG5jb25zdCBtZWFzdXJlbWVudElkVG9BcHBJZCA9IHt9O1xyXG4vKipcclxuICogTmFtZSBmb3Igd2luZG93IGdsb2JhbCBkYXRhIGxheWVyIGFycmF5IHVzZWQgYnkgR0E6IGRlZmF1bHRzIHRvICdkYXRhTGF5ZXInLlxyXG4gKi9cclxubGV0IGRhdGFMYXllck5hbWUgPSAnZGF0YUxheWVyJztcclxuLyoqXHJcbiAqIE5hbWUgZm9yIHdpbmRvdyBnbG9iYWwgZ3RhZyBmdW5jdGlvbiB1c2VkIGJ5IEdBOiBkZWZhdWx0cyB0byAnZ3RhZycuXHJcbiAqL1xyXG5sZXQgZ3RhZ05hbWUgPSAnZ3RhZyc7XHJcbi8qKlxyXG4gKiBSZXByb2R1Y3Rpb24gb2Ygc3RhbmRhcmQgZ3RhZyBmdW5jdGlvbiBvciByZWZlcmVuY2UgdG8gZXhpc3RpbmdcclxuICogZ3RhZyBmdW5jdGlvbiBvbiB3aW5kb3cgb2JqZWN0LlxyXG4gKi9cclxubGV0IGd0YWdDb3JlRnVuY3Rpb247XHJcbi8qKlxyXG4gKiBXcmFwcGVyIGFyb3VuZCBndGFnIGZ1bmN0aW9uIHRoYXQgZW5zdXJlcyBGSUQgaXMgc2VudCB3aXRoIGFsbFxyXG4gKiByZWxldmFudCBldmVudCBhbmQgY29uZmlnIGNhbGxzLlxyXG4gKi9cclxubGV0IHdyYXBwZWRHdGFnRnVuY3Rpb247XHJcbi8qKlxyXG4gKiBGbGFnIHRvIGVuc3VyZSBwYWdlIGluaXRpYWxpemF0aW9uIHN0ZXBzIChjcmVhdGlvbiBvciB3cmFwcGluZyBvZlxyXG4gKiBkYXRhTGF5ZXIgYW5kIGd0YWcgc2NyaXB0KSBhcmUgb25seSBydW4gb25jZSBwZXIgcGFnZSBsb2FkLlxyXG4gKi9cclxubGV0IGdsb2JhbEluaXREb25lID0gZmFsc2U7XHJcbi8qKlxyXG4gKiBDb25maWd1cmVzIEZpcmViYXNlIEFuYWx5dGljcyB0byB1c2UgY3VzdG9tIGBndGFnYCBvciBgZGF0YUxheWVyYCBuYW1lcy5cclxuICogSW50ZW5kZWQgdG8gYmUgdXNlZCBpZiBgZ3RhZy5qc2Agc2NyaXB0IGhhcyBiZWVuIGluc3RhbGxlZCBvblxyXG4gKiB0aGlzIHBhZ2UgaW5kZXBlbmRlbnRseSBvZiBGaXJlYmFzZSBBbmFseXRpY3MsIGFuZCBpcyB1c2luZyBub24tZGVmYXVsdFxyXG4gKiBuYW1lcyBmb3IgZWl0aGVyIHRoZSBgZ3RhZ2AgZnVuY3Rpb24gb3IgZm9yIGBkYXRhTGF5ZXJgLlxyXG4gKiBNdXN0IGJlIGNhbGxlZCBiZWZvcmUgY2FsbGluZyBgZ2V0QW5hbHl0aWNzKClgIG9yIGl0IHdvbid0XHJcbiAqIGhhdmUgYW55IGVmZmVjdC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gb3B0aW9ucyAtIEN1c3RvbSBndGFnIGFuZCBkYXRhTGF5ZXIgbmFtZXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXR0aW5ncyhvcHRpb25zKSB7XHJcbiAgICBpZiAoZ2xvYmFsSW5pdERvbmUpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEICovKTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmRhdGFMYXllck5hbWUpIHtcclxuICAgICAgICBkYXRhTGF5ZXJOYW1lID0gb3B0aW9ucy5kYXRhTGF5ZXJOYW1lO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMuZ3RhZ05hbWUpIHtcclxuICAgICAgICBndGFnTmFtZSA9IG9wdGlvbnMuZ3RhZ05hbWU7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiBubyBlbnZpcm9ubWVudCBtaXNtYXRjaCBpcyBmb3VuZC5cclxuICogSWYgZW52aXJvbm1lbnQgbWlzbWF0Y2hlcyBhcmUgZm91bmQsIHRocm93cyBhbiBJTlZBTElEX0FOQUxZVElDU19DT05URVhUXHJcbiAqIGVycm9yIHRoYXQgYWxzbyBsaXN0cyBkZXRhaWxzIGZvciBlYWNoIG1pc21hdGNoIGZvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gd2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCgpIHtcclxuICAgIGNvbnN0IG1pc21hdGNoZWRFbnZNZXNzYWdlcyA9IFtdO1xyXG4gICAgaWYgKGlzQnJvd3NlckV4dGVuc2lvbigpKSB7XHJcbiAgICAgICAgbWlzbWF0Y2hlZEVudk1lc3NhZ2VzLnB1c2goJ1RoaXMgaXMgYSBicm93c2VyIGV4dGVuc2lvbiBlbnZpcm9ubWVudC4nKTtcclxuICAgIH1cclxuICAgIGlmICghYXJlQ29va2llc0VuYWJsZWQoKSkge1xyXG4gICAgICAgIG1pc21hdGNoZWRFbnZNZXNzYWdlcy5wdXNoKCdDb29raWVzIGFyZSBub3QgYXZhaWxhYmxlLicpO1xyXG4gICAgfVxyXG4gICAgaWYgKG1pc21hdGNoZWRFbnZNZXNzYWdlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgY29uc3QgZGV0YWlscyA9IG1pc21hdGNoZWRFbnZNZXNzYWdlc1xyXG4gICAgICAgICAgICAubWFwKChtZXNzYWdlLCBpbmRleCkgPT4gYCgke2luZGV4ICsgMX0pICR7bWVzc2FnZX1gKVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgICAgIGNvbnN0IGVyciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1hbmFseXRpY3MtY29udGV4dFwiIC8qIEFuYWx5dGljc0Vycm9yLklOVkFMSURfQU5BTFlUSUNTX0NPTlRFWFQgKi8sIHtcclxuICAgICAgICAgICAgZXJyb3JJbmZvOiBkZXRhaWxzXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBBbmFseXRpY3MgaW5zdGFuY2UgZmFjdG9yeS5cclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBmYWN0b3J5KGFwcCwgaW5zdGFsbGF0aW9ucywgb3B0aW9ucykge1xyXG4gICAgd2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCgpO1xyXG4gICAgY29uc3QgYXBwSWQgPSBhcHAub3B0aW9ucy5hcHBJZDtcclxuICAgIGlmICghYXBwSWQpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQUF9JRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5vcHRpb25zLmFwaUtleSkge1xyXG4gICAgICAgIGlmIChhcHAub3B0aW9ucy5tZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGBUaGUgXCJhcGlLZXlcIiBmaWVsZCBpcyBlbXB0eSBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBUaGlzIGlzIG5lZWRlZCB0byBmZXRjaCB0aGUgbGF0ZXN0YCArXHJcbiAgICAgICAgICAgICAgICBgIG1lYXN1cmVtZW50IElEIGZvciB0aGlzIEZpcmViYXNlIGFwcC4gRmFsbGluZyBiYWNrIHRvIHRoZSBtZWFzdXJlbWVudCBJRCAke2FwcC5vcHRpb25zLm1lYXN1cmVtZW50SWR9YCArXHJcbiAgICAgICAgICAgICAgICBgIHByb3ZpZGVkIGluIHRoZSBcIm1lYXN1cmVtZW50SWRcIiBmaWVsZCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcGkta2V5XCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBJX0tFWSAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdICE9IG51bGwpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFscmVhZHktZXhpc3RzXCIgLyogQW5hbHl0aWNzRXJyb3IuQUxSRUFEWV9FWElTVFMgKi8sIHtcclxuICAgICAgICAgICAgaWQ6IGFwcElkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWdsb2JhbEluaXREb25lKSB7XHJcbiAgICAgICAgLy8gU3RlcHMgaGVyZSBzaG91bGQgb25seSBiZSBkb25lIG9uY2UgcGVyIHBhZ2U6IGNyZWF0aW9uIG9yIHdyYXBwaW5nXHJcbiAgICAgICAgLy8gb2YgZGF0YUxheWVyIGFuZCBnbG9iYWwgZ3RhZyBmdW5jdGlvbi5cclxuICAgICAgICBnZXRPckNyZWF0ZURhdGFMYXllcihkYXRhTGF5ZXJOYW1lKTtcclxuICAgICAgICBjb25zdCB7IHdyYXBwZWRHdGFnLCBndGFnQ29yZSB9ID0gd3JhcE9yQ3JlYXRlR3RhZyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgZGF0YUxheWVyTmFtZSwgZ3RhZ05hbWUpO1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24gPSB3cmFwcGVkR3RhZztcclxuICAgICAgICBndGFnQ29yZUZ1bmN0aW9uID0gZ3RhZ0NvcmU7XHJcbiAgICAgICAgZ2xvYmFsSW5pdERvbmUgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgLy8gQXN5bmMgYnV0IG5vbi1ibG9ja2luZy5cclxuICAgIC8vIFRoaXMgbWFwIHJlZmxlY3RzIHRoZSBjb21wbGV0aW9uIHN0YXRlIG9mIGFsbCBwcm9taXNlcyBmb3IgZWFjaCBhcHBJZC5cclxuICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYXBwSWRdID0gX2luaXRpYWxpemVBbmFseXRpY3MoYXBwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgaW5zdGFsbGF0aW9ucywgZ3RhZ0NvcmVGdW5jdGlvbiwgZGF0YUxheWVyTmFtZSwgb3B0aW9ucyk7XHJcbiAgICBjb25zdCBhbmFseXRpY3NJbnN0YW5jZSA9IG5ldyBBbmFseXRpY3NTZXJ2aWNlKGFwcCk7XHJcbiAgICByZXR1cm4gYW5hbHl0aWNzSW5zdGFuY2U7XHJcbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xyXG4vKipcclxuICogUmV0dXJucyBhbiB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGFwcC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSB0byB1c2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBbmFseXRpY3MoYXBwID0gZ2V0QXBwKCkpIHtcclxuICAgIGFwcCA9IGdldE1vZHVsYXJJbnN0YW5jZShhcHApO1xyXG4gICAgLy8gRGVwZW5kZW5jaWVzXHJcbiAgICBjb25zdCBhbmFseXRpY3NQcm92aWRlciA9IF9nZXRQcm92aWRlcihhcHAsIEFOQUxZVElDU19UWVBFKTtcclxuICAgIGlmIChhbmFseXRpY3NQcm92aWRlci5pc0luaXRpYWxpemVkKCkpIHtcclxuICAgICAgICByZXR1cm4gYW5hbHl0aWNzUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5pdGlhbGl6ZUFuYWx5dGljcyhhcHApO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIHtAbGluayBBbmFseXRpY3N9IGluc3RhbmNlIGZvciB0aGUgZ2l2ZW4gYXBwLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IHRvIHVzZS5cclxuICovXHJcbmZ1bmN0aW9uIGluaXRpYWxpemVBbmFseXRpY3MoYXBwLCBvcHRpb25zID0ge30pIHtcclxuICAgIC8vIERlcGVuZGVuY2llc1xyXG4gICAgY29uc3QgYW5hbHl0aWNzUHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCBBTkFMWVRJQ1NfVFlQRSk7XHJcbiAgICBpZiAoYW5hbHl0aWNzUHJvdmlkZXIuaXNJbml0aWFsaXplZCgpKSB7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IGFuYWx5dGljc1Byb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgYW5hbHl0aWNzUHJvdmlkZXIuZ2V0T3B0aW9ucygpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdJbnN0YW5jZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYWxyZWFkeS1pbml0aWFsaXplZFwiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfSU5JVElBTElaRUQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGFuYWx5dGljc0luc3RhbmNlID0gYW5hbHl0aWNzUHJvdmlkZXIuaW5pdGlhbGl6ZSh7IG9wdGlvbnMgfSk7XHJcbiAgICByZXR1cm4gYW5hbHl0aWNzSW5zdGFuY2U7XHJcbn1cclxuLyoqXHJcbiAqIFRoaXMgaXMgYSBwdWJsaWMgc3RhdGljIG1ldGhvZCBwcm92aWRlZCB0byB1c2VycyB0aGF0IHdyYXBzIGZvdXIgZGlmZmVyZW50IGNoZWNrczpcclxuICpcclxuICogMS4gQ2hlY2sgaWYgaXQncyBub3QgYSBicm93c2VyIGV4dGVuc2lvbiBlbnZpcm9ubWVudC5cclxuICogMi4gQ2hlY2sgaWYgY29va2llcyBhcmUgZW5hYmxlZCBpbiBjdXJyZW50IGJyb3dzZXIuXHJcbiAqIDMuIENoZWNrIGlmIEluZGV4ZWREQiBpcyBzdXBwb3J0ZWQgYnkgdGhlIGJyb3dzZXIgZW52aXJvbm1lbnQuXHJcbiAqIDQuIENoZWNrIGlmIHRoZSBjdXJyZW50IGJyb3dzZXIgY29udGV4dCBpcyB2YWxpZCBmb3IgdXNpbmcgYEluZGV4ZWREQi5vcGVuKClgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBpc1N1cHBvcnRlZCgpIHtcclxuICAgIGlmIChpc0Jyb3dzZXJFeHRlbnNpb24oKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghYXJlQ29va2llc0VuYWJsZWQoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmICghaXNJbmRleGVkREJBdmFpbGFibGUoKSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgaXNEQk9wZW5hYmxlID0gYXdhaXQgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSgpO1xyXG4gICAgICAgIHJldHVybiBpc0RCT3BlbmFibGU7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFVzZSBndGFnIGBjb25maWdgIGNvbW1hbmQgdG8gc2V0IGBzY3JlZW5fbmFtZWAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBsb2dFdmVudH0gd2l0aCBgZXZlbnROYW1lYCBhcyAnc2NyZWVuX3ZpZXcnIGFuZCBhZGQgcmVsZXZhbnQgYGV2ZW50UGFyYW1zYC5cclxuICogU2VlIHtAbGluayBodHRwczovL2ZpcmViYXNlLmdvb2dsZS5jb20vZG9jcy9hbmFseXRpY3Mvc2NyZWVudmlld3MgfCBUcmFjayBTY3JlZW52aWV3c30uXHJcbiAqXHJcbiAqIEBwYXJhbSBhbmFseXRpY3NJbnN0YW5jZSAtIFRoZSB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIHNjcmVlbk5hbWUgLSBTY3JlZW4gbmFtZSB0byBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRDdXJyZW50U2NyZWVuKGFuYWx5dGljc0luc3RhbmNlLCBzY3JlZW5OYW1lLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRDdXJyZW50U2NyZWVuJDEod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthbmFseXRpY3NJbnN0YW5jZS5hcHAub3B0aW9ucy5hcHBJZF0sIHNjcmVlbk5hbWUsIG9wdGlvbnMpLmNhdGNoKGUgPT4gbG9nZ2VyLmVycm9yKGUpKTtcclxufVxyXG4vKipcclxuICogUmV0cmlldmVzIGEgdW5pcXVlIEdvb2dsZSBBbmFseXRpY3MgaWRlbnRpZmllciBmb3IgdGhlIHdlYiBjbGllbnQuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhNC9yZWZlcmVuY2UvY29uZmlnI2NsaWVudF9pZCB8IGNsaWVudF9pZH0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gdG8gdXNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQoYW5hbHl0aWNzSW5zdGFuY2UpIHtcclxuICAgIGFuYWx5dGljc0luc3RhbmNlID0gZ2V0TW9kdWxhckluc3RhbmNlKGFuYWx5dGljc0luc3RhbmNlKTtcclxuICAgIHJldHVybiBpbnRlcm5hbEdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdKTtcclxufVxyXG4vKipcclxuICogVXNlIGd0YWcgYGNvbmZpZ2AgY29tbWFuZCB0byBzZXQgYHVzZXJfaWRgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhbmFseXRpY3NJbnN0YW5jZSAtIFRoZSB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGlkIC0gVXNlciBJRCB0byBzZXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRVc2VySWQoYW5hbHl0aWNzSW5zdGFuY2UsIGlkLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRVc2VySWQkMSh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSwgaWQsIG9wdGlvbnMpLmNhdGNoKGUgPT4gbG9nZ2VyLmVycm9yKGUpKTtcclxufVxyXG4vKipcclxuICogVXNlIGd0YWcgYGNvbmZpZ2AgY29tbWFuZCB0byBzZXQgYWxsIHBhcmFtcyBzcGVjaWZpZWQuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIHNldFVzZXJQcm9wZXJ0aWVzKGFuYWx5dGljc0luc3RhbmNlLCBwcm9wZXJ0aWVzLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRVc2VyUHJvcGVydGllcyQxKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBwcm9wZXJ0aWVzLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgd2hldGhlciBHb29nbGUgQW5hbHl0aWNzIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBhcHAgb24gdGhpcyBkZXZpY2UuXHJcbiAqIFNldHMgZ2xvYmFsIGB3aW5kb3dbJ2dhLWRpc2FibGUtYW5hbHl0aWNzSWQnXSA9IHRydWU7YFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhbmFseXRpY3NJbnN0YW5jZSAtIFRoZSB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGVuYWJsZWQgLSBJZiB0cnVlLCBlbmFibGVzIGNvbGxlY3Rpb24sIGlmIGZhbHNlLCBkaXNhYmxlcyBpdC5cclxuICovXHJcbmZ1bmN0aW9uIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkKGFuYWx5dGljc0luc3RhbmNlLCBlbmFibGVkKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZCQxKGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBlbmFibGVkKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIEFkZHMgZGF0YSB0aGF0IHdpbGwgYmUgc2V0IG9uIGV2ZXJ5IGV2ZW50IGxvZ2dlZCBmcm9tIHRoZSBTREssIGluY2x1ZGluZyBhdXRvbWF0aWMgb25lcy5cclxuICogV2l0aCBndGFnJ3MgXCJzZXRcIiBjb21tYW5kLCB0aGUgdmFsdWVzIHBhc3NlZCBwZXJzaXN0IG9uIHRoZSBjdXJyZW50IHBhZ2UgYW5kIGFyZSBwYXNzZWQgd2l0aFxyXG4gKiBhbGwgc3Vic2VxdWVudCBldmVudHMuXHJcbiAqIEBwdWJsaWNcclxuICogQHBhcmFtIGN1c3RvbVBhcmFtcyAtIEFueSBjdXN0b20gcGFyYW1zIHRoZSB1c2VyIG1heSBwYXNzIHRvIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzKGN1c3RvbVBhcmFtcykge1xyXG4gICAgLy8gQ2hlY2sgaWYgcmVmZXJlbmNlIHRvIGV4aXN0aW5nIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdCBleGlzdHNcclxuICAgIGlmICh3cmFwcGVkR3RhZ0Z1bmN0aW9uKSB7XHJcbiAgICAgICAgd3JhcHBlZEd0YWdGdW5jdGlvbihcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgY3VzdG9tUGFyYW1zKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIF9zZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdChjdXN0b21QYXJhbXMpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZW5kcyBhIEdvb2dsZSBBbmFseXRpY3MgZXZlbnQgd2l0aCBnaXZlbiBgZXZlbnRQYXJhbXNgLiBUaGlzIG1ldGhvZFxyXG4gKiBhdXRvbWF0aWNhbGx5IGFzc29jaWF0ZXMgdGhpcyBsb2dnZWQgZXZlbnQgd2l0aCB0aGlzIEZpcmViYXNlIHdlYlxyXG4gKiBhcHAgaW5zdGFuY2Ugb24gdGhpcyBkZXZpY2UuXHJcbiAqIExpc3Qgb2Ygb2ZmaWNpYWwgZXZlbnQgcGFyYW1ldGVycyBjYW4gYmUgZm91bmQgaW4gdGhlIGd0YWcuanNcclxuICogcmVmZXJlbmNlIGRvY3VtZW50YXRpb246XHJcbiAqIHtAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9ndGFnanMvcmVmZXJlbmNlL2dhNC1ldmVudHNcclxuICogfCB0aGUgR0E0IHJlZmVyZW5jZSBkb2N1bWVudGF0aW9ufS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gbG9nRXZlbnQoYW5hbHl0aWNzSW5zdGFuY2UsIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpIHtcclxuICAgIGFuYWx5dGljc0luc3RhbmNlID0gZ2V0TW9kdWxhckluc3RhbmNlKGFuYWx5dGljc0luc3RhbmNlKTtcclxuICAgIGxvZ0V2ZW50JDEod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthbmFseXRpY3NJbnN0YW5jZS5hcHAub3B0aW9ucy5hcHBJZF0sIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpLmNhdGNoKGUgPT4gbG9nZ2VyLmVycm9yKGUpKTtcclxufVxyXG4vKipcclxuICogU2V0cyB0aGUgYXBwbGljYWJsZSBlbmQgdXNlciBjb25zZW50IHN0YXRlIGZvciB0aGlzIHdlYiBhcHAgYWNyb3NzIGFsbCBndGFnIHJlZmVyZW5jZXMgb25jZVxyXG4gKiBGaXJlYmFzZSBBbmFseXRpY3MgaXMgaW5pdGlhbGl6ZWQuXHJcbiAqXHJcbiAqIFVzZSB0aGUge0BsaW5rIENvbnNlbnRTZXR0aW5nc30gdG8gc3BlY2lmeSBpbmRpdmlkdWFsIGNvbnNlbnQgdHlwZSB2YWx1ZXMuIEJ5IGRlZmF1bHQgY29uc2VudFxyXG4gKiB0eXBlcyBhcmUgc2V0IHRvIFwiZ3JhbnRlZFwiLlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSBjb25zZW50U2V0dGluZ3MgLSBNYXBzIHRoZSBhcHBsaWNhYmxlIGVuZCB1c2VyIGNvbnNlbnQgc3RhdGUgZm9yIGd0YWcuanMuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRDb25zZW50KGNvbnNlbnRTZXR0aW5ncykge1xyXG4gICAgLy8gQ2hlY2sgaWYgcmVmZXJlbmNlIHRvIGV4aXN0aW5nIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdCBleGlzdHNcclxuICAgIGlmICh3cmFwcGVkR3RhZ0Z1bmN0aW9uKSB7XHJcbiAgICAgICAgd3JhcHBlZEd0YWdGdW5jdGlvbihcImNvbnNlbnRcIiAvKiBHdGFnQ29tbWFuZC5DT05TRU5UICovLCAndXBkYXRlJywgY29uc2VudFNldHRpbmdzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIF9zZXRDb25zZW50RGVmYXVsdEZvckluaXQoY29uc2VudFNldHRpbmdzKTtcclxuICAgIH1cclxufVxuXG5jb25zdCBuYW1lID0gXCJAZmlyZWJhc2UvYW5hbHl0aWNzXCI7XG5jb25zdCB2ZXJzaW9uID0gXCIwLjEwLjBcIjtcblxuLyoqXHJcbiAqIEZpcmViYXNlIEFuYWx5dGljc1xyXG4gKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQW5hbHl0aWNzKCkge1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoQU5BTFlUSUNTX1RZUEUsIChjb250YWluZXIsIHsgb3B0aW9uczogYW5hbHl0aWNzT3B0aW9ucyB9KSA9PiB7XHJcbiAgICAgICAgLy8gZ2V0SW1tZWRpYXRlIGZvciBGaXJlYmFzZUFwcCB3aWxsIGFsd2F5cyBzdWNjZWVkXHJcbiAgICAgICAgY29uc3QgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25zID0gY29udGFpbmVyXHJcbiAgICAgICAgICAgIC5nZXRQcm92aWRlcignaW5zdGFsbGF0aW9ucy1pbnRlcm5hbCcpXHJcbiAgICAgICAgICAgIC5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICByZXR1cm4gZmFjdG9yeShhcHAsIGluc3RhbGxhdGlvbnMsIGFuYWx5dGljc09wdGlvbnMpO1xyXG4gICAgfSwgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FuYWx5dGljcy1pbnRlcm5hbCcsIGludGVybmFsRmFjdG9yeSwgXCJQUklWQVRFXCIgLyogQ29tcG9uZW50VHlwZS5QUklWQVRFICovKSk7XHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbik7XHJcbiAgICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdlc20yMDE3Jyk7XHJcbiAgICBmdW5jdGlvbiBpbnRlcm5hbEZhY3RvcnkoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgYW5hbHl0aWNzID0gY29udGFpbmVyLmdldFByb3ZpZGVyKEFOQUxZVElDU19UWVBFKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGxvZ0V2ZW50OiAoZXZlbnROYW1lLCBldmVudFBhcmFtcywgb3B0aW9ucykgPT4gbG9nRXZlbnQoYW5hbHl0aWNzLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludGVyb3AtY29tcG9uZW50LXJlZy1mYWlsZWRcIiAvKiBBbmFseXRpY3NFcnJvci5JTlRFUk9QX0NPTVBPTkVOVF9SRUdfRkFJTEVEICovLCB7XHJcbiAgICAgICAgICAgICAgICByZWFzb246IGVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbnJlZ2lzdGVyQW5hbHl0aWNzKCk7XG5cbmV4cG9ydCB7IGdldEFuYWx5dGljcywgZ2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQsIGluaXRpYWxpemVBbmFseXRpY3MsIGlzU3VwcG9ydGVkLCBsb2dFdmVudCwgc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQsIHNldENvbnNlbnQsIHNldEN1cnJlbnRTY3JlZW4sIHNldERlZmF1bHRFdmVudFBhcmFtZXRlcnMsIHNldFVzZXJJZCwgc2V0VXNlclByb3BlcnRpZXMsIHNldHRpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb250YWluZXIgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IExvZ2dlciwgc2V0VXNlckxvZ0hhbmRsZXIsIHNldExvZ0xldmVsIGFzIHNldExvZ0xldmVsJDEgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgZ2V0RGVmYXVsdEFwcENvbmZpZywgZGVlcEVxdWFsLCBGaXJlYmFzZUVycm9yLCBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZywgaXNJbmRleGVkREJBdmFpbGFibGUsIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5leHBvcnQgeyBGaXJlYmFzZUVycm9yIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgb3BlbkRCIH0gZnJvbSAnaWRiJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIH1cclxuICAgIC8vIEluIGluaXRpYWwgaW1wbGVtZW50YXRpb24sIHRoaXMgd2lsbCBiZSBjYWxsZWQgYnkgaW5zdGFsbGF0aW9ucyBvblxyXG4gICAgLy8gYXV0aCB0b2tlbiByZWZyZXNoLCBhbmQgaW5zdGFsbGF0aW9ucyB3aWxsIHNlbmQgdGhpcyBzdHJpbmcuXHJcbiAgICBnZXRQbGF0Zm9ybUluZm9TdHJpbmcoKSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXJzID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXJzKCk7XHJcbiAgICAgICAgLy8gTG9vcCB0aHJvdWdoIHByb3ZpZGVycyBhbmQgZ2V0IGxpYnJhcnkvdmVyc2lvbiBwYWlycyBmcm9tIGFueSB0aGF0IGFyZVxyXG4gICAgICAgIC8vIHZlcnNpb24gY29tcG9uZW50cy5cclxuICAgICAgICByZXR1cm4gcHJvdmlkZXJzXHJcbiAgICAgICAgICAgIC5tYXAocHJvdmlkZXIgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZSA9IHByb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3NlcnZpY2UubGlicmFyeX0vJHtzZXJ2aWNlLnZlcnNpb259YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihsb2dTdHJpbmcgPT4gbG9nU3RyaW5nKVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvdmlkZXIgY2hlY2sgaWYgdGhpcyBwcm92aWRlciBwcm92aWRlcyBhIFZlcnNpb25TZXJ2aWNlXHJcbiAqXHJcbiAqIE5PVEU6IFVzaW5nIFByb3ZpZGVyPCdhcHAtdmVyc2lvbic+IGlzIGEgaGFjayB0byBpbmRpY2F0ZSB0aGF0IHRoZSBwcm92aWRlclxyXG4gKiBwcm92aWRlcyBWZXJzaW9uU2VydmljZS4gVGhlIHByb3ZpZGVyIGlzIG5vdCBuZWNlc3NhcmlseSBhICdhcHAtdmVyc2lvbidcclxuICogcHJvdmlkZXIuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc1ZlcnNpb25TZXJ2aWNlUHJvdmlkZXIocHJvdmlkZXIpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudCA9IHByb3ZpZGVyLmdldENvbXBvbmVudCgpO1xyXG4gICAgcmV0dXJuIChjb21wb25lbnQgPT09IG51bGwgfHwgY29tcG9uZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb21wb25lbnQudHlwZSkgPT09IFwiVkVSU0lPTlwiIC8qIENvbXBvbmVudFR5cGUuVkVSU0lPTiAqLztcclxufVxuXG5jb25zdCBuYW1lJG8gPSBcIkBmaXJlYmFzZS9hcHBcIjtcbmNvbnN0IHZlcnNpb24kMSA9IFwiMC45LjE1XCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hcHAnKTtcblxuY29uc3QgbmFtZSRuID0gXCJAZmlyZWJhc2UvYXBwLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJG0gPSBcIkBmaXJlYmFzZS9hbmFseXRpY3MtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkbCA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xuXG5jb25zdCBuYW1lJGsgPSBcIkBmaXJlYmFzZS9hcHAtY2hlY2stY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkaiA9IFwiQGZpcmViYXNlL2FwcC1jaGVja1wiO1xuXG5jb25zdCBuYW1lJGkgPSBcIkBmaXJlYmFzZS9hdXRoXCI7XG5cbmNvbnN0IG5hbWUkaCA9IFwiQGZpcmViYXNlL2F1dGgtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkZyA9IFwiQGZpcmViYXNlL2RhdGFiYXNlXCI7XG5cbmNvbnN0IG5hbWUkZiA9IFwiQGZpcmViYXNlL2RhdGFiYXNlLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGUgPSBcIkBmaXJlYmFzZS9mdW5jdGlvbnNcIjtcblxuY29uc3QgbmFtZSRkID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGMgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zXCI7XG5cbmNvbnN0IG5hbWUkYiA9IFwiQGZpcmViYXNlL2luc3RhbGxhdGlvbnMtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkYSA9IFwiQGZpcmViYXNlL21lc3NhZ2luZ1wiO1xuXG5jb25zdCBuYW1lJDkgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmctY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkOCA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlXCI7XG5cbmNvbnN0IG5hbWUkNyA9IFwiQGZpcmViYXNlL3BlcmZvcm1hbmNlLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDYgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnXCI7XG5cbmNvbnN0IG5hbWUkNSA9IFwiQGZpcmViYXNlL3JlbW90ZS1jb25maWctY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkNCA9IFwiQGZpcmViYXNlL3N0b3JhZ2VcIjtcblxuY29uc3QgbmFtZSQzID0gXCJAZmlyZWJhc2Uvc3RvcmFnZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSQyID0gXCJAZmlyZWJhc2UvZmlyZXN0b3JlXCI7XG5cbmNvbnN0IG5hbWUkMSA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbmNvbnN0IHZlcnNpb24gPSBcIjEwLjEuMFwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgYXBwIG5hbWVcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcclxuY29uc3QgUExBVEZPUk1fTE9HX1NUUklORyA9IHtcclxuICAgIFtuYW1lJG9dOiAnZmlyZS1jb3JlJyxcclxuICAgIFtuYW1lJG5dOiAnZmlyZS1jb3JlLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRsXTogJ2ZpcmUtYW5hbHl0aWNzJyxcclxuICAgIFtuYW1lJG1dOiAnZmlyZS1hbmFseXRpY3MtY29tcGF0JyxcclxuICAgIFtuYW1lJGpdOiAnZmlyZS1hcHAtY2hlY2snLFxyXG4gICAgW25hbWUka106ICdmaXJlLWFwcC1jaGVjay1jb21wYXQnLFxyXG4gICAgW25hbWUkaV06ICdmaXJlLWF1dGgnLFxyXG4gICAgW25hbWUkaF06ICdmaXJlLWF1dGgtY29tcGF0JyxcclxuICAgIFtuYW1lJGddOiAnZmlyZS1ydGRiJyxcclxuICAgIFtuYW1lJGZdOiAnZmlyZS1ydGRiLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRlXTogJ2ZpcmUtZm4nLFxyXG4gICAgW25hbWUkZF06ICdmaXJlLWZuLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRjXTogJ2ZpcmUtaWlkJyxcclxuICAgIFtuYW1lJGJdOiAnZmlyZS1paWQtY29tcGF0JyxcclxuICAgIFtuYW1lJGFdOiAnZmlyZS1mY20nLFxyXG4gICAgW25hbWUkOV06ICdmaXJlLWZjbS1jb21wYXQnLFxyXG4gICAgW25hbWUkOF06ICdmaXJlLXBlcmYnLFxyXG4gICAgW25hbWUkN106ICdmaXJlLXBlcmYtY29tcGF0JyxcclxuICAgIFtuYW1lJDZdOiAnZmlyZS1yYycsXHJcbiAgICBbbmFtZSQ1XTogJ2ZpcmUtcmMtY29tcGF0JyxcclxuICAgIFtuYW1lJDRdOiAnZmlyZS1nY3MnLFxyXG4gICAgW25hbWUkM106ICdmaXJlLWdjcy1jb21wYXQnLFxyXG4gICAgW25hbWUkMl06ICdmaXJlLWZzdCcsXHJcbiAgICBbbmFtZSQxXTogJ2ZpcmUtZnN0LWNvbXBhdCcsXHJcbiAgICAnZmlyZS1qcyc6ICdmaXJlLWpzJyxcclxuICAgIFtuYW1lXTogJ2ZpcmUtanMtYWxsJ1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5jb25zdCBfYXBwcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIFJlZ2lzdGVyZWQgY29tcG9uZW50cy5cclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG5jb25zdCBfY29tcG9uZW50cyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIEBwYXJhbSBjb21wb25lbnQgLSB0aGUgY29tcG9uZW50IGJlaW5nIGFkZGVkIHRvIHRoaXMgYXBwJ3MgY29udGFpbmVyXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBhcHAuY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmYWlsZWQgdG8gcmVnaXN0ZXIgd2l0aCBGaXJlYmFzZUFwcCAke2FwcC5uYW1lfWAsIGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChhcHAsIGNvbXBvbmVudCkge1xyXG4gICAgYXBwLmNvbnRhaW5lci5hZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCB0byByZWdpc3RlclxyXG4gKiBAcmV0dXJucyB3aGV0aGVyIG9yIG5vdCB0aGUgY29tcG9uZW50IGlzIHJlZ2lzdGVyZWQgc3VjY2Vzc2Z1bGx5XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX3JlZ2lzdGVyQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGNvbXBvbmVudC5uYW1lO1xyXG4gICAgaWYgKF9jb21wb25lbnRzLmhhcyhjb21wb25lbnROYW1lKSkge1xyXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhgVGhlcmUgd2VyZSBtdWx0aXBsZSBhdHRlbXB0cyB0byByZWdpc3RlciBjb21wb25lbnQgJHtjb21wb25lbnROYW1lfS5gKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBfY29tcG9uZW50cy5zZXQoY29tcG9uZW50TmFtZSwgY29tcG9uZW50KTtcclxuICAgIC8vIGFkZCB0aGUgY29tcG9uZW50IHRvIGV4aXN0aW5nIGFwcCBpbnN0YW5jZXNcclxuICAgIGZvciAoY29uc3QgYXBwIG9mIF9hcHBzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgX2FkZENvbXBvbmVudChhcHAsIGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqXHJcbiAqIEByZXR1cm5zIHRoZSBwcm92aWRlciBmb3IgdGhlIHNlcnZpY2Ugd2l0aCB0aGUgbWF0Y2hpbmcgbmFtZVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpIHtcclxuICAgIGNvbnN0IGhlYXJ0YmVhdENvbnRyb2xsZXIgPSBhcHAuY29udGFpbmVyXHJcbiAgICAgICAgLmdldFByb3ZpZGVyKCdoZWFydGJlYXQnKVxyXG4gICAgICAgIC5nZXRJbW1lZGlhdGUoeyBvcHRpb25hbDogdHJ1ZSB9KTtcclxuICAgIGlmIChoZWFydGJlYXRDb250cm9sbGVyKSB7XHJcbiAgICAgICAgdm9pZCBoZWFydGJlYXRDb250cm9sbGVyLnRyaWdnZXJIZWFydGJlYXQoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcHAuY29udGFpbmVyLmdldFByb3ZpZGVyKG5hbWUpO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gRmlyZWJhc2VBcHAgaW5zdGFuY2VcclxuICogQHBhcmFtIG5hbWUgLSBzZXJ2aWNlIG5hbWVcclxuICogQHBhcmFtIGluc3RhbmNlSWRlbnRpZmllciAtIHNlcnZpY2UgaW5zdGFuY2UgaWRlbnRpZmllciBpbiBjYXNlIHRoZSBzZXJ2aWNlIHN1cHBvcnRzIG11bHRpcGxlIGluc3RhbmNlc1xyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UoYXBwLCBuYW1lLCBpbnN0YW5jZUlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgIF9nZXRQcm92aWRlcihhcHAsIG5hbWUpLmNsZWFySW5zdGFuY2UoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxufVxyXG4vKipcclxuICogVGVzdCBvbmx5XHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gX2NsZWFyQ29tcG9uZW50cygpIHtcclxuICAgIF9jb21wb25lbnRzLmNsZWFyKCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgRVJST1JTID0ge1xyXG4gICAgW1wibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovXTogXCJObyBGaXJlYmFzZSBBcHAgJ3skYXBwTmFtZX0nIGhhcyBiZWVuIGNyZWF0ZWQgLSBcIiArXHJcbiAgICAgICAgJ2NhbGwgaW5pdGlhbGl6ZUFwcCgpIGZpcnN0JyxcclxuICAgIFtcImJhZC1hcHAtbmFtZVwiIC8qIEFwcEVycm9yLkJBRF9BUFBfTkFNRSAqL106IFwiSWxsZWdhbCBBcHAgbmFtZTogJ3skYXBwTmFtZX1cIixcclxuICAgIFtcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovXTogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZXhpc3RzIHdpdGggZGlmZmVyZW50IG9wdGlvbnMgb3IgY29uZmlnXCIsXHJcbiAgICBbXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovXTogXCJGaXJlYmFzZSBBcHAgbmFtZWQgJ3skYXBwTmFtZX0nIGFscmVhZHkgZGVsZXRlZFwiLFxyXG4gICAgW1wibm8tb3B0aW9uc1wiIC8qIEFwcEVycm9yLk5PX09QVElPTlMgKi9dOiAnTmVlZCB0byBwcm92aWRlIG9wdGlvbnMsIHdoZW4gbm90IGJlaW5nIGRlcGxveWVkIHRvIGhvc3RpbmcgdmlhIHNvdXJjZS4nLFxyXG4gICAgW1wiaW52YWxpZC1hcHAtYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0FQUF9BUkdVTUVOVCAqL106ICdmaXJlYmFzZS57JGFwcE5hbWV9KCkgdGFrZXMgZWl0aGVyIG5vIGFyZ3VtZW50IG9yIGEgJyArXHJcbiAgICAgICAgJ0ZpcmViYXNlIEFwcCBpbnN0YW5jZS4nLFxyXG4gICAgW1wiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVCAqL106ICdGaXJzdCBhcmd1bWVudCB0byBgb25Mb2dgIG11c3QgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLicsXHJcbiAgICBbXCJpZGItb3BlblwiIC8qIEFwcEVycm9yLklEQl9PUEVOICovXTogJ0Vycm9yIHRocm93biB3aGVuIG9wZW5pbmcgSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIFtcImlkYi1nZXRcIiAvKiBBcHBFcnJvci5JREJfR0VUICovXTogJ0Vycm9yIHRocm93biB3aGVuIHJlYWRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgW1wiaWRiLXNldFwiIC8qIEFwcEVycm9yLklEQl9XUklURSAqL106ICdFcnJvciB0aHJvd24gd2hlbiB3cml0aW5nIHRvIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBbXCJpZGItZGVsZXRlXCIgLyogQXBwRXJyb3IuSURCX0RFTEVURSAqL106ICdFcnJvciB0aHJvd24gd2hlbiBkZWxldGluZyBmcm9tIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LidcclxufTtcclxuY29uc3QgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FwcCcsICdGaXJlYmFzZScsIEVSUk9SUyk7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIEZpcmViYXNlQXBwSW1wbCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcclxuICAgICAgICB0aGlzLl9jb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcpO1xyXG4gICAgICAgIHRoaXMuX25hbWUgPSBjb25maWcubmFtZTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPVxyXG4gICAgICAgICAgICBjb25maWcuYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkO1xyXG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDb21wb25lbnQobmV3IENvbXBvbmVudCgnYXBwJywgKCkgPT4gdGhpcywgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgIH1cclxuICAgIHNldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQodmFsKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBuYW1lKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuICAgIGdldCBvcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcclxuICAgIH1cclxuICAgIGdldCBjb25maWcoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb25maWc7XHJcbiAgICB9XHJcbiAgICBnZXQgY29udGFpbmVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcbiAgICB9XHJcbiAgICBnZXQgaXNEZWxldGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RlbGV0ZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgaXNEZWxldGVkKHZhbCkge1xyXG4gICAgICAgIHRoaXMuX2lzRGVsZXRlZCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhpcyBmdW5jdGlvbiB3aWxsIHRocm93IGFuIEVycm9yIGlmIHRoZSBBcHAgaGFzIGFscmVhZHkgYmVlbiBkZWxldGVkIC1cclxuICAgICAqIHVzZSBiZWZvcmUgcGVyZm9ybWluZyBBUEkgYWN0aW9ucyBvbiB0aGUgQXBwLlxyXG4gICAgICovXHJcbiAgICBjaGVja0Rlc3Ryb3llZCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0RlbGV0ZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtZGVsZXRlZFwiIC8qIEFwcEVycm9yLkFQUF9ERUxFVEVEICovLCB7IGFwcE5hbWU6IHRoaXMuX25hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaGUgY3VycmVudCBTREsgdmVyc2lvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgU0RLX1ZFUlNJT04gPSB2ZXJzaW9uO1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQXBwKF9vcHRpb25zLCByYXdDb25maWcgPSB7fSkge1xyXG4gICAgbGV0IG9wdGlvbnMgPSBfb3B0aW9ucztcclxuICAgIGlmICh0eXBlb2YgcmF3Q29uZmlnICE9PSAnb2JqZWN0Jykge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSByYXdDb25maWc7XHJcbiAgICAgICAgcmF3Q29uZmlnID0geyBuYW1lIH07XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb25maWcgPSBPYmplY3QuYXNzaWduKHsgbmFtZTogREVGQVVMVF9FTlRSWV9OQU1FLCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ6IGZhbHNlIH0sIHJhd0NvbmZpZyk7XHJcbiAgICBjb25zdCBuYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8ICFuYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJiYWQtYXBwLW5hbWVcIiAvKiBBcHBFcnJvci5CQURfQVBQX05BTUUgKi8sIHtcclxuICAgICAgICAgICAgYXBwTmFtZTogU3RyaW5nKG5hbWUpXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0gZ2V0RGVmYXVsdEFwcENvbmZpZygpKTtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tb3B0aW9uc1wiIC8qIEFwcEVycm9yLk5PX09QVElPTlMgKi8pO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXhpc3RpbmdBcHAgPSBfYXBwcy5nZXQobmFtZSk7XHJcbiAgICBpZiAoZXhpc3RpbmdBcHApIHtcclxuICAgICAgICAvLyByZXR1cm4gdGhlIGV4aXN0aW5nIGFwcCBpZiBvcHRpb25zIGFuZCBjb25maWcgZGVlcCBlcXVhbCB0aGUgb25lcyBpbiB0aGUgZXhpc3RpbmcgYXBwLlxyXG4gICAgICAgIGlmIChkZWVwRXF1YWwob3B0aW9ucywgZXhpc3RpbmdBcHAub3B0aW9ucykgJiZcclxuICAgICAgICAgICAgZGVlcEVxdWFsKGNvbmZpZywgZXhpc3RpbmdBcHAuY29uZmlnKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdBcHA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImR1cGxpY2F0ZS1hcHBcIiAvKiBBcHBFcnJvci5EVVBMSUNBVEVfQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3QgY29udGFpbmVyID0gbmV3IENvbXBvbmVudENvbnRhaW5lcihuYW1lKTtcclxuICAgIGZvciAoY29uc3QgY29tcG9uZW50IG9mIF9jb21wb25lbnRzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgY29udGFpbmVyLmFkZENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbmV3QXBwID0gbmV3IEZpcmViYXNlQXBwSW1wbChvcHRpb25zLCBjb25maWcsIGNvbnRhaW5lcik7XHJcbiAgICBfYXBwcy5zZXQobmFtZSwgbmV3QXBwKTtcclxuICAgIHJldHVybiBuZXdBcHA7XHJcbn1cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICpcclxuICogV2hlbiBjYWxsZWQgd2l0aCBubyBhcmd1bWVudHMsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC4gV2hlbiBhbiBhcHAgbmFtZVxyXG4gKiBpcyBwcm92aWRlZCwgdGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoYXQgbmFtZSBpcyByZXR1cm5lZC5cclxuICpcclxuICogQW4gZXhjZXB0aW9uIGlzIHRocm93biBpZiB0aGUgYXBwIGJlaW5nIHJldHJpZXZlZCBoYXMgbm90IHlldCBiZWVuXHJcbiAqIGluaXRpYWxpemVkLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiB0aGUgZGVmYXVsdCBhcHBcclxuICogY29uc3QgYXBwID0gZ2V0QXBwKCk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIFJldHVybiBhIG5hbWVkIGFwcFxyXG4gKiBjb25zdCBvdGhlckFwcCA9IGdldEFwcChcIm90aGVyQXBwXCIpO1xyXG4gKiBgYGBcclxuICpcclxuICogQHBhcmFtIG5hbWUgLSBPcHRpb25hbCBuYW1lIG9mIHRoZSBhcHAgdG8gcmV0dXJuLiBJZiBubyBuYW1lIGlzXHJcbiAqICAgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGlzIGBcIltERUZBVUxUXVwiYC5cclxuICpcclxuICogQHJldHVybnMgVGhlIGFwcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBwcm92aWRlZCBhcHAgbmFtZS5cclxuICogICBJZiBubyBhcHAgbmFtZSBpcyBwcm92aWRlZCwgdGhlIGRlZmF1bHQgYXBwIGlzIHJldHVybmVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHAobmFtZSA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgY29uc3QgYXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKCFhcHAgJiYgbmFtZSA9PT0gREVGQVVMVF9FTlRSWV9OQU1FICYmIGdldERlZmF1bHRBcHBDb25maWcoKSkge1xyXG4gICAgICAgIHJldHVybiBpbml0aWFsaXplQXBwKCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcCkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBwXCIgLyogQXBwRXJyb3IuTk9fQVBQICovLCB7IGFwcE5hbWU6IG5hbWUgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwO1xyXG59XHJcbi8qKlxyXG4gKiBBIChyZWFkLW9ubHkpIGFycmF5IG9mIGFsbCBpbml0aWFsaXplZCBhcHBzLlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRBcHBzKCkge1xyXG4gICAgcmV0dXJuIEFycmF5LmZyb20oX2FwcHMudmFsdWVzKCkpO1xyXG59XHJcbi8qKlxyXG4gKiBSZW5kZXJzIHRoaXMgYXBwIHVudXNhYmxlIGFuZCBmcmVlcyB0aGUgcmVzb3VyY2VzIG9mIGFsbCBhc3NvY2lhdGVkXHJcbiAqIHNlcnZpY2VzLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIGRlbGV0ZUFwcChhcHApXHJcbiAqICAgLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAqICAgICBjb25zb2xlLmxvZyhcIkFwcCBkZWxldGVkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICogICB9KVxyXG4gKiAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJFcnJvciBkZWxldGluZyBhcHA6XCIsIGVycm9yKTtcclxuICogICB9KTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUFwcChhcHApIHtcclxuICAgIGNvbnN0IG5hbWUgPSBhcHAubmFtZTtcclxuICAgIGlmIChfYXBwcy5oYXMobmFtZSkpIHtcclxuICAgICAgICBfYXBwcy5kZWxldGUobmFtZSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoYXBwLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXJzKClcclxuICAgICAgICAgICAgLm1hcChwcm92aWRlciA9PiBwcm92aWRlci5kZWxldGUoKSkpO1xyXG4gICAgICAgIGFwcC5pc0RlbGV0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZWdpc3RlcnMgYSBsaWJyYXJ5J3MgbmFtZSBhbmQgdmVyc2lvbiBmb3IgcGxhdGZvcm0gbG9nZ2luZyBwdXJwb3Nlcy5cclxuICogQHBhcmFtIGxpYnJhcnkgLSBOYW1lIG9mIDFwIG9yIDNwIGxpYnJhcnkgKGUuZy4gZmlyZXN0b3JlLCBhbmd1bGFyZmlyZSlcclxuICogQHBhcmFtIHZlcnNpb24gLSBDdXJyZW50IHZlcnNpb24gb2YgdGhhdCBsaWJyYXJ5LlxyXG4gKiBAcGFyYW0gdmFyaWFudCAtIEJ1bmRsZSB2YXJpYW50LCBlLmcuLCBub2RlLCBybiwgZXRjLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlclZlcnNpb24obGlicmFyeUtleU9yTmFtZSwgdmVyc2lvbiwgdmFyaWFudCkge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgLy8gVE9ETzogV2UgY2FuIHVzZSB0aGlzIGNoZWNrIHRvIHdoaXRlbGlzdCBzdHJpbmdzIHdoZW4vaWYgd2Ugc2V0IHVwXHJcbiAgICAvLyBhIGdvb2Qgd2hpdGVsaXN0IHN5c3RlbS5cclxuICAgIGxldCBsaWJyYXJ5ID0gKF9hID0gUExBVEZPUk1fTE9HX1NUUklOR1tsaWJyYXJ5S2V5T3JOYW1lXSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbGlicmFyeUtleU9yTmFtZTtcclxuICAgIGlmICh2YXJpYW50KSB7XHJcbiAgICAgICAgbGlicmFyeSArPSBgLSR7dmFyaWFudH1gO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbGlicmFyeU1pc21hdGNoID0gbGlicmFyeS5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgY29uc3QgdmVyc2lvbk1pc21hdGNoID0gdmVyc2lvbi5tYXRjaCgvXFxzfFxcLy8pO1xyXG4gICAgaWYgKGxpYnJhcnlNaXNtYXRjaCB8fCB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICBjb25zdCB3YXJuaW5nID0gW1xyXG4gICAgICAgICAgICBgVW5hYmxlIHRvIHJlZ2lzdGVyIGxpYnJhcnkgXCIke2xpYnJhcnl9XCIgd2l0aCB2ZXJzaW9uIFwiJHt2ZXJzaW9ufVwiOmBcclxuICAgICAgICBdO1xyXG4gICAgICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKGBsaWJyYXJ5IG5hbWUgXCIke2xpYnJhcnl9XCIgY29udGFpbnMgaWxsZWdhbCBjaGFyYWN0ZXJzICh3aGl0ZXNwYWNlIG9yIFwiL1wiKWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoICYmIHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goJ2FuZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmcucHVzaChgdmVyc2lvbiBuYW1lIFwiJHt2ZXJzaW9ufVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbG9nZ2VyLndhcm4od2FybmluZy5qb2luKCcgJykpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KGAke2xpYnJhcnl9LXZlcnNpb25gLCAoKSA9PiAoeyBsaWJyYXJ5LCB2ZXJzaW9uIH0pLCBcIlZFUlNJT05cIiAvKiBDb21wb25lbnRUeXBlLlZFUlNJT04gKi8pKTtcclxufVxyXG4vKipcclxuICogU2V0cyBsb2cgaGFuZGxlciBmb3IgYWxsIEZpcmViYXNlIFNES3MuXHJcbiAqIEBwYXJhbSBsb2dDYWxsYmFjayAtIEFuIG9wdGlvbmFsIGN1c3RvbSBsb2cgaGFuZGxlciB0aGF0IGV4ZWN1dGVzIHVzZXIgY29kZSB3aGVuZXZlclxyXG4gKiB0aGUgRmlyZWJhc2UgU0RLIG1ha2VzIGEgbG9nZ2luZyBjYWxsLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBvbkxvZyhsb2dDYWxsYmFjaywgb3B0aW9ucykge1xyXG4gICAgaWYgKGxvZ0NhbGxiYWNrICE9PSBudWxsICYmIHR5cGVvZiBsb2dDYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW52YWxpZC1sb2ctYXJndW1lbnRcIiAvKiBBcHBFcnJvci5JTlZBTElEX0xPR19BUkdVTUVOVCAqLyk7XHJcbiAgICB9XHJcbiAgICBzZXRVc2VyTG9nSGFuZGxlcihsb2dDYWxsYmFjaywgb3B0aW9ucyk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgbG9nIGxldmVsIGZvciBhbGwgRmlyZWJhc2UgU0RLcy5cclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIGFyZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYGluZm9gLCBlcnJvcnMgYXJlIGxvZ2dlZCwgYnV0IGBkZWJ1Z2AgYW5kXHJcbiAqIGB2ZXJib3NlYCBsb2dzIGFyZSBub3QpLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRMb2dMZXZlbChsb2dMZXZlbCkge1xyXG4gICAgc2V0TG9nTGV2ZWwkMShsb2dMZXZlbCk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREJfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtZGF0YWJhc2UnO1xyXG5jb25zdCBEQl9WRVJTSU9OID0gMTtcclxuY29uc3QgU1RPUkVfTkFNRSA9ICdmaXJlYmFzZS1oZWFydGJlYXQtc3RvcmUnO1xyXG5sZXQgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBvcGVuREIoREJfTkFNRSwgREJfVkVSU0lPTiwge1xyXG4gICAgICAgICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHVzZSAnYnJlYWsnIGluIHRoaXMgc3dpdGNoIHN0YXRlbWVudCwgdGhlIGZhbGwtdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgd2hhdCB3ZSB3YW50LCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhvc2UgdmVyc2lvbnMgdG8gcnVuLCBub3Qgb25seSB0aGUgbGFzdCBvbmUuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLW9wZW5cIiAvKiBBcHBFcnJvci5JREJfT1BFTiAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUubWVzc2FnZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBkYlByb21pc2U7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gcmVhZEhlYXJ0YmVhdHNGcm9tSW5kZXhlZERCKGFwcCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGRiXHJcbiAgICAgICAgICAgIC50cmFuc2FjdGlvbihTVE9SRV9OQU1FKVxyXG4gICAgICAgICAgICAub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSlcclxuICAgICAgICAgICAgLmdldChjb21wdXRlS2V5KGFwcCkpO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChlIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvcikge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihlLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaWRiR2V0RXJyb3IgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1nZXRcIiAvKiBBcHBFcnJvci5JREJfR0VUICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5hc3luYyBmdW5jdGlvbiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQihhcHAsIGhlYXJ0YmVhdE9iamVjdCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoU1RPUkVfTkFNRSk7XHJcbiAgICAgICAgYXdhaXQgb2JqZWN0U3RvcmUucHV0KGhlYXJ0YmVhdE9iamVjdCwgY29tcHV0ZUtleShhcHApKTtcclxuICAgICAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItc2V0XCIgLyogQXBwRXJyb3IuSURCX1dSSVRFICovLCB7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yTWVzc2FnZTogZSA9PT0gbnVsbCB8fCBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGlkYkdldEVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBjb21wdXRlS2V5KGFwcCkge1xyXG4gICAgcmV0dXJuIGAke2FwcC5uYW1lfSEke2FwcC5vcHRpb25zLmFwcElkfWA7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgTUFYX0hFQURFUl9CWVRFUyA9IDEwMjQ7XHJcbi8vIDMwIGRheXNcclxuY29uc3QgU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUyA9IDMwICogMjQgKiA2MCAqIDYwICogMTAwMDtcclxuY2xhc3MgSGVhcnRiZWF0U2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSW4tbWVtb3J5IGNhY2hlIGZvciBoZWFydGJlYXRzLCB1c2VkIGJ5IGdldEhlYXJ0YmVhdHNIZWFkZXIoKSB0byBnZW5lcmF0ZVxyXG4gICAgICAgICAqIHRoZSBoZWFkZXIgc3RyaW5nLlxyXG4gICAgICAgICAqIFN0b3JlcyBvbmUgcmVjb3JkIHBlciBkYXRlLiBUaGlzIHdpbGwgYmUgY29uc29saWRhdGVkIGludG8gdGhlIHN0YW5kYXJkXHJcbiAgICAgICAgICogZm9ybWF0IG9mIG9uZSByZWNvcmQgcGVyIHVzZXIgYWdlbnQgc3RyaW5nIGJlZm9yZSBiZWluZyBzZW50IGFzIGEgaGVhZGVyLlxyXG4gICAgICAgICAqIFBvcHVsYXRlZCBmcm9tIGluZGV4ZWREQiB3aGVuIHRoZSBjb250cm9sbGVyIGlzIGluc3RhbnRpYXRlZCBhbmQgc2hvdWxkXHJcbiAgICAgICAgICogYmUga2VwdCBpbiBzeW5jIHdpdGggaW5kZXhlZERCLlxyXG4gICAgICAgICAqIExlYXZlIHB1YmxpYyBmb3IgZWFzaWVyIHRlc3RpbmcuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gbnVsbDtcclxuICAgICAgICBjb25zdCBhcHAgPSB0aGlzLmNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgdGhpcy5fc3RvcmFnZSA9IG5ldyBIZWFydGJlYXRTdG9yYWdlSW1wbChhcHApO1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2UgPSB0aGlzLl9zdG9yYWdlLnJlYWQoKS50aGVuKHJlc3VsdCA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHRvIHJlcG9ydCBhIGhlYXJ0YmVhdC4gVGhlIGZ1bmN0aW9uIHdpbGwgZ2VuZXJhdGVcclxuICAgICAqIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IG9iamVjdCwgdXBkYXRlIGhlYXJ0YmVhdHNDYWNoZSwgYW5kIHBlcnNpc3QgaXRcclxuICAgICAqIHRvIEluZGV4ZWREQi5cclxuICAgICAqIE5vdGUgdGhhdCB3ZSBvbmx5IHN0b3JlIG9uZSBoZWFydGJlYXQgcGVyIGRheS4gU28gaWYgYSBoZWFydGJlYXQgZm9yIHRvZGF5IGlzXHJcbiAgICAgKiBhbHJlYWR5IGxvZ2dlZCwgc3Vic2VxdWVudCBjYWxscyB0byB0aGlzIGZ1bmN0aW9uIGluIHRoZSBzYW1lIGRheSB3aWxsIGJlIGlnbm9yZWQuXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHRyaWdnZXJIZWFydGJlYXQoKSB7XHJcbiAgICAgICAgY29uc3QgcGxhdGZvcm1Mb2dnZXIgPSB0aGlzLmNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ3BsYXRmb3JtLWxvZ2dlcicpXHJcbiAgICAgICAgICAgIC5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAvLyBUaGlzIGlzIHRoZSBcIkZpcmViYXNlIHVzZXIgYWdlbnRcIiBzdHJpbmcgZnJvbSB0aGUgcGxhdGZvcm0gbG9nZ2VyXHJcbiAgICAgICAgLy8gc2VydmljZSwgbm90IHRoZSBicm93c2VyIHVzZXIgYWdlbnQuXHJcbiAgICAgICAgY29uc3QgYWdlbnQgPSBwbGF0Zm9ybUxvZ2dlci5nZXRQbGF0Zm9ybUluZm9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBkYXRlID0gZ2V0VVRDRGF0ZVN0cmluZygpO1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlID0gYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gRG8gbm90IHN0b3JlIGEgaGVhcnRiZWF0IGlmIG9uZSBpcyBhbHJlYWR5IHN0b3JlZCBmb3IgdGhpcyBkYXlcclxuICAgICAgICAvLyBvciBpZiBhIGhlYWRlciBoYXMgYWxyZWFkeSBiZWVuIHNlbnQgdG9kYXkuXHJcbiAgICAgICAgaWYgKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPT09IGRhdGUgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuc29tZShzaW5nbGVEYXRlSGVhcnRiZWF0ID0+IHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSA9PT0gZGF0ZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUgaXMgbm8gZW50cnkgZm9yIHRoaXMgZGF0ZS4gQ3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMucHVzaCh7IGRhdGUsIGFnZW50IH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBSZW1vdmUgZW50cmllcyBvbGRlciB0aGFuIDMwIGRheXMuXHJcbiAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cy5maWx0ZXIoc2luZ2xlRGF0ZUhlYXJ0YmVhdCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhiVGltZXN0YW1wID0gbmV3IERhdGUoc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgIHJldHVybiBub3cgLSBoYlRpbWVzdGFtcCA8PSBTVE9SRURfSEVBUlRCRUFUX1JFVEVOVElPTl9NQVhfTUlMTElTO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgYmFzZTY0IGVuY29kZWQgc3RyaW5nIHdoaWNoIGNhbiBiZSBhdHRhY2hlZCB0byB0aGUgaGVhcnRiZWF0LXNwZWNpZmljIGhlYWRlciBkaXJlY3RseS5cclxuICAgICAqIEl0IGFsc28gY2xlYXJzIGFsbCBoZWFydGJlYXRzIGZyb20gbWVtb3J5IGFzIHdlbGwgYXMgaW4gSW5kZXhlZERCLlxyXG4gICAgICpcclxuICAgICAqIE5PVEU6IENvbnN1bWluZyBwcm9kdWN0IFNES3Mgc2hvdWxkIG5vdCBzZW5kIHRoZSBoZWFkZXIgaWYgdGhpcyBtZXRob2RcclxuICAgICAqIHJldHVybnMgYW4gZW1wdHkgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBnZXRIZWFydGJlYXRzSGVhZGVyKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5faGVhcnRiZWF0c0NhY2hlUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gSWYgaXQncyBzdGlsbCBudWxsIG9yIHRoZSBhcnJheSBpcyBlbXB0eSwgdGhlcmUgaXMgbm8gZGF0YSB0byBzZW5kLlxyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPT09IG51bGwgfHxcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcclxuICAgICAgICAvLyBFeHRyYWN0IGFzIG1hbnkgaGVhcnRiZWF0cyBmcm9tIHRoZSBjYWNoZSBhcyB3aWxsIGZpdCB1bmRlciB0aGUgc2l6ZSBsaW1pdC5cclxuICAgICAgICBjb25zdCB7IGhlYXJ0YmVhdHNUb1NlbmQsIHVuc2VudEVudHJpZXMgfSA9IGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzKTtcclxuICAgICAgICBjb25zdCBoZWFkZXJTdHJpbmcgPSBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNUb1NlbmQgfSkpO1xyXG4gICAgICAgIC8vIFN0b3JlIGxhc3Qgc2VudCBkYXRlIHRvIHByZXZlbnQgYW5vdGhlciBiZWluZyBsb2dnZWQvc2VudCBmb3IgdGhlIHNhbWUgZGF5LlxyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5sYXN0U2VudEhlYXJ0YmVhdERhdGUgPSBkYXRlO1xyXG4gICAgICAgIGlmICh1bnNlbnRFbnRyaWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgLy8gU3RvcmUgYW55IHVuc2VudCBlbnRyaWVzIGlmIHRoZXkgZXhpc3QuXHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdW5zZW50RW50cmllcztcclxuICAgICAgICAgICAgLy8gVGhpcyBzZWVtcyBtb3JlIGxpa2VseSB0aGFuIGVtcHR5aW5nIHRoZSBhcnJheSAoYmVsb3cpIHRvIGxlYWQgdG8gc29tZSBvZGQgc3RhdGVcclxuICAgICAgICAgICAgLy8gc2luY2UgdGhlIGNhY2hlIGlzbid0IGVtcHR5IGFuZCB0aGlzIHdpbGwgYmUgY2FsbGVkIGFnYWluIG9uIHRoZSBuZXh0IHJlcXVlc3QsXHJcbiAgICAgICAgICAgIC8vIGFuZCBpcyBwcm9iYWJseSBzYWZlc3QgaWYgd2UgYXdhaXQgaXQuXHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IFtdO1xyXG4gICAgICAgICAgICAvLyBEbyBub3Qgd2FpdCBmb3IgdGhpcywgdG8gcmVkdWNlIGxhdGVuY3kuXHJcbiAgICAgICAgICAgIHZvaWQgdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGhlYWRlclN0cmluZztcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXRVVENEYXRlU3RyaW5nKCkge1xyXG4gICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgLy8gUmV0dXJucyBkYXRlIGZvcm1hdCAnWVlZWS1NTS1ERCdcclxuICAgIHJldHVybiB0b2RheS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEhlYXJ0YmVhdHNGb3JIZWFkZXIoaGVhcnRiZWF0c0NhY2hlLCBtYXhTaXplID0gTUFYX0hFQURFUl9CWVRFUykge1xyXG4gICAgLy8gSGVhcnRiZWF0cyBncm91cGVkIGJ5IHVzZXIgYWdlbnQgaW4gdGhlIHN0YW5kYXJkIGZvcm1hdCB0byBiZSBzZW50IGluXHJcbiAgICAvLyB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0c1RvU2VuZCA9IFtdO1xyXG4gICAgLy8gU2luZ2xlIGRhdGUgZm9ybWF0IGhlYXJ0YmVhdHMgdGhhdCBhcmUgbm90IHNlbnQuXHJcbiAgICBsZXQgdW5zZW50RW50cmllcyA9IGhlYXJ0YmVhdHNDYWNoZS5zbGljZSgpO1xyXG4gICAgZm9yIChjb25zdCBzaW5nbGVEYXRlSGVhcnRiZWF0IG9mIGhlYXJ0YmVhdHNDYWNoZSkge1xyXG4gICAgICAgIC8vIExvb2sgZm9yIGFuIGV4aXN0aW5nIGVudHJ5IHdpdGggdGhlIHNhbWUgdXNlciBhZ2VudC5cclxuICAgICAgICBjb25zdCBoZWFydGJlYXRFbnRyeSA9IGhlYXJ0YmVhdHNUb1NlbmQuZmluZChoYiA9PiBoYi5hZ2VudCA9PT0gc2luZ2xlRGF0ZUhlYXJ0YmVhdC5hZ2VudCk7XHJcbiAgICAgICAgaWYgKCFoZWFydGJlYXRFbnRyeSkge1xyXG4gICAgICAgICAgICAvLyBJZiBubyBlbnRyeSBmb3IgdGhpcyB1c2VyIGFnZW50IGV4aXN0cywgY3JlYXRlIG9uZS5cclxuICAgICAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGFnZW50OiBzaW5nbGVEYXRlSGVhcnRiZWF0LmFnZW50LFxyXG4gICAgICAgICAgICAgICAgZGF0ZXM6IFtzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGVdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBpZiAoY291bnRCeXRlcyhoZWFydGJlYXRzVG9TZW5kKSA+IG1heFNpemUpIHtcclxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGhlYXJ0YmVhdFxyXG4gICAgICAgICAgICAgICAgLy8gZW50cnkgYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzVG9TZW5kLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGhlYXJ0YmVhdEVudHJ5LmRhdGVzLnB1c2goc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlKTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIGhlYWRlciB3b3VsZCBleGNlZWQgbWF4IHNpemUsIHJlbW92ZSB0aGUgYWRkZWQgZGF0ZVxyXG4gICAgICAgICAgICAvLyBhbmQgc3RvcCBhZGRpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgICAgICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBvcCB1bnNlbnQgZW50cnkgZnJvbSBxdWV1ZS4gKFNraXBwZWQgaWYgYWRkaW5nIHRoZSBlbnRyeSBleGNlZWRlZFxyXG4gICAgICAgIC8vIHF1b3RhIGFuZCB0aGUgbG9vcCBicmVha3MgZWFybHkuKVxyXG4gICAgICAgIHVuc2VudEVudHJpZXMgPSB1bnNlbnRFbnRyaWVzLnNsaWNlKDEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFydGJlYXRzVG9TZW5kLFxyXG4gICAgICAgIHVuc2VudEVudHJpZXNcclxuICAgIH07XHJcbn1cclxuY2xhc3MgSGVhcnRiZWF0U3RvcmFnZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZSA9IHRoaXMucnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgcnVuSW5kZXhlZERCRW52aXJvbm1lbnRDaGVjaygpIHtcclxuICAgICAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gdHJ1ZSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaCgoKSA9PiBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGFsbCBoZWFydGJlYXRzLlxyXG4gICAgICovXHJcbiAgICBhc3luYyByZWFkKCkge1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgaGVhcnRiZWF0czogW10gfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkhlYXJ0YmVhdE9iamVjdCA9IGF3YWl0IHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQih0aGlzLmFwcCk7XHJcbiAgICAgICAgICAgIHJldHVybiBpZGJIZWFydGJlYXRPYmplY3QgfHwgeyBoZWFydGJlYXRzOiBbXSB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG92ZXJ3cml0ZSB0aGUgc3RvcmFnZSB3aXRoIHRoZSBwcm92aWRlZCBoZWFydGJlYXRzXHJcbiAgICBhc3luYyBvdmVyd3JpdGUoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IGF3YWl0IHRoaXMucmVhZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIodGhpcy5hcHAsIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTZW50SGVhcnRiZWF0RGF0ZTogKF9hID0gaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUsXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBoZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gYWRkIGhlYXJ0YmVhdHNcclxuICAgIGFzeW5jIGFkZChoZWFydGJlYXRzT2JqZWN0KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGNhblVzZUluZGV4ZWREQiA9IGF3YWl0IHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2U7XHJcbiAgICAgICAgaWYgKCFjYW5Vc2VJbmRleGVkREIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0ID0gYXdhaXQgdGhpcy5yZWFkKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB3cml0ZUhlYXJ0YmVhdHNUb0luZGV4ZWREQih0aGlzLmFwcCwge1xyXG4gICAgICAgICAgICAgICAgbGFzdFNlbnRIZWFydGJlYXREYXRlOiAoX2EgPSBoZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0Lmxhc3RTZW50SGVhcnRiZWF0RGF0ZSxcclxuICAgICAgICAgICAgICAgIGhlYXJ0YmVhdHM6IFtcclxuICAgICAgICAgICAgICAgICAgICAuLi5leGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QuaGVhcnRiZWF0cyxcclxuICAgICAgICAgICAgICAgICAgICAuLi5oZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHNcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxjdWxhdGUgYnl0ZXMgb2YgYSBIZWFydGJlYXRzQnlVc2VyQWdlbnQgYXJyYXkgYWZ0ZXIgYmVpbmcgd3JhcHBlZFxyXG4gKiBpbiBhIHBsYXRmb3JtIGxvZ2dpbmcgaGVhZGVyIEpTT04gb2JqZWN0LCBzdHJpbmdpZmllZCwgYW5kIGNvbnZlcnRlZFxyXG4gKiB0byBiYXNlIDY0LlxyXG4gKi9cclxuZnVuY3Rpb24gY291bnRCeXRlcyhoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgIC8vIGJhc2U2NCBoYXMgYSByZXN0cmljdGVkIHNldCBvZiBjaGFyYWN0ZXJzLCBhbGwgb2Ygd2hpY2ggc2hvdWxkIGJlIDEgYnl0ZS5cclxuICAgIHJldHVybiBiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyhcclxuICAgIC8vIGhlYXJ0YmVhdHNDYWNoZSB3cmFwcGVyIHByb3BlcnRpZXNcclxuICAgIEpTT04uc3RyaW5naWZ5KHsgdmVyc2lvbjogMiwgaGVhcnRiZWF0czogaGVhcnRiZWF0c0NhY2hlIH0pKS5sZW5ndGg7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJDb3JlQ29tcG9uZW50cyh2YXJpYW50KSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudCgncGxhdGZvcm0tbG9nZ2VyJywgY29udGFpbmVyID0+IG5ldyBQbGF0Zm9ybUxvZ2dlclNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2hlYXJ0YmVhdCcsIGNvbnRhaW5lciA9PiBuZXcgSGVhcnRiZWF0U2VydmljZUltcGwoY29udGFpbmVyKSwgXCJQUklWQVRFXCIgLyogQ29tcG9uZW50VHlwZS5QUklWQVRFICovKSk7XHJcbiAgICAvLyBSZWdpc3RlciBgYXBwYCBwYWNrYWdlLlxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUkbywgdmVyc2lvbiQxLCB2YXJpYW50KTtcclxuICAgIC8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXHJcbiAgICByZWdpc3RlclZlcnNpb24obmFtZSRvLCB2ZXJzaW9uJDEsICdlc20yMDE3Jyk7XHJcbiAgICAvLyBSZWdpc3RlciBwbGF0Zm9ybSBTREsgaWRlbnRpZmllciAobm8gdmVyc2lvbikuXHJcbiAgICByZWdpc3RlclZlcnNpb24oJ2ZpcmUtanMnLCAnJyk7XHJcbn1cblxuLyoqXHJcbiAqIEZpcmViYXNlIEFwcFxyXG4gKlxyXG4gKiBAcmVtYXJrcyBUaGlzIHBhY2thZ2UgY29vcmRpbmF0ZXMgdGhlIGNvbW11bmljYXRpb24gYmV0d2VlbiB0aGUgZGlmZmVyZW50IEZpcmViYXNlIGNvbXBvbmVudHNcclxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXHJcbiAqL1xyXG5yZWdpc3RlckNvcmVDb21wb25lbnRzKCcnKTtcblxuZXhwb3J0IHsgU0RLX1ZFUlNJT04sIERFRkFVTFRfRU5UUllfTkFNRSBhcyBfREVGQVVMVF9FTlRSWV9OQU1FLCBfYWRkQ29tcG9uZW50LCBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQsIF9hcHBzLCBfY2xlYXJDb21wb25lbnRzLCBfY29tcG9uZW50cywgX2dldFByb3ZpZGVyLCBfcmVnaXN0ZXJDb21wb25lbnQsIF9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UsIGRlbGV0ZUFwcCwgZ2V0QXBwLCBnZXRBcHBzLCBpbml0aWFsaXplQXBwLCBvbkxvZywgcmVnaXN0ZXJWZXJzaW9uLCBzZXRMb2dMZXZlbCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IERlZmVycmVkIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuXG4vKipcclxuICogQ29tcG9uZW50IGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50IHtcclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBuYW1lIFRoZSBwdWJsaWMgc2VydmljZSBuYW1lLCBlLmcuIGFwcCwgYXV0aCwgZmlyZXN0b3JlLCBkYXRhYmFzZVxyXG4gICAgICogQHBhcmFtIGluc3RhbmNlRmFjdG9yeSBTZXJ2aWNlIGZhY3RvcnkgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSBwdWJsaWMgaW50ZXJmYWNlXHJcbiAgICAgKiBAcGFyYW0gdHlwZSB3aGV0aGVyIHRoZSBzZXJ2aWNlIHByb3ZpZGVkIGJ5IHRoZSBjb21wb25lbnQgaXMgcHVibGljIG9yIHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IobmFtZSwgaW5zdGFuY2VGYWN0b3J5LCB0eXBlKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlRmFjdG9yeSA9IGluc3RhbmNlRmFjdG9yeTtcclxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBmYWxzZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBQcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIHRoZSBzZXJ2aWNlIG5hbWVzcGFjZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0ge307XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IFwiTEFaWVwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkxBWlkgKi87XHJcbiAgICAgICAgdGhpcy5vbkluc3RhbmNlQ3JlYXRlZCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBzZXRJbnN0YW50aWF0aW9uTW9kZShtb2RlKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW50aWF0aW9uTW9kZSA9IG1vZGU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRNdWx0aXBsZUluc3RhbmNlcyhtdWx0aXBsZUluc3RhbmNlcykge1xyXG4gICAgICAgIHRoaXMubXVsdGlwbGVJbnN0YW5jZXMgPSBtdWx0aXBsZUluc3RhbmNlcztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHNldFNlcnZpY2VQcm9wcyhwcm9wcykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZVByb3BzID0gcHJvcHM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRJbnN0YW5jZUNyZWF0ZWRDYWxsYmFjayhjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBjYWxsYmFjaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBERUZBVUxUX0VOVFJZX05BTUUgPSAnW0RFRkFVTFRdJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFByb3ZpZGVyIGZvciBpbnN0YW5jZSBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gJ2F1dGgnLCAnYXV0aC1pbnRlcm5hbCdcclxuICogTmFtZVNlcnZpY2VNYXBwaW5nW1RdIGlzIGFuIGFsaWFzIGZvciB0aGUgdHlwZSBvZiB0aGUgaW5zdGFuY2VcclxuICovXHJcbmNsYXNzIFByb3ZpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBIHByb3ZpZGVyIGNhbiBwcm92aWRlIG11bGl0cGxlIGluc3RhbmNlcyBvZiBhIHNlcnZpY2VcclxuICAgICAqIGlmIHRoaXMuY29tcG9uZW50Lm11bHRpcGxlSW5zdGFuY2VzIGlzIHRydWUuXHJcbiAgICAgKi9cclxuICAgIGdldChpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgLy8gaWYgbXVsdGlwbGVJbnN0YW5jZXMgaXMgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBkZWZhdWx0IG5hbWVcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICghdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5oYXMobm9ybWFsaXplZElkZW50aWZpZXIpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmVycmVkID0gbmV3IERlZmVycmVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBkZWZlcnJlZCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQobm9ybWFsaXplZElkZW50aWZpZXIpIHx8XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemUgdGhlIHNlcnZpY2UgaWYgaXQgY2FuIGJlIGF1dG8taW5pdGlhbGl6ZWRcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyBnZXQoKSwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGEgZmF0YWwgZXJyb3IuIFdlIGp1c3QgcmV0dXJuIHRoZSB1bnJlc29sdmVkIHByb21pc2UgaW4gdGhpcyBjYXNlLlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmdldChub3JtYWxpemVkSWRlbnRpZmllcikucHJvbWlzZTtcclxuICAgIH1cclxuICAgIGdldEltbWVkaWF0ZShvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaWRlbnRpZmllcik7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uYWwgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMub3B0aW9uYWwpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQobm9ybWFsaXplZElkZW50aWZpZXIpIHx8XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gSW4gY2FzZSBhIGNvbXBvbmVudCBpcyBub3QgaW5pdGlhbGl6ZWQgYW5kIHNob3VsZC9jYW4gbm90IGJlIGF1dG8taW5pdGlhbGl6ZWQgYXQgdGhlIG1vbWVudCwgcmV0dXJuIG51bGwgaWYgdGhlIG9wdGlvbmFsIGZsYWcgaXMgc2V0LCBvciB0aHJvd1xyXG4gICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoYFNlcnZpY2UgJHt0aGlzLm5hbWV9IGlzIG5vdCBhdmFpbGFibGVgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldENvbXBvbmVudCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQ7XHJcbiAgICB9XHJcbiAgICBzZXRDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgaWYgKGNvbXBvbmVudC5uYW1lICE9PSB0aGlzLm5hbWUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYE1pc21hdGNoaW5nIENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBmb3IgUHJvdmlkZXIgJHt0aGlzLm5hbWV9LmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENvbXBvbmVudCBmb3IgJHt0aGlzLm5hbWV9IGhhcyBhbHJlYWR5IGJlZW4gcHJvdmlkZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBjb21wb25lbnQ7XHJcbiAgICAgICAgLy8gcmV0dXJuIGVhcmx5IHdpdGhvdXQgYXR0ZW1wdGluZyB0byBpbml0aWFsaXplIHRoZSBjb21wb25lbnQgaWYgdGhlIGNvbXBvbmVudCByZXF1aXJlcyBleHBsaWNpdCBpbml0aWFsaXphdGlvbiAoY2FsbGluZyBgUHJvdmlkZXIuaW5pdGlhbGl6ZSgpYClcclxuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkQXV0b0luaXRpYWxpemUoKSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmIHRoZSBzZXJ2aWNlIGlzIGVhZ2VyLCBpbml0aWFsaXplIHRoZSBkZWZhdWx0IGluc3RhbmNlXHJcbiAgICAgICAgaWYgKGlzQ29tcG9uZW50RWFnZXIoY29tcG9uZW50KSkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHsgaW5zdGFuY2VJZGVudGlmaWVyOiBERUZBVUxUX0VOVFJZX05BTUUgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgZm9yIGFuIGVhZ2VyIENvbXBvbmVudCB0aHJvd3MgYW4gZXhjZXB0aW9uIGR1cmluZyB0aGUgZWFnZXJcclxuICAgICAgICAgICAgICAgIC8vIGluaXRpYWxpemF0aW9uLCBpdCBzaG91bGQgbm90IGNhdXNlIGEgZmF0YWwgZXJyb3IuXHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBJbnZlc3RpZ2F0ZSBpZiB3ZSBuZWVkIHRvIG1ha2UgaXQgY29uZmlndXJhYmxlLCBiZWNhdXNlIHNvbWUgY29tcG9uZW50IG1heSB3YW50IHRvIGNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yIGluIHRoaXMgY2FzZT9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBDcmVhdGUgc2VydmljZSBpbnN0YW5jZXMgZm9yIHRoZSBwZW5kaW5nIHByb21pc2VzIGFuZCByZXNvbHZlIHRoZW1cclxuICAgICAgICAvLyBOT1RFOiBpZiB0aGlzLm11bHRpcGxlSW5zdGFuY2VzIGlzIGZhbHNlLCBvbmx5IHRoZSBkZWZhdWx0IGluc3RhbmNlIHdpbGwgYmUgY3JlYXRlZFxyXG4gICAgICAgIC8vIGFuZCBhbGwgcHJvbWlzZXMgd2l0aCByZXNvbHZlIHdpdGggaXQgcmVnYXJkbGVzcyBvZiB0aGUgaWRlbnRpZmllci5cclxuICAgICAgICBmb3IgKGNvbnN0IFtpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlRGVmZXJyZWRdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIC8vIGBnZXRPckluaXRpYWxpemVTZXJ2aWNlKClgIHNob3VsZCBhbHdheXMgcmV0dXJuIGEgdmFsaWQgaW5zdGFuY2Ugc2luY2UgYSBjb21wb25lbnQgaXMgZ3VhcmFudGVlZC4gdXNlICEgdG8gbWFrZSB0eXBlc2NyaXB0IGhhcHB5LlxyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VEZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgaW5zdGFuY2UgZmFjdG9yeSB0aHJvd3MgYW4gZXhjZXB0aW9uLCBpdCBzaG91bGQgbm90IGNhdXNlXHJcbiAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IGxlYXZlIHRoZSBwcm9taXNlIHVucmVzb2x2ZWQuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjbGVhckluc3RhbmNlKGlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuZGVsZXRlKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIC8vIGFwcC5kZWxldGUoKSB3aWxsIGNhbGwgdGhpcyBtZXRob2Qgb24gZXZlcnkgcHJvdmlkZXIgdG8gZGVsZXRlIHRoZSBzZXJ2aWNlc1xyXG4gICAgLy8gVE9ETzogc2hvdWxkIHdlIG1hcmsgdGhlIHByb3ZpZGVyIGFzIGRlbGV0ZWQ/XHJcbiAgICBhc3luYyBkZWxldGUoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VydmljZXMgPSBBcnJheS5mcm9tKHRoaXMuaW5zdGFuY2VzLnZhbHVlcygpKTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIC4uLnNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHNlcnZpY2UgPT4gJ0lOVEVSTkFMJyBpbiBzZXJ2aWNlKSAvLyBsZWdhY3kgc2VydmljZXNcclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICAgICAgICAgICAgICAubWFwKHNlcnZpY2UgPT4gc2VydmljZS5JTlRFUk5BTC5kZWxldGUoKSksXHJcbiAgICAgICAgICAgIC4uLnNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKHNlcnZpY2UgPT4gJ19kZWxldGUnIGluIHNlcnZpY2UpIC8vIG1vZHVsYXJpemVkIHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgLm1hcChzZXJ2aWNlID0+IHNlcnZpY2UuX2RlbGV0ZSgpKVxyXG4gICAgICAgIF0pO1xyXG4gICAgfVxyXG4gICAgaXNDb21wb25lbnRTZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50ICE9IG51bGw7XHJcbiAgICB9XHJcbiAgICBpc0luaXRpYWxpemVkKGlkZW50aWZpZXIgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXMuaGFzKGlkZW50aWZpZXIpO1xyXG4gICAgfVxyXG4gICAgZ2V0T3B0aW9ucyhpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzT3B0aW9ucy5nZXQoaWRlbnRpZmllcikgfHwge307XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplKG9wdHMgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucyA9IHt9IH0gPSBvcHRzO1xyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIob3B0cy5pbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLmlzSW5pdGlhbGl6ZWQobm9ybWFsaXplZElkZW50aWZpZXIpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGAke3RoaXMubmFtZX0oJHtub3JtYWxpemVkSWRlbnRpZmllcn0pIGhhcyBhbHJlYWR5IGJlZW4gaW5pdGlhbGl6ZWRgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoYENvbXBvbmVudCAke3RoaXMubmFtZX0gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQgeWV0YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllcixcclxuICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIHJlc29sdmUgYW55IHBlbmRpbmcgcHJvbWlzZSB3YWl0aW5nIGZvciB0aGUgc2VydmljZSBpbnN0YW5jZVxyXG4gICAgICAgIGZvciAoY29uc3QgW2luc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2VEZWZlcnJlZF0gb2YgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5lbnRyaWVzKCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZERlZmVycmVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIGlmIChub3JtYWxpemVkSWRlbnRpZmllciA9PT0gbm9ybWFsaXplZERlZmVycmVkSWRlbnRpZmllcikge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VEZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBpbnZva2VkICBhZnRlciB0aGUgcHJvdmlkZXIgaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYnkgY2FsbGluZyBwcm92aWRlci5pbml0aWFsaXplKCkuXHJcbiAgICAgKiBUaGUgZnVuY3Rpb24gaXMgaW52b2tlZCBTWU5DSFJPTk9VU0xZLCBzbyBpdCBzaG91bGQgbm90IGV4ZWN1dGUgYW55IGxvbmdydW5uaW5nIHRhc2tzIGluIG9yZGVyIHRvIG5vdCBibG9jayB0aGUgcHJvZ3JhbS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaWRlbnRpZmllciBBbiBvcHRpb25hbCBpbnN0YW5jZSBpZGVudGlmaWVyXHJcbiAgICAgKiBAcmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgdGhlIGNhbGxiYWNrXHJcbiAgICAgKi9cclxuICAgIG9uSW5pdChjYWxsYmFjaywgaWRlbnRpZmllcikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nQ2FsbGJhY2tzID0gKF9hID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbmV3IFNldCgpO1xyXG4gICAgICAgIGV4aXN0aW5nQ2FsbGJhY2tzLmFkZChjYWxsYmFjayk7XHJcbiAgICAgICAgdGhpcy5vbkluaXRDYWxsYmFja3Muc2V0KG5vcm1hbGl6ZWRJZGVudGlmaWVyLCBleGlzdGluZ0NhbGxiYWNrcyk7XHJcbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzLmdldChub3JtYWxpemVkSWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKGV4aXN0aW5nSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgY2FsbGJhY2soZXhpc3RpbmdJbnN0YW5jZSwgbm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBleGlzdGluZ0NhbGxiYWNrcy5kZWxldGUoY2FsbGJhY2spO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEludm9rZSBvbkluaXQgY2FsbGJhY2tzIHN5bmNocm9ub3VzbHlcclxuICAgICAqIEBwYXJhbSBpbnN0YW5jZSB0aGUgc2VydmljZSBpbnN0YW5jZWBcclxuICAgICAqL1xyXG4gICAgaW52b2tlT25Jbml0Q2FsbGJhY2tzKGluc3RhbmNlLCBpZGVudGlmaWVyKSB7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gdGhpcy5vbkluaXRDYWxsYmFja3MuZ2V0KGlkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmICghY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGluc3RhbmNlLCBpZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvcnMgaW4gdGhlIG9uSW5pdCBjYWxsYmFja1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0T3JJbml0aWFsaXplU2VydmljZSh7IGluc3RhbmNlSWRlbnRpZmllciwgb3B0aW9ucyA9IHt9IH0pIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQoaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWluc3RhbmNlICYmIHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIGluc3RhbmNlID0gdGhpcy5jb21wb25lbnQuaW5zdGFuY2VGYWN0b3J5KHRoaXMuY29udGFpbmVyLCB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZUlkZW50aWZpZXJGb3JGYWN0b3J5KGluc3RhbmNlSWRlbnRpZmllciksXHJcbiAgICAgICAgICAgICAgICBvcHRpb25zXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlcy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIEludm9rZSBvbkluaXQgbGlzdGVuZXJzLlxyXG4gICAgICAgICAgICAgKiBOb3RlIHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkIGlzIGRpZmZlcmVudCwgd2hpY2ggaXMgdXNlZCBieSB0aGUgY29tcG9uZW50IGNyZWF0b3IsXHJcbiAgICAgICAgICAgICAqIHdoaWxlIG9uSW5pdCBsaXN0ZW5lcnMgYXJlIHJlZ2lzdGVyZWQgYnkgY29uc3VtZXJzIG9mIHRoZSBwcm92aWRlci5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIHRoaXMuaW52b2tlT25Jbml0Q2FsbGJhY2tzKGluc3RhbmNlLCBpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogT3JkZXIgaXMgaW1wb3J0YW50XHJcbiAgICAgICAgICAgICAqIG9uSW5zdGFuY2VDcmVhdGVkKCkgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciB0aGlzLmluc3RhbmNlcy5zZXQoaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7IHdoaWNoXHJcbiAgICAgICAgICAgICAqIG1ha2VzIGBpc0luaXRpYWxpemVkKClgIHJldHVybiB0cnVlLlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50Lm9uSW5zdGFuY2VDcmVhdGVkKHRoaXMuY29udGFpbmVyLCBpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlnbm9yZSBlcnJvcnMgaW4gdGhlIG9uSW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2tcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaW5zdGFuY2UgfHwgbnVsbDtcclxuICAgIH1cclxuICAgIG5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyA/IGlkZW50aWZpZXIgOiBERUZBVUxUX0VOVFJZX05BTUU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gaWRlbnRpZmllcjsgLy8gYXNzdW1lIG11bHRpcGxlIGluc3RhbmNlcyBhcmUgc3VwcG9ydGVkIGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHByb3ZpZGVkLlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3VsZEF1dG9Jbml0aWFsaXplKCkge1xyXG4gICAgICAgIHJldHVybiAoISF0aGlzLmNvbXBvbmVudCAmJlxyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSAhPT0gXCJFWFBMSUNJVFwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkVYUExJQ0lUICovKTtcclxuICAgIH1cclxufVxyXG4vLyB1bmRlZmluZWQgc2hvdWxkIGJlIHBhc3NlZCB0byB0aGUgc2VydmljZSBmYWN0b3J5IGZvciB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG5mdW5jdGlvbiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpZGVudGlmaWVyKSB7XHJcbiAgICByZXR1cm4gaWRlbnRpZmllciA9PT0gREVGQVVMVF9FTlRSWV9OQU1FID8gdW5kZWZpbmVkIDogaWRlbnRpZmllcjtcclxufVxyXG5mdW5jdGlvbiBpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkge1xyXG4gICAgcmV0dXJuIGNvbXBvbmVudC5pbnN0YW50aWF0aW9uTW9kZSA9PT0gXCJFQUdFUlwiIC8qIEluc3RhbnRpYXRpb25Nb2RlLkVBR0VSICovO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDb21wb25lbnRDb250YWluZXIgdGhhdCBwcm92aWRlcyBQcm92aWRlcnMgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuIGBhdXRoYCwgYGF1dGgtaW50ZXJuYWxgXHJcbiAqL1xyXG5jbGFzcyBDb21wb25lbnRDb250YWluZXIge1xyXG4gICAgY29uc3RydWN0b3IobmFtZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY29tcG9uZW50IENvbXBvbmVudCBiZWluZyBhZGRlZFxyXG4gICAgICogQHBhcmFtIG92ZXJ3cml0ZSBXaGVuIGEgY29tcG9uZW50IHdpdGggdGhlIHNhbWUgbmFtZSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQsXHJcbiAgICAgKiBpZiBvdmVyd3JpdGUgaXMgdHJ1ZTogb3ZlcndyaXRlIHRoZSBleGlzdGluZyBjb21wb25lbnQgd2l0aCB0aGUgbmV3IGNvbXBvbmVudCBhbmQgY3JlYXRlIGEgbmV3XHJcbiAgICAgKiBwcm92aWRlciB3aXRoIHRoZSBuZXcgY29tcG9uZW50LiBJdCBjYW4gYmUgdXNlZnVsIGluIHRlc3RzIHdoZXJlIHlvdSB3YW50IHRvIHVzZSBkaWZmZXJlbnQgbW9ja3NcclxuICAgICAqIGZvciBkaWZmZXJlbnQgdGVzdHMuXHJcbiAgICAgKiBpZiBvdmVyd3JpdGUgaXMgZmFsc2U6IHRocm93IGFuIGV4Y2VwdGlvblxyXG4gICAgICovXHJcbiAgICBhZGRDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbXBvbmVudCAke2NvbXBvbmVudC5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHJlZ2lzdGVyZWQgd2l0aCAke3RoaXMubmFtZX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcHJvdmlkZXIuc2V0Q29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICBhZGRPck92ZXJ3cml0ZUNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgICAgICBjb25zdCBwcm92aWRlciA9IHRoaXMuZ2V0UHJvdmlkZXIoY29tcG9uZW50Lm5hbWUpO1xyXG4gICAgICAgIGlmIChwcm92aWRlci5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIC8vIGRlbGV0ZSB0aGUgZXhpc3RpbmcgcHJvdmlkZXIgZnJvbSB0aGUgY29udGFpbmVyLCBzbyB3ZSBjYW4gcmVnaXN0ZXIgdGhlIG5ldyBjb21wb25lbnRcclxuICAgICAgICAgICAgdGhpcy5wcm92aWRlcnMuZGVsZXRlKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogZ2V0UHJvdmlkZXIgcHJvdmlkZXMgYSB0eXBlIHNhZmUgaW50ZXJmYWNlIHdoZXJlIGl0IGNhbiBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgZmllbGQgbmFtZVxyXG4gICAgICogcHJlc2VudCBpbiBOYW1lU2VydmljZU1hcHBpbmcgaW50ZXJmYWNlLlxyXG4gICAgICpcclxuICAgICAqIEZpcmViYXNlIFNES3MgcHJvdmlkaW5nIHNlcnZpY2VzIHNob3VsZCBleHRlbmQgTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZSB0byByZWdpc3RlclxyXG4gICAgICogdGhlbXNlbHZlcy5cclxuICAgICAqL1xyXG4gICAgZ2V0UHJvdmlkZXIobmFtZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnByb3ZpZGVycy5oYXMobmFtZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvdmlkZXJzLmdldChuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gY3JlYXRlIGEgUHJvdmlkZXIgZm9yIGEgc2VydmljZSB0aGF0IGhhc24ndCByZWdpc3RlcmVkIHdpdGggRmlyZWJhc2VcclxuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBQcm92aWRlcihuYW1lLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnByb3ZpZGVycy5zZXQobmFtZSwgcHJvdmlkZXIpO1xyXG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcclxuICAgIH1cclxuICAgIGdldFByb3ZpZGVycygpIHtcclxuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnByb3ZpZGVycy52YWx1ZXMoKSk7XHJcbiAgICB9XHJcbn1cblxuZXhwb3J0IHsgQ29tcG9uZW50LCBDb21wb25lbnRDb250YWluZXIsIFByb3ZpZGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5lc20yMDE3LmpzLm1hcFxuIiwiaW1wb3J0IHsgX2dldFByb3ZpZGVyLCBnZXRBcHAsIF9yZWdpc3RlckNvbXBvbmVudCwgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAZmlyZWJhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYic7XG5cbmNvbnN0IG5hbWUgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zXCI7XG5jb25zdCB2ZXJzaW9uID0gXCIwLjYuNFwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBQRU5ESU5HX1RJTUVPVVRfTVMgPSAxMDAwMDtcclxuY29uc3QgUEFDS0FHRV9WRVJTSU9OID0gYHc6JHt2ZXJzaW9ufWA7XHJcbmNvbnN0IElOVEVSTkFMX0FVVEhfVkVSU0lPTiA9ICdGSVNfdjInO1xyXG5jb25zdCBJTlNUQUxMQVRJT05TX0FQSV9VUkwgPSAnaHR0cHM6Ly9maXJlYmFzZWluc3RhbGxhdGlvbnMuZ29vZ2xlYXBpcy5jb20vdjEnO1xyXG5jb25zdCBUT0tFTl9FWFBJUkFUSU9OX0JVRkZFUiA9IDYwICogNjAgKiAxMDAwOyAvLyBPbmUgaG91clxyXG5jb25zdCBTRVJWSUNFID0gJ2luc3RhbGxhdGlvbnMnO1xyXG5jb25zdCBTRVJWSUNFX05BTUUgPSAnSW5zdGFsbGF0aW9ucyc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEVSUk9SX0RFU0NSSVBUSU9OX01BUCA9IHtcclxuICAgIFtcIm1pc3NpbmctYXBwLWNvbmZpZy12YWx1ZXNcIiAvKiBFcnJvckNvZGUuTUlTU0lOR19BUFBfQ09ORklHX1ZBTFVFUyAqL106ICdNaXNzaW5nIEFwcCBjb25maWd1cmF0aW9uIHZhbHVlOiBcInskdmFsdWVOYW1lfVwiJyxcclxuICAgIFtcIm5vdC1yZWdpc3RlcmVkXCIgLyogRXJyb3JDb2RlLk5PVF9SRUdJU1RFUkVEICovXTogJ0ZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyBub3QgcmVnaXN0ZXJlZC4nLFxyXG4gICAgW1wiaW5zdGFsbGF0aW9uLW5vdC1mb3VuZFwiIC8qIEVycm9yQ29kZS5JTlNUQUxMQVRJT05fTk9UX0ZPVU5EICovXTogJ0ZpcmViYXNlIEluc3RhbGxhdGlvbiBub3QgZm91bmQuJyxcclxuICAgIFtcInJlcXVlc3QtZmFpbGVkXCIgLyogRXJyb3JDb2RlLlJFUVVFU1RfRkFJTEVEICovXTogJ3skcmVxdWVzdE5hbWV9IHJlcXVlc3QgZmFpbGVkIHdpdGggZXJyb3IgXCJ7JHNlcnZlckNvZGV9IHskc2VydmVyU3RhdHVzfTogeyRzZXJ2ZXJNZXNzYWdlfVwiJyxcclxuICAgIFtcImFwcC1vZmZsaW5lXCIgLyogRXJyb3JDb2RlLkFQUF9PRkZMSU5FICovXTogJ0NvdWxkIG5vdCBwcm9jZXNzIHJlcXVlc3QuIEFwcGxpY2F0aW9uIG9mZmxpbmUuJyxcclxuICAgIFtcImRlbGV0ZS1wZW5kaW5nLXJlZ2lzdHJhdGlvblwiIC8qIEVycm9yQ29kZS5ERUxFVEVfUEVORElOR19SRUdJU1RSQVRJT04gKi9dOiBcIkNhbid0IGRlbGV0ZSBpbnN0YWxsYXRpb24gd2hpbGUgdGhlcmUgaXMgYSBwZW5kaW5nIHJlZ2lzdHJhdGlvbiByZXF1ZXN0LlwiXHJcbn07XHJcbmNvbnN0IEVSUk9SX0ZBQ1RPUlkgPSBuZXcgRXJyb3JGYWN0b3J5KFNFUlZJQ0UsIFNFUlZJQ0VfTkFNRSwgRVJST1JfREVTQ1JJUFRJT05fTUFQKTtcclxuLyoqIFJldHVybnMgdHJ1ZSBpZiBlcnJvciBpcyBhIEZpcmViYXNlRXJyb3IgdGhhdCBpcyBiYXNlZCBvbiBhbiBlcnJvciBmcm9tIHRoZSBzZXJ2ZXIuICovXHJcbmZ1bmN0aW9uIGlzU2VydmVyRXJyb3IoZXJyb3IpIHtcclxuICAgIHJldHVybiAoZXJyb3IgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yICYmXHJcbiAgICAgICAgZXJyb3IuY29kZS5pbmNsdWRlcyhcInJlcXVlc3QtZmFpbGVkXCIgLyogRXJyb3JDb2RlLlJFUVVFU1RfRkFJTEVEICovKSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KHsgcHJvamVjdElkIH0pIHtcclxuICAgIHJldHVybiBgJHtJTlNUQUxMQVRJT05TX0FQSV9VUkx9L3Byb2plY3RzLyR7cHJvamVjdElkfS9pbnN0YWxsYXRpb25zYDtcclxufVxyXG5mdW5jdGlvbiBleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZShyZXNwb25zZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB0b2tlbjogcmVzcG9uc2UudG9rZW4sXHJcbiAgICAgICAgcmVxdWVzdFN0YXR1czogMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLyxcclxuICAgICAgICBleHBpcmVzSW46IGdldEV4cGlyZXNJbkZyb21SZXNwb25zZUV4cGlyZXNJbihyZXNwb25zZS5leHBpcmVzSW4pLFxyXG4gICAgICAgIGNyZWF0aW9uVGltZTogRGF0ZS5ub3coKVxyXG4gICAgfTtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBnZXRFcnJvckZyb21SZXNwb25zZShyZXF1ZXN0TmFtZSwgcmVzcG9uc2UpIHtcclxuICAgIGNvbnN0IHJlc3BvbnNlSnNvbiA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgIGNvbnN0IGVycm9yRGF0YSA9IHJlc3BvbnNlSnNvbi5lcnJvcjtcclxuICAgIHJldHVybiBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcInJlcXVlc3QtZmFpbGVkXCIgLyogRXJyb3JDb2RlLlJFUVVFU1RfRkFJTEVEICovLCB7XHJcbiAgICAgICAgcmVxdWVzdE5hbWUsXHJcbiAgICAgICAgc2VydmVyQ29kZTogZXJyb3JEYXRhLmNvZGUsXHJcbiAgICAgICAgc2VydmVyTWVzc2FnZTogZXJyb3JEYXRhLm1lc3NhZ2UsXHJcbiAgICAgICAgc2VydmVyU3RhdHVzOiBlcnJvckRhdGEuc3RhdHVzXHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJzKHsgYXBpS2V5IH0pIHtcclxuICAgIHJldHVybiBuZXcgSGVhZGVycyh7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICBBY2NlcHQ6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAneC1nb29nLWFwaS1rZXknOiBhcGlLZXlcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEhlYWRlcnNXaXRoQXV0aChhcHBDb25maWcsIHsgcmVmcmVzaFRva2VuIH0pIHtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKGFwcENvbmZpZyk7XHJcbiAgICBoZWFkZXJzLmFwcGVuZCgnQXV0aG9yaXphdGlvbicsIGdldEF1dGhvcml6YXRpb25IZWFkZXIocmVmcmVzaFRva2VuKSk7XHJcbiAgICByZXR1cm4gaGVhZGVycztcclxufVxyXG4vKipcclxuICogQ2FsbHMgdGhlIHBhc3NlZCBpbiBmZXRjaCB3cmFwcGVyIGFuZCByZXR1cm5zIHRoZSByZXNwb25zZS5cclxuICogSWYgdGhlIHJldHVybmVkIHJlc3BvbnNlIGhhcyBhIHN0YXR1cyBvZiA1eHgsIHJlLXJ1bnMgdGhlIGZ1bmN0aW9uIG9uY2UgYW5kXHJcbiAqIHJldHVybnMgdGhlIHJlc3BvbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmV0cnlJZlNlcnZlckVycm9yKGZuKSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmbigpO1xyXG4gICAgaWYgKHJlc3VsdC5zdGF0dXMgPj0gNTAwICYmIHJlc3VsdC5zdGF0dXMgPCA2MDApIHtcclxuICAgICAgICAvLyBJbnRlcm5hbCBTZXJ2ZXIgRXJyb3IuIFJldHJ5IHJlcXVlc3QuXHJcbiAgICAgICAgcmV0dXJuIGZuKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbmZ1bmN0aW9uIGdldEV4cGlyZXNJbkZyb21SZXNwb25zZUV4cGlyZXNJbihyZXNwb25zZUV4cGlyZXNJbikge1xyXG4gICAgLy8gVGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBzZXJ2ZXIgd2lsbCBuZXZlciByZXNwb25kIHdpdGggZnJhY3Rpb25zIG9mIGEgc2Vjb25kLlxyXG4gICAgcmV0dXJuIE51bWJlcihyZXNwb25zZUV4cGlyZXNJbi5yZXBsYWNlKCdzJywgJzAwMCcpKTtcclxufVxyXG5mdW5jdGlvbiBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikge1xyXG4gICAgcmV0dXJuIGAke0lOVEVSTkFMX0FVVEhfVkVSU0lPTn0gJHtyZWZyZXNoVG9rZW59YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KHsgYXBwQ29uZmlnLCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIgfSwgeyBmaWQgfSkge1xyXG4gICAgY29uc3QgZW5kcG9pbnQgPSBnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzKGFwcENvbmZpZyk7XHJcbiAgICAvLyBJZiBoZWFydGJlYXQgc2VydmljZSBleGlzdHMsIGFkZCB0aGUgaGVhcnRiZWF0IHN0cmluZyB0byB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0U2VydmljZSA9IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlci5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIGlmIChoZWFydGJlYXRTZXJ2aWNlKSB7XHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0c0hlYWRlciA9IGF3YWl0IGhlYXJ0YmVhdFNlcnZpY2UuZ2V0SGVhcnRiZWF0c0hlYWRlcigpO1xyXG4gICAgICAgIGlmIChoZWFydGJlYXRzSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCd4LWZpcmViYXNlLWNsaWVudCcsIGhlYXJ0YmVhdHNIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgICAgZmlkLFxyXG4gICAgICAgIGF1dGhWZXJzaW9uOiBJTlRFUk5BTF9BVVRIX1ZFUlNJT04sXHJcbiAgICAgICAgYXBwSWQ6IGFwcENvbmZpZy5hcHBJZCxcclxuICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT05cclxuICAgIH07XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcclxuICAgIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJldHJ5SWZTZXJ2ZXJFcnJvcigoKSA9PiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VWYWx1ZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBjb25zdCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGZpZDogcmVzcG9uc2VWYWx1ZS5maWQgfHwgZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDIgLyogUmVxdWVzdFN0YXR1cy5DT01QTEVURUQgKi8sXHJcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbjogcmVzcG9uc2VWYWx1ZS5yZWZyZXNoVG9rZW4sXHJcbiAgICAgICAgICAgIGF1dGhUb2tlbjogZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2VWYWx1ZS5hdXRoVG9rZW4pXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgYXdhaXQgZ2V0RXJyb3JGcm9tUmVzcG9uc2UoJ0NyZWF0ZSBJbnN0YWxsYXRpb24nLCByZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgYWZ0ZXIgZ2l2ZW4gdGltZSBwYXNzZXMuICovXHJcbmZ1bmN0aW9uIHNsZWVwKG1zKSB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XHJcbiAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBidWZmZXJUb0Jhc2U2NFVybFNhZmUoYXJyYXkpIHtcclxuICAgIGNvbnN0IGI2NCA9IGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZSguLi5hcnJheSkpO1xyXG4gICAgcmV0dXJuIGI2NC5yZXBsYWNlKC9cXCsvZywgJy0nKS5yZXBsYWNlKC9cXC8vZywgJ18nKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBWQUxJRF9GSURfUEFUVEVSTiA9IC9eW2NkZWZdW1xcdy1dezIxfSQvO1xyXG5jb25zdCBJTlZBTElEX0ZJRCA9ICcnO1xyXG4vKipcclxuICogR2VuZXJhdGVzIGEgbmV3IEZJRCB1c2luZyByYW5kb20gdmFsdWVzIGZyb20gV2ViIENyeXB0byBBUEkuXHJcbiAqIFJldHVybnMgYW4gZW1wdHkgc3RyaW5nIGlmIEZJRCBnZW5lcmF0aW9uIGZhaWxzIGZvciBhbnkgcmVhc29uLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVGaWQoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIC8vIEEgdmFsaWQgRklEIGhhcyBleGFjdGx5IDIyIGJhc2U2NCBjaGFyYWN0ZXJzLCB3aGljaCBpcyAxMzIgYml0cywgb3IgMTYuNVxyXG4gICAgICAgIC8vIGJ5dGVzLiBvdXIgaW1wbGVtZW50YXRpb24gZ2VuZXJhdGVzIGEgMTcgYnl0ZSBhcnJheSBpbnN0ZWFkLlxyXG4gICAgICAgIGNvbnN0IGZpZEJ5dGVBcnJheSA9IG5ldyBVaW50OEFycmF5KDE3KTtcclxuICAgICAgICBjb25zdCBjcnlwdG8gPSBzZWxmLmNyeXB0byB8fCBzZWxmLm1zQ3J5cHRvO1xyXG4gICAgICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMoZmlkQnl0ZUFycmF5KTtcclxuICAgICAgICAvLyBSZXBsYWNlIHRoZSBmaXJzdCA0IHJhbmRvbSBiaXRzIHdpdGggdGhlIGNvbnN0YW50IEZJRCBoZWFkZXIgb2YgMGIwMTExLlxyXG4gICAgICAgIGZpZEJ5dGVBcnJheVswXSA9IDBiMDExMTAwMDAgKyAoZmlkQnl0ZUFycmF5WzBdICUgMGIwMDAxMDAwMCk7XHJcbiAgICAgICAgY29uc3QgZmlkID0gZW5jb2RlKGZpZEJ5dGVBcnJheSk7XHJcbiAgICAgICAgcmV0dXJuIFZBTElEX0ZJRF9QQVRURVJOLnRlc3QoZmlkKSA/IGZpZCA6IElOVkFMSURfRklEO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgLy8gRklEIGdlbmVyYXRpb24gZXJyb3JlZFxyXG4gICAgICAgIHJldHVybiBJTlZBTElEX0ZJRDtcclxuICAgIH1cclxufVxyXG4vKiogQ29udmVydHMgYSBGSUQgVWludDhBcnJheSB0byBhIGJhc2U2NCBzdHJpbmcgcmVwcmVzZW50YXRpb24uICovXHJcbmZ1bmN0aW9uIGVuY29kZShmaWRCeXRlQXJyYXkpIHtcclxuICAgIGNvbnN0IGI2NFN0cmluZyA9IGJ1ZmZlclRvQmFzZTY0VXJsU2FmZShmaWRCeXRlQXJyYXkpO1xyXG4gICAgLy8gUmVtb3ZlIHRoZSAyM3JkIGNoYXJhY3RlciB0aGF0IHdhcyBhZGRlZCBiZWNhdXNlIG9mIHRoZSBleHRyYSA0IGJpdHMgYXQgdGhlXHJcbiAgICAvLyBlbmQgb2Ygb3VyIDE3IGJ5dGUgYXJyYXksIGFuZCB0aGUgJz0nIHBhZGRpbmcuXHJcbiAgICByZXR1cm4gYjY0U3RyaW5nLnN1YnN0cigwLCAyMik7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqIFJldHVybnMgYSBzdHJpbmcga2V5IHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhlIGFwcC4gKi9cclxuZnVuY3Rpb24gZ2V0S2V5KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIGAke2FwcENvbmZpZy5hcHBOYW1lfSEke2FwcENvbmZpZy5hcHBJZH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGZpZENoYW5nZUNhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuLyoqXHJcbiAqIENhbGxzIHRoZSBvbklkQ2hhbmdlIGNhbGxiYWNrcyB3aXRoIHRoZSBuZXcgRklEIHZhbHVlLCBhbmQgYnJvYWRjYXN0cyB0aGVcclxuICogY2hhbmdlIHRvIG90aGVyIHRhYnMuXHJcbiAqL1xyXG5mdW5jdGlvbiBmaWRDaGFuZ2VkKGFwcENvbmZpZywgZmlkKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3Moa2V5LCBmaWQpO1xyXG4gICAgYnJvYWRjYXN0RmlkQ2hhbmdlKGtleSwgZmlkKTtcclxufVxyXG5mdW5jdGlvbiBhZGRDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKSB7XHJcbiAgICAvLyBPcGVuIHRoZSBicm9hZGNhc3QgY2hhbm5lbCBpZiBpdCdzIG5vdCBhbHJlYWR5IG9wZW4sXHJcbiAgICAvLyB0byBiZSBhYmxlIHRvIGxpc3RlbiB0byBjaGFuZ2UgZXZlbnRzIGZyb20gb3RoZXIgdGFicy5cclxuICAgIGdldEJyb2FkY2FzdENoYW5uZWwoKTtcclxuICAgIGNvbnN0IGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgbGV0IGNhbGxiYWNrU2V0ID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja1NldCkge1xyXG4gICAgICAgIGNhbGxiYWNrU2V0ID0gbmV3IFNldCgpO1xyXG4gICAgICAgIGZpZENoYW5nZUNhbGxiYWNrcy5zZXQoa2V5LCBjYWxsYmFja1NldCk7XHJcbiAgICB9XHJcbiAgICBjYWxsYmFja1NldC5hZGQoY2FsbGJhY2spO1xyXG59XHJcbmZ1bmN0aW9uIHJlbW92ZUNhbGxiYWNrKGFwcENvbmZpZywgY2FsbGJhY2spIHtcclxuICAgIGNvbnN0IGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgY29uc3QgY2FsbGJhY2tTZXQgPSBmaWRDaGFuZ2VDYWxsYmFja3MuZ2V0KGtleSk7XHJcbiAgICBpZiAoIWNhbGxiYWNrU2V0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY2FsbGJhY2tTZXQuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgIGlmIChjYWxsYmFja1NldC5zaXplID09PSAwKSB7XHJcbiAgICAgICAgZmlkQ2hhbmdlQ2FsbGJhY2tzLmRlbGV0ZShrZXkpO1xyXG4gICAgfVxyXG4gICAgLy8gQ2xvc2UgYnJvYWRjYXN0IGNoYW5uZWwgaWYgdGhlcmUgYXJlIG5vIG1vcmUgY2FsbGJhY2tzLlxyXG4gICAgY2xvc2VCcm9hZGNhc3RDaGFubmVsKCk7XHJcbn1cclxuZnVuY3Rpb24gY2FsbEZpZENoYW5nZUNhbGxiYWNrcyhrZXksIGZpZCkge1xyXG4gICAgY29uc3QgY2FsbGJhY2tzID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja3MpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGNhbGxiYWNrcykge1xyXG4gICAgICAgIGNhbGxiYWNrKGZpZCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYnJvYWRjYXN0RmlkQ2hhbmdlKGtleSwgZmlkKSB7XHJcbiAgICBjb25zdCBjaGFubmVsID0gZ2V0QnJvYWRjYXN0Q2hhbm5lbCgpO1xyXG4gICAgaWYgKGNoYW5uZWwpIHtcclxuICAgICAgICBjaGFubmVsLnBvc3RNZXNzYWdlKHsga2V5LCBmaWQgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZUJyb2FkY2FzdENoYW5uZWwoKTtcclxufVxyXG5sZXQgYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XHJcbi8qKiBPcGVucyBhbmQgcmV0dXJucyBhIEJyb2FkY2FzdENoYW5uZWwgaWYgaXQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyLiAqL1xyXG5mdW5jdGlvbiBnZXRCcm9hZGNhc3RDaGFubmVsKCkge1xyXG4gICAgaWYgKCFicm9hZGNhc3RDaGFubmVsICYmICdCcm9hZGNhc3RDaGFubmVsJyBpbiBzZWxmKSB7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKCdbRmlyZWJhc2VdIEZJRCBDaGFuZ2UnKTtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsLm9ubWVzc2FnZSA9IGUgPT4ge1xyXG4gICAgICAgICAgICBjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzKGUuZGF0YS5rZXksIGUuZGF0YS5maWQpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYnJvYWRjYXN0Q2hhbm5lbDtcclxufVxyXG5mdW5jdGlvbiBjbG9zZUJyb2FkY2FzdENoYW5uZWwoKSB7XHJcbiAgICBpZiAoZmlkQ2hhbmdlQ2FsbGJhY2tzLnNpemUgPT09IDAgJiYgYnJvYWRjYXN0Q2hhbm5lbCkge1xyXG4gICAgICAgIGJyb2FkY2FzdENoYW5uZWwuY2xvc2UoKTtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsID0gbnVsbDtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBEQVRBQkFTRV9OQU1FID0gJ2ZpcmViYXNlLWluc3RhbGxhdGlvbnMtZGF0YWJhc2UnO1xyXG5jb25zdCBEQVRBQkFTRV9WRVJTSU9OID0gMTtcclxuY29uc3QgT0JKRUNUX1NUT1JFX05BTUUgPSAnZmlyZWJhc2UtaW5zdGFsbGF0aW9ucy1zdG9yZSc7XHJcbmxldCBkYlByb21pc2UgPSBudWxsO1xyXG5mdW5jdGlvbiBnZXREYlByb21pc2UoKSB7XHJcbiAgICBpZiAoIWRiUHJvbWlzZSkge1xyXG4gICAgICAgIGRiUHJvbWlzZSA9IG9wZW5EQihEQVRBQkFTRV9OQU1FLCBEQVRBQkFTRV9WRVJTSU9OLCB7XHJcbiAgICAgICAgICAgIHVwZ3JhZGU6IChkYiwgb2xkVmVyc2lvbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gV2UgZG9uJ3QgdXNlICdicmVhaycgaW4gdGhpcyBzd2l0Y2ggc3RhdGVtZW50LCB0aGUgZmFsbC10aHJvdWdoXHJcbiAgICAgICAgICAgICAgICAvLyBiZWhhdmlvciBpcyB3aGF0IHdlIHdhbnQsIGJlY2F1c2UgaWYgdGhlcmUgYXJlIG11bHRpcGxlIHZlcnNpb25zIGJldHdlZW5cclxuICAgICAgICAgICAgICAgIC8vIHRoZSBvbGQgdmVyc2lvbiBhbmQgdGhlIGN1cnJlbnQgdmVyc2lvbiwgd2Ugd2FudCBBTEwgdGhlIG1pZ3JhdGlvbnNcclxuICAgICAgICAgICAgICAgIC8vIHRoYXQgY29ycmVzcG9uZCB0byB0aG9zZSB2ZXJzaW9ucyB0byBydW4sIG5vdCBvbmx5IHRoZSBsYXN0IG9uZS5cclxuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBkZWZhdWx0LWNhc2VcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAob2xkVmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGIuY3JlYXRlT2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGJQcm9taXNlO1xyXG59XHJcbi8qKiBBc3NpZ25zIG9yIG92ZXJ3cml0ZXMgdGhlIHJlY29yZCBmb3IgdGhlIGdpdmVuIGtleSB3aXRoIHRoZSBnaXZlbiB2YWx1ZS4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0KGFwcENvbmZpZywgdmFsdWUpIHtcclxuICAgIGNvbnN0IGtleSA9IGdldEtleShhcHBDb25maWcpO1xyXG4gICAgY29uc3QgZGIgPSBhd2FpdCBnZXREYlByb21pc2UoKTtcclxuICAgIGNvbnN0IHR4ID0gZGIudHJhbnNhY3Rpb24oT0JKRUNUX1NUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgIGNvbnN0IG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpO1xyXG4gICAgY29uc3Qgb2xkVmFsdWUgPSAoYXdhaXQgb2JqZWN0U3RvcmUuZ2V0KGtleSkpO1xyXG4gICAgYXdhaXQgb2JqZWN0U3RvcmUucHV0KHZhbHVlLCBrZXkpO1xyXG4gICAgYXdhaXQgdHguZG9uZTtcclxuICAgIGlmICghb2xkVmFsdWUgfHwgb2xkVmFsdWUuZmlkICE9PSB2YWx1ZS5maWQpIHtcclxuICAgICAgICBmaWRDaGFuZ2VkKGFwcENvbmZpZywgdmFsdWUuZmlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWx1ZTtcclxufVxyXG4vKiogUmVtb3ZlcyByZWNvcmQocykgZnJvbSB0aGUgb2JqZWN0U3RvcmUgdGhhdCBtYXRjaCB0aGUgZ2l2ZW4ga2V5LiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZW1vdmUoYXBwQ29uZmlnKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICBhd2FpdCB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSkuZGVsZXRlKGtleSk7XHJcbiAgICBhd2FpdCB0eC5kb25lO1xyXG59XHJcbi8qKlxyXG4gKiBBdG9taWNhbGx5IHVwZGF0ZXMgYSByZWNvcmQgd2l0aCB0aGUgcmVzdWx0IG9mIHVwZGF0ZUZuLCB3aGljaCBnZXRzXHJcbiAqIGNhbGxlZCB3aXRoIHRoZSBjdXJyZW50IHZhbHVlLiBJZiBuZXdWYWx1ZSBpcyB1bmRlZmluZWQsIHRoZSByZWNvcmQgaXNcclxuICogZGVsZXRlZCBpbnN0ZWFkLlxyXG4gKiBAcmV0dXJuIFVwZGF0ZWQgdmFsdWVcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZShhcHBDb25maWcsIHVwZGF0ZUZuKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICBjb25zdCBzdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gKGF3YWl0IHN0b3JlLmdldChrZXkpKTtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gdXBkYXRlRm4ob2xkVmFsdWUpO1xyXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBhd2FpdCBzdG9yZS5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGF3YWl0IHN0b3JlLnB1dChuZXdWYWx1ZSwga2V5KTtcclxuICAgIH1cclxuICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICBpZiAobmV3VmFsdWUgJiYgKCFvbGRWYWx1ZSB8fCBvbGRWYWx1ZS5maWQgIT09IG5ld1ZhbHVlLmZpZCkpIHtcclxuICAgICAgICBmaWRDaGFuZ2VkKGFwcENvbmZpZywgbmV3VmFsdWUuZmlkKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXdWYWx1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVXBkYXRlcyBhbmQgcmV0dXJucyB0aGUgSW5zdGFsbGF0aW9uRW50cnkgZnJvbSB0aGUgZGF0YWJhc2UuXHJcbiAqIEFsc28gdHJpZ2dlcnMgYSByZWdpc3RyYXRpb24gcmVxdWVzdCBpZiBpdCBpcyBuZWNlc3NhcnkgYW5kIHBvc3NpYmxlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9uRW50cnkoaW5zdGFsbGF0aW9ucykge1xyXG4gICAgbGV0IHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25FbnRyeSA9IGF3YWl0IHVwZGF0ZShpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGluc3RhbGxhdGlvbkVudHJ5ID0gdXBkYXRlT3JDcmVhdGVJbnN0YWxsYXRpb25FbnRyeShvbGRFbnRyeSk7XHJcbiAgICAgICAgY29uc3QgZW50cnlXaXRoUHJvbWlzZSA9IHRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeShpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IGVudHJ5V2l0aFByb21pc2UucmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICByZXR1cm4gZW50cnlXaXRoUHJvbWlzZS5pbnN0YWxsYXRpb25FbnRyeTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGluc3RhbGxhdGlvbkVudHJ5LmZpZCA9PT0gSU5WQUxJRF9GSUQpIHtcclxuICAgICAgICAvLyBGSUQgZ2VuZXJhdGlvbiBmYWlsZWQuIFdhaXRpbmcgZm9yIHRoZSBGSUQgZnJvbSB0aGUgc2VydmVyLlxyXG4gICAgICAgIHJldHVybiB7IGluc3RhbGxhdGlvbkVudHJ5OiBhd2FpdCByZWdpc3RyYXRpb25Qcm9taXNlIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGluc3RhbGxhdGlvbkVudHJ5LFxyXG4gICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2VcclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIENyZWF0ZXMgYSBuZXcgSW5zdGFsbGF0aW9uIEVudHJ5IGlmIG9uZSBkb2VzIG5vdCBleGlzdC5cclxuICogQWxzbyBjbGVhcnMgdGltZWQgb3V0IHBlbmRpbmcgcmVxdWVzdHMuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVPckNyZWF0ZUluc3RhbGxhdGlvbkVudHJ5KG9sZEVudHJ5KSB7XHJcbiAgICBjb25zdCBlbnRyeSA9IG9sZEVudHJ5IHx8IHtcclxuICAgICAgICBmaWQ6IGdlbmVyYXRlRmlkKCksXHJcbiAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi9cclxuICAgIH07XHJcbiAgICByZXR1cm4gY2xlYXJUaW1lZE91dFJlcXVlc3QoZW50cnkpO1xyXG59XHJcbi8qKlxyXG4gKiBJZiB0aGUgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGlzIG5vdCByZWdpc3RlcmVkIHlldCwgdGhpcyB3aWxsIHRyaWdnZXIgdGhlXHJcbiAqIHJlZ2lzdHJhdGlvbiBhbmQgcmV0dXJuIGFuIEluUHJvZ3Jlc3NJbnN0YWxsYXRpb25FbnRyeS5cclxuICpcclxuICogSWYgcmVnaXN0cmF0aW9uUHJvbWlzZSBkb2VzIG5vdCBleGlzdCwgdGhlIGluc3RhbGxhdGlvbkVudHJ5IGlzIGd1YXJhbnRlZWRcclxuICogdG8gYmUgcmVnaXN0ZXJlZC5cclxuICovXHJcbmZ1bmN0aW9uIHRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeShpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgaWYgKGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovKSB7XHJcbiAgICAgICAgaWYgKCFuYXZpZ2F0b3Iub25MaW5lKSB7XHJcbiAgICAgICAgICAgIC8vIFJlZ2lzdHJhdGlvbiByZXF1aXJlZCBidXQgYXBwIGlzIG9mZmxpbmUuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3IgPSBQcm9taXNlLnJlamVjdChFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFwcC1vZmZsaW5lXCIgLyogRXJyb3JDb2RlLkFQUF9PRkZMSU5FICovKSk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2U6IHJlZ2lzdHJhdGlvblByb21pc2VXaXRoRXJyb3JcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVHJ5IHJlZ2lzdGVyaW5nLiBDaGFuZ2Ugc3RhdHVzIHRvIElOX1BST0dSRVNTLlxyXG4gICAgICAgIGNvbnN0IGluUHJvZ3Jlc3NFbnRyeSA9IHtcclxuICAgICAgICAgICAgZmlkOiBpbnN0YWxsYXRpb25FbnRyeS5maWQsXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25UaW1lOiBEYXRlLm5vdygpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCByZWdpc3RyYXRpb25Qcm9taXNlID0gcmVnaXN0ZXJJbnN0YWxsYXRpb24oaW5zdGFsbGF0aW9ucywgaW5Qcm9ncmVzc0VudHJ5KTtcclxuICAgICAgICByZXR1cm4geyBpbnN0YWxsYXRpb25FbnRyeTogaW5Qcm9ncmVzc0VudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlIH07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGluc3RhbGxhdGlvbkVudHJ5LFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlOiB3YWl0VW50aWxGaWRSZWdpc3RyYXRpb24oaW5zdGFsbGF0aW9ucylcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5zdGFsbGF0aW9uRW50cnkgfTtcclxuICAgIH1cclxufVxyXG4vKiogVGhpcyB3aWxsIGJlIGV4ZWN1dGVkIG9ubHkgb25jZSBmb3IgZWFjaCBuZXcgRmlyZWJhc2UgSW5zdGFsbGF0aW9uLiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZWdpc3Rlckluc3RhbGxhdGlvbihpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkgPSBhd2FpdCBjcmVhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGluc3RhbGxhdGlvbnMsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICByZXR1cm4gc2V0KGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnLCByZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoaXNTZXJ2ZXJFcnJvcihlKSAmJiBlLmN1c3RvbURhdGEuc2VydmVyQ29kZSA9PT0gNDA5KSB7XHJcbiAgICAgICAgICAgIC8vIFNlcnZlciByZXR1cm5lZCBhIFwiRklEIGNhbiBub3QgYmUgdXNlZFwiIGVycm9yLlxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgIGF3YWl0IHJlbW92ZShpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBSZWdpc3RyYXRpb24gZmFpbGVkLiBTZXQgRklEIGFzIG5vdCByZWdpc3RlcmVkLlxyXG4gICAgICAgICAgICBhd2FpdCBzZXQoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIHtcclxuICAgICAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi9cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuLyoqIENhbGwgaWYgRklEIHJlZ2lzdHJhdGlvbiBpcyBwZW5kaW5nIGluIGFub3RoZXIgcmVxdWVzdC4gKi9cclxuYXN5bmMgZnVuY3Rpb24gd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnMpIHtcclxuICAgIC8vIFVuZm9ydHVuYXRlbHksIHRoZXJlIGlzIG5vIHdheSBvZiByZWxpYWJseSBvYnNlcnZpbmcgd2hlbiBhIHZhbHVlIGluXHJcbiAgICAvLyBJbmRleGVkREIgY2hhbmdlcyAoeWV0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvaW5kZXhlZC1kYi1vYnNlcnZlcnMpLFxyXG4gICAgLy8gc28gd2UgbmVlZCB0byBwb2xsLlxyXG4gICAgbGV0IGVudHJ5ID0gYXdhaXQgdXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICB3aGlsZSAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAvLyBjcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdCBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICBhd2FpdCBzbGVlcCgxMDApO1xyXG4gICAgICAgIGVudHJ5ID0gYXdhaXQgdXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBpZiAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAvLyBUaGUgcmVxdWVzdCB0aW1lZCBvdXQgb3IgZmFpbGVkIGluIGEgZGlmZmVyZW50IGNhbGwuIFRyeSBhZ2Fpbi5cclxuICAgICAgICBjb25zdCB7IGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlIH0gPSBhd2FpdCBnZXRJbnN0YWxsYXRpb25FbnRyeShpbnN0YWxsYXRpb25zKTtcclxuICAgICAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlIGlzIG5vIHJlZ2lzdHJhdGlvblByb21pc2UsIGVudHJ5IGlzIHJlZ2lzdGVyZWQuXHJcbiAgICAgICAgICAgIHJldHVybiBpbnN0YWxsYXRpb25FbnRyeTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxlZCBvbmx5IGlmIHRoZXJlIGlzIGEgQ3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFVwZGF0ZXMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGluIHRoZSBEQiBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZVxyXG4gKiBDcmVhdGVJbnN0YWxsYXRpb24gcmVxdWVzdC5cclxuICpcclxuICogUmV0dXJucyB0aGUgdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gdXBkYXRlKGFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGlmICghb2xkRW50cnkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnN0YWxsYXRpb24tbm90LWZvdW5kXCIgLyogRXJyb3JDb2RlLklOU1RBTExBVElPTl9OT1RfRk9VTkQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xlYXJUaW1lZE91dFJlcXVlc3Qob2xkRW50cnkpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY2xlYXJUaW1lZE91dFJlcXVlc3QoZW50cnkpIHtcclxuICAgIGlmIChoYXNJbnN0YWxsYXRpb25SZXF1ZXN0VGltZWRPdXQoZW50cnkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZmlkOiBlbnRyeS5maWQsXHJcbiAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHJldHVybiBlbnRyeTtcclxufVxyXG5mdW5jdGlvbiBoYXNJbnN0YWxsYXRpb25SZXF1ZXN0VGltZWRPdXQoaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHJldHVybiAoaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25UaW1lICsgUEVORElOR19USU1FT1VUX01TIDwgRGF0ZS5ub3coKSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2VuZXJhdGVBdXRoVG9rZW5SZXF1ZXN0KHsgYXBwQ29uZmlnLCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIgfSwgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgIGNvbnN0IGhlYWRlcnMgPSBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAvLyBJZiBoZWFydGJlYXQgc2VydmljZSBleGlzdHMsIGFkZCB0aGUgaGVhcnRiZWF0IHN0cmluZyB0byB0aGUgaGVhZGVyLlxyXG4gICAgY29uc3QgaGVhcnRiZWF0U2VydmljZSA9IGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlci5nZXRJbW1lZGlhdGUoe1xyXG4gICAgICAgIG9wdGlvbmFsOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIGlmIChoZWFydGJlYXRTZXJ2aWNlKSB7XHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0c0hlYWRlciA9IGF3YWl0IGhlYXJ0YmVhdFNlcnZpY2UuZ2V0SGVhcnRiZWF0c0hlYWRlcigpO1xyXG4gICAgICAgIGlmIChoZWFydGJlYXRzSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKCd4LWZpcmViYXNlLWNsaWVudCcsIGhlYXJ0YmVhdHNIZWFkZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGJvZHkgPSB7XHJcbiAgICAgICAgaW5zdGFsbGF0aW9uOiB7XHJcbiAgICAgICAgICAgIHNka1ZlcnNpb246IFBBQ0tBR0VfVkVSU0lPTixcclxuICAgICAgICAgICAgYXBwSWQ6IGFwcENvbmZpZy5hcHBJZFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSlcclxuICAgIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJldHJ5SWZTZXJ2ZXJFcnJvcigoKSA9PiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKHJlc3BvbnNlLm9rKSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2VWYWx1ZSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICBjb25zdCBjb21wbGV0ZWRBdXRoVG9rZW4gPSBleHRyYWN0QXV0aFRva2VuSW5mb0Zyb21SZXNwb25zZShyZXNwb25zZVZhbHVlKTtcclxuICAgICAgICByZXR1cm4gY29tcGxldGVkQXV0aFRva2VuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgYXdhaXQgZ2V0RXJyb3JGcm9tUmVzcG9uc2UoJ0dlbmVyYXRlIEF1dGggVG9rZW4nLCByZXNwb25zZSk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0R2VuZXJhdGVBdXRoVG9rZW5FbmRwb2ludChhcHBDb25maWcsIHsgZmlkIH0pIHtcclxuICAgIHJldHVybiBgJHtnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKX0vJHtmaWR9L2F1dGhUb2tlbnM6Z2VuZXJhdGVgO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgdmFsaWQgYXV0aGVudGljYXRpb24gdG9rZW4gZm9yIHRoZSBpbnN0YWxsYXRpb24uIEdlbmVyYXRlcyBhIG5ld1xyXG4gKiB0b2tlbiBpZiBvbmUgZG9lc24ndCBleGlzdCwgaXMgZXhwaXJlZCBvciBhYm91dCB0byBleHBpcmUuXHJcbiAqXHJcbiAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGlzIHJlZ2lzdGVyZWQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgdG9rZW5Qcm9taXNlO1xyXG4gICAgY29uc3QgZW50cnkgPSBhd2FpdCB1cGRhdGUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBpZiAoIWlzRW50cnlSZWdpc3RlcmVkKG9sZEVudHJ5KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vdC1yZWdpc3RlcmVkXCIgLyogRXJyb3JDb2RlLk5PVF9SRUdJU1RFUkVEICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb2xkQXV0aFRva2VuID0gb2xkRW50cnkuYXV0aFRva2VuO1xyXG4gICAgICAgIGlmICghZm9yY2VSZWZyZXNoICYmIGlzQXV0aFRva2VuVmFsaWQob2xkQXV0aFRva2VuKSkge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBpcyBhIHZhbGlkIHRva2VuIGluIHRoZSBEQi5cclxuICAgICAgICAgICAgcmV0dXJuIG9sZEVudHJ5O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChvbGRBdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlIGFscmVhZHkgaXMgYSB0b2tlbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gICAgICAgICAgICB0b2tlblByb21pc2UgPSB3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0KGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICAgICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIE5vIHRva2VuIG9yIHRva2VuIGV4cGlyZWQuXHJcbiAgICAgICAgICAgIGlmICghbmF2aWdhdG9yLm9uTGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaW5Qcm9ncmVzc0VudHJ5ID0gbWFrZUF1dGhUb2tlblJlcXVlc3RJblByb2dyZXNzRW50cnkob2xkRW50cnkpO1xyXG4gICAgICAgICAgICB0b2tlblByb21pc2UgPSBmZXRjaEF1dGhUb2tlbkZyb21TZXJ2ZXIoaW5zdGFsbGF0aW9ucywgaW5Qcm9ncmVzc0VudHJ5KTtcclxuICAgICAgICAgICAgcmV0dXJuIGluUHJvZ3Jlc3NFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGF1dGhUb2tlbiA9IHRva2VuUHJvbWlzZVxyXG4gICAgICAgID8gYXdhaXQgdG9rZW5Qcm9taXNlXHJcbiAgICAgICAgOiBlbnRyeS5hdXRoVG9rZW47XHJcbiAgICByZXR1cm4gYXV0aFRva2VuO1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsIG9ubHkgaWYgRklEIGlzIHJlZ2lzdGVyZWQgYW5kIEF1dGggVG9rZW4gcmVxdWVzdCBpcyBpbiBwcm9ncmVzcy5cclxuICpcclxuICogV2FpdHMgdW50aWwgdGhlIGN1cnJlbnQgcGVuZGluZyByZXF1ZXN0IGZpbmlzaGVzLiBJZiB0aGUgcmVxdWVzdCB0aW1lcyBvdXQsXHJcbiAqIHRyaWVzIG9uY2UgaW4gdGhpcyB0aHJlYWQgYXMgd2VsbC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHdhaXRVbnRpbEF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucywgZm9yY2VSZWZyZXNoKSB7XHJcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGVyZSBpcyBubyB3YXkgb2YgcmVsaWFibHkgb2JzZXJ2aW5nIHdoZW4gYSB2YWx1ZSBpblxyXG4gICAgLy8gSW5kZXhlZERCIGNoYW5nZXMgKHlldCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2luZGV4ZWQtZGItb2JzZXJ2ZXJzKSxcclxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9sbC5cclxuICAgIGxldCBlbnRyeSA9IGF3YWl0IHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgd2hpbGUgKGVudHJ5LmF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAvLyBnZW5lcmF0ZUF1dGhUb2tlbiBzdGlsbCBpbiBwcm9ncmVzcy5cclxuICAgICAgICBhd2FpdCBzbGVlcCgxMDApO1xyXG4gICAgICAgIGVudHJ5ID0gYXdhaXQgdXBkYXRlQXV0aFRva2VuUmVxdWVzdChpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhdXRoVG9rZW4gPSBlbnRyeS5hdXRoVG9rZW47XHJcbiAgICBpZiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IHRpbWVkIG91dCBvciBmYWlsZWQgaW4gYSBkaWZmZXJlbnQgY2FsbC4gVHJ5IGFnYWluLlxyXG4gICAgICAgIHJldHVybiByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gYXV0aFRva2VuO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb25seSBpZiB0aGVyZSBpcyBhIEdlbmVyYXRlQXV0aFRva2VuIHJlcXVlc3QgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFVwZGF0ZXMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGluIHRoZSBEQiBiYXNlZCBvbiB0aGUgc3RhdHVzIG9mIHRoZVxyXG4gKiBHZW5lcmF0ZUF1dGhUb2tlbiByZXF1ZXN0LlxyXG4gKlxyXG4gKiBSZXR1cm5zIHRoZSB1cGRhdGVkIEluc3RhbGxhdGlvbkVudHJ5LlxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlQXV0aFRva2VuUmVxdWVzdChhcHBDb25maWcpIHtcclxuICAgIHJldHVybiB1cGRhdGUoYXBwQ29uZmlnLCBvbGRFbnRyeSA9PiB7XHJcbiAgICAgICAgaWYgKCFpc0VudHJ5UmVnaXN0ZXJlZChvbGRFbnRyeSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJub3QtcmVnaXN0ZXJlZFwiIC8qIEVycm9yQ29kZS5OT1RfUkVHSVNURVJFRCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9sZEF1dGhUb2tlbiA9IG9sZEVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICBpZiAoaGFzQXV0aFRva2VuUmVxdWVzdFRpbWVkT3V0KG9sZEF1dGhUb2tlbikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb2xkRW50cnkpLCB7IGF1dGhUb2tlbjogeyByZXF1ZXN0U3RhdHVzOiAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8gfSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9sZEVudHJ5O1xyXG4gICAgfSk7XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hBdXRoVG9rZW5Gcm9tU2VydmVyKGluc3RhbGxhdGlvbnMsIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGF1dGhUb2tlbiA9IGF3YWl0IGdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdChpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuIH0pO1xyXG4gICAgICAgIGF3YWl0IHNldChpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICByZXR1cm4gYXV0aFRva2VuO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoaXNTZXJ2ZXJFcnJvcihlKSAmJlxyXG4gICAgICAgICAgICAoZS5jdXN0b21EYXRhLnNlcnZlckNvZGUgPT09IDQwMSB8fCBlLmN1c3RvbURhdGEuc2VydmVyQ29kZSA9PT0gNDA0KSkge1xyXG4gICAgICAgICAgICAvLyBTZXJ2ZXIgcmV0dXJuZWQgYSBcIkZJRCBub3QgZm91bmRcIiBvciBhIFwiSW52YWxpZCBhdXRoZW50aWNhdGlvblwiIGVycm9yLlxyXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIG5ldyBJRCBuZXh0IHRpbWUuXHJcbiAgICAgICAgICAgIGF3YWl0IHJlbW92ZShpbnN0YWxsYXRpb25zLmFwcENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnkgPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluc3RhbGxhdGlvbkVudHJ5KSwgeyBhdXRoVG9rZW46IHsgcmVxdWVzdFN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovIH0gfSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHNldChpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VudHJ5UmVnaXN0ZXJlZChpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgcmV0dXJuIChpbnN0YWxsYXRpb25FbnRyeSAhPT0gdW5kZWZpbmVkICYmXHJcbiAgICAgICAgaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAyIC8qIFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEICovKTtcclxufVxyXG5mdW5jdGlvbiBpc0F1dGhUb2tlblZhbGlkKGF1dGhUb2tlbikge1xyXG4gICAgcmV0dXJuIChhdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLyAmJlxyXG4gICAgICAgICFpc0F1dGhUb2tlbkV4cGlyZWQoYXV0aFRva2VuKSk7XHJcbn1cclxuZnVuY3Rpb24gaXNBdXRoVG9rZW5FeHBpcmVkKGF1dGhUb2tlbikge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcclxuICAgIHJldHVybiAobm93IDwgYXV0aFRva2VuLmNyZWF0aW9uVGltZSB8fFxyXG4gICAgICAgIGF1dGhUb2tlbi5jcmVhdGlvblRpbWUgKyBhdXRoVG9rZW4uZXhwaXJlc0luIDwgbm93ICsgVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIpO1xyXG59XHJcbi8qKiBSZXR1cm5zIGFuIHVwZGF0ZWQgSW5zdGFsbGF0aW9uRW50cnkgd2l0aCBhbiBJblByb2dyZXNzQXV0aFRva2VuLiAqL1xyXG5mdW5jdGlvbiBtYWtlQXV0aFRva2VuUmVxdWVzdEluUHJvZ3Jlc3NFbnRyeShvbGRFbnRyeSkge1xyXG4gICAgY29uc3QgaW5Qcm9ncmVzc0F1dGhUb2tlbiA9IHtcclxuICAgICAgICByZXF1ZXN0U3RhdHVzOiAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8sXHJcbiAgICAgICAgcmVxdWVzdFRpbWU6IERhdGUubm93KClcclxuICAgIH07XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBvbGRFbnRyeSksIHsgYXV0aFRva2VuOiBpblByb2dyZXNzQXV0aFRva2VuIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChhdXRoVG9rZW4pIHtcclxuICAgIHJldHVybiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLyAmJlxyXG4gICAgICAgIGF1dGhUb2tlbi5yZXF1ZXN0VGltZSArIFBFTkRJTkdfVElNRU9VVF9NUyA8IERhdGUubm93KCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGlmIHRoZXJlIGlzbid0IG9uZSBmb3IgdGhlIGFwcCBhbmRcclxuICogcmV0dXJucyB0aGUgSW5zdGFsbGF0aW9uIElELlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyAtIFRoZSBgSW5zdGFsbGF0aW9uc2AgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldElkKGluc3RhbGxhdGlvbnMpIHtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbXBsID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGNvbnN0IHsgaW5zdGFsbGF0aW9uRW50cnksIHJlZ2lzdHJhdGlvblByb21pc2UgfSA9IGF3YWl0IGdldEluc3RhbGxhdGlvbkVudHJ5KGluc3RhbGxhdGlvbnNJbXBsKTtcclxuICAgIGlmIChyZWdpc3RyYXRpb25Qcm9taXNlKSB7XHJcbiAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIC8vIElmIHRoZSBpbnN0YWxsYXRpb24gaXMgYWxyZWFkeSByZWdpc3RlcmVkLCB1cGRhdGUgdGhlIGF1dGhlbnRpY2F0aW9uXHJcbiAgICAgICAgLy8gdG9rZW4gaWYgbmVlZGVkLlxyXG4gICAgICAgIHJlZnJlc2hBdXRoVG9rZW4oaW5zdGFsbGF0aW9uc0ltcGwpLmNhdGNoKGNvbnNvbGUuZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluc3RhbGxhdGlvbkVudHJ5LmZpZDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBhIEZpcmViYXNlIEluc3RhbGxhdGlvbnMgYXV0aCB0b2tlbiwgaWRlbnRpZnlpbmcgdGhlIGN1cnJlbnRcclxuICogRmlyZWJhc2UgSW5zdGFsbGF0aW9uLlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyAtIFRoZSBgSW5zdGFsbGF0aW9uc2AgaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBmb3JjZVJlZnJlc2ggLSBGb3JjZSByZWZyZXNoIHJlZ2FyZGxlc3Mgb2YgdG9rZW4gZXhwaXJhdGlvbi5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZ2V0VG9rZW4oaW5zdGFsbGF0aW9ucywgZm9yY2VSZWZyZXNoID0gZmFsc2UpIHtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbXBsID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGF3YWl0IGNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnNJbXBsKTtcclxuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgZWl0aGVyIGhhdmUgYSBSZWdpc3RlcmVkIEluc3RhbGxhdGlvbiBpbiB0aGUgREIsIG9yIHdlJ3ZlXHJcbiAgICAvLyBhbHJlYWR5IHRocm93biBhbiBlcnJvci5cclxuICAgIGNvbnN0IGF1dGhUb2tlbiA9IGF3YWl0IHJlZnJlc2hBdXRoVG9rZW4oaW5zdGFsbGF0aW9uc0ltcGwsIGZvcmNlUmVmcmVzaCk7XHJcbiAgICByZXR1cm4gYXV0aFRva2VuLnRva2VuO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGNvbXBsZXRlSW5zdGFsbGF0aW9uUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnMpIHtcclxuICAgIGNvbnN0IHsgcmVnaXN0cmF0aW9uUHJvbWlzZSB9ID0gYXdhaXQgZ2V0SW5zdGFsbGF0aW9uRW50cnkoaW5zdGFsbGF0aW9ucyk7XHJcbiAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgIC8vIEEgY3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MuIFdhaXQgdW50aWwgaXQgZmluaXNoZXMuXHJcbiAgICAgICAgYXdhaXQgcmVnaXN0cmF0aW9uUHJvbWlzZTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0RGVsZXRlRW5kcG9pbnQoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVyc1dpdGhBdXRoKGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxyXG4gICAgICAgIGhlYWRlcnNcclxuICAgIH07XHJcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJldHJ5SWZTZXJ2ZXJFcnJvcigoKSA9PiBmZXRjaChlbmRwb2ludCwgcmVxdWVzdCkpO1xyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgIHRocm93IGF3YWl0IGdldEVycm9yRnJvbVJlc3BvbnNlKCdEZWxldGUgSW5zdGFsbGF0aW9uJywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldERlbGV0ZUVuZHBvaW50KGFwcENvbmZpZywgeyBmaWQgfSkge1xyXG4gICAgcmV0dXJuIGAke2dldEluc3RhbGxhdGlvbnNFbmRwb2ludChhcHBDb25maWcpfS8ke2ZpZH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBEZWxldGVzIHRoZSBGaXJlYmFzZSBJbnN0YWxsYXRpb24gYW5kIGFsbCBhc3NvY2lhdGVkIGRhdGEuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIC0gVGhlIGBJbnN0YWxsYXRpb25zYCBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlSW5zdGFsbGF0aW9ucyhpbnN0YWxsYXRpb25zKSB7XHJcbiAgICBjb25zdCB7IGFwcENvbmZpZyB9ID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgdXBkYXRlKGFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGlmIChvbGRFbnRyeSAmJiBvbGRFbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgICAgICAvLyBEZWxldGUgdGhlIHVucmVnaXN0ZXJlZCBlbnRyeSB3aXRob3V0IHNlbmRpbmcgYSBkZWxldGVJbnN0YWxsYXRpb24gcmVxdWVzdC5cclxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9sZEVudHJ5O1xyXG4gICAgfSk7XHJcbiAgICBpZiAoZW50cnkpIHtcclxuICAgICAgICBpZiAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICAgICAgLy8gQ2FuJ3QgZGVsZXRlIHdoaWxlIHRyeWluZyB0byByZWdpc3Rlci5cclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkZWxldGUtcGVuZGluZy1yZWdpc3RyYXRpb25cIiAvKiBFcnJvckNvZGUuREVMRVRFX1BFTkRJTkdfUkVHSVNUUkFUSU9OICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAyIC8qIFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEICovKSB7XHJcbiAgICAgICAgICAgIGlmICghbmF2aWdhdG9yLm9uTGluZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqLyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkZWxldGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZywgZW50cnkpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcmVtb3ZlKGFwcENvbmZpZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFNldHMgYSBuZXcgY2FsbGJhY2sgdGhhdCB3aWxsIGdldCBjYWxsZWQgd2hlbiBJbnN0YWxsYXRpb24gSUQgY2hhbmdlcy5cclxuICogUmV0dXJucyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IHdpbGwgcmVtb3ZlIHRoZSBjYWxsYmFjayB3aGVuIGNhbGxlZC5cclxuICogQHBhcmFtIGluc3RhbGxhdGlvbnMgLSBUaGUgYEluc3RhbGxhdGlvbnNgIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gY2FsbGJhY2sgLSBUaGUgY2FsbGJhY2sgZnVuY3Rpb24gdGhhdCBpcyBpbnZva2VkIHdoZW4gRklEIGNoYW5nZXMuXHJcbiAqIEByZXR1cm5zIEEgZnVuY3Rpb24gdGhhdCBjYW4gYmUgY2FsbGVkIHRvIHVuc3Vic2NyaWJlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBvbklkQ2hhbmdlKGluc3RhbGxhdGlvbnMsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCB7IGFwcENvbmZpZyB9ID0gaW5zdGFsbGF0aW9ucztcclxuICAgIGFkZENhbGxiYWNrKGFwcENvbmZpZywgY2FsbGJhY2spO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICByZW1vdmVDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKTtcclxuICAgIH07XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gaW5zdGFuY2Ugb2Yge0BsaW5rIEluc3RhbGxhdGlvbnN9IGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW5cclxuICoge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0SW5zdGFsbGF0aW9ucyhhcHAgPSBnZXRBcHAoKSkge1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uc0ltcGwgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnaW5zdGFsbGF0aW9ucycpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgcmV0dXJuIGluc3RhbGxhdGlvbnNJbXBsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RBcHBDb25maWcoYXBwKSB7XHJcbiAgICBpZiAoIWFwcCB8fCAhYXBwLm9wdGlvbnMpIHtcclxuICAgICAgICB0aHJvdyBnZXRNaXNzaW5nVmFsdWVFcnJvcignQXBwIENvbmZpZ3VyYXRpb24nKTtcclxuICAgIH1cclxuICAgIGlmICghYXBwLm5hbWUpIHtcclxuICAgICAgICB0aHJvdyBnZXRNaXNzaW5nVmFsdWVFcnJvcignQXBwIE5hbWUnKTtcclxuICAgIH1cclxuICAgIC8vIFJlcXVpcmVkIGFwcCBjb25maWcga2V5c1xyXG4gICAgY29uc3QgY29uZmlnS2V5cyA9IFtcclxuICAgICAgICAncHJvamVjdElkJyxcclxuICAgICAgICAnYXBpS2V5JyxcclxuICAgICAgICAnYXBwSWQnXHJcbiAgICBdO1xyXG4gICAgZm9yIChjb25zdCBrZXlOYW1lIG9mIGNvbmZpZ0tleXMpIHtcclxuICAgICAgICBpZiAoIWFwcC5vcHRpb25zW2tleU5hbWVdKSB7XHJcbiAgICAgICAgICAgIHRocm93IGdldE1pc3NpbmdWYWx1ZUVycm9yKGtleU5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgYXBwTmFtZTogYXBwLm5hbWUsXHJcbiAgICAgICAgcHJvamVjdElkOiBhcHAub3B0aW9ucy5wcm9qZWN0SWQsXHJcbiAgICAgICAgYXBpS2V5OiBhcHAub3B0aW9ucy5hcGlLZXksXHJcbiAgICAgICAgYXBwSWQ6IGFwcC5vcHRpb25zLmFwcElkXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldE1pc3NpbmdWYWx1ZUVycm9yKHZhbHVlTmFtZSkge1xyXG4gICAgcmV0dXJuIEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibWlzc2luZy1hcHAtY29uZmlnLXZhbHVlc1wiIC8qIEVycm9yQ29kZS5NSVNTSU5HX0FQUF9DT05GSUdfVkFMVUVTICovLCB7XHJcbiAgICAgICAgdmFsdWVOYW1lXHJcbiAgICB9KTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBJTlNUQUxMQVRJT05TX05BTUUgPSAnaW5zdGFsbGF0aW9ucyc7XHJcbmNvbnN0IElOU1RBTExBVElPTlNfTkFNRV9JTlRFUk5BTCA9ICdpbnN0YWxsYXRpb25zLWludGVybmFsJztcclxuY29uc3QgcHVibGljRmFjdG9yeSA9IChjb250YWluZXIpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAvLyBUaHJvd3MgaWYgYXBwIGlzbid0IGNvbmZpZ3VyZWQgcHJvcGVybHkuXHJcbiAgICBjb25zdCBhcHBDb25maWcgPSBleHRyYWN0QXBwQ29uZmlnKGFwcCk7XHJcbiAgICBjb25zdCBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCAnaGVhcnRiZWF0Jyk7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zSW1wbCA9IHtcclxuICAgICAgICBhcHAsXHJcbiAgICAgICAgYXBwQ29uZmlnLFxyXG4gICAgICAgIGhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlcixcclxuICAgICAgICBfZGVsZXRlOiAoKSA9PiBQcm9taXNlLnJlc29sdmUoKVxyXG4gICAgfTtcclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25zSW1wbDtcclxufTtcclxuY29uc3QgaW50ZXJuYWxGYWN0b3J5ID0gKGNvbnRhaW5lcikgPT4ge1xyXG4gICAgY29uc3QgYXBwID0gY29udGFpbmVyLmdldFByb3ZpZGVyKCdhcHAnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgIC8vIEludGVybmFsIEZJUyBpbnN0YW5jZSByZWxpZXMgb24gcHVibGljIEZJUyBpbnN0YW5jZS5cclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnMgPSBfZ2V0UHJvdmlkZXIoYXBwLCBJTlNUQUxMQVRJT05TX05BTUUpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uc0ludGVybmFsID0ge1xyXG4gICAgICAgIGdldElkOiAoKSA9PiBnZXRJZChpbnN0YWxsYXRpb25zKSxcclxuICAgICAgICBnZXRUb2tlbjogKGZvcmNlUmVmcmVzaCkgPT4gZ2V0VG9rZW4oaW5zdGFsbGF0aW9ucywgZm9yY2VSZWZyZXNoKVxyXG4gICAgfTtcclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25zSW50ZXJuYWw7XHJcbn07XHJcbmZ1bmN0aW9uIHJlZ2lzdGVySW5zdGFsbGF0aW9ucygpIHtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KElOU1RBTExBVElPTlNfTkFNRSwgcHVibGljRmFjdG9yeSwgXCJQVUJMSUNcIiAvKiBDb21wb25lbnRUeXBlLlBVQkxJQyAqLykpO1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoSU5TVEFMTEFUSU9OU19OQU1FX0lOVEVSTkFMLCBpbnRlcm5hbEZhY3RvcnksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG59XG5cbi8qKlxyXG4gKiBGaXJlYmFzZSBJbnN0YWxsYXRpb25zXHJcbiAqXHJcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxyXG4gKi9cclxucmVnaXN0ZXJJbnN0YWxsYXRpb25zKCk7XHJcbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uKTtcclxuLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cclxucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdlc20yMDE3Jyk7XG5cbmV4cG9ydCB7IGRlbGV0ZUluc3RhbGxhdGlvbnMsIGdldElkLCBnZXRJbnN0YWxsYXRpb25zLCBnZXRUb2tlbiwgb25JZENoYW5nZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IHcgYXMgd3JhcCwgciBhcyByZXBsYWNlVHJhcHMgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcbmV4cG9ydCB7IHUgYXMgdW53cmFwLCB3IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKVxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xuICAgIG9wZW5Qcm9taXNlXG4gICAgICAgIC50aGVuKChkYikgPT4ge1xuICAgICAgICBpZiAodGVybWluYXRlZClcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ2Nsb3NlJywgKCkgPT4gdGVybWluYXRlZCgpKTtcbiAgICAgICAgaWYgKGJsb2NraW5nKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsICgpID0+IGJsb2NraW5nKCkpO1xuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKVxuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoKSA9PiBibG9ja2VkKCkpO1xuICAgIHJldHVybiB3cmFwKHJlcXVlc3QpLnRoZW4oKCkgPT4gdW5kZWZpbmVkKTtcbn1cblxuY29uc3QgcmVhZE1ldGhvZHMgPSBbJ2dldCcsICdnZXRLZXknLCAnZ2V0QWxsJywgJ2dldEFsbEtleXMnLCAnY291bnQnXTtcbmNvbnN0IHdyaXRlTWV0aG9kcyA9IFsncHV0JywgJ2FkZCcsICdkZWxldGUnLCAnY2xlYXInXTtcbmNvbnN0IGNhY2hlZE1ldGhvZHMgPSBuZXcgTWFwKCk7XG5mdW5jdGlvbiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB7XG4gICAgaWYgKCEodGFyZ2V0IGluc3RhbmNlb2YgSURCRGF0YWJhc2UgJiZcbiAgICAgICAgIShwcm9wIGluIHRhcmdldCkgJiZcbiAgICAgICAgdHlwZW9mIHByb3AgPT09ICdzdHJpbmcnKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjYWNoZWRNZXRob2RzLmdldChwcm9wKSlcbiAgICAgICAgcmV0dXJuIGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApO1xuICAgIGNvbnN0IHRhcmdldEZ1bmNOYW1lID0gcHJvcC5yZXBsYWNlKC9Gcm9tSW5kZXgkLywgJycpO1xuICAgIGNvbnN0IHVzZUluZGV4ID0gcHJvcCAhPT0gdGFyZ2V0RnVuY05hbWU7XG4gICAgY29uc3QgaXNXcml0ZSA9IHdyaXRlTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSk7XG4gICAgaWYgKFxuICAgIC8vIEJhaWwgaWYgdGhlIHRhcmdldCBkb2Vzbid0IGV4aXN0IG9uIHRoZSB0YXJnZXQuIEVnLCBnZXRBbGwgaXNuJ3QgaW4gRWRnZS5cbiAgICAhKHRhcmdldEZ1bmNOYW1lIGluICh1c2VJbmRleCA/IElEQkluZGV4IDogSURCT2JqZWN0U3RvcmUpLnByb3RvdHlwZSkgfHxcbiAgICAgICAgIShpc1dyaXRlIHx8IHJlYWRNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBtZXRob2QgPSBhc3luYyBmdW5jdGlvbiAoc3RvcmVOYW1lLCAuLi5hcmdzKSB7XG4gICAgICAgIC8vIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6IHVuZGVmaW5lZCBnemlwcHMgYmV0dGVyLCBidXQgZmFpbHMgaW4gRWRnZSA6KFxuICAgICAgICBjb25zdCB0eCA9IHRoaXMudHJhbnNhY3Rpb24oc3RvcmVOYW1lLCBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiAncmVhZG9ubHknKTtcbiAgICAgICAgbGV0IHRhcmdldCA9IHR4LnN0b3JlO1xuICAgICAgICBpZiAodXNlSW5kZXgpXG4gICAgICAgICAgICB0YXJnZXQgPSB0YXJnZXQuaW5kZXgoYXJncy5zaGlmdCgpKTtcbiAgICAgICAgLy8gTXVzdCByZWplY3QgaWYgb3AgcmVqZWN0cy5cbiAgICAgICAgLy8gSWYgaXQncyBhIHdyaXRlIG9wZXJhdGlvbiwgbXVzdCByZWplY3QgaWYgdHguZG9uZSByZWplY3RzLlxuICAgICAgICAvLyBNdXN0IHJlamVjdCB3aXRoIG9wIHJlamVjdGlvbiBmaXJzdC5cbiAgICAgICAgLy8gTXVzdCByZXNvbHZlIHdpdGggb3AgdmFsdWUuXG4gICAgICAgIC8vIE11c3QgaGFuZGxlIGJvdGggcHJvbWlzZXMgKG5vIHVuaGFuZGxlZCByZWplY3Rpb25zKVxuICAgICAgICByZXR1cm4gKGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIHRhcmdldFt0YXJnZXRGdW5jTmFtZV0oLi4uYXJncyksXG4gICAgICAgICAgICBpc1dyaXRlICYmIHR4LmRvbmUsXG4gICAgICAgIF0pKVswXTtcbiAgICB9O1xuICAgIGNhY2hlZE1ldGhvZHMuc2V0KHByb3AsIG1ldGhvZCk7XG4gICAgcmV0dXJuIG1ldGhvZDtcbn1cbnJlcGxhY2VUcmFwcygob2xkVHJhcHMpID0+ICh7XG4gICAgLi4ub2xkVHJhcHMsXG4gICAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpLFxuICAgIGhhczogKHRhcmdldCwgcHJvcCkgPT4gISFnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5oYXModGFyZ2V0LCBwcm9wKSxcbn0pKTtcblxuZXhwb3J0IHsgZGVsZXRlREIsIG9wZW5EQiB9O1xuIiwiY29uc3QgaW5zdGFuY2VPZkFueSA9IChvYmplY3QsIGNvbnN0cnVjdG9ycykgPT4gY29uc3RydWN0b3JzLnNvbWUoKGMpID0+IG9iamVjdCBpbnN0YW5jZW9mIGMpO1xuXG5sZXQgaWRiUHJveHlhYmxlVHlwZXM7XG5sZXQgY3Vyc29yQWR2YW5jZU1ldGhvZHM7XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldElkYlByb3h5YWJsZVR5cGVzKCkge1xuICAgIHJldHVybiAoaWRiUHJveHlhYmxlVHlwZXMgfHxcbiAgICAgICAgKGlkYlByb3h5YWJsZVR5cGVzID0gW1xuICAgICAgICAgICAgSURCRGF0YWJhc2UsXG4gICAgICAgICAgICBJREJPYmplY3RTdG9yZSxcbiAgICAgICAgICAgIElEQkluZGV4LFxuICAgICAgICAgICAgSURCQ3Vyc29yLFxuICAgICAgICAgICAgSURCVHJhbnNhY3Rpb24sXG4gICAgICAgIF0pKTtcbn1cbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKSB7XG4gICAgcmV0dXJuIChjdXJzb3JBZHZhbmNlTWV0aG9kcyB8fFxuICAgICAgICAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgPSBbXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmFkdmFuY2UsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZVByaW1hcnlLZXksXG4gICAgICAgIF0pKTtcbn1cbmNvbnN0IGN1cnNvclJlcXVlc3RNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25Eb25lTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuZnVuY3Rpb24gcHJvbWlzaWZ5UmVxdWVzdChyZXF1ZXN0KSB7XG4gICAgY29uc3QgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKHdyYXAocmVxdWVzdC5yZXN1bHQpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHJlcXVlc3QuZXJyb3IpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgfSk7XG4gICAgcHJvbWlzZVxuICAgICAgICAudGhlbigodmFsdWUpID0+IHtcbiAgICAgICAgLy8gU2luY2UgY3Vyc29yaW5nIHJldXNlcyB0aGUgSURCUmVxdWVzdCAoKnNpZ2gqKSwgd2UgY2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbFxuICAgICAgICAvLyAoc2VlIHdyYXBGdW5jdGlvbikuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQkN1cnNvcikge1xuICAgICAgICAgICAgY3Vyc29yUmVxdWVzdE1hcC5zZXQodmFsdWUsIHJlcXVlc3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENhdGNoaW5nIHRvIGF2b2lkIFwiVW5jYXVnaHQgUHJvbWlzZSBleGNlcHRpb25zXCJcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICAvLyBUaGlzIG1hcHBpbmcgZXhpc3RzIGluIHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBidXQgZG9lc24ndCBkb2Vzbid0IGV4aXN0IGluIHRyYW5zZm9ybUNhY2hlLiBUaGlzXG4gICAgLy8gaXMgYmVjYXVzZSB3ZSBjcmVhdGUgbWFueSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QuXG4gICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChwcm9taXNlLCByZXF1ZXN0KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih0eCkge1xuICAgIC8vIEVhcmx5IGJhaWwgaWYgd2UndmUgYWxyZWFkeSBjcmVhdGVkIGEgZG9uZSBwcm9taXNlIGZvciB0aGlzIHRyYW5zYWN0aW9uLlxuICAgIGlmICh0cmFuc2FjdGlvbkRvbmVNYXAuaGFzKHR4KSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IGRvbmUgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBjb21wbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KHR4LmVycm9yIHx8IG5ldyBET01FeGNlcHRpb24oJ0Fib3J0RXJyb3InLCAnQWJvcnRFcnJvcicpKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgfSk7XG4gICAgLy8gQ2FjaGUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbC5cbiAgICB0cmFuc2FjdGlvbkRvbmVNYXAuc2V0KHR4LCBkb25lKTtcbn1cbmxldCBpZGJQcm94eVRyYXBzID0ge1xuICAgIGdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbikge1xuICAgICAgICAgICAgLy8gU3BlY2lhbCBoYW5kbGluZyBmb3IgdHJhbnNhY3Rpb24uZG9uZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnZG9uZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uRG9uZU1hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBvYmplY3RTdG9yZU5hbWVzIGJlY2F1c2Ugb2YgRWRnZS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnb2JqZWN0U3RvcmVOYW1lcycpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0Lm9iamVjdFN0b3JlTmFtZXMgfHwgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gTWFrZSB0eC5zdG9yZSByZXR1cm4gdGhlIG9ubHkgc3RvcmUgaW4gdGhlIHRyYW5zYWN0aW9uLCBvciB1bmRlZmluZWQgaWYgdGhlcmUgYXJlIG1hbnkuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ3N0b3JlJykge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzFdXG4gICAgICAgICAgICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgIDogcmVjZWl2ZXIub2JqZWN0U3RvcmUocmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1swXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRWxzZSB0cmFuc2Zvcm0gd2hhdGV2ZXIgd2UgZ2V0IGJhY2suXG4gICAgICAgIHJldHVybiB3cmFwKHRhcmdldFtwcm9wXSk7XG4gICAgfSxcbiAgICBzZXQodGFyZ2V0LCBwcm9wLCB2YWx1ZSkge1xuICAgICAgICB0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICBoYXModGFyZ2V0LCBwcm9wKSB7XG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbiAmJlxuICAgICAgICAgICAgKHByb3AgPT09ICdkb25lJyB8fCBwcm9wID09PSAnc3RvcmUnKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByb3AgaW4gdGFyZ2V0O1xuICAgIH0sXG59O1xuZnVuY3Rpb24gcmVwbGFjZVRyYXBzKGNhbGxiYWNrKSB7XG4gICAgaWRiUHJveHlUcmFwcyA9IGNhbGxiYWNrKGlkYlByb3h5VHJhcHMpO1xufVxuZnVuY3Rpb24gd3JhcEZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBEdWUgdG8gZXhwZWN0ZWQgb2JqZWN0IGVxdWFsaXR5ICh3aGljaCBpcyBlbmZvcmNlZCBieSB0aGUgY2FjaGluZyBpbiBgd3JhcGApLCB3ZVxuICAgIC8vIG9ubHkgY3JlYXRlIG9uZSBuZXcgZnVuYyBwZXIgZnVuYy5cbiAgICAvLyBFZGdlIGRvZXNuJ3Qgc3VwcG9ydCBvYmplY3RTdG9yZU5hbWVzIChib29vKSwgc28gd2UgcG9seWZpbGwgaXQgaGVyZS5cbiAgICBpZiAoZnVuYyA9PT0gSURCRGF0YWJhc2UucHJvdG90eXBlLnRyYW5zYWN0aW9uICYmXG4gICAgICAgICEoJ29iamVjdFN0b3JlTmFtZXMnIGluIElEQlRyYW5zYWN0aW9uLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChzdG9yZU5hbWVzLCAuLi5hcmdzKSB7XG4gICAgICAgICAgICBjb25zdCB0eCA9IGZ1bmMuY2FsbCh1bndyYXAodGhpcyksIHN0b3JlTmFtZXMsIC4uLmFyZ3MpO1xuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwLnNldCh0eCwgc3RvcmVOYW1lcy5zb3J0ID8gc3RvcmVOYW1lcy5zb3J0KCkgOiBbc3RvcmVOYW1lc10pO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAodHgpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBDdXJzb3IgbWV0aG9kcyBhcmUgc3BlY2lhbCwgYXMgdGhlIGJlaGF2aW91ciBpcyBhIGxpdHRsZSBtb3JlIGRpZmZlcmVudCB0byBzdGFuZGFyZCBJREIuIEluXG4gICAgLy8gSURCLCB5b3UgYWR2YW5jZSB0aGUgY3Vyc29yIGFuZCB3YWl0IGZvciBhIG5ldyAnc3VjY2Vzcycgb24gdGhlIElEQlJlcXVlc3QgdGhhdCBnYXZlIHlvdSB0aGVcbiAgICAvLyBjdXJzb3IuIEl0J3Mga2luZGEgbGlrZSBhIHByb21pc2UgdGhhdCBjYW4gcmVzb2x2ZSB3aXRoIG1hbnkgdmFsdWVzLiBUaGF0IGRvZXNuJ3QgbWFrZSBzZW5zZVxuICAgIC8vIHdpdGggcmVhbCBwcm9taXNlcywgc28gZWFjaCBhZHZhbmNlIG1ldGhvZHMgcmV0dXJucyBhIG5ldyBwcm9taXNlIGZvciB0aGUgY3Vyc29yIG9iamVjdCwgb3JcbiAgICAvLyB1bmRlZmluZWQgaWYgdGhlIGVuZCBvZiB0aGUgY3Vyc29yIGhhcyBiZWVuIHJlYWNoZWQuXG4gICAgaWYgKGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkuaW5jbHVkZXMoZnVuYykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICAgICAgZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpO1xuICAgICAgICAgICAgcmV0dXJuIHdyYXAoY3Vyc29yUmVxdWVzdE1hcC5nZXQodGhpcykpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAvLyB0aGUgb3JpZ2luYWwgb2JqZWN0LlxuICAgICAgICByZXR1cm4gd3JhcChmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncykpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgcmV0dXJuIHdyYXBGdW5jdGlvbih2YWx1ZSk7XG4gICAgLy8gVGhpcyBkb2Vzbid0IHJldHVybiwgaXQganVzdCBjcmVhdGVzIGEgJ2RvbmUnIHByb21pc2UgZm9yIHRoZSB0cmFuc2FjdGlvbixcbiAgICAvLyB3aGljaCBpcyBsYXRlciByZXR1cm5lZCBmb3IgdHJhbnNhY3Rpb24uZG9uZSAoc2VlIGlkYk9iamVjdEhhbmRsZXIpLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKVxuICAgICAgICBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odmFsdWUpO1xuICAgIGlmIChpbnN0YW5jZU9mQW55KHZhbHVlLCBnZXRJZGJQcm94eWFibGVUeXBlcygpKSlcbiAgICAgICAgcmV0dXJuIG5ldyBQcm94eSh2YWx1ZSwgaWRiUHJveHlUcmFwcyk7XG4gICAgLy8gUmV0dXJuIHRoZSBzYW1lIHZhbHVlIGJhY2sgaWYgd2UncmUgbm90IGdvaW5nIHRvIHRyYW5zZm9ybSBpdC5cbiAgICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiB3cmFwKHZhbHVlKSB7XG4gICAgLy8gV2Ugc29tZXRpbWVzIGdlbmVyYXRlIG11bHRpcGxlIHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdCAoZWcgd2hlbiBjdXJzb3JpbmcpLCBiZWNhdXNlXG4gICAgLy8gSURCIGlzIHdlaXJkIGFuZCBhIHNpbmdsZSBJREJSZXF1ZXN0IGNhbiB5aWVsZCBtYW55IHJlc3BvbnNlcywgc28gdGhlc2UgY2FuJ3QgYmUgY2FjaGVkLlxuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElEQlJlcXVlc3QpXG4gICAgICAgIHJldHVybiBwcm9taXNpZnlSZXF1ZXN0KHZhbHVlKTtcbiAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IHRyYW5zZm9ybWVkIHRoaXMgdmFsdWUgYmVmb3JlLCByZXVzZSB0aGUgdHJhbnNmb3JtZWQgdmFsdWUuXG4gICAgLy8gVGhpcyBpcyBmYXN0ZXIsIGJ1dCBpdCBhbHNvIHByb3ZpZGVzIG9iamVjdCBlcXVhbGl0eS5cbiAgICBpZiAodHJhbnNmb3JtQ2FjaGUuaGFzKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG4gICAgY29uc3QgbmV3VmFsdWUgPSB0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlKHZhbHVlKTtcbiAgICAvLyBOb3QgYWxsIHR5cGVzIGFyZSB0cmFuc2Zvcm1lZC5cbiAgICAvLyBUaGVzZSBtYXkgYmUgcHJpbWl0aXZlIHR5cGVzLCBzbyB0aGV5IGNhbid0IGJlIFdlYWtNYXAga2V5cy5cbiAgICBpZiAobmV3VmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICAgIHRyYW5zZm9ybUNhY2hlLnNldCh2YWx1ZSwgbmV3VmFsdWUpO1xuICAgICAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KG5ld1ZhbHVlLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdWYWx1ZTtcbn1cbmNvbnN0IHVud3JhcCA9ICh2YWx1ZSkgPT4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLmdldCh2YWx1ZSk7XG5cbmV4cG9ydCB7IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSBhcyBhLCBpbnN0YW5jZU9mQW55IGFzIGksIHJlcGxhY2VUcmFwcyBhcyByLCB1bndyYXAgYXMgdSwgd3JhcCBhcyB3IH07XG4iLCIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQSBjb250YWluZXIgZm9yIGFsbCBvZiB0aGUgTG9nZ2VyIGluc3RhbmNlc1xyXG4gKi9cclxuY29uc3QgaW5zdGFuY2VzID0gW107XHJcbi8qKlxyXG4gKiBUaGUgSlMgU0RLIHN1cHBvcnRzIDUgbG9nIGxldmVscyBhbmQgYWxzbyBhbGxvd3MgYSB1c2VyIHRoZSBhYmlsaXR5IHRvXHJcbiAqIHNpbGVuY2UgdGhlIGxvZ3MgYWx0b2dldGhlci5cclxuICpcclxuICogVGhlIG9yZGVyIGlzIGEgZm9sbG93czpcclxuICogREVCVUcgPCBWRVJCT1NFIDwgSU5GTyA8IFdBUk4gPCBFUlJPUlxyXG4gKlxyXG4gKiBBbGwgb2YgdGhlIGxvZyB0eXBlcyBhYm92ZSB0aGUgY3VycmVudCBsb2cgbGV2ZWwgd2lsbCBiZSBjYXB0dXJlZCAoaS5lLiBpZlxyXG4gKiB5b3Ugc2V0IHRoZSBsb2cgbGV2ZWwgdG8gYElORk9gLCBlcnJvcnMgd2lsbCBzdGlsbCBiZSBsb2dnZWQsIGJ1dCBgREVCVUdgIGFuZFxyXG4gKiBgVkVSQk9TRWAgbG9ncyB3aWxsIG5vdClcclxuICovXHJcbnZhciBMb2dMZXZlbDtcclxuKGZ1bmN0aW9uIChMb2dMZXZlbCkge1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJERUJVR1wiXSA9IDBdID0gXCJERUJVR1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJWRVJCT1NFXCJdID0gMV0gPSBcIlZFUkJPU0VcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiSU5GT1wiXSA9IDJdID0gXCJJTkZPXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIldBUk5cIl0gPSAzXSA9IFwiV0FSTlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJFUlJPUlwiXSA9IDRdID0gXCJFUlJPUlwiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJTSUxFTlRcIl0gPSA1XSA9IFwiU0lMRU5UXCI7XHJcbn0pKExvZ0xldmVsIHx8IChMb2dMZXZlbCA9IHt9KSk7XHJcbmNvbnN0IGxldmVsU3RyaW5nVG9FbnVtID0ge1xyXG4gICAgJ2RlYnVnJzogTG9nTGV2ZWwuREVCVUcsXHJcbiAgICAndmVyYm9zZSc6IExvZ0xldmVsLlZFUkJPU0UsXHJcbiAgICAnaW5mbyc6IExvZ0xldmVsLklORk8sXHJcbiAgICAnd2Fybic6IExvZ0xldmVsLldBUk4sXHJcbiAgICAnZXJyb3InOiBMb2dMZXZlbC5FUlJPUixcclxuICAgICdzaWxlbnQnOiBMb2dMZXZlbC5TSUxFTlRcclxufTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBsZXZlbFxyXG4gKi9cclxuY29uc3QgZGVmYXVsdExvZ0xldmVsID0gTG9nTGV2ZWwuSU5GTztcclxuLyoqXHJcbiAqIEJ5IGRlZmF1bHQsIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgZGlzcGxheWVkIGluIHRoZSBkZXZlbG9wZXIgY29uc29sZSAoaW5cclxuICogY2hyb21lKS4gVG8gYXZvaWQgZm9yY2luZyB1c2VycyB0byBoYXZlIHRvIG9wdC1pbiB0byB0aGVzZSBsb2dzIHR3aWNlXHJcbiAqIChpLmUuIG9uY2UgZm9yIGZpcmViYXNlLCBhbmQgb25jZSBpbiB0aGUgY29uc29sZSksIHdlIGFyZSBzZW5kaW5nIGBERUJVR2BcclxuICogbG9ncyB0byB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbi5cclxuICovXHJcbmNvbnN0IENvbnNvbGVNZXRob2QgPSB7XHJcbiAgICBbTG9nTGV2ZWwuREVCVUddOiAnbG9nJyxcclxuICAgIFtMb2dMZXZlbC5WRVJCT1NFXTogJ2xvZycsXHJcbiAgICBbTG9nTGV2ZWwuSU5GT106ICdpbmZvJyxcclxuICAgIFtMb2dMZXZlbC5XQVJOXTogJ3dhcm4nLFxyXG4gICAgW0xvZ0xldmVsLkVSUk9SXTogJ2Vycm9yJ1xyXG59O1xyXG4vKipcclxuICogVGhlIGRlZmF1bHQgbG9nIGhhbmRsZXIgd2lsbCBmb3J3YXJkIERFQlVHLCBWRVJCT1NFLCBJTkZPLCBXQVJOLCBhbmQgRVJST1JcclxuICogbWVzc2FnZXMgb24gdG8gdGhlaXIgY29ycmVzcG9uZGluZyBjb25zb2xlIGNvdW50ZXJwYXJ0cyAoaWYgdGhlIGxvZyBtZXRob2RcclxuICogaXMgc3VwcG9ydGVkIGJ5IHRoZSBjdXJyZW50IGxvZyBsZXZlbClcclxuICovXHJcbmNvbnN0IGRlZmF1bHRMb2dIYW5kbGVyID0gKGluc3RhbmNlLCBsb2dUeXBlLCAuLi5hcmdzKSA9PiB7XHJcbiAgICBpZiAobG9nVHlwZSA8IGluc3RhbmNlLmxvZ0xldmVsKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xyXG4gICAgY29uc3QgbWV0aG9kID0gQ29uc29sZU1ldGhvZFtsb2dUeXBlXTtcclxuICAgIGlmIChtZXRob2QpIHtcclxuICAgICAgICBjb25zb2xlW21ldGhvZF0oYFske25vd31dICAke2luc3RhbmNlLm5hbWV9OmAsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gbG9nIGEgbWVzc2FnZSB3aXRoIGFuIGludmFsaWQgbG9nVHlwZSAodmFsdWU6ICR7bG9nVHlwZX0pYCk7XHJcbiAgICB9XHJcbn07XHJcbmNsYXNzIExvZ2dlciB7XHJcbiAgICAvKipcclxuICAgICAqIEdpdmVzIHlvdSBhbiBpbnN0YW5jZSBvZiBhIExvZ2dlciB0byBjYXB0dXJlIG1lc3NhZ2VzIGFjY29yZGluZyB0b1xyXG4gICAgICogRmlyZWJhc2UncyBsb2dnaW5nIHNjaGVtZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSB0aGF0IHRoZSBsb2dzIHdpbGwgYmUgYXNzb2NpYXRlZCB3aXRoXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBsb2cgbGV2ZWwgb2YgdGhlIGdpdmVuIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IGRlZmF1bHRMb2dMZXZlbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbWFpbiAoaW50ZXJuYWwpIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqIENhbiBiZSBzZXQgdG8gYSBuZXcgZnVuY3Rpb24gaW4gaW50ZXJuYWwgcGFja2FnZSBjb2RlIGJ1dCBub3QgYnkgdXNlci5cclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gZGVmYXVsdExvZ0hhbmRsZXI7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG9wdGlvbmFsLCBhZGRpdGlvbmFsLCB1c2VyLWRlZmluZWQgbG9nIGhhbmRsZXIgZm9yIHRoZSBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhcHR1cmUgdGhlIGN1cnJlbnQgaW5zdGFuY2UgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGluc3RhbmNlcy5wdXNoKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGxvZ0xldmVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2dMZXZlbDtcclxuICAgIH1cclxuICAgIHNldCBsb2dMZXZlbCh2YWwpIHtcclxuICAgICAgICBpZiAoISh2YWwgaW4gTG9nTGV2ZWwpKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgdmFsdWUgXCIke3ZhbH1cIiBhc3NpZ25lZCB0byBcXGBsb2dMZXZlbFxcYGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IHZhbDtcclxuICAgIH1cclxuICAgIC8vIFdvcmthcm91bmQgZm9yIHNldHRlci9nZXR0ZXIgaGF2aW5nIHRvIGJlIHRoZSBzYW1lIHR5cGUuXHJcbiAgICBzZXRMb2dMZXZlbCh2YWwpIHtcclxuICAgICAgICB0aGlzLl9sb2dMZXZlbCA9IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gbGV2ZWxTdHJpbmdUb0VudW1bdmFsXSA6IHZhbDtcclxuICAgIH1cclxuICAgIGdldCBsb2dIYW5kbGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2dIYW5kbGVyO1xyXG4gICAgfVxyXG4gICAgc2V0IGxvZ0hhbmRsZXIodmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVmFsdWUgYXNzaWduZWQgdG8gYGxvZ0hhbmRsZXJgIG11c3QgYmUgYSBmdW5jdGlvbicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyID0gdmFsO1xyXG4gICAgfVxyXG4gICAgZ2V0IHVzZXJMb2dIYW5kbGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyTG9nSGFuZGxlcjtcclxuICAgIH1cclxuICAgIHNldCB1c2VyTG9nSGFuZGxlcih2YWwpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciA9IHZhbDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGZ1bmN0aW9ucyBiZWxvdyBhcmUgYWxsIGJhc2VkIG9uIHRoZSBgY29uc29sZWAgaW50ZXJmYWNlXHJcbiAgICAgKi9cclxuICAgIGRlYnVnKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5ERUJVRywgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5ERUJVRywgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBsb2coLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmXHJcbiAgICAgICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLlZFUkJPU0UsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuVkVSQk9TRSwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBpbmZvKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5JTkZPLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLklORk8sIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgd2FybiguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5XQVJOLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGVycm9yKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJiB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5FUlJPUiwgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5FUlJPUiwgLi4uYXJncyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHtcclxuICAgIGluc3RhbmNlcy5mb3JFYWNoKGluc3QgPT4ge1xyXG4gICAgICAgIGluc3Quc2V0TG9nTGV2ZWwobGV2ZWwpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgIGZvciAoY29uc3QgaW5zdGFuY2Ugb2YgaW5zdGFuY2VzKSB7XHJcbiAgICAgICAgbGV0IGN1c3RvbUxvZ0xldmVsID0gbnVsbDtcclxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmxldmVsKSB7XHJcbiAgICAgICAgICAgIGN1c3RvbUxvZ0xldmVsID0gbGV2ZWxTdHJpbmdUb0VudW1bb3B0aW9ucy5sZXZlbF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsb2dDYWxsYmFjayA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpbnN0YW5jZS51c2VyTG9nSGFuZGxlciA9IChpbnN0YW5jZSwgbGV2ZWwsIC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhcmdzXHJcbiAgICAgICAgICAgICAgICAgICAgLm1hcChhcmcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmcgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZy5tZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChpZ25vcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcihhcmcgPT4gYXJnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGV2ZWwgPj0gKGN1c3RvbUxvZ0xldmVsICE9PSBudWxsICYmIGN1c3RvbUxvZ0xldmVsICE9PSB2b2lkIDAgPyBjdXN0b21Mb2dMZXZlbCA6IGluc3RhbmNlLmxvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ0NhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IExvZ0xldmVsW2xldmVsXS50b0xvd2VyQ2FzZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnN0YW5jZS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IExvZ0xldmVsLCBMb2dnZXIsIHNldExvZ0xldmVsLCBzZXRVc2VyTG9nSGFuZGxlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuZXhwb3J0ICogZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5cbnZhciBuYW1lID0gXCJmaXJlYmFzZVwiO1xudmFyIHZlcnNpb24gPSBcIjEwLjEuMFwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbiwgJ2FwcCcpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtLmpzLm1hcFxuIiwiaW1wb3J0IHsgdyBhcyB3cmFwLCByIGFzIHJlcGxhY2VUcmFwcyB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuZXhwb3J0IHsgdSBhcyB1bndyYXAsIHcgYXMgd3JhcCB9IGZyb20gJy4vd3JhcC1pZGItdmFsdWUuanMnO1xuXG4vKipcbiAqIE9wZW4gYSBkYXRhYmFzZS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBkYXRhYmFzZS5cbiAqIEBwYXJhbSB2ZXJzaW9uIFNjaGVtYSB2ZXJzaW9uLlxuICogQHBhcmFtIGNhbGxiYWNrcyBBZGRpdGlvbmFsIGNhbGxiYWNrcy5cbiAqL1xuZnVuY3Rpb24gb3BlbkRCKG5hbWUsIHZlcnNpb24sIHsgYmxvY2tlZCwgdXBncmFkZSwgYmxvY2tpbmcsIHRlcm1pbmF0ZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5vcGVuKG5hbWUsIHZlcnNpb24pO1xuICAgIGNvbnN0IG9wZW5Qcm9taXNlID0gd3JhcChyZXF1ZXN0KTtcbiAgICBpZiAodXBncmFkZSkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3VwZ3JhZGVuZWVkZWQnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIHVwZ3JhZGUod3JhcChyZXF1ZXN0LnJlc3VsdCksIGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIHdyYXAocmVxdWVzdC50cmFuc2FjdGlvbiksIGV2ZW50KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZykge1xuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcigndmVyc2lvbmNoYW5nZScsIChldmVudCkgPT4gYmxvY2tpbmcoZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIHJldHVybiBvcGVuUHJvbWlzZTtcbn1cbi8qKlxuICogRGVsZXRlIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKi9cbmZ1bmN0aW9uIGRlbGV0ZURCKG5hbWUsIHsgYmxvY2tlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKG5hbWUpO1xuICAgIGlmIChibG9ja2VkKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignYmxvY2tlZCcsIChldmVudCkgPT4gYmxvY2tlZChcbiAgICAgICAgLy8gQ2FzdGluZyBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0LURPTS1saWItZ2VuZXJhdG9yL3B1bGwvMTQwNVxuICAgICAgICBldmVudC5vbGRWZXJzaW9uLCBldmVudCkpO1xuICAgIH1cbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwidHJ5e3NlbGZbXCJ3b3JrYm94OndpbmRvdzo0LjMuMVwiXSYmXygpfWNhdGNoKG4pe312YXIgbj1mdW5jdGlvbihuLHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihpKXt2YXIgZT1uZXcgTWVzc2FnZUNoYW5uZWw7ZS5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24obil7cmV0dXJuIGkobi5kYXRhKX0sbi5wb3N0TWVzc2FnZSh0LFtlLnBvcnQyXSl9KX07ZnVuY3Rpb24gdChuLHQpe2Zvcih2YXIgaT0wO2k8dC5sZW5ndGg7aSsrKXt2YXIgZT10W2ldO2UuZW51bWVyYWJsZT1lLmVudW1lcmFibGV8fCExLGUuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGUmJihlLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixlLmtleSxlKX19ZnVuY3Rpb24gaShuKXtpZih2b2lkIDA9PT1uKXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4gbn10cnl7c2VsZltcIndvcmtib3g6Y29yZTo0LjMuMVwiXSYmXygpfWNhdGNoKG4pe312YXIgZT1mdW5jdGlvbigpe3ZhciBuPXRoaXM7dGhpcy5wcm9taXNlPW5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsaSl7bi5yZXNvbHZlPXQsbi5yZWplY3Q9aX0pfSxyPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG5ldyBVUkwobixsb2NhdGlvbikuaHJlZj09PW5ldyBVUkwodCxsb2NhdGlvbikuaHJlZn0sbz1mdW5jdGlvbihuLHQpe09iamVjdC5hc3NpZ24odGhpcyx0LHt0eXBlOm59KX07ZnVuY3Rpb24gdShuKXtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10saT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspdFtpXT1hcmd1bWVudHNbaV07dHJ5e3JldHVybiBQcm9taXNlLnJlc29sdmUobi5hcHBseSh0aGlzLHQpKX1jYXRjaChuKXtyZXR1cm4gUHJvbWlzZS5yZWplY3Qobil9fX1mdW5jdGlvbiBhKG4sdCxpKXtyZXR1cm4gaT90P3Qobik6bjoobiYmbi50aGVufHwobj1Qcm9taXNlLnJlc29sdmUobikpLHQ/bi50aGVuKHQpOm4pfWZ1bmN0aW9uIHMoKXt9dmFyIGM9ZnVuY3Rpb24oYyl7dmFyIGYsaDtmdW5jdGlvbiB2KG4sdCl7dmFyIHI7cmV0dXJuIHZvaWQgMD09PXQmJih0PXt9KSwocj1jLmNhbGwodGhpcyl8fHRoaXMpLnQ9bixyLmk9dCxyLm89MCxyLnU9bmV3IGUsci5zPW5ldyBlLHIuaD1uZXcgZSxyLnY9ci52LmJpbmQoaShpKHIpKSksci5sPXIubC5iaW5kKGkoaShyKSkpLHIuZz1yLmcuYmluZChpKGkocikpKSxyLm09ci5tLmJpbmQoaShpKHIpKSkscn1oPWMsKGY9dikucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoaC5wcm90b3R5cGUpLGYucHJvdG90eXBlLmNvbnN0cnVjdG9yPWYsZi5fX3Byb3RvX189aDt2YXIgbCx3LGcsZD12LnByb3RvdHlwZTtyZXR1cm4gZC5yZWdpc3Rlcj11KGZ1bmN0aW9uKG4pe3ZhciB0LGksZT10aGlzLHU9KHZvaWQgMD09PW4/e306bikuaW1tZWRpYXRlLGM9dm9pZCAwIT09dSYmdTtyZXR1cm4gdD1mdW5jdGlvbigpe3JldHVybiBlLnA9Qm9vbGVhbihuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSxlLlA9ZS5SKCksYShlLmsoKSxmdW5jdGlvbihuKXtlLkI9bixlLlAmJihlLk89ZS5QLGUucy5yZXNvbHZlKGUuUCksZS5oLnJlc29sdmUoZS5QKSxlLmooZS5QKSxlLlAuYWRkRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsZS5sLHtvbmNlOiEwfSkpO3ZhciB0PWUuQi53YWl0aW5nO3JldHVybiB0JiZyKHQuc2NyaXB0VVJMLGUudCkmJihlLk89dCxQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uKCl7ZS5kaXNwYXRjaEV2ZW50KG5ldyBvKFwid2FpdGluZ1wiLHtzdzp0LHdhc1dhaXRpbmdCZWZvcmVSZWdpc3RlcjohMH0pKX0pKSxlLk8mJmUudS5yZXNvbHZlKGUuTyksZS5CLmFkZEV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLGUuZyksbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNvbnRyb2xsZXJjaGFuZ2VcIixlLm0se29uY2U6ITB9KSxcIkJyb2FkY2FzdENoYW5uZWxcImluIHNlbGYmJihlLkM9bmV3IEJyb2FkY2FzdENoYW5uZWwoXCJ3b3JrYm94XCIpLGUuQy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUudikpLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsZS52KSxlLkJ9KX0sKGk9ZnVuY3Rpb24oKXtpZighYyYmXCJjb21wbGV0ZVwiIT09ZG9jdW1lbnQucmVhZHlTdGF0ZSlyZXR1cm4gZnVuY3Rpb24obix0KXtpZighdClyZXR1cm4gbiYmbi50aGVuP24udGhlbihzKTpQcm9taXNlLnJlc29sdmUoKX0obmV3IFByb21pc2UoZnVuY3Rpb24obil7cmV0dXJuIGFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsbil9KSl9KCkpJiZpLnRoZW4/aS50aGVuKHQpOnQoaSl9KSxkLmdldFNXPXUoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5PfHx0aGlzLnUucHJvbWlzZX0pLGQubWVzc2FnZVNXPXUoZnVuY3Rpb24odCl7cmV0dXJuIGEodGhpcy5nZXRTVygpLGZ1bmN0aW9uKGkpe3JldHVybiBuKGksdCl9KX0pLGQuUj1mdW5jdGlvbigpe3ZhciBuPW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXI7aWYobiYmcihuLnNjcmlwdFVSTCx0aGlzLnQpKXJldHVybiBufSxkLms9dShmdW5jdGlvbigpe3ZhciBuPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG4sdCl7dHJ5e3ZhciBpPW4oKX1jYXRjaChuKXtyZXR1cm4gdChuKX1yZXR1cm4gaSYmaS50aGVuP2kudGhlbih2b2lkIDAsdCk6aX0oZnVuY3Rpb24oKXtyZXR1cm4gYShuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3RlcihuLnQsbi5pKSxmdW5jdGlvbih0KXtyZXR1cm4gbi5MPXBlcmZvcm1hbmNlLm5vdygpLHR9KX0sZnVuY3Rpb24obil7dGhyb3cgbn0pfSksZC5qPWZ1bmN0aW9uKHQpe24odCx7dHlwZTpcIldJTkRPV19SRUFEWVwiLG1ldGE6XCJ3b3JrYm94LXdpbmRvd1wifSl9LGQuZz1mdW5jdGlvbigpe3ZhciBuPXRoaXMuQi5pbnN0YWxsaW5nO3RoaXMubz4wfHwhcihuLnNjcmlwdFVSTCx0aGlzLnQpfHxwZXJmb3JtYW5jZS5ub3coKT50aGlzLkwrNmU0Pyh0aGlzLlc9bix0aGlzLkIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInVwZGF0ZWZvdW5kXCIsdGhpcy5nKSk6KHRoaXMuTz1uLHRoaXMudS5yZXNvbHZlKG4pKSwrK3RoaXMubyxuLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLHRoaXMubCl9LGQubD1mdW5jdGlvbihuKXt2YXIgdD10aGlzLGk9bi50YXJnZXQsZT1pLnN0YXRlLHI9aT09PXRoaXMuVyx1PXI/XCJleHRlcm5hbFwiOlwiXCIsYT17c3c6aSxvcmlnaW5hbEV2ZW50Om59OyFyJiZ0aGlzLnAmJihhLmlzVXBkYXRlPSEwKSx0aGlzLmRpc3BhdGNoRXZlbnQobmV3IG8odStlLGEpKSxcImluc3RhbGxlZFwiPT09ZT90aGlzLl89c2V0VGltZW91dChmdW5jdGlvbigpe1wiaW5zdGFsbGVkXCI9PT1lJiZ0LkIud2FpdGluZz09PWkmJnQuZGlzcGF0Y2hFdmVudChuZXcgbyh1K1wid2FpdGluZ1wiLGEpKX0sMjAwKTpcImFjdGl2YXRpbmdcIj09PWUmJihjbGVhclRpbWVvdXQodGhpcy5fKSxyfHx0aGlzLnMucmVzb2x2ZShpKSl9LGQubT1mdW5jdGlvbihuKXt2YXIgdD10aGlzLk87dD09PW5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmNvbnRyb2xsZXImJih0aGlzLmRpc3BhdGNoRXZlbnQobmV3IG8oXCJjb250cm9sbGluZ1wiLHtzdzp0LG9yaWdpbmFsRXZlbnQ6bn0pKSx0aGlzLmgucmVzb2x2ZSh0KSl9LGQudj1mdW5jdGlvbihuKXt2YXIgdD1uLmRhdGE7dGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBvKFwibWVzc2FnZVwiLHtkYXRhOnQsb3JpZ2luYWxFdmVudDpufSkpfSxsPXYsKHc9W3trZXk6XCJhY3RpdmVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zLnByb21pc2V9fSx7a2V5OlwiY29udHJvbGxpbmdcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oLnByb21pc2V9fV0pJiZ0KGwucHJvdG90eXBlLHcpLGcmJnQobCxnKSx2fShmdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt0aGlzLkQ9e319dmFyIHQ9bi5wcm90b3R5cGU7cmV0dXJuIHQuYWRkRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihuLHQpe3RoaXMuVChuKS5hZGQodCl9LHQucmVtb3ZlRXZlbnRMaXN0ZW5lcj1mdW5jdGlvbihuLHQpe3RoaXMuVChuKS5kZWxldGUodCl9LHQuZGlzcGF0Y2hFdmVudD1mdW5jdGlvbihuKXtuLnRhcmdldD10aGlzLHRoaXMuVChuLnR5cGUpLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQobil9KX0sdC5UPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLkRbbl09dGhpcy5EW25dfHxuZXcgU2V0fSxufSgpKTtleHBvcnR7YyBhcyBXb3JrYm94LG4gYXMgbWVzc2FnZVNXfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXdvcmtib3gtd2luZG93LnByb2QuZXM1Lm1qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBnZXREYXRhIH0gZnJvbSBcIi4vc3JjL2RhdGEvYXBpLWRhdGFcIjtcclxuaW1wb3J0IHsgRGF0YU1vZGFsIH0gZnJvbSBcIi4vc3JjL2RhdGEvZGF0YS1tb2RhbFwiO1xyXG5pbXBvcnQgeyBTY2VuZUhhbmRsZXIgfSBmcm9tIFwiLi9zcmMvc2NlbmVIYW5kbGVyL3NjZW5lLWhhbmRsZXJcIjtcclxuaW1wb3J0IHsgSXNDYWNoZWQgfSBmcm9tIFwiLi9zcmMvY29uc3RhbnRzL1wiO1xyXG5pbXBvcnQgeyBXb3JrYm94IH0gZnJvbSBcIndvcmtib3gtd2luZG93XCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyLCBsYW5nLCBwc2V1ZG9JZCB9IGZyb20gXCIuL2dsb2JhbC12YXJpYWJsZXNcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuL3NyYy9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCIuL3NyYy9jb21tb24vdXRpbHNcIjtcclxuaW1wb3J0IHsgQXVkaW9QbGF5ZXIgfSBmcm9tIFwiLi9zcmMvY29tcG9uZW50cy9hdWRpby1wbGF5ZXJcIjtcclxuaW1wb3J0IHsgVklTSUJJTElUWV9DSEFOR0UgfSBmcm9tIFwiLi9zcmMvY29tbW9uL2V2ZW50LW5hbWVzXCI7XHJcbmltcG9ydCB7IFVSTCB9IGZyb20gXCIuL3NyYy9kYXRhL2FwaS1kYXRhXCI7XHJcbmNsYXNzIEFwcCB7XHJcbiAgICBjYW52YXM7XHJcbiAgICB2ZXJzaW9uSW5mb0VsZW1lbnQ7XHJcbiAgICBsYW5nO1xyXG4gICAgaXNfY2FjaGVkO1xyXG4gICAgcHJvZ3Jlc3NCYXI7XHJcbiAgICBwcm9ncmVzc0JhckNvbnRhaW5lcjtcclxuICAgIGNoYW5uZWw7XHJcbiAgICBzY2VuZUhhbmRsZXI7XHJcbiAgICBsb2FkaW5nRWxlbWVudDtcclxuICAgIG1halZlcnNpb247XHJcbiAgICBtaW5WZXJzaW9uO1xyXG4gICAgZGF0YU1vZGFsO1xyXG4gICAgc3RhcnRTZXNzaW9uVGltZTtcclxuICAgIGZpcmViYXNlSW50ZWdyYXRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihsYW5nKSB7XHJcbiAgICAgICAgdGhpcy5sYW5nID0gbGFuZztcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKFwibXktY2hhbm5lbFwiKTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9ncmVzcy1iYXJcIik7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvZ3Jlc3MtYmFyLWNvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLnZlcnNpb25JbmZvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbG9hZGluZy1zY3JlZW4nKTtcclxuICAgICAgICB0aGlzLmlzX2NhY2hlZCA9IHRoaXMuaW5pdGlhbGl6ZUNhY2hlZERhdGEoKTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24gPSBuZXcgRmlyZWJhc2VJbnRlZ3JhdGlvbigpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRTZXNzaW9uVGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMuaGFuZGxlQmVmb3JlVW5sb2FkKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgaW5pdCgpIHtcclxuICAgICAgICBjb25zdCBmb250ID0gVXRpbHMuZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQodGhpcy5sYW5nKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRBbmRDYWNoZUZvbnQoZm9udCwgYC4vYXNzZXRzL2ZvbnRzLyR7Zm9udH0udHRmYCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5wcmVsb2FkR2FtZUF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTG9hZGluZ1NjcmVlbigpO1xyXG4gICAgICAgIHRoaXMuc2V0dXBDYW52YXMoKTtcclxuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgZ2V0RGF0YSgpO1xyXG4gICAgICAgIHRoaXMubWFqVmVyc2lvbiA9IGRhdGEubWFqdmVyc2lvbjtcclxuICAgICAgICB0aGlzLm1pblZlcnNpb24gPSBkYXRhLm1pbnZlcnNpb247XHJcbiAgICAgICAgdGhpcy5kYXRhTW9kYWwgPSB0aGlzLmNyZWF0ZURhdGFNb2RhbChkYXRhKTtcclxuICAgICAgICB0aGlzLmdsb2JhbEluaXRpYWxpemF0aW9uKGRhdGEpO1xyXG4gICAgICAgIHRoaXMubG9nU2Vzc2lvblN0YXJ0RmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUodGhpcy5kYXRhTW9kYWwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICh0aGlzLmlzX2NhY2hlZC5oYXModGhpcy5sYW5nKSkge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNhY2hlZFNjZW5hcmlvKHRoaXMuZGF0YU1vZGFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZWdpc3Rlcldvcmtib3goKTtcclxuICAgIH1cclxuICAgIGxvZ1Nlc3Npb25TdGFydEZpcmViYXNlRXZlbnQoKSB7XHJcbiAgICAgICAgbGV0IGxhc3RTZXNzaW9uRW5kVGltZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwibGFzdFNlc3Npb25FbmRUaW1lXCIpO1xyXG4gICAgICAgIGxldCBsYXN0VGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFydFNlc3Npb25UaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgaWYgKGxhc3RTZXNzaW9uRW5kVGltZSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyc2VkVGltZXN0YW1wID0gcGFyc2VJbnQobGFzdFNlc3Npb25FbmRUaW1lKTtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihwYXJzZWRUaW1lc3RhbXApKSB7XHJcbiAgICAgICAgICAgICAgICBsYXN0VGltZSA9IE1hdGguYWJzKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gcGFyc2VkVGltZXN0YW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBkYXlzU2luY2VMYXN0ID0gbGFzdFRpbWUgPyBsYXN0VGltZSAvICgxMDAwICogNjAgKiA2MCAqIDI0KSA6IDA7XHJcbiAgICAgICAgY29uc3Qgcm91bmRlZERheXNTaW5jZUxhc3QgPSBwYXJzZUZsb2F0KGRheXNTaW5jZUxhc3QudG9GaXhlZCgzKSk7XHJcbiAgICAgICAgY29uc3Qgc2Vzc2lvblN0YXJ0RGF0YSA9IHtcclxuICAgICAgICAgICAgY3JfdXNlcl9pZDogcHNldWRvSWQsXHJcbiAgICAgICAgICAgIGZ0bV9sYW5ndWFnZTogbGFuZyxcclxuICAgICAgICAgICAgcHJvZmlsZV9udW1iZXI6IDAsXHJcbiAgICAgICAgICAgIHZlcnNpb25fbnVtYmVyOiB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgIGpzb25fdmVyc2lvbl9udW1iZXI6ICEhdGhpcy5tYWpWZXJzaW9uICYmICEhdGhpcy5taW5WZXJzaW9uID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpIDogXCJcIixcclxuICAgICAgICAgICAgZGF5c19zaW5jZV9sYXN0OiByb3VuZGVkRGF5c1NpbmNlTGFzdCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kU2Vzc2lvblN0YXJ0RXZlbnQoc2Vzc2lvblN0YXJ0RGF0YSk7XHJcbiAgICB9XHJcbiAgICBsb2dTZXNzaW9uRW5kRmlyZWJhc2VFdmVudCgpIHtcclxuICAgICAgICBjb25zdCBzZXNzaW9uRW5kRGF0YSA9IHtcclxuICAgICAgICAgICAgY3JfdXNlcl9pZDogcHNldWRvSWQsXHJcbiAgICAgICAgICAgIGZ0bV9sYW5ndWFnZTogbGFuZyxcclxuICAgICAgICAgICAgcHJvZmlsZV9udW1iZXI6IDAsXHJcbiAgICAgICAgICAgIHZlcnNpb25fbnVtYmVyOiB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgIGpzb25fdmVyc2lvbl9udW1iZXI6ICEhdGhpcy5tYWpWZXJzaW9uICYmICEhdGhpcy5taW5WZXJzaW9uID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpIDogXCJcIixcclxuICAgICAgICAgICAgZHVyYXRpb246IChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRoaXMuc3RhcnRTZXNzaW9uVGltZSkgLyAxMDAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJsYXN0U2Vzc2lvbkVuZFRpbWVcIiwgbmV3IERhdGUoKS5nZXRUaW1lKCkudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRTZXNzaW9uRW5kRXZlbnQoc2Vzc2lvbkVuZERhdGEpO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZUNhY2hlZERhdGEoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RvcmVkRGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKElzQ2FjaGVkKTtcclxuICAgICAgICByZXR1cm4gc3RvcmVkRGF0YSA/IG5ldyBNYXAoSlNPTi5wYXJzZShzdG9yZWREYXRhKSkgOiBuZXcgTWFwKCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBsb2FkQW5kQ2FjaGVGb250KGZvbnROYW1lLCBmb250UGF0aCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgY2FjaGVzLm9wZW4oJ2ZvbnRDYWNoZScpO1xyXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNhY2hlLm1hdGNoKGZvbnRQYXRoKTtcclxuICAgICAgICAgICAgaWYgKCFyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9udFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZm9udFBhdGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9udEJsb2IgPSBhd2FpdCBmb250UmVzcG9uc2UuYmxvYigpO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgY2FjaGUucHV0KGZvbnRQYXRoLCBuZXcgUmVzcG9uc2UoZm9udEJsb2IpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBmb250ID0gbmV3IEZvbnRGYWNlKGZvbnROYW1lLCBgdXJsKCR7Zm9udFBhdGh9KSBmb3JtYXQoJ3RydWV0eXBlJylgKTtcclxuICAgICAgICAgICAgYXdhaXQgZm9udC5sb2FkKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmZvbnRzLmFkZChmb250KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byBsb2FkIGFuZCBjYWNoZSBmb250OiAke2Vycm9yfWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRpbmdTY3JlZW4gPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfY2FjaGVkLmdldChsYW5nKSkge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdFbGVtZW50LnN0eWxlLnpJbmRleCA9ICctMSc7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gXCIzMCVcIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYXN5bmMgcmVnaXN0ZXJXb3JrYm94KCkge1xyXG4gICAgICAgIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdiID0gbmV3IFdvcmtib3goXCIuL3N3LmpzXCIsIHt9KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHdiLnJlZ2lzdGVyKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWwucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiBcIkNhY2hlXCIsIGRhdGE6IHRoaXMubGFuZyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoKFVSTCArICc/Y2FjaGUtYnVzdD0nICsgbmV3IERhdGUoKS5nZXRUaW1lKCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDYWNoZS1Db250cm9sJzogJ25vLXN0b3JlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6ICduby1zdG9yZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbihhc3luYyAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGZldGNoIHRoZSBjb250ZW50IGZpbGUgZnJvbSB0aGUgc2VydmVyIScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0NvbnRlbnRGaWxlRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3Q29udGVudEZpbGVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYWhlYWRDb250ZW50VmVyc2lvbiA9IG5ld0NvbnRlbnRGaWxlRGF0YVsnbWFqdmVyc2lvbiddICsgJy4nICsgbmV3Q29udGVudEZpbGVEYXRhWydtaW52ZXJzaW9uJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlZFZlcnNpb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInZlcnNpb25cIiArIGxhbmcudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdObyBDYWNoZSBDb250ZW50IHZlcnNpb246ICcgKyBhaGVhZENvbnRlbnRWZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJjYWNoZWQgdmVyc2lvbiA6XCIgKyBjYWNoZWRWZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjaGVjayBoZXJlIGZvciB0aGUgY29udGVudCB2ZXJzaW9uIHVwZGF0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSWYgdGhlcmUncyBhIG5ldyBjb250ZW50IHZlcnNpb24sIHdlIG5lZWQgdG8gcmVtb3ZlIHRoZSBjYWNoZWQgY29udGVudCBhbmQgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIGFyZSBjb21wYXJpbmcgaGVyZSB0aGUgY29udGVudFZlcnNpb24gd2l0aCB0aGUgYWhlYWRDb250ZW50VmVyc2lvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWhlYWRDb250ZW50VmVyc2lvbiAmJiBjYWNoZWRWZXJzaW9uICE9IGFoZWFkQ29udGVudFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb250ZW50IHZlcnNpb24gbWlzbWF0Y2ghIFJlbG9hZGluZy4uLicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhY2hlZEl0ZW0gPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdpc19jYWNoZWQnKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnQgbGFuZyAgXCIgKyBsYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdDYWNoZWRJdGVtID0gY2FjaGVkSXRlbS5maWx0ZXIoKGUpID0+ICEoZS50b1N0cmluZygpLmluY2x1ZGVzKGxhbmcpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShJc0NhY2hlZCwgSlNPTi5zdHJpbmdpZnkobmV3Q2FjaGVkSXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3ZlcnNpb24nICsgbGFuZy50b0xvd2VyQ2FzZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENsZWFyIHRoZSBjYWNoZSBmb3IgdGh0IHBhcnRpY3VsYXIgY29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVzLmRlbGV0ZShsYW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdGhlIGNvbnRlbnQgZmlsZTogJyArIGVycm9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyOiAke2Vycm9yfWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgc2V0dXBDYW52YXMoKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aCA+IDEwODAgPyA3NjggOiB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIH1cclxuICAgIGNyZWF0ZURhdGFNb2RhbChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhTW9kYWwoZGF0YS50aXRsZSwgZGF0YS5PdGhlckF1ZGlvcywgZGF0YS5MZXZlbHMsIGRhdGEuRmVlZGJhY2tUZXh0cywgZGF0YS5SaWdodFRvTGVmdCwgZGF0YS5GZWVkYmFja0F1ZGlvcywgZGF0YS5tYWp2ZXJzaW9uLCBkYXRhLm1pbnZlcnNpb24sIGRhdGEudmVyc2lvbik7XHJcbiAgICB9XHJcbiAgICBnbG9iYWxJbml0aWFsaXphdGlvbihkYXRhKSB7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5hYm91dENvbXBhbnkgPSBkYXRhLmFib3V0Q29tcGFueTtcclxuICAgICAgICBnbG9iYWxUaGlzLmRlc2NyaXB0aW9uVGV4dCA9IGRhdGEuZGVzY3JpcHRpb25UZXh0O1xyXG4gICAgfVxyXG4gICAgaGFuZGxlUmVzaXplKGRhdGFNb2RhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX2NhY2hlZC5oYXModGhpcy5sYW5nKSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudChkYXRhTW9kYWwpO1xyXG4gICAgICAgICAgICB0aGlzLnNldHVwQ2FudmFzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVpbml0aWFsaXplU2NlbmVIYW5kbGVyKGRhdGFNb2RhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgdXBkYXRlVmVyc2lvbkluZm9FbGVtZW50KGRhdGFNb2RhbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzX2NhY2hlZC5oYXModGhpcy5sYW5nKSAmJiBEZWJ1Z2dlci5EZXZlbG9wbWVudExpbmspIHtcclxuICAgICAgICAgICAgaWYgKGRhdGFNb2RhbC5tYWpWZXJzaW9uICYmIGRhdGFNb2RhbC5taW5WZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwgKz0gYC9qLnYke2RhdGFNb2RhbC5tYWpWZXJzaW9ufS4ke2RhdGFNb2RhbC5taW5WZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YU1vZGFsLnZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbkluZm9FbGVtZW50LmlubmVySFRNTCArPSBgL2oudiR7ZGF0YU1vZGFsLnZlcnNpb259YDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRvZ2dsZS1idG5cIikuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZWluaXRpYWxpemVTY2VuZUhhbmRsZXIoZGF0YU1vZGFsKSB7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMuc2NlbmVIYW5kbGVyO1xyXG4gICAgICAgIHRoaXMuc2NlbmVIYW5kbGVyID0gbmV3IFNjZW5lSGFuZGxlcih0aGlzLmNhbnZhcywgZGF0YU1vZGFsKTtcclxuICAgICAgICB0aGlzLnBhc3NpbmdEYXRhVG9Db250YWluZXIoKTtcclxuICAgIH1cclxuICAgIGhhbmRsZUNhY2hlZFNjZW5hcmlvKGRhdGFNb2RhbCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlVmVyc2lvbkluZm9FbGVtZW50KGRhdGFNb2RhbCk7XHJcbiAgICAgICAgdGhpcy5zY2VuZUhhbmRsZXIgPSBuZXcgU2NlbmVIYW5kbGVyKHRoaXMuY2FudmFzLCBkYXRhTW9kYWwpO1xyXG4gICAgICAgIHRoaXMucGFzc2luZ0RhdGFUb0NvbnRhaW5lcigpO1xyXG4gICAgfVxyXG4gICAgcGFzc2luZ0RhdGFUb0NvbnRhaW5lciA9ICgpID0+IHtcclxuICAgICAgICBpZiAod2luZG93LkFuZHJvaWQpIHtcclxuICAgICAgICAgICAgd2luZG93LkFuZHJvaWQuY2FjaGVkU3RhdHVzKHRoaXMuaXNfY2FjaGVkLmdldCh0aGlzLmxhbmcpID09IHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzZXRDb250YWluZXJBcHBPcmllbnRhdGlvbigpIHtcclxuICAgICAgICBpZiAod2luZG93LkFuZHJvaWQpIHtcclxuICAgICAgICAgICAgd2luZG93LkFuZHJvaWQuc2V0Q29udGFpbmVyQXBwT3JpZW50YXRpb24oXCJwb3J0cmFpdFwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVVcGRhdGVGb3VuZE1lc3NhZ2UoKSB7XHJcbiAgICAgICAgbGV0IHRleHQgPSBcIlVwZGF0ZSBGb3VuZFxcblByZXNzIG9rIHRvIHVwZGF0ZVwiO1xyXG4gICAgICAgIGNvbnN0IHVzZXJDb25maXJtZWQgPSBjb25maXJtKHRleHQpO1xyXG4gICAgICAgIGlmICh1c2VyQ29uZmlybWVkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkaW5nTWVzc2FnZSA9IChkYXRhKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIgJiYgdGhpcy5wcm9ncmVzc0Jhcikge1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIjtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUludCh0aGlzLnByb2dyZXNzQmFyLnN0eWxlLndpZHRoIHx8IFwiMFwiKSA+PSA0MCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5zdHlsZS53aWR0aCA9IGAke2RhdGEuZGF0YX0lYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhICUgMTAwID09PSAwICYmICF0aGlzLmlzX2NhY2hlZC5nZXQodGhpcy5sYW5nKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc19jYWNoZWQuc2V0KHRoaXMubGFuZywgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShJc0NhY2hlZCwgSlNPTi5zdHJpbmdpZnkoQXJyYXkuZnJvbSh0aGlzLmlzX2NhY2hlZC5lbnRyaWVzKCkpKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkb3dubG9hZF9jb21wbGV0ZWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JfdXNlcl9pZDogcHNldWRvSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb25fbnVtYmVyOiB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb24gPyB0aGlzLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uLnRvU3RyaW5nKCkgOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kRG93bmxvYWRDb21wbGV0ZWRFdmVudChkb3dubG9hZF9jb21wbGV0ZWQpO1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJ2ZXJzaW9uXCIgKyB0aGlzLmxhbmcsIHRoaXMubWFqVmVyc2lvbiArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXNpemUodGhpcy5kYXRhTW9kYWwpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJoaWRlIHByb2dyZXNzXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHtkYXRhLmRhdGF9JWA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRhdGEubXNnID09PSBcIkxvYWRpbmdcIikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZUxvYWRpbmdNZXNzYWdlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChldmVudC5kYXRhLm1zZyA9PT0gXCJVcGRhdGUgRm91bmRcIikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZUZvdW5kTWVzc2FnZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9nU2Vzc2lvblN0YXJ0RmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dTZXNzaW9uRW5kRmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBoYW5kbGVCZWZvcmVVbmxvYWQgPSBhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxvZ1Nlc3Npb25FbmRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gICAgcHJlbG9hZEdhbWVBdWRpb3MgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgbGV0IGF1ZGlvVXJscyA9IFtcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvaW50cm8ubXAzXCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL0NoZWVyaW5nLTAyLm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wMy5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvQ2hlZXJpbmctMDEubXAzXCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL29uRHJhZy5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvdGltZW91dC5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvTGV2ZWxXaW5GYW5mYXJlLm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9MZXZlbExvc2VGYW5mYXJlLm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvTW9uc3RlciBTcGl0cyB3cm9uZyBzdG9uZXMtMDEubXAzXCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL0Rpc2Fwb2ludGVkLTA1Lm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9Nb25zdGVyU3BpdC5tcDNcIixcclxuICAgICAgICAgICAgXCIuL2Fzc2V0cy9hdWRpb3MvRWF0Lm1wM1wiLFxyXG4gICAgICAgICAgICBcIi4vYXNzZXRzL2F1ZGlvcy9Qb2ludHNBZGQud2F2XCIsXHJcbiAgICAgICAgICAgIFwiLi9hc3NldHMvYXVkaW9zL2FyZS15b3Utc3VyZS5tcDNcIlxyXG4gICAgICAgIF07XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlbG9hZFByb21pc2VzID0gYXVkaW9VcmxzLm1hcCgoYXVkaW9TcmMpID0+IG5ldyBBdWRpb1BsYXllcigpLnByZWxvYWRHYW1lQXVkaW8oYXVkaW9TcmMpKTtcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJlbG9hZFByb21pc2VzKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByZWxvYWRpbmcgYXVkaW86XCIsIGVycm9yKTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIC8vIEFkZCB0aGUgZGlzcG9zZSBtZXRob2RcclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIHRoaXMuaGFuZGxlQmVmb3JlVW5sb2FkKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UpO1xyXG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMuaGFuZGxlUmVzaXplKTtcclxuICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIpIHtcclxuICAgICAgICAgICAgbmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVTZXJ2aWNlV29ya2VyTWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBlcmZvcm0gYWRkaXRpb25hbCBjbGVhbnVwIGlmIG5lY2Vzc2FyeVxyXG4gICAgfVxyXG59XHJcbmNvbnN0IGFwcCA9IG5ldyBBcHAobGFuZyk7XHJcbiJdLCJuYW1lcyI6WyJDT05TVEFOVFMiLCJOT0RFX0NMSUVOVCIsIk5PREVfQURNSU4iLCJTREtfVkVSU0lPTiIsImFzc2VydCIsImFzc2VydGlvbiIsIm1lc3NhZ2UiLCJhc3NlcnRpb25FcnJvciIsIkVycm9yIiwic3RyaW5nVG9CeXRlQXJyYXkkMSIsInN0ciIsIm91dCIsInAiLCJpIiwibGVuZ3RoIiwiYyIsImNoYXJDb2RlQXQiLCJiYXNlNjQiLCJieXRlVG9DaGFyTWFwXyIsImNoYXJUb0J5dGVNYXBfIiwiYnl0ZVRvQ2hhck1hcFdlYlNhZmVfIiwiY2hhclRvQnl0ZU1hcFdlYlNhZmVfIiwiRU5DT0RFRF9WQUxTX0JBU0UiLCJFTkNPREVEX1ZBTFMiLCJ0aGlzIiwiRU5DT0RFRF9WQUxTX1dFQlNBRkUiLCJIQVNfTkFUSVZFX1NVUFBPUlQiLCJhdG9iIiwiZW5jb2RlQnl0ZUFycmF5IiwiaW5wdXQiLCJ3ZWJTYWZlIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5pdF8iLCJieXRlVG9DaGFyTWFwIiwib3V0cHV0IiwiYnl0ZTEiLCJoYXZlQnl0ZTIiLCJieXRlMiIsImhhdmVCeXRlMyIsImJ5dGUzIiwib3V0Qnl0ZTEiLCJvdXRCeXRlMiIsIm91dEJ5dGUzIiwib3V0Qnl0ZTQiLCJwdXNoIiwiam9pbiIsImVuY29kZVN0cmluZyIsImJ0b2EiLCJkZWNvZGVTdHJpbmciLCJieXRlcyIsInBvcyIsImMxIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwiYzIiLCJ1IiwiYzMiLCJieXRlQXJyYXlUb1N0cmluZyIsImRlY29kZVN0cmluZ1RvQnl0ZUFycmF5IiwiY2hhclRvQnl0ZU1hcCIsImNoYXJBdCIsImJ5dGU0IiwiRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IiLCJjb25zdHJ1Y3RvciIsInN1cGVyIiwiYXJndW1lbnRzIiwibmFtZSIsImJhc2U2NEVuY29kZSIsInV0ZjhCeXRlcyIsImJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nIiwicmVwbGFjZSIsImJhc2U2NERlY29kZSIsImUiLCJjb25zb2xlIiwiZXJyb3IiLCJkZWVwQ29weSIsInZhbHVlIiwiZGVlcEV4dGVuZCIsInVuZGVmaW5lZCIsInRhcmdldCIsInNvdXJjZSIsIk9iamVjdCIsIkRhdGUiLCJnZXRUaW1lIiwicHJvcCIsImhhc093blByb3BlcnR5IiwiZ2V0R2xvYmFsIiwic2VsZiIsIndpbmRvdyIsImciLCJnZXREZWZhdWx0cyIsIl9fRklSRUJBU0VfREVGQVVMVFNfXyIsInByb2Nlc3MiLCJlbnYiLCJkZWZhdWx0c0pzb25TdHJpbmciLCJKU09OIiwicGFyc2UiLCJnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSIsImRvY3VtZW50IiwibWF0Y2giLCJjb29raWUiLCJkZWNvZGVkIiwiZ2V0RGVmYXVsdHNGcm9tQ29va2llIiwiaW5mbyIsImdldERlZmF1bHRFbXVsYXRvckhvc3QiLCJwcm9kdWN0TmFtZSIsIl9hIiwiX2IiLCJlbXVsYXRvckhvc3RzIiwiZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0IiwiaG9zdCIsInNlcGFyYXRvckluZGV4IiwibGFzdEluZGV4T2YiLCJwb3J0IiwicGFyc2VJbnQiLCJzdWJzdHJpbmciLCJnZXREZWZhdWx0QXBwQ29uZmlnIiwiY29uZmlnIiwiZ2V0RXhwZXJpbWVudGFsU2V0dGluZyIsIkRlZmVycmVkIiwicmVqZWN0IiwicmVzb2x2ZSIsInByb21pc2UiLCJQcm9taXNlIiwid3JhcENhbGxiYWNrIiwiY2FsbGJhY2siLCJjYXRjaCIsImNyZWF0ZU1vY2tVc2VyVG9rZW4iLCJ0b2tlbiIsInByb2plY3RJZCIsInVpZCIsInByb2plY3QiLCJpYXQiLCJzdWIiLCJ1c2VyX2lkIiwicGF5bG9hZCIsImFzc2lnbiIsImlzcyIsImF1ZCIsImV4cCIsImF1dGhfdGltZSIsImZpcmViYXNlIiwic2lnbl9pbl9wcm92aWRlciIsImlkZW50aXRpZXMiLCJzdHJpbmdpZnkiLCJhbGciLCJ0eXBlIiwiZ2V0VUEiLCJuYXZpZ2F0b3IiLCJpc01vYmlsZUNvcmRvdmEiLCJ0ZXN0IiwiaXNOb2RlIiwiZm9yY2VFbnZpcm9ubWVudCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImlzQnJvd3NlciIsImlzQnJvd3NlckV4dGVuc2lvbiIsInJ1bnRpbWUiLCJjaHJvbWUiLCJicm93c2VyIiwiaWQiLCJpc1JlYWN0TmF0aXZlIiwiaXNFbGVjdHJvbiIsImluZGV4T2YiLCJpc0lFIiwidWEiLCJpc1VXUCIsImlzTm9kZVNkayIsImlzU2FmYXJpIiwidXNlckFnZW50IiwiaW5jbHVkZXMiLCJpc0luZGV4ZWREQkF2YWlsYWJsZSIsImluZGV4ZWREQiIsInZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUiLCJwcmVFeGlzdCIsIkRCX0NIRUNLX05BTUUiLCJyZXF1ZXN0Iiwib3BlbiIsIm9uc3VjY2VzcyIsInJlc3VsdCIsImNsb3NlIiwiZGVsZXRlRGF0YWJhc2UiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbmVycm9yIiwiYXJlQ29va2llc0VuYWJsZWQiLCJjb29raWVFbmFibGVkIiwiRmlyZWJhc2VFcnJvciIsImNvZGUiLCJjdXN0b21EYXRhIiwic2V0UHJvdG90eXBlT2YiLCJjYXB0dXJlU3RhY2tUcmFjZSIsIkVycm9yRmFjdG9yeSIsImNyZWF0ZSIsInNlcnZpY2UiLCJzZXJ2aWNlTmFtZSIsImVycm9ycyIsImRhdGEiLCJmdWxsQ29kZSIsInRlbXBsYXRlIiwiUEFUVEVSTiIsIl8iLCJrZXkiLCJyZXBsYWNlVGVtcGxhdGUiLCJmdWxsTWVzc2FnZSIsImpzb25FdmFsIiwiZGVjb2RlIiwiaGVhZGVyIiwiY2xhaW1zIiwic2lnbmF0dXJlIiwicGFydHMiLCJzcGxpdCIsImlzVmFsaWRUaW1lc3RhbXAiLCJub3ciLCJNYXRoIiwiZmxvb3IiLCJ2YWxpZFNpbmNlIiwidmFsaWRVbnRpbCIsImlzc3VlZEF0VGltZSIsImlzVmFsaWRGb3JtYXQiLCJpc0FkbWluIiwiY29udGFpbnMiLCJvYmoiLCJzYWZlR2V0IiwiaXNFbXB0eSIsIm1hcCIsImZuIiwiY29udGV4dE9iaiIsInJlcyIsImRlZXBFcXVhbCIsImEiLCJiIiwiYUtleXMiLCJrZXlzIiwiYktleXMiLCJrIiwiYVByb3AiLCJiUHJvcCIsImlzT2JqZWN0IiwidGhpbmciLCJwcm9taXNlV2l0aFRpbWVvdXQiLCJ0aW1lSW5NUyIsImRlZmVycmVkUHJvbWlzZSIsInNldFRpbWVvdXQiLCJ0aGVuIiwicXVlcnlzdHJpbmciLCJxdWVyeXN0cmluZ1BhcmFtcyIsInBhcmFtcyIsImVudHJpZXMiLCJmb3JFYWNoIiwiYXJyYXlWYWwiLCJlbmNvZGVVUklDb21wb25lbnQiLCJxdWVyeXN0cmluZ0RlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImV4dHJhY3RRdWVyeXN0cmluZyIsInVybCIsInF1ZXJ5U3RhcnQiLCJmcmFnbWVudFN0YXJ0IiwiU2hhMSIsImNoYWluXyIsImJ1Zl8iLCJXXyIsInBhZF8iLCJpbmJ1Zl8iLCJ0b3RhbF8iLCJibG9ja1NpemUiLCJyZXNldCIsImNvbXByZXNzXyIsImJ1ZiIsIm9mZnNldCIsIlciLCJ0IiwiZiIsImQiLCJ1cGRhdGUiLCJsZW5ndGhNaW51c0Jsb2NrIiwibiIsImluYnVmIiwiZGlnZXN0IiwidG90YWxCaXRzIiwiaiIsImNyZWF0ZVN1YnNjcmliZSIsImV4ZWN1dG9yIiwib25Ob09ic2VydmVycyIsInByb3h5IiwiT2JzZXJ2ZXJQcm94eSIsInN1YnNjcmliZSIsImJpbmQiLCJvYnNlcnZlcnMiLCJ1bnN1YnNjcmliZXMiLCJvYnNlcnZlckNvdW50IiwidGFzayIsImZpbmFsaXplZCIsIm5leHQiLCJmb3JFYWNoT2JzZXJ2ZXIiLCJvYnNlcnZlciIsImNvbXBsZXRlIiwibmV4dE9yT2JzZXJ2ZXIiLCJtZXRob2RzIiwibWV0aG9kIiwiaW1wbGVtZW50c0FueU1ldGhvZHMiLCJub29wIiwidW5zdWIiLCJ1bnN1YnNjcmliZU9uZSIsImZpbmFsRXJyb3IiLCJzZW5kT25lIiwiZXJyIiwiYXN5bmMiLCJvbkVycm9yIiwiYXJncyIsInZhbGlkYXRlQXJnQ291bnQiLCJmbk5hbWUiLCJtaW5Db3VudCIsIm1heENvdW50IiwiYXJnQ291bnQiLCJhcmdFcnJvciIsImVycm9yUHJlZml4IiwiYXJnTmFtZSIsInZhbGlkYXRlTmFtZXNwYWNlIiwibmFtZXNwYWNlIiwib3B0aW9uYWwiLCJ2YWxpZGF0ZUNhbGxiYWNrIiwiYXJndW1lbnROYW1lIiwidmFsaWRhdGVDb250ZXh0T2JqZWN0IiwiY29udGV4dCIsInN0cmluZ1RvQnl0ZUFycmF5IiwiaGlnaCIsInN0cmluZ0xlbmd0aCIsInV1aWR2NCIsInIiLCJyYW5kb20iLCJERUZBVUxUX0lOVEVSVkFMX01JTExJUyIsIkRFRkFVTFRfQkFDS09GRl9GQUNUT1IiLCJNQVhfVkFMVUVfTUlMTElTIiwiUkFORE9NX0ZBQ1RPUiIsImNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMiLCJiYWNrb2ZmQ291bnQiLCJpbnRlcnZhbE1pbGxpcyIsImJhY2tvZmZGYWN0b3IiLCJjdXJyQmFzZVZhbHVlIiwicG93IiwicmFuZG9tV2FpdCIsInJvdW5kIiwibWluIiwib3JkaW5hbCIsIk51bWJlciIsImlzRmluaXRlIiwiYWJzIiwiY2VudCIsImRlYyIsImluZGljYXRvciIsImdldE1vZHVsYXJJbnN0YW5jZSIsIl9kZWxlZ2F0ZSIsInVybFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImxvY2F0aW9uIiwic2VhcmNoIiwicHNldWRvSWQiLCJnZXQiLCJsYW5nIiwiZm9udCIsIlV0aWxzIiwiZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQiLCJEZWJ1Z2dlciIsIkRldmVsb3BtZW50TGluayIsImhyZWYiLCJEZXZlbG9wbWVudFNlcnZlciIsIkRlYnVnTW9kZSIsImZlZWRiYWNrVGV4dFdvcmtlclBhdGgiLCJCYXNlRmlyZWJhc2VJbnRlZ3JhdGlvbiIsImZpcmViYXNlQXBwIiwiYW5hbHl0aWNzIiwiaW5pdGlhbGl6ZUZpcmViYXNlIiwiY3VzdG9tRXZlbnRzIiwiZXZlbnROYW1lIiwiZXZlbnQiLCJsb2dFdmVudCIsInNlc3Npb25FbmQiLCJvbkxpbmUiLCJpbml0aWFsaXplQXBwIiwiZmlyZWJhc2VDb25maWciLCJnZXRBbmFseXRpY3MiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJGaXJlYmFzZUludGVncmF0aW9uIiwic3RhdGljIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsInNlbmRTZXNzaW9uU3RhcnRFdmVudCIsInNlbmRTZXNzaW9uRW5kRXZlbnQiLCJzZW5kU2VsZWN0ZWRMZXZlbEV2ZW50Iiwic2VuZFRhcHBlZFN0YXJ0RXZlbnQiLCJzZW5kUHV6emxlQ29tcGxldGVkRXZlbnQiLCJzZW5kTGV2ZWxDb21wbGV0ZWRFdmVudCIsInNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50IiwiY2xpY2siLCJzZW5kRG93bmxvYWRDb21wbGV0ZWRFdmVudCIsIkxPQURQVVpaTEUiLCJTVE9ORURST1AiLCJNT1VTRU1PVkUiLCJNT1VTRURPV04iLCJNT1VTRVVQIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiQ0xJQ0siLCJWSVNJQklMSVRZX0NIQU5HRSIsIkxldmVsQ29uZmlnIiwieCIsInkiLCJpbmRleCIsImRyYXdyZWFkeSIsImltZyIsInhQb3MiLCJ5UG9zIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJTdG9uZUNvbmZpZyIsIm9yaWd4Iiwib3JpZ3kiLCJ0ZXh0IiwiaW1hZ2VTaXplIiwidGV4dEZvbnRTaXplIiwiY2FudmFzV2lkdGgiLCJjYW52YXNIZWlnaHQiLCJpbWFnZUNlbnRlck9mZnNldFgiLCJpbWFnZUNlbnRlck9mZnNldFkiLCJ0dXRvcmlhbEluc3RhbmNlIiwidGltZXJUaWNraW5nSW5zdGFuY2UiLCJmcmFtZSIsInN0b25lTGV0dGVyIiwiY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiLCJnZXRFYXNlIiwiY3VycmVudFByb2dyZXNzIiwic3RhcnQiLCJkaXN0YW5jZSIsInN0ZXBzIiwiY29zIiwiUEkiLCJnZXRYIiwiZ2V0WSIsImRyYXciLCJkZWx0YVRpbWUiLCJkcmF3SW1hZ2UiLCJmaWxsU3R5bGUiLCJ0ZXh0QWxpZ24iLCJmaWxsVGV4dCIsImdldENvbnZlcnRlZERldlByb2RVUkwiLCJzbGljZSIsIlVybFN1YnN0cmluZyIsImxhbmd1YWdlIiwibG93ZXJDYXNlTGFuZ3VhZ2UiLCJ0b0xvd2VyQ2FzZSIsImxvZyIsImdldFJhbmRvbU51bWJlciIsIm1heCIsImdldEV4Y2x1ZGVkQ29vcmRpbmF0ZXMiLCJjYW52YXMiLCJleGNsdXNpb25QZXJjZW50YWdlIiwiZXhjbHVkZVgiLCJleGNsdWRlWSIsImhlaWdodCIsImNyZWF0ZVJpcHBsZUVmZmVjdCIsImN0eCIsImNlbnRlclgiLCJjZW50ZXJZIiwib3V0ZXJSYWRpdXMiLCJpbm5lclJhZGl1cyIsInJlc3RhcnQiLCJiZWdpblBhdGgiLCJhcmMiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsInN0cm9rZSIsImNsb3NlUGF0aCIsImxvYWRJbWFnZXMiLCJzb3VyY2VzIiwiaW1hZ2VzIiwibG9hZGVkSW1hZ2VzIiwibnVtSW1hZ2VzIiwic3luY0xvYWRpbmdJbWFnZXMiLCJsb2FkSW1nUHJvbWlzZXMiLCJhcnJLZXkiLCJpbWFnZSIsIm5ld0ltYWdlIiwiY3JlYXRlSW1nIiwiYWxsIiwicmVkdWNlIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50IiwiQXVkaW9QbGF5ZXIiLCJhdWRpb0NvbnRleHQiLCJzb3VyY2VOb2RlIiwiYXVkaW9RdWV1ZSIsInByb21wdEF1ZGlvQnVmZmVyIiwiTWFwIiwiYXVkaW9Tb3VyY3MiLCJBdWRpb0NvbnRleHRNYW5hZ2VyIiwiZ2V0QXVkaW9Db250ZXh0IiwicHJlbG9hZFByb21wdEF1ZGlvIiwiYXVkaW9TcmMiLCJhdWRpb0J1ZmZlciIsImxvYWRBbmREZWNvZGVBdWRpbyIsInByZWxvYWRHYW1lQXVkaW8iLCJhdWRpb0J1ZmZlcnMiLCJoYXMiLCJzZXQiLCJwbGF5QXVkaW8iLCJjcmVhdGVCdWZmZXJTb3VyY2UiLCJidWZmZXIiLCJjb25uZWN0IiwiZGVzdGluYXRpb24iLCJwbGF5RmVlZGJhY2tBdWRpb3MiLCJsb29wIiwiZmlsZVVybCIsInBsYXlGZXRjaCIsInBsYXlQcm9tcHRBdWRpbyIsInBsYXlCdXR0b25DbGlja1NvdW5kIiwic3RvcEZlZWRiYWNrQXVkaW8iLCJzdG9wIiwic3RvcEFsbEF1ZGlvcyIsImZldGNoIiwicmVzcG9uc2UiLCJhcnJheUJ1ZmZlciIsImRlY29kZUF1ZGlvRGF0YSIsIm9uZW5kZWQiLCJoYW5kbGVBdWRpb0VuZGVkIiwiZGlzY29ubmVjdCIsIkF1ZGlvQ29udGV4dCIsIndlYmtpdEF1ZGlvQ29udGV4dCIsImJnSW1nIiwiREVGQVVMVF9CQUNLR1JPVU5EXzEiLCJoaWxsSW1nIiwiSElMTF9JTUFHRV8xIiwicGlsbGVySW1nIiwiUElMTEFSX0lNQUdFXzEiLCJmZW5jaEltZyIsIkZFTkNFX0lNQUdFXzEiLCJhdXR1bW5CZ0ltZyIsIkFVVFVNTl9CQUNLR1JPVU5EXzEiLCJhdXR1bW5IaWxsSW1nIiwiQVVUVU1OX0hJTExfMSIsImF1dHVtblBpbGxlckltZyIsIkFVVFVNTl9QSUxMQVJfMSIsImF1dHVtblNpZ25JbWciLCJBVVRVTU5fU0lHTl8xIiwiYXV0dW1uRmVuY2VJbWciLCJBVVRVTU5fRkVOQ0VfMSIsIndpbnRlckJnSW1nIiwiV0lOVEVSX0JBQ0tHUk9VTkRfMSIsIndpbnRlckhpbGxJbWciLCJXSU5URVJfSElMTF8xIiwid2ludGVyU2lnbkltZyIsIldJTlRFUl9TSUdOXzEiLCJ3aW50ZXJGZW5jZUltZyIsIldJTlRFUl9GRU5DRV8xIiwid2ludGVyUGlsbGVySW1nIiwiV0lOVEVSX1BJTExBUl8xIiwiQmFja2dyb3VuZCIsImltYWdlc0xvYWRlZCIsImxldmVsTnVtYmVyIiwiYXZhaWxhYmxlQmFja2dyb3VuZFR5cGVzIiwiYmFja2dyb3VuZFR5cGUiLCJDYW5jZWxCdXR0b24iLCJwb3NYIiwicG9zWSIsImNhbmNlbF9idXR0b25faW1hZ2UiLCJvbkNsaWNrIiwieENsaWNrIiwieUNsaWNrIiwic3FydCIsIkNsb3NlQnV0dG9uIiwiY2xvc2VfYnV0dG9uX2ltYWdlIiwiTmV4dEJ1dHRvbiIsIm5leHRfYnV0dG9uX2ltYWdlIiwiTm9CdXR0b24iLCJub19idXR0b25faW1hZ2UiLCJQYXVzZUJ1dHRvbiIsInBhdXNlX2J1dHRvbl9pbWFnZSIsIlJldHJ5QnV0dG9uIiwicmV0cnlfYnV0dG9uX2ltYWdlIiwiWWVzQnV0dG9uIiwieWVzX2J1dHRvbl9pbWFnZSIsIkZlZWRiYWNrVGV4dEVmZmVjdHMiLCJ0ZXh0WCIsInRleHRZIiwiZm9udFNpemUiLCJsaW5lSGVpZ2h0IiwibWF4VGV4dFdpZHRoIiwicGFydGljbGVEdXJhdGlvbiIsInN0YXJ0VGltZSIsInBhcnRpY2xlcyIsImdhcCIsIm1vdXNlIiwidGV4dFdvcmtlciIsInJhZGl1cyIsIldvcmtlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVUZXh0V29ya2VyTWVzc2FnZSIsIndyYXBUZXh0IiwiZ3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsInRleHRCYXNlbGluZSIsImxpbmVBcnJheSIsIndvcmRzIiwibGluZUNvdW50ZXIiLCJsaW5lIiwidGVzdExpbmUiLCJ0ZXh0SGVpZ2h0IiwidHJpbSIsImxhc3RTcGFjZUluZGV4IiwiaW5pdGlhbFRleHQiLCJsYXN0VGV4dCIsImNvbnZlcnRUb1BhcnRpY2xlIiwiY29sb3IiLCJUZXh0UGFydGljbGUiLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJjbGVhclJlY3QiLCJwb3N0TWVzc2FnZSIsInBpeGVscyIsInJlbmRlciIsInBhcnRpY2xlIiwidXBkYXRlUGFydGljbGVzIiwiY2xlYXJQYXJ0aWNsZSIsInVucmVnaXN0ZXJFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRlcm1pbmF0ZSIsIkFyZVlvdVN1cmVQb3BVcCIsInllc0J1dHRvbiIsIm5vQnV0dG9uIiwicG9wX3VwX2ltYWdlIiwieWVzQ2FsbGJhY2siLCJub0NhbGxiYWNrIiwiYXVkaW9QbGF5ZXIiLCJnZXRDb250ZXh0IiwiYWRkTGlzdG5lciIsImhhbmRsZU1vdXNlQ2xpY2siLCJzZWxmRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwicHJldmVudERlZmF1bHQiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2xpZW50WCIsImxlZnQiLCJjbGllbnRZIiwidG9wIiwicGxheUNsaWNrU291bmQiLCJkaXNwb3NlIiwiZmlsbFJlY3QiLCJmZWVkYmFja1RleHRFZmZlY3RzIiwib3JpZ2luWCIsIm9yaWdpblkiLCJzaXplIiwiZWFzZSIsIkxldmVsSW5kaWNhdG9ycyIsIkV2ZW50TWFuYWdlciIsImFjdGl2ZUluZGljYXRvcnMiLCJzdG9uZURyb3BDYWxsYmFja0hhbmRsZXIiLCJoYW5kbGVTdG9uZURyb3AiLCJsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyIiwiaGFuZGxlTG9hZFB1enpsZSIsImxldmVsX2luZGljYXRvciIsImJhcl9lbXB0eSIsImJhcl9mdWxsIiwic2V0SW5kaWNhdG9ycyIsImluZGljYXRvckNvdW50IiwiYWRkRHJvcFN0b25lRXZlbnQiLCJkZXRhaWwiLCJjb3VudGVyIiwiTW9uc3RlciIsInppbmRleCIsImZyYW1lWCIsImZyYW1lWSIsIm1heEZyYW1lIiwiZnBzIiwiY291bnRGcmFtZSIsImZyYW1lSW50ZXJ2YWwiLCJmcmFtZVRpbWVyIiwiY2FudmFzU3RhY2siLCJjYW5hdnNFbGVtZW50IiwiZ2FtZSIsIm1vbnN0ZXJQaGFzZSIsImNhbGxCYWNrRnVuY3Rpb24iLCJlYXRJbWciLCJpZGxlSW1nIiwic3BpdEltZyIsImRyYWdJbWciLCJjaGFuZ2VUb0lkbGVBbmltYXRpb24iLCJjaGFuZ2VJbWFnZSIsImNoYW5nZVRvRHJhZ0FuaW1hdGlvbiIsImNoYW5nZVRvRWF0QW5pbWF0aW9uIiwiY2hhbmdlVG9TcGl0QW5pbWF0aW9uIiwiaXNDb3JyZWN0IiwiUGF1c2VQb3BVcCIsImNhbmNlbEJ1dHRvbiIsInJldHJ5QnV0dG9uIiwiY2xvc2VCdXR0b24iLCJzd2l0Y2hUb0xldmVsU2VsZWN0aW9uIiwicmVsb2FkU2NlbmUiLCJnYW1lcGxheURhdGEiLCJyZXRyeVN1cmVQb3B1cCIsIkNsb3NlU3VyZVBvcHVwIiwiaXNSZXRyeUJ1dHRvbkNsaWNrZWQiLCJpc0Nsb3NlQnV0dG9uQ2xpY2tlZCIsInNlbGZJZEVsZW1lbnQiLCJ5ZXNSZXRyeUNhbGxiYWNrIiwibm9SZXRyeUNhbGxiYWNrIiwibm9DbG9zZUNhbGxiYWNrIiwicGxheUFyZVlvdVN1cmVTb3VuZCIsIlBsYXlCdXR0b24iLCJtYWpWZXJzaW9uIiwibWluVmVyc2lvbiIsImZpcmViYXNlSW50ZWdyYXRpb24iLCJpbml0IiwiZ2V0RGF0YSIsIm1hanZlcnNpb24iLCJtaW52ZXJzaW9uIiwibG9nVGFwcGVkU3RhcnRGaXJlYmFzZUV2ZW50IiwidGFwcGVkU3RhcnREYXRhIiwiY3JfdXNlcl9pZCIsImZ0bV9sYW5ndWFnZSIsInByb2ZpbGVfbnVtYmVyIiwidmVyc2lvbl9udW1iZXIiLCJpbm5lckhUTUwiLCJqc29uX3ZlcnNpb25fbnVtYmVyIiwiUHJvbXB0VGV4dCIsImxldmVsRGF0YSIsImN1cnJlbnRQcm9tcHRUZXh0IiwiY3VycmVudFB1enpsZURhdGEiLCJwcm9tcHRfaW1hZ2UiLCJ0YXJnZXRTdG9uZXMiLCJyaWdodFRvTGVmdCIsImlzU3RvbmVEcm9wcGVkIiwiZHJvcHBlZFN0b25lcyIsInRpbWUiLCJwcm9tcHRJbWFnZVdpZHRoIiwiaXNBcHBGb3JlZ3JvdW5kIiwic2NhbGUiLCJpc1NjYWxpbmdVcCIsInNjYWxlRmFjdG9yIiwicHJvbXB0SW1hZ2VIZWlnaHQiLCJwcm9tcHRQbGF5QnV0dG9uIiwicHJvbXB0IiwicHJvbXB0VGV4dCIsImdldFByb21wdEF1ZGlvVXJsIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsImhhbmRsZU1vdXNlRG93biIsInBsYXlTb3VuZCIsInByb21wdEF1ZGlvIiwic2V0Q3VycnJlbnRQdXp6bGVEYXRhIiwiZHJhd1JUTExhbmciLCJjYWxjdWxhdGVGb250Iiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJsZXZlbE1ldGEiLCJsZXZlbFR5cGUiLCJwcm90b1R5cGUiLCJsZXR0ZXJJbldvcmQiLCJSZWdFeHAiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImRyYXdPdGhlcnMiLCJwcm9tcHRUZXh0TGV0dGVycyIsInN0YXJ0UHJvbXB0dGV4dFgiLCJjdXJyZW50V29yZFdpZHRoIiwibGV0dGVySGlnaGxpZ2h0IiwidXBkYXRlU2NhbGluZyIsInB1enpsZXMiLCJkcm9wcGVkU3RvbmVJbmRleCIsInZpc2liaWxpdHlTdGF0ZSIsImltYWdlMVByb21pc2UiLCJsb2FkSW1hZ2UiLCJpbWFnZTJQcm9taXNlIiwiU3RvbmVIYW5kbGVyIiwic3RvbmVQb3MiLCJwaWNrZWRTdG9uZSIsImZvaWxTdG9uZXMiLCJhbnN3ZXIiLCJwdXp6bGVOdW1iZXIiLCJjb3JyZWN0QW5zd2VyIiwicHV6emxlU3RhcnRUaW1lIiwic2hvd1R1dG9yaWFsIiwiR2FtZVNjb3JlIiwiZ2V0RGF0YWZyb21TdG9yYWdlIiwiY29ycmVjdFN0b25lQXVkaW8iLCJ0dXRvcmlhbCIsImNvcnJlY3RUYXJnZXRTdG9uZSIsInN0b25lYmciLCJmZWVkYmFja0F1ZGlvcyIsImlzR2FtZVBhdXNlZCIsInNldFRhcmdldFN0b25lIiwiaW5pdGlhbGl6ZVN0b25lUG9zIiwiQXVkaW8iLCJBVURJT19QQVRIX0NPUlJFQ1RfU1RPTkUiLCJjb252ZXJ0RmVlZEJhY2tBdWRpb3NUb0xpc3QiLCJUdXRvcmlhbCIsIkFTU0VUU19QQVRIX1NUT05FX1BJTktfQkciLCJjcmVhdGVTdG9uZXMiLCJnZXRGb2lsU3RvbmVzIiwidXBkYXRlVGFyZ2V0U3RvbmVQb3NpdGlvbnMiLCJvZmZzZXRDb29yZGluYXRlVmFsdWUiLCJzb3J0IiwiaXNEcm9wcGVkU3RvbmVDb3JyZWN0IiwiZHJvcHBlZFN0b25lIiwic2V0UHV6emxlTnVtYmVyIiwiaXNTdG9uZUxldHRlckRyb3BDb3JyZWN0IiwiZmVlZEJhY2tJbmRleCIsImlzV29yZCIsImlzTGV0dGVyRHJvcENvcnJlY3QiLCJwcm9jZXNzTGV0dGVyRHJvcEZlZWRiYWNrQXVkaW8iLCJnZXRDb3JyZWN0VGFyZ2V0U3RvbmUiLCJwbGF5Q29ycmVjdEFuc3dlckZlZWRiYWNrU291bmQiLCJBVURJT19QQVRIX0VBVFMiLCJBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMiLCJBVURJT19QQVRIX01PTlNURVJfU1BJVCIsIkFVRElPX1BBVEhfTU9OU1RFUl9ESVNTQVBPSU5URUQiLCJzcGxpY2UiLCJ0b3RhbFN0b25lc0NvdW50IiwiZXh0cmFTdG9uZXNDb3VudCIsInBhdXNlIiwic2V0R2FtZVBhdXNlIiwicmFuZG9tTnVtYmVyIiwiQVVESU9fUEFUSF9QT0lOVFNfQUREIiwicGxheSIsIlRpbWVyVGlja2luZyIsInRpbWVyV2lkdGgiLCJ0aW1lckhlaWdodCIsIndpZHRoVG9DbGVhciIsInRpbWVyIiwiaXNUaW1lclN0YXJ0ZWQiLCJpc1RpbWVyRW5kZWQiLCJpc1RpbWVyUnVubmluZ091dCIsInRpbWVyX2Z1bGwiLCJwYXVzZUJ1dHRvbkNsaWNrZWQiLCJzdGFydE15VGltZXIiLCJpc015VGltZXJPdmVyIiwicGxheUxldmVsRW5kQXVkaW9PbmNlIiwidGltZXJfZW1wdHkiLCJyb3RhdGluZ19jbG9jayIsInN0YXJ0VGltZXIiLCJyZWFkeVRpbWVyIiwidHV0b3JpYWxJbWciLCJ0YXJnZXRTdG9uZVBvc2l0aW9ucyIsInN0YXJ0eCIsInN0YXJ0eSIsImVuZHgiLCJlbmR5IiwiZW5kVHV0b3JpYWwiLCJwbGF5TW5zdHJDbGtUdHJsQW5pbSIsInRvdGFsVGltZSIsIm1vbnN0ZXJTdG9uZURpZmZlcmVuY2UiLCJkeCIsImR5IiwiYWJzZHgiLCJhYnNkeSIsInN0YXJ0UmlwcGxlIiwiZHJhd1JpcHBsZSIsInRhcmdldFN0b25lUG9zaXRpb24iLCJhbmltYXRlSW1hZ2UiLCJpc01vYmlsZSIsInNldFR1dG9yaWFsRW5kIiwic2hvdWxkUGxheVR1dG9yaWFsIiwiZGlzeCIsImRpc3kiLCJtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlIiwiY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uIiwicHJldmlvdXNBbHBoYSIsImdsb2JhbEFscGhhIiwic2hvdWxkQ3JlYXRlUmlwcGxlIiwic2ludXNvaWRhbEludGVycG9sYXRpb24iLCJtaW5TY2FsZSIsIm1heFNjYWxlIiwiZHVyYXRpb24iLCJhbXBsaXR1ZGUiLCJmcmVxdWVuY3kiLCJzaW4iLCJjbGlja09uTW9uc3RlclR1dG9yaWFsIiwic2hvdWxkUGxheU1vbnN0ZXJDbGlja1R1dG9yaWFsQW5pbWF0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiYm90dG9tUG9zaXRpb24iLCJ0b3BQb3NpdGlvbiIsImN1cnJlbnRPZmZzZXRZIiwiZ2V0QWxsR2FtZUxldmVsSW5mbyIsInB1enpsZU51bWVyIiwic2V0UGxheU1vbnN0ZXJDbGlja0FuaW1hdGlvbiIsIkJBQ0tHUk9VTkRfQVNTRVRfTElTVCIsInN1bW1lciIsIkJHX0dST1VQX0lNR1MiLCJERUZBVUxUX0JHX0dST1VQX0lNR1MiLCJkZWZhdWx0QmdEcmF3aW5nIiwiYXV0dW1uIiwiQVVUVU1OX0JHX0dST1VQX0lNR1MiLCJhdXR1bUJnRHJhd2luZyIsIndpbnRlciIsIldJTlRFUl9CR19HUk9VUF9JTUdTIiwid2ludGVyQmdEcmF3aW5nIiwiY3JlYXRlQmFja2dyb3VuZCIsImJhY2tncm91bmRJbWciLCJkcmF3TWV0aG9kIiwibG9hZER5bmFtaWNCZ0Fzc2V0cyIsImFzc2V0c0xpc3QiLCJhcnIiLCJiZ0ltYWdlcyIsImxldmVsU2VsZWN0QmdEcmF3aW5nIiwiTEVWRUxfU0VMRUNUSU9OX0JBQ0tHUk9VTkQiLCJGaXJlYmFzZVVzZXJDbGlja2VkIiwiRmlyZWJhc2VVc2VySW5zdGFsbCIsIlBXQUluc3RhbGxTdGF0dXMiLCJVc2VyQ2FuY2VsbGVkIiwiTmF0aXZlUGxheUJ1dHRvbiIsIlByZXZpb3VzUGxheWVkTGV2ZWwiLCJTdG9yZU1vbnN0ZXJQaGFzZU51bWJlciIsIklzQ2FjaGVkIiwiTW9uc3RlckF1ZGlvIiwiRmVlZGJhY2tBdWRpbyIsIkludHJvTXVzaWMiLCJQcm9tcHRBdWRpbyIsIkJ1dHRvbkNsaWNrIiwiVGltZU92ZXIiLCJTdG9uZU11c2ljIiwiUGhyYXNlQXVkaW8iLCJMZXZlbEVuZEF1ZGlvIiwiU3RhcnRTY2VuZTEiLCJMZXZlbFNlbGVjdGlvbjEiLCJHYW1lU2NlbmUxIiwiRW5kU2NlbmUxIiwiQVVESU9fUEFUSF9CVE5fQ0xJQ0siLCJBVURJT19QQVRIX09OX0RSQUciLCJBU1NFVFNfUEFUSF9UT1RFTSIsIkFTU0VUU19QQVRIX0JHXzAxIiwiQVNTRVRTX1BBVEhfSElMTCIsIkFTU0VUU19QQVRIX0ZFTkNFIiwiQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFIiwiR0FNRVBMQVlfQkdfR1JPVVBfSU1HUyIsIlNDRU5FX05BTUVfU1RBUlQiLCJTQ0VORV9OQU1FX0xFVkVMX1NFTEVDVCIsIlNDRU5FX05BTUVfR0FNRV9QTEFZIiwiU0NFTkVfTkFNRV9MRVZFTF9FTkQiLCJVUkwiLCJnZXRGdG1EYXRhIiwiaGVhZGVycyIsImpzb24iLCJEYXRhTW9kYWwiLCJ0aXRsZSIsIm90aGVyQXVkaW9zIiwibGV2ZWxzIiwiRmVlZGJhY2tUZXh0cyIsIkZlZWRiYWNrQXVkaW9zIiwidmVyc2lvbiIsImZlZWRiYWNrVGV4dHMiLCJPdGhlckF1ZGlvcyIsImdldExldmVscyIsImxldmVsQXJyYXkiLCJMZXZlbHMiLCJzZWxjdFlvdXJQbGF5ZXIiLCJ3YXRjaE1lR3JvdyIsImFyZVlvdVN1cmUiLCJmYW50YXN0aWMiLCJncmVhdCIsImFtYXppbmciLCJnZXRQdXp6bGVEYXRhIiwiTGV2ZWxNZXRhIiwiTGV2ZWxOdW1iZXIiLCJwdXp6bGVPYmplY3RzIiwiUHV6emxlcyIsInB1enpsZURhdGEiLCJzZWdtZW50TnVtYmVyIiwicHV6emxlIiwiU2VnbWVudE51bWJlciIsIlByb21wdCIsImdldFRhcmdldFN0b25lcyIsImZvaWxTdG9uZUFycmF5IiwiZm9pbHN0b25lcyIsInN0b25lcyIsIlN0b25lVGV4dCIsInRhcmdldFN0b25lQXJyYXkiLCJ0YXJnZXRzdG9uZXMiLCJGb2lsU3RvbmUiLCJzdG9uZVRleHQiLCJUYXJnZXRTdG9uZSIsInByb21wdEZhZGVPdXQiLCJsZXR0ZXJHcm91cCIsIlByb21wdEZhZGVvdXQiLCJMZXR0ZXJHcm91cCIsIlByb21wdFR5cGUiLCJMZXZlbFR5cGUiLCJzZXRHYW1lTGV2ZWxTY29yZSIsImN1cnJlbnRMZXZlbEluZm8iLCJzY29yZSIsInN0YXJzR2FpbmVkIiwiY2FsY3VsYXRlU3RhckNvdW50IiwibGV2ZWxQbGF5ZWRJbmZvIiwibGV2ZWxOYW1lIiwic3RhckNvdW50Iiwic2V0VG90YWxTdGFyQ291bnQiLCJhbGxHYW1lbGV2ZWxJbmZvIiwibG9jYWxTdG9yYWdlIiwic2V0SXRlbSIsImN1cnJlbnRsYW5ndWFnZSIsImdldEl0ZW0iLCJ0b3RhbFN0YXJDb3VudCIsImdldFRvdGFsU3RhckNvdW50IiwiZW5nbGlzaCIsInN3YWhpbGkiLCJ3b2xvZiIsInRhamlrIiwibWFyYXRoaSIsImFtaGFyaWMiLCJwdW5qYWJpIiwidGFtaWwiLCJzZXBlZGkiLCJndWphcmF0aSIsInRlbHVndSIsInRzb25nYSIsIm1hbGF5IiwibmRlYmVsZSIsInZlbmRhIiwic2lzd2F0aSIsInRzd2FuYSIsInRoYWkiLCJmdWxhIiwiZmFyc2kiLCJidXJtZXNlIiwiYmVuZ2FsaSIsIkF6ZXJiYWlqYW5pIiwiU2Vzb3RobyIsIkdlb3JnaWFuIiwiQnJhemlsaWFuUG9ydHVndWVzZSIsIlNvbWFsaSIsIkhhdXNhIiwiSWdibyIsIkhhdGlhbkNyZW9sZSIsIk9yb21vIiwiTHVnYW5kYSIsIllvcnViYSIsIktobWVyIiwiSmF2YW5lc2UiLCJVcmR1IiwiS2lueWFyd2FuZGEiLCJTaG9uYSIsIkt1cmRpc2giLCJGcmVuY2giLCJpc2lYaG9zYSIsIkFmcmlrYWFucyIsIk5lcGFsaSIsIlVrcmFpbmlhbiIsIkhpbmRpIiwiVGFnYWxvZyIsIlZpZXRuYW1lc2UiLCJQYXNodG8iLCJUd2kiLCJBcmFiaWMiLCJoYW5kbGVyIiwiaGFuZGxlU3RvbmVEcm9wcGVkRXZlbnQiLCJoYW5kbGVMb2FkUHV6emxlRXZlbnQiLCJTY2VuZUhhbmRsZXIiLCJzdGFydFNjZW5lIiwibGV2ZWxTZWxlY3Rpb25TY2VuZSIsImdhbWVwbGF5U2NlbmUiLCJsZXZlbEVuZFNjZW5lIiwibG9hZGluZ1NjcmVlbiIsImxvYWRpbmciLCJsYXN0VGltZSIsInB3YV9pbnN0YWxsX3N0YXR1cyIsInRvZ2dsZUJ0biIsImhhbmRsZUluc3RhbGxQcm9tcHQiLCJTdGFydFNjZW5lIiwic3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uIiwiU2NlbmVOYW1lIiwiTG9hZGluZ1NjZW5lIiwicmVtb3ZlTG9hZGluZyIsInN0YXJ0QW5pbWF0aW9uTG9vcCIsImFuaW1hdGUiLCJ0aW1lU3RhbXAiLCJhbmltYXRpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkZXZUb2dnbGUiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJpbm5lclRleHQiLCJjaGVja01vbnN0ZXJQaGFzZVVwZGF0aW9uIiwibW9uc3RlclBoYXNlTnVtYmVyIiwiZHJhd0xldmVsU2VsZWN0aW9uIiwic3dpdGNoU2NlbmVUb0dhbWVwbGF5IiwiZ2FtZVBsYXlEYXRhIiwiY2hhbmdlU2NlbmVSZXF1ZXN0RnJvbSIsInNob3dMb2FkaW5nIiwianNvblZlcnNpb25OdW1iZXIiLCJHYW1lcGxheVNjZW5lIiwiY3VycmVudExldmVsRGF0YSIsInN3aXRjaFNjZW5lVG9FbmRMZXZlbCIsInNlbGVjdGVkTGV2ZWxOdW1iZXIiLCJjdXJyZW50TGV2ZWxOdW1iZXIiLCJpbml0Q2xvdWQiLCJzdHlsZSIsInpJbmRleCIsIkxldmVsRW5kU2NlbmUiLCJMZXZlbFNlbGVjdGlvblNjcmVlbiIsImxhc3RTY2VuZU5hbWUiLCJtb25zdGVyIiwidGltZXJUaWNraW5nIiwicGF1c2VCdXR0b24iLCJsZXZlbEluZGljYXRvcnMiLCJzdG9uZXNDb3VudCIsImZlZWRCYWNrVGV4dHMiLCJpc1B1enpsZUNvbXBsZXRlZCIsInN3aXRjaFNjZW5lVG9FbmQiLCJzdG9uZUhhbmRsZXIiLCJwaWNrZWRTdG9uZU9iamVjdCIsInBhdXNlUG9wdXAiLCJpc1BhdXNlQnV0dG9uQ2xpY2tlZCIsImJhY2tncm91bmQiLCJmZWVkQmFja1RleHRDYW5hdnNFbGVtZW50IiwiaXNHYW1lU3RhcnRlZCIsInRlbXBXb3JkZm9yV29yZFB1enpsZSIsInB1enpsZVRpbWUiLCJpc0Rpc3Bvc2luZyIsInJlc2V0QW5pbWF0aW9uSUQiLCJ3aWxsUmVhZEZyZXF1ZW50bHkiLCJzdGFydEdhbWVUaW1lIiwic3RhcnRQdXp6bGVUaW1lIiwibG9hZFB1enpsZSIsInJlc3VtZUdhbWUiLCJwcm9maWxlTW9uc3RlciIsInByZXZpb3VzUGxheWVkTGV2ZWwiLCJhZGRFdmVudExpc3RlbmVycyIsInNldHVwQmciLCJnZXRSYW5kb21GZWVkQmFja1RleHQiLCJyYW5kb21JbmRleCIsInNlbGVjdGVkS2V5IiwiZ2V0UmFuZG9tSW50IiwiZGVmaW5lZFZhbHVlc01heENvdW50IiwidmFsdWVzIiwiZmlsdGVyIiwiaGFuZGxlTW91c2VVcCIsImxldHRlclB1enpsZSIsIndvcmRQdXp6bGUiLCJ4TGltaXQiLCJoYWxmV2lkdGgiLCJzYyIsImhhbmRsZU1vdXNlTW92ZSIsInBhdXNlR2FtZVBsYXkiLCJoYW5kbGVUb3VjaFN0YXJ0IiwidG91Y2giLCJ0b3VjaGVzIiwiaGFuZGxlVG91Y2hNb3ZlIiwiaGFuZGxlVG91Y2hFbmQiLCJjaGFuZ2VkVG91Y2hlcyIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwidGltZXJFbmRlZCIsIkJvb2xlYW4iLCJsb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50IiwibG9nTGV2ZWxFbmRGaXJlYmFzZUV2ZW50IiwibG9hZFB1enpsZUV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJpbml0TmV3UHV6emxlIiwiaGFuZGxlQ29ycmVjdFN0b25lRHJvcCIsImhhbmRsZVN0b25lRHJvcEVuZCIsImRyb3BwZWRTdG9uZUluc3RhbmNlIiwicmVzZXRUb0lkbGVBbmltYXRpb24iLCJkZWxheSIsImNsZWFyVGltZW91dCIsInB1enpsZVR5cGUiLCJkaXNwYXRjaFN0b25lRHJvcEV2ZW50IiwiZmVlZGJhY2tJbmRleCIsImRyb3BTdG9uZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImVuZFRpbWUiLCJwdXp6bGVDb21wbGV0ZWREYXRhIiwic3VjY2Vzc19vcl9mYWlsdXJlIiwibGV2ZWxfbnVtYmVyIiwicHV6emxlX251bWJlciIsIml0ZW1fc2VsZWN0ZWQiLCJmb2lscyIsInJlc3BvbnNlX3RpbWUiLCJsZXZlbENvbXBsZXRlZERhdGEiLCJudW1iZXJfb2Zfc3VjY2Vzc2Z1bF9wdXp6bGVzIiwibGV2ZWxCdXR0b25Qb3MiLCJjYW52YXNFbGVtZW50IiwiZ2FtZUxldmVsRGF0YSIsImNhbGxCYWNrIiwieERvd24iLCJ5RG93biIsInByZXZpb3VzUGxheWVkTGV2ZWxOdW1iZXIiLCJsZXZlbFNlbGVjdGlvblBhZ2VJbmRleCIsImxldmVsc1NlY3Rpb25Db3VudCIsInVubG9ja0xldmVsSW5kZXgiLCJpbml0aWFsaXNlQnV0dG9uUG9zIiwiY3JlYXRlTGV2ZWxCdXR0b25zIiwibWFwSWNvbiIsIm1hcEljb25TcGVjaWFsIiwibWFwTG9jayIsInN0YXIiLCJuZXh0YnRuIiwiYmFja2J0biIsImFkZExpc3RlbmVycyIsImxldmVsQnV0dG9ucG9zIiwicG9zcyIsInMiLCJucyIsInBhdXNlUGxheUF1ZGlvcyIsImdldFRvdWNoZXMiLCJldnQiLCJvcmlnaW5hbEV2ZW50IiwiZmlyc3RUb3VjaCIsInhVcCIsInlVcCIsInhEaWZmIiwieURpZmYiLCJkb3duQnV0dG9uIiwic3RhcnRHYW1lIiwiZHJhd0xldmVsIiwic3BlY2lhbExldmVscyIsImlzU3BlY2lhbExldmVsIiwibGV2ZWwiLCJkcmF3U3RhcnMiLCJkcmF3U3RhciIsImxvZ1NlbGVjdGVkTGV2ZWxFdmVudCIsInNlbGVjdGVkTGV2ZWx0RGF0YSIsImxldmVsX3NlbGVjdGVkIiwibmV4dEJ1dHRvbiIsImN1cnJlbnRMZXZlbCIsInN3aXRjaFRvR2FtZXBsYXlDQiIsInN3aXRjaFRvTGV2ZWxTZWxlY3Rpb25DQiIsInRpbWVvdXRzIiwic3RhckRyYXduQ291bnQiLCJzd2l0Y2hUb1JlYWN0aW9uQW5pbWF0aW9uIiwic3RhcjFJbWciLCJzdGFyMkltZyIsInN0YXIzSW1nIiwid2luQmFja2dyb3VuZEltZyIsInN0YXJBbmltYXRpb24iLCJjb3VudCIsInBhdXNlQXVkaW9zIiwidGltZW91dCIsImNsb3VkWFBvc2l0aW9uIiwic3RvcENsb3VkTW92aW5nIiwiY2xvdWRNb3ZpbmdUaW1lT3V0IiwiY2xvdWQ2IiwiY2xvdWQ3IiwiY2xvdWQ4IiwicHdhX3N0YXR1cyIsImZpcmViYXNlX2FuYWx5dGljcyIsImJ1dHRvbkNvbnRleHQiLCJwbGF5QnV0dG9uIiwidGl0bGVGb250IiwiY3JlYXRlUGxheUJ1dHRvbiIsImhhbmRsZXJJbnN0YWxsUHJvbXB0IiwiZ2V0Rm9udFdpZHRoT2ZUaXRsZSIsImZicSIsImRpc3BsYXkiLCJBTkFMWVRJQ1NfVFlQRSIsIkdBX0ZJRF9LRVkiLCJPUklHSU5fS0VZIiwiRkVUQ0hfVElNRU9VVF9NSUxMSVMiLCJEWU5BTUlDX0NPTkZJR19VUkwiLCJHVEFHX1VSTCIsImxvZ2dlciIsIkxvZ2dlciIsIkVSUk9SUyIsIkVSUk9SX0ZBQ1RPUlkiLCJjcmVhdGVHdGFnVHJ1c3RlZFR5cGVzU2NyaXB0VVJMIiwic3RhcnRzV2l0aCIsImd0YWdVUkwiLCJ3YXJuIiwicHJvbWlzZUFsbFNldHRsZWQiLCJwcm9taXNlcyIsImluc2VydFNjcmlwdFRhZyIsImRhdGFMYXllck5hbWUiLCJ0cnVzdGVkVHlwZXNQb2xpY3kiLCJwb2xpY3lOYW1lIiwicG9saWN5T3B0aW9ucyIsInRydXN0ZWRUeXBlcyIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeSIsImNyZWF0ZVNjcmlwdFVSTCIsInNjcmlwdCIsImNyZWF0ZUVsZW1lbnQiLCJndGFnU2NyaXB0VVJMIiwiaGVhZCIsImFwcGVuZENoaWxkIiwid3JhcEd0YWciLCJndGFnQ29yZSIsImluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAiLCJkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0IiwibWVhc3VyZW1lbnRJZFRvQXBwSWQiLCJjb21tYW5kIiwiZ3RhZ1BhcmFtcyIsImluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IiLCJnYVNlbmRUb0xpc3QiLCJkeW5hbWljQ29uZmlnUmVzdWx0cyIsInNlbmRUb0lkIiwiZm91bmRDb25maWciLCJmaW5kIiwiaW5pdGlhbGl6YXRpb25Qcm9taXNlIiwiZ3RhZ09uRXZlbnQiLCJjb3JyZXNwb25kaW5nQXBwSWQiLCJndGFnT25Db25maWciLCJmaWVsZE5hbWUiLCJjdXN0b21QYXJhbXMiLCJMT05HX1JFVFJZX0ZBQ1RPUiIsImRlZmF1bHRSZXRyeURhdGEiLCJ0aHJvdHRsZU1ldGFkYXRhIiwiZ2V0VGhyb3R0bGVNZXRhZGF0YSIsInNldFRocm90dGxlTWV0YWRhdGEiLCJtZXRhZGF0YSIsImRlbGV0ZVRocm90dGxlTWV0YWRhdGEiLCJnZXRIZWFkZXJzIiwiSGVhZGVycyIsIkFjY2VwdCIsImZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeSIsImFwcCIsInJldHJ5RGF0YSIsInRpbWVvdXRNaWxsaXMiLCJvcHRpb25zIiwidGhyb3R0bGVFbmRUaW1lTWlsbGlzIiwic2lnbmFsIiwiQW5hbHl0aWNzQWJvcnRTaWduYWwiLCJhYm9ydCIsImF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkiLCJhcHBGaWVsZHMiLCJiYWNrb2ZmTWlsbGlzIiwic2V0QWJvcnRhYmxlVGltZW91dCIsImFwcFVybCIsInN0YXR1cyIsImVycm9yTWVzc2FnZSIsImpzb25SZXNwb25zZSIsIl9pZ25vcmVkIiwiaHR0cFN0YXR1cyIsInJlc3BvbnNlTWVzc2FnZSIsImZldGNoRHluYW1pY0NvbmZpZyIsImlzUmV0cmlhYmxlRXJyb3IiLCJkZWJ1ZyIsImxpc3RlbmVycyIsImxpc3RlbmVyIiwiZGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQiLCJkZWZhdWx0Q29uc2VudFNldHRpbmdzRm9ySW5pdCIsIl9zZXRDb25zZW50RGVmYXVsdEZvckluaXQiLCJjb25zZW50U2V0dGluZ3MiLCJfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQiLCJfaW5pdGlhbGl6ZUFuYWx5dGljcyIsImluc3RhbGxhdGlvbnMiLCJkeW5hbWljQ29uZmlnUHJvbWlzZSIsImZpZFByb21pc2UiLCJlcnJvckluZm8iLCJ2YWxpZGF0ZUluZGV4ZWREQiIsImVudklzVmFsaWQiLCJnZXRJZCIsImR5bmFtaWNDb25maWciLCJmaWQiLCJzY3JpcHRUYWdzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0YWciLCJmaW5kR3RhZ1NjcmlwdE9uUGFnZSIsImNvbmZpZ1Byb3BlcnRpZXMiLCJBbmFseXRpY3NTZXJ2aWNlIiwiX2RlbGV0ZSIsImd0YWdDb3JlRnVuY3Rpb24iLCJ3cmFwcGVkR3RhZ0Z1bmN0aW9uIiwiZ3RhZ05hbWUiLCJnbG9iYWxJbml0RG9uZSIsInNldHRpbmdzIiwiZmFjdG9yeSIsIm1pc21hdGNoZWRFbnZNZXNzYWdlcyIsImRldGFpbHMiLCJ3YXJuT25Ccm93c2VyQ29udGV4dE1pc21hdGNoIiwiZGF0YUxheWVyIiwiZ2V0T3JDcmVhdGVEYXRhTGF5ZXIiLCJ3cmFwcGVkR3RhZyIsImd0YWdGdW5jdGlvbk5hbWUiLCJfYXJncyIsIndyYXBPckNyZWF0ZUd0YWciLCJnZXRBcHAiLCJhbmFseXRpY3NQcm92aWRlciIsIl9nZXRQcm92aWRlciIsImlzSW5pdGlhbGl6ZWQiLCJnZXRJbW1lZGlhdGUiLCJpbml0aWFsaXplQW5hbHl0aWNzIiwiZXhpc3RpbmdJbnN0YW5jZSIsImdldE9wdGlvbnMiLCJpbml0aWFsaXplIiwiaXNTdXBwb3J0ZWQiLCJzZXRDdXJyZW50U2NyZWVuIiwiYW5hbHl0aWNzSW5zdGFuY2UiLCJzY3JlZW5OYW1lIiwiZ3RhZ0Z1bmN0aW9uIiwiZ2xvYmFsIiwic2V0Q3VycmVudFNjcmVlbiQxIiwiZ2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQiLCJjbGllbnRJZCIsImludGVybmFsR2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQiLCJzZXRVc2VySWQiLCJzZXRVc2VySWQkMSIsInNldFVzZXJQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImZsYXRQcm9wZXJ0aWVzIiwic2V0VXNlclByb3BlcnRpZXMkMSIsInNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkIiwiZW5hYmxlZCIsInNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkJDEiLCJzZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzIiwiZXZlbnRQYXJhbXMiLCJsb2dFdmVudCQxIiwic2V0Q29uc2VudCIsIl9yZWdpc3RlckNvbXBvbmVudCIsIkNvbXBvbmVudCIsImNvbnRhaW5lciIsImFuYWx5dGljc09wdGlvbnMiLCJnZXRQcm92aWRlciIsInJlYXNvbiIsInJlZ2lzdGVyVmVyc2lvbiIsIlBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwiLCJnZXRQbGF0Zm9ybUluZm9TdHJpbmciLCJnZXRQcm92aWRlcnMiLCJwcm92aWRlciIsImNvbXBvbmVudCIsImdldENvbXBvbmVudCIsImlzVmVyc2lvblNlcnZpY2VQcm92aWRlciIsImxpYnJhcnkiLCJsb2dTdHJpbmciLCJuYW1lJG8iLCJ2ZXJzaW9uJDEiLCJuYW1lJG4iLCJuYW1lJG0iLCJuYW1lJGwiLCJuYW1lJGsiLCJuYW1lJGoiLCJuYW1lJGkiLCJuYW1lJGgiLCJuYW1lJGciLCJuYW1lJGYiLCJuYW1lJGUiLCJuYW1lJGQiLCJuYW1lJGMiLCJuYW1lJGIiLCJuYW1lJGEiLCJuYW1lJDkiLCJuYW1lJDgiLCJuYW1lJDciLCJuYW1lJDYiLCJuYW1lJDUiLCJuYW1lJDQiLCJuYW1lJDMiLCJuYW1lJDIiLCJuYW1lJDEiLCJERUZBVUxUX0VOVFJZX05BTUUiLCJQTEFURk9STV9MT0dfU1RSSU5HIiwiX2FwcHMiLCJfY29tcG9uZW50cyIsIl9hZGRDb21wb25lbnQiLCJhZGRDb21wb25lbnQiLCJfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJhZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsImNvbXBvbmVudE5hbWUiLCJoZWFydGJlYXRDb250cm9sbGVyIiwidHJpZ2dlckhlYXJ0YmVhdCIsIl9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJjbGVhckluc3RhbmNlIiwiX2NsZWFyQ29tcG9uZW50cyIsImNsZWFyIiwiRmlyZWJhc2VBcHBJbXBsIiwiX2lzRGVsZXRlZCIsIl9vcHRpb25zIiwiX2NvbmZpZyIsIl9uYW1lIiwiX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIl9jb250YWluZXIiLCJjaGVja0Rlc3Ryb3llZCIsInZhbCIsImlzRGVsZXRlZCIsImFwcE5hbWUiLCJyYXdDb25maWciLCJleGlzdGluZ0FwcCIsIkNvbXBvbmVudENvbnRhaW5lciIsIm5ld0FwcCIsImdldEFwcHMiLCJmcm9tIiwiZGVsZXRlQXBwIiwiZGVsZXRlIiwibGlicmFyeUtleU9yTmFtZSIsInZhcmlhbnQiLCJsaWJyYXJ5TWlzbWF0Y2giLCJ2ZXJzaW9uTWlzbWF0Y2giLCJ3YXJuaW5nIiwib25Mb2ciLCJsb2dDYWxsYmFjayIsInNldFVzZXJMb2dIYW5kbGVyIiwic2V0TG9nTGV2ZWwiLCJsb2dMZXZlbCIsIkRCX05BTUUiLCJEQl9WRVJTSU9OIiwiU1RPUkVfTkFNRSIsImRiUHJvbWlzZSIsImdldERiUHJvbWlzZSIsIm9wZW5EQiIsInVwZ3JhZGUiLCJkYiIsIm9sZFZlcnNpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsIm9yaWdpbmFsRXJyb3JNZXNzYWdlIiwid3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIiLCJoZWFydGJlYXRPYmplY3QiLCJ0eCIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJwdXQiLCJjb21wdXRlS2V5IiwiZG9uZSIsImlkYkdldEVycm9yIiwiSGVhcnRiZWF0U2VydmljZUltcGwiLCJfaGVhcnRiZWF0c0NhY2hlIiwiX3N0b3JhZ2UiLCJIZWFydGJlYXRTdG9yYWdlSW1wbCIsIl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlIiwicmVhZCIsImFnZW50IiwiZGF0ZSIsImdldFVUQ0RhdGVTdHJpbmciLCJsYXN0U2VudEhlYXJ0YmVhdERhdGUiLCJoZWFydGJlYXRzIiwic29tZSIsInNpbmdsZURhdGVIZWFydGJlYXQiLCJoYlRpbWVzdGFtcCIsInZhbHVlT2YiLCJvdmVyd3JpdGUiLCJnZXRIZWFydGJlYXRzSGVhZGVyIiwiaGVhcnRiZWF0c1RvU2VuZCIsInVuc2VudEVudHJpZXMiLCJoZWFydGJlYXRzQ2FjaGUiLCJtYXhTaXplIiwiaGVhcnRiZWF0RW50cnkiLCJoYiIsImRhdGVzIiwiY291bnRCeXRlcyIsInBvcCIsImV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyIiwiaGVhZGVyU3RyaW5nIiwidG9JU09TdHJpbmciLCJfY2FuVXNlSW5kZXhlZERCUHJvbWlzZSIsInJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2siLCJyZWFkSGVhcnRiZWF0c0Zyb21JbmRleGVkREIiLCJoZWFydGJlYXRzT2JqZWN0IiwiZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0IiwiYWRkIiwiaW5zdGFuY2VGYWN0b3J5IiwibXVsdGlwbGVJbnN0YW5jZXMiLCJzZXJ2aWNlUHJvcHMiLCJpbnN0YW50aWF0aW9uTW9kZSIsIm9uSW5zdGFuY2VDcmVhdGVkIiwic2V0SW5zdGFudGlhdGlvbk1vZGUiLCJtb2RlIiwic2V0TXVsdGlwbGVJbnN0YW5jZXMiLCJzZXRTZXJ2aWNlUHJvcHMiLCJwcm9wcyIsInNldEluc3RhbmNlQ3JlYXRlZENhbGxiYWNrIiwiUHJvdmlkZXIiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZXNEZWZlcnJlZCIsImluc3RhbmNlc09wdGlvbnMiLCJvbkluaXRDYWxsYmFja3MiLCJpZGVudGlmaWVyIiwibm9ybWFsaXplZElkZW50aWZpZXIiLCJub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIiLCJkZWZlcnJlZCIsInNob3VsZEF1dG9Jbml0aWFsaXplIiwiZ2V0T3JJbml0aWFsaXplU2VydmljZSIsInNldENvbXBvbmVudCIsImlzQ29tcG9uZW50RWFnZXIiLCJpbnN0YW5jZURlZmVycmVkIiwic2VydmljZXMiLCJJTlRFUk5BTCIsImlzQ29tcG9uZW50U2V0Iiwib3B0cyIsIm9uSW5pdCIsImV4aXN0aW5nQ2FsbGJhY2tzIiwiU2V0IiwiaW52b2tlT25Jbml0Q2FsbGJhY2tzIiwiY2FsbGJhY2tzIiwicHJvdmlkZXJzIiwiUEVORElOR19USU1FT1VUX01TIiwiUEFDS0FHRV9WRVJTSU9OIiwiSU5URVJOQUxfQVVUSF9WRVJTSU9OIiwiSU5TVEFMTEFUSU9OU19BUElfVVJMIiwiVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIiLCJFUlJPUl9ERVNDUklQVElPTl9NQVAiLCJpc1NlcnZlckVycm9yIiwiZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50IiwiZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UiLCJyZXF1ZXN0U3RhdHVzIiwiZXhwaXJlc0luIiwicmVzcG9uc2VFeHBpcmVzSW4iLCJjcmVhdGlvblRpbWUiLCJnZXRFcnJvckZyb21SZXNwb25zZSIsInJlcXVlc3ROYW1lIiwiZXJyb3JEYXRhIiwic2VydmVyQ29kZSIsInNlcnZlck1lc3NhZ2UiLCJzZXJ2ZXJTdGF0dXMiLCJnZXRIZWFkZXJzV2l0aEF1dGgiLCJhcHBDb25maWciLCJyZWZyZXNoVG9rZW4iLCJhcHBlbmQiLCJnZXRBdXRob3JpemF0aW9uSGVhZGVyIiwicmV0cnlJZlNlcnZlckVycm9yIiwic2xlZXAiLCJtcyIsIlZBTElEX0ZJRF9QQVRURVJOIiwiSU5WQUxJRF9GSUQiLCJnZW5lcmF0ZUZpZCIsImZpZEJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImI2NFN0cmluZyIsImFycmF5Iiwic3Vic3RyIiwiZW5jb2RlIiwiZ2V0S2V5IiwiZmlkQ2hhbmdlQ2FsbGJhY2tzIiwiZmlkQ2hhbmdlZCIsImNhbGxGaWRDaGFuZ2VDYWxsYmFja3MiLCJjaGFubmVsIiwiZ2V0QnJvYWRjYXN0Q2hhbm5lbCIsImNsb3NlQnJvYWRjYXN0Q2hhbm5lbCIsImJyb2FkY2FzdEZpZENoYW5nZSIsImJyb2FkY2FzdENoYW5uZWwiLCJCcm9hZGNhc3RDaGFubmVsIiwib25tZXNzYWdlIiwiREFUQUJBU0VfTkFNRSIsIkRBVEFCQVNFX1ZFUlNJT04iLCJPQkpFQ1RfU1RPUkVfTkFNRSIsIm9sZFZhbHVlIiwicmVtb3ZlIiwidXBkYXRlRm4iLCJzdG9yZSIsIm5ld1ZhbHVlIiwiZ2V0SW5zdGFsbGF0aW9uRW50cnkiLCJyZWdpc3RyYXRpb25Qcm9taXNlIiwiaW5zdGFsbGF0aW9uRW50cnkiLCJvbGRFbnRyeSIsImVudHJ5IiwicmVnaXN0cmF0aW9uU3RhdHVzIiwiY2xlYXJUaW1lZE91dFJlcXVlc3QiLCJ1cGRhdGVPckNyZWF0ZUluc3RhbGxhdGlvbkVudHJ5IiwiZW50cnlXaXRoUHJvbWlzZSIsImluUHJvZ3Jlc3NFbnRyeSIsInJlZ2lzdHJhdGlvblRpbWUiLCJyZWdpc3RlcmVkSW5zdGFsbGF0aW9uRW50cnkiLCJoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIiLCJlbmRwb2ludCIsImhlYXJ0YmVhdFNlcnZpY2UiLCJoZWFydGJlYXRzSGVhZGVyIiwiYm9keSIsImF1dGhWZXJzaW9uIiwic2RrVmVyc2lvbiIsIm9rIiwicmVzcG9uc2VWYWx1ZSIsImF1dGhUb2tlbiIsImNyZWF0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJyZWdpc3Rlckluc3RhbGxhdGlvbiIsIndhaXRVbnRpbEZpZFJlZ2lzdHJhdGlvbiIsInRyaWdnZXJSZWdpc3RyYXRpb25JZk5lY2Vzc2FyeSIsInVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJnZW5lcmF0ZUF1dGhUb2tlblJlcXVlc3QiLCJnZXRHZW5lcmF0ZUF1dGhUb2tlbkVuZHBvaW50IiwiaW5zdGFsbGF0aW9uIiwicmVmcmVzaEF1dGhUb2tlbiIsImZvcmNlUmVmcmVzaCIsInRva2VuUHJvbWlzZSIsImlzRW50cnlSZWdpc3RlcmVkIiwib2xkQXV0aFRva2VuIiwiaXNBdXRoVG9rZW5FeHBpcmVkIiwiaXNBdXRoVG9rZW5WYWxpZCIsInVwZGF0ZUF1dGhUb2tlblJlcXVlc3QiLCJ3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0IiwiaW5Qcm9ncmVzc0F1dGhUb2tlbiIsInJlcXVlc3RUaW1lIiwibWFrZUF1dGhUb2tlblJlcXVlc3RJblByb2dyZXNzRW50cnkiLCJ1cGRhdGVkSW5zdGFsbGF0aW9uRW50cnkiLCJmZXRjaEF1dGhUb2tlbkZyb21TZXJ2ZXIiLCJpbnN0YWxsYXRpb25zSW1wbCIsImdldFRva2VuIiwiY29tcGxldGVJbnN0YWxsYXRpb25SZWdpc3RyYXRpb24iLCJkZWxldGVJbnN0YWxsYXRpb25SZXF1ZXN0IiwiZ2V0RGVsZXRlRW5kcG9pbnQiLCJkZWxldGVJbnN0YWxsYXRpb25zIiwib25JZENoYW5nZSIsImNhbGxiYWNrU2V0IiwiYWRkQ2FsbGJhY2siLCJyZW1vdmVDYWxsYmFjayIsImdldEluc3RhbGxhdGlvbnMiLCJnZXRNaXNzaW5nVmFsdWVFcnJvciIsInZhbHVlTmFtZSIsIklOU1RBTExBVElPTlNfTkFNRSIsInB1YmxpY0ZhY3RvcnkiLCJjb25maWdLZXlzIiwia2V5TmFtZSIsImV4dHJhY3RBcHBDb25maWciLCJpbnRlcm5hbEZhY3RvcnkiLCJibG9ja2VkIiwiYmxvY2tpbmciLCJ0ZXJtaW5hdGVkIiwib3BlblByb21pc2UiLCJ3IiwibmV3VmVyc2lvbiIsImRlbGV0ZURCIiwicmVhZE1ldGhvZHMiLCJ3cml0ZU1ldGhvZHMiLCJjYWNoZWRNZXRob2RzIiwiZ2V0TWV0aG9kIiwiSURCRGF0YWJhc2UiLCJ0YXJnZXRGdW5jTmFtZSIsInVzZUluZGV4IiwiaXNXcml0ZSIsIklEQkluZGV4IiwiSURCT2JqZWN0U3RvcmUiLCJzdG9yZU5hbWUiLCJzaGlmdCIsIm9sZFRyYXBzIiwicmVjZWl2ZXIiLCJpbnN0YW5jZU9mQW55Iiwib2JqZWN0IiwiY29uc3RydWN0b3JzIiwiaWRiUHJveHlhYmxlVHlwZXMiLCJjdXJzb3JBZHZhbmNlTWV0aG9kcyIsImN1cnNvclJlcXVlc3RNYXAiLCJXZWFrTWFwIiwidHJhbnNhY3Rpb25Eb25lTWFwIiwidHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwIiwidHJhbnNmb3JtQ2FjaGUiLCJyZXZlcnNlVHJhbnNmb3JtQ2FjaGUiLCJpZGJQcm94eVRyYXBzIiwiSURCVHJhbnNhY3Rpb24iLCJvYmplY3RTdG9yZU5hbWVzIiwid3JhcCIsInJlcGxhY2VUcmFwcyIsIndyYXBGdW5jdGlvbiIsImZ1bmMiLCJJREJDdXJzb3IiLCJhZHZhbmNlIiwiY29udGludWUiLCJjb250aW51ZVByaW1hcnlLZXkiLCJhcHBseSIsInVud3JhcCIsInN0b3JlTmFtZXMiLCJ0cmFuc2Zvcm1DYWNoYWJsZVZhbHVlIiwidW5saXN0ZW4iLCJET01FeGNlcHRpb24iLCJjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24iLCJQcm94eSIsIklEQlJlcXVlc3QiLCJzdWNjZXNzIiwicHJvbWlzaWZ5UmVxdWVzdCIsIkxvZ0xldmVsIiwibGV2ZWxTdHJpbmdUb0VudW0iLCJERUJVRyIsIlZFUkJPU0UiLCJJTkZPIiwiV0FSTiIsIkVSUk9SIiwiU0lMRU5UIiwiZGVmYXVsdExvZ0xldmVsIiwiQ29uc29sZU1ldGhvZCIsImRlZmF1bHRMb2dIYW5kbGVyIiwibG9nVHlwZSIsIl9sb2dMZXZlbCIsIl9sb2dIYW5kbGVyIiwiX3VzZXJMb2dIYW5kbGVyIiwiVHlwZUVycm9yIiwibG9nSGFuZGxlciIsInVzZXJMb2dIYW5kbGVyIiwiaW5zdCIsImN1c3RvbUxvZ0xldmVsIiwiYXJnIiwiaWdub3JlZCIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJwb3J0MiIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImRlZmluZVByb3BlcnR5IiwiUmVmZXJlbmNlRXJyb3IiLCJvIiwiaCIsInYiLCJsIiwibSIsIl9fcHJvdG9fXyIsInJlZ2lzdGVyIiwiaW1tZWRpYXRlIiwic2VydmljZVdvcmtlciIsImNvbnRyb2xsZXIiLCJQIiwiUiIsIkIiLCJPIiwib25jZSIsIndhaXRpbmciLCJzY3JpcHRVUkwiLCJzdyIsIndhc1dhaXRpbmdCZWZvcmVSZWdpc3RlciIsIkMiLCJyZWFkeVN0YXRlIiwiZ2V0U1ciLCJtZXNzYWdlU1ciLCJMIiwicGVyZm9ybWFuY2UiLCJtZXRhIiwiaW5zdGFsbGluZyIsInN0YXRlIiwiaXNVcGRhdGUiLCJEIiwiVCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmVyc2lvbkluZm9FbGVtZW50IiwiaXNfY2FjaGVkIiwicHJvZ3Jlc3NCYXIiLCJwcm9ncmVzc0JhckNvbnRhaW5lciIsInNjZW5lSGFuZGxlciIsImxvYWRpbmdFbGVtZW50IiwiZGF0YU1vZGFsIiwic3RhcnRTZXNzaW9uVGltZSIsImluaXRpYWxpemVDYWNoZWREYXRhIiwiaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UiLCJoYW5kbGVCZWZvcmVVbmxvYWQiLCJoYW5kbGVSZXNpemUiLCJsb2FkQW5kQ2FjaGVGb250IiwicHJlbG9hZEdhbWVBdWRpb3MiLCJoYW5kbGVMb2FkaW5nU2NyZWVuIiwic2V0dXBDYW52YXMiLCJjcmVhdGVEYXRhTW9kYWwiLCJnbG9iYWxJbml0aWFsaXphdGlvbiIsImxvZ1Nlc3Npb25TdGFydEZpcmViYXNlRXZlbnQiLCJoYW5kbGVDYWNoZWRTY2VuYXJpbyIsInJlZ2lzdGVyV29ya2JveCIsImxhc3RTZXNzaW9uRW5kVGltZSIsInBhcnNlZFRpbWVzdGFtcCIsImlzTmFOIiwicm91bmRlZERheXNTaW5jZUxhc3QiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsInNlc3Npb25TdGFydERhdGEiLCJkYXlzX3NpbmNlX2xhc3QiLCJsb2dTZXNzaW9uRW5kRmlyZWJhc2VFdmVudCIsInNlc3Npb25FbmREYXRhIiwic3RvcmVkRGF0YSIsImZvbnROYW1lIiwiZm9udFBhdGgiLCJjYWNoZSIsImNhY2hlcyIsImZvbnRSZXNwb25zZSIsImZvbnRCbG9iIiwiYmxvYiIsIlJlc3BvbnNlIiwiRm9udEZhY2UiLCJsb2FkIiwiZm9udHMiLCJ3YiIsIldvcmtib3giLCJyZWFkeSIsIm5ld0NvbnRlbnRGaWxlRGF0YSIsImFoZWFkQ29udGVudFZlcnNpb24iLCJjYWNoZWRWZXJzaW9uIiwiY2FjaGVkSXRlbSIsIm5ld0NhY2hlZEl0ZW0iLCJyZW1vdmVJdGVtIiwiaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlIiwiaW5uZXJIZWlnaHQiLCJzY3JlZW4iLCJpbm5lcldpZHRoIiwiUmlnaHRUb0xlZnQiLCJhYm91dENvbXBhbnkiLCJkZXNjcmlwdGlvblRleHQiLCJ1cGRhdGVWZXJzaW9uSW5mb0VsZW1lbnQiLCJyZWluaXRpYWxpemVTY2VuZUhhbmRsZXIiLCJwYXNzaW5nRGF0YVRvQ29udGFpbmVyIiwiQW5kcm9pZCIsImNhY2hlZFN0YXR1cyIsInNldENvbnRhaW5lckFwcE9yaWVudGF0aW9uIiwiY29uZmlybSIsInJlbG9hZCIsImhhbmRsZUxvYWRpbmdNZXNzYWdlIiwiZG93bmxvYWRfY29tcGxldGVkIiwibXNnIiwiYXVkaW9VcmxzIiwicHJlbG9hZFByb21pc2VzIl0sInNvdXJjZVJvb3QiOiIifQ==