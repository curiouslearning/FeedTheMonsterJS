/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/@firebase/util/dist/index.esm2017.js":(e,t,x)=>{x.r(t),x.d(t,{CONSTANTS:()=>a,DecodeBase64StringError:()=>o,Deferred:()=>v,ErrorFactory:()=>z,FirebaseError:()=>M,MAX_VALUE_MILLIS:()=>pe,RANDOM_FACTOR:()=>ge,Sha1:()=>xe,areCookiesEnabled:()=>O,assert:()=>i,assertionError:()=>s,async:()=>se,base64:()=>n,base64Decode:()=>d,base64Encode:()=>c,base64urlEncodeWithoutPadding:()=>r,calculateBackoffMillis:()=>me,contains:()=>X,createMockUserToken:()=>w,createSubscribe:()=>ae,decode:()=>U,deepCopy:()=>l,deepEqual:()=>K,deepExtend:()=>h,errorPrefix:()=>oe,extractQuerystring:()=>te,getDefaultAppConfig:()=>g,getDefaultEmulatorHost:()=>u,getDefaultEmulatorHostnameAndPort:()=>p,getDefaults:()=>b,getExperimentalSetting:()=>m,getGlobal:()=>f,getModularInstance:()=>we,getUA:()=>S,isAdmin:()=>V,isBrowser:()=>E,isBrowserExtension:()=>T,isElectron:()=>P,isEmpty:()=>$,isIE:()=>A,isIndexedDBAvailable:()=>D,isMobileCordova:()=>y,isNode:()=>I,isNodeSdk:()=>k,isReactNative:()=>L,isSafari:()=>N,isUWP:()=>C,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>F,map:()=>q,ordinal:()=>ve,promiseWithTimeout:()=>J,querystring:()=>Q,querystringDecode:()=>ee,safeGet:()=>Y,stringLength:()=>he,stringToByteArray:()=>le,stringify:()=>R,uuidv4:()=>fe,validateArgCount:()=>ne,validateCallback:()=>re,validateContextObject:()=>de,validateIndexedDBOpenable:()=>B,validateNamespace:()=>ce});const a={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},i=function(e,t){if(!e)throw s(t)},s=function(e){return new Error("Firebase Database ("+a.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},_=function(e){const t=[];let x=0;for(let a=0;a<e.length;a++){let i=e.charCodeAt(a);i<128?t[x++]=i:i<2048?(t[x++]=i>>6|192,t[x++]=63&i|128):55296==(64512&i)&&a+1<e.length&&56320==(64512&e.charCodeAt(a+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++a)),t[x++]=i>>18|240,t[x++]=i>>12&63|128,t[x++]=i>>6&63|128,t[x++]=63&i|128):(t[x++]=i>>12|224,t[x++]=i>>6&63|128,t[x++]=63&i|128)}return t},n={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const x=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,a=[];for(let t=0;t<e.length;t+=3){const i=e[t],s=t+1<e.length,_=s?e[t+1]:0,n=t+2<e.length,o=n?e[t+2]:0,c=i>>2,r=(3&i)<<4|_>>4;let d=(15&_)<<2|o>>6,l=63&o;n||(l=64,s||(d=64)),a.push(x[c],x[r],x[d],x[l])}return a.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(_(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let x=0,a=0;for(;x<e.length;){const i=e[x++];if(i<128)t[a++]=String.fromCharCode(i);else if(i>191&&i<224){const s=e[x++];t[a++]=String.fromCharCode((31&i)<<6|63&s)}else if(i>239&&i<365){const s=((7&i)<<18|(63&e[x++])<<12|(63&e[x++])<<6|63&e[x++])-65536;t[a++]=String.fromCharCode(55296+(s>>10)),t[a++]=String.fromCharCode(56320+(1023&s))}else{const s=e[x++],_=e[x++];t[a++]=String.fromCharCode((15&i)<<12|(63&s)<<6|63&_)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const x=t?this.charToByteMapWebSafe_:this.charToByteMap_,a=[];for(let t=0;t<e.length;){const i=x[e.charAt(t++)],s=t<e.length?x[e.charAt(t)]:0;++t;const _=t<e.length?x[e.charAt(t)]:64;++t;const n=t<e.length?x[e.charAt(t)]:64;if(++t,null==i||null==s||null==_||null==n)throw new o;const c=i<<2|s>>4;if(a.push(c),64!==_){const e=s<<4&240|_>>2;if(a.push(e),64!==n){const e=_<<6&192|n;a.push(e)}}}return a},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class o extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const c=function(e){const t=_(e);return n.encodeByteArray(t,!0)},r=function(e){return c(e).replace(/\./g,"")},d=function(e){try{return n.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function l(e){return h(void 0,e)}function h(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const x in t)t.hasOwnProperty(x)&&"__proto__"!==x&&(e[x]=h(e[x],t[x]));return e}function f(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==x.g)return x.g;throw new Error("Unable to locate global object.")}const b=()=>{try{return f().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&d(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},u=e=>{var t,x;return null===(x=null===(t=b())||void 0===t?void 0:t.emulatorHosts)||void 0===x?void 0:x[e]},p=e=>{const t=u(e);if(!t)return;const x=t.lastIndexOf(":");if(x<=0||x+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const a=parseInt(t.substring(x+1),10);return"["===t[0]?[t.substring(1,x-1),a]:[t.substring(0,x),a]},g=()=>{var e;return null===(e=b())||void 0===e?void 0:e.config},m=e=>{var t;return null===(t=b())||void 0===t?void 0:t[`_${e}`]};class v{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,x)=>{t?this.reject(t):this.resolve(x),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,x))}}}function w(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const x=t||"demo-project",a=e.iat||0,i=e.sub||e.user_id;if(!i)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const s=Object.assign({iss:`https://securetoken.google.com/${x}`,aud:x,iat:a,exp:a+3600,auth_time:a,sub:i,user_id:i,firebase:{sign_in_provider:"custom",identities:{}}},e);return[r(JSON.stringify({alg:"none",type:"JWT"})),r(JSON.stringify(s)),""].join(".")}function S(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function y(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(S())}function I(){var e;const t=null===(e=b())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(x.g.process)}catch(e){return!1}}function E(){return"object"==typeof self&&self.self===self}function T(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function L(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function P(){return S().indexOf("Electron/")>=0}function A(){const e=S();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function C(){return S().indexOf("MSAppHost/")>=0}function k(){return!0===a.NODE_CLIENT||!0===a.NODE_ADMIN}function N(){return!I()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function D(){try{return"object"==typeof indexedDB}catch(e){return!1}}function B(){return new Promise(((e,t)=>{try{let x=!0;const a="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(a);i.onsuccess=()=>{i.result.close(),x||self.indexedDB.deleteDatabase(a),e(!0)},i.onupgradeneeded=()=>{x=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}function O(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class M extends Error{constructor(e,t,x){super(t),this.code=e,this.customData=x,this.name="FirebaseError",Object.setPrototypeOf(this,M.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(e,t,x){this.service=e,this.serviceName=t,this.errors=x}create(e,...t){const x=t[0]||{},a=`${this.service}/${e}`,i=this.errors[e],s=i?function(e,t){return e.replace(j,((e,x)=>{const a=t[x];return null!=a?String(a):`<${x}?>`}))}(i,x):"Error",_=`${this.serviceName}: ${s} (${a}).`;return new M(a,_,x)}}const j=/\{\$([^}]+)}/g;function F(e){return JSON.parse(e)}function R(e){return JSON.stringify(e)}const U=function(e){let t={},x={},a={},i="";try{const s=e.split(".");t=F(d(s[0])||""),x=F(d(s[1])||""),i=s[2],a=x.d||{},delete x.d}catch(e){}return{header:t,claims:x,data:a,signature:i}},H=function(e){const t=U(e).claims,x=Math.floor((new Date).getTime()/1e3);let a=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?a=t.nbf:t.hasOwnProperty("iat")&&(a=t.iat),i=t.hasOwnProperty("exp")?t.exp:a+86400),!!x&&!!a&&!!i&&x>=a&&x<=i},G=function(e){const t=U(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},W=function(e){const t=U(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},V=function(e){const t=U(e).claims;return"object"==typeof t&&!0===t.admin};function X(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Y(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function $(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function q(e,t,x){const a={};for(const i in e)Object.prototype.hasOwnProperty.call(e,i)&&(a[i]=t.call(x,e[i],i,e));return a}function K(e,t){if(e===t)return!0;const x=Object.keys(e),a=Object.keys(t);for(const i of x){if(!a.includes(i))return!1;const x=e[i],s=t[i];if(Z(x)&&Z(s)){if(!K(x,s))return!1}else if(x!==s)return!1}for(const e of a)if(!x.includes(e))return!1;return!0}function Z(e){return null!==e&&"object"==typeof e}function J(e,t=2e3){const x=new v;return setTimeout((()=>x.reject("timeout!")),t),e.then(x.resolve,x.reject),x.promise}function Q(e){const t=[];for(const[x,a]of Object.entries(e))Array.isArray(a)?a.forEach((e=>{t.push(encodeURIComponent(x)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(x)+"="+encodeURIComponent(a));return t.length?"&"+t.join("&"):""}function ee(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[x,a]=e.split("=");t[decodeURIComponent(x)]=decodeURIComponent(a)}})),t}function te(e){const t=e.indexOf("?");if(!t)return"";const x=e.indexOf("#",t);return e.substring(t,x>0?x:void 0)}class xe{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const x=this.W_;if("string"==typeof e)for(let a=0;a<16;a++)x[a]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let a=0;a<16;a++)x[a]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=x[e-3]^x[e-8]^x[e-14]^x[e-16];x[e]=4294967295&(t<<1|t>>>31)}let a,i,s=this.chain_[0],_=this.chain_[1],n=this.chain_[2],o=this.chain_[3],c=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(a=o^_&(n^o),i=1518500249):(a=_^n^o,i=1859775393):e<60?(a=_&n|o&(_|n),i=2400959708):(a=_^n^o,i=3395469782);const t=(s<<5|s>>>27)+a+c+i+x[e]&4294967295;c=o,o=n,n=4294967295&(_<<30|_>>>2),_=s,s=t}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+_&4294967295,this.chain_[2]=this.chain_[2]+n&4294967295,this.chain_[3]=this.chain_[3]+o&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const x=t-this.blockSize;let a=0;const i=this.buf_;let s=this.inbuf_;for(;a<t;){if(0===s)for(;a<=x;)this.compress_(e,a),a+=this.blockSize;if("string"==typeof e){for(;a<t;)if(i[s]=e.charCodeAt(a),++s,++a,s===this.blockSize){this.compress_(i),s=0;break}}else for(;a<t;)if(i[s]=e[a],++s,++a,s===this.blockSize){this.compress_(i),s=0;break}}this.inbuf_=s,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let x=0;for(let t=0;t<5;t++)for(let a=24;a>=0;a-=8)e[x]=this.chain_[t]>>a&255,++x;return e}}function ae(e,t){const x=new ie(e,t);return x.subscribe.bind(x)}class ie{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,x){let a;if(void 0===e&&void 0===t&&void 0===x)throw new Error("Missing Observer.");a=function(e,t){if("object"!=typeof e||null===e)return!1;for(const x of t)if(x in e&&"function"==typeof e[x])return!0;return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:x},void 0===a.next&&(a.next=_e),void 0===a.error&&(a.error=_e),void 0===a.complete&&(a.complete=_e);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?a.error(this.finalError):a.complete()}catch(e){}})),this.observers.push(a),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function se(e,t){return(...x)=>{Promise.resolve(!0).then((()=>{e(...x)})).catch((e=>{t&&t(e)}))}}function _e(){}const ne=function(e,t,x,a){let i;if(a<t?i="at least "+t:a>x&&(i=0===x?"none":"no more than "+x),i){throw new Error(e+" failed: Was called with "+a+(1===a?" argument.":" arguments.")+" Expects "+i+".")}};function oe(e,t){return`${e} failed: ${t} argument `}function ce(e,t,x){if((!x||t)&&"string"!=typeof t)throw new Error(oe(e,"namespace")+"must be a valid firebase namespace.")}function re(e,t,x,a){if((!a||x)&&"function"!=typeof x)throw new Error(oe(e,t)+"must be a valid function.")}function de(e,t,x,a){if((!a||x)&&("object"!=typeof x||null===x))throw new Error(oe(e,t)+"must be a valid context object.")}const le=function(e){const t=[];let x=0;for(let a=0;a<e.length;a++){let s=e.charCodeAt(a);if(s>=55296&&s<=56319){const t=s-55296;a++,i(a<e.length,"Surrogate pair missing trail surrogate.");s=65536+(t<<10)+(e.charCodeAt(a)-56320)}s<128?t[x++]=s:s<2048?(t[x++]=s>>6|192,t[x++]=63&s|128):s<65536?(t[x++]=s>>12|224,t[x++]=s>>6&63|128,t[x++]=63&s|128):(t[x++]=s>>18|240,t[x++]=s>>12&63|128,t[x++]=s>>6&63|128,t[x++]=63&s|128)}return t},he=function(e){let t=0;for(let x=0;x<e.length;x++){const a=e.charCodeAt(x);a<128?t++:a<2048?t+=2:a>=55296&&a<=56319?(t+=4,x++):t+=3}return t},fe=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},be=1e3,ue=2,pe=144e5,ge=.5;function me(e,t=be,x=ue){const a=t*Math.pow(x,e),i=Math.round(ge*a*(Math.random()-.5)*2);return Math.min(pe,a+i)}function ve(e){return Number.isFinite(e)?e+function(e){e=Math.abs(e);const t=e%100;if(t>=10&&t<=20)return"th";const x=e%10;if(1===x)return"st";if(2===x)return"nd";if(3===x)return"rd";return"th"}(e):`${e}`}function we(e){return e&&e._delegate?e._delegate:e}},"./src/Firebase/base-firebase-integration.ts":(e,t,x)=>{x.r(t),x.d(t,{BaseFirebaseIntegration:()=>_});var a=x("./node_modules/firebase/app/dist/esm/index.esm.js"),i=x("./node_modules/firebase/analytics/dist/esm/index.esm.js"),s=x("./src/Firebase/firebase-config.ts");class _{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(e,t){try{(0,i.logEvent)(this.analytics,e,t)}catch(e){console.error(...o("1966754438_15_12_15_69_11","Error while logging custom event:",e))}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,i.logEvent)(this.analytics,"session_end")}catch(e){console.error(...o("1966754438_24_12_24_74_11","Error while logging session_end event:",e))}}initializeFirebase(){try{this.firebaseApp=(0,a.initializeApp)(s.firebaseConfig),this.analytics=(0,i.getAnalytics)(this.firebaseApp)}catch(e){console.error(...o("1966754438_32_12_32_70_11","Error while initializing Firebase:",e))}}}function n(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfb4f89=_0x3ff9;(function(_0x33ffce,_0x4776aa){var _0x2ac2d2=_0x3ff9,_0x6e0212=_0x33ffce();while(!![]){try{var _0x566fe1=-parseInt(_0x2ac2d2(0x122))/0x1*(-parseInt(_0x2ac2d2(0x16a))/0x2)+-parseInt(_0x2ac2d2(0x14a))/0x3+-parseInt(_0x2ac2d2(0xc9))/0x4*(-parseInt(_0x2ac2d2(0x15b))/0x5)+-parseInt(_0x2ac2d2(0x127))/0x6+-parseInt(_0x2ac2d2(0x187))/0x7*(parseInt(_0x2ac2d2(0x109))/0x8)+-parseInt(_0x2ac2d2(0x126))/0x9*(-parseInt(_0x2ac2d2(0x1ba))/0xa)+-parseInt(_0x2ac2d2(0x12a))/0xb*(parseInt(_0x2ac2d2(0x11b))/0xc);if(_0x566fe1===_0x4776aa)break;else _0x6e0212['push'](_0x6e0212['shift']());}catch(_0x2c6c1d){_0x6e0212['push'](_0x6e0212['shift']());}}}(_0x26ed,0xd9405));function _0x26ed(){var _0x251fed=['onerror','_inNextEdge','date','close','log','funcName','allStrLength',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.360\\\\node_modules\",'[object\\x20Date]','number','bind','gateway.docker.internal','boolean','_addLoadNode','prototype','_addProperty','onclose','_quotedRegExp','_regExpToString','split','dockerizedApp','enumerable','Map','url','_Symbol','valueOf','noFunctions','_console_ninja_session','stringify','_treeNodePropertiesAfterFullValue','totalStrLength','length','onmessage','match','default','_disposeWebsocket','sortProps','_connectAttemptCount','','unref','serialize','_setNodePermissions','unknown','type','_isNegativeZero','string','toUpperCase','performance','expId','getWebSocketClass','get','strLength','16bvnJMf','forEach','ws/index.js','127.0.0.1','autoExpandPreviousObjects','constructor','_hasSymbolPropertyOnItsPath','autoExpandPropertyCount','_cleanNode','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','_sortProps','args','cappedProps','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','count','send','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','2067276DVozTZ','call','timeStamp','now','stackTraceLimit','function','_isArray','7Qbqraw','eventReceivedCallback','negativeZero','_hasMapOnItsPath','1314JSCrfP','2095692ubLLBJ','hits','getOwnPropertyNames','77NfTUuK','_setNodeId','_inBrowser','_ws','_getOwnPropertySymbols','Error','_dateToString','Number','edge','_capIfString','_allowedToConnectOnSend','message','_keyStrRegExp','String','expressionsToEvaluate','next.js','1','pathToFileURL','_type','_isPrimitiveWrapperType','map','_WebSocketClass','_isUndefined','_numberRegExp','cappedElements','object','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_WebSocket','autoExpandLimit','[object\\x20Set]','endsWith','remix','1592253yMPyuy','path','concat','some','toString','_additionalMetadata','_console_ninja','_getOwnPropertyNames','_objectToString','https://tinyurl.com/37x8b79t','Boolean','_consoleNinjaAllowedToStart','coverage','ws://','reload','depth','global','469835nWFvog','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','_HTMLAllCollection','_isSet','_addFunctionsNode','logger\\x20websocket\\x20error','_blacklistedProperty','pop','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','_isMap','hrtime','replace','_undefined','_treeNodePropertiesBeforeFullValue','env','482968kAQAhF','root_exp','_connected','join','includes','Symbol','process','push','isArray','_isPrimitiveType','console','positiveInfinity','_p_length','_reconnectTimeout','test','perf_hooks','_processTreeNodeResult','host','error','props','sort','bigint','[object\\x20Array]','elapsed','node','capped','reduceLimits','NEGATIVE_INFINITY','create','846013ubODRn','level','origin','astro','substr','_ninjaIgnoreNextError','_attemptToReconnectShortly','_setNodeExpressionPath','_webSocketErrorDocsLink','getOwnPropertySymbols','onopen','POSITIVE_INFINITY','port','Buffer','_sendErrorMessage','_setNodeExpandableState','','resolveGetters','toLowerCase','parse','Set','_connecting','catch','current','_getOwnPropertyDescriptor','value','time','autoExpand','charAt','getOwnPropertyDescriptor','isExpressionToEvaluate',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'array','hostname','index','warn','trace','...','unshift','_connectToHostNow','[object\\x20Map]','stack','\\x20server','data','getPrototypeOf','null','_property','startsWith','autoExpandMaxDepth','fromCharCode','rootExpression','85290EXqTYH','[object\\x20BigInt]','_allowedToSend','_setNodeLabel','root_exp_id','\\x20browser','HTMLAllCollection','name','disabledTrace','readyState','_propertyName','_p_','symbol','undefined','elements','12iCnRll','_setNodeQueryPath','then','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','WebSocket','parent','NEXT_RUNTIME','_addObjectProperty','nodeModules','versions','1.0.0','indexOf'];_0x26ed=function(){return _0x251fed;};return _0x26ed();}var K=Object[_0xfb4f89(0x186)],Q=Object['defineProperty'],G=Object[_0xfb4f89(0x1a4)],ee=Object[_0xfb4f89(0x129)],te=Object[_0xfb4f89(0x1b3)],ne=Object[_0xfb4f89(0xe3)]['hasOwnProperty'],re=(_0x58bc7c,_0x4ddd0d,_0x456630,_0x3f0baa)=>{var _0x4ea018=_0xfb4f89;if(_0x4ddd0d&&typeof _0x4ddd0d==_0x4ea018(0x143)||typeof _0x4ddd0d==_0x4ea018(0x120)){for(let _0x4d5349 of ee(_0x4ddd0d))!ne['call'](_0x58bc7c,_0x4d5349)&&_0x4d5349!==_0x456630&&Q(_0x58bc7c,_0x4d5349,{'get':()=>_0x4ddd0d[_0x4d5349],'enumerable':!(_0x3f0baa=G(_0x4ddd0d,_0x4d5349))||_0x3f0baa[_0x4ea018(0xea)]});}return _0x58bc7c;},V=(_0x1cfc08,_0x281930,_0x19747b)=>(_0x19747b=_0x1cfc08!=null?K(te(_0x1cfc08)):{},re(_0x281930||!_0x1cfc08||!_0x1cfc08['__es'+'Module']?Q(_0x19747b,_0xfb4f89(0xf7),{'value':_0x1cfc08,'enumerable':!0x0}):_0x19747b,_0x1cfc08)),Z=class{constructor(_0x27da3d,_0x33c83f,_0x51422d,_0x1bd27f,_0x1f1628,_0x2c27f9){var _0x30bae0=_0xfb4f89,_0xdb2aee,_0x215b6b,_0x3330a3,_0x5417b5;this['global']=_0x27da3d,this[_0x30bae0(0x17b)]=_0x33c83f,this[_0x30bae0(0x193)]=_0x51422d,this[_0x30bae0(0xd1)]=_0x1bd27f,this['dockerizedApp']=_0x1f1628,this[_0x30bae0(0x123)]=_0x2c27f9,this['_allowedToSend']=!0x0,this[_0x30bae0(0x134)]=!0x0,this[_0x30bae0(0x16c)]=!0x1,this[_0x30bae0(0x19c)]=!0x1,this[_0x30bae0(0xd6)]=((_0x215b6b=(_0xdb2aee=_0x27da3d[_0x30bae0(0x170)])==null?void 0x0:_0xdb2aee[_0x30bae0(0x169)])==null?void 0x0:_0x215b6b[_0x30bae0(0xcf)])===_0x30bae0(0x132),this[_0x30bae0(0x12c)]=!((_0x5417b5=(_0x3330a3=this[_0x30bae0(0x15a)]['process'])==null?void 0x0:_0x3330a3[_0x30bae0(0xd2)])!=null&&_0x5417b5['node'])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x30bae0(0xfa)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x30bae0(0x18f)]=_0x30bae0(0x153),this[_0x30bae0(0x195)]=(this[_0x30bae0(0x12c)]?_0x30bae0(0x163):_0x30bae0(0x113))+this['_webSocketErrorDocsLink'];}async['getWebSocketClass'](){var _0x5afa9b=_0xfb4f89,_0x2d9f96,_0x565058;if(this[_0x5afa9b(0x13f)])return this['_WebSocketClass'];let _0x2e12c3;if(this[_0x5afa9b(0x12c)]||this[_0x5afa9b(0xd6)])_0x2e12c3=this[_0x5afa9b(0x15a)][_0x5afa9b(0xcd)];else{if((_0x2d9f96=this[_0x5afa9b(0x15a)]['process'])!=null&&_0x2d9f96[_0x5afa9b(0x145)])_0x2e12c3=(_0x565058=this['global'][_0x5afa9b(0x170)])==null?void 0x0:_0x565058[_0x5afa9b(0x145)];else try{let _0x55a8a7=await import(_0x5afa9b(0x14b));_0x2e12c3=(await import((await import(_0x5afa9b(0xec)))[_0x5afa9b(0x13b)](_0x55a8a7[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],_0x5afa9b(0x10b)))[_0x5afa9b(0x14e)]()))['default'];}catch{try{_0x2e12c3=require(require(_0x5afa9b(0x14b))[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],'ws'));}catch{throw new Error(_0x5afa9b(0x15c));}}}return this[_0x5afa9b(0x13f)]=_0x2e12c3,_0x2e12c3;}[_0xfb4f89(0x1ae)](){var _0x3cad60=_0xfb4f89;this[_0x3cad60(0x19c)]||this[_0x3cad60(0x16c)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this[_0x3cad60(0x134)]=!0x1,this[_0x3cad60(0x19c)]=!0x0,this[_0x3cad60(0xfa)]++,this[_0x3cad60(0x12d)]=new Promise((_0x343abd,_0xba088b)=>{var _0x11311a=_0x3cad60;this[_0x11311a(0x106)]()[_0x11311a(0xcb)](_0xb09450=>{var _0x43fada=_0x11311a;let _0x387749=new _0xb09450(_0x43fada(0x157)+(!this[_0x43fada(0x12c)]&&this[_0x43fada(0xe9)]?_0x43fada(0xe0):this[_0x43fada(0x17b)])+':'+this[_0x43fada(0x193)]);_0x387749['onerror']=()=>{var _0x453cb7=_0x43fada;this['_allowedToSend']=!0x1,this[_0x453cb7(0xf8)](_0x387749),this[_0x453cb7(0x18d)](),_0xba088b(new Error(_0x453cb7(0x160)));},_0x387749[_0x43fada(0x191)]=()=>{var _0xdaf47c=_0x43fada;this[_0xdaf47c(0x12c)]||_0x387749['_socket']&&_0x387749[_0xdaf47c(0x112)][_0xdaf47c(0xfc)]&&_0x387749[_0xdaf47c(0x112)]['unref'](),_0x343abd(_0x387749);},_0x387749[_0x43fada(0xe5)]=()=>{var _0xc56748=_0x43fada;this[_0xc56748(0x134)]=!0x0,this[_0xc56748(0xf8)](_0x387749),this[_0xc56748(0x18d)]();},_0x387749[_0x43fada(0xf5)]=_0x47ed3a=>{var _0x28f580=_0x43fada;try{if(!(_0x47ed3a!=null&&_0x47ed3a[_0x28f580(0x1b2)])||!this[_0x28f580(0x123)])return;let _0x479ee5=JSON[_0x28f580(0x19a)](_0x47ed3a['data']);this[_0x28f580(0x123)](_0x479ee5['method'],_0x479ee5[_0x28f580(0x115)],this[_0x28f580(0x15a)],this[_0x28f580(0x12c)]);}catch{}};})[_0x11311a(0xcb)](_0x13520=>(this['_connected']=!0x0,this['_connecting']=!0x1,this[_0x11311a(0x134)]=!0x1,this[_0x11311a(0xbc)]=!0x0,this[_0x11311a(0xfa)]=0x0,_0x13520))[_0x11311a(0x19d)](_0x18f1a9=>(this[_0x11311a(0x16c)]=!0x1,this[_0x11311a(0x19c)]=!0x1,console[_0x11311a(0x1aa)](_0x11311a(0x144)+this['_webSocketErrorDocsLink']),_0xba088b(new Error(_0x11311a(0x117)+(_0x18f1a9&&_0x18f1a9['message'])))));}));}['_disposeWebsocket'](_0x347259){var _0x55188d=_0xfb4f89;this[_0x55188d(0x16c)]=!0x1,this[_0x55188d(0x19c)]=!0x1;try{_0x347259['onclose']=null,_0x347259[_0x55188d(0xd5)]=null,_0x347259[_0x55188d(0x191)]=null;}catch{}try{_0x347259[_0x55188d(0xc3)]<0x2&&_0x347259[_0x55188d(0xd8)]();}catch{}}['_attemptToReconnectShortly'](){var _0x366627=_0xfb4f89;clearTimeout(this[_0x366627(0x177)]),!(this['_connectAttemptCount']>=this['_maxConnectAttemptCount'])&&(this[_0x366627(0x177)]=setTimeout(()=>{var _0x411b7b=_0x366627,_0x5e8f34;this[_0x411b7b(0x16c)]||this[_0x411b7b(0x19c)]||(this[_0x411b7b(0x1ae)](),(_0x5e8f34=this[_0x411b7b(0x12d)])==null||_0x5e8f34[_0x411b7b(0x19d)](()=>this[_0x411b7b(0x18d)]()));},0x1f4),this['_reconnectTimeout'][_0x366627(0xfc)]&&this[_0x366627(0x177)][_0x366627(0xfc)]());}async[_0xfb4f89(0x119)](_0x23f51e){var _0x337959=_0xfb4f89;try{if(!this['_allowedToSend'])return;this[_0x337959(0x134)]&&this[_0x337959(0x1ae)](),(await this['_ws'])['send'](JSON[_0x337959(0xf1)](_0x23f51e));}catch(_0x5b0fbc){console['warn'](this[_0x337959(0x195)]+':\\x20'+(_0x5b0fbc&&_0x5b0fbc[_0x337959(0x135)])),this[_0x337959(0xbc)]=!0x1,this[_0x337959(0x18d)]();}}};function q(_0x24daeb,_0xb6f519,_0x552a83,_0x4172cf,_0x76dbb7,_0x506843,_0xbf75ac,_0x3ac2c4=ie){var _0x5b9d64=_0xfb4f89;let _0x4b9373=_0x552a83[_0x5b9d64(0xe8)](',')[_0x5b9d64(0x13e)](_0x5dbfe4=>{var _0x66c71b=_0x5b9d64,_0x9e1668,_0x5a37d5,_0x13a0cc,_0x3e3cc6;try{if(!_0x24daeb[_0x66c71b(0xf0)]){let _0x280f70=((_0x5a37d5=(_0x9e1668=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x9e1668['versions'])==null?void 0x0:_0x5a37d5[_0x66c71b(0x182)])||((_0x3e3cc6=(_0x13a0cc=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x13a0cc[_0x66c71b(0x169)])==null?void 0x0:_0x3e3cc6[_0x66c71b(0xcf)])===_0x66c71b(0x132);(_0x76dbb7==='next.js'||_0x76dbb7===_0x66c71b(0x149)||_0x76dbb7===_0x66c71b(0x18a)||_0x76dbb7==='angular')&&(_0x76dbb7+=_0x280f70?_0x66c71b(0x1b1):_0x66c71b(0xbf)),_0x24daeb['_console_ninja_session']={'id':+new Date(),'tool':_0x76dbb7},_0xbf75ac&&_0x76dbb7&&!_0x280f70&&console[_0x66c71b(0xd9)](_0x66c71b(0xcc)+(_0x76dbb7[_0x66c71b(0x1a3)](0x0)[_0x66c71b(0x103)]()+_0x76dbb7[_0x66c71b(0x18b)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x66c71b(0x11a));}let _0x14c600=new Z(_0x24daeb,_0xb6f519,_0x5dbfe4,_0x4172cf,_0x506843,_0x3ac2c4);return _0x14c600[_0x66c71b(0x119)][_0x66c71b(0xdf)](_0x14c600);}catch(_0x9ef8db){return console[_0x66c71b(0x1aa)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0x9ef8db&&_0x9ef8db['message']),()=>{};}});return _0x418120=>_0x4b9373['forEach'](_0x28c9a5=>_0x28c9a5(_0x418120));}function _0x3ff9(_0xe67838,_0x6d1486){var _0x26ed68=_0x26ed();return _0x3ff9=function(_0x3ff920,_0x489329){_0x3ff920=_0x3ff920-0xbb;var _0x3995cc=_0x26ed68[_0x3ff920];return _0x3995cc;},_0x3ff9(_0xe67838,_0x6d1486);}function ie(_0x57727f,_0x4b37c7,_0x14dabd,_0x5b90a9){var _0x440899=_0xfb4f89;_0x5b90a9&&_0x57727f===_0x440899(0x158)&&_0x14dabd['location']['reload']();}function B(_0x26c9ac){var _0x47f085=_0xfb4f89,_0x3ecb7a,_0x47b516;let _0x220806=function(_0x3a020e,_0x53c69a){return _0x53c69a-_0x3a020e;},_0x2108c2;if(_0x26c9ac[_0x47f085(0x104)])_0x2108c2=function(){var _0x337423=_0x47f085;return _0x26c9ac[_0x337423(0x104)][_0x337423(0x11e)]();};else{if(_0x26c9ac[_0x47f085(0x170)]&&_0x26c9ac[_0x47f085(0x170)][_0x47f085(0x165)]&&((_0x47b516=(_0x3ecb7a=_0x26c9ac['process'])==null?void 0x0:_0x3ecb7a[_0x47f085(0x169)])==null?void 0x0:_0x47b516['NEXT_RUNTIME'])!=='edge')_0x2108c2=function(){return _0x26c9ac['process']['hrtime']();},_0x220806=function(_0x341fb3,_0x2c6618){return 0x3e8*(_0x2c6618[0x0]-_0x341fb3[0x0])+(_0x2c6618[0x1]-_0x341fb3[0x1])/0xf4240;};else try{let {performance:_0x416a52}=require(_0x47f085(0x179));_0x2108c2=function(){var _0x48150f=_0x47f085;return _0x416a52[_0x48150f(0x11e)]();};}catch{_0x2108c2=function(){return+new Date();};}}return{'elapsed':_0x220806,'timeStamp':_0x2108c2,'now':()=>Date['now']()};}function H(_0xcbdc20,_0x1ce242,_0x1b66cf){var _0xa13825=_0xfb4f89,_0x36e26f,_0x2d652c,_0x5e73f3,_0x21ac45,_0x17eb79;if(_0xcbdc20['_consoleNinjaAllowedToStart']!==void 0x0)return _0xcbdc20[_0xa13825(0x155)];let _0x40bb2b=((_0x2d652c=(_0x36e26f=_0xcbdc20['process'])==null?void 0x0:_0x36e26f[_0xa13825(0xd2)])==null?void 0x0:_0x2d652c[_0xa13825(0x182)])||((_0x21ac45=(_0x5e73f3=_0xcbdc20[_0xa13825(0x170)])==null?void 0x0:_0x5e73f3['env'])==null?void 0x0:_0x21ac45[_0xa13825(0xcf)])==='edge';function _0x3e8cd8(_0x3787d6){var _0x52530a=_0xa13825;if(_0x3787d6[_0x52530a(0x1b6)]('/')&&_0x3787d6[_0x52530a(0x148)]('/')){let _0x523815=new RegExp(_0x3787d6['slice'](0x1,-0x1));return _0x5ebf2a=>_0x523815[_0x52530a(0x178)](_0x5ebf2a);}else{if(_0x3787d6['includes']('*')||_0x3787d6[_0x52530a(0x16e)]('?')){let _0x185e95=new RegExp('^'+_0x3787d6['replace'](/\\./g,String[_0x52530a(0x1b8)](0x5c)+'.')['replace'](/\\*/g,'.*')['replace'](/\\?/g,'.')+String[_0x52530a(0x1b8)](0x24));return _0x175863=>_0x185e95[_0x52530a(0x178)](_0x175863);}else return _0x274ecc=>_0x274ecc===_0x3787d6;}}let _0x4b6171=_0x1ce242['map'](_0x3e8cd8);return _0xcbdc20['_consoleNinjaAllowedToStart']=_0x40bb2b||!_0x1ce242,!_0xcbdc20['_consoleNinjaAllowedToStart']&&((_0x17eb79=_0xcbdc20['location'])==null?void 0x0:_0x17eb79[_0xa13825(0x1a8)])&&(_0xcbdc20[_0xa13825(0x155)]=_0x4b6171[_0xa13825(0x14d)](_0x5c10f1=>_0x5c10f1(_0xcbdc20['location']['hostname']))),_0xcbdc20[_0xa13825(0x155)];}function X(_0x363d55,_0x1d9169,_0x46ca90,_0x46f67c){var _0x10ed28=_0xfb4f89;_0x363d55=_0x363d55,_0x1d9169=_0x1d9169,_0x46ca90=_0x46ca90,_0x46f67c=_0x46f67c;let _0x92ac1e=B(_0x363d55),_0x224ffb=_0x92ac1e[_0x10ed28(0x181)],_0x4ebef8=_0x92ac1e[_0x10ed28(0x11d)];class _0x328bde{constructor(){var _0x3c2acc=_0x10ed28;this[_0x3c2acc(0x136)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3c2acc(0x141)]=/^(0|[1-9][0-9]*)$/,this[_0x3c2acc(0xe6)]=/'([^\\\\']|\\\\')*'/,this[_0x3c2acc(0x167)]=_0x363d55[_0x3c2acc(0xc7)],this[_0x3c2acc(0x15d)]=_0x363d55['HTMLAllCollection'],this[_0x3c2acc(0x19f)]=Object[_0x3c2acc(0x1a4)],this['_getOwnPropertyNames']=Object[_0x3c2acc(0x129)],this[_0x3c2acc(0xed)]=_0x363d55[_0x3c2acc(0x16f)],this['_regExpToString']=RegExp['prototype'][_0x3c2acc(0x14e)],this[_0x3c2acc(0x130)]=Date[_0x3c2acc(0xe3)][_0x3c2acc(0x14e)];}[_0x10ed28(0xfd)](_0x5863e0,_0x563675,_0x25dde8,_0x4235ab){var _0x5eac97=_0x10ed28,_0x15d2ae=this,_0x48a558=_0x25dde8[_0x5eac97(0x1a2)];function _0x34c0d4(_0x2959d0,_0x3e333c,_0x6ec96e){var _0x29ad7b=_0x5eac97;_0x3e333c[_0x29ad7b(0x100)]=_0x29ad7b(0xff),_0x3e333c[_0x29ad7b(0x17c)]=_0x2959d0[_0x29ad7b(0x135)],_0x2a098b=_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)],_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)]=_0x3e333c,_0x15d2ae[_0x29ad7b(0x168)](_0x3e333c,_0x6ec96e);}try{_0x25dde8['level']++,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x171)](_0x563675);var _0x5e937d,_0x4d4837,_0x7a94ce,_0x12e437,_0x54273c=[],_0x3076d3=[],_0x4a27d5,_0x1f1aa0=this[_0x5eac97(0x13c)](_0x563675),_0x1fe8fc=_0x1f1aa0==='array',_0x1d9d33=!0x1,_0x1f7cfe=_0x1f1aa0===_0x5eac97(0x120),_0x3084ae=this[_0x5eac97(0x173)](_0x1f1aa0),_0xc35bc7=this[_0x5eac97(0x13d)](_0x1f1aa0),_0x48d9e1=_0x3084ae||_0xc35bc7,_0x590449={},_0x29fc28=0x0,_0x31b022=!0x1,_0x2a098b,_0x14e2a6=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x25dde8[_0x5eac97(0x159)]){if(_0x1fe8fc){if(_0x4d4837=_0x563675[_0x5eac97(0xf4)],_0x4d4837>_0x25dde8[_0x5eac97(0xc8)]){for(_0x7a94ce=0x0,_0x12e437=_0x25dde8['elements'],_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));_0x5863e0[_0x5eac97(0x142)]=!0x0;}else{for(_0x7a94ce=0x0,_0x12e437=_0x4d4837,_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));}_0x25dde8[_0x5eac97(0x110)]+=_0x3076d3[_0x5eac97(0xf4)];}if(!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&!_0x3084ae&&_0x1f1aa0!==_0x5eac97(0x137)&&_0x1f1aa0!==_0x5eac97(0x194)&&_0x1f1aa0!==_0x5eac97(0x17f)){var _0x3a0092=_0x4235ab[_0x5eac97(0x17d)]||_0x25dde8[_0x5eac97(0x17d)];if(this[_0x5eac97(0x15e)](_0x563675)?(_0x5e937d=0x0,_0x563675[_0x5eac97(0x10a)](function(_0x4b3319){var _0x3d2aa8=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x3d2aa8(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x3d2aa8(0x1a2)]&&_0x25dde8['autoExpandPropertyCount']>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}_0x3076d3[_0x3d2aa8(0x171)](_0x15d2ae[_0x3d2aa8(0xe4)](_0x54273c,_0x563675,_0x3d2aa8(0x19b),_0x5e937d++,_0x25dde8,function(_0x5e7ebe){return function(){return _0x5e7ebe;};}(_0x4b3319)));})):this[_0x5eac97(0x164)](_0x563675)&&_0x563675[_0x5eac97(0x10a)](function(_0x789f9,_0x40bfed){var _0x595515=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x595515(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x595515(0x1a2)]&&_0x25dde8[_0x595515(0x110)]>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}var _0x14d096=_0x40bfed[_0x595515(0x14e)]();_0x14d096[_0x595515(0xf4)]>0x64&&(_0x14d096=_0x14d096['slice'](0x0,0x64)+_0x595515(0x1ac)),_0x3076d3[_0x595515(0x171)](_0x15d2ae[_0x595515(0xe4)](_0x54273c,_0x563675,_0x595515(0xeb),_0x14d096,_0x25dde8,function(_0x8448c2){return function(){return _0x8448c2;};}(_0x789f9)));}),!_0x1d9d33){try{for(_0x4a27d5 in _0x563675)if(!(_0x1fe8fc&&_0x14e2a6['test'](_0x4a27d5))&&!this['_blacklistedProperty'](_0x563675,_0x4a27d5,_0x25dde8)){if(_0x29fc28++,_0x25dde8[_0x5eac97(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}catch{}if(_0x590449[_0x5eac97(0x176)]=!0x0,_0x1f7cfe&&(_0x590449['_p_name']=!0x0),!_0x31b022){var _0x18c0f5=[][_0x5eac97(0x14c)](this[_0x5eac97(0x151)](_0x563675))[_0x5eac97(0x14c)](this[_0x5eac97(0x12e)](_0x563675));for(_0x5e937d=0x0,_0x4d4837=_0x18c0f5['length'];_0x5e937d<_0x4d4837;_0x5e937d++)if(_0x4a27d5=_0x18c0f5[_0x5e937d],!(_0x1fe8fc&&_0x14e2a6[_0x5eac97(0x178)](_0x4a27d5[_0x5eac97(0x14e)]()))&&!this[_0x5eac97(0x161)](_0x563675,_0x4a27d5,_0x25dde8)&&!_0x590449[_0x5eac97(0xc5)+_0x4a27d5[_0x5eac97(0x14e)]()]){if(_0x29fc28++,_0x25dde8['autoExpandPropertyCount']++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}}}}if(_0x5863e0[_0x5eac97(0x100)]=_0x1f1aa0,_0x48d9e1?(_0x5863e0['value']=_0x563675[_0x5eac97(0xee)](),this[_0x5eac97(0x133)](_0x1f1aa0,_0x5863e0,_0x25dde8,_0x4235ab)):_0x1f1aa0===_0x5eac97(0xd7)?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0x130)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0x17f)?_0x5863e0[_0x5eac97(0x1a0)]=_0x563675[_0x5eac97(0x14e)]():_0x1f1aa0==='RegExp'?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0xe7)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0xc6)&&this[_0x5eac97(0xed)]?_0x5863e0[_0x5eac97(0x1a0)]=this['_Symbol'][_0x5eac97(0xe3)][_0x5eac97(0x14e)]['call'](_0x563675):!_0x25dde8['depth']&&!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&(delete _0x5863e0['value'],_0x5863e0['capped']=!0x0),_0x31b022&&(_0x5863e0[_0x5eac97(0x116)]=!0x0),_0x2a098b=_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)],_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)]=_0x5863e0,this[_0x5eac97(0x168)](_0x5863e0,_0x25dde8),_0x3076d3[_0x5eac97(0xf4)]){for(_0x5e937d=0x0,_0x4d4837=_0x3076d3[_0x5eac97(0xf4)];_0x5e937d<_0x4d4837;_0x5e937d++)_0x3076d3[_0x5e937d](_0x5e937d);}_0x54273c[_0x5eac97(0xf4)]&&(_0x5863e0[_0x5eac97(0x17d)]=_0x54273c);}catch(_0x5b6a62){_0x34c0d4(_0x5b6a62,_0x5863e0,_0x25dde8);}return this[_0x5eac97(0x14f)](_0x563675,_0x5863e0),this['_treeNodePropertiesAfterFullValue'](_0x5863e0,_0x25dde8),_0x25dde8['node'][_0x5eac97(0x19e)]=_0x2a098b,_0x25dde8['level']--,_0x25dde8[_0x5eac97(0x1a2)]=_0x48a558,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x162)](),_0x5863e0;}[_0x10ed28(0x12e)](_0x5e7e45){var _0x111dd1=_0x10ed28;return Object[_0x111dd1(0x190)]?Object[_0x111dd1(0x190)](_0x5e7e45):[];}[_0x10ed28(0x15e)](_0x5b69a9){var _0x55ac27=_0x10ed28;return!!(_0x5b69a9&&_0x363d55[_0x55ac27(0x19b)]&&this[_0x55ac27(0x152)](_0x5b69a9)===_0x55ac27(0x147)&&_0x5b69a9[_0x55ac27(0x10a)]);}['_blacklistedProperty'](_0x28b15f,_0x581dd6,_0x32226c){var _0x247a74=_0x10ed28;return _0x32226c[_0x247a74(0xef)]?typeof _0x28b15f[_0x581dd6]==_0x247a74(0x120):!0x1;}[_0x10ed28(0x13c)](_0x352136){var _0x47498e=_0x10ed28,_0x456822='';return _0x456822=typeof _0x352136,_0x456822===_0x47498e(0x143)?this[_0x47498e(0x152)](_0x352136)===_0x47498e(0x180)?_0x456822=_0x47498e(0x1a7):this[_0x47498e(0x152)](_0x352136)===_0x47498e(0xdd)?_0x456822='date':this['_objectToString'](_0x352136)===_0x47498e(0xbb)?_0x456822=_0x47498e(0x17f):_0x352136===null?_0x456822=_0x47498e(0x1b4):_0x352136[_0x47498e(0x10e)]&&(_0x456822=_0x352136[_0x47498e(0x10e)][_0x47498e(0xc1)]||_0x456822):_0x456822==='undefined'&&this[_0x47498e(0x15d)]&&_0x352136 instanceof this[_0x47498e(0x15d)]&&(_0x456822=_0x47498e(0xc0)),_0x456822;}['_objectToString'](_0x1de66c){var _0x473e65=_0x10ed28;return Object[_0x473e65(0xe3)]['toString'][_0x473e65(0x11c)](_0x1de66c);}[_0x10ed28(0x173)](_0x1b731a){var _0xb60b14=_0x10ed28;return _0x1b731a===_0xb60b14(0xe1)||_0x1b731a===_0xb60b14(0x102)||_0x1b731a===_0xb60b14(0xde);}['_isPrimitiveWrapperType'](_0x331b09){var _0x16d7d9=_0x10ed28;return _0x331b09===_0x16d7d9(0x154)||_0x331b09===_0x16d7d9(0x137)||_0x331b09===_0x16d7d9(0x131);}[_0x10ed28(0xe4)](_0x29c99b,_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49){var _0x458f4f=this;return function(_0x530f99){var _0x374746=_0x3ff9,_0x60df83=_0x178327[_0x374746(0x182)][_0x374746(0x19e)],_0x25a209=_0x178327[_0x374746(0x182)][_0x374746(0x1a9)],_0x290e99=_0x178327[_0x374746(0x182)]['parent'];_0x178327[_0x374746(0x182)][_0x374746(0xce)]=_0x60df83,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=typeof _0x3076bc==_0x374746(0xde)?_0x3076bc:_0x530f99,_0x29c99b[_0x374746(0x171)](_0x458f4f[_0x374746(0x1b5)](_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49)),_0x178327['node'][_0x374746(0xce)]=_0x290e99,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=_0x25a209;};}[_0x10ed28(0xd0)](_0x83b0e,_0x4dbfb7,_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415){var _0x4ff80c=_0x10ed28,_0x3c23d4=this;return _0x4dbfb7[_0x4ff80c(0xc5)+_0xf742cb['toString']()]=!0x0,function(_0x3abd65){var _0x4ac95e=_0x4ff80c,_0x2c9c3f=_0x5e0402[_0x4ac95e(0x182)]['current'],_0x2635bd=_0x5e0402[_0x4ac95e(0x182)][_0x4ac95e(0x1a9)],_0xc2e0d=_0x5e0402['node'][_0x4ac95e(0xce)];_0x5e0402['node'][_0x4ac95e(0xce)]=_0x2c9c3f,_0x5e0402[_0x4ac95e(0x182)]['index']=_0x3abd65,_0x83b0e[_0x4ac95e(0x171)](_0x3c23d4[_0x4ac95e(0x1b5)](_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415)),_0x5e0402['node'][_0x4ac95e(0xce)]=_0xc2e0d,_0x5e0402['node'][_0x4ac95e(0x1a9)]=_0x2635bd;};}[_0x10ed28(0x1b5)](_0xf38ac3,_0x5bdcfd,_0x290e62,_0x7990cf,_0x48e604){var _0x1aa57e=_0x10ed28,_0x2bff8c=this;_0x48e604||(_0x48e604=function(_0x43ba8f,_0x597d26){return _0x43ba8f[_0x597d26];});var _0x48a20e=_0x290e62[_0x1aa57e(0x14e)](),_0xd6873d=_0x7990cf[_0x1aa57e(0x138)]||{},_0x7426f3=_0x7990cf[_0x1aa57e(0x159)],_0x3f3199=_0x7990cf[_0x1aa57e(0x1a5)];try{var _0x18b702=this['_isMap'](_0xf38ac3),_0x5a1ae4=_0x48a20e;_0x18b702&&_0x5a1ae4[0x0]==='\\x27'&&(_0x5a1ae4=_0x5a1ae4['substr'](0x1,_0x5a1ae4[_0x1aa57e(0xf4)]-0x2));var _0x6af1a1=_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d['_p_'+_0x5a1ae4];_0x6af1a1&&(_0x7990cf[_0x1aa57e(0x159)]=_0x7990cf[_0x1aa57e(0x159)]+0x1),_0x7990cf[_0x1aa57e(0x1a5)]=!!_0x6af1a1;var _0x2333d7=typeof _0x290e62==_0x1aa57e(0xc6),_0x22cba0={'name':_0x2333d7||_0x18b702?_0x48a20e:this['_propertyName'](_0x48a20e)};if(_0x2333d7&&(_0x22cba0[_0x1aa57e(0xc6)]=!0x0),!(_0x5bdcfd===_0x1aa57e(0x1a7)||_0x5bdcfd===_0x1aa57e(0x12f))){var _0x156b6d=this[_0x1aa57e(0x19f)](_0xf38ac3,_0x290e62);if(_0x156b6d&&(_0x156b6d['set']&&(_0x22cba0['setter']=!0x0),_0x156b6d[_0x1aa57e(0x107)]&&!_0x6af1a1&&!_0x7990cf[_0x1aa57e(0x198)]))return _0x22cba0['getter']=!0x0,this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x36fd25;try{_0x36fd25=_0x48e604(_0xf38ac3,_0x290e62);}catch(_0x210082){return _0x22cba0={'name':_0x48a20e,'type':_0x1aa57e(0xff),'error':_0x210082[_0x1aa57e(0x135)]},this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x15c01e=this[_0x1aa57e(0x13c)](_0x36fd25),_0x1aab99=this[_0x1aa57e(0x173)](_0x15c01e);if(_0x22cba0['type']=_0x15c01e,_0x1aab99)this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x4f8d75=_0x1aa57e;_0x22cba0[_0x4f8d75(0x1a0)]=_0x36fd25['valueOf'](),!_0x6af1a1&&_0x2bff8c[_0x4f8d75(0x133)](_0x15c01e,_0x22cba0,_0x7990cf,{});});else{var _0x335f59=_0x7990cf[_0x1aa57e(0x1a2)]&&_0x7990cf['level']<_0x7990cf['autoExpandMaxDepth']&&_0x7990cf[_0x1aa57e(0x10d)][_0x1aa57e(0xd4)](_0x36fd25)<0x0&&_0x15c01e!==_0x1aa57e(0x120)&&_0x7990cf[_0x1aa57e(0x110)]<_0x7990cf['autoExpandLimit'];_0x335f59||_0x7990cf[_0x1aa57e(0x188)]<_0x7426f3||_0x6af1a1?(this['serialize'](_0x22cba0,_0x36fd25,_0x7990cf,_0x6af1a1||{}),this[_0x1aa57e(0x14f)](_0x36fd25,_0x22cba0)):this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x53d000=_0x1aa57e;_0x15c01e===_0x53d000(0x1b4)||_0x15c01e===_0x53d000(0xc7)||(delete _0x22cba0[_0x53d000(0x1a0)],_0x22cba0[_0x53d000(0x183)]=!0x0);});}return _0x22cba0;}finally{_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d,_0x7990cf[_0x1aa57e(0x159)]=_0x7426f3,_0x7990cf[_0x1aa57e(0x1a5)]=_0x3f3199;}}['_capIfString'](_0x96020c,_0x4e4cc3,_0xaeab36,_0x1e5657){var _0x2356e4=_0x10ed28,_0x2bbfa6=_0x1e5657['strLength']||_0xaeab36[_0x2356e4(0x108)];if((_0x96020c===_0x2356e4(0x102)||_0x96020c===_0x2356e4(0x137))&&_0x4e4cc3['value']){let _0x2e0d21=_0x4e4cc3['value'][_0x2356e4(0xf4)];_0xaeab36['allStrLength']+=_0x2e0d21,_0xaeab36['allStrLength']>_0xaeab36[_0x2356e4(0xf3)]?(_0x4e4cc3[_0x2356e4(0x183)]='',delete _0x4e4cc3['value']):_0x2e0d21>_0x2bbfa6&&(_0x4e4cc3[_0x2356e4(0x183)]=_0x4e4cc3[_0x2356e4(0x1a0)][_0x2356e4(0x18b)](0x0,_0x2bbfa6),delete _0x4e4cc3[_0x2356e4(0x1a0)]);}}[_0x10ed28(0x164)](_0x3efef3){var _0x3488ac=_0x10ed28;return!!(_0x3efef3&&_0x363d55[_0x3488ac(0xeb)]&&this[_0x3488ac(0x152)](_0x3efef3)===_0x3488ac(0x1af)&&_0x3efef3[_0x3488ac(0x10a)]);}[_0x10ed28(0xc4)](_0x11c35b){var _0x23453d=_0x10ed28;if(_0x11c35b[_0x23453d(0xf6)](/^\\d+$/))return _0x11c35b;var _0x4f6a03;try{_0x4f6a03=JSON[_0x23453d(0xf1)](''+_0x11c35b);}catch{_0x4f6a03='\\x22'+this[_0x23453d(0x152)](_0x11c35b)+'\\x22';}return _0x4f6a03[_0x23453d(0xf6)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x4f6a03=_0x4f6a03['substr'](0x1,_0x4f6a03['length']-0x2):_0x4f6a03=_0x4f6a03[_0x23453d(0x166)](/'/g,'\\x5c\\x27')['replace'](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x4f6a03;}[_0x10ed28(0x17a)](_0x55cc47,_0x11bab3,_0x41718f,_0x163b6a){var _0x47c902=_0x10ed28;this[_0x47c902(0x168)](_0x55cc47,_0x11bab3),_0x163b6a&&_0x163b6a(),this['_additionalMetadata'](_0x41718f,_0x55cc47),this['_treeNodePropertiesAfterFullValue'](_0x55cc47,_0x11bab3);}[_0x10ed28(0x168)](_0x3f8b3a,_0x4d5884){var _0x49c69e=_0x10ed28;this[_0x49c69e(0x12b)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0xca)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0x18e)](_0x3f8b3a,_0x4d5884),this['_setNodePermissions'](_0x3f8b3a,_0x4d5884);}[_0x10ed28(0x12b)](_0x24d5f8,_0x14eaea){}[_0x10ed28(0xca)](_0x576a32,_0x687c5){}[_0x10ed28(0xbd)](_0x489c9e,_0xf76957){}[_0x10ed28(0x140)](_0x40bd6c){return _0x40bd6c===this['_undefined'];}[_0x10ed28(0xf2)](_0x59dbd7,_0x39b993){var _0x4aab34=_0x10ed28;this[_0x4aab34(0xbd)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x196)](_0x59dbd7),_0x39b993[_0x4aab34(0xf9)]&&this['_sortProps'](_0x59dbd7),this[_0x4aab34(0x15f)](_0x59dbd7,_0x39b993),this[_0x4aab34(0xe2)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x111)](_0x59dbd7);}[_0x10ed28(0x14f)](_0x251965,_0x9b93cd){var _0x83cbd4=_0x10ed28;let _0xcd393f;try{_0x363d55[_0x83cbd4(0x174)]&&(_0xcd393f=_0x363d55[_0x83cbd4(0x174)]['error'],_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=function(){}),_0x251965&&typeof _0x251965[_0x83cbd4(0xf4)]==_0x83cbd4(0xde)&&(_0x9b93cd[_0x83cbd4(0xf4)]=_0x251965[_0x83cbd4(0xf4)]);}catch{}finally{_0xcd393f&&(_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=_0xcd393f);}if(_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0xde)||_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x131)){if(isNaN(_0x9b93cd[_0x83cbd4(0x1a0)]))_0x9b93cd['nan']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];else switch(_0x9b93cd[_0x83cbd4(0x1a0)]){case Number[_0x83cbd4(0x192)]:_0x9b93cd[_0x83cbd4(0x175)]=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case Number[_0x83cbd4(0x185)]:_0x9b93cd['negativeInfinity']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case 0x0:this[_0x83cbd4(0x101)](_0x9b93cd[_0x83cbd4(0x1a0)])&&(_0x9b93cd[_0x83cbd4(0x124)]=!0x0);break;}}else _0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x120)&&typeof _0x251965[_0x83cbd4(0xc1)]==_0x83cbd4(0x102)&&_0x251965[_0x83cbd4(0xc1)]&&_0x9b93cd[_0x83cbd4(0xc1)]&&_0x251965['name']!==_0x9b93cd[_0x83cbd4(0xc1)]&&(_0x9b93cd[_0x83cbd4(0xda)]=_0x251965['name']);}[_0x10ed28(0x101)](_0xdc72f6){var _0x396f32=_0x10ed28;return 0x1/_0xdc72f6===Number[_0x396f32(0x185)];}[_0x10ed28(0x114)](_0xc49f59){var _0x15d31a=_0x10ed28;!_0xc49f59[_0x15d31a(0x17d)]||!_0xc49f59[_0x15d31a(0x17d)]['length']||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x1a7)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0xeb)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x19b)||_0xc49f59[_0x15d31a(0x17d)][_0x15d31a(0x17e)](function(_0x521a66,_0x3037b9){var _0x19b3c8=_0x15d31a,_0x30740f=_0x521a66[_0x19b3c8(0xc1)][_0x19b3c8(0x199)](),_0x377ff1=_0x3037b9[_0x19b3c8(0xc1)]['toLowerCase']();return _0x30740f<_0x377ff1?-0x1:_0x30740f>_0x377ff1?0x1:0x0;});}['_addFunctionsNode'](_0x24f146,_0x304fda){var _0x2a0f15=_0x10ed28;if(!(_0x304fda[_0x2a0f15(0xef)]||!_0x24f146[_0x2a0f15(0x17d)]||!_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)])){for(var _0x14c9f5=[],_0x4d9ee4=[],_0x488f79=0x0,_0x101a34=_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)];_0x488f79<_0x101a34;_0x488f79++){var _0x19651f=_0x24f146[_0x2a0f15(0x17d)][_0x488f79];_0x19651f[_0x2a0f15(0x100)]===_0x2a0f15(0x120)?_0x14c9f5[_0x2a0f15(0x171)](_0x19651f):_0x4d9ee4['push'](_0x19651f);}if(!(!_0x4d9ee4[_0x2a0f15(0xf4)]||_0x14c9f5['length']<=0x1)){_0x24f146['props']=_0x4d9ee4;var _0x230bec={'functionsNode':!0x0,'props':_0x14c9f5};this[_0x2a0f15(0x12b)](_0x230bec,_0x304fda),this[_0x2a0f15(0xbd)](_0x230bec,_0x304fda),this[_0x2a0f15(0x196)](_0x230bec),this[_0x2a0f15(0xfe)](_0x230bec,_0x304fda),_0x230bec['id']+='\\x20f',_0x24f146['props'][_0x2a0f15(0x1ad)](_0x230bec);}}}[_0x10ed28(0xe2)](_0x468e99,_0x4388f0){}['_setNodeExpandableState'](_0x5eb717){}[_0x10ed28(0x121)](_0x38c05c){var _0x1aee1a=_0x10ed28;return Array[_0x1aee1a(0x172)](_0x38c05c)||typeof _0x38c05c==_0x1aee1a(0x143)&&this[_0x1aee1a(0x152)](_0x38c05c)===_0x1aee1a(0x180);}['_setNodePermissions'](_0x4eefa0,_0x1705a9){}[_0x10ed28(0x111)](_0x516906){var _0x236906=_0x10ed28;delete _0x516906[_0x236906(0x10f)],delete _0x516906['_hasSetOnItsPath'],delete _0x516906[_0x236906(0x125)];}[_0x10ed28(0x18e)](_0x23c1c2,_0x29a21b){}}let _0x4e7d7d=new _0x328bde(),_0x3886ea={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x30c557={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x586d36(_0x54f3be,_0x181b1a,_0x2b7eb5,_0x1dd634,_0x49c07c,_0x397446){var _0x2f18dd=_0x10ed28;let _0x4e7f72,_0x1de5a1;try{_0x1de5a1=_0x4ebef8(),_0x4e7f72=_0x46ca90[_0x181b1a],!_0x4e7f72||_0x1de5a1-_0x4e7f72['ts']>0x1f4&&_0x4e7f72[_0x2f18dd(0x118)]&&_0x4e7f72['time']/_0x4e7f72[_0x2f18dd(0x118)]<0x64?(_0x46ca90[_0x181b1a]=_0x4e7f72={'count':0x0,'time':0x0,'ts':_0x1de5a1},_0x46ca90[_0x2f18dd(0x128)]={}):_0x1de5a1-_0x46ca90[_0x2f18dd(0x128)]['ts']>0x32&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]/_0x46ca90[_0x2f18dd(0x128)]['count']<0x64&&(_0x46ca90[_0x2f18dd(0x128)]={});let _0x4ddd3d=[],_0x2c1b45=_0x4e7f72[_0x2f18dd(0x184)]||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]?_0x30c557:_0x3886ea,_0x398af5=_0x30c84c=>{var _0x988e3b=_0x2f18dd;let _0x14b3dc={};return _0x14b3dc[_0x988e3b(0x17d)]=_0x30c84c['props'],_0x14b3dc[_0x988e3b(0xc8)]=_0x30c84c['elements'],_0x14b3dc[_0x988e3b(0x108)]=_0x30c84c[_0x988e3b(0x108)],_0x14b3dc[_0x988e3b(0xf3)]=_0x30c84c[_0x988e3b(0xf3)],_0x14b3dc[_0x988e3b(0x146)]=_0x30c84c[_0x988e3b(0x146)],_0x14b3dc[_0x988e3b(0x1b7)]=_0x30c84c[_0x988e3b(0x1b7)],_0x14b3dc[_0x988e3b(0xf9)]=!0x1,_0x14b3dc[_0x988e3b(0xef)]=!_0x1d9169,_0x14b3dc[_0x988e3b(0x159)]=0x1,_0x14b3dc[_0x988e3b(0x188)]=0x0,_0x14b3dc[_0x988e3b(0x105)]=_0x988e3b(0xbe),_0x14b3dc[_0x988e3b(0x1b9)]=_0x988e3b(0x16b),_0x14b3dc[_0x988e3b(0x1a2)]=!0x0,_0x14b3dc[_0x988e3b(0x10d)]=[],_0x14b3dc[_0x988e3b(0x110)]=0x0,_0x14b3dc[_0x988e3b(0x198)]=!0x0,_0x14b3dc[_0x988e3b(0xdb)]=0x0,_0x14b3dc[_0x988e3b(0x182)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x14b3dc;};for(var _0x4e8b46=0x0;_0x4e8b46<_0x49c07c[_0x2f18dd(0xf4)];_0x4e8b46++)_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d[_0x2f18dd(0xfd)]({'timeNode':_0x54f3be===_0x2f18dd(0x1a1)||void 0x0},_0x49c07c[_0x4e8b46],_0x398af5(_0x2c1b45),{}));if(_0x54f3be===_0x2f18dd(0x1ab)||_0x54f3be===_0x2f18dd(0x17c)){let _0x38886c=Error[_0x2f18dd(0x11f)];try{Error['stackTraceLimit']=0x1/0x0,_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d['serialize']({'stackNode':!0x0},new Error()[_0x2f18dd(0x1b0)],_0x398af5(_0x2c1b45),{'strLength':0x1/0x0}));}finally{Error[_0x2f18dd(0x11f)]=_0x38886c;}}return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':_0x4ddd3d,'id':_0x181b1a,'context':_0x397446}]};}catch(_0x14cd18){return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':[{'type':_0x2f18dd(0xff),'error':_0x14cd18&&_0x14cd18[_0x2f18dd(0x135)]}],'id':_0x181b1a,'context':_0x397446}]};}finally{try{if(_0x4e7f72&&_0x1de5a1){let _0xa0025=_0x4ebef8();_0x4e7f72['count']++,_0x4e7f72['time']+=_0x224ffb(_0x1de5a1,_0xa0025),_0x4e7f72['ts']=_0xa0025,_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]++,_0x46ca90['hits'][_0x2f18dd(0x1a1)]+=_0x224ffb(_0x1de5a1,_0xa0025),_0x46ca90[_0x2f18dd(0x128)]['ts']=_0xa0025,(_0x4e7f72[_0x2f18dd(0x118)]>0x32||_0x4e7f72['time']>0x64)&&(_0x4e7f72[_0x2f18dd(0x184)]=!0x0),(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]>0x3e8||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]>0x12c)&&(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]=!0x0);}}catch{}}}return _0x586d36;}((_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x4b0ac8,_0x5246af,_0x42bfac,_0x4ca82f,_0x123580,_0x18969d)=>{var _0x407242=_0xfb4f89;if(_0x17891e[_0x407242(0x150)])return _0x17891e[_0x407242(0x150)];if(!H(_0x17891e,_0x42bfac,_0x479ca2))return _0x17891e['_console_ninja']={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x17891e[_0x407242(0x150)];let _0x37610e=B(_0x17891e),_0x3437ca=_0x37610e['elapsed'],_0x25b5e5=_0x37610e['timeStamp'],_0x4bf76b=_0x37610e[_0x407242(0x11e)],_0x125c7d={'hits':{},'ts':{}},_0x15b46a=X(_0x17891e,_0x4ca82f,_0x125c7d,_0x4b0ac8),_0xd5486b=_0x4d30e1=>{_0x125c7d['ts'][_0x4d30e1]=_0x25b5e5();},_0x2d07e6=(_0x5bc355,_0xe34fe)=>{var _0x2339ce=_0x407242;let _0x59fb6a=_0x125c7d['ts'][_0xe34fe];if(delete _0x125c7d['ts'][_0xe34fe],_0x59fb6a){let _0x5921a6=_0x3437ca(_0x59fb6a,_0x25b5e5());_0x2cf290(_0x15b46a(_0x2339ce(0x1a1),_0x5bc355,_0x4bf76b(),_0x253536,[_0x5921a6],_0xe34fe));}},_0x49bcec=_0x43e72f=>{var _0x2e47bf=_0x407242,_0x55d95d;return _0x479ca2===_0x2e47bf(0x139)&&_0x17891e['origin']&&((_0x55d95d=_0x43e72f==null?void 0x0:_0x43e72f['args'])==null?void 0x0:_0x55d95d['length'])&&(_0x43e72f['args'][0x0][_0x2e47bf(0x189)]=_0x17891e['origin']),_0x43e72f;};_0x17891e[_0x407242(0x150)]={'consoleLog':(_0x31c92e,_0x24488d)=>{var _0x93e67e=_0x407242;_0x17891e['console']['log'][_0x93e67e(0xc1)]!=='disabledLog'&&_0x2cf290(_0x15b46a(_0x93e67e(0xd9),_0x31c92e,_0x4bf76b(),_0x253536,_0x24488d));},'consoleTrace':(_0x3b66a7,_0xba880e)=>{var _0x567e13=_0x407242,_0x31716e,_0x5a9c60;_0x17891e[_0x567e13(0x174)]['log'][_0x567e13(0xc1)]!==_0x567e13(0xc2)&&((_0x5a9c60=(_0x31716e=_0x17891e[_0x567e13(0x170)])==null?void 0x0:_0x31716e[_0x567e13(0xd2)])!=null&&_0x5a9c60[_0x567e13(0x182)]&&(_0x17891e[_0x567e13(0x18c)]=!0x0),_0x2cf290(_0x49bcec(_0x15b46a(_0x567e13(0x1ab),_0x3b66a7,_0x4bf76b(),_0x253536,_0xba880e))));},'consoleError':(_0x3fa736,_0x121a3b)=>{var _0x12dfb8=_0x407242;_0x17891e[_0x12dfb8(0x18c)]=!0x0,_0x2cf290(_0x49bcec(_0x15b46a('error',_0x3fa736,_0x4bf76b(),_0x253536,_0x121a3b)));},'consoleTime':_0x1848a7=>{_0xd5486b(_0x1848a7);},'consoleTimeEnd':(_0x31ae65,_0x3d104a)=>{_0x2d07e6(_0x3d104a,_0x31ae65);},'autoLog':(_0x37808,_0x2ad558)=>{var _0x22938b=_0x407242;_0x2cf290(_0x15b46a(_0x22938b(0xd9),_0x2ad558,_0x4bf76b(),_0x253536,[_0x37808]));},'autoLogMany':(_0x161d7e,_0x43dedb)=>{var _0x379506=_0x407242;_0x2cf290(_0x15b46a(_0x379506(0xd9),_0x161d7e,_0x4bf76b(),_0x253536,_0x43dedb));},'autoTrace':(_0x1217e6,_0x446707)=>{var _0x3a5252=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x3a5252(0x1ab),_0x446707,_0x4bf76b(),_0x253536,[_0x1217e6])));},'autoTraceMany':(_0x5b77c4,_0x4fc43a)=>{var _0x5bfbf2=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x5bfbf2(0x1ab),_0x5b77c4,_0x4bf76b(),_0x253536,_0x4fc43a)));},'autoTime':(_0x24183a,_0x442759,_0x296a4c)=>{_0xd5486b(_0x296a4c);},'autoTimeEnd':(_0x2927a9,_0x243d30,_0x5bd63b)=>{_0x2d07e6(_0x243d30,_0x5bd63b);},'coverage':_0x519fc2=>{var _0x452554=_0x407242;_0x2cf290({'method':_0x452554(0x156),'version':_0x4b0ac8,'args':[{'id':_0x519fc2}]});}};let _0x2cf290=q(_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x123580,_0x18969d),_0x253536=_0x17891e[_0x407242(0xf0)];return _0x17891e['_console_ninja'];})(globalThis,_0xfb4f89(0x10c),'60591',_0xfb4f89(0xdc),'webpack',_0xfb4f89(0xd3),'1727950005016',_0xfb4f89(0x1a6),_0xfb4f89(0xfb),_0xfb4f89(0x197),_0xfb4f89(0x13a));")}catch(e){}}function o(e,...t){try{n().consoleError(e,t)}catch(e){}return t}},"./src/Firebase/firebase-config.ts":(e,t,x)=>{x.r(t),x.d(t,{firebaseConfig:()=>a});const a={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(e,t,x)=>{x.r(t),x.d(t,{FirebaseIntegration:()=>i});var a=x("./src/Firebase/base-firebase-integration.ts");class i extends a.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return i.instance||(i.instance=new i),i.instance}sendSessionStartEvent(e){this.customEvents("session_start",e)}sendSessionEndEvent(e){this.customEvents("session_end",e)}sendSelectedLevelEvent(e){this.customEvents("selected_level",e)}sendTappedStartEvent(e){this.customEvents("tapped_start",e)}sendPuzzleCompletedEvent(e){this.customEvents("puzzle_completed",e)}sendLevelCompletedEvent(e){this.customEvents("level_completed",e)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(e){this.customEvents("download_completed",e)}}},"./src/common/event-names.ts":(e,t,x)=>{x.r(t),x.d(t,{CLICK:()=>d,LOADPUZZLE:()=>a,MOUSEDOWN:()=>_,MOUSEMOVE:()=>s,MOUSEUP:()=>n,STONEDROP:()=>i,TOUCHEND:()=>r,TOUCHMOVE:()=>c,TOUCHSTART:()=>o,VISIBILITY_CHANGE:()=>l});const a="loadpuzzle",i="stonesdropped",s="mousemove",_="mousedown",n="mouseup",o="touchstart",c="touchmove",r="touchend",d="click",l="visibilitychange"},"./src/common/global-variables.ts":(e,t,x)=>{x.r(t),x.d(t,{Debugger:()=>c,font:()=>o,lang:()=>n,pseudoId:()=>_});var a=x("./src/constants/index.ts"),i=x("./src/common/index.ts");const s=new URLSearchParams(window.location.search);var _=s.get("cr_user_id"),n=null==s.get("cr_lang")?"english":s.get("cr_lang");const o=i.Utils.getLanguageSpecificFont(n),c={DevelopmentLink:!!window.location.href.includes(a.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(e,t,x)=>{x.r(t),x.d(t,{CLICK:()=>_.CLICK,Debugger:()=>s.Debugger,LOADPUZZLE:()=>_.LOADPUZZLE,MOUSEDOWN:()=>_.MOUSEDOWN,MOUSEMOVE:()=>_.MOUSEMOVE,MOUSEUP:()=>_.MOUSEUP,STONEDROP:()=>_.STONEDROP,StoneConfig:()=>a.StoneConfig,TOUCHEND:()=>_.TOUCHEND,TOUCHMOVE:()=>_.TOUCHMOVE,TOUCHSTART:()=>_.TOUCHSTART,Utils:()=>i.Utils,VISIBILITY_CHANGE:()=>_.VISIBILITY_CHANGE,createRippleEffect:()=>i.createRippleEffect,font:()=>s.font,hideElement:()=>i.hideElement,isClickInsideButton:()=>i.isClickInsideButton,isDocumentVisible:()=>i.isDocumentVisible,lang:()=>s.lang,loadImages:()=>i.loadImages,pseudoId:()=>s.pseudoId,syncLoadingImages:()=>i.syncLoadingImages,toggleDebugMode:()=>i.toggleDebugMode});var a=x("./src/common/stone-config.ts"),i=x("./src/common/utils.ts"),s=x("./src/common/global-variables.ts"),_=x("./src/common/event-names.ts")},"./src/common/stone-config.ts":(e,t,x)=>{x.r(t),x.d(t,{StoneConfig:()=>i});var a=x("./src/common/index.ts");class i{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(e,t,x,a,i,s,_,n,o){this.x=i,this.y=s,this.origx=i,this.origy=s,this.canvasWidth=t,this.canvasHeight=x,this.tutorialInstance=o,this.text=a,this.img=_,this.context=e,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=n}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(e,t,x,a)=>-x/2*(Math.cos(Math.PI*e/a)-1)+t;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(e){this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${a.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(e,this.img,this.imageSize)}}},"./src/common/utils.ts":(e,t,x)=>{x.r(t),x.d(t,{Utils:()=>s,createRippleEffect:()=>_,hideElement:()=>l,isClickInsideButton:()=>c,isDocumentVisible:()=>r,loadImages:()=>n,syncLoadingImages:()=>o,toggleDebugMode:()=>d});var a=x("./src/common/index.ts"),i=x("./src/data/i18-font-mapping.ts");class s{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(e){return a.Debugger.DevelopmentLink?e.slice(0,e.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+e.slice(e.indexOf(this.UrlSubstring)+this.UrlSubstring.length):e}static getLanguageSpecificFont(e){const t=e.toLowerCase();for(const e in i.languageFontMapping)if(e.toLowerCase()===t)return i.languageFontMapping[e];return console.log(...f("2724076817_26_4_26_59_4",`Font not found for language: ${e}`)),"NotoSans-Regular"}static getRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}static getExcludedCoordinates(e,t){return{excludeX:e.width*(t/100),excludeY:e.height*(t/100)}}}function _(e){const t=e;if(!t)throw new Error("Canvas context is null");let x=0,a=0;let i=10,s=10;return function(e,_,n){n&&(i=0,s=0),x=e,a=_,t.beginPath(),t.arc(x,a,i,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),t.beginPath(),t.arc(x,a,s,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),i+=.5,s+=.5,(i>=60||s>=60)&&(i=10,s=10)}}function n(e,t){const x={};let a=0;const i=Object.keys(e).length;for(let s in e)x[s]=new Image,x[s].onload=function(){++a>=i&&t(x)},x[s].src=e[s]}const o=async e=>{const t=Object.keys(e).map((async t=>{const x=await(async e=>{const t=new Image;return new Promise((x=>{t.onload=()=>x(t),t.src=e}))})(e[t]);return{[t]:x}}));return(await Promise.all(t)).reduce(((e,t)=>({...e,...t})),{})};function c(e,t,x,a,i,s,_=!1){if(_){return Math.sqrt((e-(x+i/2))**2+(t-(a+s/2))**2)<i/2}return e>=x&&e<=x+i&&t>=a&&t<=a+s}const r=()=>"visible"===document.visibilityState,d=e=>{e.classList.toggle("on");const t=e.classList.contains("on");a.Debugger.DebugMode=t,e.innerText="Dev"},l=(e=!1,t)=>{e?t.classList.remove("show"):t.classList.add("show")};function h(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfb4f89=_0x3ff9;(function(_0x33ffce,_0x4776aa){var _0x2ac2d2=_0x3ff9,_0x6e0212=_0x33ffce();while(!![]){try{var _0x566fe1=-parseInt(_0x2ac2d2(0x122))/0x1*(-parseInt(_0x2ac2d2(0x16a))/0x2)+-parseInt(_0x2ac2d2(0x14a))/0x3+-parseInt(_0x2ac2d2(0xc9))/0x4*(-parseInt(_0x2ac2d2(0x15b))/0x5)+-parseInt(_0x2ac2d2(0x127))/0x6+-parseInt(_0x2ac2d2(0x187))/0x7*(parseInt(_0x2ac2d2(0x109))/0x8)+-parseInt(_0x2ac2d2(0x126))/0x9*(-parseInt(_0x2ac2d2(0x1ba))/0xa)+-parseInt(_0x2ac2d2(0x12a))/0xb*(parseInt(_0x2ac2d2(0x11b))/0xc);if(_0x566fe1===_0x4776aa)break;else _0x6e0212['push'](_0x6e0212['shift']());}catch(_0x2c6c1d){_0x6e0212['push'](_0x6e0212['shift']());}}}(_0x26ed,0xd9405));function _0x26ed(){var _0x251fed=['onerror','_inNextEdge','date','close','log','funcName','allStrLength',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.360\\\\node_modules\",'[object\\x20Date]','number','bind','gateway.docker.internal','boolean','_addLoadNode','prototype','_addProperty','onclose','_quotedRegExp','_regExpToString','split','dockerizedApp','enumerable','Map','url','_Symbol','valueOf','noFunctions','_console_ninja_session','stringify','_treeNodePropertiesAfterFullValue','totalStrLength','length','onmessage','match','default','_disposeWebsocket','sortProps','_connectAttemptCount','','unref','serialize','_setNodePermissions','unknown','type','_isNegativeZero','string','toUpperCase','performance','expId','getWebSocketClass','get','strLength','16bvnJMf','forEach','ws/index.js','127.0.0.1','autoExpandPreviousObjects','constructor','_hasSymbolPropertyOnItsPath','autoExpandPropertyCount','_cleanNode','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','_sortProps','args','cappedProps','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','count','send','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','2067276DVozTZ','call','timeStamp','now','stackTraceLimit','function','_isArray','7Qbqraw','eventReceivedCallback','negativeZero','_hasMapOnItsPath','1314JSCrfP','2095692ubLLBJ','hits','getOwnPropertyNames','77NfTUuK','_setNodeId','_inBrowser','_ws','_getOwnPropertySymbols','Error','_dateToString','Number','edge','_capIfString','_allowedToConnectOnSend','message','_keyStrRegExp','String','expressionsToEvaluate','next.js','1','pathToFileURL','_type','_isPrimitiveWrapperType','map','_WebSocketClass','_isUndefined','_numberRegExp','cappedElements','object','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_WebSocket','autoExpandLimit','[object\\x20Set]','endsWith','remix','1592253yMPyuy','path','concat','some','toString','_additionalMetadata','_console_ninja','_getOwnPropertyNames','_objectToString','https://tinyurl.com/37x8b79t','Boolean','_consoleNinjaAllowedToStart','coverage','ws://','reload','depth','global','469835nWFvog','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','_HTMLAllCollection','_isSet','_addFunctionsNode','logger\\x20websocket\\x20error','_blacklistedProperty','pop','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','_isMap','hrtime','replace','_undefined','_treeNodePropertiesBeforeFullValue','env','482968kAQAhF','root_exp','_connected','join','includes','Symbol','process','push','isArray','_isPrimitiveType','console','positiveInfinity','_p_length','_reconnectTimeout','test','perf_hooks','_processTreeNodeResult','host','error','props','sort','bigint','[object\\x20Array]','elapsed','node','capped','reduceLimits','NEGATIVE_INFINITY','create','846013ubODRn','level','origin','astro','substr','_ninjaIgnoreNextError','_attemptToReconnectShortly','_setNodeExpressionPath','_webSocketErrorDocsLink','getOwnPropertySymbols','onopen','POSITIVE_INFINITY','port','Buffer','_sendErrorMessage','_setNodeExpandableState','','resolveGetters','toLowerCase','parse','Set','_connecting','catch','current','_getOwnPropertyDescriptor','value','time','autoExpand','charAt','getOwnPropertyDescriptor','isExpressionToEvaluate',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'array','hostname','index','warn','trace','...','unshift','_connectToHostNow','[object\\x20Map]','stack','\\x20server','data','getPrototypeOf','null','_property','startsWith','autoExpandMaxDepth','fromCharCode','rootExpression','85290EXqTYH','[object\\x20BigInt]','_allowedToSend','_setNodeLabel','root_exp_id','\\x20browser','HTMLAllCollection','name','disabledTrace','readyState','_propertyName','_p_','symbol','undefined','elements','12iCnRll','_setNodeQueryPath','then','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','WebSocket','parent','NEXT_RUNTIME','_addObjectProperty','nodeModules','versions','1.0.0','indexOf'];_0x26ed=function(){return _0x251fed;};return _0x26ed();}var K=Object[_0xfb4f89(0x186)],Q=Object['defineProperty'],G=Object[_0xfb4f89(0x1a4)],ee=Object[_0xfb4f89(0x129)],te=Object[_0xfb4f89(0x1b3)],ne=Object[_0xfb4f89(0xe3)]['hasOwnProperty'],re=(_0x58bc7c,_0x4ddd0d,_0x456630,_0x3f0baa)=>{var _0x4ea018=_0xfb4f89;if(_0x4ddd0d&&typeof _0x4ddd0d==_0x4ea018(0x143)||typeof _0x4ddd0d==_0x4ea018(0x120)){for(let _0x4d5349 of ee(_0x4ddd0d))!ne['call'](_0x58bc7c,_0x4d5349)&&_0x4d5349!==_0x456630&&Q(_0x58bc7c,_0x4d5349,{'get':()=>_0x4ddd0d[_0x4d5349],'enumerable':!(_0x3f0baa=G(_0x4ddd0d,_0x4d5349))||_0x3f0baa[_0x4ea018(0xea)]});}return _0x58bc7c;},V=(_0x1cfc08,_0x281930,_0x19747b)=>(_0x19747b=_0x1cfc08!=null?K(te(_0x1cfc08)):{},re(_0x281930||!_0x1cfc08||!_0x1cfc08['__es'+'Module']?Q(_0x19747b,_0xfb4f89(0xf7),{'value':_0x1cfc08,'enumerable':!0x0}):_0x19747b,_0x1cfc08)),Z=class{constructor(_0x27da3d,_0x33c83f,_0x51422d,_0x1bd27f,_0x1f1628,_0x2c27f9){var _0x30bae0=_0xfb4f89,_0xdb2aee,_0x215b6b,_0x3330a3,_0x5417b5;this['global']=_0x27da3d,this[_0x30bae0(0x17b)]=_0x33c83f,this[_0x30bae0(0x193)]=_0x51422d,this[_0x30bae0(0xd1)]=_0x1bd27f,this['dockerizedApp']=_0x1f1628,this[_0x30bae0(0x123)]=_0x2c27f9,this['_allowedToSend']=!0x0,this[_0x30bae0(0x134)]=!0x0,this[_0x30bae0(0x16c)]=!0x1,this[_0x30bae0(0x19c)]=!0x1,this[_0x30bae0(0xd6)]=((_0x215b6b=(_0xdb2aee=_0x27da3d[_0x30bae0(0x170)])==null?void 0x0:_0xdb2aee[_0x30bae0(0x169)])==null?void 0x0:_0x215b6b[_0x30bae0(0xcf)])===_0x30bae0(0x132),this[_0x30bae0(0x12c)]=!((_0x5417b5=(_0x3330a3=this[_0x30bae0(0x15a)]['process'])==null?void 0x0:_0x3330a3[_0x30bae0(0xd2)])!=null&&_0x5417b5['node'])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x30bae0(0xfa)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x30bae0(0x18f)]=_0x30bae0(0x153),this[_0x30bae0(0x195)]=(this[_0x30bae0(0x12c)]?_0x30bae0(0x163):_0x30bae0(0x113))+this['_webSocketErrorDocsLink'];}async['getWebSocketClass'](){var _0x5afa9b=_0xfb4f89,_0x2d9f96,_0x565058;if(this[_0x5afa9b(0x13f)])return this['_WebSocketClass'];let _0x2e12c3;if(this[_0x5afa9b(0x12c)]||this[_0x5afa9b(0xd6)])_0x2e12c3=this[_0x5afa9b(0x15a)][_0x5afa9b(0xcd)];else{if((_0x2d9f96=this[_0x5afa9b(0x15a)]['process'])!=null&&_0x2d9f96[_0x5afa9b(0x145)])_0x2e12c3=(_0x565058=this['global'][_0x5afa9b(0x170)])==null?void 0x0:_0x565058[_0x5afa9b(0x145)];else try{let _0x55a8a7=await import(_0x5afa9b(0x14b));_0x2e12c3=(await import((await import(_0x5afa9b(0xec)))[_0x5afa9b(0x13b)](_0x55a8a7[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],_0x5afa9b(0x10b)))[_0x5afa9b(0x14e)]()))['default'];}catch{try{_0x2e12c3=require(require(_0x5afa9b(0x14b))[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],'ws'));}catch{throw new Error(_0x5afa9b(0x15c));}}}return this[_0x5afa9b(0x13f)]=_0x2e12c3,_0x2e12c3;}[_0xfb4f89(0x1ae)](){var _0x3cad60=_0xfb4f89;this[_0x3cad60(0x19c)]||this[_0x3cad60(0x16c)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this[_0x3cad60(0x134)]=!0x1,this[_0x3cad60(0x19c)]=!0x0,this[_0x3cad60(0xfa)]++,this[_0x3cad60(0x12d)]=new Promise((_0x343abd,_0xba088b)=>{var _0x11311a=_0x3cad60;this[_0x11311a(0x106)]()[_0x11311a(0xcb)](_0xb09450=>{var _0x43fada=_0x11311a;let _0x387749=new _0xb09450(_0x43fada(0x157)+(!this[_0x43fada(0x12c)]&&this[_0x43fada(0xe9)]?_0x43fada(0xe0):this[_0x43fada(0x17b)])+':'+this[_0x43fada(0x193)]);_0x387749['onerror']=()=>{var _0x453cb7=_0x43fada;this['_allowedToSend']=!0x1,this[_0x453cb7(0xf8)](_0x387749),this[_0x453cb7(0x18d)](),_0xba088b(new Error(_0x453cb7(0x160)));},_0x387749[_0x43fada(0x191)]=()=>{var _0xdaf47c=_0x43fada;this[_0xdaf47c(0x12c)]||_0x387749['_socket']&&_0x387749[_0xdaf47c(0x112)][_0xdaf47c(0xfc)]&&_0x387749[_0xdaf47c(0x112)]['unref'](),_0x343abd(_0x387749);},_0x387749[_0x43fada(0xe5)]=()=>{var _0xc56748=_0x43fada;this[_0xc56748(0x134)]=!0x0,this[_0xc56748(0xf8)](_0x387749),this[_0xc56748(0x18d)]();},_0x387749[_0x43fada(0xf5)]=_0x47ed3a=>{var _0x28f580=_0x43fada;try{if(!(_0x47ed3a!=null&&_0x47ed3a[_0x28f580(0x1b2)])||!this[_0x28f580(0x123)])return;let _0x479ee5=JSON[_0x28f580(0x19a)](_0x47ed3a['data']);this[_0x28f580(0x123)](_0x479ee5['method'],_0x479ee5[_0x28f580(0x115)],this[_0x28f580(0x15a)],this[_0x28f580(0x12c)]);}catch{}};})[_0x11311a(0xcb)](_0x13520=>(this['_connected']=!0x0,this['_connecting']=!0x1,this[_0x11311a(0x134)]=!0x1,this[_0x11311a(0xbc)]=!0x0,this[_0x11311a(0xfa)]=0x0,_0x13520))[_0x11311a(0x19d)](_0x18f1a9=>(this[_0x11311a(0x16c)]=!0x1,this[_0x11311a(0x19c)]=!0x1,console[_0x11311a(0x1aa)](_0x11311a(0x144)+this['_webSocketErrorDocsLink']),_0xba088b(new Error(_0x11311a(0x117)+(_0x18f1a9&&_0x18f1a9['message'])))));}));}['_disposeWebsocket'](_0x347259){var _0x55188d=_0xfb4f89;this[_0x55188d(0x16c)]=!0x1,this[_0x55188d(0x19c)]=!0x1;try{_0x347259['onclose']=null,_0x347259[_0x55188d(0xd5)]=null,_0x347259[_0x55188d(0x191)]=null;}catch{}try{_0x347259[_0x55188d(0xc3)]<0x2&&_0x347259[_0x55188d(0xd8)]();}catch{}}['_attemptToReconnectShortly'](){var _0x366627=_0xfb4f89;clearTimeout(this[_0x366627(0x177)]),!(this['_connectAttemptCount']>=this['_maxConnectAttemptCount'])&&(this[_0x366627(0x177)]=setTimeout(()=>{var _0x411b7b=_0x366627,_0x5e8f34;this[_0x411b7b(0x16c)]||this[_0x411b7b(0x19c)]||(this[_0x411b7b(0x1ae)](),(_0x5e8f34=this[_0x411b7b(0x12d)])==null||_0x5e8f34[_0x411b7b(0x19d)](()=>this[_0x411b7b(0x18d)]()));},0x1f4),this['_reconnectTimeout'][_0x366627(0xfc)]&&this[_0x366627(0x177)][_0x366627(0xfc)]());}async[_0xfb4f89(0x119)](_0x23f51e){var _0x337959=_0xfb4f89;try{if(!this['_allowedToSend'])return;this[_0x337959(0x134)]&&this[_0x337959(0x1ae)](),(await this['_ws'])['send'](JSON[_0x337959(0xf1)](_0x23f51e));}catch(_0x5b0fbc){console['warn'](this[_0x337959(0x195)]+':\\x20'+(_0x5b0fbc&&_0x5b0fbc[_0x337959(0x135)])),this[_0x337959(0xbc)]=!0x1,this[_0x337959(0x18d)]();}}};function q(_0x24daeb,_0xb6f519,_0x552a83,_0x4172cf,_0x76dbb7,_0x506843,_0xbf75ac,_0x3ac2c4=ie){var _0x5b9d64=_0xfb4f89;let _0x4b9373=_0x552a83[_0x5b9d64(0xe8)](',')[_0x5b9d64(0x13e)](_0x5dbfe4=>{var _0x66c71b=_0x5b9d64,_0x9e1668,_0x5a37d5,_0x13a0cc,_0x3e3cc6;try{if(!_0x24daeb[_0x66c71b(0xf0)]){let _0x280f70=((_0x5a37d5=(_0x9e1668=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x9e1668['versions'])==null?void 0x0:_0x5a37d5[_0x66c71b(0x182)])||((_0x3e3cc6=(_0x13a0cc=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x13a0cc[_0x66c71b(0x169)])==null?void 0x0:_0x3e3cc6[_0x66c71b(0xcf)])===_0x66c71b(0x132);(_0x76dbb7==='next.js'||_0x76dbb7===_0x66c71b(0x149)||_0x76dbb7===_0x66c71b(0x18a)||_0x76dbb7==='angular')&&(_0x76dbb7+=_0x280f70?_0x66c71b(0x1b1):_0x66c71b(0xbf)),_0x24daeb['_console_ninja_session']={'id':+new Date(),'tool':_0x76dbb7},_0xbf75ac&&_0x76dbb7&&!_0x280f70&&console[_0x66c71b(0xd9)](_0x66c71b(0xcc)+(_0x76dbb7[_0x66c71b(0x1a3)](0x0)[_0x66c71b(0x103)]()+_0x76dbb7[_0x66c71b(0x18b)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x66c71b(0x11a));}let _0x14c600=new Z(_0x24daeb,_0xb6f519,_0x5dbfe4,_0x4172cf,_0x506843,_0x3ac2c4);return _0x14c600[_0x66c71b(0x119)][_0x66c71b(0xdf)](_0x14c600);}catch(_0x9ef8db){return console[_0x66c71b(0x1aa)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0x9ef8db&&_0x9ef8db['message']),()=>{};}});return _0x418120=>_0x4b9373['forEach'](_0x28c9a5=>_0x28c9a5(_0x418120));}function _0x3ff9(_0xe67838,_0x6d1486){var _0x26ed68=_0x26ed();return _0x3ff9=function(_0x3ff920,_0x489329){_0x3ff920=_0x3ff920-0xbb;var _0x3995cc=_0x26ed68[_0x3ff920];return _0x3995cc;},_0x3ff9(_0xe67838,_0x6d1486);}function ie(_0x57727f,_0x4b37c7,_0x14dabd,_0x5b90a9){var _0x440899=_0xfb4f89;_0x5b90a9&&_0x57727f===_0x440899(0x158)&&_0x14dabd['location']['reload']();}function B(_0x26c9ac){var _0x47f085=_0xfb4f89,_0x3ecb7a,_0x47b516;let _0x220806=function(_0x3a020e,_0x53c69a){return _0x53c69a-_0x3a020e;},_0x2108c2;if(_0x26c9ac[_0x47f085(0x104)])_0x2108c2=function(){var _0x337423=_0x47f085;return _0x26c9ac[_0x337423(0x104)][_0x337423(0x11e)]();};else{if(_0x26c9ac[_0x47f085(0x170)]&&_0x26c9ac[_0x47f085(0x170)][_0x47f085(0x165)]&&((_0x47b516=(_0x3ecb7a=_0x26c9ac['process'])==null?void 0x0:_0x3ecb7a[_0x47f085(0x169)])==null?void 0x0:_0x47b516['NEXT_RUNTIME'])!=='edge')_0x2108c2=function(){return _0x26c9ac['process']['hrtime']();},_0x220806=function(_0x341fb3,_0x2c6618){return 0x3e8*(_0x2c6618[0x0]-_0x341fb3[0x0])+(_0x2c6618[0x1]-_0x341fb3[0x1])/0xf4240;};else try{let {performance:_0x416a52}=require(_0x47f085(0x179));_0x2108c2=function(){var _0x48150f=_0x47f085;return _0x416a52[_0x48150f(0x11e)]();};}catch{_0x2108c2=function(){return+new Date();};}}return{'elapsed':_0x220806,'timeStamp':_0x2108c2,'now':()=>Date['now']()};}function H(_0xcbdc20,_0x1ce242,_0x1b66cf){var _0xa13825=_0xfb4f89,_0x36e26f,_0x2d652c,_0x5e73f3,_0x21ac45,_0x17eb79;if(_0xcbdc20['_consoleNinjaAllowedToStart']!==void 0x0)return _0xcbdc20[_0xa13825(0x155)];let _0x40bb2b=((_0x2d652c=(_0x36e26f=_0xcbdc20['process'])==null?void 0x0:_0x36e26f[_0xa13825(0xd2)])==null?void 0x0:_0x2d652c[_0xa13825(0x182)])||((_0x21ac45=(_0x5e73f3=_0xcbdc20[_0xa13825(0x170)])==null?void 0x0:_0x5e73f3['env'])==null?void 0x0:_0x21ac45[_0xa13825(0xcf)])==='edge';function _0x3e8cd8(_0x3787d6){var _0x52530a=_0xa13825;if(_0x3787d6[_0x52530a(0x1b6)]('/')&&_0x3787d6[_0x52530a(0x148)]('/')){let _0x523815=new RegExp(_0x3787d6['slice'](0x1,-0x1));return _0x5ebf2a=>_0x523815[_0x52530a(0x178)](_0x5ebf2a);}else{if(_0x3787d6['includes']('*')||_0x3787d6[_0x52530a(0x16e)]('?')){let _0x185e95=new RegExp('^'+_0x3787d6['replace'](/\\./g,String[_0x52530a(0x1b8)](0x5c)+'.')['replace'](/\\*/g,'.*')['replace'](/\\?/g,'.')+String[_0x52530a(0x1b8)](0x24));return _0x175863=>_0x185e95[_0x52530a(0x178)](_0x175863);}else return _0x274ecc=>_0x274ecc===_0x3787d6;}}let _0x4b6171=_0x1ce242['map'](_0x3e8cd8);return _0xcbdc20['_consoleNinjaAllowedToStart']=_0x40bb2b||!_0x1ce242,!_0xcbdc20['_consoleNinjaAllowedToStart']&&((_0x17eb79=_0xcbdc20['location'])==null?void 0x0:_0x17eb79[_0xa13825(0x1a8)])&&(_0xcbdc20[_0xa13825(0x155)]=_0x4b6171[_0xa13825(0x14d)](_0x5c10f1=>_0x5c10f1(_0xcbdc20['location']['hostname']))),_0xcbdc20[_0xa13825(0x155)];}function X(_0x363d55,_0x1d9169,_0x46ca90,_0x46f67c){var _0x10ed28=_0xfb4f89;_0x363d55=_0x363d55,_0x1d9169=_0x1d9169,_0x46ca90=_0x46ca90,_0x46f67c=_0x46f67c;let _0x92ac1e=B(_0x363d55),_0x224ffb=_0x92ac1e[_0x10ed28(0x181)],_0x4ebef8=_0x92ac1e[_0x10ed28(0x11d)];class _0x328bde{constructor(){var _0x3c2acc=_0x10ed28;this[_0x3c2acc(0x136)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3c2acc(0x141)]=/^(0|[1-9][0-9]*)$/,this[_0x3c2acc(0xe6)]=/'([^\\\\']|\\\\')*'/,this[_0x3c2acc(0x167)]=_0x363d55[_0x3c2acc(0xc7)],this[_0x3c2acc(0x15d)]=_0x363d55['HTMLAllCollection'],this[_0x3c2acc(0x19f)]=Object[_0x3c2acc(0x1a4)],this['_getOwnPropertyNames']=Object[_0x3c2acc(0x129)],this[_0x3c2acc(0xed)]=_0x363d55[_0x3c2acc(0x16f)],this['_regExpToString']=RegExp['prototype'][_0x3c2acc(0x14e)],this[_0x3c2acc(0x130)]=Date[_0x3c2acc(0xe3)][_0x3c2acc(0x14e)];}[_0x10ed28(0xfd)](_0x5863e0,_0x563675,_0x25dde8,_0x4235ab){var _0x5eac97=_0x10ed28,_0x15d2ae=this,_0x48a558=_0x25dde8[_0x5eac97(0x1a2)];function _0x34c0d4(_0x2959d0,_0x3e333c,_0x6ec96e){var _0x29ad7b=_0x5eac97;_0x3e333c[_0x29ad7b(0x100)]=_0x29ad7b(0xff),_0x3e333c[_0x29ad7b(0x17c)]=_0x2959d0[_0x29ad7b(0x135)],_0x2a098b=_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)],_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)]=_0x3e333c,_0x15d2ae[_0x29ad7b(0x168)](_0x3e333c,_0x6ec96e);}try{_0x25dde8['level']++,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x171)](_0x563675);var _0x5e937d,_0x4d4837,_0x7a94ce,_0x12e437,_0x54273c=[],_0x3076d3=[],_0x4a27d5,_0x1f1aa0=this[_0x5eac97(0x13c)](_0x563675),_0x1fe8fc=_0x1f1aa0==='array',_0x1d9d33=!0x1,_0x1f7cfe=_0x1f1aa0===_0x5eac97(0x120),_0x3084ae=this[_0x5eac97(0x173)](_0x1f1aa0),_0xc35bc7=this[_0x5eac97(0x13d)](_0x1f1aa0),_0x48d9e1=_0x3084ae||_0xc35bc7,_0x590449={},_0x29fc28=0x0,_0x31b022=!0x1,_0x2a098b,_0x14e2a6=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x25dde8[_0x5eac97(0x159)]){if(_0x1fe8fc){if(_0x4d4837=_0x563675[_0x5eac97(0xf4)],_0x4d4837>_0x25dde8[_0x5eac97(0xc8)]){for(_0x7a94ce=0x0,_0x12e437=_0x25dde8['elements'],_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));_0x5863e0[_0x5eac97(0x142)]=!0x0;}else{for(_0x7a94ce=0x0,_0x12e437=_0x4d4837,_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));}_0x25dde8[_0x5eac97(0x110)]+=_0x3076d3[_0x5eac97(0xf4)];}if(!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&!_0x3084ae&&_0x1f1aa0!==_0x5eac97(0x137)&&_0x1f1aa0!==_0x5eac97(0x194)&&_0x1f1aa0!==_0x5eac97(0x17f)){var _0x3a0092=_0x4235ab[_0x5eac97(0x17d)]||_0x25dde8[_0x5eac97(0x17d)];if(this[_0x5eac97(0x15e)](_0x563675)?(_0x5e937d=0x0,_0x563675[_0x5eac97(0x10a)](function(_0x4b3319){var _0x3d2aa8=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x3d2aa8(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x3d2aa8(0x1a2)]&&_0x25dde8['autoExpandPropertyCount']>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}_0x3076d3[_0x3d2aa8(0x171)](_0x15d2ae[_0x3d2aa8(0xe4)](_0x54273c,_0x563675,_0x3d2aa8(0x19b),_0x5e937d++,_0x25dde8,function(_0x5e7ebe){return function(){return _0x5e7ebe;};}(_0x4b3319)));})):this[_0x5eac97(0x164)](_0x563675)&&_0x563675[_0x5eac97(0x10a)](function(_0x789f9,_0x40bfed){var _0x595515=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x595515(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x595515(0x1a2)]&&_0x25dde8[_0x595515(0x110)]>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}var _0x14d096=_0x40bfed[_0x595515(0x14e)]();_0x14d096[_0x595515(0xf4)]>0x64&&(_0x14d096=_0x14d096['slice'](0x0,0x64)+_0x595515(0x1ac)),_0x3076d3[_0x595515(0x171)](_0x15d2ae[_0x595515(0xe4)](_0x54273c,_0x563675,_0x595515(0xeb),_0x14d096,_0x25dde8,function(_0x8448c2){return function(){return _0x8448c2;};}(_0x789f9)));}),!_0x1d9d33){try{for(_0x4a27d5 in _0x563675)if(!(_0x1fe8fc&&_0x14e2a6['test'](_0x4a27d5))&&!this['_blacklistedProperty'](_0x563675,_0x4a27d5,_0x25dde8)){if(_0x29fc28++,_0x25dde8[_0x5eac97(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}catch{}if(_0x590449[_0x5eac97(0x176)]=!0x0,_0x1f7cfe&&(_0x590449['_p_name']=!0x0),!_0x31b022){var _0x18c0f5=[][_0x5eac97(0x14c)](this[_0x5eac97(0x151)](_0x563675))[_0x5eac97(0x14c)](this[_0x5eac97(0x12e)](_0x563675));for(_0x5e937d=0x0,_0x4d4837=_0x18c0f5['length'];_0x5e937d<_0x4d4837;_0x5e937d++)if(_0x4a27d5=_0x18c0f5[_0x5e937d],!(_0x1fe8fc&&_0x14e2a6[_0x5eac97(0x178)](_0x4a27d5[_0x5eac97(0x14e)]()))&&!this[_0x5eac97(0x161)](_0x563675,_0x4a27d5,_0x25dde8)&&!_0x590449[_0x5eac97(0xc5)+_0x4a27d5[_0x5eac97(0x14e)]()]){if(_0x29fc28++,_0x25dde8['autoExpandPropertyCount']++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}}}}if(_0x5863e0[_0x5eac97(0x100)]=_0x1f1aa0,_0x48d9e1?(_0x5863e0['value']=_0x563675[_0x5eac97(0xee)](),this[_0x5eac97(0x133)](_0x1f1aa0,_0x5863e0,_0x25dde8,_0x4235ab)):_0x1f1aa0===_0x5eac97(0xd7)?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0x130)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0x17f)?_0x5863e0[_0x5eac97(0x1a0)]=_0x563675[_0x5eac97(0x14e)]():_0x1f1aa0==='RegExp'?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0xe7)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0xc6)&&this[_0x5eac97(0xed)]?_0x5863e0[_0x5eac97(0x1a0)]=this['_Symbol'][_0x5eac97(0xe3)][_0x5eac97(0x14e)]['call'](_0x563675):!_0x25dde8['depth']&&!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&(delete _0x5863e0['value'],_0x5863e0['capped']=!0x0),_0x31b022&&(_0x5863e0[_0x5eac97(0x116)]=!0x0),_0x2a098b=_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)],_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)]=_0x5863e0,this[_0x5eac97(0x168)](_0x5863e0,_0x25dde8),_0x3076d3[_0x5eac97(0xf4)]){for(_0x5e937d=0x0,_0x4d4837=_0x3076d3[_0x5eac97(0xf4)];_0x5e937d<_0x4d4837;_0x5e937d++)_0x3076d3[_0x5e937d](_0x5e937d);}_0x54273c[_0x5eac97(0xf4)]&&(_0x5863e0[_0x5eac97(0x17d)]=_0x54273c);}catch(_0x5b6a62){_0x34c0d4(_0x5b6a62,_0x5863e0,_0x25dde8);}return this[_0x5eac97(0x14f)](_0x563675,_0x5863e0),this['_treeNodePropertiesAfterFullValue'](_0x5863e0,_0x25dde8),_0x25dde8['node'][_0x5eac97(0x19e)]=_0x2a098b,_0x25dde8['level']--,_0x25dde8[_0x5eac97(0x1a2)]=_0x48a558,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x162)](),_0x5863e0;}[_0x10ed28(0x12e)](_0x5e7e45){var _0x111dd1=_0x10ed28;return Object[_0x111dd1(0x190)]?Object[_0x111dd1(0x190)](_0x5e7e45):[];}[_0x10ed28(0x15e)](_0x5b69a9){var _0x55ac27=_0x10ed28;return!!(_0x5b69a9&&_0x363d55[_0x55ac27(0x19b)]&&this[_0x55ac27(0x152)](_0x5b69a9)===_0x55ac27(0x147)&&_0x5b69a9[_0x55ac27(0x10a)]);}['_blacklistedProperty'](_0x28b15f,_0x581dd6,_0x32226c){var _0x247a74=_0x10ed28;return _0x32226c[_0x247a74(0xef)]?typeof _0x28b15f[_0x581dd6]==_0x247a74(0x120):!0x1;}[_0x10ed28(0x13c)](_0x352136){var _0x47498e=_0x10ed28,_0x456822='';return _0x456822=typeof _0x352136,_0x456822===_0x47498e(0x143)?this[_0x47498e(0x152)](_0x352136)===_0x47498e(0x180)?_0x456822=_0x47498e(0x1a7):this[_0x47498e(0x152)](_0x352136)===_0x47498e(0xdd)?_0x456822='date':this['_objectToString'](_0x352136)===_0x47498e(0xbb)?_0x456822=_0x47498e(0x17f):_0x352136===null?_0x456822=_0x47498e(0x1b4):_0x352136[_0x47498e(0x10e)]&&(_0x456822=_0x352136[_0x47498e(0x10e)][_0x47498e(0xc1)]||_0x456822):_0x456822==='undefined'&&this[_0x47498e(0x15d)]&&_0x352136 instanceof this[_0x47498e(0x15d)]&&(_0x456822=_0x47498e(0xc0)),_0x456822;}['_objectToString'](_0x1de66c){var _0x473e65=_0x10ed28;return Object[_0x473e65(0xe3)]['toString'][_0x473e65(0x11c)](_0x1de66c);}[_0x10ed28(0x173)](_0x1b731a){var _0xb60b14=_0x10ed28;return _0x1b731a===_0xb60b14(0xe1)||_0x1b731a===_0xb60b14(0x102)||_0x1b731a===_0xb60b14(0xde);}['_isPrimitiveWrapperType'](_0x331b09){var _0x16d7d9=_0x10ed28;return _0x331b09===_0x16d7d9(0x154)||_0x331b09===_0x16d7d9(0x137)||_0x331b09===_0x16d7d9(0x131);}[_0x10ed28(0xe4)](_0x29c99b,_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49){var _0x458f4f=this;return function(_0x530f99){var _0x374746=_0x3ff9,_0x60df83=_0x178327[_0x374746(0x182)][_0x374746(0x19e)],_0x25a209=_0x178327[_0x374746(0x182)][_0x374746(0x1a9)],_0x290e99=_0x178327[_0x374746(0x182)]['parent'];_0x178327[_0x374746(0x182)][_0x374746(0xce)]=_0x60df83,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=typeof _0x3076bc==_0x374746(0xde)?_0x3076bc:_0x530f99,_0x29c99b[_0x374746(0x171)](_0x458f4f[_0x374746(0x1b5)](_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49)),_0x178327['node'][_0x374746(0xce)]=_0x290e99,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=_0x25a209;};}[_0x10ed28(0xd0)](_0x83b0e,_0x4dbfb7,_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415){var _0x4ff80c=_0x10ed28,_0x3c23d4=this;return _0x4dbfb7[_0x4ff80c(0xc5)+_0xf742cb['toString']()]=!0x0,function(_0x3abd65){var _0x4ac95e=_0x4ff80c,_0x2c9c3f=_0x5e0402[_0x4ac95e(0x182)]['current'],_0x2635bd=_0x5e0402[_0x4ac95e(0x182)][_0x4ac95e(0x1a9)],_0xc2e0d=_0x5e0402['node'][_0x4ac95e(0xce)];_0x5e0402['node'][_0x4ac95e(0xce)]=_0x2c9c3f,_0x5e0402[_0x4ac95e(0x182)]['index']=_0x3abd65,_0x83b0e[_0x4ac95e(0x171)](_0x3c23d4[_0x4ac95e(0x1b5)](_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415)),_0x5e0402['node'][_0x4ac95e(0xce)]=_0xc2e0d,_0x5e0402['node'][_0x4ac95e(0x1a9)]=_0x2635bd;};}[_0x10ed28(0x1b5)](_0xf38ac3,_0x5bdcfd,_0x290e62,_0x7990cf,_0x48e604){var _0x1aa57e=_0x10ed28,_0x2bff8c=this;_0x48e604||(_0x48e604=function(_0x43ba8f,_0x597d26){return _0x43ba8f[_0x597d26];});var _0x48a20e=_0x290e62[_0x1aa57e(0x14e)](),_0xd6873d=_0x7990cf[_0x1aa57e(0x138)]||{},_0x7426f3=_0x7990cf[_0x1aa57e(0x159)],_0x3f3199=_0x7990cf[_0x1aa57e(0x1a5)];try{var _0x18b702=this['_isMap'](_0xf38ac3),_0x5a1ae4=_0x48a20e;_0x18b702&&_0x5a1ae4[0x0]==='\\x27'&&(_0x5a1ae4=_0x5a1ae4['substr'](0x1,_0x5a1ae4[_0x1aa57e(0xf4)]-0x2));var _0x6af1a1=_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d['_p_'+_0x5a1ae4];_0x6af1a1&&(_0x7990cf[_0x1aa57e(0x159)]=_0x7990cf[_0x1aa57e(0x159)]+0x1),_0x7990cf[_0x1aa57e(0x1a5)]=!!_0x6af1a1;var _0x2333d7=typeof _0x290e62==_0x1aa57e(0xc6),_0x22cba0={'name':_0x2333d7||_0x18b702?_0x48a20e:this['_propertyName'](_0x48a20e)};if(_0x2333d7&&(_0x22cba0[_0x1aa57e(0xc6)]=!0x0),!(_0x5bdcfd===_0x1aa57e(0x1a7)||_0x5bdcfd===_0x1aa57e(0x12f))){var _0x156b6d=this[_0x1aa57e(0x19f)](_0xf38ac3,_0x290e62);if(_0x156b6d&&(_0x156b6d['set']&&(_0x22cba0['setter']=!0x0),_0x156b6d[_0x1aa57e(0x107)]&&!_0x6af1a1&&!_0x7990cf[_0x1aa57e(0x198)]))return _0x22cba0['getter']=!0x0,this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x36fd25;try{_0x36fd25=_0x48e604(_0xf38ac3,_0x290e62);}catch(_0x210082){return _0x22cba0={'name':_0x48a20e,'type':_0x1aa57e(0xff),'error':_0x210082[_0x1aa57e(0x135)]},this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x15c01e=this[_0x1aa57e(0x13c)](_0x36fd25),_0x1aab99=this[_0x1aa57e(0x173)](_0x15c01e);if(_0x22cba0['type']=_0x15c01e,_0x1aab99)this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x4f8d75=_0x1aa57e;_0x22cba0[_0x4f8d75(0x1a0)]=_0x36fd25['valueOf'](),!_0x6af1a1&&_0x2bff8c[_0x4f8d75(0x133)](_0x15c01e,_0x22cba0,_0x7990cf,{});});else{var _0x335f59=_0x7990cf[_0x1aa57e(0x1a2)]&&_0x7990cf['level']<_0x7990cf['autoExpandMaxDepth']&&_0x7990cf[_0x1aa57e(0x10d)][_0x1aa57e(0xd4)](_0x36fd25)<0x0&&_0x15c01e!==_0x1aa57e(0x120)&&_0x7990cf[_0x1aa57e(0x110)]<_0x7990cf['autoExpandLimit'];_0x335f59||_0x7990cf[_0x1aa57e(0x188)]<_0x7426f3||_0x6af1a1?(this['serialize'](_0x22cba0,_0x36fd25,_0x7990cf,_0x6af1a1||{}),this[_0x1aa57e(0x14f)](_0x36fd25,_0x22cba0)):this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x53d000=_0x1aa57e;_0x15c01e===_0x53d000(0x1b4)||_0x15c01e===_0x53d000(0xc7)||(delete _0x22cba0[_0x53d000(0x1a0)],_0x22cba0[_0x53d000(0x183)]=!0x0);});}return _0x22cba0;}finally{_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d,_0x7990cf[_0x1aa57e(0x159)]=_0x7426f3,_0x7990cf[_0x1aa57e(0x1a5)]=_0x3f3199;}}['_capIfString'](_0x96020c,_0x4e4cc3,_0xaeab36,_0x1e5657){var _0x2356e4=_0x10ed28,_0x2bbfa6=_0x1e5657['strLength']||_0xaeab36[_0x2356e4(0x108)];if((_0x96020c===_0x2356e4(0x102)||_0x96020c===_0x2356e4(0x137))&&_0x4e4cc3['value']){let _0x2e0d21=_0x4e4cc3['value'][_0x2356e4(0xf4)];_0xaeab36['allStrLength']+=_0x2e0d21,_0xaeab36['allStrLength']>_0xaeab36[_0x2356e4(0xf3)]?(_0x4e4cc3[_0x2356e4(0x183)]='',delete _0x4e4cc3['value']):_0x2e0d21>_0x2bbfa6&&(_0x4e4cc3[_0x2356e4(0x183)]=_0x4e4cc3[_0x2356e4(0x1a0)][_0x2356e4(0x18b)](0x0,_0x2bbfa6),delete _0x4e4cc3[_0x2356e4(0x1a0)]);}}[_0x10ed28(0x164)](_0x3efef3){var _0x3488ac=_0x10ed28;return!!(_0x3efef3&&_0x363d55[_0x3488ac(0xeb)]&&this[_0x3488ac(0x152)](_0x3efef3)===_0x3488ac(0x1af)&&_0x3efef3[_0x3488ac(0x10a)]);}[_0x10ed28(0xc4)](_0x11c35b){var _0x23453d=_0x10ed28;if(_0x11c35b[_0x23453d(0xf6)](/^\\d+$/))return _0x11c35b;var _0x4f6a03;try{_0x4f6a03=JSON[_0x23453d(0xf1)](''+_0x11c35b);}catch{_0x4f6a03='\\x22'+this[_0x23453d(0x152)](_0x11c35b)+'\\x22';}return _0x4f6a03[_0x23453d(0xf6)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x4f6a03=_0x4f6a03['substr'](0x1,_0x4f6a03['length']-0x2):_0x4f6a03=_0x4f6a03[_0x23453d(0x166)](/'/g,'\\x5c\\x27')['replace'](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x4f6a03;}[_0x10ed28(0x17a)](_0x55cc47,_0x11bab3,_0x41718f,_0x163b6a){var _0x47c902=_0x10ed28;this[_0x47c902(0x168)](_0x55cc47,_0x11bab3),_0x163b6a&&_0x163b6a(),this['_additionalMetadata'](_0x41718f,_0x55cc47),this['_treeNodePropertiesAfterFullValue'](_0x55cc47,_0x11bab3);}[_0x10ed28(0x168)](_0x3f8b3a,_0x4d5884){var _0x49c69e=_0x10ed28;this[_0x49c69e(0x12b)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0xca)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0x18e)](_0x3f8b3a,_0x4d5884),this['_setNodePermissions'](_0x3f8b3a,_0x4d5884);}[_0x10ed28(0x12b)](_0x24d5f8,_0x14eaea){}[_0x10ed28(0xca)](_0x576a32,_0x687c5){}[_0x10ed28(0xbd)](_0x489c9e,_0xf76957){}[_0x10ed28(0x140)](_0x40bd6c){return _0x40bd6c===this['_undefined'];}[_0x10ed28(0xf2)](_0x59dbd7,_0x39b993){var _0x4aab34=_0x10ed28;this[_0x4aab34(0xbd)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x196)](_0x59dbd7),_0x39b993[_0x4aab34(0xf9)]&&this['_sortProps'](_0x59dbd7),this[_0x4aab34(0x15f)](_0x59dbd7,_0x39b993),this[_0x4aab34(0xe2)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x111)](_0x59dbd7);}[_0x10ed28(0x14f)](_0x251965,_0x9b93cd){var _0x83cbd4=_0x10ed28;let _0xcd393f;try{_0x363d55[_0x83cbd4(0x174)]&&(_0xcd393f=_0x363d55[_0x83cbd4(0x174)]['error'],_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=function(){}),_0x251965&&typeof _0x251965[_0x83cbd4(0xf4)]==_0x83cbd4(0xde)&&(_0x9b93cd[_0x83cbd4(0xf4)]=_0x251965[_0x83cbd4(0xf4)]);}catch{}finally{_0xcd393f&&(_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=_0xcd393f);}if(_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0xde)||_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x131)){if(isNaN(_0x9b93cd[_0x83cbd4(0x1a0)]))_0x9b93cd['nan']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];else switch(_0x9b93cd[_0x83cbd4(0x1a0)]){case Number[_0x83cbd4(0x192)]:_0x9b93cd[_0x83cbd4(0x175)]=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case Number[_0x83cbd4(0x185)]:_0x9b93cd['negativeInfinity']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case 0x0:this[_0x83cbd4(0x101)](_0x9b93cd[_0x83cbd4(0x1a0)])&&(_0x9b93cd[_0x83cbd4(0x124)]=!0x0);break;}}else _0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x120)&&typeof _0x251965[_0x83cbd4(0xc1)]==_0x83cbd4(0x102)&&_0x251965[_0x83cbd4(0xc1)]&&_0x9b93cd[_0x83cbd4(0xc1)]&&_0x251965['name']!==_0x9b93cd[_0x83cbd4(0xc1)]&&(_0x9b93cd[_0x83cbd4(0xda)]=_0x251965['name']);}[_0x10ed28(0x101)](_0xdc72f6){var _0x396f32=_0x10ed28;return 0x1/_0xdc72f6===Number[_0x396f32(0x185)];}[_0x10ed28(0x114)](_0xc49f59){var _0x15d31a=_0x10ed28;!_0xc49f59[_0x15d31a(0x17d)]||!_0xc49f59[_0x15d31a(0x17d)]['length']||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x1a7)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0xeb)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x19b)||_0xc49f59[_0x15d31a(0x17d)][_0x15d31a(0x17e)](function(_0x521a66,_0x3037b9){var _0x19b3c8=_0x15d31a,_0x30740f=_0x521a66[_0x19b3c8(0xc1)][_0x19b3c8(0x199)](),_0x377ff1=_0x3037b9[_0x19b3c8(0xc1)]['toLowerCase']();return _0x30740f<_0x377ff1?-0x1:_0x30740f>_0x377ff1?0x1:0x0;});}['_addFunctionsNode'](_0x24f146,_0x304fda){var _0x2a0f15=_0x10ed28;if(!(_0x304fda[_0x2a0f15(0xef)]||!_0x24f146[_0x2a0f15(0x17d)]||!_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)])){for(var _0x14c9f5=[],_0x4d9ee4=[],_0x488f79=0x0,_0x101a34=_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)];_0x488f79<_0x101a34;_0x488f79++){var _0x19651f=_0x24f146[_0x2a0f15(0x17d)][_0x488f79];_0x19651f[_0x2a0f15(0x100)]===_0x2a0f15(0x120)?_0x14c9f5[_0x2a0f15(0x171)](_0x19651f):_0x4d9ee4['push'](_0x19651f);}if(!(!_0x4d9ee4[_0x2a0f15(0xf4)]||_0x14c9f5['length']<=0x1)){_0x24f146['props']=_0x4d9ee4;var _0x230bec={'functionsNode':!0x0,'props':_0x14c9f5};this[_0x2a0f15(0x12b)](_0x230bec,_0x304fda),this[_0x2a0f15(0xbd)](_0x230bec,_0x304fda),this[_0x2a0f15(0x196)](_0x230bec),this[_0x2a0f15(0xfe)](_0x230bec,_0x304fda),_0x230bec['id']+='\\x20f',_0x24f146['props'][_0x2a0f15(0x1ad)](_0x230bec);}}}[_0x10ed28(0xe2)](_0x468e99,_0x4388f0){}['_setNodeExpandableState'](_0x5eb717){}[_0x10ed28(0x121)](_0x38c05c){var _0x1aee1a=_0x10ed28;return Array[_0x1aee1a(0x172)](_0x38c05c)||typeof _0x38c05c==_0x1aee1a(0x143)&&this[_0x1aee1a(0x152)](_0x38c05c)===_0x1aee1a(0x180);}['_setNodePermissions'](_0x4eefa0,_0x1705a9){}[_0x10ed28(0x111)](_0x516906){var _0x236906=_0x10ed28;delete _0x516906[_0x236906(0x10f)],delete _0x516906['_hasSetOnItsPath'],delete _0x516906[_0x236906(0x125)];}[_0x10ed28(0x18e)](_0x23c1c2,_0x29a21b){}}let _0x4e7d7d=new _0x328bde(),_0x3886ea={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x30c557={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x586d36(_0x54f3be,_0x181b1a,_0x2b7eb5,_0x1dd634,_0x49c07c,_0x397446){var _0x2f18dd=_0x10ed28;let _0x4e7f72,_0x1de5a1;try{_0x1de5a1=_0x4ebef8(),_0x4e7f72=_0x46ca90[_0x181b1a],!_0x4e7f72||_0x1de5a1-_0x4e7f72['ts']>0x1f4&&_0x4e7f72[_0x2f18dd(0x118)]&&_0x4e7f72['time']/_0x4e7f72[_0x2f18dd(0x118)]<0x64?(_0x46ca90[_0x181b1a]=_0x4e7f72={'count':0x0,'time':0x0,'ts':_0x1de5a1},_0x46ca90[_0x2f18dd(0x128)]={}):_0x1de5a1-_0x46ca90[_0x2f18dd(0x128)]['ts']>0x32&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]/_0x46ca90[_0x2f18dd(0x128)]['count']<0x64&&(_0x46ca90[_0x2f18dd(0x128)]={});let _0x4ddd3d=[],_0x2c1b45=_0x4e7f72[_0x2f18dd(0x184)]||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]?_0x30c557:_0x3886ea,_0x398af5=_0x30c84c=>{var _0x988e3b=_0x2f18dd;let _0x14b3dc={};return _0x14b3dc[_0x988e3b(0x17d)]=_0x30c84c['props'],_0x14b3dc[_0x988e3b(0xc8)]=_0x30c84c['elements'],_0x14b3dc[_0x988e3b(0x108)]=_0x30c84c[_0x988e3b(0x108)],_0x14b3dc[_0x988e3b(0xf3)]=_0x30c84c[_0x988e3b(0xf3)],_0x14b3dc[_0x988e3b(0x146)]=_0x30c84c[_0x988e3b(0x146)],_0x14b3dc[_0x988e3b(0x1b7)]=_0x30c84c[_0x988e3b(0x1b7)],_0x14b3dc[_0x988e3b(0xf9)]=!0x1,_0x14b3dc[_0x988e3b(0xef)]=!_0x1d9169,_0x14b3dc[_0x988e3b(0x159)]=0x1,_0x14b3dc[_0x988e3b(0x188)]=0x0,_0x14b3dc[_0x988e3b(0x105)]=_0x988e3b(0xbe),_0x14b3dc[_0x988e3b(0x1b9)]=_0x988e3b(0x16b),_0x14b3dc[_0x988e3b(0x1a2)]=!0x0,_0x14b3dc[_0x988e3b(0x10d)]=[],_0x14b3dc[_0x988e3b(0x110)]=0x0,_0x14b3dc[_0x988e3b(0x198)]=!0x0,_0x14b3dc[_0x988e3b(0xdb)]=0x0,_0x14b3dc[_0x988e3b(0x182)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x14b3dc;};for(var _0x4e8b46=0x0;_0x4e8b46<_0x49c07c[_0x2f18dd(0xf4)];_0x4e8b46++)_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d[_0x2f18dd(0xfd)]({'timeNode':_0x54f3be===_0x2f18dd(0x1a1)||void 0x0},_0x49c07c[_0x4e8b46],_0x398af5(_0x2c1b45),{}));if(_0x54f3be===_0x2f18dd(0x1ab)||_0x54f3be===_0x2f18dd(0x17c)){let _0x38886c=Error[_0x2f18dd(0x11f)];try{Error['stackTraceLimit']=0x1/0x0,_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d['serialize']({'stackNode':!0x0},new Error()[_0x2f18dd(0x1b0)],_0x398af5(_0x2c1b45),{'strLength':0x1/0x0}));}finally{Error[_0x2f18dd(0x11f)]=_0x38886c;}}return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':_0x4ddd3d,'id':_0x181b1a,'context':_0x397446}]};}catch(_0x14cd18){return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':[{'type':_0x2f18dd(0xff),'error':_0x14cd18&&_0x14cd18[_0x2f18dd(0x135)]}],'id':_0x181b1a,'context':_0x397446}]};}finally{try{if(_0x4e7f72&&_0x1de5a1){let _0xa0025=_0x4ebef8();_0x4e7f72['count']++,_0x4e7f72['time']+=_0x224ffb(_0x1de5a1,_0xa0025),_0x4e7f72['ts']=_0xa0025,_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]++,_0x46ca90['hits'][_0x2f18dd(0x1a1)]+=_0x224ffb(_0x1de5a1,_0xa0025),_0x46ca90[_0x2f18dd(0x128)]['ts']=_0xa0025,(_0x4e7f72[_0x2f18dd(0x118)]>0x32||_0x4e7f72['time']>0x64)&&(_0x4e7f72[_0x2f18dd(0x184)]=!0x0),(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]>0x3e8||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]>0x12c)&&(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]=!0x0);}}catch{}}}return _0x586d36;}((_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x4b0ac8,_0x5246af,_0x42bfac,_0x4ca82f,_0x123580,_0x18969d)=>{var _0x407242=_0xfb4f89;if(_0x17891e[_0x407242(0x150)])return _0x17891e[_0x407242(0x150)];if(!H(_0x17891e,_0x42bfac,_0x479ca2))return _0x17891e['_console_ninja']={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x17891e[_0x407242(0x150)];let _0x37610e=B(_0x17891e),_0x3437ca=_0x37610e['elapsed'],_0x25b5e5=_0x37610e['timeStamp'],_0x4bf76b=_0x37610e[_0x407242(0x11e)],_0x125c7d={'hits':{},'ts':{}},_0x15b46a=X(_0x17891e,_0x4ca82f,_0x125c7d,_0x4b0ac8),_0xd5486b=_0x4d30e1=>{_0x125c7d['ts'][_0x4d30e1]=_0x25b5e5();},_0x2d07e6=(_0x5bc355,_0xe34fe)=>{var _0x2339ce=_0x407242;let _0x59fb6a=_0x125c7d['ts'][_0xe34fe];if(delete _0x125c7d['ts'][_0xe34fe],_0x59fb6a){let _0x5921a6=_0x3437ca(_0x59fb6a,_0x25b5e5());_0x2cf290(_0x15b46a(_0x2339ce(0x1a1),_0x5bc355,_0x4bf76b(),_0x253536,[_0x5921a6],_0xe34fe));}},_0x49bcec=_0x43e72f=>{var _0x2e47bf=_0x407242,_0x55d95d;return _0x479ca2===_0x2e47bf(0x139)&&_0x17891e['origin']&&((_0x55d95d=_0x43e72f==null?void 0x0:_0x43e72f['args'])==null?void 0x0:_0x55d95d['length'])&&(_0x43e72f['args'][0x0][_0x2e47bf(0x189)]=_0x17891e['origin']),_0x43e72f;};_0x17891e[_0x407242(0x150)]={'consoleLog':(_0x31c92e,_0x24488d)=>{var _0x93e67e=_0x407242;_0x17891e['console']['log'][_0x93e67e(0xc1)]!=='disabledLog'&&_0x2cf290(_0x15b46a(_0x93e67e(0xd9),_0x31c92e,_0x4bf76b(),_0x253536,_0x24488d));},'consoleTrace':(_0x3b66a7,_0xba880e)=>{var _0x567e13=_0x407242,_0x31716e,_0x5a9c60;_0x17891e[_0x567e13(0x174)]['log'][_0x567e13(0xc1)]!==_0x567e13(0xc2)&&((_0x5a9c60=(_0x31716e=_0x17891e[_0x567e13(0x170)])==null?void 0x0:_0x31716e[_0x567e13(0xd2)])!=null&&_0x5a9c60[_0x567e13(0x182)]&&(_0x17891e[_0x567e13(0x18c)]=!0x0),_0x2cf290(_0x49bcec(_0x15b46a(_0x567e13(0x1ab),_0x3b66a7,_0x4bf76b(),_0x253536,_0xba880e))));},'consoleError':(_0x3fa736,_0x121a3b)=>{var _0x12dfb8=_0x407242;_0x17891e[_0x12dfb8(0x18c)]=!0x0,_0x2cf290(_0x49bcec(_0x15b46a('error',_0x3fa736,_0x4bf76b(),_0x253536,_0x121a3b)));},'consoleTime':_0x1848a7=>{_0xd5486b(_0x1848a7);},'consoleTimeEnd':(_0x31ae65,_0x3d104a)=>{_0x2d07e6(_0x3d104a,_0x31ae65);},'autoLog':(_0x37808,_0x2ad558)=>{var _0x22938b=_0x407242;_0x2cf290(_0x15b46a(_0x22938b(0xd9),_0x2ad558,_0x4bf76b(),_0x253536,[_0x37808]));},'autoLogMany':(_0x161d7e,_0x43dedb)=>{var _0x379506=_0x407242;_0x2cf290(_0x15b46a(_0x379506(0xd9),_0x161d7e,_0x4bf76b(),_0x253536,_0x43dedb));},'autoTrace':(_0x1217e6,_0x446707)=>{var _0x3a5252=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x3a5252(0x1ab),_0x446707,_0x4bf76b(),_0x253536,[_0x1217e6])));},'autoTraceMany':(_0x5b77c4,_0x4fc43a)=>{var _0x5bfbf2=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x5bfbf2(0x1ab),_0x5b77c4,_0x4bf76b(),_0x253536,_0x4fc43a)));},'autoTime':(_0x24183a,_0x442759,_0x296a4c)=>{_0xd5486b(_0x296a4c);},'autoTimeEnd':(_0x2927a9,_0x243d30,_0x5bd63b)=>{_0x2d07e6(_0x243d30,_0x5bd63b);},'coverage':_0x519fc2=>{var _0x452554=_0x407242;_0x2cf290({'method':_0x452554(0x156),'version':_0x4b0ac8,'args':[{'id':_0x519fc2}]});}};let _0x2cf290=q(_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x123580,_0x18969d),_0x253536=_0x17891e[_0x407242(0xf0)];return _0x17891e['_console_ninja'];})(globalThis,_0xfb4f89(0x10c),'60591',_0xfb4f89(0xdc),'webpack',_0xfb4f89(0xd3),'1727950005016',_0xfb4f89(0x1a6),_0xfb4f89(0xfb),_0xfb4f89(0x197),_0xfb4f89(0x13a));")}catch(e){}}function f(e,...t){try{h().consoleLog(e,t)}catch(e){}return t}},"./src/components/audio-player.ts":(e,t,x)=>{x.r(t),x.d(t,{AudioPlayer:()=>i});var a=x("./src/constants/index.ts");class i{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=s.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const e=a.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(e),i.audioBuffers.set(e,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(e){return void console.error(...n("2928562115_33_8_33_70_11","Error loading or decoding click sound:",e))}if(this.clickSoundBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.clickSoundBuffer,e.connect(this.audioContext.destination),e.start()}else console.error(...n("2928562115_45_6_45_59_11","Click sound buffer is not available."))}async loadAndDecodeAudio(e){return new Promise((async(t,x)=>{try{const x=await fetch(e),a=await x.arrayBuffer();t(await this.audioContext.decodeAudioData(a))}catch(e){console.error(...n("2928562115_59_8_59_64_11","Error loading or decoding audio:",e)),x(e)}}))}async preloadPromptAudio(e){const t=await this.loadAndDecodeAudio(e);t&&(this.promptAudioBuffer=t)}async preloadGameAudio(e){if(i.audioBuffers.has(e))return;const t=await this.loadAndDecodeAudio(e);t&&i.audioBuffers.set(e,t)}playAudio(e){const t=i.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}}playFeedbackAudios=(e=!1,...t)=>{t.length>0&&(this.audioQueue=t,this.playFetch(0,e))};playPromptAudio=e=>{if(this.promptAudioBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.promptAudioBuffer,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((e=>{e.stop()})),this.audioSourcs=[]};playFetch=(e,t)=>{e>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[e]&&fetch(this.audioQueue[e]).then((e=>e.arrayBuffer())).then((x=>{this.audioContext?.decodeAudioData(x,(x=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=x,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=t,this.sourceNode.onended=()=>this.handleAudioEnded(e,t),this.sourceNode.start()}))}))};handleAudioEnded=(e,t)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(e+1,t)}}class s{static instance=null;static getAudioContext(){return s.instance||(s.instance=new(window.AudioContext||window.webkitAudioContext)),s.instance}}function _(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfb4f89=_0x3ff9;(function(_0x33ffce,_0x4776aa){var _0x2ac2d2=_0x3ff9,_0x6e0212=_0x33ffce();while(!![]){try{var _0x566fe1=-parseInt(_0x2ac2d2(0x122))/0x1*(-parseInt(_0x2ac2d2(0x16a))/0x2)+-parseInt(_0x2ac2d2(0x14a))/0x3+-parseInt(_0x2ac2d2(0xc9))/0x4*(-parseInt(_0x2ac2d2(0x15b))/0x5)+-parseInt(_0x2ac2d2(0x127))/0x6+-parseInt(_0x2ac2d2(0x187))/0x7*(parseInt(_0x2ac2d2(0x109))/0x8)+-parseInt(_0x2ac2d2(0x126))/0x9*(-parseInt(_0x2ac2d2(0x1ba))/0xa)+-parseInt(_0x2ac2d2(0x12a))/0xb*(parseInt(_0x2ac2d2(0x11b))/0xc);if(_0x566fe1===_0x4776aa)break;else _0x6e0212['push'](_0x6e0212['shift']());}catch(_0x2c6c1d){_0x6e0212['push'](_0x6e0212['shift']());}}}(_0x26ed,0xd9405));function _0x26ed(){var _0x251fed=['onerror','_inNextEdge','date','close','log','funcName','allStrLength',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.360\\\\node_modules\",'[object\\x20Date]','number','bind','gateway.docker.internal','boolean','_addLoadNode','prototype','_addProperty','onclose','_quotedRegExp','_regExpToString','split','dockerizedApp','enumerable','Map','url','_Symbol','valueOf','noFunctions','_console_ninja_session','stringify','_treeNodePropertiesAfterFullValue','totalStrLength','length','onmessage','match','default','_disposeWebsocket','sortProps','_connectAttemptCount','','unref','serialize','_setNodePermissions','unknown','type','_isNegativeZero','string','toUpperCase','performance','expId','getWebSocketClass','get','strLength','16bvnJMf','forEach','ws/index.js','127.0.0.1','autoExpandPreviousObjects','constructor','_hasSymbolPropertyOnItsPath','autoExpandPropertyCount','_cleanNode','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','_sortProps','args','cappedProps','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','count','send','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','2067276DVozTZ','call','timeStamp','now','stackTraceLimit','function','_isArray','7Qbqraw','eventReceivedCallback','negativeZero','_hasMapOnItsPath','1314JSCrfP','2095692ubLLBJ','hits','getOwnPropertyNames','77NfTUuK','_setNodeId','_inBrowser','_ws','_getOwnPropertySymbols','Error','_dateToString','Number','edge','_capIfString','_allowedToConnectOnSend','message','_keyStrRegExp','String','expressionsToEvaluate','next.js','1','pathToFileURL','_type','_isPrimitiveWrapperType','map','_WebSocketClass','_isUndefined','_numberRegExp','cappedElements','object','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_WebSocket','autoExpandLimit','[object\\x20Set]','endsWith','remix','1592253yMPyuy','path','concat','some','toString','_additionalMetadata','_console_ninja','_getOwnPropertyNames','_objectToString','https://tinyurl.com/37x8b79t','Boolean','_consoleNinjaAllowedToStart','coverage','ws://','reload','depth','global','469835nWFvog','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','_HTMLAllCollection','_isSet','_addFunctionsNode','logger\\x20websocket\\x20error','_blacklistedProperty','pop','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','_isMap','hrtime','replace','_undefined','_treeNodePropertiesBeforeFullValue','env','482968kAQAhF','root_exp','_connected','join','includes','Symbol','process','push','isArray','_isPrimitiveType','console','positiveInfinity','_p_length','_reconnectTimeout','test','perf_hooks','_processTreeNodeResult','host','error','props','sort','bigint','[object\\x20Array]','elapsed','node','capped','reduceLimits','NEGATIVE_INFINITY','create','846013ubODRn','level','origin','astro','substr','_ninjaIgnoreNextError','_attemptToReconnectShortly','_setNodeExpressionPath','_webSocketErrorDocsLink','getOwnPropertySymbols','onopen','POSITIVE_INFINITY','port','Buffer','_sendErrorMessage','_setNodeExpandableState','','resolveGetters','toLowerCase','parse','Set','_connecting','catch','current','_getOwnPropertyDescriptor','value','time','autoExpand','charAt','getOwnPropertyDescriptor','isExpressionToEvaluate',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'array','hostname','index','warn','trace','...','unshift','_connectToHostNow','[object\\x20Map]','stack','\\x20server','data','getPrototypeOf','null','_property','startsWith','autoExpandMaxDepth','fromCharCode','rootExpression','85290EXqTYH','[object\\x20BigInt]','_allowedToSend','_setNodeLabel','root_exp_id','\\x20browser','HTMLAllCollection','name','disabledTrace','readyState','_propertyName','_p_','symbol','undefined','elements','12iCnRll','_setNodeQueryPath','then','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','WebSocket','parent','NEXT_RUNTIME','_addObjectProperty','nodeModules','versions','1.0.0','indexOf'];_0x26ed=function(){return _0x251fed;};return _0x26ed();}var K=Object[_0xfb4f89(0x186)],Q=Object['defineProperty'],G=Object[_0xfb4f89(0x1a4)],ee=Object[_0xfb4f89(0x129)],te=Object[_0xfb4f89(0x1b3)],ne=Object[_0xfb4f89(0xe3)]['hasOwnProperty'],re=(_0x58bc7c,_0x4ddd0d,_0x456630,_0x3f0baa)=>{var _0x4ea018=_0xfb4f89;if(_0x4ddd0d&&typeof _0x4ddd0d==_0x4ea018(0x143)||typeof _0x4ddd0d==_0x4ea018(0x120)){for(let _0x4d5349 of ee(_0x4ddd0d))!ne['call'](_0x58bc7c,_0x4d5349)&&_0x4d5349!==_0x456630&&Q(_0x58bc7c,_0x4d5349,{'get':()=>_0x4ddd0d[_0x4d5349],'enumerable':!(_0x3f0baa=G(_0x4ddd0d,_0x4d5349))||_0x3f0baa[_0x4ea018(0xea)]});}return _0x58bc7c;},V=(_0x1cfc08,_0x281930,_0x19747b)=>(_0x19747b=_0x1cfc08!=null?K(te(_0x1cfc08)):{},re(_0x281930||!_0x1cfc08||!_0x1cfc08['__es'+'Module']?Q(_0x19747b,_0xfb4f89(0xf7),{'value':_0x1cfc08,'enumerable':!0x0}):_0x19747b,_0x1cfc08)),Z=class{constructor(_0x27da3d,_0x33c83f,_0x51422d,_0x1bd27f,_0x1f1628,_0x2c27f9){var _0x30bae0=_0xfb4f89,_0xdb2aee,_0x215b6b,_0x3330a3,_0x5417b5;this['global']=_0x27da3d,this[_0x30bae0(0x17b)]=_0x33c83f,this[_0x30bae0(0x193)]=_0x51422d,this[_0x30bae0(0xd1)]=_0x1bd27f,this['dockerizedApp']=_0x1f1628,this[_0x30bae0(0x123)]=_0x2c27f9,this['_allowedToSend']=!0x0,this[_0x30bae0(0x134)]=!0x0,this[_0x30bae0(0x16c)]=!0x1,this[_0x30bae0(0x19c)]=!0x1,this[_0x30bae0(0xd6)]=((_0x215b6b=(_0xdb2aee=_0x27da3d[_0x30bae0(0x170)])==null?void 0x0:_0xdb2aee[_0x30bae0(0x169)])==null?void 0x0:_0x215b6b[_0x30bae0(0xcf)])===_0x30bae0(0x132),this[_0x30bae0(0x12c)]=!((_0x5417b5=(_0x3330a3=this[_0x30bae0(0x15a)]['process'])==null?void 0x0:_0x3330a3[_0x30bae0(0xd2)])!=null&&_0x5417b5['node'])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x30bae0(0xfa)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x30bae0(0x18f)]=_0x30bae0(0x153),this[_0x30bae0(0x195)]=(this[_0x30bae0(0x12c)]?_0x30bae0(0x163):_0x30bae0(0x113))+this['_webSocketErrorDocsLink'];}async['getWebSocketClass'](){var _0x5afa9b=_0xfb4f89,_0x2d9f96,_0x565058;if(this[_0x5afa9b(0x13f)])return this['_WebSocketClass'];let _0x2e12c3;if(this[_0x5afa9b(0x12c)]||this[_0x5afa9b(0xd6)])_0x2e12c3=this[_0x5afa9b(0x15a)][_0x5afa9b(0xcd)];else{if((_0x2d9f96=this[_0x5afa9b(0x15a)]['process'])!=null&&_0x2d9f96[_0x5afa9b(0x145)])_0x2e12c3=(_0x565058=this['global'][_0x5afa9b(0x170)])==null?void 0x0:_0x565058[_0x5afa9b(0x145)];else try{let _0x55a8a7=await import(_0x5afa9b(0x14b));_0x2e12c3=(await import((await import(_0x5afa9b(0xec)))[_0x5afa9b(0x13b)](_0x55a8a7[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],_0x5afa9b(0x10b)))[_0x5afa9b(0x14e)]()))['default'];}catch{try{_0x2e12c3=require(require(_0x5afa9b(0x14b))[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],'ws'));}catch{throw new Error(_0x5afa9b(0x15c));}}}return this[_0x5afa9b(0x13f)]=_0x2e12c3,_0x2e12c3;}[_0xfb4f89(0x1ae)](){var _0x3cad60=_0xfb4f89;this[_0x3cad60(0x19c)]||this[_0x3cad60(0x16c)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this[_0x3cad60(0x134)]=!0x1,this[_0x3cad60(0x19c)]=!0x0,this[_0x3cad60(0xfa)]++,this[_0x3cad60(0x12d)]=new Promise((_0x343abd,_0xba088b)=>{var _0x11311a=_0x3cad60;this[_0x11311a(0x106)]()[_0x11311a(0xcb)](_0xb09450=>{var _0x43fada=_0x11311a;let _0x387749=new _0xb09450(_0x43fada(0x157)+(!this[_0x43fada(0x12c)]&&this[_0x43fada(0xe9)]?_0x43fada(0xe0):this[_0x43fada(0x17b)])+':'+this[_0x43fada(0x193)]);_0x387749['onerror']=()=>{var _0x453cb7=_0x43fada;this['_allowedToSend']=!0x1,this[_0x453cb7(0xf8)](_0x387749),this[_0x453cb7(0x18d)](),_0xba088b(new Error(_0x453cb7(0x160)));},_0x387749[_0x43fada(0x191)]=()=>{var _0xdaf47c=_0x43fada;this[_0xdaf47c(0x12c)]||_0x387749['_socket']&&_0x387749[_0xdaf47c(0x112)][_0xdaf47c(0xfc)]&&_0x387749[_0xdaf47c(0x112)]['unref'](),_0x343abd(_0x387749);},_0x387749[_0x43fada(0xe5)]=()=>{var _0xc56748=_0x43fada;this[_0xc56748(0x134)]=!0x0,this[_0xc56748(0xf8)](_0x387749),this[_0xc56748(0x18d)]();},_0x387749[_0x43fada(0xf5)]=_0x47ed3a=>{var _0x28f580=_0x43fada;try{if(!(_0x47ed3a!=null&&_0x47ed3a[_0x28f580(0x1b2)])||!this[_0x28f580(0x123)])return;let _0x479ee5=JSON[_0x28f580(0x19a)](_0x47ed3a['data']);this[_0x28f580(0x123)](_0x479ee5['method'],_0x479ee5[_0x28f580(0x115)],this[_0x28f580(0x15a)],this[_0x28f580(0x12c)]);}catch{}};})[_0x11311a(0xcb)](_0x13520=>(this['_connected']=!0x0,this['_connecting']=!0x1,this[_0x11311a(0x134)]=!0x1,this[_0x11311a(0xbc)]=!0x0,this[_0x11311a(0xfa)]=0x0,_0x13520))[_0x11311a(0x19d)](_0x18f1a9=>(this[_0x11311a(0x16c)]=!0x1,this[_0x11311a(0x19c)]=!0x1,console[_0x11311a(0x1aa)](_0x11311a(0x144)+this['_webSocketErrorDocsLink']),_0xba088b(new Error(_0x11311a(0x117)+(_0x18f1a9&&_0x18f1a9['message'])))));}));}['_disposeWebsocket'](_0x347259){var _0x55188d=_0xfb4f89;this[_0x55188d(0x16c)]=!0x1,this[_0x55188d(0x19c)]=!0x1;try{_0x347259['onclose']=null,_0x347259[_0x55188d(0xd5)]=null,_0x347259[_0x55188d(0x191)]=null;}catch{}try{_0x347259[_0x55188d(0xc3)]<0x2&&_0x347259[_0x55188d(0xd8)]();}catch{}}['_attemptToReconnectShortly'](){var _0x366627=_0xfb4f89;clearTimeout(this[_0x366627(0x177)]),!(this['_connectAttemptCount']>=this['_maxConnectAttemptCount'])&&(this[_0x366627(0x177)]=setTimeout(()=>{var _0x411b7b=_0x366627,_0x5e8f34;this[_0x411b7b(0x16c)]||this[_0x411b7b(0x19c)]||(this[_0x411b7b(0x1ae)](),(_0x5e8f34=this[_0x411b7b(0x12d)])==null||_0x5e8f34[_0x411b7b(0x19d)](()=>this[_0x411b7b(0x18d)]()));},0x1f4),this['_reconnectTimeout'][_0x366627(0xfc)]&&this[_0x366627(0x177)][_0x366627(0xfc)]());}async[_0xfb4f89(0x119)](_0x23f51e){var _0x337959=_0xfb4f89;try{if(!this['_allowedToSend'])return;this[_0x337959(0x134)]&&this[_0x337959(0x1ae)](),(await this['_ws'])['send'](JSON[_0x337959(0xf1)](_0x23f51e));}catch(_0x5b0fbc){console['warn'](this[_0x337959(0x195)]+':\\x20'+(_0x5b0fbc&&_0x5b0fbc[_0x337959(0x135)])),this[_0x337959(0xbc)]=!0x1,this[_0x337959(0x18d)]();}}};function q(_0x24daeb,_0xb6f519,_0x552a83,_0x4172cf,_0x76dbb7,_0x506843,_0xbf75ac,_0x3ac2c4=ie){var _0x5b9d64=_0xfb4f89;let _0x4b9373=_0x552a83[_0x5b9d64(0xe8)](',')[_0x5b9d64(0x13e)](_0x5dbfe4=>{var _0x66c71b=_0x5b9d64,_0x9e1668,_0x5a37d5,_0x13a0cc,_0x3e3cc6;try{if(!_0x24daeb[_0x66c71b(0xf0)]){let _0x280f70=((_0x5a37d5=(_0x9e1668=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x9e1668['versions'])==null?void 0x0:_0x5a37d5[_0x66c71b(0x182)])||((_0x3e3cc6=(_0x13a0cc=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x13a0cc[_0x66c71b(0x169)])==null?void 0x0:_0x3e3cc6[_0x66c71b(0xcf)])===_0x66c71b(0x132);(_0x76dbb7==='next.js'||_0x76dbb7===_0x66c71b(0x149)||_0x76dbb7===_0x66c71b(0x18a)||_0x76dbb7==='angular')&&(_0x76dbb7+=_0x280f70?_0x66c71b(0x1b1):_0x66c71b(0xbf)),_0x24daeb['_console_ninja_session']={'id':+new Date(),'tool':_0x76dbb7},_0xbf75ac&&_0x76dbb7&&!_0x280f70&&console[_0x66c71b(0xd9)](_0x66c71b(0xcc)+(_0x76dbb7[_0x66c71b(0x1a3)](0x0)[_0x66c71b(0x103)]()+_0x76dbb7[_0x66c71b(0x18b)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x66c71b(0x11a));}let _0x14c600=new Z(_0x24daeb,_0xb6f519,_0x5dbfe4,_0x4172cf,_0x506843,_0x3ac2c4);return _0x14c600[_0x66c71b(0x119)][_0x66c71b(0xdf)](_0x14c600);}catch(_0x9ef8db){return console[_0x66c71b(0x1aa)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0x9ef8db&&_0x9ef8db['message']),()=>{};}});return _0x418120=>_0x4b9373['forEach'](_0x28c9a5=>_0x28c9a5(_0x418120));}function _0x3ff9(_0xe67838,_0x6d1486){var _0x26ed68=_0x26ed();return _0x3ff9=function(_0x3ff920,_0x489329){_0x3ff920=_0x3ff920-0xbb;var _0x3995cc=_0x26ed68[_0x3ff920];return _0x3995cc;},_0x3ff9(_0xe67838,_0x6d1486);}function ie(_0x57727f,_0x4b37c7,_0x14dabd,_0x5b90a9){var _0x440899=_0xfb4f89;_0x5b90a9&&_0x57727f===_0x440899(0x158)&&_0x14dabd['location']['reload']();}function B(_0x26c9ac){var _0x47f085=_0xfb4f89,_0x3ecb7a,_0x47b516;let _0x220806=function(_0x3a020e,_0x53c69a){return _0x53c69a-_0x3a020e;},_0x2108c2;if(_0x26c9ac[_0x47f085(0x104)])_0x2108c2=function(){var _0x337423=_0x47f085;return _0x26c9ac[_0x337423(0x104)][_0x337423(0x11e)]();};else{if(_0x26c9ac[_0x47f085(0x170)]&&_0x26c9ac[_0x47f085(0x170)][_0x47f085(0x165)]&&((_0x47b516=(_0x3ecb7a=_0x26c9ac['process'])==null?void 0x0:_0x3ecb7a[_0x47f085(0x169)])==null?void 0x0:_0x47b516['NEXT_RUNTIME'])!=='edge')_0x2108c2=function(){return _0x26c9ac['process']['hrtime']();},_0x220806=function(_0x341fb3,_0x2c6618){return 0x3e8*(_0x2c6618[0x0]-_0x341fb3[0x0])+(_0x2c6618[0x1]-_0x341fb3[0x1])/0xf4240;};else try{let {performance:_0x416a52}=require(_0x47f085(0x179));_0x2108c2=function(){var _0x48150f=_0x47f085;return _0x416a52[_0x48150f(0x11e)]();};}catch{_0x2108c2=function(){return+new Date();};}}return{'elapsed':_0x220806,'timeStamp':_0x2108c2,'now':()=>Date['now']()};}function H(_0xcbdc20,_0x1ce242,_0x1b66cf){var _0xa13825=_0xfb4f89,_0x36e26f,_0x2d652c,_0x5e73f3,_0x21ac45,_0x17eb79;if(_0xcbdc20['_consoleNinjaAllowedToStart']!==void 0x0)return _0xcbdc20[_0xa13825(0x155)];let _0x40bb2b=((_0x2d652c=(_0x36e26f=_0xcbdc20['process'])==null?void 0x0:_0x36e26f[_0xa13825(0xd2)])==null?void 0x0:_0x2d652c[_0xa13825(0x182)])||((_0x21ac45=(_0x5e73f3=_0xcbdc20[_0xa13825(0x170)])==null?void 0x0:_0x5e73f3['env'])==null?void 0x0:_0x21ac45[_0xa13825(0xcf)])==='edge';function _0x3e8cd8(_0x3787d6){var _0x52530a=_0xa13825;if(_0x3787d6[_0x52530a(0x1b6)]('/')&&_0x3787d6[_0x52530a(0x148)]('/')){let _0x523815=new RegExp(_0x3787d6['slice'](0x1,-0x1));return _0x5ebf2a=>_0x523815[_0x52530a(0x178)](_0x5ebf2a);}else{if(_0x3787d6['includes']('*')||_0x3787d6[_0x52530a(0x16e)]('?')){let _0x185e95=new RegExp('^'+_0x3787d6['replace'](/\\./g,String[_0x52530a(0x1b8)](0x5c)+'.')['replace'](/\\*/g,'.*')['replace'](/\\?/g,'.')+String[_0x52530a(0x1b8)](0x24));return _0x175863=>_0x185e95[_0x52530a(0x178)](_0x175863);}else return _0x274ecc=>_0x274ecc===_0x3787d6;}}let _0x4b6171=_0x1ce242['map'](_0x3e8cd8);return _0xcbdc20['_consoleNinjaAllowedToStart']=_0x40bb2b||!_0x1ce242,!_0xcbdc20['_consoleNinjaAllowedToStart']&&((_0x17eb79=_0xcbdc20['location'])==null?void 0x0:_0x17eb79[_0xa13825(0x1a8)])&&(_0xcbdc20[_0xa13825(0x155)]=_0x4b6171[_0xa13825(0x14d)](_0x5c10f1=>_0x5c10f1(_0xcbdc20['location']['hostname']))),_0xcbdc20[_0xa13825(0x155)];}function X(_0x363d55,_0x1d9169,_0x46ca90,_0x46f67c){var _0x10ed28=_0xfb4f89;_0x363d55=_0x363d55,_0x1d9169=_0x1d9169,_0x46ca90=_0x46ca90,_0x46f67c=_0x46f67c;let _0x92ac1e=B(_0x363d55),_0x224ffb=_0x92ac1e[_0x10ed28(0x181)],_0x4ebef8=_0x92ac1e[_0x10ed28(0x11d)];class _0x328bde{constructor(){var _0x3c2acc=_0x10ed28;this[_0x3c2acc(0x136)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3c2acc(0x141)]=/^(0|[1-9][0-9]*)$/,this[_0x3c2acc(0xe6)]=/'([^\\\\']|\\\\')*'/,this[_0x3c2acc(0x167)]=_0x363d55[_0x3c2acc(0xc7)],this[_0x3c2acc(0x15d)]=_0x363d55['HTMLAllCollection'],this[_0x3c2acc(0x19f)]=Object[_0x3c2acc(0x1a4)],this['_getOwnPropertyNames']=Object[_0x3c2acc(0x129)],this[_0x3c2acc(0xed)]=_0x363d55[_0x3c2acc(0x16f)],this['_regExpToString']=RegExp['prototype'][_0x3c2acc(0x14e)],this[_0x3c2acc(0x130)]=Date[_0x3c2acc(0xe3)][_0x3c2acc(0x14e)];}[_0x10ed28(0xfd)](_0x5863e0,_0x563675,_0x25dde8,_0x4235ab){var _0x5eac97=_0x10ed28,_0x15d2ae=this,_0x48a558=_0x25dde8[_0x5eac97(0x1a2)];function _0x34c0d4(_0x2959d0,_0x3e333c,_0x6ec96e){var _0x29ad7b=_0x5eac97;_0x3e333c[_0x29ad7b(0x100)]=_0x29ad7b(0xff),_0x3e333c[_0x29ad7b(0x17c)]=_0x2959d0[_0x29ad7b(0x135)],_0x2a098b=_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)],_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)]=_0x3e333c,_0x15d2ae[_0x29ad7b(0x168)](_0x3e333c,_0x6ec96e);}try{_0x25dde8['level']++,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x171)](_0x563675);var _0x5e937d,_0x4d4837,_0x7a94ce,_0x12e437,_0x54273c=[],_0x3076d3=[],_0x4a27d5,_0x1f1aa0=this[_0x5eac97(0x13c)](_0x563675),_0x1fe8fc=_0x1f1aa0==='array',_0x1d9d33=!0x1,_0x1f7cfe=_0x1f1aa0===_0x5eac97(0x120),_0x3084ae=this[_0x5eac97(0x173)](_0x1f1aa0),_0xc35bc7=this[_0x5eac97(0x13d)](_0x1f1aa0),_0x48d9e1=_0x3084ae||_0xc35bc7,_0x590449={},_0x29fc28=0x0,_0x31b022=!0x1,_0x2a098b,_0x14e2a6=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x25dde8[_0x5eac97(0x159)]){if(_0x1fe8fc){if(_0x4d4837=_0x563675[_0x5eac97(0xf4)],_0x4d4837>_0x25dde8[_0x5eac97(0xc8)]){for(_0x7a94ce=0x0,_0x12e437=_0x25dde8['elements'],_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));_0x5863e0[_0x5eac97(0x142)]=!0x0;}else{for(_0x7a94ce=0x0,_0x12e437=_0x4d4837,_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));}_0x25dde8[_0x5eac97(0x110)]+=_0x3076d3[_0x5eac97(0xf4)];}if(!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&!_0x3084ae&&_0x1f1aa0!==_0x5eac97(0x137)&&_0x1f1aa0!==_0x5eac97(0x194)&&_0x1f1aa0!==_0x5eac97(0x17f)){var _0x3a0092=_0x4235ab[_0x5eac97(0x17d)]||_0x25dde8[_0x5eac97(0x17d)];if(this[_0x5eac97(0x15e)](_0x563675)?(_0x5e937d=0x0,_0x563675[_0x5eac97(0x10a)](function(_0x4b3319){var _0x3d2aa8=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x3d2aa8(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x3d2aa8(0x1a2)]&&_0x25dde8['autoExpandPropertyCount']>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}_0x3076d3[_0x3d2aa8(0x171)](_0x15d2ae[_0x3d2aa8(0xe4)](_0x54273c,_0x563675,_0x3d2aa8(0x19b),_0x5e937d++,_0x25dde8,function(_0x5e7ebe){return function(){return _0x5e7ebe;};}(_0x4b3319)));})):this[_0x5eac97(0x164)](_0x563675)&&_0x563675[_0x5eac97(0x10a)](function(_0x789f9,_0x40bfed){var _0x595515=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x595515(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x595515(0x1a2)]&&_0x25dde8[_0x595515(0x110)]>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}var _0x14d096=_0x40bfed[_0x595515(0x14e)]();_0x14d096[_0x595515(0xf4)]>0x64&&(_0x14d096=_0x14d096['slice'](0x0,0x64)+_0x595515(0x1ac)),_0x3076d3[_0x595515(0x171)](_0x15d2ae[_0x595515(0xe4)](_0x54273c,_0x563675,_0x595515(0xeb),_0x14d096,_0x25dde8,function(_0x8448c2){return function(){return _0x8448c2;};}(_0x789f9)));}),!_0x1d9d33){try{for(_0x4a27d5 in _0x563675)if(!(_0x1fe8fc&&_0x14e2a6['test'](_0x4a27d5))&&!this['_blacklistedProperty'](_0x563675,_0x4a27d5,_0x25dde8)){if(_0x29fc28++,_0x25dde8[_0x5eac97(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}catch{}if(_0x590449[_0x5eac97(0x176)]=!0x0,_0x1f7cfe&&(_0x590449['_p_name']=!0x0),!_0x31b022){var _0x18c0f5=[][_0x5eac97(0x14c)](this[_0x5eac97(0x151)](_0x563675))[_0x5eac97(0x14c)](this[_0x5eac97(0x12e)](_0x563675));for(_0x5e937d=0x0,_0x4d4837=_0x18c0f5['length'];_0x5e937d<_0x4d4837;_0x5e937d++)if(_0x4a27d5=_0x18c0f5[_0x5e937d],!(_0x1fe8fc&&_0x14e2a6[_0x5eac97(0x178)](_0x4a27d5[_0x5eac97(0x14e)]()))&&!this[_0x5eac97(0x161)](_0x563675,_0x4a27d5,_0x25dde8)&&!_0x590449[_0x5eac97(0xc5)+_0x4a27d5[_0x5eac97(0x14e)]()]){if(_0x29fc28++,_0x25dde8['autoExpandPropertyCount']++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}}}}if(_0x5863e0[_0x5eac97(0x100)]=_0x1f1aa0,_0x48d9e1?(_0x5863e0['value']=_0x563675[_0x5eac97(0xee)](),this[_0x5eac97(0x133)](_0x1f1aa0,_0x5863e0,_0x25dde8,_0x4235ab)):_0x1f1aa0===_0x5eac97(0xd7)?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0x130)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0x17f)?_0x5863e0[_0x5eac97(0x1a0)]=_0x563675[_0x5eac97(0x14e)]():_0x1f1aa0==='RegExp'?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0xe7)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0xc6)&&this[_0x5eac97(0xed)]?_0x5863e0[_0x5eac97(0x1a0)]=this['_Symbol'][_0x5eac97(0xe3)][_0x5eac97(0x14e)]['call'](_0x563675):!_0x25dde8['depth']&&!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&(delete _0x5863e0['value'],_0x5863e0['capped']=!0x0),_0x31b022&&(_0x5863e0[_0x5eac97(0x116)]=!0x0),_0x2a098b=_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)],_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)]=_0x5863e0,this[_0x5eac97(0x168)](_0x5863e0,_0x25dde8),_0x3076d3[_0x5eac97(0xf4)]){for(_0x5e937d=0x0,_0x4d4837=_0x3076d3[_0x5eac97(0xf4)];_0x5e937d<_0x4d4837;_0x5e937d++)_0x3076d3[_0x5e937d](_0x5e937d);}_0x54273c[_0x5eac97(0xf4)]&&(_0x5863e0[_0x5eac97(0x17d)]=_0x54273c);}catch(_0x5b6a62){_0x34c0d4(_0x5b6a62,_0x5863e0,_0x25dde8);}return this[_0x5eac97(0x14f)](_0x563675,_0x5863e0),this['_treeNodePropertiesAfterFullValue'](_0x5863e0,_0x25dde8),_0x25dde8['node'][_0x5eac97(0x19e)]=_0x2a098b,_0x25dde8['level']--,_0x25dde8[_0x5eac97(0x1a2)]=_0x48a558,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x162)](),_0x5863e0;}[_0x10ed28(0x12e)](_0x5e7e45){var _0x111dd1=_0x10ed28;return Object[_0x111dd1(0x190)]?Object[_0x111dd1(0x190)](_0x5e7e45):[];}[_0x10ed28(0x15e)](_0x5b69a9){var _0x55ac27=_0x10ed28;return!!(_0x5b69a9&&_0x363d55[_0x55ac27(0x19b)]&&this[_0x55ac27(0x152)](_0x5b69a9)===_0x55ac27(0x147)&&_0x5b69a9[_0x55ac27(0x10a)]);}['_blacklistedProperty'](_0x28b15f,_0x581dd6,_0x32226c){var _0x247a74=_0x10ed28;return _0x32226c[_0x247a74(0xef)]?typeof _0x28b15f[_0x581dd6]==_0x247a74(0x120):!0x1;}[_0x10ed28(0x13c)](_0x352136){var _0x47498e=_0x10ed28,_0x456822='';return _0x456822=typeof _0x352136,_0x456822===_0x47498e(0x143)?this[_0x47498e(0x152)](_0x352136)===_0x47498e(0x180)?_0x456822=_0x47498e(0x1a7):this[_0x47498e(0x152)](_0x352136)===_0x47498e(0xdd)?_0x456822='date':this['_objectToString'](_0x352136)===_0x47498e(0xbb)?_0x456822=_0x47498e(0x17f):_0x352136===null?_0x456822=_0x47498e(0x1b4):_0x352136[_0x47498e(0x10e)]&&(_0x456822=_0x352136[_0x47498e(0x10e)][_0x47498e(0xc1)]||_0x456822):_0x456822==='undefined'&&this[_0x47498e(0x15d)]&&_0x352136 instanceof this[_0x47498e(0x15d)]&&(_0x456822=_0x47498e(0xc0)),_0x456822;}['_objectToString'](_0x1de66c){var _0x473e65=_0x10ed28;return Object[_0x473e65(0xe3)]['toString'][_0x473e65(0x11c)](_0x1de66c);}[_0x10ed28(0x173)](_0x1b731a){var _0xb60b14=_0x10ed28;return _0x1b731a===_0xb60b14(0xe1)||_0x1b731a===_0xb60b14(0x102)||_0x1b731a===_0xb60b14(0xde);}['_isPrimitiveWrapperType'](_0x331b09){var _0x16d7d9=_0x10ed28;return _0x331b09===_0x16d7d9(0x154)||_0x331b09===_0x16d7d9(0x137)||_0x331b09===_0x16d7d9(0x131);}[_0x10ed28(0xe4)](_0x29c99b,_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49){var _0x458f4f=this;return function(_0x530f99){var _0x374746=_0x3ff9,_0x60df83=_0x178327[_0x374746(0x182)][_0x374746(0x19e)],_0x25a209=_0x178327[_0x374746(0x182)][_0x374746(0x1a9)],_0x290e99=_0x178327[_0x374746(0x182)]['parent'];_0x178327[_0x374746(0x182)][_0x374746(0xce)]=_0x60df83,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=typeof _0x3076bc==_0x374746(0xde)?_0x3076bc:_0x530f99,_0x29c99b[_0x374746(0x171)](_0x458f4f[_0x374746(0x1b5)](_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49)),_0x178327['node'][_0x374746(0xce)]=_0x290e99,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=_0x25a209;};}[_0x10ed28(0xd0)](_0x83b0e,_0x4dbfb7,_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415){var _0x4ff80c=_0x10ed28,_0x3c23d4=this;return _0x4dbfb7[_0x4ff80c(0xc5)+_0xf742cb['toString']()]=!0x0,function(_0x3abd65){var _0x4ac95e=_0x4ff80c,_0x2c9c3f=_0x5e0402[_0x4ac95e(0x182)]['current'],_0x2635bd=_0x5e0402[_0x4ac95e(0x182)][_0x4ac95e(0x1a9)],_0xc2e0d=_0x5e0402['node'][_0x4ac95e(0xce)];_0x5e0402['node'][_0x4ac95e(0xce)]=_0x2c9c3f,_0x5e0402[_0x4ac95e(0x182)]['index']=_0x3abd65,_0x83b0e[_0x4ac95e(0x171)](_0x3c23d4[_0x4ac95e(0x1b5)](_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415)),_0x5e0402['node'][_0x4ac95e(0xce)]=_0xc2e0d,_0x5e0402['node'][_0x4ac95e(0x1a9)]=_0x2635bd;};}[_0x10ed28(0x1b5)](_0xf38ac3,_0x5bdcfd,_0x290e62,_0x7990cf,_0x48e604){var _0x1aa57e=_0x10ed28,_0x2bff8c=this;_0x48e604||(_0x48e604=function(_0x43ba8f,_0x597d26){return _0x43ba8f[_0x597d26];});var _0x48a20e=_0x290e62[_0x1aa57e(0x14e)](),_0xd6873d=_0x7990cf[_0x1aa57e(0x138)]||{},_0x7426f3=_0x7990cf[_0x1aa57e(0x159)],_0x3f3199=_0x7990cf[_0x1aa57e(0x1a5)];try{var _0x18b702=this['_isMap'](_0xf38ac3),_0x5a1ae4=_0x48a20e;_0x18b702&&_0x5a1ae4[0x0]==='\\x27'&&(_0x5a1ae4=_0x5a1ae4['substr'](0x1,_0x5a1ae4[_0x1aa57e(0xf4)]-0x2));var _0x6af1a1=_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d['_p_'+_0x5a1ae4];_0x6af1a1&&(_0x7990cf[_0x1aa57e(0x159)]=_0x7990cf[_0x1aa57e(0x159)]+0x1),_0x7990cf[_0x1aa57e(0x1a5)]=!!_0x6af1a1;var _0x2333d7=typeof _0x290e62==_0x1aa57e(0xc6),_0x22cba0={'name':_0x2333d7||_0x18b702?_0x48a20e:this['_propertyName'](_0x48a20e)};if(_0x2333d7&&(_0x22cba0[_0x1aa57e(0xc6)]=!0x0),!(_0x5bdcfd===_0x1aa57e(0x1a7)||_0x5bdcfd===_0x1aa57e(0x12f))){var _0x156b6d=this[_0x1aa57e(0x19f)](_0xf38ac3,_0x290e62);if(_0x156b6d&&(_0x156b6d['set']&&(_0x22cba0['setter']=!0x0),_0x156b6d[_0x1aa57e(0x107)]&&!_0x6af1a1&&!_0x7990cf[_0x1aa57e(0x198)]))return _0x22cba0['getter']=!0x0,this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x36fd25;try{_0x36fd25=_0x48e604(_0xf38ac3,_0x290e62);}catch(_0x210082){return _0x22cba0={'name':_0x48a20e,'type':_0x1aa57e(0xff),'error':_0x210082[_0x1aa57e(0x135)]},this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x15c01e=this[_0x1aa57e(0x13c)](_0x36fd25),_0x1aab99=this[_0x1aa57e(0x173)](_0x15c01e);if(_0x22cba0['type']=_0x15c01e,_0x1aab99)this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x4f8d75=_0x1aa57e;_0x22cba0[_0x4f8d75(0x1a0)]=_0x36fd25['valueOf'](),!_0x6af1a1&&_0x2bff8c[_0x4f8d75(0x133)](_0x15c01e,_0x22cba0,_0x7990cf,{});});else{var _0x335f59=_0x7990cf[_0x1aa57e(0x1a2)]&&_0x7990cf['level']<_0x7990cf['autoExpandMaxDepth']&&_0x7990cf[_0x1aa57e(0x10d)][_0x1aa57e(0xd4)](_0x36fd25)<0x0&&_0x15c01e!==_0x1aa57e(0x120)&&_0x7990cf[_0x1aa57e(0x110)]<_0x7990cf['autoExpandLimit'];_0x335f59||_0x7990cf[_0x1aa57e(0x188)]<_0x7426f3||_0x6af1a1?(this['serialize'](_0x22cba0,_0x36fd25,_0x7990cf,_0x6af1a1||{}),this[_0x1aa57e(0x14f)](_0x36fd25,_0x22cba0)):this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x53d000=_0x1aa57e;_0x15c01e===_0x53d000(0x1b4)||_0x15c01e===_0x53d000(0xc7)||(delete _0x22cba0[_0x53d000(0x1a0)],_0x22cba0[_0x53d000(0x183)]=!0x0);});}return _0x22cba0;}finally{_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d,_0x7990cf[_0x1aa57e(0x159)]=_0x7426f3,_0x7990cf[_0x1aa57e(0x1a5)]=_0x3f3199;}}['_capIfString'](_0x96020c,_0x4e4cc3,_0xaeab36,_0x1e5657){var _0x2356e4=_0x10ed28,_0x2bbfa6=_0x1e5657['strLength']||_0xaeab36[_0x2356e4(0x108)];if((_0x96020c===_0x2356e4(0x102)||_0x96020c===_0x2356e4(0x137))&&_0x4e4cc3['value']){let _0x2e0d21=_0x4e4cc3['value'][_0x2356e4(0xf4)];_0xaeab36['allStrLength']+=_0x2e0d21,_0xaeab36['allStrLength']>_0xaeab36[_0x2356e4(0xf3)]?(_0x4e4cc3[_0x2356e4(0x183)]='',delete _0x4e4cc3['value']):_0x2e0d21>_0x2bbfa6&&(_0x4e4cc3[_0x2356e4(0x183)]=_0x4e4cc3[_0x2356e4(0x1a0)][_0x2356e4(0x18b)](0x0,_0x2bbfa6),delete _0x4e4cc3[_0x2356e4(0x1a0)]);}}[_0x10ed28(0x164)](_0x3efef3){var _0x3488ac=_0x10ed28;return!!(_0x3efef3&&_0x363d55[_0x3488ac(0xeb)]&&this[_0x3488ac(0x152)](_0x3efef3)===_0x3488ac(0x1af)&&_0x3efef3[_0x3488ac(0x10a)]);}[_0x10ed28(0xc4)](_0x11c35b){var _0x23453d=_0x10ed28;if(_0x11c35b[_0x23453d(0xf6)](/^\\d+$/))return _0x11c35b;var _0x4f6a03;try{_0x4f6a03=JSON[_0x23453d(0xf1)](''+_0x11c35b);}catch{_0x4f6a03='\\x22'+this[_0x23453d(0x152)](_0x11c35b)+'\\x22';}return _0x4f6a03[_0x23453d(0xf6)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x4f6a03=_0x4f6a03['substr'](0x1,_0x4f6a03['length']-0x2):_0x4f6a03=_0x4f6a03[_0x23453d(0x166)](/'/g,'\\x5c\\x27')['replace'](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x4f6a03;}[_0x10ed28(0x17a)](_0x55cc47,_0x11bab3,_0x41718f,_0x163b6a){var _0x47c902=_0x10ed28;this[_0x47c902(0x168)](_0x55cc47,_0x11bab3),_0x163b6a&&_0x163b6a(),this['_additionalMetadata'](_0x41718f,_0x55cc47),this['_treeNodePropertiesAfterFullValue'](_0x55cc47,_0x11bab3);}[_0x10ed28(0x168)](_0x3f8b3a,_0x4d5884){var _0x49c69e=_0x10ed28;this[_0x49c69e(0x12b)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0xca)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0x18e)](_0x3f8b3a,_0x4d5884),this['_setNodePermissions'](_0x3f8b3a,_0x4d5884);}[_0x10ed28(0x12b)](_0x24d5f8,_0x14eaea){}[_0x10ed28(0xca)](_0x576a32,_0x687c5){}[_0x10ed28(0xbd)](_0x489c9e,_0xf76957){}[_0x10ed28(0x140)](_0x40bd6c){return _0x40bd6c===this['_undefined'];}[_0x10ed28(0xf2)](_0x59dbd7,_0x39b993){var _0x4aab34=_0x10ed28;this[_0x4aab34(0xbd)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x196)](_0x59dbd7),_0x39b993[_0x4aab34(0xf9)]&&this['_sortProps'](_0x59dbd7),this[_0x4aab34(0x15f)](_0x59dbd7,_0x39b993),this[_0x4aab34(0xe2)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x111)](_0x59dbd7);}[_0x10ed28(0x14f)](_0x251965,_0x9b93cd){var _0x83cbd4=_0x10ed28;let _0xcd393f;try{_0x363d55[_0x83cbd4(0x174)]&&(_0xcd393f=_0x363d55[_0x83cbd4(0x174)]['error'],_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=function(){}),_0x251965&&typeof _0x251965[_0x83cbd4(0xf4)]==_0x83cbd4(0xde)&&(_0x9b93cd[_0x83cbd4(0xf4)]=_0x251965[_0x83cbd4(0xf4)]);}catch{}finally{_0xcd393f&&(_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=_0xcd393f);}if(_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0xde)||_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x131)){if(isNaN(_0x9b93cd[_0x83cbd4(0x1a0)]))_0x9b93cd['nan']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];else switch(_0x9b93cd[_0x83cbd4(0x1a0)]){case Number[_0x83cbd4(0x192)]:_0x9b93cd[_0x83cbd4(0x175)]=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case Number[_0x83cbd4(0x185)]:_0x9b93cd['negativeInfinity']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case 0x0:this[_0x83cbd4(0x101)](_0x9b93cd[_0x83cbd4(0x1a0)])&&(_0x9b93cd[_0x83cbd4(0x124)]=!0x0);break;}}else _0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x120)&&typeof _0x251965[_0x83cbd4(0xc1)]==_0x83cbd4(0x102)&&_0x251965[_0x83cbd4(0xc1)]&&_0x9b93cd[_0x83cbd4(0xc1)]&&_0x251965['name']!==_0x9b93cd[_0x83cbd4(0xc1)]&&(_0x9b93cd[_0x83cbd4(0xda)]=_0x251965['name']);}[_0x10ed28(0x101)](_0xdc72f6){var _0x396f32=_0x10ed28;return 0x1/_0xdc72f6===Number[_0x396f32(0x185)];}[_0x10ed28(0x114)](_0xc49f59){var _0x15d31a=_0x10ed28;!_0xc49f59[_0x15d31a(0x17d)]||!_0xc49f59[_0x15d31a(0x17d)]['length']||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x1a7)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0xeb)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x19b)||_0xc49f59[_0x15d31a(0x17d)][_0x15d31a(0x17e)](function(_0x521a66,_0x3037b9){var _0x19b3c8=_0x15d31a,_0x30740f=_0x521a66[_0x19b3c8(0xc1)][_0x19b3c8(0x199)](),_0x377ff1=_0x3037b9[_0x19b3c8(0xc1)]['toLowerCase']();return _0x30740f<_0x377ff1?-0x1:_0x30740f>_0x377ff1?0x1:0x0;});}['_addFunctionsNode'](_0x24f146,_0x304fda){var _0x2a0f15=_0x10ed28;if(!(_0x304fda[_0x2a0f15(0xef)]||!_0x24f146[_0x2a0f15(0x17d)]||!_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)])){for(var _0x14c9f5=[],_0x4d9ee4=[],_0x488f79=0x0,_0x101a34=_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)];_0x488f79<_0x101a34;_0x488f79++){var _0x19651f=_0x24f146[_0x2a0f15(0x17d)][_0x488f79];_0x19651f[_0x2a0f15(0x100)]===_0x2a0f15(0x120)?_0x14c9f5[_0x2a0f15(0x171)](_0x19651f):_0x4d9ee4['push'](_0x19651f);}if(!(!_0x4d9ee4[_0x2a0f15(0xf4)]||_0x14c9f5['length']<=0x1)){_0x24f146['props']=_0x4d9ee4;var _0x230bec={'functionsNode':!0x0,'props':_0x14c9f5};this[_0x2a0f15(0x12b)](_0x230bec,_0x304fda),this[_0x2a0f15(0xbd)](_0x230bec,_0x304fda),this[_0x2a0f15(0x196)](_0x230bec),this[_0x2a0f15(0xfe)](_0x230bec,_0x304fda),_0x230bec['id']+='\\x20f',_0x24f146['props'][_0x2a0f15(0x1ad)](_0x230bec);}}}[_0x10ed28(0xe2)](_0x468e99,_0x4388f0){}['_setNodeExpandableState'](_0x5eb717){}[_0x10ed28(0x121)](_0x38c05c){var _0x1aee1a=_0x10ed28;return Array[_0x1aee1a(0x172)](_0x38c05c)||typeof _0x38c05c==_0x1aee1a(0x143)&&this[_0x1aee1a(0x152)](_0x38c05c)===_0x1aee1a(0x180);}['_setNodePermissions'](_0x4eefa0,_0x1705a9){}[_0x10ed28(0x111)](_0x516906){var _0x236906=_0x10ed28;delete _0x516906[_0x236906(0x10f)],delete _0x516906['_hasSetOnItsPath'],delete _0x516906[_0x236906(0x125)];}[_0x10ed28(0x18e)](_0x23c1c2,_0x29a21b){}}let _0x4e7d7d=new _0x328bde(),_0x3886ea={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x30c557={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x586d36(_0x54f3be,_0x181b1a,_0x2b7eb5,_0x1dd634,_0x49c07c,_0x397446){var _0x2f18dd=_0x10ed28;let _0x4e7f72,_0x1de5a1;try{_0x1de5a1=_0x4ebef8(),_0x4e7f72=_0x46ca90[_0x181b1a],!_0x4e7f72||_0x1de5a1-_0x4e7f72['ts']>0x1f4&&_0x4e7f72[_0x2f18dd(0x118)]&&_0x4e7f72['time']/_0x4e7f72[_0x2f18dd(0x118)]<0x64?(_0x46ca90[_0x181b1a]=_0x4e7f72={'count':0x0,'time':0x0,'ts':_0x1de5a1},_0x46ca90[_0x2f18dd(0x128)]={}):_0x1de5a1-_0x46ca90[_0x2f18dd(0x128)]['ts']>0x32&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]/_0x46ca90[_0x2f18dd(0x128)]['count']<0x64&&(_0x46ca90[_0x2f18dd(0x128)]={});let _0x4ddd3d=[],_0x2c1b45=_0x4e7f72[_0x2f18dd(0x184)]||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]?_0x30c557:_0x3886ea,_0x398af5=_0x30c84c=>{var _0x988e3b=_0x2f18dd;let _0x14b3dc={};return _0x14b3dc[_0x988e3b(0x17d)]=_0x30c84c['props'],_0x14b3dc[_0x988e3b(0xc8)]=_0x30c84c['elements'],_0x14b3dc[_0x988e3b(0x108)]=_0x30c84c[_0x988e3b(0x108)],_0x14b3dc[_0x988e3b(0xf3)]=_0x30c84c[_0x988e3b(0xf3)],_0x14b3dc[_0x988e3b(0x146)]=_0x30c84c[_0x988e3b(0x146)],_0x14b3dc[_0x988e3b(0x1b7)]=_0x30c84c[_0x988e3b(0x1b7)],_0x14b3dc[_0x988e3b(0xf9)]=!0x1,_0x14b3dc[_0x988e3b(0xef)]=!_0x1d9169,_0x14b3dc[_0x988e3b(0x159)]=0x1,_0x14b3dc[_0x988e3b(0x188)]=0x0,_0x14b3dc[_0x988e3b(0x105)]=_0x988e3b(0xbe),_0x14b3dc[_0x988e3b(0x1b9)]=_0x988e3b(0x16b),_0x14b3dc[_0x988e3b(0x1a2)]=!0x0,_0x14b3dc[_0x988e3b(0x10d)]=[],_0x14b3dc[_0x988e3b(0x110)]=0x0,_0x14b3dc[_0x988e3b(0x198)]=!0x0,_0x14b3dc[_0x988e3b(0xdb)]=0x0,_0x14b3dc[_0x988e3b(0x182)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x14b3dc;};for(var _0x4e8b46=0x0;_0x4e8b46<_0x49c07c[_0x2f18dd(0xf4)];_0x4e8b46++)_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d[_0x2f18dd(0xfd)]({'timeNode':_0x54f3be===_0x2f18dd(0x1a1)||void 0x0},_0x49c07c[_0x4e8b46],_0x398af5(_0x2c1b45),{}));if(_0x54f3be===_0x2f18dd(0x1ab)||_0x54f3be===_0x2f18dd(0x17c)){let _0x38886c=Error[_0x2f18dd(0x11f)];try{Error['stackTraceLimit']=0x1/0x0,_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d['serialize']({'stackNode':!0x0},new Error()[_0x2f18dd(0x1b0)],_0x398af5(_0x2c1b45),{'strLength':0x1/0x0}));}finally{Error[_0x2f18dd(0x11f)]=_0x38886c;}}return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':_0x4ddd3d,'id':_0x181b1a,'context':_0x397446}]};}catch(_0x14cd18){return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':[{'type':_0x2f18dd(0xff),'error':_0x14cd18&&_0x14cd18[_0x2f18dd(0x135)]}],'id':_0x181b1a,'context':_0x397446}]};}finally{try{if(_0x4e7f72&&_0x1de5a1){let _0xa0025=_0x4ebef8();_0x4e7f72['count']++,_0x4e7f72['time']+=_0x224ffb(_0x1de5a1,_0xa0025),_0x4e7f72['ts']=_0xa0025,_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]++,_0x46ca90['hits'][_0x2f18dd(0x1a1)]+=_0x224ffb(_0x1de5a1,_0xa0025),_0x46ca90[_0x2f18dd(0x128)]['ts']=_0xa0025,(_0x4e7f72[_0x2f18dd(0x118)]>0x32||_0x4e7f72['time']>0x64)&&(_0x4e7f72[_0x2f18dd(0x184)]=!0x0),(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]>0x3e8||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]>0x12c)&&(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]=!0x0);}}catch{}}}return _0x586d36;}((_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x4b0ac8,_0x5246af,_0x42bfac,_0x4ca82f,_0x123580,_0x18969d)=>{var _0x407242=_0xfb4f89;if(_0x17891e[_0x407242(0x150)])return _0x17891e[_0x407242(0x150)];if(!H(_0x17891e,_0x42bfac,_0x479ca2))return _0x17891e['_console_ninja']={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x17891e[_0x407242(0x150)];let _0x37610e=B(_0x17891e),_0x3437ca=_0x37610e['elapsed'],_0x25b5e5=_0x37610e['timeStamp'],_0x4bf76b=_0x37610e[_0x407242(0x11e)],_0x125c7d={'hits':{},'ts':{}},_0x15b46a=X(_0x17891e,_0x4ca82f,_0x125c7d,_0x4b0ac8),_0xd5486b=_0x4d30e1=>{_0x125c7d['ts'][_0x4d30e1]=_0x25b5e5();},_0x2d07e6=(_0x5bc355,_0xe34fe)=>{var _0x2339ce=_0x407242;let _0x59fb6a=_0x125c7d['ts'][_0xe34fe];if(delete _0x125c7d['ts'][_0xe34fe],_0x59fb6a){let _0x5921a6=_0x3437ca(_0x59fb6a,_0x25b5e5());_0x2cf290(_0x15b46a(_0x2339ce(0x1a1),_0x5bc355,_0x4bf76b(),_0x253536,[_0x5921a6],_0xe34fe));}},_0x49bcec=_0x43e72f=>{var _0x2e47bf=_0x407242,_0x55d95d;return _0x479ca2===_0x2e47bf(0x139)&&_0x17891e['origin']&&((_0x55d95d=_0x43e72f==null?void 0x0:_0x43e72f['args'])==null?void 0x0:_0x55d95d['length'])&&(_0x43e72f['args'][0x0][_0x2e47bf(0x189)]=_0x17891e['origin']),_0x43e72f;};_0x17891e[_0x407242(0x150)]={'consoleLog':(_0x31c92e,_0x24488d)=>{var _0x93e67e=_0x407242;_0x17891e['console']['log'][_0x93e67e(0xc1)]!=='disabledLog'&&_0x2cf290(_0x15b46a(_0x93e67e(0xd9),_0x31c92e,_0x4bf76b(),_0x253536,_0x24488d));},'consoleTrace':(_0x3b66a7,_0xba880e)=>{var _0x567e13=_0x407242,_0x31716e,_0x5a9c60;_0x17891e[_0x567e13(0x174)]['log'][_0x567e13(0xc1)]!==_0x567e13(0xc2)&&((_0x5a9c60=(_0x31716e=_0x17891e[_0x567e13(0x170)])==null?void 0x0:_0x31716e[_0x567e13(0xd2)])!=null&&_0x5a9c60[_0x567e13(0x182)]&&(_0x17891e[_0x567e13(0x18c)]=!0x0),_0x2cf290(_0x49bcec(_0x15b46a(_0x567e13(0x1ab),_0x3b66a7,_0x4bf76b(),_0x253536,_0xba880e))));},'consoleError':(_0x3fa736,_0x121a3b)=>{var _0x12dfb8=_0x407242;_0x17891e[_0x12dfb8(0x18c)]=!0x0,_0x2cf290(_0x49bcec(_0x15b46a('error',_0x3fa736,_0x4bf76b(),_0x253536,_0x121a3b)));},'consoleTime':_0x1848a7=>{_0xd5486b(_0x1848a7);},'consoleTimeEnd':(_0x31ae65,_0x3d104a)=>{_0x2d07e6(_0x3d104a,_0x31ae65);},'autoLog':(_0x37808,_0x2ad558)=>{var _0x22938b=_0x407242;_0x2cf290(_0x15b46a(_0x22938b(0xd9),_0x2ad558,_0x4bf76b(),_0x253536,[_0x37808]));},'autoLogMany':(_0x161d7e,_0x43dedb)=>{var _0x379506=_0x407242;_0x2cf290(_0x15b46a(_0x379506(0xd9),_0x161d7e,_0x4bf76b(),_0x253536,_0x43dedb));},'autoTrace':(_0x1217e6,_0x446707)=>{var _0x3a5252=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x3a5252(0x1ab),_0x446707,_0x4bf76b(),_0x253536,[_0x1217e6])));},'autoTraceMany':(_0x5b77c4,_0x4fc43a)=>{var _0x5bfbf2=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x5bfbf2(0x1ab),_0x5b77c4,_0x4bf76b(),_0x253536,_0x4fc43a)));},'autoTime':(_0x24183a,_0x442759,_0x296a4c)=>{_0xd5486b(_0x296a4c);},'autoTimeEnd':(_0x2927a9,_0x243d30,_0x5bd63b)=>{_0x2d07e6(_0x243d30,_0x5bd63b);},'coverage':_0x519fc2=>{var _0x452554=_0x407242;_0x2cf290({'method':_0x452554(0x156),'version':_0x4b0ac8,'args':[{'id':_0x519fc2}]});}};let _0x2cf290=q(_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x123580,_0x18969d),_0x253536=_0x17891e[_0x407242(0xf0)];return _0x17891e['_console_ninja'];})(globalThis,_0xfb4f89(0x10c),'60591',_0xfb4f89(0xdc),'webpack',_0xfb4f89(0xd3),'1727950005016',_0xfb4f89(0x1a6),_0xfb4f89(0xfb),_0xfb4f89(0x197),_0xfb4f89(0x13a));")}catch(e){}}function n(e,...t){try{_().consoleError(e,t)}catch(e){}return t}},"./src/components/background.ts":(e,t,x)=>{x.r(t),x.d(t,{Background:()=>_});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts"),s={bgImg:i.DEFAULT_BACKGROUND_1,hillImg:i.ASSETS_PATH_HILL,pillerImg:i.ASSETS_PATH_TOTEM,fenchImg:i.ASSETS_PATH_FENCE,autumnBgImg:i.AUTUMN_BACKGROUND_1,autumnHillImg:i.AUTUMN_HILL_1,autumnPillerImg:i.AUTUMN_PILLAR_1,autumnSignImg:i.AUTUMN_SIGN_1,autumnFenceImg:i.AUTUMN_FENCE_1,winterBgImg:i.WINTER_BACKGROUND_1,winterHillImg:i.WINTER_HILL_1,winterSignImg:i.WINTER_SIGN_1,winterFenceImg:i.WINTER_FENCE_1,winterPillerImg:i.WINTER_PILLAR_1};class _{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(e,t,x,i){this.width=t,this.height=x,this.context=e,this.levelNumber=i,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,a.loadImages)(s,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=.1*t.width+.15*t.width/2,this.posY=.2*t.height,this.context=e,this.canvas=t,(0,a.loadImages)({cancel_button_image:i.CANCEL_BTN_IMG},(e=>{this.cancel_button_image=e.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),x}}},"./src/components/buttons/close-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,x,s){this.posX=x,this.posY=s,this.context=e,this.canvas=t,(0,a.loadImages)({close_button_image:i.MAP_BTN_IMG},(e=>{this.close_button_image=e.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x,y:s}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),x}}},"./src/components/buttons/index.ts":(e,t,x)=>{x.r(t),x.d(t,{CancelButton:()=>i.default,CloseButton:()=>a.default,LevelBloonButton:()=>d.default,NextButton:()=>s.default,NoButton:()=>_.default,PauseButton:()=>n.default,PlayButton:()=>r.default,RetryButton:()=>o.default,YesButton:()=>c.default});var a=x("./src/components/buttons/close-button.ts"),i=x("./src/components/buttons/cancel-button.ts"),s=x("./src/components/buttons/next-button.ts"),_=x("./src/components/buttons/no-button.ts"),n=x("./src/components/buttons/pause-button.ts"),o=x("./src/components/buttons/retry-button.ts"),c=x("./src/components/buttons/yes-button.ts"),r=x("./src/components/buttons/play-button.ts"),d=x("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(e,t,x){this.context=t,this.levelData=x,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=e.height/5,this.radiusOffSet=e.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=e.height/13,this.textFontSize=this.size/6}isSpecialLevel(e){return i.SPECIAL_LEVELS.includes(e)}isLevelSpecial(e){return this.levelData?.isSpecial?.9*e:e}draw(e,t,x,i){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${a.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+e}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${a.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(e,t,x,i)}applyPulseEffect(){const e=.7,t=Date.now()%1500/1500,x=t<=e,a=x?t/e:(t-e)/(x?e:.30000000000000004),i=x?15*a:15+45*a,s=x?.5*(1-a):0;if(s<=0)return;const{x:_,y:n,radius:o}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},c=this.posX+this.btnSize/_,r=this.posY+this.btnSize/n,d=this.btnSize/o+i;this.context.save(),this.context.beginPath(),this.context.arc(c,r,d,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${s})`,this.context.fill(),this.context.restore()}drawIcons(e,t,x,i){const s=this.levelData.index;if(a.Debugger.DebugMode||s+e-1>t+1&&this.drawLock(),x.length&&s+e<=i)for(let t=0;t<x.length;t++)if(s-1+e===parseInt(x[t].levelNumber)){this.checkStars(x[t].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(e){const t=this.levelData.x,x=this.levelData.y,a=this.size;e>=1&&this.drawStar(t,x-.01*a),e>1&&this.drawStar(t+a/2.5,x-.01*a),3===e&&this.drawStar(t+a/5,x-.1*a)}drawStar(e,t){this.context.drawImage(this.levelData?.starImg,e,t,this.size/5,this.size/5)}onClick(e,t,x,i,s){Math.sqrt((e-this.levelData.x-this.radiusOffSet)*(e-this.levelData.x-this.radiusOffSet)+(t-this.levelData.y-this.radiusOffSet)*(t-this.levelData.y-this.radiusOffSet))<45&&(a.Debugger.DebugMode||this.levelData.index+x<=i)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,s(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,x,s,_){this.posX=s,this.posY=_,this.context=e,this.width=t,this.height=x,(0,a.loadImages)({next_button_image:i.NEXT_BTN_IMG},(e=>{this.next_button_image=e.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),x}}},"./src/components/buttons/no-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,x,s){this.posX=x+5,this.posY=s+10,this.context=e,this.canvas=t,(0,a.loadImages)({no_button_image:i.CANCEL_BTN_IMG},(e=>{this.no_button_image=e.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),x}}},"./src/components/buttons/pause-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=t.width-.09*t.height,this.posY=0,this.context=e,this.canvas=t,(0,a.loadImages)({pause_button_image:i.PAUSE_BTN_IMG},(e=>{this.pause_button_image=e.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9),x}}},"./src/components/buttons/play-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>n});var a=x("./src/constants/index.ts"),i=x("./src/Firebase/firebase-integration.ts"),s=x("./src/common/index.ts"),_=x("./src/data/index.ts");class n{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(e,t,x,_){this.posX=x,this.posY=_,this.context=e,this.canvas=t,this.firebaseIntegration=new i.FirebaseIntegration,this.init(),this.images={pause_button_image:a.PLAY_BTN_IMG},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}async init(){const e=await(0,_.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(e,t){const x=Math.sqrt((e-this.posX-this.canvas.width/6)*(e-this.posX-this.canvas.width/6)+(t-this.posY-this.canvas.width/6)*(t-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),x<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const e={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(e)}}},"./src/components/buttons/retry-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,x,s){this.posX=x,this.posY=s,this.context=e,this.canvas=t,(0,a.loadImages)({retry_button_image:i.RETRY_BTN_IMG},(e=>{this.retry_button_image=e.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x,y:s}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),x}}},"./src/components/buttons/yes-button.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,x,s){this.posX=x-5,this.posY=s,this.context=e,this.canvas=t,(0,a.loadImages)({yes_button_image:i.YES_BTN_IMG},(e=>{this.yes_button_image=e.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const x=(0,a.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return x&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),x}}},"./src/components/feedback-text/index.ts":(e,t,x)=>{x.r(t),x.d(t,{FeedbackTextEffects:()=>i});var a=x("./src/common/index.ts");class i{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(e){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=e,(0,a.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,a.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(e,t,x)=>{x.r(t),x.d(t,{AudioPlayer:()=>l.AudioPlayer,Background:()=>r.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>i.LevelIndicators,Monster:()=>o.Monster,PauseButton:()=>a.default,PromptText:()=>s.PromptText,StoneHandler:()=>_.default,TimerTicking:()=>c.TimerTicking,TrailEffect:()=>h.default,Tutorial:()=>n.Tutorial});var a=x("./src/components/buttons/pause-button.ts"),i=x("./src/components/level-indicator.ts"),s=x("./src/components/prompt-text.ts"),_=x("./src/components/stone-handler.ts"),n=x("./src/components/tutorial.ts"),o=x("./src/components/monster.ts"),c=x("./src/components/timer-ticking.ts"),r=x("./src/components/background.ts"),d=x("./src/components/feedback-text/index.ts"),l=x("./src/components/audio-player.ts"),h=x("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(e,t,x)=>{x.r(t),x.d(t,{LevelIndicators:()=>_});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts"),s=x("./src/events/index.ts");class _ extends s.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(e,t,x){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.activeIndicators=x,this.images={level_indicator:i.LEVEL_INDICATOR,bar_empty:i.BAR_EMPTY,bar_full:i.BAR_FULL},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}setIndicators(e){this.activeIndicators=e}addDropStoneEvent(){document.addEventListener("dropstone",(e=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var e=0;e<5;e++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(e=0;e<this.activeIndicators;e++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(e){}handleLoadPuzzle(e){this.setIndicators(e.detail.counter)}}},"./src/components/monster.ts":(e,t,x)=>{x.r(t),x.d(t,{Monster:()=>s});var a=x("./src/common/index.ts"),i=x("./src/events/index.ts");class s extends i.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(e,t,x){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.game=e,this.monsterPhase=t,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.changeToIdleAnimation(),this.imagesLoaded=!0,x&&x()}))}update(e){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=e,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(e){this.image.src=e}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(e){e.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(e){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(e,t){if(Math.sqrt((e-this.x-this.width/4)*(e-this.x-this.width/4)+(t-this.y-this.height/2.2)*(t-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>o});var a=x("./src/components/buttons/index.ts"),i=x("./src/common/index.ts"),s=x("./src/components/index.ts"),_=x("./src/components/popups/sure-popup.ts"),n=x("./src/constants/index.ts");class o{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(e,t,x,o,c){this.canvas=e,this.callback=t,this.gameplayData=c,this.switchToLevelSelection=x,this.reloadScene=o;const r=document.getElementById("canvas");this.context=r.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.cancelButton=new a.CancelButton(this.context,this.canvas),this.retryButton=new a.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new a.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,i.loadImages)({pop_up_image:n.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new _.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new _.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var x=t.getBoundingClientRect();const a=e.clientX-x.left,s=e.clientY-x.top;this.cancelButton.onClick(a,s)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(a,s)&&("english"==i.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(a,s)&&("english"==i.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==i.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==i.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(n.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>n});var a=x("./src/common/index.ts"),i=x("./src/components/index.ts"),s=x("./src/components/buttons/index.ts"),_=x("./src/constants/index.ts");class n{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(e,t,x){this.canvas=e,this.yesCallback=t,this.noCallback=x,this.context=this.canvas.getContext("2d"),this.audioPlayer=new i.AudioPlayer,this.yesButton=new s.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new s.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,a.loadImages)({pop_up_image:_.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(a.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var x=t.getBoundingClientRect();const a=e.clientX-x.left,i=e.clientY-x.top;this.yesButton.onClick(a,i)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(a,i)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(a.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(e,t,x)=>{x.r(t),x.d(t,{PromptText:()=>n});var a=x("./src/events/index.ts"),i=x("./src/common/index.ts"),s=x("./src/components/index.ts"),_=x("./src/constants/index.ts");class n extends a.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(e,t,x,a,_){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.levelData=a,this.rightToLeft=_,this.currentPromptText=x.prompt.promptText,this.currentPuzzleData=x,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=e=>{const t=document.getElementById("canvas");e.preventDefault();var x=t.getBoundingClientRect();const a=e.clientX-x.left,i=e.clientY-x.top;this.onClick(a,i)&&this.playSound()};getPromptAudioUrl=()=>i.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(i.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(e,t){return Math.sqrt(e-this.width/3)<12&&Math.sqrt(t-this.height/5.5)<10}setCurrrentPuzzleData(e){this.currentPuzzleData=e,this.currentPromptText=e.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var e=this.width/2;const t=.26*this.height;this.context.textAlign="center";var x=this.calculateFont();const a=this.promptImageWidth,s=this.promptImageHeight;if(this.context.font=`${x}px ${i.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var _=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],e+this.context.measureText(_).width/2,t),this.context.fillStyle="black",this.context.fillText(_,e-this.context.measureText(this.targetStones[0]).width/2,t)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,a/4,s/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){e-=.5*this.context.measureText(this.currentPromptText).width;for(let x=this.targetStones.length-1;x>=0;x--)this.droppedStones>x||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[x],e,t)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[x],e,t)),e=e+this.context.measureText(this.targetStones[x]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,a/4,s/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const e=1.25*(this.width-a),t=.33*(this.height-s);this.context.drawImage(this.promptPlayButton,e,t,a/4,s/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,e,t)):this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,a/4,s/4)}drawOthers(){const e=this.currentPromptText.split(""),t=(this.width,.28*this.height),x=this.promptImageWidth,a=this.promptImageHeight;var s=this.calculateFont();this.context.font=`${s}px ${i.font}, monospace`;let _=this.width/2-this.context.measureText(this.currentPromptText).width/2,n=0;var o=this.currentPuzzleData.targetStones[0].split("");for(let i=0;i<e.length;i++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){o.includes(e[i])?(o=o.slice(1,o.length),this.context.fillStyle="red",this.context.fillText(e[i],_,t)):(this.context.fillStyle="black",this.context.fillText(e[i],_,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,x/4,a/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>i||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(e[i],_,t)):(this.context.fillStyle="red",this.context.fillText(e[i],_,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,x/4,a/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,x/4,a/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,x/4,a/4)}n=(this.context.measureText(e[i]).width+this.context.measureText(e[i+1]).width)/2,_+=n}}draw(e){if(this.updateScaling(),this.time=e<17?this.time+Math.floor(e):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const e=this.promptImageWidth*this.scale,t=this.promptImageHeight*this.scale,x=(this.width-e)/2,a=(this.height-t)/5;this.context.drawImage(this.prompt_image,x,a,e,t),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[e.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(e){this.droppedStones=e}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const e=this.loadImage(this.prompt_image,_.PROMPT_TEXT_BG),t=this.loadImage(this.promptPlayButton,_.PROMPT_PLAY_BUTTON);await Promise.all([e,t]),this.imagesLoaded=!0}loadImage(e,t){return new Promise(((x,a)=>{e.onload=()=>{x()},e.src=t,e.onerror=e=>{a(e)}}))}}},"./src/components/stone-handler.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>o});var a=x("./src/common/index.ts"),i=x("./src/events/index.ts"),s=x("./src/components/index.ts"),_=x("./src/data/index.ts"),n=x("./src/constants/index.ts");class o extends i.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==_.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(e,t,x,i,_,o){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.puzzleNumber=x,this.levelData=i,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(n.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(_),this.puzzleStartTime=new Date,this.tutorial=new s.Tutorial(e,t.width,t.height,x),this.stonebg=new Image,this.stonebg.src=n.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new s.AudioPlayer,this.stonebg.onload=e=>{this.createStones(this.stonebg)},this.audioPlayer=new s.AudioPlayer,this.timerTickingInstance=o,document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(e){const t=this.getFoilStones();for(let x=0;x<t.length;x++)t[x]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[x]),this.foilStones.push(new a.StoneConfig(this.context,this.canvas.width,this.canvas.height,t[x],this.stonePos[x][0],this.stonePos[x][1],e,this.timerTickingInstance,x==t.length-1?this.tutorial:null))}draw(e){for(let t=0;t<this.foilStones.length;t++)this.foilStones[t].draw(e);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}drawWordPuzzleLetters(e,t){for(let x=0;x<this.foilStones.length;x++)t(x)&&this.foilStones[x].draw(e);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}initializeStonePos(){let e=32;this.stonePos=[[this.canvas.width/5-e,this.canvas.height/1.9-e],[this.canvas.width/2-e,this.canvas.height/1.15-e],[this.canvas.width/3.5+this.canvas.width/2-e,this.canvas.height/1.2-e],[this.canvas.width/4-e,this.canvas.height/1.28-e],[this.canvas.width/7-e,this.canvas.height/1.5-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.9-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.42-e],[this.canvas.width/6-e,this.canvas.height/1.1-e]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(e){this.currentPuzzleData=this.levelData.puzzles[e],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(e){this.foilStones=[]}handleLoadPuzzle(e){this.foilStones=[],this.tutorial.setPuzzleNumber(e.detail.counter),this.puzzleNumber=e.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(e,t,x=!1){const a=x?e==this.correctTargetStone.substring(0,e.length):e==this.correctTargetStone;return this.processLetterDropFeedbackAudio(t,a,x,e),a}processLetterDropFeedbackAudio(e,t,x,a){if(t){(x?a===this.getCorrectTargetStone():t)?this.playCorrectAnswerFeedbackSound(e):this.audioPlayer.playFeedbackAudios(!1,n.AUDIO_PATH_EATS,(0,n.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,n.AUDIO_PATH_EATS,n.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?n.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((e=>{const t=this.currentPuzzleData.foilStones.indexOf(e);-1!==t&&this.currentPuzzleData.foilStones.splice(t,1)}));const e=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(e>8){const t=e-8;this.currentPuzzleData.foilStones.splice(0,t)}return this.currentPuzzleData.targetStones.forEach((e=>{this.currentPuzzleData.foilStones.push(e)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(e){return[e.fantastic,e.great,e.amazing]}setGamePause(e){this.isGamePaused=e}playCorrectAnswerFeedbackSound(e){const t=a.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,n.AUDIO_PATH_EATS,(0,n.AUDIO_PATH_CHEERING_FUNC)(t),n.AUDIO_PATH_POINTS_ADD,a.Utils.getConvertedDevProdURL(this.feedbackAudios[e])),this.correctStoneAudio.play()}resetStonePosition(e,t,x){const a=t,i=x;if(a&&i&&a.text&&"number"==typeof i.origx&&"number"==typeof i.origy){const t=50,x=e/2;a.x=a.text.length<=3&&i.origx<t&&i.origx<x?i.origx+25:i.origx,a.y=i.origy}return a}computeCursorDistance(e,t,x){return Math.sqrt((e-x.x)**2+(t-x.y)**2)}handlePickStoneUp(e,t){let x=null,a=0;for(let i of this.foilStones){if(this.computeCursorDistance(e,t,i)<=40){x=i,x.foilStoneIndex=a;break}a++}return x}handleHoveringToAnotherStone(e,t,x){let a=null,i=0;for(let s of this.foilStones){if(this.computeCursorDistance(e,t,s)<=40&&x(s.text,i)){a=s,a.foilStoneIndex=i;break}i++}return a}handleMovingStoneLetter(e,t,x){const a=e,i=this.canvas.getBoundingClientRect();return a.x=t-i.left,a.y=x-i.top,a}}},"./src/components/timer-ticking.ts":(e,t,x)=>{x.r(t),x.d(t,{TimerTicking:()=>n});var a=x("./src/common/index.ts"),i=x("./src/events/index.ts"),s=x("./src/components/index.ts"),_=x("./src/constants/index.ts");class n extends i.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(e,t,x){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=x,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new s.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:_.TIMER_EMPTY,rotating_clock:_.ROTATING_CLOCK,timer_full:_.TIMER_FULL},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(e){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*e),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(_.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>a});class a{ctx;particles;mouse;isDiamond;constructor(e){this.ctx=e.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1}init(){this.draw()}draw(){this.drawTrail();let e=[];for(let t=0;t<this.particles.length;t++)this.particles[t].time<=this.particles[t].ttl&&e.push(this.particles[t]);this.particles=e}drawTrail(){for(let e=0;e<this.particles.length;e++)this.particles[e].update(),this.isDiamond=!this.isDiamond,this.particles[e].draw(this.isDiamond)}addTrailParticlesOnMove(e,t){this.mouse.x=e,this.mouse.y=t,this.particles.push(new i(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class i{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(e,t){const x=this.determineValueByScreenWidth(30,15),a=this.determineValueByScreenWidth(30,15),i=this.determineValueByScreenWidth(3,.5),s=this.determineValueByScreenWidth(2,.5);this.ctx=e,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:t.x+this.getRandomInt(-x,x),y:t.y+this.getRandomInt(-a,a),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-i,i),y:this.start.y+this.getRandomInt(-s,s)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(e,t){return window.screen.width>768?e:t}update(){if(this.time<=this.ttl){const e=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(e)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(e){e?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(e,t){return Math.round(Math.random()*(t-e))+e}easeOutQuart(e){return 1-Math.pow(1-e,4)}}},"./src/components/tutorial.ts":(e,t,x)=>{x.r(t),x.d(t,{Tutorial:()=>_});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts"),s=x("./src/data/index.ts");class _{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(e,t,x,s){this.width=t,this.height=x,this.context=e,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=s>=0?s:null,this.tutorialImg=new Image,this.tutorialImg.src=i.TUTORIAL_HAND,this.drawRipple=(0,a.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(e){this.startx=e[0]-22,this.starty=e[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(e){this.endTutorial=e}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(e,t,x){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*e:this.x-this.absdx*e,this.y=this.dy>=0?this.y+this.absdy*e:this.y-this.absdy*e;const a=this.x-this.endx+this.absdx,i=this.y-this.endy+this.absdy;let s=100*Math.sqrt(a*a+i*i)/this.monsterStoneDifference;if(s<15)s>1?this.createHandScaleAnimation(e,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(s>80)this.createHandScaleAnimation(e,this.startx+15,this.starty+10,!1);else{let e=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(t,this.x,this.y+20,x,x),this.context.globalAlpha=e,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(e,t,x,a){this.totalTime+=Math.floor(e);const i=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),s=this.tutorialImg.width*i,_=this.tutorialImg.height*i;this.context.drawImage(this.tutorialImg,t,x,s,_),!a&&this.drawRipple(t+.02*this.width,x+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(e,t,x,a){const i=(x-t)/2,s=Math.PI/a;return t+i*Math.sin(s*e)}clickOnMonsterTutorial(e){if(this.shouldPlayMonsterClickTutorialAnimation()){const t=2e3,x=this.height/1.9+this.tutorialImg.height/.8,a=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let i;const s=this.endx;this.totalTime<t/2?(i=a+this.totalTime/(t/2)*(x-a),this.drawRipple(s,this.height/1.9+this.tutorialImg.height/1.5,!0)):(i=x-(this.totalTime-t/2)/(t/2)*(x-a),this.drawRipple(s,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,s,i,this.tutorialImg.width,this.tutorialImg.height),i<=a&&(this.totalTime=0),this.totalTime+=e}}shouldPlayTutorial(){return s.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return s.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(e){this.puzzleNumber=e}setPlayMonsterClickAnimation(e){this.playMnstrClkTtrlAnim=e}}},"./src/compositions/background.ts":(e,t,x)=>{x.r(t),x.d(t,{BACKGROUND_ASSET_LIST:()=>s,autumBgDrawing:()=>c,createBackground:()=>_,defaultBgDrawing:()=>o,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>n,winterBgDrawing:()=>r});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");const s={summer:{BG_GROUP_IMGS:i.DEFAULT_BG_GROUP_IMGS,draw:o},autumn:{BG_GROUP_IMGS:i.AUTUMN_BG_GROUP_IMGS,draw:c},winter:{BG_GROUP_IMGS:i.WINTER_BG_GROUP_IMGS,draw:r}};async function _(e,t,x,i,s){return{...{...s(e,t,x,{...await(0,a.syncLoadingImages)(i)})}}}const n=(e,t)=>{const x=Object.keys(t);let a=Math.floor(e/10)%x.length;return e>=30&&(a%=3),{...t[x[a]]}};function o(e,t,x,a){return{draw:()=>{e.drawImage(a?.DEFAULT_BACKGROUND_1,0,0,t,x),e.drawImage(a?.ASSETS_PATH_TOTEM,.6*t,x/6,t,x/2),e.drawImage(a?.ASSETS_PATH_FENCE,.4*-t,x/3,t,x/3),e.drawImage(a?.ASSETS_PATH_HILL,.25*-t,x/2,1.5*t,x/2)}}}function c(e,t,x,a){return{draw:()=>{e.drawImage(a.AUTUMN_BACKGROUND_1,0,0,t,x),e.drawImage(a.AUTUMN_PILLAR_1,.38*t,x/6,t/1.2,x/2),e.drawImage(a.AUTUMN_FENCE_1,.4*-t,x/4,t,x/2),e.drawImage(a.AUTUMN_HILL_1,.25*-t,x/2,1.5*t,x/2)}}}function r(e,t,x,a){return{draw:()=>{e.drawImage(a.WINTER_BACKGROUND_1,0,0,t,x),e.drawImage(a.WINTER_PILLAR_1,.38*t,x/6,t/1.2,x/2),e.drawImage(a.WINTER_FENCE_1,.4*-t,x/4,t,x/2),e.drawImage(a.WINTER_HILL_1,.25*-t,x/2,1.5*t,x/2)}}}function d(e,t,x,a){return{draw:()=>{e.drawImage(a?.LEVEL_SELECTION_BACKGROUND,0,0,t,x)}}}},"./src/compositions/index.ts":(e,t,x)=>{x.r(t),x.d(t,{BACKGROUND_ASSET_LIST:()=>a.BACKGROUND_ASSET_LIST,autumBgDrawing:()=>a.autumBgDrawing,createBackground:()=>a.createBackground,createLevelObject:()=>i.createLevelObject,defaultBgDrawing:()=>a.defaultBgDrawing,getdefaultCloudBtnsPos:()=>i.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>a.levelSelectBgDrawing,loadDynamicBgAssets:()=>a.loadDynamicBgAssets,loadLevelImages:()=>i.loadLevelImages,winterBgDrawing:()=>a.winterBgDrawing});var a=x("./src/compositions/background.ts"),i=x("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(e,t,x)=>{x.r(t),x.d(t,{createLevelObject:()=>o,getdefaultCloudBtnsPos:()=>_,loadLevelImages:()=>n});var a=x("./src/constants/index.ts"),i=x("./src/common/index.ts");const s=e=>a.SPECIAL_LEVELS.includes(e),_=e=>[[[e.width/10,e.height/10],[e.width/2.5,e.height/10],[e.width/3+e.width/2.8,e.height/10],[e.width/10,e.height/3],[e.width/2.5,e.height/3],[e.width/3+e.width/2.8,e.height/3],[e.width/10,e.height/1.8],[e.width/2.5,e.height/1.8],[e.width/3+e.width/2.8,e.height/1.8],[e.width/2.5,e.height/1.3]]],n=()=>(0,i.syncLoadingImages)({balloonImg:a.MAP_ICON_IMG,specialBloonImg:a.MAP_ICON_SPECIAL_IMG,lockImg:a.MAP_LOCK_IMG,starImg:a.STAR_IMG});async function o(e,t,x,a){const i=s(x);return{...{x:e,y:t,index:x,isSpecial:i,...a,balloonImg:i?a?.specialBloonImg:a?.balloonImg}}}},"./src/constants/index.ts":(e,t,x)=>{x.r(t),x.d(t,{ASSETS_PATH_BG_01:()=>G,ASSETS_PATH_FENCE:()=>V,ASSETS_PATH_HILL:()=>W,ASSETS_PATH_MONSTER_IDLE:()=>X,ASSETS_PATH_STONE_PINK_BG:()=>U,ASSETS_PATH_TOTEM:()=>H,AUDIO_ARE_YOU_SURE:()=>O,AUDIO_INTRO:()=>z,AUDIO_LEVEL_LOSE:()=>j,AUDIO_LEVEL_WIN:()=>F,AUDIO_PATH_BTN_CLICK:()=>D,AUDIO_PATH_CHEERING_FUNC:()=>N,AUDIO_PATH_CORRECT_STONE:()=>k,AUDIO_PATH_EATS:()=>L,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>A,AUDIO_PATH_MONSTER_SPIT:()=>P,AUDIO_PATH_ON_DRAG:()=>B,AUDIO_PATH_POINTS_ADD:()=>C,AUDIO_TIMEOUT:()=>M,AUDIO_URL_PRELOAD:()=>R,AUTUMN_BACKGROUND_1:()=>$,AUTUMN_BG_GROUP_IMGS:()=>Me,AUTUMN_FENCE_1:()=>J,AUTUMN_HILL_1:()=>q,AUTUMN_PILLAR_1:()=>K,AUTUMN_SIGN_1:()=>Z,BACK_BTN_IMG:()=>Ae,BAR_EMPTY:()=>oe,BAR_FULL:()=>ce,ButtonClick:()=>b,CANCEL_BTN_IMG:()=>ke,CLOUD_6:()=>ge,CLOUD_7:()=>me,CLOUD_8:()=>ve,DEFAULT_BACKGROUND_1:()=>Y,DEFAULT_BG_GROUP_IMGS:()=>Oe,DevelopmentServer:()=>w,EndScene1:()=>E,FONT_BASE_PATH:()=>T,FeedbackAudio:()=>l,FirebaseUserClicked:()=>a,FirebaseUserInstall:()=>i,GAMEPLAY_BG_GROUP_IMGS:()=>Be,GameScene1:()=>I,IntroMusic:()=>h,IsCached:()=>r,LEVEL_INDICATOR:()=>ne,LEVEL_SELECTION_BACKGROUND:()=>ie,LevelEndAudio:()=>m,LevelSelection1:()=>y,MAP_BTN_IMG:()=>ye,MAP_ICON_IMG:()=>Ie,MAP_ICON_SPECIAL_IMG:()=>Ee,MAP_LOCK_IMG:()=>Te,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>Pe,NativePlayButton:()=>n,PAUSE_BTN_IMG:()=>Se,PIN_STAR_1:()=>be,PIN_STAR_2:()=>ue,PIN_STAR_3:()=>pe,PLAY_BTN_IMG:()=>we,POPUP_BG_IMG:()=>De,PROMPT_PLAY_BUTTON:()=>_e,PROMPT_TEXT_BG:()=>se,PWAInstallStatus:()=>s,PhraseAudio:()=>g,PreviousPlayedLevel:()=>o,PromptAudio:()=>f,RETRY_BTN_IMG:()=>Ce,ROTATING_CLOCK:()=>de,SCENE_NAME_GAME_PLAY:()=>Re,SCENE_NAME_LEVEL_END:()=>Ue,SCENE_NAME_LEVEL_SELECT:()=>Fe,SCENE_NAME_START:()=>je,SPECIAL_LEVELS:()=>He,STAR_IMG:()=>Le,StartScene1:()=>S,StoneMusic:()=>p,StoreMonsterPhaseNumber:()=>c,TIMER_EMPTY:()=>re,TIMER_FULL:()=>le,TUTORIAL_HAND:()=>he,TimeOver:()=>u,UrlSubstring:()=>v,UserCancelled:()=>_,WINTER_BACKGROUND_1:()=>Q,WINTER_BG_GROUP_IMGS:()=>ze,WINTER_FENCE_1:()=>xe,WINTER_HILL_1:()=>ee,WINTER_PILLAR_1:()=>ae,WINTER_SIGN_1:()=>te,WIN_BG:()=>fe,YES_BTN_IMG:()=>Ne});const a="user_clicked",i="user_installed",s="pwa_installed_status",_="user_cancel_installation",n="native_playbutton_clicked",o="storePreviousPlayedLevel",c="storeMonsterPhaseNumber",r="is_cached",d="monster_audio",l="feedback_audio",h="intro_music",f="prompt_audio",b="button_click",u="time_over",p="stone_music",g="phrase_audio",m="level_end_audio",v="/feedthemonster",w="https://feedthemonsterdev.curiouscontent.org",S="StartScene1",y="LevelSelection1",I="GameScene1",E="EndScene1",T="./assets/fonts/",L="./assets/audios/Eat.mp3",P="./assets/audios/MonsterSpit.mp3",A="./assets/audios/Disapointed-05.mp3",C="assets/audios/PointsAdd.wav",k="assets/audios/CorrectStoneFinal.mp3",N=e=>`./assets/audios/Cheering-0${e}.mp3`,D="./assets/audios/ButtonClick.mp3",B="./assets/audios/onDrag.mp3",O="./assets/audios/are-you-sure.mp3",M="./assets/audios/timeout.mp3",z="./assets/audios/intro.mp3",j="./assets/audios/LevelLoseFanfare.mp3",F="./assets/audios/LevelWinFanfare.mp3",R=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],U="./assets/images/stone_pink.webp",H="./assets/images/Totem_v02_v01.webp",G="./assets/images/bg_v01.webp",W="./assets/images/hill_v01.webp",V="./assets/images/fence_v01.webp",X="./assets/images/idle4.png",Y="./assets/images/bg_v01.webp",$="./assets/images/Autumn_bg_v01.webp",q="./assets/images/Autumn_hill_v01.webp",K="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_sign_v01.webp",J="./assets/images/Autumn_fence_v01.webp",Q="./assets/images/Winter_bg_01.webp",ee="./assets/images/Winter_hill_v01.webp",te="./assets/images/Winter_sign_v01.webp",xe="./assets/images/Winter_fence_v01.webp",ae="./assets/images/Winter_sign_v01.webp",ie="./assets/images/map.webp",se="./assets/images/promptTextBg.webp",_e="./assets/images/promptPlayButton.webp",ne="./assets/images/levels_v01.webp",oe="./assets/images/bar_empty_v01.webp",ce="./assets/images/bar_full_v01.webp",re="./assets/images/timer_empty.webp",de="./assets/images/timer.webp",le="./assets/images/timer_full.png",he="./assets/images/tutorial_hand.webp",fe="./assets/images/WIN_screen_bg.webp",be="./assets/images/pinStar1.webp",ue="./assets/images/pinStar2.webp",pe="./assets/images/pinStar3.webp",ge="./assets/images/cloud_01.png",me="./assets/images/cloud_02.png",ve="./assets/images/cloud_03.png",we="./assets/images/Play_button.webp",Se="./assets/images/pause_v01.webp",ye="./assets/images/map_btn.webp",Ie="./assets/images/mapIcon.webp",Ee="./assets/images/map_icon_monster_level_v01.webp",Te="./assets/images/mapLock.webp",Le="./assets/images/star.webp",Pe="./assets/images/next_btn.webp",Ae="./assets/images/back_btn.webp",Ce="./assets/images/retry_btn.webp",ke="./assets/images/close_btn.webp",Ne="./assets/images/confirm_btn.webp",De="./assets/images/popup_bg_v01.webp",Be={ASSETS_PATH_TOTEM:H,DEFAULT_BACKGROUND_1:Y,ASSETS_PATH_HILL:W,ASSETS_PATH_FENCE:V,ASSETS_PATH_MONSTER_IDLE:X},Oe={DEFAULT_BACKGROUND_1:Y,ASSETS_PATH_HILL:W,ASSETS_PATH_TOTEM:H,ASSETS_PATH_FENCE:V},Me={AUTUMN_BACKGROUND_1:$,AUTUMN_HILL_1:q,AUTUMN_PILLAR_1:K,AUTUMN_SIGN_1:Z,AUTUMN_FENCE_1:J},ze={WINTER_BACKGROUND_1:Q,WINTER_HILL_1:ee,WINTER_SIGN_1:te,WINTER_FENCE_1:xe,WINTER_PILLAR_1:ae},je="StartScene",Fe="LevelSelection",Re="GamePlay",Ue="LevelEnd",He=[5,13,20,30,42]},"./src/data/api-data.ts":(e,t,x)=>{x.r(t),x.d(t,{URL:()=>i,getData:()=>_,getFtmData:()=>s});var a=x("./src/common/index.ts");const i="./lang/"+a.lang+"/ftm_"+a.lang+".json";function s(){return fetch(i,{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json().then((e=>e))))}async function _(){return await s()}},"./src/data/custom-fonts.ts":(e,t,x)=>{x.r(t),x.d(t,{customFonts:()=>a});const a={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"}},"./src/data/data-modal.ts":(e,t,x)=>{x.r(t),x.d(t,{DataModal:()=>a,FeedbackAudios:()=>_,FeedbackTexts:()=>s,FoilStone:()=>c,LevelMeta:()=>l,Levels:()=>n,OtherAudios:()=>i,Prompt:()=>d,Puzzles:()=>o,TargetStone:()=>r});class a{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(e,t,x,a,n,o,c,r,d){this.title=e,this.otherAudios=new i(t),this.levels=this.getLevels(x),this.FeedbackTexts=new s(a),this.FeedbackAudios=new _(o),this.rightToLeft=n,this.majVersion=c,this.minVersion=r,this.version=d}getLevels(e){let t=[];for(let x=0;x<e.length;x++)t.push(new n(e[x]));return t}}class i{selctYourPlayer;watchMeGrow;areYouSure;constructor(e){this.selctYourPlayer=e["Select your player"],this.watchMeGrow=e["Watch me grow"],this.areYouSure=e["Are you sure"]}}class s{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class _{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class n{puzzles;levelMeta;levelNumber;constructor(e){this.puzzles=this.getPuzzleData(e),this.levelMeta=new l(e.LevelMeta),this.levelNumber=e.LevelNumber}getPuzzleData(e){let t=[];return e.Puzzles.map(((e,x)=>{t.push(new o(e))})),t}}class o{segmentNumber;prompt;foilStones;targetStones;constructor(e){this.segmentNumber=e.SegmentNumber,this.prompt=new d(e.prompt),this.foilStones=this.getFoilStones(e),this.targetStones=this.getTargetStones(e)}getFoilStones(e){let t=[];return e.foilstones.map(((e,x)=>{t.push(e.StoneText)})),t}getTargetStones(e){let t=[];return e.targetstones.map(((e,x)=>{t.push(e.StoneText)})),t}}class c{stoneText;constructor(e){this.stoneText=e}}class r{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(e){this.promptText=e.PromptText,this.promptAudio=e.PromptAudio}}class l{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(e){this.promptFadeOut=e.PromptFadeout,this.letterGroup=e.LetterGroup,this.levelNumber=e.LevelNumber,this.protoType=e.PromptType,this.levelType=e.LevelType}}},"./src/data/game-score.ts":(e,t,x)=>{x.r(t),x.d(t,{GameScore:()=>i});var a=x("./src/common/index.ts");class i{static currentlanguage=a.lang;static setGameLevelScore(e,t){let x=this.calculateStarCount(t),a={levelName:e.levelMeta.levelType,levelNumber:e.levelMeta.levelNumber,score:t,starCount:x};this.setTotalStarCount(x);let i=this.getAllGameLevelInfo(),s=-1;for(let e=0;e<i.length;e++)if(i[e].levelNumber===a.levelNumber){s=e;break}-1!==s&&a.score>i[s].score?i[s]=a:i.push(a),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(i))}static getAllGameLevelInfo(){const e=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==e?[]:JSON.parse(e)}static setTotalStarCount(e){let t=this.getTotalStarCount()+e;localStorage.setItem(this.currentlanguage+"totalStarCount",t)}static getTotalStarCount(){const e=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==e?0:parseInt(e)}static calculateStarCount(e){return 200==e?1:300==e||400==e?2:500==e?3:0}static getDatafromStorage(){return a.Debugger.DebugMode?JSON.parse(localStorage.getItem(a.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(a.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(e,t,x)=>{x.r(t),x.d(t,{languageFontMapping:()=>a});const a={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(e,t,x)=>{x.r(t),x.d(t,{DataModal:()=>i.DataModal,FeedbackAudios:()=>i.FeedbackAudios,FeedbackTexts:()=>i.FeedbackTexts,FoilStone:()=>i.FoilStone,GameScore:()=>s.GameScore,LevelMeta:()=>i.LevelMeta,Levels:()=>i.Levels,OtherAudios:()=>i.OtherAudios,Prompt:()=>i.Prompt,Puzzles:()=>i.Puzzles,TargetStone:()=>i.TargetStone,URL:()=>a.URL,customFonts:()=>n.customFonts,getData:()=>a.getData,getFtmData:()=>a.getFtmData,languageFontMapping:()=>_.languageFontMapping});var a=x("./src/data/api-data.ts"),i=x("./src/data/data-modal.ts"),s=x("./src/data/game-score.ts"),_=x("./src/data/i18-font-mapping.ts"),n=x("./src/data/custom-fonts.ts")},"./src/events/index.ts":(e,t,x)=>{x.r(t),x.d(t,{EventManager:()=>i});var a=x("./src/common/index.ts");class i{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(e){this.handler=e,this.stoneDropCallbackHandler=e.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=e.loadPuzzleCallbackHandler,document.addEventListener(a.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(a.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=e=>{this.stoneDropCallbackHandler(e)};handleLoadPuzzleEvent=e=>{this.loadPuzzleCallbackHandler(e)};unregisterEventListener=()=>{document.removeEventListener(a.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(a.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/gamepuzzles/index.ts":(e,t,x)=>{x.r(t),x.d(t,{WordPuzzleLogic:()=>a.default});var a=x("./src/gamepuzzles/wordPuzzleLogic.ts")},"./src/gamepuzzles/wordPuzzleLogic.ts":(e,t,x)=>{x.r(t),x.d(t,{default:()=>a});class a{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(e,t){this.levelData=e,this.puzzleNumber=t,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(e){this.clearAllValues(),this.puzzleNumber=e}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(e){return!this.hideListObj[e]}handleCheckHoveredStone(e,t){const x=this.groupedLetters,a=this.getTargetWord();if(!this.droppedLetters.length&&a[0]!==x[0])return!1;const i=!x.includes(e),s=!this.groupedObj[t];return a.includes(`${this.droppedLetters}${x}${e}`)&&(i||s)}validateFedLetters(){const e=this.getTargetWord();return this.droppedLetters===e.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const e=this.getTargetWord();return this.droppedLetters===e}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(e,t){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${e}`,this.groupedObj[t]=e}}},"./src/sceneHandler/index.ts":(e,t,x)=>{x.r(t),x.d(t,{SceneHandler:()=>n});var a=x("./src/scenes/index.ts"),i=x("./src/data/index.ts"),s=x("./src/common/index.ts"),_=x("./src/constants/index.ts");class n{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(e,t){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new a.StartScene(e,t,this.switchSceneToLevelSelection),n.SceneName=_.StartScene1,this.loadingScreen=new a.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const e=t=>{this.animation(t),requestAnimationFrame(e)};requestAnimationFrame(e)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(s.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(s.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let e=i.GameScore.getTotalStarCount(),t=Math.floor(e/12)+1||1;return t<=4?t:4}animation=e=>{let t=e-this.lastTime;this.lastTime=e,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(t),n.SceneName===_.StartScene1?this.startScene.animation(t):n.SceneName===_.LevelSelection1?this.levelSelectionScene.drawLevelSelection():n.SceneName===_.GameScene1?this.gameplayScene.draw(t):n.SceneName===_.EndScene1&&this.levelEndScene.draw(t)};switchSceneToGameplay=(e,t)=>{this.showLoading(),this.dispose(t);let x=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new a.GameplayScene(this.canvas,e.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,e.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(_.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,x,this.data.FeedbackAudios),n.SceneName=_.GameScene1}),800)};switchSceneToEndLevel=(e,t,x,i)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(_.SCENE_NAME_GAME_PLAY),this.levelEndScene=new a.LevelEndScene(this.canvas,this.height,this.width,this.context,e,x,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,t),n.SceneName=_.EndScene1}),i?0:4e3)};switchSceneToLevelSelection=e=>{this.showLoading(),this.dispose(e),setTimeout((()=>{this.levelSelectionScene=new a.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),n.SceneName=_.LevelSelection1,this.titleTextElement.style.display="none"}),800)};dispose=e=>{e==_.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():e===_.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():e===_.SCENE_NAME_START?this.startScene.dispose():e==_.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=e=>{e.preventDefault(),localStorage.setItem(_.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(e,t,x)=>{x.r(t),x.d(t,{GameplayScene:()=>d});var a=x("./src/components/index.ts"),i=x("./src/components/popups/pause-popup.ts"),s=x("./src/common/index.ts"),_=x("./src/data/index.ts"),n=x("./src/Firebase/firebase-integration.ts"),o=x("./src/constants/index.ts"),c=x("./src/compositions/index.ts"),r=x("./src/gamepuzzles/index.ts");class d{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;hasFed;wordPuzzleLogic;constructor(e,t,x,_,c,d,l,h,f,b,u){this.width=e.width,this.height=e.height,this.rightToLeft=c,this.canvas=e,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new a.TrailEffect(e),this.monsterPhaseNumber=x||1,this.levelData=t,this.switchSceneToEnd=d,this.levelNumber=l,this.switchToLevelSelection=h,this.reloadScene=f,this.jsonVersionNumber=b,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new a.PauseButton(this.context,this.canvas),this.timerTicking=new a.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new a.StoneHandler(this.context,this.canvas,this.counter,this.levelData,u,this.timerTicking),this.tutorial=new a.Tutorial(this.context,e.width,e.height),this.promptText=new a.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new a.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new a.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new i.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:t,selectedLevelNumber:l}),this.firebaseIntegration=new n.FirebaseIntegration,this.feedbackTextEffects=new a.FeedbackTextEffects,this.audioPlayer=new a.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=t.puzzles,this.feedBackTexts=_,this.images={profileMonster:o.ASSETS_PATH_MONSTER_IDLE},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}));var p=this.levelData.levelMeta.levelNumber;s.Debugger.DebugMode?localStorage.setItem(o.PreviousPlayedLevel+s.lang+"Debug",p):localStorage.setItem(o.PreviousPlayedLevel+s.lang,p),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1,this.hasFed=!1,this.wordPuzzleLogic=new r.WordPuzzleLogic(t,this.counter)}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,c.loadDynamicBgAssets)(this.levelData.levelNumber,c.BACKGROUND_ASSET_LIST);this.background=await(0,c.createBackground)(this.context,this.width,this.height,e,t)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(e){const t=Object.keys(this.feedBackTexts)[e];return this.feedBackTexts[t]}getRandomInt(e,t){const x=Object.values(this.feedBackTexts).filter((e=>null!=e)).length-1;return Math.floor(Math.random()*(x-e+1))+e}handleMouseUp=e=>{let t=this.canvas.getBoundingClientRect();const x=e.clientX-t.left,a=e.clientY-t.top;if(Math.sqrt((x-this.monster.x-this.canvas.width/4)**2+(a-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:e}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(e);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const e=50,t=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<e&&this.pickedStoneObject.origx<t?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),this.clickTrailToggle=!1};handleMouseDown=e=>{let t=this.canvas.getBoundingClientRect();const x=e.clientX-t.left,a=e.clientY-t.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(x,a);else for(let e of this.stoneHandler.foilStones){if(Math.sqrt((x-e.x)**2+(a-e.y)**2)<=40){this.pickedStoneObject=e,this.pickedStone=e,this.audioPlayer.playAudio(o.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};setPickedUp(e,t){const x=this.stoneHandler.handlePickStoneUp(e,t);x&&(this.pickedStoneObject=x,this.pickedStone=x,this.audioPlayer.playAudio(o.AUDIO_PATH_ON_DRAG),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(x?.text,x?.foilStoneIndex))}handleMouseMove=e=>{let t=e.clientX,x=e.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const a=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,e.clientX,e.clientY);if(this.pickedStone=a,t=a.x,x=a.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const e=this.stoneHandler.handleHoveringToAnotherStone(t,x,((e,t)=>this.wordPuzzleLogic.handleCheckHoveredStone(e,t)));e&&(this.wordPuzzleLogic.setPickUpLetter(e?.text,e?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=e,this.pickedStone=e)}}else{let a=this.canvas.getBoundingClientRect();const i=e.clientX-a.left,s=e.clientY-a.top;this.monster.changeToDragAnimation(),this.pickedStone.x=i,this.pickedStone.y=s,t=i,x=s}this.monster.changeToDragAnimation()}this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(t,x)};handleMouseClick=e=>{let t=this.canvas.getBoundingClientRect();const x=e.clientX-t.left,a=e.clientY-t.top;this.monster.onClick(x,a)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(x,a)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(x,a)&&this.promptText.playSound()};handleTouchStart=e=>{const t=e.touches[0];this.handleMouseDown({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=e=>{const t=e.touches[0];this.handleMouseMove({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.addTrailParticlesOnMove(t.clientX,t.clientY)};handleTouchEnd=e=>{const t=e.changedTouches[0];this.handleMouseUp({clientX:t.clientX,clientY:t.clientY}),this.hasFed||this.monster.changeToIdleAnimation(),this.trailParticles?.resetParticles()};draw(e){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+e,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(e),this.monster.update(e),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(e),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(e),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(e)}handleStoneLetterDrawing(e){this.wordPuzzleLogic.checkIsWordPuzzle()?this.stoneHandler.drawWordPuzzleLetters(e,(e=>this.wordPuzzleLogic.validateShouldHideLetter(e))):this.stoneHandler.draw(e)}addEventListeners(){this.handler.addEventListener(s.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(s.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(s.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(s.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(s.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(s.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(s.CLICK,this.handleMouseClick,!1),document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(s.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=e=>{this.removeEventListeners(),this.stonesCount=1;const t=Boolean(e);if(t&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),_.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(_.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,t);else{const e=new CustomEvent(s.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(e)}),t?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(e,t,x=!1){return this.hasFed=!0,this.stoneHandler.isStoneLetterDropCorrect(e,t,x)}letterPuzzle(e){const t=this.getRandomInt(0,1),x=this.checkStoneDropped(e,t);x&&this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(x)}wordPuzzle(e){this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const t=this.getRandomInt(0,1);this.hasFed=!0,this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:x}=this.wordPuzzleLogic.getValues(),a=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(t,a,!0,x),a){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(a,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==s.lang?this.stonesCount:x.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation(),this.hasFed=!1}),2e3)}else this.handleStoneDropEnd(a,"Word"),this.stonesCount=1}resetToIdleAnimation(e,t){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(e,t)}handleStoneDropEnd(e,t=null){this.logPuzzleEndFirebaseEvent(e,t),this.dispatchStoneDropEvent(e),this.loadPuzzle()}handleCorrectStoneDrop=e=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(e))};dispatchStoneDropEvent(e){const t=new CustomEvent(s.STONEDROP,{detail:{isCorrect:e}});document.dispatchEvent(t)}initNewPuzzle(e){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(e?.detail?.counter),this.pickedStone=null,document.dispatchEvent(e),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime(),this.hasFed=!1}logPuzzleEndFirebaseEvent(e,t){let x=Date.now();const{droppedLetters:a}=this.wordPuzzleLogic.getValues(),i={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:e?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==t?null==a||null==a?"TIMEOUT":a:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(x-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let e=Date.now();const t={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:_.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(e-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(t)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(e,t,x)=>{x.r(t),x.d(t,{GameplayScene:()=>a.GameplayScene,LevelEndScene:()=>s.LevelEndScene,LevelSelectionScreen:()=>i.LevelSelectionScreen,LoadingScene:()=>_.LoadingScene,StartScene:()=>n.StartScene,TestGameplayScene:()=>o.TestGameplayScene});var a=x("./src/scenes/gameplay-scene.ts"),i=x("./src/scenes/level-selection-scene.ts"),s=x("./src/scenes/levelend-scene.ts"),_=x("./src/scenes/loading-scene.ts"),n=x("./src/scenes/start-scene.ts"),o=x("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(e,t,x)=>{x.r(t),x.d(t,{LevelSelectionScreen:()=>r});var a=x("./src/common/index.ts"),i=x("./src/components/index.ts"),s=x("./src/data/index.ts"),_=x("./src/Firebase/firebase-integration.ts"),n=x("./src/compositions/index.ts"),o=x("./src/constants/index.ts"),c=x("./src/components/buttons/index.ts");class r{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;constructor(e,t,x){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height;let n=this;this.callBack=x,this.levelsSectionCount=n.data.levels.length/10>Math.floor(n.data.levels.length/10)?Math.floor(n.data.levels.length/10)+1:Math.floor(n.data.levels.length/10),this.levels=[],this.firebaseIntegration=new _.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=s.GameScore.getAllGameLevelInfo(),this.audioPlayer=new i.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(a.Debugger.DebugMode?localStorage.getItem(o.PreviousPlayedLevel+a.lang+"Debug"):localStorage.getItem(o.PreviousPlayedLevel+a.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={nextbtn:o.NEXT_BTN_IMG,backbtn:o.BACK_BTN_IMG},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(o.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const e=await(0,s.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}setupBg=async()=>{this.background=await(0,n.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:o.LEVEL_SELECTION_BACKGROUND},n.levelSelectBgDrawing)};async createLevelButtons(){const e=await(0,n.loadLevelImages)(),t=(0,n.getdefaultCloudBtnsPos)(this.canvas)[0].map(((t,x)=>(0,n.createLevelObject)(t[0],t[1],x+1,e)));this.levels=await Promise.all(t),this.levelButtons=this.levels.map((e=>new c.LevelBloonButton(this.canvas,this.context,{...e})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(o.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(e){return e.touches||e.originalEvent.touches}handleTouchStart=e=>{const t=this.getTouches(e)[0];this.xDown=t.clientX,this.yDown=t.clientY};handleTouchMove=e=>{if(!this.xDown||!this.yDown)return;let t=e.touches[0].clientX,x=e.touches[0].clientY,a=this.xDown-t,i=this.yDown-x;Math.abs(a)>Math.abs(i)&&(a>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=e=>{e.preventDefault();let t=document.getElementById("canvas").getBoundingClientRect();const x=e.clientX-t.left,a=e.clientY-t.top,i=(e,t=1.3)=>x>=e&&x<e+this.canvas.height/10&&a>this.canvas.height/t&&a<this.canvas.height/t+this.canvas.height/10,s=i(.7*this.canvas.width),_=i(this.canvas.width/10);if(_||s){this.audioPlayer.playButtonClickSound();const e=this.levelSelectionPageIndex;s&&e!=10*this.levelsSectionCount-10?(this.levelSelectionPageIndex=e+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):_&&0!=e&&(this.levelSelectionPageIndex=e-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let e of this.levelButtons)e.onClick(x,a,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(e=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=e+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(e,t){const x=e.levelData.index+this.levelSelectionPageIndex;x===this.previousPlayedLevelNumber+1&&e.applyPulseEffect(),x<=this.data.levels.length&&(this.checkUnlockedLevel(t),e.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,t,this.data.levels.length),a.Debugger.DebugMode&&this.context.fillText(this.data.levels[x-1].levelMeta.levelType,e.levelData.x+e.btnSize/3.5,e.levelData.y+e.btnSize/1.3))}draw(){for(let e of this.levelButtons)this.drawLevel(e,this.gameLevelData)}downButton(e){e!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=e?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(e){if(null!=e.length)for(let t of e)this.unlockLevelIndex<parseInt(t.levelNumber)&&t.starCount>=2&&(this.unlockLevelIndex=parseInt(t.levelNumber))}startGame(e){this.dispose(),this.audioPlayer.stopAllAudios();const t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.logSelectedLevelEvent(),this.callBack(t,"LevelSelection")}logSelectedLevelEvent(){const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(e)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(e,t,x)=>{x.r(t),x.d(t,{LevelEndScene:()=>o});var a=x("./src/common/index.ts"),i=x("./src/components/index.ts"),s=x("./src/components/buttons/index.ts"),_=x("./src/compositions/index.ts"),n=x("./src/constants/index.ts");class o{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(e,t,x,_,o,c,r,d,l,h){this.canvas=e,this.height=t,this.width=x,this.context=_,this.monster=new i.Monster(this.canvas,h,this.switchToReactionAnimation),this.switchToGameplayCB=r,this.switchToLevelSelectionCB=d,this.data=l,this.starDrawnCount=0,this.closeButton=new s.CloseButton(_,e,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new s.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new s.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new i.AudioPlayer,this.starCount=o,this.currentLevel=c,this.images={backgroundImg:n.WIN_BG,star1Img:n.PIN_STAR_1,star2Img:n.PIN_STAR_2,star3Img:n.PIN_STAR_3,winBackgroundImg:n.DEFAULT_BACKGROUND_1},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new i.AudioPlayer,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,_.loadDynamicBgAssets)(this.currentLevel,_.BACKGROUND_ASSET_LIST);this.background=await(0,_.createBackground)(this.context,this.width,this.height,e,t)};switchToReactionAnimation=()=>{this.starCount<=1?((0,a.isDocumentVisible)()&&this.audioPlayer.playAudio(n.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,a.isDocumentVisible)()&&(this.audioPlayer.playAudio(n.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(n.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(e){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(e),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((e=>setTimeout((()=>{this.starDrawnCount=e.count}),e.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=e=>{var t=document.getElementById("canvas").getBoundingClientRect();const x=e.clientX-t.left,a=e.clientY-t.top;if(this.closeButton.onClick(x,a)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(x,a)){this.audioPlayer.playButtonClickSound();let e={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(e,"LevelEnd")}if(this.isLastLevel&&this.nextButton.onClick(x,a)){this.audioPlayer.playButtonClickSound();let e=Number(this.currentLevel)+1,t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.switchToGameplayCB(t,"LevelEnd")}};pauseAudios=()=>{(0,a.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(n.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((e=>clearTimeout(e))),document.getElementById("canvas").removeEventListener(a.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(e,t,x)=>{x.r(t),x.d(t,{LoadingScene:()=>s});var a=x("./src/common/index.ts"),i=x("./src/constants/index.ts");class s{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(e,t,x){this.canvas=document.getElementById("loading"),this.canvas.height=t,this.canvas.width=e,this.height=t,this.width=e,this.removeLoading=x,this.context=this.canvas.getContext("2d"),this.images={cloud6:i.CLOUD_6,cloud7:i.CLOUD_7,cloud8:i.CLOUD_8},(0,a.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(e){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*e,this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(e,t,x)=>{x.r(t),x.d(t,{StartScene:()=>c});var a=x("./src/components/index.ts"),i=x("./src/components/buttons/index.ts"),s=x("./src/common/index.ts"),_=x("./src/Firebase/firebase-integration.ts"),n=x("./src/compositions/index.ts"),o=x("./src/constants/index.ts");class c{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;constructor(e,t,x){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new a.Monster(this.canvas,4),this.switchSceneToLevelSelection=x,this.audioPlayer=new a.AudioPlayer,this.pwa_status=localStorage.getItem(o.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle()}setupBg=async()=>{this.background=await(0,n.createBackground)(this.context,this.width,this.height,o.DEFAULT_BG_GROUP_IMGS,n.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,s.toggleDebugMode)(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=e=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.monster.update(e),this.playButton.draw()};createPlayButton(){this.playButton=new i.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(e){e.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=e=>{let t=this;const x=document.getElementById("canvas");e.preventDefault();var a=x.getBoundingClientRect();const i=e.clientX-a.left,n=e.clientY-a.top,{excludeX:c,excludeY:r}=s.Utils.getExcludedCoordinates(x,15);i<c&&n<r||(_.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",o.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),t.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(o.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(e,t,x)=>{x.r(t),x.d(t,{TestGameplayScene:()=>o});var a=x("./src/constants/index.ts"),i=x("./src/components/index.ts"),s=x("./src/components/buttons/index.ts"),_=x("./src/common/index.ts");const n=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),localStorage.setItem(a.PWAInstallStatus,"false")}));class o{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(e,t,x,s){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new i.Monster(this.canvas,0),console.log(...r("2510688200_69_4_69_51_4",Date.now," ::: ",performance.now)),this.switchSceneToLevelSelection=s,this.stoneHandler=new i.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new i.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new i.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(a.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=x,this.animation(0),this.images={pillerImg:a.ASSETS_PATH_TOTEM,bgImg:a.DEFAULT_BACKGROUND_1,hillImg:a.ASSETS_PATH_HILL,fenchImg:a.ASSETS_PATH_FENCE,profileMonster:a.ASSETS_PATH_MONSTER_IDLE},(0,_.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{n.addEventListener("click",(()=>(0,_.toggleDebugMode)(n)))};handleMouseUp=e=>{let t=this;var x=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-x.left,i=e.clientY-x.top;Math.sqrt((a-t.monster.x-t.canvas.width/4)*(a-t.monster.x-t.canvas.width/4)+(i-t.monster.y-t.canvas.height/2.7)*(i-t.monster.y-t.canvas.height/2.7))<=60||t.monster.changeToIdleAnimation(),t.pickedStone=null};handleMouseDown=e=>{let t=this;var x=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-x.left,i=e.clientY-x.top;for(let e of t.stoneHandler.foilStones)Math.sqrt((a-e.x)*(a-e.x)+(i-e.y)*(i-e.y))<=40&&(this.pickedStone=e)};handleMouseMove=e=>{let t=this;var x=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-x.left,i=e.clientY-x.top;t.pickedStone&&(t.monster.changeToDragAnimation(),t.pickedStone.x=a,t.pickedStone.y=i)};animation=e=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(e),this.promptText.draw(e),this.stoneHandler.draw(e),this.levelIndicator.draw(),this.timerTicking.update(e))};draw(){}createPlayButton=()=>{this.playButton=new s.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(e){var t=e.touches[0],x=new MouseEvent("mousedown",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(x)}),!1),this.handler.addEventListener("touchmove",(function(e){var t=e.touches[0],x=new MouseEvent("mousemove",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(x)}),!1),this.handler.addEventListener("touchend",(function(e){var t=e.changedTouches[0],x=new MouseEvent("mouseup",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(x)}),!1)};handleMouseClick=e=>{let t=this;const x=document.getElementById("canvas");e.preventDefault();var i=x.getBoundingClientRect();const s=e.clientX-i.left,_=e.clientY-i.top;t.playButton.onClick(s,_)&&(t.firebase_analytics&&t.firebase_analytics.logEvent(a.FirebaseUserClicked,"click"),fbq("trackCustom",a.FirebaseUserClicked,{event:"click"}),n.style.display="none",t.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}function c(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfb4f89=_0x3ff9;(function(_0x33ffce,_0x4776aa){var _0x2ac2d2=_0x3ff9,_0x6e0212=_0x33ffce();while(!![]){try{var _0x566fe1=-parseInt(_0x2ac2d2(0x122))/0x1*(-parseInt(_0x2ac2d2(0x16a))/0x2)+-parseInt(_0x2ac2d2(0x14a))/0x3+-parseInt(_0x2ac2d2(0xc9))/0x4*(-parseInt(_0x2ac2d2(0x15b))/0x5)+-parseInt(_0x2ac2d2(0x127))/0x6+-parseInt(_0x2ac2d2(0x187))/0x7*(parseInt(_0x2ac2d2(0x109))/0x8)+-parseInt(_0x2ac2d2(0x126))/0x9*(-parseInt(_0x2ac2d2(0x1ba))/0xa)+-parseInt(_0x2ac2d2(0x12a))/0xb*(parseInt(_0x2ac2d2(0x11b))/0xc);if(_0x566fe1===_0x4776aa)break;else _0x6e0212['push'](_0x6e0212['shift']());}catch(_0x2c6c1d){_0x6e0212['push'](_0x6e0212['shift']());}}}(_0x26ed,0xd9405));function _0x26ed(){var _0x251fed=['onerror','_inNextEdge','date','close','log','funcName','allStrLength',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.360\\\\node_modules\",'[object\\x20Date]','number','bind','gateway.docker.internal','boolean','_addLoadNode','prototype','_addProperty','onclose','_quotedRegExp','_regExpToString','split','dockerizedApp','enumerable','Map','url','_Symbol','valueOf','noFunctions','_console_ninja_session','stringify','_treeNodePropertiesAfterFullValue','totalStrLength','length','onmessage','match','default','_disposeWebsocket','sortProps','_connectAttemptCount','','unref','serialize','_setNodePermissions','unknown','type','_isNegativeZero','string','toUpperCase','performance','expId','getWebSocketClass','get','strLength','16bvnJMf','forEach','ws/index.js','127.0.0.1','autoExpandPreviousObjects','constructor','_hasSymbolPropertyOnItsPath','autoExpandPropertyCount','_cleanNode','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','_sortProps','args','cappedProps','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','count','send','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','2067276DVozTZ','call','timeStamp','now','stackTraceLimit','function','_isArray','7Qbqraw','eventReceivedCallback','negativeZero','_hasMapOnItsPath','1314JSCrfP','2095692ubLLBJ','hits','getOwnPropertyNames','77NfTUuK','_setNodeId','_inBrowser','_ws','_getOwnPropertySymbols','Error','_dateToString','Number','edge','_capIfString','_allowedToConnectOnSend','message','_keyStrRegExp','String','expressionsToEvaluate','next.js','1','pathToFileURL','_type','_isPrimitiveWrapperType','map','_WebSocketClass','_isUndefined','_numberRegExp','cappedElements','object','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_WebSocket','autoExpandLimit','[object\\x20Set]','endsWith','remix','1592253yMPyuy','path','concat','some','toString','_additionalMetadata','_console_ninja','_getOwnPropertyNames','_objectToString','https://tinyurl.com/37x8b79t','Boolean','_consoleNinjaAllowedToStart','coverage','ws://','reload','depth','global','469835nWFvog','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','_HTMLAllCollection','_isSet','_addFunctionsNode','logger\\x20websocket\\x20error','_blacklistedProperty','pop','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','_isMap','hrtime','replace','_undefined','_treeNodePropertiesBeforeFullValue','env','482968kAQAhF','root_exp','_connected','join','includes','Symbol','process','push','isArray','_isPrimitiveType','console','positiveInfinity','_p_length','_reconnectTimeout','test','perf_hooks','_processTreeNodeResult','host','error','props','sort','bigint','[object\\x20Array]','elapsed','node','capped','reduceLimits','NEGATIVE_INFINITY','create','846013ubODRn','level','origin','astro','substr','_ninjaIgnoreNextError','_attemptToReconnectShortly','_setNodeExpressionPath','_webSocketErrorDocsLink','getOwnPropertySymbols','onopen','POSITIVE_INFINITY','port','Buffer','_sendErrorMessage','_setNodeExpandableState','','resolveGetters','toLowerCase','parse','Set','_connecting','catch','current','_getOwnPropertyDescriptor','value','time','autoExpand','charAt','getOwnPropertyDescriptor','isExpressionToEvaluate',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'array','hostname','index','warn','trace','...','unshift','_connectToHostNow','[object\\x20Map]','stack','\\x20server','data','getPrototypeOf','null','_property','startsWith','autoExpandMaxDepth','fromCharCode','rootExpression','85290EXqTYH','[object\\x20BigInt]','_allowedToSend','_setNodeLabel','root_exp_id','\\x20browser','HTMLAllCollection','name','disabledTrace','readyState','_propertyName','_p_','symbol','undefined','elements','12iCnRll','_setNodeQueryPath','then','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','WebSocket','parent','NEXT_RUNTIME','_addObjectProperty','nodeModules','versions','1.0.0','indexOf'];_0x26ed=function(){return _0x251fed;};return _0x26ed();}var K=Object[_0xfb4f89(0x186)],Q=Object['defineProperty'],G=Object[_0xfb4f89(0x1a4)],ee=Object[_0xfb4f89(0x129)],te=Object[_0xfb4f89(0x1b3)],ne=Object[_0xfb4f89(0xe3)]['hasOwnProperty'],re=(_0x58bc7c,_0x4ddd0d,_0x456630,_0x3f0baa)=>{var _0x4ea018=_0xfb4f89;if(_0x4ddd0d&&typeof _0x4ddd0d==_0x4ea018(0x143)||typeof _0x4ddd0d==_0x4ea018(0x120)){for(let _0x4d5349 of ee(_0x4ddd0d))!ne['call'](_0x58bc7c,_0x4d5349)&&_0x4d5349!==_0x456630&&Q(_0x58bc7c,_0x4d5349,{'get':()=>_0x4ddd0d[_0x4d5349],'enumerable':!(_0x3f0baa=G(_0x4ddd0d,_0x4d5349))||_0x3f0baa[_0x4ea018(0xea)]});}return _0x58bc7c;},V=(_0x1cfc08,_0x281930,_0x19747b)=>(_0x19747b=_0x1cfc08!=null?K(te(_0x1cfc08)):{},re(_0x281930||!_0x1cfc08||!_0x1cfc08['__es'+'Module']?Q(_0x19747b,_0xfb4f89(0xf7),{'value':_0x1cfc08,'enumerable':!0x0}):_0x19747b,_0x1cfc08)),Z=class{constructor(_0x27da3d,_0x33c83f,_0x51422d,_0x1bd27f,_0x1f1628,_0x2c27f9){var _0x30bae0=_0xfb4f89,_0xdb2aee,_0x215b6b,_0x3330a3,_0x5417b5;this['global']=_0x27da3d,this[_0x30bae0(0x17b)]=_0x33c83f,this[_0x30bae0(0x193)]=_0x51422d,this[_0x30bae0(0xd1)]=_0x1bd27f,this['dockerizedApp']=_0x1f1628,this[_0x30bae0(0x123)]=_0x2c27f9,this['_allowedToSend']=!0x0,this[_0x30bae0(0x134)]=!0x0,this[_0x30bae0(0x16c)]=!0x1,this[_0x30bae0(0x19c)]=!0x1,this[_0x30bae0(0xd6)]=((_0x215b6b=(_0xdb2aee=_0x27da3d[_0x30bae0(0x170)])==null?void 0x0:_0xdb2aee[_0x30bae0(0x169)])==null?void 0x0:_0x215b6b[_0x30bae0(0xcf)])===_0x30bae0(0x132),this[_0x30bae0(0x12c)]=!((_0x5417b5=(_0x3330a3=this[_0x30bae0(0x15a)]['process'])==null?void 0x0:_0x3330a3[_0x30bae0(0xd2)])!=null&&_0x5417b5['node'])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x30bae0(0xfa)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x30bae0(0x18f)]=_0x30bae0(0x153),this[_0x30bae0(0x195)]=(this[_0x30bae0(0x12c)]?_0x30bae0(0x163):_0x30bae0(0x113))+this['_webSocketErrorDocsLink'];}async['getWebSocketClass'](){var _0x5afa9b=_0xfb4f89,_0x2d9f96,_0x565058;if(this[_0x5afa9b(0x13f)])return this['_WebSocketClass'];let _0x2e12c3;if(this[_0x5afa9b(0x12c)]||this[_0x5afa9b(0xd6)])_0x2e12c3=this[_0x5afa9b(0x15a)][_0x5afa9b(0xcd)];else{if((_0x2d9f96=this[_0x5afa9b(0x15a)]['process'])!=null&&_0x2d9f96[_0x5afa9b(0x145)])_0x2e12c3=(_0x565058=this['global'][_0x5afa9b(0x170)])==null?void 0x0:_0x565058[_0x5afa9b(0x145)];else try{let _0x55a8a7=await import(_0x5afa9b(0x14b));_0x2e12c3=(await import((await import(_0x5afa9b(0xec)))[_0x5afa9b(0x13b)](_0x55a8a7[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],_0x5afa9b(0x10b)))[_0x5afa9b(0x14e)]()))['default'];}catch{try{_0x2e12c3=require(require(_0x5afa9b(0x14b))[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],'ws'));}catch{throw new Error(_0x5afa9b(0x15c));}}}return this[_0x5afa9b(0x13f)]=_0x2e12c3,_0x2e12c3;}[_0xfb4f89(0x1ae)](){var _0x3cad60=_0xfb4f89;this[_0x3cad60(0x19c)]||this[_0x3cad60(0x16c)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this[_0x3cad60(0x134)]=!0x1,this[_0x3cad60(0x19c)]=!0x0,this[_0x3cad60(0xfa)]++,this[_0x3cad60(0x12d)]=new Promise((_0x343abd,_0xba088b)=>{var _0x11311a=_0x3cad60;this[_0x11311a(0x106)]()[_0x11311a(0xcb)](_0xb09450=>{var _0x43fada=_0x11311a;let _0x387749=new _0xb09450(_0x43fada(0x157)+(!this[_0x43fada(0x12c)]&&this[_0x43fada(0xe9)]?_0x43fada(0xe0):this[_0x43fada(0x17b)])+':'+this[_0x43fada(0x193)]);_0x387749['onerror']=()=>{var _0x453cb7=_0x43fada;this['_allowedToSend']=!0x1,this[_0x453cb7(0xf8)](_0x387749),this[_0x453cb7(0x18d)](),_0xba088b(new Error(_0x453cb7(0x160)));},_0x387749[_0x43fada(0x191)]=()=>{var _0xdaf47c=_0x43fada;this[_0xdaf47c(0x12c)]||_0x387749['_socket']&&_0x387749[_0xdaf47c(0x112)][_0xdaf47c(0xfc)]&&_0x387749[_0xdaf47c(0x112)]['unref'](),_0x343abd(_0x387749);},_0x387749[_0x43fada(0xe5)]=()=>{var _0xc56748=_0x43fada;this[_0xc56748(0x134)]=!0x0,this[_0xc56748(0xf8)](_0x387749),this[_0xc56748(0x18d)]();},_0x387749[_0x43fada(0xf5)]=_0x47ed3a=>{var _0x28f580=_0x43fada;try{if(!(_0x47ed3a!=null&&_0x47ed3a[_0x28f580(0x1b2)])||!this[_0x28f580(0x123)])return;let _0x479ee5=JSON[_0x28f580(0x19a)](_0x47ed3a['data']);this[_0x28f580(0x123)](_0x479ee5['method'],_0x479ee5[_0x28f580(0x115)],this[_0x28f580(0x15a)],this[_0x28f580(0x12c)]);}catch{}};})[_0x11311a(0xcb)](_0x13520=>(this['_connected']=!0x0,this['_connecting']=!0x1,this[_0x11311a(0x134)]=!0x1,this[_0x11311a(0xbc)]=!0x0,this[_0x11311a(0xfa)]=0x0,_0x13520))[_0x11311a(0x19d)](_0x18f1a9=>(this[_0x11311a(0x16c)]=!0x1,this[_0x11311a(0x19c)]=!0x1,console[_0x11311a(0x1aa)](_0x11311a(0x144)+this['_webSocketErrorDocsLink']),_0xba088b(new Error(_0x11311a(0x117)+(_0x18f1a9&&_0x18f1a9['message'])))));}));}['_disposeWebsocket'](_0x347259){var _0x55188d=_0xfb4f89;this[_0x55188d(0x16c)]=!0x1,this[_0x55188d(0x19c)]=!0x1;try{_0x347259['onclose']=null,_0x347259[_0x55188d(0xd5)]=null,_0x347259[_0x55188d(0x191)]=null;}catch{}try{_0x347259[_0x55188d(0xc3)]<0x2&&_0x347259[_0x55188d(0xd8)]();}catch{}}['_attemptToReconnectShortly'](){var _0x366627=_0xfb4f89;clearTimeout(this[_0x366627(0x177)]),!(this['_connectAttemptCount']>=this['_maxConnectAttemptCount'])&&(this[_0x366627(0x177)]=setTimeout(()=>{var _0x411b7b=_0x366627,_0x5e8f34;this[_0x411b7b(0x16c)]||this[_0x411b7b(0x19c)]||(this[_0x411b7b(0x1ae)](),(_0x5e8f34=this[_0x411b7b(0x12d)])==null||_0x5e8f34[_0x411b7b(0x19d)](()=>this[_0x411b7b(0x18d)]()));},0x1f4),this['_reconnectTimeout'][_0x366627(0xfc)]&&this[_0x366627(0x177)][_0x366627(0xfc)]());}async[_0xfb4f89(0x119)](_0x23f51e){var _0x337959=_0xfb4f89;try{if(!this['_allowedToSend'])return;this[_0x337959(0x134)]&&this[_0x337959(0x1ae)](),(await this['_ws'])['send'](JSON[_0x337959(0xf1)](_0x23f51e));}catch(_0x5b0fbc){console['warn'](this[_0x337959(0x195)]+':\\x20'+(_0x5b0fbc&&_0x5b0fbc[_0x337959(0x135)])),this[_0x337959(0xbc)]=!0x1,this[_0x337959(0x18d)]();}}};function q(_0x24daeb,_0xb6f519,_0x552a83,_0x4172cf,_0x76dbb7,_0x506843,_0xbf75ac,_0x3ac2c4=ie){var _0x5b9d64=_0xfb4f89;let _0x4b9373=_0x552a83[_0x5b9d64(0xe8)](',')[_0x5b9d64(0x13e)](_0x5dbfe4=>{var _0x66c71b=_0x5b9d64,_0x9e1668,_0x5a37d5,_0x13a0cc,_0x3e3cc6;try{if(!_0x24daeb[_0x66c71b(0xf0)]){let _0x280f70=((_0x5a37d5=(_0x9e1668=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x9e1668['versions'])==null?void 0x0:_0x5a37d5[_0x66c71b(0x182)])||((_0x3e3cc6=(_0x13a0cc=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x13a0cc[_0x66c71b(0x169)])==null?void 0x0:_0x3e3cc6[_0x66c71b(0xcf)])===_0x66c71b(0x132);(_0x76dbb7==='next.js'||_0x76dbb7===_0x66c71b(0x149)||_0x76dbb7===_0x66c71b(0x18a)||_0x76dbb7==='angular')&&(_0x76dbb7+=_0x280f70?_0x66c71b(0x1b1):_0x66c71b(0xbf)),_0x24daeb['_console_ninja_session']={'id':+new Date(),'tool':_0x76dbb7},_0xbf75ac&&_0x76dbb7&&!_0x280f70&&console[_0x66c71b(0xd9)](_0x66c71b(0xcc)+(_0x76dbb7[_0x66c71b(0x1a3)](0x0)[_0x66c71b(0x103)]()+_0x76dbb7[_0x66c71b(0x18b)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x66c71b(0x11a));}let _0x14c600=new Z(_0x24daeb,_0xb6f519,_0x5dbfe4,_0x4172cf,_0x506843,_0x3ac2c4);return _0x14c600[_0x66c71b(0x119)][_0x66c71b(0xdf)](_0x14c600);}catch(_0x9ef8db){return console[_0x66c71b(0x1aa)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0x9ef8db&&_0x9ef8db['message']),()=>{};}});return _0x418120=>_0x4b9373['forEach'](_0x28c9a5=>_0x28c9a5(_0x418120));}function _0x3ff9(_0xe67838,_0x6d1486){var _0x26ed68=_0x26ed();return _0x3ff9=function(_0x3ff920,_0x489329){_0x3ff920=_0x3ff920-0xbb;var _0x3995cc=_0x26ed68[_0x3ff920];return _0x3995cc;},_0x3ff9(_0xe67838,_0x6d1486);}function ie(_0x57727f,_0x4b37c7,_0x14dabd,_0x5b90a9){var _0x440899=_0xfb4f89;_0x5b90a9&&_0x57727f===_0x440899(0x158)&&_0x14dabd['location']['reload']();}function B(_0x26c9ac){var _0x47f085=_0xfb4f89,_0x3ecb7a,_0x47b516;let _0x220806=function(_0x3a020e,_0x53c69a){return _0x53c69a-_0x3a020e;},_0x2108c2;if(_0x26c9ac[_0x47f085(0x104)])_0x2108c2=function(){var _0x337423=_0x47f085;return _0x26c9ac[_0x337423(0x104)][_0x337423(0x11e)]();};else{if(_0x26c9ac[_0x47f085(0x170)]&&_0x26c9ac[_0x47f085(0x170)][_0x47f085(0x165)]&&((_0x47b516=(_0x3ecb7a=_0x26c9ac['process'])==null?void 0x0:_0x3ecb7a[_0x47f085(0x169)])==null?void 0x0:_0x47b516['NEXT_RUNTIME'])!=='edge')_0x2108c2=function(){return _0x26c9ac['process']['hrtime']();},_0x220806=function(_0x341fb3,_0x2c6618){return 0x3e8*(_0x2c6618[0x0]-_0x341fb3[0x0])+(_0x2c6618[0x1]-_0x341fb3[0x1])/0xf4240;};else try{let {performance:_0x416a52}=require(_0x47f085(0x179));_0x2108c2=function(){var _0x48150f=_0x47f085;return _0x416a52[_0x48150f(0x11e)]();};}catch{_0x2108c2=function(){return+new Date();};}}return{'elapsed':_0x220806,'timeStamp':_0x2108c2,'now':()=>Date['now']()};}function H(_0xcbdc20,_0x1ce242,_0x1b66cf){var _0xa13825=_0xfb4f89,_0x36e26f,_0x2d652c,_0x5e73f3,_0x21ac45,_0x17eb79;if(_0xcbdc20['_consoleNinjaAllowedToStart']!==void 0x0)return _0xcbdc20[_0xa13825(0x155)];let _0x40bb2b=((_0x2d652c=(_0x36e26f=_0xcbdc20['process'])==null?void 0x0:_0x36e26f[_0xa13825(0xd2)])==null?void 0x0:_0x2d652c[_0xa13825(0x182)])||((_0x21ac45=(_0x5e73f3=_0xcbdc20[_0xa13825(0x170)])==null?void 0x0:_0x5e73f3['env'])==null?void 0x0:_0x21ac45[_0xa13825(0xcf)])==='edge';function _0x3e8cd8(_0x3787d6){var _0x52530a=_0xa13825;if(_0x3787d6[_0x52530a(0x1b6)]('/')&&_0x3787d6[_0x52530a(0x148)]('/')){let _0x523815=new RegExp(_0x3787d6['slice'](0x1,-0x1));return _0x5ebf2a=>_0x523815[_0x52530a(0x178)](_0x5ebf2a);}else{if(_0x3787d6['includes']('*')||_0x3787d6[_0x52530a(0x16e)]('?')){let _0x185e95=new RegExp('^'+_0x3787d6['replace'](/\\./g,String[_0x52530a(0x1b8)](0x5c)+'.')['replace'](/\\*/g,'.*')['replace'](/\\?/g,'.')+String[_0x52530a(0x1b8)](0x24));return _0x175863=>_0x185e95[_0x52530a(0x178)](_0x175863);}else return _0x274ecc=>_0x274ecc===_0x3787d6;}}let _0x4b6171=_0x1ce242['map'](_0x3e8cd8);return _0xcbdc20['_consoleNinjaAllowedToStart']=_0x40bb2b||!_0x1ce242,!_0xcbdc20['_consoleNinjaAllowedToStart']&&((_0x17eb79=_0xcbdc20['location'])==null?void 0x0:_0x17eb79[_0xa13825(0x1a8)])&&(_0xcbdc20[_0xa13825(0x155)]=_0x4b6171[_0xa13825(0x14d)](_0x5c10f1=>_0x5c10f1(_0xcbdc20['location']['hostname']))),_0xcbdc20[_0xa13825(0x155)];}function X(_0x363d55,_0x1d9169,_0x46ca90,_0x46f67c){var _0x10ed28=_0xfb4f89;_0x363d55=_0x363d55,_0x1d9169=_0x1d9169,_0x46ca90=_0x46ca90,_0x46f67c=_0x46f67c;let _0x92ac1e=B(_0x363d55),_0x224ffb=_0x92ac1e[_0x10ed28(0x181)],_0x4ebef8=_0x92ac1e[_0x10ed28(0x11d)];class _0x328bde{constructor(){var _0x3c2acc=_0x10ed28;this[_0x3c2acc(0x136)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3c2acc(0x141)]=/^(0|[1-9][0-9]*)$/,this[_0x3c2acc(0xe6)]=/'([^\\\\']|\\\\')*'/,this[_0x3c2acc(0x167)]=_0x363d55[_0x3c2acc(0xc7)],this[_0x3c2acc(0x15d)]=_0x363d55['HTMLAllCollection'],this[_0x3c2acc(0x19f)]=Object[_0x3c2acc(0x1a4)],this['_getOwnPropertyNames']=Object[_0x3c2acc(0x129)],this[_0x3c2acc(0xed)]=_0x363d55[_0x3c2acc(0x16f)],this['_regExpToString']=RegExp['prototype'][_0x3c2acc(0x14e)],this[_0x3c2acc(0x130)]=Date[_0x3c2acc(0xe3)][_0x3c2acc(0x14e)];}[_0x10ed28(0xfd)](_0x5863e0,_0x563675,_0x25dde8,_0x4235ab){var _0x5eac97=_0x10ed28,_0x15d2ae=this,_0x48a558=_0x25dde8[_0x5eac97(0x1a2)];function _0x34c0d4(_0x2959d0,_0x3e333c,_0x6ec96e){var _0x29ad7b=_0x5eac97;_0x3e333c[_0x29ad7b(0x100)]=_0x29ad7b(0xff),_0x3e333c[_0x29ad7b(0x17c)]=_0x2959d0[_0x29ad7b(0x135)],_0x2a098b=_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)],_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)]=_0x3e333c,_0x15d2ae[_0x29ad7b(0x168)](_0x3e333c,_0x6ec96e);}try{_0x25dde8['level']++,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x171)](_0x563675);var _0x5e937d,_0x4d4837,_0x7a94ce,_0x12e437,_0x54273c=[],_0x3076d3=[],_0x4a27d5,_0x1f1aa0=this[_0x5eac97(0x13c)](_0x563675),_0x1fe8fc=_0x1f1aa0==='array',_0x1d9d33=!0x1,_0x1f7cfe=_0x1f1aa0===_0x5eac97(0x120),_0x3084ae=this[_0x5eac97(0x173)](_0x1f1aa0),_0xc35bc7=this[_0x5eac97(0x13d)](_0x1f1aa0),_0x48d9e1=_0x3084ae||_0xc35bc7,_0x590449={},_0x29fc28=0x0,_0x31b022=!0x1,_0x2a098b,_0x14e2a6=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x25dde8[_0x5eac97(0x159)]){if(_0x1fe8fc){if(_0x4d4837=_0x563675[_0x5eac97(0xf4)],_0x4d4837>_0x25dde8[_0x5eac97(0xc8)]){for(_0x7a94ce=0x0,_0x12e437=_0x25dde8['elements'],_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));_0x5863e0[_0x5eac97(0x142)]=!0x0;}else{for(_0x7a94ce=0x0,_0x12e437=_0x4d4837,_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));}_0x25dde8[_0x5eac97(0x110)]+=_0x3076d3[_0x5eac97(0xf4)];}if(!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&!_0x3084ae&&_0x1f1aa0!==_0x5eac97(0x137)&&_0x1f1aa0!==_0x5eac97(0x194)&&_0x1f1aa0!==_0x5eac97(0x17f)){var _0x3a0092=_0x4235ab[_0x5eac97(0x17d)]||_0x25dde8[_0x5eac97(0x17d)];if(this[_0x5eac97(0x15e)](_0x563675)?(_0x5e937d=0x0,_0x563675[_0x5eac97(0x10a)](function(_0x4b3319){var _0x3d2aa8=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x3d2aa8(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x3d2aa8(0x1a2)]&&_0x25dde8['autoExpandPropertyCount']>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}_0x3076d3[_0x3d2aa8(0x171)](_0x15d2ae[_0x3d2aa8(0xe4)](_0x54273c,_0x563675,_0x3d2aa8(0x19b),_0x5e937d++,_0x25dde8,function(_0x5e7ebe){return function(){return _0x5e7ebe;};}(_0x4b3319)));})):this[_0x5eac97(0x164)](_0x563675)&&_0x563675[_0x5eac97(0x10a)](function(_0x789f9,_0x40bfed){var _0x595515=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x595515(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x595515(0x1a2)]&&_0x25dde8[_0x595515(0x110)]>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}var _0x14d096=_0x40bfed[_0x595515(0x14e)]();_0x14d096[_0x595515(0xf4)]>0x64&&(_0x14d096=_0x14d096['slice'](0x0,0x64)+_0x595515(0x1ac)),_0x3076d3[_0x595515(0x171)](_0x15d2ae[_0x595515(0xe4)](_0x54273c,_0x563675,_0x595515(0xeb),_0x14d096,_0x25dde8,function(_0x8448c2){return function(){return _0x8448c2;};}(_0x789f9)));}),!_0x1d9d33){try{for(_0x4a27d5 in _0x563675)if(!(_0x1fe8fc&&_0x14e2a6['test'](_0x4a27d5))&&!this['_blacklistedProperty'](_0x563675,_0x4a27d5,_0x25dde8)){if(_0x29fc28++,_0x25dde8[_0x5eac97(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}catch{}if(_0x590449[_0x5eac97(0x176)]=!0x0,_0x1f7cfe&&(_0x590449['_p_name']=!0x0),!_0x31b022){var _0x18c0f5=[][_0x5eac97(0x14c)](this[_0x5eac97(0x151)](_0x563675))[_0x5eac97(0x14c)](this[_0x5eac97(0x12e)](_0x563675));for(_0x5e937d=0x0,_0x4d4837=_0x18c0f5['length'];_0x5e937d<_0x4d4837;_0x5e937d++)if(_0x4a27d5=_0x18c0f5[_0x5e937d],!(_0x1fe8fc&&_0x14e2a6[_0x5eac97(0x178)](_0x4a27d5[_0x5eac97(0x14e)]()))&&!this[_0x5eac97(0x161)](_0x563675,_0x4a27d5,_0x25dde8)&&!_0x590449[_0x5eac97(0xc5)+_0x4a27d5[_0x5eac97(0x14e)]()]){if(_0x29fc28++,_0x25dde8['autoExpandPropertyCount']++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}}}}if(_0x5863e0[_0x5eac97(0x100)]=_0x1f1aa0,_0x48d9e1?(_0x5863e0['value']=_0x563675[_0x5eac97(0xee)](),this[_0x5eac97(0x133)](_0x1f1aa0,_0x5863e0,_0x25dde8,_0x4235ab)):_0x1f1aa0===_0x5eac97(0xd7)?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0x130)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0x17f)?_0x5863e0[_0x5eac97(0x1a0)]=_0x563675[_0x5eac97(0x14e)]():_0x1f1aa0==='RegExp'?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0xe7)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0xc6)&&this[_0x5eac97(0xed)]?_0x5863e0[_0x5eac97(0x1a0)]=this['_Symbol'][_0x5eac97(0xe3)][_0x5eac97(0x14e)]['call'](_0x563675):!_0x25dde8['depth']&&!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&(delete _0x5863e0['value'],_0x5863e0['capped']=!0x0),_0x31b022&&(_0x5863e0[_0x5eac97(0x116)]=!0x0),_0x2a098b=_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)],_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)]=_0x5863e0,this[_0x5eac97(0x168)](_0x5863e0,_0x25dde8),_0x3076d3[_0x5eac97(0xf4)]){for(_0x5e937d=0x0,_0x4d4837=_0x3076d3[_0x5eac97(0xf4)];_0x5e937d<_0x4d4837;_0x5e937d++)_0x3076d3[_0x5e937d](_0x5e937d);}_0x54273c[_0x5eac97(0xf4)]&&(_0x5863e0[_0x5eac97(0x17d)]=_0x54273c);}catch(_0x5b6a62){_0x34c0d4(_0x5b6a62,_0x5863e0,_0x25dde8);}return this[_0x5eac97(0x14f)](_0x563675,_0x5863e0),this['_treeNodePropertiesAfterFullValue'](_0x5863e0,_0x25dde8),_0x25dde8['node'][_0x5eac97(0x19e)]=_0x2a098b,_0x25dde8['level']--,_0x25dde8[_0x5eac97(0x1a2)]=_0x48a558,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x162)](),_0x5863e0;}[_0x10ed28(0x12e)](_0x5e7e45){var _0x111dd1=_0x10ed28;return Object[_0x111dd1(0x190)]?Object[_0x111dd1(0x190)](_0x5e7e45):[];}[_0x10ed28(0x15e)](_0x5b69a9){var _0x55ac27=_0x10ed28;return!!(_0x5b69a9&&_0x363d55[_0x55ac27(0x19b)]&&this[_0x55ac27(0x152)](_0x5b69a9)===_0x55ac27(0x147)&&_0x5b69a9[_0x55ac27(0x10a)]);}['_blacklistedProperty'](_0x28b15f,_0x581dd6,_0x32226c){var _0x247a74=_0x10ed28;return _0x32226c[_0x247a74(0xef)]?typeof _0x28b15f[_0x581dd6]==_0x247a74(0x120):!0x1;}[_0x10ed28(0x13c)](_0x352136){var _0x47498e=_0x10ed28,_0x456822='';return _0x456822=typeof _0x352136,_0x456822===_0x47498e(0x143)?this[_0x47498e(0x152)](_0x352136)===_0x47498e(0x180)?_0x456822=_0x47498e(0x1a7):this[_0x47498e(0x152)](_0x352136)===_0x47498e(0xdd)?_0x456822='date':this['_objectToString'](_0x352136)===_0x47498e(0xbb)?_0x456822=_0x47498e(0x17f):_0x352136===null?_0x456822=_0x47498e(0x1b4):_0x352136[_0x47498e(0x10e)]&&(_0x456822=_0x352136[_0x47498e(0x10e)][_0x47498e(0xc1)]||_0x456822):_0x456822==='undefined'&&this[_0x47498e(0x15d)]&&_0x352136 instanceof this[_0x47498e(0x15d)]&&(_0x456822=_0x47498e(0xc0)),_0x456822;}['_objectToString'](_0x1de66c){var _0x473e65=_0x10ed28;return Object[_0x473e65(0xe3)]['toString'][_0x473e65(0x11c)](_0x1de66c);}[_0x10ed28(0x173)](_0x1b731a){var _0xb60b14=_0x10ed28;return _0x1b731a===_0xb60b14(0xe1)||_0x1b731a===_0xb60b14(0x102)||_0x1b731a===_0xb60b14(0xde);}['_isPrimitiveWrapperType'](_0x331b09){var _0x16d7d9=_0x10ed28;return _0x331b09===_0x16d7d9(0x154)||_0x331b09===_0x16d7d9(0x137)||_0x331b09===_0x16d7d9(0x131);}[_0x10ed28(0xe4)](_0x29c99b,_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49){var _0x458f4f=this;return function(_0x530f99){var _0x374746=_0x3ff9,_0x60df83=_0x178327[_0x374746(0x182)][_0x374746(0x19e)],_0x25a209=_0x178327[_0x374746(0x182)][_0x374746(0x1a9)],_0x290e99=_0x178327[_0x374746(0x182)]['parent'];_0x178327[_0x374746(0x182)][_0x374746(0xce)]=_0x60df83,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=typeof _0x3076bc==_0x374746(0xde)?_0x3076bc:_0x530f99,_0x29c99b[_0x374746(0x171)](_0x458f4f[_0x374746(0x1b5)](_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49)),_0x178327['node'][_0x374746(0xce)]=_0x290e99,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=_0x25a209;};}[_0x10ed28(0xd0)](_0x83b0e,_0x4dbfb7,_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415){var _0x4ff80c=_0x10ed28,_0x3c23d4=this;return _0x4dbfb7[_0x4ff80c(0xc5)+_0xf742cb['toString']()]=!0x0,function(_0x3abd65){var _0x4ac95e=_0x4ff80c,_0x2c9c3f=_0x5e0402[_0x4ac95e(0x182)]['current'],_0x2635bd=_0x5e0402[_0x4ac95e(0x182)][_0x4ac95e(0x1a9)],_0xc2e0d=_0x5e0402['node'][_0x4ac95e(0xce)];_0x5e0402['node'][_0x4ac95e(0xce)]=_0x2c9c3f,_0x5e0402[_0x4ac95e(0x182)]['index']=_0x3abd65,_0x83b0e[_0x4ac95e(0x171)](_0x3c23d4[_0x4ac95e(0x1b5)](_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415)),_0x5e0402['node'][_0x4ac95e(0xce)]=_0xc2e0d,_0x5e0402['node'][_0x4ac95e(0x1a9)]=_0x2635bd;};}[_0x10ed28(0x1b5)](_0xf38ac3,_0x5bdcfd,_0x290e62,_0x7990cf,_0x48e604){var _0x1aa57e=_0x10ed28,_0x2bff8c=this;_0x48e604||(_0x48e604=function(_0x43ba8f,_0x597d26){return _0x43ba8f[_0x597d26];});var _0x48a20e=_0x290e62[_0x1aa57e(0x14e)](),_0xd6873d=_0x7990cf[_0x1aa57e(0x138)]||{},_0x7426f3=_0x7990cf[_0x1aa57e(0x159)],_0x3f3199=_0x7990cf[_0x1aa57e(0x1a5)];try{var _0x18b702=this['_isMap'](_0xf38ac3),_0x5a1ae4=_0x48a20e;_0x18b702&&_0x5a1ae4[0x0]==='\\x27'&&(_0x5a1ae4=_0x5a1ae4['substr'](0x1,_0x5a1ae4[_0x1aa57e(0xf4)]-0x2));var _0x6af1a1=_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d['_p_'+_0x5a1ae4];_0x6af1a1&&(_0x7990cf[_0x1aa57e(0x159)]=_0x7990cf[_0x1aa57e(0x159)]+0x1),_0x7990cf[_0x1aa57e(0x1a5)]=!!_0x6af1a1;var _0x2333d7=typeof _0x290e62==_0x1aa57e(0xc6),_0x22cba0={'name':_0x2333d7||_0x18b702?_0x48a20e:this['_propertyName'](_0x48a20e)};if(_0x2333d7&&(_0x22cba0[_0x1aa57e(0xc6)]=!0x0),!(_0x5bdcfd===_0x1aa57e(0x1a7)||_0x5bdcfd===_0x1aa57e(0x12f))){var _0x156b6d=this[_0x1aa57e(0x19f)](_0xf38ac3,_0x290e62);if(_0x156b6d&&(_0x156b6d['set']&&(_0x22cba0['setter']=!0x0),_0x156b6d[_0x1aa57e(0x107)]&&!_0x6af1a1&&!_0x7990cf[_0x1aa57e(0x198)]))return _0x22cba0['getter']=!0x0,this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x36fd25;try{_0x36fd25=_0x48e604(_0xf38ac3,_0x290e62);}catch(_0x210082){return _0x22cba0={'name':_0x48a20e,'type':_0x1aa57e(0xff),'error':_0x210082[_0x1aa57e(0x135)]},this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x15c01e=this[_0x1aa57e(0x13c)](_0x36fd25),_0x1aab99=this[_0x1aa57e(0x173)](_0x15c01e);if(_0x22cba0['type']=_0x15c01e,_0x1aab99)this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x4f8d75=_0x1aa57e;_0x22cba0[_0x4f8d75(0x1a0)]=_0x36fd25['valueOf'](),!_0x6af1a1&&_0x2bff8c[_0x4f8d75(0x133)](_0x15c01e,_0x22cba0,_0x7990cf,{});});else{var _0x335f59=_0x7990cf[_0x1aa57e(0x1a2)]&&_0x7990cf['level']<_0x7990cf['autoExpandMaxDepth']&&_0x7990cf[_0x1aa57e(0x10d)][_0x1aa57e(0xd4)](_0x36fd25)<0x0&&_0x15c01e!==_0x1aa57e(0x120)&&_0x7990cf[_0x1aa57e(0x110)]<_0x7990cf['autoExpandLimit'];_0x335f59||_0x7990cf[_0x1aa57e(0x188)]<_0x7426f3||_0x6af1a1?(this['serialize'](_0x22cba0,_0x36fd25,_0x7990cf,_0x6af1a1||{}),this[_0x1aa57e(0x14f)](_0x36fd25,_0x22cba0)):this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x53d000=_0x1aa57e;_0x15c01e===_0x53d000(0x1b4)||_0x15c01e===_0x53d000(0xc7)||(delete _0x22cba0[_0x53d000(0x1a0)],_0x22cba0[_0x53d000(0x183)]=!0x0);});}return _0x22cba0;}finally{_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d,_0x7990cf[_0x1aa57e(0x159)]=_0x7426f3,_0x7990cf[_0x1aa57e(0x1a5)]=_0x3f3199;}}['_capIfString'](_0x96020c,_0x4e4cc3,_0xaeab36,_0x1e5657){var _0x2356e4=_0x10ed28,_0x2bbfa6=_0x1e5657['strLength']||_0xaeab36[_0x2356e4(0x108)];if((_0x96020c===_0x2356e4(0x102)||_0x96020c===_0x2356e4(0x137))&&_0x4e4cc3['value']){let _0x2e0d21=_0x4e4cc3['value'][_0x2356e4(0xf4)];_0xaeab36['allStrLength']+=_0x2e0d21,_0xaeab36['allStrLength']>_0xaeab36[_0x2356e4(0xf3)]?(_0x4e4cc3[_0x2356e4(0x183)]='',delete _0x4e4cc3['value']):_0x2e0d21>_0x2bbfa6&&(_0x4e4cc3[_0x2356e4(0x183)]=_0x4e4cc3[_0x2356e4(0x1a0)][_0x2356e4(0x18b)](0x0,_0x2bbfa6),delete _0x4e4cc3[_0x2356e4(0x1a0)]);}}[_0x10ed28(0x164)](_0x3efef3){var _0x3488ac=_0x10ed28;return!!(_0x3efef3&&_0x363d55[_0x3488ac(0xeb)]&&this[_0x3488ac(0x152)](_0x3efef3)===_0x3488ac(0x1af)&&_0x3efef3[_0x3488ac(0x10a)]);}[_0x10ed28(0xc4)](_0x11c35b){var _0x23453d=_0x10ed28;if(_0x11c35b[_0x23453d(0xf6)](/^\\d+$/))return _0x11c35b;var _0x4f6a03;try{_0x4f6a03=JSON[_0x23453d(0xf1)](''+_0x11c35b);}catch{_0x4f6a03='\\x22'+this[_0x23453d(0x152)](_0x11c35b)+'\\x22';}return _0x4f6a03[_0x23453d(0xf6)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x4f6a03=_0x4f6a03['substr'](0x1,_0x4f6a03['length']-0x2):_0x4f6a03=_0x4f6a03[_0x23453d(0x166)](/'/g,'\\x5c\\x27')['replace'](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x4f6a03;}[_0x10ed28(0x17a)](_0x55cc47,_0x11bab3,_0x41718f,_0x163b6a){var _0x47c902=_0x10ed28;this[_0x47c902(0x168)](_0x55cc47,_0x11bab3),_0x163b6a&&_0x163b6a(),this['_additionalMetadata'](_0x41718f,_0x55cc47),this['_treeNodePropertiesAfterFullValue'](_0x55cc47,_0x11bab3);}[_0x10ed28(0x168)](_0x3f8b3a,_0x4d5884){var _0x49c69e=_0x10ed28;this[_0x49c69e(0x12b)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0xca)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0x18e)](_0x3f8b3a,_0x4d5884),this['_setNodePermissions'](_0x3f8b3a,_0x4d5884);}[_0x10ed28(0x12b)](_0x24d5f8,_0x14eaea){}[_0x10ed28(0xca)](_0x576a32,_0x687c5){}[_0x10ed28(0xbd)](_0x489c9e,_0xf76957){}[_0x10ed28(0x140)](_0x40bd6c){return _0x40bd6c===this['_undefined'];}[_0x10ed28(0xf2)](_0x59dbd7,_0x39b993){var _0x4aab34=_0x10ed28;this[_0x4aab34(0xbd)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x196)](_0x59dbd7),_0x39b993[_0x4aab34(0xf9)]&&this['_sortProps'](_0x59dbd7),this[_0x4aab34(0x15f)](_0x59dbd7,_0x39b993),this[_0x4aab34(0xe2)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x111)](_0x59dbd7);}[_0x10ed28(0x14f)](_0x251965,_0x9b93cd){var _0x83cbd4=_0x10ed28;let _0xcd393f;try{_0x363d55[_0x83cbd4(0x174)]&&(_0xcd393f=_0x363d55[_0x83cbd4(0x174)]['error'],_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=function(){}),_0x251965&&typeof _0x251965[_0x83cbd4(0xf4)]==_0x83cbd4(0xde)&&(_0x9b93cd[_0x83cbd4(0xf4)]=_0x251965[_0x83cbd4(0xf4)]);}catch{}finally{_0xcd393f&&(_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=_0xcd393f);}if(_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0xde)||_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x131)){if(isNaN(_0x9b93cd[_0x83cbd4(0x1a0)]))_0x9b93cd['nan']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];else switch(_0x9b93cd[_0x83cbd4(0x1a0)]){case Number[_0x83cbd4(0x192)]:_0x9b93cd[_0x83cbd4(0x175)]=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case Number[_0x83cbd4(0x185)]:_0x9b93cd['negativeInfinity']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case 0x0:this[_0x83cbd4(0x101)](_0x9b93cd[_0x83cbd4(0x1a0)])&&(_0x9b93cd[_0x83cbd4(0x124)]=!0x0);break;}}else _0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x120)&&typeof _0x251965[_0x83cbd4(0xc1)]==_0x83cbd4(0x102)&&_0x251965[_0x83cbd4(0xc1)]&&_0x9b93cd[_0x83cbd4(0xc1)]&&_0x251965['name']!==_0x9b93cd[_0x83cbd4(0xc1)]&&(_0x9b93cd[_0x83cbd4(0xda)]=_0x251965['name']);}[_0x10ed28(0x101)](_0xdc72f6){var _0x396f32=_0x10ed28;return 0x1/_0xdc72f6===Number[_0x396f32(0x185)];}[_0x10ed28(0x114)](_0xc49f59){var _0x15d31a=_0x10ed28;!_0xc49f59[_0x15d31a(0x17d)]||!_0xc49f59[_0x15d31a(0x17d)]['length']||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x1a7)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0xeb)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x19b)||_0xc49f59[_0x15d31a(0x17d)][_0x15d31a(0x17e)](function(_0x521a66,_0x3037b9){var _0x19b3c8=_0x15d31a,_0x30740f=_0x521a66[_0x19b3c8(0xc1)][_0x19b3c8(0x199)](),_0x377ff1=_0x3037b9[_0x19b3c8(0xc1)]['toLowerCase']();return _0x30740f<_0x377ff1?-0x1:_0x30740f>_0x377ff1?0x1:0x0;});}['_addFunctionsNode'](_0x24f146,_0x304fda){var _0x2a0f15=_0x10ed28;if(!(_0x304fda[_0x2a0f15(0xef)]||!_0x24f146[_0x2a0f15(0x17d)]||!_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)])){for(var _0x14c9f5=[],_0x4d9ee4=[],_0x488f79=0x0,_0x101a34=_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)];_0x488f79<_0x101a34;_0x488f79++){var _0x19651f=_0x24f146[_0x2a0f15(0x17d)][_0x488f79];_0x19651f[_0x2a0f15(0x100)]===_0x2a0f15(0x120)?_0x14c9f5[_0x2a0f15(0x171)](_0x19651f):_0x4d9ee4['push'](_0x19651f);}if(!(!_0x4d9ee4[_0x2a0f15(0xf4)]||_0x14c9f5['length']<=0x1)){_0x24f146['props']=_0x4d9ee4;var _0x230bec={'functionsNode':!0x0,'props':_0x14c9f5};this[_0x2a0f15(0x12b)](_0x230bec,_0x304fda),this[_0x2a0f15(0xbd)](_0x230bec,_0x304fda),this[_0x2a0f15(0x196)](_0x230bec),this[_0x2a0f15(0xfe)](_0x230bec,_0x304fda),_0x230bec['id']+='\\x20f',_0x24f146['props'][_0x2a0f15(0x1ad)](_0x230bec);}}}[_0x10ed28(0xe2)](_0x468e99,_0x4388f0){}['_setNodeExpandableState'](_0x5eb717){}[_0x10ed28(0x121)](_0x38c05c){var _0x1aee1a=_0x10ed28;return Array[_0x1aee1a(0x172)](_0x38c05c)||typeof _0x38c05c==_0x1aee1a(0x143)&&this[_0x1aee1a(0x152)](_0x38c05c)===_0x1aee1a(0x180);}['_setNodePermissions'](_0x4eefa0,_0x1705a9){}[_0x10ed28(0x111)](_0x516906){var _0x236906=_0x10ed28;delete _0x516906[_0x236906(0x10f)],delete _0x516906['_hasSetOnItsPath'],delete _0x516906[_0x236906(0x125)];}[_0x10ed28(0x18e)](_0x23c1c2,_0x29a21b){}}let _0x4e7d7d=new _0x328bde(),_0x3886ea={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x30c557={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x586d36(_0x54f3be,_0x181b1a,_0x2b7eb5,_0x1dd634,_0x49c07c,_0x397446){var _0x2f18dd=_0x10ed28;let _0x4e7f72,_0x1de5a1;try{_0x1de5a1=_0x4ebef8(),_0x4e7f72=_0x46ca90[_0x181b1a],!_0x4e7f72||_0x1de5a1-_0x4e7f72['ts']>0x1f4&&_0x4e7f72[_0x2f18dd(0x118)]&&_0x4e7f72['time']/_0x4e7f72[_0x2f18dd(0x118)]<0x64?(_0x46ca90[_0x181b1a]=_0x4e7f72={'count':0x0,'time':0x0,'ts':_0x1de5a1},_0x46ca90[_0x2f18dd(0x128)]={}):_0x1de5a1-_0x46ca90[_0x2f18dd(0x128)]['ts']>0x32&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]/_0x46ca90[_0x2f18dd(0x128)]['count']<0x64&&(_0x46ca90[_0x2f18dd(0x128)]={});let _0x4ddd3d=[],_0x2c1b45=_0x4e7f72[_0x2f18dd(0x184)]||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]?_0x30c557:_0x3886ea,_0x398af5=_0x30c84c=>{var _0x988e3b=_0x2f18dd;let _0x14b3dc={};return _0x14b3dc[_0x988e3b(0x17d)]=_0x30c84c['props'],_0x14b3dc[_0x988e3b(0xc8)]=_0x30c84c['elements'],_0x14b3dc[_0x988e3b(0x108)]=_0x30c84c[_0x988e3b(0x108)],_0x14b3dc[_0x988e3b(0xf3)]=_0x30c84c[_0x988e3b(0xf3)],_0x14b3dc[_0x988e3b(0x146)]=_0x30c84c[_0x988e3b(0x146)],_0x14b3dc[_0x988e3b(0x1b7)]=_0x30c84c[_0x988e3b(0x1b7)],_0x14b3dc[_0x988e3b(0xf9)]=!0x1,_0x14b3dc[_0x988e3b(0xef)]=!_0x1d9169,_0x14b3dc[_0x988e3b(0x159)]=0x1,_0x14b3dc[_0x988e3b(0x188)]=0x0,_0x14b3dc[_0x988e3b(0x105)]=_0x988e3b(0xbe),_0x14b3dc[_0x988e3b(0x1b9)]=_0x988e3b(0x16b),_0x14b3dc[_0x988e3b(0x1a2)]=!0x0,_0x14b3dc[_0x988e3b(0x10d)]=[],_0x14b3dc[_0x988e3b(0x110)]=0x0,_0x14b3dc[_0x988e3b(0x198)]=!0x0,_0x14b3dc[_0x988e3b(0xdb)]=0x0,_0x14b3dc[_0x988e3b(0x182)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x14b3dc;};for(var _0x4e8b46=0x0;_0x4e8b46<_0x49c07c[_0x2f18dd(0xf4)];_0x4e8b46++)_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d[_0x2f18dd(0xfd)]({'timeNode':_0x54f3be===_0x2f18dd(0x1a1)||void 0x0},_0x49c07c[_0x4e8b46],_0x398af5(_0x2c1b45),{}));if(_0x54f3be===_0x2f18dd(0x1ab)||_0x54f3be===_0x2f18dd(0x17c)){let _0x38886c=Error[_0x2f18dd(0x11f)];try{Error['stackTraceLimit']=0x1/0x0,_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d['serialize']({'stackNode':!0x0},new Error()[_0x2f18dd(0x1b0)],_0x398af5(_0x2c1b45),{'strLength':0x1/0x0}));}finally{Error[_0x2f18dd(0x11f)]=_0x38886c;}}return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':_0x4ddd3d,'id':_0x181b1a,'context':_0x397446}]};}catch(_0x14cd18){return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':[{'type':_0x2f18dd(0xff),'error':_0x14cd18&&_0x14cd18[_0x2f18dd(0x135)]}],'id':_0x181b1a,'context':_0x397446}]};}finally{try{if(_0x4e7f72&&_0x1de5a1){let _0xa0025=_0x4ebef8();_0x4e7f72['count']++,_0x4e7f72['time']+=_0x224ffb(_0x1de5a1,_0xa0025),_0x4e7f72['ts']=_0xa0025,_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]++,_0x46ca90['hits'][_0x2f18dd(0x1a1)]+=_0x224ffb(_0x1de5a1,_0xa0025),_0x46ca90[_0x2f18dd(0x128)]['ts']=_0xa0025,(_0x4e7f72[_0x2f18dd(0x118)]>0x32||_0x4e7f72['time']>0x64)&&(_0x4e7f72[_0x2f18dd(0x184)]=!0x0),(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]>0x3e8||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]>0x12c)&&(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]=!0x0);}}catch{}}}return _0x586d36;}((_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x4b0ac8,_0x5246af,_0x42bfac,_0x4ca82f,_0x123580,_0x18969d)=>{var _0x407242=_0xfb4f89;if(_0x17891e[_0x407242(0x150)])return _0x17891e[_0x407242(0x150)];if(!H(_0x17891e,_0x42bfac,_0x479ca2))return _0x17891e['_console_ninja']={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x17891e[_0x407242(0x150)];let _0x37610e=B(_0x17891e),_0x3437ca=_0x37610e['elapsed'],_0x25b5e5=_0x37610e['timeStamp'],_0x4bf76b=_0x37610e[_0x407242(0x11e)],_0x125c7d={'hits':{},'ts':{}},_0x15b46a=X(_0x17891e,_0x4ca82f,_0x125c7d,_0x4b0ac8),_0xd5486b=_0x4d30e1=>{_0x125c7d['ts'][_0x4d30e1]=_0x25b5e5();},_0x2d07e6=(_0x5bc355,_0xe34fe)=>{var _0x2339ce=_0x407242;let _0x59fb6a=_0x125c7d['ts'][_0xe34fe];if(delete _0x125c7d['ts'][_0xe34fe],_0x59fb6a){let _0x5921a6=_0x3437ca(_0x59fb6a,_0x25b5e5());_0x2cf290(_0x15b46a(_0x2339ce(0x1a1),_0x5bc355,_0x4bf76b(),_0x253536,[_0x5921a6],_0xe34fe));}},_0x49bcec=_0x43e72f=>{var _0x2e47bf=_0x407242,_0x55d95d;return _0x479ca2===_0x2e47bf(0x139)&&_0x17891e['origin']&&((_0x55d95d=_0x43e72f==null?void 0x0:_0x43e72f['args'])==null?void 0x0:_0x55d95d['length'])&&(_0x43e72f['args'][0x0][_0x2e47bf(0x189)]=_0x17891e['origin']),_0x43e72f;};_0x17891e[_0x407242(0x150)]={'consoleLog':(_0x31c92e,_0x24488d)=>{var _0x93e67e=_0x407242;_0x17891e['console']['log'][_0x93e67e(0xc1)]!=='disabledLog'&&_0x2cf290(_0x15b46a(_0x93e67e(0xd9),_0x31c92e,_0x4bf76b(),_0x253536,_0x24488d));},'consoleTrace':(_0x3b66a7,_0xba880e)=>{var _0x567e13=_0x407242,_0x31716e,_0x5a9c60;_0x17891e[_0x567e13(0x174)]['log'][_0x567e13(0xc1)]!==_0x567e13(0xc2)&&((_0x5a9c60=(_0x31716e=_0x17891e[_0x567e13(0x170)])==null?void 0x0:_0x31716e[_0x567e13(0xd2)])!=null&&_0x5a9c60[_0x567e13(0x182)]&&(_0x17891e[_0x567e13(0x18c)]=!0x0),_0x2cf290(_0x49bcec(_0x15b46a(_0x567e13(0x1ab),_0x3b66a7,_0x4bf76b(),_0x253536,_0xba880e))));},'consoleError':(_0x3fa736,_0x121a3b)=>{var _0x12dfb8=_0x407242;_0x17891e[_0x12dfb8(0x18c)]=!0x0,_0x2cf290(_0x49bcec(_0x15b46a('error',_0x3fa736,_0x4bf76b(),_0x253536,_0x121a3b)));},'consoleTime':_0x1848a7=>{_0xd5486b(_0x1848a7);},'consoleTimeEnd':(_0x31ae65,_0x3d104a)=>{_0x2d07e6(_0x3d104a,_0x31ae65);},'autoLog':(_0x37808,_0x2ad558)=>{var _0x22938b=_0x407242;_0x2cf290(_0x15b46a(_0x22938b(0xd9),_0x2ad558,_0x4bf76b(),_0x253536,[_0x37808]));},'autoLogMany':(_0x161d7e,_0x43dedb)=>{var _0x379506=_0x407242;_0x2cf290(_0x15b46a(_0x379506(0xd9),_0x161d7e,_0x4bf76b(),_0x253536,_0x43dedb));},'autoTrace':(_0x1217e6,_0x446707)=>{var _0x3a5252=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x3a5252(0x1ab),_0x446707,_0x4bf76b(),_0x253536,[_0x1217e6])));},'autoTraceMany':(_0x5b77c4,_0x4fc43a)=>{var _0x5bfbf2=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x5bfbf2(0x1ab),_0x5b77c4,_0x4bf76b(),_0x253536,_0x4fc43a)));},'autoTime':(_0x24183a,_0x442759,_0x296a4c)=>{_0xd5486b(_0x296a4c);},'autoTimeEnd':(_0x2927a9,_0x243d30,_0x5bd63b)=>{_0x2d07e6(_0x243d30,_0x5bd63b);},'coverage':_0x519fc2=>{var _0x452554=_0x407242;_0x2cf290({'method':_0x452554(0x156),'version':_0x4b0ac8,'args':[{'id':_0x519fc2}]});}};let _0x2cf290=q(_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x123580,_0x18969d),_0x253536=_0x17891e[_0x407242(0xf0)];return _0x17891e['_console_ninja'];})(globalThis,_0xfb4f89(0x10c),'60591',_0xfb4f89(0xdc),'webpack',_0xfb4f89(0xd3),'1727950005016',_0xfb4f89(0x1a6),_0xfb4f89(0xfb),_0xfb4f89(0x197),_0xfb4f89(0x13a));")}catch(e){}}function r(e,...t){try{c().consoleLog(e,t)}catch(e){}return t}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(e,t,x)=>{x.r(t),x.d(t,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>Z,setAnalyticsCollectionEnabled:()=>q,setConsent:()=>J,setCurrentScreen:()=>V,setDefaultEventParameters:()=>K,setUserId:()=>Y,setUserProperties:()=>$,settings:()=>R});var a=x("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),i=x("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),s=x("./node_modules/@firebase/util/dist/index.esm2017.js"),_=x("./node_modules/@firebase/component/dist/esm/index.esm2017.js");x("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const n="analytics",o="firebase_id",c="origin",r=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",l="https://www.googletagmanager.com/gtag/js",h=new i.Logger("@firebase/analytics"),f={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},b=new s.ErrorFactory("analytics","Analytics",f);function u(e){if(!e.startsWith(l)){const t=b.create("invalid-gtag-resource",{gtagURL:e});return h.warn(t.message),""}return e}function p(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}function g(e,t){const x=function(e,t){let x;return window.trustedTypes&&(x=window.trustedTypes.createPolicy(e,t)),x}("firebase-js-sdk-policy",{createScriptURL:u}),a=document.createElement("script"),i=`${l}?l=${e}&id=${t}`;a.src=x?null==x?void 0:x.createScriptURL(i):i,a.async=!0,document.head.appendChild(a)}function m(e,t,x,a){return async function(i,...s){try{if("event"===i){const[a,i]=s;await async function(e,t,x,a,i){try{let s=[];if(i&&i.send_to){let e=i.send_to;Array.isArray(e)||(e=[e]);const a=await p(x);for(const x of e){const e=a.find((e=>e.measurementId===x)),i=e&&t[e.appId];if(!i){s=[];break}s.push(i)}}0===s.length&&(s=Object.values(t)),await Promise.all(s),e("event",a,i||{})}catch(e){h.error(e)}}(e,t,x,a,i)}else if("config"===i){const[i,_]=s;await async function(e,t,x,a,i,s){const _=a[i];try{if(_)await t[_];else{const e=(await p(x)).find((e=>e.measurementId===i));e&&await t[e.appId]}}catch(e){h.error(e)}e("config",i,s)}(e,t,x,a,i,_)}else if("consent"===i){const[t]=s;e("consent","update",t)}else if("get"===i){const[t,x,a]=s;e("get",t,x,a)}else if("set"===i){const[t]=s;e("set",t)}else e(i,...s)}catch(e){h.error(e)}}}const v=30;const w=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function S(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function y(e,t=w,x){const{appId:a,apiKey:i,measurementId:s}=e.options;if(!a)throw b.create("no-app-id");if(!i){if(s)return{measurementId:s,appId:a};throw b.create("no-api-key")}const _=t.getThrottleMetadata(a)||{backoffCount:0,throttleEndTimeMillis:Date.now()},n=new E;return setTimeout((async()=>{n.abort()}),void 0!==x?x:r),I({appId:a,apiKey:i,measurementId:s},_,n,t)}async function I(e,{throttleEndTimeMillis:t,backoffCount:x},a,i=w){var _;const{appId:n,measurementId:o}=e;try{await function(e,t){return new Promise(((x,a)=>{const i=Math.max(t-Date.now(),0),s=setTimeout(x,i);e.addEventListener((()=>{clearTimeout(s),a(b.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(a,t)}catch(e){if(o)return h.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${o} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:n,measurementId:o};throw e}try{const t=await async function(e){var t;const{appId:x,apiKey:a}=e,i={method:"GET",headers:S(a)},s=d.replace("{app-id}",x),_=await fetch(s,i);if(200!==_.status&&304!==_.status){let e="";try{const x=await _.json();(null===(t=x.error)||void 0===t?void 0:t.message)&&(e=x.error.message)}catch(e){}throw b.create("config-fetch-failed",{httpStatus:_.status,responseMessage:e})}return _.json()}(e);return i.deleteThrottleMetadata(n),t}catch(t){const c=t;if(!function(e){if(!(e instanceof s.FirebaseError&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(c)){if(i.deleteThrottleMetadata(n),o)return h.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${o} provided in the "measurementId" field in the local Firebase config. [${null==c?void 0:c.message}]`),{appId:n,measurementId:o};throw t}const r=503===Number(null===(_=null==c?void 0:c.customData)||void 0===_?void 0:_.httpStatus)?(0,s.calculateBackoffMillis)(x,i.intervalMillis,v):(0,s.calculateBackoffMillis)(x,i.intervalMillis),d={throttleEndTimeMillis:Date.now()+r,backoffCount:x+1};return i.setThrottleMetadata(n,d),h.debug(`Calling attemptFetch again in ${r} millis`),I(e,d,a,i)}}class E{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let T,L;function P(e){L=e}function A(e){T=e}async function C(e,t,x,a,i,_,n){var r;const d=y(e);d.then((t=>{x[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&h.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>h.error(e))),t.push(d);const f=async function(){if(!(0,s.isIndexedDBAvailable)())return h.warn(b.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,s.validateIndexedDBOpenable)()}catch(e){return h.warn(b.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?a.getId():void 0)),[u,p]=await Promise.all([d,f]);(function(e){const t=window.document.getElementsByTagName("script");for(const x of Object.values(t))if(x.src&&x.src.includes(l)&&x.src.includes(e))return x;return null})(_)||g(_,u.measurementId),L&&(i("consent","default",L),P(void 0)),i("js",new Date);const m=null!==(r=null==n?void 0:n.config)&&void 0!==r?r:{};return m[c]="firebase",m.update=!0,null!=p&&(m[o]=p),i("config",u.measurementId,m),T&&(i("set",T),A(void 0)),u.measurementId}class k{constructor(e){this.app=e}_delete(){return delete N[this.app.options.appId],Promise.resolve()}}let N={},D=[];const B={};let O,M,z="dataLayer",j="gtag",F=!1;function R(e){if(F)throw b.create("already-initialized");e.dataLayerName&&(z=e.dataLayerName),e.gtagName&&(j=e.gtagName)}function U(e,t,x){!function(){const e=[];if((0,s.isBrowserExtension)()&&e.push("This is a browser extension environment."),(0,s.areCookiesEnabled)()||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),x=b.create("invalid-analytics-context",{errorInfo:t});h.warn(x.message)}}();const a=e.options.appId;if(!a)throw b.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw b.create("no-api-key");h.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=N[a])throw b.create("already-exists",{id:a});if(!F){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(z);const{wrappedGtag:e,gtagCore:t}=function(e,t,x,a,i){let s=function(...e){window[a].push(arguments)};return window[i]&&"function"==typeof window[i]&&(s=window[i]),window[i]=m(s,e,t,x),{gtagCore:s,wrappedGtag:window[i]}}(N,D,B,z,j);M=e,O=t,F=!0}N[a]=C(e,D,B,t,O,z,x);return new k(e)}function H(e=(0,a.getApp)()){e=(0,s.getModularInstance)(e);const t=(0,a._getProvider)(e,n);return t.isInitialized()?t.getImmediate():G(e)}function G(e,t={}){const x=(0,a._getProvider)(e,n);if(x.isInitialized()){const e=x.getImmediate();if((0,s.deepEqual)(t,x.getOptions()))return e;throw b.create("already-initialized")}return x.initialize({options:t})}async function W(){if((0,s.isBrowserExtension)())return!1;if(!(0,s.areCookiesEnabled)())return!1;if(!(0,s.isIndexedDBAvailable)())return!1;try{return await(0,s.validateIndexedDBOpenable)()}catch(e){return!1}}function V(e,t,x){e=(0,s.getModularInstance)(e),async function(e,t,x,a){if(a&&a.global)return e("set",{screen_name:x}),Promise.resolve();e("config",await t,{update:!0,screen_name:x})}(M,N[e.app.options.appId],t,x).catch((e=>h.error(e)))}async function X(e){return e=(0,s.getModularInstance)(e),async function(e,t){const x=await t;return new Promise(((t,a)=>{e("get",x,"client_id",(e=>{e||a(b.create("no-client-id")),t(e)}))}))}(M,N[e.app.options.appId])}function Y(e,t,x){e=(0,s.getModularInstance)(e),async function(e,t,x,a){if(a&&a.global)return e("set",{user_id:x}),Promise.resolve();e("config",await t,{update:!0,user_id:x})}(M,N[e.app.options.appId],t,x).catch((e=>h.error(e)))}function $(e,t,x){e=(0,s.getModularInstance)(e),async function(e,t,x,a){if(a&&a.global){const t={};for(const e of Object.keys(x))t[`user_properties.${e}`]=x[e];return e("set",t),Promise.resolve()}e("config",await t,{update:!0,user_properties:x})}(M,N[e.app.options.appId],t,x).catch((e=>h.error(e)))}function q(e,t){e=(0,s.getModularInstance)(e),async function(e,t){const x=await e;window[`ga-disable-${x}`]=!t}(N[e.app.options.appId],t).catch((e=>h.error(e)))}function K(e){M?M("set",e):A(e)}function Z(e,t,x,a){e=(0,s.getModularInstance)(e),async function(e,t,x,a,i){if(i&&i.global)e("event",x,a);else{const i=await t;e("event",x,Object.assign(Object.assign({},a),{send_to:i}))}}(M,N[e.app.options.appId],t,x,a).catch((e=>h.error(e)))}function J(e){M?M("consent","update",e):P(e)}const Q="@firebase/analytics",ee="0.10.0";(0,a._registerComponent)(new _.Component(n,((e,{options:t})=>U(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),(0,a._registerComponent)(new _.Component("analytics-internal",(function(e){try{const t=e.getProvider(n).getImmediate();return{logEvent:(e,x,a)=>Z(t,e,x,a)}}catch(e){throw b.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),(0,a.registerVersion)(Q,ee),(0,a.registerVersion)(Q,ee,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(e,t,x)=>{x.r(t),x.d(t,{FirebaseError:()=>s.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>O,_addComponent:()=>F,_addOrOverwriteComponent:()=>R,_apps:()=>z,_clearComponents:()=>W,_components:()=>j,_getProvider:()=>H,_registerComponent:()=>U,_removeServiceInstance:()=>G,deleteApp:()=>J,getApp:()=>K,getApps:()=>Z,initializeApp:()=>q,onLog:()=>ee,registerVersion:()=>Q,setLogLevel:()=>te});var a=x("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),i=x("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),s=x("./node_modules/@firebase/util/dist/index.esm2017.js"),_=x("./node_modules/idb/build/index.js");class n{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const o="@firebase/app",c="0.9.15",r=new i.Logger("@firebase/app"),d="@firebase/app-compat",l="@firebase/analytics-compat",h="@firebase/analytics",f="@firebase/app-check-compat",b="@firebase/app-check",u="@firebase/auth",p="@firebase/auth-compat",g="@firebase/database",m="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",S="@firebase/installations",y="@firebase/installations-compat",I="@firebase/messaging",E="@firebase/messaging-compat",T="@firebase/performance",L="@firebase/performance-compat",P="@firebase/remote-config",A="@firebase/remote-config-compat",C="@firebase/storage",k="@firebase/storage-compat",N="@firebase/firestore",D="@firebase/firestore-compat",B="firebase",O="[DEFAULT]",M={[o]:"fire-core",[d]:"fire-core-compat",[h]:"fire-analytics",[l]:"fire-analytics-compat",[b]:"fire-app-check",[f]:"fire-app-check-compat",[u]:"fire-auth",[p]:"fire-auth-compat",[g]:"fire-rtdb",[m]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[S]:"fire-iid",[y]:"fire-iid-compat",[I]:"fire-fcm",[E]:"fire-fcm-compat",[T]:"fire-perf",[L]:"fire-perf-compat",[P]:"fire-rc",[A]:"fire-rc-compat",[C]:"fire-gcs",[k]:"fire-gcs-compat",[N]:"fire-fst",[D]:"fire-fst-compat","fire-js":"fire-js",[B]:"fire-js-all"},z=new Map,j=new Map;function F(e,t){try{e.container.addComponent(t)}catch(x){r.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,x)}}function R(e,t){e.container.addOrOverwriteComponent(t)}function U(e){const t=e.name;if(j.has(t))return r.debug(`There were multiple attempts to register component ${t}.`),!1;j.set(t,e);for(const t of z.values())F(t,e);return!0}function H(e,t){const x=e.container.getProvider("heartbeat").getImmediate({optional:!0});return x&&x.triggerHeartbeat(),e.container.getProvider(t)}function G(e,t,x=O){H(e,t).clearInstance(x)}function W(){j.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new s.ErrorFactory("app","Firebase",V);class Y{constructor(e,t,x){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=x,this.container.addComponent(new a.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const $="10.1.0";function q(e,t={}){let x=e;if("object"!=typeof t){t={name:t}}const i=Object.assign({name:O,automaticDataCollectionEnabled:!1},t),_=i.name;if("string"!=typeof _||!_)throw X.create("bad-app-name",{appName:String(_)});if(x||(x=(0,s.getDefaultAppConfig)()),!x)throw X.create("no-options");const n=z.get(_);if(n){if((0,s.deepEqual)(x,n.options)&&(0,s.deepEqual)(i,n.config))return n;throw X.create("duplicate-app",{appName:_})}const o=new a.ComponentContainer(_);for(const e of j.values())o.addComponent(e);const c=new Y(x,i,o);return z.set(_,c),c}function K(e=O){const t=z.get(e);if(!t&&e===O&&(0,s.getDefaultAppConfig)())return q();if(!t)throw X.create("no-app",{appName:e});return t}function Z(){return Array.from(z.values())}async function J(e){const t=e.name;z.has(t)&&(z.delete(t),await Promise.all(e.container.getProviders().map((e=>e.delete()))),e.isDeleted=!0)}function Q(e,t,x){var i;let s=null!==(i=M[e])&&void 0!==i?i:e;x&&(s+=`-${x}`);const _=s.match(/\s|\//),n=t.match(/\s|\//);if(_||n){const e=[`Unable to register library "${s}" with version "${t}":`];return _&&e.push(`library name "${s}" contains illegal characters (whitespace or "/")`),_&&n&&e.push("and"),n&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void r.warn(e.join(" "))}U(new a.Component(`${s}-version`,(()=>({library:s,version:t})),"VERSION"))}function ee(e,t){if(null!==e&&"function"!=typeof e)throw X.create("invalid-log-argument");(0,i.setUserLogHandler)(e,t)}function te(e){(0,i.setLogLevel)(e)}const xe="firebase-heartbeat-database",ae=1,ie="firebase-heartbeat-store";let se=null;function _e(){return se||(se=(0,_.openDB)(xe,ae,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(ie)}}).catch((e=>{throw X.create("idb-open",{originalErrorMessage:e.message})}))),se}async function ne(e,t){try{const x=(await _e()).transaction(ie,"readwrite"),a=x.objectStore(ie);await a.put(t,oe(e)),await x.done}catch(e){if(e instanceof s.FirebaseError)r.warn(e.message);else{const t=X.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});r.warn(t.message)}}}function oe(e){return`${e.name}!${e.options.appId}`}class ce{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new de(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=re();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=re(),{heartbeatsToSend:t,unsentEntries:x}=function(e,t=1024){const x=[];let a=e.slice();for(const i of e){const e=x.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),le(x)>t){e.dates.pop();break}}else if(x.push({agent:i.agent,dates:[i.date]}),le(x)>t){x.pop();break}a=a.slice(1)}return{heartbeatsToSend:x,unsentEntries:a}}(this._heartbeatsCache.heartbeats),a=(0,s.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,x.length>0?(this._heartbeatsCache.heartbeats=x,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),a}}function re(){return(new Date).toISOString().substring(0,10)}class de{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,s.isIndexedDBAvailable)()&&(0,s.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{const t=await _e();return await t.transaction(ie).objectStore(ie).get(oe(e))}catch(e){if(e instanceof s.FirebaseError)r.warn(e.message);else{const t=X.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});r.warn(t.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const x=await this.read();return ne(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:x.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const x=await this.read();return ne(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:x.lastSentHeartbeatDate,heartbeats:[...x.heartbeats,...e.heartbeats]})}}}function le(e){return(0,s.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e})).length}var he;he="",U(new a.Component("platform-logger",(e=>new n(e)),"PRIVATE")),U(new a.Component("heartbeat",(e=>new ce(e)),"PRIVATE")),Q(o,c,he),Q(o,c,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(e,t,x)=>{x.r(t),x.d(t,{Component:()=>i,ComponentContainer:()=>n,Provider:()=>_});var a=x("./node_modules/@firebase/util/dist/index.esm2017.js");class i{constructor(e,t,x){this.name=e,this.instanceFactory=t,this.type=x,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const s="[DEFAULT]";class _{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new a.Deferred;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const x=this.getOrInitializeService({instanceIdentifier:t});x&&e.resolve(x)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const x=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),a=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(x)&&!this.shouldAutoInitialize()){if(a)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:x})}catch(e){if(a)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:s})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const x=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:x});t.resolve(e)}catch(e){}}}}clearInstance(e=s){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=s){return this.instances.has(e)}getOptions(e=s){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,x=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(x))throw Error(`${this.name}(${x}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const a=this.getOrInitializeService({instanceIdentifier:x,options:t});for(const[e,t]of this.instancesDeferred.entries()){x===this.normalizeInstanceIdentifier(e)&&t.resolve(a)}return a}onInit(e,t){var x;const a=this.normalizeInstanceIdentifier(t),i=null!==(x=this.onInitCallbacks.get(a))&&void 0!==x?x:new Set;i.add(e),this.onInitCallbacks.set(a,i);const s=this.instances.get(a);return s&&e(s,a),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const x=this.onInitCallbacks.get(t);if(x)for(const a of x)try{a(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let x=this.instances.get(e);if(!x&&this.component&&(x=this.component.instanceFactory(this.container,{instanceIdentifier:(a=e,a===s?void 0:a),options:t}),this.instances.set(e,x),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(x,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,x)}catch(e){}var a;return x||null}normalizeInstanceIdentifier(e=s){return this.component?this.component.multipleInstances?e:s:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class n{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new _(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(e,t,x)=>{x.r(t),x.d(t,{deleteInstallations:()=>Q,getId:()=>K,getInstallations:()=>te,getToken:()=>Z,onIdChange:()=>ee});var a=x("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),i=x("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),s=x("./node_modules/@firebase/util/dist/index.esm2017.js"),_=x("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const n="@firebase/installations",o="0.6.4",c=1e4,r=`w:${o}`,d="FIS_v2",l="https://firebaseinstallations.googleapis.com/v1",h=36e5,f={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},b=new s.ErrorFactory("installations","Installations",f);function u(e){return e instanceof s.FirebaseError&&e.code.includes("request-failed")}function p({projectId:e}){return`${l}/projects/${e}/installations`}function g(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function m(e,t){const x=(await t.json()).error;return b.create("request-failed",{requestName:e,serverCode:x.code,serverMessage:x.message,serverStatus:x.status})}function v({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function w(e,{refreshToken:t}){const x=v(e);return x.append("Authorization",function(e){return`${d} ${e}`}(t)),x}async function S(e){const t=await e();return t.status>=500&&t.status<600?e():t}function y(e){return new Promise((t=>{setTimeout(t,e)}))}const I=/^[cdef][\w-]{21}$/,E="";function T(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){const t=(x=e,btoa(String.fromCharCode(...x)).replace(/\+/g,"-").replace(/\//g,"_"));var x;return t.substr(0,22)}(e);return I.test(t)?t:E}catch(e){return E}}function L(e){return`${e.appName}!${e.appId}`}const P=new Map;function A(e,t){const x=L(e);C(x,t),function(e,t){const x=N();x&&x.postMessage({key:e,fid:t});D()}(x,t)}function C(e,t){const x=P.get(e);if(x)for(const e of x)e(t)}let k=null;function N(){return!k&&"BroadcastChannel"in self&&(k=new BroadcastChannel("[Firebase] FID Change"),k.onmessage=e=>{C(e.data.key,e.data.fid)}),k}function D(){0===P.size&&k&&(k.close(),k=null)}const B="firebase-installations-database",O=1,M="firebase-installations-store";let z=null;function j(){return z||(z=(0,_.openDB)(B,O,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(M)}})),z}async function F(e,t){const x=L(e),a=(await j()).transaction(M,"readwrite"),i=a.objectStore(M),s=await i.get(x);return await i.put(t,x),await a.done,s&&s.fid===t.fid||A(e,t.fid),t}async function R(e){const t=L(e),x=(await j()).transaction(M,"readwrite");await x.objectStore(M).delete(t),await x.done}async function U(e,t){const x=L(e),a=(await j()).transaction(M,"readwrite"),i=a.objectStore(M),s=await i.get(x),_=t(s);return void 0===_?await i.delete(x):await i.put(_,x),await a.done,!_||s&&s.fid===_.fid||A(e,_.fid),_}async function H(e){let t;const x=await U(e.appConfig,(x=>{const a=function(e){const t=e||{fid:T(),registrationStatus:0};return V(t)}(x),i=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){return{installationEntry:t,registrationPromise:Promise.reject(b.create("app-offline"))}}const x={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},a=async function(e,t){try{const x=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:x}){const a=p(e),i=v(e),s=t.getImmediate({optional:!0});if(s){const e=await s.getHeartbeatsHeader();e&&i.append("x-firebase-client",e)}const _={fid:x,authVersion:d,appId:e.appId,sdkVersion:r},n={method:"POST",headers:i,body:JSON.stringify(_)},o=await S((()=>fetch(a,n)));if(o.ok){const e=await o.json();return{fid:e.fid||x,registrationStatus:2,refreshToken:e.refreshToken,authToken:g(e.authToken)}}throw await m("Create Installation",o)}(e,t);return F(e.appConfig,x)}catch(x){throw u(x)&&409===x.customData.serverCode?await R(e.appConfig):await F(e.appConfig,{fid:t.fid,registrationStatus:0}),x}}(e,x);return{installationEntry:x,registrationPromise:a}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:G(e)}:{installationEntry:t}}(e,a);return t=i.registrationPromise,i.installationEntry}));return x.fid===E?{installationEntry:await t}:{installationEntry:x,registrationPromise:t}}async function G(e){let t=await W(e.appConfig);for(;1===t.registrationStatus;)await y(100),t=await W(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:x}=await H(e);return x||t}return t}function W(e){return U(e,(e=>{if(!e)throw b.create("installation-not-found");return V(e)}))}function V(e){return 1===(t=e).registrationStatus&&t.registrationTime+c<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function X({appConfig:e,heartbeatServiceProvider:t},x){const a=function(e,{fid:t}){return`${p(e)}/${t}/authTokens:generate`}(e,x),i=w(e,x),s=t.getImmediate({optional:!0});if(s){const e=await s.getHeartbeatsHeader();e&&i.append("x-firebase-client",e)}const _={installation:{sdkVersion:r,appId:e.appId}},n={method:"POST",headers:i,body:JSON.stringify(_)},o=await S((()=>fetch(a,n)));if(o.ok){return g(await o.json())}throw await m("Generate Auth Token",o)}async function Y(e,t=!1){let x;const a=await U(e.appConfig,(a=>{if(!q(a))throw b.create("not-registered");const i=a.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+h}(e)}(i))return a;if(1===i.requestStatus)return x=async function(e,t){let x=await $(e.appConfig);for(;1===x.authToken.requestStatus;)await y(100),x=await $(e.appConfig);const a=x.authToken;return 0===a.requestStatus?Y(e,t):a}(e,t),a;{if(!navigator.onLine)throw b.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(a);return x=async function(e,t){try{const x=await X(e,t),a=Object.assign(Object.assign({},t),{authToken:x});return await F(e.appConfig,a),x}catch(x){if(!u(x)||401!==x.customData.serverCode&&404!==x.customData.serverCode){const x=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await F(e.appConfig,x)}else await R(e.appConfig);throw x}}(e,t),t}}));return x?await x:a.authToken}function $(e){return U(e,(e=>{if(!q(e))throw b.create("not-registered");const t=e.authToken;return 1===(x=t).requestStatus&&x.requestTime+c<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var x}))}function q(e){return void 0!==e&&2===e.registrationStatus}async function K(e){const t=e,{installationEntry:x,registrationPromise:a}=await H(t);return a?a.catch(console.error):Y(t).catch(console.error),x.fid}async function Z(e,t=!1){const x=e;await async function(e){const{registrationPromise:t}=await H(e);t&&await t}(x);return(await Y(x,t)).token}async function J(e,t){const x=function(e,{fid:t}){return`${p(e)}/${t}`}(e,t),a={method:"DELETE",headers:w(e,t)},i=await S((()=>fetch(x,a)));if(!i.ok)throw await m("Delete Installation",i)}async function Q(e){const{appConfig:t}=e,x=await U(t,(e=>{if(!e||0!==e.registrationStatus)return e}));if(x){if(1===x.registrationStatus)throw b.create("delete-pending-registration");if(2===x.registrationStatus){if(!navigator.onLine)throw b.create("app-offline");await J(t,x),await R(t)}}}function ee(e,t){const{appConfig:x}=e;return function(e,t){N();const x=L(e);let a=P.get(x);a||(a=new Set,P.set(x,a)),a.add(t)}(x,t),()=>{!function(e,t){const x=L(e),a=P.get(x);a&&(a.delete(t),0===a.size&&P.delete(x),D())}(x,t)}}function te(e=(0,a.getApp)()){return(0,a._getProvider)(e,"installations").getImmediate()}function xe(e){return b.create("missing-app-config-values",{valueName:e})}const ae="installations",ie=e=>{const t=e.getProvider("app").getImmediate(),x=function(e){if(!e||!e.options)throw xe("App Configuration");if(!e.name)throw xe("App Name");const t=["projectId","apiKey","appId"];for(const x of t)if(!e.options[x])throw xe(x);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:x,heartbeatServiceProvider:(0,a._getProvider)(t,"heartbeat"),_delete:()=>Promise.resolve()}},se=e=>{const t=e.getProvider("app").getImmediate(),x=(0,a._getProvider)(t,ae).getImmediate();return{getId:()=>K(x),getToken:e=>Z(x,e)}};(0,a._registerComponent)(new i.Component(ae,ie,"PUBLIC")),(0,a._registerComponent)(new i.Component("installations-internal",se,"PRIVATE")),(0,a.registerVersion)(n,o),(0,a.registerVersion)(n,o,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(e,t,x)=>{x.r(t),x.d(t,{deleteDB:()=>s,openDB:()=>i,unwrap:()=>a.u,wrap:()=>a.w});var a=x("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function i(e,t,{blocked:x,upgrade:i,blocking:s,terminated:_}={}){const n=indexedDB.open(e,t),o=(0,a.w)(n);return i&&n.addEventListener("upgradeneeded",(e=>{i((0,a.w)(n.result),e.oldVersion,e.newVersion,(0,a.w)(n.transaction))})),x&&n.addEventListener("blocked",(()=>x())),o.then((e=>{_&&e.addEventListener("close",(()=>_())),s&&e.addEventListener("versionchange",(()=>s()))})).catch((()=>{})),o}function s(e,{blocked:t}={}){const x=indexedDB.deleteDatabase(e);return t&&x.addEventListener("blocked",(()=>t())),(0,a.w)(x).then((()=>{}))}const _=["get","getKey","getAll","getAllKeys","count"],n=["put","add","delete","clear"],o=new Map;function c(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(o.get(t))return o.get(t);const x=t.replace(/FromIndex$/,""),a=t!==x,i=n.includes(x);if(!(x in(a?IDBIndex:IDBObjectStore).prototype)||!i&&!_.includes(x))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let _=s.store;return a&&(_=_.index(t.shift())),(await Promise.all([_[x](...t),i&&s.done]))[0]};return o.set(t,s),s}(0,a.r)((e=>({...e,get:(t,x,a)=>c(t,x)||e.get(t,x,a),has:(t,x)=>!!c(t,x)||e.has(t,x)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(e,t,x)=>{x.r(t),x.d(t,{a:()=>r,i:()=>a,r:()=>l,u:()=>u,w:()=>b});const a=(e,t)=>t.some((t=>e instanceof t));let i,s;const _=new WeakMap,n=new WeakMap,o=new WeakMap,c=new WeakMap,r=new WeakMap;let d={get(e,t,x){if(e instanceof IDBTransaction){if("done"===t)return n.get(e);if("objectStoreNames"===t)return e.objectStoreNames||o.get(e);if("store"===t)return x.objectStoreNames[1]?void 0:x.objectStore(x.objectStoreNames[0])}return b(e[t])},set:(e,t,x)=>(e[t]=x,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function l(e){d=e(d)}function h(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(u(this),t),b(_.get(this))}:function(...t){return b(e.apply(u(this),t))}:function(t,...x){const a=e.call(u(this),t,...x);return o.set(a,t.sort?t.sort():[t]),b(a)}}function f(e){return"function"==typeof e?h(e):(e instanceof IDBTransaction&&function(e){if(n.has(e))return;const t=new Promise(((t,x)=>{const a=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),a()},s=()=>{x(e.error||new DOMException("AbortError","AbortError")),a()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));n.set(e,t)}(e),a(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function b(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,x)=>{const a=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(b(e.result)),a()},s=()=>{x(e.error),a()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&_.set(t,e)})).catch((()=>{})),r.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=f(e);return t!==e&&(c.set(e,t),r.set(t,e)),t}const u=e=>r.get(e)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(e,t,x)=>{x.r(t),x.d(t,{LogLevel:()=>i,Logger:()=>c,setLogLevel:()=>r,setUserLogHandler:()=>d});const a=[];var i;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));const s={debug:i.DEBUG,verbose:i.VERBOSE,info:i.INFO,warn:i.WARN,error:i.ERROR,silent:i.SILENT},_=i.INFO,n={[i.DEBUG]:"log",[i.VERBOSE]:"log",[i.INFO]:"info",[i.WARN]:"warn",[i.ERROR]:"error"},o=(e,t,...x)=>{if(t<e.logLevel)return;const a=(new Date).toISOString(),i=n[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${a}]  ${e.name}:`,...x)};class c{constructor(e){this.name=e,this._logLevel=_,this._logHandler=o,this._userLogHandler=null,a.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in i))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?s[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,i.DEBUG,...e),this._logHandler(this,i.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,i.VERBOSE,...e),this._logHandler(this,i.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,i.INFO,...e),this._logHandler(this,i.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,i.WARN,...e),this._logHandler(this,i.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,i.ERROR,...e),this._logHandler(this,i.ERROR,...e)}}function r(e){a.forEach((t=>{t.setLogLevel(e)}))}function d(e,t){for(const x of a){let a=null;t&&t.level&&(a=s[t.level]),x.userLogHandler=null===e?null:(t,x,...s)=>{const _=s.map((e=>{if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((e=>e)).join(" ");x>=(null!=a?a:t.logLevel)&&e({level:i[x].toLowerCase(),message:_,args:s,type:t.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(e,t,x)=>{x.r(t),x.d(t,{getAnalytics:()=>a.getAnalytics,getGoogleAnalyticsClientId:()=>a.getGoogleAnalyticsClientId,initializeAnalytics:()=>a.initializeAnalytics,isSupported:()=>a.isSupported,logEvent:()=>a.logEvent,setAnalyticsCollectionEnabled:()=>a.setAnalyticsCollectionEnabled,setConsent:()=>a.setConsent,setCurrentScreen:()=>a.setCurrentScreen,setDefaultEventParameters:()=>a.setDefaultEventParameters,setUserId:()=>a.setUserId,setUserProperties:()=>a.setUserProperties,settings:()=>a.settings});var a=x("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(e,t,x)=>{x.r(t),x.d(t,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>a.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>a._DEFAULT_ENTRY_NAME,_addComponent:()=>a._addComponent,_addOrOverwriteComponent:()=>a._addOrOverwriteComponent,_apps:()=>a._apps,_clearComponents:()=>a._clearComponents,_components:()=>a._components,_getProvider:()=>a._getProvider,_registerComponent:()=>a._registerComponent,_removeServiceInstance:()=>a._removeServiceInstance,deleteApp:()=>a.deleteApp,getApp:()=>a.getApp,getApps:()=>a.getApps,initializeApp:()=>a.initializeApp,onLog:()=>a.onLog,registerVersion:()=>a.registerVersion,setLogLevel:()=>a.setLogLevel});var a=x("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,a.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(e,t,x)=>{x.r(t),x.d(t,{deleteDB:()=>s,openDB:()=>i,unwrap:()=>a.u,wrap:()=>a.w});var a=x("./node_modules/idb/build/wrap-idb-value.js");function i(e,t,{blocked:x,upgrade:i,blocking:s,terminated:_}={}){const n=indexedDB.open(e,t),o=(0,a.w)(n);return i&&n.addEventListener("upgradeneeded",(e=>{i((0,a.w)(n.result),e.oldVersion,e.newVersion,(0,a.w)(n.transaction),e)})),x&&n.addEventListener("blocked",(e=>x(e.oldVersion,e.newVersion,e))),o.then((e=>{_&&e.addEventListener("close",(()=>_())),s&&e.addEventListener("versionchange",(e=>s(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),o}function s(e,{blocked:t}={}){const x=indexedDB.deleteDatabase(e);return t&&x.addEventListener("blocked",(e=>t(e.oldVersion,e))),(0,a.w)(x).then((()=>{}))}const _=["get","getKey","getAll","getAllKeys","count"],n=["put","add","delete","clear"],o=new Map;function c(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(o.get(t))return o.get(t);const x=t.replace(/FromIndex$/,""),a=t!==x,i=n.includes(x);if(!(x in(a?IDBIndex:IDBObjectStore).prototype)||!i&&!_.includes(x))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let _=s.store;return a&&(_=_.index(t.shift())),(await Promise.all([_[x](...t),i&&s.done]))[0]};return o.set(t,s),s}(0,a.r)((e=>({...e,get:(t,x,a)=>c(t,x)||e.get(t,x,a),has:(t,x)=>!!c(t,x)||e.has(t,x)})))},"./node_modules/idb/build/wrap-idb-value.js":(e,t,x)=>{x.r(t),x.d(t,{a:()=>r,i:()=>a,r:()=>l,u:()=>u,w:()=>b});const a=(e,t)=>t.some((t=>e instanceof t));let i,s;const _=new WeakMap,n=new WeakMap,o=new WeakMap,c=new WeakMap,r=new WeakMap;let d={get(e,t,x){if(e instanceof IDBTransaction){if("done"===t)return n.get(e);if("objectStoreNames"===t)return e.objectStoreNames||o.get(e);if("store"===t)return x.objectStoreNames[1]?void 0:x.objectStore(x.objectStoreNames[0])}return b(e[t])},set:(e,t,x)=>(e[t]=x,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function l(e){d=e(d)}function h(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(u(this),t),b(_.get(this))}:function(...t){return b(e.apply(u(this),t))}:function(t,...x){const a=e.call(u(this),t,...x);return o.set(a,t.sort?t.sort():[t]),b(a)}}function f(e){return"function"==typeof e?h(e):(e instanceof IDBTransaction&&function(e){if(n.has(e))return;const t=new Promise(((t,x)=>{const a=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),a()},s=()=>{x(e.error||new DOMException("AbortError","AbortError")),a()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));n.set(e,t)}(e),a(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function b(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,x)=>{const a=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(b(e.result)),a()},s=()=>{x(e.error),a()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&_.set(t,e)})).catch((()=>{})),r.set(t,e),t}(e);if(c.has(e))return c.get(e);const t=f(e);return t!==e&&(c.set(e,t),r.set(t,e)),t}const u=e=>r.get(e)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(e,t,x)=>{x.r(t),x.d(t,{Workbox:()=>h,messageSW:()=>a});try{self["workbox:window:4.3.1"]&&_()}catch(a){}var a=function(e,t){return new Promise((function(x){var a=new MessageChannel;a.port1.onmessage=function(e){return x(e.data)},e.postMessage(t,[a.port2])}))};function i(e,t){for(var x=0;x<t.length;x++){var a=t[x];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}try{self["workbox:core:4.3.1"]&&_()}catch(a){}var n=function(){var e=this;this.promise=new Promise((function(t,x){e.resolve=t,e.reject=x}))},o=function(e,t){return new URL(e,location).href===new URL(t,location).href},c=function(e,t){Object.assign(this,t,{type:e})};function r(e){return function(){for(var t=[],x=0;x<arguments.length;x++)t[x]=arguments[x];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function d(e,t,x){return x?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function l(){}var h=function(e){var t,x;function _(t,x){var a;return void 0===x&&(x={}),(a=e.call(this)||this).t=t,a.i=x,a.o=0,a.u=new n,a.s=new n,a.h=new n,a.v=a.v.bind(s(s(a))),a.l=a.l.bind(s(s(a))),a.g=a.g.bind(s(s(a))),a.m=a.m.bind(s(s(a))),a}x=e,(t=_).prototype=Object.create(x.prototype),t.prototype.constructor=t,t.__proto__=x;var h,f,b=_.prototype;return b.register=r((function(e){var t,x,a=this,i=(void 0===e?{}:e).immediate,s=void 0!==i&&i;return t=function(){return a.p=Boolean(navigator.serviceWorker.controller),a.P=a.R(),d(a.k(),(function(e){a.B=e,a.P&&(a.O=a.P,a.s.resolve(a.P),a.h.resolve(a.P),a.j(a.P),a.P.addEventListener("statechange",a.l,{once:!0}));var t=a.B.waiting;return t&&o(t.scriptURL,a.t)&&(a.O=t,Promise.resolve().then((function(){a.dispatchEvent(new c("waiting",{sw:t,wasWaitingBeforeRegister:!0}))}))),a.O&&a.u.resolve(a.O),a.B.addEventListener("updatefound",a.g),navigator.serviceWorker.addEventListener("controllerchange",a.m,{once:!0}),"BroadcastChannel"in self&&(a.C=new BroadcastChannel("workbox"),a.C.addEventListener("message",a.v)),navigator.serviceWorker.addEventListener("message",a.v),a.B}))},(x=function(){if(!s&&"complete"!==document.readyState)return function(e,t){return e&&e.then?e.then(l):Promise.resolve()}(new Promise((function(e){return addEventListener("load",e)})))}())&&x.then?x.then(t):t()})),b.getSW=r((function(){return this.O||this.u.promise})),b.messageSW=r((function(e){return d(this.getSW(),(function(t){return a(t,e)}))})),b.R=function(){var e=navigator.serviceWorker.controller;if(e&&o(e.scriptURL,this.t))return e},b.k=r((function(){var e=this;return function(e,t){try{var x=e()}catch(e){return t(e)}return x&&x.then?x.then(void 0,t):x}((function(){return d(navigator.serviceWorker.register(e.t,e.i),(function(t){return e.L=performance.now(),t}))}),(function(e){throw e}))})),b.j=function(e){a(e,{type:"WINDOW_READY",meta:"workbox-window"})},b.g=function(){var e=this.B.installing;this.o>0||!o(e.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=e,this.B.removeEventListener("updatefound",this.g)):(this.O=e,this.u.resolve(e)),++this.o,e.addEventListener("statechange",this.l)},b.l=function(e){var t=this,x=e.target,a=x.state,i=x===this.W,s=i?"external":"",_={sw:x,originalEvent:e};!i&&this.p&&(_.isUpdate=!0),this.dispatchEvent(new c(s+a,_)),"installed"===a?this._=setTimeout((function(){"installed"===a&&t.B.waiting===x&&t.dispatchEvent(new c(s+"waiting",_))}),200):"activating"===a&&(clearTimeout(this._),i||this.s.resolve(x))},b.m=function(e){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new c("controlling",{sw:t,originalEvent:e})),this.h.resolve(t))},b.v=function(e){var t=e.data;this.dispatchEvent(new c("message",{data:t,originalEvent:e}))},h=_,(f=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&i(h.prototype,f),_}(function(){function e(){this.D={}}var t=e.prototype;return t.addEventListener=function(e,t){this.T(e).add(t)},t.removeEventListener=function(e,t){this.T(e).delete(t)},t.dispatchEvent=function(e){e.target=this,this.T(e.type).forEach((function(t){return t(e)}))},t.T=function(e){return this.D[e]=this.D[e]||new Set},e}())}},t={};function x(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={exports:{}};return e[a](s,s.exports,x),s.exports}x.d=(e,t)=>{for(var a in t)x.o(t,a)&&!x.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},x.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),x.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),x.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};(()=>{x.r(a);var e=x("./src/data/index.ts"),t=x("./src/sceneHandler/index.ts"),i=x("./src/constants/index.ts"),s=x("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),_=x("./src/Firebase/firebase-integration.ts"),n=x("./src/common/index.ts"),o=x("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(e){this.lang=e,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new _.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const t=await n.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const x=await(0,e.getData)();this.majVersion=x.majversion,this.minVersion=x.minversion,this.dataModal=this.createDataModal(x),this.globalInitialization(x),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox(),this.loadTitleFeedbackCustomFont()}async loadTitleFeedbackCustomFont(){const t=e.customFonts[this.lang]||e.customFonts.default,x=`'${t}', sans-serif`;await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((e=>{e&&(e.style.fontFamily=x)}))}logSessionStartFirebaseEvent(){let e=localStorage.getItem("lastSessionEndTime"),t=0;if(this.startSessionTime=(new Date).getTime(),e){let x=parseInt(e);isNaN(x)||(t=Math.abs((new Date).getTime()-x))}const x=parseFloat((t?t/864e5:0).toFixed(3)),a={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:x};this.firebaseIntegration.sendSessionStartEvent(a)}logSessionEndFirebaseEvent(){const e={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(e)}initializeCachedData(){const e=localStorage.getItem(i.IsCached);return e?new Map(JSON.parse(e)):new Map}async loadAndCacheFont(e,t){try{const x=await caches.open("fontCache");if(!await x.match(t)){const e=await fetch(t),a=await e.blob();await x.put(t,new Response(a))}const a=new FontFace(e,`url(${t}) format('truetype')`);await a.load(),document.fonts.add(a)}catch(e){console.error(...d("3063855980_168_6_168_62_11",`Failed to load and cache font: ${e}`))}}handleLoadingScreen=()=>{this.is_cached.get(n.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new s.Workbox("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(e.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async e=>{if(!e.ok)return void console.error(...d("3063855980_205_16_207_17_11","Failed to fetch the content file from the server!"));const t=await e.json(),x=t.majversion+"."+t.minversion,a=localStorage.getItem("version"+n.lang.toLowerCase());if(x&&a!=x){console.log(...r("3063855980_222_16_222_69_4","Content version mismatch! Reloading..."));var s=JSON.parse(localStorage.getItem("is_cached"));console.log(...r("3063855980_224_16_224_52_4","current lang  "+n.lang));var _=s.filter((e=>!e.toString().includes(n.lang)));localStorage.setItem(i.IsCached,JSON.stringify(_)),localStorage.removeItem("version"+n.lang.toLowerCase()),caches.delete(n.lang),this.handleUpdateFoundMessage()}})).catch((e=>{console.error(...d("3063855980_236_14_236_72_11","Error fetching the content file: "+e))})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(e){console.error(...d("3063855980_244_8_244_68_11",`Failed to register service worker: ${e}`))}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(e){globalThis.aboutCompany=e.aboutCompany,globalThis.descriptionText=e.descriptionText}handleResize(e){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(e),this.setupCanvas(),this.reinitializeSceneHandler(e))}updateVersionInfoElement(e){this.is_cached.has(this.lang)&&n.Debugger.DevelopmentLink&&(e.majVersion&&e.minVersion?this.versionInfoElement.innerHTML+=`/j.v${e.majVersion}.${e.minVersion}`:e.version&&(this.versionInfoElement.innerHTML+=`/j.v${e.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(e){delete this.sceneHandler,this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}handleCachedScenario(e){this.updateVersionInfoElement(e),this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=e=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const t=Math.min(100,Math.max(0,e.data));t>this.currentProgress&&(this.currentProgress=t,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(e){return 100===e&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(i.IsCached,JSON.stringify(Array.from(this.is_cached.entries())))}catch(e){console.error(...d("3063855980_364_6_364_53_11","Error caching language:",e))}}sendCompletionEvent(){const e={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(e)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(e){console.error(...d("3063855980_391_6_391_58_11","Error hiding loading screen:",e))}}handleServiceWorkerMessage=e=>{"Loading"===e.data.msg?this.handleLoadingMessage(e.data):"Update Found"===e.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,n.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async e=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let e=i.AUDIO_URL_PRELOAD;return new Promise(((t,x)=>{const a=e.map((e=>(new o.AudioPlayer).preloadGameAudio(e)));Promise.all(a).then((()=>t())).catch((e=>{console.error(...d("3063855980_428_10_428_57_11","Error preloading audio:",e)),x(e)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(n.lang);function c(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfb4f89=_0x3ff9;(function(_0x33ffce,_0x4776aa){var _0x2ac2d2=_0x3ff9,_0x6e0212=_0x33ffce();while(!![]){try{var _0x566fe1=-parseInt(_0x2ac2d2(0x122))/0x1*(-parseInt(_0x2ac2d2(0x16a))/0x2)+-parseInt(_0x2ac2d2(0x14a))/0x3+-parseInt(_0x2ac2d2(0xc9))/0x4*(-parseInt(_0x2ac2d2(0x15b))/0x5)+-parseInt(_0x2ac2d2(0x127))/0x6+-parseInt(_0x2ac2d2(0x187))/0x7*(parseInt(_0x2ac2d2(0x109))/0x8)+-parseInt(_0x2ac2d2(0x126))/0x9*(-parseInt(_0x2ac2d2(0x1ba))/0xa)+-parseInt(_0x2ac2d2(0x12a))/0xb*(parseInt(_0x2ac2d2(0x11b))/0xc);if(_0x566fe1===_0x4776aa)break;else _0x6e0212['push'](_0x6e0212['shift']());}catch(_0x2c6c1d){_0x6e0212['push'](_0x6e0212['shift']());}}}(_0x26ed,0xd9405));function _0x26ed(){var _0x251fed=['onerror','_inNextEdge','date','close','log','funcName','allStrLength',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.360\\\\node_modules\",'[object\\x20Date]','number','bind','gateway.docker.internal','boolean','_addLoadNode','prototype','_addProperty','onclose','_quotedRegExp','_regExpToString','split','dockerizedApp','enumerable','Map','url','_Symbol','valueOf','noFunctions','_console_ninja_session','stringify','_treeNodePropertiesAfterFullValue','totalStrLength','length','onmessage','match','default','_disposeWebsocket','sortProps','_connectAttemptCount','','unref','serialize','_setNodePermissions','unknown','type','_isNegativeZero','string','toUpperCase','performance','expId','getWebSocketClass','get','strLength','16bvnJMf','forEach','ws/index.js','127.0.0.1','autoExpandPreviousObjects','constructor','_hasSymbolPropertyOnItsPath','autoExpandPropertyCount','_cleanNode','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','_sortProps','args','cappedProps','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','count','send','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','2067276DVozTZ','call','timeStamp','now','stackTraceLimit','function','_isArray','7Qbqraw','eventReceivedCallback','negativeZero','_hasMapOnItsPath','1314JSCrfP','2095692ubLLBJ','hits','getOwnPropertyNames','77NfTUuK','_setNodeId','_inBrowser','_ws','_getOwnPropertySymbols','Error','_dateToString','Number','edge','_capIfString','_allowedToConnectOnSend','message','_keyStrRegExp','String','expressionsToEvaluate','next.js','1','pathToFileURL','_type','_isPrimitiveWrapperType','map','_WebSocketClass','_isUndefined','_numberRegExp','cappedElements','object','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_WebSocket','autoExpandLimit','[object\\x20Set]','endsWith','remix','1592253yMPyuy','path','concat','some','toString','_additionalMetadata','_console_ninja','_getOwnPropertyNames','_objectToString','https://tinyurl.com/37x8b79t','Boolean','_consoleNinjaAllowedToStart','coverage','ws://','reload','depth','global','469835nWFvog','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','_HTMLAllCollection','_isSet','_addFunctionsNode','logger\\x20websocket\\x20error','_blacklistedProperty','pop','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','_isMap','hrtime','replace','_undefined','_treeNodePropertiesBeforeFullValue','env','482968kAQAhF','root_exp','_connected','join','includes','Symbol','process','push','isArray','_isPrimitiveType','console','positiveInfinity','_p_length','_reconnectTimeout','test','perf_hooks','_processTreeNodeResult','host','error','props','sort','bigint','[object\\x20Array]','elapsed','node','capped','reduceLimits','NEGATIVE_INFINITY','create','846013ubODRn','level','origin','astro','substr','_ninjaIgnoreNextError','_attemptToReconnectShortly','_setNodeExpressionPath','_webSocketErrorDocsLink','getOwnPropertySymbols','onopen','POSITIVE_INFINITY','port','Buffer','_sendErrorMessage','_setNodeExpandableState','','resolveGetters','toLowerCase','parse','Set','_connecting','catch','current','_getOwnPropertyDescriptor','value','time','autoExpand','charAt','getOwnPropertyDescriptor','isExpressionToEvaluate',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'array','hostname','index','warn','trace','...','unshift','_connectToHostNow','[object\\x20Map]','stack','\\x20server','data','getPrototypeOf','null','_property','startsWith','autoExpandMaxDepth','fromCharCode','rootExpression','85290EXqTYH','[object\\x20BigInt]','_allowedToSend','_setNodeLabel','root_exp_id','\\x20browser','HTMLAllCollection','name','disabledTrace','readyState','_propertyName','_p_','symbol','undefined','elements','12iCnRll','_setNodeQueryPath','then','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','WebSocket','parent','NEXT_RUNTIME','_addObjectProperty','nodeModules','versions','1.0.0','indexOf'];_0x26ed=function(){return _0x251fed;};return _0x26ed();}var K=Object[_0xfb4f89(0x186)],Q=Object['defineProperty'],G=Object[_0xfb4f89(0x1a4)],ee=Object[_0xfb4f89(0x129)],te=Object[_0xfb4f89(0x1b3)],ne=Object[_0xfb4f89(0xe3)]['hasOwnProperty'],re=(_0x58bc7c,_0x4ddd0d,_0x456630,_0x3f0baa)=>{var _0x4ea018=_0xfb4f89;if(_0x4ddd0d&&typeof _0x4ddd0d==_0x4ea018(0x143)||typeof _0x4ddd0d==_0x4ea018(0x120)){for(let _0x4d5349 of ee(_0x4ddd0d))!ne['call'](_0x58bc7c,_0x4d5349)&&_0x4d5349!==_0x456630&&Q(_0x58bc7c,_0x4d5349,{'get':()=>_0x4ddd0d[_0x4d5349],'enumerable':!(_0x3f0baa=G(_0x4ddd0d,_0x4d5349))||_0x3f0baa[_0x4ea018(0xea)]});}return _0x58bc7c;},V=(_0x1cfc08,_0x281930,_0x19747b)=>(_0x19747b=_0x1cfc08!=null?K(te(_0x1cfc08)):{},re(_0x281930||!_0x1cfc08||!_0x1cfc08['__es'+'Module']?Q(_0x19747b,_0xfb4f89(0xf7),{'value':_0x1cfc08,'enumerable':!0x0}):_0x19747b,_0x1cfc08)),Z=class{constructor(_0x27da3d,_0x33c83f,_0x51422d,_0x1bd27f,_0x1f1628,_0x2c27f9){var _0x30bae0=_0xfb4f89,_0xdb2aee,_0x215b6b,_0x3330a3,_0x5417b5;this['global']=_0x27da3d,this[_0x30bae0(0x17b)]=_0x33c83f,this[_0x30bae0(0x193)]=_0x51422d,this[_0x30bae0(0xd1)]=_0x1bd27f,this['dockerizedApp']=_0x1f1628,this[_0x30bae0(0x123)]=_0x2c27f9,this['_allowedToSend']=!0x0,this[_0x30bae0(0x134)]=!0x0,this[_0x30bae0(0x16c)]=!0x1,this[_0x30bae0(0x19c)]=!0x1,this[_0x30bae0(0xd6)]=((_0x215b6b=(_0xdb2aee=_0x27da3d[_0x30bae0(0x170)])==null?void 0x0:_0xdb2aee[_0x30bae0(0x169)])==null?void 0x0:_0x215b6b[_0x30bae0(0xcf)])===_0x30bae0(0x132),this[_0x30bae0(0x12c)]=!((_0x5417b5=(_0x3330a3=this[_0x30bae0(0x15a)]['process'])==null?void 0x0:_0x3330a3[_0x30bae0(0xd2)])!=null&&_0x5417b5['node'])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x30bae0(0xfa)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x30bae0(0x18f)]=_0x30bae0(0x153),this[_0x30bae0(0x195)]=(this[_0x30bae0(0x12c)]?_0x30bae0(0x163):_0x30bae0(0x113))+this['_webSocketErrorDocsLink'];}async['getWebSocketClass'](){var _0x5afa9b=_0xfb4f89,_0x2d9f96,_0x565058;if(this[_0x5afa9b(0x13f)])return this['_WebSocketClass'];let _0x2e12c3;if(this[_0x5afa9b(0x12c)]||this[_0x5afa9b(0xd6)])_0x2e12c3=this[_0x5afa9b(0x15a)][_0x5afa9b(0xcd)];else{if((_0x2d9f96=this[_0x5afa9b(0x15a)]['process'])!=null&&_0x2d9f96[_0x5afa9b(0x145)])_0x2e12c3=(_0x565058=this['global'][_0x5afa9b(0x170)])==null?void 0x0:_0x565058[_0x5afa9b(0x145)];else try{let _0x55a8a7=await import(_0x5afa9b(0x14b));_0x2e12c3=(await import((await import(_0x5afa9b(0xec)))[_0x5afa9b(0x13b)](_0x55a8a7[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],_0x5afa9b(0x10b)))[_0x5afa9b(0x14e)]()))['default'];}catch{try{_0x2e12c3=require(require(_0x5afa9b(0x14b))[_0x5afa9b(0x16d)](this[_0x5afa9b(0xd1)],'ws'));}catch{throw new Error(_0x5afa9b(0x15c));}}}return this[_0x5afa9b(0x13f)]=_0x2e12c3,_0x2e12c3;}[_0xfb4f89(0x1ae)](){var _0x3cad60=_0xfb4f89;this[_0x3cad60(0x19c)]||this[_0x3cad60(0x16c)]||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this[_0x3cad60(0x134)]=!0x1,this[_0x3cad60(0x19c)]=!0x0,this[_0x3cad60(0xfa)]++,this[_0x3cad60(0x12d)]=new Promise((_0x343abd,_0xba088b)=>{var _0x11311a=_0x3cad60;this[_0x11311a(0x106)]()[_0x11311a(0xcb)](_0xb09450=>{var _0x43fada=_0x11311a;let _0x387749=new _0xb09450(_0x43fada(0x157)+(!this[_0x43fada(0x12c)]&&this[_0x43fada(0xe9)]?_0x43fada(0xe0):this[_0x43fada(0x17b)])+':'+this[_0x43fada(0x193)]);_0x387749['onerror']=()=>{var _0x453cb7=_0x43fada;this['_allowedToSend']=!0x1,this[_0x453cb7(0xf8)](_0x387749),this[_0x453cb7(0x18d)](),_0xba088b(new Error(_0x453cb7(0x160)));},_0x387749[_0x43fada(0x191)]=()=>{var _0xdaf47c=_0x43fada;this[_0xdaf47c(0x12c)]||_0x387749['_socket']&&_0x387749[_0xdaf47c(0x112)][_0xdaf47c(0xfc)]&&_0x387749[_0xdaf47c(0x112)]['unref'](),_0x343abd(_0x387749);},_0x387749[_0x43fada(0xe5)]=()=>{var _0xc56748=_0x43fada;this[_0xc56748(0x134)]=!0x0,this[_0xc56748(0xf8)](_0x387749),this[_0xc56748(0x18d)]();},_0x387749[_0x43fada(0xf5)]=_0x47ed3a=>{var _0x28f580=_0x43fada;try{if(!(_0x47ed3a!=null&&_0x47ed3a[_0x28f580(0x1b2)])||!this[_0x28f580(0x123)])return;let _0x479ee5=JSON[_0x28f580(0x19a)](_0x47ed3a['data']);this[_0x28f580(0x123)](_0x479ee5['method'],_0x479ee5[_0x28f580(0x115)],this[_0x28f580(0x15a)],this[_0x28f580(0x12c)]);}catch{}};})[_0x11311a(0xcb)](_0x13520=>(this['_connected']=!0x0,this['_connecting']=!0x1,this[_0x11311a(0x134)]=!0x1,this[_0x11311a(0xbc)]=!0x0,this[_0x11311a(0xfa)]=0x0,_0x13520))[_0x11311a(0x19d)](_0x18f1a9=>(this[_0x11311a(0x16c)]=!0x1,this[_0x11311a(0x19c)]=!0x1,console[_0x11311a(0x1aa)](_0x11311a(0x144)+this['_webSocketErrorDocsLink']),_0xba088b(new Error(_0x11311a(0x117)+(_0x18f1a9&&_0x18f1a9['message'])))));}));}['_disposeWebsocket'](_0x347259){var _0x55188d=_0xfb4f89;this[_0x55188d(0x16c)]=!0x1,this[_0x55188d(0x19c)]=!0x1;try{_0x347259['onclose']=null,_0x347259[_0x55188d(0xd5)]=null,_0x347259[_0x55188d(0x191)]=null;}catch{}try{_0x347259[_0x55188d(0xc3)]<0x2&&_0x347259[_0x55188d(0xd8)]();}catch{}}['_attemptToReconnectShortly'](){var _0x366627=_0xfb4f89;clearTimeout(this[_0x366627(0x177)]),!(this['_connectAttemptCount']>=this['_maxConnectAttemptCount'])&&(this[_0x366627(0x177)]=setTimeout(()=>{var _0x411b7b=_0x366627,_0x5e8f34;this[_0x411b7b(0x16c)]||this[_0x411b7b(0x19c)]||(this[_0x411b7b(0x1ae)](),(_0x5e8f34=this[_0x411b7b(0x12d)])==null||_0x5e8f34[_0x411b7b(0x19d)](()=>this[_0x411b7b(0x18d)]()));},0x1f4),this['_reconnectTimeout'][_0x366627(0xfc)]&&this[_0x366627(0x177)][_0x366627(0xfc)]());}async[_0xfb4f89(0x119)](_0x23f51e){var _0x337959=_0xfb4f89;try{if(!this['_allowedToSend'])return;this[_0x337959(0x134)]&&this[_0x337959(0x1ae)](),(await this['_ws'])['send'](JSON[_0x337959(0xf1)](_0x23f51e));}catch(_0x5b0fbc){console['warn'](this[_0x337959(0x195)]+':\\x20'+(_0x5b0fbc&&_0x5b0fbc[_0x337959(0x135)])),this[_0x337959(0xbc)]=!0x1,this[_0x337959(0x18d)]();}}};function q(_0x24daeb,_0xb6f519,_0x552a83,_0x4172cf,_0x76dbb7,_0x506843,_0xbf75ac,_0x3ac2c4=ie){var _0x5b9d64=_0xfb4f89;let _0x4b9373=_0x552a83[_0x5b9d64(0xe8)](',')[_0x5b9d64(0x13e)](_0x5dbfe4=>{var _0x66c71b=_0x5b9d64,_0x9e1668,_0x5a37d5,_0x13a0cc,_0x3e3cc6;try{if(!_0x24daeb[_0x66c71b(0xf0)]){let _0x280f70=((_0x5a37d5=(_0x9e1668=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x9e1668['versions'])==null?void 0x0:_0x5a37d5[_0x66c71b(0x182)])||((_0x3e3cc6=(_0x13a0cc=_0x24daeb[_0x66c71b(0x170)])==null?void 0x0:_0x13a0cc[_0x66c71b(0x169)])==null?void 0x0:_0x3e3cc6[_0x66c71b(0xcf)])===_0x66c71b(0x132);(_0x76dbb7==='next.js'||_0x76dbb7===_0x66c71b(0x149)||_0x76dbb7===_0x66c71b(0x18a)||_0x76dbb7==='angular')&&(_0x76dbb7+=_0x280f70?_0x66c71b(0x1b1):_0x66c71b(0xbf)),_0x24daeb['_console_ninja_session']={'id':+new Date(),'tool':_0x76dbb7},_0xbf75ac&&_0x76dbb7&&!_0x280f70&&console[_0x66c71b(0xd9)](_0x66c71b(0xcc)+(_0x76dbb7[_0x66c71b(0x1a3)](0x0)[_0x66c71b(0x103)]()+_0x76dbb7[_0x66c71b(0x18b)](0x1))+',','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)',_0x66c71b(0x11a));}let _0x14c600=new Z(_0x24daeb,_0xb6f519,_0x5dbfe4,_0x4172cf,_0x506843,_0x3ac2c4);return _0x14c600[_0x66c71b(0x119)][_0x66c71b(0xdf)](_0x14c600);}catch(_0x9ef8db){return console[_0x66c71b(0x1aa)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0x9ef8db&&_0x9ef8db['message']),()=>{};}});return _0x418120=>_0x4b9373['forEach'](_0x28c9a5=>_0x28c9a5(_0x418120));}function _0x3ff9(_0xe67838,_0x6d1486){var _0x26ed68=_0x26ed();return _0x3ff9=function(_0x3ff920,_0x489329){_0x3ff920=_0x3ff920-0xbb;var _0x3995cc=_0x26ed68[_0x3ff920];return _0x3995cc;},_0x3ff9(_0xe67838,_0x6d1486);}function ie(_0x57727f,_0x4b37c7,_0x14dabd,_0x5b90a9){var _0x440899=_0xfb4f89;_0x5b90a9&&_0x57727f===_0x440899(0x158)&&_0x14dabd['location']['reload']();}function B(_0x26c9ac){var _0x47f085=_0xfb4f89,_0x3ecb7a,_0x47b516;let _0x220806=function(_0x3a020e,_0x53c69a){return _0x53c69a-_0x3a020e;},_0x2108c2;if(_0x26c9ac[_0x47f085(0x104)])_0x2108c2=function(){var _0x337423=_0x47f085;return _0x26c9ac[_0x337423(0x104)][_0x337423(0x11e)]();};else{if(_0x26c9ac[_0x47f085(0x170)]&&_0x26c9ac[_0x47f085(0x170)][_0x47f085(0x165)]&&((_0x47b516=(_0x3ecb7a=_0x26c9ac['process'])==null?void 0x0:_0x3ecb7a[_0x47f085(0x169)])==null?void 0x0:_0x47b516['NEXT_RUNTIME'])!=='edge')_0x2108c2=function(){return _0x26c9ac['process']['hrtime']();},_0x220806=function(_0x341fb3,_0x2c6618){return 0x3e8*(_0x2c6618[0x0]-_0x341fb3[0x0])+(_0x2c6618[0x1]-_0x341fb3[0x1])/0xf4240;};else try{let {performance:_0x416a52}=require(_0x47f085(0x179));_0x2108c2=function(){var _0x48150f=_0x47f085;return _0x416a52[_0x48150f(0x11e)]();};}catch{_0x2108c2=function(){return+new Date();};}}return{'elapsed':_0x220806,'timeStamp':_0x2108c2,'now':()=>Date['now']()};}function H(_0xcbdc20,_0x1ce242,_0x1b66cf){var _0xa13825=_0xfb4f89,_0x36e26f,_0x2d652c,_0x5e73f3,_0x21ac45,_0x17eb79;if(_0xcbdc20['_consoleNinjaAllowedToStart']!==void 0x0)return _0xcbdc20[_0xa13825(0x155)];let _0x40bb2b=((_0x2d652c=(_0x36e26f=_0xcbdc20['process'])==null?void 0x0:_0x36e26f[_0xa13825(0xd2)])==null?void 0x0:_0x2d652c[_0xa13825(0x182)])||((_0x21ac45=(_0x5e73f3=_0xcbdc20[_0xa13825(0x170)])==null?void 0x0:_0x5e73f3['env'])==null?void 0x0:_0x21ac45[_0xa13825(0xcf)])==='edge';function _0x3e8cd8(_0x3787d6){var _0x52530a=_0xa13825;if(_0x3787d6[_0x52530a(0x1b6)]('/')&&_0x3787d6[_0x52530a(0x148)]('/')){let _0x523815=new RegExp(_0x3787d6['slice'](0x1,-0x1));return _0x5ebf2a=>_0x523815[_0x52530a(0x178)](_0x5ebf2a);}else{if(_0x3787d6['includes']('*')||_0x3787d6[_0x52530a(0x16e)]('?')){let _0x185e95=new RegExp('^'+_0x3787d6['replace'](/\\./g,String[_0x52530a(0x1b8)](0x5c)+'.')['replace'](/\\*/g,'.*')['replace'](/\\?/g,'.')+String[_0x52530a(0x1b8)](0x24));return _0x175863=>_0x185e95[_0x52530a(0x178)](_0x175863);}else return _0x274ecc=>_0x274ecc===_0x3787d6;}}let _0x4b6171=_0x1ce242['map'](_0x3e8cd8);return _0xcbdc20['_consoleNinjaAllowedToStart']=_0x40bb2b||!_0x1ce242,!_0xcbdc20['_consoleNinjaAllowedToStart']&&((_0x17eb79=_0xcbdc20['location'])==null?void 0x0:_0x17eb79[_0xa13825(0x1a8)])&&(_0xcbdc20[_0xa13825(0x155)]=_0x4b6171[_0xa13825(0x14d)](_0x5c10f1=>_0x5c10f1(_0xcbdc20['location']['hostname']))),_0xcbdc20[_0xa13825(0x155)];}function X(_0x363d55,_0x1d9169,_0x46ca90,_0x46f67c){var _0x10ed28=_0xfb4f89;_0x363d55=_0x363d55,_0x1d9169=_0x1d9169,_0x46ca90=_0x46ca90,_0x46f67c=_0x46f67c;let _0x92ac1e=B(_0x363d55),_0x224ffb=_0x92ac1e[_0x10ed28(0x181)],_0x4ebef8=_0x92ac1e[_0x10ed28(0x11d)];class _0x328bde{constructor(){var _0x3c2acc=_0x10ed28;this[_0x3c2acc(0x136)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x3c2acc(0x141)]=/^(0|[1-9][0-9]*)$/,this[_0x3c2acc(0xe6)]=/'([^\\\\']|\\\\')*'/,this[_0x3c2acc(0x167)]=_0x363d55[_0x3c2acc(0xc7)],this[_0x3c2acc(0x15d)]=_0x363d55['HTMLAllCollection'],this[_0x3c2acc(0x19f)]=Object[_0x3c2acc(0x1a4)],this['_getOwnPropertyNames']=Object[_0x3c2acc(0x129)],this[_0x3c2acc(0xed)]=_0x363d55[_0x3c2acc(0x16f)],this['_regExpToString']=RegExp['prototype'][_0x3c2acc(0x14e)],this[_0x3c2acc(0x130)]=Date[_0x3c2acc(0xe3)][_0x3c2acc(0x14e)];}[_0x10ed28(0xfd)](_0x5863e0,_0x563675,_0x25dde8,_0x4235ab){var _0x5eac97=_0x10ed28,_0x15d2ae=this,_0x48a558=_0x25dde8[_0x5eac97(0x1a2)];function _0x34c0d4(_0x2959d0,_0x3e333c,_0x6ec96e){var _0x29ad7b=_0x5eac97;_0x3e333c[_0x29ad7b(0x100)]=_0x29ad7b(0xff),_0x3e333c[_0x29ad7b(0x17c)]=_0x2959d0[_0x29ad7b(0x135)],_0x2a098b=_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)],_0x6ec96e[_0x29ad7b(0x182)][_0x29ad7b(0x19e)]=_0x3e333c,_0x15d2ae[_0x29ad7b(0x168)](_0x3e333c,_0x6ec96e);}try{_0x25dde8['level']++,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x171)](_0x563675);var _0x5e937d,_0x4d4837,_0x7a94ce,_0x12e437,_0x54273c=[],_0x3076d3=[],_0x4a27d5,_0x1f1aa0=this[_0x5eac97(0x13c)](_0x563675),_0x1fe8fc=_0x1f1aa0==='array',_0x1d9d33=!0x1,_0x1f7cfe=_0x1f1aa0===_0x5eac97(0x120),_0x3084ae=this[_0x5eac97(0x173)](_0x1f1aa0),_0xc35bc7=this[_0x5eac97(0x13d)](_0x1f1aa0),_0x48d9e1=_0x3084ae||_0xc35bc7,_0x590449={},_0x29fc28=0x0,_0x31b022=!0x1,_0x2a098b,_0x14e2a6=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x25dde8[_0x5eac97(0x159)]){if(_0x1fe8fc){if(_0x4d4837=_0x563675[_0x5eac97(0xf4)],_0x4d4837>_0x25dde8[_0x5eac97(0xc8)]){for(_0x7a94ce=0x0,_0x12e437=_0x25dde8['elements'],_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));_0x5863e0[_0x5eac97(0x142)]=!0x0;}else{for(_0x7a94ce=0x0,_0x12e437=_0x4d4837,_0x5e937d=_0x7a94ce;_0x5e937d<_0x12e437;_0x5e937d++)_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xe4)](_0x54273c,_0x563675,_0x1f1aa0,_0x5e937d,_0x25dde8));}_0x25dde8[_0x5eac97(0x110)]+=_0x3076d3[_0x5eac97(0xf4)];}if(!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&!_0x3084ae&&_0x1f1aa0!==_0x5eac97(0x137)&&_0x1f1aa0!==_0x5eac97(0x194)&&_0x1f1aa0!==_0x5eac97(0x17f)){var _0x3a0092=_0x4235ab[_0x5eac97(0x17d)]||_0x25dde8[_0x5eac97(0x17d)];if(this[_0x5eac97(0x15e)](_0x563675)?(_0x5e937d=0x0,_0x563675[_0x5eac97(0x10a)](function(_0x4b3319){var _0x3d2aa8=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x3d2aa8(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x3d2aa8(0x1a2)]&&_0x25dde8['autoExpandPropertyCount']>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}_0x3076d3[_0x3d2aa8(0x171)](_0x15d2ae[_0x3d2aa8(0xe4)](_0x54273c,_0x563675,_0x3d2aa8(0x19b),_0x5e937d++,_0x25dde8,function(_0x5e7ebe){return function(){return _0x5e7ebe;};}(_0x4b3319)));})):this[_0x5eac97(0x164)](_0x563675)&&_0x563675[_0x5eac97(0x10a)](function(_0x789f9,_0x40bfed){var _0x595515=_0x5eac97;if(_0x29fc28++,_0x25dde8[_0x595515(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;return;}if(!_0x25dde8['isExpressionToEvaluate']&&_0x25dde8[_0x595515(0x1a2)]&&_0x25dde8[_0x595515(0x110)]>_0x25dde8['autoExpandLimit']){_0x31b022=!0x0;return;}var _0x14d096=_0x40bfed[_0x595515(0x14e)]();_0x14d096[_0x595515(0xf4)]>0x64&&(_0x14d096=_0x14d096['slice'](0x0,0x64)+_0x595515(0x1ac)),_0x3076d3[_0x595515(0x171)](_0x15d2ae[_0x595515(0xe4)](_0x54273c,_0x563675,_0x595515(0xeb),_0x14d096,_0x25dde8,function(_0x8448c2){return function(){return _0x8448c2;};}(_0x789f9)));}),!_0x1d9d33){try{for(_0x4a27d5 in _0x563675)if(!(_0x1fe8fc&&_0x14e2a6['test'](_0x4a27d5))&&!this['_blacklistedProperty'](_0x563675,_0x4a27d5,_0x25dde8)){if(_0x29fc28++,_0x25dde8[_0x5eac97(0x110)]++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3[_0x5eac97(0x171)](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}catch{}if(_0x590449[_0x5eac97(0x176)]=!0x0,_0x1f7cfe&&(_0x590449['_p_name']=!0x0),!_0x31b022){var _0x18c0f5=[][_0x5eac97(0x14c)](this[_0x5eac97(0x151)](_0x563675))[_0x5eac97(0x14c)](this[_0x5eac97(0x12e)](_0x563675));for(_0x5e937d=0x0,_0x4d4837=_0x18c0f5['length'];_0x5e937d<_0x4d4837;_0x5e937d++)if(_0x4a27d5=_0x18c0f5[_0x5e937d],!(_0x1fe8fc&&_0x14e2a6[_0x5eac97(0x178)](_0x4a27d5[_0x5eac97(0x14e)]()))&&!this[_0x5eac97(0x161)](_0x563675,_0x4a27d5,_0x25dde8)&&!_0x590449[_0x5eac97(0xc5)+_0x4a27d5[_0x5eac97(0x14e)]()]){if(_0x29fc28++,_0x25dde8['autoExpandPropertyCount']++,_0x29fc28>_0x3a0092){_0x31b022=!0x0;break;}if(!_0x25dde8[_0x5eac97(0x1a5)]&&_0x25dde8[_0x5eac97(0x1a2)]&&_0x25dde8[_0x5eac97(0x110)]>_0x25dde8[_0x5eac97(0x146)]){_0x31b022=!0x0;break;}_0x3076d3['push'](_0x15d2ae[_0x5eac97(0xd0)](_0x54273c,_0x590449,_0x563675,_0x1f1aa0,_0x4a27d5,_0x25dde8));}}}}}if(_0x5863e0[_0x5eac97(0x100)]=_0x1f1aa0,_0x48d9e1?(_0x5863e0['value']=_0x563675[_0x5eac97(0xee)](),this[_0x5eac97(0x133)](_0x1f1aa0,_0x5863e0,_0x25dde8,_0x4235ab)):_0x1f1aa0===_0x5eac97(0xd7)?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0x130)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0x17f)?_0x5863e0[_0x5eac97(0x1a0)]=_0x563675[_0x5eac97(0x14e)]():_0x1f1aa0==='RegExp'?_0x5863e0[_0x5eac97(0x1a0)]=this[_0x5eac97(0xe7)][_0x5eac97(0x11c)](_0x563675):_0x1f1aa0===_0x5eac97(0xc6)&&this[_0x5eac97(0xed)]?_0x5863e0[_0x5eac97(0x1a0)]=this['_Symbol'][_0x5eac97(0xe3)][_0x5eac97(0x14e)]['call'](_0x563675):!_0x25dde8['depth']&&!(_0x1f1aa0==='null'||_0x1f1aa0===_0x5eac97(0xc7))&&(delete _0x5863e0['value'],_0x5863e0['capped']=!0x0),_0x31b022&&(_0x5863e0[_0x5eac97(0x116)]=!0x0),_0x2a098b=_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)],_0x25dde8[_0x5eac97(0x182)][_0x5eac97(0x19e)]=_0x5863e0,this[_0x5eac97(0x168)](_0x5863e0,_0x25dde8),_0x3076d3[_0x5eac97(0xf4)]){for(_0x5e937d=0x0,_0x4d4837=_0x3076d3[_0x5eac97(0xf4)];_0x5e937d<_0x4d4837;_0x5e937d++)_0x3076d3[_0x5e937d](_0x5e937d);}_0x54273c[_0x5eac97(0xf4)]&&(_0x5863e0[_0x5eac97(0x17d)]=_0x54273c);}catch(_0x5b6a62){_0x34c0d4(_0x5b6a62,_0x5863e0,_0x25dde8);}return this[_0x5eac97(0x14f)](_0x563675,_0x5863e0),this['_treeNodePropertiesAfterFullValue'](_0x5863e0,_0x25dde8),_0x25dde8['node'][_0x5eac97(0x19e)]=_0x2a098b,_0x25dde8['level']--,_0x25dde8[_0x5eac97(0x1a2)]=_0x48a558,_0x25dde8['autoExpand']&&_0x25dde8[_0x5eac97(0x10d)][_0x5eac97(0x162)](),_0x5863e0;}[_0x10ed28(0x12e)](_0x5e7e45){var _0x111dd1=_0x10ed28;return Object[_0x111dd1(0x190)]?Object[_0x111dd1(0x190)](_0x5e7e45):[];}[_0x10ed28(0x15e)](_0x5b69a9){var _0x55ac27=_0x10ed28;return!!(_0x5b69a9&&_0x363d55[_0x55ac27(0x19b)]&&this[_0x55ac27(0x152)](_0x5b69a9)===_0x55ac27(0x147)&&_0x5b69a9[_0x55ac27(0x10a)]);}['_blacklistedProperty'](_0x28b15f,_0x581dd6,_0x32226c){var _0x247a74=_0x10ed28;return _0x32226c[_0x247a74(0xef)]?typeof _0x28b15f[_0x581dd6]==_0x247a74(0x120):!0x1;}[_0x10ed28(0x13c)](_0x352136){var _0x47498e=_0x10ed28,_0x456822='';return _0x456822=typeof _0x352136,_0x456822===_0x47498e(0x143)?this[_0x47498e(0x152)](_0x352136)===_0x47498e(0x180)?_0x456822=_0x47498e(0x1a7):this[_0x47498e(0x152)](_0x352136)===_0x47498e(0xdd)?_0x456822='date':this['_objectToString'](_0x352136)===_0x47498e(0xbb)?_0x456822=_0x47498e(0x17f):_0x352136===null?_0x456822=_0x47498e(0x1b4):_0x352136[_0x47498e(0x10e)]&&(_0x456822=_0x352136[_0x47498e(0x10e)][_0x47498e(0xc1)]||_0x456822):_0x456822==='undefined'&&this[_0x47498e(0x15d)]&&_0x352136 instanceof this[_0x47498e(0x15d)]&&(_0x456822=_0x47498e(0xc0)),_0x456822;}['_objectToString'](_0x1de66c){var _0x473e65=_0x10ed28;return Object[_0x473e65(0xe3)]['toString'][_0x473e65(0x11c)](_0x1de66c);}[_0x10ed28(0x173)](_0x1b731a){var _0xb60b14=_0x10ed28;return _0x1b731a===_0xb60b14(0xe1)||_0x1b731a===_0xb60b14(0x102)||_0x1b731a===_0xb60b14(0xde);}['_isPrimitiveWrapperType'](_0x331b09){var _0x16d7d9=_0x10ed28;return _0x331b09===_0x16d7d9(0x154)||_0x331b09===_0x16d7d9(0x137)||_0x331b09===_0x16d7d9(0x131);}[_0x10ed28(0xe4)](_0x29c99b,_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49){var _0x458f4f=this;return function(_0x530f99){var _0x374746=_0x3ff9,_0x60df83=_0x178327[_0x374746(0x182)][_0x374746(0x19e)],_0x25a209=_0x178327[_0x374746(0x182)][_0x374746(0x1a9)],_0x290e99=_0x178327[_0x374746(0x182)]['parent'];_0x178327[_0x374746(0x182)][_0x374746(0xce)]=_0x60df83,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=typeof _0x3076bc==_0x374746(0xde)?_0x3076bc:_0x530f99,_0x29c99b[_0x374746(0x171)](_0x458f4f[_0x374746(0x1b5)](_0x2f4876,_0x1d2f4f,_0x3076bc,_0x178327,_0x2eec49)),_0x178327['node'][_0x374746(0xce)]=_0x290e99,_0x178327[_0x374746(0x182)][_0x374746(0x1a9)]=_0x25a209;};}[_0x10ed28(0xd0)](_0x83b0e,_0x4dbfb7,_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415){var _0x4ff80c=_0x10ed28,_0x3c23d4=this;return _0x4dbfb7[_0x4ff80c(0xc5)+_0xf742cb['toString']()]=!0x0,function(_0x3abd65){var _0x4ac95e=_0x4ff80c,_0x2c9c3f=_0x5e0402[_0x4ac95e(0x182)]['current'],_0x2635bd=_0x5e0402[_0x4ac95e(0x182)][_0x4ac95e(0x1a9)],_0xc2e0d=_0x5e0402['node'][_0x4ac95e(0xce)];_0x5e0402['node'][_0x4ac95e(0xce)]=_0x2c9c3f,_0x5e0402[_0x4ac95e(0x182)]['index']=_0x3abd65,_0x83b0e[_0x4ac95e(0x171)](_0x3c23d4[_0x4ac95e(0x1b5)](_0x57825e,_0x50f25e,_0xf742cb,_0x5e0402,_0x2df415)),_0x5e0402['node'][_0x4ac95e(0xce)]=_0xc2e0d,_0x5e0402['node'][_0x4ac95e(0x1a9)]=_0x2635bd;};}[_0x10ed28(0x1b5)](_0xf38ac3,_0x5bdcfd,_0x290e62,_0x7990cf,_0x48e604){var _0x1aa57e=_0x10ed28,_0x2bff8c=this;_0x48e604||(_0x48e604=function(_0x43ba8f,_0x597d26){return _0x43ba8f[_0x597d26];});var _0x48a20e=_0x290e62[_0x1aa57e(0x14e)](),_0xd6873d=_0x7990cf[_0x1aa57e(0x138)]||{},_0x7426f3=_0x7990cf[_0x1aa57e(0x159)],_0x3f3199=_0x7990cf[_0x1aa57e(0x1a5)];try{var _0x18b702=this['_isMap'](_0xf38ac3),_0x5a1ae4=_0x48a20e;_0x18b702&&_0x5a1ae4[0x0]==='\\x27'&&(_0x5a1ae4=_0x5a1ae4['substr'](0x1,_0x5a1ae4[_0x1aa57e(0xf4)]-0x2));var _0x6af1a1=_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d['_p_'+_0x5a1ae4];_0x6af1a1&&(_0x7990cf[_0x1aa57e(0x159)]=_0x7990cf[_0x1aa57e(0x159)]+0x1),_0x7990cf[_0x1aa57e(0x1a5)]=!!_0x6af1a1;var _0x2333d7=typeof _0x290e62==_0x1aa57e(0xc6),_0x22cba0={'name':_0x2333d7||_0x18b702?_0x48a20e:this['_propertyName'](_0x48a20e)};if(_0x2333d7&&(_0x22cba0[_0x1aa57e(0xc6)]=!0x0),!(_0x5bdcfd===_0x1aa57e(0x1a7)||_0x5bdcfd===_0x1aa57e(0x12f))){var _0x156b6d=this[_0x1aa57e(0x19f)](_0xf38ac3,_0x290e62);if(_0x156b6d&&(_0x156b6d['set']&&(_0x22cba0['setter']=!0x0),_0x156b6d[_0x1aa57e(0x107)]&&!_0x6af1a1&&!_0x7990cf[_0x1aa57e(0x198)]))return _0x22cba0['getter']=!0x0,this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x36fd25;try{_0x36fd25=_0x48e604(_0xf38ac3,_0x290e62);}catch(_0x210082){return _0x22cba0={'name':_0x48a20e,'type':_0x1aa57e(0xff),'error':_0x210082[_0x1aa57e(0x135)]},this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf),_0x22cba0;}var _0x15c01e=this[_0x1aa57e(0x13c)](_0x36fd25),_0x1aab99=this[_0x1aa57e(0x173)](_0x15c01e);if(_0x22cba0['type']=_0x15c01e,_0x1aab99)this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x4f8d75=_0x1aa57e;_0x22cba0[_0x4f8d75(0x1a0)]=_0x36fd25['valueOf'](),!_0x6af1a1&&_0x2bff8c[_0x4f8d75(0x133)](_0x15c01e,_0x22cba0,_0x7990cf,{});});else{var _0x335f59=_0x7990cf[_0x1aa57e(0x1a2)]&&_0x7990cf['level']<_0x7990cf['autoExpandMaxDepth']&&_0x7990cf[_0x1aa57e(0x10d)][_0x1aa57e(0xd4)](_0x36fd25)<0x0&&_0x15c01e!==_0x1aa57e(0x120)&&_0x7990cf[_0x1aa57e(0x110)]<_0x7990cf['autoExpandLimit'];_0x335f59||_0x7990cf[_0x1aa57e(0x188)]<_0x7426f3||_0x6af1a1?(this['serialize'](_0x22cba0,_0x36fd25,_0x7990cf,_0x6af1a1||{}),this[_0x1aa57e(0x14f)](_0x36fd25,_0x22cba0)):this[_0x1aa57e(0x17a)](_0x22cba0,_0x7990cf,_0x36fd25,function(){var _0x53d000=_0x1aa57e;_0x15c01e===_0x53d000(0x1b4)||_0x15c01e===_0x53d000(0xc7)||(delete _0x22cba0[_0x53d000(0x1a0)],_0x22cba0[_0x53d000(0x183)]=!0x0);});}return _0x22cba0;}finally{_0x7990cf[_0x1aa57e(0x138)]=_0xd6873d,_0x7990cf[_0x1aa57e(0x159)]=_0x7426f3,_0x7990cf[_0x1aa57e(0x1a5)]=_0x3f3199;}}['_capIfString'](_0x96020c,_0x4e4cc3,_0xaeab36,_0x1e5657){var _0x2356e4=_0x10ed28,_0x2bbfa6=_0x1e5657['strLength']||_0xaeab36[_0x2356e4(0x108)];if((_0x96020c===_0x2356e4(0x102)||_0x96020c===_0x2356e4(0x137))&&_0x4e4cc3['value']){let _0x2e0d21=_0x4e4cc3['value'][_0x2356e4(0xf4)];_0xaeab36['allStrLength']+=_0x2e0d21,_0xaeab36['allStrLength']>_0xaeab36[_0x2356e4(0xf3)]?(_0x4e4cc3[_0x2356e4(0x183)]='',delete _0x4e4cc3['value']):_0x2e0d21>_0x2bbfa6&&(_0x4e4cc3[_0x2356e4(0x183)]=_0x4e4cc3[_0x2356e4(0x1a0)][_0x2356e4(0x18b)](0x0,_0x2bbfa6),delete _0x4e4cc3[_0x2356e4(0x1a0)]);}}[_0x10ed28(0x164)](_0x3efef3){var _0x3488ac=_0x10ed28;return!!(_0x3efef3&&_0x363d55[_0x3488ac(0xeb)]&&this[_0x3488ac(0x152)](_0x3efef3)===_0x3488ac(0x1af)&&_0x3efef3[_0x3488ac(0x10a)]);}[_0x10ed28(0xc4)](_0x11c35b){var _0x23453d=_0x10ed28;if(_0x11c35b[_0x23453d(0xf6)](/^\\d+$/))return _0x11c35b;var _0x4f6a03;try{_0x4f6a03=JSON[_0x23453d(0xf1)](''+_0x11c35b);}catch{_0x4f6a03='\\x22'+this[_0x23453d(0x152)](_0x11c35b)+'\\x22';}return _0x4f6a03[_0x23453d(0xf6)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x4f6a03=_0x4f6a03['substr'](0x1,_0x4f6a03['length']-0x2):_0x4f6a03=_0x4f6a03[_0x23453d(0x166)](/'/g,'\\x5c\\x27')['replace'](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x4f6a03;}[_0x10ed28(0x17a)](_0x55cc47,_0x11bab3,_0x41718f,_0x163b6a){var _0x47c902=_0x10ed28;this[_0x47c902(0x168)](_0x55cc47,_0x11bab3),_0x163b6a&&_0x163b6a(),this['_additionalMetadata'](_0x41718f,_0x55cc47),this['_treeNodePropertiesAfterFullValue'](_0x55cc47,_0x11bab3);}[_0x10ed28(0x168)](_0x3f8b3a,_0x4d5884){var _0x49c69e=_0x10ed28;this[_0x49c69e(0x12b)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0xca)](_0x3f8b3a,_0x4d5884),this[_0x49c69e(0x18e)](_0x3f8b3a,_0x4d5884),this['_setNodePermissions'](_0x3f8b3a,_0x4d5884);}[_0x10ed28(0x12b)](_0x24d5f8,_0x14eaea){}[_0x10ed28(0xca)](_0x576a32,_0x687c5){}[_0x10ed28(0xbd)](_0x489c9e,_0xf76957){}[_0x10ed28(0x140)](_0x40bd6c){return _0x40bd6c===this['_undefined'];}[_0x10ed28(0xf2)](_0x59dbd7,_0x39b993){var _0x4aab34=_0x10ed28;this[_0x4aab34(0xbd)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x196)](_0x59dbd7),_0x39b993[_0x4aab34(0xf9)]&&this['_sortProps'](_0x59dbd7),this[_0x4aab34(0x15f)](_0x59dbd7,_0x39b993),this[_0x4aab34(0xe2)](_0x59dbd7,_0x39b993),this[_0x4aab34(0x111)](_0x59dbd7);}[_0x10ed28(0x14f)](_0x251965,_0x9b93cd){var _0x83cbd4=_0x10ed28;let _0xcd393f;try{_0x363d55[_0x83cbd4(0x174)]&&(_0xcd393f=_0x363d55[_0x83cbd4(0x174)]['error'],_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=function(){}),_0x251965&&typeof _0x251965[_0x83cbd4(0xf4)]==_0x83cbd4(0xde)&&(_0x9b93cd[_0x83cbd4(0xf4)]=_0x251965[_0x83cbd4(0xf4)]);}catch{}finally{_0xcd393f&&(_0x363d55[_0x83cbd4(0x174)][_0x83cbd4(0x17c)]=_0xcd393f);}if(_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0xde)||_0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x131)){if(isNaN(_0x9b93cd[_0x83cbd4(0x1a0)]))_0x9b93cd['nan']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];else switch(_0x9b93cd[_0x83cbd4(0x1a0)]){case Number[_0x83cbd4(0x192)]:_0x9b93cd[_0x83cbd4(0x175)]=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case Number[_0x83cbd4(0x185)]:_0x9b93cd['negativeInfinity']=!0x0,delete _0x9b93cd[_0x83cbd4(0x1a0)];break;case 0x0:this[_0x83cbd4(0x101)](_0x9b93cd[_0x83cbd4(0x1a0)])&&(_0x9b93cd[_0x83cbd4(0x124)]=!0x0);break;}}else _0x9b93cd[_0x83cbd4(0x100)]===_0x83cbd4(0x120)&&typeof _0x251965[_0x83cbd4(0xc1)]==_0x83cbd4(0x102)&&_0x251965[_0x83cbd4(0xc1)]&&_0x9b93cd[_0x83cbd4(0xc1)]&&_0x251965['name']!==_0x9b93cd[_0x83cbd4(0xc1)]&&(_0x9b93cd[_0x83cbd4(0xda)]=_0x251965['name']);}[_0x10ed28(0x101)](_0xdc72f6){var _0x396f32=_0x10ed28;return 0x1/_0xdc72f6===Number[_0x396f32(0x185)];}[_0x10ed28(0x114)](_0xc49f59){var _0x15d31a=_0x10ed28;!_0xc49f59[_0x15d31a(0x17d)]||!_0xc49f59[_0x15d31a(0x17d)]['length']||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x1a7)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0xeb)||_0xc49f59[_0x15d31a(0x100)]===_0x15d31a(0x19b)||_0xc49f59[_0x15d31a(0x17d)][_0x15d31a(0x17e)](function(_0x521a66,_0x3037b9){var _0x19b3c8=_0x15d31a,_0x30740f=_0x521a66[_0x19b3c8(0xc1)][_0x19b3c8(0x199)](),_0x377ff1=_0x3037b9[_0x19b3c8(0xc1)]['toLowerCase']();return _0x30740f<_0x377ff1?-0x1:_0x30740f>_0x377ff1?0x1:0x0;});}['_addFunctionsNode'](_0x24f146,_0x304fda){var _0x2a0f15=_0x10ed28;if(!(_0x304fda[_0x2a0f15(0xef)]||!_0x24f146[_0x2a0f15(0x17d)]||!_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)])){for(var _0x14c9f5=[],_0x4d9ee4=[],_0x488f79=0x0,_0x101a34=_0x24f146[_0x2a0f15(0x17d)][_0x2a0f15(0xf4)];_0x488f79<_0x101a34;_0x488f79++){var _0x19651f=_0x24f146[_0x2a0f15(0x17d)][_0x488f79];_0x19651f[_0x2a0f15(0x100)]===_0x2a0f15(0x120)?_0x14c9f5[_0x2a0f15(0x171)](_0x19651f):_0x4d9ee4['push'](_0x19651f);}if(!(!_0x4d9ee4[_0x2a0f15(0xf4)]||_0x14c9f5['length']<=0x1)){_0x24f146['props']=_0x4d9ee4;var _0x230bec={'functionsNode':!0x0,'props':_0x14c9f5};this[_0x2a0f15(0x12b)](_0x230bec,_0x304fda),this[_0x2a0f15(0xbd)](_0x230bec,_0x304fda),this[_0x2a0f15(0x196)](_0x230bec),this[_0x2a0f15(0xfe)](_0x230bec,_0x304fda),_0x230bec['id']+='\\x20f',_0x24f146['props'][_0x2a0f15(0x1ad)](_0x230bec);}}}[_0x10ed28(0xe2)](_0x468e99,_0x4388f0){}['_setNodeExpandableState'](_0x5eb717){}[_0x10ed28(0x121)](_0x38c05c){var _0x1aee1a=_0x10ed28;return Array[_0x1aee1a(0x172)](_0x38c05c)||typeof _0x38c05c==_0x1aee1a(0x143)&&this[_0x1aee1a(0x152)](_0x38c05c)===_0x1aee1a(0x180);}['_setNodePermissions'](_0x4eefa0,_0x1705a9){}[_0x10ed28(0x111)](_0x516906){var _0x236906=_0x10ed28;delete _0x516906[_0x236906(0x10f)],delete _0x516906['_hasSetOnItsPath'],delete _0x516906[_0x236906(0x125)];}[_0x10ed28(0x18e)](_0x23c1c2,_0x29a21b){}}let _0x4e7d7d=new _0x328bde(),_0x3886ea={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x30c557={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x586d36(_0x54f3be,_0x181b1a,_0x2b7eb5,_0x1dd634,_0x49c07c,_0x397446){var _0x2f18dd=_0x10ed28;let _0x4e7f72,_0x1de5a1;try{_0x1de5a1=_0x4ebef8(),_0x4e7f72=_0x46ca90[_0x181b1a],!_0x4e7f72||_0x1de5a1-_0x4e7f72['ts']>0x1f4&&_0x4e7f72[_0x2f18dd(0x118)]&&_0x4e7f72['time']/_0x4e7f72[_0x2f18dd(0x118)]<0x64?(_0x46ca90[_0x181b1a]=_0x4e7f72={'count':0x0,'time':0x0,'ts':_0x1de5a1},_0x46ca90[_0x2f18dd(0x128)]={}):_0x1de5a1-_0x46ca90[_0x2f18dd(0x128)]['ts']>0x32&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]&&_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]/_0x46ca90[_0x2f18dd(0x128)]['count']<0x64&&(_0x46ca90[_0x2f18dd(0x128)]={});let _0x4ddd3d=[],_0x2c1b45=_0x4e7f72[_0x2f18dd(0x184)]||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]?_0x30c557:_0x3886ea,_0x398af5=_0x30c84c=>{var _0x988e3b=_0x2f18dd;let _0x14b3dc={};return _0x14b3dc[_0x988e3b(0x17d)]=_0x30c84c['props'],_0x14b3dc[_0x988e3b(0xc8)]=_0x30c84c['elements'],_0x14b3dc[_0x988e3b(0x108)]=_0x30c84c[_0x988e3b(0x108)],_0x14b3dc[_0x988e3b(0xf3)]=_0x30c84c[_0x988e3b(0xf3)],_0x14b3dc[_0x988e3b(0x146)]=_0x30c84c[_0x988e3b(0x146)],_0x14b3dc[_0x988e3b(0x1b7)]=_0x30c84c[_0x988e3b(0x1b7)],_0x14b3dc[_0x988e3b(0xf9)]=!0x1,_0x14b3dc[_0x988e3b(0xef)]=!_0x1d9169,_0x14b3dc[_0x988e3b(0x159)]=0x1,_0x14b3dc[_0x988e3b(0x188)]=0x0,_0x14b3dc[_0x988e3b(0x105)]=_0x988e3b(0xbe),_0x14b3dc[_0x988e3b(0x1b9)]=_0x988e3b(0x16b),_0x14b3dc[_0x988e3b(0x1a2)]=!0x0,_0x14b3dc[_0x988e3b(0x10d)]=[],_0x14b3dc[_0x988e3b(0x110)]=0x0,_0x14b3dc[_0x988e3b(0x198)]=!0x0,_0x14b3dc[_0x988e3b(0xdb)]=0x0,_0x14b3dc[_0x988e3b(0x182)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x14b3dc;};for(var _0x4e8b46=0x0;_0x4e8b46<_0x49c07c[_0x2f18dd(0xf4)];_0x4e8b46++)_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d[_0x2f18dd(0xfd)]({'timeNode':_0x54f3be===_0x2f18dd(0x1a1)||void 0x0},_0x49c07c[_0x4e8b46],_0x398af5(_0x2c1b45),{}));if(_0x54f3be===_0x2f18dd(0x1ab)||_0x54f3be===_0x2f18dd(0x17c)){let _0x38886c=Error[_0x2f18dd(0x11f)];try{Error['stackTraceLimit']=0x1/0x0,_0x4ddd3d[_0x2f18dd(0x171)](_0x4e7d7d['serialize']({'stackNode':!0x0},new Error()[_0x2f18dd(0x1b0)],_0x398af5(_0x2c1b45),{'strLength':0x1/0x0}));}finally{Error[_0x2f18dd(0x11f)]=_0x38886c;}}return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':_0x4ddd3d,'id':_0x181b1a,'context':_0x397446}]};}catch(_0x14cd18){return{'method':_0x2f18dd(0xd9),'version':_0x46f67c,'args':[{'ts':_0x2b7eb5,'session':_0x1dd634,'args':[{'type':_0x2f18dd(0xff),'error':_0x14cd18&&_0x14cd18[_0x2f18dd(0x135)]}],'id':_0x181b1a,'context':_0x397446}]};}finally{try{if(_0x4e7f72&&_0x1de5a1){let _0xa0025=_0x4ebef8();_0x4e7f72['count']++,_0x4e7f72['time']+=_0x224ffb(_0x1de5a1,_0xa0025),_0x4e7f72['ts']=_0xa0025,_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]++,_0x46ca90['hits'][_0x2f18dd(0x1a1)]+=_0x224ffb(_0x1de5a1,_0xa0025),_0x46ca90[_0x2f18dd(0x128)]['ts']=_0xa0025,(_0x4e7f72[_0x2f18dd(0x118)]>0x32||_0x4e7f72['time']>0x64)&&(_0x4e7f72[_0x2f18dd(0x184)]=!0x0),(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x118)]>0x3e8||_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x1a1)]>0x12c)&&(_0x46ca90[_0x2f18dd(0x128)][_0x2f18dd(0x184)]=!0x0);}}catch{}}}return _0x586d36;}((_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x4b0ac8,_0x5246af,_0x42bfac,_0x4ca82f,_0x123580,_0x18969d)=>{var _0x407242=_0xfb4f89;if(_0x17891e[_0x407242(0x150)])return _0x17891e[_0x407242(0x150)];if(!H(_0x17891e,_0x42bfac,_0x479ca2))return _0x17891e['_console_ninja']={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x17891e[_0x407242(0x150)];let _0x37610e=B(_0x17891e),_0x3437ca=_0x37610e['elapsed'],_0x25b5e5=_0x37610e['timeStamp'],_0x4bf76b=_0x37610e[_0x407242(0x11e)],_0x125c7d={'hits':{},'ts':{}},_0x15b46a=X(_0x17891e,_0x4ca82f,_0x125c7d,_0x4b0ac8),_0xd5486b=_0x4d30e1=>{_0x125c7d['ts'][_0x4d30e1]=_0x25b5e5();},_0x2d07e6=(_0x5bc355,_0xe34fe)=>{var _0x2339ce=_0x407242;let _0x59fb6a=_0x125c7d['ts'][_0xe34fe];if(delete _0x125c7d['ts'][_0xe34fe],_0x59fb6a){let _0x5921a6=_0x3437ca(_0x59fb6a,_0x25b5e5());_0x2cf290(_0x15b46a(_0x2339ce(0x1a1),_0x5bc355,_0x4bf76b(),_0x253536,[_0x5921a6],_0xe34fe));}},_0x49bcec=_0x43e72f=>{var _0x2e47bf=_0x407242,_0x55d95d;return _0x479ca2===_0x2e47bf(0x139)&&_0x17891e['origin']&&((_0x55d95d=_0x43e72f==null?void 0x0:_0x43e72f['args'])==null?void 0x0:_0x55d95d['length'])&&(_0x43e72f['args'][0x0][_0x2e47bf(0x189)]=_0x17891e['origin']),_0x43e72f;};_0x17891e[_0x407242(0x150)]={'consoleLog':(_0x31c92e,_0x24488d)=>{var _0x93e67e=_0x407242;_0x17891e['console']['log'][_0x93e67e(0xc1)]!=='disabledLog'&&_0x2cf290(_0x15b46a(_0x93e67e(0xd9),_0x31c92e,_0x4bf76b(),_0x253536,_0x24488d));},'consoleTrace':(_0x3b66a7,_0xba880e)=>{var _0x567e13=_0x407242,_0x31716e,_0x5a9c60;_0x17891e[_0x567e13(0x174)]['log'][_0x567e13(0xc1)]!==_0x567e13(0xc2)&&((_0x5a9c60=(_0x31716e=_0x17891e[_0x567e13(0x170)])==null?void 0x0:_0x31716e[_0x567e13(0xd2)])!=null&&_0x5a9c60[_0x567e13(0x182)]&&(_0x17891e[_0x567e13(0x18c)]=!0x0),_0x2cf290(_0x49bcec(_0x15b46a(_0x567e13(0x1ab),_0x3b66a7,_0x4bf76b(),_0x253536,_0xba880e))));},'consoleError':(_0x3fa736,_0x121a3b)=>{var _0x12dfb8=_0x407242;_0x17891e[_0x12dfb8(0x18c)]=!0x0,_0x2cf290(_0x49bcec(_0x15b46a('error',_0x3fa736,_0x4bf76b(),_0x253536,_0x121a3b)));},'consoleTime':_0x1848a7=>{_0xd5486b(_0x1848a7);},'consoleTimeEnd':(_0x31ae65,_0x3d104a)=>{_0x2d07e6(_0x3d104a,_0x31ae65);},'autoLog':(_0x37808,_0x2ad558)=>{var _0x22938b=_0x407242;_0x2cf290(_0x15b46a(_0x22938b(0xd9),_0x2ad558,_0x4bf76b(),_0x253536,[_0x37808]));},'autoLogMany':(_0x161d7e,_0x43dedb)=>{var _0x379506=_0x407242;_0x2cf290(_0x15b46a(_0x379506(0xd9),_0x161d7e,_0x4bf76b(),_0x253536,_0x43dedb));},'autoTrace':(_0x1217e6,_0x446707)=>{var _0x3a5252=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x3a5252(0x1ab),_0x446707,_0x4bf76b(),_0x253536,[_0x1217e6])));},'autoTraceMany':(_0x5b77c4,_0x4fc43a)=>{var _0x5bfbf2=_0x407242;_0x2cf290(_0x49bcec(_0x15b46a(_0x5bfbf2(0x1ab),_0x5b77c4,_0x4bf76b(),_0x253536,_0x4fc43a)));},'autoTime':(_0x24183a,_0x442759,_0x296a4c)=>{_0xd5486b(_0x296a4c);},'autoTimeEnd':(_0x2927a9,_0x243d30,_0x5bd63b)=>{_0x2d07e6(_0x243d30,_0x5bd63b);},'coverage':_0x519fc2=>{var _0x452554=_0x407242;_0x2cf290({'method':_0x452554(0x156),'version':_0x4b0ac8,'args':[{'id':_0x519fc2}]});}};let _0x2cf290=q(_0x17891e,_0x4f4b9c,_0x3fd6d5,_0x1c5422,_0x479ca2,_0x123580,_0x18969d),_0x253536=_0x17891e[_0x407242(0xf0)];return _0x17891e['_console_ninja'];})(globalThis,_0xfb4f89(0x10c),'60591',_0xfb4f89(0xdc),'webpack',_0xfb4f89(0xd3),'1727950005016',_0xfb4f89(0x1a6),_0xfb4f89(0xfb),_0xfb4f89(0x197),_0xfb4f89(0x13a));")}catch(e){}}function r(e,...t){try{c().consoleLog(e,t)}catch(e){}return t}function d(e,...t){try{c().consoleError(e,t)}catch(e){}return t}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFVLElBQ2YsT0FBTyxFQUFJQyxNQUFNLCtCQUFnQyxFQUFJQSxNQUFNLGlwdUNBQy9ELENBQ0EsTUFBT3hTLEdBQUssQ0FBRSxDQUVkLFNBQVN5WSxFQUFNcmMsS0FBTXFXLEdBQUssSUFDdEJGLElBQVFnSyxXQUFXbmdCLEVBQUdxVyxFQUMxQixDQUNBLE1BQU96UyxHQUFLLENBQUUsT0FBT3lTLENBQUcsQ0FTeEIsU0FBU1IsRUFBTTdWLEtBQU1xVyxHQUFLLElBQ3RCRixJQUFRRyxhQUFhdFcsRUFBR3FXLEVBQzVCLENBQ0EsTUFBT3pTLEdBQUssQ0FBRSxPQUFPeVMsQ0FBRyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL3V0aWwvZGlzdC9pbmRleC5lc20yMDE3LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvRmlyZWJhc2UvYmFzZS1maXJlYmFzZS1pbnRlZ3JhdGlvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWNvbmZpZy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL0ZpcmViYXNlL2ZpcmViYXNlLWludGVncmF0aW9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL2V2ZW50LW5hbWVzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL2dsb2JhbC12YXJpYWJsZXMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21tb24vc3RvbmUtY29uZmlnLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tbW9uL3V0aWxzLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9hdWRpby1wbGF5ZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvY2FuY2VsLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9jbG9zZS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvbGV2ZWwtYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL25leHQtYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL25vLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvYnV0dG9ucy9wYXVzZS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvcGxheS1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2J1dHRvbnMvcmV0cnktYnV0dG9uLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9idXR0b25zL3llcy1idXR0b24udHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2ZlZWRiYWNrLXRleHQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL2xldmVsLWluZGljYXRvci50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvbW9uc3Rlci50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvcG9wdXBzL3BhdXNlLXBvcHVwLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvY29tcG9uZW50cy9wb3B1cHMvc3VyZS1wb3B1cC50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvcHJvbXB0LXRleHQudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3N0b25lLWhhbmRsZXIudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3RpbWVyLXRpY2tpbmcudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb25lbnRzL3RyYWlsLXBhcnRpY2xlcy50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvbmVudHMvdHV0b3JpYWwudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb21wb3NpdGlvbnMvYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vc3JjL2NvbXBvc2l0aW9ucy9sZXZlbC1jb25maWcudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9jb25zdGFudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9kYXRhL2FwaS1kYXRhLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvZGF0YS9jdXN0b20tZm9udHMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9kYXRhL2RhdGEtbW9kYWwudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9kYXRhL2dhbWUtc2NvcmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9kYXRhL2kxOC1mb250LW1hcHBpbmcudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9ldmVudHMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9nYW1lcHV6emxlcy93b3JkUHV6emxlTG9naWMudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZUhhbmRsZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZXMvZ2FtZXBsYXktc2NlbmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZXMvbGV2ZWwtc2VsZWN0aW9uLXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL2xldmVsZW5kLXNjZW5lLnRzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9zcmMvc2NlbmVzL2xvYWRpbmctc2NlbmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZXMvc3RhcnQtc2NlbmUudHMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL3NyYy9zY2VuZXMvdGVzdC1nYW1lcGxheS1zY2VuZS50cyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hbmFseXRpY3MvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9hcHAvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9jb21wb25lbnQvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zL2Rpc3QvZXNtL2luZGV4LmVzbTIwMTcuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9AZmlyZWJhc2UvaW5zdGFsbGF0aW9ucy9ub2RlX21vZHVsZXMvaWRiL2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvLi9ub2RlX21vZHVsZXMvQGZpcmViYXNlL2luc3RhbGxhdGlvbnMvbm9kZV9tb2R1bGVzL2lkYi9idWlsZC93cmFwLWlkYi12YWx1ZS5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL0BmaXJlYmFzZS9sb2dnZXIvZGlzdC9lc20vaW5kZXguZXNtMjAxNy5qcyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2FwcC9kaXN0L2VzbS9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy9pZGIvYnVpbGQvd3JhcC1pZGItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy8uL25vZGVfbW9kdWxlcy93b3JrYm94LXdpbmRvdy9idWlsZC93b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZmVlZHRoZW1vbnN0ZXJqcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2ZlZWR0aGVtb25zdGVyanMvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9mZWVkdGhlbW9uc3RlcmpzLy4vZmVlZFRoZU1vbnN0ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBmaWxlb3ZlcnZpZXcgRmlyZWJhc2UgY29uc3RhbnRzLiAgU29tZSBvZiB0aGVzZSAoQGRlZmluZXMpIGNhbiBiZSBvdmVycmlkZGVuIGF0IGNvbXBpbGUtdGltZS5cclxuICovXHJcbmNvbnN0IENPTlNUQU5UUyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBjbGllbnQgTm9kZS5qcyBTREsuXHJcbiAgICAgKi9cclxuICAgIE5PREVfQ0xJRU5UOiBmYWxzZSxcclxuICAgIC8qKlxyXG4gICAgICogQGRlZmluZSB7Ym9vbGVhbn0gV2hldGhlciB0aGlzIGlzIHRoZSBBZG1pbiBOb2RlLmpzIFNESy5cclxuICAgICAqL1xyXG4gICAgTk9ERV9BRE1JTjogZmFsc2UsXHJcbiAgICAvKipcclxuICAgICAqIEZpcmViYXNlIFNESyBWZXJzaW9uXHJcbiAgICAgKi9cclxuICAgIFNES19WRVJTSU9OOiAnJHtKU0NPUkVfVkVSU0lPTn0nXHJcbn07XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIHByb3ZpZGVkIGFzc2VydGlvbiBpcyBmYWxzeVxyXG4gKi9cclxuY29uc3QgYXNzZXJ0ID0gZnVuY3Rpb24gKGFzc2VydGlvbiwgbWVzc2FnZSkge1xyXG4gICAgaWYgKCFhc3NlcnRpb24pIHtcclxuICAgICAgICB0aHJvdyBhc3NlcnRpb25FcnJvcihtZXNzYWdlKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIFJldHVybnMgYW4gRXJyb3Igb2JqZWN0IHN1aXRhYmxlIGZvciB0aHJvd2luZy5cclxuICovXHJcbmNvbnN0IGFzc2VydGlvbkVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgIHJldHVybiBuZXcgRXJyb3IoJ0ZpcmViYXNlIERhdGFiYXNlICgnICtcclxuICAgICAgICBDT05TVEFOVFMuU0RLX1ZFUlNJT04gK1xyXG4gICAgICAgICcpIElOVEVSTkFMIEFTU0VSVCBGQUlMRUQ6ICcgK1xyXG4gICAgICAgIG1lc3NhZ2UpO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSQxID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIGlmIChjIDwgMTI4KSB7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gYztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA8IDIwNDgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiA2KSB8IDE5MjtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyAmIDYzKSB8IDEyODtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiZcclxuICAgICAgICAgICAgaSArIDEgPCBzdHIubGVuZ3RoICYmXHJcbiAgICAgICAgICAgIChzdHIuY2hhckNvZGVBdChpICsgMSkgJiAweGZjMDApID09PSAweGRjMDApIHtcclxuICAgICAgICAgICAgLy8gU3Vycm9nYXRlIFBhaXJcclxuICAgICAgICAgICAgYyA9IDB4MTAwMDAgKyAoKGMgJiAweDAzZmYpIDw8IDEwKSArIChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHgwM2ZmKTtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDEyKSB8IDIyNDtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIFR1cm5zIGFuIGFycmF5IG9mIG51bWJlcnMgaW50byB0aGUgc3RyaW5nIGdpdmVuIGJ5IHRoZSBjb25jYXRlbmF0aW9uIG9mIHRoZVxyXG4gKiBjaGFyYWN0ZXJzIHRvIHdoaWNoIHRoZSBudW1iZXJzIGNvcnJlc3BvbmQuXHJcbiAqIEBwYXJhbSBieXRlcyBBcnJheSBvZiBudW1iZXJzIHJlcHJlc2VudGluZyBjaGFyYWN0ZXJzLlxyXG4gKiBAcmV0dXJuIFN0cmluZ2lmaWNhdGlvbiBvZiB0aGUgYXJyYXkuXHJcbiAqL1xyXG5jb25zdCBieXRlQXJyYXlUb1N0cmluZyA9IGZ1bmN0aW9uIChieXRlcykge1xyXG4gICAgLy8gVE9ETyh1c2VyKTogVXNlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbnMgaWYvd2hlbiBhdmFpbGFibGVcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHBvcyA9IDAsIGMgPSAwO1xyXG4gICAgd2hpbGUgKHBvcyA8IGJ5dGVzLmxlbmd0aCkge1xyXG4gICAgICAgIGNvbnN0IGMxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgIGlmIChjMSA8IDEyOCkge1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoYzEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDE5MSAmJiBjMSA8IDIyNCkge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgb3V0W2MrK10gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoYzEgJiAzMSkgPDwgNikgfCAoYzIgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjMSA+IDIzOSAmJiBjMSA8IDM2NSkge1xyXG4gICAgICAgICAgICAvLyBTdXJyb2dhdGUgUGFpclxyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGNvbnN0IGM0ID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gKCgoYzEgJiA3KSA8PCAxOCkgfCAoKGMyICYgNjMpIDw8IDEyKSB8ICgoYzMgJiA2MykgPDwgNikgfCAoYzQgJiA2MykpIC1cclxuICAgICAgICAgICAgICAgIDB4MTAwMDA7XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgweGQ4MDAgKyAodSA+PiAxMCkpO1xyXG4gICAgICAgICAgICBvdXRbYysrXSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMHhkYzAwICsgKHUgJiAxMDIzKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjMiA9IGJ5dGVzW3BvcysrXTtcclxuICAgICAgICAgICAgY29uc3QgYzMgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIG91dFtjKytdID0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGMxICYgMTUpIDw8IDEyKSB8ICgoYzIgJiA2MykgPDwgNikgfCAoYzMgJiA2MykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBvdXQuam9pbignJyk7XHJcbn07XHJcbi8vIFdlIGRlZmluZSBpdCBhcyBhbiBvYmplY3QgbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY2xhc3MgYmVjYXVzZSBhIGNsYXNzIGNvbXBpbGVkIGRvd24gdG8gZXM1IGNhbid0XHJcbi8vIGJlIHRyZWVzaGFrZWQuIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy8xNjkxXHJcbi8vIFN0YXRpYyBsb29rdXAgbWFwcywgbGF6aWx5IHBvcHVsYXRlZCBieSBpbml0XygpXHJcbmNvbnN0IGJhc2U2NCA9IHtcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byBjaGFyYWN0ZXJzLlxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICBjaGFyVG9CeXRlTWFwXzogbnVsbCxcclxuICAgIC8qKlxyXG4gICAgICogTWFwcyBieXRlcyB0byB3ZWJzYWZlIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBieXRlVG9DaGFyTWFwV2ViU2FmZV86IG51bGwsXHJcbiAgICAvKipcclxuICAgICAqIE1hcHMgd2Vic2FmZSBjaGFyYWN0ZXJzIHRvIGJ5dGVzLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY2hhclRvQnl0ZU1hcFdlYlNhZmVfOiBudWxsLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldCwgc2hhcmVkIGJldHdlZW5cclxuICAgICAqIEVOQ09ERURfVkFMUyBhbmQgRU5DT0RFRF9WQUxTX1dFQlNBRkVcclxuICAgICAqL1xyXG4gICAgRU5DT0RFRF9WQUxTX0JBU0U6ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWicgKyAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonICsgJzAxMjM0NTY3ODknLFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgZGVmYXVsdCBhbHBoYWJldC4gVmFsdWUgNjQgKD0pIGlzIHNwZWNpYWw7IGl0IG1lYW5zIFwibm90aGluZy5cIlxyXG4gICAgICovXHJcbiAgICBnZXQgRU5DT0RFRF9WQUxTKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJysvPSc7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBPdXIgd2Vic2FmZSBhbHBoYWJldC5cclxuICAgICAqL1xyXG4gICAgZ2V0IEVOQ09ERURfVkFMU19XRUJTQUZFKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkVOQ09ERURfVkFMU19CQVNFICsgJy1fLic7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBzdXBwb3J0cyB0aGUgYXRvYiBhbmQgYnRvYSBmdW5jdGlvbnMuIFRoaXMgZXh0ZW5zaW9uXHJcbiAgICAgKiBzdGFydGVkIGF0IE1vemlsbGEgYnV0IGlzIG5vdyBpbXBsZW1lbnRlZCBieSBtYW55IGJyb3dzZXJzLiBXZSB1c2UgdGhlXHJcbiAgICAgKiBBU1NVTUVfKiB2YXJpYWJsZXMgdG8gYXZvaWQgcHVsbGluZyBpbiB0aGUgZnVsbCB1c2VyYWdlbnQgZGV0ZWN0aW9uIGxpYnJhcnlcclxuICAgICAqIGJ1dCBzdGlsbCBhbGxvd2luZyB0aGUgc3RhbmRhcmQgcGVyLWJyb3dzZXIgY29tcGlsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgSEFTX05BVElWRV9TVVBQT1JUOiB0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJyxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWVuY29kZSBhbiBhcnJheSBvZiBieXRlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgQW4gYXJyYXkgb2YgYnl0ZXMgKG51bWJlcnMgd2l0aFxyXG4gICAgICogICAgIHZhbHVlIGluIFswLCAyNTVdKSB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBCb29sZWFuIGluZGljYXRpbmcgd2Ugc2hvdWxkIHVzZSB0aGVcclxuICAgICAqICAgICBhbHRlcm5hdGl2ZSBhbHBoYWJldC5cclxuICAgICAqIEByZXR1cm4gVGhlIGJhc2U2NCBlbmNvZGVkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgZW5jb2RlQnl0ZUFycmF5KGlucHV0LCB3ZWJTYWZlKSB7XHJcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignZW5jb2RlQnl0ZUFycmF5IHRha2VzIGFuIGFycmF5IGFzIGEgcGFyYW1ldGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5pdF8oKTtcclxuICAgICAgICBjb25zdCBieXRlVG9DaGFyTWFwID0gd2ViU2FmZVxyXG4gICAgICAgICAgICA/IHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfXHJcbiAgICAgICAgICAgIDogdGhpcy5ieXRlVG9DaGFyTWFwXztcclxuICAgICAgICBjb25zdCBvdXRwdXQgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSArPSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gaW5wdXRbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgKyAxIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMiA9IGhhdmVCeXRlMiA/IGlucHV0W2kgKyAxXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMyA9IGkgKyAyIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGlucHV0W2kgKyAyXSA6IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gYnl0ZTEgPj4gMjtcclxuICAgICAgICAgICAgY29uc3Qgb3V0Qnl0ZTIgPSAoKGJ5dGUxICYgMHgwMykgPDwgNCkgfCAoYnl0ZTIgPj4gNCk7XHJcbiAgICAgICAgICAgIGxldCBvdXRCeXRlMyA9ICgoYnl0ZTIgJiAweDBmKSA8PCAyKSB8IChieXRlMyA+PiA2KTtcclxuICAgICAgICAgICAgbGV0IG91dEJ5dGU0ID0gYnl0ZTMgJiAweDNmO1xyXG4gICAgICAgICAgICBpZiAoIWhhdmVCeXRlMykge1xyXG4gICAgICAgICAgICAgICAgb3V0Qnl0ZTQgPSA2NDtcclxuICAgICAgICAgICAgICAgIGlmICghaGF2ZUJ5dGUyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0Qnl0ZTMgPSA2NDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChieXRlVG9DaGFyTWFwW291dEJ5dGUxXSwgYnl0ZVRvQ2hhck1hcFtvdXRCeXRlMl0sIGJ5dGVUb0NoYXJNYXBbb3V0Qnl0ZTNdLCBieXRlVG9DaGFyTWFwW291dEJ5dGU0XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQuam9pbignJyk7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlNjQtZW5jb2RlIGEgc3RyaW5nLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpbnB1dCBBIHN0cmluZyB0byBlbmNvZGUuXHJcbiAgICAgKiBAcGFyYW0gd2ViU2FmZSBJZiB0cnVlLCB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBUaGUgYmFzZTY0IGVuY29kZWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBlbmNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJ0b2EoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGVCeXRlQXJyYXkoc3RyaW5nVG9CeXRlQXJyYXkkMShpbnB1dCksIHdlYlNhZmUpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaW5wdXQgdG8gZGVjb2RlLlxyXG4gICAgICogQHBhcmFtIHdlYlNhZmUgVHJ1ZSBpZiB3ZSBzaG91bGQgdXNlIHRoZVxyXG4gICAgICogICAgIGFsdGVybmF0aXZlIGFscGhhYmV0LlxyXG4gICAgICogQHJldHVybiBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWNvZGVkIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBkZWNvZGVTdHJpbmcoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICAvLyBTaG9ydGN1dCBmb3IgTW96aWxsYSBicm93c2VycyB0aGF0IGltcGxlbWVudFxyXG4gICAgICAgIC8vIGEgbmF0aXZlIGJhc2U2NCBlbmNvZGVyIGluIHRoZSBmb3JtIG9mIFwiYnRvYS9hdG9iXCJcclxuICAgICAgICBpZiAodGhpcy5IQVNfTkFUSVZFX1NVUFBPUlQgJiYgIXdlYlNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGF0b2IoaW5wdXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZUFycmF5VG9TdHJpbmcodGhpcy5kZWNvZGVTdHJpbmdUb0J5dGVBcnJheShpbnB1dCwgd2ViU2FmZSkpO1xyXG4gICAgfSxcclxuICAgIC8qKlxyXG4gICAgICogQmFzZTY0LWRlY29kZSBhIHN0cmluZy5cclxuICAgICAqXHJcbiAgICAgKiBJbiBiYXNlLTY0IGRlY29kaW5nLCBncm91cHMgb2YgZm91ciBjaGFyYWN0ZXJzIGFyZSBjb252ZXJ0ZWQgaW50byB0aHJlZVxyXG4gICAgICogYnl0ZXMuICBJZiB0aGUgZW5jb2RlciBkaWQgbm90IGFwcGx5IHBhZGRpbmcsIHRoZSBpbnB1dCBsZW5ndGggbWF5IG5vdFxyXG4gICAgICogYmUgYSBtdWx0aXBsZSBvZiA0LlxyXG4gICAgICpcclxuICAgICAqIEluIHRoaXMgY2FzZSwgdGhlIGxhc3QgZ3JvdXAgd2lsbCBoYXZlIGZld2VyIHRoYW4gNCBjaGFyYWN0ZXJzLCBhbmRcclxuICAgICAqIHBhZGRpbmcgd2lsbCBiZSBpbmZlcnJlZC4gIElmIHRoZSBncm91cCBoYXMgb25lIG9yIHR3byBjaGFyYWN0ZXJzLCBpdCBkZWNvZGVzXHJcbiAgICAgKiB0byBvbmUgYnl0ZS4gIElmIHRoZSBncm91cCBoYXMgdGhyZWUgY2hhcmFjdGVycywgaXQgZGVjb2RlcyB0byB0d28gYnl0ZXMuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlucHV0IElucHV0IHRvIGRlY29kZS5cclxuICAgICAqIEBwYXJhbSB3ZWJTYWZlIFRydWUgaWYgd2Ugc2hvdWxkIHVzZSB0aGUgd2ViLXNhZmUgYWxwaGFiZXQuXHJcbiAgICAgKiBAcmV0dXJuIGJ5dGVzIHJlcHJlc2VudGluZyB0aGUgZGVjb2RlZCB2YWx1ZS5cclxuICAgICAqL1xyXG4gICAgZGVjb2RlU3RyaW5nVG9CeXRlQXJyYXkoaW5wdXQsIHdlYlNhZmUpIHtcclxuICAgICAgICB0aGlzLmluaXRfKCk7XHJcbiAgICAgICAgY29uc3QgY2hhclRvQnl0ZU1hcCA9IHdlYlNhZmVcclxuICAgICAgICAgICAgPyB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1xyXG4gICAgICAgICAgICA6IHRoaXMuY2hhclRvQnl0ZU1hcF87XHJcbiAgICAgICAgY29uc3Qgb3V0cHV0ID0gW107XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSsrKV07XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlMiA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gaGF2ZUJ5dGUyID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogMDtcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgICAgICAgICBjb25zdCBoYXZlQnl0ZTMgPSBpIDwgaW5wdXQubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBieXRlMyA9IGhhdmVCeXRlMyA/IGNoYXJUb0J5dGVNYXBbaW5wdXQuY2hhckF0KGkpXSA6IDY0O1xyXG4gICAgICAgICAgICArK2k7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhdmVCeXRlNCA9IGkgPCBpbnB1dC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGU0ID0gaGF2ZUJ5dGU0ID8gY2hhclRvQnl0ZU1hcFtpbnB1dC5jaGFyQXQoaSldIDogNjQ7XHJcbiAgICAgICAgICAgICsraTtcclxuICAgICAgICAgICAgaWYgKGJ5dGUxID09IG51bGwgfHwgYnl0ZTIgPT0gbnVsbCB8fCBieXRlMyA9PSBudWxsIHx8IGJ5dGU0ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUxID0gKGJ5dGUxIDw8IDIpIHwgKGJ5dGUyID4+IDQpO1xyXG4gICAgICAgICAgICBvdXRwdXQucHVzaChvdXRCeXRlMSk7XHJcbiAgICAgICAgICAgIGlmIChieXRlMyAhPT0gNjQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUyID0gKChieXRlMiA8PCA0KSAmIDB4ZjApIHwgKGJ5dGUzID4+IDIpO1xyXG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ5dGU0ICE9PSA2NCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG91dEJ5dGUzID0gKChieXRlMyA8PCA2KSAmIDB4YzApIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2gob3V0Qnl0ZTMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRwdXQ7XHJcbiAgICB9LFxyXG4gICAgLyoqXHJcbiAgICAgKiBMYXp5IHN0YXRpYyBpbml0aWFsaXphdGlvbiBmdW5jdGlvbi4gQ2FsbGVkIGJlZm9yZVxyXG4gICAgICogYWNjZXNzaW5nIGFueSBvZiB0aGUgc3RhdGljIG1hcCB2YXJpYWJsZXMuXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBpbml0XygpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYnl0ZVRvQ2hhck1hcF8pIHtcclxuICAgICAgICAgICAgdGhpcy5ieXRlVG9DaGFyTWFwXyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcFdlYlNhZmVfID0ge307XHJcbiAgICAgICAgICAgIC8vIFdlIHdhbnQgcXVpY2sgbWFwcGluZ3MgYmFjayBhbmQgZm9ydGgsIHNvIHdlIHByZWNvbXB1dGUgdHdvIG1hcHMuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5FTkNPREVEX1ZBTFMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcF9baV0gPSB0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBfW3RoaXMuYnl0ZVRvQ2hhck1hcF9baV1dID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnl0ZVRvQ2hhck1hcFdlYlNhZmVfW2ldID0gdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLmJ5dGVUb0NoYXJNYXBXZWJTYWZlX1tpXV0gPSBpO1xyXG4gICAgICAgICAgICAgICAgLy8gQmUgZm9yZ2l2aW5nIHdoZW4gZGVjb2RpbmcgYW5kIGNvcnJlY3RseSBkZWNvZGUgYm90aCBlbmNvZGluZ3MuXHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSB0aGlzLkVOQ09ERURfVkFMU19CQVNFLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhclRvQnl0ZU1hcF9bdGhpcy5FTkNPREVEX1ZBTFNfV0VCU0FGRS5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYXJUb0J5dGVNYXBXZWJTYWZlX1t0aGlzLkVOQ09ERURfVkFMUy5jaGFyQXQoaSldID0gaTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEFuIGVycm9yIGVuY291bnRlcmVkIHdoaWxlIGRlY29kaW5nIGJhc2U2NCBzdHJpbmcuXHJcbiAqL1xyXG5jbGFzcyBEZWNvZGVCYXNlNjRTdHJpbmdFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0RlY29kZUJhc2U2NFN0cmluZ0Vycm9yJztcclxuICAgIH1cclxufVxyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nXHJcbiAqL1xyXG5jb25zdCBiYXNlNjRFbmNvZGUgPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBjb25zdCB1dGY4Qnl0ZXMgPSBzdHJpbmdUb0J5dGVBcnJheSQxKHN0cik7XHJcbiAgICByZXR1cm4gYmFzZTY0LmVuY29kZUJ5dGVBcnJheSh1dGY4Qnl0ZXMsIHRydWUpO1xyXG59O1xyXG4vKipcclxuICogVVJMLXNhZmUgYmFzZTY0IGVuY29kaW5nICh3aXRob3V0IFwiLlwiIHBhZGRpbmcgaW4gdGhlIGVuZCkuXHJcbiAqIGUuZy4gVXNlZCBpbiBKU09OIFdlYiBUb2tlbiAoSldUKSBwYXJ0cy5cclxuICovXHJcbmNvbnN0IGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgLy8gVXNlIGJhc2U2NHVybCBlbmNvZGluZyBhbmQgcmVtb3ZlIHBhZGRpbmcgaW4gdGhlIGVuZCAoZG90IGNoYXJhY3RlcnMpLlxyXG4gICAgcmV0dXJuIGJhc2U2NEVuY29kZShzdHIpLnJlcGxhY2UoL1xcLi9nLCAnJyk7XHJcbn07XHJcbi8qKlxyXG4gKiBVUkwtc2FmZSBiYXNlNjQgZGVjb2RpbmdcclxuICpcclxuICogTk9URTogRE8gTk9UIHVzZSB0aGUgZ2xvYmFsIGF0b2IoKSBmdW5jdGlvbiAtIGl0IGRvZXMgTk9UIHN1cHBvcnQgdGhlXHJcbiAqIGJhc2U2NFVybCB2YXJpYW50IGVuY29kaW5nLlxyXG4gKlxyXG4gKiBAcGFyYW0gc3RyIFRvIGJlIGRlY29kZWRcclxuICogQHJldHVybiBEZWNvZGVkIHJlc3VsdCwgaWYgcG9zc2libGVcclxuICovXHJcbmNvbnN0IGJhc2U2NERlY29kZSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgcmV0dXJuIGJhc2U2NC5kZWNvZGVTdHJpbmcoc3RyLCB0cnVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcignYmFzZTY0RGVjb2RlIGZhaWxlZDogJywgZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIERvIGEgZGVlcC1jb3B5IG9mIGJhc2ljIEphdmFTY3JpcHQgT2JqZWN0cyBvciBBcnJheXMuXHJcbiAqL1xyXG5mdW5jdGlvbiBkZWVwQ29weSh2YWx1ZSkge1xyXG4gICAgcmV0dXJuIGRlZXBFeHRlbmQodW5kZWZpbmVkLCB2YWx1ZSk7XHJcbn1cclxuLyoqXHJcbiAqIENvcHkgcHJvcGVydGllcyBmcm9tIHNvdXJjZSB0byB0YXJnZXQgKHJlY3Vyc2l2ZWx5IGFsbG93cyBleHRlbnNpb25cclxuICogb2YgT2JqZWN0cyBhbmQgQXJyYXlzKS4gIFNjYWxhciB2YWx1ZXMgaW4gdGhlIHRhcmdldCBhcmUgb3Zlci13cml0dGVuLlxyXG4gKiBJZiB0YXJnZXQgaXMgdW5kZWZpbmVkLCBhbiBvYmplY3Qgb2YgdGhlIGFwcHJvcHJpYXRlIHR5cGUgd2lsbCBiZSBjcmVhdGVkXHJcbiAqIChhbmQgcmV0dXJuZWQpLlxyXG4gKlxyXG4gKiBXZSByZWN1cnNpdmVseSBjb3B5IGFsbCBjaGlsZCBwcm9wZXJ0aWVzIG9mIHBsYWluIE9iamVjdHMgaW4gdGhlIHNvdXJjZS0gc29cclxuICogdGhhdCBuYW1lc3BhY2UtIGxpa2UgZGljdGlvbmFyaWVzIGFyZSBtZXJnZWQuXHJcbiAqXHJcbiAqIE5vdGUgdGhhdCB0aGUgdGFyZ2V0IGNhbiBiZSBhIGZ1bmN0aW9uLCBpbiB3aGljaCBjYXNlIHRoZSBwcm9wZXJ0aWVzIGluXHJcbiAqIHRoZSBzb3VyY2UgT2JqZWN0IGFyZSBjb3BpZWQgb250byBpdCBhcyBzdGF0aWMgcHJvcGVydGllcyBvZiB0aGUgRnVuY3Rpb24uXHJcbiAqXHJcbiAqIE5vdGU6IHdlIGRvbid0IG1lcmdlIF9fcHJvdG9fXyB0byBwcmV2ZW50IHByb3RvdHlwZSBwb2xsdXRpb25cclxuICovXHJcbmZ1bmN0aW9uIGRlZXBFeHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcclxuICAgIGlmICghKHNvdXJjZSBpbnN0YW5jZW9mIE9iamVjdCkpIHtcclxuICAgICAgICByZXR1cm4gc291cmNlO1xyXG4gICAgfVxyXG4gICAgc3dpdGNoIChzb3VyY2UuY29uc3RydWN0b3IpIHtcclxuICAgICAgICBjYXNlIERhdGU6XHJcbiAgICAgICAgICAgIC8vIFRyZWF0IERhdGVzIGxpa2Ugc2NhbGFyczsgaWYgdGhlIHRhcmdldCBkYXRlIG9iamVjdCBoYWQgYW55IGNoaWxkXHJcbiAgICAgICAgICAgIC8vIHByb3BlcnRpZXMgLSB0aGV5IHdpbGwgYmUgbG9zdCFcclxuICAgICAgICAgICAgY29uc3QgZGF0ZVZhbHVlID0gc291cmNlO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZGF0ZVZhbHVlLmdldFRpbWUoKSk7XHJcbiAgICAgICAgY2FzZSBPYmplY3Q6XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0ge307XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSBBcnJheTpcclxuICAgICAgICAgICAgLy8gQWx3YXlzIGNvcHkgdGhlIGFycmF5IHNvdXJjZSBhbmQgb3ZlcndyaXRlIHRoZSB0YXJnZXQuXHJcbiAgICAgICAgICAgIHRhcmdldCA9IFtdO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAvLyBOb3QgYSBwbGFpbiBPYmplY3QgLSB0cmVhdCBpdCBhcyBhIHNjYWxhci5cclxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTtcclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgcHJvcCBpbiBzb3VyY2UpIHtcclxuICAgICAgICAvLyB1c2UgaXNWYWxpZEtleSB0byBndWFyZCBhZ2FpbnN0IHByb3RvdHlwZSBwb2xsdXRpb24uIFNlZSBodHRwczovL3NueWsuaW8vdnVsbi9TTllLLUpTLUxPREFTSC00NTAyMDJcclxuICAgICAgICBpZiAoIXNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSB8fCAhaXNWYWxpZEtleShwcm9wKSkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGFyZ2V0O1xyXG59XHJcbmZ1bmN0aW9uIGlzVmFsaWRLZXkoa2V5KSB7XHJcbiAgICByZXR1cm4ga2V5ICE9PSAnX19wcm90b19fJztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUG9seWZpbGwgZm9yIGBnbG9iYWxUaGlzYCBvYmplY3QuXHJcbiAqIEByZXR1cm5zIHRoZSBgZ2xvYmFsVGhpc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gZW52aXJvbm1lbnQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEdsb2JhbCgpIHtcclxuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gc2VsZjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiB3aW5kb3c7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZ2xvYmFsO1xyXG4gICAgfVxyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gbG9jYXRlIGdsb2JhbCBvYmplY3QuJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIyIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHNGcm9tR2xvYmFsID0gKCkgPT4gZ2V0R2xvYmFsKCkuX19GSVJFQkFTRV9ERUZBVUxUU19fO1xyXG4vKipcclxuICogQXR0ZW1wdCB0byByZWFkIGRlZmF1bHRzIGZyb20gYSBKU09OIHN0cmluZyBwcm92aWRlZCB0b1xyXG4gKiBwcm9jZXNzKC4pZW52KC4pX19GSVJFQkFTRV9ERUZBVUxUU19fIG9yIGEgSlNPTiBmaWxlIHdob3NlIHBhdGggaXMgaW5cclxuICogcHJvY2VzcyguKWVudiguKV9fRklSRUJBU0VfREVGQVVMVFNfUEFUSF9fXHJcbiAqIFRoZSBkb3RzIGFyZSBpbiBwYXJlbnMgYmVjYXVzZSBjZXJ0YWluIGNvbXBpbGVycyAoVml0ZT8pIGNhbm5vdFxyXG4gKiBoYW5kbGUgc2VlaW5nIHRoYXQgdmFyaWFibGUgaW4gY29tbWVudHMuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlyZWJhc2UvZmlyZWJhc2UtanMtc2RrL2lzc3Vlcy82ODM4XHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21FbnZWYXJpYWJsZSA9ICgpID0+IHtcclxuICAgIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIHByb2Nlc3MuZW52ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGRlZmF1bHRzSnNvblN0cmluZyA9IHByb2Nlc3MuZW52Ll9fRklSRUJBU0VfREVGQVVMVFNfXztcclxuICAgIGlmIChkZWZhdWx0c0pzb25TdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkZWZhdWx0c0pzb25TdHJpbmcpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBnZXREZWZhdWx0c0Zyb21Db29raWUgPSAoKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBtYXRjaDtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2goL19fRklSRUJBU0VfREVGQVVMVFNfXz0oW147XSspLyk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8vIFNvbWUgZW52aXJvbm1lbnRzIHN1Y2ggYXMgQW5ndWxhciBVbml2ZXJzYWwgU1NSIGhhdmUgYVxyXG4gICAgICAgIC8vIGBkb2N1bWVudGAgb2JqZWN0IGJ1dCBlcnJvciBvbiBhY2Nlc3NpbmcgYGRvY3VtZW50LmNvb2tpZWAuXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZGVjb2RlZCA9IG1hdGNoICYmIGJhc2U2NERlY29kZShtYXRjaFsxXSk7XHJcbiAgICByZXR1cm4gZGVjb2RlZCAmJiBKU09OLnBhcnNlKGRlY29kZWQpO1xyXG59O1xyXG4vKipcclxuICogR2V0IHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LiBJdCBjaGVja3MgaW4gb3JkZXI6XHJcbiAqICgxKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgYXMgYSBwcm9wZXJ0eSBvZiBgZ2xvYmFsVGhpc2BcclxuICogKDIpIGlmIHN1Y2ggYW4gb2JqZWN0IHdhcyBwcm92aWRlZCBvbiBhIHNoZWxsIGVudmlyb25tZW50IHZhcmlhYmxlXHJcbiAqICgzKSBpZiBzdWNoIGFuIG9iamVjdCBleGlzdHMgaW4gYSBjb29raWVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdHMgPSAoKSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoZ2V0RGVmYXVsdHNGcm9tR2xvYmFsKCkgfHxcclxuICAgICAgICAgICAgZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUoKSB8fFxyXG4gICAgICAgICAgICBnZXREZWZhdWx0c0Zyb21Db29raWUoKSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIENhdGNoLWFsbCBmb3IgYmVpbmcgdW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlXHJcbiAgICAgICAgICogdG8gYW55IGVudmlyb25tZW50IGNhc2Ugd2UgaGF2ZSBub3QgYWNjb3VudGVkIGZvci4gTG9nIHRvXHJcbiAgICAgICAgICogaW5mbyBpbnN0ZWFkIG9mIHN3YWxsb3dpbmcgc28gd2UgY2FuIGZpbmQgdGhlc2UgdW5rbm93biBjYXNlc1xyXG4gICAgICAgICAqIGFuZCBhZGQgcGF0aHMgZm9yIHRoZW0gaWYgbmVlZGVkLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnNvbGUuaW5mbyhgVW5hYmxlIHRvIGdldCBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gZHVlIHRvOiAke2V9YCk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG59O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0IHN0b3JlZCBpbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdFxyXG4gKiBmb3IgdGhlIGdpdmVuIHByb2R1Y3QuXHJcbiAqIEByZXR1cm5zIGEgVVJMIGhvc3QgZm9ybWF0dGVkIGxpa2UgYDEyNy4wLjAuMTo5OTk5YCBvciBgWzo6MV06NDAwMGAgaWYgYXZhaWxhYmxlXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IGdldERlZmF1bHRFbXVsYXRvckhvc3QgPSAocHJvZHVjdE5hbWUpID0+IHsgdmFyIF9hLCBfYjsgcmV0dXJuIChfYiA9IChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lbXVsYXRvckhvc3RzKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2JbcHJvZHVjdE5hbWVdOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBlbXVsYXRvciBob3N0bmFtZSBhbmQgcG9ydCBzdG9yZWQgaW4gdGhlIF9fRklSRUJBU0VfREVGQVVMVFNfXyBvYmplY3RcclxuICogZm9yIHRoZSBnaXZlbiBwcm9kdWN0LlxyXG4gKiBAcmV0dXJucyBhIHBhaXIgb2YgaG9zdG5hbWUgYW5kIHBvcnQgbGlrZSBgW1wiOjoxXCIsIDQwMDBdYCBpZiBhdmFpbGFibGVcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0ID0gKHByb2R1Y3ROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBob3N0ID0gZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdChwcm9kdWN0TmFtZSk7XHJcbiAgICBpZiAoIWhvc3QpIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc2VwYXJhdG9ySW5kZXggPSBob3N0Lmxhc3RJbmRleE9mKCc6Jyk7IC8vIEZpbmRpbmcgdGhlIGxhc3Qgc2luY2UgSVB2NiBhZGRyIGFsc28gaGFzIGNvbG9ucy5cclxuICAgIGlmIChzZXBhcmF0b3JJbmRleCA8PSAwIHx8IHNlcGFyYXRvckluZGV4ICsgMSA9PT0gaG9zdC5sZW5ndGgpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgaG9zdCAke2hvc3R9IHdpdGggbm8gc2VwYXJhdGUgaG9zdG5hbWUgYW5kIHBvcnQhYCk7XHJcbiAgICB9XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1nbG9iYWxzXHJcbiAgICBjb25zdCBwb3J0ID0gcGFyc2VJbnQoaG9zdC5zdWJzdHJpbmcoc2VwYXJhdG9ySW5kZXggKyAxKSwgMTApO1xyXG4gICAgaWYgKGhvc3RbMF0gPT09ICdbJykge1xyXG4gICAgICAgIC8vIEJyYWNrZXQtcXVvdGVkIGBbaXB2NmFkZHJdOnBvcnRgID0+IHJldHVybiBcImlwdjZhZGRyXCIgKHdpdGhvdXQgYnJhY2tldHMpLlxyXG4gICAgICAgIHJldHVybiBbaG9zdC5zdWJzdHJpbmcoMSwgc2VwYXJhdG9ySW5kZXggLSAxKSwgcG9ydF07XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gW2hvc3Quc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KSwgcG9ydF07XHJcbiAgICB9XHJcbn07XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEZpcmViYXNlIGFwcCBjb25maWcgc3RvcmVkIGluIHRoZSBfX0ZJUkVCQVNFX0RFRkFVTFRTX18gb2JqZWN0LlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5jb25zdCBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBnZXREZWZhdWx0cygpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnOyB9O1xyXG4vKipcclxuICogUmV0dXJucyBhbiBleHBlcmltZW50YWwgc2V0dGluZyBvbiB0aGUgX19GSVJFQkFTRV9ERUZBVUxUU19fIG9iamVjdCAocHJvcGVydGllc1xyXG4gKiBwcmVmaXhlZCBieSBcIl9cIilcclxuICogQHB1YmxpY1xyXG4gKi9cclxuY29uc3QgZ2V0RXhwZXJpbWVudGFsU2V0dGluZyA9IChuYW1lKSA9PiB7IHZhciBfYTsgcmV0dXJuIChfYSA9IGdldERlZmF1bHRzKCkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYVtgXyR7bmFtZX1gXTsgfTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY2xhc3MgRGVmZXJyZWQge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5yZWplY3QgPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5yZXNvbHZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSByZWplY3Q7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE91ciBBUEkgaW50ZXJuYWxzIGFyZSBub3QgcHJvbWlzZWlmaWVkIGFuZCBjYW5ub3QgYmVjYXVzZSBvdXIgY2FsbGJhY2sgQVBJcyBoYXZlIHN1YnRsZSBleHBlY3RhdGlvbnMgYXJvdW5kXHJcbiAgICAgKiBpbnZva2luZyBwcm9taXNlcyBpbmxpbmUsIHdoaWNoIFByb21pc2VzIGFyZSBmb3JiaWRkZW4gdG8gZG8uIFRoaXMgbWV0aG9kIGFjY2VwdHMgYW4gb3B0aW9uYWwgbm9kZS1zdHlsZSBjYWxsYmFja1xyXG4gICAgICogYW5kIHJldHVybnMgYSBub2RlLXN0eWxlIGNhbGxiYWNrIHdoaWNoIHdpbGwgcmVzb2x2ZSBvciByZWplY3QgdGhlIERlZmVycmVkJ3MgcHJvbWlzZS5cclxuICAgICAqL1xyXG4gICAgd3JhcENhbGxiYWNrKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIChlcnJvciwgdmFsdWUpID0+IHtcclxuICAgICAgICAgICAgaWYgKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlamVjdChlcnJvcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc29sdmUodmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIC8vIEF0dGFjaGluZyBub29wIGhhbmRsZXIganVzdCBpbiBjYXNlIGRldmVsb3BlciB3YXNuJ3QgZXhwZWN0aW5nXHJcbiAgICAgICAgICAgICAgICAvLyBwcm9taXNlc1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlLmNhdGNoKCgpID0+IHsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBTb21lIG9mIG91ciBjYWxsYmFja3MgZG9uJ3QgZXhwZWN0IGEgdmFsdWUgYW5kIG91ciBvd24gdGVzdHNcclxuICAgICAgICAgICAgICAgIC8vIGFzc2VydCB0aGF0IHRoZSBwYXJhbWV0ZXIgbGVuZ3RoIGlzIDFcclxuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjay5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhlcnJvciwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVNb2NrVXNlclRva2VuKHRva2VuLCBwcm9qZWN0SWQpIHtcclxuICAgIGlmICh0b2tlbi51aWQpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBcInVpZFwiIGZpZWxkIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgYnkgbW9ja1VzZXJUb2tlbi4gUGxlYXNlIHVzZSBcInN1YlwiIGluc3RlYWQgZm9yIEZpcmViYXNlIEF1dGggVXNlciBJRC4nKTtcclxuICAgIH1cclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSBcIm5vbmVcIiBhcyB0aGUgYWxnb3JpdGhtLlxyXG4gICAgY29uc3QgaGVhZGVyID0ge1xyXG4gICAgICAgIGFsZzogJ25vbmUnLFxyXG4gICAgICAgIHR5cGU6ICdKV1QnXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RJZCB8fCAnZGVtby1wcm9qZWN0JztcclxuICAgIGNvbnN0IGlhdCA9IHRva2VuLmlhdCB8fCAwO1xyXG4gICAgY29uc3Qgc3ViID0gdG9rZW4uc3ViIHx8IHRva2VuLnVzZXJfaWQ7XHJcbiAgICBpZiAoIXN1Yikge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vY2tVc2VyVG9rZW4gbXVzdCBjb250YWluICdzdWInIG9yICd1c2VyX2lkJyBmaWVsZCFcIik7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwYXlsb2FkID0gT2JqZWN0LmFzc2lnbih7IFxyXG4gICAgICAgIC8vIFNldCBhbGwgcmVxdWlyZWQgZmllbGRzIHRvIGRlY2VudCBkZWZhdWx0c1xyXG4gICAgICAgIGlzczogYGh0dHBzOi8vc2VjdXJldG9rZW4uZ29vZ2xlLmNvbS8ke3Byb2plY3R9YCwgYXVkOiBwcm9qZWN0LCBpYXQsIGV4cDogaWF0ICsgMzYwMCwgYXV0aF90aW1lOiBpYXQsIHN1YiwgdXNlcl9pZDogc3ViLCBmaXJlYmFzZToge1xyXG4gICAgICAgICAgICBzaWduX2luX3Byb3ZpZGVyOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgaWRlbnRpdGllczoge31cclxuICAgICAgICB9IH0sIHRva2VuKTtcclxuICAgIC8vIFVuc2VjdXJlZCBKV1RzIHVzZSB0aGUgZW1wdHkgc3RyaW5nIGFzIGEgc2lnbmF0dXJlLlxyXG4gICAgY29uc3Qgc2lnbmF0dXJlID0gJyc7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KGhlYWRlcikpLFxyXG4gICAgICAgIGJhc2U2NHVybEVuY29kZVdpdGhvdXRQYWRkaW5nKEpTT04uc3RyaW5naWZ5KHBheWxvYWQpKSxcclxuICAgICAgICBzaWduYXR1cmVcclxuICAgIF0uam9pbignLicpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIG5hdmlnYXRvci51c2VyQWdlbnQgc3RyaW5nIG9yICcnIGlmIGl0J3Mgbm90IGRlZmluZWQuXHJcbiAqIEByZXR1cm4gdXNlciBhZ2VudCBzdHJpbmdcclxuICovXHJcbmZ1bmN0aW9uIGdldFVBKCkge1xyXG4gICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgdHlwZW9mIG5hdmlnYXRvclsndXNlckFnZW50J10gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvclsndXNlckFnZW50J107XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBDb3Jkb3ZhIC8gUGhvbmVHYXAgLyBJb25pYyBmcmFtZXdvcmtzIG9uIGEgbW9iaWxlIGRldmljZS5cclxuICpcclxuICogRGVsaWJlcmF0ZWx5IGRvZXMgbm90IHJlbHkgb24gY2hlY2tpbmcgYGZpbGU6Ly9gIFVSTHMgKGFzIHRoaXMgZmFpbHMgUGhvbmVHYXBcclxuICogaW4gdGhlIFJpcHBsZSBlbXVsYXRvcikgbm9yIENvcmRvdmEgYG9uRGV2aWNlUmVhZHlgLCB3aGljaCB3b3VsZCBub3JtYWxseVxyXG4gKiB3YWl0IGZvciBhIGNhbGxiYWNrLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNNb2JpbGVDb3Jkb3ZhKCkge1xyXG4gICAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgU2V0dGluZyB1cCBhbiBicm9hZGx5IGFwcGxpY2FibGUgaW5kZXggc2lnbmF0dXJlIGZvciBXaW5kb3dcclxuICAgICAgICAvLyBqdXN0IHRvIGRlYWwgd2l0aCB0aGlzIGNhc2Ugd291bGQgcHJvYmFibHkgYmUgYSBiYWQgaWRlYS5cclxuICAgICAgICAhISh3aW5kb3dbJ2NvcmRvdmEnXSB8fCB3aW5kb3dbJ3Bob25lZ2FwJ10gfHwgd2luZG93WydQaG9uZUdhcCddKSAmJlxyXG4gICAgICAgIC9pb3N8aXBob25lfGlwb2R8aXBhZHxhbmRyb2lkfGJsYWNrYmVycnl8aWVtb2JpbGUvaS50ZXN0KGdldFVBKCkpKTtcclxufVxyXG4vKipcclxuICogRGV0ZWN0IE5vZGUuanMuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBOb2RlLmpzIGVudmlyb25tZW50IGlzIGRldGVjdGVkIG9yIHNwZWNpZmllZC5cclxuICovXHJcbi8vIE5vZGUgZGV0ZWN0aW9uIGxvZ2ljIGZyb206IGh0dHBzOi8vZ2l0aHViLmNvbS9pbGlha2FuL2RldGVjdC1ub2RlL1xyXG5mdW5jdGlvbiBpc05vZGUoKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCBmb3JjZUVudmlyb25tZW50ID0gKF9hID0gZ2V0RGVmYXVsdHMoKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvcmNlRW52aXJvbm1lbnQ7XHJcbiAgICBpZiAoZm9yY2VFbnZpcm9ubWVudCA9PT0gJ25vZGUnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChmb3JjZUVudmlyb25tZW50ID09PSAnYnJvd3NlcicpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBEZXRlY3QgQnJvd3NlciBFbnZpcm9ubWVudFxyXG4gKi9cclxuZnVuY3Rpb24gaXNCcm93c2VyKCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBzZWxmID09PSAnb2JqZWN0JyAmJiBzZWxmLnNlbGYgPT09IHNlbGY7XHJcbn1cclxuZnVuY3Rpb24gaXNCcm93c2VyRXh0ZW5zaW9uKCkge1xyXG4gICAgY29uc3QgcnVudGltZSA9IHR5cGVvZiBjaHJvbWUgPT09ICdvYmplY3QnXHJcbiAgICAgICAgPyBjaHJvbWUucnVudGltZVxyXG4gICAgICAgIDogdHlwZW9mIGJyb3dzZXIgPT09ICdvYmplY3QnXHJcbiAgICAgICAgICAgID8gYnJvd3Nlci5ydW50aW1lXHJcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBydW50aW1lID09PSAnb2JqZWN0JyAmJiBydW50aW1lLmlkICE9PSB1bmRlZmluZWQ7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCBSZWFjdCBOYXRpdmUuXHJcbiAqXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudCBpcyBkZXRlY3RlZC5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmVhY3ROYXRpdmUoKSB7XHJcbiAgICByZXR1cm4gKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICdvYmplY3QnICYmIG5hdmlnYXRvclsncHJvZHVjdCddID09PSAnUmVhY3ROYXRpdmUnKTtcclxufVxyXG4vKiogRGV0ZWN0cyBFbGVjdHJvbiBhcHBzLiAqL1xyXG5mdW5jdGlvbiBpc0VsZWN0cm9uKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignRWxlY3Ryb24vJykgPj0gMDtcclxufVxyXG4vKiogRGV0ZWN0cyBJbnRlcm5ldCBFeHBsb3Jlci4gKi9cclxuZnVuY3Rpb24gaXNJRSgpIHtcclxuICAgIGNvbnN0IHVhID0gZ2V0VUEoKTtcclxuICAgIHJldHVybiB1YS5pbmRleE9mKCdNU0lFICcpID49IDAgfHwgdWEuaW5kZXhPZignVHJpZGVudC8nKSA+PSAwO1xyXG59XHJcbi8qKiBEZXRlY3RzIFVuaXZlcnNhbCBXaW5kb3dzIFBsYXRmb3JtIGFwcHMuICovXHJcbmZ1bmN0aW9uIGlzVVdQKCkge1xyXG4gICAgcmV0dXJuIGdldFVBKCkuaW5kZXhPZignTVNBcHBIb3N0LycpID49IDA7XHJcbn1cclxuLyoqXHJcbiAqIERldGVjdCB3aGV0aGVyIHRoZSBjdXJyZW50IFNESyBidWlsZCBpcyB0aGUgTm9kZSB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaXQncyB0aGUgTm9kZSBTREsgYnVpbGQuXHJcbiAqL1xyXG5mdW5jdGlvbiBpc05vZGVTZGsoKSB7XHJcbiAgICByZXR1cm4gQ09OU1RBTlRTLk5PREVfQ0xJRU5UID09PSB0cnVlIHx8IENPTlNUQU5UUy5OT0RFX0FETUlOID09PSB0cnVlO1xyXG59XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgd2UgYXJlIHJ1bm5pbmcgaW4gU2FmYXJpLiAqL1xyXG5mdW5jdGlvbiBpc1NhZmFyaSgpIHtcclxuICAgIHJldHVybiAoIWlzTm9kZSgpICYmXHJcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnU2FmYXJpJykgJiZcclxuICAgICAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcygnQ2hyb21lJykpO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKiBAcmV0dXJuIHRydWUgaWYgaW5kZXhlZERCIGlzIHN1cHBvcnRlZCBieSBjdXJyZW50IGJyb3dzZXIvc2VydmljZSB3b3JrZXIgY29udGV4dFxyXG4gKi9cclxuZnVuY3Rpb24gaXNJbmRleGVkREJBdmFpbGFibGUoKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgaW5kZXhlZERCID09PSAnb2JqZWN0JztcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgYnJvd3Nlci9zdyBjb250ZXh0IGZvciBpbmRleGVkREIgYnkgb3BlbmluZyBhIGR1bW15IGluZGV4ZWREQiBkYXRhYmFzZSBhbmQgcmVqZWN0XHJcbiAqIGlmIGVycm9ycyBvY2N1ciBkdXJpbmcgdGhlIGRhdGFiYXNlIG9wZW4gb3BlcmF0aW9uLlxyXG4gKlxyXG4gKiBAdGhyb3dzIGV4Y2VwdGlvbiBpZiBjdXJyZW50IGJyb3dzZXIvc3cgY29udGV4dCBjYW4ndCBydW4gaWRiLm9wZW4gKGV4OiBTYWZhcmkgaWZyYW1lLCBGaXJlZm94XHJcbiAqIHByaXZhdGUgYnJvd3NpbmcpXHJcbiAqL1xyXG5mdW5jdGlvbiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCkge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsZXQgcHJlRXhpc3QgPSB0cnVlO1xyXG4gICAgICAgICAgICBjb25zdCBEQl9DSEVDS19OQU1FID0gJ3ZhbGlkYXRlLWJyb3dzZXItY29udGV4dC1mb3ItaW5kZXhlZGRiLWFuYWx5dGljcy1tb2R1bGUnO1xyXG4gICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0gc2VsZi5pbmRleGVkREIub3BlbihEQl9DSEVDS19OQU1FKTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3VsdC5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgLy8gZGVsZXRlIGRhdGFiYXNlIG9ubHkgd2hlbiBpdCBkb2Vzbid0IHByZS1leGlzdFxyXG4gICAgICAgICAgICAgICAgaWYgKCFwcmVFeGlzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKERCX0NIRUNLX05BTUUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSh0cnVlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwcmVFeGlzdCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoKChfYSA9IHJlcXVlc3QuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB8fCAnJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKlxyXG4gKiBUaGlzIG1ldGhvZCBjaGVja3Mgd2hldGhlciBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqIEByZXR1cm4gdHJ1ZSBpZiBjb29raWUgaXMgZW5hYmxlZCB3aXRoaW4gY3VycmVudCBicm93c2VyXHJcbiAqL1xyXG5mdW5jdGlvbiBhcmVDb29raWVzRW5hYmxlZCgpIHtcclxuICAgIGlmICh0eXBlb2YgbmF2aWdhdG9yID09PSAndW5kZWZpbmVkJyB8fCAhbmF2aWdhdG9yLmNvb2tpZUVuYWJsZWQpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQGZpbGVvdmVydmlldyBTdGFuZGFyZGl6ZWQgRmlyZWJhc2UgRXJyb3IuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKlxyXG4gKiAgIC8vIFR5cGVzY3JpcHQgc3RyaW5nIGxpdGVyYWxzIGZvciB0eXBlLXNhZmUgY29kZXNcclxuICogICB0eXBlIEVyciA9XHJcbiAqICAgICAndW5rbm93bicgfFxyXG4gKiAgICAgJ29iamVjdC1ub3QtZm91bmQnXHJcbiAqICAgICA7XHJcbiAqXHJcbiAqICAgLy8gQ2xvc3VyZSBlbnVtIGZvciB0eXBlLXNhZmUgZXJyb3IgY29kZXNcclxuICogICAvLyBhdC1lbnVtIHtzdHJpbmd9XHJcbiAqICAgdmFyIEVyciA9IHtcclxuICogICAgIFVOS05PV046ICd1bmtub3duJyxcclxuICogICAgIE9CSkVDVF9OT1RfRk9VTkQ6ICdvYmplY3Qtbm90LWZvdW5kJyxcclxuICogICB9XHJcbiAqXHJcbiAqICAgbGV0IGVycm9yczogTWFwPEVyciwgc3RyaW5nPiA9IHtcclxuICogICAgICdnZW5lcmljLWVycm9yJzogXCJVbmtub3duIGVycm9yXCIsXHJcbiAqICAgICAnZmlsZS1ub3QtZm91bmQnOiBcIkNvdWxkIG5vdCBmaW5kIGZpbGU6IHskZmlsZX1cIixcclxuICogICB9O1xyXG4gKlxyXG4gKiAgIC8vIFR5cGUtc2FmZSBmdW5jdGlvbiAtIG11c3QgcGFzcyBhIHZhbGlkIGVycm9yIGNvZGUgYXMgcGFyYW0uXHJcbiAqICAgbGV0IGVycm9yID0gbmV3IEVycm9yRmFjdG9yeTxFcnI+KCdzZXJ2aWNlJywgJ1NlcnZpY2UnLCBlcnJvcnMpO1xyXG4gKlxyXG4gKiAgIC4uLlxyXG4gKiAgIHRocm93IGVycm9yLmNyZWF0ZShFcnIuR0VORVJJQyk7XHJcbiAqICAgLi4uXHJcbiAqICAgdGhyb3cgZXJyb3IuY3JlYXRlKEVyci5GSUxFX05PVF9GT1VORCwgeydmaWxlJzogZmlsZU5hbWV9KTtcclxuICogICAuLi5cclxuICogICAvLyBTZXJ2aWNlOiBDb3VsZCBub3QgZmlsZSBmaWxlOiBmb28udHh0IChzZXJ2aWNlL2ZpbGUtbm90LWZvdW5kKS5cclxuICpcclxuICogICBjYXRjaCAoZSkge1xyXG4gKiAgICAgYXNzZXJ0KGUubWVzc2FnZSA9PT0gXCJDb3VsZCBub3QgZmluZCBmaWxlOiBmb28udHh0LlwiKTtcclxuICogICAgIGlmICgoZSBhcyBGaXJlYmFzZUVycm9yKT8uY29kZSA9PT0gJ3NlcnZpY2UvZmlsZS1ub3QtZm91bmQnKSB7XHJcbiAqICAgICAgIGNvbnNvbGUubG9nKFwiQ291bGQgbm90IHJlYWQgZmlsZTogXCIgKyBlWydmaWxlJ10pO1xyXG4gKiAgICAgfVxyXG4gKiAgIH1cclxuICovXHJcbmNvbnN0IEVSUk9SX05BTUUgPSAnRmlyZWJhc2VFcnJvcic7XHJcbi8vIEJhc2VkIG9uIGNvZGUgZnJvbTpcclxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRXJyb3IjQ3VzdG9tX0Vycm9yX1R5cGVzXHJcbmNsYXNzIEZpcmViYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgIC8qKiBUaGUgZXJyb3IgY29kZSBmb3IgdGhpcyBlcnJvci4gKi9cclxuICAgIGNvZGUsIG1lc3NhZ2UsIFxyXG4gICAgLyoqIEN1c3RvbSBkYXRhIGZvciB0aGlzIGVycm9yLiAqL1xyXG4gICAgY3VzdG9tRGF0YSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XHJcbiAgICAgICAgdGhpcy5jdXN0b21EYXRhID0gY3VzdG9tRGF0YTtcclxuICAgICAgICAvKiogVGhlIGN1c3RvbSBuYW1lIGZvciBhbGwgRmlyZWJhc2VFcnJvcnMuICovXHJcbiAgICAgICAgdGhpcy5uYW1lID0gRVJST1JfTkFNRTtcclxuICAgICAgICAvLyBGaXggRm9yIEVTNVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC13aWtpL2Jsb2IvbWFzdGVyL0JyZWFraW5nLUNoYW5nZXMubWQjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXHJcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEZpcmViYXNlRXJyb3IucHJvdG90eXBlKTtcclxuICAgICAgICAvLyBNYWludGFpbnMgcHJvcGVyIHN0YWNrIHRyYWNlIGZvciB3aGVyZSBvdXIgZXJyb3Igd2FzIHRocm93bi5cclxuICAgICAgICAvLyBPbmx5IGF2YWlsYWJsZSBvbiBWOC5cclxuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcclxuICAgICAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgRXJyb3JGYWN0b3J5LnByb3RvdHlwZS5jcmVhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5jbGFzcyBFcnJvckZhY3Rvcnkge1xyXG4gICAgY29uc3RydWN0b3Ioc2VydmljZSwgc2VydmljZU5hbWUsIGVycm9ycykge1xyXG4gICAgICAgIHRoaXMuc2VydmljZSA9IHNlcnZpY2U7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlTmFtZSA9IHNlcnZpY2VOYW1lO1xyXG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKGNvZGUsIC4uLmRhdGEpIHtcclxuICAgICAgICBjb25zdCBjdXN0b21EYXRhID0gZGF0YVswXSB8fCB7fTtcclxuICAgICAgICBjb25zdCBmdWxsQ29kZSA9IGAke3RoaXMuc2VydmljZX0vJHtjb2RlfWA7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0aGlzLmVycm9yc1tjb2RlXTtcclxuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGVtcGxhdGUgPyByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGN1c3RvbURhdGEpIDogJ0Vycm9yJztcclxuICAgICAgICAvLyBTZXJ2aWNlIE5hbWU6IEVycm9yIG1lc3NhZ2UgKHNlcnZpY2UvY29kZSkuXHJcbiAgICAgICAgY29uc3QgZnVsbE1lc3NhZ2UgPSBgJHt0aGlzLnNlcnZpY2VOYW1lfTogJHttZXNzYWdlfSAoJHtmdWxsQ29kZX0pLmA7XHJcbiAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRmlyZWJhc2VFcnJvcihmdWxsQ29kZSwgZnVsbE1lc3NhZ2UsIGN1c3RvbURhdGEpO1xyXG4gICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiByZXBsYWNlVGVtcGxhdGUodGVtcGxhdGUsIGRhdGEpIHtcclxuICAgIHJldHVybiB0ZW1wbGF0ZS5yZXBsYWNlKFBBVFRFUk4sIChfLCBrZXkpID0+IHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFba2V5XTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCA/IFN0cmluZyh2YWx1ZSkgOiBgPCR7a2V5fT8+YDtcclxuICAgIH0pO1xyXG59XHJcbmNvbnN0IFBBVFRFUk4gPSAvXFx7XFwkKFtefV0rKX0vZztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEV2YWx1YXRlcyBhIEpTT04gc3RyaW5nIGludG8gYSBqYXZhc2NyaXB0IG9iamVjdC5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBBIHN0cmluZyBjb250YWluaW5nIEpTT04uXHJcbiAqIEByZXR1cm4geyp9IFRoZSBqYXZhc2NyaXB0IG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNwZWNpZmllZCBKU09OLlxyXG4gKi9cclxuZnVuY3Rpb24ganNvbkV2YWwoc3RyKSB7XHJcbiAgICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIEpTT04gcmVwcmVzZW50aW5nIGEgamF2YXNjcmlwdCBvYmplY3QuXHJcbiAqIEBwYXJhbSB7Kn0gZGF0YSBKYXZhc2NyaXB0IG9iamVjdCB0byBiZSBzdHJpbmdpZmllZC5cclxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgSlNPTiBjb250ZW50cyBvZiB0aGUgb2JqZWN0LlxyXG4gKi9cclxuZnVuY3Rpb24gc3RyaW5naWZ5KGRhdGEpIHtcclxuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGludG8gY29uc3RpdHVlbnQgcGFydHMuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gd2l0aCBpbnZhbGlkIC8gaW5jb21wbGV0ZSBjbGFpbXMgaWYgdGhlcmUncyBubyBuYXRpdmUgYmFzZTY0IGRlY29kaW5nIHN1cHBvcnQuXHJcbiAqIC0gRG9lc24ndCBjaGVjayBpZiB0aGUgdG9rZW4gaXMgYWN0dWFsbHkgdmFsaWQuXHJcbiAqL1xyXG5jb25zdCBkZWNvZGUgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGxldCBoZWFkZXIgPSB7fSwgY2xhaW1zID0ge30sIGRhdGEgPSB7fSwgc2lnbmF0dXJlID0gJyc7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gdG9rZW4uc3BsaXQoJy4nKTtcclxuICAgICAgICBoZWFkZXIgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMF0pIHx8ICcnKTtcclxuICAgICAgICBjbGFpbXMgPSBqc29uRXZhbChiYXNlNjREZWNvZGUocGFydHNbMV0pIHx8ICcnKTtcclxuICAgICAgICBzaWduYXR1cmUgPSBwYXJ0c1syXTtcclxuICAgICAgICBkYXRhID0gY2xhaW1zWydkJ10gfHwge307XHJcbiAgICAgICAgZGVsZXRlIGNsYWltc1snZCddO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHsgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoZWFkZXIsXHJcbiAgICAgICAgY2xhaW1zLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgICAgc2lnbmF0dXJlXHJcbiAgICB9O1xyXG59O1xyXG4vKipcclxuICogRGVjb2RlcyBhIEZpcmViYXNlIGF1dGguIHRva2VuIGFuZCBjaGVja3MgdGhlIHZhbGlkaXR5IG9mIGl0cyB0aW1lLWJhc2VkIGNsYWltcy4gV2lsbCByZXR1cm4gdHJ1ZSBpZiB0aGVcclxuICogdG9rZW4gaXMgd2l0aGluIHRoZSB0aW1lIHdpbmRvdyBhdXRob3JpemVkIGJ5IHRoZSAnbmJmJyAobm90LWJlZm9yZSkgYW5kICdpYXQnIChpc3N1ZWQtYXQpIGNsYWltcy5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBhIGZhbHNlIG5lZ2F0aXZlIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNWYWxpZFRpbWVzdGFtcCA9IGZ1bmN0aW9uICh0b2tlbikge1xyXG4gICAgY29uc3QgY2xhaW1zID0gZGVjb2RlKHRva2VuKS5jbGFpbXM7XHJcbiAgICBjb25zdCBub3cgPSBNYXRoLmZsb29yKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7XHJcbiAgICBsZXQgdmFsaWRTaW5jZSA9IDAsIHZhbGlkVW50aWwgPSAwO1xyXG4gICAgaWYgKHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnbmJmJykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snbmJmJ107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNsYWltcy5oYXNPd25Qcm9wZXJ0eSgnaWF0JykpIHtcclxuICAgICAgICAgICAgdmFsaWRTaW5jZSA9IGNsYWltc1snaWF0J107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2V4cCcpKSB7XHJcbiAgICAgICAgICAgIHZhbGlkVW50aWwgPSBjbGFpbXNbJ2V4cCddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gdG9rZW4gd2lsbCBleHBpcmUgYWZ0ZXIgMjRoIGJ5IGRlZmF1bHRcclxuICAgICAgICAgICAgdmFsaWRVbnRpbCA9IHZhbGlkU2luY2UgKyA4NjQwMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKCEhbm93ICYmXHJcbiAgICAgICAgISF2YWxpZFNpbmNlICYmXHJcbiAgICAgICAgISF2YWxpZFVudGlsICYmXHJcbiAgICAgICAgbm93ID49IHZhbGlkU2luY2UgJiZcclxuICAgICAgICBub3cgPD0gdmFsaWRVbnRpbCk7XHJcbn07XHJcbi8qKlxyXG4gKiBEZWNvZGVzIGEgRmlyZWJhc2UgYXV0aC4gdG9rZW4gYW5kIHJldHVybnMgaXRzIGlzc3VlZCBhdCB0aW1lIGlmIHZhbGlkLCBudWxsIG90aGVyd2lzZS5cclxuICpcclxuICogTm90ZXM6XHJcbiAqIC0gTWF5IHJldHVybiBudWxsIGlmIHRoZXJlJ3Mgbm8gbmF0aXZlIGJhc2U2NCBkZWNvZGluZyBzdXBwb3J0LlxyXG4gKiAtIERvZXNuJ3QgY2hlY2sgaWYgdGhlIHRva2VuIGlzIGFjdHVhbGx5IHZhbGlkLlxyXG4gKi9cclxuY29uc3QgaXNzdWVkQXRUaW1lID0gZnVuY3Rpb24gKHRva2VuKSB7XHJcbiAgICBjb25zdCBjbGFpbXMgPSBkZWNvZGUodG9rZW4pLmNsYWltcztcclxuICAgIGlmICh0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpKSB7XHJcbiAgICAgICAgcmV0dXJuIGNsYWltc1snaWF0J107XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufTtcclxuLyoqXHJcbiAqIERlY29kZXMgYSBGaXJlYmFzZSBhdXRoLiB0b2tlbiBhbmQgY2hlY2tzIHRoZSB2YWxpZGl0eSBvZiBpdHMgZm9ybWF0LiBFeHBlY3RzIGEgdmFsaWQgaXNzdWVkLWF0IHRpbWUuXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzVmFsaWRGb3JtYXQgPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGRlY29kZWQgPSBkZWNvZGUodG9rZW4pLCBjbGFpbXMgPSBkZWNvZGVkLmNsYWltcztcclxuICAgIHJldHVybiAhIWNsYWltcyAmJiB0eXBlb2YgY2xhaW1zID09PSAnb2JqZWN0JyAmJiBjbGFpbXMuaGFzT3duUHJvcGVydHkoJ2lhdCcpO1xyXG59O1xyXG4vKipcclxuICogQXR0ZW1wdHMgdG8gcGVlciBpbnRvIGFuIGF1dGggdG9rZW4gYW5kIGRldGVybWluZSBpZiBpdCdzIGFuIGFkbWluIGF1dGggdG9rZW4gYnkgbG9va2luZyBhdCB0aGUgY2xhaW1zIHBvcnRpb24uXHJcbiAqXHJcbiAqIE5vdGVzOlxyXG4gKiAtIE1heSByZXR1cm4gYSBmYWxzZSBuZWdhdGl2ZSBpZiB0aGVyZSdzIG5vIG5hdGl2ZSBiYXNlNjQgZGVjb2Rpbmcgc3VwcG9ydC5cclxuICogLSBEb2Vzbid0IGNoZWNrIGlmIHRoZSB0b2tlbiBpcyBhY3R1YWxseSB2YWxpZC5cclxuICovXHJcbmNvbnN0IGlzQWRtaW4gPSBmdW5jdGlvbiAodG9rZW4pIHtcclxuICAgIGNvbnN0IGNsYWltcyA9IGRlY29kZSh0b2tlbikuY2xhaW1zO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBjbGFpbXMgPT09ICdvYmplY3QnICYmIGNsYWltc1snYWRtaW4nXSA9PT0gdHJ1ZTtcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gY29udGFpbnMob2JqLCBrZXkpIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xyXG59XHJcbmZ1bmN0aW9uIHNhZmVHZXQob2JqLCBrZXkpIHtcclxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBpc0VtcHR5KG9iaikge1xyXG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIG1hcChvYmosIGZuLCBjb250ZXh0T2JqKSB7XHJcbiAgICBjb25zdCByZXMgPSB7fTtcclxuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xyXG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7XHJcbiAgICAgICAgICAgIHJlc1trZXldID0gZm4uY2FsbChjb250ZXh0T2JqLCBvYmpba2V5XSwga2V5LCBvYmopO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiByZXM7XHJcbn1cclxuLyoqXHJcbiAqIERlZXAgZXF1YWwgdHdvIG9iamVjdHMuIFN1cHBvcnQgQXJyYXlzIGFuZCBPYmplY3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gZGVlcEVxdWFsKGEsIGIpIHtcclxuICAgIGlmIChhID09PSBiKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBjb25zdCBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xyXG4gICAgY29uc3QgYktleXMgPSBPYmplY3Qua2V5cyhiKTtcclxuICAgIGZvciAoY29uc3QgayBvZiBhS2V5cykge1xyXG4gICAgICAgIGlmICghYktleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhUHJvcCA9IGFba107XHJcbiAgICAgICAgY29uc3QgYlByb3AgPSBiW2tdO1xyXG4gICAgICAgIGlmIChpc09iamVjdChhUHJvcCkgJiYgaXNPYmplY3QoYlByb3ApKSB7XHJcbiAgICAgICAgICAgIGlmICghZGVlcEVxdWFsKGFQcm9wLCBiUHJvcCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhUHJvcCAhPT0gYlByb3ApIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGZvciAoY29uc3QgayBvZiBiS2V5cykge1xyXG4gICAgICAgIGlmICghYUtleXMuaW5jbHVkZXMoaykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG59XHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHRoaW5nKSB7XHJcbiAgICByZXR1cm4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmVqZWN0cyBpZiB0aGUgZ2l2ZW4gcHJvbWlzZSBkb2Vzbid0IHJlc29sdmUgaW4gdGltZUluTVMgbWlsbGlzZWNvbmRzLlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIHByb21pc2VXaXRoVGltZW91dChwcm9taXNlLCB0aW1lSW5NUyA9IDIwMDApIHtcclxuICAgIGNvbnN0IGRlZmVycmVkUHJvbWlzZSA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiBkZWZlcnJlZFByb21pc2UucmVqZWN0KCd0aW1lb3V0IScpLCB0aW1lSW5NUyk7XHJcbiAgICBwcm9taXNlLnRoZW4oZGVmZXJyZWRQcm9taXNlLnJlc29sdmUsIGRlZmVycmVkUHJvbWlzZS5yZWplY3QpO1xyXG4gICAgcmV0dXJuIGRlZmVycmVkUHJvbWlzZS5wcm9taXNlO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGEgcXVlcnlzdHJpbmctZm9ybWF0dGVkIHN0cmluZyAoZS5nLiAmYXJnPXZhbCZhcmcyPXZhbDIpIGZyb20gYVxyXG4gKiBwYXJhbXMgb2JqZWN0IChlLmcuIHthcmc6ICd2YWwnLCBhcmcyOiAndmFsMid9KVxyXG4gKiBOb3RlOiBZb3UgbXVzdCBwcmVwZW5kIGl0IHdpdGggPyB3aGVuIGFkZGluZyBpdCB0byBhIFVSTC5cclxuICovXHJcbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5c3RyaW5nUGFyYW1zKSB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHF1ZXJ5c3RyaW5nUGFyYW1zKSkge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGFycmF5VmFsID0+IHtcclxuICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrZXkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFycmF5VmFsKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcGFyYW1zLnB1c2goZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFyYW1zLmxlbmd0aCA/ICcmJyArIHBhcmFtcy5qb2luKCcmJykgOiAnJztcclxufVxyXG4vKipcclxuICogRGVjb2RlcyBhIHF1ZXJ5c3RyaW5nIChlLmcuID9hcmc9dmFsJmFyZzI9dmFsMikgaW50byBhIHBhcmFtcyBvYmplY3RcclxuICogKGUuZy4ge2FyZzogJ3ZhbCcsIGFyZzI6ICd2YWwyJ30pXHJcbiAqL1xyXG5mdW5jdGlvbiBxdWVyeXN0cmluZ0RlY29kZShxdWVyeXN0cmluZykge1xyXG4gICAgY29uc3Qgb2JqID0ge307XHJcbiAgICBjb25zdCB0b2tlbnMgPSBxdWVyeXN0cmluZy5yZXBsYWNlKC9eXFw/LywgJycpLnNwbGl0KCcmJyk7XHJcbiAgICB0b2tlbnMuZm9yRWFjaCh0b2tlbiA9PiB7XHJcbiAgICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIHZhbHVlXSA9IHRva2VuLnNwbGl0KCc9Jyk7XHJcbiAgICAgICAgICAgIG9ialtkZWNvZGVVUklDb21wb25lbnQoa2V5KV0gPSBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG4vKipcclxuICogRXh0cmFjdCB0aGUgcXVlcnkgc3RyaW5nIHBhcnQgb2YgYSBVUkwsIGluY2x1ZGluZyB0aGUgbGVhZGluZyBxdWVzdGlvbiBtYXJrIChpZiBwcmVzZW50KS5cclxuICovXHJcbmZ1bmN0aW9uIGV4dHJhY3RRdWVyeXN0cmluZyh1cmwpIHtcclxuICAgIGNvbnN0IHF1ZXJ5U3RhcnQgPSB1cmwuaW5kZXhPZignPycpO1xyXG4gICAgaWYgKCFxdWVyeVN0YXJ0KSB7XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZnJhZ21lbnRTdGFydCA9IHVybC5pbmRleE9mKCcjJywgcXVlcnlTdGFydCk7XHJcbiAgICByZXR1cm4gdXJsLnN1YnN0cmluZyhxdWVyeVN0YXJ0LCBmcmFnbWVudFN0YXJ0ID4gMCA/IGZyYWdtZW50U3RhcnQgOiB1bmRlZmluZWQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IFNIQS0xIGNyeXB0b2dyYXBoaWMgaGFzaC5cclxuICogVmFyaWFibGUgbmFtZXMgZm9sbG93IHRoZSBub3RhdGlvbiBpbiBGSVBTIFBVQiAxODAtMzpcclxuICogaHR0cDovL2NzcmMubmlzdC5nb3YvcHVibGljYXRpb25zL2ZpcHMvZmlwczE4MC0zL2ZpcHMxODAtM19maW5hbC5wZGYuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiAgIHZhciBzaGExID0gbmV3IHNoYTEoKTtcclxuICogICBzaGExLnVwZGF0ZShieXRlcyk7XHJcbiAqICAgdmFyIGhhc2ggPSBzaGExLmRpZ2VzdCgpO1xyXG4gKlxyXG4gKiBQZXJmb3JtYW5jZTpcclxuICogICBDaHJvbWUgMjM6ICAgfjQwMCBNYml0L3NcclxuICogICBGaXJlZm94IDE2OiAgfjI1MCBNYml0L3NcclxuICpcclxuICovXHJcbi8qKlxyXG4gKiBTSEEtMSBjcnlwdG9ncmFwaGljIGhhc2ggY29uc3RydWN0b3IuXHJcbiAqXHJcbiAqIFRoZSBwcm9wZXJ0aWVzIGRlY2xhcmVkIGhlcmUgYXJlIGRpc2N1c3NlZCBpbiB0aGUgYWJvdmUgYWxnb3JpdGhtIGRvY3VtZW50LlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQGZpbmFsXHJcbiAqIEBzdHJ1Y3RcclxuICovXHJcbmNsYXNzIFNoYTEge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogSG9sZHMgdGhlIHByZXZpb3VzIHZhbHVlcyBvZiBhY2N1bXVsYXRlZCB2YXJpYWJsZXMgYS1lIGluIHRoZSBjb21wcmVzc19cclxuICAgICAgICAgKiBmdW5jdGlvbi5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuY2hhaW5fID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQSBidWZmZXIgaG9sZGluZyB0aGUgcGFydGlhbGx5IGNvbXB1dGVkIGhhc2ggcmVzdWx0LlxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5idWZfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQW4gYXJyYXkgb2YgODAgYnl0ZXMsIGVhY2ggYSBwYXJ0IG9mIHRoZSBtZXNzYWdlIHRvIGJlIGhhc2hlZC4gIFJlZmVycmVkIHRvXHJcbiAgICAgICAgICogYXMgdGhlIG1lc3NhZ2Ugc2NoZWR1bGUgaW4gdGhlIGRvY3MuXHJcbiAgICAgICAgICogQHByaXZhdGVcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLldfID0gW107XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQ29udGFpbnMgZGF0YSBuZWVkZWQgdG8gcGFkIG1lc3NhZ2VzIGxlc3MgdGhhbiA2NCBieXRlcy5cclxuICAgICAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMucGFkXyA9IFtdO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEBwcml2YXRlIHtudW1iZXJ9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy50b3RhbF8gPSAwO1xyXG4gICAgICAgIHRoaXMuYmxvY2tTaXplID0gNTEyIC8gODtcclxuICAgICAgICB0aGlzLnBhZF9bMF0gPSAxMjg7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLmJsb2NrU2l6ZTsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFkX1tpXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzBdID0gMHg2NzQ1MjMwMTtcclxuICAgICAgICB0aGlzLmNoYWluX1sxXSA9IDB4ZWZjZGFiODk7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAweDk4YmFkY2ZlO1xyXG4gICAgICAgIHRoaXMuY2hhaW5fWzNdID0gMHgxMDMyNTQ3NjtcclxuICAgICAgICB0aGlzLmNoYWluX1s0XSA9IDB4YzNkMmUxZjA7XHJcbiAgICAgICAgdGhpcy5pbmJ1Zl8gPSAwO1xyXG4gICAgICAgIHRoaXMudG90YWxfID0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSW50ZXJuYWwgY29tcHJlc3MgaGVscGVyIGZ1bmN0aW9uLlxyXG4gICAgICogQHBhcmFtIGJ1ZiBCbG9jayB0byBjb21wcmVzcy5cclxuICAgICAqIEBwYXJhbSBvZmZzZXQgT2Zmc2V0IG9mIHRoZSBibG9jayBpbiB0aGUgYnVmZmVyLlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgY29tcHJlc3NfKGJ1Ziwgb2Zmc2V0KSB7XHJcbiAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgVyA9IHRoaXMuV187XHJcbiAgICAgICAgLy8gZ2V0IDE2IGJpZyBlbmRpYW4gd29yZHNcclxuICAgICAgICBpZiAodHlwZW9mIGJ1ZiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUT0RPKHVzZXIpOiBbYnVnIDgxNDAxMjJdIFJlY2VudCB2ZXJzaW9ucyBvZiBTYWZhcmkgZm9yIE1hYyBPUyBhbmQgaU9TXHJcbiAgICAgICAgICAgICAgICAvLyBoYXZlIGEgYnVnIHRoYXQgdHVybnMgdGhlIHBvc3QtaW5jcmVtZW50ICsrIG9wZXJhdG9yIGludG8gcHJlLWluY3JlbWVudFxyXG4gICAgICAgICAgICAgICAgLy8gZHVyaW5nIEpJVCBjb21waWxhdGlvbi4gIFdlIGhhdmUgY29kZSB0aGF0IGRlcGVuZHMgaGVhdmlseSBvbiBTSEEtMSBmb3JcclxuICAgICAgICAgICAgICAgIC8vIGNvcnJlY3RuZXNzIGFuZCB3aGljaCBpcyBhZmZlY3RlZCBieSB0aGlzIGJ1Zywgc28gSSd2ZSByZW1vdmVkIGFsbCB1c2VzXHJcbiAgICAgICAgICAgICAgICAvLyBvZiBwb3N0LWluY3JlbWVudCArKyBpbiB3aGljaCB0aGUgcmVzdWx0IHZhbHVlIGlzIHVzZWQuICBXZSBjYW4gcmV2ZXJ0XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIGNoYW5nZSBvbmNlIHRoZSBTYWZhcmkgYnVnXHJcbiAgICAgICAgICAgICAgICAvLyAoaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEwOTAzNikgaGFzIGJlZW4gZml4ZWQgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGNsaWVudHMgaGF2ZSBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0KSA8PCAyNCkgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1Zi5jaGFyQ29kZUF0KG9mZnNldCArIDIpIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmLmNoYXJDb2RlQXQob2Zmc2V0ICsgMyk7XHJcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gNDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxNjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBXW2ldID1cclxuICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldF0gPDwgMjQpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGJ1ZltvZmZzZXQgKyAxXSA8PCAxNikgfFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVmW29mZnNldCArIDJdIDw8IDgpIHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmW29mZnNldCArIDNdO1xyXG4gICAgICAgICAgICAgICAgb2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZXhwYW5kIHRvIDgwIHdvcmRzXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE2OyBpIDwgODA7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gV1tpIC0gM10gXiBXW2kgLSA4XSBeIFdbaSAtIDE0XSBeIFdbaSAtIDE2XTtcclxuICAgICAgICAgICAgV1tpXSA9ICgodCA8PCAxKSB8ICh0ID4+PiAzMSkpICYgMHhmZmZmZmZmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGEgPSB0aGlzLmNoYWluX1swXTtcclxuICAgICAgICBsZXQgYiA9IHRoaXMuY2hhaW5fWzFdO1xyXG4gICAgICAgIGxldCBjID0gdGhpcy5jaGFpbl9bMl07XHJcbiAgICAgICAgbGV0IGQgPSB0aGlzLmNoYWluX1szXTtcclxuICAgICAgICBsZXQgZSA9IHRoaXMuY2hhaW5fWzRdO1xyXG4gICAgICAgIGxldCBmLCBrO1xyXG4gICAgICAgIC8vIFRPRE8odXNlcik6IFRyeSB0byB1bnJvbGwgdGhpcyBsb29wIHRvIHNwZWVkIHVwIHRoZSBjb21wdXRhdGlvbi5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDgwOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGkgPCA0MCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBkIF4gKGIgJiAoYyBeIGQpKTtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHg1YTgyNzk5OTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBiIF4gYyBeIGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgayA9IDB4NmVkOWViYTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IChiICYgYykgfCAoZCAmIChiIHwgYykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGsgPSAweDhmMWJiY2RjO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGIgXiBjIF4gZDtcclxuICAgICAgICAgICAgICAgICAgICBrID0gMHhjYTYyYzFkNjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB0ID0gKCgoYSA8PCA1KSB8IChhID4+PiAyNykpICsgZiArIGUgKyBrICsgV1tpXSkgJiAweGZmZmZmZmZmO1xyXG4gICAgICAgICAgICBlID0gZDtcclxuICAgICAgICAgICAgZCA9IGM7XHJcbiAgICAgICAgICAgIGMgPSAoKGIgPDwgMzApIHwgKGIgPj4+IDIpKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgICAgIGIgPSBhO1xyXG4gICAgICAgICAgICBhID0gdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMF0gPSAodGhpcy5jaGFpbl9bMF0gKyBhKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMV0gPSAodGhpcy5jaGFpbl9bMV0gKyBiKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bMl0gPSAodGhpcy5jaGFpbl9bMl0gKyBjKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bM10gPSAodGhpcy5jaGFpbl9bM10gKyBkKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICAgICAgdGhpcy5jaGFpbl9bNF0gPSAodGhpcy5jaGFpbl9bNF0gKyBlKSAmIDB4ZmZmZmZmZmY7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoYnl0ZXMsIGxlbmd0aCkge1xyXG4gICAgICAgIC8vIFRPRE8oam9obmxlbnopOiB0aWdodGVuIHRoZSBmdW5jdGlvbiBzaWduYXR1cmUgYW5kIHJlbW92ZSB0aGlzIGNoZWNrXHJcbiAgICAgICAgaWYgKGJ5dGVzID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBsZW5ndGhNaW51c0Jsb2NrID0gbGVuZ3RoIC0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIC8vIFVzaW5nIGxvY2FsIGluc3RlYWQgb2YgbWVtYmVyIHZhcmlhYmxlcyBnaXZlcyB+NSUgc3BlZWR1cCBvbiBGaXJlZm94IDE2LlxyXG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMuYnVmXztcclxuICAgICAgICBsZXQgaW5idWYgPSB0aGlzLmluYnVmXztcclxuICAgICAgICAvLyBUaGUgb3V0ZXIgd2hpbGUgbG9vcCBzaG91bGQgZXhlY3V0ZSBhdCBtb3N0IHR3aWNlLlxyXG4gICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgaGF2ZSBubyBkYXRhIGluIHRoZSBibG9jayB0byB0b3AgdXAsIHdlIGNhbiBkaXJlY3RseSBwcm9jZXNzIHRoZVxyXG4gICAgICAgICAgICAvLyBpbnB1dCBidWZmZXIgKGFzc3VtaW5nIGl0IGNvbnRhaW5zIHN1ZmZpY2llbnQgZGF0YSkuIFRoaXMgZ2l2ZXMgfjI1JVxyXG4gICAgICAgICAgICAvLyBzcGVlZHVwIG9uIENocm9tZSAyMyBhbmQgfjE1JSBzcGVlZHVwIG9uIEZpcmVmb3ggMTYsIGJ1dCByZXF1aXJlcyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSBkYXRhIGlzIHByb3ZpZGVkIGluIGxhcmdlIGNodW5rcyAob3IgaW4gbXVsdGlwbGVzIG9mIDY0IGJ5dGVzKS5cclxuICAgICAgICAgICAgaWYgKGluYnVmID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobiA8PSBsZW5ndGhNaW51c0Jsb2NrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wcmVzc18oYnl0ZXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gKz0gdGhpcy5ibG9ja1NpemU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuIDwgbGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnVmW2luYnVmXSA9IGJ5dGVzLmNoYXJDb2RlQXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG4gPCBsZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBidWZbaW5idWZdID0gYnl0ZXNbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgKytpbmJ1ZjtcclxuICAgICAgICAgICAgICAgICAgICArK247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluYnVmID09PSB0aGlzLmJsb2NrU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXByZXNzXyhidWYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmJ1ZiA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEp1bXAgdG8gdGhlIG91dGVyIGxvb3Agc28gd2UgdXNlIHRoZSBmdWxsLWJsb2NrIG9wdGltaXphdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5idWZfID0gaW5idWY7XHJcbiAgICAgICAgdGhpcy50b3RhbF8gKz0gbGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgZGlnZXN0KCkge1xyXG4gICAgICAgIGNvbnN0IGRpZ2VzdCA9IFtdO1xyXG4gICAgICAgIGxldCB0b3RhbEJpdHMgPSB0aGlzLnRvdGFsXyAqIDg7XHJcbiAgICAgICAgLy8gQWRkIHBhZCAweDgwIDB4MDAqLlxyXG4gICAgICAgIGlmICh0aGlzLmluYnVmXyA8IDU2KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKHRoaXMucGFkXywgNTYgLSB0aGlzLmluYnVmXyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnBhZF8sIHRoaXMuYmxvY2tTaXplIC0gKHRoaXMuaW5idWZfIC0gNTYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQWRkICMgYml0cy5cclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5ibG9ja1NpemUgLSAxOyBpID49IDU2OyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5idWZfW2ldID0gdG90YWxCaXRzICYgMjU1O1xyXG4gICAgICAgICAgICB0b3RhbEJpdHMgLz0gMjU2OyAvLyBEb24ndCB1c2UgYml0LXNoaWZ0aW5nIGhlcmUhXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcHJlc3NfKHRoaXMuYnVmXyk7XHJcbiAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAyNDsgaiA+PSAwOyBqIC09IDgpIHtcclxuICAgICAgICAgICAgICAgIGRpZ2VzdFtuXSA9ICh0aGlzLmNoYWluX1tpXSA+PiBqKSAmIDI1NTtcclxuICAgICAgICAgICAgICAgICsrbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZGlnZXN0O1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBIZWxwZXIgdG8gbWFrZSBhIFN1YnNjcmliZSBmdW5jdGlvbiAoanVzdCBsaWtlIFByb21pc2UgaGVscHMgbWFrZSBhXHJcbiAqIFRoZW5hYmxlKS5cclxuICpcclxuICogQHBhcmFtIGV4ZWN1dG9yIEZ1bmN0aW9uIHdoaWNoIGNhbiBtYWtlIGNhbGxzIHRvIGEgc2luZ2xlIE9ic2VydmVyXHJcbiAqICAgICBhcyBhIHByb3h5LlxyXG4gKiBAcGFyYW0gb25Ob09ic2VydmVycyBDYWxsYmFjayB3aGVuIGNvdW50IG9mIE9ic2VydmVycyBnb2VzIHRvIHplcm8uXHJcbiAqL1xyXG5mdW5jdGlvbiBjcmVhdGVTdWJzY3JpYmUoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpIHtcclxuICAgIGNvbnN0IHByb3h5ID0gbmV3IE9ic2VydmVyUHJveHkoZXhlY3V0b3IsIG9uTm9PYnNlcnZlcnMpO1xyXG4gICAgcmV0dXJuIHByb3h5LnN1YnNjcmliZS5iaW5kKHByb3h5KTtcclxufVxyXG4vKipcclxuICogSW1wbGVtZW50IGZhbi1vdXQgZm9yIGFueSBudW1iZXIgb2YgT2JzZXJ2ZXJzIGF0dGFjaGVkIHZpYSBhIHN1YnNjcmliZVxyXG4gKiBmdW5jdGlvbi5cclxuICovXHJcbmNsYXNzIE9ic2VydmVyUHJveHkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gZXhlY3V0b3IgRnVuY3Rpb24gd2hpY2ggY2FuIG1ha2UgY2FsbHMgdG8gYSBzaW5nbGUgT2JzZXJ2ZXJcclxuICAgICAqICAgICBhcyBhIHByb3h5LlxyXG4gICAgICogQHBhcmFtIG9uTm9PYnNlcnZlcnMgQ2FsbGJhY2sgd2hlbiBjb3VudCBvZiBPYnNlcnZlcnMgZ29lcyB0byB6ZXJvLlxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihleGVjdXRvciwgb25Ob09ic2VydmVycykge1xyXG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gW107XHJcbiAgICAgICAgdGhpcy51bnN1YnNjcmliZXMgPSBbXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgPSAwO1xyXG4gICAgICAgIC8vIE1pY3JvLXRhc2sgc2NoZWR1bGluZyBieSBjYWxsaW5nIHRhc2sudGhlbigpLlxyXG4gICAgICAgIHRoaXMudGFzayA9IFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIHRoaXMuZmluYWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbk5vT2JzZXJ2ZXJzID0gb25Ob09ic2VydmVycztcclxuICAgICAgICAvLyBDYWxsIHRoZSBleGVjdXRvciBhc3luY2hyb25vdXNseSBzbyBzdWJzY3JpYmVycyB0aGF0IGFyZSBjYWxsZWRcclxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5IGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgc3Vic2NyaWJlIGZ1bmN0aW9uXHJcbiAgICAgICAgLy8gY2FuIHN0aWxsIHJlY2VpdmUgdGhlIHZlcnkgZmlyc3QgdmFsdWUgZ2VuZXJhdGVkIGluIHRoZSBleGVjdXRvci5cclxuICAgICAgICB0aGlzLnRhc2tcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBleGVjdXRvcih0aGlzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBuZXh0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZXJyb3IoZXJyb3IpIHtcclxuICAgICAgICB0aGlzLmZvckVhY2hPYnNlcnZlcigob2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY2xvc2UoZXJyb3IpO1xyXG4gICAgfVxyXG4gICAgY29tcGxldGUoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JFYWNoT2JzZXJ2ZXIoKG9ic2VydmVyKSA9PiB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCB0byBhZGQgYW4gT2JzZXJ2ZXIgdG8gdGhlIGZhbi1vdXQgbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiAtIFdlIHJlcXVpcmUgdGhhdCBubyBldmVudCBpcyBzZW50IHRvIGEgc3Vic2NyaWJlciBzeWNocm9ub3VzbHkgdG8gdGhlaXJcclxuICAgICAqICAgY2FsbCB0byBzdWJzY3JpYmUoKS5cclxuICAgICAqL1xyXG4gICAgc3Vic2NyaWJlKG5leHRPck9ic2VydmVyLCBlcnJvciwgY29tcGxldGUpIHtcclxuICAgICAgICBsZXQgb2JzZXJ2ZXI7XHJcbiAgICAgICAgaWYgKG5leHRPck9ic2VydmVyID09PSB1bmRlZmluZWQgJiZcclxuICAgICAgICAgICAgZXJyb3IgPT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgICAgICBjb21wbGV0ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBPYnNlcnZlci4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQXNzZW1ibGUgYW4gT2JzZXJ2ZXIgb2JqZWN0IHdoZW4gcGFzc2VkIGFzIGNhbGxiYWNrIGZ1bmN0aW9ucy5cclxuICAgICAgICBpZiAoaW1wbGVtZW50c0FueU1ldGhvZHMobmV4dE9yT2JzZXJ2ZXIsIFtcclxuICAgICAgICAgICAgJ25leHQnLFxyXG4gICAgICAgICAgICAnZXJyb3InLFxyXG4gICAgICAgICAgICAnY29tcGxldGUnXHJcbiAgICAgICAgXSkpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXh0T3JPYnNlcnZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyID0ge1xyXG4gICAgICAgICAgICAgICAgbmV4dDogbmV4dE9yT2JzZXJ2ZXIsXHJcbiAgICAgICAgICAgICAgICBlcnJvcixcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5uZXh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCA9IG5vb3A7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvYnNlcnZlci5lcnJvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yID0gbm9vcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9ic2VydmVyLmNvbXBsZXRlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUgPSBub29wO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB1bnN1YiA9IHRoaXMudW5zdWJzY3JpYmVPbmUuYmluZCh0aGlzLCB0aGlzLm9ic2VydmVycy5sZW5ndGgpO1xyXG4gICAgICAgIC8vIEF0dGVtcHQgdG8gc3Vic2NyaWJlIHRvIGEgdGVybWluYXRlZCBPYnNlcnZhYmxlIC0gd2VcclxuICAgICAgICAvLyBqdXN0IHJlc3BvbmQgdG8gdGhlIE9ic2VydmVyIHdpdGggdGhlIGZpbmFsIGVycm9yIG9yIGNvbXBsZXRlXHJcbiAgICAgICAgLy8gZXZlbnQuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluYWxpemVkKSB7XHJcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICAgICAgdGhpcy50YXNrLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5hbEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKHRoaXMuZmluYWxFcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XHJcbiAgICAgICAgcmV0dXJuIHVuc3ViO1xyXG4gICAgfVxyXG4gICAgLy8gVW5zdWJzY3JpYmUgaXMgc3luY2hyb25vdXMgLSB3ZSBndWFyYW50ZWUgdGhhdCBubyBldmVudHMgYXJlIHNlbnQgdG9cclxuICAgIC8vIGFueSB1bnN1YnNjcmliZWQgT2JzZXJ2ZXIuXHJcbiAgICB1bnN1YnNjcmliZU9uZShpKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzID09PSB1bmRlZmluZWQgfHwgdGhpcy5vYnNlcnZlcnNbaV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGRlbGV0ZSB0aGlzLm9ic2VydmVyc1tpXTtcclxuICAgICAgICB0aGlzLm9ic2VydmVyQ291bnQgLT0gMTtcclxuICAgICAgICBpZiAodGhpcy5vYnNlcnZlckNvdW50ID09PSAwICYmIHRoaXMub25Ob09ic2VydmVycyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBmb3JFYWNoT2JzZXJ2ZXIoZm4pIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgLy8gQWxyZWFkeSBjbG9zZWQgYnkgcHJldmlvdXMgZXZlbnQuLi4uanVzdCBlYXQgdGhlIGFkZGl0aW9uYWwgdmFsdWVzLlxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFNpbmNlIHNlbmRPbmUgY2FsbHMgYXN5bmNocm9ub3VzbHkgLSB0aGVyZSBpcyBubyBjaGFuY2UgdGhhdFxyXG4gICAgICAgIC8vIHRoaXMub2JzZXJ2ZXJzIHdpbGwgYmVjb21lIHVuZGVmaW5lZC5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub2JzZXJ2ZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VuZE9uZShpLCBmbik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gQ2FsbCB0aGUgT2JzZXJ2ZXIgdmlhIG9uZSBvZiBpdCdzIGNhbGxiYWNrIGZ1bmN0aW9uLiBXZSBhcmUgY2FyZWZ1bCB0b1xyXG4gICAgLy8gY29uZmlybSB0aGF0IHRoZSBvYnNlcnZlIGhhcyBub3QgYmVlbiB1bnN1YnNjcmliZWQgc2luY2UgdGhpcyBhc3luY2hyb25vdXNcclxuICAgIC8vIGZ1bmN0aW9uIGhhZCBiZWVuIHF1ZXVlZC5cclxuICAgIHNlbmRPbmUoaSwgZm4pIHtcclxuICAgICAgICAvLyBFeGVjdXRlIHRoZSBjYWxsYmFjayBhc3luY2hyb25vdXNseVxyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZmxvYXRpbmctcHJvbWlzZXNcclxuICAgICAgICB0aGlzLnRhc2sudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9ic2VydmVycyAhPT0gdW5kZWZpbmVkICYmIHRoaXMub2JzZXJ2ZXJzW2ldICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm4odGhpcy5vYnNlcnZlcnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJZ25vcmUgZXhjZXB0aW9ucyByYWlzZWQgaW4gT2JzZXJ2ZXJzIG9yIG1pc3NpbmcgbWV0aG9kcyBvZiBhblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIE9ic2VydmVyLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIExvZyBlcnJvciB0byBjb25zb2xlLiBiLzMxNDA0ODA2XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLmVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjbG9zZShlcnIpIHtcclxuICAgICAgICBpZiAodGhpcy5maW5hbGl6ZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmZpbmFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgaWYgKGVyciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluYWxFcnJvciA9IGVycjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUHJveHkgaXMgbm8gbG9uZ2VyIG5lZWRlZCAtIGdhcmJhZ2UgY29sbGVjdCByZWZlcmVuY2VzXHJcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1mbG9hdGluZy1wcm9taXNlc1xyXG4gICAgICAgIHRoaXMudGFzay50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHRoaXMub25Ob09ic2VydmVycyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKiogVHVybiBzeW5jaHJvbm91cyBmdW5jdGlvbiBpbnRvIG9uZSBjYWxsZWQgYXN5bmNocm9ub3VzbHkuICovXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXHJcbmZ1bmN0aW9uIGFzeW5jKGZuLCBvbkVycm9yKSB7XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICBQcm9taXNlLnJlc29sdmUodHJ1ZSlcclxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBmbiguLi5hcmdzKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvbkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBvbkVycm9yKGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxufVxyXG4vKipcclxuICogUmV0dXJuIHRydWUgaWYgdGhlIG9iamVjdCBwYXNzZWQgaW4gaW1wbGVtZW50cyBhbnkgb2YgdGhlIG5hbWVkIG1ldGhvZHMuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbXBsZW1lbnRzQW55TWV0aG9kcyhvYmosIG1ldGhvZHMpIHtcclxuICAgIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0JyB8fCBvYmogPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBmb3IgKGNvbnN0IG1ldGhvZCBvZiBtZXRob2RzKSB7XHJcbiAgICAgICAgaWYgKG1ldGhvZCBpbiBvYmogJiYgdHlwZW9mIG9ialttZXRob2RdID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxufVxyXG5mdW5jdGlvbiBub29wKCkge1xyXG4gICAgLy8gZG8gbm90aGluZ1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBDaGVjayB0byBtYWtlIHN1cmUgdGhlIGFwcHJvcHJpYXRlIG51bWJlciBvZiBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIGZvciBhIHB1YmxpYyBmdW5jdGlvbi5cclxuICogVGhyb3dzIGFuIGVycm9yIGlmIGl0IGZhaWxzLlxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBtaW5Db3VudCBUaGUgbWluaW11bSBudW1iZXIgb2YgYXJndW1lbnRzIHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gbWF4Q291bnQgVGhlIG1heGltdW0gbnVtYmVyIG9mIGFyZ3VtZW50IHRvIGFsbG93IGZvciB0aGUgZnVuY3Rpb24gY2FsbFxyXG4gKiBAcGFyYW0gYXJnQ291bnQgVGhlIGFjdHVhbCBudW1iZXIgb2YgYXJndW1lbnRzIHByb3ZpZGVkLlxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGVBcmdDb3VudCA9IGZ1bmN0aW9uIChmbk5hbWUsIG1pbkNvdW50LCBtYXhDb3VudCwgYXJnQ291bnQpIHtcclxuICAgIGxldCBhcmdFcnJvcjtcclxuICAgIGlmIChhcmdDb3VudCA8IG1pbkNvdW50KSB7XHJcbiAgICAgICAgYXJnRXJyb3IgPSAnYXQgbGVhc3QgJyArIG1pbkNvdW50O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYXJnQ291bnQgPiBtYXhDb3VudCkge1xyXG4gICAgICAgIGFyZ0Vycm9yID0gbWF4Q291bnQgPT09IDAgPyAnbm9uZScgOiAnbm8gbW9yZSB0aGFuICcgKyBtYXhDb3VudDtcclxuICAgIH1cclxuICAgIGlmIChhcmdFcnJvcikge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gZm5OYW1lICtcclxuICAgICAgICAgICAgJyBmYWlsZWQ6IFdhcyBjYWxsZWQgd2l0aCAnICtcclxuICAgICAgICAgICAgYXJnQ291bnQgK1xyXG4gICAgICAgICAgICAoYXJnQ291bnQgPT09IDEgPyAnIGFyZ3VtZW50LicgOiAnIGFyZ3VtZW50cy4nKSArXHJcbiAgICAgICAgICAgICcgRXhwZWN0cyAnICtcclxuICAgICAgICAgICAgYXJnRXJyb3IgK1xyXG4gICAgICAgICAgICAnLic7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgIH1cclxufTtcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIHN0cmluZyB0byBwcmVmaXggYW4gZXJyb3IgbWVzc2FnZSBhYm91dCBmYWlsZWQgYXJndW1lbnQgdmFsaWRhdGlvblxyXG4gKlxyXG4gKiBAcGFyYW0gZm5OYW1lIFRoZSBmdW5jdGlvbiBuYW1lXHJcbiAqIEBwYXJhbSBhcmdOYW1lIFRoZSBuYW1lIG9mIHRoZSBhcmd1bWVudFxyXG4gKiBAcmV0dXJuIFRoZSBwcmVmaXggdG8gYWRkIHRvIHRoZSBlcnJvciB0aHJvd24gZm9yIHZhbGlkYXRpb24uXHJcbiAqL1xyXG5mdW5jdGlvbiBlcnJvclByZWZpeChmbk5hbWUsIGFyZ05hbWUpIHtcclxuICAgIHJldHVybiBgJHtmbk5hbWV9IGZhaWxlZDogJHthcmdOYW1lfSBhcmd1bWVudCBgO1xyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0gZm5OYW1lXHJcbiAqIEBwYXJhbSBhcmd1bWVudE51bWJlclxyXG4gKiBAcGFyYW0gbmFtZXNwYWNlXHJcbiAqIEBwYXJhbSBvcHRpb25hbFxyXG4gKi9cclxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lc3BhY2UoZm5OYW1lLCBuYW1lc3BhY2UsIG9wdGlvbmFsKSB7XHJcbiAgICBpZiAob3B0aW9uYWwgJiYgIW5hbWVzcGFjZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIC8vVE9ETzogSSBzaG91bGQgZG8gbW9yZSB2YWxpZGF0aW9uIGhlcmUuIFdlIG9ubHkgYWxsb3cgY2VydGFpbiBjaGFycyBpbiBuYW1lc3BhY2VzLlxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvclByZWZpeChmbk5hbWUsICduYW1lc3BhY2UnKSArICdtdXN0IGJlIGEgdmFsaWQgZmlyZWJhc2UgbmFtZXNwYWNlLicpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHZhbGlkYXRlQ2FsbGJhY2soZm5OYW1lLCBhcmd1bWVudE5hbWUsIFxyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xyXG5jYWxsYmFjaywgb3B0aW9uYWwpIHtcclxuICAgIGlmIChvcHRpb25hbCAmJiAhY2FsbGJhY2spIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgZnVuY3Rpb24uJyk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gdmFsaWRhdGVDb250ZXh0T2JqZWN0KGZuTmFtZSwgYXJndW1lbnROYW1lLCBjb250ZXh0LCBvcHRpb25hbCkge1xyXG4gICAgaWYgKG9wdGlvbmFsICYmICFjb250ZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JyB8fCBjb250ZXh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yUHJlZml4KGZuTmFtZSwgYXJndW1lbnROYW1lKSArICdtdXN0IGJlIGEgdmFsaWQgY29udGV4dCBvYmplY3QuJyk7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLy8gQ29kZSBvcmlnaW5hbGx5IGNhbWUgZnJvbSBnb29nLmNyeXB0LnN0cmluZ1RvVXRmOEJ5dGVBcnJheSwgYnV0IGZvciBzb21lIHJlYXNvbiB0aGV5XHJcbi8vIGF1dG9tYXRpY2FsbHkgcmVwbGFjZWQgJ1xcclxcbicgd2l0aCAnXFxuJywgYW5kIHRoZXkgZGlkbid0IGhhbmRsZSBzdXJyb2dhdGUgcGFpcnMsXHJcbi8vIHNvIGl0J3MgYmVlbiBtb2RpZmllZC5cclxuLy8gTm90ZSB0aGF0IG5vdCBhbGwgVW5pY29kZSBjaGFyYWN0ZXJzIGFwcGVhciBhcyBzaW5nbGUgY2hhcmFjdGVycyBpbiBKYXZhU2NyaXB0IHN0cmluZ3MuXHJcbi8vIGZyb21DaGFyQ29kZSByZXR1cm5zIHRoZSBVVEYtMTYgZW5jb2Rpbmcgb2YgYSBjaGFyYWN0ZXIgLSBzbyBzb21lIFVuaWNvZGUgY2hhcmFjdGVyc1xyXG4vLyB1c2UgMiBjaGFyYWN0ZXJzIGluIEphdmFzY3JpcHQuICBBbGwgNC1ieXRlIFVURi04IGNoYXJhY3RlcnMgYmVnaW4gd2l0aCBhIGZpcnN0XHJcbi8vIGNoYXJhY3RlciBpbiB0aGUgcmFuZ2UgMHhEODAwIC0gMHhEQkZGICh0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGEgc28tY2FsbGVkIHN1cnJvZ2F0ZVxyXG4vLyBwYWlyKS5cclxuLy8gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy0xNS4xLjNcclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJcclxuICogQHJldHVybiB7QXJyYXl9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdUb0J5dGVBcnJheSA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgbGV0IHAgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBsZXQgYyA9IHN0ci5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIC8vIElzIHRoaXMgdGhlIGxlYWQgc3Vycm9nYXRlIGluIGEgc3Vycm9nYXRlIHBhaXI/XHJcbiAgICAgICAgaWYgKGMgPj0gMHhkODAwICYmIGMgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhpZ2ggPSBjIC0gMHhkODAwOyAvLyB0aGUgaGlnaCAxMCBiaXRzLlxyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICAgIGFzc2VydChpIDwgc3RyLmxlbmd0aCwgJ1N1cnJvZ2F0ZSBwYWlyIG1pc3NpbmcgdHJhaWwgc3Vycm9nYXRlLicpO1xyXG4gICAgICAgICAgICBjb25zdCBsb3cgPSBzdHIuY2hhckNvZGVBdChpKSAtIDB4ZGMwMDsgLy8gdGhlIGxvdyAxMCBiaXRzLlxyXG4gICAgICAgICAgICBjID0gMHgxMDAwMCArIChoaWdoIDw8IDEwKSArIGxvdztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPCAxMjgpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgMjA0OCkge1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjID4+IDYpIHwgMTkyO1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChjIDwgNjU1MzYpIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxMikgfCAyMjQ7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDYpICYgNjMpIHwgMTI4O1xyXG4gICAgICAgICAgICBvdXRbcCsrXSA9IChjICYgNjMpIHwgMTI4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoYyA+PiAxOCkgfCAyNDA7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKChjID4+IDEyKSAmIDYzKSB8IDEyODtcclxuICAgICAgICAgICAgb3V0W3ArK10gPSAoKGMgPj4gNikgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgICAgIG91dFtwKytdID0gKGMgJiA2MykgfCAxMjg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuLyoqXHJcbiAqIENhbGN1bGF0ZSBsZW5ndGggd2l0aG91dCBhY3R1YWxseSBjb252ZXJ0aW5nOyB1c2VmdWwgZm9yIGRvaW5nIGNoZWFwZXIgdmFsaWRhdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG5jb25zdCBzdHJpbmdMZW5ndGggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICBsZXQgcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNvbnN0IGMgPSBzdHIuY2hhckNvZGVBdChpKTtcclxuICAgICAgICBpZiAoYyA8IDEyOCkge1xyXG4gICAgICAgICAgICBwKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGMgPCAyMDQ4KSB7XHJcbiAgICAgICAgICAgIHAgKz0gMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoYyA+PSAweGQ4MDAgJiYgYyA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgLy8gTGVhZCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpci4gIFRoZSBwYWlyIHRvZ2V0aGVyIHdpbGwgdGFrZSA0IGJ5dGVzIHRvIHJlcHJlc2VudC5cclxuICAgICAgICAgICAgcCArPSA0O1xyXG4gICAgICAgICAgICBpKys7IC8vIHNraXAgdHJhaWwgc3Vycm9nYXRlLlxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcCArPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29waWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjNcclxuICogR2VuZXJhdGVzIGEgbmV3IHV1aWQuXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IHV1aWR2NCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAneHh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGMgPT4ge1xyXG4gICAgICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG59O1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gZXhwb25lbnRpYWxseSBpbmNyZWFzZS5cclxuICovXHJcbmNvbnN0IERFRkFVTFRfSU5URVJWQUxfTUlMTElTID0gMTAwMDtcclxuLyoqXHJcbiAqIFRoZSBmYWN0b3IgdG8gYmFja29mZiBieS5cclxuICogU2hvdWxkIGJlIGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiAxLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9CQUNLT0ZGX0ZBQ1RPUiA9IDI7XHJcbi8qKlxyXG4gKiBUaGUgbWF4aW11bSBtaWxsaXNlY29uZHMgdG8gaW5jcmVhc2UgdG8uXHJcbiAqXHJcbiAqIDxwPlZpc2libGUgZm9yIHRlc3RpbmdcclxuICovXHJcbmNvbnN0IE1BWF9WQUxVRV9NSUxMSVMgPSA0ICogNjAgKiA2MCAqIDEwMDA7IC8vIEZvdXIgaG91cnMsIGxpa2UgaU9TIGFuZCBBbmRyb2lkLlxyXG4vKipcclxuICogVGhlIHBlcmNlbnRhZ2Ugb2YgYmFja29mZiB0aW1lIHRvIHJhbmRvbWl6ZSBieS5cclxuICogU2VlXHJcbiAqIGh0dHA6Ly9nby9zYWZlLWNsaWVudC1iZWhhdmlvciNzdGVwLTEtZGV0ZXJtaW5lLXRoZS1hcHByb3ByaWF0ZS1yZXRyeS1pbnRlcnZhbC10by1oYW5kbGUtc3Bpa2UtdHJhZmZpY1xyXG4gKiBmb3IgY29udGV4dC5cclxuICpcclxuICogPHA+VmlzaWJsZSBmb3IgdGVzdGluZ1xyXG4gKi9cclxuY29uc3QgUkFORE9NX0ZBQ1RPUiA9IDAuNTtcclxuLyoqXHJcbiAqIEJhc2VkIG9uIHRoZSBiYWNrb2ZmIG1ldGhvZCBmcm9tXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvY2xvc3VyZS1saWJyYXJ5L2Jsb2IvbWFzdGVyL2Nsb3N1cmUvZ29vZy9tYXRoL2V4cG9uZW50aWFsYmFja29mZi5qcy5cclxuICogRXh0cmFjdGVkIGhlcmUgc28gd2UgZG9uJ3QgbmVlZCB0byBwYXNzIG1ldGFkYXRhIGFuZCBhIHN0YXRlZnVsIEV4cG9uZW50aWFsQmFja29mZiBvYmplY3QgYXJvdW5kLlxyXG4gKi9cclxuZnVuY3Rpb24gY2FsY3VsYXRlQmFja29mZk1pbGxpcyhiYWNrb2ZmQ291bnQsIGludGVydmFsTWlsbGlzID0gREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMsIGJhY2tvZmZGYWN0b3IgPSBERUZBVUxUX0JBQ0tPRkZfRkFDVE9SKSB7XHJcbiAgICAvLyBDYWxjdWxhdGVzIGFuIGV4cG9uZW50aWFsbHkgaW5jcmVhc2luZyB2YWx1ZS5cclxuICAgIC8vIERldmlhdGlvbjogY2FsY3VsYXRlcyB2YWx1ZSBmcm9tIGNvdW50IGFuZCBhIGNvbnN0YW50IGludGVydmFsLCBzbyB3ZSBvbmx5IG5lZWQgdG8gc2F2ZSB2YWx1ZVxyXG4gICAgLy8gYW5kIGNvdW50IHRvIHJlc3RvcmUgc3RhdGUuXHJcbiAgICBjb25zdCBjdXJyQmFzZVZhbHVlID0gaW50ZXJ2YWxNaWxsaXMgKiBNYXRoLnBvdyhiYWNrb2ZmRmFjdG9yLCBiYWNrb2ZmQ291bnQpO1xyXG4gICAgLy8gQSByYW5kb20gXCJmdXp6XCIgdG8gYXZvaWQgd2F2ZXMgb2YgcmV0cmllcy5cclxuICAgIC8vIERldmlhdGlvbjogcmFuZG9tRmFjdG9yIGlzIHJlcXVpcmVkLlxyXG4gICAgY29uc3QgcmFuZG9tV2FpdCA9IE1hdGgucm91bmQoXHJcbiAgICAvLyBBIGZyYWN0aW9uIG9mIHRoZSBiYWNrb2ZmIHZhbHVlIHRvIGFkZC9zdWJ0cmFjdC5cclxuICAgIC8vIERldmlhdGlvbjogY2hhbmdlcyBtdWx0aXBsaWNhdGlvbiBvcmRlciB0byBpbXByb3ZlIHJlYWRhYmlsaXR5LlxyXG4gICAgUkFORE9NX0ZBQ1RPUiAqXHJcbiAgICAgICAgY3VyckJhc2VWYWx1ZSAqXHJcbiAgICAgICAgLy8gQSByYW5kb20gZmxvYXQgKHJvdW5kZWQgdG8gaW50IGJ5IE1hdGgucm91bmQgYWJvdmUpIGluIHRoZSByYW5nZSBbLTEsIDFdLiBEZXRlcm1pbmVzXHJcbiAgICAgICAgLy8gaWYgd2UgYWRkIG9yIHN1YnRyYWN0LlxyXG4gICAgICAgIChNYXRoLnJhbmRvbSgpIC0gMC41KSAqXHJcbiAgICAgICAgMik7XHJcbiAgICAvLyBMaW1pdHMgYmFja29mZiB0byBtYXggdG8gYXZvaWQgZWZmZWN0aXZlbHkgcGVybWFuZW50IGJhY2tvZmYuXHJcbiAgICByZXR1cm4gTWF0aC5taW4oTUFYX1ZBTFVFX01JTExJUywgY3VyckJhc2VWYWx1ZSArIHJhbmRvbVdhaXQpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlIEVuZ2xpc2ggb3JkaW5hbCBsZXR0ZXJzIGFmdGVyIGEgbnVtYmVyXHJcbiAqL1xyXG5mdW5jdGlvbiBvcmRpbmFsKGkpIHtcclxuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKGkpKSB7XHJcbiAgICAgICAgcmV0dXJuIGAke2l9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBpICsgaW5kaWNhdG9yKGkpO1xyXG59XHJcbmZ1bmN0aW9uIGluZGljYXRvcihpKSB7XHJcbiAgICBpID0gTWF0aC5hYnMoaSk7XHJcbiAgICBjb25zdCBjZW50ID0gaSAlIDEwMDtcclxuICAgIGlmIChjZW50ID49IDEwICYmIGNlbnQgPD0gMjApIHtcclxuICAgICAgICByZXR1cm4gJ3RoJztcclxuICAgIH1cclxuICAgIGNvbnN0IGRlYyA9IGkgJSAxMDtcclxuICAgIGlmIChkZWMgPT09IDEpIHtcclxuICAgICAgICByZXR1cm4gJ3N0JztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDIpIHtcclxuICAgICAgICByZXR1cm4gJ25kJztcclxuICAgIH1cclxuICAgIGlmIChkZWMgPT09IDMpIHtcclxuICAgICAgICByZXR1cm4gJ3JkJztcclxuICAgIH1cclxuICAgIHJldHVybiAndGgnO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldE1vZHVsYXJJbnN0YW5jZShzZXJ2aWNlKSB7XHJcbiAgICBpZiAoc2VydmljZSAmJiBzZXJ2aWNlLl9kZWxlZ2F0ZSkge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlLl9kZWxlZ2F0ZTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBzZXJ2aWNlO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENPTlNUQU5UUywgRGVjb2RlQmFzZTY0U3RyaW5nRXJyb3IsIERlZmVycmVkLCBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IsIE1BWF9WQUxVRV9NSUxMSVMsIFJBTkRPTV9GQUNUT1IsIFNoYTEsIGFyZUNvb2tpZXNFbmFibGVkLCBhc3NlcnQsIGFzc2VydGlvbkVycm9yLCBhc3luYywgYmFzZTY0LCBiYXNlNjREZWNvZGUsIGJhc2U2NEVuY29kZSwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMsIGNvbnRhaW5zLCBjcmVhdGVNb2NrVXNlclRva2VuLCBjcmVhdGVTdWJzY3JpYmUsIGRlY29kZSwgZGVlcENvcHksIGRlZXBFcXVhbCwgZGVlcEV4dGVuZCwgZXJyb3JQcmVmaXgsIGV4dHJhY3RRdWVyeXN0cmluZywgZ2V0RGVmYXVsdEFwcENvbmZpZywgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdCwgZ2V0RGVmYXVsdEVtdWxhdG9ySG9zdG5hbWVBbmRQb3J0LCBnZXREZWZhdWx0cywgZ2V0RXhwZXJpbWVudGFsU2V0dGluZywgZ2V0R2xvYmFsLCBnZXRNb2R1bGFySW5zdGFuY2UsIGdldFVBLCBpc0FkbWluLCBpc0Jyb3dzZXIsIGlzQnJvd3NlckV4dGVuc2lvbiwgaXNFbGVjdHJvbiwgaXNFbXB0eSwgaXNJRSwgaXNJbmRleGVkREJBdmFpbGFibGUsIGlzTW9iaWxlQ29yZG92YSwgaXNOb2RlLCBpc05vZGVTZGssIGlzUmVhY3ROYXRpdmUsIGlzU2FmYXJpLCBpc1VXUCwgaXNWYWxpZEZvcm1hdCwgaXNWYWxpZFRpbWVzdGFtcCwgaXNzdWVkQXRUaW1lLCBqc29uRXZhbCwgbWFwLCBvcmRpbmFsLCBwcm9taXNlV2l0aFRpbWVvdXQsIHF1ZXJ5c3RyaW5nLCBxdWVyeXN0cmluZ0RlY29kZSwgc2FmZUdldCwgc3RyaW5nTGVuZ3RoLCBzdHJpbmdUb0J5dGVBcnJheSwgc3RyaW5naWZ5LCB1dWlkdjQsIHZhbGlkYXRlQXJnQ291bnQsIHZhbGlkYXRlQ2FsbGJhY2ssIHZhbGlkYXRlQ29udGV4dE9iamVjdCwgdmFsaWRhdGVJbmRleGVkREJPcGVuYWJsZSwgdmFsaWRhdGVOYW1lc3BhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBpbml0aWFsaXplQXBwIH0gZnJvbSBcImZpcmViYXNlL2FwcFwiO1xyXG5pbXBvcnQgeyBnZXRBbmFseXRpY3MsIGxvZ0V2ZW50IH0gZnJvbSBcImZpcmViYXNlL2FuYWx5dGljc1wiO1xyXG5pbXBvcnQgeyBmaXJlYmFzZUNvbmZpZyB9IGZyb20gXCIuL2ZpcmViYXNlLWNvbmZpZ1wiO1xyXG5leHBvcnQgY2xhc3MgQmFzZUZpcmViYXNlSW50ZWdyYXRpb24ge1xyXG4gICAgZmlyZWJhc2VBcHA7XHJcbiAgICBhbmFseXRpY3M7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVGaXJlYmFzZSgpO1xyXG4gICAgfVxyXG4gICAgY3VzdG9tRXZlbnRzKGV2ZW50TmFtZSwgZXZlbnQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsb2dFdmVudCh0aGlzLmFuYWx5dGljcywgZXZlbnROYW1lLCBldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmVycm9yKC4uLm9vX3R4KGAxOTY2NzU0NDM4XzE1XzEyXzE1XzY5XzExYCwgXCJFcnJvciB3aGlsZSBsb2dnaW5nIGN1c3RvbSBldmVudDpcIiwgZXJyb3IpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzZXNzaW9uRW5kKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iub25MaW5lICYmIHRoaXMuYW5hbHl0aWNzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGxvZ0V2ZW50KHRoaXMuYW5hbHl0aWNzLCBcInNlc3Npb25fZW5kXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmVycm9yKC4uLm9vX3R4KGAxOTY2NzU0NDM4XzI0XzEyXzI0Xzc0XzExYCwgXCJFcnJvciB3aGlsZSBsb2dnaW5nIHNlc3Npb25fZW5kIGV2ZW50OlwiLCBlcnJvcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGluaXRpYWxpemVGaXJlYmFzZSgpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB0aGlzLmZpcmViYXNlQXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5hbHl0aWNzID0gZ2V0QW5hbHl0aWNzKHRoaXMuZmlyZWJhc2VBcHApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8gY29uc29sZS5lcnJvciguLi5vb190eChgMTk2Njc1NDQzOF8zMl8xMl8zMl83MF8xMWAsIFwiRXJyb3Igd2hpbGUgaW5pdGlhbGl6aW5nIEZpcmViYXNlOlwiLCBlcnJvcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAvKiBjOCBpZ25vcmUgc3RhcnQgKi8gLyogZXNsaW50LWRpc2FibGUgKi8gO1xyXG5mdW5jdGlvbiBvb19jbSgpIHsgdHJ5IHtcclxuICAgIHJldHVybiAoMCwgZXZhbCkoXCJnbG9iYWxUaGlzLl9jb25zb2xlX25pbmphXCIpIHx8ICgwLCBldmFsKShcIi8qIGh0dHBzOi8vZ2l0aHViLmNvbS93YWxsYWJ5anMvY29uc29sZS1uaW5qYSNob3ctZG9lcy1pdC13b3JrICovJ3VzZSBzdHJpY3QnO3ZhciBfMHhmYjRmODk9XzB4M2ZmOTsoZnVuY3Rpb24oXzB4MzNmZmNlLF8weDQ3NzZhYSl7dmFyIF8weDJhYzJkMj1fMHgzZmY5LF8weDZlMDIxMj1fMHgzM2ZmY2UoKTt3aGlsZSghIVtdKXt0cnl7dmFyIF8weDU2NmZlMT0tcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTIyKSkvMHgxKigtcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTZhKSkvMHgyKSstcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTRhKSkvMHgzKy1wYXJzZUludChfMHgyYWMyZDIoMHhjOSkpLzB4NCooLXBhcnNlSW50KF8weDJhYzJkMigweDE1YikpLzB4NSkrLXBhcnNlSW50KF8weDJhYzJkMigweDEyNykpLzB4NistcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTg3KSkvMHg3KihwYXJzZUludChfMHgyYWMyZDIoMHgxMDkpKS8weDgpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMjYpKS8weDkqKC1wYXJzZUludChfMHgyYWMyZDIoMHgxYmEpKS8weGEpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMmEpKS8weGIqKHBhcnNlSW50KF8weDJhYzJkMigweDExYikpLzB4Yyk7aWYoXzB4NTY2ZmUxPT09XzB4NDc3NmFhKWJyZWFrO2Vsc2UgXzB4NmUwMjEyWydwdXNoJ10oXzB4NmUwMjEyWydzaGlmdCddKCkpO31jYXRjaChfMHgyYzZjMWQpe18weDZlMDIxMlsncHVzaCddKF8weDZlMDIxMlsnc2hpZnQnXSgpKTt9fX0oXzB4MjZlZCwweGQ5NDA1KSk7ZnVuY3Rpb24gXzB4MjZlZCgpe3ZhciBfMHgyNTFmZWQ9WydvbmVycm9yJywnX2luTmV4dEVkZ2UnLCdkYXRlJywnY2xvc2UnLCdsb2cnLCdmdW5jTmFtZScsJ2FsbFN0ckxlbmd0aCcsXFxcImM6XFxcXFxcXFxVc2Vyc1xcXFxcXFxcc2hlZXJ3b29kY1xcXFxcXFxcLnZzY29kZVxcXFxcXFxcZXh0ZW5zaW9uc1xcXFxcXFxcd2FsbGFieWpzLmNvbnNvbGUtbmluamEtMS4wLjM2MFxcXFxcXFxcbm9kZV9tb2R1bGVzXFxcIiwnW29iamVjdFxcXFx4MjBEYXRlXScsJ251bWJlcicsJ2JpbmQnLCdnYXRld2F5LmRvY2tlci5pbnRlcm5hbCcsJ2Jvb2xlYW4nLCdfYWRkTG9hZE5vZGUnLCdwcm90b3R5cGUnLCdfYWRkUHJvcGVydHknLCdvbmNsb3NlJywnX3F1b3RlZFJlZ0V4cCcsJ19yZWdFeHBUb1N0cmluZycsJ3NwbGl0JywnZG9ja2VyaXplZEFwcCcsJ2VudW1lcmFibGUnLCdNYXAnLCd1cmwnLCdfU3ltYm9sJywndmFsdWVPZicsJ25vRnVuY3Rpb25zJywnX2NvbnNvbGVfbmluamFfc2Vzc2lvbicsJ3N0cmluZ2lmeScsJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZScsJ3RvdGFsU3RyTGVuZ3RoJywnbGVuZ3RoJywnb25tZXNzYWdlJywnbWF0Y2gnLCdkZWZhdWx0JywnX2Rpc3Bvc2VXZWJzb2NrZXQnLCdzb3J0UHJvcHMnLCdfY29ubmVjdEF0dGVtcHRDb3VudCcsJycsJ3VucmVmJywnc2VyaWFsaXplJywnX3NldE5vZGVQZXJtaXNzaW9ucycsJ3Vua25vd24nLCd0eXBlJywnX2lzTmVnYXRpdmVaZXJvJywnc3RyaW5nJywndG9VcHBlckNhc2UnLCdwZXJmb3JtYW5jZScsJ2V4cElkJywnZ2V0V2ViU29ja2V0Q2xhc3MnLCdnZXQnLCdzdHJMZW5ndGgnLCcxNmJ2bkpNZicsJ2ZvckVhY2gnLCd3cy9pbmRleC5qcycsJzEyNy4wLjAuMScsJ2F1dG9FeHBhbmRQcmV2aW91c09iamVjdHMnLCdjb25zdHJ1Y3RvcicsJ19oYXNTeW1ib2xQcm9wZXJ0eU9uSXRzUGF0aCcsJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50JywnX2NsZWFuTm9kZScsJ19zb2NrZXQnLCdDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBzZW5kXFxcXHgyMGxvZ3MsXFxcXHgyMHJlc3RhcnRpbmdcXFxceDIwdGhlXFxcXHgyMHByb2Nlc3NcXFxceDIwbWF5XFxcXHgyMGhlbHA7XFxcXHgyMGFsc29cXFxceDIwc2VlXFxcXHgyMCcsJ19zb3J0UHJvcHMnLCdhcmdzJywnY2FwcGVkUHJvcHMnLCdmYWlsZWRcXFxceDIwdG9cXFxceDIwY29ubmVjdFxcXFx4MjB0b1xcXFx4MjBob3N0OlxcXFx4MjAnLCdjb3VudCcsJ3NlbmQnLCdzZWVcXFxceDIwaHR0cHM6Ly90aW55dXJsLmNvbS8ydnQ4anh6d1xcXFx4MjBmb3JcXFxceDIwbW9yZVxcXFx4MjBpbmZvLicsJzIwNjcyNzZEVm96VFonLCdjYWxsJywndGltZVN0YW1wJywnbm93Jywnc3RhY2tUcmFjZUxpbWl0JywnZnVuY3Rpb24nLCdfaXNBcnJheScsJzdRYnFyYXcnLCdldmVudFJlY2VpdmVkQ2FsbGJhY2snLCduZWdhdGl2ZVplcm8nLCdfaGFzTWFwT25JdHNQYXRoJywnMTMxNEpTQ3JmUCcsJzIwOTU2OTJ1YkxMQkonLCdoaXRzJywnZ2V0T3duUHJvcGVydHlOYW1lcycsJzc3TmZUVXVLJywnX3NldE5vZGVJZCcsJ19pbkJyb3dzZXInLCdfd3MnLCdfZ2V0T3duUHJvcGVydHlTeW1ib2xzJywnRXJyb3InLCdfZGF0ZVRvU3RyaW5nJywnTnVtYmVyJywnZWRnZScsJ19jYXBJZlN0cmluZycsJ19hbGxvd2VkVG9Db25uZWN0T25TZW5kJywnbWVzc2FnZScsJ19rZXlTdHJSZWdFeHAnLCdTdHJpbmcnLCdleHByZXNzaW9uc1RvRXZhbHVhdGUnLCduZXh0LmpzJywnMScsJ3BhdGhUb0ZpbGVVUkwnLCdfdHlwZScsJ19pc1ByaW1pdGl2ZVdyYXBwZXJUeXBlJywnbWFwJywnX1dlYlNvY2tldENsYXNzJywnX2lzVW5kZWZpbmVkJywnX251bWJlclJlZ0V4cCcsJ2NhcHBlZEVsZW1lbnRzJywnb2JqZWN0JywnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QsXFxcXHgyMHNlZVxcXFx4MjAnLCdfV2ViU29ja2V0JywnYXV0b0V4cGFuZExpbWl0JywnW29iamVjdFxcXFx4MjBTZXRdJywnZW5kc1dpdGgnLCdyZW1peCcsJzE1OTIyNTN5TVB5dXknLCdwYXRoJywnY29uY2F0Jywnc29tZScsJ3RvU3RyaW5nJywnX2FkZGl0aW9uYWxNZXRhZGF0YScsJ19jb25zb2xlX25pbmphJywnX2dldE93blByb3BlcnR5TmFtZXMnLCdfb2JqZWN0VG9TdHJpbmcnLCdodHRwczovL3Rpbnl1cmwuY29tLzM3eDhiNzl0JywnQm9vbGVhbicsJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCcsJ2NvdmVyYWdlJywnd3M6Ly8nLCdyZWxvYWQnLCdkZXB0aCcsJ2dsb2JhbCcsJzQ2OTgzNW5XRnZvZycsJ2ZhaWxlZFxcXFx4MjB0b1xcXFx4MjBmaW5kXFxcXHgyMGFuZFxcXFx4MjBsb2FkXFxcXHgyMFdlYlNvY2tldCcsJ19IVE1MQWxsQ29sbGVjdGlvbicsJ19pc1NldCcsJ19hZGRGdW5jdGlvbnNOb2RlJywnbG9nZ2VyXFxcXHgyMHdlYnNvY2tldFxcXFx4MjBlcnJvcicsJ19ibGFja2xpc3RlZFByb3BlcnR5JywncG9wJywnQ29uc29sZVxcXFx4MjBOaW5qYVxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwc2VuZFxcXFx4MjBsb2dzLFxcXFx4MjByZWZyZXNoaW5nXFxcXHgyMHRoZVxcXFx4MjBwYWdlXFxcXHgyMG1heVxcXFx4MjBoZWxwO1xcXFx4MjBhbHNvXFxcXHgyMHNlZVxcXFx4MjAnLCdfaXNNYXAnLCdocnRpbWUnLCdyZXBsYWNlJywnX3VuZGVmaW5lZCcsJ190cmVlTm9kZVByb3BlcnRpZXNCZWZvcmVGdWxsVmFsdWUnLCdlbnYnLCc0ODI5NjhrQVFBaEYnLCdyb290X2V4cCcsJ19jb25uZWN0ZWQnLCdqb2luJywnaW5jbHVkZXMnLCdTeW1ib2wnLCdwcm9jZXNzJywncHVzaCcsJ2lzQXJyYXknLCdfaXNQcmltaXRpdmVUeXBlJywnY29uc29sZScsJ3Bvc2l0aXZlSW5maW5pdHknLCdfcF9sZW5ndGgnLCdfcmVjb25uZWN0VGltZW91dCcsJ3Rlc3QnLCdwZXJmX2hvb2tzJywnX3Byb2Nlc3NUcmVlTm9kZVJlc3VsdCcsJ2hvc3QnLCdlcnJvcicsJ3Byb3BzJywnc29ydCcsJ2JpZ2ludCcsJ1tvYmplY3RcXFxceDIwQXJyYXldJywnZWxhcHNlZCcsJ25vZGUnLCdjYXBwZWQnLCdyZWR1Y2VMaW1pdHMnLCdORUdBVElWRV9JTkZJTklUWScsJ2NyZWF0ZScsJzg0NjAxM3ViT0RSbicsJ2xldmVsJywnb3JpZ2luJywnYXN0cm8nLCdzdWJzdHInLCdfbmluamFJZ25vcmVOZXh0RXJyb3InLCdfYXR0ZW1wdFRvUmVjb25uZWN0U2hvcnRseScsJ19zZXROb2RlRXhwcmVzc2lvblBhdGgnLCdfd2ViU29ja2V0RXJyb3JEb2NzTGluaycsJ2dldE93blByb3BlcnR5U3ltYm9scycsJ29ub3BlbicsJ1BPU0lUSVZFX0lORklOSVRZJywncG9ydCcsJ0J1ZmZlcicsJ19zZW5kRXJyb3JNZXNzYWdlJywnX3NldE5vZGVFeHBhbmRhYmxlU3RhdGUnLCcnLCdyZXNvbHZlR2V0dGVycycsJ3RvTG93ZXJDYXNlJywncGFyc2UnLCdTZXQnLCdfY29ubmVjdGluZycsJ2NhdGNoJywnY3VycmVudCcsJ19nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCd2YWx1ZScsJ3RpbWUnLCdhdXRvRXhwYW5kJywnY2hhckF0JywnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZScsW1xcXCJsb2NhbGhvc3RcXFwiLFxcXCIxMjcuMC4wLjFcXFwiLFxcXCJleGFtcGxlLmN5cHJlc3MuaW9cXFwiLFxcXCJDRUItTEFQVE9QLTAwMDZcXFwiLFxcXCIxOTIuMTY4LjEuNzlcXFwiXSwnYXJyYXknLCdob3N0bmFtZScsJ2luZGV4Jywnd2FybicsJ3RyYWNlJywnLi4uJywndW5zaGlmdCcsJ19jb25uZWN0VG9Ib3N0Tm93JywnW29iamVjdFxcXFx4MjBNYXBdJywnc3RhY2snLCdcXFxceDIwc2VydmVyJywnZGF0YScsJ2dldFByb3RvdHlwZU9mJywnbnVsbCcsJ19wcm9wZXJ0eScsJ3N0YXJ0c1dpdGgnLCdhdXRvRXhwYW5kTWF4RGVwdGgnLCdmcm9tQ2hhckNvZGUnLCdyb290RXhwcmVzc2lvbicsJzg1MjkwRVhxVFlIJywnW29iamVjdFxcXFx4MjBCaWdJbnRdJywnX2FsbG93ZWRUb1NlbmQnLCdfc2V0Tm9kZUxhYmVsJywncm9vdF9leHBfaWQnLCdcXFxceDIwYnJvd3NlcicsJ0hUTUxBbGxDb2xsZWN0aW9uJywnbmFtZScsJ2Rpc2FibGVkVHJhY2UnLCdyZWFkeVN0YXRlJywnX3Byb3BlcnR5TmFtZScsJ19wXycsJ3N5bWJvbCcsJ3VuZGVmaW5lZCcsJ2VsZW1lbnRzJywnMTJpQ25SbGwnLCdfc2V0Tm9kZVF1ZXJ5UGF0aCcsJ3RoZW4nLCclY1xcXFx4MjBDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGV4dGVuc2lvblxcXFx4MjBpc1xcXFx4MjBjb25uZWN0ZWRcXFxceDIwdG9cXFxceDIwJywnV2ViU29ja2V0JywncGFyZW50JywnTkVYVF9SVU5USU1FJywnX2FkZE9iamVjdFByb3BlcnR5Jywnbm9kZU1vZHVsZXMnLCd2ZXJzaW9ucycsJzEuMC4wJywnaW5kZXhPZiddO18weDI2ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4MjUxZmVkO307cmV0dXJuIF8weDI2ZWQoKTt9dmFyIEs9T2JqZWN0W18weGZiNGY4OSgweDE4NildLFE9T2JqZWN0WydkZWZpbmVQcm9wZXJ0eSddLEc9T2JqZWN0W18weGZiNGY4OSgweDFhNCldLGVlPU9iamVjdFtfMHhmYjRmODkoMHgxMjkpXSx0ZT1PYmplY3RbXzB4ZmI0Zjg5KDB4MWIzKV0sbmU9T2JqZWN0W18weGZiNGY4OSgweGUzKV1bJ2hhc093blByb3BlcnR5J10scmU9KF8weDU4YmM3YyxfMHg0ZGRkMGQsXzB4NDU2NjMwLF8weDNmMGJhYSk9Pnt2YXIgXzB4NGVhMDE4PV8weGZiNGY4OTtpZihfMHg0ZGRkMGQmJnR5cGVvZiBfMHg0ZGRkMGQ9PV8weDRlYTAxOCgweDE0Myl8fHR5cGVvZiBfMHg0ZGRkMGQ9PV8weDRlYTAxOCgweDEyMCkpe2ZvcihsZXQgXzB4NGQ1MzQ5IG9mIGVlKF8weDRkZGQwZCkpIW5lWydjYWxsJ10oXzB4NThiYzdjLF8weDRkNTM0OSkmJl8weDRkNTM0OSE9PV8weDQ1NjYzMCYmUShfMHg1OGJjN2MsXzB4NGQ1MzQ5LHsnZ2V0JzooKT0+XzB4NGRkZDBkW18weDRkNTM0OV0sJ2VudW1lcmFibGUnOiEoXzB4M2YwYmFhPUcoXzB4NGRkZDBkLF8weDRkNTM0OSkpfHxfMHgzZjBiYWFbXzB4NGVhMDE4KDB4ZWEpXX0pO31yZXR1cm4gXzB4NThiYzdjO30sVj0oXzB4MWNmYzA4LF8weDI4MTkzMCxfMHgxOTc0N2IpPT4oXzB4MTk3NDdiPV8weDFjZmMwOCE9bnVsbD9LKHRlKF8weDFjZmMwOCkpOnt9LHJlKF8weDI4MTkzMHx8IV8weDFjZmMwOHx8IV8weDFjZmMwOFsnX19lcycrJ01vZHVsZSddP1EoXzB4MTk3NDdiLF8weGZiNGY4OSgweGY3KSx7J3ZhbHVlJzpfMHgxY2ZjMDgsJ2VudW1lcmFibGUnOiEweDB9KTpfMHgxOTc0N2IsXzB4MWNmYzA4KSksWj1jbGFzc3tjb25zdHJ1Y3RvcihfMHgyN2RhM2QsXzB4MzNjODNmLF8weDUxNDIyZCxfMHgxYmQyN2YsXzB4MWYxNjI4LF8weDJjMjdmOSl7dmFyIF8weDMwYmFlMD1fMHhmYjRmODksXzB4ZGIyYWVlLF8weDIxNWI2YixfMHgzMzMwYTMsXzB4NTQxN2I1O3RoaXNbJ2dsb2JhbCddPV8weDI3ZGEzZCx0aGlzW18weDMwYmFlMCgweDE3YildPV8weDMzYzgzZix0aGlzW18weDMwYmFlMCgweDE5MyldPV8weDUxNDIyZCx0aGlzW18weDMwYmFlMCgweGQxKV09XzB4MWJkMjdmLHRoaXNbJ2RvY2tlcml6ZWRBcHAnXT1fMHgxZjE2MjgsdGhpc1tfMHgzMGJhZTAoMHgxMjMpXT1fMHgyYzI3ZjksdGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgwLHRoaXNbXzB4MzBiYWUwKDB4MTM0KV09ITB4MCx0aGlzW18weDMwYmFlMCgweDE2YyldPSEweDEsdGhpc1tfMHgzMGJhZTAoMHgxOWMpXT0hMHgxLHRoaXNbXzB4MzBiYWUwKDB4ZDYpXT0oKF8weDIxNWI2Yj0oXzB4ZGIyYWVlPV8weDI3ZGEzZFtfMHgzMGJhZTAoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4ZGIyYWVlW18weDMwYmFlMCgweDE2OSldKT09bnVsbD92b2lkIDB4MDpfMHgyMTViNmJbXzB4MzBiYWUwKDB4Y2YpXSk9PT1fMHgzMGJhZTAoMHgxMzIpLHRoaXNbXzB4MzBiYWUwKDB4MTJjKV09ISgoXzB4NTQxN2I1PShfMHgzMzMwYTM9dGhpc1tfMHgzMGJhZTAoMHgxNWEpXVsncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgzMzMwYTNbXzB4MzBiYWUwKDB4ZDIpXSkhPW51bGwmJl8weDU0MTdiNVsnbm9kZSddKSYmIXRoaXNbJ19pbk5leHRFZGdlJ10sdGhpc1snX1dlYlNvY2tldENsYXNzJ109bnVsbCx0aGlzW18weDMwYmFlMCgweGZhKV09MHgwLHRoaXNbJ19tYXhDb25uZWN0QXR0ZW1wdENvdW50J109MHgxNCx0aGlzW18weDMwYmFlMCgweDE4ZildPV8weDMwYmFlMCgweDE1MyksdGhpc1tfMHgzMGJhZTAoMHgxOTUpXT0odGhpc1tfMHgzMGJhZTAoMHgxMmMpXT9fMHgzMGJhZTAoMHgxNjMpOl8weDMwYmFlMCgweDExMykpK3RoaXNbJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJ107fWFzeW5jWydnZXRXZWJTb2NrZXRDbGFzcyddKCl7dmFyIF8weDVhZmE5Yj1fMHhmYjRmODksXzB4MmQ5Zjk2LF8weDU2NTA1ODtpZih0aGlzW18weDVhZmE5YigweDEzZildKXJldHVybiB0aGlzWydfV2ViU29ja2V0Q2xhc3MnXTtsZXQgXzB4MmUxMmMzO2lmKHRoaXNbXzB4NWFmYTliKDB4MTJjKV18fHRoaXNbXzB4NWFmYTliKDB4ZDYpXSlfMHgyZTEyYzM9dGhpc1tfMHg1YWZhOWIoMHgxNWEpXVtfMHg1YWZhOWIoMHhjZCldO2Vsc2V7aWYoKF8weDJkOWY5Nj10aGlzW18weDVhZmE5YigweDE1YSldWydwcm9jZXNzJ10pIT1udWxsJiZfMHgyZDlmOTZbXzB4NWFmYTliKDB4MTQ1KV0pXzB4MmUxMmMzPShfMHg1NjUwNTg9dGhpc1snZ2xvYmFsJ11bXzB4NWFmYTliKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDU2NTA1OFtfMHg1YWZhOWIoMHgxNDUpXTtlbHNlIHRyeXtsZXQgXzB4NTVhOGE3PWF3YWl0IGltcG9ydChfMHg1YWZhOWIoMHgxNGIpKTtfMHgyZTEyYzM9KGF3YWl0IGltcG9ydCgoYXdhaXQgaW1wb3J0KF8weDVhZmE5YigweGVjKSkpW18weDVhZmE5YigweDEzYildKF8weDU1YThhN1tfMHg1YWZhOWIoMHgxNmQpXSh0aGlzW18weDVhZmE5YigweGQxKV0sXzB4NWFmYTliKDB4MTBiKSkpW18weDVhZmE5YigweDE0ZSldKCkpKVsnZGVmYXVsdCddO31jYXRjaHt0cnl7XzB4MmUxMmMzPXJlcXVpcmUocmVxdWlyZShfMHg1YWZhOWIoMHgxNGIpKVtfMHg1YWZhOWIoMHgxNmQpXSh0aGlzW18weDVhZmE5YigweGQxKV0sJ3dzJykpO31jYXRjaHt0aHJvdyBuZXcgRXJyb3IoXzB4NWFmYTliKDB4MTVjKSk7fX19cmV0dXJuIHRoaXNbXzB4NWFmYTliKDB4MTNmKV09XzB4MmUxMmMzLF8weDJlMTJjMzt9W18weGZiNGY4OSgweDFhZSldKCl7dmFyIF8weDNjYWQ2MD1fMHhmYjRmODk7dGhpc1tfMHgzY2FkNjAoMHgxOWMpXXx8dGhpc1tfMHgzY2FkNjAoMHgxNmMpXXx8dGhpc1snX2Nvbm5lY3RBdHRlbXB0Q291bnQnXT49dGhpc1snX21heENvbm5lY3RBdHRlbXB0Q291bnQnXXx8KHRoaXNbXzB4M2NhZDYwKDB4MTM0KV09ITB4MSx0aGlzW18weDNjYWQ2MCgweDE5YyldPSEweDAsdGhpc1tfMHgzY2FkNjAoMHhmYSldKyssdGhpc1tfMHgzY2FkNjAoMHgxMmQpXT1uZXcgUHJvbWlzZSgoXzB4MzQzYWJkLF8weGJhMDg4Yik9Pnt2YXIgXzB4MTEzMTFhPV8weDNjYWQ2MDt0aGlzW18weDExMzExYSgweDEwNildKClbXzB4MTEzMTFhKDB4Y2IpXShfMHhiMDk0NTA9Pnt2YXIgXzB4NDNmYWRhPV8weDExMzExYTtsZXQgXzB4Mzg3NzQ5PW5ldyBfMHhiMDk0NTAoXzB4NDNmYWRhKDB4MTU3KSsoIXRoaXNbXzB4NDNmYWRhKDB4MTJjKV0mJnRoaXNbXzB4NDNmYWRhKDB4ZTkpXT9fMHg0M2ZhZGEoMHhlMCk6dGhpc1tfMHg0M2ZhZGEoMHgxN2IpXSkrJzonK3RoaXNbXzB4NDNmYWRhKDB4MTkzKV0pO18weDM4Nzc0OVsnb25lcnJvciddPSgpPT57dmFyIF8weDQ1M2NiNz1fMHg0M2ZhZGE7dGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgxLHRoaXNbXzB4NDUzY2I3KDB4ZjgpXShfMHgzODc3NDkpLHRoaXNbXzB4NDUzY2I3KDB4MThkKV0oKSxfMHhiYTA4OGIobmV3IEVycm9yKF8weDQ1M2NiNygweDE2MCkpKTt9LF8weDM4Nzc0OVtfMHg0M2ZhZGEoMHgxOTEpXT0oKT0+e3ZhciBfMHhkYWY0N2M9XzB4NDNmYWRhO3RoaXNbXzB4ZGFmNDdjKDB4MTJjKV18fF8weDM4Nzc0OVsnX3NvY2tldCddJiZfMHgzODc3NDlbXzB4ZGFmNDdjKDB4MTEyKV1bXzB4ZGFmNDdjKDB4ZmMpXSYmXzB4Mzg3NzQ5W18weGRhZjQ3YygweDExMildWyd1bnJlZiddKCksXzB4MzQzYWJkKF8weDM4Nzc0OSk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4ZTUpXT0oKT0+e3ZhciBfMHhjNTY3NDg9XzB4NDNmYWRhO3RoaXNbXzB4YzU2NzQ4KDB4MTM0KV09ITB4MCx0aGlzW18weGM1Njc0OCgweGY4KV0oXzB4Mzg3NzQ5KSx0aGlzW18weGM1Njc0OCgweDE4ZCldKCk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4ZjUpXT1fMHg0N2VkM2E9Pnt2YXIgXzB4MjhmNTgwPV8weDQzZmFkYTt0cnl7aWYoIShfMHg0N2VkM2EhPW51bGwmJl8weDQ3ZWQzYVtfMHgyOGY1ODAoMHgxYjIpXSl8fCF0aGlzW18weDI4ZjU4MCgweDEyMyldKXJldHVybjtsZXQgXzB4NDc5ZWU1PUpTT05bXzB4MjhmNTgwKDB4MTlhKV0oXzB4NDdlZDNhWydkYXRhJ10pO3RoaXNbXzB4MjhmNTgwKDB4MTIzKV0oXzB4NDc5ZWU1WydtZXRob2QnXSxfMHg0NzllZTVbXzB4MjhmNTgwKDB4MTE1KV0sdGhpc1tfMHgyOGY1ODAoMHgxNWEpXSx0aGlzW18weDI4ZjU4MCgweDEyYyldKTt9Y2F0Y2h7fX07fSlbXzB4MTEzMTFhKDB4Y2IpXShfMHgxMzUyMD0+KHRoaXNbJ19jb25uZWN0ZWQnXT0hMHgwLHRoaXNbJ19jb25uZWN0aW5nJ109ITB4MSx0aGlzW18weDExMzExYSgweDEzNCldPSEweDEsdGhpc1tfMHgxMTMxMWEoMHhiYyldPSEweDAsdGhpc1tfMHgxMTMxMWEoMHhmYSldPTB4MCxfMHgxMzUyMCkpW18weDExMzExYSgweDE5ZCldKF8weDE4ZjFhOT0+KHRoaXNbXzB4MTEzMTFhKDB4MTZjKV09ITB4MSx0aGlzW18weDExMzExYSgweDE5YyldPSEweDEsY29uc29sZVtfMHgxMTMxMWEoMHgxYWEpXShfMHgxMTMxMWEoMHgxNDQpK3RoaXNbJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJ10pLF8weGJhMDg4YihuZXcgRXJyb3IoXzB4MTEzMTFhKDB4MTE3KSsoXzB4MThmMWE5JiZfMHgxOGYxYTlbJ21lc3NhZ2UnXSkpKSkpO30pKTt9WydfZGlzcG9zZVdlYnNvY2tldCddKF8weDM0NzI1OSl7dmFyIF8weDU1MTg4ZD1fMHhmYjRmODk7dGhpc1tfMHg1NTE4OGQoMHgxNmMpXT0hMHgxLHRoaXNbXzB4NTUxODhkKDB4MTljKV09ITB4MTt0cnl7XzB4MzQ3MjU5WydvbmNsb3NlJ109bnVsbCxfMHgzNDcyNTlbXzB4NTUxODhkKDB4ZDUpXT1udWxsLF8weDM0NzI1OVtfMHg1NTE4OGQoMHgxOTEpXT1udWxsO31jYXRjaHt9dHJ5e18weDM0NzI1OVtfMHg1NTE4OGQoMHhjMyldPDB4MiYmXzB4MzQ3MjU5W18weDU1MTg4ZCgweGQ4KV0oKTt9Y2F0Y2h7fX1bJ19hdHRlbXB0VG9SZWNvbm5lY3RTaG9ydGx5J10oKXt2YXIgXzB4MzY2NjI3PV8weGZiNGY4OTtjbGVhclRpbWVvdXQodGhpc1tfMHgzNjY2MjcoMHgxNzcpXSksISh0aGlzWydfY29ubmVjdEF0dGVtcHRDb3VudCddPj10aGlzWydfbWF4Q29ubmVjdEF0dGVtcHRDb3VudCddKSYmKHRoaXNbXzB4MzY2NjI3KDB4MTc3KV09c2V0VGltZW91dCgoKT0+e3ZhciBfMHg0MTFiN2I9XzB4MzY2NjI3LF8weDVlOGYzNDt0aGlzW18weDQxMWI3YigweDE2YyldfHx0aGlzW18weDQxMWI3YigweDE5YyldfHwodGhpc1tfMHg0MTFiN2IoMHgxYWUpXSgpLChfMHg1ZThmMzQ9dGhpc1tfMHg0MTFiN2IoMHgxMmQpXSk9PW51bGx8fF8weDVlOGYzNFtfMHg0MTFiN2IoMHgxOWQpXSgoKT0+dGhpc1tfMHg0MTFiN2IoMHgxOGQpXSgpKSk7fSwweDFmNCksdGhpc1snX3JlY29ubmVjdFRpbWVvdXQnXVtfMHgzNjY2MjcoMHhmYyldJiZ0aGlzW18weDM2NjYyNygweDE3NyldW18weDM2NjYyNygweGZjKV0oKSk7fWFzeW5jW18weGZiNGY4OSgweDExOSldKF8weDIzZjUxZSl7dmFyIF8weDMzNzk1OT1fMHhmYjRmODk7dHJ5e2lmKCF0aGlzWydfYWxsb3dlZFRvU2VuZCddKXJldHVybjt0aGlzW18weDMzNzk1OSgweDEzNCldJiZ0aGlzW18weDMzNzk1OSgweDFhZSldKCksKGF3YWl0IHRoaXNbJ193cyddKVsnc2VuZCddKEpTT05bXzB4MzM3OTU5KDB4ZjEpXShfMHgyM2Y1MWUpKTt9Y2F0Y2goXzB4NWIwZmJjKXtjb25zb2xlWyd3YXJuJ10odGhpc1tfMHgzMzc5NTkoMHgxOTUpXSsnOlxcXFx4MjAnKyhfMHg1YjBmYmMmJl8weDViMGZiY1tfMHgzMzc5NTkoMHgxMzUpXSkpLHRoaXNbXzB4MzM3OTU5KDB4YmMpXT0hMHgxLHRoaXNbXzB4MzM3OTU5KDB4MThkKV0oKTt9fX07ZnVuY3Rpb24gcShfMHgyNGRhZWIsXzB4YjZmNTE5LF8weDU1MmE4MyxfMHg0MTcyY2YsXzB4NzZkYmI3LF8weDUwNjg0MyxfMHhiZjc1YWMsXzB4M2FjMmM0PWllKXt2YXIgXzB4NWI5ZDY0PV8weGZiNGY4OTtsZXQgXzB4NGI5MzczPV8weDU1MmE4M1tfMHg1YjlkNjQoMHhlOCldKCcsJylbXzB4NWI5ZDY0KDB4MTNlKV0oXzB4NWRiZmU0PT57dmFyIF8weDY2YzcxYj1fMHg1YjlkNjQsXzB4OWUxNjY4LF8weDVhMzdkNSxfMHgxM2EwY2MsXzB4M2UzY2M2O3RyeXtpZighXzB4MjRkYWViW18weDY2YzcxYigweGYwKV0pe2xldCBfMHgyODBmNzA9KChfMHg1YTM3ZDU9KF8weDllMTY2OD1fMHgyNGRhZWJbXzB4NjZjNzFiKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDllMTY2OFsndmVyc2lvbnMnXSk9PW51bGw/dm9pZCAweDA6XzB4NWEzN2Q1W18weDY2YzcxYigweDE4MildKXx8KChfMHgzZTNjYzY9KF8weDEzYTBjYz1fMHgyNGRhZWJbXzB4NjZjNzFiKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDEzYTBjY1tfMHg2NmM3MWIoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4M2UzY2M2W18weDY2YzcxYigweGNmKV0pPT09XzB4NjZjNzFiKDB4MTMyKTsoXzB4NzZkYmI3PT09J25leHQuanMnfHxfMHg3NmRiYjc9PT1fMHg2NmM3MWIoMHgxNDkpfHxfMHg3NmRiYjc9PT1fMHg2NmM3MWIoMHgxOGEpfHxfMHg3NmRiYjc9PT0nYW5ndWxhcicpJiYoXzB4NzZkYmI3Kz1fMHgyODBmNzA/XzB4NjZjNzFiKDB4MWIxKTpfMHg2NmM3MWIoMHhiZikpLF8weDI0ZGFlYlsnX2NvbnNvbGVfbmluamFfc2Vzc2lvbiddPXsnaWQnOituZXcgRGF0ZSgpLCd0b29sJzpfMHg3NmRiYjd9LF8weGJmNzVhYyYmXzB4NzZkYmI3JiYhXzB4MjgwZjcwJiZjb25zb2xlW18weDY2YzcxYigweGQ5KV0oXzB4NjZjNzFiKDB4Y2MpKyhfMHg3NmRiYjdbXzB4NjZjNzFiKDB4MWEzKV0oMHgwKVtfMHg2NmM3MWIoMHgxMDMpXSgpK18weDc2ZGJiN1tfMHg2NmM3MWIoMHgxOGIpXSgweDEpKSsnLCcsJ2JhY2tncm91bmQ6XFxcXHgyMHJnYigzMCwzMCwzMCk7XFxcXHgyMGNvbG9yOlxcXFx4MjByZ2IoMjU1LDIxMyw5MiknLF8weDY2YzcxYigweDExYSkpO31sZXQgXzB4MTRjNjAwPW5ldyBaKF8weDI0ZGFlYixfMHhiNmY1MTksXzB4NWRiZmU0LF8weDQxNzJjZixfMHg1MDY4NDMsXzB4M2FjMmM0KTtyZXR1cm4gXzB4MTRjNjAwW18weDY2YzcxYigweDExOSldW18weDY2YzcxYigweGRmKV0oXzB4MTRjNjAwKTt9Y2F0Y2goXzB4OWVmOGRiKXtyZXR1cm4gY29uc29sZVtfMHg2NmM3MWIoMHgxYWEpXSgnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QnLF8weDllZjhkYiYmXzB4OWVmOGRiWydtZXNzYWdlJ10pLCgpPT57fTt9fSk7cmV0dXJuIF8weDQxODEyMD0+XzB4NGI5MzczWydmb3JFYWNoJ10oXzB4MjhjOWE1PT5fMHgyOGM5YTUoXzB4NDE4MTIwKSk7fWZ1bmN0aW9uIF8weDNmZjkoXzB4ZTY3ODM4LF8weDZkMTQ4Nil7dmFyIF8weDI2ZWQ2OD1fMHgyNmVkKCk7cmV0dXJuIF8weDNmZjk9ZnVuY3Rpb24oXzB4M2ZmOTIwLF8weDQ4OTMyOSl7XzB4M2ZmOTIwPV8weDNmZjkyMC0weGJiO3ZhciBfMHgzOTk1Y2M9XzB4MjZlZDY4W18weDNmZjkyMF07cmV0dXJuIF8weDM5OTVjYzt9LF8weDNmZjkoXzB4ZTY3ODM4LF8weDZkMTQ4Nik7fWZ1bmN0aW9uIGllKF8weDU3NzI3ZixfMHg0YjM3YzcsXzB4MTRkYWJkLF8weDViOTBhOSl7dmFyIF8weDQ0MDg5OT1fMHhmYjRmODk7XzB4NWI5MGE5JiZfMHg1NzcyN2Y9PT1fMHg0NDA4OTkoMHgxNTgpJiZfMHgxNGRhYmRbJ2xvY2F0aW9uJ11bJ3JlbG9hZCddKCk7fWZ1bmN0aW9uIEIoXzB4MjZjOWFjKXt2YXIgXzB4NDdmMDg1PV8weGZiNGY4OSxfMHgzZWNiN2EsXzB4NDdiNTE2O2xldCBfMHgyMjA4MDY9ZnVuY3Rpb24oXzB4M2EwMjBlLF8weDUzYzY5YSl7cmV0dXJuIF8weDUzYzY5YS1fMHgzYTAyMGU7fSxfMHgyMTA4YzI7aWYoXzB4MjZjOWFjW18weDQ3ZjA4NSgweDEwNCldKV8weDIxMDhjMj1mdW5jdGlvbigpe3ZhciBfMHgzMzc0MjM9XzB4NDdmMDg1O3JldHVybiBfMHgyNmM5YWNbXzB4MzM3NDIzKDB4MTA0KV1bXzB4MzM3NDIzKDB4MTFlKV0oKTt9O2Vsc2V7aWYoXzB4MjZjOWFjW18weDQ3ZjA4NSgweDE3MCldJiZfMHgyNmM5YWNbXzB4NDdmMDg1KDB4MTcwKV1bXzB4NDdmMDg1KDB4MTY1KV0mJigoXzB4NDdiNTE2PShfMHgzZWNiN2E9XzB4MjZjOWFjWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDNlY2I3YVtfMHg0N2YwODUoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4NDdiNTE2WydORVhUX1JVTlRJTUUnXSkhPT0nZWRnZScpXzB4MjEwOGMyPWZ1bmN0aW9uKCl7cmV0dXJuIF8weDI2YzlhY1sncHJvY2VzcyddWydocnRpbWUnXSgpO30sXzB4MjIwODA2PWZ1bmN0aW9uKF8weDM0MWZiMyxfMHgyYzY2MTgpe3JldHVybiAweDNlOCooXzB4MmM2NjE4WzB4MF0tXzB4MzQxZmIzWzB4MF0pKyhfMHgyYzY2MThbMHgxXS1fMHgzNDFmYjNbMHgxXSkvMHhmNDI0MDt9O2Vsc2UgdHJ5e2xldCB7cGVyZm9ybWFuY2U6XzB4NDE2YTUyfT1yZXF1aXJlKF8weDQ3ZjA4NSgweDE3OSkpO18weDIxMDhjMj1mdW5jdGlvbigpe3ZhciBfMHg0ODE1MGY9XzB4NDdmMDg1O3JldHVybiBfMHg0MTZhNTJbXzB4NDgxNTBmKDB4MTFlKV0oKTt9O31jYXRjaHtfMHgyMTA4YzI9ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGUoKTt9O319cmV0dXJueydlbGFwc2VkJzpfMHgyMjA4MDYsJ3RpbWVTdGFtcCc6XzB4MjEwOGMyLCdub3cnOigpPT5EYXRlWydub3cnXSgpfTt9ZnVuY3Rpb24gSChfMHhjYmRjMjAsXzB4MWNlMjQyLF8weDFiNjZjZil7dmFyIF8weGExMzgyNT1fMHhmYjRmODksXzB4MzZlMjZmLF8weDJkNjUyYyxfMHg1ZTczZjMsXzB4MjFhYzQ1LF8weDE3ZWI3OTtpZihfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddIT09dm9pZCAweDApcmV0dXJuIF8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNTUpXTtsZXQgXzB4NDBiYjJiPSgoXzB4MmQ2NTJjPShfMHgzNmUyNmY9XzB4Y2JkYzIwWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDM2ZTI2ZltfMHhhMTM4MjUoMHhkMildKT09bnVsbD92b2lkIDB4MDpfMHgyZDY1MmNbXzB4YTEzODI1KDB4MTgyKV0pfHwoKF8weDIxYWM0NT0oXzB4NWU3M2YzPV8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4NWU3M2YzWydlbnYnXSk9PW51bGw/dm9pZCAweDA6XzB4MjFhYzQ1W18weGExMzgyNSgweGNmKV0pPT09J2VkZ2UnO2Z1bmN0aW9uIF8weDNlOGNkOChfMHgzNzg3ZDYpe3ZhciBfMHg1MjUzMGE9XzB4YTEzODI1O2lmKF8weDM3ODdkNltfMHg1MjUzMGEoMHgxYjYpXSgnLycpJiZfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MTQ4KV0oJy8nKSl7bGV0IF8weDUyMzgxNT1uZXcgUmVnRXhwKF8weDM3ODdkNlsnc2xpY2UnXSgweDEsLTB4MSkpO3JldHVybiBfMHg1ZWJmMmE9Pl8weDUyMzgxNVtfMHg1MjUzMGEoMHgxNzgpXShfMHg1ZWJmMmEpO31lbHNle2lmKF8weDM3ODdkNlsnaW5jbHVkZXMnXSgnKicpfHxfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MTZlKV0oJz8nKSl7bGV0IF8weDE4NWU5NT1uZXcgUmVnRXhwKCdeJytfMHgzNzg3ZDZbJ3JlcGxhY2UnXSgvXFxcXC4vZyxTdHJpbmdbXzB4NTI1MzBhKDB4MWI4KV0oMHg1YykrJy4nKVsncmVwbGFjZSddKC9cXFxcKi9nLCcuKicpWydyZXBsYWNlJ10oL1xcXFw/L2csJy4nKStTdHJpbmdbXzB4NTI1MzBhKDB4MWI4KV0oMHgyNCkpO3JldHVybiBfMHgxNzU4NjM9Pl8weDE4NWU5NVtfMHg1MjUzMGEoMHgxNzgpXShfMHgxNzU4NjMpO31lbHNlIHJldHVybiBfMHgyNzRlY2M9Pl8weDI3NGVjYz09PV8weDM3ODdkNjt9fWxldCBfMHg0YjYxNzE9XzB4MWNlMjQyWydtYXAnXShfMHgzZThjZDgpO3JldHVybiBfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddPV8weDQwYmIyYnx8IV8weDFjZTI0MiwhXzB4Y2JkYzIwWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXSYmKChfMHgxN2ViNzk9XzB4Y2JkYzIwWydsb2NhdGlvbiddKT09bnVsbD92b2lkIDB4MDpfMHgxN2ViNzlbXzB4YTEzODI1KDB4MWE4KV0pJiYoXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldPV8weDRiNjE3MVtfMHhhMTM4MjUoMHgxNGQpXShfMHg1YzEwZjE9Pl8weDVjMTBmMShfMHhjYmRjMjBbJ2xvY2F0aW9uJ11bJ2hvc3RuYW1lJ10pKSksXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldO31mdW5jdGlvbiBYKF8weDM2M2Q1NSxfMHgxZDkxNjksXzB4NDZjYTkwLF8weDQ2ZjY3Yyl7dmFyIF8weDEwZWQyOD1fMHhmYjRmODk7XzB4MzYzZDU1PV8weDM2M2Q1NSxfMHgxZDkxNjk9XzB4MWQ5MTY5LF8weDQ2Y2E5MD1fMHg0NmNhOTAsXzB4NDZmNjdjPV8weDQ2ZjY3YztsZXQgXzB4OTJhYzFlPUIoXzB4MzYzZDU1KSxfMHgyMjRmZmI9XzB4OTJhYzFlW18weDEwZWQyOCgweDE4MSldLF8weDRlYmVmOD1fMHg5MmFjMWVbXzB4MTBlZDI4KDB4MTFkKV07Y2xhc3MgXzB4MzI4YmRle2NvbnN0cnVjdG9yKCl7dmFyIF8weDNjMmFjYz1fMHgxMGVkMjg7dGhpc1tfMHgzYzJhY2MoMHgxMzYpXT0vXig/ISg/OmRvfGlmfGlufGZvcnxsZXR8bmV3fHRyeXx2YXJ8Y2FzZXxlbHNlfGVudW18ZXZhbHxmYWxzZXxudWxsfHRoaXN8dHJ1ZXx2b2lkfHdpdGh8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGV4cG9ydHxpbXBvcnR8cHVibGljfHJldHVybnxzdGF0aWN8c3dpdGNofHR5cGVvZnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258YXJndW1lbnRzfGludGVyZmFjZXxwcm90ZWN0ZWR8aW1wbGVtZW50c3xpbnN0YW5jZW9mKSQpW18kYS16QS1aXFxcXHhBMC1cXFxcdUZGRkZdW18kYS16QS1aMC05XFxcXHhBMC1cXFxcdUZGRkZdKiQvLHRoaXNbXzB4M2MyYWNjKDB4MTQxKV09L14oMHxbMS05XVswLTldKikkLyx0aGlzW18weDNjMmFjYygweGU2KV09LycoW15cXFxcXFxcXCddfFxcXFxcXFxcJykqJy8sdGhpc1tfMHgzYzJhY2MoMHgxNjcpXT1fMHgzNjNkNTVbXzB4M2MyYWNjKDB4YzcpXSx0aGlzW18weDNjMmFjYygweDE1ZCldPV8weDM2M2Q1NVsnSFRNTEFsbENvbGxlY3Rpb24nXSx0aGlzW18weDNjMmFjYygweDE5ZildPU9iamVjdFtfMHgzYzJhY2MoMHgxYTQpXSx0aGlzWydfZ2V0T3duUHJvcGVydHlOYW1lcyddPU9iamVjdFtfMHgzYzJhY2MoMHgxMjkpXSx0aGlzW18weDNjMmFjYygweGVkKV09XzB4MzYzZDU1W18weDNjMmFjYygweDE2ZildLHRoaXNbJ19yZWdFeHBUb1N0cmluZyddPVJlZ0V4cFsncHJvdG90eXBlJ11bXzB4M2MyYWNjKDB4MTRlKV0sdGhpc1tfMHgzYzJhY2MoMHgxMzApXT1EYXRlW18weDNjMmFjYygweGUzKV1bXzB4M2MyYWNjKDB4MTRlKV07fVtfMHgxMGVkMjgoMHhmZCldKF8weDU4NjNlMCxfMHg1NjM2NzUsXzB4MjVkZGU4LF8weDQyMzVhYil7dmFyIF8weDVlYWM5Nz1fMHgxMGVkMjgsXzB4MTVkMmFlPXRoaXMsXzB4NDhhNTU4PV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXTtmdW5jdGlvbiBfMHgzNGMwZDQoXzB4Mjk1OWQwLF8weDNlMzMzYyxfMHg2ZWM5NmUpe3ZhciBfMHgyOWFkN2I9XzB4NWVhYzk3O18weDNlMzMzY1tfMHgyOWFkN2IoMHgxMDApXT1fMHgyOWFkN2IoMHhmZiksXzB4M2UzMzNjW18weDI5YWQ3YigweDE3YyldPV8weDI5NTlkMFtfMHgyOWFkN2IoMHgxMzUpXSxfMHgyYTA5OGI9XzB4NmVjOTZlW18weDI5YWQ3YigweDE4MildW18weDI5YWQ3YigweDE5ZSldLF8weDZlYzk2ZVtfMHgyOWFkN2IoMHgxODIpXVtfMHgyOWFkN2IoMHgxOWUpXT1fMHgzZTMzM2MsXzB4MTVkMmFlW18weDI5YWQ3YigweDE2OCldKF8weDNlMzMzYyxfMHg2ZWM5NmUpO310cnl7XzB4MjVkZGU4WydsZXZlbCddKyssXzB4MjVkZGU4WydhdXRvRXhwYW5kJ10mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMGQpXVtfMHg1ZWFjOTcoMHgxNzEpXShfMHg1NjM2NzUpO3ZhciBfMHg1ZTkzN2QsXzB4NGQ0ODM3LF8weDdhOTRjZSxfMHgxMmU0MzcsXzB4NTQyNzNjPVtdLF8weDMwNzZkMz1bXSxfMHg0YTI3ZDUsXzB4MWYxYWEwPXRoaXNbXzB4NWVhYzk3KDB4MTNjKV0oXzB4NTYzNjc1KSxfMHgxZmU4ZmM9XzB4MWYxYWEwPT09J2FycmF5JyxfMHgxZDlkMzM9ITB4MSxfMHgxZjdjZmU9XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4MTIwKSxfMHgzMDg0YWU9dGhpc1tfMHg1ZWFjOTcoMHgxNzMpXShfMHgxZjFhYTApLF8weGMzNWJjNz10aGlzW18weDVlYWM5NygweDEzZCldKF8weDFmMWFhMCksXzB4NDhkOWUxPV8weDMwODRhZXx8XzB4YzM1YmM3LF8weDU5MDQ0OT17fSxfMHgyOWZjMjg9MHgwLF8weDMxYjAyMj0hMHgxLF8weDJhMDk4YixfMHgxNGUyYTY9L14oKFsxLTldezF9WzAtOV0qKXwwKSQvO2lmKF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNTkpXSl7aWYoXzB4MWZlOGZjKXtpZihfMHg0ZDQ4Mzc9XzB4NTYzNjc1W18weDVlYWM5NygweGY0KV0sXzB4NGQ0ODM3Pl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHhjOCldKXtmb3IoXzB4N2E5NGNlPTB4MCxfMHgxMmU0Mzc9XzB4MjVkZGU4WydlbGVtZW50cyddLF8weDVlOTM3ZD1fMHg3YTk0Y2U7XzB4NWU5MzdkPF8weDEyZTQzNztfMHg1ZTkzN2QrKylfMHgzMDc2ZDNbJ3B1c2gnXShfMHgxNWQyYWVbXzB4NWVhYzk3KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg1ZTkzN2QsXzB4MjVkZGU4KSk7XzB4NTg2M2UwW18weDVlYWM5NygweDE0MildPSEweDA7fWVsc2V7Zm9yKF8weDdhOTRjZT0weDAsXzB4MTJlNDM3PV8weDRkNDgzNyxfMHg1ZTkzN2Q9XzB4N2E5NGNlO18weDVlOTM3ZDxfMHgxMmU0Mzc7XzB4NWU5MzdkKyspXzB4MzA3NmQzW18weDVlYWM5NygweDE3MSldKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhlNCldKF8weDU0MjczYyxfMHg1NjM2NzUsXzB4MWYxYWEwLF8weDVlOTM3ZCxfMHgyNWRkZTgpKTt9XzB4MjVkZGU4W18weDVlYWM5NygweDExMCldKz1fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXTt9aWYoIShfMHgxZjFhYTA9PT0nbnVsbCd8fF8weDFmMWFhMD09PV8weDVlYWM5NygweGM3KSkmJiFfMHgzMDg0YWUmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDEzNykmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDE5NCkmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDE3Zikpe3ZhciBfMHgzYTAwOTI9XzB4NDIzNWFiW18weDVlYWM5NygweDE3ZCldfHxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTdkKV07aWYodGhpc1tfMHg1ZWFjOTcoMHgxNWUpXShfMHg1NjM2NzUpPyhfMHg1ZTkzN2Q9MHgwLF8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxMGEpXShmdW5jdGlvbihfMHg0YjMzMTkpe3ZhciBfMHgzZDJhYTg9XzB4NWVhYzk3O2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHgzZDJhYTgoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO3JldHVybjt9aWYoIV8weDI1ZGRlOFsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHgyNWRkZThbXzB4M2QyYWE4KDB4MWEyKV0mJl8weDI1ZGRlOFsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXT5fMHgyNWRkZThbJ2F1dG9FeHBhbmRMaW1pdCddKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fV8weDMwNzZkM1tfMHgzZDJhYTgoMHgxNzEpXShfMHgxNWQyYWVbXzB4M2QyYWE4KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDNkMmFhOCgweDE5YiksXzB4NWU5MzdkKyssXzB4MjVkZGU4LGZ1bmN0aW9uKF8weDVlN2ViZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDVlN2ViZTt9O30oXzB4NGIzMzE5KSkpO30pKTp0aGlzW18weDVlYWM5NygweDE2NCldKF8weDU2MzY3NSkmJl8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxMGEpXShmdW5jdGlvbihfMHg3ODlmOSxfMHg0MGJmZWQpe3ZhciBfMHg1OTU1MTU9XzB4NWVhYzk3O2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO3JldHVybjt9aWYoIV8weDI1ZGRlOFsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHgyNWRkZThbXzB4NTk1NTE1KDB4MWEyKV0mJl8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxMTApXT5fMHgyNWRkZThbJ2F1dG9FeHBhbmRMaW1pdCddKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fXZhciBfMHgxNGQwOTY9XzB4NDBiZmVkW18weDU5NTUxNSgweDE0ZSldKCk7XzB4MTRkMDk2W18weDU5NTUxNSgweGY0KV0+MHg2NCYmKF8weDE0ZDA5Nj1fMHgxNGQwOTZbJ3NsaWNlJ10oMHgwLDB4NjQpK18weDU5NTUxNSgweDFhYykpLF8weDMwNzZkM1tfMHg1OTU1MTUoMHgxNzEpXShfMHgxNWQyYWVbXzB4NTk1NTE1KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDU5NTUxNSgweGViKSxfMHgxNGQwOTYsXzB4MjVkZGU4LGZ1bmN0aW9uKF8weDg0NDhjMil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDg0NDhjMjt9O30oXzB4Nzg5ZjkpKSk7fSksIV8weDFkOWQzMyl7dHJ5e2ZvcihfMHg0YTI3ZDUgaW4gXzB4NTYzNjc1KWlmKCEoXzB4MWZlOGZjJiZfMHgxNGUyYTZbJ3Rlc3QnXShfMHg0YTI3ZDUpKSYmIXRoaXNbJ19ibGFja2xpc3RlZFByb3BlcnR5J10oXzB4NTYzNjc1LF8weDRhMjdkNSxfMHgyNWRkZTgpKXtpZihfMHgyOWZjMjgrKyxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0rKyxfMHgyOWZjMjg+XzB4M2EwMDkyKXtfMHgzMWIwMjI9ITB4MDticmVhazt9aWYoIV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTUpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDFhMildJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0+XzB4MjVkZGU4W18weDVlYWM5NygweDE0NildKXtfMHgzMWIwMjI9ITB4MDticmVhazt9XzB4MzA3NmQzW18weDVlYWM5NygweDE3MSldKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhkMCldKF8weDU0MjczYyxfMHg1OTA0NDksXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg0YTI3ZDUsXzB4MjVkZGU4KSk7fX1jYXRjaHt9aWYoXzB4NTkwNDQ5W18weDVlYWM5NygweDE3NildPSEweDAsXzB4MWY3Y2ZlJiYoXzB4NTkwNDQ5WydfcF9uYW1lJ109ITB4MCksIV8weDMxYjAyMil7dmFyIF8weDE4YzBmNT1bXVtfMHg1ZWFjOTcoMHgxNGMpXSh0aGlzW18weDVlYWM5NygweDE1MSldKF8weDU2MzY3NSkpW18weDVlYWM5NygweDE0YyldKHRoaXNbXzB4NWVhYzk3KDB4MTJlKV0oXzB4NTYzNjc1KSk7Zm9yKF8weDVlOTM3ZD0weDAsXzB4NGQ0ODM3PV8weDE4YzBmNVsnbGVuZ3RoJ107XzB4NWU5MzdkPF8weDRkNDgzNztfMHg1ZTkzN2QrKylpZihfMHg0YTI3ZDU9XzB4MThjMGY1W18weDVlOTM3ZF0sIShfMHgxZmU4ZmMmJl8weDE0ZTJhNltfMHg1ZWFjOTcoMHgxNzgpXShfMHg0YTI3ZDVbXzB4NWVhYzk3KDB4MTRlKV0oKSkpJiYhdGhpc1tfMHg1ZWFjOTcoMHgxNjEpXShfMHg1NjM2NzUsXzB4NGEyN2Q1LF8weDI1ZGRlOCkmJiFfMHg1OTA0NDlbXzB4NWVhYzk3KDB4YzUpK18weDRhMjdkNVtfMHg1ZWFjOTcoMHgxNGUpXSgpXSl7aWYoXzB4MjlmYzI4KyssXzB4MjVkZGU4WydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddKyssXzB4MjlmYzI4Pl8weDNhMDA5Mil7XzB4MzFiMDIyPSEweDA7YnJlYWs7fWlmKCFfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWE1KV0mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDExMCldPl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNDYpXSl7XzB4MzFiMDIyPSEweDA7YnJlYWs7fV8weDMwNzZkM1sncHVzaCddKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhkMCldKF8weDU0MjczYyxfMHg1OTA0NDksXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg0YTI3ZDUsXzB4MjVkZGU4KSk7fX19fX1pZihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTAwKV09XzB4MWYxYWEwLF8weDQ4ZDllMT8oXzB4NTg2M2UwWyd2YWx1ZSddPV8weDU2MzY3NVtfMHg1ZWFjOTcoMHhlZSldKCksdGhpc1tfMHg1ZWFjOTcoMHgxMzMpXShfMHgxZjFhYTAsXzB4NTg2M2UwLF8weDI1ZGRlOCxfMHg0MjM1YWIpKTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHhkNyk/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbXzB4NWVhYzk3KDB4MTMwKV1bXzB4NWVhYzk3KDB4MTFjKV0oXzB4NTYzNjc1KTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHgxN2YpP18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxYTApXT1fMHg1NjM2NzVbXzB4NWVhYzk3KDB4MTRlKV0oKTpfMHgxZjFhYTA9PT0nUmVnRXhwJz9fMHg1ODYzZTBbXzB4NWVhYzk3KDB4MWEwKV09dGhpc1tfMHg1ZWFjOTcoMHhlNyldW18weDVlYWM5NygweDExYyldKF8weDU2MzY3NSk6XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzYpJiZ0aGlzW18weDVlYWM5NygweGVkKV0/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbJ19TeW1ib2wnXVtfMHg1ZWFjOTcoMHhlMyldW18weDVlYWM5NygweDE0ZSldWydjYWxsJ10oXzB4NTYzNjc1KTohXzB4MjVkZGU4WydkZXB0aCddJiYhKF8weDFmMWFhMD09PSdudWxsJ3x8XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzcpKSYmKGRlbGV0ZSBfMHg1ODYzZTBbJ3ZhbHVlJ10sXzB4NTg2M2UwWydjYXBwZWQnXT0hMHgwKSxfMHgzMWIwMjImJihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTE2KV09ITB4MCksXzB4MmEwOThiPV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxODIpXVtfMHg1ZWFjOTcoMHgxOWUpXSxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTgyKV1bXzB4NWVhYzk3KDB4MTllKV09XzB4NTg2M2UwLHRoaXNbXzB4NWVhYzk3KDB4MTY4KV0oXzB4NTg2M2UwLF8weDI1ZGRlOCksXzB4MzA3NmQzW18weDVlYWM5NygweGY0KV0pe2ZvcihfMHg1ZTkzN2Q9MHgwLF8weDRkNDgzNz1fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXTtfMHg1ZTkzN2Q8XzB4NGQ0ODM3O18weDVlOTM3ZCsrKV8weDMwNzZkM1tfMHg1ZTkzN2RdKF8weDVlOTM3ZCk7fV8weDU0MjczY1tfMHg1ZWFjOTcoMHhmNCldJiYoXzB4NTg2M2UwW18weDVlYWM5NygweDE3ZCldPV8weDU0MjczYyk7fWNhdGNoKF8weDViNmE2Mil7XzB4MzRjMGQ0KF8weDViNmE2MixfMHg1ODYzZTAsXzB4MjVkZGU4KTt9cmV0dXJuIHRoaXNbXzB4NWVhYzk3KDB4MTRmKV0oXzB4NTYzNjc1LF8weDU4NjNlMCksdGhpc1snX3RyZWVOb2RlUHJvcGVydGllc0FmdGVyRnVsbFZhbHVlJ10oXzB4NTg2M2UwLF8weDI1ZGRlOCksXzB4MjVkZGU4Wydub2RlJ11bXzB4NWVhYzk3KDB4MTllKV09XzB4MmEwOThiLF8weDI1ZGRlOFsnbGV2ZWwnXS0tLF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXT1fMHg0OGE1NTgsXzB4MjVkZGU4WydhdXRvRXhwYW5kJ10mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMGQpXVtfMHg1ZWFjOTcoMHgxNjIpXSgpLF8weDU4NjNlMDt9W18weDEwZWQyOCgweDEyZSldKF8weDVlN2U0NSl7dmFyIF8weDExMWRkMT1fMHgxMGVkMjg7cmV0dXJuIE9iamVjdFtfMHgxMTFkZDEoMHgxOTApXT9PYmplY3RbXzB4MTExZGQxKDB4MTkwKV0oXzB4NWU3ZTQ1KTpbXTt9W18weDEwZWQyOCgweDE1ZSldKF8weDViNjlhOSl7dmFyIF8weDU1YWMyNz1fMHgxMGVkMjg7cmV0dXJuISEoXzB4NWI2OWE5JiZfMHgzNjNkNTVbXzB4NTVhYzI3KDB4MTliKV0mJnRoaXNbXzB4NTVhYzI3KDB4MTUyKV0oXzB4NWI2OWE5KT09PV8weDU1YWMyNygweDE0NykmJl8weDViNjlhOVtfMHg1NWFjMjcoMHgxMGEpXSk7fVsnX2JsYWNrbGlzdGVkUHJvcGVydHknXShfMHgyOGIxNWYsXzB4NTgxZGQ2LF8weDMyMjI2Yyl7dmFyIF8weDI0N2E3ND1fMHgxMGVkMjg7cmV0dXJuIF8weDMyMjI2Y1tfMHgyNDdhNzQoMHhlZildP3R5cGVvZiBfMHgyOGIxNWZbXzB4NTgxZGQ2XT09XzB4MjQ3YTc0KDB4MTIwKTohMHgxO31bXzB4MTBlZDI4KDB4MTNjKV0oXzB4MzUyMTM2KXt2YXIgXzB4NDc0OThlPV8weDEwZWQyOCxfMHg0NTY4MjI9Jyc7cmV0dXJuIF8weDQ1NjgyMj10eXBlb2YgXzB4MzUyMTM2LF8weDQ1NjgyMj09PV8weDQ3NDk4ZSgweDE0Myk/dGhpc1tfMHg0NzQ5OGUoMHgxNTIpXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4MTgwKT9fMHg0NTY4MjI9XzB4NDc0OThlKDB4MWE3KTp0aGlzW18weDQ3NDk4ZSgweDE1MildKF8weDM1MjEzNik9PT1fMHg0NzQ5OGUoMHhkZCk/XzB4NDU2ODIyPSdkYXRlJzp0aGlzWydfb2JqZWN0VG9TdHJpbmcnXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4YmIpP18weDQ1NjgyMj1fMHg0NzQ5OGUoMHgxN2YpOl8weDM1MjEzNj09PW51bGw/XzB4NDU2ODIyPV8weDQ3NDk4ZSgweDFiNCk6XzB4MzUyMTM2W18weDQ3NDk4ZSgweDEwZSldJiYoXzB4NDU2ODIyPV8weDM1MjEzNltfMHg0NzQ5OGUoMHgxMGUpXVtfMHg0NzQ5OGUoMHhjMSldfHxfMHg0NTY4MjIpOl8weDQ1NjgyMj09PSd1bmRlZmluZWQnJiZ0aGlzW18weDQ3NDk4ZSgweDE1ZCldJiZfMHgzNTIxMzYgaW5zdGFuY2VvZiB0aGlzW18weDQ3NDk4ZSgweDE1ZCldJiYoXzB4NDU2ODIyPV8weDQ3NDk4ZSgweGMwKSksXzB4NDU2ODIyO31bJ19vYmplY3RUb1N0cmluZyddKF8weDFkZTY2Yyl7dmFyIF8weDQ3M2U2NT1fMHgxMGVkMjg7cmV0dXJuIE9iamVjdFtfMHg0NzNlNjUoMHhlMyldWyd0b1N0cmluZyddW18weDQ3M2U2NSgweDExYyldKF8weDFkZTY2Yyk7fVtfMHgxMGVkMjgoMHgxNzMpXShfMHgxYjczMWEpe3ZhciBfMHhiNjBiMTQ9XzB4MTBlZDI4O3JldHVybiBfMHgxYjczMWE9PT1fMHhiNjBiMTQoMHhlMSl8fF8weDFiNzMxYT09PV8weGI2MGIxNCgweDEwMil8fF8weDFiNzMxYT09PV8weGI2MGIxNCgweGRlKTt9WydfaXNQcmltaXRpdmVXcmFwcGVyVHlwZSddKF8weDMzMWIwOSl7dmFyIF8weDE2ZDdkOT1fMHgxMGVkMjg7cmV0dXJuIF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDE1NCl8fF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDEzNyl8fF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDEzMSk7fVtfMHgxMGVkMjgoMHhlNCldKF8weDI5Yzk5YixfMHgyZjQ4NzYsXzB4MWQyZjRmLF8weDMwNzZiYyxfMHgxNzgzMjcsXzB4MmVlYzQ5KXt2YXIgXzB4NDU4ZjRmPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKF8weDUzMGY5OSl7dmFyIF8weDM3NDc0Nj1fMHgzZmY5LF8weDYwZGY4Mz1fMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4MTllKV0sXzB4MjVhMjA5PV8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXSxfMHgyOTBlOTk9XzB4MTc4MzI3W18weDM3NDc0NigweDE4MildWydwYXJlbnQnXTtfMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4Y2UpXT1fMHg2MGRmODMsXzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweDFhOSldPXR5cGVvZiBfMHgzMDc2YmM9PV8weDM3NDc0NigweGRlKT9fMHgzMDc2YmM6XzB4NTMwZjk5LF8weDI5Yzk5YltfMHgzNzQ3NDYoMHgxNzEpXShfMHg0NThmNGZbXzB4Mzc0NzQ2KDB4MWI1KV0oXzB4MmY0ODc2LF8weDFkMmY0ZixfMHgzMDc2YmMsXzB4MTc4MzI3LF8weDJlZWM0OSkpLF8weDE3ODMyN1snbm9kZSddW18weDM3NDc0NigweGNlKV09XzB4MjkwZTk5LF8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXT1fMHgyNWEyMDk7fTt9W18weDEwZWQyOCgweGQwKV0oXzB4ODNiMGUsXzB4NGRiZmI3LF8weDU3ODI1ZSxfMHg1MGYyNWUsXzB4Zjc0MmNiLF8weDVlMDQwMixfMHgyZGY0MTUpe3ZhciBfMHg0ZmY4MGM9XzB4MTBlZDI4LF8weDNjMjNkND10aGlzO3JldHVybiBfMHg0ZGJmYjdbXzB4NGZmODBjKDB4YzUpK18weGY3NDJjYlsndG9TdHJpbmcnXSgpXT0hMHgwLGZ1bmN0aW9uKF8weDNhYmQ2NSl7dmFyIF8weDRhYzk1ZT1fMHg0ZmY4MGMsXzB4MmM5YzNmPV8weDVlMDQwMltfMHg0YWM5NWUoMHgxODIpXVsnY3VycmVudCddLF8weDI2MzViZD1fMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bXzB4NGFjOTVlKDB4MWE5KV0sXzB4YzJlMGQ9XzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXTtfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHhjZSldPV8weDJjOWMzZixfMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bJ2luZGV4J109XzB4M2FiZDY1LF8weDgzYjBlW18weDRhYzk1ZSgweDE3MSldKF8weDNjMjNkNFtfMHg0YWM5NWUoMHgxYjUpXShfMHg1NzgyNWUsXzB4NTBmMjVlLF8weGY3NDJjYixfMHg1ZTA0MDIsXzB4MmRmNDE1KSksXzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXT1fMHhjMmUwZCxfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHgxYTkpXT1fMHgyNjM1YmQ7fTt9W18weDEwZWQyOCgweDFiNSldKF8weGYzOGFjMyxfMHg1YmRjZmQsXzB4MjkwZTYyLF8weDc5OTBjZixfMHg0OGU2MDQpe3ZhciBfMHgxYWE1N2U9XzB4MTBlZDI4LF8weDJiZmY4Yz10aGlzO18weDQ4ZTYwNHx8KF8weDQ4ZTYwND1mdW5jdGlvbihfMHg0M2JhOGYsXzB4NTk3ZDI2KXtyZXR1cm4gXzB4NDNiYThmW18weDU5N2QyNl07fSk7dmFyIF8weDQ4YTIwZT1fMHgyOTBlNjJbXzB4MWFhNTdlKDB4MTRlKV0oKSxfMHhkNjg3M2Q9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDEzOCldfHx7fSxfMHg3NDI2ZjM9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldLF8weDNmMzE5OT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWE1KV07dHJ5e3ZhciBfMHgxOGI3MDI9dGhpc1snX2lzTWFwJ10oXzB4ZjM4YWMzKSxfMHg1YTFhZTQ9XzB4NDhhMjBlO18weDE4YjcwMiYmXzB4NWExYWU0WzB4MF09PT0nXFxcXHgyNycmJihfMHg1YTFhZTQ9XzB4NWExYWU0WydzdWJzdHInXSgweDEsXzB4NWExYWU0W18weDFhYTU3ZSgweGY0KV0tMHgyKSk7dmFyIF8weDZhZjFhMT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV09XzB4ZDY4NzNkWydfcF8nK18weDVhMWFlNF07XzB4NmFmMWExJiYoXzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldPV8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXSsweDEpLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxYTUpXT0hIV8weDZhZjFhMTt2YXIgXzB4MjMzM2Q3PXR5cGVvZiBfMHgyOTBlNjI9PV8weDFhYTU3ZSgweGM2KSxfMHgyMmNiYTA9eyduYW1lJzpfMHgyMzMzZDd8fF8weDE4YjcwMj9fMHg0OGEyMGU6dGhpc1snX3Byb3BlcnR5TmFtZSddKF8weDQ4YTIwZSl9O2lmKF8weDIzMzNkNyYmKF8weDIyY2JhMFtfMHgxYWE1N2UoMHhjNildPSEweDApLCEoXzB4NWJkY2ZkPT09XzB4MWFhNTdlKDB4MWE3KXx8XzB4NWJkY2ZkPT09XzB4MWFhNTdlKDB4MTJmKSkpe3ZhciBfMHgxNTZiNmQ9dGhpc1tfMHgxYWE1N2UoMHgxOWYpXShfMHhmMzhhYzMsXzB4MjkwZTYyKTtpZihfMHgxNTZiNmQmJihfMHgxNTZiNmRbJ3NldCddJiYoXzB4MjJjYmEwWydzZXR0ZXInXT0hMHgwKSxfMHgxNTZiNmRbXzB4MWFhNTdlKDB4MTA3KV0mJiFfMHg2YWYxYTEmJiFfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTk4KV0pKXJldHVybiBfMHgyMmNiYTBbJ2dldHRlciddPSEweDAsdGhpc1tfMHgxYWE1N2UoMHgxN2EpXShfMHgyMmNiYTAsXzB4Nzk5MGNmKSxfMHgyMmNiYTA7fXZhciBfMHgzNmZkMjU7dHJ5e18weDM2ZmQyNT1fMHg0OGU2MDQoXzB4ZjM4YWMzLF8weDI5MGU2Mik7fWNhdGNoKF8weDIxMDA4Mil7cmV0dXJuIF8weDIyY2JhMD17J25hbWUnOl8weDQ4YTIwZSwndHlwZSc6XzB4MWFhNTdlKDB4ZmYpLCdlcnJvcic6XzB4MjEwMDgyW18weDFhYTU3ZSgweDEzNSldfSx0aGlzW18weDFhYTU3ZSgweDE3YSldKF8weDIyY2JhMCxfMHg3OTkwY2YpLF8weDIyY2JhMDt9dmFyIF8weDE1YzAxZT10aGlzW18weDFhYTU3ZSgweDEzYyldKF8weDM2ZmQyNSksXzB4MWFhYjk5PXRoaXNbXzB4MWFhNTdlKDB4MTczKV0oXzB4MTVjMDFlKTtpZihfMHgyMmNiYTBbJ3R5cGUnXT1fMHgxNWMwMWUsXzB4MWFhYjk5KXRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZixfMHgzNmZkMjUsZnVuY3Rpb24oKXt2YXIgXzB4NGY4ZDc1PV8weDFhYTU3ZTtfMHgyMmNiYTBbXzB4NGY4ZDc1KDB4MWEwKV09XzB4MzZmZDI1Wyd2YWx1ZU9mJ10oKSwhXzB4NmFmMWExJiZfMHgyYmZmOGNbXzB4NGY4ZDc1KDB4MTMzKV0oXzB4MTVjMDFlLF8weDIyY2JhMCxfMHg3OTkwY2Yse30pO30pO2Vsc2V7dmFyIF8weDMzNWY1OT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWEyKV0mJl8weDc5OTBjZlsnbGV2ZWwnXTxfMHg3OTkwY2ZbJ2F1dG9FeHBhbmRNYXhEZXB0aCddJiZfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTBkKV1bXzB4MWFhNTdlKDB4ZDQpXShfMHgzNmZkMjUpPDB4MCYmXzB4MTVjMDFlIT09XzB4MWFhNTdlKDB4MTIwKSYmXzB4Nzk5MGNmW18weDFhYTU3ZSgweDExMCldPF8weDc5OTBjZlsnYXV0b0V4cGFuZExpbWl0J107XzB4MzM1ZjU5fHxfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTg4KV08XzB4NzQyNmYzfHxfMHg2YWYxYTE/KHRoaXNbJ3NlcmlhbGl6ZSddKF8weDIyY2JhMCxfMHgzNmZkMjUsXzB4Nzk5MGNmLF8weDZhZjFhMXx8e30pLHRoaXNbXzB4MWFhNTdlKDB4MTRmKV0oXzB4MzZmZDI1LF8weDIyY2JhMCkpOnRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZixfMHgzNmZkMjUsZnVuY3Rpb24oKXt2YXIgXzB4NTNkMDAwPV8weDFhYTU3ZTtfMHgxNWMwMWU9PT1fMHg1M2QwMDAoMHgxYjQpfHxfMHgxNWMwMWU9PT1fMHg1M2QwMDAoMHhjNyl8fChkZWxldGUgXzB4MjJjYmEwW18weDUzZDAwMCgweDFhMCldLF8weDIyY2JhMFtfMHg1M2QwMDAoMHgxODMpXT0hMHgwKTt9KTt9cmV0dXJuIF8weDIyY2JhMDt9ZmluYWxseXtfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV09XzB4ZDY4NzNkLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXT1fMHg3NDI2ZjMsXzB4Nzk5MGNmW18weDFhYTU3ZSgweDFhNSldPV8weDNmMzE5OTt9fVsnX2NhcElmU3RyaW5nJ10oXzB4OTYwMjBjLF8weDRlNGNjMyxfMHhhZWFiMzYsXzB4MWU1NjU3KXt2YXIgXzB4MjM1NmU0PV8weDEwZWQyOCxfMHgyYmJmYTY9XzB4MWU1NjU3WydzdHJMZW5ndGgnXXx8XzB4YWVhYjM2W18weDIzNTZlNCgweDEwOCldO2lmKChfMHg5NjAyMGM9PT1fMHgyMzU2ZTQoMHgxMDIpfHxfMHg5NjAyMGM9PT1fMHgyMzU2ZTQoMHgxMzcpKSYmXzB4NGU0Y2MzWyd2YWx1ZSddKXtsZXQgXzB4MmUwZDIxPV8weDRlNGNjM1sndmFsdWUnXVtfMHgyMzU2ZTQoMHhmNCldO18weGFlYWIzNlsnYWxsU3RyTGVuZ3RoJ10rPV8weDJlMGQyMSxfMHhhZWFiMzZbJ2FsbFN0ckxlbmd0aCddPl8weGFlYWIzNltfMHgyMzU2ZTQoMHhmMyldPyhfMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MTgzKV09JycsZGVsZXRlIF8weDRlNGNjM1sndmFsdWUnXSk6XzB4MmUwZDIxPl8weDJiYmZhNiYmKF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxODMpXT1fMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MWEwKV1bXzB4MjM1NmU0KDB4MThiKV0oMHgwLF8weDJiYmZhNiksZGVsZXRlIF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxYTApXSk7fX1bXzB4MTBlZDI4KDB4MTY0KV0oXzB4M2VmZWYzKXt2YXIgXzB4MzQ4OGFjPV8weDEwZWQyODtyZXR1cm4hIShfMHgzZWZlZjMmJl8weDM2M2Q1NVtfMHgzNDg4YWMoMHhlYildJiZ0aGlzW18weDM0ODhhYygweDE1MildKF8weDNlZmVmMyk9PT1fMHgzNDg4YWMoMHgxYWYpJiZfMHgzZWZlZjNbXzB4MzQ4OGFjKDB4MTBhKV0pO31bXzB4MTBlZDI4KDB4YzQpXShfMHgxMWMzNWIpe3ZhciBfMHgyMzQ1M2Q9XzB4MTBlZDI4O2lmKF8weDExYzM1YltfMHgyMzQ1M2QoMHhmNildKC9eXFxcXGQrJC8pKXJldHVybiBfMHgxMWMzNWI7dmFyIF8weDRmNmEwMzt0cnl7XzB4NGY2YTAzPUpTT05bXzB4MjM0NTNkKDB4ZjEpXSgnJytfMHgxMWMzNWIpO31jYXRjaHtfMHg0ZjZhMDM9J1xcXFx4MjInK3RoaXNbXzB4MjM0NTNkKDB4MTUyKV0oXzB4MTFjMzViKSsnXFxcXHgyMic7fXJldHVybiBfMHg0ZjZhMDNbXzB4MjM0NTNkKDB4ZjYpXSgvXlxcXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcXFwiJC8pP18weDRmNmEwMz1fMHg0ZjZhMDNbJ3N1YnN0ciddKDB4MSxfMHg0ZjZhMDNbJ2xlbmd0aCddLTB4Mik6XzB4NGY2YTAzPV8weDRmNmEwM1tfMHgyMzQ1M2QoMHgxNjYpXSgvJy9nLCdcXFxceDVjXFxcXHgyNycpWydyZXBsYWNlJ10oL1xcXFxcXFxcXFxcIi9nLCdcXFxceDIyJylbJ3JlcGxhY2UnXSgvKF5cXFwifFxcXCIkKS9nLCdcXFxceDI3JyksXzB4NGY2YTAzO31bXzB4MTBlZDI4KDB4MTdhKV0oXzB4NTVjYzQ3LF8weDExYmFiMyxfMHg0MTcxOGYsXzB4MTYzYjZhKXt2YXIgXzB4NDdjOTAyPV8weDEwZWQyODt0aGlzW18weDQ3YzkwMigweDE2OCldKF8weDU1Y2M0NyxfMHgxMWJhYjMpLF8weDE2M2I2YSYmXzB4MTYzYjZhKCksdGhpc1snX2FkZGl0aW9uYWxNZXRhZGF0YSddKF8weDQxNzE4ZixfMHg1NWNjNDcpLHRoaXNbJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZSddKF8weDU1Y2M0NyxfMHgxMWJhYjMpO31bXzB4MTBlZDI4KDB4MTY4KV0oXzB4M2Y4YjNhLF8weDRkNTg4NCl7dmFyIF8weDQ5YzY5ZT1fMHgxMGVkMjg7dGhpc1tfMHg0OWM2OWUoMHgxMmIpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzW18weDQ5YzY5ZSgweGNhKV0oXzB4M2Y4YjNhLF8weDRkNTg4NCksdGhpc1tfMHg0OWM2OWUoMHgxOGUpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzWydfc2V0Tm9kZVBlcm1pc3Npb25zJ10oXzB4M2Y4YjNhLF8weDRkNTg4NCk7fVtfMHgxMGVkMjgoMHgxMmIpXShfMHgyNGQ1ZjgsXzB4MTRlYWVhKXt9W18weDEwZWQyOCgweGNhKV0oXzB4NTc2YTMyLF8weDY4N2M1KXt9W18weDEwZWQyOCgweGJkKV0oXzB4NDg5YzllLF8weGY3Njk1Nyl7fVtfMHgxMGVkMjgoMHgxNDApXShfMHg0MGJkNmMpe3JldHVybiBfMHg0MGJkNmM9PT10aGlzWydfdW5kZWZpbmVkJ107fVtfMHgxMGVkMjgoMHhmMildKF8weDU5ZGJkNyxfMHgzOWI5OTMpe3ZhciBfMHg0YWFiMzQ9XzB4MTBlZDI4O3RoaXNbXzB4NGFhYjM0KDB4YmQpXShfMHg1OWRiZDcsXzB4MzliOTkzKSx0aGlzW18weDRhYWIzNCgweDE5NildKF8weDU5ZGJkNyksXzB4MzliOTkzW18weDRhYWIzNCgweGY5KV0mJnRoaXNbJ19zb3J0UHJvcHMnXShfMHg1OWRiZDcpLHRoaXNbXzB4NGFhYjM0KDB4MTVmKV0oXzB4NTlkYmQ3LF8weDM5Yjk5MyksdGhpc1tfMHg0YWFiMzQoMHhlMildKF8weDU5ZGJkNyxfMHgzOWI5OTMpLHRoaXNbXzB4NGFhYjM0KDB4MTExKV0oXzB4NTlkYmQ3KTt9W18weDEwZWQyOCgweDE0ZildKF8weDI1MTk2NSxfMHg5YjkzY2Qpe3ZhciBfMHg4M2NiZDQ9XzB4MTBlZDI4O2xldCBfMHhjZDM5M2Y7dHJ5e18weDM2M2Q1NVtfMHg4M2NiZDQoMHgxNzQpXSYmKF8weGNkMzkzZj1fMHgzNjNkNTVbXzB4ODNjYmQ0KDB4MTc0KV1bJ2Vycm9yJ10sXzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldW18weDgzY2JkNCgweDE3YyldPWZ1bmN0aW9uKCl7fSksXzB4MjUxOTY1JiZ0eXBlb2YgXzB4MjUxOTY1W18weDgzY2JkNCgweGY0KV09PV8weDgzY2JkNCgweGRlKSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHhmNCldPV8weDI1MTk2NVtfMHg4M2NiZDQoMHhmNCldKTt9Y2F0Y2h7fWZpbmFsbHl7XzB4Y2QzOTNmJiYoXzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldW18weDgzY2JkNCgweDE3YyldPV8weGNkMzkzZik7fWlmKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMDApXT09PV8weDgzY2JkNCgweGRlKXx8XzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4MTMxKSl7aWYoaXNOYU4oXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKSlfMHg5YjkzY2RbJ25hbiddPSEweDAsZGVsZXRlIF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXTtlbHNlIHN3aXRjaChfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV0pe2Nhc2UgTnVtYmVyW18weDgzY2JkNCgweDE5MildOl8weDliOTNjZFtfMHg4M2NiZDQoMHgxNzUpXT0hMHgwLGRlbGV0ZSBfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV07YnJlYWs7Y2FzZSBOdW1iZXJbXzB4ODNjYmQ0KDB4MTg1KV06XzB4OWI5M2NkWyduZWdhdGl2ZUluZmluaXR5J109ITB4MCxkZWxldGUgXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldO2JyZWFrO2Nhc2UgMHgwOnRoaXNbXzB4ODNjYmQ0KDB4MTAxKV0oXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMjQpXT0hMHgwKTticmVhazt9fWVsc2UgXzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4MTIwKSYmdHlwZW9mIF8weDI1MTk2NVtfMHg4M2NiZDQoMHhjMSldPT1fMHg4M2NiZDQoMHgxMDIpJiZfMHgyNTE5NjVbXzB4ODNjYmQ0KDB4YzEpXSYmXzB4OWI5M2NkW18weDgzY2JkNCgweGMxKV0mJl8weDI1MTk2NVsnbmFtZSddIT09XzB4OWI5M2NkW18weDgzY2JkNCgweGMxKV0mJihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4ZGEpXT1fMHgyNTE5NjVbJ25hbWUnXSk7fVtfMHgxMGVkMjgoMHgxMDEpXShfMHhkYzcyZjYpe3ZhciBfMHgzOTZmMzI9XzB4MTBlZDI4O3JldHVybiAweDEvXzB4ZGM3MmY2PT09TnVtYmVyW18weDM5NmYzMigweDE4NSldO31bXzB4MTBlZDI4KDB4MTE0KV0oXzB4YzQ5ZjU5KXt2YXIgXzB4MTVkMzFhPV8weDEwZWQyODshXzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldfHwhXzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldWydsZW5ndGgnXXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4MWE3KXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4ZWIpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTAwKV09PT1fMHgxNWQzMWEoMHgxOWIpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTdkKV1bXzB4MTVkMzFhKDB4MTdlKV0oZnVuY3Rpb24oXzB4NTIxYTY2LF8weDMwMzdiOSl7dmFyIF8weDE5YjNjOD1fMHgxNWQzMWEsXzB4MzA3NDBmPV8weDUyMWE2NltfMHgxOWIzYzgoMHhjMSldW18weDE5YjNjOCgweDE5OSldKCksXzB4Mzc3ZmYxPV8weDMwMzdiOVtfMHgxOWIzYzgoMHhjMSldWyd0b0xvd2VyQ2FzZSddKCk7cmV0dXJuIF8weDMwNzQwZjxfMHgzNzdmZjE/LTB4MTpfMHgzMDc0MGY+XzB4Mzc3ZmYxPzB4MToweDA7fSk7fVsnX2FkZEZ1bmN0aW9uc05vZGUnXShfMHgyNGYxNDYsXzB4MzA0ZmRhKXt2YXIgXzB4MmEwZjE1PV8weDEwZWQyODtpZighKF8weDMwNGZkYVtfMHgyYTBmMTUoMHhlZildfHwhXzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldfHwhXzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDJhMGYxNSgweGY0KV0pKXtmb3IodmFyIF8weDE0YzlmNT1bXSxfMHg0ZDllZTQ9W10sXzB4NDg4Zjc5PTB4MCxfMHgxMDFhMzQ9XzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDJhMGYxNSgweGY0KV07XzB4NDg4Zjc5PF8weDEwMWEzNDtfMHg0ODhmNzkrKyl7dmFyIF8weDE5NjUxZj1fMHgyNGYxNDZbXzB4MmEwZjE1KDB4MTdkKV1bXzB4NDg4Zjc5XTtfMHgxOTY1MWZbXzB4MmEwZjE1KDB4MTAwKV09PT1fMHgyYTBmMTUoMHgxMjApP18weDE0YzlmNVtfMHgyYTBmMTUoMHgxNzEpXShfMHgxOTY1MWYpOl8weDRkOWVlNFsncHVzaCddKF8weDE5NjUxZik7fWlmKCEoIV8weDRkOWVlNFtfMHgyYTBmMTUoMHhmNCldfHxfMHgxNGM5ZjVbJ2xlbmd0aCddPD0weDEpKXtfMHgyNGYxNDZbJ3Byb3BzJ109XzB4NGQ5ZWU0O3ZhciBfMHgyMzBiZWM9eydmdW5jdGlvbnNOb2RlJzohMHgwLCdwcm9wcyc6XzB4MTRjOWY1fTt0aGlzW18weDJhMGYxNSgweDEyYildKF8weDIzMGJlYyxfMHgzMDRmZGEpLHRoaXNbXzB4MmEwZjE1KDB4YmQpXShfMHgyMzBiZWMsXzB4MzA0ZmRhKSx0aGlzW18weDJhMGYxNSgweDE5NildKF8weDIzMGJlYyksdGhpc1tfMHgyYTBmMTUoMHhmZSldKF8weDIzMGJlYyxfMHgzMDRmZGEpLF8weDIzMGJlY1snaWQnXSs9J1xcXFx4MjBmJyxfMHgyNGYxNDZbJ3Byb3BzJ11bXzB4MmEwZjE1KDB4MWFkKV0oXzB4MjMwYmVjKTt9fX1bXzB4MTBlZDI4KDB4ZTIpXShfMHg0NjhlOTksXzB4NDM4OGYwKXt9Wydfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZSddKF8weDVlYjcxNyl7fVtfMHgxMGVkMjgoMHgxMjEpXShfMHgzOGMwNWMpe3ZhciBfMHgxYWVlMWE9XzB4MTBlZDI4O3JldHVybiBBcnJheVtfMHgxYWVlMWEoMHgxNzIpXShfMHgzOGMwNWMpfHx0eXBlb2YgXzB4MzhjMDVjPT1fMHgxYWVlMWEoMHgxNDMpJiZ0aGlzW18weDFhZWUxYSgweDE1MildKF8weDM4YzA1Yyk9PT1fMHgxYWVlMWEoMHgxODApO31bJ19zZXROb2RlUGVybWlzc2lvbnMnXShfMHg0ZWVmYTAsXzB4MTcwNWE5KXt9W18weDEwZWQyOCgweDExMSldKF8weDUxNjkwNil7dmFyIF8weDIzNjkwNj1fMHgxMGVkMjg7ZGVsZXRlIF8weDUxNjkwNltfMHgyMzY5MDYoMHgxMGYpXSxkZWxldGUgXzB4NTE2OTA2WydfaGFzU2V0T25JdHNQYXRoJ10sZGVsZXRlIF8weDUxNjkwNltfMHgyMzY5MDYoMHgxMjUpXTt9W18weDEwZWQyOCgweDE4ZSldKF8weDIzYzFjMixfMHgyOWEyMWIpe319bGV0IF8weDRlN2Q3ZD1uZXcgXzB4MzI4YmRlKCksXzB4Mzg4NmVhPXsncHJvcHMnOjB4NjQsJ2VsZW1lbnRzJzoweDY0LCdzdHJMZW5ndGgnOjB4NDAwKjB4MzIsJ3RvdGFsU3RyTGVuZ3RoJzoweDQwMCoweDMyLCdhdXRvRXhwYW5kTGltaXQnOjB4MTM4OCwnYXV0b0V4cGFuZE1heERlcHRoJzoweGF9LF8weDMwYzU1Nz17J3Byb3BzJzoweDUsJ2VsZW1lbnRzJzoweDUsJ3N0ckxlbmd0aCc6MHgxMDAsJ3RvdGFsU3RyTGVuZ3RoJzoweDEwMCoweDMsJ2F1dG9FeHBhbmRMaW1pdCc6MHgxZSwnYXV0b0V4cGFuZE1heERlcHRoJzoweDJ9O2Z1bmN0aW9uIF8weDU4NmQzNihfMHg1NGYzYmUsXzB4MTgxYjFhLF8weDJiN2ViNSxfMHgxZGQ2MzQsXzB4NDljMDdjLF8weDM5NzQ0Nil7dmFyIF8weDJmMThkZD1fMHgxMGVkMjg7bGV0IF8weDRlN2Y3MixfMHgxZGU1YTE7dHJ5e18weDFkZTVhMT1fMHg0ZWJlZjgoKSxfMHg0ZTdmNzI9XzB4NDZjYTkwW18weDE4MWIxYV0sIV8weDRlN2Y3Mnx8XzB4MWRlNWExLV8weDRlN2Y3MlsndHMnXT4weDFmNCYmXzB4NGU3ZjcyW18weDJmMThkZCgweDExOCldJiZfMHg0ZTdmNzJbJ3RpbWUnXS9fMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTE4KV08MHg2ND8oXzB4NDZjYTkwW18weDE4MWIxYV09XzB4NGU3ZjcyPXsnY291bnQnOjB4MCwndGltZSc6MHgwLCd0cyc6XzB4MWRlNWExfSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV09e30pOl8weDFkZTVhMS1fMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ3RzJ10+MHgzMiYmXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldJiZfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MWExKV0vXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldWydjb3VudCddPDB4NjQmJihfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV09e30pO2xldCBfMHg0ZGRkM2Q9W10sXzB4MmMxYjQ1PV8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxODQpXXx8XzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDE4NCldP18weDMwYzU1NzpfMHgzODg2ZWEsXzB4Mzk4YWY1PV8weDMwYzg0Yz0+e3ZhciBfMHg5ODhlM2I9XzB4MmYxOGRkO2xldCBfMHgxNGIzZGM9e307cmV0dXJuIF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxN2QpXT1fMHgzMGM4NGNbJ3Byb3BzJ10sXzB4MTRiM2RjW18weDk4OGUzYigweGM4KV09XzB4MzBjODRjWydlbGVtZW50cyddLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxMDgpXT1fMHgzMGM4NGNbXzB4OTg4ZTNiKDB4MTA4KV0sXzB4MTRiM2RjW18weDk4OGUzYigweGYzKV09XzB4MzBjODRjW18weDk4OGUzYigweGYzKV0sXzB4MTRiM2RjW18weDk4OGUzYigweDE0NildPV8weDMwYzg0Y1tfMHg5ODhlM2IoMHgxNDYpXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWI3KV09XzB4MzBjODRjW18weDk4OGUzYigweDFiNyldLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhmOSldPSEweDEsXzB4MTRiM2RjW18weDk4OGUzYigweGVmKV09IV8weDFkOTE2OSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTU5KV09MHgxLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxODgpXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDEwNSldPV8weDk4OGUzYigweGJlKSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWI5KV09XzB4OTg4ZTNiKDB4MTZiKSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWEyKV09ITB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTBkKV09W10sXzB4MTRiM2RjW18weDk4OGUzYigweDExMCldPTB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTk4KV09ITB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4ZGIpXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDE4MildPXsnY3VycmVudCc6dm9pZCAweDAsJ3BhcmVudCc6dm9pZCAweDAsJ2luZGV4JzoweDB9LF8weDE0YjNkYzt9O2Zvcih2YXIgXzB4NGU4YjQ2PTB4MDtfMHg0ZThiNDY8XzB4NDljMDdjW18weDJmMThkZCgweGY0KV07XzB4NGU4YjQ2KyspXzB4NGRkZDNkW18weDJmMThkZCgweDE3MSldKF8weDRlN2Q3ZFtfMHgyZjE4ZGQoMHhmZCldKHsndGltZU5vZGUnOl8weDU0ZjNiZT09PV8weDJmMThkZCgweDFhMSl8fHZvaWQgMHgwfSxfMHg0OWMwN2NbXzB4NGU4YjQ2XSxfMHgzOThhZjUoXzB4MmMxYjQ1KSx7fSkpO2lmKF8weDU0ZjNiZT09PV8weDJmMThkZCgweDFhYil8fF8weDU0ZjNiZT09PV8weDJmMThkZCgweDE3Yykpe2xldCBfMHgzODg4NmM9RXJyb3JbXzB4MmYxOGRkKDB4MTFmKV07dHJ5e0Vycm9yWydzdGFja1RyYWNlTGltaXQnXT0weDEvMHgwLF8weDRkZGQzZFtfMHgyZjE4ZGQoMHgxNzEpXShfMHg0ZTdkN2RbJ3NlcmlhbGl6ZSddKHsnc3RhY2tOb2RlJzohMHgwfSxuZXcgRXJyb3IoKVtfMHgyZjE4ZGQoMHgxYjApXSxfMHgzOThhZjUoXzB4MmMxYjQ1KSx7J3N0ckxlbmd0aCc6MHgxLzB4MH0pKTt9ZmluYWxseXtFcnJvcltfMHgyZjE4ZGQoMHgxMWYpXT1fMHgzODg4NmM7fX1yZXR1cm57J21ldGhvZCc6XzB4MmYxOGRkKDB4ZDkpLCd2ZXJzaW9uJzpfMHg0NmY2N2MsJ2FyZ3MnOlt7J3RzJzpfMHgyYjdlYjUsJ3Nlc3Npb24nOl8weDFkZDYzNCwnYXJncyc6XzB4NGRkZDNkLCdpZCc6XzB4MTgxYjFhLCdjb250ZXh0JzpfMHgzOTc0NDZ9XX07fWNhdGNoKF8weDE0Y2QxOCl7cmV0dXJueydtZXRob2QnOl8weDJmMThkZCgweGQ5KSwndmVyc2lvbic6XzB4NDZmNjdjLCdhcmdzJzpbeyd0cyc6XzB4MmI3ZWI1LCdzZXNzaW9uJzpfMHgxZGQ2MzQsJ2FyZ3MnOlt7J3R5cGUnOl8weDJmMThkZCgweGZmKSwnZXJyb3InOl8weDE0Y2QxOCYmXzB4MTRjZDE4W18weDJmMThkZCgweDEzNSldfV0sJ2lkJzpfMHgxODFiMWEsJ2NvbnRleHQnOl8weDM5NzQ0Nn1dfTt9ZmluYWxseXt0cnl7aWYoXzB4NGU3ZjcyJiZfMHgxZGU1YTEpe2xldCBfMHhhMDAyNT1fMHg0ZWJlZjgoKTtfMHg0ZTdmNzJbJ2NvdW50J10rKyxfMHg0ZTdmNzJbJ3RpbWUnXSs9XzB4MjI0ZmZiKF8weDFkZTVhMSxfMHhhMDAyNSksXzB4NGU3ZjcyWyd0cyddPV8weGEwMDI1LF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxMTgpXSsrLF8weDQ2Y2E5MFsnaGl0cyddW18weDJmMThkZCgweDFhMSldKz1fMHgyMjRmZmIoXzB4MWRlNWExLF8weGEwMDI1KSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ3RzJ109XzB4YTAwMjUsKF8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxMTgpXT4weDMyfHxfMHg0ZTdmNzJbJ3RpbWUnXT4weDY0KSYmKF8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxODQpXT0hMHgwKSwoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldPjB4M2U4fHxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MWExKV0+MHgxMmMpJiYoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDE4NCldPSEweDApO319Y2F0Y2h7fX19cmV0dXJuIF8weDU4NmQzNjt9KChfMHgxNzg5MWUsXzB4NGY0YjljLF8weDNmZDZkNSxfMHgxYzU0MjIsXzB4NDc5Y2EyLF8weDRiMGFjOCxfMHg1MjQ2YWYsXzB4NDJiZmFjLF8weDRjYTgyZixfMHgxMjM1ODAsXzB4MTg5NjlkKT0+e3ZhciBfMHg0MDcyNDI9XzB4ZmI0Zjg5O2lmKF8weDE3ODkxZVtfMHg0MDcyNDIoMHgxNTApXSlyZXR1cm4gXzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldO2lmKCFIKF8weDE3ODkxZSxfMHg0MmJmYWMsXzB4NDc5Y2EyKSlyZXR1cm4gXzB4MTc4OTFlWydfY29uc29sZV9uaW5qYSddPXsnY29uc29sZUxvZyc6KCk9Pnt9LCdjb25zb2xlVHJhY2UnOigpPT57fSwnY29uc29sZVRpbWUnOigpPT57fSwnY29uc29sZVRpbWVFbmQnOigpPT57fSwnYXV0b0xvZyc6KCk9Pnt9LCdhdXRvTG9nTWFueSc6KCk9Pnt9LCdhdXRvVHJhY2VNYW55JzooKT0+e30sJ2NvdmVyYWdlJzooKT0+e30sJ2F1dG9UcmFjZSc6KCk9Pnt9LCdhdXRvVGltZSc6KCk9Pnt9LCdhdXRvVGltZUVuZCc6KCk9Pnt9fSxfMHgxNzg5MWVbXzB4NDA3MjQyKDB4MTUwKV07bGV0IF8weDM3NjEwZT1CKF8weDE3ODkxZSksXzB4MzQzN2NhPV8weDM3NjEwZVsnZWxhcHNlZCddLF8weDI1YjVlNT1fMHgzNzYxMGVbJ3RpbWVTdGFtcCddLF8weDRiZjc2Yj1fMHgzNzYxMGVbXzB4NDA3MjQyKDB4MTFlKV0sXzB4MTI1YzdkPXsnaGl0cyc6e30sJ3RzJzp7fX0sXzB4MTViNDZhPVgoXzB4MTc4OTFlLF8weDRjYTgyZixfMHgxMjVjN2QsXzB4NGIwYWM4KSxfMHhkNTQ4NmI9XzB4NGQzMGUxPT57XzB4MTI1YzdkWyd0cyddW18weDRkMzBlMV09XzB4MjViNWU1KCk7fSxfMHgyZDA3ZTY9KF8weDViYzM1NSxfMHhlMzRmZSk9Pnt2YXIgXzB4MjMzOWNlPV8weDQwNzI0MjtsZXQgXzB4NTlmYjZhPV8weDEyNWM3ZFsndHMnXVtfMHhlMzRmZV07aWYoZGVsZXRlIF8weDEyNWM3ZFsndHMnXVtfMHhlMzRmZV0sXzB4NTlmYjZhKXtsZXQgXzB4NTkyMWE2PV8weDM0MzdjYShfMHg1OWZiNmEsXzB4MjViNWU1KCkpO18weDJjZjI5MChfMHgxNWI0NmEoXzB4MjMzOWNlKDB4MWExKSxfMHg1YmMzNTUsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHg1OTIxYTZdLF8weGUzNGZlKSk7fX0sXzB4NDliY2VjPV8weDQzZTcyZj0+e3ZhciBfMHgyZTQ3YmY9XzB4NDA3MjQyLF8weDU1ZDk1ZDtyZXR1cm4gXzB4NDc5Y2EyPT09XzB4MmU0N2JmKDB4MTM5KSYmXzB4MTc4OTFlWydvcmlnaW4nXSYmKChfMHg1NWQ5NWQ9XzB4NDNlNzJmPT1udWxsP3ZvaWQgMHgwOl8weDQzZTcyZlsnYXJncyddKT09bnVsbD92b2lkIDB4MDpfMHg1NWQ5NWRbJ2xlbmd0aCddKSYmKF8weDQzZTcyZlsnYXJncyddWzB4MF1bXzB4MmU0N2JmKDB4MTg5KV09XzB4MTc4OTFlWydvcmlnaW4nXSksXzB4NDNlNzJmO307XzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldPXsnY29uc29sZUxvZyc6KF8weDMxYzkyZSxfMHgyNDQ4OGQpPT57dmFyIF8weDkzZTY3ZT1fMHg0MDcyNDI7XzB4MTc4OTFlWydjb25zb2xlJ11bJ2xvZyddW18weDkzZTY3ZSgweGMxKV0hPT0nZGlzYWJsZWRMb2cnJiZfMHgyY2YyOTAoXzB4MTViNDZhKF8weDkzZTY3ZSgweGQ5KSxfMHgzMWM5MmUsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weDI0NDg4ZCkpO30sJ2NvbnNvbGVUcmFjZSc6KF8weDNiNjZhNyxfMHhiYTg4MGUpPT57dmFyIF8weDU2N2UxMz1fMHg0MDcyNDIsXzB4MzE3MTZlLF8weDVhOWM2MDtfMHgxNzg5MWVbXzB4NTY3ZTEzKDB4MTc0KV1bJ2xvZyddW18weDU2N2UxMygweGMxKV0hPT1fMHg1NjdlMTMoMHhjMikmJigoXzB4NWE5YzYwPShfMHgzMTcxNmU9XzB4MTc4OTFlW18weDU2N2UxMygweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHgzMTcxNmVbXzB4NTY3ZTEzKDB4ZDIpXSkhPW51bGwmJl8weDVhOWM2MFtfMHg1NjdlMTMoMHgxODIpXSYmKF8weDE3ODkxZVtfMHg1NjdlMTMoMHgxOGMpXT0hMHgwKSxfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHg1NjdlMTMoMHgxYWIpLF8weDNiNjZhNyxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4YmE4ODBlKSkpKTt9LCdjb25zb2xlRXJyb3InOihfMHgzZmE3MzYsXzB4MTIxYTNiKT0+e3ZhciBfMHgxMmRmYjg9XzB4NDA3MjQyO18weDE3ODkxZVtfMHgxMmRmYjgoMHgxOGMpXT0hMHgwLF8weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKCdlcnJvcicsXzB4M2ZhNzM2LF8weDRiZjc2YigpLF8weDI1MzUzNixfMHgxMjFhM2IpKSk7fSwnY29uc29sZVRpbWUnOl8weDE4NDhhNz0+e18weGQ1NDg2YihfMHgxODQ4YTcpO30sJ2NvbnNvbGVUaW1lRW5kJzooXzB4MzFhZTY1LF8weDNkMTA0YSk9PntfMHgyZDA3ZTYoXzB4M2QxMDRhLF8weDMxYWU2NSk7fSwnYXV0b0xvZyc6KF8weDM3ODA4LF8weDJhZDU1OCk9Pnt2YXIgXzB4MjI5MzhiPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4MTViNDZhKF8weDIyOTM4YigweGQ5KSxfMHgyYWQ1NTgsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHgzNzgwOF0pKTt9LCdhdXRvTG9nTWFueSc6KF8weDE2MWQ3ZSxfMHg0M2RlZGIpPT57dmFyIF8weDM3OTUwNj1fMHg0MDcyNDI7XzB4MmNmMjkwKF8weDE1YjQ2YShfMHgzNzk1MDYoMHhkOSksXzB4MTYxZDdlLF8weDRiZjc2YigpLF8weDI1MzUzNixfMHg0M2RlZGIpKTt9LCdhdXRvVHJhY2UnOihfMHgxMjE3ZTYsXzB4NDQ2NzA3KT0+e3ZhciBfMHgzYTUyNTI9XzB4NDA3MjQyO18weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKF8weDNhNTI1MigweDFhYiksXzB4NDQ2NzA3LF8weDRiZjc2YigpLF8weDI1MzUzNixbXzB4MTIxN2U2XSkpKTt9LCdhdXRvVHJhY2VNYW55JzooXzB4NWI3N2M0LF8weDRmYzQzYSk9Pnt2YXIgXzB4NWJmYmYyPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHg1YmZiZjIoMHgxYWIpLF8weDViNzdjNCxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4NGZjNDNhKSkpO30sJ2F1dG9UaW1lJzooXzB4MjQxODNhLF8weDQ0Mjc1OSxfMHgyOTZhNGMpPT57XzB4ZDU0ODZiKF8weDI5NmE0Yyk7fSwnYXV0b1RpbWVFbmQnOihfMHgyOTI3YTksXzB4MjQzZDMwLF8weDViZDYzYik9PntfMHgyZDA3ZTYoXzB4MjQzZDMwLF8weDViZDYzYik7fSwnY292ZXJhZ2UnOl8weDUxOWZjMj0+e3ZhciBfMHg0NTI1NTQ9XzB4NDA3MjQyO18weDJjZjI5MCh7J21ldGhvZCc6XzB4NDUyNTU0KDB4MTU2KSwndmVyc2lvbic6XzB4NGIwYWM4LCdhcmdzJzpbeydpZCc6XzB4NTE5ZmMyfV19KTt9fTtsZXQgXzB4MmNmMjkwPXEoXzB4MTc4OTFlLF8weDRmNGI5YyxfMHgzZmQ2ZDUsXzB4MWM1NDIyLF8weDQ3OWNhMixfMHgxMjM1ODAsXzB4MTg5NjlkKSxfMHgyNTM1MzY9XzB4MTc4OTFlW18weDQwNzI0MigweGYwKV07cmV0dXJuIF8weDE3ODkxZVsnX2NvbnNvbGVfbmluamEnXTt9KShnbG9iYWxUaGlzLF8weGZiNGY4OSgweDEwYyksJzYwNTkxJyxfMHhmYjRmODkoMHhkYyksJ3dlYnBhY2snLF8weGZiNGY4OSgweGQzKSwnMTcyNzk1MDAwNTAxNicsXzB4ZmI0Zjg5KDB4MWE2KSxfMHhmYjRmODkoMHhmYiksXzB4ZmI0Zjg5KDB4MTk3KSxfMHhmYjRmODkoMHgxM2EpKTtcIik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSB9XHJcbjsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fb28oaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlTG9nKGksIHYpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb19vbzsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fdHIoaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlVHJhY2UoaSwgdik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RyOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190eChpLCAuLi52KSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVFcnJvcihpLCB2KTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fdHg7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX3RzKHYpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZVRpbWUodik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RzOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190ZSh2LCBpKSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVUaW1lRW5kKHYsIGkpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb190ZTsgLyplc2xpbnQgdW5pY29ybi9uby1hYnVzaXZlLWVzbGludC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvZGlzYWJsZS1lbmFibGUtcGFpcjosZXNsaW50LWNvbW1lbnRzL25vLXVubGltaXRlZC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tYWdncmVnYXRpbmctZW5hYmxlOixlc2xpbnQtY29tbWVudHMvbm8tZHVwbGljYXRlLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby11bnVzZWQtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLXVudXNlZC1lbmFibGU6LCovXHJcbiIsImV4cG9ydCBjb25zdCBmaXJlYmFzZUNvbmZpZyA9IHtcclxuICAgIGFwaUtleTogXCJBSXphU3lCOGMybEJWaTI2dTdZUkw5c3hPUDk3VWFxM3lOOGhUbDRcIixcclxuICAgIGF1dGhEb21haW46IFwiZnRtLWI5ZDk5LmZpcmViYXNlYXBwLmNvbVwiLFxyXG4gICAgZGF0YWJhc2VVUkw6IFwiaHR0cHM6Ly9mdG0tYjlkOTkuZmlyZWJhc2Vpby5jb21cIixcclxuICAgIHByb2plY3RJZDogXCJmdG0tYjlkOTlcIixcclxuICAgIHN0b3JhZ2VCdWNrZXQ6IFwiZnRtLWI5ZDk5LmFwcHNwb3QuY29tXCIsXHJcbiAgICBtZXNzYWdpbmdTZW5kZXJJZDogXCI2MDI0MDIzODc5NDFcIixcclxuICAgIGFwcElkOiBcIjE6NjAyNDAyMzg3OTQxOndlYjphNjNmNGVhZGRjOTQ5ZjUzOWRlMTBjXCIsXHJcbiAgICBtZWFzdXJlbWVudElkOiBcIkctRlZMU043RDdOTVwiLFxyXG59O1xyXG4iLCJpbXBvcnQgeyBCYXNlRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuL2Jhc2UtZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuZXhwb3J0IGNsYXNzIEZpcmViYXNlSW50ZWdyYXRpb24gZXh0ZW5kcyBCYXNlRmlyZWJhc2VJbnRlZ3JhdGlvbiB7XHJcbiAgICBzdGF0aWMgaW5zdGFuY2U7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgIGlmICghRmlyZWJhc2VJbnRlZ3JhdGlvbi5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBGaXJlYmFzZUludGVncmF0aW9uLmluc3RhbmNlID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIEZpcmViYXNlSW50ZWdyYXRpb24uaW5zdGFuY2U7XHJcbiAgICB9XHJcbiAgICBzZW5kU2Vzc2lvblN0YXJ0RXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwic2Vzc2lvbl9zdGFydFwiLCBkYXRhKTtcclxuICAgIH1cclxuICAgIHNlbmRTZXNzaW9uRW5kRXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwic2Vzc2lvbl9lbmRcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kU2VsZWN0ZWRMZXZlbEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcInNlbGVjdGVkX2xldmVsXCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZFRhcHBlZFN0YXJ0RXZlbnQoZGF0YSkge1xyXG4gICAgICAgIHRoaXMuY3VzdG9tRXZlbnRzKFwidGFwcGVkX3N0YXJ0XCIsIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgc2VuZFB1enpsZUNvbXBsZXRlZEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cyhcInB1enpsZV9jb21wbGV0ZWRcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kTGV2ZWxDb21wbGV0ZWRFdmVudChkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXN0b21FdmVudHMoXCJsZXZlbF9jb21wbGV0ZWRcIiwgZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzZW5kVXNlckNsaWNrZWRPblBsYXlFdmVudCgpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cygndXNlcl9jbGlja2VkJywgeyBjbGljazogJ0NsaWNrJyB9KTtcclxuICAgIH1cclxuICAgIHNlbmREb3dubG9hZENvbXBsZXRlZEV2ZW50KGRhdGEpIHtcclxuICAgICAgICB0aGlzLmN1c3RvbUV2ZW50cygnZG93bmxvYWRfY29tcGxldGVkJywgZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gY3VzdG9tIEV2ZW50c1xyXG5leHBvcnQgY29uc3QgTE9BRFBVWlpMRSA9IFwibG9hZHB1enpsZVwiO1xyXG5leHBvcnQgY29uc3QgU1RPTkVEUk9QID0gXCJzdG9uZXNkcm9wcGVkXCI7XHJcbi8vIGRlZmF1bHQgRXZlbnRzXHJcbmV4cG9ydCBjb25zdCBNT1VTRU1PVkUgPSBcIm1vdXNlbW92ZVwiO1xyXG5leHBvcnQgY29uc3QgTU9VU0VET1dOID0gXCJtb3VzZWRvd25cIjtcclxuZXhwb3J0IGNvbnN0IE1PVVNFVVAgPSBcIm1vdXNldXBcIjtcclxuZXhwb3J0IGNvbnN0IFRPVUNIU1RBUlQgPSBcInRvdWNoc3RhcnRcIjtcclxuZXhwb3J0IGNvbnN0IFRPVUNITU9WRSA9IFwidG91Y2htb3ZlXCI7XHJcbmV4cG9ydCBjb25zdCBUT1VDSEVORCA9IFwidG91Y2hlbmRcIjtcclxuZXhwb3J0IGNvbnN0IENMSUNLID0gXCJjbGlja1wiO1xyXG5leHBvcnQgY29uc3QgVklTSUJJTElUWV9DSEFOR0UgPSBcInZpc2liaWxpdHljaGFuZ2VcIjtcclxuIiwiY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTtcclxuaW1wb3J0IHsgRGV2ZWxvcG1lbnRTZXJ2ZXIgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmV4cG9ydCB2YXIgcHNldWRvSWQgPSB1cmxQYXJhbXMuZ2V0KFwiY3JfdXNlcl9pZFwiKTtcclxuZXhwb3J0IHZhciBsYW5nID0gdXJsUGFyYW1zLmdldChcImNyX2xhbmdcIikgPT0gbnVsbCA/IFwiZW5nbGlzaFwiIDogdXJsUGFyYW1zLmdldChcImNyX2xhbmdcIik7XHJcbmV4cG9ydCBjb25zdCBmb250ID0gVXRpbHMuZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQobGFuZyk7XHJcbmV4cG9ydCBjb25zdCBEZWJ1Z2dlciA9IHtcclxuICAgIERldmVsb3BtZW50TGluazogd2luZG93LmxvY2F0aW9uLmhyZWYuaW5jbHVkZXMoRGV2ZWxvcG1lbnRTZXJ2ZXIpXHJcbiAgICAgICAgPyB0cnVlXHJcbiAgICAgICAgOiBmYWxzZSxcclxuICAgIERlYnVnTW9kZTogZmFsc2UsXHJcbn07XHJcbiIsImltcG9ydCB7IGZvbnQgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5leHBvcnQgY2xhc3MgU3RvbmVDb25maWcge1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICBvcmlneDtcclxuICAgIG9yaWd5O1xyXG4gICAgdGV4dDtcclxuICAgIGltZztcclxuICAgIGltYWdlU2l6ZTtcclxuICAgIHRleHRGb250U2l6ZTtcclxuICAgIGNhbnZhc1dpZHRoO1xyXG4gICAgY2FudmFzSGVpZ2h0O1xyXG4gICAgaW1hZ2VDZW50ZXJPZmZzZXRYO1xyXG4gICAgaW1hZ2VDZW50ZXJPZmZzZXRZO1xyXG4gICAgY29udGV4dDtcclxuICAgIHR1dG9yaWFsSW5zdGFuY2U7XHJcbiAgICB0aW1lclRpY2tpbmdJbnN0YW5jZTtcclxuICAgIGZyYW1lID0gMDtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhc1dpZHRoLCBjYW52YXNIZWlnaHQsIHN0b25lTGV0dGVyLCB4UG9zLCB5UG9zLCBpbWcsIHRpbWVyVGlja2luZ0luc3RhbmNlLCB0dXRvcmlhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgdGhpcy54ID0geFBvcztcclxuICAgICAgICB0aGlzLnkgPSB5UG9zO1xyXG4gICAgICAgIHRoaXMub3JpZ3ggPSB4UG9zO1xyXG4gICAgICAgIHRoaXMub3JpZ3kgPSB5UG9zO1xyXG4gICAgICAgIHRoaXMuY2FudmFzV2lkdGggPSBjYW52YXNXaWR0aDtcclxuICAgICAgICB0aGlzLmNhbnZhc0hlaWdodCA9IGNhbnZhc0hlaWdodDtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsSW5zdGFuY2UgPSB0dXRvcmlhbEluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMudGV4dCA9IHN0b25lTGV0dGVyO1xyXG4gICAgICAgIHRoaXMuaW1nID0gaW1nO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVJbWFnZUFuZEZvbnRTaXplKCk7XHJcbiAgICAgICAgdGhpcy5pbWFnZUNlbnRlck9mZnNldFggPSB0aGlzLmltYWdlU2l6ZSAvIDIuMztcclxuICAgICAgICB0aGlzLmltYWdlQ2VudGVyT2Zmc2V0WSA9IHRoaXMuaW1hZ2VTaXplIC8gMS41O1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UgPSB0aW1lclRpY2tpbmdJbnN0YW5jZTtcclxuICAgIH1cclxuICAgIGNhbGN1bGF0ZUltYWdlQW5kRm9udFNpemUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpLndpZHRoICogMS40ID5cclxuICAgICAgICAgICAgdGhpcy5jYW52YXNIZWlnaHQgLyA5LjUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZVNpemUgPSB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQodGhpcy50ZXh0KS53aWR0aCAqIDEuMTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Rm9udFNpemUgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDI1O1xyXG4gICAgICAgICAgICBpZiAodGhpcy50ZXh0Lmxlbmd0aCA+PSAzICYmIHRoaXMub3JpZ3ggPCA1MCAmJiB0aGlzLm9yaWd4IDwgdGhpcy5jYW52YXNXaWR0aCAvIDIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMueCA9IHRoaXMub3JpZ3ggKyAyMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZVNpemUgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDkuNTtcclxuICAgICAgICAgICAgdGhpcy50ZXh0Rm9udFNpemUgPSB0aGlzLmNhbnZhc0hlaWdodCAvIDIwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldEVhc2UgPSAoY3VycmVudFByb2dyZXNzLCBzdGFydCwgZGlzdGFuY2UsIHN0ZXBzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIC1kaXN0YW5jZSAvIDIgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIGN1cnJlbnRQcm9ncmVzcyAvIHN0ZXBzKSAtIDEpICsgc3RhcnQ7XHJcbiAgICB9O1xyXG4gICAgZ2V0WCA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5mcmFtZSA+PSAxMDApIHtcclxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGhhcyBlbmRlZCwgcmV0dXJuIHRoZSBmaW5hbCBzdG9uZSBwb3NpdGlvblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy54O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRFYXNlKHRoaXMuZnJhbWUsIDAsIHRoaXMueCwgMTAwKTtcclxuICAgIH07XHJcbiAgICBnZXRZID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lID49IDEwMCkge1xyXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaGFzIGVuZGVkLCByZXR1cm4gdGhlIGZpbmFsIHN0b25lIHBvc2l0aW9uXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEVhc2UodGhpcy5mcmFtZSwgMCwgdGhpcy55LCAxMDApO1xyXG4gICAgfTtcclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgLy8gQXBwbHkgc2hhZG93IHByb3BlcnRpZXNcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gJ3JlZCc7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNoYWRvd0NvbG9yID0gJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMSknOyAvLyBDb2xvciBvZiB0aGUgc2hhZG93XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNoYWRvd0JsdXIgPSAxMjsgLy8gQmx1ciBsZXZlbCBvZiB0aGUgc2hhZG93XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnNoYWRvd09mZnNldFggPSAwOyAvLyBIb3Jpem9udGFsIHNoYWRvdyBvZmZzZXRcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93T2Zmc2V0WSA9IDA7IC8vIFZlcnRpY2FsIHNoYWRvdyBvZmZzZXRcclxuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1nLCB0aGlzLmdldFgoKSAtIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRYLCB0aGlzLmdldFkoKSAtIHRoaXMuaW1hZ2VDZW50ZXJPZmZzZXRZLCB0aGlzLmltYWdlU2l6ZSwgdGhpcy5pbWFnZVNpemUpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSB0aGlzLnRleHRGb250U2l6ZSArIGBweCAke2ZvbnR9LCBtb25vc3BhY2VgO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC50ZXh0QWxpZ24gPSBcImNlbnRlclwiO1xyXG4gICAgICAgIC8vIFNldCBzaGFkb3cgcHJvcGVydGllc1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zaGFkb3dPZmZzZXRYID0gMDsgLy8gTW92ZSBzaGFkb3cgdG8gdGhlIHJpZ2h0IGJ5IDEwIHBpeGVsc1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zaGFkb3dPZmZzZXRZID0gMDsgLy8gTW92ZSBzaGFkb3cgZG93biBieSAxMCBwaXhlbHNcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93Qmx1ciA9IDA7IC8vIEJsdXIgdGhlIHNoYWRvdyBieSAxNSBwaXhlbHNcclxuICAgICAgICB0aGlzLmNvbnRleHQuc2hhZG93Q29sb3IgPSAndHJhbnNwYXJlbnQgJzsgLy8gU2VtaS10cmFuc3BhcmVudCB3aGl0ZSBzaGFkb3dcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy50ZXh0LCB0aGlzLmdldFgoKSwgdGhpcy5nZXRZKCkpO1xyXG4gICAgICAgIGlmICh0aGlzLmZyYW1lIDwgMTAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZnJhbWUgPSB0aGlzLmZyYW1lICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGhpcy50dXRvcmlhbEluc3RhbmNlICE9IG51bGwgfHwgdGhpcy50dXRvcmlhbEluc3RhbmNlICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnR1dG9yaWFsSW5zdGFuY2UuZHJhdyhkZWx0YVRpbWUsIHRoaXMuaW1nLCB0aGlzLmltYWdlU2l6ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgbGFuZ3VhZ2VGb250TWFwcGluZyB9IGZyb20gXCJAZGF0YS9pMTgtZm9udC1tYXBwaW5nXCI7XHJcbmV4cG9ydCBjbGFzcyBVdGlscyB7XHJcbiAgICBzdGF0aWMgVXJsU3Vic3RyaW5nID0gXCIvZmVlZHRoZW1vbnN0ZXJcIjtcclxuICAgIHN0YXRpYyBnZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHVybCkge1xyXG4gICAgICAgIHJldHVybiBEZWJ1Z2dlci5EZXZlbG9wbWVudExpbmtcclxuICAgICAgICAgICAgPyB1cmwuc2xpY2UoMCwgdXJsLmluZGV4T2YodGhpcy5VcmxTdWJzdHJpbmcpICsgdGhpcy5VcmxTdWJzdHJpbmcubGVuZ3RoKSArXHJcbiAgICAgICAgICAgICAgICBcImRldlwiICtcclxuICAgICAgICAgICAgICAgIHVybC5zbGljZSh1cmwuaW5kZXhPZih0aGlzLlVybFN1YnN0cmluZykgKyB0aGlzLlVybFN1YnN0cmluZy5sZW5ndGgpXHJcbiAgICAgICAgICAgIDogdXJsO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldExhbmd1YWdlU3BlY2lmaWNGb250KGxhbmd1YWdlKSB7XHJcbiAgICAgICAgY29uc3QgbG93ZXJDYXNlTGFuZ3VhZ2UgPSBsYW5ndWFnZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxhbmd1YWdlRm9udE1hcHBpbmcpIHtcclxuICAgICAgICAgICAgaWYgKGtleS50b0xvd2VyQ2FzZSgpID09PSBsb3dlckNhc2VMYW5ndWFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxhbmd1YWdlRm9udE1hcHBpbmdba2V5XTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmxvZyguLi5vb19vbyhgMjcyNDA3NjgxN18yNl80XzI2XzU5XzRgLCBgRm9udCBub3QgZm91bmQgZm9yIGxhbmd1YWdlOiAke2xhbmd1YWdlfWApKTtcclxuICAgICAgICByZXR1cm4gXCJOb3RvU2Fucy1SZWd1bGFyXCI7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0UmFuZG9tTnVtYmVyKG1pbiwgbWF4KSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0RXhjbHVkZWRDb29yZGluYXRlcyhjYW52YXMsIGV4Y2x1c2lvblBlcmNlbnRhZ2UpIHtcclxuICAgICAgICBjb25zdCBleGNsdWRlZEFyZWFXaWR0aCA9IGNhbnZhcy53aWR0aCAqIChleGNsdXNpb25QZXJjZW50YWdlIC8gMTAwKTtcclxuICAgICAgICBjb25zdCBleGNsdWRlZEFyZWFIZWlnaHQgPSBjYW52YXMuaGVpZ2h0ICogKGV4Y2x1c2lvblBlcmNlbnRhZ2UgLyAxMDApO1xyXG4gICAgICAgIHJldHVybiB7IGV4Y2x1ZGVYOiBleGNsdWRlZEFyZWFXaWR0aCwgZXhjbHVkZVk6IGV4Y2x1ZGVkQXJlYUhlaWdodCB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSaXBwbGVFZmZlY3QoY29udGV4dCkge1xyXG4gICAgY29uc3QgY3R4ID0gY29udGV4dDtcclxuICAgIGlmICghY3R4KSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2FudmFzIGNvbnRleHQgaXMgbnVsbFwiKTtcclxuICAgIH1cclxuICAgIGxldCBjZW50ZXJYID0gMDtcclxuICAgIGxldCBjZW50ZXJZID0gMDtcclxuICAgIGNvbnN0IGluaXRpYWxPdXRlclJhZGl1cyA9IDEwO1xyXG4gICAgY29uc3QgaW5pdGlhbElubmVyUmFkaXVzID0gMTA7XHJcbiAgICBjb25zdCBtYXhSYWRpdXMgPSA2MDtcclxuICAgIGxldCBpbmNyZW1lbnQgPSAwLjU7XHJcbiAgICBsZXQgb3V0ZXJSYWRpdXMgPSBpbml0aWFsT3V0ZXJSYWRpdXM7XHJcbiAgICBsZXQgaW5uZXJSYWRpdXMgPSBpbml0aWFsSW5uZXJSYWRpdXM7XHJcbiAgICBmdW5jdGlvbiBkcmF3UmlwcGxlKHgsIHksIHJlc3RhcnQpIHtcclxuICAgICAgICBpZiAocmVzdGFydCkge1xyXG4gICAgICAgICAgICBvdXRlclJhZGl1cyA9IDA7XHJcbiAgICAgICAgICAgIGlubmVyUmFkaXVzID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2VudGVyWCA9IHg7XHJcbiAgICAgICAgY2VudGVyWSA9IHk7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMoY2VudGVyWCwgY2VudGVyWSwgb3V0ZXJSYWRpdXMsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyhjZW50ZXJYLCBjZW50ZXJZLCBpbm5lclJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICBjdHgubGluZVdpZHRoID0gMjtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIG91dGVyUmFkaXVzICs9IGluY3JlbWVudDtcclxuICAgICAgICBpbm5lclJhZGl1cyArPSBpbmNyZW1lbnQ7XHJcbiAgICAgICAgaWYgKG91dGVyUmFkaXVzID49IG1heFJhZGl1cyB8fCBpbm5lclJhZGl1cyA+PSBtYXhSYWRpdXMpIHtcclxuICAgICAgICAgICAgb3V0ZXJSYWRpdXMgPSBpbml0aWFsT3V0ZXJSYWRpdXM7XHJcbiAgICAgICAgICAgIGlubmVyUmFkaXVzID0gaW5pdGlhbElubmVyUmFkaXVzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBkcmF3UmlwcGxlO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBsb2FkSW1hZ2VzKHNvdXJjZXMsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBpbWFnZXMgPSB7fTtcclxuICAgIGxldCBsb2FkZWRJbWFnZXMgPSAwO1xyXG4gICAgY29uc3QgbnVtSW1hZ2VzID0gT2JqZWN0LmtleXMoc291cmNlcykubGVuZ3RoO1xyXG4gICAgZm9yIChsZXQgc3JjIGluIHNvdXJjZXMpIHtcclxuICAgICAgICBpbWFnZXNbc3JjXSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlc1tzcmNdLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKCsrbG9hZGVkSW1hZ2VzID49IG51bUltYWdlcykge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soaW1hZ2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaW1hZ2VzW3NyY10uc3JjID0gc291cmNlc1tzcmNdO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGNyZWF0ZUltZyA9IGFzeW5jIChpbWFnZSkgPT4ge1xyXG4gICAgY29uc3QgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIG5ld0ltYWdlLm9ubG9hZCA9ICgpID0+IHJlc29sdmUobmV3SW1hZ2UpO1xyXG4gICAgICAgIG5ld0ltYWdlLnNyYyA9IGltYWdlO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBzeW5jTG9hZGluZ0ltYWdlcyA9IGFzeW5jIChpbWFnZXMpID0+IHtcclxuICAgIGNvbnN0IGxvYWRJbWdQcm9taXNlcyA9IE9iamVjdC5rZXlzKGltYWdlcykubWFwKGFzeW5jIChhcnJLZXkpID0+IHtcclxuICAgICAgICBjb25zdCBpbWcgPSBhd2FpdCBjcmVhdGVJbWcoaW1hZ2VzW2FycktleV0pO1xyXG4gICAgICAgIHJldHVybiB7IFthcnJLZXldOiBpbWcgfTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzb2x2ZWRJbWFnZSA9IGF3YWl0IFByb21pc2UuYWxsKGxvYWRJbWdQcm9taXNlcyk7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSByZXNvbHZlZEltYWdlLnJlZHVjZSgoYWNjdW11bGF0b3IsIGN1cnJlbnQpID0+IHtcclxuICAgICAgICByZXR1cm4geyAuLi5hY2N1bXVsYXRvciwgLi4uY3VycmVudCB9O1xyXG4gICAgfSwge30pO1xyXG4gICAgcmV0dXJuIGxvYWRlZEltYWdlcztcclxufTtcclxuZXhwb3J0IGZ1bmN0aW9uIGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIGJ1dHRvblgsIGJ1dHRvblksIGJ1dHRvbldpZHRoLCBidXR0b25IZWlnaHQsIGlzQ2lyY3VsYXIgPSBmYWxzZSkge1xyXG4gICAgaWYgKGlzQ2lyY3VsYXIpIHtcclxuICAgICAgICAvLyBDaGVjayBmb3IgY2lyY3VsYXIgYnV0dG9uXHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIChidXR0b25YICsgYnV0dG9uV2lkdGggLyAyKSkgKiogMiArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSAoYnV0dG9uWSArIGJ1dHRvbkhlaWdodCAvIDIpKSAqKiAyKTtcclxuICAgICAgICByZXR1cm4gZGlzdGFuY2UgPCBidXR0b25XaWR0aCAvIDI7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBDaGVjayBmb3IgcmVjdGFuZ3VsYXIgYnV0dG9uXHJcbiAgICAgICAgcmV0dXJuICh4Q2xpY2sgPj0gYnV0dG9uWCAmJlxyXG4gICAgICAgICAgICB4Q2xpY2sgPD0gYnV0dG9uWCArIGJ1dHRvbldpZHRoICYmXHJcbiAgICAgICAgICAgIHlDbGljayA+PSBidXR0b25ZICYmXHJcbiAgICAgICAgICAgIHlDbGljayA8PSBidXR0b25ZICsgYnV0dG9uSGVpZ2h0KTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY29uc3QgaXNEb2N1bWVudFZpc2libGUgPSAoKSA9PiBkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiO1xyXG5leHBvcnQgY29uc3QgdG9nZ2xlRGVidWdNb2RlID0gKHRvZ2dsZUJ0bikgPT4ge1xyXG4gICAgdG9nZ2xlQnRuLmNsYXNzTGlzdC50b2dnbGUoXCJvblwiKTtcclxuICAgIGNvbnN0IGlzT24gPSB0b2dnbGVCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwib25cIik7XHJcbiAgICBEZWJ1Z2dlci5EZWJ1Z01vZGUgPSBpc09uO1xyXG4gICAgdG9nZ2xlQnRuLmlubmVyVGV4dCA9IFwiRGV2XCI7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBoaWRlRWxlbWVudCA9IChpc0hpZGUgPSBmYWxzZSwgZWxlbWVudCkgPT4ge1xyXG4gICAgaWYgKGlzSGlkZSkge1xyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcInNob3dcIik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJzaG93XCIpO1xyXG4gICAgfVxyXG59O1xyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAvKiBjOCBpZ25vcmUgc3RhcnQgKi8gLyogZXNsaW50LWRpc2FibGUgKi8gO1xyXG5mdW5jdGlvbiBvb19jbSgpIHsgdHJ5IHtcclxuICAgIHJldHVybiAoMCwgZXZhbCkoXCJnbG9iYWxUaGlzLl9jb25zb2xlX25pbmphXCIpIHx8ICgwLCBldmFsKShcIi8qIGh0dHBzOi8vZ2l0aHViLmNvbS93YWxsYWJ5anMvY29uc29sZS1uaW5qYSNob3ctZG9lcy1pdC13b3JrICovJ3VzZSBzdHJpY3QnO3ZhciBfMHhmYjRmODk9XzB4M2ZmOTsoZnVuY3Rpb24oXzB4MzNmZmNlLF8weDQ3NzZhYSl7dmFyIF8weDJhYzJkMj1fMHgzZmY5LF8weDZlMDIxMj1fMHgzM2ZmY2UoKTt3aGlsZSghIVtdKXt0cnl7dmFyIF8weDU2NmZlMT0tcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTIyKSkvMHgxKigtcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTZhKSkvMHgyKSstcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTRhKSkvMHgzKy1wYXJzZUludChfMHgyYWMyZDIoMHhjOSkpLzB4NCooLXBhcnNlSW50KF8weDJhYzJkMigweDE1YikpLzB4NSkrLXBhcnNlSW50KF8weDJhYzJkMigweDEyNykpLzB4NistcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTg3KSkvMHg3KihwYXJzZUludChfMHgyYWMyZDIoMHgxMDkpKS8weDgpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMjYpKS8weDkqKC1wYXJzZUludChfMHgyYWMyZDIoMHgxYmEpKS8weGEpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMmEpKS8weGIqKHBhcnNlSW50KF8weDJhYzJkMigweDExYikpLzB4Yyk7aWYoXzB4NTY2ZmUxPT09XzB4NDc3NmFhKWJyZWFrO2Vsc2UgXzB4NmUwMjEyWydwdXNoJ10oXzB4NmUwMjEyWydzaGlmdCddKCkpO31jYXRjaChfMHgyYzZjMWQpe18weDZlMDIxMlsncHVzaCddKF8weDZlMDIxMlsnc2hpZnQnXSgpKTt9fX0oXzB4MjZlZCwweGQ5NDA1KSk7ZnVuY3Rpb24gXzB4MjZlZCgpe3ZhciBfMHgyNTFmZWQ9WydvbmVycm9yJywnX2luTmV4dEVkZ2UnLCdkYXRlJywnY2xvc2UnLCdsb2cnLCdmdW5jTmFtZScsJ2FsbFN0ckxlbmd0aCcsXFxcImM6XFxcXFxcXFxVc2Vyc1xcXFxcXFxcc2hlZXJ3b29kY1xcXFxcXFxcLnZzY29kZVxcXFxcXFxcZXh0ZW5zaW9uc1xcXFxcXFxcd2FsbGFieWpzLmNvbnNvbGUtbmluamEtMS4wLjM2MFxcXFxcXFxcbm9kZV9tb2R1bGVzXFxcIiwnW29iamVjdFxcXFx4MjBEYXRlXScsJ251bWJlcicsJ2JpbmQnLCdnYXRld2F5LmRvY2tlci5pbnRlcm5hbCcsJ2Jvb2xlYW4nLCdfYWRkTG9hZE5vZGUnLCdwcm90b3R5cGUnLCdfYWRkUHJvcGVydHknLCdvbmNsb3NlJywnX3F1b3RlZFJlZ0V4cCcsJ19yZWdFeHBUb1N0cmluZycsJ3NwbGl0JywnZG9ja2VyaXplZEFwcCcsJ2VudW1lcmFibGUnLCdNYXAnLCd1cmwnLCdfU3ltYm9sJywndmFsdWVPZicsJ25vRnVuY3Rpb25zJywnX2NvbnNvbGVfbmluamFfc2Vzc2lvbicsJ3N0cmluZ2lmeScsJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZScsJ3RvdGFsU3RyTGVuZ3RoJywnbGVuZ3RoJywnb25tZXNzYWdlJywnbWF0Y2gnLCdkZWZhdWx0JywnX2Rpc3Bvc2VXZWJzb2NrZXQnLCdzb3J0UHJvcHMnLCdfY29ubmVjdEF0dGVtcHRDb3VudCcsJycsJ3VucmVmJywnc2VyaWFsaXplJywnX3NldE5vZGVQZXJtaXNzaW9ucycsJ3Vua25vd24nLCd0eXBlJywnX2lzTmVnYXRpdmVaZXJvJywnc3RyaW5nJywndG9VcHBlckNhc2UnLCdwZXJmb3JtYW5jZScsJ2V4cElkJywnZ2V0V2ViU29ja2V0Q2xhc3MnLCdnZXQnLCdzdHJMZW5ndGgnLCcxNmJ2bkpNZicsJ2ZvckVhY2gnLCd3cy9pbmRleC5qcycsJzEyNy4wLjAuMScsJ2F1dG9FeHBhbmRQcmV2aW91c09iamVjdHMnLCdjb25zdHJ1Y3RvcicsJ19oYXNTeW1ib2xQcm9wZXJ0eU9uSXRzUGF0aCcsJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50JywnX2NsZWFuTm9kZScsJ19zb2NrZXQnLCdDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBzZW5kXFxcXHgyMGxvZ3MsXFxcXHgyMHJlc3RhcnRpbmdcXFxceDIwdGhlXFxcXHgyMHByb2Nlc3NcXFxceDIwbWF5XFxcXHgyMGhlbHA7XFxcXHgyMGFsc29cXFxceDIwc2VlXFxcXHgyMCcsJ19zb3J0UHJvcHMnLCdhcmdzJywnY2FwcGVkUHJvcHMnLCdmYWlsZWRcXFxceDIwdG9cXFxceDIwY29ubmVjdFxcXFx4MjB0b1xcXFx4MjBob3N0OlxcXFx4MjAnLCdjb3VudCcsJ3NlbmQnLCdzZWVcXFxceDIwaHR0cHM6Ly90aW55dXJsLmNvbS8ydnQ4anh6d1xcXFx4MjBmb3JcXFxceDIwbW9yZVxcXFx4MjBpbmZvLicsJzIwNjcyNzZEVm96VFonLCdjYWxsJywndGltZVN0YW1wJywnbm93Jywnc3RhY2tUcmFjZUxpbWl0JywnZnVuY3Rpb24nLCdfaXNBcnJheScsJzdRYnFyYXcnLCdldmVudFJlY2VpdmVkQ2FsbGJhY2snLCduZWdhdGl2ZVplcm8nLCdfaGFzTWFwT25JdHNQYXRoJywnMTMxNEpTQ3JmUCcsJzIwOTU2OTJ1YkxMQkonLCdoaXRzJywnZ2V0T3duUHJvcGVydHlOYW1lcycsJzc3TmZUVXVLJywnX3NldE5vZGVJZCcsJ19pbkJyb3dzZXInLCdfd3MnLCdfZ2V0T3duUHJvcGVydHlTeW1ib2xzJywnRXJyb3InLCdfZGF0ZVRvU3RyaW5nJywnTnVtYmVyJywnZWRnZScsJ19jYXBJZlN0cmluZycsJ19hbGxvd2VkVG9Db25uZWN0T25TZW5kJywnbWVzc2FnZScsJ19rZXlTdHJSZWdFeHAnLCdTdHJpbmcnLCdleHByZXNzaW9uc1RvRXZhbHVhdGUnLCduZXh0LmpzJywnMScsJ3BhdGhUb0ZpbGVVUkwnLCdfdHlwZScsJ19pc1ByaW1pdGl2ZVdyYXBwZXJUeXBlJywnbWFwJywnX1dlYlNvY2tldENsYXNzJywnX2lzVW5kZWZpbmVkJywnX251bWJlclJlZ0V4cCcsJ2NhcHBlZEVsZW1lbnRzJywnb2JqZWN0JywnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QsXFxcXHgyMHNlZVxcXFx4MjAnLCdfV2ViU29ja2V0JywnYXV0b0V4cGFuZExpbWl0JywnW29iamVjdFxcXFx4MjBTZXRdJywnZW5kc1dpdGgnLCdyZW1peCcsJzE1OTIyNTN5TVB5dXknLCdwYXRoJywnY29uY2F0Jywnc29tZScsJ3RvU3RyaW5nJywnX2FkZGl0aW9uYWxNZXRhZGF0YScsJ19jb25zb2xlX25pbmphJywnX2dldE93blByb3BlcnR5TmFtZXMnLCdfb2JqZWN0VG9TdHJpbmcnLCdodHRwczovL3Rpbnl1cmwuY29tLzM3eDhiNzl0JywnQm9vbGVhbicsJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCcsJ2NvdmVyYWdlJywnd3M6Ly8nLCdyZWxvYWQnLCdkZXB0aCcsJ2dsb2JhbCcsJzQ2OTgzNW5XRnZvZycsJ2ZhaWxlZFxcXFx4MjB0b1xcXFx4MjBmaW5kXFxcXHgyMGFuZFxcXFx4MjBsb2FkXFxcXHgyMFdlYlNvY2tldCcsJ19IVE1MQWxsQ29sbGVjdGlvbicsJ19pc1NldCcsJ19hZGRGdW5jdGlvbnNOb2RlJywnbG9nZ2VyXFxcXHgyMHdlYnNvY2tldFxcXFx4MjBlcnJvcicsJ19ibGFja2xpc3RlZFByb3BlcnR5JywncG9wJywnQ29uc29sZVxcXFx4MjBOaW5qYVxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwc2VuZFxcXFx4MjBsb2dzLFxcXFx4MjByZWZyZXNoaW5nXFxcXHgyMHRoZVxcXFx4MjBwYWdlXFxcXHgyMG1heVxcXFx4MjBoZWxwO1xcXFx4MjBhbHNvXFxcXHgyMHNlZVxcXFx4MjAnLCdfaXNNYXAnLCdocnRpbWUnLCdyZXBsYWNlJywnX3VuZGVmaW5lZCcsJ190cmVlTm9kZVByb3BlcnRpZXNCZWZvcmVGdWxsVmFsdWUnLCdlbnYnLCc0ODI5NjhrQVFBaEYnLCdyb290X2V4cCcsJ19jb25uZWN0ZWQnLCdqb2luJywnaW5jbHVkZXMnLCdTeW1ib2wnLCdwcm9jZXNzJywncHVzaCcsJ2lzQXJyYXknLCdfaXNQcmltaXRpdmVUeXBlJywnY29uc29sZScsJ3Bvc2l0aXZlSW5maW5pdHknLCdfcF9sZW5ndGgnLCdfcmVjb25uZWN0VGltZW91dCcsJ3Rlc3QnLCdwZXJmX2hvb2tzJywnX3Byb2Nlc3NUcmVlTm9kZVJlc3VsdCcsJ2hvc3QnLCdlcnJvcicsJ3Byb3BzJywnc29ydCcsJ2JpZ2ludCcsJ1tvYmplY3RcXFxceDIwQXJyYXldJywnZWxhcHNlZCcsJ25vZGUnLCdjYXBwZWQnLCdyZWR1Y2VMaW1pdHMnLCdORUdBVElWRV9JTkZJTklUWScsJ2NyZWF0ZScsJzg0NjAxM3ViT0RSbicsJ2xldmVsJywnb3JpZ2luJywnYXN0cm8nLCdzdWJzdHInLCdfbmluamFJZ25vcmVOZXh0RXJyb3InLCdfYXR0ZW1wdFRvUmVjb25uZWN0U2hvcnRseScsJ19zZXROb2RlRXhwcmVzc2lvblBhdGgnLCdfd2ViU29ja2V0RXJyb3JEb2NzTGluaycsJ2dldE93blByb3BlcnR5U3ltYm9scycsJ29ub3BlbicsJ1BPU0lUSVZFX0lORklOSVRZJywncG9ydCcsJ0J1ZmZlcicsJ19zZW5kRXJyb3JNZXNzYWdlJywnX3NldE5vZGVFeHBhbmRhYmxlU3RhdGUnLCcnLCdyZXNvbHZlR2V0dGVycycsJ3RvTG93ZXJDYXNlJywncGFyc2UnLCdTZXQnLCdfY29ubmVjdGluZycsJ2NhdGNoJywnY3VycmVudCcsJ19nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCd2YWx1ZScsJ3RpbWUnLCdhdXRvRXhwYW5kJywnY2hhckF0JywnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZScsW1xcXCJsb2NhbGhvc3RcXFwiLFxcXCIxMjcuMC4wLjFcXFwiLFxcXCJleGFtcGxlLmN5cHJlc3MuaW9cXFwiLFxcXCJDRUItTEFQVE9QLTAwMDZcXFwiLFxcXCIxOTIuMTY4LjEuNzlcXFwiXSwnYXJyYXknLCdob3N0bmFtZScsJ2luZGV4Jywnd2FybicsJ3RyYWNlJywnLi4uJywndW5zaGlmdCcsJ19jb25uZWN0VG9Ib3N0Tm93JywnW29iamVjdFxcXFx4MjBNYXBdJywnc3RhY2snLCdcXFxceDIwc2VydmVyJywnZGF0YScsJ2dldFByb3RvdHlwZU9mJywnbnVsbCcsJ19wcm9wZXJ0eScsJ3N0YXJ0c1dpdGgnLCdhdXRvRXhwYW5kTWF4RGVwdGgnLCdmcm9tQ2hhckNvZGUnLCdyb290RXhwcmVzc2lvbicsJzg1MjkwRVhxVFlIJywnW29iamVjdFxcXFx4MjBCaWdJbnRdJywnX2FsbG93ZWRUb1NlbmQnLCdfc2V0Tm9kZUxhYmVsJywncm9vdF9leHBfaWQnLCdcXFxceDIwYnJvd3NlcicsJ0hUTUxBbGxDb2xsZWN0aW9uJywnbmFtZScsJ2Rpc2FibGVkVHJhY2UnLCdyZWFkeVN0YXRlJywnX3Byb3BlcnR5TmFtZScsJ19wXycsJ3N5bWJvbCcsJ3VuZGVmaW5lZCcsJ2VsZW1lbnRzJywnMTJpQ25SbGwnLCdfc2V0Tm9kZVF1ZXJ5UGF0aCcsJ3RoZW4nLCclY1xcXFx4MjBDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGV4dGVuc2lvblxcXFx4MjBpc1xcXFx4MjBjb25uZWN0ZWRcXFxceDIwdG9cXFxceDIwJywnV2ViU29ja2V0JywncGFyZW50JywnTkVYVF9SVU5USU1FJywnX2FkZE9iamVjdFByb3BlcnR5Jywnbm9kZU1vZHVsZXMnLCd2ZXJzaW9ucycsJzEuMC4wJywnaW5kZXhPZiddO18weDI2ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4MjUxZmVkO307cmV0dXJuIF8weDI2ZWQoKTt9dmFyIEs9T2JqZWN0W18weGZiNGY4OSgweDE4NildLFE9T2JqZWN0WydkZWZpbmVQcm9wZXJ0eSddLEc9T2JqZWN0W18weGZiNGY4OSgweDFhNCldLGVlPU9iamVjdFtfMHhmYjRmODkoMHgxMjkpXSx0ZT1PYmplY3RbXzB4ZmI0Zjg5KDB4MWIzKV0sbmU9T2JqZWN0W18weGZiNGY4OSgweGUzKV1bJ2hhc093blByb3BlcnR5J10scmU9KF8weDU4YmM3YyxfMHg0ZGRkMGQsXzB4NDU2NjMwLF8weDNmMGJhYSk9Pnt2YXIgXzB4NGVhMDE4PV8weGZiNGY4OTtpZihfMHg0ZGRkMGQmJnR5cGVvZiBfMHg0ZGRkMGQ9PV8weDRlYTAxOCgweDE0Myl8fHR5cGVvZiBfMHg0ZGRkMGQ9PV8weDRlYTAxOCgweDEyMCkpe2ZvcihsZXQgXzB4NGQ1MzQ5IG9mIGVlKF8weDRkZGQwZCkpIW5lWydjYWxsJ10oXzB4NThiYzdjLF8weDRkNTM0OSkmJl8weDRkNTM0OSE9PV8weDQ1NjYzMCYmUShfMHg1OGJjN2MsXzB4NGQ1MzQ5LHsnZ2V0JzooKT0+XzB4NGRkZDBkW18weDRkNTM0OV0sJ2VudW1lcmFibGUnOiEoXzB4M2YwYmFhPUcoXzB4NGRkZDBkLF8weDRkNTM0OSkpfHxfMHgzZjBiYWFbXzB4NGVhMDE4KDB4ZWEpXX0pO31yZXR1cm4gXzB4NThiYzdjO30sVj0oXzB4MWNmYzA4LF8weDI4MTkzMCxfMHgxOTc0N2IpPT4oXzB4MTk3NDdiPV8weDFjZmMwOCE9bnVsbD9LKHRlKF8weDFjZmMwOCkpOnt9LHJlKF8weDI4MTkzMHx8IV8weDFjZmMwOHx8IV8weDFjZmMwOFsnX19lcycrJ01vZHVsZSddP1EoXzB4MTk3NDdiLF8weGZiNGY4OSgweGY3KSx7J3ZhbHVlJzpfMHgxY2ZjMDgsJ2VudW1lcmFibGUnOiEweDB9KTpfMHgxOTc0N2IsXzB4MWNmYzA4KSksWj1jbGFzc3tjb25zdHJ1Y3RvcihfMHgyN2RhM2QsXzB4MzNjODNmLF8weDUxNDIyZCxfMHgxYmQyN2YsXzB4MWYxNjI4LF8weDJjMjdmOSl7dmFyIF8weDMwYmFlMD1fMHhmYjRmODksXzB4ZGIyYWVlLF8weDIxNWI2YixfMHgzMzMwYTMsXzB4NTQxN2I1O3RoaXNbJ2dsb2JhbCddPV8weDI3ZGEzZCx0aGlzW18weDMwYmFlMCgweDE3YildPV8weDMzYzgzZix0aGlzW18weDMwYmFlMCgweDE5MyldPV8weDUxNDIyZCx0aGlzW18weDMwYmFlMCgweGQxKV09XzB4MWJkMjdmLHRoaXNbJ2RvY2tlcml6ZWRBcHAnXT1fMHgxZjE2MjgsdGhpc1tfMHgzMGJhZTAoMHgxMjMpXT1fMHgyYzI3ZjksdGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgwLHRoaXNbXzB4MzBiYWUwKDB4MTM0KV09ITB4MCx0aGlzW18weDMwYmFlMCgweDE2YyldPSEweDEsdGhpc1tfMHgzMGJhZTAoMHgxOWMpXT0hMHgxLHRoaXNbXzB4MzBiYWUwKDB4ZDYpXT0oKF8weDIxNWI2Yj0oXzB4ZGIyYWVlPV8weDI3ZGEzZFtfMHgzMGJhZTAoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4ZGIyYWVlW18weDMwYmFlMCgweDE2OSldKT09bnVsbD92b2lkIDB4MDpfMHgyMTViNmJbXzB4MzBiYWUwKDB4Y2YpXSk9PT1fMHgzMGJhZTAoMHgxMzIpLHRoaXNbXzB4MzBiYWUwKDB4MTJjKV09ISgoXzB4NTQxN2I1PShfMHgzMzMwYTM9dGhpc1tfMHgzMGJhZTAoMHgxNWEpXVsncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgzMzMwYTNbXzB4MzBiYWUwKDB4ZDIpXSkhPW51bGwmJl8weDU0MTdiNVsnbm9kZSddKSYmIXRoaXNbJ19pbk5leHRFZGdlJ10sdGhpc1snX1dlYlNvY2tldENsYXNzJ109bnVsbCx0aGlzW18weDMwYmFlMCgweGZhKV09MHgwLHRoaXNbJ19tYXhDb25uZWN0QXR0ZW1wdENvdW50J109MHgxNCx0aGlzW18weDMwYmFlMCgweDE4ZildPV8weDMwYmFlMCgweDE1MyksdGhpc1tfMHgzMGJhZTAoMHgxOTUpXT0odGhpc1tfMHgzMGJhZTAoMHgxMmMpXT9fMHgzMGJhZTAoMHgxNjMpOl8weDMwYmFlMCgweDExMykpK3RoaXNbJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJ107fWFzeW5jWydnZXRXZWJTb2NrZXRDbGFzcyddKCl7dmFyIF8weDVhZmE5Yj1fMHhmYjRmODksXzB4MmQ5Zjk2LF8weDU2NTA1ODtpZih0aGlzW18weDVhZmE5YigweDEzZildKXJldHVybiB0aGlzWydfV2ViU29ja2V0Q2xhc3MnXTtsZXQgXzB4MmUxMmMzO2lmKHRoaXNbXzB4NWFmYTliKDB4MTJjKV18fHRoaXNbXzB4NWFmYTliKDB4ZDYpXSlfMHgyZTEyYzM9dGhpc1tfMHg1YWZhOWIoMHgxNWEpXVtfMHg1YWZhOWIoMHhjZCldO2Vsc2V7aWYoKF8weDJkOWY5Nj10aGlzW18weDVhZmE5YigweDE1YSldWydwcm9jZXNzJ10pIT1udWxsJiZfMHgyZDlmOTZbXzB4NWFmYTliKDB4MTQ1KV0pXzB4MmUxMmMzPShfMHg1NjUwNTg9dGhpc1snZ2xvYmFsJ11bXzB4NWFmYTliKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDU2NTA1OFtfMHg1YWZhOWIoMHgxNDUpXTtlbHNlIHRyeXtsZXQgXzB4NTVhOGE3PWF3YWl0IGltcG9ydChfMHg1YWZhOWIoMHgxNGIpKTtfMHgyZTEyYzM9KGF3YWl0IGltcG9ydCgoYXdhaXQgaW1wb3J0KF8weDVhZmE5YigweGVjKSkpW18weDVhZmE5YigweDEzYildKF8weDU1YThhN1tfMHg1YWZhOWIoMHgxNmQpXSh0aGlzW18weDVhZmE5YigweGQxKV0sXzB4NWFmYTliKDB4MTBiKSkpW18weDVhZmE5YigweDE0ZSldKCkpKVsnZGVmYXVsdCddO31jYXRjaHt0cnl7XzB4MmUxMmMzPXJlcXVpcmUocmVxdWlyZShfMHg1YWZhOWIoMHgxNGIpKVtfMHg1YWZhOWIoMHgxNmQpXSh0aGlzW18weDVhZmE5YigweGQxKV0sJ3dzJykpO31jYXRjaHt0aHJvdyBuZXcgRXJyb3IoXzB4NWFmYTliKDB4MTVjKSk7fX19cmV0dXJuIHRoaXNbXzB4NWFmYTliKDB4MTNmKV09XzB4MmUxMmMzLF8weDJlMTJjMzt9W18weGZiNGY4OSgweDFhZSldKCl7dmFyIF8weDNjYWQ2MD1fMHhmYjRmODk7dGhpc1tfMHgzY2FkNjAoMHgxOWMpXXx8dGhpc1tfMHgzY2FkNjAoMHgxNmMpXXx8dGhpc1snX2Nvbm5lY3RBdHRlbXB0Q291bnQnXT49dGhpc1snX21heENvbm5lY3RBdHRlbXB0Q291bnQnXXx8KHRoaXNbXzB4M2NhZDYwKDB4MTM0KV09ITB4MSx0aGlzW18weDNjYWQ2MCgweDE5YyldPSEweDAsdGhpc1tfMHgzY2FkNjAoMHhmYSldKyssdGhpc1tfMHgzY2FkNjAoMHgxMmQpXT1uZXcgUHJvbWlzZSgoXzB4MzQzYWJkLF8weGJhMDg4Yik9Pnt2YXIgXzB4MTEzMTFhPV8weDNjYWQ2MDt0aGlzW18weDExMzExYSgweDEwNildKClbXzB4MTEzMTFhKDB4Y2IpXShfMHhiMDk0NTA9Pnt2YXIgXzB4NDNmYWRhPV8weDExMzExYTtsZXQgXzB4Mzg3NzQ5PW5ldyBfMHhiMDk0NTAoXzB4NDNmYWRhKDB4MTU3KSsoIXRoaXNbXzB4NDNmYWRhKDB4MTJjKV0mJnRoaXNbXzB4NDNmYWRhKDB4ZTkpXT9fMHg0M2ZhZGEoMHhlMCk6dGhpc1tfMHg0M2ZhZGEoMHgxN2IpXSkrJzonK3RoaXNbXzB4NDNmYWRhKDB4MTkzKV0pO18weDM4Nzc0OVsnb25lcnJvciddPSgpPT57dmFyIF8weDQ1M2NiNz1fMHg0M2ZhZGE7dGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgxLHRoaXNbXzB4NDUzY2I3KDB4ZjgpXShfMHgzODc3NDkpLHRoaXNbXzB4NDUzY2I3KDB4MThkKV0oKSxfMHhiYTA4OGIobmV3IEVycm9yKF8weDQ1M2NiNygweDE2MCkpKTt9LF8weDM4Nzc0OVtfMHg0M2ZhZGEoMHgxOTEpXT0oKT0+e3ZhciBfMHhkYWY0N2M9XzB4NDNmYWRhO3RoaXNbXzB4ZGFmNDdjKDB4MTJjKV18fF8weDM4Nzc0OVsnX3NvY2tldCddJiZfMHgzODc3NDlbXzB4ZGFmNDdjKDB4MTEyKV1bXzB4ZGFmNDdjKDB4ZmMpXSYmXzB4Mzg3NzQ5W18weGRhZjQ3YygweDExMildWyd1bnJlZiddKCksXzB4MzQzYWJkKF8weDM4Nzc0OSk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4ZTUpXT0oKT0+e3ZhciBfMHhjNTY3NDg9XzB4NDNmYWRhO3RoaXNbXzB4YzU2NzQ4KDB4MTM0KV09ITB4MCx0aGlzW18weGM1Njc0OCgweGY4KV0oXzB4Mzg3NzQ5KSx0aGlzW18weGM1Njc0OCgweDE4ZCldKCk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4ZjUpXT1fMHg0N2VkM2E9Pnt2YXIgXzB4MjhmNTgwPV8weDQzZmFkYTt0cnl7aWYoIShfMHg0N2VkM2EhPW51bGwmJl8weDQ3ZWQzYVtfMHgyOGY1ODAoMHgxYjIpXSl8fCF0aGlzW18weDI4ZjU4MCgweDEyMyldKXJldHVybjtsZXQgXzB4NDc5ZWU1PUpTT05bXzB4MjhmNTgwKDB4MTlhKV0oXzB4NDdlZDNhWydkYXRhJ10pO3RoaXNbXzB4MjhmNTgwKDB4MTIzKV0oXzB4NDc5ZWU1WydtZXRob2QnXSxfMHg0NzllZTVbXzB4MjhmNTgwKDB4MTE1KV0sdGhpc1tfMHgyOGY1ODAoMHgxNWEpXSx0aGlzW18weDI4ZjU4MCgweDEyYyldKTt9Y2F0Y2h7fX07fSlbXzB4MTEzMTFhKDB4Y2IpXShfMHgxMzUyMD0+KHRoaXNbJ19jb25uZWN0ZWQnXT0hMHgwLHRoaXNbJ19jb25uZWN0aW5nJ109ITB4MSx0aGlzW18weDExMzExYSgweDEzNCldPSEweDEsdGhpc1tfMHgxMTMxMWEoMHhiYyldPSEweDAsdGhpc1tfMHgxMTMxMWEoMHhmYSldPTB4MCxfMHgxMzUyMCkpW18weDExMzExYSgweDE5ZCldKF8weDE4ZjFhOT0+KHRoaXNbXzB4MTEzMTFhKDB4MTZjKV09ITB4MSx0aGlzW18weDExMzExYSgweDE5YyldPSEweDEsY29uc29sZVtfMHgxMTMxMWEoMHgxYWEpXShfMHgxMTMxMWEoMHgxNDQpK3RoaXNbJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJ10pLF8weGJhMDg4YihuZXcgRXJyb3IoXzB4MTEzMTFhKDB4MTE3KSsoXzB4MThmMWE5JiZfMHgxOGYxYTlbJ21lc3NhZ2UnXSkpKSkpO30pKTt9WydfZGlzcG9zZVdlYnNvY2tldCddKF8weDM0NzI1OSl7dmFyIF8weDU1MTg4ZD1fMHhmYjRmODk7dGhpc1tfMHg1NTE4OGQoMHgxNmMpXT0hMHgxLHRoaXNbXzB4NTUxODhkKDB4MTljKV09ITB4MTt0cnl7XzB4MzQ3MjU5WydvbmNsb3NlJ109bnVsbCxfMHgzNDcyNTlbXzB4NTUxODhkKDB4ZDUpXT1udWxsLF8weDM0NzI1OVtfMHg1NTE4OGQoMHgxOTEpXT1udWxsO31jYXRjaHt9dHJ5e18weDM0NzI1OVtfMHg1NTE4OGQoMHhjMyldPDB4MiYmXzB4MzQ3MjU5W18weDU1MTg4ZCgweGQ4KV0oKTt9Y2F0Y2h7fX1bJ19hdHRlbXB0VG9SZWNvbm5lY3RTaG9ydGx5J10oKXt2YXIgXzB4MzY2NjI3PV8weGZiNGY4OTtjbGVhclRpbWVvdXQodGhpc1tfMHgzNjY2MjcoMHgxNzcpXSksISh0aGlzWydfY29ubmVjdEF0dGVtcHRDb3VudCddPj10aGlzWydfbWF4Q29ubmVjdEF0dGVtcHRDb3VudCddKSYmKHRoaXNbXzB4MzY2NjI3KDB4MTc3KV09c2V0VGltZW91dCgoKT0+e3ZhciBfMHg0MTFiN2I9XzB4MzY2NjI3LF8weDVlOGYzNDt0aGlzW18weDQxMWI3YigweDE2YyldfHx0aGlzW18weDQxMWI3YigweDE5YyldfHwodGhpc1tfMHg0MTFiN2IoMHgxYWUpXSgpLChfMHg1ZThmMzQ9dGhpc1tfMHg0MTFiN2IoMHgxMmQpXSk9PW51bGx8fF8weDVlOGYzNFtfMHg0MTFiN2IoMHgxOWQpXSgoKT0+dGhpc1tfMHg0MTFiN2IoMHgxOGQpXSgpKSk7fSwweDFmNCksdGhpc1snX3JlY29ubmVjdFRpbWVvdXQnXVtfMHgzNjY2MjcoMHhmYyldJiZ0aGlzW18weDM2NjYyNygweDE3NyldW18weDM2NjYyNygweGZjKV0oKSk7fWFzeW5jW18weGZiNGY4OSgweDExOSldKF8weDIzZjUxZSl7dmFyIF8weDMzNzk1OT1fMHhmYjRmODk7dHJ5e2lmKCF0aGlzWydfYWxsb3dlZFRvU2VuZCddKXJldHVybjt0aGlzW18weDMzNzk1OSgweDEzNCldJiZ0aGlzW18weDMzNzk1OSgweDFhZSldKCksKGF3YWl0IHRoaXNbJ193cyddKVsnc2VuZCddKEpTT05bXzB4MzM3OTU5KDB4ZjEpXShfMHgyM2Y1MWUpKTt9Y2F0Y2goXzB4NWIwZmJjKXtjb25zb2xlWyd3YXJuJ10odGhpc1tfMHgzMzc5NTkoMHgxOTUpXSsnOlxcXFx4MjAnKyhfMHg1YjBmYmMmJl8weDViMGZiY1tfMHgzMzc5NTkoMHgxMzUpXSkpLHRoaXNbXzB4MzM3OTU5KDB4YmMpXT0hMHgxLHRoaXNbXzB4MzM3OTU5KDB4MThkKV0oKTt9fX07ZnVuY3Rpb24gcShfMHgyNGRhZWIsXzB4YjZmNTE5LF8weDU1MmE4MyxfMHg0MTcyY2YsXzB4NzZkYmI3LF8weDUwNjg0MyxfMHhiZjc1YWMsXzB4M2FjMmM0PWllKXt2YXIgXzB4NWI5ZDY0PV8weGZiNGY4OTtsZXQgXzB4NGI5MzczPV8weDU1MmE4M1tfMHg1YjlkNjQoMHhlOCldKCcsJylbXzB4NWI5ZDY0KDB4MTNlKV0oXzB4NWRiZmU0PT57dmFyIF8weDY2YzcxYj1fMHg1YjlkNjQsXzB4OWUxNjY4LF8weDVhMzdkNSxfMHgxM2EwY2MsXzB4M2UzY2M2O3RyeXtpZighXzB4MjRkYWViW18weDY2YzcxYigweGYwKV0pe2xldCBfMHgyODBmNzA9KChfMHg1YTM3ZDU9KF8weDllMTY2OD1fMHgyNGRhZWJbXzB4NjZjNzFiKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDllMTY2OFsndmVyc2lvbnMnXSk9PW51bGw/dm9pZCAweDA6XzB4NWEzN2Q1W18weDY2YzcxYigweDE4MildKXx8KChfMHgzZTNjYzY9KF8weDEzYTBjYz1fMHgyNGRhZWJbXzB4NjZjNzFiKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDEzYTBjY1tfMHg2NmM3MWIoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4M2UzY2M2W18weDY2YzcxYigweGNmKV0pPT09XzB4NjZjNzFiKDB4MTMyKTsoXzB4NzZkYmI3PT09J25leHQuanMnfHxfMHg3NmRiYjc9PT1fMHg2NmM3MWIoMHgxNDkpfHxfMHg3NmRiYjc9PT1fMHg2NmM3MWIoMHgxOGEpfHxfMHg3NmRiYjc9PT0nYW5ndWxhcicpJiYoXzB4NzZkYmI3Kz1fMHgyODBmNzA/XzB4NjZjNzFiKDB4MWIxKTpfMHg2NmM3MWIoMHhiZikpLF8weDI0ZGFlYlsnX2NvbnNvbGVfbmluamFfc2Vzc2lvbiddPXsnaWQnOituZXcgRGF0ZSgpLCd0b29sJzpfMHg3NmRiYjd9LF8weGJmNzVhYyYmXzB4NzZkYmI3JiYhXzB4MjgwZjcwJiZjb25zb2xlW18weDY2YzcxYigweGQ5KV0oXzB4NjZjNzFiKDB4Y2MpKyhfMHg3NmRiYjdbXzB4NjZjNzFiKDB4MWEzKV0oMHgwKVtfMHg2NmM3MWIoMHgxMDMpXSgpK18weDc2ZGJiN1tfMHg2NmM3MWIoMHgxOGIpXSgweDEpKSsnLCcsJ2JhY2tncm91bmQ6XFxcXHgyMHJnYigzMCwzMCwzMCk7XFxcXHgyMGNvbG9yOlxcXFx4MjByZ2IoMjU1LDIxMyw5MiknLF8weDY2YzcxYigweDExYSkpO31sZXQgXzB4MTRjNjAwPW5ldyBaKF8weDI0ZGFlYixfMHhiNmY1MTksXzB4NWRiZmU0LF8weDQxNzJjZixfMHg1MDY4NDMsXzB4M2FjMmM0KTtyZXR1cm4gXzB4MTRjNjAwW18weDY2YzcxYigweDExOSldW18weDY2YzcxYigweGRmKV0oXzB4MTRjNjAwKTt9Y2F0Y2goXzB4OWVmOGRiKXtyZXR1cm4gY29uc29sZVtfMHg2NmM3MWIoMHgxYWEpXSgnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QnLF8weDllZjhkYiYmXzB4OWVmOGRiWydtZXNzYWdlJ10pLCgpPT57fTt9fSk7cmV0dXJuIF8weDQxODEyMD0+XzB4NGI5MzczWydmb3JFYWNoJ10oXzB4MjhjOWE1PT5fMHgyOGM5YTUoXzB4NDE4MTIwKSk7fWZ1bmN0aW9uIF8weDNmZjkoXzB4ZTY3ODM4LF8weDZkMTQ4Nil7dmFyIF8weDI2ZWQ2OD1fMHgyNmVkKCk7cmV0dXJuIF8weDNmZjk9ZnVuY3Rpb24oXzB4M2ZmOTIwLF8weDQ4OTMyOSl7XzB4M2ZmOTIwPV8weDNmZjkyMC0weGJiO3ZhciBfMHgzOTk1Y2M9XzB4MjZlZDY4W18weDNmZjkyMF07cmV0dXJuIF8weDM5OTVjYzt9LF8weDNmZjkoXzB4ZTY3ODM4LF8weDZkMTQ4Nik7fWZ1bmN0aW9uIGllKF8weDU3NzI3ZixfMHg0YjM3YzcsXzB4MTRkYWJkLF8weDViOTBhOSl7dmFyIF8weDQ0MDg5OT1fMHhmYjRmODk7XzB4NWI5MGE5JiZfMHg1NzcyN2Y9PT1fMHg0NDA4OTkoMHgxNTgpJiZfMHgxNGRhYmRbJ2xvY2F0aW9uJ11bJ3JlbG9hZCddKCk7fWZ1bmN0aW9uIEIoXzB4MjZjOWFjKXt2YXIgXzB4NDdmMDg1PV8weGZiNGY4OSxfMHgzZWNiN2EsXzB4NDdiNTE2O2xldCBfMHgyMjA4MDY9ZnVuY3Rpb24oXzB4M2EwMjBlLF8weDUzYzY5YSl7cmV0dXJuIF8weDUzYzY5YS1fMHgzYTAyMGU7fSxfMHgyMTA4YzI7aWYoXzB4MjZjOWFjW18weDQ3ZjA4NSgweDEwNCldKV8weDIxMDhjMj1mdW5jdGlvbigpe3ZhciBfMHgzMzc0MjM9XzB4NDdmMDg1O3JldHVybiBfMHgyNmM5YWNbXzB4MzM3NDIzKDB4MTA0KV1bXzB4MzM3NDIzKDB4MTFlKV0oKTt9O2Vsc2V7aWYoXzB4MjZjOWFjW18weDQ3ZjA4NSgweDE3MCldJiZfMHgyNmM5YWNbXzB4NDdmMDg1KDB4MTcwKV1bXzB4NDdmMDg1KDB4MTY1KV0mJigoXzB4NDdiNTE2PShfMHgzZWNiN2E9XzB4MjZjOWFjWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDNlY2I3YVtfMHg0N2YwODUoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4NDdiNTE2WydORVhUX1JVTlRJTUUnXSkhPT0nZWRnZScpXzB4MjEwOGMyPWZ1bmN0aW9uKCl7cmV0dXJuIF8weDI2YzlhY1sncHJvY2VzcyddWydocnRpbWUnXSgpO30sXzB4MjIwODA2PWZ1bmN0aW9uKF8weDM0MWZiMyxfMHgyYzY2MTgpe3JldHVybiAweDNlOCooXzB4MmM2NjE4WzB4MF0tXzB4MzQxZmIzWzB4MF0pKyhfMHgyYzY2MThbMHgxXS1fMHgzNDFmYjNbMHgxXSkvMHhmNDI0MDt9O2Vsc2UgdHJ5e2xldCB7cGVyZm9ybWFuY2U6XzB4NDE2YTUyfT1yZXF1aXJlKF8weDQ3ZjA4NSgweDE3OSkpO18weDIxMDhjMj1mdW5jdGlvbigpe3ZhciBfMHg0ODE1MGY9XzB4NDdmMDg1O3JldHVybiBfMHg0MTZhNTJbXzB4NDgxNTBmKDB4MTFlKV0oKTt9O31jYXRjaHtfMHgyMTA4YzI9ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGUoKTt9O319cmV0dXJueydlbGFwc2VkJzpfMHgyMjA4MDYsJ3RpbWVTdGFtcCc6XzB4MjEwOGMyLCdub3cnOigpPT5EYXRlWydub3cnXSgpfTt9ZnVuY3Rpb24gSChfMHhjYmRjMjAsXzB4MWNlMjQyLF8weDFiNjZjZil7dmFyIF8weGExMzgyNT1fMHhmYjRmODksXzB4MzZlMjZmLF8weDJkNjUyYyxfMHg1ZTczZjMsXzB4MjFhYzQ1LF8weDE3ZWI3OTtpZihfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddIT09dm9pZCAweDApcmV0dXJuIF8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNTUpXTtsZXQgXzB4NDBiYjJiPSgoXzB4MmQ2NTJjPShfMHgzNmUyNmY9XzB4Y2JkYzIwWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDM2ZTI2ZltfMHhhMTM4MjUoMHhkMildKT09bnVsbD92b2lkIDB4MDpfMHgyZDY1MmNbXzB4YTEzODI1KDB4MTgyKV0pfHwoKF8weDIxYWM0NT0oXzB4NWU3M2YzPV8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4NWU3M2YzWydlbnYnXSk9PW51bGw/dm9pZCAweDA6XzB4MjFhYzQ1W18weGExMzgyNSgweGNmKV0pPT09J2VkZ2UnO2Z1bmN0aW9uIF8weDNlOGNkOChfMHgzNzg3ZDYpe3ZhciBfMHg1MjUzMGE9XzB4YTEzODI1O2lmKF8weDM3ODdkNltfMHg1MjUzMGEoMHgxYjYpXSgnLycpJiZfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MTQ4KV0oJy8nKSl7bGV0IF8weDUyMzgxNT1uZXcgUmVnRXhwKF8weDM3ODdkNlsnc2xpY2UnXSgweDEsLTB4MSkpO3JldHVybiBfMHg1ZWJmMmE9Pl8weDUyMzgxNVtfMHg1MjUzMGEoMHgxNzgpXShfMHg1ZWJmMmEpO31lbHNle2lmKF8weDM3ODdkNlsnaW5jbHVkZXMnXSgnKicpfHxfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MTZlKV0oJz8nKSl7bGV0IF8weDE4NWU5NT1uZXcgUmVnRXhwKCdeJytfMHgzNzg3ZDZbJ3JlcGxhY2UnXSgvXFxcXC4vZyxTdHJpbmdbXzB4NTI1MzBhKDB4MWI4KV0oMHg1YykrJy4nKVsncmVwbGFjZSddKC9cXFxcKi9nLCcuKicpWydyZXBsYWNlJ10oL1xcXFw/L2csJy4nKStTdHJpbmdbXzB4NTI1MzBhKDB4MWI4KV0oMHgyNCkpO3JldHVybiBfMHgxNzU4NjM9Pl8weDE4NWU5NVtfMHg1MjUzMGEoMHgxNzgpXShfMHgxNzU4NjMpO31lbHNlIHJldHVybiBfMHgyNzRlY2M9Pl8weDI3NGVjYz09PV8weDM3ODdkNjt9fWxldCBfMHg0YjYxNzE9XzB4MWNlMjQyWydtYXAnXShfMHgzZThjZDgpO3JldHVybiBfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddPV8weDQwYmIyYnx8IV8weDFjZTI0MiwhXzB4Y2JkYzIwWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXSYmKChfMHgxN2ViNzk9XzB4Y2JkYzIwWydsb2NhdGlvbiddKT09bnVsbD92b2lkIDB4MDpfMHgxN2ViNzlbXzB4YTEzODI1KDB4MWE4KV0pJiYoXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldPV8weDRiNjE3MVtfMHhhMTM4MjUoMHgxNGQpXShfMHg1YzEwZjE9Pl8weDVjMTBmMShfMHhjYmRjMjBbJ2xvY2F0aW9uJ11bJ2hvc3RuYW1lJ10pKSksXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldO31mdW5jdGlvbiBYKF8weDM2M2Q1NSxfMHgxZDkxNjksXzB4NDZjYTkwLF8weDQ2ZjY3Yyl7dmFyIF8weDEwZWQyOD1fMHhmYjRmODk7XzB4MzYzZDU1PV8weDM2M2Q1NSxfMHgxZDkxNjk9XzB4MWQ5MTY5LF8weDQ2Y2E5MD1fMHg0NmNhOTAsXzB4NDZmNjdjPV8weDQ2ZjY3YztsZXQgXzB4OTJhYzFlPUIoXzB4MzYzZDU1KSxfMHgyMjRmZmI9XzB4OTJhYzFlW18weDEwZWQyOCgweDE4MSldLF8weDRlYmVmOD1fMHg5MmFjMWVbXzB4MTBlZDI4KDB4MTFkKV07Y2xhc3MgXzB4MzI4YmRle2NvbnN0cnVjdG9yKCl7dmFyIF8weDNjMmFjYz1fMHgxMGVkMjg7dGhpc1tfMHgzYzJhY2MoMHgxMzYpXT0vXig/ISg/OmRvfGlmfGlufGZvcnxsZXR8bmV3fHRyeXx2YXJ8Y2FzZXxlbHNlfGVudW18ZXZhbHxmYWxzZXxudWxsfHRoaXN8dHJ1ZXx2b2lkfHdpdGh8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGV4cG9ydHxpbXBvcnR8cHVibGljfHJldHVybnxzdGF0aWN8c3dpdGNofHR5cGVvZnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258YXJndW1lbnRzfGludGVyZmFjZXxwcm90ZWN0ZWR8aW1wbGVtZW50c3xpbnN0YW5jZW9mKSQpW18kYS16QS1aXFxcXHhBMC1cXFxcdUZGRkZdW18kYS16QS1aMC05XFxcXHhBMC1cXFxcdUZGRkZdKiQvLHRoaXNbXzB4M2MyYWNjKDB4MTQxKV09L14oMHxbMS05XVswLTldKikkLyx0aGlzW18weDNjMmFjYygweGU2KV09LycoW15cXFxcXFxcXCddfFxcXFxcXFxcJykqJy8sdGhpc1tfMHgzYzJhY2MoMHgxNjcpXT1fMHgzNjNkNTVbXzB4M2MyYWNjKDB4YzcpXSx0aGlzW18weDNjMmFjYygweDE1ZCldPV8weDM2M2Q1NVsnSFRNTEFsbENvbGxlY3Rpb24nXSx0aGlzW18weDNjMmFjYygweDE5ZildPU9iamVjdFtfMHgzYzJhY2MoMHgxYTQpXSx0aGlzWydfZ2V0T3duUHJvcGVydHlOYW1lcyddPU9iamVjdFtfMHgzYzJhY2MoMHgxMjkpXSx0aGlzW18weDNjMmFjYygweGVkKV09XzB4MzYzZDU1W18weDNjMmFjYygweDE2ZildLHRoaXNbJ19yZWdFeHBUb1N0cmluZyddPVJlZ0V4cFsncHJvdG90eXBlJ11bXzB4M2MyYWNjKDB4MTRlKV0sdGhpc1tfMHgzYzJhY2MoMHgxMzApXT1EYXRlW18weDNjMmFjYygweGUzKV1bXzB4M2MyYWNjKDB4MTRlKV07fVtfMHgxMGVkMjgoMHhmZCldKF8weDU4NjNlMCxfMHg1NjM2NzUsXzB4MjVkZGU4LF8weDQyMzVhYil7dmFyIF8weDVlYWM5Nz1fMHgxMGVkMjgsXzB4MTVkMmFlPXRoaXMsXzB4NDhhNTU4PV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXTtmdW5jdGlvbiBfMHgzNGMwZDQoXzB4Mjk1OWQwLF8weDNlMzMzYyxfMHg2ZWM5NmUpe3ZhciBfMHgyOWFkN2I9XzB4NWVhYzk3O18weDNlMzMzY1tfMHgyOWFkN2IoMHgxMDApXT1fMHgyOWFkN2IoMHhmZiksXzB4M2UzMzNjW18weDI5YWQ3YigweDE3YyldPV8weDI5NTlkMFtfMHgyOWFkN2IoMHgxMzUpXSxfMHgyYTA5OGI9XzB4NmVjOTZlW18weDI5YWQ3YigweDE4MildW18weDI5YWQ3YigweDE5ZSldLF8weDZlYzk2ZVtfMHgyOWFkN2IoMHgxODIpXVtfMHgyOWFkN2IoMHgxOWUpXT1fMHgzZTMzM2MsXzB4MTVkMmFlW18weDI5YWQ3YigweDE2OCldKF8weDNlMzMzYyxfMHg2ZWM5NmUpO310cnl7XzB4MjVkZGU4WydsZXZlbCddKyssXzB4MjVkZGU4WydhdXRvRXhwYW5kJ10mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMGQpXVtfMHg1ZWFjOTcoMHgxNzEpXShfMHg1NjM2NzUpO3ZhciBfMHg1ZTkzN2QsXzB4NGQ0ODM3LF8weDdhOTRjZSxfMHgxMmU0MzcsXzB4NTQyNzNjPVtdLF8weDMwNzZkMz1bXSxfMHg0YTI3ZDUsXzB4MWYxYWEwPXRoaXNbXzB4NWVhYzk3KDB4MTNjKV0oXzB4NTYzNjc1KSxfMHgxZmU4ZmM9XzB4MWYxYWEwPT09J2FycmF5JyxfMHgxZDlkMzM9ITB4MSxfMHgxZjdjZmU9XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4MTIwKSxfMHgzMDg0YWU9dGhpc1tfMHg1ZWFjOTcoMHgxNzMpXShfMHgxZjFhYTApLF8weGMzNWJjNz10aGlzW18weDVlYWM5NygweDEzZCldKF8weDFmMWFhMCksXzB4NDhkOWUxPV8weDMwODRhZXx8XzB4YzM1YmM3LF8weDU5MDQ0OT17fSxfMHgyOWZjMjg9MHgwLF8weDMxYjAyMj0hMHgxLF8weDJhMDk4YixfMHgxNGUyYTY9L14oKFsxLTldezF9WzAtOV0qKXwwKSQvO2lmKF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNTkpXSl7aWYoXzB4MWZlOGZjKXtpZihfMHg0ZDQ4Mzc9XzB4NTYzNjc1W18weDVlYWM5NygweGY0KV0sXzB4NGQ0ODM3Pl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHhjOCldKXtmb3IoXzB4N2E5NGNlPTB4MCxfMHgxMmU0Mzc9XzB4MjVkZGU4WydlbGVtZW50cyddLF8weDVlOTM3ZD1fMHg3YTk0Y2U7XzB4NWU5MzdkPF8weDEyZTQzNztfMHg1ZTkzN2QrKylfMHgzMDc2ZDNbJ3B1c2gnXShfMHgxNWQyYWVbXzB4NWVhYzk3KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg1ZTkzN2QsXzB4MjVkZGU4KSk7XzB4NTg2M2UwW18weDVlYWM5NygweDE0MildPSEweDA7fWVsc2V7Zm9yKF8weDdhOTRjZT0weDAsXzB4MTJlNDM3PV8weDRkNDgzNyxfMHg1ZTkzN2Q9XzB4N2E5NGNlO18weDVlOTM3ZDxfMHgxMmU0Mzc7XzB4NWU5MzdkKyspXzB4MzA3NmQzW18weDVlYWM5NygweDE3MSldKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhlNCldKF8weDU0MjczYyxfMHg1NjM2NzUsXzB4MWYxYWEwLF8weDVlOTM3ZCxfMHgyNWRkZTgpKTt9XzB4MjVkZGU4W18weDVlYWM5NygweDExMCldKz1fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXTt9aWYoIShfMHgxZjFhYTA9PT0nbnVsbCd8fF8weDFmMWFhMD09PV8weDVlYWM5NygweGM3KSkmJiFfMHgzMDg0YWUmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDEzNykmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDE5NCkmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDE3Zikpe3ZhciBfMHgzYTAwOTI9XzB4NDIzNWFiW18weDVlYWM5NygweDE3ZCldfHxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTdkKV07aWYodGhpc1tfMHg1ZWFjOTcoMHgxNWUpXShfMHg1NjM2NzUpPyhfMHg1ZTkzN2Q9MHgwLF8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxMGEpXShmdW5jdGlvbihfMHg0YjMzMTkpe3ZhciBfMHgzZDJhYTg9XzB4NWVhYzk3O2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHgzZDJhYTgoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO3JldHVybjt9aWYoIV8weDI1ZGRlOFsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHgyNWRkZThbXzB4M2QyYWE4KDB4MWEyKV0mJl8weDI1ZGRlOFsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXT5fMHgyNWRkZThbJ2F1dG9FeHBhbmRMaW1pdCddKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fV8weDMwNzZkM1tfMHgzZDJhYTgoMHgxNzEpXShfMHgxNWQyYWVbXzB4M2QyYWE4KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDNkMmFhOCgweDE5YiksXzB4NWU5MzdkKyssXzB4MjVkZGU4LGZ1bmN0aW9uKF8weDVlN2ViZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDVlN2ViZTt9O30oXzB4NGIzMzE5KSkpO30pKTp0aGlzW18weDVlYWM5NygweDE2NCldKF8weDU2MzY3NSkmJl8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxMGEpXShmdW5jdGlvbihfMHg3ODlmOSxfMHg0MGJmZWQpe3ZhciBfMHg1OTU1MTU9XzB4NWVhYzk3O2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO3JldHVybjt9aWYoIV8weDI1ZGRlOFsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHgyNWRkZThbXzB4NTk1NTE1KDB4MWEyKV0mJl8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxMTApXT5fMHgyNWRkZThbJ2F1dG9FeHBhbmRMaW1pdCddKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fXZhciBfMHgxNGQwOTY9XzB4NDBiZmVkW18weDU5NTUxNSgweDE0ZSldKCk7XzB4MTRkMDk2W18weDU5NTUxNSgweGY0KV0+MHg2NCYmKF8weDE0ZDA5Nj1fMHgxNGQwOTZbJ3NsaWNlJ10oMHgwLDB4NjQpK18weDU5NTUxNSgweDFhYykpLF8weDMwNzZkM1tfMHg1OTU1MTUoMHgxNzEpXShfMHgxNWQyYWVbXzB4NTk1NTE1KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDU5NTUxNSgweGViKSxfMHgxNGQwOTYsXzB4MjVkZGU4LGZ1bmN0aW9uKF8weDg0NDhjMil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDg0NDhjMjt9O30oXzB4Nzg5ZjkpKSk7fSksIV8weDFkOWQzMyl7dHJ5e2ZvcihfMHg0YTI3ZDUgaW4gXzB4NTYzNjc1KWlmKCEoXzB4MWZlOGZjJiZfMHgxNGUyYTZbJ3Rlc3QnXShfMHg0YTI3ZDUpKSYmIXRoaXNbJ19ibGFja2xpc3RlZFByb3BlcnR5J10oXzB4NTYzNjc1LF8weDRhMjdkNSxfMHgyNWRkZTgpKXtpZihfMHgyOWZjMjgrKyxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0rKyxfMHgyOWZjMjg+XzB4M2EwMDkyKXtfMHgzMWIwMjI9ITB4MDticmVhazt9aWYoIV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTUpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDFhMildJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0+XzB4MjVkZGU4W18weDVlYWM5NygweDE0NildKXtfMHgzMWIwMjI9ITB4MDticmVhazt9XzB4MzA3NmQzW18weDVlYWM5NygweDE3MSldKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhkMCldKF8weDU0MjczYyxfMHg1OTA0NDksXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg0YTI3ZDUsXzB4MjVkZGU4KSk7fX1jYXRjaHt9aWYoXzB4NTkwNDQ5W18weDVlYWM5NygweDE3NildPSEweDAsXzB4MWY3Y2ZlJiYoXzB4NTkwNDQ5WydfcF9uYW1lJ109ITB4MCksIV8weDMxYjAyMil7dmFyIF8weDE4YzBmNT1bXVtfMHg1ZWFjOTcoMHgxNGMpXSh0aGlzW18weDVlYWM5NygweDE1MSldKF8weDU2MzY3NSkpW18weDVlYWM5NygweDE0YyldKHRoaXNbXzB4NWVhYzk3KDB4MTJlKV0oXzB4NTYzNjc1KSk7Zm9yKF8weDVlOTM3ZD0weDAsXzB4NGQ0ODM3PV8weDE4YzBmNVsnbGVuZ3RoJ107XzB4NWU5MzdkPF8weDRkNDgzNztfMHg1ZTkzN2QrKylpZihfMHg0YTI3ZDU9XzB4MThjMGY1W18weDVlOTM3ZF0sIShfMHgxZmU4ZmMmJl8weDE0ZTJhNltfMHg1ZWFjOTcoMHgxNzgpXShfMHg0YTI3ZDVbXzB4NWVhYzk3KDB4MTRlKV0oKSkpJiYhdGhpc1tfMHg1ZWFjOTcoMHgxNjEpXShfMHg1NjM2NzUsXzB4NGEyN2Q1LF8weDI1ZGRlOCkmJiFfMHg1OTA0NDlbXzB4NWVhYzk3KDB4YzUpK18weDRhMjdkNVtfMHg1ZWFjOTcoMHgxNGUpXSgpXSl7aWYoXzB4MjlmYzI4KyssXzB4MjVkZGU4WydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddKyssXzB4MjlmYzI4Pl8weDNhMDA5Mil7XzB4MzFiMDIyPSEweDA7YnJlYWs7fWlmKCFfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWE1KV0mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDExMCldPl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNDYpXSl7XzB4MzFiMDIyPSEweDA7YnJlYWs7fV8weDMwNzZkM1sncHVzaCddKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhkMCldKF8weDU0MjczYyxfMHg1OTA0NDksXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg0YTI3ZDUsXzB4MjVkZGU4KSk7fX19fX1pZihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTAwKV09XzB4MWYxYWEwLF8weDQ4ZDllMT8oXzB4NTg2M2UwWyd2YWx1ZSddPV8weDU2MzY3NVtfMHg1ZWFjOTcoMHhlZSldKCksdGhpc1tfMHg1ZWFjOTcoMHgxMzMpXShfMHgxZjFhYTAsXzB4NTg2M2UwLF8weDI1ZGRlOCxfMHg0MjM1YWIpKTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHhkNyk/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbXzB4NWVhYzk3KDB4MTMwKV1bXzB4NWVhYzk3KDB4MTFjKV0oXzB4NTYzNjc1KTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHgxN2YpP18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxYTApXT1fMHg1NjM2NzVbXzB4NWVhYzk3KDB4MTRlKV0oKTpfMHgxZjFhYTA9PT0nUmVnRXhwJz9fMHg1ODYzZTBbXzB4NWVhYzk3KDB4MWEwKV09dGhpc1tfMHg1ZWFjOTcoMHhlNyldW18weDVlYWM5NygweDExYyldKF8weDU2MzY3NSk6XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzYpJiZ0aGlzW18weDVlYWM5NygweGVkKV0/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbJ19TeW1ib2wnXVtfMHg1ZWFjOTcoMHhlMyldW18weDVlYWM5NygweDE0ZSldWydjYWxsJ10oXzB4NTYzNjc1KTohXzB4MjVkZGU4WydkZXB0aCddJiYhKF8weDFmMWFhMD09PSdudWxsJ3x8XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzcpKSYmKGRlbGV0ZSBfMHg1ODYzZTBbJ3ZhbHVlJ10sXzB4NTg2M2UwWydjYXBwZWQnXT0hMHgwKSxfMHgzMWIwMjImJihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTE2KV09ITB4MCksXzB4MmEwOThiPV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxODIpXVtfMHg1ZWFjOTcoMHgxOWUpXSxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTgyKV1bXzB4NWVhYzk3KDB4MTllKV09XzB4NTg2M2UwLHRoaXNbXzB4NWVhYzk3KDB4MTY4KV0oXzB4NTg2M2UwLF8weDI1ZGRlOCksXzB4MzA3NmQzW18weDVlYWM5NygweGY0KV0pe2ZvcihfMHg1ZTkzN2Q9MHgwLF8weDRkNDgzNz1fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXTtfMHg1ZTkzN2Q8XzB4NGQ0ODM3O18weDVlOTM3ZCsrKV8weDMwNzZkM1tfMHg1ZTkzN2RdKF8weDVlOTM3ZCk7fV8weDU0MjczY1tfMHg1ZWFjOTcoMHhmNCldJiYoXzB4NTg2M2UwW18weDVlYWM5NygweDE3ZCldPV8weDU0MjczYyk7fWNhdGNoKF8weDViNmE2Mil7XzB4MzRjMGQ0KF8weDViNmE2MixfMHg1ODYzZTAsXzB4MjVkZGU4KTt9cmV0dXJuIHRoaXNbXzB4NWVhYzk3KDB4MTRmKV0oXzB4NTYzNjc1LF8weDU4NjNlMCksdGhpc1snX3RyZWVOb2RlUHJvcGVydGllc0FmdGVyRnVsbFZhbHVlJ10oXzB4NTg2M2UwLF8weDI1ZGRlOCksXzB4MjVkZGU4Wydub2RlJ11bXzB4NWVhYzk3KDB4MTllKV09XzB4MmEwOThiLF8weDI1ZGRlOFsnbGV2ZWwnXS0tLF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXT1fMHg0OGE1NTgsXzB4MjVkZGU4WydhdXRvRXhwYW5kJ10mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMGQpXVtfMHg1ZWFjOTcoMHgxNjIpXSgpLF8weDU4NjNlMDt9W18weDEwZWQyOCgweDEyZSldKF8weDVlN2U0NSl7dmFyIF8weDExMWRkMT1fMHgxMGVkMjg7cmV0dXJuIE9iamVjdFtfMHgxMTFkZDEoMHgxOTApXT9PYmplY3RbXzB4MTExZGQxKDB4MTkwKV0oXzB4NWU3ZTQ1KTpbXTt9W18weDEwZWQyOCgweDE1ZSldKF8weDViNjlhOSl7dmFyIF8weDU1YWMyNz1fMHgxMGVkMjg7cmV0dXJuISEoXzB4NWI2OWE5JiZfMHgzNjNkNTVbXzB4NTVhYzI3KDB4MTliKV0mJnRoaXNbXzB4NTVhYzI3KDB4MTUyKV0oXzB4NWI2OWE5KT09PV8weDU1YWMyNygweDE0NykmJl8weDViNjlhOVtfMHg1NWFjMjcoMHgxMGEpXSk7fVsnX2JsYWNrbGlzdGVkUHJvcGVydHknXShfMHgyOGIxNWYsXzB4NTgxZGQ2LF8weDMyMjI2Yyl7dmFyIF8weDI0N2E3ND1fMHgxMGVkMjg7cmV0dXJuIF8weDMyMjI2Y1tfMHgyNDdhNzQoMHhlZildP3R5cGVvZiBfMHgyOGIxNWZbXzB4NTgxZGQ2XT09XzB4MjQ3YTc0KDB4MTIwKTohMHgxO31bXzB4MTBlZDI4KDB4MTNjKV0oXzB4MzUyMTM2KXt2YXIgXzB4NDc0OThlPV8weDEwZWQyOCxfMHg0NTY4MjI9Jyc7cmV0dXJuIF8weDQ1NjgyMj10eXBlb2YgXzB4MzUyMTM2LF8weDQ1NjgyMj09PV8weDQ3NDk4ZSgweDE0Myk/dGhpc1tfMHg0NzQ5OGUoMHgxNTIpXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4MTgwKT9fMHg0NTY4MjI9XzB4NDc0OThlKDB4MWE3KTp0aGlzW18weDQ3NDk4ZSgweDE1MildKF8weDM1MjEzNik9PT1fMHg0NzQ5OGUoMHhkZCk/XzB4NDU2ODIyPSdkYXRlJzp0aGlzWydfb2JqZWN0VG9TdHJpbmcnXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4YmIpP18weDQ1NjgyMj1fMHg0NzQ5OGUoMHgxN2YpOl8weDM1MjEzNj09PW51bGw/XzB4NDU2ODIyPV8weDQ3NDk4ZSgweDFiNCk6XzB4MzUyMTM2W18weDQ3NDk4ZSgweDEwZSldJiYoXzB4NDU2ODIyPV8weDM1MjEzNltfMHg0NzQ5OGUoMHgxMGUpXVtfMHg0NzQ5OGUoMHhjMSldfHxfMHg0NTY4MjIpOl8weDQ1NjgyMj09PSd1bmRlZmluZWQnJiZ0aGlzW18weDQ3NDk4ZSgweDE1ZCldJiZfMHgzNTIxMzYgaW5zdGFuY2VvZiB0aGlzW18weDQ3NDk4ZSgweDE1ZCldJiYoXzB4NDU2ODIyPV8weDQ3NDk4ZSgweGMwKSksXzB4NDU2ODIyO31bJ19vYmplY3RUb1N0cmluZyddKF8weDFkZTY2Yyl7dmFyIF8weDQ3M2U2NT1fMHgxMGVkMjg7cmV0dXJuIE9iamVjdFtfMHg0NzNlNjUoMHhlMyldWyd0b1N0cmluZyddW18weDQ3M2U2NSgweDExYyldKF8weDFkZTY2Yyk7fVtfMHgxMGVkMjgoMHgxNzMpXShfMHgxYjczMWEpe3ZhciBfMHhiNjBiMTQ9XzB4MTBlZDI4O3JldHVybiBfMHgxYjczMWE9PT1fMHhiNjBiMTQoMHhlMSl8fF8weDFiNzMxYT09PV8weGI2MGIxNCgweDEwMil8fF8weDFiNzMxYT09PV8weGI2MGIxNCgweGRlKTt9WydfaXNQcmltaXRpdmVXcmFwcGVyVHlwZSddKF8weDMzMWIwOSl7dmFyIF8weDE2ZDdkOT1fMHgxMGVkMjg7cmV0dXJuIF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDE1NCl8fF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDEzNyl8fF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDEzMSk7fVtfMHgxMGVkMjgoMHhlNCldKF8weDI5Yzk5YixfMHgyZjQ4NzYsXzB4MWQyZjRmLF8weDMwNzZiYyxfMHgxNzgzMjcsXzB4MmVlYzQ5KXt2YXIgXzB4NDU4ZjRmPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKF8weDUzMGY5OSl7dmFyIF8weDM3NDc0Nj1fMHgzZmY5LF8weDYwZGY4Mz1fMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4MTllKV0sXzB4MjVhMjA5PV8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXSxfMHgyOTBlOTk9XzB4MTc4MzI3W18weDM3NDc0NigweDE4MildWydwYXJlbnQnXTtfMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4Y2UpXT1fMHg2MGRmODMsXzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweDFhOSldPXR5cGVvZiBfMHgzMDc2YmM9PV8weDM3NDc0NigweGRlKT9fMHgzMDc2YmM6XzB4NTMwZjk5LF8weDI5Yzk5YltfMHgzNzQ3NDYoMHgxNzEpXShfMHg0NThmNGZbXzB4Mzc0NzQ2KDB4MWI1KV0oXzB4MmY0ODc2LF8weDFkMmY0ZixfMHgzMDc2YmMsXzB4MTc4MzI3LF8weDJlZWM0OSkpLF8weDE3ODMyN1snbm9kZSddW18weDM3NDc0NigweGNlKV09XzB4MjkwZTk5LF8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXT1fMHgyNWEyMDk7fTt9W18weDEwZWQyOCgweGQwKV0oXzB4ODNiMGUsXzB4NGRiZmI3LF8weDU3ODI1ZSxfMHg1MGYyNWUsXzB4Zjc0MmNiLF8weDVlMDQwMixfMHgyZGY0MTUpe3ZhciBfMHg0ZmY4MGM9XzB4MTBlZDI4LF8weDNjMjNkND10aGlzO3JldHVybiBfMHg0ZGJmYjdbXzB4NGZmODBjKDB4YzUpK18weGY3NDJjYlsndG9TdHJpbmcnXSgpXT0hMHgwLGZ1bmN0aW9uKF8weDNhYmQ2NSl7dmFyIF8weDRhYzk1ZT1fMHg0ZmY4MGMsXzB4MmM5YzNmPV8weDVlMDQwMltfMHg0YWM5NWUoMHgxODIpXVsnY3VycmVudCddLF8weDI2MzViZD1fMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bXzB4NGFjOTVlKDB4MWE5KV0sXzB4YzJlMGQ9XzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXTtfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHhjZSldPV8weDJjOWMzZixfMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bJ2luZGV4J109XzB4M2FiZDY1LF8weDgzYjBlW18weDRhYzk1ZSgweDE3MSldKF8weDNjMjNkNFtfMHg0YWM5NWUoMHgxYjUpXShfMHg1NzgyNWUsXzB4NTBmMjVlLF8weGY3NDJjYixfMHg1ZTA0MDIsXzB4MmRmNDE1KSksXzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXT1fMHhjMmUwZCxfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHgxYTkpXT1fMHgyNjM1YmQ7fTt9W18weDEwZWQyOCgweDFiNSldKF8weGYzOGFjMyxfMHg1YmRjZmQsXzB4MjkwZTYyLF8weDc5OTBjZixfMHg0OGU2MDQpe3ZhciBfMHgxYWE1N2U9XzB4MTBlZDI4LF8weDJiZmY4Yz10aGlzO18weDQ4ZTYwNHx8KF8weDQ4ZTYwND1mdW5jdGlvbihfMHg0M2JhOGYsXzB4NTk3ZDI2KXtyZXR1cm4gXzB4NDNiYThmW18weDU5N2QyNl07fSk7dmFyIF8weDQ4YTIwZT1fMHgyOTBlNjJbXzB4MWFhNTdlKDB4MTRlKV0oKSxfMHhkNjg3M2Q9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDEzOCldfHx7fSxfMHg3NDI2ZjM9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldLF8weDNmMzE5OT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWE1KV07dHJ5e3ZhciBfMHgxOGI3MDI9dGhpc1snX2lzTWFwJ10oXzB4ZjM4YWMzKSxfMHg1YTFhZTQ9XzB4NDhhMjBlO18weDE4YjcwMiYmXzB4NWExYWU0WzB4MF09PT0nXFxcXHgyNycmJihfMHg1YTFhZTQ9XzB4NWExYWU0WydzdWJzdHInXSgweDEsXzB4NWExYWU0W18weDFhYTU3ZSgweGY0KV0tMHgyKSk7dmFyIF8weDZhZjFhMT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV09XzB4ZDY4NzNkWydfcF8nK18weDVhMWFlNF07XzB4NmFmMWExJiYoXzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldPV8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXSsweDEpLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxYTUpXT0hIV8weDZhZjFhMTt2YXIgXzB4MjMzM2Q3PXR5cGVvZiBfMHgyOTBlNjI9PV8weDFhYTU3ZSgweGM2KSxfMHgyMmNiYTA9eyduYW1lJzpfMHgyMzMzZDd8fF8weDE4YjcwMj9fMHg0OGEyMGU6dGhpc1snX3Byb3BlcnR5TmFtZSddKF8weDQ4YTIwZSl9O2lmKF8weDIzMzNkNyYmKF8weDIyY2JhMFtfMHgxYWE1N2UoMHhjNildPSEweDApLCEoXzB4NWJkY2ZkPT09XzB4MWFhNTdlKDB4MWE3KXx8XzB4NWJkY2ZkPT09XzB4MWFhNTdlKDB4MTJmKSkpe3ZhciBfMHgxNTZiNmQ9dGhpc1tfMHgxYWE1N2UoMHgxOWYpXShfMHhmMzhhYzMsXzB4MjkwZTYyKTtpZihfMHgxNTZiNmQmJihfMHgxNTZiNmRbJ3NldCddJiYoXzB4MjJjYmEwWydzZXR0ZXInXT0hMHgwKSxfMHgxNTZiNmRbXzB4MWFhNTdlKDB4MTA3KV0mJiFfMHg2YWYxYTEmJiFfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTk4KV0pKXJldHVybiBfMHgyMmNiYTBbJ2dldHRlciddPSEweDAsdGhpc1tfMHgxYWE1N2UoMHgxN2EpXShfMHgyMmNiYTAsXzB4Nzk5MGNmKSxfMHgyMmNiYTA7fXZhciBfMHgzNmZkMjU7dHJ5e18weDM2ZmQyNT1fMHg0OGU2MDQoXzB4ZjM4YWMzLF8weDI5MGU2Mik7fWNhdGNoKF8weDIxMDA4Mil7cmV0dXJuIF8weDIyY2JhMD17J25hbWUnOl8weDQ4YTIwZSwndHlwZSc6XzB4MWFhNTdlKDB4ZmYpLCdlcnJvcic6XzB4MjEwMDgyW18weDFhYTU3ZSgweDEzNSldfSx0aGlzW18weDFhYTU3ZSgweDE3YSldKF8weDIyY2JhMCxfMHg3OTkwY2YpLF8weDIyY2JhMDt9dmFyIF8weDE1YzAxZT10aGlzW18weDFhYTU3ZSgweDEzYyldKF8weDM2ZmQyNSksXzB4MWFhYjk5PXRoaXNbXzB4MWFhNTdlKDB4MTczKV0oXzB4MTVjMDFlKTtpZihfMHgyMmNiYTBbJ3R5cGUnXT1fMHgxNWMwMWUsXzB4MWFhYjk5KXRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZixfMHgzNmZkMjUsZnVuY3Rpb24oKXt2YXIgXzB4NGY4ZDc1PV8weDFhYTU3ZTtfMHgyMmNiYTBbXzB4NGY4ZDc1KDB4MWEwKV09XzB4MzZmZDI1Wyd2YWx1ZU9mJ10oKSwhXzB4NmFmMWExJiZfMHgyYmZmOGNbXzB4NGY4ZDc1KDB4MTMzKV0oXzB4MTVjMDFlLF8weDIyY2JhMCxfMHg3OTkwY2Yse30pO30pO2Vsc2V7dmFyIF8weDMzNWY1OT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWEyKV0mJl8weDc5OTBjZlsnbGV2ZWwnXTxfMHg3OTkwY2ZbJ2F1dG9FeHBhbmRNYXhEZXB0aCddJiZfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTBkKV1bXzB4MWFhNTdlKDB4ZDQpXShfMHgzNmZkMjUpPDB4MCYmXzB4MTVjMDFlIT09XzB4MWFhNTdlKDB4MTIwKSYmXzB4Nzk5MGNmW18weDFhYTU3ZSgweDExMCldPF8weDc5OTBjZlsnYXV0b0V4cGFuZExpbWl0J107XzB4MzM1ZjU5fHxfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTg4KV08XzB4NzQyNmYzfHxfMHg2YWYxYTE/KHRoaXNbJ3NlcmlhbGl6ZSddKF8weDIyY2JhMCxfMHgzNmZkMjUsXzB4Nzk5MGNmLF8weDZhZjFhMXx8e30pLHRoaXNbXzB4MWFhNTdlKDB4MTRmKV0oXzB4MzZmZDI1LF8weDIyY2JhMCkpOnRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZixfMHgzNmZkMjUsZnVuY3Rpb24oKXt2YXIgXzB4NTNkMDAwPV8weDFhYTU3ZTtfMHgxNWMwMWU9PT1fMHg1M2QwMDAoMHgxYjQpfHxfMHgxNWMwMWU9PT1fMHg1M2QwMDAoMHhjNyl8fChkZWxldGUgXzB4MjJjYmEwW18weDUzZDAwMCgweDFhMCldLF8weDIyY2JhMFtfMHg1M2QwMDAoMHgxODMpXT0hMHgwKTt9KTt9cmV0dXJuIF8weDIyY2JhMDt9ZmluYWxseXtfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV09XzB4ZDY4NzNkLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXT1fMHg3NDI2ZjMsXzB4Nzk5MGNmW18weDFhYTU3ZSgweDFhNSldPV8weDNmMzE5OTt9fVsnX2NhcElmU3RyaW5nJ10oXzB4OTYwMjBjLF8weDRlNGNjMyxfMHhhZWFiMzYsXzB4MWU1NjU3KXt2YXIgXzB4MjM1NmU0PV8weDEwZWQyOCxfMHgyYmJmYTY9XzB4MWU1NjU3WydzdHJMZW5ndGgnXXx8XzB4YWVhYjM2W18weDIzNTZlNCgweDEwOCldO2lmKChfMHg5NjAyMGM9PT1fMHgyMzU2ZTQoMHgxMDIpfHxfMHg5NjAyMGM9PT1fMHgyMzU2ZTQoMHgxMzcpKSYmXzB4NGU0Y2MzWyd2YWx1ZSddKXtsZXQgXzB4MmUwZDIxPV8weDRlNGNjM1sndmFsdWUnXVtfMHgyMzU2ZTQoMHhmNCldO18weGFlYWIzNlsnYWxsU3RyTGVuZ3RoJ10rPV8weDJlMGQyMSxfMHhhZWFiMzZbJ2FsbFN0ckxlbmd0aCddPl8weGFlYWIzNltfMHgyMzU2ZTQoMHhmMyldPyhfMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MTgzKV09JycsZGVsZXRlIF8weDRlNGNjM1sndmFsdWUnXSk6XzB4MmUwZDIxPl8weDJiYmZhNiYmKF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxODMpXT1fMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MWEwKV1bXzB4MjM1NmU0KDB4MThiKV0oMHgwLF8weDJiYmZhNiksZGVsZXRlIF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxYTApXSk7fX1bXzB4MTBlZDI4KDB4MTY0KV0oXzB4M2VmZWYzKXt2YXIgXzB4MzQ4OGFjPV8weDEwZWQyODtyZXR1cm4hIShfMHgzZWZlZjMmJl8weDM2M2Q1NVtfMHgzNDg4YWMoMHhlYildJiZ0aGlzW18weDM0ODhhYygweDE1MildKF8weDNlZmVmMyk9PT1fMHgzNDg4YWMoMHgxYWYpJiZfMHgzZWZlZjNbXzB4MzQ4OGFjKDB4MTBhKV0pO31bXzB4MTBlZDI4KDB4YzQpXShfMHgxMWMzNWIpe3ZhciBfMHgyMzQ1M2Q9XzB4MTBlZDI4O2lmKF8weDExYzM1YltfMHgyMzQ1M2QoMHhmNildKC9eXFxcXGQrJC8pKXJldHVybiBfMHgxMWMzNWI7dmFyIF8weDRmNmEwMzt0cnl7XzB4NGY2YTAzPUpTT05bXzB4MjM0NTNkKDB4ZjEpXSgnJytfMHgxMWMzNWIpO31jYXRjaHtfMHg0ZjZhMDM9J1xcXFx4MjInK3RoaXNbXzB4MjM0NTNkKDB4MTUyKV0oXzB4MTFjMzViKSsnXFxcXHgyMic7fXJldHVybiBfMHg0ZjZhMDNbXzB4MjM0NTNkKDB4ZjYpXSgvXlxcXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcXFwiJC8pP18weDRmNmEwMz1fMHg0ZjZhMDNbJ3N1YnN0ciddKDB4MSxfMHg0ZjZhMDNbJ2xlbmd0aCddLTB4Mik6XzB4NGY2YTAzPV8weDRmNmEwM1tfMHgyMzQ1M2QoMHgxNjYpXSgvJy9nLCdcXFxceDVjXFxcXHgyNycpWydyZXBsYWNlJ10oL1xcXFxcXFxcXFxcIi9nLCdcXFxceDIyJylbJ3JlcGxhY2UnXSgvKF5cXFwifFxcXCIkKS9nLCdcXFxceDI3JyksXzB4NGY2YTAzO31bXzB4MTBlZDI4KDB4MTdhKV0oXzB4NTVjYzQ3LF8weDExYmFiMyxfMHg0MTcxOGYsXzB4MTYzYjZhKXt2YXIgXzB4NDdjOTAyPV8weDEwZWQyODt0aGlzW18weDQ3YzkwMigweDE2OCldKF8weDU1Y2M0NyxfMHgxMWJhYjMpLF8weDE2M2I2YSYmXzB4MTYzYjZhKCksdGhpc1snX2FkZGl0aW9uYWxNZXRhZGF0YSddKF8weDQxNzE4ZixfMHg1NWNjNDcpLHRoaXNbJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZSddKF8weDU1Y2M0NyxfMHgxMWJhYjMpO31bXzB4MTBlZDI4KDB4MTY4KV0oXzB4M2Y4YjNhLF8weDRkNTg4NCl7dmFyIF8weDQ5YzY5ZT1fMHgxMGVkMjg7dGhpc1tfMHg0OWM2OWUoMHgxMmIpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzW18weDQ5YzY5ZSgweGNhKV0oXzB4M2Y4YjNhLF8weDRkNTg4NCksdGhpc1tfMHg0OWM2OWUoMHgxOGUpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzWydfc2V0Tm9kZVBlcm1pc3Npb25zJ10oXzB4M2Y4YjNhLF8weDRkNTg4NCk7fVtfMHgxMGVkMjgoMHgxMmIpXShfMHgyNGQ1ZjgsXzB4MTRlYWVhKXt9W18weDEwZWQyOCgweGNhKV0oXzB4NTc2YTMyLF8weDY4N2M1KXt9W18weDEwZWQyOCgweGJkKV0oXzB4NDg5YzllLF8weGY3Njk1Nyl7fVtfMHgxMGVkMjgoMHgxNDApXShfMHg0MGJkNmMpe3JldHVybiBfMHg0MGJkNmM9PT10aGlzWydfdW5kZWZpbmVkJ107fVtfMHgxMGVkMjgoMHhmMildKF8weDU5ZGJkNyxfMHgzOWI5OTMpe3ZhciBfMHg0YWFiMzQ9XzB4MTBlZDI4O3RoaXNbXzB4NGFhYjM0KDB4YmQpXShfMHg1OWRiZDcsXzB4MzliOTkzKSx0aGlzW18weDRhYWIzNCgweDE5NildKF8weDU5ZGJkNyksXzB4MzliOTkzW18weDRhYWIzNCgweGY5KV0mJnRoaXNbJ19zb3J0UHJvcHMnXShfMHg1OWRiZDcpLHRoaXNbXzB4NGFhYjM0KDB4MTVmKV0oXzB4NTlkYmQ3LF8weDM5Yjk5MyksdGhpc1tfMHg0YWFiMzQoMHhlMildKF8weDU5ZGJkNyxfMHgzOWI5OTMpLHRoaXNbXzB4NGFhYjM0KDB4MTExKV0oXzB4NTlkYmQ3KTt9W18weDEwZWQyOCgweDE0ZildKF8weDI1MTk2NSxfMHg5YjkzY2Qpe3ZhciBfMHg4M2NiZDQ9XzB4MTBlZDI4O2xldCBfMHhjZDM5M2Y7dHJ5e18weDM2M2Q1NVtfMHg4M2NiZDQoMHgxNzQpXSYmKF8weGNkMzkzZj1fMHgzNjNkNTVbXzB4ODNjYmQ0KDB4MTc0KV1bJ2Vycm9yJ10sXzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldW18weDgzY2JkNCgweDE3YyldPWZ1bmN0aW9uKCl7fSksXzB4MjUxOTY1JiZ0eXBlb2YgXzB4MjUxOTY1W18weDgzY2JkNCgweGY0KV09PV8weDgzY2JkNCgweGRlKSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHhmNCldPV8weDI1MTk2NVtfMHg4M2NiZDQoMHhmNCldKTt9Y2F0Y2h7fWZpbmFsbHl7XzB4Y2QzOTNmJiYoXzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldW18weDgzY2JkNCgweDE3YyldPV8weGNkMzkzZik7fWlmKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMDApXT09PV8weDgzY2JkNCgweGRlKXx8XzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4MTMxKSl7aWYoaXNOYU4oXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKSlfMHg5YjkzY2RbJ25hbiddPSEweDAsZGVsZXRlIF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXTtlbHNlIHN3aXRjaChfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV0pe2Nhc2UgTnVtYmVyW18weDgzY2JkNCgweDE5MildOl8weDliOTNjZFtfMHg4M2NiZDQoMHgxNzUpXT0hMHgwLGRlbGV0ZSBfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV07YnJlYWs7Y2FzZSBOdW1iZXJbXzB4ODNjYmQ0KDB4MTg1KV06XzB4OWI5M2NkWyduZWdhdGl2ZUluZmluaXR5J109ITB4MCxkZWxldGUgXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldO2JyZWFrO2Nhc2UgMHgwOnRoaXNbXzB4ODNjYmQ0KDB4MTAxKV0oXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMjQpXT0hMHgwKTticmVhazt9fWVsc2UgXzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4MTIwKSYmdHlwZW9mIF8weDI1MTk2NVtfMHg4M2NiZDQoMHhjMSldPT1fMHg4M2NiZDQoMHgxMDIpJiZfMHgyNTE5NjVbXzB4ODNjYmQ0KDB4YzEpXSYmXzB4OWI5M2NkW18weDgzY2JkNCgweGMxKV0mJl8weDI1MTk2NVsnbmFtZSddIT09XzB4OWI5M2NkW18weDgzY2JkNCgweGMxKV0mJihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4ZGEpXT1fMHgyNTE5NjVbJ25hbWUnXSk7fVtfMHgxMGVkMjgoMHgxMDEpXShfMHhkYzcyZjYpe3ZhciBfMHgzOTZmMzI9XzB4MTBlZDI4O3JldHVybiAweDEvXzB4ZGM3MmY2PT09TnVtYmVyW18weDM5NmYzMigweDE4NSldO31bXzB4MTBlZDI4KDB4MTE0KV0oXzB4YzQ5ZjU5KXt2YXIgXzB4MTVkMzFhPV8weDEwZWQyODshXzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldfHwhXzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldWydsZW5ndGgnXXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4MWE3KXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4ZWIpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTAwKV09PT1fMHgxNWQzMWEoMHgxOWIpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTdkKV1bXzB4MTVkMzFhKDB4MTdlKV0oZnVuY3Rpb24oXzB4NTIxYTY2LF8weDMwMzdiOSl7dmFyIF8weDE5YjNjOD1fMHgxNWQzMWEsXzB4MzA3NDBmPV8weDUyMWE2NltfMHgxOWIzYzgoMHhjMSldW18weDE5YjNjOCgweDE5OSldKCksXzB4Mzc3ZmYxPV8weDMwMzdiOVtfMHgxOWIzYzgoMHhjMSldWyd0b0xvd2VyQ2FzZSddKCk7cmV0dXJuIF8weDMwNzQwZjxfMHgzNzdmZjE/LTB4MTpfMHgzMDc0MGY+XzB4Mzc3ZmYxPzB4MToweDA7fSk7fVsnX2FkZEZ1bmN0aW9uc05vZGUnXShfMHgyNGYxNDYsXzB4MzA0ZmRhKXt2YXIgXzB4MmEwZjE1PV8weDEwZWQyODtpZighKF8weDMwNGZkYVtfMHgyYTBmMTUoMHhlZildfHwhXzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldfHwhXzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDJhMGYxNSgweGY0KV0pKXtmb3IodmFyIF8weDE0YzlmNT1bXSxfMHg0ZDllZTQ9W10sXzB4NDg4Zjc5PTB4MCxfMHgxMDFhMzQ9XzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDJhMGYxNSgweGY0KV07XzB4NDg4Zjc5PF8weDEwMWEzNDtfMHg0ODhmNzkrKyl7dmFyIF8weDE5NjUxZj1fMHgyNGYxNDZbXzB4MmEwZjE1KDB4MTdkKV1bXzB4NDg4Zjc5XTtfMHgxOTY1MWZbXzB4MmEwZjE1KDB4MTAwKV09PT1fMHgyYTBmMTUoMHgxMjApP18weDE0YzlmNVtfMHgyYTBmMTUoMHgxNzEpXShfMHgxOTY1MWYpOl8weDRkOWVlNFsncHVzaCddKF8weDE5NjUxZik7fWlmKCEoIV8weDRkOWVlNFtfMHgyYTBmMTUoMHhmNCldfHxfMHgxNGM5ZjVbJ2xlbmd0aCddPD0weDEpKXtfMHgyNGYxNDZbJ3Byb3BzJ109XzB4NGQ5ZWU0O3ZhciBfMHgyMzBiZWM9eydmdW5jdGlvbnNOb2RlJzohMHgwLCdwcm9wcyc6XzB4MTRjOWY1fTt0aGlzW18weDJhMGYxNSgweDEyYildKF8weDIzMGJlYyxfMHgzMDRmZGEpLHRoaXNbXzB4MmEwZjE1KDB4YmQpXShfMHgyMzBiZWMsXzB4MzA0ZmRhKSx0aGlzW18weDJhMGYxNSgweDE5NildKF8weDIzMGJlYyksdGhpc1tfMHgyYTBmMTUoMHhmZSldKF8weDIzMGJlYyxfMHgzMDRmZGEpLF8weDIzMGJlY1snaWQnXSs9J1xcXFx4MjBmJyxfMHgyNGYxNDZbJ3Byb3BzJ11bXzB4MmEwZjE1KDB4MWFkKV0oXzB4MjMwYmVjKTt9fX1bXzB4MTBlZDI4KDB4ZTIpXShfMHg0NjhlOTksXzB4NDM4OGYwKXt9Wydfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZSddKF8weDVlYjcxNyl7fVtfMHgxMGVkMjgoMHgxMjEpXShfMHgzOGMwNWMpe3ZhciBfMHgxYWVlMWE9XzB4MTBlZDI4O3JldHVybiBBcnJheVtfMHgxYWVlMWEoMHgxNzIpXShfMHgzOGMwNWMpfHx0eXBlb2YgXzB4MzhjMDVjPT1fMHgxYWVlMWEoMHgxNDMpJiZ0aGlzW18weDFhZWUxYSgweDE1MildKF8weDM4YzA1Yyk9PT1fMHgxYWVlMWEoMHgxODApO31bJ19zZXROb2RlUGVybWlzc2lvbnMnXShfMHg0ZWVmYTAsXzB4MTcwNWE5KXt9W18weDEwZWQyOCgweDExMSldKF8weDUxNjkwNil7dmFyIF8weDIzNjkwNj1fMHgxMGVkMjg7ZGVsZXRlIF8weDUxNjkwNltfMHgyMzY5MDYoMHgxMGYpXSxkZWxldGUgXzB4NTE2OTA2WydfaGFzU2V0T25JdHNQYXRoJ10sZGVsZXRlIF8weDUxNjkwNltfMHgyMzY5MDYoMHgxMjUpXTt9W18weDEwZWQyOCgweDE4ZSldKF8weDIzYzFjMixfMHgyOWEyMWIpe319bGV0IF8weDRlN2Q3ZD1uZXcgXzB4MzI4YmRlKCksXzB4Mzg4NmVhPXsncHJvcHMnOjB4NjQsJ2VsZW1lbnRzJzoweDY0LCdzdHJMZW5ndGgnOjB4NDAwKjB4MzIsJ3RvdGFsU3RyTGVuZ3RoJzoweDQwMCoweDMyLCdhdXRvRXhwYW5kTGltaXQnOjB4MTM4OCwnYXV0b0V4cGFuZE1heERlcHRoJzoweGF9LF8weDMwYzU1Nz17J3Byb3BzJzoweDUsJ2VsZW1lbnRzJzoweDUsJ3N0ckxlbmd0aCc6MHgxMDAsJ3RvdGFsU3RyTGVuZ3RoJzoweDEwMCoweDMsJ2F1dG9FeHBhbmRMaW1pdCc6MHgxZSwnYXV0b0V4cGFuZE1heERlcHRoJzoweDJ9O2Z1bmN0aW9uIF8weDU4NmQzNihfMHg1NGYzYmUsXzB4MTgxYjFhLF8weDJiN2ViNSxfMHgxZGQ2MzQsXzB4NDljMDdjLF8weDM5NzQ0Nil7dmFyIF8weDJmMThkZD1fMHgxMGVkMjg7bGV0IF8weDRlN2Y3MixfMHgxZGU1YTE7dHJ5e18weDFkZTVhMT1fMHg0ZWJlZjgoKSxfMHg0ZTdmNzI9XzB4NDZjYTkwW18weDE4MWIxYV0sIV8weDRlN2Y3Mnx8XzB4MWRlNWExLV8weDRlN2Y3MlsndHMnXT4weDFmNCYmXzB4NGU3ZjcyW18weDJmMThkZCgweDExOCldJiZfMHg0ZTdmNzJbJ3RpbWUnXS9fMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTE4KV08MHg2ND8oXzB4NDZjYTkwW18weDE4MWIxYV09XzB4NGU3ZjcyPXsnY291bnQnOjB4MCwndGltZSc6MHgwLCd0cyc6XzB4MWRlNWExfSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV09e30pOl8weDFkZTVhMS1fMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ3RzJ10+MHgzMiYmXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldJiZfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MWExKV0vXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldWydjb3VudCddPDB4NjQmJihfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV09e30pO2xldCBfMHg0ZGRkM2Q9W10sXzB4MmMxYjQ1PV8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxODQpXXx8XzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDE4NCldP18weDMwYzU1NzpfMHgzODg2ZWEsXzB4Mzk4YWY1PV8weDMwYzg0Yz0+e3ZhciBfMHg5ODhlM2I9XzB4MmYxOGRkO2xldCBfMHgxNGIzZGM9e307cmV0dXJuIF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxN2QpXT1fMHgzMGM4NGNbJ3Byb3BzJ10sXzB4MTRiM2RjW18weDk4OGUzYigweGM4KV09XzB4MzBjODRjWydlbGVtZW50cyddLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxMDgpXT1fMHgzMGM4NGNbXzB4OTg4ZTNiKDB4MTA4KV0sXzB4MTRiM2RjW18weDk4OGUzYigweGYzKV09XzB4MzBjODRjW18weDk4OGUzYigweGYzKV0sXzB4MTRiM2RjW18weDk4OGUzYigweDE0NildPV8weDMwYzg0Y1tfMHg5ODhlM2IoMHgxNDYpXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWI3KV09XzB4MzBjODRjW18weDk4OGUzYigweDFiNyldLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhmOSldPSEweDEsXzB4MTRiM2RjW18weDk4OGUzYigweGVmKV09IV8weDFkOTE2OSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTU5KV09MHgxLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxODgpXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDEwNSldPV8weDk4OGUzYigweGJlKSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWI5KV09XzB4OTg4ZTNiKDB4MTZiKSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWEyKV09ITB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTBkKV09W10sXzB4MTRiM2RjW18weDk4OGUzYigweDExMCldPTB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTk4KV09ITB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4ZGIpXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDE4MildPXsnY3VycmVudCc6dm9pZCAweDAsJ3BhcmVudCc6dm9pZCAweDAsJ2luZGV4JzoweDB9LF8weDE0YjNkYzt9O2Zvcih2YXIgXzB4NGU4YjQ2PTB4MDtfMHg0ZThiNDY8XzB4NDljMDdjW18weDJmMThkZCgweGY0KV07XzB4NGU4YjQ2KyspXzB4NGRkZDNkW18weDJmMThkZCgweDE3MSldKF8weDRlN2Q3ZFtfMHgyZjE4ZGQoMHhmZCldKHsndGltZU5vZGUnOl8weDU0ZjNiZT09PV8weDJmMThkZCgweDFhMSl8fHZvaWQgMHgwfSxfMHg0OWMwN2NbXzB4NGU4YjQ2XSxfMHgzOThhZjUoXzB4MmMxYjQ1KSx7fSkpO2lmKF8weDU0ZjNiZT09PV8weDJmMThkZCgweDFhYil8fF8weDU0ZjNiZT09PV8weDJmMThkZCgweDE3Yykpe2xldCBfMHgzODg4NmM9RXJyb3JbXzB4MmYxOGRkKDB4MTFmKV07dHJ5e0Vycm9yWydzdGFja1RyYWNlTGltaXQnXT0weDEvMHgwLF8weDRkZGQzZFtfMHgyZjE4ZGQoMHgxNzEpXShfMHg0ZTdkN2RbJ3NlcmlhbGl6ZSddKHsnc3RhY2tOb2RlJzohMHgwfSxuZXcgRXJyb3IoKVtfMHgyZjE4ZGQoMHgxYjApXSxfMHgzOThhZjUoXzB4MmMxYjQ1KSx7J3N0ckxlbmd0aCc6MHgxLzB4MH0pKTt9ZmluYWxseXtFcnJvcltfMHgyZjE4ZGQoMHgxMWYpXT1fMHgzODg4NmM7fX1yZXR1cm57J21ldGhvZCc6XzB4MmYxOGRkKDB4ZDkpLCd2ZXJzaW9uJzpfMHg0NmY2N2MsJ2FyZ3MnOlt7J3RzJzpfMHgyYjdlYjUsJ3Nlc3Npb24nOl8weDFkZDYzNCwnYXJncyc6XzB4NGRkZDNkLCdpZCc6XzB4MTgxYjFhLCdjb250ZXh0JzpfMHgzOTc0NDZ9XX07fWNhdGNoKF8weDE0Y2QxOCl7cmV0dXJueydtZXRob2QnOl8weDJmMThkZCgweGQ5KSwndmVyc2lvbic6XzB4NDZmNjdjLCdhcmdzJzpbeyd0cyc6XzB4MmI3ZWI1LCdzZXNzaW9uJzpfMHgxZGQ2MzQsJ2FyZ3MnOlt7J3R5cGUnOl8weDJmMThkZCgweGZmKSwnZXJyb3InOl8weDE0Y2QxOCYmXzB4MTRjZDE4W18weDJmMThkZCgweDEzNSldfV0sJ2lkJzpfMHgxODFiMWEsJ2NvbnRleHQnOl8weDM5NzQ0Nn1dfTt9ZmluYWxseXt0cnl7aWYoXzB4NGU3ZjcyJiZfMHgxZGU1YTEpe2xldCBfMHhhMDAyNT1fMHg0ZWJlZjgoKTtfMHg0ZTdmNzJbJ2NvdW50J10rKyxfMHg0ZTdmNzJbJ3RpbWUnXSs9XzB4MjI0ZmZiKF8weDFkZTVhMSxfMHhhMDAyNSksXzB4NGU3ZjcyWyd0cyddPV8weGEwMDI1LF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxMTgpXSsrLF8weDQ2Y2E5MFsnaGl0cyddW18weDJmMThkZCgweDFhMSldKz1fMHgyMjRmZmIoXzB4MWRlNWExLF8weGEwMDI1KSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ3RzJ109XzB4YTAwMjUsKF8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxMTgpXT4weDMyfHxfMHg0ZTdmNzJbJ3RpbWUnXT4weDY0KSYmKF8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxODQpXT0hMHgwKSwoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldPjB4M2U4fHxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MWExKV0+MHgxMmMpJiYoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDE4NCldPSEweDApO319Y2F0Y2h7fX19cmV0dXJuIF8weDU4NmQzNjt9KChfMHgxNzg5MWUsXzB4NGY0YjljLF8weDNmZDZkNSxfMHgxYzU0MjIsXzB4NDc5Y2EyLF8weDRiMGFjOCxfMHg1MjQ2YWYsXzB4NDJiZmFjLF8weDRjYTgyZixfMHgxMjM1ODAsXzB4MTg5NjlkKT0+e3ZhciBfMHg0MDcyNDI9XzB4ZmI0Zjg5O2lmKF8weDE3ODkxZVtfMHg0MDcyNDIoMHgxNTApXSlyZXR1cm4gXzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldO2lmKCFIKF8weDE3ODkxZSxfMHg0MmJmYWMsXzB4NDc5Y2EyKSlyZXR1cm4gXzB4MTc4OTFlWydfY29uc29sZV9uaW5qYSddPXsnY29uc29sZUxvZyc6KCk9Pnt9LCdjb25zb2xlVHJhY2UnOigpPT57fSwnY29uc29sZVRpbWUnOigpPT57fSwnY29uc29sZVRpbWVFbmQnOigpPT57fSwnYXV0b0xvZyc6KCk9Pnt9LCdhdXRvTG9nTWFueSc6KCk9Pnt9LCdhdXRvVHJhY2VNYW55JzooKT0+e30sJ2NvdmVyYWdlJzooKT0+e30sJ2F1dG9UcmFjZSc6KCk9Pnt9LCdhdXRvVGltZSc6KCk9Pnt9LCdhdXRvVGltZUVuZCc6KCk9Pnt9fSxfMHgxNzg5MWVbXzB4NDA3MjQyKDB4MTUwKV07bGV0IF8weDM3NjEwZT1CKF8weDE3ODkxZSksXzB4MzQzN2NhPV8weDM3NjEwZVsnZWxhcHNlZCddLF8weDI1YjVlNT1fMHgzNzYxMGVbJ3RpbWVTdGFtcCddLF8weDRiZjc2Yj1fMHgzNzYxMGVbXzB4NDA3MjQyKDB4MTFlKV0sXzB4MTI1YzdkPXsnaGl0cyc6e30sJ3RzJzp7fX0sXzB4MTViNDZhPVgoXzB4MTc4OTFlLF8weDRjYTgyZixfMHgxMjVjN2QsXzB4NGIwYWM4KSxfMHhkNTQ4NmI9XzB4NGQzMGUxPT57XzB4MTI1YzdkWyd0cyddW18weDRkMzBlMV09XzB4MjViNWU1KCk7fSxfMHgyZDA3ZTY9KF8weDViYzM1NSxfMHhlMzRmZSk9Pnt2YXIgXzB4MjMzOWNlPV8weDQwNzI0MjtsZXQgXzB4NTlmYjZhPV8weDEyNWM3ZFsndHMnXVtfMHhlMzRmZV07aWYoZGVsZXRlIF8weDEyNWM3ZFsndHMnXVtfMHhlMzRmZV0sXzB4NTlmYjZhKXtsZXQgXzB4NTkyMWE2PV8weDM0MzdjYShfMHg1OWZiNmEsXzB4MjViNWU1KCkpO18weDJjZjI5MChfMHgxNWI0NmEoXzB4MjMzOWNlKDB4MWExKSxfMHg1YmMzNTUsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHg1OTIxYTZdLF8weGUzNGZlKSk7fX0sXzB4NDliY2VjPV8weDQzZTcyZj0+e3ZhciBfMHgyZTQ3YmY9XzB4NDA3MjQyLF8weDU1ZDk1ZDtyZXR1cm4gXzB4NDc5Y2EyPT09XzB4MmU0N2JmKDB4MTM5KSYmXzB4MTc4OTFlWydvcmlnaW4nXSYmKChfMHg1NWQ5NWQ9XzB4NDNlNzJmPT1udWxsP3ZvaWQgMHgwOl8weDQzZTcyZlsnYXJncyddKT09bnVsbD92b2lkIDB4MDpfMHg1NWQ5NWRbJ2xlbmd0aCddKSYmKF8weDQzZTcyZlsnYXJncyddWzB4MF1bXzB4MmU0N2JmKDB4MTg5KV09XzB4MTc4OTFlWydvcmlnaW4nXSksXzB4NDNlNzJmO307XzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldPXsnY29uc29sZUxvZyc6KF8weDMxYzkyZSxfMHgyNDQ4OGQpPT57dmFyIF8weDkzZTY3ZT1fMHg0MDcyNDI7XzB4MTc4OTFlWydjb25zb2xlJ11bJ2xvZyddW18weDkzZTY3ZSgweGMxKV0hPT0nZGlzYWJsZWRMb2cnJiZfMHgyY2YyOTAoXzB4MTViNDZhKF8weDkzZTY3ZSgweGQ5KSxfMHgzMWM5MmUsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weDI0NDg4ZCkpO30sJ2NvbnNvbGVUcmFjZSc6KF8weDNiNjZhNyxfMHhiYTg4MGUpPT57dmFyIF8weDU2N2UxMz1fMHg0MDcyNDIsXzB4MzE3MTZlLF8weDVhOWM2MDtfMHgxNzg5MWVbXzB4NTY3ZTEzKDB4MTc0KV1bJ2xvZyddW18weDU2N2UxMygweGMxKV0hPT1fMHg1NjdlMTMoMHhjMikmJigoXzB4NWE5YzYwPShfMHgzMTcxNmU9XzB4MTc4OTFlW18weDU2N2UxMygweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHgzMTcxNmVbXzB4NTY3ZTEzKDB4ZDIpXSkhPW51bGwmJl8weDVhOWM2MFtfMHg1NjdlMTMoMHgxODIpXSYmKF8weDE3ODkxZVtfMHg1NjdlMTMoMHgxOGMpXT0hMHgwKSxfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHg1NjdlMTMoMHgxYWIpLF8weDNiNjZhNyxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4YmE4ODBlKSkpKTt9LCdjb25zb2xlRXJyb3InOihfMHgzZmE3MzYsXzB4MTIxYTNiKT0+e3ZhciBfMHgxMmRmYjg9XzB4NDA3MjQyO18weDE3ODkxZVtfMHgxMmRmYjgoMHgxOGMpXT0hMHgwLF8weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKCdlcnJvcicsXzB4M2ZhNzM2LF8weDRiZjc2YigpLF8weDI1MzUzNixfMHgxMjFhM2IpKSk7fSwnY29uc29sZVRpbWUnOl8weDE4NDhhNz0+e18weGQ1NDg2YihfMHgxODQ4YTcpO30sJ2NvbnNvbGVUaW1lRW5kJzooXzB4MzFhZTY1LF8weDNkMTA0YSk9PntfMHgyZDA3ZTYoXzB4M2QxMDRhLF8weDMxYWU2NSk7fSwnYXV0b0xvZyc6KF8weDM3ODA4LF8weDJhZDU1OCk9Pnt2YXIgXzB4MjI5MzhiPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4MTViNDZhKF8weDIyOTM4YigweGQ5KSxfMHgyYWQ1NTgsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHgzNzgwOF0pKTt9LCdhdXRvTG9nTWFueSc6KF8weDE2MWQ3ZSxfMHg0M2RlZGIpPT57dmFyIF8weDM3OTUwNj1fMHg0MDcyNDI7XzB4MmNmMjkwKF8weDE1YjQ2YShfMHgzNzk1MDYoMHhkOSksXzB4MTYxZDdlLF8weDRiZjc2YigpLF8weDI1MzUzNixfMHg0M2RlZGIpKTt9LCdhdXRvVHJhY2UnOihfMHgxMjE3ZTYsXzB4NDQ2NzA3KT0+e3ZhciBfMHgzYTUyNTI9XzB4NDA3MjQyO18weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKF8weDNhNTI1MigweDFhYiksXzB4NDQ2NzA3LF8weDRiZjc2YigpLF8weDI1MzUzNixbXzB4MTIxN2U2XSkpKTt9LCdhdXRvVHJhY2VNYW55JzooXzB4NWI3N2M0LF8weDRmYzQzYSk9Pnt2YXIgXzB4NWJmYmYyPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHg1YmZiZjIoMHgxYWIpLF8weDViNzdjNCxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4NGZjNDNhKSkpO30sJ2F1dG9UaW1lJzooXzB4MjQxODNhLF8weDQ0Mjc1OSxfMHgyOTZhNGMpPT57XzB4ZDU0ODZiKF8weDI5NmE0Yyk7fSwnYXV0b1RpbWVFbmQnOihfMHgyOTI3YTksXzB4MjQzZDMwLF8weDViZDYzYik9PntfMHgyZDA3ZTYoXzB4MjQzZDMwLF8weDViZDYzYik7fSwnY292ZXJhZ2UnOl8weDUxOWZjMj0+e3ZhciBfMHg0NTI1NTQ9XzB4NDA3MjQyO18weDJjZjI5MCh7J21ldGhvZCc6XzB4NDUyNTU0KDB4MTU2KSwndmVyc2lvbic6XzB4NGIwYWM4LCdhcmdzJzpbeydpZCc6XzB4NTE5ZmMyfV19KTt9fTtsZXQgXzB4MmNmMjkwPXEoXzB4MTc4OTFlLF8weDRmNGI5YyxfMHgzZmQ2ZDUsXzB4MWM1NDIyLF8weDQ3OWNhMixfMHgxMjM1ODAsXzB4MTg5NjlkKSxfMHgyNTM1MzY9XzB4MTc4OTFlW18weDQwNzI0MigweGYwKV07cmV0dXJuIF8weDE3ODkxZVsnX2NvbnNvbGVfbmluamEnXTt9KShnbG9iYWxUaGlzLF8weGZiNGY4OSgweDEwYyksJzYwNTkxJyxfMHhmYjRmODkoMHhkYyksJ3dlYnBhY2snLF8weGZiNGY4OSgweGQzKSwnMTcyNzk1MDAwNTAxNicsXzB4ZmI0Zjg5KDB4MWE2KSxfMHhmYjRmODkoMHhmYiksXzB4ZmI0Zjg5KDB4MTk3KSxfMHhmYjRmODkoMHgxM2EpKTtcIik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSB9XHJcbjsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fb28oaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlTG9nKGksIHYpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb19vbzsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fdHIoaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlVHJhY2UoaSwgdik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RyOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190eChpLCAuLi52KSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVFcnJvcihpLCB2KTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fdHg7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX3RzKHYpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZVRpbWUodik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RzOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190ZSh2LCBpKSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVUaW1lRW5kKHYsIGkpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb190ZTsgLyplc2xpbnQgdW5pY29ybi9uby1hYnVzaXZlLWVzbGludC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvZGlzYWJsZS1lbmFibGUtcGFpcjosZXNsaW50LWNvbW1lbnRzL25vLXVubGltaXRlZC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tYWdncmVnYXRpbmctZW5hYmxlOixlc2xpbnQtY29tbWVudHMvbm8tZHVwbGljYXRlLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby11bnVzZWQtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLXVudXNlZC1lbmFibGU6LCovXHJcbiIsImltcG9ydCB7IEFVRElPX1BBVEhfQlROX0NMSUNLIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGNsYXNzIEF1ZGlvUGxheWVyIHtcclxuICAgIGF1ZGlvQ29udGV4dDtcclxuICAgIHNvdXJjZU5vZGU7XHJcbiAgICBhdWRpb1F1ZXVlO1xyXG4gICAgcHJvbXB0QXVkaW9CdWZmZXI7XHJcbiAgICBjbGlja1NvdW5kQnVmZmVyO1xyXG4gICAgc3RhdGljIGF1ZGlvQnVmZmVycyA9IG5ldyBNYXAoKTtcclxuICAgIGF1ZGlvU291cmNzID0gW107XHJcbiAgICBpc0NsaWNrU291bmRMb2FkZWQ7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dCA9IEF1ZGlvQ29udGV4dE1hbmFnZXIuZ2V0QXVkaW9Db250ZXh0KCk7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmF1ZGlvUXVldWUgPSBbXTtcclxuICAgICAgICB0aGlzLmNsaWNrU291bmRCdWZmZXIgPSBudWxsOyAvLyBJbml0aWFsaXplIHRoZSBjbGlja1NvdW5kQnVmZmVyXHJcbiAgICAgICAgdGhpcy5pc0NsaWNrU291bmRMb2FkZWQgPSBmYWxzZTsgLy8gSW5pdGlhbGl6ZSBhcyBmYWxzZVxyXG4gICAgfVxyXG4gICAgYXN5bmMgcGxheUJ1dHRvbkNsaWNrU291bmQoKSB7XHJcbiAgICAgICAgY29uc3QgYXVkaW9TcmMgPSBBVURJT19QQVRIX0JUTl9DTElDSztcclxuICAgICAgICBpZiAoIXRoaXMuaXNDbGlja1NvdW5kTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIC8vIExvYWQgYW5kIGRlY29kZSB0aGUgYXVkaW8gb24gZGVtYW5kIGlmIGl0IGhhc24ndCBiZWVuIGxvYWRlZFxyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja1NvdW5kQnVmZmVyID0gYXdhaXQgdGhpcy5sb2FkQW5kRGVjb2RlQXVkaW8oYXVkaW9TcmMpO1xyXG4gICAgICAgICAgICAgICAgQXVkaW9QbGF5ZXIuYXVkaW9CdWZmZXJzLnNldChhdWRpb1NyYywgdGhpcy5jbGlja1NvdW5kQnVmZmVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNDbGlja1NvdW5kTG9hZGVkID0gdHJ1ZTsgLy8gU2V0IHRoZSBmbGFnIHRvIHRydWUgYWZ0ZXIgbG9hZGluZ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8gY29uc29sZS5lcnJvciguLi5vb190eChgMjkyODU2MjExNV8zM184XzMzXzcwXzExYCwgXCJFcnJvciBsb2FkaW5nIG9yIGRlY29kaW5nIGNsaWNrIHNvdW5kOlwiLCBlcnJvcikpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFBsYXkgdGhlIGF1ZGlvIHVzaW5nIHRoZSBidWZmZXIgaWYgaXQgZXhpc3RzXHJcbiAgICAgICAgaWYgKHRoaXMuY2xpY2tTb3VuZEJ1ZmZlcikge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VOb2RlID0gdGhpcy5hdWRpb0NvbnRleHQuY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuYnVmZmVyID0gdGhpcy5jbGlja1NvdW5kQnVmZmVyO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmVycm9yKC4uLm9vX3R4KGAyOTI4NTYyMTE1XzQ1XzZfNDVfNTlfMTFgLCBcIkNsaWNrIHNvdW5kIGJ1ZmZlciBpcyBub3QgYXZhaWxhYmxlLlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYXN5bmMgbG9hZEFuZERlY29kZUF1ZGlvKGF1ZGlvU3JjKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXVkaW9TcmMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlCdWZmZXIgPSBhd2FpdCByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXVkaW9CdWZmZXIgPSBhd2FpdCB0aGlzLmF1ZGlvQ29udGV4dC5kZWNvZGVBdWRpb0RhdGEoYXJyYXlCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShhdWRpb0J1ZmZlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmVycm9yKC4uLm9vX3R4KGAyOTI4NTYyMTE1XzU5XzhfNTlfNjRfMTFgLCBcIkVycm9yIGxvYWRpbmcgb3IgZGVjb2RpbmcgYXVkaW86XCIsIGVycm9yKSk7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBwcmVsb2FkUHJvbXB0QXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IHRoaXMubG9hZEFuZERlY29kZUF1ZGlvKGF1ZGlvU3JjKTtcclxuICAgICAgICBpZiAoYXVkaW9CdWZmZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9tcHRBdWRpb0J1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGFzeW5jIHByZWxvYWRHYW1lQXVkaW8oYXVkaW9TcmMpIHtcclxuICAgICAgICBpZiAoQXVkaW9QbGF5ZXIuYXVkaW9CdWZmZXJzLmhhcyhhdWRpb1NyYykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhdWRpb0J1ZmZlciA9IGF3YWl0IHRoaXMubG9hZEFuZERlY29kZUF1ZGlvKGF1ZGlvU3JjKTtcclxuICAgICAgICBpZiAoYXVkaW9CdWZmZXIpIHtcclxuICAgICAgICAgICAgQXVkaW9QbGF5ZXIuYXVkaW9CdWZmZXJzLnNldChhdWRpb1NyYywgYXVkaW9CdWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlBdWRpbyhhdWRpb1NyYykge1xyXG4gICAgICAgIGNvbnN0IGF1ZGlvQnVmZmVyID0gQXVkaW9QbGF5ZXIuYXVkaW9CdWZmZXJzLmdldChhdWRpb1NyYyk7XHJcbiAgICAgICAgaWYgKGF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZU5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5idWZmZXIgPSBhdWRpb0J1ZmZlcjtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1NvdXJjcy5wdXNoKHNvdXJjZU5vZGUpO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcGxheUZlZWRiYWNrQXVkaW9zID0gKGxvb3AgPSBmYWxzZSwgLi4uZmlsZVVybCkgPT4ge1xyXG4gICAgICAgIGlmIChmaWxlVXJsLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1F1ZXVlID0gZmlsZVVybDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5RmV0Y2goMCwgbG9vcCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHBsYXlQcm9tcHRBdWRpbyA9IChhdWRpb1NyYykgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb21wdEF1ZGlvQnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZU5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcclxuICAgICAgICAgICAgc291cmNlTm9kZS5idWZmZXIgPSB0aGlzLnByb21wdEF1ZGlvQnVmZmVyO1xyXG4gICAgICAgICAgICBzb3VyY2VOb2RlLmNvbm5lY3QodGhpcy5hdWRpb0NvbnRleHQuZGVzdGluYXRpb24pO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvU291cmNzLnB1c2goc291cmNlTm9kZSk7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuc3RhcnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgc3RvcEZlZWRiYWNrQXVkaW8gPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc291cmNlTm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmF1ZGlvUXVldWUgPSBbXTtcclxuICAgIH07XHJcbiAgICBzdG9wQWxsQXVkaW9zID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLnN0b3AoKTtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hdWRpb1F1ZXVlID0gW107XHJcbiAgICAgICAgdGhpcy5hdWRpb1NvdXJjcy5mb3JFYWNoKChzb3VyY2VOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgIHNvdXJjZU5vZGUuc3RvcCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYXVkaW9Tb3VyY3MgPSBbXTtcclxuICAgIH07XHJcbiAgICBwbGF5RmV0Y2ggPSAoaW5kZXgsIGxvb3ApID0+IHtcclxuICAgICAgICBpZiAoaW5kZXggPj0gdGhpcy5hdWRpb1F1ZXVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0b3BGZWVkYmFja0F1ZGlvKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9RdWV1ZVtpbmRleF0pIHtcclxuICAgICAgICAgICAgZmV0Y2godGhpcy5hdWRpb1F1ZXVlW2luZGV4XSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChidWZmZXIpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9Db250ZXh0Py5kZWNvZGVBdWRpb0RhdGEoYnVmZmVyLCAoYXVkaW9CdWZmZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dD8uY3JlYXRlQnVmZmVyU291cmNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmJ1ZmZlciA9IGF1ZGlvQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0Py5kZXN0aW5hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmxvb3AgPSBsb29wO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlTm9kZS5vbmVuZGVkID0gKCkgPT4gdGhpcy5oYW5kbGVBdWRpb0VuZGVkKGluZGV4LCBsb29wKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlQXVkaW9FbmRlZCA9IChpbmRleCwgbG9vcCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZU5vZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLm9uZW5kZWQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuc3RvcCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNvdXJjZU5vZGUgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBsYXlGZXRjaChpbmRleCArIDEsIGxvb3ApO1xyXG4gICAgfTtcclxufVxyXG5jbGFzcyBBdWRpb0NvbnRleHRNYW5hZ2VyIHtcclxuICAgIHN0YXRpYyBpbnN0YW5jZSA9IG51bGw7XHJcbiAgICBzdGF0aWMgZ2V0QXVkaW9Db250ZXh0KCkge1xyXG4gICAgICAgIGlmICghQXVkaW9Db250ZXh0TWFuYWdlci5pbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBBdWRpb0NvbnRleHRNYW5hZ2VyLmluc3RhbmNlID0gbmV3ICh3aW5kb3cuQXVkaW9Db250ZXh0IHx8XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cud2Via2l0QXVkaW9Db250ZXh0KSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gQXVkaW9Db250ZXh0TWFuYWdlci5pbnN0YW5jZTtcclxuICAgIH1cclxufVxyXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyAvKiBjOCBpZ25vcmUgc3RhcnQgKi8gLyogZXNsaW50LWRpc2FibGUgKi8gO1xyXG5mdW5jdGlvbiBvb19jbSgpIHsgdHJ5IHtcclxuICAgIHJldHVybiAoMCwgZXZhbCkoXCJnbG9iYWxUaGlzLl9jb25zb2xlX25pbmphXCIpIHx8ICgwLCBldmFsKShcIi8qIGh0dHBzOi8vZ2l0aHViLmNvbS93YWxsYWJ5anMvY29uc29sZS1uaW5qYSNob3ctZG9lcy1pdC13b3JrICovJ3VzZSBzdHJpY3QnO3ZhciBfMHhmYjRmODk9XzB4M2ZmOTsoZnVuY3Rpb24oXzB4MzNmZmNlLF8weDQ3NzZhYSl7dmFyIF8weDJhYzJkMj1fMHgzZmY5LF8weDZlMDIxMj1fMHgzM2ZmY2UoKTt3aGlsZSghIVtdKXt0cnl7dmFyIF8weDU2NmZlMT0tcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTIyKSkvMHgxKigtcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTZhKSkvMHgyKSstcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTRhKSkvMHgzKy1wYXJzZUludChfMHgyYWMyZDIoMHhjOSkpLzB4NCooLXBhcnNlSW50KF8weDJhYzJkMigweDE1YikpLzB4NSkrLXBhcnNlSW50KF8weDJhYzJkMigweDEyNykpLzB4NistcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTg3KSkvMHg3KihwYXJzZUludChfMHgyYWMyZDIoMHgxMDkpKS8weDgpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMjYpKS8weDkqKC1wYXJzZUludChfMHgyYWMyZDIoMHgxYmEpKS8weGEpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMmEpKS8weGIqKHBhcnNlSW50KF8weDJhYzJkMigweDExYikpLzB4Yyk7aWYoXzB4NTY2ZmUxPT09XzB4NDc3NmFhKWJyZWFrO2Vsc2UgXzB4NmUwMjEyWydwdXNoJ10oXzB4NmUwMjEyWydzaGlmdCddKCkpO31jYXRjaChfMHgyYzZjMWQpe18weDZlMDIxMlsncHVzaCddKF8weDZlMDIxMlsnc2hpZnQnXSgpKTt9fX0oXzB4MjZlZCwweGQ5NDA1KSk7ZnVuY3Rpb24gXzB4MjZlZCgpe3ZhciBfMHgyNTFmZWQ9WydvbmVycm9yJywnX2luTmV4dEVkZ2UnLCdkYXRlJywnY2xvc2UnLCdsb2cnLCdmdW5jTmFtZScsJ2FsbFN0ckxlbmd0aCcsXFxcImM6XFxcXFxcXFxVc2Vyc1xcXFxcXFxcc2hlZXJ3b29kY1xcXFxcXFxcLnZzY29kZVxcXFxcXFxcZXh0ZW5zaW9uc1xcXFxcXFxcd2FsbGFieWpzLmNvbnNvbGUtbmluamEtMS4wLjM2MFxcXFxcXFxcbm9kZV9tb2R1bGVzXFxcIiwnW29iamVjdFxcXFx4MjBEYXRlXScsJ251bWJlcicsJ2JpbmQnLCdnYXRld2F5LmRvY2tlci5pbnRlcm5hbCcsJ2Jvb2xlYW4nLCdfYWRkTG9hZE5vZGUnLCdwcm90b3R5cGUnLCdfYWRkUHJvcGVydHknLCdvbmNsb3NlJywnX3F1b3RlZFJlZ0V4cCcsJ19yZWdFeHBUb1N0cmluZycsJ3NwbGl0JywnZG9ja2VyaXplZEFwcCcsJ2VudW1lcmFibGUnLCdNYXAnLCd1cmwnLCdfU3ltYm9sJywndmFsdWVPZicsJ25vRnVuY3Rpb25zJywnX2NvbnNvbGVfbmluamFfc2Vzc2lvbicsJ3N0cmluZ2lmeScsJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZScsJ3RvdGFsU3RyTGVuZ3RoJywnbGVuZ3RoJywnb25tZXNzYWdlJywnbWF0Y2gnLCdkZWZhdWx0JywnX2Rpc3Bvc2VXZWJzb2NrZXQnLCdzb3J0UHJvcHMnLCdfY29ubmVjdEF0dGVtcHRDb3VudCcsJycsJ3VucmVmJywnc2VyaWFsaXplJywnX3NldE5vZGVQZXJtaXNzaW9ucycsJ3Vua25vd24nLCd0eXBlJywnX2lzTmVnYXRpdmVaZXJvJywnc3RyaW5nJywndG9VcHBlckNhc2UnLCdwZXJmb3JtYW5jZScsJ2V4cElkJywnZ2V0V2ViU29ja2V0Q2xhc3MnLCdnZXQnLCdzdHJMZW5ndGgnLCcxNmJ2bkpNZicsJ2ZvckVhY2gnLCd3cy9pbmRleC5qcycsJzEyNy4wLjAuMScsJ2F1dG9FeHBhbmRQcmV2aW91c09iamVjdHMnLCdjb25zdHJ1Y3RvcicsJ19oYXNTeW1ib2xQcm9wZXJ0eU9uSXRzUGF0aCcsJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50JywnX2NsZWFuTm9kZScsJ19zb2NrZXQnLCdDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBzZW5kXFxcXHgyMGxvZ3MsXFxcXHgyMHJlc3RhcnRpbmdcXFxceDIwdGhlXFxcXHgyMHByb2Nlc3NcXFxceDIwbWF5XFxcXHgyMGhlbHA7XFxcXHgyMGFsc29cXFxceDIwc2VlXFxcXHgyMCcsJ19zb3J0UHJvcHMnLCdhcmdzJywnY2FwcGVkUHJvcHMnLCdmYWlsZWRcXFxceDIwdG9cXFxceDIwY29ubmVjdFxcXFx4MjB0b1xcXFx4MjBob3N0OlxcXFx4MjAnLCdjb3VudCcsJ3NlbmQnLCdzZWVcXFxceDIwaHR0cHM6Ly90aW55dXJsLmNvbS8ydnQ4anh6d1xcXFx4MjBmb3JcXFxceDIwbW9yZVxcXFx4MjBpbmZvLicsJzIwNjcyNzZEVm96VFonLCdjYWxsJywndGltZVN0YW1wJywnbm93Jywnc3RhY2tUcmFjZUxpbWl0JywnZnVuY3Rpb24nLCdfaXNBcnJheScsJzdRYnFyYXcnLCdldmVudFJlY2VpdmVkQ2FsbGJhY2snLCduZWdhdGl2ZVplcm8nLCdfaGFzTWFwT25JdHNQYXRoJywnMTMxNEpTQ3JmUCcsJzIwOTU2OTJ1YkxMQkonLCdoaXRzJywnZ2V0T3duUHJvcGVydHlOYW1lcycsJzc3TmZUVXVLJywnX3NldE5vZGVJZCcsJ19pbkJyb3dzZXInLCdfd3MnLCdfZ2V0T3duUHJvcGVydHlTeW1ib2xzJywnRXJyb3InLCdfZGF0ZVRvU3RyaW5nJywnTnVtYmVyJywnZWRnZScsJ19jYXBJZlN0cmluZycsJ19hbGxvd2VkVG9Db25uZWN0T25TZW5kJywnbWVzc2FnZScsJ19rZXlTdHJSZWdFeHAnLCdTdHJpbmcnLCdleHByZXNzaW9uc1RvRXZhbHVhdGUnLCduZXh0LmpzJywnMScsJ3BhdGhUb0ZpbGVVUkwnLCdfdHlwZScsJ19pc1ByaW1pdGl2ZVdyYXBwZXJUeXBlJywnbWFwJywnX1dlYlNvY2tldENsYXNzJywnX2lzVW5kZWZpbmVkJywnX251bWJlclJlZ0V4cCcsJ2NhcHBlZEVsZW1lbnRzJywnb2JqZWN0JywnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QsXFxcXHgyMHNlZVxcXFx4MjAnLCdfV2ViU29ja2V0JywnYXV0b0V4cGFuZExpbWl0JywnW29iamVjdFxcXFx4MjBTZXRdJywnZW5kc1dpdGgnLCdyZW1peCcsJzE1OTIyNTN5TVB5dXknLCdwYXRoJywnY29uY2F0Jywnc29tZScsJ3RvU3RyaW5nJywnX2FkZGl0aW9uYWxNZXRhZGF0YScsJ19jb25zb2xlX25pbmphJywnX2dldE93blByb3BlcnR5TmFtZXMnLCdfb2JqZWN0VG9TdHJpbmcnLCdodHRwczovL3Rpbnl1cmwuY29tLzM3eDhiNzl0JywnQm9vbGVhbicsJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCcsJ2NvdmVyYWdlJywnd3M6Ly8nLCdyZWxvYWQnLCdkZXB0aCcsJ2dsb2JhbCcsJzQ2OTgzNW5XRnZvZycsJ2ZhaWxlZFxcXFx4MjB0b1xcXFx4MjBmaW5kXFxcXHgyMGFuZFxcXFx4MjBsb2FkXFxcXHgyMFdlYlNvY2tldCcsJ19IVE1MQWxsQ29sbGVjdGlvbicsJ19pc1NldCcsJ19hZGRGdW5jdGlvbnNOb2RlJywnbG9nZ2VyXFxcXHgyMHdlYnNvY2tldFxcXFx4MjBlcnJvcicsJ19ibGFja2xpc3RlZFByb3BlcnR5JywncG9wJywnQ29uc29sZVxcXFx4MjBOaW5qYVxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwc2VuZFxcXFx4MjBsb2dzLFxcXFx4MjByZWZyZXNoaW5nXFxcXHgyMHRoZVxcXFx4MjBwYWdlXFxcXHgyMG1heVxcXFx4MjBoZWxwO1xcXFx4MjBhbHNvXFxcXHgyMHNlZVxcXFx4MjAnLCdfaXNNYXAnLCdocnRpbWUnLCdyZXBsYWNlJywnX3VuZGVmaW5lZCcsJ190cmVlTm9kZVByb3BlcnRpZXNCZWZvcmVGdWxsVmFsdWUnLCdlbnYnLCc0ODI5NjhrQVFBaEYnLCdyb290X2V4cCcsJ19jb25uZWN0ZWQnLCdqb2luJywnaW5jbHVkZXMnLCdTeW1ib2wnLCdwcm9jZXNzJywncHVzaCcsJ2lzQXJyYXknLCdfaXNQcmltaXRpdmVUeXBlJywnY29uc29sZScsJ3Bvc2l0aXZlSW5maW5pdHknLCdfcF9sZW5ndGgnLCdfcmVjb25uZWN0VGltZW91dCcsJ3Rlc3QnLCdwZXJmX2hvb2tzJywnX3Byb2Nlc3NUcmVlTm9kZVJlc3VsdCcsJ2hvc3QnLCdlcnJvcicsJ3Byb3BzJywnc29ydCcsJ2JpZ2ludCcsJ1tvYmplY3RcXFxceDIwQXJyYXldJywnZWxhcHNlZCcsJ25vZGUnLCdjYXBwZWQnLCdyZWR1Y2VMaW1pdHMnLCdORUdBVElWRV9JTkZJTklUWScsJ2NyZWF0ZScsJzg0NjAxM3ViT0RSbicsJ2xldmVsJywnb3JpZ2luJywnYXN0cm8nLCdzdWJzdHInLCdfbmluamFJZ25vcmVOZXh0RXJyb3InLCdfYXR0ZW1wdFRvUmVjb25uZWN0U2hvcnRseScsJ19zZXROb2RlRXhwcmVzc2lvblBhdGgnLCdfd2ViU29ja2V0RXJyb3JEb2NzTGluaycsJ2dldE93blByb3BlcnR5U3ltYm9scycsJ29ub3BlbicsJ1BPU0lUSVZFX0lORklOSVRZJywncG9ydCcsJ0J1ZmZlcicsJ19zZW5kRXJyb3JNZXNzYWdlJywnX3NldE5vZGVFeHBhbmRhYmxlU3RhdGUnLCcnLCdyZXNvbHZlR2V0dGVycycsJ3RvTG93ZXJDYXNlJywncGFyc2UnLCdTZXQnLCdfY29ubmVjdGluZycsJ2NhdGNoJywnY3VycmVudCcsJ19nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCd2YWx1ZScsJ3RpbWUnLCdhdXRvRXhwYW5kJywnY2hhckF0JywnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZScsW1xcXCJsb2NhbGhvc3RcXFwiLFxcXCIxMjcuMC4wLjFcXFwiLFxcXCJleGFtcGxlLmN5cHJlc3MuaW9cXFwiLFxcXCJDRUItTEFQVE9QLTAwMDZcXFwiLFxcXCIxOTIuMTY4LjEuNzlcXFwiXSwnYXJyYXknLCdob3N0bmFtZScsJ2luZGV4Jywnd2FybicsJ3RyYWNlJywnLi4uJywndW5zaGlmdCcsJ19jb25uZWN0VG9Ib3N0Tm93JywnW29iamVjdFxcXFx4MjBNYXBdJywnc3RhY2snLCdcXFxceDIwc2VydmVyJywnZGF0YScsJ2dldFByb3RvdHlwZU9mJywnbnVsbCcsJ19wcm9wZXJ0eScsJ3N0YXJ0c1dpdGgnLCdhdXRvRXhwYW5kTWF4RGVwdGgnLCdmcm9tQ2hhckNvZGUnLCdyb290RXhwcmVzc2lvbicsJzg1MjkwRVhxVFlIJywnW29iamVjdFxcXFx4MjBCaWdJbnRdJywnX2FsbG93ZWRUb1NlbmQnLCdfc2V0Tm9kZUxhYmVsJywncm9vdF9leHBfaWQnLCdcXFxceDIwYnJvd3NlcicsJ0hUTUxBbGxDb2xsZWN0aW9uJywnbmFtZScsJ2Rpc2FibGVkVHJhY2UnLCdyZWFkeVN0YXRlJywnX3Byb3BlcnR5TmFtZScsJ19wXycsJ3N5bWJvbCcsJ3VuZGVmaW5lZCcsJ2VsZW1lbnRzJywnMTJpQ25SbGwnLCdfc2V0Tm9kZVF1ZXJ5UGF0aCcsJ3RoZW4nLCclY1xcXFx4MjBDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGV4dGVuc2lvblxcXFx4MjBpc1xcXFx4MjBjb25uZWN0ZWRcXFxceDIwdG9cXFxceDIwJywnV2ViU29ja2V0JywncGFyZW50JywnTkVYVF9SVU5USU1FJywnX2FkZE9iamVjdFByb3BlcnR5Jywnbm9kZU1vZHVsZXMnLCd2ZXJzaW9ucycsJzEuMC4wJywnaW5kZXhPZiddO18weDI2ZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4MjUxZmVkO307cmV0dXJuIF8weDI2ZWQoKTt9dmFyIEs9T2JqZWN0W18weGZiNGY4OSgweDE4NildLFE9T2JqZWN0WydkZWZpbmVQcm9wZXJ0eSddLEc9T2JqZWN0W18weGZiNGY4OSgweDFhNCldLGVlPU9iamVjdFtfMHhmYjRmODkoMHgxMjkpXSx0ZT1PYmplY3RbXzB4ZmI0Zjg5KDB4MWIzKV0sbmU9T2JqZWN0W18weGZiNGY4OSgweGUzKV1bJ2hhc093blByb3BlcnR5J10scmU9KF8weDU4YmM3YyxfMHg0ZGRkMGQsXzB4NDU2NjMwLF8weDNmMGJhYSk9Pnt2YXIgXzB4NGVhMDE4PV8weGZiNGY4OTtpZihfMHg0ZGRkMGQmJnR5cGVvZiBfMHg0ZGRkMGQ9PV8weDRlYTAxOCgweDE0Myl8fHR5cGVvZiBfMHg0ZGRkMGQ9PV8weDRlYTAxOCgweDEyMCkpe2ZvcihsZXQgXzB4NGQ1MzQ5IG9mIGVlKF8weDRkZGQwZCkpIW5lWydjYWxsJ10oXzB4NThiYzdjLF8weDRkNTM0OSkmJl8weDRkNTM0OSE9PV8weDQ1NjYzMCYmUShfMHg1OGJjN2MsXzB4NGQ1MzQ5LHsnZ2V0JzooKT0+XzB4NGRkZDBkW18weDRkNTM0OV0sJ2VudW1lcmFibGUnOiEoXzB4M2YwYmFhPUcoXzB4NGRkZDBkLF8weDRkNTM0OSkpfHxfMHgzZjBiYWFbXzB4NGVhMDE4KDB4ZWEpXX0pO31yZXR1cm4gXzB4NThiYzdjO30sVj0oXzB4MWNmYzA4LF8weDI4MTkzMCxfMHgxOTc0N2IpPT4oXzB4MTk3NDdiPV8weDFjZmMwOCE9bnVsbD9LKHRlKF8weDFjZmMwOCkpOnt9LHJlKF8weDI4MTkzMHx8IV8weDFjZmMwOHx8IV8weDFjZmMwOFsnX19lcycrJ01vZHVsZSddP1EoXzB4MTk3NDdiLF8weGZiNGY4OSgweGY3KSx7J3ZhbHVlJzpfMHgxY2ZjMDgsJ2VudW1lcmFibGUnOiEweDB9KTpfMHgxOTc0N2IsXzB4MWNmYzA4KSksWj1jbGFzc3tjb25zdHJ1Y3RvcihfMHgyN2RhM2QsXzB4MzNjODNmLF8weDUxNDIyZCxfMHgxYmQyN2YsXzB4MWYxNjI4LF8weDJjMjdmOSl7dmFyIF8weDMwYmFlMD1fMHhmYjRmODksXzB4ZGIyYWVlLF8weDIxNWI2YixfMHgzMzMwYTMsXzB4NTQxN2I1O3RoaXNbJ2dsb2JhbCddPV8weDI3ZGEzZCx0aGlzW18weDMwYmFlMCgweDE3YildPV8weDMzYzgzZix0aGlzW18weDMwYmFlMCgweDE5MyldPV8weDUxNDIyZCx0aGlzW18weDMwYmFlMCgweGQxKV09XzB4MWJkMjdmLHRoaXNbJ2RvY2tlcml6ZWRBcHAnXT1fMHgxZjE2MjgsdGhpc1tfMHgzMGJhZTAoMHgxMjMpXT1fMHgyYzI3ZjksdGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgwLHRoaXNbXzB4MzBiYWUwKDB4MTM0KV09ITB4MCx0aGlzW18weDMwYmFlMCgweDE2YyldPSEweDEsdGhpc1tfMHgzMGJhZTAoMHgxOWMpXT0hMHgxLHRoaXNbXzB4MzBiYWUwKDB4ZDYpXT0oKF8weDIxNWI2Yj0oXzB4ZGIyYWVlPV8weDI3ZGEzZFtfMHgzMGJhZTAoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4ZGIyYWVlW18weDMwYmFlMCgweDE2OSldKT09bnVsbD92b2lkIDB4MDpfMHgyMTViNmJbXzB4MzBiYWUwKDB4Y2YpXSk9PT1fMHgzMGJhZTAoMHgxMzIpLHRoaXNbXzB4MzBiYWUwKDB4MTJjKV09ISgoXzB4NTQxN2I1PShfMHgzMzMwYTM9dGhpc1tfMHgzMGJhZTAoMHgxNWEpXVsncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgzMzMwYTNbXzB4MzBiYWUwKDB4ZDIpXSkhPW51bGwmJl8weDU0MTdiNVsnbm9kZSddKSYmIXRoaXNbJ19pbk5leHRFZGdlJ10sdGhpc1snX1dlYlNvY2tldENsYXNzJ109bnVsbCx0aGlzW18weDMwYmFlMCgweGZhKV09MHgwLHRoaXNbJ19tYXhDb25uZWN0QXR0ZW1wdENvdW50J109MHgxNCx0aGlzW18weDMwYmFlMCgweDE4ZildPV8weDMwYmFlMCgweDE1MyksdGhpc1tfMHgzMGJhZTAoMHgxOTUpXT0odGhpc1tfMHgzMGJhZTAoMHgxMmMpXT9fMHgzMGJhZTAoMHgxNjMpOl8weDMwYmFlMCgweDExMykpK3RoaXNbJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJ107fWFzeW5jWydnZXRXZWJTb2NrZXRDbGFzcyddKCl7dmFyIF8weDVhZmE5Yj1fMHhmYjRmODksXzB4MmQ5Zjk2LF8weDU2NTA1ODtpZih0aGlzW18weDVhZmE5YigweDEzZildKXJldHVybiB0aGlzWydfV2ViU29ja2V0Q2xhc3MnXTtsZXQgXzB4MmUxMmMzO2lmKHRoaXNbXzB4NWFmYTliKDB4MTJjKV18fHRoaXNbXzB4NWFmYTliKDB4ZDYpXSlfMHgyZTEyYzM9dGhpc1tfMHg1YWZhOWIoMHgxNWEpXVtfMHg1YWZhOWIoMHhjZCldO2Vsc2V7aWYoKF8weDJkOWY5Nj10aGlzW18weDVhZmE5YigweDE1YSldWydwcm9jZXNzJ10pIT1udWxsJiZfMHgyZDlmOTZbXzB4NWFmYTliKDB4MTQ1KV0pXzB4MmUxMmMzPShfMHg1NjUwNTg9dGhpc1snZ2xvYmFsJ11bXzB4NWFmYTliKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDU2NTA1OFtfMHg1YWZhOWIoMHgxNDUpXTtlbHNlIHRyeXtsZXQgXzB4NTVhOGE3PWF3YWl0IGltcG9ydChfMHg1YWZhOWIoMHgxNGIpKTtfMHgyZTEyYzM9KGF3YWl0IGltcG9ydCgoYXdhaXQgaW1wb3J0KF8weDVhZmE5YigweGVjKSkpW18weDVhZmE5YigweDEzYildKF8weDU1YThhN1tfMHg1YWZhOWIoMHgxNmQpXSh0aGlzW18weDVhZmE5YigweGQxKV0sXzB4NWFmYTliKDB4MTBiKSkpW18weDVhZmE5YigweDE0ZSldKCkpKVsnZGVmYXVsdCddO31jYXRjaHt0cnl7XzB4MmUxMmMzPXJlcXVpcmUocmVxdWlyZShfMHg1YWZhOWIoMHgxNGIpKVtfMHg1YWZhOWIoMHgxNmQpXSh0aGlzW18weDVhZmE5YigweGQxKV0sJ3dzJykpO31jYXRjaHt0aHJvdyBuZXcgRXJyb3IoXzB4NWFmYTliKDB4MTVjKSk7fX19cmV0dXJuIHRoaXNbXzB4NWFmYTliKDB4MTNmKV09XzB4MmUxMmMzLF8weDJlMTJjMzt9W18weGZiNGY4OSgweDFhZSldKCl7dmFyIF8weDNjYWQ2MD1fMHhmYjRmODk7dGhpc1tfMHgzY2FkNjAoMHgxOWMpXXx8dGhpc1tfMHgzY2FkNjAoMHgxNmMpXXx8dGhpc1snX2Nvbm5lY3RBdHRlbXB0Q291bnQnXT49dGhpc1snX21heENvbm5lY3RBdHRlbXB0Q291bnQnXXx8KHRoaXNbXzB4M2NhZDYwKDB4MTM0KV09ITB4MSx0aGlzW18weDNjYWQ2MCgweDE5YyldPSEweDAsdGhpc1tfMHgzY2FkNjAoMHhmYSldKyssdGhpc1tfMHgzY2FkNjAoMHgxMmQpXT1uZXcgUHJvbWlzZSgoXzB4MzQzYWJkLF8weGJhMDg4Yik9Pnt2YXIgXzB4MTEzMTFhPV8weDNjYWQ2MDt0aGlzW18weDExMzExYSgweDEwNildKClbXzB4MTEzMTFhKDB4Y2IpXShfMHhiMDk0NTA9Pnt2YXIgXzB4NDNmYWRhPV8weDExMzExYTtsZXQgXzB4Mzg3NzQ5PW5ldyBfMHhiMDk0NTAoXzB4NDNmYWRhKDB4MTU3KSsoIXRoaXNbXzB4NDNmYWRhKDB4MTJjKV0mJnRoaXNbXzB4NDNmYWRhKDB4ZTkpXT9fMHg0M2ZhZGEoMHhlMCk6dGhpc1tfMHg0M2ZhZGEoMHgxN2IpXSkrJzonK3RoaXNbXzB4NDNmYWRhKDB4MTkzKV0pO18weDM4Nzc0OVsnb25lcnJvciddPSgpPT57dmFyIF8weDQ1M2NiNz1fMHg0M2ZhZGE7dGhpc1snX2FsbG93ZWRUb1NlbmQnXT0hMHgxLHRoaXNbXzB4NDUzY2I3KDB4ZjgpXShfMHgzODc3NDkpLHRoaXNbXzB4NDUzY2I3KDB4MThkKV0oKSxfMHhiYTA4OGIobmV3IEVycm9yKF8weDQ1M2NiNygweDE2MCkpKTt9LF8weDM4Nzc0OVtfMHg0M2ZhZGEoMHgxOTEpXT0oKT0+e3ZhciBfMHhkYWY0N2M9XzB4NDNmYWRhO3RoaXNbXzB4ZGFmNDdjKDB4MTJjKV18fF8weDM4Nzc0OVsnX3NvY2tldCddJiZfMHgzODc3NDlbXzB4ZGFmNDdjKDB4MTEyKV1bXzB4ZGFmNDdjKDB4ZmMpXSYmXzB4Mzg3NzQ5W18weGRhZjQ3YygweDExMildWyd1bnJlZiddKCksXzB4MzQzYWJkKF8weDM4Nzc0OSk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4ZTUpXT0oKT0+e3ZhciBfMHhjNTY3NDg9XzB4NDNmYWRhO3RoaXNbXzB4YzU2NzQ4KDB4MTM0KV09ITB4MCx0aGlzW18weGM1Njc0OCgweGY4KV0oXzB4Mzg3NzQ5KSx0aGlzW18weGM1Njc0OCgweDE4ZCldKCk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4ZjUpXT1fMHg0N2VkM2E9Pnt2YXIgXzB4MjhmNTgwPV8weDQzZmFkYTt0cnl7aWYoIShfMHg0N2VkM2EhPW51bGwmJl8weDQ3ZWQzYVtfMHgyOGY1ODAoMHgxYjIpXSl8fCF0aGlzW18weDI4ZjU4MCgweDEyMyldKXJldHVybjtsZXQgXzB4NDc5ZWU1PUpTT05bXzB4MjhmNTgwKDB4MTlhKV0oXzB4NDdlZDNhWydkYXRhJ10pO3RoaXNbXzB4MjhmNTgwKDB4MTIzKV0oXzB4NDc5ZWU1WydtZXRob2QnXSxfMHg0NzllZTVbXzB4MjhmNTgwKDB4MTE1KV0sdGhpc1tfMHgyOGY1ODAoMHgxNWEpXSx0aGlzW18weDI4ZjU4MCgweDEyYyldKTt9Y2F0Y2h7fX07fSlbXzB4MTEzMTFhKDB4Y2IpXShfMHgxMzUyMD0+KHRoaXNbJ19jb25uZWN0ZWQnXT0hMHgwLHRoaXNbJ19jb25uZWN0aW5nJ109ITB4MSx0aGlzW18weDExMzExYSgweDEzNCldPSEweDEsdGhpc1tfMHgxMTMxMWEoMHhiYyldPSEweDAsdGhpc1tfMHgxMTMxMWEoMHhmYSldPTB4MCxfMHgxMzUyMCkpW18weDExMzExYSgweDE5ZCldKF8weDE4ZjFhOT0+KHRoaXNbXzB4MTEzMTFhKDB4MTZjKV09ITB4MSx0aGlzW18weDExMzExYSgweDE5YyldPSEweDEsY29uc29sZVtfMHgxMTMxMWEoMHgxYWEpXShfMHgxMTMxMWEoMHgxNDQpK3RoaXNbJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJ10pLF8weGJhMDg4YihuZXcgRXJyb3IoXzB4MTEzMTFhKDB4MTE3KSsoXzB4MThmMWE5JiZfMHgxOGYxYTlbJ21lc3NhZ2UnXSkpKSkpO30pKTt9WydfZGlzcG9zZVdlYnNvY2tldCddKF8weDM0NzI1OSl7dmFyIF8weDU1MTg4ZD1fMHhmYjRmODk7dGhpc1tfMHg1NTE4OGQoMHgxNmMpXT0hMHgxLHRoaXNbXzB4NTUxODhkKDB4MTljKV09ITB4MTt0cnl7XzB4MzQ3MjU5WydvbmNsb3NlJ109bnVsbCxfMHgzNDcyNTlbXzB4NTUxODhkKDB4ZDUpXT1udWxsLF8weDM0NzI1OVtfMHg1NTE4OGQoMHgxOTEpXT1udWxsO31jYXRjaHt9dHJ5e18weDM0NzI1OVtfMHg1NTE4OGQoMHhjMyldPDB4MiYmXzB4MzQ3MjU5W18weDU1MTg4ZCgweGQ4KV0oKTt9Y2F0Y2h7fX1bJ19hdHRlbXB0VG9SZWNvbm5lY3RTaG9ydGx5J10oKXt2YXIgXzB4MzY2NjI3PV8weGZiNGY4OTtjbGVhclRpbWVvdXQodGhpc1tfMHgzNjY2MjcoMHgxNzcpXSksISh0aGlzWydfY29ubmVjdEF0dGVtcHRDb3VudCddPj10aGlzWydfbWF4Q29ubmVjdEF0dGVtcHRDb3VudCddKSYmKHRoaXNbXzB4MzY2NjI3KDB4MTc3KV09c2V0VGltZW91dCgoKT0+e3ZhciBfMHg0MTFiN2I9XzB4MzY2NjI3LF8weDVlOGYzNDt0aGlzW18weDQxMWI3YigweDE2YyldfHx0aGlzW18weDQxMWI3YigweDE5YyldfHwodGhpc1tfMHg0MTFiN2IoMHgxYWUpXSgpLChfMHg1ZThmMzQ9dGhpc1tfMHg0MTFiN2IoMHgxMmQpXSk9PW51bGx8fF8weDVlOGYzNFtfMHg0MTFiN2IoMHgxOWQpXSgoKT0+dGhpc1tfMHg0MTFiN2IoMHgxOGQpXSgpKSk7fSwweDFmNCksdGhpc1snX3JlY29ubmVjdFRpbWVvdXQnXVtfMHgzNjY2MjcoMHhmYyldJiZ0aGlzW18weDM2NjYyNygweDE3NyldW18weDM2NjYyNygweGZjKV0oKSk7fWFzeW5jW18weGZiNGY4OSgweDExOSldKF8weDIzZjUxZSl7dmFyIF8weDMzNzk1OT1fMHhmYjRmODk7dHJ5e2lmKCF0aGlzWydfYWxsb3dlZFRvU2VuZCddKXJldHVybjt0aGlzW18weDMzNzk1OSgweDEzNCldJiZ0aGlzW18weDMzNzk1OSgweDFhZSldKCksKGF3YWl0IHRoaXNbJ193cyddKVsnc2VuZCddKEpTT05bXzB4MzM3OTU5KDB4ZjEpXShfMHgyM2Y1MWUpKTt9Y2F0Y2goXzB4NWIwZmJjKXtjb25zb2xlWyd3YXJuJ10odGhpc1tfMHgzMzc5NTkoMHgxOTUpXSsnOlxcXFx4MjAnKyhfMHg1YjBmYmMmJl8weDViMGZiY1tfMHgzMzc5NTkoMHgxMzUpXSkpLHRoaXNbXzB4MzM3OTU5KDB4YmMpXT0hMHgxLHRoaXNbXzB4MzM3OTU5KDB4MThkKV0oKTt9fX07ZnVuY3Rpb24gcShfMHgyNGRhZWIsXzB4YjZmNTE5LF8weDU1MmE4MyxfMHg0MTcyY2YsXzB4NzZkYmI3LF8weDUwNjg0MyxfMHhiZjc1YWMsXzB4M2FjMmM0PWllKXt2YXIgXzB4NWI5ZDY0PV8weGZiNGY4OTtsZXQgXzB4NGI5MzczPV8weDU1MmE4M1tfMHg1YjlkNjQoMHhlOCldKCcsJylbXzB4NWI5ZDY0KDB4MTNlKV0oXzB4NWRiZmU0PT57dmFyIF8weDY2YzcxYj1fMHg1YjlkNjQsXzB4OWUxNjY4LF8weDVhMzdkNSxfMHgxM2EwY2MsXzB4M2UzY2M2O3RyeXtpZighXzB4MjRkYWViW18weDY2YzcxYigweGYwKV0pe2xldCBfMHgyODBmNzA9KChfMHg1YTM3ZDU9KF8weDllMTY2OD1fMHgyNGRhZWJbXzB4NjZjNzFiKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDllMTY2OFsndmVyc2lvbnMnXSk9PW51bGw/dm9pZCAweDA6XzB4NWEzN2Q1W18weDY2YzcxYigweDE4MildKXx8KChfMHgzZTNjYzY9KF8weDEzYTBjYz1fMHgyNGRhZWJbXzB4NjZjNzFiKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDEzYTBjY1tfMHg2NmM3MWIoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4M2UzY2M2W18weDY2YzcxYigweGNmKV0pPT09XzB4NjZjNzFiKDB4MTMyKTsoXzB4NzZkYmI3PT09J25leHQuanMnfHxfMHg3NmRiYjc9PT1fMHg2NmM3MWIoMHgxNDkpfHxfMHg3NmRiYjc9PT1fMHg2NmM3MWIoMHgxOGEpfHxfMHg3NmRiYjc9PT0nYW5ndWxhcicpJiYoXzB4NzZkYmI3Kz1fMHgyODBmNzA/XzB4NjZjNzFiKDB4MWIxKTpfMHg2NmM3MWIoMHhiZikpLF8weDI0ZGFlYlsnX2NvbnNvbGVfbmluamFfc2Vzc2lvbiddPXsnaWQnOituZXcgRGF0ZSgpLCd0b29sJzpfMHg3NmRiYjd9LF8weGJmNzVhYyYmXzB4NzZkYmI3JiYhXzB4MjgwZjcwJiZjb25zb2xlW18weDY2YzcxYigweGQ5KV0oXzB4NjZjNzFiKDB4Y2MpKyhfMHg3NmRiYjdbXzB4NjZjNzFiKDB4MWEzKV0oMHgwKVtfMHg2NmM3MWIoMHgxMDMpXSgpK18weDc2ZGJiN1tfMHg2NmM3MWIoMHgxOGIpXSgweDEpKSsnLCcsJ2JhY2tncm91bmQ6XFxcXHgyMHJnYigzMCwzMCwzMCk7XFxcXHgyMGNvbG9yOlxcXFx4MjByZ2IoMjU1LDIxMyw5MiknLF8weDY2YzcxYigweDExYSkpO31sZXQgXzB4MTRjNjAwPW5ldyBaKF8weDI0ZGFlYixfMHhiNmY1MTksXzB4NWRiZmU0LF8weDQxNzJjZixfMHg1MDY4NDMsXzB4M2FjMmM0KTtyZXR1cm4gXzB4MTRjNjAwW18weDY2YzcxYigweDExOSldW18weDY2YzcxYigweGRmKV0oXzB4MTRjNjAwKTt9Y2F0Y2goXzB4OWVmOGRiKXtyZXR1cm4gY29uc29sZVtfMHg2NmM3MWIoMHgxYWEpXSgnbG9nZ2VyXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3QnLF8weDllZjhkYiYmXzB4OWVmOGRiWydtZXNzYWdlJ10pLCgpPT57fTt9fSk7cmV0dXJuIF8weDQxODEyMD0+XzB4NGI5MzczWydmb3JFYWNoJ10oXzB4MjhjOWE1PT5fMHgyOGM5YTUoXzB4NDE4MTIwKSk7fWZ1bmN0aW9uIF8weDNmZjkoXzB4ZTY3ODM4LF8weDZkMTQ4Nil7dmFyIF8weDI2ZWQ2OD1fMHgyNmVkKCk7cmV0dXJuIF8weDNmZjk9ZnVuY3Rpb24oXzB4M2ZmOTIwLF8weDQ4OTMyOSl7XzB4M2ZmOTIwPV8weDNmZjkyMC0weGJiO3ZhciBfMHgzOTk1Y2M9XzB4MjZlZDY4W18weDNmZjkyMF07cmV0dXJuIF8weDM5OTVjYzt9LF8weDNmZjkoXzB4ZTY3ODM4LF8weDZkMTQ4Nik7fWZ1bmN0aW9uIGllKF8weDU3NzI3ZixfMHg0YjM3YzcsXzB4MTRkYWJkLF8weDViOTBhOSl7dmFyIF8weDQ0MDg5OT1fMHhmYjRmODk7XzB4NWI5MGE5JiZfMHg1NzcyN2Y9PT1fMHg0NDA4OTkoMHgxNTgpJiZfMHgxNGRhYmRbJ2xvY2F0aW9uJ11bJ3JlbG9hZCddKCk7fWZ1bmN0aW9uIEIoXzB4MjZjOWFjKXt2YXIgXzB4NDdmMDg1PV8weGZiNGY4OSxfMHgzZWNiN2EsXzB4NDdiNTE2O2xldCBfMHgyMjA4MDY9ZnVuY3Rpb24oXzB4M2EwMjBlLF8weDUzYzY5YSl7cmV0dXJuIF8weDUzYzY5YS1fMHgzYTAyMGU7fSxfMHgyMTA4YzI7aWYoXzB4MjZjOWFjW18weDQ3ZjA4NSgweDEwNCldKV8weDIxMDhjMj1mdW5jdGlvbigpe3ZhciBfMHgzMzc0MjM9XzB4NDdmMDg1O3JldHVybiBfMHgyNmM5YWNbXzB4MzM3NDIzKDB4MTA0KV1bXzB4MzM3NDIzKDB4MTFlKV0oKTt9O2Vsc2V7aWYoXzB4MjZjOWFjW18weDQ3ZjA4NSgweDE3MCldJiZfMHgyNmM5YWNbXzB4NDdmMDg1KDB4MTcwKV1bXzB4NDdmMDg1KDB4MTY1KV0mJigoXzB4NDdiNTE2PShfMHgzZWNiN2E9XzB4MjZjOWFjWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDNlY2I3YVtfMHg0N2YwODUoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4NDdiNTE2WydORVhUX1JVTlRJTUUnXSkhPT0nZWRnZScpXzB4MjEwOGMyPWZ1bmN0aW9uKCl7cmV0dXJuIF8weDI2YzlhY1sncHJvY2VzcyddWydocnRpbWUnXSgpO30sXzB4MjIwODA2PWZ1bmN0aW9uKF8weDM0MWZiMyxfMHgyYzY2MTgpe3JldHVybiAweDNlOCooXzB4MmM2NjE4WzB4MF0tXzB4MzQxZmIzWzB4MF0pKyhfMHgyYzY2MThbMHgxXS1fMHgzNDFmYjNbMHgxXSkvMHhmNDI0MDt9O2Vsc2UgdHJ5e2xldCB7cGVyZm9ybWFuY2U6XzB4NDE2YTUyfT1yZXF1aXJlKF8weDQ3ZjA4NSgweDE3OSkpO18weDIxMDhjMj1mdW5jdGlvbigpe3ZhciBfMHg0ODE1MGY9XzB4NDdmMDg1O3JldHVybiBfMHg0MTZhNTJbXzB4NDgxNTBmKDB4MTFlKV0oKTt9O31jYXRjaHtfMHgyMTA4YzI9ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGUoKTt9O319cmV0dXJueydlbGFwc2VkJzpfMHgyMjA4MDYsJ3RpbWVTdGFtcCc6XzB4MjEwOGMyLCdub3cnOigpPT5EYXRlWydub3cnXSgpfTt9ZnVuY3Rpb24gSChfMHhjYmRjMjAsXzB4MWNlMjQyLF8weDFiNjZjZil7dmFyIF8weGExMzgyNT1fMHhmYjRmODksXzB4MzZlMjZmLF8weDJkNjUyYyxfMHg1ZTczZjMsXzB4MjFhYzQ1LF8weDE3ZWI3OTtpZihfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddIT09dm9pZCAweDApcmV0dXJuIF8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNTUpXTtsZXQgXzB4NDBiYjJiPSgoXzB4MmQ2NTJjPShfMHgzNmUyNmY9XzB4Y2JkYzIwWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDM2ZTI2ZltfMHhhMTM4MjUoMHhkMildKT09bnVsbD92b2lkIDB4MDpfMHgyZDY1MmNbXzB4YTEzODI1KDB4MTgyKV0pfHwoKF8weDIxYWM0NT0oXzB4NWU3M2YzPV8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4NWU3M2YzWydlbnYnXSk9PW51bGw/dm9pZCAweDA6XzB4MjFhYzQ1W18weGExMzgyNSgweGNmKV0pPT09J2VkZ2UnO2Z1bmN0aW9uIF8weDNlOGNkOChfMHgzNzg3ZDYpe3ZhciBfMHg1MjUzMGE9XzB4YTEzODI1O2lmKF8weDM3ODdkNltfMHg1MjUzMGEoMHgxYjYpXSgnLycpJiZfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MTQ4KV0oJy8nKSl7bGV0IF8weDUyMzgxNT1uZXcgUmVnRXhwKF8weDM3ODdkNlsnc2xpY2UnXSgweDEsLTB4MSkpO3JldHVybiBfMHg1ZWJmMmE9Pl8weDUyMzgxNVtfMHg1MjUzMGEoMHgxNzgpXShfMHg1ZWJmMmEpO31lbHNle2lmKF8weDM3ODdkNlsnaW5jbHVkZXMnXSgnKicpfHxfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MTZlKV0oJz8nKSl7bGV0IF8weDE4NWU5NT1uZXcgUmVnRXhwKCdeJytfMHgzNzg3ZDZbJ3JlcGxhY2UnXSgvXFxcXC4vZyxTdHJpbmdbXzB4NTI1MzBhKDB4MWI4KV0oMHg1YykrJy4nKVsncmVwbGFjZSddKC9cXFxcKi9nLCcuKicpWydyZXBsYWNlJ10oL1xcXFw/L2csJy4nKStTdHJpbmdbXzB4NTI1MzBhKDB4MWI4KV0oMHgyNCkpO3JldHVybiBfMHgxNzU4NjM9Pl8weDE4NWU5NVtfMHg1MjUzMGEoMHgxNzgpXShfMHgxNzU4NjMpO31lbHNlIHJldHVybiBfMHgyNzRlY2M9Pl8weDI3NGVjYz09PV8weDM3ODdkNjt9fWxldCBfMHg0YjYxNzE9XzB4MWNlMjQyWydtYXAnXShfMHgzZThjZDgpO3JldHVybiBfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddPV8weDQwYmIyYnx8IV8weDFjZTI0MiwhXzB4Y2JkYzIwWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXSYmKChfMHgxN2ViNzk9XzB4Y2JkYzIwWydsb2NhdGlvbiddKT09bnVsbD92b2lkIDB4MDpfMHgxN2ViNzlbXzB4YTEzODI1KDB4MWE4KV0pJiYoXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldPV8weDRiNjE3MVtfMHhhMTM4MjUoMHgxNGQpXShfMHg1YzEwZjE9Pl8weDVjMTBmMShfMHhjYmRjMjBbJ2xvY2F0aW9uJ11bJ2hvc3RuYW1lJ10pKSksXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldO31mdW5jdGlvbiBYKF8weDM2M2Q1NSxfMHgxZDkxNjksXzB4NDZjYTkwLF8weDQ2ZjY3Yyl7dmFyIF8weDEwZWQyOD1fMHhmYjRmODk7XzB4MzYzZDU1PV8weDM2M2Q1NSxfMHgxZDkxNjk9XzB4MWQ5MTY5LF8weDQ2Y2E5MD1fMHg0NmNhOTAsXzB4NDZmNjdjPV8weDQ2ZjY3YztsZXQgXzB4OTJhYzFlPUIoXzB4MzYzZDU1KSxfMHgyMjRmZmI9XzB4OTJhYzFlW18weDEwZWQyOCgweDE4MSldLF8weDRlYmVmOD1fMHg5MmFjMWVbXzB4MTBlZDI4KDB4MTFkKV07Y2xhc3MgXzB4MzI4YmRle2NvbnN0cnVjdG9yKCl7dmFyIF8weDNjMmFjYz1fMHgxMGVkMjg7dGhpc1tfMHgzYzJhY2MoMHgxMzYpXT0vXig/ISg/OmRvfGlmfGlufGZvcnxsZXR8bmV3fHRyeXx2YXJ8Y2FzZXxlbHNlfGVudW18ZXZhbHxmYWxzZXxudWxsfHRoaXN8dHJ1ZXx2b2lkfHdpdGh8YnJlYWt8Y2F0Y2h8Y2xhc3N8Y29uc3R8c3VwZXJ8dGhyb3d8d2hpbGV8eWllbGR8ZGVsZXRlfGV4cG9ydHxpbXBvcnR8cHVibGljfHJldHVybnxzdGF0aWN8c3dpdGNofHR5cGVvZnxkZWZhdWx0fGV4dGVuZHN8ZmluYWxseXxwYWNrYWdlfHByaXZhdGV8Y29udGludWV8ZGVidWdnZXJ8ZnVuY3Rpb258YXJndW1lbnRzfGludGVyZmFjZXxwcm90ZWN0ZWR8aW1wbGVtZW50c3xpbnN0YW5jZW9mKSQpW18kYS16QS1aXFxcXHhBMC1cXFxcdUZGRkZdW18kYS16QS1aMC05XFxcXHhBMC1cXFxcdUZGRkZdKiQvLHRoaXNbXzB4M2MyYWNjKDB4MTQxKV09L14oMHxbMS05XVswLTldKikkLyx0aGlzW18weDNjMmFjYygweGU2KV09LycoW15cXFxcXFxcXCddfFxcXFxcXFxcJykqJy8sdGhpc1tfMHgzYzJhY2MoMHgxNjcpXT1fMHgzNjNkNTVbXzB4M2MyYWNjKDB4YzcpXSx0aGlzW18weDNjMmFjYygweDE1ZCldPV8weDM2M2Q1NVsnSFRNTEFsbENvbGxlY3Rpb24nXSx0aGlzW18weDNjMmFjYygweDE5ZildPU9iamVjdFtfMHgzYzJhY2MoMHgxYTQpXSx0aGlzWydfZ2V0T3duUHJvcGVydHlOYW1lcyddPU9iamVjdFtfMHgzYzJhY2MoMHgxMjkpXSx0aGlzW18weDNjMmFjYygweGVkKV09XzB4MzYzZDU1W18weDNjMmFjYygweDE2ZildLHRoaXNbJ19yZWdFeHBUb1N0cmluZyddPVJlZ0V4cFsncHJvdG90eXBlJ11bXzB4M2MyYWNjKDB4MTRlKV0sdGhpc1tfMHgzYzJhY2MoMHgxMzApXT1EYXRlW18weDNjMmFjYygweGUzKV1bXzB4M2MyYWNjKDB4MTRlKV07fVtfMHgxMGVkMjgoMHhmZCldKF8weDU4NjNlMCxfMHg1NjM2NzUsXzB4MjVkZGU4LF8weDQyMzVhYil7dmFyIF8weDVlYWM5Nz1fMHgxMGVkMjgsXzB4MTVkMmFlPXRoaXMsXzB4NDhhNTU4PV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXTtmdW5jdGlvbiBfMHgzNGMwZDQoXzB4Mjk1OWQwLF8weDNlMzMzYyxfMHg2ZWM5NmUpe3ZhciBfMHgyOWFkN2I9XzB4NWVhYzk3O18weDNlMzMzY1tfMHgyOWFkN2IoMHgxMDApXT1fMHgyOWFkN2IoMHhmZiksXzB4M2UzMzNjW18weDI5YWQ3YigweDE3YyldPV8weDI5NTlkMFtfMHgyOWFkN2IoMHgxMzUpXSxfMHgyYTA5OGI9XzB4NmVjOTZlW18weDI5YWQ3YigweDE4MildW18weDI5YWQ3YigweDE5ZSldLF8weDZlYzk2ZVtfMHgyOWFkN2IoMHgxODIpXVtfMHgyOWFkN2IoMHgxOWUpXT1fMHgzZTMzM2MsXzB4MTVkMmFlW18weDI5YWQ3YigweDE2OCldKF8weDNlMzMzYyxfMHg2ZWM5NmUpO310cnl7XzB4MjVkZGU4WydsZXZlbCddKyssXzB4MjVkZGU4WydhdXRvRXhwYW5kJ10mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMGQpXVtfMHg1ZWFjOTcoMHgxNzEpXShfMHg1NjM2NzUpO3ZhciBfMHg1ZTkzN2QsXzB4NGQ0ODM3LF8weDdhOTRjZSxfMHgxMmU0MzcsXzB4NTQyNzNjPVtdLF8weDMwNzZkMz1bXSxfMHg0YTI3ZDUsXzB4MWYxYWEwPXRoaXNbXzB4NWVhYzk3KDB4MTNjKV0oXzB4NTYzNjc1KSxfMHgxZmU4ZmM9XzB4MWYxYWEwPT09J2FycmF5JyxfMHgxZDlkMzM9ITB4MSxfMHgxZjdjZmU9XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4MTIwKSxfMHgzMDg0YWU9dGhpc1tfMHg1ZWFjOTcoMHgxNzMpXShfMHgxZjFhYTApLF8weGMzNWJjNz10aGlzW18weDVlYWM5NygweDEzZCldKF8weDFmMWFhMCksXzB4NDhkOWUxPV8weDMwODRhZXx8XzB4YzM1YmM3LF8weDU5MDQ0OT17fSxfMHgyOWZjMjg9MHgwLF8weDMxYjAyMj0hMHgxLF8weDJhMDk4YixfMHgxNGUyYTY9L14oKFsxLTldezF9WzAtOV0qKXwwKSQvO2lmKF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNTkpXSl7aWYoXzB4MWZlOGZjKXtpZihfMHg0ZDQ4Mzc9XzB4NTYzNjc1W18weDVlYWM5NygweGY0KV0sXzB4NGQ0ODM3Pl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHhjOCldKXtmb3IoXzB4N2E5NGNlPTB4MCxfMHgxMmU0Mzc9XzB4MjVkZGU4WydlbGVtZW50cyddLF8weDVlOTM3ZD1fMHg3YTk0Y2U7XzB4NWU5MzdkPF8weDEyZTQzNztfMHg1ZTkzN2QrKylfMHgzMDc2ZDNbJ3B1c2gnXShfMHgxNWQyYWVbXzB4NWVhYzk3KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg1ZTkzN2QsXzB4MjVkZGU4KSk7XzB4NTg2M2UwW18weDVlYWM5NygweDE0MildPSEweDA7fWVsc2V7Zm9yKF8weDdhOTRjZT0weDAsXzB4MTJlNDM3PV8weDRkNDgzNyxfMHg1ZTkzN2Q9XzB4N2E5NGNlO18weDVlOTM3ZDxfMHgxMmU0Mzc7XzB4NWU5MzdkKyspXzB4MzA3NmQzW18weDVlYWM5NygweDE3MSldKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhlNCldKF8weDU0MjczYyxfMHg1NjM2NzUsXzB4MWYxYWEwLF8weDVlOTM3ZCxfMHgyNWRkZTgpKTt9XzB4MjVkZGU4W18weDVlYWM5NygweDExMCldKz1fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXTt9aWYoIShfMHgxZjFhYTA9PT0nbnVsbCd8fF8weDFmMWFhMD09PV8weDVlYWM5NygweGM3KSkmJiFfMHgzMDg0YWUmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDEzNykmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDE5NCkmJl8weDFmMWFhMCE9PV8weDVlYWM5NygweDE3Zikpe3ZhciBfMHgzYTAwOTI9XzB4NDIzNWFiW18weDVlYWM5NygweDE3ZCldfHxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTdkKV07aWYodGhpc1tfMHg1ZWFjOTcoMHgxNWUpXShfMHg1NjM2NzUpPyhfMHg1ZTkzN2Q9MHgwLF8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxMGEpXShmdW5jdGlvbihfMHg0YjMzMTkpe3ZhciBfMHgzZDJhYTg9XzB4NWVhYzk3O2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHgzZDJhYTgoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO3JldHVybjt9aWYoIV8weDI1ZGRlOFsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHgyNWRkZThbXzB4M2QyYWE4KDB4MWEyKV0mJl8weDI1ZGRlOFsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXT5fMHgyNWRkZThbJ2F1dG9FeHBhbmRMaW1pdCddKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fV8weDMwNzZkM1tfMHgzZDJhYTgoMHgxNzEpXShfMHgxNWQyYWVbXzB4M2QyYWE4KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDNkMmFhOCgweDE5YiksXzB4NWU5MzdkKyssXzB4MjVkZGU4LGZ1bmN0aW9uKF8weDVlN2ViZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDVlN2ViZTt9O30oXzB4NGIzMzE5KSkpO30pKTp0aGlzW18weDVlYWM5NygweDE2NCldKF8weDU2MzY3NSkmJl8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxMGEpXShmdW5jdGlvbihfMHg3ODlmOSxfMHg0MGJmZWQpe3ZhciBfMHg1OTU1MTU9XzB4NWVhYzk3O2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO3JldHVybjt9aWYoIV8weDI1ZGRlOFsnaXNFeHByZXNzaW9uVG9FdmFsdWF0ZSddJiZfMHgyNWRkZThbXzB4NTk1NTE1KDB4MWEyKV0mJl8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxMTApXT5fMHgyNWRkZThbJ2F1dG9FeHBhbmRMaW1pdCddKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fXZhciBfMHgxNGQwOTY9XzB4NDBiZmVkW18weDU5NTUxNSgweDE0ZSldKCk7XzB4MTRkMDk2W18weDU5NTUxNSgweGY0KV0+MHg2NCYmKF8weDE0ZDA5Nj1fMHgxNGQwOTZbJ3NsaWNlJ10oMHgwLDB4NjQpK18weDU5NTUxNSgweDFhYykpLF8weDMwNzZkM1tfMHg1OTU1MTUoMHgxNzEpXShfMHgxNWQyYWVbXzB4NTk1NTE1KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDU5NTUxNSgweGViKSxfMHgxNGQwOTYsXzB4MjVkZGU4LGZ1bmN0aW9uKF8weDg0NDhjMil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIF8weDg0NDhjMjt9O30oXzB4Nzg5ZjkpKSk7fSksIV8weDFkOWQzMyl7dHJ5e2ZvcihfMHg0YTI3ZDUgaW4gXzB4NTYzNjc1KWlmKCEoXzB4MWZlOGZjJiZfMHgxNGUyYTZbJ3Rlc3QnXShfMHg0YTI3ZDUpKSYmIXRoaXNbJ19ibGFja2xpc3RlZFByb3BlcnR5J10oXzB4NTYzNjc1LF8weDRhMjdkNSxfMHgyNWRkZTgpKXtpZihfMHgyOWZjMjgrKyxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0rKyxfMHgyOWZjMjg+XzB4M2EwMDkyKXtfMHgzMWIwMjI9ITB4MDticmVhazt9aWYoIV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTUpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDFhMildJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0+XzB4MjVkZGU4W18weDVlYWM5NygweDE0NildKXtfMHgzMWIwMjI9ITB4MDticmVhazt9XzB4MzA3NmQzW18weDVlYWM5NygweDE3MSldKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhkMCldKF8weDU0MjczYyxfMHg1OTA0NDksXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg0YTI3ZDUsXzB4MjVkZGU4KSk7fX1jYXRjaHt9aWYoXzB4NTkwNDQ5W18weDVlYWM5NygweDE3NildPSEweDAsXzB4MWY3Y2ZlJiYoXzB4NTkwNDQ5WydfcF9uYW1lJ109ITB4MCksIV8weDMxYjAyMil7dmFyIF8weDE4YzBmNT1bXVtfMHg1ZWFjOTcoMHgxNGMpXSh0aGlzW18weDVlYWM5NygweDE1MSldKF8weDU2MzY3NSkpW18weDVlYWM5NygweDE0YyldKHRoaXNbXzB4NWVhYzk3KDB4MTJlKV0oXzB4NTYzNjc1KSk7Zm9yKF8weDVlOTM3ZD0weDAsXzB4NGQ0ODM3PV8weDE4YzBmNVsnbGVuZ3RoJ107XzB4NWU5MzdkPF8weDRkNDgzNztfMHg1ZTkzN2QrKylpZihfMHg0YTI3ZDU9XzB4MThjMGY1W18weDVlOTM3ZF0sIShfMHgxZmU4ZmMmJl8weDE0ZTJhNltfMHg1ZWFjOTcoMHgxNzgpXShfMHg0YTI3ZDVbXzB4NWVhYzk3KDB4MTRlKV0oKSkpJiYhdGhpc1tfMHg1ZWFjOTcoMHgxNjEpXShfMHg1NjM2NzUsXzB4NGEyN2Q1LF8weDI1ZGRlOCkmJiFfMHg1OTA0NDlbXzB4NWVhYzk3KDB4YzUpK18weDRhMjdkNVtfMHg1ZWFjOTcoMHgxNGUpXSgpXSl7aWYoXzB4MjlmYzI4KyssXzB4MjVkZGU4WydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddKyssXzB4MjlmYzI4Pl8weDNhMDA5Mil7XzB4MzFiMDIyPSEweDA7YnJlYWs7fWlmKCFfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWE1KV0mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDExMCldPl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNDYpXSl7XzB4MzFiMDIyPSEweDA7YnJlYWs7fV8weDMwNzZkM1sncHVzaCddKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhkMCldKF8weDU0MjczYyxfMHg1OTA0NDksXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg0YTI3ZDUsXzB4MjVkZGU4KSk7fX19fX1pZihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTAwKV09XzB4MWYxYWEwLF8weDQ4ZDllMT8oXzB4NTg2M2UwWyd2YWx1ZSddPV8weDU2MzY3NVtfMHg1ZWFjOTcoMHhlZSldKCksdGhpc1tfMHg1ZWFjOTcoMHgxMzMpXShfMHgxZjFhYTAsXzB4NTg2M2UwLF8weDI1ZGRlOCxfMHg0MjM1YWIpKTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHhkNyk/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbXzB4NWVhYzk3KDB4MTMwKV1bXzB4NWVhYzk3KDB4MTFjKV0oXzB4NTYzNjc1KTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHgxN2YpP18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxYTApXT1fMHg1NjM2NzVbXzB4NWVhYzk3KDB4MTRlKV0oKTpfMHgxZjFhYTA9PT0nUmVnRXhwJz9fMHg1ODYzZTBbXzB4NWVhYzk3KDB4MWEwKV09dGhpc1tfMHg1ZWFjOTcoMHhlNyldW18weDVlYWM5NygweDExYyldKF8weDU2MzY3NSk6XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzYpJiZ0aGlzW18weDVlYWM5NygweGVkKV0/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbJ19TeW1ib2wnXVtfMHg1ZWFjOTcoMHhlMyldW18weDVlYWM5NygweDE0ZSldWydjYWxsJ10oXzB4NTYzNjc1KTohXzB4MjVkZGU4WydkZXB0aCddJiYhKF8weDFmMWFhMD09PSdudWxsJ3x8XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzcpKSYmKGRlbGV0ZSBfMHg1ODYzZTBbJ3ZhbHVlJ10sXzB4NTg2M2UwWydjYXBwZWQnXT0hMHgwKSxfMHgzMWIwMjImJihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTE2KV09ITB4MCksXzB4MmEwOThiPV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxODIpXVtfMHg1ZWFjOTcoMHgxOWUpXSxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTgyKV1bXzB4NWVhYzk3KDB4MTllKV09XzB4NTg2M2UwLHRoaXNbXzB4NWVhYzk3KDB4MTY4KV0oXzB4NTg2M2UwLF8weDI1ZGRlOCksXzB4MzA3NmQzW18weDVlYWM5NygweGY0KV0pe2ZvcihfMHg1ZTkzN2Q9MHgwLF8weDRkNDgzNz1fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXTtfMHg1ZTkzN2Q8XzB4NGQ0ODM3O18weDVlOTM3ZCsrKV8weDMwNzZkM1tfMHg1ZTkzN2RdKF8weDVlOTM3ZCk7fV8weDU0MjczY1tfMHg1ZWFjOTcoMHhmNCldJiYoXzB4NTg2M2UwW18weDVlYWM5NygweDE3ZCldPV8weDU0MjczYyk7fWNhdGNoKF8weDViNmE2Mil7XzB4MzRjMGQ0KF8weDViNmE2MixfMHg1ODYzZTAsXzB4MjVkZGU4KTt9cmV0dXJuIHRoaXNbXzB4NWVhYzk3KDB4MTRmKV0oXzB4NTYzNjc1LF8weDU4NjNlMCksdGhpc1snX3RyZWVOb2RlUHJvcGVydGllc0FmdGVyRnVsbFZhbHVlJ10oXzB4NTg2M2UwLF8weDI1ZGRlOCksXzB4MjVkZGU4Wydub2RlJ11bXzB4NWVhYzk3KDB4MTllKV09XzB4MmEwOThiLF8weDI1ZGRlOFsnbGV2ZWwnXS0tLF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXT1fMHg0OGE1NTgsXzB4MjVkZGU4WydhdXRvRXhwYW5kJ10mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMGQpXVtfMHg1ZWFjOTcoMHgxNjIpXSgpLF8weDU4NjNlMDt9W18weDEwZWQyOCgweDEyZSldKF8weDVlN2U0NSl7dmFyIF8weDExMWRkMT1fMHgxMGVkMjg7cmV0dXJuIE9iamVjdFtfMHgxMTFkZDEoMHgxOTApXT9PYmplY3RbXzB4MTExZGQxKDB4MTkwKV0oXzB4NWU3ZTQ1KTpbXTt9W18weDEwZWQyOCgweDE1ZSldKF8weDViNjlhOSl7dmFyIF8weDU1YWMyNz1fMHgxMGVkMjg7cmV0dXJuISEoXzB4NWI2OWE5JiZfMHgzNjNkNTVbXzB4NTVhYzI3KDB4MTliKV0mJnRoaXNbXzB4NTVhYzI3KDB4MTUyKV0oXzB4NWI2OWE5KT09PV8weDU1YWMyNygweDE0NykmJl8weDViNjlhOVtfMHg1NWFjMjcoMHgxMGEpXSk7fVsnX2JsYWNrbGlzdGVkUHJvcGVydHknXShfMHgyOGIxNWYsXzB4NTgxZGQ2LF8weDMyMjI2Yyl7dmFyIF8weDI0N2E3ND1fMHgxMGVkMjg7cmV0dXJuIF8weDMyMjI2Y1tfMHgyNDdhNzQoMHhlZildP3R5cGVvZiBfMHgyOGIxNWZbXzB4NTgxZGQ2XT09XzB4MjQ3YTc0KDB4MTIwKTohMHgxO31bXzB4MTBlZDI4KDB4MTNjKV0oXzB4MzUyMTM2KXt2YXIgXzB4NDc0OThlPV8weDEwZWQyOCxfMHg0NTY4MjI9Jyc7cmV0dXJuIF8weDQ1NjgyMj10eXBlb2YgXzB4MzUyMTM2LF8weDQ1NjgyMj09PV8weDQ3NDk4ZSgweDE0Myk/dGhpc1tfMHg0NzQ5OGUoMHgxNTIpXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4MTgwKT9fMHg0NTY4MjI9XzB4NDc0OThlKDB4MWE3KTp0aGlzW18weDQ3NDk4ZSgweDE1MildKF8weDM1MjEzNik9PT1fMHg0NzQ5OGUoMHhkZCk/XzB4NDU2ODIyPSdkYXRlJzp0aGlzWydfb2JqZWN0VG9TdHJpbmcnXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4YmIpP18weDQ1NjgyMj1fMHg0NzQ5OGUoMHgxN2YpOl8weDM1MjEzNj09PW51bGw/XzB4NDU2ODIyPV8weDQ3NDk4ZSgweDFiNCk6XzB4MzUyMTM2W18weDQ3NDk4ZSgweDEwZSldJiYoXzB4NDU2ODIyPV8weDM1MjEzNltfMHg0NzQ5OGUoMHgxMGUpXVtfMHg0NzQ5OGUoMHhjMSldfHxfMHg0NTY4MjIpOl8weDQ1NjgyMj09PSd1bmRlZmluZWQnJiZ0aGlzW18weDQ3NDk4ZSgweDE1ZCldJiZfMHgzNTIxMzYgaW5zdGFuY2VvZiB0aGlzW18weDQ3NDk4ZSgweDE1ZCldJiYoXzB4NDU2ODIyPV8weDQ3NDk4ZSgweGMwKSksXzB4NDU2ODIyO31bJ19vYmplY3RUb1N0cmluZyddKF8weDFkZTY2Yyl7dmFyIF8weDQ3M2U2NT1fMHgxMGVkMjg7cmV0dXJuIE9iamVjdFtfMHg0NzNlNjUoMHhlMyldWyd0b1N0cmluZyddW18weDQ3M2U2NSgweDExYyldKF8weDFkZTY2Yyk7fVtfMHgxMGVkMjgoMHgxNzMpXShfMHgxYjczMWEpe3ZhciBfMHhiNjBiMTQ9XzB4MTBlZDI4O3JldHVybiBfMHgxYjczMWE9PT1fMHhiNjBiMTQoMHhlMSl8fF8weDFiNzMxYT09PV8weGI2MGIxNCgweDEwMil8fF8weDFiNzMxYT09PV8weGI2MGIxNCgweGRlKTt9WydfaXNQcmltaXRpdmVXcmFwcGVyVHlwZSddKF8weDMzMWIwOSl7dmFyIF8weDE2ZDdkOT1fMHgxMGVkMjg7cmV0dXJuIF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDE1NCl8fF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDEzNyl8fF8weDMzMWIwOT09PV8weDE2ZDdkOSgweDEzMSk7fVtfMHgxMGVkMjgoMHhlNCldKF8weDI5Yzk5YixfMHgyZjQ4NzYsXzB4MWQyZjRmLF8weDMwNzZiYyxfMHgxNzgzMjcsXzB4MmVlYzQ5KXt2YXIgXzB4NDU4ZjRmPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKF8weDUzMGY5OSl7dmFyIF8weDM3NDc0Nj1fMHgzZmY5LF8weDYwZGY4Mz1fMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4MTllKV0sXzB4MjVhMjA5PV8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXSxfMHgyOTBlOTk9XzB4MTc4MzI3W18weDM3NDc0NigweDE4MildWydwYXJlbnQnXTtfMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4Y2UpXT1fMHg2MGRmODMsXzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweDFhOSldPXR5cGVvZiBfMHgzMDc2YmM9PV8weDM3NDc0NigweGRlKT9fMHgzMDc2YmM6XzB4NTMwZjk5LF8weDI5Yzk5YltfMHgzNzQ3NDYoMHgxNzEpXShfMHg0NThmNGZbXzB4Mzc0NzQ2KDB4MWI1KV0oXzB4MmY0ODc2LF8weDFkMmY0ZixfMHgzMDc2YmMsXzB4MTc4MzI3LF8weDJlZWM0OSkpLF8weDE3ODMyN1snbm9kZSddW18weDM3NDc0NigweGNlKV09XzB4MjkwZTk5LF8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXT1fMHgyNWEyMDk7fTt9W18weDEwZWQyOCgweGQwKV0oXzB4ODNiMGUsXzB4NGRiZmI3LF8weDU3ODI1ZSxfMHg1MGYyNWUsXzB4Zjc0MmNiLF8weDVlMDQwMixfMHgyZGY0MTUpe3ZhciBfMHg0ZmY4MGM9XzB4MTBlZDI4LF8weDNjMjNkND10aGlzO3JldHVybiBfMHg0ZGJmYjdbXzB4NGZmODBjKDB4YzUpK18weGY3NDJjYlsndG9TdHJpbmcnXSgpXT0hMHgwLGZ1bmN0aW9uKF8weDNhYmQ2NSl7dmFyIF8weDRhYzk1ZT1fMHg0ZmY4MGMsXzB4MmM5YzNmPV8weDVlMDQwMltfMHg0YWM5NWUoMHgxODIpXVsnY3VycmVudCddLF8weDI2MzViZD1fMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bXzB4NGFjOTVlKDB4MWE5KV0sXzB4YzJlMGQ9XzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXTtfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHhjZSldPV8weDJjOWMzZixfMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bJ2luZGV4J109XzB4M2FiZDY1LF8weDgzYjBlW18weDRhYzk1ZSgweDE3MSldKF8weDNjMjNkNFtfMHg0YWM5NWUoMHgxYjUpXShfMHg1NzgyNWUsXzB4NTBmMjVlLF8weGY3NDJjYixfMHg1ZTA0MDIsXzB4MmRmNDE1KSksXzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXT1fMHhjMmUwZCxfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHgxYTkpXT1fMHgyNjM1YmQ7fTt9W18weDEwZWQyOCgweDFiNSldKF8weGYzOGFjMyxfMHg1YmRjZmQsXzB4MjkwZTYyLF8weDc5OTBjZixfMHg0OGU2MDQpe3ZhciBfMHgxYWE1N2U9XzB4MTBlZDI4LF8weDJiZmY4Yz10aGlzO18weDQ4ZTYwNHx8KF8weDQ4ZTYwND1mdW5jdGlvbihfMHg0M2JhOGYsXzB4NTk3ZDI2KXtyZXR1cm4gXzB4NDNiYThmW18weDU5N2QyNl07fSk7dmFyIF8weDQ4YTIwZT1fMHgyOTBlNjJbXzB4MWFhNTdlKDB4MTRlKV0oKSxfMHhkNjg3M2Q9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDEzOCldfHx7fSxfMHg3NDI2ZjM9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldLF8weDNmMzE5OT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWE1KV07dHJ5e3ZhciBfMHgxOGI3MDI9dGhpc1snX2lzTWFwJ10oXzB4ZjM4YWMzKSxfMHg1YTFhZTQ9XzB4NDhhMjBlO18weDE4YjcwMiYmXzB4NWExYWU0WzB4MF09PT0nXFxcXHgyNycmJihfMHg1YTFhZTQ9XzB4NWExYWU0WydzdWJzdHInXSgweDEsXzB4NWExYWU0W18weDFhYTU3ZSgweGY0KV0tMHgyKSk7dmFyIF8weDZhZjFhMT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV09XzB4ZDY4NzNkWydfcF8nK18weDVhMWFlNF07XzB4NmFmMWExJiYoXzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldPV8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXSsweDEpLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxYTUpXT0hIV8weDZhZjFhMTt2YXIgXzB4MjMzM2Q3PXR5cGVvZiBfMHgyOTBlNjI9PV8weDFhYTU3ZSgweGM2KSxfMHgyMmNiYTA9eyduYW1lJzpfMHgyMzMzZDd8fF8weDE4YjcwMj9fMHg0OGEyMGU6dGhpc1snX3Byb3BlcnR5TmFtZSddKF8weDQ4YTIwZSl9O2lmKF8weDIzMzNkNyYmKF8weDIyY2JhMFtfMHgxYWE1N2UoMHhjNildPSEweDApLCEoXzB4NWJkY2ZkPT09XzB4MWFhNTdlKDB4MWE3KXx8XzB4NWJkY2ZkPT09XzB4MWFhNTdlKDB4MTJmKSkpe3ZhciBfMHgxNTZiNmQ9dGhpc1tfMHgxYWE1N2UoMHgxOWYpXShfMHhmMzhhYzMsXzB4MjkwZTYyKTtpZihfMHgxNTZiNmQmJihfMHgxNTZiNmRbJ3NldCddJiYoXzB4MjJjYmEwWydzZXR0ZXInXT0hMHgwKSxfMHgxNTZiNmRbXzB4MWFhNTdlKDB4MTA3KV0mJiFfMHg2YWYxYTEmJiFfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTk4KV0pKXJldHVybiBfMHgyMmNiYTBbJ2dldHRlciddPSEweDAsdGhpc1tfMHgxYWE1N2UoMHgxN2EpXShfMHgyMmNiYTAsXzB4Nzk5MGNmKSxfMHgyMmNiYTA7fXZhciBfMHgzNmZkMjU7dHJ5e18weDM2ZmQyNT1fMHg0OGU2MDQoXzB4ZjM4YWMzLF8weDI5MGU2Mik7fWNhdGNoKF8weDIxMDA4Mil7cmV0dXJuIF8weDIyY2JhMD17J25hbWUnOl8weDQ4YTIwZSwndHlwZSc6XzB4MWFhNTdlKDB4ZmYpLCdlcnJvcic6XzB4MjEwMDgyW18weDFhYTU3ZSgweDEzNSldfSx0aGlzW18weDFhYTU3ZSgweDE3YSldKF8weDIyY2JhMCxfMHg3OTkwY2YpLF8weDIyY2JhMDt9dmFyIF8weDE1YzAxZT10aGlzW18weDFhYTU3ZSgweDEzYyldKF8weDM2ZmQyNSksXzB4MWFhYjk5PXRoaXNbXzB4MWFhNTdlKDB4MTczKV0oXzB4MTVjMDFlKTtpZihfMHgyMmNiYTBbJ3R5cGUnXT1fMHgxNWMwMWUsXzB4MWFhYjk5KXRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZixfMHgzNmZkMjUsZnVuY3Rpb24oKXt2YXIgXzB4NGY4ZDc1PV8weDFhYTU3ZTtfMHgyMmNiYTBbXzB4NGY4ZDc1KDB4MWEwKV09XzB4MzZmZDI1Wyd2YWx1ZU9mJ10oKSwhXzB4NmFmMWExJiZfMHgyYmZmOGNbXzB4NGY4ZDc1KDB4MTMzKV0oXzB4MTVjMDFlLF8weDIyY2JhMCxfMHg3OTkwY2Yse30pO30pO2Vsc2V7dmFyIF8weDMzNWY1OT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWEyKV0mJl8weDc5OTBjZlsnbGV2ZWwnXTxfMHg3OTkwY2ZbJ2F1dG9FeHBhbmRNYXhEZXB0aCddJiZfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTBkKV1bXzB4MWFhNTdlKDB4ZDQpXShfMHgzNmZkMjUpPDB4MCYmXzB4MTVjMDFlIT09XzB4MWFhNTdlKDB4MTIwKSYmXzB4Nzk5MGNmW18weDFhYTU3ZSgweDExMCldPF8weDc5OTBjZlsnYXV0b0V4cGFuZExpbWl0J107XzB4MzM1ZjU5fHxfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTg4KV08XzB4NzQyNmYzfHxfMHg2YWYxYTE/KHRoaXNbJ3NlcmlhbGl6ZSddKF8weDIyY2JhMCxfMHgzNmZkMjUsXzB4Nzk5MGNmLF8weDZhZjFhMXx8e30pLHRoaXNbXzB4MWFhNTdlKDB4MTRmKV0oXzB4MzZmZDI1LF8weDIyY2JhMCkpOnRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZixfMHgzNmZkMjUsZnVuY3Rpb24oKXt2YXIgXzB4NTNkMDAwPV8weDFhYTU3ZTtfMHgxNWMwMWU9PT1fMHg1M2QwMDAoMHgxYjQpfHxfMHgxNWMwMWU9PT1fMHg1M2QwMDAoMHhjNyl8fChkZWxldGUgXzB4MjJjYmEwW18weDUzZDAwMCgweDFhMCldLF8weDIyY2JhMFtfMHg1M2QwMDAoMHgxODMpXT0hMHgwKTt9KTt9cmV0dXJuIF8weDIyY2JhMDt9ZmluYWxseXtfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV09XzB4ZDY4NzNkLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXT1fMHg3NDI2ZjMsXzB4Nzk5MGNmW18weDFhYTU3ZSgweDFhNSldPV8weDNmMzE5OTt9fVsnX2NhcElmU3RyaW5nJ10oXzB4OTYwMjBjLF8weDRlNGNjMyxfMHhhZWFiMzYsXzB4MWU1NjU3KXt2YXIgXzB4MjM1NmU0PV8weDEwZWQyOCxfMHgyYmJmYTY9XzB4MWU1NjU3WydzdHJMZW5ndGgnXXx8XzB4YWVhYjM2W18weDIzNTZlNCgweDEwOCldO2lmKChfMHg5NjAyMGM9PT1fMHgyMzU2ZTQoMHgxMDIpfHxfMHg5NjAyMGM9PT1fMHgyMzU2ZTQoMHgxMzcpKSYmXzB4NGU0Y2MzWyd2YWx1ZSddKXtsZXQgXzB4MmUwZDIxPV8weDRlNGNjM1sndmFsdWUnXVtfMHgyMzU2ZTQoMHhmNCldO18weGFlYWIzNlsnYWxsU3RyTGVuZ3RoJ10rPV8weDJlMGQyMSxfMHhhZWFiMzZbJ2FsbFN0ckxlbmd0aCddPl8weGFlYWIzNltfMHgyMzU2ZTQoMHhmMyldPyhfMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MTgzKV09JycsZGVsZXRlIF8weDRlNGNjM1sndmFsdWUnXSk6XzB4MmUwZDIxPl8weDJiYmZhNiYmKF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxODMpXT1fMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MWEwKV1bXzB4MjM1NmU0KDB4MThiKV0oMHgwLF8weDJiYmZhNiksZGVsZXRlIF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxYTApXSk7fX1bXzB4MTBlZDI4KDB4MTY0KV0oXzB4M2VmZWYzKXt2YXIgXzB4MzQ4OGFjPV8weDEwZWQyODtyZXR1cm4hIShfMHgzZWZlZjMmJl8weDM2M2Q1NVtfMHgzNDg4YWMoMHhlYildJiZ0aGlzW18weDM0ODhhYygweDE1MildKF8weDNlZmVmMyk9PT1fMHgzNDg4YWMoMHgxYWYpJiZfMHgzZWZlZjNbXzB4MzQ4OGFjKDB4MTBhKV0pO31bXzB4MTBlZDI4KDB4YzQpXShfMHgxMWMzNWIpe3ZhciBfMHgyMzQ1M2Q9XzB4MTBlZDI4O2lmKF8weDExYzM1YltfMHgyMzQ1M2QoMHhmNildKC9eXFxcXGQrJC8pKXJldHVybiBfMHgxMWMzNWI7dmFyIF8weDRmNmEwMzt0cnl7XzB4NGY2YTAzPUpTT05bXzB4MjM0NTNkKDB4ZjEpXSgnJytfMHgxMWMzNWIpO31jYXRjaHtfMHg0ZjZhMDM9J1xcXFx4MjInK3RoaXNbXzB4MjM0NTNkKDB4MTUyKV0oXzB4MTFjMzViKSsnXFxcXHgyMic7fXJldHVybiBfMHg0ZjZhMDNbXzB4MjM0NTNkKDB4ZjYpXSgvXlxcXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcXFwiJC8pP18weDRmNmEwMz1fMHg0ZjZhMDNbJ3N1YnN0ciddKDB4MSxfMHg0ZjZhMDNbJ2xlbmd0aCddLTB4Mik6XzB4NGY2YTAzPV8weDRmNmEwM1tfMHgyMzQ1M2QoMHgxNjYpXSgvJy9nLCdcXFxceDVjXFxcXHgyNycpWydyZXBsYWNlJ10oL1xcXFxcXFxcXFxcIi9nLCdcXFxceDIyJylbJ3JlcGxhY2UnXSgvKF5cXFwifFxcXCIkKS9nLCdcXFxceDI3JyksXzB4NGY2YTAzO31bXzB4MTBlZDI4KDB4MTdhKV0oXzB4NTVjYzQ3LF8weDExYmFiMyxfMHg0MTcxOGYsXzB4MTYzYjZhKXt2YXIgXzB4NDdjOTAyPV8weDEwZWQyODt0aGlzW18weDQ3YzkwMigweDE2OCldKF8weDU1Y2M0NyxfMHgxMWJhYjMpLF8weDE2M2I2YSYmXzB4MTYzYjZhKCksdGhpc1snX2FkZGl0aW9uYWxNZXRhZGF0YSddKF8weDQxNzE4ZixfMHg1NWNjNDcpLHRoaXNbJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZSddKF8weDU1Y2M0NyxfMHgxMWJhYjMpO31bXzB4MTBlZDI4KDB4MTY4KV0oXzB4M2Y4YjNhLF8weDRkNTg4NCl7dmFyIF8weDQ5YzY5ZT1fMHgxMGVkMjg7dGhpc1tfMHg0OWM2OWUoMHgxMmIpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzW18weDQ5YzY5ZSgweGNhKV0oXzB4M2Y4YjNhLF8weDRkNTg4NCksdGhpc1tfMHg0OWM2OWUoMHgxOGUpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzWydfc2V0Tm9kZVBlcm1pc3Npb25zJ10oXzB4M2Y4YjNhLF8weDRkNTg4NCk7fVtfMHgxMGVkMjgoMHgxMmIpXShfMHgyNGQ1ZjgsXzB4MTRlYWVhKXt9W18weDEwZWQyOCgweGNhKV0oXzB4NTc2YTMyLF8weDY4N2M1KXt9W18weDEwZWQyOCgweGJkKV0oXzB4NDg5YzllLF8weGY3Njk1Nyl7fVtfMHgxMGVkMjgoMHgxNDApXShfMHg0MGJkNmMpe3JldHVybiBfMHg0MGJkNmM9PT10aGlzWydfdW5kZWZpbmVkJ107fVtfMHgxMGVkMjgoMHhmMildKF8weDU5ZGJkNyxfMHgzOWI5OTMpe3ZhciBfMHg0YWFiMzQ9XzB4MTBlZDI4O3RoaXNbXzB4NGFhYjM0KDB4YmQpXShfMHg1OWRiZDcsXzB4MzliOTkzKSx0aGlzW18weDRhYWIzNCgweDE5NildKF8weDU5ZGJkNyksXzB4MzliOTkzW18weDRhYWIzNCgweGY5KV0mJnRoaXNbJ19zb3J0UHJvcHMnXShfMHg1OWRiZDcpLHRoaXNbXzB4NGFhYjM0KDB4MTVmKV0oXzB4NTlkYmQ3LF8weDM5Yjk5MyksdGhpc1tfMHg0YWFiMzQoMHhlMildKF8weDU5ZGJkNyxfMHgzOWI5OTMpLHRoaXNbXzB4NGFhYjM0KDB4MTExKV0oXzB4NTlkYmQ3KTt9W18weDEwZWQyOCgweDE0ZildKF8weDI1MTk2NSxfMHg5YjkzY2Qpe3ZhciBfMHg4M2NiZDQ9XzB4MTBlZDI4O2xldCBfMHhjZDM5M2Y7dHJ5e18weDM2M2Q1NVtfMHg4M2NiZDQoMHgxNzQpXSYmKF8weGNkMzkzZj1fMHgzNjNkNTVbXzB4ODNjYmQ0KDB4MTc0KV1bJ2Vycm9yJ10sXzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldW18weDgzY2JkNCgweDE3YyldPWZ1bmN0aW9uKCl7fSksXzB4MjUxOTY1JiZ0eXBlb2YgXzB4MjUxOTY1W18weDgzY2JkNCgweGY0KV09PV8weDgzY2JkNCgweGRlKSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHhmNCldPV8weDI1MTk2NVtfMHg4M2NiZDQoMHhmNCldKTt9Y2F0Y2h7fWZpbmFsbHl7XzB4Y2QzOTNmJiYoXzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldW18weDgzY2JkNCgweDE3YyldPV8weGNkMzkzZik7fWlmKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMDApXT09PV8weDgzY2JkNCgweGRlKXx8XzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4MTMxKSl7aWYoaXNOYU4oXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKSlfMHg5YjkzY2RbJ25hbiddPSEweDAsZGVsZXRlIF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXTtlbHNlIHN3aXRjaChfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV0pe2Nhc2UgTnVtYmVyW18weDgzY2JkNCgweDE5MildOl8weDliOTNjZFtfMHg4M2NiZDQoMHgxNzUpXT0hMHgwLGRlbGV0ZSBfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV07YnJlYWs7Y2FzZSBOdW1iZXJbXzB4ODNjYmQ0KDB4MTg1KV06XzB4OWI5M2NkWyduZWdhdGl2ZUluZmluaXR5J109ITB4MCxkZWxldGUgXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldO2JyZWFrO2Nhc2UgMHgwOnRoaXNbXzB4ODNjYmQ0KDB4MTAxKV0oXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMjQpXT0hMHgwKTticmVhazt9fWVsc2UgXzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4MTIwKSYmdHlwZW9mIF8weDI1MTk2NVtfMHg4M2NiZDQoMHhjMSldPT1fMHg4M2NiZDQoMHgxMDIpJiZfMHgyNTE5NjVbXzB4ODNjYmQ0KDB4YzEpXSYmXzB4OWI5M2NkW18weDgzY2JkNCgweGMxKV0mJl8weDI1MTk2NVsnbmFtZSddIT09XzB4OWI5M2NkW18weDgzY2JkNCgweGMxKV0mJihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4ZGEpXT1fMHgyNTE5NjVbJ25hbWUnXSk7fVtfMHgxMGVkMjgoMHgxMDEpXShfMHhkYzcyZjYpe3ZhciBfMHgzOTZmMzI9XzB4MTBlZDI4O3JldHVybiAweDEvXzB4ZGM3MmY2PT09TnVtYmVyW18weDM5NmYzMigweDE4NSldO31bXzB4MTBlZDI4KDB4MTE0KV0oXzB4YzQ5ZjU5KXt2YXIgXzB4MTVkMzFhPV8weDEwZWQyODshXzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldfHwhXzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldWydsZW5ndGgnXXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4MWE3KXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4ZWIpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTAwKV09PT1fMHgxNWQzMWEoMHgxOWIpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTdkKV1bXzB4MTVkMzFhKDB4MTdlKV0oZnVuY3Rpb24oXzB4NTIxYTY2LF8weDMwMzdiOSl7dmFyIF8weDE5YjNjOD1fMHgxNWQzMWEsXzB4MzA3NDBmPV8weDUyMWE2NltfMHgxOWIzYzgoMHhjMSldW18weDE5YjNjOCgweDE5OSldKCksXzB4Mzc3ZmYxPV8weDMwMzdiOVtfMHgxOWIzYzgoMHhjMSldWyd0b0xvd2VyQ2FzZSddKCk7cmV0dXJuIF8weDMwNzQwZjxfMHgzNzdmZjE/LTB4MTpfMHgzMDc0MGY+XzB4Mzc3ZmYxPzB4MToweDA7fSk7fVsnX2FkZEZ1bmN0aW9uc05vZGUnXShfMHgyNGYxNDYsXzB4MzA0ZmRhKXt2YXIgXzB4MmEwZjE1PV8weDEwZWQyODtpZighKF8weDMwNGZkYVtfMHgyYTBmMTUoMHhlZildfHwhXzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldfHwhXzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDJhMGYxNSgweGY0KV0pKXtmb3IodmFyIF8weDE0YzlmNT1bXSxfMHg0ZDllZTQ9W10sXzB4NDg4Zjc5PTB4MCxfMHgxMDFhMzQ9XzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDJhMGYxNSgweGY0KV07XzB4NDg4Zjc5PF8weDEwMWEzNDtfMHg0ODhmNzkrKyl7dmFyIF8weDE5NjUxZj1fMHgyNGYxNDZbXzB4MmEwZjE1KDB4MTdkKV1bXzB4NDg4Zjc5XTtfMHgxOTY1MWZbXzB4MmEwZjE1KDB4MTAwKV09PT1fMHgyYTBmMTUoMHgxMjApP18weDE0YzlmNVtfMHgyYTBmMTUoMHgxNzEpXShfMHgxOTY1MWYpOl8weDRkOWVlNFsncHVzaCddKF8weDE5NjUxZik7fWlmKCEoIV8weDRkOWVlNFtfMHgyYTBmMTUoMHhmNCldfHxfMHgxNGM5ZjVbJ2xlbmd0aCddPD0weDEpKXtfMHgyNGYxNDZbJ3Byb3BzJ109XzB4NGQ5ZWU0O3ZhciBfMHgyMzBiZWM9eydmdW5jdGlvbnNOb2RlJzohMHgwLCdwcm9wcyc6XzB4MTRjOWY1fTt0aGlzW18weDJhMGYxNSgweDEyYildKF8weDIzMGJlYyxfMHgzMDRmZGEpLHRoaXNbXzB4MmEwZjE1KDB4YmQpXShfMHgyMzBiZWMsXzB4MzA0ZmRhKSx0aGlzW18weDJhMGYxNSgweDE5NildKF8weDIzMGJlYyksdGhpc1tfMHgyYTBmMTUoMHhmZSldKF8weDIzMGJlYyxfMHgzMDRmZGEpLF8weDIzMGJlY1snaWQnXSs9J1xcXFx4MjBmJyxfMHgyNGYxNDZbJ3Byb3BzJ11bXzB4MmEwZjE1KDB4MWFkKV0oXzB4MjMwYmVjKTt9fX1bXzB4MTBlZDI4KDB4ZTIpXShfMHg0NjhlOTksXzB4NDM4OGYwKXt9Wydfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZSddKF8weDVlYjcxNyl7fVtfMHgxMGVkMjgoMHgxMjEpXShfMHgzOGMwNWMpe3ZhciBfMHgxYWVlMWE9XzB4MTBlZDI4O3JldHVybiBBcnJheVtfMHgxYWVlMWEoMHgxNzIpXShfMHgzOGMwNWMpfHx0eXBlb2YgXzB4MzhjMDVjPT1fMHgxYWVlMWEoMHgxNDMpJiZ0aGlzW18weDFhZWUxYSgweDE1MildKF8weDM4YzA1Yyk9PT1fMHgxYWVlMWEoMHgxODApO31bJ19zZXROb2RlUGVybWlzc2lvbnMnXShfMHg0ZWVmYTAsXzB4MTcwNWE5KXt9W18weDEwZWQyOCgweDExMSldKF8weDUxNjkwNil7dmFyIF8weDIzNjkwNj1fMHgxMGVkMjg7ZGVsZXRlIF8weDUxNjkwNltfMHgyMzY5MDYoMHgxMGYpXSxkZWxldGUgXzB4NTE2OTA2WydfaGFzU2V0T25JdHNQYXRoJ10sZGVsZXRlIF8weDUxNjkwNltfMHgyMzY5MDYoMHgxMjUpXTt9W18weDEwZWQyOCgweDE4ZSldKF8weDIzYzFjMixfMHgyOWEyMWIpe319bGV0IF8weDRlN2Q3ZD1uZXcgXzB4MzI4YmRlKCksXzB4Mzg4NmVhPXsncHJvcHMnOjB4NjQsJ2VsZW1lbnRzJzoweDY0LCdzdHJMZW5ndGgnOjB4NDAwKjB4MzIsJ3RvdGFsU3RyTGVuZ3RoJzoweDQwMCoweDMyLCdhdXRvRXhwYW5kTGltaXQnOjB4MTM4OCwnYXV0b0V4cGFuZE1heERlcHRoJzoweGF9LF8weDMwYzU1Nz17J3Byb3BzJzoweDUsJ2VsZW1lbnRzJzoweDUsJ3N0ckxlbmd0aCc6MHgxMDAsJ3RvdGFsU3RyTGVuZ3RoJzoweDEwMCoweDMsJ2F1dG9FeHBhbmRMaW1pdCc6MHgxZSwnYXV0b0V4cGFuZE1heERlcHRoJzoweDJ9O2Z1bmN0aW9uIF8weDU4NmQzNihfMHg1NGYzYmUsXzB4MTgxYjFhLF8weDJiN2ViNSxfMHgxZGQ2MzQsXzB4NDljMDdjLF8weDM5NzQ0Nil7dmFyIF8weDJmMThkZD1fMHgxMGVkMjg7bGV0IF8weDRlN2Y3MixfMHgxZGU1YTE7dHJ5e18weDFkZTVhMT1fMHg0ZWJlZjgoKSxfMHg0ZTdmNzI9XzB4NDZjYTkwW18weDE4MWIxYV0sIV8weDRlN2Y3Mnx8XzB4MWRlNWExLV8weDRlN2Y3MlsndHMnXT4weDFmNCYmXzB4NGU3ZjcyW18weDJmMThkZCgweDExOCldJiZfMHg0ZTdmNzJbJ3RpbWUnXS9fMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTE4KV08MHg2ND8oXzB4NDZjYTkwW18weDE4MWIxYV09XzB4NGU3ZjcyPXsnY291bnQnOjB4MCwndGltZSc6MHgwLCd0cyc6XzB4MWRlNWExfSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV09e30pOl8weDFkZTVhMS1fMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ3RzJ10+MHgzMiYmXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldJiZfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MWExKV0vXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldWydjb3VudCddPDB4NjQmJihfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV09e30pO2xldCBfMHg0ZGRkM2Q9W10sXzB4MmMxYjQ1PV8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxODQpXXx8XzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDE4NCldP18weDMwYzU1NzpfMHgzODg2ZWEsXzB4Mzk4YWY1PV8weDMwYzg0Yz0+e3ZhciBfMHg5ODhlM2I9XzB4MmYxOGRkO2xldCBfMHgxNGIzZGM9e307cmV0dXJuIF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxN2QpXT1fMHgzMGM4NGNbJ3Byb3BzJ10sXzB4MTRiM2RjW18weDk4OGUzYigweGM4KV09XzB4MzBjODRjWydlbGVtZW50cyddLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxMDgpXT1fMHgzMGM4NGNbXzB4OTg4ZTNiKDB4MTA4KV0sXzB4MTRiM2RjW18weDk4OGUzYigweGYzKV09XzB4MzBjODRjW18weDk4OGUzYigweGYzKV0sXzB4MTRiM2RjW18weDk4OGUzYigweDE0NildPV8weDMwYzg0Y1tfMHg5ODhlM2IoMHgxNDYpXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWI3KV09XzB4MzBjODRjW18weDk4OGUzYigweDFiNyldLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhmOSldPSEweDEsXzB4MTRiM2RjW18weDk4OGUzYigweGVmKV09IV8weDFkOTE2OSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTU5KV09MHgxLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxODgpXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDEwNSldPV8weDk4OGUzYigweGJlKSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWI5KV09XzB4OTg4ZTNiKDB4MTZiKSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MWEyKV09ITB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTBkKV09W10sXzB4MTRiM2RjW18weDk4OGUzYigweDExMCldPTB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTk4KV09ITB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4ZGIpXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDE4MildPXsnY3VycmVudCc6dm9pZCAweDAsJ3BhcmVudCc6dm9pZCAweDAsJ2luZGV4JzoweDB9LF8weDE0YjNkYzt9O2Zvcih2YXIgXzB4NGU4YjQ2PTB4MDtfMHg0ZThiNDY8XzB4NDljMDdjW18weDJmMThkZCgweGY0KV07XzB4NGU4YjQ2KyspXzB4NGRkZDNkW18weDJmMThkZCgweDE3MSldKF8weDRlN2Q3ZFtfMHgyZjE4ZGQoMHhmZCldKHsndGltZU5vZGUnOl8weDU0ZjNiZT09PV8weDJmMThkZCgweDFhMSl8fHZvaWQgMHgwfSxfMHg0OWMwN2NbXzB4NGU4YjQ2XSxfMHgzOThhZjUoXzB4MmMxYjQ1KSx7fSkpO2lmKF8weDU0ZjNiZT09PV8weDJmMThkZCgweDFhYil8fF8weDU0ZjNiZT09PV8weDJmMThkZCgweDE3Yykpe2xldCBfMHgzODg4NmM9RXJyb3JbXzB4MmYxOGRkKDB4MTFmKV07dHJ5e0Vycm9yWydzdGFja1RyYWNlTGltaXQnXT0weDEvMHgwLF8weDRkZGQzZFtfMHgyZjE4ZGQoMHgxNzEpXShfMHg0ZTdkN2RbJ3NlcmlhbGl6ZSddKHsnc3RhY2tOb2RlJzohMHgwfSxuZXcgRXJyb3IoKVtfMHgyZjE4ZGQoMHgxYjApXSxfMHgzOThhZjUoXzB4MmMxYjQ1KSx7J3N0ckxlbmd0aCc6MHgxLzB4MH0pKTt9ZmluYWxseXtFcnJvcltfMHgyZjE4ZGQoMHgxMWYpXT1fMHgzODg4NmM7fX1yZXR1cm57J21ldGhvZCc6XzB4MmYxOGRkKDB4ZDkpLCd2ZXJzaW9uJzpfMHg0NmY2N2MsJ2FyZ3MnOlt7J3RzJzpfMHgyYjdlYjUsJ3Nlc3Npb24nOl8weDFkZDYzNCwnYXJncyc6XzB4NGRkZDNkLCdpZCc6XzB4MTgxYjFhLCdjb250ZXh0JzpfMHgzOTc0NDZ9XX07fWNhdGNoKF8weDE0Y2QxOCl7cmV0dXJueydtZXRob2QnOl8weDJmMThkZCgweGQ5KSwndmVyc2lvbic6XzB4NDZmNjdjLCdhcmdzJzpbeyd0cyc6XzB4MmI3ZWI1LCdzZXNzaW9uJzpfMHgxZGQ2MzQsJ2FyZ3MnOlt7J3R5cGUnOl8weDJmMThkZCgweGZmKSwnZXJyb3InOl8weDE0Y2QxOCYmXzB4MTRjZDE4W18weDJmMThkZCgweDEzNSldfV0sJ2lkJzpfMHgxODFiMWEsJ2NvbnRleHQnOl8weDM5NzQ0Nn1dfTt9ZmluYWxseXt0cnl7aWYoXzB4NGU3ZjcyJiZfMHgxZGU1YTEpe2xldCBfMHhhMDAyNT1fMHg0ZWJlZjgoKTtfMHg0ZTdmNzJbJ2NvdW50J10rKyxfMHg0ZTdmNzJbJ3RpbWUnXSs9XzB4MjI0ZmZiKF8weDFkZTVhMSxfMHhhMDAyNSksXzB4NGU3ZjcyWyd0cyddPV8weGEwMDI1LF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxMTgpXSsrLF8weDQ2Y2E5MFsnaGl0cyddW18weDJmMThkZCgweDFhMSldKz1fMHgyMjRmZmIoXzB4MWRlNWExLF8weGEwMDI1KSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ3RzJ109XzB4YTAwMjUsKF8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxMTgpXT4weDMyfHxfMHg0ZTdmNzJbJ3RpbWUnXT4weDY0KSYmKF8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxODQpXT0hMHgwKSwoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldPjB4M2U4fHxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MWExKV0+MHgxMmMpJiYoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDE4NCldPSEweDApO319Y2F0Y2h7fX19cmV0dXJuIF8weDU4NmQzNjt9KChfMHgxNzg5MWUsXzB4NGY0YjljLF8weDNmZDZkNSxfMHgxYzU0MjIsXzB4NDc5Y2EyLF8weDRiMGFjOCxfMHg1MjQ2YWYsXzB4NDJiZmFjLF8weDRjYTgyZixfMHgxMjM1ODAsXzB4MTg5NjlkKT0+e3ZhciBfMHg0MDcyNDI9XzB4ZmI0Zjg5O2lmKF8weDE3ODkxZVtfMHg0MDcyNDIoMHgxNTApXSlyZXR1cm4gXzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldO2lmKCFIKF8weDE3ODkxZSxfMHg0MmJmYWMsXzB4NDc5Y2EyKSlyZXR1cm4gXzB4MTc4OTFlWydfY29uc29sZV9uaW5qYSddPXsnY29uc29sZUxvZyc6KCk9Pnt9LCdjb25zb2xlVHJhY2UnOigpPT57fSwnY29uc29sZVRpbWUnOigpPT57fSwnY29uc29sZVRpbWVFbmQnOigpPT57fSwnYXV0b0xvZyc6KCk9Pnt9LCdhdXRvTG9nTWFueSc6KCk9Pnt9LCdhdXRvVHJhY2VNYW55JzooKT0+e30sJ2NvdmVyYWdlJzooKT0+e30sJ2F1dG9UcmFjZSc6KCk9Pnt9LCdhdXRvVGltZSc6KCk9Pnt9LCdhdXRvVGltZUVuZCc6KCk9Pnt9fSxfMHgxNzg5MWVbXzB4NDA3MjQyKDB4MTUwKV07bGV0IF8weDM3NjEwZT1CKF8weDE3ODkxZSksXzB4MzQzN2NhPV8weDM3NjEwZVsnZWxhcHNlZCddLF8weDI1YjVlNT1fMHgzNzYxMGVbJ3RpbWVTdGFtcCddLF8weDRiZjc2Yj1fMHgzNzYxMGVbXzB4NDA3MjQyKDB4MTFlKV0sXzB4MTI1YzdkPXsnaGl0cyc6e30sJ3RzJzp7fX0sXzB4MTViNDZhPVgoXzB4MTc4OTFlLF8weDRjYTgyZixfMHgxMjVjN2QsXzB4NGIwYWM4KSxfMHhkNTQ4NmI9XzB4NGQzMGUxPT57XzB4MTI1YzdkWyd0cyddW18weDRkMzBlMV09XzB4MjViNWU1KCk7fSxfMHgyZDA3ZTY9KF8weDViYzM1NSxfMHhlMzRmZSk9Pnt2YXIgXzB4MjMzOWNlPV8weDQwNzI0MjtsZXQgXzB4NTlmYjZhPV8weDEyNWM3ZFsndHMnXVtfMHhlMzRmZV07aWYoZGVsZXRlIF8weDEyNWM3ZFsndHMnXVtfMHhlMzRmZV0sXzB4NTlmYjZhKXtsZXQgXzB4NTkyMWE2PV8weDM0MzdjYShfMHg1OWZiNmEsXzB4MjViNWU1KCkpO18weDJjZjI5MChfMHgxNWI0NmEoXzB4MjMzOWNlKDB4MWExKSxfMHg1YmMzNTUsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHg1OTIxYTZdLF8weGUzNGZlKSk7fX0sXzB4NDliY2VjPV8weDQzZTcyZj0+e3ZhciBfMHgyZTQ3YmY9XzB4NDA3MjQyLF8weDU1ZDk1ZDtyZXR1cm4gXzB4NDc5Y2EyPT09XzB4MmU0N2JmKDB4MTM5KSYmXzB4MTc4OTFlWydvcmlnaW4nXSYmKChfMHg1NWQ5NWQ9XzB4NDNlNzJmPT1udWxsP3ZvaWQgMHgwOl8weDQzZTcyZlsnYXJncyddKT09bnVsbD92b2lkIDB4MDpfMHg1NWQ5NWRbJ2xlbmd0aCddKSYmKF8weDQzZTcyZlsnYXJncyddWzB4MF1bXzB4MmU0N2JmKDB4MTg5KV09XzB4MTc4OTFlWydvcmlnaW4nXSksXzB4NDNlNzJmO307XzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldPXsnY29uc29sZUxvZyc6KF8weDMxYzkyZSxfMHgyNDQ4OGQpPT57dmFyIF8weDkzZTY3ZT1fMHg0MDcyNDI7XzB4MTc4OTFlWydjb25zb2xlJ11bJ2xvZyddW18weDkzZTY3ZSgweGMxKV0hPT0nZGlzYWJsZWRMb2cnJiZfMHgyY2YyOTAoXzB4MTViNDZhKF8weDkzZTY3ZSgweGQ5KSxfMHgzMWM5MmUsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weDI0NDg4ZCkpO30sJ2NvbnNvbGVUcmFjZSc6KF8weDNiNjZhNyxfMHhiYTg4MGUpPT57dmFyIF8weDU2N2UxMz1fMHg0MDcyNDIsXzB4MzE3MTZlLF8weDVhOWM2MDtfMHgxNzg5MWVbXzB4NTY3ZTEzKDB4MTc0KV1bJ2xvZyddW18weDU2N2UxMygweGMxKV0hPT1fMHg1NjdlMTMoMHhjMikmJigoXzB4NWE5YzYwPShfMHgzMTcxNmU9XzB4MTc4OTFlW18weDU2N2UxMygweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHgzMTcxNmVbXzB4NTY3ZTEzKDB4ZDIpXSkhPW51bGwmJl8weDVhOWM2MFtfMHg1NjdlMTMoMHgxODIpXSYmKF8weDE3ODkxZVtfMHg1NjdlMTMoMHgxOGMpXT0hMHgwKSxfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHg1NjdlMTMoMHgxYWIpLF8weDNiNjZhNyxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4YmE4ODBlKSkpKTt9LCdjb25zb2xlRXJyb3InOihfMHgzZmE3MzYsXzB4MTIxYTNiKT0+e3ZhciBfMHgxMmRmYjg9XzB4NDA3MjQyO18weDE3ODkxZVtfMHgxMmRmYjgoMHgxOGMpXT0hMHgwLF8weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKCdlcnJvcicsXzB4M2ZhNzM2LF8weDRiZjc2YigpLF8weDI1MzUzNixfMHgxMjFhM2IpKSk7fSwnY29uc29sZVRpbWUnOl8weDE4NDhhNz0+e18weGQ1NDg2YihfMHgxODQ4YTcpO30sJ2NvbnNvbGVUaW1lRW5kJzooXzB4MzFhZTY1LF8weDNkMTA0YSk9PntfMHgyZDA3ZTYoXzB4M2QxMDRhLF8weDMxYWU2NSk7fSwnYXV0b0xvZyc6KF8weDM3ODA4LF8weDJhZDU1OCk9Pnt2YXIgXzB4MjI5MzhiPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4MTViNDZhKF8weDIyOTM4YigweGQ5KSxfMHgyYWQ1NTgsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHgzNzgwOF0pKTt9LCdhdXRvTG9nTWFueSc6KF8weDE2MWQ3ZSxfMHg0M2RlZGIpPT57dmFyIF8weDM3OTUwNj1fMHg0MDcyNDI7XzB4MmNmMjkwKF8weDE1YjQ2YShfMHgzNzk1MDYoMHhkOSksXzB4MTYxZDdlLF8weDRiZjc2YigpLF8weDI1MzUzNixfMHg0M2RlZGIpKTt9LCdhdXRvVHJhY2UnOihfMHgxMjE3ZTYsXzB4NDQ2NzA3KT0+e3ZhciBfMHgzYTUyNTI9XzB4NDA3MjQyO18weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKF8weDNhNTI1MigweDFhYiksXzB4NDQ2NzA3LF8weDRiZjc2YigpLF8weDI1MzUzNixbXzB4MTIxN2U2XSkpKTt9LCdhdXRvVHJhY2VNYW55JzooXzB4NWI3N2M0LF8weDRmYzQzYSk9Pnt2YXIgXzB4NWJmYmYyPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHg1YmZiZjIoMHgxYWIpLF8weDViNzdjNCxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4NGZjNDNhKSkpO30sJ2F1dG9UaW1lJzooXzB4MjQxODNhLF8weDQ0Mjc1OSxfMHgyOTZhNGMpPT57XzB4ZDU0ODZiKF8weDI5NmE0Yyk7fSwnYXV0b1RpbWVFbmQnOihfMHgyOTI3YTksXzB4MjQzZDMwLF8weDViZDYzYik9PntfMHgyZDA3ZTYoXzB4MjQzZDMwLF8weDViZDYzYik7fSwnY292ZXJhZ2UnOl8weDUxOWZjMj0+e3ZhciBfMHg0NTI1NTQ9XzB4NDA3MjQyO18weDJjZjI5MCh7J21ldGhvZCc6XzB4NDUyNTU0KDB4MTU2KSwndmVyc2lvbic6XzB4NGIwYWM4LCdhcmdzJzpbeydpZCc6XzB4NTE5ZmMyfV19KTt9fTtsZXQgXzB4MmNmMjkwPXEoXzB4MTc4OTFlLF8weDRmNGI5YyxfMHgzZmQ2ZDUsXzB4MWM1NDIyLF8weDQ3OWNhMixfMHgxMjM1ODAsXzB4MTg5NjlkKSxfMHgyNTM1MzY9XzB4MTc4OTFlW18weDQwNzI0MigweGYwKV07cmV0dXJuIF8weDE3ODkxZVsnX2NvbnNvbGVfbmluamEnXTt9KShnbG9iYWxUaGlzLF8weGZiNGY4OSgweDEwYyksJzYwNTkxJyxfMHhmYjRmODkoMHhkYyksJ3dlYnBhY2snLF8weGZiNGY4OSgweGQzKSwnMTcyNzk1MDAwNTAxNicsXzB4ZmI0Zjg5KDB4MWE2KSxfMHhmYjRmODkoMHhmYiksXzB4ZmI0Zjg5KDB4MTk3KSxfMHhmYjRmODkoMHgxM2EpKTtcIik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSB9XHJcbjsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fb28oaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlTG9nKGksIHYpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb19vbzsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fdHIoaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlVHJhY2UoaSwgdik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RyOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190eChpLCAuLi52KSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVFcnJvcihpLCB2KTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fdHg7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX3RzKHYpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZVRpbWUodik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RzOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190ZSh2LCBpKSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVUaW1lRW5kKHYsIGkpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb190ZTsgLyplc2xpbnQgdW5pY29ybi9uby1hYnVzaXZlLWVzbGludC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvZGlzYWJsZS1lbmFibGUtcGFpcjosZXNsaW50LWNvbW1lbnRzL25vLXVubGltaXRlZC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tYWdncmVnYXRpbmctZW5hYmxlOixlc2xpbnQtY29tbWVudHMvbm8tZHVwbGljYXRlLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby11bnVzZWQtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLXVudXNlZC1lbmFibGU6LCovXHJcbiIsImltcG9ydCB7IGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBERUZBVUxUX0JBQ0tHUk9VTkRfMSwgQVNTRVRTX1BBVEhfSElMTCwgQVNTRVRTX1BBVEhfVE9URU0sIEFTU0VUU19QQVRIX0ZFTkNFLCBBVVRVTU5fQkFDS0dST1VORF8xLCBBVVRVTU5fSElMTF8xLCBBVVRVTU5fUElMTEFSXzEsIEFVVFVNTl9TSUdOXzEsIEFVVFVNTl9GRU5DRV8xLCBXSU5URVJfQkFDS0dST1VORF8xLCBXSU5URVJfSElMTF8xLCBXSU5URVJfU0lHTl8xLCBXSU5URVJfRkVOQ0VfMSwgV0lOVEVSX1BJTExBUl8xLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbi8vIHRvIGRvIG5lZWQgdG8gb3B0aW1pemUgbW9yZVxyXG52YXIgaW1hZ2VzID0ge1xyXG4gICAgYmdJbWc6IERFRkFVTFRfQkFDS0dST1VORF8xLFxyXG4gICAgaGlsbEltZzogQVNTRVRTX1BBVEhfSElMTCxcclxuICAgIHBpbGxlckltZzogQVNTRVRTX1BBVEhfVE9URU0sXHJcbiAgICBmZW5jaEltZzogQVNTRVRTX1BBVEhfRkVOQ0UsXHJcbiAgICBhdXR1bW5CZ0ltZzogQVVUVU1OX0JBQ0tHUk9VTkRfMSxcclxuICAgIGF1dHVtbkhpbGxJbWc6IEFVVFVNTl9ISUxMXzEsXHJcbiAgICBhdXR1bW5QaWxsZXJJbWc6IEFVVFVNTl9QSUxMQVJfMSxcclxuICAgIGF1dHVtblNpZ25JbWc6IEFVVFVNTl9TSUdOXzEsXHJcbiAgICBhdXR1bW5GZW5jZUltZzogQVVUVU1OX0ZFTkNFXzEsXHJcbiAgICB3aW50ZXJCZ0ltZzogV0lOVEVSX0JBQ0tHUk9VTkRfMSxcclxuICAgIHdpbnRlckhpbGxJbWc6IFdJTlRFUl9ISUxMXzEsXHJcbiAgICB3aW50ZXJTaWduSW1nOiBXSU5URVJfU0lHTl8xLFxyXG4gICAgd2ludGVyRmVuY2VJbWc6IFdJTlRFUl9GRU5DRV8xLFxyXG4gICAgd2ludGVyUGlsbGVySW1nOiBXSU5URVJfUElMTEFSXzEsXHJcbn07XHJcbmV4cG9ydCBjbGFzcyBCYWNrZ3JvdW5kIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgY29udGV4dDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgbGV2ZWxOdW1iZXI7XHJcbiAgICBhdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXMgPSBbXCJTdW1tZXJcIiwgXCJBdXR1bW5cIiwgXCJXaW50ZXJcIl07XHJcbiAgICBiYWNrZ3JvdW5kVHlwZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGxldmVsTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZFR5cGUgPVxyXG4gICAgICAgICAgICBNYXRoLmZsb29yKHRoaXMubGV2ZWxOdW1iZXIgLyAxMCkgJSB0aGlzLmF2YWlsYWJsZUJhY2tncm91bmRUeXBlcy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHRoaXMubGV2ZWxOdW1iZXIgPj0gMzApIHtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVHlwZSA9IHRoaXMuYmFja2dyb3VuZFR5cGUgJSAzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2FkSW1hZ2VzKGltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5hdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXNbdGhpcy5iYWNrZ3JvdW5kVHlwZV0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJXaW50ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVyQmdJbWcsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy53aW50ZXJQaWxsZXJJbWcsIHRoaXMud2lkdGggKiAwLjM4LCB0aGlzLmhlaWdodCAvIDYsIHRoaXMud2lkdGggLyAxLjIsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVyRmVuY2VJbWcsIC10aGlzLndpZHRoICogMC40LCB0aGlzLmhlaWdodCAvIDQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMud2ludGVySGlsbEltZywgLXRoaXMud2lkdGggKiAwLjI1LCB0aGlzLmhlaWdodCAvIDIsIHRoaXMud2lkdGggKiAxLjUsIHRoaXMuaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkF1dHVtblwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5CZ0ltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmF1dHVtblBpbGxlckltZywgdGhpcy53aWR0aCAqIDAuMzgsIHRoaXMuaGVpZ2h0IC8gNiwgdGhpcy53aWR0aCAvIDEuMiwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5GZW5jZUltZywgLXRoaXMud2lkdGggKiAwLjQsIHRoaXMuaGVpZ2h0IC8gNCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5hdXR1bW5IaWxsSW1nLCAtdGhpcy53aWR0aCAqIDAuMjUsIHRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCAqIDEuNSwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iZ0ltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnBpbGxlckltZywgdGhpcy53aWR0aCAqIDAuNiwgdGhpcy5oZWlnaHQgLyA2LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmZlbmNoSW1nLCAtdGhpcy53aWR0aCAqIDAuNCwgdGhpcy5oZWlnaHQgLyAzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAvIDMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmhpbGxJbWcsIC10aGlzLndpZHRoICogMC4yNSwgdGhpcy5oZWlnaHQgLyAyLCB0aGlzLndpZHRoICogMS41LCB0aGlzLmhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpc0NsaWNrSW5zaWRlQnV0dG9uLCBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgQ0FOQ0VMX0JUTl9JTUcgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW5jZWxCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBjYW5jZWxfYnV0dG9uX2ltYWdlO1xyXG4gICAgYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgIGJ0bk9yaWdpbmFsU2l6ZTtcclxuICAgIG9yaWduYWxQb3M7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBjYW52YXMud2lkdGggKiAwLjEgKyAoY2FudmFzLndpZHRoICogMC4xNSkgLyAyO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IGNhbnZhcy5oZWlnaHQgKiAwLjI7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgY2FuY2VsX2J1dHRvbl9pbWFnZTogQ0FOQ0VMX0JUTl9JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbF9idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJjYW5jZWxfYnV0dG9uX2ltYWdlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4xNTtcclxuICAgICAgICB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgICAgICB0aGlzLm9yaWduYWxQb3MgPSB7IHg6IHRoaXMucG9zWCwgeTogdGhpcy5wb3NZIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuY2FuY2VsX2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjE1KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSB0aGlzLmJ0blNpemVBbmltYXRpb24gKyAwLjAwMDU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLm9yaWduYWxQb3MueDtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMub3JpZ25hbFBvcy55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGlzSW5zaWRlID0gaXNDbGlja0luc2lkZUJ1dHRvbih4Q2xpY2ssIHlDbGljaywgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRydWUgLy8gQnV0dG9uIGlzIGNpcmN1bGFyXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNJbnNpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4xNDtcclxuICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5wb3NYICsgMTtcclxuICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5wb3NZICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzSW5zaWRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlzQ2xpY2tJbnNpZGVCdXR0b24sIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBNQVBfQlROX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsb3NlQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgY2xvc2VfYnV0dG9uX2ltYWdlO1xyXG4gICAgYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgIGJ0bk9yaWdpbmFsU2l6ZTtcclxuICAgIG9yaWduYWxQb3M7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgY2xvc2VfYnV0dG9uX2ltYWdlOiBNQVBfQlROX0lNRyB9LCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VfYnV0dG9uX2ltYWdlID0gaW1hZ2VzW1wiY2xvc2VfYnV0dG9uX2ltYWdlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4xOTtcclxuICAgICAgICB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgICAgICB0aGlzLm9yaWduYWxQb3MgPSB7IHg6IHBvc1gsIHk6IHBvc1kgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5jbG9zZV9idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idG5TaXplQW5pbWF0aW9uIDwgMC4xOSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gdGhpcy5idG5TaXplQW5pbWF0aW9uICsgMC4wMDA1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5vcmlnbmFsUG9zLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLm9yaWduYWxQb3MueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBpc0luc2lkZSA9IGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0cnVlIC8vIEJ1dHRvbiBpcyBjaXJjdWxhclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlzSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTg7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMucG9zWCArIDE7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMucG9zWSArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc0luc2lkZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEZWJ1Z2dlciwgZm9udCwgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBTUEVDSUFMX0xFVkVMUywgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZXZlbEJsb29uQnV0dG9uIHtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBsZXZlbERhdGE7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIG9yaWdpbmFsUG9zWDtcclxuICAgIG9yaWdpbmFsUG9zWTtcclxuICAgIHNpemU7XHJcbiAgICByYWRpdXNPZmZTZXQ7XHJcbiAgICBibG9vblNpemU7XHJcbiAgICBidG5TaXplO1xyXG4gICAgbG9ja1NpemU7XHJcbiAgICB0ZXh0Rm9udFNpemU7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGNvbnRleHQsIGxldmVsRGF0YSkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgPSBsZXZlbERhdGE7XHJcbiAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5sZXZlbERhdGEueDtcclxuICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLmxldmVsRGF0YS55O1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxQb3NYID0gdGhpcy5wb3NYO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxQb3NZID0gdGhpcy5wb3NZO1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IGNhbnZhcy5oZWlnaHQgLyA1O1xyXG4gICAgICAgIHRoaXMucmFkaXVzT2ZmU2V0ID0gY2FudmFzLmhlaWdodCAvIDIwO1xyXG4gICAgICAgIHRoaXMuYmxvb25TaXplID0gdGhpcy5pc0xldmVsU3BlY2lhbCh0aGlzLnNpemUpO1xyXG4gICAgICAgIHRoaXMuYnRuU2l6ZSA9IHRoaXMuYmxvb25TaXplO1xyXG4gICAgICAgIHRoaXMubG9ja1NpemUgPSBjYW52YXMuaGVpZ2h0IC8gMTM7XHJcbiAgICAgICAgdGhpcy50ZXh0Rm9udFNpemUgPSAodGhpcy5zaXplKSAvIDY7XHJcbiAgICB9XHJcbiAgICBpc1NwZWNpYWxMZXZlbChpbmRleCkge1xyXG4gICAgICAgIHJldHVybiBTUEVDSUFMX0xFVkVMUy5pbmNsdWRlcyhpbmRleCk7XHJcbiAgICB9XHJcbiAgICA7XHJcbiAgICBpc0xldmVsU3BlY2lhbChzaXplKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxEYXRhPy5pc1NwZWNpYWxcclxuICAgICAgICAgICAgPyBzaXplICogMC45XHJcbiAgICAgICAgICAgIDogc2l6ZTtcclxuICAgIH1cclxuICAgIGRyYXcobGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgsIHVubG9ja0xldmVsSW5kZXgsIGdhbWVMZXZlbERhdGEsIHRvdGFsR2FtZUxldmVscykge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sZXZlbERhdGE/LmJhbGxvb25JbWcsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmJ0blNpemUsIHRoaXMuYnRuU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZm9udCA9IHRoaXMudGV4dEZvbnRTaXplICsgYHB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KGAke3RoaXMubGV2ZWxEYXRhLmluZGV4ICsgbGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXh9YCwgdGhpcy5sZXZlbERhdGEueCArIHRoaXMuc2l6ZSAvIDMuNSwgdGhpcy5sZXZlbERhdGEueSArIHRoaXMuc2l6ZSAvIDMpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gdGhpcy50ZXh0Rm9udFNpemUgLSAodGhpcy5zaXplKSAvIDMwICsgYHB4ICR7Zm9udH0sIG1vbm9zcGFjZWA7XHJcbiAgICAgICAgaWYgKHRoaXMuYnRuU2l6ZSA8IHRoaXMuYmxvb25TaXplKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZSA9IHRoaXMuYnRuU2l6ZSArIDAuNTA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blNpemUgPSB0aGlzLmJsb29uU2l6ZTtcclxuICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5sZXZlbERhdGEueDtcclxuICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5sZXZlbERhdGEueTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kcmF3SWNvbnMobGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgsIHVubG9ja0xldmVsSW5kZXgsIGdhbWVMZXZlbERhdGEsIHRvdGFsR2FtZUxldmVscyk7XHJcbiAgICB9XHJcbiAgICBhcHBseVB1bHNlRWZmZWN0KCkge1xyXG4gICAgICAgIGNvbnN0IFB1bHNlRHVyYXRpb24gPSAxNTAwO1xyXG4gICAgICAgIGNvbnN0IEdyb3dQaGFzZVRocmVzaG9sZCA9IDAuNztcclxuICAgICAgICBjb25zdCBCYXNlU2hhZG93U2l6ZSA9IDE1O1xyXG4gICAgICAgIGNvbnN0IE1heFNoYWRvd1NpemUgPSA0NTtcclxuICAgICAgICBjb25zdCBNYXhPcGFjaXR5ID0gMC41O1xyXG4gICAgICAgIGNvbnN0IEJhc2VDb2xvclJnYmEgPSAnMjU1LCAyNTUsIDI1NSc7XHJcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uUHJvZ3Jlc3MgPSAoRGF0ZS5ub3coKSAlIFB1bHNlRHVyYXRpb24pIC8gUHVsc2VEdXJhdGlvbjtcclxuICAgICAgICBjb25zdCBncm93UGhhc2UgPSBhbmltYXRpb25Qcm9ncmVzcyA8PSBHcm93UGhhc2VUaHJlc2hvbGQ7XHJcbiAgICAgICAgY29uc3QgcGhhc2VEdXJhdGlvbiA9IGdyb3dQaGFzZSA/IEdyb3dQaGFzZVRocmVzaG9sZCA6ICgxIC0gR3Jvd1BoYXNlVGhyZXNob2xkKTtcclxuICAgICAgICBjb25zdCBwcm9ncmVzcyA9IGdyb3dQaGFzZSA/IGFuaW1hdGlvblByb2dyZXNzIC8gR3Jvd1BoYXNlVGhyZXNob2xkIDogKGFuaW1hdGlvblByb2dyZXNzIC0gR3Jvd1BoYXNlVGhyZXNob2xkKSAvIHBoYXNlRHVyYXRpb247XHJcbiAgICAgICAgY29uc3Qgc2hhZG93U2l6ZSA9IGdyb3dQaGFzZSA/IHByb2dyZXNzICogQmFzZVNoYWRvd1NpemUgOiBCYXNlU2hhZG93U2l6ZSArIHByb2dyZXNzICogTWF4U2hhZG93U2l6ZTtcclxuICAgICAgICBjb25zdCBzaGFkb3dPcGFjaXR5ID0gZ3Jvd1BoYXNlID8gTWF4T3BhY2l0eSAqICgxIC0gcHJvZ3Jlc3MpIDogMDtcclxuICAgICAgICBpZiAoc2hhZG93T3BhY2l0eSA8PSAwKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgY29uc3QgeyB4OiBzY2FsZVgsIHk6IHNjYWxlWSwgcmFkaXVzOiBzY2FsZVJhZGl1cyB9ID0gdGhpcy5sZXZlbERhdGE/LmlzU3BlY2lhbFxyXG4gICAgICAgICAgICA/IHsgeDogMywgeTogMi41LCByYWRpdXM6IDIuMiB9XHJcbiAgICAgICAgICAgIDogeyB4OiAzLjQsIHk6IDMuOCwgcmFkaXVzOiAzLjIgfTtcclxuICAgICAgICBjb25zdCBjZW50ZXJYID0gdGhpcy5wb3NYICsgdGhpcy5idG5TaXplIC8gc2NhbGVYO1xyXG4gICAgICAgIGNvbnN0IGNlbnRlclkgPSB0aGlzLnBvc1kgKyB0aGlzLmJ0blNpemUgLyBzY2FsZVk7XHJcbiAgICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5idG5TaXplIC8gc2NhbGVSYWRpdXMgKyBzaGFkb3dTaXplO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5zYXZlKCk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5hcmMoY2VudGVyWCwgY2VudGVyWSwgcmFkaXVzLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IGByZ2JhKCR7QmFzZUNvbG9yUmdiYX0sICR7c2hhZG93T3BhY2l0eX0pYDtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5yZXN0b3JlKCk7XHJcbiAgICB9XHJcbiAgICBkcmF3SWNvbnMocGFnZUluZGV4LCB1bmxvY2tMZXZlbEluZGV4LCBnYW1lTGV2ZWxEYXRhLCB0b3RhbEdhbWVMZXZlbHMpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMubGV2ZWxEYXRhLmluZGV4O1xyXG4gICAgICAgIGlmICghRGVidWdnZXIuRGVidWdNb2RlKSB7XHJcbiAgICAgICAgICAgIChpbmRleCArIHBhZ2VJbmRleCAtIDEgPiB1bmxvY2tMZXZlbEluZGV4ICsgMSkgJiYgdGhpcy5kcmF3TG9jaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZ2FtZUxldmVsRGF0YS5sZW5ndGggJiYgaW5kZXggKyBwYWdlSW5kZXggPD0gdG90YWxHYW1lTGV2ZWxzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ2FtZUxldmVsRGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IC0gMSArIHBhZ2VJbmRleCA9PT1cclxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludChnYW1lTGV2ZWxEYXRhW2ldLmxldmVsTnVtYmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tTdGFycyhnYW1lTGV2ZWxEYXRhW2ldLnN0YXJDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3TG9jaygpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubGV2ZWxEYXRhPy5sb2NrSW1nLCB0aGlzLmxldmVsRGF0YS54LCB0aGlzLmxldmVsRGF0YS55LCB0aGlzLmxvY2tTaXplLCB0aGlzLmxvY2tTaXplKTtcclxuICAgIH1cclxuICAgIGNoZWNrU3RhcnMoc3RhckNvdW50KSB7XHJcbiAgICAgICAgY29uc3QgcG9zWCA9IHRoaXMubGV2ZWxEYXRhLng7XHJcbiAgICAgICAgY29uc3QgcG9zWSA9IHRoaXMubGV2ZWxEYXRhLnk7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc2l6ZTtcclxuICAgICAgICBpZiAoc3RhckNvdW50ID49IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3U3Rhcihwb3NYLCBwb3NZIC0gc2l6ZSAqIDAuMDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhckNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFyKHBvc1ggKyBzaXplIC8gMi41LCBwb3NZIC0gc2l6ZSAqIDAuMDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc3RhckNvdW50ID09PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1N0YXIocG9zWCArIHNpemUgLyA1LCBwb3NZIC0gc2l6ZSAqIDAuMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhd1N0YXIocG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sZXZlbERhdGE/LnN0YXJJbWcsIHBvc1gsIHBvc1ksIHRoaXMuc2l6ZSAvIDUsIHRoaXMuc2l6ZSAvIDUpO1xyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaywgbGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXgsIHVubG9ja0xldmVsSW5kZXgsIGNhbGxCYWNrKSB7XHJcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKHhDbGljayAtIHRoaXMubGV2ZWxEYXRhLnggLSB0aGlzLnJhZGl1c09mZlNldCkgKlxyXG4gICAgICAgICAgICAoeENsaWNrIC0gdGhpcy5sZXZlbERhdGEueCAtIHRoaXMucmFkaXVzT2ZmU2V0KSArXHJcbiAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLmxldmVsRGF0YS55IC0gdGhpcy5yYWRpdXNPZmZTZXQpICpcclxuICAgICAgICAgICAgICAgICh5Q2xpY2sgLSB0aGlzLmxldmVsRGF0YS55IC0gdGhpcy5yYWRpdXNPZmZTZXQpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCA0NSkge1xyXG4gICAgICAgICAgICBpZiAoRGVidWdnZXIuRGVidWdNb2RlIHx8ICh0aGlzLmxldmVsRGF0YS5pbmRleCArIGxldmVsU2VsZWN0aW9uUGFnZUluZGV4IDw9IHVubG9ja0xldmVsSW5kZXgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemUgPSB0aGlzLmJsb29uU2l6ZSAtIDQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLm9yaWdpbmFsUG9zWCArIDAuNTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMub3JpZ2luYWxQb3NZICsgMTtcclxuICAgICAgICAgICAgICAgIGNhbGxCYWNrKHRoaXMubGV2ZWxEYXRhLmluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpc0NsaWNrSW5zaWRlQnV0dG9uLCBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgTkVYVF9CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV4dEJ1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgbmV4dF9idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgbG9hZEltYWdlcyh7IG5leHRfYnV0dG9uX2ltYWdlOiBORVhUX0JUTl9JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm5leHRfYnV0dG9uX2ltYWdlID0gaW1hZ2VzW1wibmV4dF9idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE5O1xyXG4gICAgICAgIHRoaXMuYnRuT3JpZ2luYWxTaXplID0gdGhpcy5idG5TaXplQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMub3JpZ25hbFBvcyA9IHsgeDogdGhpcy5wb3NYLCB5OiB0aGlzLnBvc1kgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5uZXh0X2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24sIHRoaXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idG5TaXplQW5pbWF0aW9uIDwgMC4xOSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gdGhpcy5idG5TaXplQW5pbWF0aW9uICsgMC4wMDA1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5vcmlnbmFsUG9zLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLm9yaWduYWxQb3MueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBpc0luc2lkZSA9IGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRoaXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdHJ1ZSAvLyBCdXR0b24gaXMgY2lyY3VsYXJcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpc0luc2lkZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE4O1xyXG4gICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLnBvc1ggKyAxO1xyXG4gICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLnBvc1kgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNJbnNpZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaXNDbGlja0luc2lkZUJ1dHRvbiwgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IENBTkNFTF9CVE5fSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9CdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBub19idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1ggKyA1O1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1kgKyAxMDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIGxvYWRJbWFnZXMoeyBub19idXR0b25faW1hZ2U6IENBTkNFTF9CVE5fSU1HIH0sIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ub19idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJub19idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE4O1xyXG4gICAgICAgIHRoaXMuYnRuT3JpZ2luYWxTaXplID0gdGhpcy5idG5TaXplQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMub3JpZ25hbFBvcyA9IHsgeDogdGhpcy5wb3NYLCB5OiB0aGlzLnBvc1kgfTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5ub19idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idG5TaXplQW5pbWF0aW9uIDwgMC4xOCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gdGhpcy5idG5TaXplQW5pbWF0aW9uICsgMC4wMDA1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5vcmlnbmFsUG9zLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLm9yaWduYWxQb3MueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICBjb25zdCBpc0luc2lkZSA9IGlzQ2xpY2tJbnNpZGVCdXR0b24oeENsaWNrLCB5Q2xpY2ssIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0cnVlIC8vIEJ1dHRvbiBpcyBjaXJjdWxhclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlzSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMTc7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMucG9zWCArIDE7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMucG9zWSArIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc0luc2lkZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpc0NsaWNrSW5zaWRlQnV0dG9uLCBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgUEFVU0VfQlROX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdXNlQnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgcGF1c2VfYnV0dG9uX2ltYWdlO1xyXG4gICAgYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgIGJ0bk9yaWdpbmFsU2l6ZTtcclxuICAgIG9yaWduYWxQb3M7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBjYW52YXMud2lkdGggLSBjYW52YXMuaGVpZ2h0ICogMC4wOTtcclxuICAgICAgICB0aGlzLnBvc1kgPSAwO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgbG9hZEltYWdlcyh7IHBhdXNlX2J1dHRvbl9pbWFnZTogUEFVU0VfQlROX0lNRyB9LCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VfYnV0dG9uX2ltYWdlID0gaW1hZ2VzW1wicGF1c2VfYnV0dG9uX2ltYWdlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4wOTtcclxuICAgICAgICB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgICAgICB0aGlzLm9yaWduYWxQb3MgPSB7IHg6IHRoaXMucG9zWCwgeTogdGhpcy5wb3NZIH07XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucGF1c2VfYnV0dG9uX2ltYWdlLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogdGhpcy5idG5TaXplQW5pbWF0aW9uLCB0aGlzLmNhbnZhcy5oZWlnaHQgKiB0aGlzLmJ0blNpemVBbmltYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idG5TaXplQW5pbWF0aW9uIDwgMC4wOSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gdGhpcy5idG5TaXplQW5pbWF0aW9uICsgMC4wMDAyNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMub3JpZ25hbFBvcy54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5vcmlnbmFsUG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgaXNJbnNpZGUgPSBpc0NsaWNrSW5zaWRlQnV0dG9uKHhDbGljaywgeUNsaWNrLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRoaXMuY2FudmFzLmhlaWdodCAqIHRoaXMuYnRuT3JpZ2luYWxTaXplLCB0cnVlIC8vIEJ1dHRvbiBpcyBjaXJjdWxhclxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGlzSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IDAuMDg1O1xyXG4gICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLnBvc1ggKyAwLjk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMucG9zWSArIDAuOTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzSW5zaWRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFBMQVlfQlROX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi4vLi4vRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgbG9hZEltYWdlcywgcHNldWRvSWQsIGxhbmcgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBnZXREYXRhIH0gZnJvbSBcIkBkYXRhXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXlCdXR0b24ge1xyXG4gICAgcG9zWDtcclxuICAgIHBvc1k7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgY2FudmFzO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBtYWpWZXJzaW9uO1xyXG4gICAgbWluVmVyc2lvbjtcclxuICAgIGZpcmViYXNlSW50ZWdyYXRpb247XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24gPSBuZXcgRmlyZWJhc2VJbnRlZ3JhdGlvbigpO1xyXG4gICAgICAgIHRoaXMuaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0ge1xyXG4gICAgICAgICAgICBwYXVzZV9idXR0b25faW1hZ2U6IFBMQVlfQlROX0lNR1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGFzeW5jIGluaXQoKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGdldERhdGEoKTtcclxuICAgICAgICB0aGlzLm1halZlcnNpb24gPSBkYXRhLm1hanZlcnNpb247XHJcbiAgICAgICAgdGhpcy5taW5WZXJzaW9uID0gZGF0YS5taW52ZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5wYXVzZV9idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAvIDMsIHRoaXMuY2FudmFzLndpZHRoIC8gMyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4Q2xpY2sgLSB0aGlzLnBvc1ggLSB0aGlzLmNhbnZhcy53aWR0aCAvIDYpICpcclxuICAgICAgICAgICAgKHhDbGljayAtIHRoaXMucG9zWCAtIHRoaXMuY2FudmFzLndpZHRoIC8gNikgK1xyXG4gICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gdGhpcy5jYW52YXMud2lkdGggLyA2KSAqXHJcbiAgICAgICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy5wb3NZIC0gdGhpcy5jYW52YXMud2lkdGggLyA2KSk7XHJcbiAgICAgICAgdGhpcy5sb2dUYXBwZWRTdGFydEZpcmViYXNlRXZlbnQoKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPCB0aGlzLmNhbnZhcy53aWR0aCAvIDgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbG9nVGFwcGVkU3RhcnRGaXJlYmFzZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCB0YXBwZWRTdGFydERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2ZXJzaW9uLWluZm8taWRcIikuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvbiA/IHRoaXMubWFqVmVyc2lvbi50b1N0cmluZygpICsgXCIuXCIgKyB0aGlzLm1pblZlcnNpb24udG9TdHJpbmcoKSA6IFwiXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFRhcHBlZFN0YXJ0RXZlbnQodGFwcGVkU3RhcnREYXRhKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBpc0NsaWNrSW5zaWRlQnV0dG9uLCBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgUkVUUllfQlROX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJldHJ5QnV0dG9uIHtcclxuICAgIHBvc1g7XHJcbiAgICBwb3NZO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgcmV0cnlfYnV0dG9uX2ltYWdlO1xyXG4gICAgYnRuU2l6ZUFuaW1hdGlvbjtcclxuICAgIGJ0bk9yaWdpbmFsU2l6ZTtcclxuICAgIG9yaWduYWxQb3M7XHJcbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0LCBjYW52YXMsIHBvc1gsIHBvc1kpIHtcclxuICAgICAgICB0aGlzLnBvc1ggPSBwb3NYO1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgcmV0cnlfYnV0dG9uX2ltYWdlOiBSRVRSWV9CVE5fSU1HIH0sIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZXRyeV9idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJyZXRyeV9idXR0b25faW1hZ2VcIl07XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE5O1xyXG4gICAgICAgIHRoaXMuYnRuT3JpZ2luYWxTaXplID0gdGhpcy5idG5TaXplQW5pbWF0aW9uO1xyXG4gICAgICAgIHRoaXMub3JpZ25hbFBvcyA9IHsgeDogcG9zWCwgeTogcG9zWSB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnJldHJ5X2J1dHRvbl9pbWFnZSwgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5TaXplQW5pbWF0aW9uLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJ0blNpemVBbmltYXRpb24gPCAwLjE5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSB0aGlzLmJ0blNpemVBbmltYXRpb24gKyAwLjAwMDU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLm9yaWduYWxQb3MueDtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWSA9IHRoaXMub3JpZ25hbFBvcy55O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGlzSW5zaWRlID0gaXNDbGlja0luc2lkZUJ1dHRvbih4Q2xpY2ssIHlDbGljaywgdGhpcy5wb3NYLCB0aGlzLnBvc1ksIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRoaXMuY2FudmFzLndpZHRoICogdGhpcy5idG5PcmlnaW5hbFNpemUsIHRydWUgLy8gQnV0dG9uIGlzIGNpcmN1bGFyXHJcbiAgICAgICAgKTtcclxuICAgICAgICBpZiAoaXNJbnNpZGUpIHtcclxuICAgICAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4xODtcclxuICAgICAgICAgICAgdGhpcy5wb3NYID0gdGhpcy5wb3NYICsgMTtcclxuICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5wb3NZICsgMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzSW5zaWRlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IGlzQ2xpY2tJbnNpZGVCdXR0b24sIGxvYWRJbWFnZXMgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBZRVNfQlROX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFllc0J1dHRvbiB7XHJcbiAgICBwb3NYO1xyXG4gICAgcG9zWTtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHllc19idXR0b25faW1hZ2U7XHJcbiAgICBidG5TaXplQW5pbWF0aW9uO1xyXG4gICAgYnRuT3JpZ2luYWxTaXplO1xyXG4gICAgb3JpZ25hbFBvcztcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIHRoaXMucG9zWCA9IHBvc1ggLSA1O1xyXG4gICAgICAgIHRoaXMucG9zWSA9IHBvc1k7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgeWVzX2J1dHRvbl9pbWFnZTogWUVTX0JUTl9JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnllc19idXR0b25faW1hZ2UgPSBpbWFnZXNbXCJ5ZXNfYnV0dG9uX2ltYWdlXCJdO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5idG5TaXplQW5pbWF0aW9uID0gMC4yMDU7XHJcbiAgICAgICAgdGhpcy5idG5PcmlnaW5hbFNpemUgPSB0aGlzLmJ0blNpemVBbmltYXRpb247XHJcbiAgICAgICAgdGhpcy5vcmlnbmFsUG9zID0geyB4OiB0aGlzLnBvc1gsIHk6IHRoaXMucG9zWSB9O1xyXG4gICAgfVxyXG4gICAgZHJhdygpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnllc19idXR0b25faW1hZ2UsIHRoaXMucG9zWCwgdGhpcy5wb3NZLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0blNpemVBbmltYXRpb24pO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5idG5TaXplQW5pbWF0aW9uIDwgMC4yMDUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiA9IHRoaXMuYnRuU2l6ZUFuaW1hdGlvbiArIDAuMDAwNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zWCA9IHRoaXMub3JpZ25hbFBvcy54O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NZID0gdGhpcy5vcmlnbmFsUG9zLnk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBvbkNsaWNrKHhDbGljaywgeUNsaWNrKSB7XHJcbiAgICAgICAgY29uc3QgaXNJbnNpZGUgPSBpc0NsaWNrSW5zaWRlQnV0dG9uKHhDbGljaywgeUNsaWNrLCB0aGlzLnBvc1gsIHRoaXMucG9zWSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdGhpcy5jYW52YXMud2lkdGggKiB0aGlzLmJ0bk9yaWdpbmFsU2l6ZSwgdHJ1ZSAvLyBCdXR0b24gaXMgY2lyY3VsYXJcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChpc0luc2lkZSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ0blNpemVBbmltYXRpb24gPSAwLjE5O1xyXG4gICAgICAgICAgICB0aGlzLnBvc1ggPSB0aGlzLnBvc1ggKyAxO1xyXG4gICAgICAgICAgICB0aGlzLnBvc1kgPSB0aGlzLnBvc1kgKyAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNJbnNpZGU7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgaGlkZUVsZW1lbnQgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5leHBvcnQgY2xhc3MgRmVlZGJhY2tUZXh0RWZmZWN0cyB7XHJcbiAgICBmZWVkYmFja1RleHRFbGVtZW50O1xyXG4gICAgaGlkZVRpbWVvdXRJZDtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuZmVlZGJhY2tUZXh0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmVlZGJhY2stdGV4dFwiKTtcclxuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0SWQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNGZWVkYmFja0VsZW1lbnRBdmFpbGFibGUoKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaXNGZWVkYmFja0VsZW1lbnRBdmFpbGFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5mZWVkYmFja1RleHRFbGVtZW50O1xyXG4gICAgfVxyXG4gICAgd3JhcFRleHQodGV4dCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0ZlZWRiYWNrRWxlbWVudEF2YWlsYWJsZSgpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja1RleHRFbGVtZW50LnRleHRDb250ZW50ID0gdGV4dDtcclxuICAgICAgICBoaWRlRWxlbWVudChmYWxzZSwgdGhpcy5mZWVkYmFja1RleHRFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnNldEhpZGVUaW1lb3V0KCk7XHJcbiAgICB9XHJcbiAgICBzZXRIaWRlVGltZW91dCgpIHtcclxuICAgICAgICBpZiAodGhpcy5oaWRlVGltZW91dElkKSB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmhpZGVUaW1lb3V0SWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmhpZGVUaW1lb3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGhpZGVFbGVtZW50KHRydWUsIHRoaXMuZmVlZGJhY2tUZXh0RWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZVRpbWVvdXRJZCA9IG51bGw7XHJcbiAgICAgICAgfSwgNDAwMCk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEJBUl9FTVBUWSwgQkFSX0ZVTEwsIExFVkVMX0lORElDQVRPUiB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCJAZXZlbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBMZXZlbEluZGljYXRvcnMgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbnZhcztcclxuICAgIGFjdGl2ZUluZGljYXRvcnM7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgYWN0aXZlSW5kaWNhdG9ycykge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmFjdGl2ZUluZGljYXRvcnMgPSBhY3RpdmVJbmRpY2F0b3JzO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0ge1xyXG4gICAgICAgICAgICBsZXZlbF9pbmRpY2F0b3I6IExFVkVMX0lORElDQVRPUixcclxuICAgICAgICAgICAgYmFyX2VtcHR5OiBCQVJfRU1QVFksXHJcbiAgICAgICAgICAgIGJhcl9mdWxsOiBCQVJfRlVMTFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNldEluZGljYXRvcnMoaW5kaWNhdG9yQ291bnQpIHtcclxuICAgICAgICB0aGlzLmFjdGl2ZUluZGljYXRvcnMgPSBpbmRpY2F0b3JDb3VudDtcclxuICAgIH1cclxuICAgIGFkZERyb3BTdG9uZUV2ZW50KCkge1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2Ryb3BzdG9uZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNldEluZGljYXRvcnMoMik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmxldmVsX2luZGljYXRvciwgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCAwLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYXJfZW1wdHksICgodGhpcy5jYW52YXMud2lkdGggKiAwLjM1KSAvIDcpICogKGkgKyAxKSArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gNiwgKHRoaXMuY2FudmFzLndpZHRoICogMC4zNSkgLyAxMCwgKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFjdGl2ZUluZGljYXRvcnM7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYXJfZnVsbCwgKCh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUpIC8gNykgKiAoaSArIDEpICsgdGhpcy5jYW52YXMud2lkdGggKiAwLjE1LCAodGhpcy5jYW52YXMuaGVpZ2h0ICogMC4wOSkgLyAyIC0gKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gNiwgKHRoaXMuY2FudmFzLndpZHRoICogMC4zNSkgLyAxMCwgKHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMDkpIC8gMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcChldmVudCkge1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZFB1enpsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuc2V0SW5kaWNhdG9ycyhldmVudC5kZXRhaWwuY291bnRlcik7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCJAZXZlbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBNb25zdGVyIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIHppbmRleDtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgaW1hZ2U7XHJcbiAgICBmcmFtZVg7XHJcbiAgICBmcmFtZVk7XHJcbiAgICBtYXhGcmFtZTtcclxuICAgIHg7XHJcbiAgICB5O1xyXG4gICAgZnBzO1xyXG4gICAgY291bnRGcmFtZTtcclxuICAgIGZyYW1lSW50ZXJ2YWw7XHJcbiAgICBmcmFtZVRpbWVyO1xyXG4gICAgY2FudmFzU3RhY2s7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIGdhbWU7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIG1vbnN0ZXJQaGFzZTtcclxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIG1vbnN0ZXJQaGFzZSwgY2FsbEJhY2tGdW5jdGlvbikge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyUGhhc2UgPSBtb25zdGVyUGhhc2U7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMuZ2FtZS53aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IHRoaXMuZ2FtZS5oZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb25zdGVyXCIpO1xyXG4gICAgICAgIHRoaXMuZnJhbWVYID0gMDtcclxuICAgICAgICB0aGlzLmZyYW1lWSA9IDA7XHJcbiAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDY7XHJcbiAgICAgICAgdGhpcy54ID0gdGhpcy5nYW1lLndpZHRoIC8gMiAtIHRoaXMuZ2FtZS53aWR0aCAqIDAuMjQzO1xyXG4gICAgICAgIHRoaXMueSA9IHRoaXMuZ2FtZS53aWR0aCAvIDM7XHJcbiAgICAgICAgdGhpcy5mcHMgPSAxMDtcclxuICAgICAgICB0aGlzLmNvdW50RnJhbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuZnJhbWVJbnRlcnZhbCA9IDEwMDAgLyB0aGlzLmZwcztcclxuICAgICAgICB0aGlzLmZyYW1lVGltZXIgPSAwO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0ge1xyXG4gICAgICAgICAgICBlYXRJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL2VhdDFcIiArIHRoaXMubW9uc3RlclBoYXNlICsgXCIucG5nXCIsXHJcbiAgICAgICAgICAgIGlkbGVJbWc6IFwiLi9hc3NldHMvaW1hZ2VzL2lkbGUxXCIgKyB0aGlzLm1vbnN0ZXJQaGFzZSArIFwiLnBuZ1wiLFxyXG4gICAgICAgICAgICBzcGl0SW1nOiBcIi4vYXNzZXRzL2ltYWdlcy9zcGl0MVwiICsgdGhpcy5tb25zdGVyUGhhc2UgKyBcIi5wbmdcIixcclxuICAgICAgICAgICAgZHJhZ0ltZzogXCIuL2Fzc2V0cy9pbWFnZXMvZHJhZzFcIiArIHRoaXMubW9uc3RlclBoYXNlICsgXCIucG5nXCIsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoY2FsbEJhY2tGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY2FsbEJhY2tGdW5jdGlvbigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZnJhbWVUaW1lciA+PSB0aGlzLmZyYW1lSW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZVRpbWVyID0gMDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZnJhbWVYIDwgdGhpcy5tYXhGcmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mcmFtZVgrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZnJhbWVYID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5mcmFtZVRpbWVyICs9IGRlbHRhVGltZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIDc3MCAqIHRoaXMuZnJhbWVYLCAxMzg2ICogdGhpcy5mcmFtZVksIDc2OCwgMTM4NiwgdGhpcy54ICogMC41LCB0aGlzLnkgKiAwLjEsICh0aGlzLndpZHRoIC8gMikgKiAxLjUsICh0aGlzLmhlaWdodCAvIDEuNSkgKiAxLjUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNoYW5nZUltYWdlKHNyYykge1xyXG4gICAgICAgIHRoaXMuaW1hZ2Uuc3JjID0gc3JjO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlVG9EcmFnQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIHRoaXMubWF4RnJhbWUgPSA2O1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmxvYWRlZEltYWdlcy5kcmFnSW1nO1xyXG4gICAgfVxyXG4gICAgY2hhbmdlVG9FYXRBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDEyO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmxvYWRlZEltYWdlcy5lYXRJbWc7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VUb0lkbGVBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDY7XHJcbiAgICAgICAgdGhpcy5pbWFnZSA9IHRoaXMubG9hZGVkSW1hZ2VzLmlkbGVJbWc7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VUb1NwaXRBbmltYXRpb24oKSB7XHJcbiAgICAgICAgdGhpcy5tYXhGcmFtZSA9IDEyO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSB0aGlzLmxvYWRlZEltYWdlcy5zcGl0SW1nO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKGV2ZW50LmRldGFpbC5pc0NvcnJlY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUb0VhdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGFuZ2VUb1NwaXRBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgIH1cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy51bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lcigpO1xyXG4gICAgfVxyXG4gICAgb25DbGljayh4Q2xpY2ssIHlDbGljaykge1xyXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4Q2xpY2sgLSB0aGlzLnggLSB0aGlzLndpZHRoIC8gNCkgKiAoeENsaWNrIC0gdGhpcy54IC0gdGhpcy53aWR0aCAvIDQpICtcclxuICAgICAgICAgICAgKHlDbGljayAtIHRoaXMueSAtIHRoaXMuaGVpZ2h0IC8gMi4yKSAqXHJcbiAgICAgICAgICAgICAgICAoeUNsaWNrIC0gdGhpcy55IC0gdGhpcy5oZWlnaHQgLyAyLjIpKTtcclxuICAgICAgICBpZiAoZGlzdGFuY2UgPD0gMTAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBDbG9zZUJ1dHRvbiwgQ2FuY2VsQnV0dG9uLCBSZXRyeUJ1dHRvbiB9IGZyb20gXCJAYnV0dG9uc1wiO1xyXG5pbXBvcnQgeyBDTElDSywgbGFuZywgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCBBcmVZb3VTdXJlUG9wVXAgZnJvbSBcIkBwb3B1cHMvc3VyZS1wb3B1cFwiO1xyXG5pbXBvcnQgeyBBVURJT19BUkVfWU9VX1NVUkUsIFBPUFVQX0JHX0lNRyB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhdXNlUG9wVXAge1xyXG4gICAgY2FudmFzO1xyXG4gICAgY29udGV4dDtcclxuICAgIGNhbmNlbEJ1dHRvbjtcclxuICAgIHJldHJ5QnV0dG9uO1xyXG4gICAgY2xvc2VCdXR0b247XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHBvcF91cF9pbWFnZTtcclxuICAgIGNhbGxiYWNrO1xyXG4gICAgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgIHJlbG9hZFNjZW5lO1xyXG4gICAgZ2FtZXBsYXlEYXRhO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICByZXRyeVN1cmVQb3B1cDtcclxuICAgIENsb3NlU3VyZVBvcHVwO1xyXG4gICAgaXNSZXRyeUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgIGlzQ2xvc2VCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGNhbGxiYWNrLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCByZWxvYWRTY2VuZSwgZ2FtZXBsYXlEYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMuZ2FtZXBsYXlEYXRhID0gZ2FtZXBsYXlEYXRhO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiA9IHN3aXRjaFRvTGV2ZWxTZWxlY3Rpb247XHJcbiAgICAgICAgdGhpcy5yZWxvYWRTY2VuZSA9IHJlbG9hZFNjZW5lO1xyXG4gICAgICAgIGNvbnN0IHNlbGZJZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBzZWxmSWRFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5jYW5jZWxCdXR0b24gPSBuZXcgQ2FuY2VsQnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy5jYW52YXMpO1xyXG4gICAgICAgIHRoaXMucmV0cnlCdXR0b24gPSBuZXcgUmV0cnlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjU1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIgK1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNCAtXHJcbiAgICAgICAgICAgICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTkpIC8gMik7XHJcbiAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9IG5ldyBDbG9zZUJ1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMjUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICogMC40IC1cclxuICAgICAgICAgICAgKHRoaXMuY2FudmFzLndpZHRoICogMC4xOSkgLyAyKTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgcG9wX3VwX2ltYWdlOiBQT1BVUF9CR19JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBvcF91cF9pbWFnZSA9IGltYWdlc1tcInBvcF91cF9pbWFnZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMucmV0cnlTdXJlUG9wdXAgPSBuZXcgQXJlWW91U3VyZVBvcFVwKHRoaXMuY2FudmFzLCB0aGlzLnllc1JldHJ5Q2FsbGJhY2ssIHRoaXMubm9SZXRyeUNhbGxiYWNrKTtcclxuICAgICAgICB0aGlzLkNsb3NlU3VyZVBvcHVwID0gbmV3IEFyZVlvdVN1cmVQb3BVcCh0aGlzLmNhbnZhcywgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCB0aGlzLm5vQ2xvc2VDYWxsYmFjayk7XHJcbiAgICB9XHJcbiAgICB5ZXNSZXRyeUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICB0aGlzLnJlbG9hZFNjZW5lKHRoaXMuZ2FtZXBsYXlEYXRhLCBcIkdhbWVQbGF5XCIpO1xyXG4gICAgfTtcclxuICAgIG5vUmV0cnlDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzUmV0cnlCdXR0b25DbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgbm9DbG9zZUNhbGxiYWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQ2xvc2VCdXR0b25DbGlja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNDbG9zZUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBhZGRMaXN0bmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuY2VsQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnJldHJ5QnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcgPT0gXCJlbmdsaXNoXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JldHJ5QnV0dG9uQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJldHJ5U3VyZVBvcHVwLmFkZExpc3RuZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUFyZVlvdVN1cmVTb3VuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZFNjZW5lKHRoaXMuZ2FtZXBsYXlEYXRhLCBcIkdhbWVQbGF5XCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgaWYgKGxhbmcgPT0gXCJlbmdsaXNoXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0Nsb3NlQnV0dG9uQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLkNsb3NlU3VyZVBvcHVwLmFkZExpc3RuZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUFyZVlvdVN1cmVTb3VuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN3aXRjaFRvTGV2ZWxTZWxlY3Rpb24oXCJHYW1lUGxheVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2JhKDAsMCwwLDAuNSlcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucG9wX3VwX2ltYWdlLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMSwgdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuOCwgdGhpcy5jYW52YXMud2lkdGggKiAwLjgpO1xyXG4gICAgICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIHRoaXMucmV0cnlCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLmNsb3NlQnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNSZXRyeUJ1dHRvbkNsaWNrZWQgPT0gdHJ1ZSAmJiBsYW5nID09IFwiZW5nbGlzaFwiKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXRyeVN1cmVQb3B1cC5kcmF3KCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ2xvc2VCdXR0b25DbGlja2VkID09IHRydWUgJiYgbGFuZyA9PSBcImVuZ2xpc2hcIilcclxuICAgICAgICAgICAgICAgIHRoaXMuQ2xvc2VTdXJlUG9wdXAuZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlDbGlja1NvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgIH07XHJcbiAgICBwbGF5QXJlWW91U3VyZVNvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX0FSRV9ZT1VfU1VSRSk7XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBDTElDSywgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFllc0J1dHRvbiwgTm9CdXR0b24gfSBmcm9tIFwiQGJ1dHRvbnNcIjtcclxuaW1wb3J0IHsgUE9QVVBfQkdfSU1HIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXJlWW91U3VyZVBvcFVwIHtcclxuICAgIGNhbnZhcztcclxuICAgIGNvbnRleHQ7XHJcbiAgICB5ZXNCdXR0b247XHJcbiAgICBub0J1dHRvbjtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgcG9wX3VwX2ltYWdlO1xyXG4gICAgeWVzQ2FsbGJhY2s7XHJcbiAgICBub0NhbGxiYWNrO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIHllc0NhbGxiYWNrLCBub0NhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy55ZXNDYWxsYmFjayA9IHllc0NhbGxiYWNrO1xyXG4gICAgICAgIHRoaXMubm9DYWxsYmFjayA9IG5vQ2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLnllc0J1dHRvbiA9IG5ldyBZZXNCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy5jYW52YXMud2lkdGggKiAwLjU1LCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIgK1xyXG4gICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAqIDAuNCAtXHJcbiAgICAgICAgICAgICh0aGlzLmNhbnZhcy53aWR0aCAqIDAuMTUpIC8gMik7XHJcbiAgICAgICAgdGhpcy5ub0J1dHRvbiA9IG5ldyBOb0J1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMjUsIHRoaXMuY2FudmFzLmhlaWdodCAqIDAuMiArXHJcbiAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoICogMC40IC1cclxuICAgICAgICAgICAgKHRoaXMuY2FudmFzLndpZHRoICogMC4xNSkgLyAyKTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHsgcG9wX3VwX2ltYWdlOiBQT1BVUF9CR19JTUcgfSwgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnBvcF91cF9pbWFnZSA9IGltYWdlc1tcInBvcF91cF9pbWFnZVwiXTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYWRkTGlzdG5lciA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZUNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciByZWN0ID0gc2VsZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBpZiAodGhpcy55ZXNCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlDbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnllc0NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLm5vQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5wbGF5Q2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5ub0NhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJnYmEoMCwwLDAsMC41KVwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wb3BfdXBfaW1hZ2UsIHRoaXMuY2FudmFzLndpZHRoICogMC4xLCB0aGlzLmNhbnZhcy5oZWlnaHQgKiAwLjIsIHRoaXMuY2FudmFzLndpZHRoICogMC44LCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuOCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRZID0gdGhpcy5jYW52YXMuaGVpZ2h0ICogMC4yICsgODA7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gXCIyNHB4IEFyaWFsXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChcIkFyZSB5b3Ugc3VyZT9cIiwgdGhpcy5jYW52YXMud2lkdGggLyAyLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyAyLjgpO1xyXG4gICAgICAgICAgICB0aGlzLnllc0J1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIHRoaXMubm9CdXR0b24uZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHBsYXlDbGlja1NvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgIH07XHJcbiAgICBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoQ0xJQ0ssIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiQGV2ZW50c1wiO1xyXG5pbXBvcnQgeyBVdGlscywgZm9udCwgVklTSUJJTElUWV9DSEFOR0UgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBQUk9NUFRfUExBWV9CVVRUT04sIFBST01QVF9URVhUX0JHIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGNsYXNzIFByb21wdFRleHQgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBsZXZlbERhdGE7XHJcbiAgICBjdXJyZW50UHJvbXB0VGV4dDtcclxuICAgIGN1cnJlbnRQdXp6bGVEYXRhO1xyXG4gICAgY2FuYXZzRWxlbWVudDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBwcm9tcHRfaW1hZ2U7XHJcbiAgICB0YXJnZXRTdG9uZXM7XHJcbiAgICByaWdodFRvTGVmdDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBpc1N0b25lRHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgZHJvcHBlZFN0b25lcyA9IDA7XHJcbiAgICB0aW1lID0gMDtcclxuICAgIHByb21wdEltYWdlV2lkdGggPSAwO1xyXG4gICAgaXNBcHBGb3JlZ3JvdW5kID0gdHJ1ZTtcclxuICAgIHNjYWxlID0gMTtcclxuICAgIGlzU2NhbGluZ1VwID0gdHJ1ZTtcclxuICAgIHNjYWxlRmFjdG9yID0gMC4wMDA1MDtcclxuICAgIHByb21wdEltYWdlSGVpZ2h0ID0gMDtcclxuICAgIHByb21wdFBsYXlCdXR0b247XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBjdXJyZW50UHV6emxlRGF0YSwgbGV2ZWxEYXRhLCByaWdodFRvTGVmdCkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgPSByaWdodFRvTGVmdDtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9tcHRUZXh0ID0gY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YSA9IGN1cnJlbnRQdXp6bGVEYXRhO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXM7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wcmVsb2FkUHJvbXB0QXVkaW8odGhpcy5nZXRQcm9tcHRBdWRpb1VybCgpKTtcclxuICAgICAgICB0aGlzLnByb21wdF9pbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0UGxheUJ1dHRvbiA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIHRoaXMubG9hZEltYWdlcygpO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRJbWFnZVdpZHRoID0gdGhpcy53aWR0aCAqIDAuNjU7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRJbWFnZUhlaWdodCA9IHRoaXMuaGVpZ2h0ICogMC4zO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VEb3duID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHNlbGYub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlTb3VuZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBnZXRQcm9tcHRBdWRpb1VybCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gVXRpbHMuZ2V0Q29udmVydGVkRGV2UHJvZFVSTCh0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnByb21wdC5wcm9tcHRBdWRpbyk7XHJcbiAgICB9O1xyXG4gICAgcGxheVNvdW5kID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXBwRm9yZWdyb3VuZCkge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlQcm9tcHRBdWRpbyhVdGlscy5nZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHRoaXMuY3VycmVudFB1enpsZURhdGEucHJvbXB0LnByb21wdEF1ZGlvKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIG9uQ2xpY2soeENsaWNrLCB5Q2xpY2spIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHhDbGljayAtIHRoaXMud2lkdGggLyAzKSA8IDEyICYmIE1hdGguc3FydCh5Q2xpY2sgLSB0aGlzLmhlaWdodCAvIDUuNSkgPCAxMDtcclxuICAgIH1cclxuICAgIHNldEN1cnJyZW50UHV6emxlRGF0YShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UHJvbXB0VGV4dCA9IGRhdGEucHJvbXB0LnByb21wdFRleHQ7XHJcbiAgICAgICAgdGhpcy50YXJnZXRTdG9uZXMgPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcztcclxuICAgIH1cclxuICAgIGRyYXdSVExMYW5nKCkge1xyXG4gICAgICAgIHZhciB4ID0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuaGVpZ2h0ICogMC4yNjtcclxuICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICB2YXIgZm9udFNpemUgPSB0aGlzLmNhbGN1bGF0ZUZvbnQoKTtcclxuICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHRoaXMucHJvbXB0SW1hZ2VXaWR0aDtcclxuICAgICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSB0aGlzLnByb21wdEltYWdlSGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gYCR7Zm9udFNpemV9cHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLmxldmVsVHlwZSA9PSBcIkxldHRlckluV29yZFwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEucHJvdG9UeXBlID09IFwiVmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGV0dGVySW5Xb3JkID0gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXNbMF0sIFwiZ1wiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJyZWRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dCh0aGlzLnRhcmdldFN0b25lc1swXSwgeCArIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dChsZXR0ZXJJbldvcmQpLndpZHRoIC8gMiwgeSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KGxldHRlckluV29yZCwgeCAtIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLnRhcmdldFN0b25lc1swXSkud2lkdGggLyAyLCB5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4xNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlID09IFwiV29yZFwiKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEucHJvdG9UeXBlID09IFwiVmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICB4ID0geCAtIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLmN1cnJlbnRQcm9tcHRUZXh0KS53aWR0aCAqIDAuNTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0aGlzLnRhcmdldFN0b25lcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyb3BwZWRTdG9uZXMgPiBpIHx8IHRoaXMuZHJvcHBlZFN0b25lcyA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KHRoaXMudGFyZ2V0U3RvbmVzW2ldLCB4LCB5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy50YXJnZXRTdG9uZXNbaV0sIHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB4ID0geCArIHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dCh0aGlzLnRhcmdldFN0b25lc1tpXSkud2lkdGggKyA1O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjE1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbFR5cGUgPT0gXCJhdWRpb1BsYXllcldvcmRcIikge1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gKHRoaXMud2lkdGggLSBzY2FsZWRXaWR0aCkgKiAxLjI1O1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gKHRoaXMuaGVpZ2h0IC0gc2NhbGVkSGVpZ2h0KSAqIDAuMzM7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCBvZmZzZXRYLCBvZmZzZXRZLCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5wcm90b1R5cGUgPT0gXCJWaXNpYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5jdXJyZW50UHJvbXB0VGV4dCwgeCwgeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMTUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3T3RoZXJzKCkge1xyXG4gICAgICAgIGNvbnN0IHByb21wdFRleHRMZXR0ZXJzID0gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5zcGxpdChcIlwiKTtcclxuICAgICAgICBjb25zdCB4ID0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICAgICAgY29uc3QgeSA9IHRoaXMuaGVpZ2h0ICogMC4yODtcclxuICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHRoaXMucHJvbXB0SW1hZ2VXaWR0aDtcclxuICAgICAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSB0aGlzLnByb21wdEltYWdlSGVpZ2h0O1xyXG4gICAgICAgIHZhciBmb250U2l6ZSA9IHRoaXMuY2FsY3VsYXRlRm9udCgpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5mb250ID0gYCR7Zm9udFNpemV9cHggJHtmb250fSwgbW9ub3NwYWNlYDtcclxuICAgICAgICBsZXQgc3RhcnRQcm9tcHR0ZXh0WCA9IHRoaXMud2lkdGggLyAyIC1cclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0Lm1lYXN1cmVUZXh0KHRoaXMuY3VycmVudFByb21wdFRleHQpLndpZHRoIC8gMjtcclxuICAgICAgICBsZXQgY3VycmVudFdvcmRXaWR0aCA9IDA7XHJcbiAgICAgICAgdmFyIGxldHRlckhpZ2hsaWdodCA9IHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzWzBdLnNwbGl0KFwiXCIpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvbXB0VGV4dExldHRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTGV0dGVySW5Xb3JkXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGV0dGVySGlnaGxpZ2h0LmluY2x1ZGVzKHByb21wdFRleHRMZXR0ZXJzW2ldKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVySGlnaGxpZ2h0ID0gbGV0dGVySGlnaGxpZ2h0LnNsaWNlKDEsIGxldHRlckhpZ2hsaWdodC5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsVGV4dChwcm9tcHRUZXh0TGV0dGVyc1tpXSwgc3RhcnRQcm9tcHR0ZXh0WCwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgdGhpcy53aWR0aCAvIDIuNCwgeSAvIDEuMjUsIHNjYWxlZFdpZHRoIC8gNCwgc2NhbGVkSGVpZ2h0IC8gNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIldvcmRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEucHJvdG9UeXBlID09IFwiVmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyb3BwZWRTdG9uZXMgPiBpIHx8IHRoaXMuZHJvcHBlZFN0b25lcyA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQocHJvbXB0VGV4dExldHRlcnNbaV0sIHN0YXJ0UHJvbXB0dGV4dFgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjI1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTb3VuZFdvcmRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRQbGF5QnV0dG9uLCB0aGlzLndpZHRoIC8gMi40LCB5IC8gMS4yNSwgc2NhbGVkV2lkdGggLyA0LCBzY2FsZWRIZWlnaHQgLyA0KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGEubGV2ZWxNZXRhLnByb3RvVHlwZSA9PSBcIlZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5jdXJyZW50UHJvbXB0VGV4dCwgdGhpcy53aWR0aCAvIDIuMSwgeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLnByb21wdFBsYXlCdXR0b24sIHRoaXMud2lkdGggLyAyLjQsIHkgLyAxLjI1LCBzY2FsZWRXaWR0aCAvIDQsIHNjYWxlZEhlaWdodCAvIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50V29yZFdpZHRoID0gKHRoaXMuY29udGV4dC5tZWFzdXJlVGV4dChwcm9tcHRUZXh0TGV0dGVyc1tpXSkud2lkdGggKyB0aGlzLmNvbnRleHQubWVhc3VyZVRleHQocHJvbXB0VGV4dExldHRlcnNbaSArIDFdKS53aWR0aCkgLyAyO1xyXG4gICAgICAgICAgICBzdGFydFByb21wdHRleHRYICs9IGN1cnJlbnRXb3JkV2lkdGg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNjYWxpbmcoKTtcclxuICAgICAgICB0aGlzLnRpbWUgPSAoZGVsdGFUaW1lIDwgMTcpID8gdGhpcy50aW1lICsgTWF0aC5mbG9vcihkZWx0YVRpbWUpIDogdGhpcy50aW1lICsgMTY7XHJcbiAgICAgICAgaWYgKE1hdGguZmxvb3IodGhpcy50aW1lKSA+PSAxOTEwICYmIE1hdGguZmxvb3IodGhpcy50aW1lKSA8PSAxOTI2KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc1N0b25lRHJvcHBlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzY2FsZWRXaWR0aCA9IHRoaXMucHJvbXB0SW1hZ2VXaWR0aCAqIHRoaXMuc2NhbGU7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IHRoaXMucHJvbXB0SW1hZ2VIZWlnaHQgKiB0aGlzLnNjYWxlO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gKHRoaXMud2lkdGggLSBzY2FsZWRXaWR0aCkgLyAyO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRZID0gKHRoaXMuaGVpZ2h0IC0gc2NhbGVkSGVpZ2h0KSAvIDU7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5wcm9tcHRfaW1hZ2UsIG9mZnNldFgsIG9mZnNldFksIHNjYWxlZFdpZHRoLCBzY2FsZWRIZWlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0VG9MZWZ0XHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuZHJhd1JUTExhbmcoKVxyXG4gICAgICAgICAgICAgICAgOiB0aGlzLmRyYXdPdGhlcnMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmlzU3RvbmVEcm9wcGVkID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmRyb3BwZWRTdG9uZXMgPSAwO1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEgPSB0aGlzLmxldmVsRGF0YS5wdXp6bGVzW2V2ZW50LmRldGFpbC5jb3VudGVyXTtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9tcHRUZXh0ID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS5wcm9tcHQucHJvbXB0VGV4dDtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucHJlbG9hZFByb21wdEF1ZGlvKHRoaXMuZ2V0UHJvbXB0QXVkaW9VcmwoKSk7XHJcbiAgICAgICAgdGhpcy5pc1N0b25lRHJvcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGRyb3BwZWRTdG9uZUluZGV4KGluZGV4KSB7XHJcbiAgICAgICAgdGhpcy5kcm9wcGVkU3RvbmVzID0gaW5kZXg7XHJcbiAgICB9XHJcbiAgICBjYWxjdWxhdGVGb250KCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5wcm9tcHRJbWFnZVdpZHRoIC8gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5sZW5ndGggPiAzNSkgPyAzNSA6IHRoaXMud2lkdGggKiAwLjY1IC8gdGhpcy5jdXJyZW50UHJvbXB0VGV4dC5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVTY2FsaW5nKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2NhbGluZ1VwKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NhbGUgKz0gdGhpcy5zY2FsZUZhY3RvcjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2NhbGUgPj0gMS4wNSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1NjYWxpbmdVcCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNjYWxlIC09IHRoaXMuc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNjYWxlIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NhbGUgPSAxO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1NjYWxpbmdVcCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT0gXCJoaWRkZW5cIikge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICAgICAgdGhpcy5pc0FwcEZvcmVncm91bmQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICB0aGlzLmlzQXBwRm9yZWdyb3VuZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGFzeW5jIGxvYWRJbWFnZXMoKSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2UxUHJvbWlzZSA9IHRoaXMubG9hZEltYWdlKHRoaXMucHJvbXB0X2ltYWdlLCBQUk9NUFRfVEVYVF9CRyk7XHJcbiAgICAgICAgY29uc3QgaW1hZ2UyUHJvbWlzZSA9IHRoaXMubG9hZEltYWdlKHRoaXMucHJvbXB0UGxheUJ1dHRvbiwgUFJPTVBUX1BMQVlfQlVUVE9OKTtcclxuICAgICAgICBhd2FpdCBQcm9taXNlLmFsbChbaW1hZ2UxUHJvbWlzZSwgaW1hZ2UyUHJvbWlzZV0pO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAvLyBZb3UgY2FuIGRvIGFkZGl0aW9uYWwgYWN0aW9ucyBoZXJlIGFmdGVyIGJvdGggaW1hZ2VzIGFyZSBsb2FkZWQuXHJcbiAgICB9XHJcbiAgICBsb2FkSW1hZ2UoaW1hZ2UsIHNyYykge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGltYWdlLm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaW1hZ2Uuc3JjID0gc3JjO1xyXG4gICAgICAgICAgICBpbWFnZS5vbmVycm9yID0gKGVycm9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0b25lQ29uZmlnLCBWSVNJQklMSVRZX0NIQU5HRSwgVXRpbHMgfSBmcm9tICdAY29tbW9uJztcclxuaW1wb3J0IHsgRXZlbnRNYW5hZ2VyIH0gZnJvbSBcIkBldmVudHNcIjtcclxuaW1wb3J0IHsgVHV0b3JpYWwsIEF1ZGlvUGxheWVyIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCJAZGF0YVwiO1xyXG5pbXBvcnQgeyBBVURJT19QQVRIX0VBVFMsIEFVRElPX1BBVEhfTU9OU1RFUl9TUElULCBBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVELCBBVURJT19QQVRIX1BPSU5UU19BREQsIEFVRElPX1BBVEhfQ09SUkVDVF9TVE9ORSwgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DLCBBU1NFVFNfUEFUSF9TVE9ORV9QSU5LX0JHIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RvbmVIYW5kbGVyIGV4dGVuZHMgRXZlbnRNYW5hZ2VyIHtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBjYW52YXM7XHJcbiAgICBjdXJyZW50UHV6emxlRGF0YTtcclxuICAgIHRhcmdldFN0b25lcztcclxuICAgIHN0b25lUG9zO1xyXG4gICAgcGlja2VkU3RvbmU7XHJcbiAgICBmb2lsU3RvbmVzID0gbmV3IEFycmF5KCk7XHJcbiAgICBhbnN3ZXIgPSBcIlwiO1xyXG4gICAgcHV6emxlTnVtYmVyO1xyXG4gICAgbGV2ZWxEYXRhO1xyXG4gICAgY29ycmVjdEFuc3dlcjtcclxuICAgIHB1enpsZVN0YXJ0VGltZTtcclxuICAgIHNob3dUdXRvcmlhbCA9IEdhbWVTY29yZS5nZXREYXRhZnJvbVN0b3JhZ2UoKS5sZW5ndGggPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgY29ycmVjdFN0b25lQXVkaW87XHJcbiAgICB0dXRvcmlhbDtcclxuICAgIGNvcnJlY3RUYXJnZXRTdG9uZTtcclxuICAgIHN0b25lYmc7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIGZlZWRiYWNrQXVkaW9zO1xyXG4gICAgdGltZXJUaWNraW5nSW5zdGFuY2U7XHJcbiAgICBpc0dhbWVQYXVzZWQgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIGNhbnZhcywgcHV6emxlTnVtYmVyLCBsZXZlbERhdGEsIGZlZWRiYWNrQXVkaW9zLCB0aW1lclRpY2tpbmdJbnN0YW5jZSkge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSBwdXp6bGVOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgPSBsZXZlbERhdGE7XHJcbiAgICAgICAgdGhpcy5zZXRUYXJnZXRTdG9uZSh0aGlzLnB1enpsZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplU3RvbmVQb3MoKTtcclxuICAgICAgICB0aGlzLmNvcnJlY3RTdG9uZUF1ZGlvID0gbmV3IEF1ZGlvKEFVRElPX1BBVEhfQ09SUkVDVF9TVE9ORSk7XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpby5sb29wID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5mZWVkYmFja0F1ZGlvcyA9IHRoaXMuY29udmVydEZlZWRCYWNrQXVkaW9zVG9MaXN0KGZlZWRiYWNrQXVkaW9zKTtcclxuICAgICAgICB0aGlzLnB1enpsZVN0YXJ0VGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbCA9IG5ldyBUdXRvcmlhbChjb250ZXh0LCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQsIHB1enpsZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5zdG9uZWJnID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy5zdG9uZWJnLnNyYyA9IEFTU0VUU19QQVRIX1NUT05FX1BJTktfQkc7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMuc3RvbmViZy5vbmxvYWQgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVN0b25lcyh0aGlzLnN0b25lYmcpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UgPSB0aW1lclRpY2tpbmdJbnN0YW5jZTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGNyZWF0ZVN0b25lcyhpbWcpIHtcclxuICAgICAgICBjb25zdCBmb2lsU3RvbmVzID0gdGhpcy5nZXRGb2lsU3RvbmVzKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmb2lsU3RvbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChmb2lsU3RvbmVzW2ldID09IHRoaXMuY29ycmVjdFRhcmdldFN0b25lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR1dG9yaWFsLnVwZGF0ZVRhcmdldFN0b25lUG9zaXRpb25zKHRoaXMuc3RvbmVQb3NbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZm9pbFN0b25lcy5wdXNoKG5ldyBTdG9uZUNvbmZpZyh0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQsIGZvaWxTdG9uZXNbaV0sIHRoaXMuc3RvbmVQb3NbaV1bMF0sIHRoaXMuc3RvbmVQb3NbaV1bMV0sIGltZywgdGhpcy50aW1lclRpY2tpbmdJbnN0YW5jZSwgaSA9PSBmb2lsU3RvbmVzLmxlbmd0aCAtIDEgPyB0aGlzLnR1dG9yaWFsIDogbnVsbCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZvaWxTdG9uZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5mb2lsU3RvbmVzW2ldLmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuZm9pbFN0b25lc1t0aGlzLmZvaWxTdG9uZXMubGVuZ3RoIC0gMV0uZnJhbWUgPj0gMTAwICYmXHJcbiAgICAgICAgICAgICF0aGlzLmlzR2FtZVBhdXNlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyVGlja2luZ0luc3RhbmNlLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXdXb3JkUHV6emxlTGV0dGVycyhkZWx0YVRpbWUsIHNob3VsZEhpZGVTdG9uZUNoZWNrZXIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZm9pbFN0b25lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoc2hvdWxkSGlkZVN0b25lQ2hlY2tlcihpKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2lsU3RvbmVzW2ldLmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5mb2lsU3RvbmVzW3RoaXMuZm9pbFN0b25lcy5sZW5ndGggLSAxXS5mcmFtZSA+PSAxMDAgJiZcclxuICAgICAgICAgICAgIXRoaXMuaXNHYW1lUGF1c2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZXJUaWNraW5nSW5zdGFuY2UudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZVN0b25lUG9zKCkge1xyXG4gICAgICAgIGxldCBvZmZzZXRDb29yZGluYXRlVmFsdWUgPSAzMjtcclxuICAgICAgICB0aGlzLnN0b25lUG9zID0gW1xyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDUgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjkgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMTUgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMy41ICsgdGhpcy5jYW52YXMud2lkdGggLyAyIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS4yIC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDQgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjI4IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDcgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxLjUgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gMi4zICtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIuMSAtXHJcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMS45IC0gb2Zmc2V0Q29vcmRpbmF0ZVZhbHVlLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCAvIDIuMyArXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYW52YXMud2lkdGggLyAyLjEgLVxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuNDIgLSBvZmZzZXRDb29yZGluYXRlVmFsdWUsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLndpZHRoIC8gNiAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCAvIDEuMSAtIG9mZnNldENvb3JkaW5hdGVWYWx1ZSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMuc3RvbmVQb3MgPSB0aGlzLnN0b25lUG9zLnNvcnQoKCkgPT4gTWF0aC5yYW5kb20oKSAtIDAuNSk7XHJcbiAgICB9XHJcbiAgICBzZXRUYXJnZXRTdG9uZShwdXp6bGVOdW1iZXIpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhID0gdGhpcy5sZXZlbERhdGEucHV6emxlc1twdXp6bGVOdW1iZXJdO1xyXG4gICAgICAgIHRoaXMudGFyZ2V0U3RvbmVzID0gWy4uLnRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzXTtcclxuICAgICAgICB0aGlzLmNvcnJlY3RUYXJnZXRTdG9uZSA9IHRoaXMudGFyZ2V0U3RvbmVzLmpvaW4oXCJcIik7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3AoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSBbXTtcclxuICAgIH1cclxuICAgIGhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFB1enpsZU51bWJlcihldmVudC5kZXRhaWwuY291bnRlcik7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSBldmVudC5kZXRhaWwuY291bnRlcjtcclxuICAgICAgICB0aGlzLnNldFRhcmdldFN0b25lKHRoaXMucHV6emxlTnVtYmVyKTtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVTdG9uZVBvcygpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlU3RvbmVzKHRoaXMuc3RvbmViZyk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxuICAgIGlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdChkcm9wcGVkU3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVG8gRG86IE5lZWQgdG8gcmVmYWN0b3Igb3IgcmV2b21lIHRoaXMgY29tcGxldGVseSBhbmQgcGxhY2Ugc29tZXRoaW5nXHJcbiAgICAgICAgICogdGhhdCBpcyB0YWlsb3JlZCB0byBzaW5nbGUgbGV0dGVyIHB1enpsZSBzaW5jZSB3b3JkIHB1enpsZSBubyBsb25nZXIgdXNlcyB0aGlzLlxyXG4gICAgICAgICAqIFdpbGwgbGVhdmUgdGhpcyBmb3Igbm93IHRvIGF2b2lkIG1lc3Npbmcgd2l0aHQgdGhlIHNpbmdsZSBsZXR0ZXIgcHV6emxlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGlzTGV0dGVyRHJvcENvcnJlY3QgPSBpc1dvcmRcclxuICAgICAgICAgICAgPyBkcm9wcGVkU3RvbmUgPT0gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmUuc3Vic3RyaW5nKDAsIGRyb3BwZWRTdG9uZS5sZW5ndGgpXHJcbiAgICAgICAgICAgIDogZHJvcHBlZFN0b25lID09IHRoaXMuY29ycmVjdFRhcmdldFN0b25lO1xyXG4gICAgICAgIHRoaXMucHJvY2Vzc0xldHRlckRyb3BGZWVkYmFja0F1ZGlvKGZlZWRCYWNrSW5kZXgsIGlzTGV0dGVyRHJvcENvcnJlY3QsIGlzV29yZCwgZHJvcHBlZFN0b25lKTtcclxuICAgICAgICByZXR1cm4gaXNMZXR0ZXJEcm9wQ29ycmVjdDtcclxuICAgIH1cclxuICAgIHByb2Nlc3NMZXR0ZXJEcm9wRmVlZGJhY2tBdWRpbyhmZWVkQmFja0luZGV4LCBpc0xldHRlckRyb3BDb3JyZWN0LCBpc1dvcmQsIGRyb3BwZWRTdG9uZSkge1xyXG4gICAgICAgIGlmIChpc0xldHRlckRyb3BDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbiA9IGlzV29yZFxyXG4gICAgICAgICAgICAgICAgPyBkcm9wcGVkU3RvbmUgPT09IHRoaXMuZ2V0Q29ycmVjdFRhcmdldFN0b25lKCkgLy8gY29uZGl0aW9uIGZvciB3b3JkIHB1enpsZVxyXG4gICAgICAgICAgICAgICAgOiBpc0xldHRlckRyb3BDb3JyZWN0OyAvLyBmb3IgbGV0dGVyIGFuZCBsZXR0ZXIgZm9yIHdvcmQgcHV6emxlXHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5RmVlZGJhY2tBdWRpb3MoZmFsc2UsIEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DKDIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5RmVlZGJhY2tBdWRpb3MoZmFsc2UsIEFVRElPX1BBVEhfRUFUUywgQVVESU9fUEFUSF9NT05TVEVSX1NQSVQsIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkgPiAwID8gQVVESU9fUEFUSF9NT05TVEVSX0RJU1NBUE9JTlRFRCA6IG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldENvcnJlY3RUYXJnZXRTdG9uZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb3JyZWN0VGFyZ2V0U3RvbmU7XHJcbiAgICB9XHJcbiAgICBnZXRGb2lsU3RvbmVzKCkge1xyXG4gICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEudGFyZ2V0U3RvbmVzLmZvckVhY2goKGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuaW5kZXhPZihlKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBjb25zdCB0b3RhbFN0b25lc0NvdW50ID0gdGhpcy5jdXJyZW50UHV6emxlRGF0YS50YXJnZXRTdG9uZXMubGVuZ3RoICtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UHV6emxlRGF0YS5mb2lsU3RvbmVzLmxlbmd0aDtcclxuICAgICAgICBpZiAodG90YWxTdG9uZXNDb3VudCA+IDgpIHtcclxuICAgICAgICAgICAgY29uc3QgZXh0cmFTdG9uZXNDb3VudCA9IHRvdGFsU3RvbmVzQ291bnQgLSA4O1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc3BsaWNlKDAsIGV4dHJhU3RvbmVzQ291bnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLnRhcmdldFN0b25lcy5mb3JFYWNoKChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFB1enpsZURhdGEuZm9pbFN0b25lcy5wdXNoKGUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRQdXp6bGVEYXRhLmZvaWxTdG9uZXMuc29ydCgoKSA9PiBNYXRoLnJhbmRvbSgpIC0gMC41KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5jb3JyZWN0U3RvbmVBdWRpby5wYXVzZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnZlcnRGZWVkQmFja0F1ZGlvc1RvTGlzdChmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgIGZlZWRiYWNrQXVkaW9zW1wiZmFudGFzdGljXCJdLFxyXG4gICAgICAgICAgICBmZWVkYmFja0F1ZGlvc1tcImdyZWF0XCJdLFxyXG4gICAgICAgICAgICBmZWVkYmFja0F1ZGlvc1tcImFtYXppbmdcIl1cclxuICAgICAgICBdO1xyXG4gICAgfVxyXG4gICAgc2V0R2FtZVBhdXNlKGlzR2FtZVBhdXNlZCkge1xyXG4gICAgICAgIHRoaXMuaXNHYW1lUGF1c2VkID0gaXNHYW1lUGF1c2VkO1xyXG4gICAgfVxyXG4gICAgcGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kKGZlZWRCYWNrSW5kZXgpIHtcclxuICAgICAgICBjb25zdCByYW5kb21OdW1iZXIgPSBVdGlscy5nZXRSYW5kb21OdW1iZXIoMSwgMykudG9TdHJpbmcoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlGZWVkYmFja0F1ZGlvcyhmYWxzZSwgQVVESU9fUEFUSF9FQVRTLCBBVURJT19QQVRIX0NIRUVSSU5HX0ZVTkMocmFuZG9tTnVtYmVyKSwgQVVESU9fUEFUSF9QT0lOVFNfQURELCBVdGlscy5nZXRDb252ZXJ0ZWREZXZQcm9kVVJMKHRoaXMuZmVlZGJhY2tBdWRpb3NbZmVlZEJhY2tJbmRleF0pKTtcclxuICAgICAgICAvLyB0byBwbGF5IHRoZSBhdWRpbyBwYXJyYWxsZWx5LlxyXG4gICAgICAgIHRoaXMuY29ycmVjdFN0b25lQXVkaW8ucGxheSgpO1xyXG4gICAgfVxyXG4gICAgcmVzZXRTdG9uZVBvc2l0aW9uKHdpZHRoLCBwaWNrZWRTdG9uZSwgcGlja2VkU3RvbmVPYmplY3QpIHtcclxuICAgICAgICBjb25zdCBzdG9uZSA9IHBpY2tlZFN0b25lO1xyXG4gICAgICAgIGNvbnN0IHN0b25lT2JqID0gcGlja2VkU3RvbmVPYmplY3Q7XHJcbiAgICAgICAgLy9SZXNldHMgdGhlIHByZXZpb3VzIHN0b25lIGxldHRlciB0byBpdHMgb3JpZ2luYWwgcG9zaXRpb24uXHJcbiAgICAgICAgaWYgKHN0b25lICYmXHJcbiAgICAgICAgICAgIHN0b25lT2JqICYmXHJcbiAgICAgICAgICAgIHN0b25lLnRleHQgJiZcclxuICAgICAgICAgICAgdHlwZW9mIHN0b25lT2JqLm9yaWd4ID09PSBcIm51bWJlclwiICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBzdG9uZU9iai5vcmlneSA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICBjb25zdCB4TGltaXQgPSA1MDtcclxuICAgICAgICAgICAgY29uc3QgaGFsZldpZHRoID0gd2lkdGggLyAyO1xyXG4gICAgICAgICAgICBzdG9uZS54ID0gc3RvbmUudGV4dC5sZW5ndGggPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgc3RvbmVPYmoub3JpZ3ggPCB4TGltaXQgJiZcclxuICAgICAgICAgICAgICAgIHN0b25lT2JqLm9yaWd4IDwgaGFsZldpZHRoXHJcbiAgICAgICAgICAgICAgICA/IHN0b25lT2JqLm9yaWd4ICsgMjVcclxuICAgICAgICAgICAgICAgIDogc3RvbmVPYmoub3JpZ3g7XHJcbiAgICAgICAgICAgIHN0b25lLnkgPSBzdG9uZU9iai5vcmlneTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0b25lO1xyXG4gICAgfVxyXG4gICAgY29tcHV0ZUN1cnNvckRpc3RhbmNlKHBvc1gsIHBvc1ksIHNjKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCgocG9zWCAtIHNjLngpICoqIDIgKyAocG9zWSAtIHNjLnkpICoqIDIpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlUGlja1N0b25lVXAocG9zWCwgcG9zWSkge1xyXG4gICAgICAgIGxldCBzdG9uZUxldHRlciA9IG51bGw7XHJcbiAgICAgICAgbGV0IGN0ciA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgc2Mgb2YgdGhpcy5mb2lsU3RvbmVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5jb21wdXRlQ3Vyc29yRGlzdGFuY2UocG9zWCwgcG9zWSwgc2MpO1xyXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2UgPD0gNDApIHtcclxuICAgICAgICAgICAgICAgIHN0b25lTGV0dGVyID0gc2M7XHJcbiAgICAgICAgICAgICAgICAvKiBBZGRzIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8gdGVsbCB3aGljaCBsZXR0ZXIgaXMgd2hpY2ggaW4gY2FzZSB0aGVyZSBhcmUgdHdvIG9yIG1vcmUgb2YgdGhlIHNhbWUgbGV0dGVyLiovXHJcbiAgICAgICAgICAgICAgICBzdG9uZUxldHRlclsnZm9pbFN0b25lSW5kZXgnXSA9IGN0cjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN0cisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgcmV0dXJuIHN0b25lTGV0dGVyO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlSG92ZXJpbmdUb0Fub3RoZXJTdG9uZShwb3NYLCBwb3NZLCBzaG91bGRHcm91cExldHRlcikge1xyXG4gICAgICAgIC8qIEhhbmRsZSBob3ZlcmluZyBvZiBzdG9uZXMgZm9yIHdvcmQgcHV6emxlIG11bHRpLWxldHRlciBzZWxlY3QuKi9cclxuICAgICAgICBsZXQgc3RvbmVMZXR0ZXIgPSBudWxsO1xyXG4gICAgICAgIGxldCBjdHIgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IHNjIG9mIHRoaXMuZm9pbFN0b25lcykge1xyXG4gICAgICAgICAgICBjb25zdCBkaXN0YW5jZSA9IHRoaXMuY29tcHV0ZUN1cnNvckRpc3RhbmNlKHBvc1gsIHBvc1ksIHNjKTtcclxuICAgICAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDQwICYmIHNob3VsZEdyb3VwTGV0dGVyKHNjLnRleHQsIGN0cikpIHtcclxuICAgICAgICAgICAgICAgIHN0b25lTGV0dGVyID0gc2M7XHJcbiAgICAgICAgICAgICAgICAvKiBBZGRzIGEgdW5pcXVlIGlkZW50aWZpZXIgdG8gdGVsbCB3aGljaCBsZXR0ZXIgaXMgd2hpY2ggaW4gY2FzZSB0aGVyZSBhcmUgdHdvIG9yIG1vcmUgb2YgdGhlIHNhbWUgbGV0dGVyLiovXHJcbiAgICAgICAgICAgICAgICBzdG9uZUxldHRlclsnZm9pbFN0b25lSW5kZXgnXSA9IGN0cjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGN0cisrO1xyXG4gICAgICAgIH1cclxuICAgICAgICA7XHJcbiAgICAgICAgcmV0dXJuIHN0b25lTGV0dGVyO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW92aW5nU3RvbmVMZXR0ZXIoZHJhZ2dpbmdTdG9uZSwgcG9zWCwgcG9zWSkge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRTdG9uZUNvb3JkaW5hdGVzID0gZHJhZ2dpbmdTdG9uZTtcclxuICAgICAgICBjb25zdCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdXBkYXRlZFN0b25lQ29vcmRpbmF0ZXMueCA9IHBvc1ggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgdXBkYXRlZFN0b25lQ29vcmRpbmF0ZXMueSA9IHBvc1kgLSByZWN0LnRvcDtcclxuICAgICAgICByZXR1cm4gdXBkYXRlZFN0b25lQ29vcmRpbmF0ZXM7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgbG9hZEltYWdlcyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gXCJAZXZlbnRzXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFRJTUVSX0VNUFRZLCBST1RBVElOR19DTE9DSywgVElNRVJfRlVMTCwgQVVESU9fVElNRU9VVCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBUaW1lclRpY2tpbmcgZXh0ZW5kcyBFdmVudE1hbmFnZXIge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICB0aW1lcldpZHRoO1xyXG4gICAgdGltZXJIZWlnaHQ7XHJcbiAgICB3aWR0aFRvQ2xlYXI7XHJcbiAgICB0aW1lcjtcclxuICAgIGlzVGltZXJTdGFydGVkO1xyXG4gICAgaXNUaW1lckVuZGVkO1xyXG4gICAgaXNUaW1lclJ1bm5pbmdPdXQ7XHJcbiAgICBjYW5hdnNFbGVtZW50O1xyXG4gICAgY29udGV4dDtcclxuICAgIHRpbWVyX2Z1bGw7XHJcbiAgICBwYXVzZUJ1dHRvbkNsaWNrZWQ7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBjYWxsYmFjaztcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgc3RhcnRNeVRpbWVyID0gdHJ1ZTtcclxuICAgIGlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgIGlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICBhdWRpb1BsYXllcjtcclxuICAgIHBsYXlMZXZlbEVuZEF1ZGlvT25jZSA9IHRydWU7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aWR0aCwgaGVpZ2h0LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHN1cGVyKHtcclxuICAgICAgICAgICAgc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyOiAoZXZlbnQpID0+IHRoaXMuaGFuZGxlU3RvbmVEcm9wKGV2ZW50KSxcclxuICAgICAgICAgICAgbG9hZFB1enpsZUNhbGxiYWNrSGFuZGxlcjogKGV2ZW50KSA9PiB0aGlzLmhhbmRsZUxvYWRQdXp6bGUoZXZlbnQpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGhUb0NsZWFyID0gdGhpcy53aWR0aCAvIDMuNDtcclxuICAgICAgICB0aGlzLnRpbWVySGVpZ2h0ID0gMTEyO1xyXG4gICAgICAgIHRoaXMudGltZXJXaWR0aCA9IDg4ODtcclxuICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbiAgICAgICAgdGhpcy5jYW5hdnNFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW5hdnNFbGVtZW50LmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnRpbWVyID0gMDtcclxuICAgICAgICB0aGlzLmlzVGltZXJTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc1RpbWVyRW5kZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmlzVGltZXJSdW5uaW5nT3V0ID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllciA9IG5ldyBBdWRpb1BsYXllcigpO1xyXG4gICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgdGltZXJfZW1wdHk6IFRJTUVSX0VNUFRZLFxyXG4gICAgICAgICAgICByb3RhdGluZ19jbG9jazogUk9UQVRJTkdfQ0xPQ0ssXHJcbiAgICAgICAgICAgIHRpbWVyX2Z1bGw6IFRJTUVSX0ZVTExcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxvYWRJbWFnZXModGhpcy5pbWFnZXMsIChpbWFnZXMpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sb2FkZWRJbWFnZXMgPSBPYmplY3QuYXNzaWduKHt9LCBpbWFnZXMpO1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBzdGFydFRpbWVyKCkge1xyXG4gICAgICAgIC8vIGl0IHdpbGwgc3RhcnQgdGltZXIgaW1tZWRpYXRseVxyXG4gICAgICAgIHRoaXMucmVhZHlUaW1lcigpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRNeVRpbWVyID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzTXlUaW1lck92ZXIgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJlYWR5VGltZXIoKSB7XHJcbiAgICAgICAgLy8gbWFrZSB0aW1lciBsb29rIGZ1bGwgc28gYXMgaXQgZ2V0IHN0YXJ0IHNpZ25hbC4uLi4uIGl0IHdpbGwgc3RhcnQgZGVjcmVhc2luZ1xyXG4gICAgICAgIHRoaXMudGltZXIgPSAwO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXJ0TXlUaW1lciAmJiAhdGhpcy5pc1N0b25lRHJvcHBlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyICs9IGRlbHRhVGltZSAqIDAuMDA4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoTWF0aC5mbG9vcih0aGlzLndpZHRoICogMC44NyAtICh0aGlzLndpZHRoICogMC44NyAqIHRoaXMudGltZXIgKiAwLjAxKSkgPT0gNDAgJiYgIXRoaXMuaXNNeVRpbWVyT3Zlcikge1xyXG4gICAgICAgICAgICB0aGlzLnBsYXlMZXZlbEVuZEF1ZGlvT25jZSA/IHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX1RJTUVPVVQpIDogbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5wbGF5TGV2ZWxFbmRBdWRpb09uY2UgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh0aGlzLndpZHRoICogMC44NyAtICh0aGlzLndpZHRoICogMC44NyAqIHRoaXMudGltZXIgKiAwLjAxKSkgPCAwICYmICF0aGlzLmlzTXlUaW1lck92ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5pc015VGltZXJPdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBkcmF3KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLnRpbWVyX2VtcHR5LCAwLCB0aGlzLmhlaWdodCAqIDAuMSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjA1KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5yb3RhdGluZ19jbG9jaywgMCwgdGhpcy5oZWlnaHQgKiAwLjA5LCB0aGlzLndpZHRoICogMC4xNCwgdGhpcy5oZWlnaHQgKiAwLjA2NSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMudGltZXJfZnVsbCwgMCwgMCwgdGhpcy50aW1lcldpZHRoIC0gKHRoaXMudGltZXJXaWR0aCAqIHRoaXMudGltZXIgKiAwLjAxKSwgdGhpcy50aW1lckhlaWdodCwgdGhpcy53aWR0aCAqIDAuMTQsIHRoaXMuaGVpZ2h0ICogMC4wOTksIHRoaXMud2lkdGggKiAwLjg3IC0gKHRoaXMud2lkdGggKiAwLjg3ICogdGhpcy50aW1lciAqIDAuMDEpLCB0aGlzLmhlaWdodCAqIDAuMDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcChldmVudCkge1xyXG4gICAgICAgIHRoaXMuaXNTdG9uZURyb3BwZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZFB1enpsZShldmVudCkge1xyXG4gICAgICAgIHRoaXMucGxheUxldmVsRW5kQXVkaW9PbmNlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmlzU3RvbmVEcm9wcGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWVyKCk7XHJcbiAgICB9XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMudW5yZWdpc3RlckV2ZW50TGlzdGVuZXIoKTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFpbEVmZmVjdCB7XHJcbiAgICBjdHg7XHJcbiAgICBwYXJ0aWNsZXM7XHJcbiAgICBtb3VzZTtcclxuICAgIGlzRGlhbW9uZDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcykge1xyXG4gICAgICAgIHRoaXMuY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcyA9IFtdO1xyXG4gICAgICAgIHRoaXMubW91c2UgPSB7XHJcbiAgICAgICAgICAgIHg6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgeTogdW5kZWZpbmVkXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmlzRGlhbW9uZCA9IGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgdGhpcy5kcmF3VHJhaWwoKTtcclxuICAgICAgICBsZXQgdGVtcCA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wYXJ0aWNsZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFydGljbGVzW2ldLnRpbWUgPD0gdGhpcy5wYXJ0aWNsZXNbaV0udHRsKSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wLnB1c2godGhpcy5wYXJ0aWNsZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucGFydGljbGVzID0gdGVtcDtcclxuICAgIH1cclxuICAgIGRyYXdUcmFpbCgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFydGljbGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGFydGljbGVzW2ldLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmlzRGlhbW9uZCA9ICF0aGlzLmlzRGlhbW9uZDtcclxuICAgICAgICAgICAgdGhpcy5wYXJ0aWNsZXNbaV0uZHJhdyh0aGlzLmlzRGlhbW9uZCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkVHJhaWxQYXJ0aWNsZXNPbk1vdmUoeCwgeSkge1xyXG4gICAgICAgIHRoaXMubW91c2UueCA9IHg7XHJcbiAgICAgICAgdGhpcy5tb3VzZS55ID0geTtcclxuICAgICAgICB0aGlzLnBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZXModGhpcy5jdHgsIHRoaXMubW91c2UpKTtcclxuICAgIH1cclxuICAgIHJlc2V0UGFydGljbGVzKCkge1xyXG4gICAgICAgIHRoaXMubW91c2UueCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLm1vdXNlLnkgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbn1cclxuO1xyXG5jbGFzcyBQYXJ0aWNsZXMge1xyXG4gICAgY3R4O1xyXG4gICAgc3RhcnQ7XHJcbiAgICBlbmQ7XHJcbiAgICBzaXplO1xyXG4gICAgc3R5bGU7XHJcbiAgICB0aW1lO1xyXG4gICAgdHRsO1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICByZ2I7XHJcbiAgICBoeXA7XHJcbiAgICBzdGFyWDtcclxuICAgIHN0YXJZO1xyXG4gICAgc3RhckFuZ2xlO1xyXG4gICAgY29uc3RydWN0b3IoY3R4LCBtb3VzZSkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0UG9zWCA9IHRoaXMuZGV0ZXJtaW5lVmFsdWVCeVNjcmVlbldpZHRoKDMwLCAxNSk7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRQb3NZID0gdGhpcy5kZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgoMzAsIDE1KTtcclxuICAgICAgICBjb25zdCBlbmRQb3NYID0gdGhpcy5kZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgoMywgMC41KTtcclxuICAgICAgICBjb25zdCBlbmRQb3NZID0gdGhpcy5kZXRlcm1pbmVWYWx1ZUJ5U2NyZWVuV2lkdGgoMiwgMC41KTtcclxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgICAgICB0aGlzLnJnYiA9IFtcclxuICAgICAgICAgICAgXCJyZ2IoMjU1LDI1NSwyNTUpXCIsXHJcbiAgICAgICAgICAgIFwicmdiKDI0OSwyMTcsMTcwKVwiLFxyXG4gICAgICAgICAgICBcInJnYigyNDQsMTgyLDgxKVwiLFxyXG4gICAgICAgICAgICBcInJnYigyNDQsMTU5LDM0KVwiLFxyXG4gICAgICAgIF07XHJcbiAgICAgICAgdGhpcy5zdGFydCA9IHtcclxuICAgICAgICAgICAgeDogbW91c2UueCArIHRoaXMuZ2V0UmFuZG9tSW50KC1zdGFydFBvc1gsIHN0YXJ0UG9zWCksXHJcbiAgICAgICAgICAgIHk6IG1vdXNlLnkgKyB0aGlzLmdldFJhbmRvbUludCgtc3RhcnRQb3NZLCBzdGFydFBvc1kpLFxyXG4gICAgICAgICAgICBzaXplOiB0aGlzLmRldGVybWluZVZhbHVlQnlTY3JlZW5XaWR0aCgzLCAyKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5lbmQgPSB7XHJcbiAgICAgICAgICAgIHg6IHRoaXMuc3RhcnQueCArIHRoaXMuZ2V0UmFuZG9tSW50KC1lbmRQb3NYLCBlbmRQb3NYKSxcclxuICAgICAgICAgICAgeTogdGhpcy5zdGFydC55ICsgdGhpcy5nZXRSYW5kb21JbnQoLWVuZFBvc1ksIGVuZFBvc1kpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLnggPSB0aGlzLnN0YXJ0Lng7XHJcbiAgICAgICAgdGhpcy55ID0gdGhpcy5zdGFydC55O1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRoaXMuc3RhcnQuc2l6ZTtcclxuICAgICAgICB0aGlzLnN0eWxlID0gdGhpcy5yZ2JbdGhpcy5nZXRSYW5kb21JbnQoMCwgdGhpcy5yZ2IubGVuZ3RoIC0gMSldO1xyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcbiAgICAgICAgdGhpcy50dGwgPSA3NTtcclxuICAgICAgICB0aGlzLmh5cCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFyWCA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFyWSA9IDA7XHJcbiAgICAgICAgdGhpcy5zdGFyQW5nbGUgPSAwO1xyXG4gICAgfVxyXG4gICAgZGV0ZXJtaW5lVmFsdWVCeVNjcmVlbldpZHRoKGJnU2NyZWVuVmFsLCBzbWFsbFNjcmVlblZhbCkge1xyXG4gICAgICAgIC8qIDc2OCBpcyB0aGUgbG93ZXN0IHdpZHRoIHNpemUgb2YgdGFibGV0ICovXHJcbiAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ud2lkdGggPiA3NjggPyBiZ1NjcmVlblZhbCA6IHNtYWxsU2NyZWVuVmFsO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRpbWUgPD0gdGhpcy50dGwpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3MgPSAxIC0gKHRoaXMudHRsIC0gdGhpcy50aW1lKSAvIHRoaXMudHRsO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSB0aGlzLnN0YXJ0LnNpemUgKiAoMSAtIHRoaXMuZWFzZU91dFF1YXJ0KHByb2dyZXNzKSk7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHRoaXMueCArICh0aGlzLmVuZC54IC0gdGhpcy54KSAqIDAuMDE7XHJcbiAgICAgICAgICAgIHRoaXMueSA9IHRoaXMueSArICh0aGlzLmVuZC55IC0gdGhpcy55KSAqIDAuMDE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudGltZSsrO1xyXG4gICAgfVxyXG4gICAgZHJhdyhpc0RyYXdEaWFtb25kKSB7XHJcbiAgICAgICAgaWYgKGlzRHJhd0RpYW1vbmQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFyUGFydGljbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2lyY2xlUGFydGljbGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgO1xyXG4gICAgfVxyXG4gICAgY2lyY2xlUGFydGljbGUoKSB7XHJcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5zdHlsZTtcclxuICAgICAgICB0aGlzLmN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICB0aGlzLmN0eC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMuc2l6ZSwgMCwgTWF0aC5QSSAqIDIpO1xyXG4gICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIHN0YXJQYXJ0aWNsZSgpIHtcclxuICAgICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSB0aGlzLnN0eWxlO1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh0aGlzLngsIHRoaXMueSAtIHRoaXMuc2l6ZSk7IC8vIFRvcCBwb2ludFxyXG4gICAgICAgIHRoaXMuY3R4LmxpbmVUbyh0aGlzLnggKyB0aGlzLnNpemUsIHRoaXMueSk7IC8vIFJpZ2h0IHBvaW50XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHRoaXMueCwgdGhpcy55ICsgdGhpcy5zaXplKTsgLy8gQm90dG9tIHBvaW50XHJcbiAgICAgICAgdGhpcy5jdHgubGluZVRvKHRoaXMueCAtIHRoaXMuc2l6ZSwgdGhpcy55KTsgLy8gTGVmdCBwb2ludFxyXG4gICAgICAgIHRoaXMuY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIGdldFJhbmRvbUludChtaW4sIG1heCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSkgKyBtaW47XHJcbiAgICB9XHJcbiAgICBlYXNlT3V0UXVhcnQoeCkge1xyXG4gICAgICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHgsIDQpO1xyXG4gICAgfVxyXG59XHJcbjtcclxuIiwiaW1wb3J0IHsgY3JlYXRlUmlwcGxlRWZmZWN0IH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgVFVUT1JJQUxfSEFORCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IEdhbWVTY29yZSB9IGZyb20gXCJAZGF0YVwiO1xyXG5leHBvcnQgY2xhc3MgVHV0b3JpYWwge1xyXG4gICAgd2lkdGg7XHJcbiAgICBoZWlnaHQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgdHV0b3JpYWxJbWc7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHRhcmdldFN0b25lUG9zaXRpb25zO1xyXG4gICAgc3RhcnR4O1xyXG4gICAgc3RhcnR5O1xyXG4gICAgZW5keDtcclxuICAgIGVuZHk7XHJcbiAgICBlbmRUdXRvcmlhbCA9IGZhbHNlO1xyXG4gICAgcHV6emxlTnVtYmVyO1xyXG4gICAgcGxheU1uc3RyQ2xrVHRybEFuaW0gPSB0cnVlO1xyXG4gICAgdG90YWxUaW1lID0gMDtcclxuICAgIG1vbnN0ZXJTdG9uZURpZmZlcmVuY2UgPSAwO1xyXG4gICAgeDtcclxuICAgIHk7XHJcbiAgICBkeDtcclxuICAgIGR5O1xyXG4gICAgYWJzZHg7XHJcbiAgICBhYnNkeTtcclxuICAgIHN0YXJ0UmlwcGxlID0gZmFsc2U7XHJcbiAgICBkcmF3UmlwcGxlO1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgcHV6emxlTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5zdGFydHggPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnR5ID0gMDtcclxuICAgICAgICB0aGlzLmVuZHggPSB0aGlzLndpZHRoIC8gMjtcclxuICAgICAgICB0aGlzLmVuZHkgPSB0aGlzLmhlaWdodCAvIDI7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVOdW1iZXIgPSAocHV6emxlTnVtYmVyID49IDApID8gcHV6emxlTnVtYmVyIDogbnVsbDtcclxuICAgICAgICB0aGlzLnR1dG9yaWFsSW1nID0gbmV3IEltYWdlKCk7XHJcbiAgICAgICAgdGhpcy50dXRvcmlhbEltZy5zcmMgPSBUVVRPUklBTF9IQU5EO1xyXG4gICAgICAgIHRoaXMuZHJhd1JpcHBsZSA9IGNyZWF0ZVJpcHBsZUVmZmVjdCh0aGlzLmNvbnRleHQpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWxJbWcub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVRhcmdldFN0b25lUG9zaXRpb25zKHRhcmdldFN0b25lUG9zaXRpb24pIHtcclxuICAgICAgICB0aGlzLnN0YXJ0eCA9IHRhcmdldFN0b25lUG9zaXRpb25bMF0gLSAyMjtcclxuICAgICAgICB0aGlzLnN0YXJ0eSA9IHRhcmdldFN0b25lUG9zaXRpb25bMV0gLSA1MDtcclxuICAgICAgICB0aGlzLm1vbnN0ZXJTdG9uZURpZmZlcmVuY2UgPSBNYXRoLnNxcnQoKHRoaXMuc3RhcnR4IC0gdGhpcy5lbmR4KSAqICh0aGlzLnN0YXJ0eCAtIHRoaXMuZW5keCkgKyAodGhpcy5zdGFydHkgLSB0aGlzLmVuZHkpICogKHRoaXMuc3RhcnR5IC0gdGhpcy5lbmR5KSk7XHJcbiAgICAgICAgdGhpcy5hbmltYXRlSW1hZ2UoKTtcclxuICAgIH1cclxuICAgIGlzTW9iaWxlKCkge1xyXG4gICAgICAgIHJldHVybiAvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBhZHxpUG9kfEJsYWNrQmVycnl8SUVNb2JpbGV8T3BlcmEgTWluaS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcbiAgICB9XHJcbiAgICBzZXRUdXRvcmlhbEVuZChlbmRUdXRvcmlhbCkge1xyXG4gICAgICAgIHRoaXMuZW5kVHV0b3JpYWwgPSBlbmRUdXRvcmlhbDtcclxuICAgIH1cclxuICAgIGFuaW1hdGVJbWFnZSgpIHtcclxuICAgICAgICB0aGlzLnggPSB0aGlzLnN0YXJ0eDtcclxuICAgICAgICB0aGlzLnkgPSB0aGlzLnN0YXJ0eTtcclxuICAgICAgICB0aGlzLmR4ID0gKHRoaXMuZW5keCAtIHRoaXMuc3RhcnR4KSAvIDUwMDA7XHJcbiAgICAgICAgdGhpcy5keSA9ICh0aGlzLmVuZHkgLSB0aGlzLnN0YXJ0eSkgLyA1MDAwO1xyXG4gICAgICAgIHRoaXMuYWJzZHggPSB0aGlzLmlzTW9iaWxlKCkgPyBNYXRoLmFicyh0aGlzLmR4KSAqIDMgOiBNYXRoLmFicyh0aGlzLmR4KTtcclxuICAgICAgICB0aGlzLmFic2R5ID0gdGhpcy5pc01vYmlsZSgpID8gTWF0aC5hYnModGhpcy5keSkgKiAzIDogTWF0aC5hYnModGhpcy5keSk7XHJcbiAgICAgICAgdGhpcy5zZXRUdXRvcmlhbEVuZChmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBkcmF3KGRlbHRhVGltZSwgaW1nLCBpbWFnZVNpemUpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQgJiYgIXRoaXMuZW5kVHV0b3JpYWwgJiYgdGhpcy5zaG91bGRQbGF5VHV0b3JpYWwoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnggPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5keCA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnggKyB0aGlzLmFic2R4ICogZGVsdGFUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnggLSB0aGlzLmFic2R4ICogZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICB0aGlzLnkgPVxyXG4gICAgICAgICAgICAgICAgdGhpcy5keSA+PSAwXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnkgKyB0aGlzLmFic2R5ICogZGVsdGFUaW1lXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnkgLSB0aGlzLmFic2R5ICogZGVsdGFUaW1lO1xyXG4gICAgICAgICAgICBjb25zdCBkaXN4ID0gdGhpcy54IC0gdGhpcy5lbmR4ICsgdGhpcy5hYnNkeDtcclxuICAgICAgICAgICAgY29uc3QgZGlzeSA9IHRoaXMueSAtIHRoaXMuZW5keSArIHRoaXMuYWJzZHk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KGRpc3ggKiBkaXN4ICsgZGlzeSAqIGRpc3kpO1xyXG4gICAgICAgICAgICBsZXQgbW9uc3RlclN0b25lRGlmZmVyZW5jZUluUGVyY2VudGFnZSA9ICgxMDAgKiBkaXN0YW5jZSAvIHRoaXMubW9uc3RlclN0b25lRGlmZmVyZW5jZSk7XHJcbiAgICAgICAgICAgIGlmIChtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlIDwgMTUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uKGRlbHRhVGltZSwgdGhpcy5lbmR4LCB0aGlzLmVuZHkgKyAzMCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnggPSB0aGlzLnN0YXJ0eDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnN0YXJ0eTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChtb25zdGVyU3RvbmVEaWZmZXJlbmNlSW5QZXJjZW50YWdlID4gODApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlSGFuZFNjYWxlQW5pbWF0aW9uKGRlbHRhVGltZSwgdGhpcy5zdGFydHggKyAxNSwgdGhpcy5zdGFydHkgKyAxMCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbGV0IHByZXZpb3VzQWxwaGEgPSB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQWxwaGEgPSAwLjQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKGltZywgdGhpcy54LCB0aGlzLnkgKyAyMCwgaW1hZ2VTaXplLCBpbWFnZVNpemUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbEFscGhhID0gcHJldmlvdXNBbHBoYTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy50dXRvcmlhbEltZywgdGhpcy54ICsgMTUsIHRoaXMueSArIDEwKTsgLy9kcmF3cyB0aGUgaGFuZCBzdG9uZSBkcmFnIGFuaW1hdGlvbiFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNyZWF0ZUhhbmRTY2FsZUFuaW1hdGlvbihkZWx0YVRpbWUsIG9mZnNldFgsIG9mZnNldFksIHNob3VsZENyZWF0ZVJpcHBsZSkge1xyXG4gICAgICAgIHRoaXMudG90YWxUaW1lICs9IE1hdGguZmxvb3IoZGVsdGFUaW1lKTtcclxuICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSA1MDA7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVGYWN0b3IgPSB0aGlzLnNpbnVzb2lkYWxJbnRlcnBvbGF0aW9uKHRoaXMudG90YWxUaW1lLCAxLCAxLjUsIHRyYW5zaXRpb25EdXJhdGlvbik7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkV2lkdGggPSB0aGlzLnR1dG9yaWFsSW1nLndpZHRoICogc2NhbGVGYWN0b3I7XHJcbiAgICAgICAgY29uc3Qgc2NhbGVkSGVpZ2h0ID0gdGhpcy50dXRvcmlhbEltZy5oZWlnaHQgKiBzY2FsZUZhY3RvcjtcclxuICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMudHV0b3JpYWxJbWcsIG9mZnNldFgsIG9mZnNldFksIHNjYWxlZFdpZHRoLCBzY2FsZWRIZWlnaHQpO1xyXG4gICAgICAgIHNob3VsZENyZWF0ZVJpcHBsZSA/IChudWxsKSA6ICh0aGlzLmRyYXdSaXBwbGUob2Zmc2V0WCArIHRoaXMud2lkdGggKiAwLjAyLCBvZmZzZXRZICsgdGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAyLCBmYWxzZSkpO1xyXG4gICAgfVxyXG4gICAgc2ludXNvaWRhbEludGVycG9sYXRpb24odGltZSwgbWluU2NhbGUsIG1heFNjYWxlLCBkdXJhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IGFtcGxpdHVkZSA9IChtYXhTY2FsZSAtIG1pblNjYWxlKSAvIDI7XHJcbiAgICAgICAgY29uc3QgZnJlcXVlbmN5ID0gTWF0aC5QSSAvIGR1cmF0aW9uO1xyXG4gICAgICAgIHJldHVybiBtaW5TY2FsZSArIGFtcGxpdHVkZSAqIE1hdGguc2luKGZyZXF1ZW5jeSAqIHRpbWUpO1xyXG4gICAgfVxyXG4gICAgY2xpY2tPbk1vbnN0ZXJUdXRvcmlhbChkZWx0YVRpbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRQbGF5TW9uc3RlckNsaWNrVHV0b3JpYWxBbmltYXRpb24oKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2l0aW9uRHVyYXRpb24gPSAyMDAwO1xyXG4gICAgICAgICAgICBjb25zdCBib3R0b21Qb3NpdGlvbiA9IHRoaXMuaGVpZ2h0IC8gMS45ICsgKHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0IC8gMC44KTtcclxuICAgICAgICAgICAgY29uc3QgdG9wUG9zaXRpb24gPSB0aGlzLmhlaWdodCAvIDEuOSArICh0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDAuOCkgLSB0aGlzLnR1dG9yaWFsSW1nLmhlaWdodDtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRPZmZzZXRZO1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gdGhpcy5lbmR4O1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b3RhbFRpbWUgPCB0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50T2Zmc2V0WSA9IHRvcFBvc2l0aW9uICsgKHRoaXMudG90YWxUaW1lIC8gKHRyYW5zaXRpb25EdXJhdGlvbiAvIDIpKSAqIChib3R0b21Qb3NpdGlvbiAtIHRvcFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1JpcHBsZShvZmZzZXRYLCB0aGlzLmhlaWdodCAvIDEuOSArICh0aGlzLnR1dG9yaWFsSW1nLmhlaWdodCAvIDEuNSksIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudE9mZnNldFkgPSBib3R0b21Qb3NpdGlvbiAtICgodGhpcy50b3RhbFRpbWUgLSB0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSAvICh0cmFuc2l0aW9uRHVyYXRpb24gLyAyKSkgKiAoYm90dG9tUG9zaXRpb24gLSB0b3BQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdSaXBwbGUob2Zmc2V0WCwgdGhpcy5oZWlnaHQgLyAxLjkgKyAodGhpcy50dXRvcmlhbEltZy5oZWlnaHQgLyAxLjIpICsgdGhpcy50dXRvcmlhbEltZy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy50dXRvcmlhbEltZywgb2Zmc2V0WCwgY3VycmVudE9mZnNldFksIHRoaXMudHV0b3JpYWxJbWcud2lkdGgsIHRoaXMudHV0b3JpYWxJbWcuaGVpZ2h0KTtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRPZmZzZXRZIDw9IHRvcFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsVGltZSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50b3RhbFRpbWUgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNob3VsZFBsYXlUdXRvcmlhbCgpIHtcclxuICAgICAgICBsZXQgcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZSA9IEdhbWVTY29yZS5nZXRBbGxHYW1lTGV2ZWxJbmZvKCkubGVuZ3RoIDw9IDAgJiYgdGhpcy5wdXp6bGVOdW1iZXIgPT0gMDtcclxuICAgICAgICByZXR1cm4gcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZTtcclxuICAgIH1cclxuICAgIHNob3VsZFBsYXlNb25zdGVyQ2xpY2tUdXRvcmlhbEFuaW1hdGlvbigpIHtcclxuICAgICAgICBsZXQgcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZSA9IEdhbWVTY29yZS5nZXRBbGxHYW1lTGV2ZWxJbmZvKCkubGVuZ3RoIDw9IDAgJiYgdGhpcy5wbGF5TW5zdHJDbGtUdHJsQW5pbTtcclxuICAgICAgICByZXR1cm4gcGxheURyYWdBbmltYXRpb25Gb3JGaXJzdFB1enpsZTtcclxuICAgIH1cclxuICAgIHNldFB1enpsZU51bWJlcihwdXp6bGVOdW1lcikge1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtZXI7XHJcbiAgICB9XHJcbiAgICBzZXRQbGF5TW9uc3RlckNsaWNrQW5pbWF0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5TW5zdHJDbGtUdHJsQW5pbSA9IHZhbHVlO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IHN5bmNMb2FkaW5nSW1hZ2VzIH0gZnJvbSAnQGNvbW1vbic7XHJcbmltcG9ydCB7IERFRkFVTFRfQkdfR1JPVVBfSU1HUywgQVVUVU1OX0JHX0dST1VQX0lNR1MsIFdJTlRFUl9CR19HUk9VUF9JTUdTIH0gZnJvbSAnQGNvbnN0YW50cyc7XHJcbmV4cG9ydCBjb25zdCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QgPSB7XHJcbiAgICBzdW1tZXI6IHsgQkdfR1JPVVBfSU1HUzogREVGQVVMVF9CR19HUk9VUF9JTUdTLCBkcmF3OiBkZWZhdWx0QmdEcmF3aW5nIH0sXHJcbiAgICBhdXR1bW46IHsgQkdfR1JPVVBfSU1HUzogQVVUVU1OX0JHX0dST1VQX0lNR1MsIGRyYXc6IGF1dHVtQmdEcmF3aW5nIH0sXHJcbiAgICB3aW50ZXI6IHsgQkdfR1JPVVBfSU1HUzogV0lOVEVSX0JHX0dST1VQX0lNR1MsIGRyYXc6IHdpbnRlckJnRHJhd2luZyB9LFxyXG59O1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY3JlYXRlQmFja2dyb3VuZChjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiYWNrZ3JvdW5kSW1nLCBkcmF3TWV0aG9kKSB7XHJcbiAgICBjb25zdCBsb2FkZWRJbWFnZXMgPSB7IC4uLmF3YWl0IHN5bmNMb2FkaW5nSW1hZ2VzKGJhY2tncm91bmRJbWcpIH07XHJcbiAgICBjb25zdCBvYmogPSB7XHJcbiAgICAgICAgLi4uZHJhd01ldGhvZChjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBsb2FkZWRJbWFnZXMpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuICh7IC4uLm9iaiB9KTtcclxufVxyXG47XHJcbmV4cG9ydCBjb25zdCBsb2FkRHluYW1pY0JnQXNzZXRzID0gKGxldmVsTnVtYmVyLCBhc3NldHNMaXN0KSA9PiB7XHJcbiAgICBjb25zdCBhcnIgPSBPYmplY3Qua2V5cyhhc3NldHNMaXN0KTsgLy9hdmFpbGFibGVCYWNrZ3JvdW5kVHlwZXNcclxuICAgIGxldCBiYWNrZ3JvdW5kVHlwZSA9IE1hdGguZmxvb3IobGV2ZWxOdW1iZXIgLyAxMCkgJSBhcnIubGVuZ3RoO1xyXG4gICAgaWYgKGxldmVsTnVtYmVyID49IDMwKSB7XHJcbiAgICAgICAgYmFja2dyb3VuZFR5cGUgPSBiYWNrZ3JvdW5kVHlwZSAlIDM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4geyAuLi5hc3NldHNMaXN0W2FycltiYWNrZ3JvdW5kVHlwZV1dIH07XHJcbn07XHJcbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0QmdEcmF3aW5nKGNvbnRleHQsIHdpZHRoLCBoZWlnaHQsIGJnSW1hZ2VzKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGRyYXc6ICgpID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkRFRkFVTFRfQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXM/LkFTU0VUU19QQVRIX1RPVEVNLCB3aWR0aCAqIDAuNiwgaGVpZ2h0IC8gNiwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uQVNTRVRTX1BBVEhfRkVOQ0UsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gMywgd2lkdGgsIGhlaWdodCAvIDMpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcz8uQVNTRVRTX1BBVEhfSElMTCwgLXdpZHRoICogMC4yNSwgaGVpZ2h0IC8gMiwgd2lkdGggKiAxLjUsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuO1xyXG5leHBvcnQgZnVuY3Rpb24gYXV0dW1CZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuQVVUVU1OX1BJTExBUl8xLCB3aWR0aCAqIDAuMzgsIGhlaWdodCAvIDYsIHdpZHRoIC8gMS4yLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuQVVUVU1OX0ZFTkNFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gNCwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5BVVRVTU5fSElMTF8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiB3aW50ZXJCZ0RyYXdpbmcoY29udGV4dCwgd2lkdGgsIGhlaWdodCwgYmdJbWFnZXMpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgZHJhdzogKCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfQkFDS0dST1VORF8xLCAwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuV0lOVEVSX1BJTExBUl8xLCB3aWR0aCAqIDAuMzgsIGhlaWdodCAvIDYsIHdpZHRoIC8gMS4yLCBoZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoYmdJbWFnZXMuV0lOVEVSX0ZFTkNFXzEsIC13aWR0aCAqIDAuNCwgaGVpZ2h0IC8gNCwgd2lkdGgsIGhlaWdodCAvIDIpO1xyXG4gICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShiZ0ltYWdlcy5XSU5URVJfSElMTF8xLCAtd2lkdGggKiAwLjI1LCBoZWlnaHQgLyAyLCB3aWR0aCAqIDEuNSwgaGVpZ2h0IC8gMik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbmV4cG9ydCBmdW5jdGlvbiBsZXZlbFNlbGVjdEJnRHJhd2luZyhjb250ZXh0LCB3aWR0aCwgaGVpZ2h0LCBiZ0ltYWdlcykge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBkcmF3OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZHJhd0ltYWdlKGJnSW1hZ2VzPy5MRVZFTF9TRUxFQ1RJT05fQkFDS0dST1VORCwgMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG47XHJcbiIsImltcG9ydCB7IE1BUF9JQ09OX0lNRywgTUFQX0lDT05fU1BFQ0lBTF9JTUcsIE1BUF9MT0NLX0lNRywgU1RBUl9JTUcsIFNQRUNJQUxfTEVWRUxTLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IHN5bmNMb2FkaW5nSW1hZ2VzIH0gZnJvbSAnQGNvbW1vbic7XHJcbmNvbnN0IGlzU3BlY2lhbExldmVsID0gKGluZGV4KSA9PiBTUEVDSUFMX0xFVkVMUy5pbmNsdWRlcyhpbmRleCk7XHJcbmV4cG9ydCBjb25zdCBnZXRkZWZhdWx0Q2xvdWRCdG5zUG9zID0gKGNhbnZhcykgPT4ge1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDEwLFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCAvIDEwXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxMFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggLyAzICsgY2FudmFzLndpZHRoIC8gMi44LFxyXG4gICAgICAgICAgICAgICAgY2FudmFzLmhlaWdodCAvIDEwLFxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBjYW52YXMud2lkdGggLyAxMCxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAzXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAzXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDMgKyBjYW52YXMud2lkdGggLyAyLjgsXHJcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0IC8gMyxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gMTAsXHJcbiAgICAgICAgICAgICAgICBjYW52YXMuaGVpZ2h0IC8gMS44XHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxLjhcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgY2FudmFzLndpZHRoIC8gMyArIGNhbnZhcy53aWR0aCAvIDIuOCxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxLjgsXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIGNhbnZhcy53aWR0aCAvIDIuNSxcclxuICAgICAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAxLjNcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdLFxyXG4gICAgXTtcclxufTtcclxuZXhwb3J0IGNvbnN0IGxvYWRMZXZlbEltYWdlcyA9ICgpID0+IHtcclxuICAgIHJldHVybiBzeW5jTG9hZGluZ0ltYWdlcyh7XHJcbiAgICAgICAgYmFsbG9vbkltZzogTUFQX0lDT05fSU1HLFxyXG4gICAgICAgIHNwZWNpYWxCbG9vbkltZzogTUFQX0lDT05fU1BFQ0lBTF9JTUcsXHJcbiAgICAgICAgbG9ja0ltZzogTUFQX0xPQ0tfSU1HLFxyXG4gICAgICAgIHN0YXJJbWc6IFNUQVJfSU1HXHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUxldmVsT2JqZWN0KHhQb3MsIHlQb3MsIGluZGV4LCBpbWFnZXMpIHtcclxuICAgIGNvbnN0IGlzU3BlY2lhbCA9IGlzU3BlY2lhbExldmVsKGluZGV4KTtcclxuICAgIGNvbnN0IG9iaiA9IHtcclxuICAgICAgICB4OiB4UG9zLFxyXG4gICAgICAgIHk6IHlQb3MsXHJcbiAgICAgICAgaW5kZXgsXHJcbiAgICAgICAgaXNTcGVjaWFsLFxyXG4gICAgICAgIC4uLmltYWdlcyxcclxuICAgICAgICBiYWxsb29uSW1nOiBpc1NwZWNpYWwgPyBpbWFnZXM/LnNwZWNpYWxCbG9vbkltZyA6IGltYWdlcz8uYmFsbG9vbkltZ1xyXG4gICAgfTtcclxuICAgIHJldHVybiAoeyAuLi5vYmogfSk7XHJcbn1cclxuIiwiZXhwb3J0IGNvbnN0IEZpcmViYXNlVXNlckNsaWNrZWQgPSBcInVzZXJfY2xpY2tlZFwiO1xyXG5leHBvcnQgY29uc3QgRmlyZWJhc2VVc2VySW5zdGFsbCA9IFwidXNlcl9pbnN0YWxsZWRcIjtcclxuZXhwb3J0IGNvbnN0IFBXQUluc3RhbGxTdGF0dXMgPSBcInB3YV9pbnN0YWxsZWRfc3RhdHVzXCI7XHJcbmV4cG9ydCBjb25zdCBVc2VyQ2FuY2VsbGVkID0gXCJ1c2VyX2NhbmNlbF9pbnN0YWxsYXRpb25cIjtcclxuZXhwb3J0IGNvbnN0IE5hdGl2ZVBsYXlCdXR0b24gPSBcIm5hdGl2ZV9wbGF5YnV0dG9uX2NsaWNrZWRcIjtcclxuZXhwb3J0IGNvbnN0IFByZXZpb3VzUGxheWVkTGV2ZWwgPSBcInN0b3JlUHJldmlvdXNQbGF5ZWRMZXZlbFwiO1xyXG5leHBvcnQgY29uc3QgU3RvcmVNb25zdGVyUGhhc2VOdW1iZXIgPSBcInN0b3JlTW9uc3RlclBoYXNlTnVtYmVyXCI7XHJcbmV4cG9ydCBjb25zdCBJc0NhY2hlZCA9IFwiaXNfY2FjaGVkXCI7XHJcbmV4cG9ydCBjb25zdCBNb25zdGVyQXVkaW8gPSBcIm1vbnN0ZXJfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IEZlZWRiYWNrQXVkaW8gPSBcImZlZWRiYWNrX2F1ZGlvXCI7XHJcbmV4cG9ydCBjb25zdCBJbnRyb011c2ljID0gXCJpbnRyb19tdXNpY1wiO1xyXG5leHBvcnQgY29uc3QgUHJvbXB0QXVkaW8gPSBcInByb21wdF9hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgQnV0dG9uQ2xpY2sgPSBcImJ1dHRvbl9jbGlja1wiO1xyXG5leHBvcnQgY29uc3QgVGltZU92ZXIgPSBcInRpbWVfb3ZlclwiO1xyXG5leHBvcnQgY29uc3QgU3RvbmVNdXNpYyA9IFwic3RvbmVfbXVzaWNcIjtcclxuZXhwb3J0IGNvbnN0IFBocmFzZUF1ZGlvID0gXCJwaHJhc2VfYXVkaW9cIjtcclxuZXhwb3J0IGNvbnN0IExldmVsRW5kQXVkaW8gPSBcImxldmVsX2VuZF9hdWRpb1wiO1xyXG5leHBvcnQgY29uc3QgVXJsU3Vic3RyaW5nID0gXCIvZmVlZHRoZW1vbnN0ZXJcIjtcclxuZXhwb3J0IGNvbnN0IERldmVsb3BtZW50U2VydmVyID0gXCJodHRwczovL2ZlZWR0aGVtb25zdGVyZGV2LmN1cmlvdXNjb250ZW50Lm9yZ1wiO1xyXG5leHBvcnQgY29uc3QgU3RhcnRTY2VuZTEgPSBcIlN0YXJ0U2NlbmUxXCI7XHJcbmV4cG9ydCBjb25zdCBMZXZlbFNlbGVjdGlvbjEgPSBcIkxldmVsU2VsZWN0aW9uMVwiO1xyXG5leHBvcnQgY29uc3QgR2FtZVNjZW5lMSA9IFwiR2FtZVNjZW5lMVwiO1xyXG5leHBvcnQgY29uc3QgRW5kU2NlbmUxID0gXCJFbmRTY2VuZTFcIjtcclxuZXhwb3J0IGNvbnN0IEZPTlRfQkFTRV9QQVRIID0gJy4vYXNzZXRzL2ZvbnRzLyc7XHJcbi8vQXVkaW8gcGF0aHNcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfRUFUUyA9IFwiLi9hc3NldHMvYXVkaW9zL0VhdC5tcDNcIjtcclxuZXhwb3J0IGNvbnN0IEFVRElPX1BBVEhfTU9OU1RFUl9TUElUID0gXCIuL2Fzc2V0cy9hdWRpb3MvTW9uc3RlclNwaXQubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVEID0gXCIuL2Fzc2V0cy9hdWRpb3MvRGlzYXBvaW50ZWQtMDUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX1BPSU5UU19BREQgPSBcImFzc2V0cy9hdWRpb3MvUG9pbnRzQWRkLndhdlwiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9DT1JSRUNUX1NUT05FID0gXCJhc3NldHMvYXVkaW9zL0NvcnJlY3RTdG9uZUZpbmFsLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9DSEVFUklOR19GVU5DID0gKHJhbmRvbU51bWJlcikgPT4gYC4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wJHtyYW5kb21OdW1iZXJ9Lm1wM2A7XHJcbmV4cG9ydCBjb25zdCBBVURJT19QQVRIX0JUTl9DTElDSyA9IFwiLi9hc3NldHMvYXVkaW9zL0J1dHRvbkNsaWNrLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fUEFUSF9PTl9EUkFHID0gXCIuL2Fzc2V0cy9hdWRpb3Mvb25EcmFnLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fQVJFX1lPVV9TVVJFID0gXCIuL2Fzc2V0cy9hdWRpb3MvYXJlLXlvdS1zdXJlLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fVElNRU9VVCA9IFwiLi9hc3NldHMvYXVkaW9zL3RpbWVvdXQubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19JTlRSTyA9IFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiO1xyXG5leHBvcnQgY29uc3QgQVVESU9fTEVWRUxfTE9TRSA9IFwiLi9hc3NldHMvYXVkaW9zL0xldmVsTG9zZUZhbmZhcmUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19MRVZFTF9XSU4gPSBcIi4vYXNzZXRzL2F1ZGlvcy9MZXZlbFdpbkZhbmZhcmUubXAzXCI7XHJcbmV4cG9ydCBjb25zdCBBVURJT19VUkxfUFJFTE9BRCA9IFtcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL2ludHJvLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3MvQ2hlZXJpbmctMDIubXAzXCIsXHJcbiAgICBcIi4vYXNzZXRzL2F1ZGlvcy9DaGVlcmluZy0wMy5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0NoZWVyaW5nLTAxLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3Mvb25EcmFnLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3MvdGltZW91dC5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0xldmVsV2luRmFuZmFyZS5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0xldmVsTG9zZUZhbmZhcmUubXAzXCIsXHJcbiAgICBcIi4vYXNzZXRzL2F1ZGlvcy9CdXR0b25DbGljay5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL01vbnN0ZXIgU3BpdHMgd3Jvbmcgc3RvbmVzLTAxLm1wM1wiLFxyXG4gICAgXCIuL2Fzc2V0cy9hdWRpb3MvRGlzYXBvaW50ZWQtMDUubXAzXCIsXHJcbiAgICBcIi4vYXNzZXRzL2F1ZGlvcy9Nb25zdGVyU3BpdC5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL0VhdC5tcDNcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL1BvaW50c0FkZC53YXZcIixcclxuICAgIFwiLi9hc3NldHMvYXVkaW9zL2FyZS15b3Utc3VyZS5tcDNcIixcclxuXTtcclxuLy9JbWFnZSBwYXRoc1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfU1RPTkVfUElOS19CRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3N0b25lX3Bpbmsud2VicFwiOyAvL3N0b25lX3BpbmtfdjAyLnBuZ1xyXG5leHBvcnQgY29uc3QgQVNTRVRTX1BBVEhfVE9URU0gPSBcIi4vYXNzZXRzL2ltYWdlcy9Ub3RlbV92MDJfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0JHXzAxID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmdfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFTU0VUU19QQVRIX0hJTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy9oaWxsX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9GRU5DRSA9IFwiLi9hc3NldHMvaW1hZ2VzL2ZlbmNlX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUgPSBcIi4vYXNzZXRzL2ltYWdlcy9pZGxlNC5wbmdcIjtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQkFDS0dST1VORF8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmdfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9CQUNLR1JPVU5EXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fYmdfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9ISUxMXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5faGlsbF92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX1BJTExBUl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvQXV0dW1uX3NpZ25fdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9TSUdOXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fc2lnbl92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQVVUVU1OX0ZFTkNFXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9BdXR1bW5fZmVuY2VfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9CQUNLR1JPVU5EXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfYmdfMDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgV0lOVEVSX0hJTExfMSA9IFwiLi9hc3NldHMvaW1hZ2VzL1dpbnRlcl9oaWxsX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfU0lHTl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX3NpZ25fdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFdJTlRFUl9GRU5DRV8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvV2ludGVyX2ZlbmNlX3YwMS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfUElMTEFSXzEgPSBcIi4vYXNzZXRzL2ltYWdlcy9XaW50ZXJfc2lnbl92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgTEVWRUxfU0VMRUNUSU9OX0JBQ0tHUk9VTkQgPSBcIi4vYXNzZXRzL2ltYWdlcy9tYXAud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUFJPTVBUX1RFWFRfQkcgPSBcIi4vYXNzZXRzL2ltYWdlcy9wcm9tcHRUZXh0Qmcud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUFJPTVBUX1BMQVlfQlVUVE9OID0gXCIuL2Fzc2V0cy9pbWFnZXMvcHJvbXB0UGxheUJ1dHRvbi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBMRVZFTF9JTkRJQ0FUT1IgPSBcIi4vYXNzZXRzL2ltYWdlcy9sZXZlbHNfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IEJBUl9FTVBUWSA9IFwiLi9hc3NldHMvaW1hZ2VzL2Jhcl9lbXB0eV92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQkFSX0ZVTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy9iYXJfZnVsbF92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgVElNRVJfRU1QVFkgPSBcIi4vYXNzZXRzL2ltYWdlcy90aW1lcl9lbXB0eS53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBST1RBVElOR19DTE9DSyA9IFwiLi9hc3NldHMvaW1hZ2VzL3RpbWVyLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFRJTUVSX0ZVTEwgPSBcIi4vYXNzZXRzL2ltYWdlcy90aW1lcl9mdWxsLnBuZ1wiO1xyXG5leHBvcnQgY29uc3QgVFVUT1JJQUxfSEFORCA9IFwiLi9hc3NldHMvaW1hZ2VzL3R1dG9yaWFsX2hhbmQud2VicFwiO1xyXG5leHBvcnQgY29uc3QgV0lOX0JHID0gXCIuL2Fzc2V0cy9pbWFnZXMvV0lOX3NjcmVlbl9iZy53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBQSU5fU1RBUl8xID0gXCIuL2Fzc2V0cy9pbWFnZXMvcGluU3RhcjEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUElOX1NUQVJfMiA9IFwiLi9hc3NldHMvaW1hZ2VzL3BpblN0YXIyLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFBJTl9TVEFSXzMgPSBcIi4vYXNzZXRzL2ltYWdlcy9waW5TdGFyMy53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBDTE9VRF82ID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDEucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBDTE9VRF83ID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDIucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBDTE9VRF84ID0gXCIuL2Fzc2V0cy9pbWFnZXMvY2xvdWRfMDMucG5nXCI7XHJcbmV4cG9ydCBjb25zdCBQTEFZX0JUTl9JTUcgPSBcIi4vYXNzZXRzL2ltYWdlcy9QbGF5X2J1dHRvbi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBQQVVTRV9CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvcGF1c2VfdjAxLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IE1BUF9CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwX2J0bi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBNQVBfSUNPTl9JTUcgPSBcIi4vYXNzZXRzL2ltYWdlcy9tYXBJY29uLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IE1BUF9JQ09OX1NQRUNJQUxfSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwX2ljb25fbW9uc3Rlcl9sZXZlbF92MDEud2VicFwiO1xyXG5leHBvcnQgY29uc3QgTUFQX0xPQ0tfSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbWFwTG9jay53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBTVEFSX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3N0YXIud2VicFwiO1xyXG5leHBvcnQgY29uc3QgTkVYVF9CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvbmV4dF9idG4ud2VicFwiO1xyXG5leHBvcnQgY29uc3QgQkFDS19CVE5fSU1HID0gXCIuL2Fzc2V0cy9pbWFnZXMvYmFja19idG4ud2VicFwiO1xyXG5leHBvcnQgY29uc3QgUkVUUllfQlROX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3JldHJ5X2J0bi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBDQU5DRUxfQlROX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL2Nsb3NlX2J0bi53ZWJwXCI7XHJcbmV4cG9ydCBjb25zdCBZRVNfQlROX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL2NvbmZpcm1fYnRuLndlYnBcIjtcclxuZXhwb3J0IGNvbnN0IFBPUFVQX0JHX0lNRyA9IFwiLi9hc3NldHMvaW1hZ2VzL3BvcHVwX2JnX3YwMS53ZWJwXCI7XHJcbi8vQmFja2dyb3VuZCBHcm91cCBJbWFnZXNcclxuZXhwb3J0IGNvbnN0IEdBTUVQTEFZX0JHX0dST1VQX0lNR1MgPSB7XHJcbiAgICBBU1NFVFNfUEFUSF9UT1RFTSxcclxuICAgIERFRkFVTFRfQkFDS0dST1VORF8xLFxyXG4gICAgQVNTRVRTX1BBVEhfSElMTCxcclxuICAgIEFTU0VUU19QQVRIX0ZFTkNFLFxyXG4gICAgQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFLFxyXG59O1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICBBU1NFVFNfUEFUSF9ISUxMLFxyXG4gICAgQVNTRVRTX1BBVEhfVE9URU0sXHJcbiAgICBBU1NFVFNfUEFUSF9GRU5DRSxcclxufTtcclxuZXhwb3J0IGNvbnN0IEFVVFVNTl9CR19HUk9VUF9JTUdTID0ge1xyXG4gICAgQVVUVU1OX0JBQ0tHUk9VTkRfMSxcclxuICAgIEFVVFVNTl9ISUxMXzEsXHJcbiAgICBBVVRVTU5fUElMTEFSXzEsXHJcbiAgICBBVVRVTU5fU0lHTl8xLFxyXG4gICAgQVVUVU1OX0ZFTkNFXzEsXHJcbn07XHJcbmV4cG9ydCBjb25zdCBXSU5URVJfQkdfR1JPVVBfSU1HUyA9IHtcclxuICAgIFdJTlRFUl9CQUNLR1JPVU5EXzEsXHJcbiAgICBXSU5URVJfSElMTF8xLFxyXG4gICAgV0lOVEVSX1NJR05fMSxcclxuICAgIFdJTlRFUl9GRU5DRV8xLFxyXG4gICAgV0lOVEVSX1BJTExBUl8xLFxyXG59O1xyXG4vL1NjZW5lIE5hbWVzXHJcbmV4cG9ydCBjb25zdCBTQ0VORV9OQU1FX1NUQVJUID0gXCJTdGFydFNjZW5lXCI7XHJcbmV4cG9ydCBjb25zdCBTQ0VORV9OQU1FX0xFVkVMX1NFTEVDVCA9IFwiTGV2ZWxTZWxlY3Rpb25cIjtcclxuZXhwb3J0IGNvbnN0IFNDRU5FX05BTUVfR0FNRV9QTEFZID0gXCJHYW1lUGxheVwiO1xyXG5leHBvcnQgY29uc3QgU0NFTkVfTkFNRV9MRVZFTF9FTkQgPSBcIkxldmVsRW5kXCI7XHJcbi8vTGV2ZWxzXHJcbmV4cG9ydCBjb25zdCBTUEVDSUFMX0xFVkVMUyA9IFs1LCAxMywgMjAsIDMwLCA0Ml07XHJcbiIsImltcG9ydCB7IGxhbmcgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5leHBvcnQgY29uc3QgVVJMID0gXCIuL2xhbmcvXCIgKyBsYW5nICsgXCIvZnRtX1wiICsgbGFuZyArIFwiLmpzb25cIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZ0bURhdGEoKSB7XHJcbiAgICByZXR1cm4gZmV0Y2goVVJMLCB7XHJcbiAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXHJcbiAgICAgICAgfSxcclxuICAgIH0pLnRoZW4oKHJlcykgPT4gcmVzLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9KSk7XHJcbn1cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldERhdGEoKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgZ2V0RnRtRGF0YSgpO1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBjdXN0b21Gb250cyA9IHtcclxuICAgIGRlZmF1bHQ6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgZW5nbGlzaDogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBzd2FoaWxpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHdvbG9mOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHRhamlrOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIG1hcmF0aGk6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgYW1oYXJpYzogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBwdW5qYWJpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHRhbWlsOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIHNlcGVkaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBndWphcmF0aTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICB0ZWx1Z3U6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgdHNvbmdhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIG1hbGF5OiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIG5kZWJlbGU6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgdmVuZGE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgc2lzd2F0aTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICB0c3dhbmE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgdGhhaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBmdWxhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIGZhcnNpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIGJ1cm1lc2U6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgYmVuZ2FsaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBBemVyYmFpamFuaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBTZXNvdGhvOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEdlb3JnaWFuOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEJyYXppbGlhblBvcnR1Z3Vlc2U6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgU29tYWxpOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEhhdXNhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIElnYm86IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgSGF0aWFuQ3Jlb2xlOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIE9yb21vOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEx1Z2FuZGE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgWW9ydWJhOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEtobWVyOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIEphdmFuZXNlOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIFVyZHU6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgS2lueWFyd2FuZGE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgU2hvbmE6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgS3VyZGlzaDogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBGcmVuY2g6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgaXNpWGhvc2E6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgQWZyaWthYW5zOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIE5lcGFsaTogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBVa3JhaW5pYW46IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgSGluZGk6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgVGFnYWxvZzogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBWaWV0bmFtZXNlOiBcIkF0bWEtU2VtaUJvbGRcIixcclxuICAgIFBhc2h0bzogXCJBdG1hLVNlbWlCb2xkXCIsXHJcbiAgICBUd2k6IFwiQXRtYS1TZW1pQm9sZFwiLFxyXG4gICAgQXJhYmljOiBcIkF0bWEtU2VtaUJvbGRcIixcclxufTtcclxuIiwiZXhwb3J0IGNsYXNzIERhdGFNb2RhbCB7XHJcbiAgICB0aXRsZTtcclxuICAgIG90aGVyQXVkaW9zO1xyXG4gICAgbGV2ZWxzO1xyXG4gICAgRmVlZGJhY2tUZXh0cztcclxuICAgIEZlZWRiYWNrQXVkaW9zO1xyXG4gICAgcmlnaHRUb0xlZnQ7XHJcbiAgICBtYWpWZXJzaW9uO1xyXG4gICAgbWluVmVyc2lvbjtcclxuICAgIHZlcnNpb247XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgb3RoZXJBdWRpb3MsIGxldmVscywgZmVlZGJhY2tUZXh0cywgcmlnaHRUb0xlZnQsIGZlZWRiYWNrQXVkaW9zLCBtYWpWZXJzaW9uLCBtaW5WZXJzaW9uLCB2ZXJzaW9uKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMub3RoZXJBdWRpb3MgPSBuZXcgT3RoZXJBdWRpb3Mob3RoZXJBdWRpb3MpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzID0gdGhpcy5nZXRMZXZlbHMobGV2ZWxzKTtcclxuICAgICAgICB0aGlzLkZlZWRiYWNrVGV4dHMgPSBuZXcgRmVlZGJhY2tUZXh0cyhmZWVkYmFja1RleHRzKTtcclxuICAgICAgICB0aGlzLkZlZWRiYWNrQXVkaW9zID0gbmV3IEZlZWRiYWNrQXVkaW9zKGZlZWRiYWNrQXVkaW9zKTtcclxuICAgICAgICB0aGlzLnJpZ2h0VG9MZWZ0ID0gcmlnaHRUb0xlZnQ7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gbWFqVmVyc2lvbjtcclxuICAgICAgICB0aGlzLm1pblZlcnNpb24gPSBtaW5WZXJzaW9uO1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IHZlcnNpb247XHJcbiAgICB9XHJcbiAgICBnZXRMZXZlbHMobGV2ZWxzKSB7XHJcbiAgICAgICAgbGV0IGxldmVsQXJyYXkgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxldmVscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBsZXZlbEFycmF5LnB1c2gobmV3IExldmVscyhsZXZlbHNbaV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxldmVsQXJyYXk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIE90aGVyQXVkaW9zIHtcclxuICAgIHNlbGN0WW91clBsYXllcjtcclxuICAgIHdhdGNoTWVHcm93O1xyXG4gICAgYXJlWW91U3VyZTtcclxuICAgIGNvbnN0cnVjdG9yKG90aGVyQXVkaW9zKSB7XHJcbiAgICAgICAgdGhpcy5zZWxjdFlvdXJQbGF5ZXIgPSBvdGhlckF1ZGlvc1tcIlNlbGVjdCB5b3VyIHBsYXllclwiXTtcclxuICAgICAgICB0aGlzLndhdGNoTWVHcm93ID0gb3RoZXJBdWRpb3NbXCJXYXRjaCBtZSBncm93XCJdO1xyXG4gICAgICAgIHRoaXMuYXJlWW91U3VyZSA9IG90aGVyQXVkaW9zW1wiQXJlIHlvdSBzdXJlXCJdO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGZWVkYmFja1RleHRzIHtcclxuICAgIGZhbnRhc3RpYztcclxuICAgIGdyZWF0O1xyXG4gICAgYW1hemluZztcclxuICAgIGNvbnN0cnVjdG9yKGZlZWRiYWNrVGV4dHMpIHtcclxuICAgICAgICBpZiAoZmVlZGJhY2tUZXh0cy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLmZhbnRhc3RpYyA9IGZlZWRiYWNrVGV4dHNbMF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmZWVkYmFja1RleHRzLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JlYXQgPSBmZWVkYmFja1RleHRzWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZmVlZGJhY2tUZXh0cy5sZW5ndGggPj0gMykge1xyXG4gICAgICAgICAgICB0aGlzLmFtYXppbmcgPSBmZWVkYmFja1RleHRzWzJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgRmVlZGJhY2tBdWRpb3Mge1xyXG4gICAgZmFudGFzdGljO1xyXG4gICAgZ3JlYXQ7XHJcbiAgICBhbWF6aW5nO1xyXG4gICAgY29uc3RydWN0b3IoZmVlZGJhY2tBdWRpb3MpIHtcclxuICAgICAgICBpZiAoZmVlZGJhY2tBdWRpb3MubGVuZ3RoID49IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5mYW50YXN0aWMgPSBmZWVkYmFja0F1ZGlvc1swXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZlZWRiYWNrQXVkaW9zLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JlYXQgPSBmZWVkYmFja0F1ZGlvc1sxXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGZlZWRiYWNrQXVkaW9zLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW1hemluZyA9IGZlZWRiYWNrQXVkaW9zWzJdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgTGV2ZWxzIHtcclxuICAgIHB1enpsZXM7XHJcbiAgICBsZXZlbE1ldGE7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIGNvbnN0cnVjdG9yKGxldmVscykge1xyXG4gICAgICAgIHRoaXMucHV6emxlcyA9IHRoaXMuZ2V0UHV6emxlRGF0YShsZXZlbHMpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxNZXRhID0gbmV3IExldmVsTWV0YShsZXZlbHMuTGV2ZWxNZXRhKTtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxzLkxldmVsTnVtYmVyO1xyXG4gICAgfVxyXG4gICAgZ2V0UHV6emxlRGF0YShsZXZlbHMpIHtcclxuICAgICAgICBsZXQgcHV6emxlT2JqZWN0cyA9IFtdO1xyXG4gICAgICAgIGxldmVscy5QdXp6bGVzLm1hcCgocHV6emxlRGF0YSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcHV6emxlT2JqZWN0cy5wdXNoKG5ldyBQdXp6bGVzKHB1enpsZURhdGEpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcHV6emxlT2JqZWN0cztcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgUHV6emxlcyB7XHJcbiAgICBzZWdtZW50TnVtYmVyO1xyXG4gICAgcHJvbXB0O1xyXG4gICAgZm9pbFN0b25lcztcclxuICAgIHRhcmdldFN0b25lcztcclxuICAgIGNvbnN0cnVjdG9yKHB1enpsZSkge1xyXG4gICAgICAgIHRoaXMuc2VnbWVudE51bWJlciA9IHB1enpsZS5TZWdtZW50TnVtYmVyO1xyXG4gICAgICAgIHRoaXMucHJvbXB0ID0gbmV3IFByb21wdChwdXp6bGUucHJvbXB0KTtcclxuICAgICAgICB0aGlzLmZvaWxTdG9uZXMgPSB0aGlzLmdldEZvaWxTdG9uZXMocHV6emxlKTtcclxuICAgICAgICB0aGlzLnRhcmdldFN0b25lcyA9IHRoaXMuZ2V0VGFyZ2V0U3RvbmVzKHB1enpsZSk7XHJcbiAgICB9XHJcbiAgICBnZXRGb2lsU3RvbmVzKHB1enpsZSkge1xyXG4gICAgICAgIGxldCBmb2lsU3RvbmVBcnJheSA9IFtdO1xyXG4gICAgICAgIHB1enpsZS5mb2lsc3RvbmVzLm1hcCgoc3RvbmVzLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBmb2lsU3RvbmVBcnJheS5wdXNoKHN0b25lcy5TdG9uZVRleHQpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmb2lsU3RvbmVBcnJheTtcclxuICAgIH1cclxuICAgIGdldFRhcmdldFN0b25lcyhwdXp6bGUpIHtcclxuICAgICAgICBsZXQgdGFyZ2V0U3RvbmVBcnJheSA9IFtdO1xyXG4gICAgICAgIHB1enpsZS50YXJnZXRzdG9uZXMubWFwKChzdG9uZXMsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIHRhcmdldFN0b25lQXJyYXkucHVzaChzdG9uZXMuU3RvbmVUZXh0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0U3RvbmVBcnJheTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgRm9pbFN0b25lIHtcclxuICAgIHN0b25lVGV4dDtcclxuICAgIGNvbnN0cnVjdG9yKHN0b25lVGV4dCkge1xyXG4gICAgICAgIHRoaXMuc3RvbmVUZXh0ID0gc3RvbmVUZXh0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBUYXJnZXRTdG9uZSB7XHJcbiAgICBzdG9uZVRleHQ7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnN0b25lVGV4dDtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgUHJvbXB0IHtcclxuICAgIHByb21wdFRleHQ7XHJcbiAgICBwcm9tcHRBdWRpbztcclxuICAgIGNvbnN0cnVjdG9yKHByb21wdCkge1xyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dCA9IHByb21wdC5Qcm9tcHRUZXh0O1xyXG4gICAgICAgIHRoaXMucHJvbXB0QXVkaW8gPSBwcm9tcHQuUHJvbXB0QXVkaW87XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIExldmVsTWV0YSB7XHJcbiAgICBwcm9tcHRGYWRlT3V0O1xyXG4gICAgbGV0dGVyR3JvdXA7XHJcbiAgICBsZXZlbE51bWJlcjtcclxuICAgIHByb3RvVHlwZTtcclxuICAgIGxldmVsVHlwZTtcclxuICAgIGNvbnN0cnVjdG9yKGxldmVsTWV0YSkge1xyXG4gICAgICAgIHRoaXMucHJvbXB0RmFkZU91dCA9IGxldmVsTWV0YS5Qcm9tcHRGYWRlb3V0O1xyXG4gICAgICAgIHRoaXMubGV0dGVyR3JvdXAgPSBsZXZlbE1ldGEuTGV0dGVyR3JvdXA7XHJcbiAgICAgICAgdGhpcy5sZXZlbE51bWJlciA9IGxldmVsTWV0YS5MZXZlbE51bWJlcjtcclxuICAgICAgICB0aGlzLnByb3RvVHlwZSA9IGxldmVsTWV0YS5Qcm9tcHRUeXBlO1xyXG4gICAgICAgIHRoaXMubGV2ZWxUeXBlID0gbGV2ZWxNZXRhLkxldmVsVHlwZTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBEZWJ1Z2dlciwgbGFuZyB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmV4cG9ydCBjbGFzcyBHYW1lU2NvcmUge1xyXG4gICAgc3RhdGljIGN1cnJlbnRsYW5ndWFnZSA9IGxhbmc7XHJcbiAgICBzdGF0aWMgc2V0R2FtZUxldmVsU2NvcmUoY3VycmVudExldmVsSW5mbywgc2NvcmUpIHtcclxuICAgICAgICBsZXQgc3RhcnNHYWluZWQgPSB0aGlzLmNhbGN1bGF0ZVN0YXJDb3VudChzY29yZSk7XHJcbiAgICAgICAgbGV0IGxldmVsUGxheWVkSW5mbyA9IHtcclxuICAgICAgICAgICAgbGV2ZWxOYW1lOiBjdXJyZW50TGV2ZWxJbmZvLmxldmVsTWV0YS5sZXZlbFR5cGUsXHJcbiAgICAgICAgICAgIGxldmVsTnVtYmVyOiBjdXJyZW50TGV2ZWxJbmZvLmxldmVsTWV0YS5sZXZlbE51bWJlcixcclxuICAgICAgICAgICAgc2NvcmU6IHNjb3JlLFxyXG4gICAgICAgICAgICBzdGFyQ291bnQ6IHN0YXJzR2FpbmVkLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5zZXRUb3RhbFN0YXJDb3VudChzdGFyc0dhaW5lZCk7XHJcbiAgICAgICAgbGV0IGFsbEdhbWVsZXZlbEluZm8gPSB0aGlzLmdldEFsbEdhbWVMZXZlbEluZm8oKTtcclxuICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEdhbWVsZXZlbEluZm8ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFsbEdhbWVsZXZlbEluZm9baV0ubGV2ZWxOdW1iZXIgPT09IGxldmVsUGxheWVkSW5mby5sZXZlbE51bWJlcikge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGluZGV4ICE9PSAtMSAmJiBsZXZlbFBsYXllZEluZm8uc2NvcmUgPiBhbGxHYW1lbGV2ZWxJbmZvW2luZGV4XS5zY29yZSkge1xyXG4gICAgICAgICAgICBhbGxHYW1lbGV2ZWxJbmZvW2luZGV4XSA9IGxldmVsUGxheWVkSW5mbztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGFsbEdhbWVsZXZlbEluZm8ucHVzaChsZXZlbFBsYXllZEluZm8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSh0aGlzLmN1cnJlbnRsYW5ndWFnZSArIFwiZ2FtZVBsYXllZEluZm9cIiwgSlNPTi5zdHJpbmdpZnkoYWxsR2FtZWxldmVsSW5mbykpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldEFsbEdhbWVMZXZlbEluZm8oKSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKHRoaXMuY3VycmVudGxhbmd1YWdlICsgXCJnYW1lUGxheWVkSW5mb1wiKTtcclxuICAgICAgICByZXR1cm4gZGF0YSA9PSB1bmRlZmluZWQgPyBbXSA6IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgc2V0VG90YWxTdGFyQ291bnQoc3RhcnNHYWluZWQpIHtcclxuICAgICAgICBsZXQgc3RhckNvdW50ID0gdGhpcy5nZXRUb3RhbFN0YXJDb3VudCgpO1xyXG4gICAgICAgIGxldCB0b3RhbFN0YXJDb3VudCA9IHN0YXJDb3VudCArIHN0YXJzR2FpbmVkO1xyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuY3VycmVudGxhbmd1YWdlICsgXCJ0b3RhbFN0YXJDb3VudFwiLCB0b3RhbFN0YXJDb3VudCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0VG90YWxTdGFyQ291bnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhckNvdW50ID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0odGhpcy5jdXJyZW50bGFuZ3VhZ2UgKyBcInRvdGFsU3RhckNvdW50XCIpO1xyXG4gICAgICAgIHJldHVybiBzdGFyQ291bnQgPT0gdW5kZWZpbmVkID8gMCA6IHBhcnNlSW50KHN0YXJDb3VudCk7XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgY2FsY3VsYXRlU3RhckNvdW50KHNjb3JlKSB7XHJcbiAgICAgICAgcmV0dXJuIHNjb3JlID09IDIwMFxyXG4gICAgICAgICAgICA/IDFcclxuICAgICAgICAgICAgOiBzY29yZSA9PSAzMDBcclxuICAgICAgICAgICAgICAgID8gMlxyXG4gICAgICAgICAgICAgICAgOiBzY29yZSA9PSA0MDBcclxuICAgICAgICAgICAgICAgICAgICA/IDJcclxuICAgICAgICAgICAgICAgICAgICA6IHNjb3JlID09IDUwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiAwO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldERhdGFmcm9tU3RvcmFnZSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgID8gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShsYW5nICsgXCJQcm9maWxlRGVidWdcIikgfHwgXCJ7fVwiKVxyXG4gICAgICAgICAgICA6IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0obGFuZyArIFwiUHJvZmlsZVwiKSB8fCBcInt9XCIpO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG59XHJcbiIsImV4cG9ydCBjb25zdCBsYW5ndWFnZUZvbnRNYXBwaW5nID0ge1xyXG4gICAgZW5nbGlzaDogXCJDb25zb2xhc1wiLFxyXG4gICAgc3dhaGlsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgd29sb2Y6IFwiQ29uc29sYXNcIixcclxuICAgIHRhamlrOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBtYXJhdGhpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBhbWhhcmljOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBwdW5qYWJpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0YW1pbDogXCJDb25zb2xhc1wiLFxyXG4gICAgc2VwZWRpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBndWphcmF0aTogXCJDb25zb2xhc1wiLFxyXG4gICAgdGVsdWd1OiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0c29uZ2E6IFwiQ29uc29sYXNcIixcclxuICAgIG1hbGF5OiBcIkNvbnNvbGFzXCIsXHJcbiAgICBuZGViZWxlOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB2ZW5kYTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBzaXN3YXRpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICB0c3dhbmE6IFwiQ29uc29sYXNcIixcclxuICAgIHRoYWk6IFwiQ29uc29sYXNcIixcclxuICAgIGZ1bGE6IFwiQ29uc29sYXNcIixcclxuICAgIGZhcnNpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBidXJtZXNlOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBiZW5nYWxpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBBemVyYmFpamFuaTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBTZXNvdGhvOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBHZW9yZ2lhbjogXCJDb25zb2xhc1wiLFxyXG4gICAgQnJhemlsaWFuUG9ydHVndWVzZTogXCJDb25zb2xhc1wiLFxyXG4gICAgU29tYWxpOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBIYXVzYTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBJZ2JvOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBIYXRpYW5DcmVvbGU6IFwiQ29uc29sYXNcIixcclxuICAgIE9yb21vOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBMdWdhbmRhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBZb3J1YmE6IFwiQ29uc29sYXNcIixcclxuICAgIEtobWVyOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBKYXZhbmVzZTogXCJDb25zb2xhc1wiLFxyXG4gICAgVXJkdTogXCJDb25zb2xhc1wiLFxyXG4gICAgS2lueWFyd2FuZGE6IFwiQ29uc29sYXNcIixcclxuICAgIFNob25hOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBLdXJkaXNoOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBGcmVuY2g6IFwiQ29uc29sYXNcIixcclxuICAgIGlzaVhob3NhOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBBZnJpa2FhbnM6IFwiQ29uc29sYXNcIixcclxuICAgIE5lcGFsaTogXCJDb25zb2xhc1wiLFxyXG4gICAgVWtyYWluaWFuOiBcIkNvbnNvbGFzXCIsXHJcbiAgICBIaW5kaTogXCJDb25zb2xhc1wiLFxyXG4gICAgVGFnYWxvZzogXCJDb25zb2xhc1wiLFxyXG4gICAgVmlldG5hbWVzZTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBQYXNodG86IFwiQ29uc29sYXNcIixcclxuICAgIFR3aTogXCJOb3RvU2Fucy1SZWd1bGFyXCIsXHJcbiAgICBBcmFiaWM6IFwiQWRvYmUtQXJhYmljLUJvbGRcIlxyXG59O1xyXG4iLCJpbXBvcnQgeyBMT0FEUFVaWkxFLCBTVE9ORURST1AgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5leHBvcnQgY2xhc3MgRXZlbnRNYW5hZ2VyIHtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdG9uZURyb3BDYWxsYmFja0hhbmRsZXI7XHJcbiAgICBsb2FkUHV6emxlQ2FsbGJhY2tIYW5kbGVyO1xyXG4gICAgY29uc3RydWN0b3IoaGFuZGxlcikge1xyXG4gICAgICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XHJcbiAgICAgICAgdGhpcy5zdG9uZURyb3BDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLnN0b25lRHJvcENhbGxiYWNrSGFuZGxlcjtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIgPSBoYW5kbGVyLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXI7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihTVE9ORURST1AsIHRoaXMuaGFuZGxlU3RvbmVEcm9wcGVkRXZlbnQsIGZhbHNlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKExPQURQVVpaTEUsIHRoaXMuaGFuZGxlTG9hZFB1enpsZUV2ZW50LCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZURyb3BwZWRFdmVudCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc3RvbmVEcm9wQ2FsbGJhY2tIYW5kbGVyKGV2ZW50KTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVMb2FkUHV6emxlRXZlbnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIoZXZlbnQpO1xyXG4gICAgfTtcclxuICAgIHVucmVnaXN0ZXJFdmVudExpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoU1RPTkVEUk9QLCB0aGlzLmhhbmRsZVN0b25lRHJvcHBlZEV2ZW50LCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihMT0FEUFVaWkxFLCB0aGlzLmhhbmRsZUxvYWRQdXp6bGVFdmVudCwgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JkUHV6emxlTG9naWMge1xyXG4gICAgLyoqXHJcbiAgICAgICAgcHV6emxlTnVtYmVyIC0gUHV6emxlIHN0YWdlIGxldmVsIG9mIGN1cnJlbnQgKFVwIHRvIDUgc3RhZ2UgbGV2ZWxzKSBnYW1lIGxldmVsLlxyXG4gICAgICAgIGdyb3VwZWRMZXR0ZXJzIC0gU3RyaW5nIHNlcXVlbmNlIG9mIGxldHRlcnMgd2hlbiBwZXJmb3JtaW5nIHRoZSBtdWx0aS1sZXR0ZXIgc2VsZWNpdG9uLlxyXG4gICAgICAgIGRyb3BwZWRMZXR0ZXJzIC0gU3RyaW5nIHNlcXVlbmNlIG9mIGxldHRlcnMgd2hlbiBncm91cCBvZiBsZXR0ZXJzIHdhcyBmZWQgdG8gdGhlIG1vbnN0ZXIuXHJcbiAgICAgICAgZ3JvdXBlZE9iaiAtIE9iamVjdCB3aXRoIGtleSBwcm9wZXJ0aWVzIG9mIHN0b25lIGxldHRlciBpbmRleCwgdXNlZCBmb3IgdmFsaWRhdGluZyBkdXBsaWNhdGUgbGV0dGVycyB3aGlsZSBob3ZlcmluZy5cclxuICAgICAgICBkcm9wcGVkSGlzdG9yeSAtIE9iamVjdCB3aXRoIGtleSBwcm9wZXJ0aWVzIG9mIHN0b25lIGxldHRlciBpbmRleCB0aGF0IHdhcyBmZWQgdG8gdGhlIG1vbnN0ZXIuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVzZWQgdG8gcHJlc2VydmUgdGhlIGxpc3QgZm9yIGhpZGluZyB0aGUgc3RvbmUgbGV0dGVycy5cclxuICAgICAgICBoaWRlTGlzdE9iaiAtIE9iamVjdCB3aXRoIGtleSBwcm9wZXJ0aWVzIG9mIHN0b25lIGxldHRlciBpbmRleC5cclxuICAgICAgICAgICAgICAgICAgICBVc2VkIHRvIGhpZGUgc3RvbmVzIHRoYXQgaXMgcGFydCBvZiB0aGUgZ3JvdXAgb3Igc3RvbmVzIHRoYXQgd2FzIGFscmVhZHkgZmVkIHRvIHRoZSBtb25zdGVyLlxyXG4gICAgKiovXHJcbiAgICBsZXZlbERhdGE7XHJcbiAgICBwdXp6bGVOdW1iZXI7XHJcbiAgICBncm91cGVkTGV0dGVycztcclxuICAgIGRyb3BwZWRMZXR0ZXJzO1xyXG4gICAgZ3JvdXBlZE9iajtcclxuICAgIGRyb3BwZWRIaXN0b3J5O1xyXG4gICAgaGlkZUxpc3RPYmo7XHJcbiAgICBjb25zdHJ1Y3RvcihsZXZlbERhdGEsIHB1enpsZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMubGV2ZWxEYXRhID0gbGV2ZWxEYXRhO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuZ3JvdXBlZExldHRlcnMgPSAnJztcclxuICAgICAgICB0aGlzLmRyb3BwZWRMZXR0ZXJzID0gJyc7XHJcbiAgICAgICAgdGhpcy5ncm91cGVkT2JqID0ge307XHJcbiAgICAgICAgdGhpcy5kcm9wcGVkSGlzdG9yeSA9IHt9O1xyXG4gICAgICAgIHRoaXMuaGlkZUxpc3RPYmogPSB7fTtcclxuICAgIH1cclxuICAgIGdldFRhcmdldFdvcmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxEYXRhLnB1enpsZXNbdGhpcy5wdXp6bGVOdW1iZXJdPy5wcm9tcHQ/LnByb21wdFRleHQ7XHJcbiAgICB9XHJcbiAgICBnZXRWYWx1ZXMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ3JvdXBlZExldHRlcnM6IHRoaXMuZ3JvdXBlZExldHRlcnMsXHJcbiAgICAgICAgICAgIGRyb3BwZWRMZXR0ZXJzOiB0aGlzLmRyb3BwZWRMZXR0ZXJzLFxyXG4gICAgICAgICAgICBncm91cGVkT2JqOiB7IC4uLnRoaXMuZ3JvdXBlZE9iaiB9LFxyXG4gICAgICAgICAgICBkcm9wcGVkSGlzdG9yeTogeyAuLi50aGlzLmRyb3BwZWRIaXN0b3J5IH0sXHJcbiAgICAgICAgICAgIGhpZGVMaXN0T2JqOiB7IC4uLnRoaXMuaGlkZUxpc3RPYmogfSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY2hlY2tJc1dvcmRQdXp6bGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGV2ZWxEYXRhPy5sZXZlbE1ldGE/LmxldmVsVHlwZSA9PT0gJ1dvcmQnO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlUHV6emxlTGV2ZWwocHV6emxlTnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckFsbFZhbHVlcygpO1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gcHV6emxlTnVtYmVyO1xyXG4gICAgfVxyXG4gICAgY2xlYXJQaWNrZWRVcCgpIHtcclxuICAgICAgICB0aGlzLmdyb3VwZWRMZXR0ZXJzID0gJyc7XHJcbiAgICAgICAgdGhpcy5ncm91cGVkT2JqID0ge307XHJcbiAgICAgICAgdGhpcy5oaWRlTGlzdE9iaiA9IHsgLi4udGhpcy5kcm9wcGVkSGlzdG9yeSB9O1xyXG4gICAgfVxyXG4gICAgY2xlYXJBbGxWYWx1ZXMoKSB7XHJcbiAgICAgICAgdGhpcy5ncm91cGVkTGV0dGVycyA9ICcnO1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZExldHRlcnMgPSAnJztcclxuICAgICAgICB0aGlzLmdyb3VwZWRPYmogPSB7fTtcclxuICAgICAgICB0aGlzLmRyb3BwZWRIaXN0b3J5ID0ge307XHJcbiAgICAgICAgdGhpcy5oaWRlTGlzdE9iaiA9IHt9O1xyXG4gICAgICAgIHRoaXMucHV6emxlTnVtYmVyID0gMDtcclxuICAgIH1cclxuICAgIHZhbGlkYXRlU2hvdWxkSGlkZUxldHRlcihmb2lsU3RvbmVJbmRleCkge1xyXG4gICAgICAgIC8vSWYgc3RvbmUga2V5IGluZGV4IGlzIGxpc3RlZCBpbiBoaWRlTGlzdE9iaiBpdCBzaG91bGQgbm90IGJlIGRyYXduLlxyXG4gICAgICAgIHJldHVybiAhdGhpcy5oaWRlTGlzdE9ialtmb2lsU3RvbmVJbmRleF07XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDaGVja0hvdmVyZWRTdG9uZShmb2lsU3RvbmVUZXh0LCBmb2lsU3RvbmVJbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGNvbWJpbmVkTGV0dGVycyA9IHRoaXMuZ3JvdXBlZExldHRlcnM7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0V29yZCA9IHRoaXMuZ2V0VGFyZ2V0V29yZCgpO1xyXG4gICAgICAgIC8qIEdvZXMgaW5zaWRlIGhlcmUgaWYgdGhlcmUgYXJlIG5vIHByZXZpb3VzIGxldHRlcihzKSB3ZXJlIGRyb3BwZWRcclxuICAgICAgICBhbmQgZ3JvdXBpbmcgb2YgbGV0dGVycyBzdGFydHMgaW4gYSBpbmNvcnJlY3QgbGV0dGVyLiAqL1xyXG4gICAgICAgIGlmICgoIXRoaXMuZHJvcHBlZExldHRlcnMubGVuZ3RoICYmIHRhcmdldFdvcmRbMF0gIT09IGNvbWJpbmVkTGV0dGVyc1swXSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvKlxyXG4gICAgICAgIGlzTGV0dGVyQWxyZWFkeUFkZGVkIC0gSWYgdGhlIG5ldyBzdG9uZSB0ZXh0IGlzIE5PVCBhbHJlYWR5IGluY2x1ZGVkXHJcbiAgICAgICAgaXNTYW1lTGV0dGVyVW5pcXVlIC1JZiB0aGVyZSBpcyBhbHJlYWR5IG9mIHRoZSBzYW1lIGxldHRlciBleGlzdCBpbiBncm91cCwgdmFsaWRhdGUgdXNpbmcgdW5pcWUgaWRlbnRpZmllciB3aGljaCBpcyB0aGUgYXJyYXkgaW5kZXgga2V5IGluIGdyb3VwIG9iamVjdC5cclxuICAgICAgICAqL1xyXG4gICAgICAgIGNvbnN0IGlzTGV0dGVyQWxyZWFkeUFkZGVkID0gIWNvbWJpbmVkTGV0dGVycy5pbmNsdWRlcyhmb2lsU3RvbmVUZXh0KTtcclxuICAgICAgICBjb25zdCBpc1NhbWVMZXR0ZXJVbmlxdWUgPSAhdGhpcy5ncm91cGVkT2JqW2ZvaWxTdG9uZUluZGV4XTtcclxuICAgICAgICBjb25zdCBpc01hdGNoVGFyZ2V0V29yZCA9IHRhcmdldFdvcmQuaW5jbHVkZXMoYCR7dGhpcy5kcm9wcGVkTGV0dGVyc30ke2NvbWJpbmVkTGV0dGVyc30ke2ZvaWxTdG9uZVRleHR9YCk7XHJcbiAgICAgICAgcmV0dXJuIGlzTWF0Y2hUYXJnZXRXb3JkICYmIChpc0xldHRlckFscmVhZHlBZGRlZCB8fCBpc1NhbWVMZXR0ZXJVbmlxdWUpO1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVGZWRMZXR0ZXJzKCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldFdvcmQgPSB0aGlzLmdldFRhcmdldFdvcmQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kcm9wcGVkTGV0dGVycyA9PT0gdGFyZ2V0V29yZC5zdWJzdHJpbmcoMCwgdGhpcy5kcm9wcGVkTGV0dGVycy5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgdmFsaWRhdGVXb3JkUHV6emxlKCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldFdvcmQgPSB0aGlzLmdldFRhcmdldFdvcmQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5kcm9wcGVkTGV0dGVycyA9PT0gdGFyZ2V0V29yZDtcclxuICAgIH1cclxuICAgIHNldEdyb3VwVG9Ecm9wcGVkKCkge1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZExldHRlcnMgPSBgJHt0aGlzLmRyb3BwZWRMZXR0ZXJzfSR7dGhpcy5ncm91cGVkTGV0dGVyc31gO1xyXG4gICAgICAgIHRoaXMuZHJvcHBlZEhpc3RvcnkgPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuZHJvcHBlZEhpc3RvcnksXHJcbiAgICAgICAgICAgIC4uLnRoaXMuZ3JvdXBlZE9ialxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICBzZXRQaWNrVXBMZXR0ZXIobGV0dGVyLCBhcnJGb2lsU3RvbmVJbmRleCkge1xyXG4gICAgICAgIHRoaXMuaGlkZUxpc3RPYmogPSB7XHJcbiAgICAgICAgICAgIC4uLnRoaXMuaGlkZUxpc3RPYmosXHJcbiAgICAgICAgICAgIC4uLnRoaXMuZ3JvdXBlZE9ialxyXG4gICAgICAgIH07IC8vSGlkZSB0aGUgcHJldmlvdXMgbGV0dGVycyBleGNlcHQgdGhlIG5ldyBvbmUuXHJcbiAgICAgICAgdGhpcy5ncm91cGVkTGV0dGVycyA9IGAke3RoaXMuZ3JvdXBlZExldHRlcnN9JHtsZXR0ZXJ9YDtcclxuICAgICAgICB0aGlzLmdyb3VwZWRPYmpbYXJyRm9pbFN0b25lSW5kZXhdID0gbGV0dGVyO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFN0YXJ0U2NlbmUsIExldmVsU2VsZWN0aW9uU2NyZWVuLCBHYW1lcGxheVNjZW5lLCBMb2FkaW5nU2NlbmUsIExldmVsRW5kU2NlbmUsIH0gZnJvbSBcIkBzY2VuZXNcIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIkBkYXRhXCI7XHJcbmltcG9ydCB7IERlYnVnZ2VyIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgU0NFTkVfTkFNRV9TVEFSVCwgU0NFTkVfTkFNRV9MRVZFTF9TRUxFQ1QsIFNDRU5FX05BTUVfR0FNRV9QTEFZLCBTQ0VORV9OQU1FX0xFVkVMX0VORCwgUFdBSW5zdGFsbFN0YXR1cywgU3RhcnRTY2VuZTEsIExldmVsU2VsZWN0aW9uMSwgR2FtZVNjZW5lMSwgRW5kU2NlbmUxLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBTY2VuZUhhbmRsZXIge1xyXG4gICAgY2FudmFzO1xyXG4gICAgZGF0YTtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgc3RhcnRTY2VuZTtcclxuICAgIGxldmVsU2VsZWN0aW9uU2NlbmU7XHJcbiAgICBnYW1lcGxheVNjZW5lO1xyXG4gICAgbGV2ZWxFbmRTY2VuZTtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgc3RhdGljIFNjZW5lTmFtZTtcclxuICAgIGxvYWRpbmdTY3JlZW47XHJcbiAgICBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICBsYXN0VGltZSA9IDA7XHJcbiAgICB0b2dnbGVCdG47XHJcbiAgICB0aXRsZVRleHRFbGVtZW50O1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBkYXRhKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbmF2c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidG9nZ2xlLWJ0blwiKTtcclxuICAgICAgICB0aGlzLnRpdGxlVGV4dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpdGxlXCIpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiYmVmb3JlaW5zdGFsbHByb21wdFwiLCB0aGlzLmhhbmRsZUluc3RhbGxQcm9tcHQpO1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FuYXZzRWxlbWVudC5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5zdGFydFNjZW5lID0gbmV3IFN0YXJ0U2NlbmUoY2FudmFzLCBkYXRhLCB0aGlzLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbik7XHJcbiAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IFN0YXJ0U2NlbmUxO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NjcmVlbiA9IG5ldyBMb2FkaW5nU2NlbmUodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMucmVtb3ZlTG9hZGluZyk7XHJcbiAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbkxvb3AoKTtcclxuICAgIH1cclxuICAgIHN0YXJ0QW5pbWF0aW9uTG9vcCgpIHtcclxuICAgICAgICBjb25zdCBhbmltYXRlID0gKHRpbWVTdGFtcCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbih0aW1lU3RhbXApO1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgICB9XHJcbiAgICBkZXZUb2dnbGUoKSB7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy50b2dnbGVCdG4uY2xhc3NMaXN0LnRvZ2dsZShcIm9uXCIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b2dnbGVCdG4uY2xhc3NMaXN0LmNvbnRhaW5zKFwib25cIikpIHtcclxuICAgICAgICAgICAgICAgIERlYnVnZ2VyLkRlYnVnTW9kZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgRGVidWdnZXIuRGVidWdNb2RlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5pbm5lclRleHQgPSBcIkRldlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBjaGVja01vbnN0ZXJQaGFzZVVwZGF0aW9uKCkge1xyXG4gICAgICAgIGxldCB0b3RhbFN0YXJDb3VudCA9IEdhbWVTY29yZS5nZXRUb3RhbFN0YXJDb3VudCgpO1xyXG4gICAgICAgIGxldCBtb25zdGVyUGhhc2VOdW1iZXIgPSBNYXRoLmZsb29yKHRvdGFsU3RhckNvdW50IC8gMTIpICsgMSB8fCAxO1xyXG4gICAgICAgIHJldHVybiBtb25zdGVyUGhhc2VOdW1iZXIgPD0gNCA/IG1vbnN0ZXJQaGFzZU51bWJlciA6IDQ7XHJcbiAgICB9XHJcbiAgICBhbmltYXRpb24gPSAodGltZVN0YW1wKSA9PiB7XHJcbiAgICAgICAgbGV0IGRlbHRhVGltZSA9IHRpbWVTdGFtcCAtIHRoaXMubGFzdFRpbWU7XHJcbiAgICAgICAgdGhpcy5sYXN0VGltZSA9IHRpbWVTdGFtcDtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPyB0aGlzLmxvYWRpbmdTY3JlZW4uZHJhdyhkZWx0YVRpbWUpIDogbnVsbDtcclxuICAgICAgICBpZiAoU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9PT0gU3RhcnRTY2VuZTEpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNjZW5lLmFuaW1hdGlvbihkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBMZXZlbFNlbGVjdGlvbjEpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lLmRyYXdMZXZlbFNlbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID09PSBHYW1lU2NlbmUxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZS5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPT09IEVuZFNjZW5lMSkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsRW5kU2NlbmUuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzd2l0Y2hTY2VuZVRvR2FtZXBsYXkgPSAoZ2FtZVBsYXlEYXRhLCBjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZShjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKTtcclxuICAgICAgICBsZXQganNvblZlcnNpb25OdW1iZXIgPSAhIXRoaXMuZGF0YS5tYWpWZXJzaW9uICYmICEhdGhpcy5kYXRhLm1pblZlcnNpb25cclxuICAgICAgICAgICAgPyB0aGlzLmRhdGEubWFqVmVyc2lvbi50b1N0cmluZygpICtcclxuICAgICAgICAgICAgICAgIFwiLlwiICtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5taW5WZXJzaW9uLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgOiBcIlwiO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmdhbWVwbGF5U2NlbmUgPSBuZXcgR2FtZXBsYXlTY2VuZSh0aGlzLmNhbnZhcywgZ2FtZVBsYXlEYXRhLmN1cnJlbnRMZXZlbERhdGEsIHRoaXMuY2hlY2tNb25zdGVyUGhhc2VVcGRhdGlvbigpLCB0aGlzLmRhdGEuRmVlZGJhY2tUZXh0cywgdGhpcy5kYXRhLnJpZ2h0VG9MZWZ0LCB0aGlzLnN3aXRjaFNjZW5lVG9FbmRMZXZlbCwgZ2FtZVBsYXlEYXRhLnNlbGVjdGVkTGV2ZWxOdW1iZXIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKFNDRU5FX05BTUVfR0FNRV9QTEFZKTtcclxuICAgICAgICAgICAgfSwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXksIGpzb25WZXJzaW9uTnVtYmVyLCB0aGlzLmRhdGEuRmVlZGJhY2tBdWRpb3MpO1xyXG4gICAgICAgICAgICBTY2VuZUhhbmRsZXIuU2NlbmVOYW1lID0gR2FtZVNjZW5lMTtcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuICAgIHN3aXRjaFNjZW5lVG9FbmRMZXZlbCA9IChzdGFyQ291bnQsIG1vbnN0ZXJQaGFzZU51bWJlciwgY3VycmVudExldmVsTnVtYmVyLCBpc1RpbWVyRW5kZWQpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTY3JlZW4uaW5pdENsb3VkKCk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzcG9zZShTQ0VORV9OQU1FX0dBTUVfUExBWSk7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxFbmRTY2VuZSA9IG5ldyBMZXZlbEVuZFNjZW5lKHRoaXMuY2FudmFzLCB0aGlzLmhlaWdodCwgdGhpcy53aWR0aCwgdGhpcy5jb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbE51bWJlciwgdGhpcy5zd2l0Y2hTY2VuZVRvR2FtZXBsYXksIHRoaXMuc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uLCB0aGlzLmRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcik7XHJcbiAgICAgICAgICAgIFNjZW5lSGFuZGxlci5TY2VuZU5hbWUgPSBFbmRTY2VuZTE7XHJcbiAgICAgICAgfSwgaXNUaW1lckVuZGVkID8gMCA6IDQwMDApO1xyXG4gICAgfTtcclxuICAgIHN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbiA9IChjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZShjaGFuZ2VTY2VuZVJlcXVlc3RGcm9tKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblNjZW5lID0gbmV3IExldmVsU2VsZWN0aW9uU2NyZWVuKHRoaXMuY2FudmFzLCB0aGlzLmRhdGEsIHRoaXMuc3dpdGNoU2NlbmVUb0dhbWVwbGF5KTtcclxuICAgICAgICAgICAgU2NlbmVIYW5kbGVyLlNjZW5lTmFtZSA9IExldmVsU2VsZWN0aW9uMTtcclxuICAgICAgICAgICAgdGhpcy50aXRsZVRleHRFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9LCA4MDApO1xyXG4gICAgfTtcclxuICAgIGRpc3Bvc2UgPSAobGFzdFNjZW5lTmFtZSkgPT4ge1xyXG4gICAgICAgIGlmIChsYXN0U2NlbmVOYW1lID09IFNDRU5FX05BTUVfTEVWRUxfU0VMRUNUKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25TY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhc3RTY2VuZU5hbWUgPT09IFNDRU5FX05BTUVfR0FNRV9QTEFZKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ2FtZXBsYXlTY2VuZS5kaXNwb3NlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGxhc3RTY2VuZU5hbWUgPT09IFNDRU5FX05BTUVfU1RBUlQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGFydFNjZW5lLmRpc3Bvc2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAobGFzdFNjZW5lTmFtZSA9PSBTQ0VORV9OQU1FX0xFVkVMX0VORCkge1xyXG4gICAgICAgICAgICB0aGlzLmxldmVsRW5kU2NlbmUuZGlzcG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBzaG93TG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTY3JlZW4uaW5pdENsb3VkKCk7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdcIikuc3R5bGUuekluZGV4ID0gXCIzXCI7XHJcbiAgICB9O1xyXG4gICAgcmVtb3ZlTG9hZGluZyA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmdcIikuc3R5bGUuekluZGV4ID0gXCItMVwiO1xyXG4gICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZUluc3RhbGxQcm9tcHQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAvL2N1cnJlbnRseSBub3QgaW4gdXNlXHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQV0FJbnN0YWxsU3RhdHVzLCBcImZhbHNlXCIpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBNb25zdGVyLCBUaW1lclRpY2tpbmcsIFByb21wdFRleHQsIFBhdXNlQnV0dG9uLCBMZXZlbEluZGljYXRvcnMsIFN0b25lSGFuZGxlciwgVHV0b3JpYWwsIEZlZWRiYWNrVGV4dEVmZmVjdHMsIEF1ZGlvUGxheWVyLCBUcmFpbEVmZmVjdCwgfSBmcm9tIFwiQGNvbXBvbmVudHNcIjtcclxuaW1wb3J0IFBhdXNlUG9wVXAgZnJvbSBcIkBwb3B1cHMvcGF1c2UtcG9wdXBcIjtcclxuaW1wb3J0IHsgbG9hZEltYWdlcywgQ0xJQ0ssIExPQURQVVpaTEUsIE1PVVNFRE9XTiwgTU9VU0VNT1ZFLCBNT1VTRVVQLCBTVE9ORURST1AsIFRPVUNIRU5ELCBUT1VDSE1PVkUsIFRPVUNIU1RBUlQsIFZJU0lCSUxJVFlfQ0hBTkdFLCBEZWJ1Z2dlciwgbGFuZywgcHNldWRvSWQsIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgR2FtZVNjb3JlIH0gZnJvbSBcIkBkYXRhXCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi4vRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgQVVESU9fUEFUSF9PTl9EUkFHLCBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUsIFByZXZpb3VzUGxheWVkTGV2ZWwsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzLCB9IGZyb20gXCJAY29tcG9zaXRpb25zXCI7XHJcbmltcG9ydCB7IFdvcmRQdXp6bGVMb2dpYyB9IGZyb20gJ0BnYW1lcHV6emxlcyc7XHJcbmV4cG9ydCBjbGFzcyBHYW1lcGxheVNjZW5lIHtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgbW9uc3RlcjtcclxuICAgIGpzb25WZXJzaW9uTnVtYmVyO1xyXG4gICAgY2FudmFzO1xyXG4gICAgbGV2ZWxEYXRhO1xyXG4gICAgdGltZXJUaWNraW5nO1xyXG4gICAgcHJvbXB0VGV4dDtcclxuICAgIHBhdXNlQnV0dG9uO1xyXG4gICAgdHV0b3JpYWw7XHJcbiAgICBwdXp6bGVEYXRhO1xyXG4gICAgaWQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgbGV2ZWxJbmRpY2F0b3JzO1xyXG4gICAgc3RvbmVzQ291bnQgPSAxO1xyXG4gICAgbW9uc3RlclBoYXNlTnVtYmVyO1xyXG4gICAgcGlja2VkU3RvbmU7XHJcbiAgICBwdXp6bGVTdGFydFRpbWU7XHJcbiAgICBzaG93VHV0b3JpYWw7XHJcbiAgICBmZWVkQmFja1RleHRzO1xyXG4gICAgaXNQdXp6bGVDb21wbGV0ZWQ7XHJcbiAgICByaWdodFRvTGVmdDtcclxuICAgIGltYWdlc0xvYWRlZCA9IGZhbHNlO1xyXG4gICAgc3dpdGNoU2NlbmVUb0VuZDtcclxuICAgIGxldmVsTnVtYmVyO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgc3RvbmVIYW5kbGVyO1xyXG4gICAgY291bnRlciA9IDA7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBoYW5kbGVyO1xyXG4gICAgcGlja2VkU3RvbmVPYmplY3Q7XHJcbiAgICBwYXVzZVBvcHVwO1xyXG4gICAgaXNQYXVzZUJ1dHRvbkNsaWNrZWQgPSBmYWxzZTtcclxuICAgIGJhY2tncm91bmQ7XHJcbiAgICBmZWVkQmFja1RleHRDYW5hdnNFbGVtZW50O1xyXG4gICAgZmVlZGJhY2tUZXh0RWZmZWN0cztcclxuICAgIGlzR2FtZVN0YXJ0ZWQgPSBmYWxzZTtcclxuICAgIHRpbWUgPSAwO1xyXG4gICAgc2NvcmUgPSAwO1xyXG4gICAgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgIHJlbG9hZFNjZW5lO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgc3RhcnRUaW1lO1xyXG4gICAgcHV6emxlVGltZTtcclxuICAgIGlzRGlzcG9zaW5nO1xyXG4gICAgcmVzZXRBbmltYXRpb25JRDtcclxuICAgIHRyYWlsUGFydGljbGVzO1xyXG4gICAgY2xpY2tUcmFpbFRvZ2dsZTtcclxuICAgIGhhc0ZlZDtcclxuICAgIHdvcmRQdXp6bGVMb2dpYztcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgbGV2ZWxEYXRhLCBtb25zdGVyUGhhc2VOdW1iZXIsIGZlZWRCYWNrVGV4dHMsIHJpZ2h0VG9MZWZ0LCBzd2l0Y2hTY2VuZVRvRW5kLCBsZXZlbE51bWJlciwgc3dpdGNoVG9MZXZlbFNlbGVjdGlvbiwgcmVsb2FkU2NlbmUsIGpzb25WZXJzaW9uTnVtYmVyLCBmZWVkYmFja0F1ZGlvcykge1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMucmlnaHRUb0xlZnQgPSByaWdodFRvTGVmdDtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIiwgeyB3aWxsUmVhZEZyZXF1ZW50bHk6IHRydWUgfSk7XHJcbiAgICAgICAgdGhpcy50cmFpbFBhcnRpY2xlcyA9IG5ldyBUcmFpbEVmZmVjdChjYW52YXMpO1xyXG4gICAgICAgIHRoaXMubW9uc3RlclBoYXNlTnVtYmVyID0gbW9uc3RlclBoYXNlTnVtYmVyIHx8IDE7XHJcbiAgICAgICAgdGhpcy5sZXZlbERhdGEgPSBsZXZlbERhdGE7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hTY2VuZVRvRW5kID0gc3dpdGNoU2NlbmVUb0VuZDtcclxuICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gbGV2ZWxOdW1iZXI7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uID0gc3dpdGNoVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgICAgICB0aGlzLnJlbG9hZFNjZW5lID0gcmVsb2FkU2NlbmU7XHJcbiAgICAgICAgdGhpcy5qc29uVmVyc2lvbk51bWJlciA9IGpzb25WZXJzaW9uTnVtYmVyO1xyXG4gICAgICAgIHRoaXMuc3RhcnRHYW1lVGltZSgpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRQdXp6bGVUaW1lKCk7XHJcbiAgICAgICAgdGhpcy5pc0Rpc3Bvc2luZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucGF1c2VCdXR0b24gPSBuZXcgUGF1c2VCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcyk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcgPSBuZXcgVGltZXJUaWNraW5nKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmxvYWRQdXp6bGUpO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyID0gbmV3IFN0b25lSGFuZGxlcih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNvdW50ZXIsIHRoaXMubGV2ZWxEYXRhLCBmZWVkYmFja0F1ZGlvcywgdGhpcy50aW1lclRpY2tpbmcpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWwgPSBuZXcgVHV0b3JpYWwodGhpcy5jb250ZXh0LCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dCA9IG5ldyBQcm9tcHRUZXh0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmxldmVsRGF0YS5wdXp6bGVzW3RoaXMuY291bnRlcl0sIHRoaXMubGV2ZWxEYXRhLCB0aGlzLnJpZ2h0VG9MZWZ0KTtcclxuICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9ycyA9IG5ldyBMZXZlbEluZGljYXRvcnModGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgMCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuc2V0SW5kaWNhdG9ycyh0aGlzLmNvdW50ZXIpO1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCB0aGlzLm1vbnN0ZXJQaGFzZU51bWJlcik7XHJcbiAgICAgICAgdGhpcy5wYXVzZVBvcHVwID0gbmV3IFBhdXNlUG9wVXAodGhpcy5jYW52YXMsIHRoaXMucmVzdW1lR2FtZSwgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uLCB0aGlzLnJlbG9hZFNjZW5lLCB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IGxldmVsRGF0YSxcclxuICAgICAgICAgICAgc2VsZWN0ZWRMZXZlbE51bWJlcjogbGV2ZWxOdW1iZXIsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMgPSBuZXcgRmVlZGJhY2tUZXh0RWZmZWN0cygpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIgPSBuZXcgQXVkaW9QbGF5ZXIoKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLnB1enpsZURhdGEgPSBsZXZlbERhdGEucHV6emxlcztcclxuICAgICAgICB0aGlzLmZlZWRCYWNrVGV4dHMgPSBmZWVkQmFja1RleHRzO1xyXG4gICAgICAgIHRoaXMuaW1hZ2VzID0ge1xyXG4gICAgICAgICAgICBwcm9maWxlTW9uc3RlcjogQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbG9hZEltYWdlcyh0aGlzLmltYWdlcywgKGltYWdlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRlZEltYWdlcyA9IE9iamVjdC5hc3NpZ24oe30sIGltYWdlcyk7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcHJldmlvdXNQbGF5ZWRMZXZlbCA9IHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbE51bWJlcjtcclxuICAgICAgICBEZWJ1Z2dlci5EZWJ1Z01vZGVcclxuICAgICAgICAgICAgPyBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQcmV2aW91c1BsYXllZExldmVsICsgbGFuZyArIFwiRGVidWdcIiwgcHJldmlvdXNQbGF5ZWRMZXZlbClcclxuICAgICAgICAgICAgOiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQcmV2aW91c1BsYXllZExldmVsICsgbGFuZywgcHJldmlvdXNQbGF5ZWRMZXZlbCk7XHJcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMucmVzZXRBbmltYXRpb25JRCA9IDA7XHJcbiAgICAgICAgdGhpcy5zZXR1cEJnKCk7XHJcbiAgICAgICAgdGhpcy50cmFpbFBhcnRpY2xlcz8uaW5pdCgpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tUcmFpbFRvZ2dsZSA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaGFzRmVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy53b3JkUHV6emxlTG9naWMgPSBuZXcgV29yZFB1enpsZUxvZ2ljKGxldmVsRGF0YSwgdGhpcy5jb3VudGVyKTtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBCR19HUk9VUF9JTUdTLCBkcmF3IH0gPSBsb2FkRHluYW1pY0JnQXNzZXRzKHRoaXMubGV2ZWxEYXRhLmxldmVsTnVtYmVyLCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgQkdfR1JPVVBfSU1HUywgZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgcmVzdW1lR2FtZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLnNldEdhbWVQYXVzZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wYXVzZVBvcHVwLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgICBnZXRSYW5kb21GZWVkQmFja1RleHQocmFuZG9tSW5kZXgpIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5mZWVkQmFja1RleHRzKTtcclxuICAgICAgICBjb25zdCBzZWxlY3RlZEtleSA9IGtleXNbcmFuZG9tSW5kZXhdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmZlZWRCYWNrVGV4dHNbc2VsZWN0ZWRLZXldO1xyXG4gICAgfVxyXG4gICAgZ2V0UmFuZG9tSW50KG1pbiwgbWF4KSB7XHJcbiAgICAgICAgY29uc3QgZmVlZGJhY2tWYWx1ZXMgPSBPYmplY3QudmFsdWVzKHRoaXMuZmVlZEJhY2tUZXh0cyk7XHJcbiAgICAgICAgY29uc3QgZGVmaW5lZFZhbHVlc01heENvdW50ID0gZmVlZGJhY2tWYWx1ZXMuZmlsdGVyKCh2YWx1ZSkgPT4gdmFsdWUgIT0gdW5kZWZpbmVkKS5sZW5ndGggLSAxO1xyXG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZGVmaW5lZFZhbHVlc01heENvdW50IC0gbWluICsgMSkpICsgbWluO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VVcCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vIFJlbW92ZSB1bm5lY2Vzc2FyeSBsb2dnaW5nXHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjbGljayBpcyB3aXRoaW4gcmFuZ2Ugb2YgdGhlIG1vbnN0ZXJcclxuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeCAtIHRoaXMubW9uc3Rlci54IC0gdGhpcy5jYW52YXMud2lkdGggLyA0KSAqKiAyICtcclxuICAgICAgICAgICAgKHkgLSB0aGlzLm1vbnN0ZXIueSAtIHRoaXMuY2FudmFzLmhlaWdodCAvIDIuMikgKiogMik7XHJcbiAgICAgICAgaWYgKGRpc3RhbmNlIDw9IDEwMCAmJiB0aGlzLnBpY2tlZFN0b25lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdGV4dCB9ID0gdGhpcy5waWNrZWRTdG9uZTsgLy8gVXNlIGRlc3RydWN0dXJpbmcgZm9yIGNsYXJpdHlcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmxldmVsRGF0YS5sZXZlbE1ldGEubGV2ZWxUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTGV0dGVyT25seVwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkxldHRlckluV29yZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGV0dGVyUHV6emxlKHRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIldvcmRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTb3VuZFdvcmRcIjpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmRQdXp6bGUodGhpcy5waWNrZWRTdG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgICAgTm90ZTogVE8gRE86IFNob3VsZCB1c2Ugc3RvbmUtaGFuZGxlci50cyBtZXRob2QgcmVzZXRTdG9uZVBvc2l0aW9uLlxyXG4gICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICBpZiAodGhpcy5waWNrZWRTdG9uZSAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZU9iamVjdCAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS50ZXh0ICYmXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgdGhpcy5waWNrZWRTdG9uZU9iamVjdC5vcmlneCA9PT0gXCJudW1iZXJcIiAmJlxyXG4gICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3kgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHhMaW1pdCA9IDUwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaGFsZldpZHRoID0gdGhpcy53aWR0aCAvIDI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lLnggPVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmUudGV4dC5sZW5ndGggPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4IDwgeExpbWl0ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmVPYmplY3Qub3JpZ3ggPCBoYWxmV2lkdGhcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4ICsgMjVcclxuICAgICAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnBpY2tlZFN0b25lT2JqZWN0Lm9yaWd4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS55ID0gdGhpcy5waWNrZWRTdG9uZU9iamVjdC5vcmlneTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gbnVsbDtcclxuICAgICAgICB0aGlzLndvcmRQdXp6bGVMb2dpYy5jbGVhclBpY2tlZFVwKCk7XHJcbiAgICAgICAgdGhpcy5jbGlja1RyYWlsVG9nZ2xlID0gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLy8gRXZlbnQgdG8gaWRlbnRpZnkgbW91c2UgbW92ZWQgZG93biBvbiB0aGUgY2FudmFzXHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKCF0aGlzLndvcmRQdXp6bGVMb2dpYy5jaGVja0lzV29yZFB1enpsZSgpKSB7XHJcbiAgICAgICAgICAgIC8qVG8gRG86IE1vdmUgYWxsIGxvZ2ljIHJlbGF0aW5nIHRvIHN0b25lIGhhbmRsaW5nIGluY2x1ZGluZyB1cGRhdGluZyBpdHMgY29vcmRuYXRlcyB0byBzdG9uZS1oYW5kbGVyLnRzXHJcbiAgICAgICAgICAgICAgTm90ZTogV2lsbCBoYXZlIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgYW5kIHVzZSB0aGUgaGFuZGxlUGlja1N0b25lVXAgaW4gc3RvbmUtaGFuZGxlci50c1xyXG4gICAgICAgICAgICAgIFdpbGwgbGVhdmUgdGhpcyBmb3Igbm93IHRvIGF2b2lkIGFmZmVjdGluZyBMZXR0ZXIgT25seSBwdXp6bGVzIHdpdGggV29yZCBwbGF5IHB1enpsZXMgaW1wbGVtZW50YXRpb24gb2YgbXVsdGktbGV0dGVyIGZlYXR1cmUuXHJcbiAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGZvciAobGV0IHNjIG9mIHRoaXMuc3RvbmVIYW5kbGVyLmZvaWxTdG9uZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4IC0gc2MueCkgKiogMiArICh5IC0gc2MueSkgKiogMik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGlzdGFuY2UgPD0gNDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lT2JqZWN0ID0gc2M7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IHNjO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX1BBVEhfT05fRFJBRyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0UGlja2VkVXAoeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2xpY2tUcmFpbFRvZ2dsZSA9IHRydWU7XHJcbiAgICB9O1xyXG4gICAgc2V0UGlja2VkVXAoeCwgeSkge1xyXG4gICAgICAgIGNvbnN0IHN0b25lTGV0dGVyID0gdGhpcy5zdG9uZUhhbmRsZXIuaGFuZGxlUGlja1N0b25lVXAoeCwgeSk7XHJcbiAgICAgICAgaWYgKHN0b25lTGV0dGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmVPYmplY3QgPSBzdG9uZUxldHRlcjtcclxuICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IHN0b25lTGV0dGVyO1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19QQVRIX09OX0RSQUcpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZXZlbERhdGE/LmxldmVsTWV0YT8ubGV2ZWxUeXBlID09PSAnV29yZCcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud29yZFB1enpsZUxvZ2ljLnNldFBpY2tVcExldHRlcihzdG9uZUxldHRlcj8udGV4dCwgc3RvbmVMZXR0ZXI/LmZvaWxTdG9uZUluZGV4KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGhhbmRsZU1vdXNlTW92ZSA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGxldCB0cmFpbFggPSBldmVudC5jbGllbnRYO1xyXG4gICAgICAgIGxldCB0cmFpbFkgPSBldmVudC5jbGllbnRZO1xyXG4gICAgICAgIGlmICh0aGlzLnBpY2tlZFN0b25lKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy53b3JkUHV6emxlTG9naWMuY2hlY2tJc1dvcmRQdXp6bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgLypUbyBEbzogTW92ZSBhbGwgbG9naWMgcmVsYXRpbmcgdG8gc3RvbmUgaGFuZGxpbmcgaW5jbHVkaW5nIHVwZGF0aW5nIGl0cyBjb29yZG5hdGVzIHRvIHN0b25lLWhhbmRsZXIudHNcclxuICAgICAgICAgICAgICAgICBOb3RlOiBXaWxsIGhhdmUgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBhbmQgdXNlIHRoZSBoYW5kbGVNb3ZpbmdTdG9uZUxldHRlciBpbiBzdG9uZS1oYW5kbGVyLnRzXHJcbiAgICAgICAgICAgICAgICAgV2lsbCBsZWF2ZSB0aGlzIGZvciBub3cgdG8gYXZvaWQgYWZmZWN0aW5nIExldHRlciBPbmx5IHB1enpsZXMgd2l0aCBXb3JkIHBsYXkgcHV6emxlcyBpbXBsZW1lbnRhdGlvbiBvZiBtdWx0aS1sZXR0ZXIgZmVhdHVyZS5cclxuICAgICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgICAgIGxldCByZWN0ID0gdGhpcy5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vbnN0ZXIuY2hhbmdlVG9EcmFnQW5pbWF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lLnggPSB4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZS55ID0geTtcclxuICAgICAgICAgICAgICAgIHRyYWlsWCA9IHg7XHJcbiAgICAgICAgICAgICAgICB0cmFpbFkgPSB5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3U3RvbmVDb29yZGluYXRlcyA9IHRoaXMuc3RvbmVIYW5kbGVyLmhhbmRsZU1vdmluZ1N0b25lTGV0dGVyKHRoaXMucGlja2VkU3RvbmUsIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IG5ld1N0b25lQ29vcmRpbmF0ZXM7XHJcbiAgICAgICAgICAgICAgICB0cmFpbFggPSBuZXdTdG9uZUNvb3JkaW5hdGVzLng7XHJcbiAgICAgICAgICAgICAgICB0cmFpbFkgPSBuZXdTdG9uZUNvb3JkaW5hdGVzLnk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy53b3JkUHV6emxlTG9naWMuY2hlY2tJc1dvcmRQdXp6bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1N0b25lTGV0dGVyID0gdGhpcy5zdG9uZUhhbmRsZXIuaGFuZGxlSG92ZXJpbmdUb0Fub3RoZXJTdG9uZSh0cmFpbFgsIHRyYWlsWSwgKGZvaWxTdG9uZVRleHQsIGZvaWxTdG9uZUluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLndvcmRQdXp6bGVMb2dpYy5oYW5kbGVDaGVja0hvdmVyZWRTdG9uZShmb2lsU3RvbmVUZXh0LCBmb2lsU3RvbmVJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1N0b25lTGV0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud29yZFB1enpsZUxvZ2ljLnNldFBpY2tVcExldHRlcihuZXdTdG9uZUxldHRlcj8udGV4dCwgbmV3U3RvbmVMZXR0ZXI/LmZvaWxTdG9uZUluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IHRoaXMuc3RvbmVIYW5kbGVyLnJlc2V0U3RvbmVQb3NpdGlvbih0aGlzLndpZHRoLCB0aGlzLnBpY2tlZFN0b25lLCB0aGlzLnBpY2tlZFN0b25lT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9BZnRlciByZXNldHRpbmcgaXRzIG9yaWdpbmFsIHBvc2l0aW9uIHJlcGxhY2UgaXQgd2l0aCB0aGUgbmV3IGxldHRlci5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5waWNrZWRTdG9uZU9iamVjdCA9IG5ld1N0b25lTGV0dGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBpY2tlZFN0b25lID0gbmV3U3RvbmVMZXR0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0RyYWdBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jbGlja1RyYWlsVG9nZ2xlICYmXHJcbiAgICAgICAgICAgIHRoaXMudHJhaWxQYXJ0aWNsZXM/LmFkZFRyYWlsUGFydGljbGVzT25Nb3ZlKHRyYWlsWCwgdHJhaWxZKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZUNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLm1vbnN0ZXIub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmlzR2FtZVN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWUgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLnR1dG9yaWFsLnNldFBsYXlNb25zdGVyQ2xpY2tBbmltYXRpb24oZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5wYXVzZUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZUdhbWVQbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLnByb21wdFRleHQub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQucGxheVNvdW5kKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEV2ZW50IHRvIGlkZW50aWZ5IHRvdWNoIG9uIHRoZSBjYW52YXNcclxuICAgIGhhbmRsZVRvdWNoU3RhcnQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBjb25zdCB0b3VjaCA9IGV2ZW50LnRvdWNoZXNbMF07XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZURvd24oeyBjbGllbnRYOiB0b3VjaC5jbGllbnRYLCBjbGllbnRZOiB0b3VjaC5jbGllbnRZIH0pO1xyXG4gICAgICAgIHRoaXMudHJhaWxQYXJ0aWNsZXM/LnJlc2V0UGFydGljbGVzKCk7XHJcbiAgICB9O1xyXG4gICAgaGFuZGxlVG91Y2hNb3ZlID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgY29uc3QgdG91Y2ggPSBldmVudC50b3VjaGVzWzBdO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlTW91c2VNb3ZlKHsgY2xpZW50WDogdG91Y2guY2xpZW50WCwgY2xpZW50WTogdG91Y2guY2xpZW50WSB9KTtcclxuICAgICAgICB0aGlzLnRyYWlsUGFydGljbGVzPy5hZGRUcmFpbFBhcnRpY2xlc09uTW92ZSh0b3VjaC5jbGllbnRYLCB0b3VjaC5jbGllbnRZKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVUb3VjaEVuZCA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRvdWNoID0gZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF07XHJcbiAgICAgICAgdGhpcy5oYW5kbGVNb3VzZVVwKHsgY2xpZW50WDogdG91Y2guY2xpZW50WCwgY2xpZW50WTogdG91Y2guY2xpZW50WSB9KTtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzRmVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy50cmFpbFBhcnRpY2xlcz8ucmVzZXRQYXJ0aWNsZXMoKTtcclxuICAgIH07XHJcbiAgICBkcmF3KGRlbHRhVGltZSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0dhbWVTdGFydGVkICYmICF0aGlzLmlzUGF1c2VCdXR0b25DbGlja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGltZSA9IHRoaXMudGltZSArIGRlbHRhVGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGltZSA+PSA1MDAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzR2FtZVN0YXJ0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMudHV0b3JpYWwuc2V0UGxheU1vbnN0ZXJDbGlja0FuaW1hdGlvbihmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZD8uZHJhdygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnBhdXNlQnV0dG9uLmRyYXcoKTtcclxuICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9ycy5kcmF3KCk7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRUZXh0LmRyYXcoZGVsdGFUaW1lKTtcclxuICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcuZHJhdygpO1xyXG4gICAgICAgIHRoaXMudHJhaWxQYXJ0aWNsZXM/LmRyYXcoKTtcclxuICAgICAgICBpZiAodGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiB0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVTdG9uZUxldHRlckRyYXdpbmcoZGVsdGFUaW1lKTtcclxuICAgICAgICAgICAgdGhpcy5wYXVzZVBvcHVwLmRyYXcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUGF1c2VCdXR0b25DbGlja2VkICYmICF0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jb3VudGVyID09IDBcclxuICAgICAgICAgICAgICAgID8gdGhpcy50dXRvcmlhbC5jbGlja09uTW9uc3RlclR1dG9yaWFsKGRlbHRhVGltZSlcclxuICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiAhdGhpcy5pc0dhbWVTdGFydGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGF1c2VQb3B1cC5kcmF3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc1BhdXNlQnV0dG9uQ2xpY2tlZCAmJiB0aGlzLmlzR2FtZVN0YXJ0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5oYW5kbGVTdG9uZUxldHRlckRyYXdpbmcoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBoYW5kbGVTdG9uZUxldHRlckRyYXdpbmcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgaWYgKHRoaXMud29yZFB1enpsZUxvZ2ljLmNoZWNrSXNXb3JkUHV6emxlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZUhhbmRsZXIuZHJhd1dvcmRQdXp6bGVMZXR0ZXJzKGRlbHRhVGltZSwgKGZvaWxTdG9uZUluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy53b3JkUHV6emxlTG9naWMudmFsaWRhdGVTaG91bGRIaWRlTGV0dGVyKGZvaWxTdG9uZUluZGV4KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lSGFuZGxlci5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoTU9VU0VVUCwgdGhpcy5oYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoTU9VU0VNT1ZFLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKE1PVVNFRE9XTiwgdGhpcy5oYW5kbGVNb3VzZURvd24sIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSFNUQVJULCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihUT1VDSE1PVkUsIHRoaXMuaGFuZGxlVG91Y2hNb3ZlLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoVE9VQ0hFTkQsIHRoaXMuaGFuZGxlVG91Y2hFbmQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihWSVNJQklMSVRZX0NIQU5HRSwgdGhpcy5oYW5kbGVWaXNpYmlsaXR5Q2hhbmdlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICByZW1vdmVFdmVudExpc3RlbmVycygpIHtcclxuICAgICAgICAvLyBSZW1vdmUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBkZWZpbmVkIGZ1bmN0aW9uc1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKENMSUNLLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgdGhpcy5oYW5kbGVNb3VzZVVwLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgdGhpcy5oYW5kbGVUb3VjaEVuZCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgbG9hZFB1enpsZSA9IChpc1RpbWVyRW5kZWQpID0+IHtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5zdG9uZXNDb3VudCA9IDE7XHJcbiAgICAgICAgY29uc3QgdGltZXJFbmRlZCA9IEJvb2xlYW4oaXNUaW1lckVuZGVkKTtcclxuICAgICAgICBpZiAodGltZXJFbmRlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ1B1enpsZUVuZEZpcmViYXNlRXZlbnQoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvdW50ZXIgKz0gMTsgLy9pbmNyZW1lbnQgUHV6emxlXHJcbiAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMuY291bnRlciA9PT0gdGhpcy5sZXZlbERhdGEucHV6emxlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvcnMuc2V0SW5kaWNhdG9ycyh0aGlzLmNvdW50ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ0xldmVsRW5kRmlyZWJhc2VFdmVudCgpO1xyXG4gICAgICAgICAgICBHYW1lU2NvcmUuc2V0R2FtZUxldmVsU2NvcmUodGhpcy5sZXZlbERhdGEsIHRoaXMuc2NvcmUpO1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFNjZW5lVG9FbmQoR2FtZVNjb3JlLmNhbGN1bGF0ZVN0YXJDb3VudCh0aGlzLnNjb3JlKSwgdGhpcy5tb25zdGVyUGhhc2VOdW1iZXIsIHRoaXMubGV2ZWxOdW1iZXIsIHRpbWVyRW5kZWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgbG9hZFB1enpsZUV2ZW50ID0gbmV3IEN1c3RvbUV2ZW50KExPQURQVVpaTEUsIHtcclxuICAgICAgICAgICAgICAgIGRldGFpbDoge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50ZXI6IHRoaXMuY291bnRlcixcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc3Bvc2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdE5ld1B1enpsZShsb2FkUHV6emxlRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB0aW1lckVuZGVkID8gMCA6IDQ1MDApO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaXNEaXNwb3NpbmcgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIHRoaXMubW9uc3Rlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcuZGlzcG9zZSgpO1xyXG4gICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3JzLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLnN0b25lSGFuZGxlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5wcm9tcHRUZXh0LmRpc3Bvc2UoKTtcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFZJU0lCSUxJVFlfQ0hBTkdFLCB0aGlzLmhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICB9O1xyXG4gICAgY2hlY2tTdG9uZURyb3BwZWQoc3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCA9IGZhbHNlKSB7XHJcbiAgICAgICAgdGhpcy5oYXNGZWQgPSB0cnVlOyAvL1RvIHByZXZlbnQgaWRsZSBhbmltYXRpb24gZnJvbSBmaXJpbmcgd2hlbiBzdG9uZSBpcyBkcm9wcGVkLlxyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b25lSGFuZGxlci5pc1N0b25lTGV0dGVyRHJvcENvcnJlY3Qoc3RvbmUsIGZlZWRCYWNrSW5kZXgsIGlzV29yZCk7XHJcbiAgICB9XHJcbiAgICBsZXR0ZXJQdXp6bGUoZHJvcHBlZFN0b25lKSB7XHJcbiAgICAgICAgY29uc3QgZmVlZEJhY2tJbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMuY2hlY2tTdG9uZURyb3BwZWQoZHJvcHBlZFN0b25lLCBmZWVkQmFja0luZGV4KTtcclxuICAgICAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ29ycmVjdFN0b25lRHJvcChmZWVkQmFja0luZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5oYW5kbGVTdG9uZURyb3BFbmQoaXNDb3JyZWN0KTtcclxuICAgIH1cclxuICAgIHdvcmRQdXp6bGUoZHJvcHBlZFN0b25lSW5zdGFuY2UpIHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BGZWVkYmFja0F1ZGlvKCk7XHJcbiAgICAgICAgZHJvcHBlZFN0b25lSW5zdGFuY2UueCA9IC05OTk7XHJcbiAgICAgICAgZHJvcHBlZFN0b25lSW5zdGFuY2UueSA9IC05OTk7XHJcbiAgICAgICAgY29uc3QgZmVlZEJhY2tJbmRleCA9IHRoaXMuZ2V0UmFuZG9tSW50KDAsIDEpO1xyXG4gICAgICAgIHRoaXMuaGFzRmVkID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLndvcmRQdXp6bGVMb2dpYy5zZXRHcm91cFRvRHJvcHBlZCgpO1xyXG4gICAgICAgIGNvbnN0IHsgZHJvcHBlZExldHRlcnMgfSA9IHRoaXMud29yZFB1enpsZUxvZ2ljLmdldFZhbHVlcygpO1xyXG4gICAgICAgIGNvbnN0IGlzQ29ycmVjdCA9IHRoaXMud29yZFB1enpsZUxvZ2ljLnZhbGlkYXRlRmVkTGV0dGVycygpO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLnByb2Nlc3NMZXR0ZXJEcm9wRmVlZGJhY2tBdWRpbyhmZWVkQmFja0luZGV4LCBpc0NvcnJlY3QsIHRydWUsIGRyb3BwZWRMZXR0ZXJzKTtcclxuICAgICAgICBpZiAoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLndvcmRQdXp6bGVMb2dpYy52YWxpZGF0ZVdvcmRQdXp6bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVDb3JyZWN0U3RvbmVEcm9wKGZlZWRCYWNrSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTdG9uZURyb3BFbmQoaXNDb3JyZWN0LCBcIldvcmRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRpbWVyVGlja2luZy5zdGFydFRpbWVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0VhdEFuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQuZHJvcHBlZFN0b25lSW5kZXgobGFuZyA9PSBcImFyYWJpY1wiXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMuc3RvbmVzQ291bnRcclxuICAgICAgICAgICAgICAgIDogZHJvcHBlZExldHRlcnMubGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5zdG9uZXNDb3VudCsrO1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0VG9JZGxlQW5pbWF0aW9uKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9uc3Rlci5jaGFuZ2VUb0lkbGVBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGFzRmVkID0gZmFsc2U7IC8vcmUtZW5hYmxlcyBpZGxlIHJlc2V0IHdoZW4gc3RvbmVzIGFyZSBub3QgZmVkLlxyXG4gICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlU3RvbmVEcm9wRW5kKGlzQ29ycmVjdCwgXCJXb3JkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lc0NvdW50ID0gMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXNldFRvSWRsZUFuaW1hdGlvbihjYWxsYmFjaywgZGVsYXkpIHtcclxuICAgICAgICBpZiAodGhpcy5yZXNldEFuaW1hdGlvbklEICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzZXRBbmltYXRpb25JRCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucmVzZXRBbmltYXRpb25JRCA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcclxuICAgIH1cclxuICAgIGhhbmRsZVN0b25lRHJvcEVuZChpc0NvcnJlY3QsIHB1enpsZVR5cGUgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5sb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50KGlzQ29ycmVjdCwgcHV6emxlVHlwZSk7XHJcbiAgICAgICAgdGhpcy5kaXNwYXRjaFN0b25lRHJvcEV2ZW50KGlzQ29ycmVjdCk7XHJcbiAgICAgICAgdGhpcy5sb2FkUHV6emxlKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDb3JyZWN0U3RvbmVEcm9wID0gKGZlZWRiYWNrSW5kZXgpID0+IHtcclxuICAgICAgICB0aGlzLnNjb3JlICs9IDEwMDtcclxuICAgICAgICB0aGlzLmZlZWRiYWNrVGV4dEVmZmVjdHMud3JhcFRleHQodGhpcy5nZXRSYW5kb21GZWVkQmFja1RleHQoZmVlZGJhY2tJbmRleCkpO1xyXG4gICAgfTtcclxuICAgIGRpc3BhdGNoU3RvbmVEcm9wRXZlbnQoaXNDb3JyZWN0KSB7XHJcbiAgICAgICAgY29uc3QgZHJvcFN0b25lRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQoU1RPTkVEUk9QLCB7XHJcbiAgICAgICAgICAgIGRldGFpbDogeyBpc0NvcnJlY3Q6IGlzQ29ycmVjdCB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoZHJvcFN0b25lRXZlbnQpO1xyXG4gICAgfVxyXG4gICAgaW5pdE5ld1B1enpsZShsb2FkUHV6emxlRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgICAgICAgdGhpcy5pc0dhbWVTdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aW1lID0gMDtcclxuICAgICAgICB0aGlzLndvcmRQdXp6bGVMb2dpYy51cGRhdGVQdXp6bGVMZXZlbChsb2FkUHV6emxlRXZlbnQ/LmRldGFpbD8uY291bnRlcik7XHJcbiAgICAgICAgdGhpcy5waWNrZWRTdG9uZSA9IG51bGw7XHJcbiAgICAgICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChsb2FkUHV6emxlRXZlbnQpO1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICB0aGlzLnN0YXJ0UHV6emxlVGltZSgpO1xyXG4gICAgICAgIHRoaXMuaGFzRmVkID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBsb2dQdXp6bGVFbmRGaXJlYmFzZUV2ZW50KGlzQ29ycmVjdCwgcHV6emxlVHlwZSkge1xyXG4gICAgICAgIGxldCBlbmRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCB7IGRyb3BwZWRMZXR0ZXJzIH0gPSB0aGlzLndvcmRQdXp6bGVMb2dpYy5nZXRWYWx1ZXMoKTtcclxuICAgICAgICBjb25zdCBwdXp6bGVDb21wbGV0ZWREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogdGhpcy5qc29uVmVyc2lvbk51bWJlcixcclxuICAgICAgICAgICAgc3VjY2Vzc19vcl9mYWlsdXJlOiBpc0NvcnJlY3QgPyBcInN1Y2Nlc3NcIiA6IFwiZmFpbHVyZVwiLFxyXG4gICAgICAgICAgICBsZXZlbF9udW1iZXI6IHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbE51bWJlcixcclxuICAgICAgICAgICAgcHV6emxlX251bWJlcjogdGhpcy5jb3VudGVyLFxyXG4gICAgICAgICAgICBpdGVtX3NlbGVjdGVkOiBwdXp6bGVUeXBlID09IFwiV29yZFwiXHJcbiAgICAgICAgICAgICAgICA/IGRyb3BwZWRMZXR0ZXJzID09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgICAgICBkcm9wcGVkTGV0dGVycyA9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA/IFwiVElNRU9VVFwiXHJcbiAgICAgICAgICAgICAgICAgICAgOiBkcm9wcGVkTGV0dGVyc1xyXG4gICAgICAgICAgICAgICAgOiB0aGlzLnBpY2tlZFN0b25lID09IG51bGwgfHwgdGhpcy5waWNrZWRTdG9uZSA9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICA/IFwiVElNRU9VVFwiXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnBpY2tlZFN0b25lPy50ZXh0LFxyXG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuc3RvbmVIYW5kbGVyLmdldENvcnJlY3RUYXJnZXRTdG9uZSgpLFxyXG4gICAgICAgICAgICBmb2lsczogdGhpcy5zdG9uZUhhbmRsZXIuZ2V0Rm9pbFN0b25lcygpLFxyXG4gICAgICAgICAgICByZXNwb25zZV90aW1lOiAoZW5kVGltZSAtIHRoaXMucHV6emxlVGltZSkgLyAxMDAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRQdXp6bGVDb21wbGV0ZWRFdmVudChwdXp6bGVDb21wbGV0ZWREYXRhKTtcclxuICAgIH1cclxuICAgIGxvZ0xldmVsRW5kRmlyZWJhc2VFdmVudCgpIHtcclxuICAgICAgICBsZXQgZW5kVGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgbGV2ZWxDb21wbGV0ZWREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogdGhpcy5qc29uVmVyc2lvbk51bWJlcixcclxuICAgICAgICAgICAgc3VjY2Vzc19vcl9mYWlsdXJlOiBHYW1lU2NvcmUuY2FsY3VsYXRlU3RhckNvdW50KHRoaXMuc2NvcmUpID49IDMgPyBcInN1Y2Nlc3NcIiA6IFwiZmFpbHVyZVwiLFxyXG4gICAgICAgICAgICBudW1iZXJfb2Zfc3VjY2Vzc2Z1bF9wdXp6bGVzOiB0aGlzLnNjb3JlIC8gMTAwLFxyXG4gICAgICAgICAgICBsZXZlbF9udW1iZXI6IHRoaXMubGV2ZWxEYXRhLmxldmVsTWV0YS5sZXZlbE51bWJlcixcclxuICAgICAgICAgICAgZHVyYXRpb246IChlbmRUaW1lIC0gdGhpcy5zdGFydFRpbWUpIC8gMTAwMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kTGV2ZWxDb21wbGV0ZWRFdmVudChsZXZlbENvbXBsZXRlZERhdGEpO1xyXG4gICAgfVxyXG4gICAgc3RhcnRHYW1lVGltZSgpIHtcclxuICAgICAgICB0aGlzLnN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICB9XHJcbiAgICBzdGFydFB1enpsZVRpbWUoKSB7XHJcbiAgICAgICAgdGhpcy5wdXp6bGVUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIH1cclxuICAgIHBhdXNlR2FtZVBsYXkgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xyXG4gICAgICAgIHRoaXMuaXNQYXVzZUJ1dHRvbkNsaWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc3RvbmVIYW5kbGVyLnNldEdhbWVQYXVzZSh0cnVlKTtcclxuICAgICAgICB0aGlzLnBhdXNlUG9wdXAuYWRkTGlzdG5lcigpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5wYXVzZUdhbWVQbGF5KCk7XHJcbiAgICB9O1xyXG59XHJcbiIsImltcG9ydCB7IERlYnVnZ2VyLCBsYW5nLCBwc2V1ZG9JZCwgbG9hZEltYWdlcywgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBnZXREYXRhLCBHYW1lU2NvcmUgfSBmcm9tIFwiQGRhdGFcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCYWNrZ3JvdW5kLCBsZXZlbFNlbGVjdEJnRHJhd2luZywgY3JlYXRlTGV2ZWxPYmplY3QsIGdldGRlZmF1bHRDbG91ZEJ0bnNQb3MsIGxvYWRMZXZlbEltYWdlcyB9IGZyb20gXCJAY29tcG9zaXRpb25zXCI7XHJcbmltcG9ydCB7IFByZXZpb3VzUGxheWVkTGV2ZWwsIExFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5ELCBORVhUX0JUTl9JTUcsIEJBQ0tfQlROX0lNRywgQVVESU9fSU5UUk8sIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuaW1wb3J0IHsgTGV2ZWxCbG9vbkJ1dHRvbiB9IGZyb20gJ0BidXR0b25zJztcclxuZXhwb3J0IGNsYXNzIExldmVsU2VsZWN0aW9uU2NyZWVuIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIGNhbnZhc0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgbGV2ZWxzO1xyXG4gICAgZ2FtZUxldmVsRGF0YTtcclxuICAgIGNhbGxCYWNrO1xyXG4gICAgYXVkaW9QbGF5ZXI7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIHhEb3duO1xyXG4gICAgeURvd247XHJcbiAgICBwcmV2aW91c1BsYXllZExldmVsTnVtYmVyO1xyXG4gICAgbGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPSAwO1xyXG4gICAgbGV2ZWxOdW1iZXI7XHJcbiAgICBsZXZlbHNTZWN0aW9uQ291bnQ7XHJcbiAgICB1bmxvY2tMZXZlbEluZGV4O1xyXG4gICAgbWFqVmVyc2lvbjtcclxuICAgIG1pblZlcnNpb247XHJcbiAgICBmaXJlYmFzZUludGVncmF0aW9uO1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIHJpZ2h0QnRuU2l6ZTtcclxuICAgIHJpZ2h0QnRuWDtcclxuICAgIHJpZ2h0QnRuWTtcclxuICAgIGxlZnRCdG5TaXplO1xyXG4gICAgbGVmdEJ0blg7XHJcbiAgICBsZWZ0QnRuWTtcclxuICAgIGxldmVsQnV0dG9ucztcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgZGF0YSwgY2FsbEJhY2spIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIHRoaXMud2lkdGggPSBjYW52YXMud2lkdGg7XHJcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBjYW52YXMuaGVpZ2h0O1xyXG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICB0aGlzLmNhbGxCYWNrID0gY2FsbEJhY2s7XHJcbiAgICAgICAgdGhpcy5sZXZlbHNTZWN0aW9uQ291bnQgPVxyXG4gICAgICAgICAgICBzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwID4gTWF0aC5mbG9vcihzZWxmLmRhdGEubGV2ZWxzLmxlbmd0aCAvIDEwKVxyXG4gICAgICAgICAgICAgICAgPyBNYXRoLmZsb29yKHNlbGYuZGF0YS5sZXZlbHMubGVuZ3RoIC8gMTApICsgMVxyXG4gICAgICAgICAgICAgICAgOiBNYXRoLmZsb29yKHNlbGYuZGF0YS5sZXZlbHMubGVuZ3RoIC8gMTApO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzID0gW107XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uID0gbmV3IEZpcmViYXNlSW50ZWdyYXRpb24oKTtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB0aGlzLmNhbnZhc0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMuY3JlYXRlTGV2ZWxCdXR0b25zKCk7XHJcbiAgICAgICAgdGhpcy5nYW1lTGV2ZWxEYXRhID0gR2FtZVNjb3JlLmdldEFsbEdhbWVMZXZlbEluZm8oKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy51bmxvY2tMZXZlbEluZGV4ID0gLTE7XHJcbiAgICAgICAgdGhpcy5wcmV2aW91c1BsYXllZExldmVsTnVtYmVyID1cclxuICAgICAgICAgICAgcGFyc2VJbnQoRGVidWdnZXIuRGVidWdNb2RlXHJcbiAgICAgICAgICAgICAgICA/IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFByZXZpb3VzUGxheWVkTGV2ZWwgKyBsYW5nICsgXCJEZWJ1Z1wiKVxyXG4gICAgICAgICAgICAgICAgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShQcmV2aW91c1BsYXllZExldmVsICsgbGFuZykpIHwgMDtcclxuICAgICAgICBpZiAodGhpcy5wcmV2aW91c1BsYXllZExldmVsTnVtYmVyICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9XHJcbiAgICAgICAgICAgICAgICAxMCAqIE1hdGguZmxvb3IodGhpcy5wcmV2aW91c1BsYXllZExldmVsTnVtYmVyIC8gMTApO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldHVwQmcoKTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgbmV4dGJ0bjogTkVYVF9CVE5fSU1HLFxyXG4gICAgICAgICAgICBiYWNrYnRuOiBCQUNLX0JUTl9JTUcsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSBcInZpc2libGVcIikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oQVVESU9fSU5UUk8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcnMoKTtcclxuICAgICAgICB0aGlzLnJpZ2h0QnRuU2l6ZSA9IDEwO1xyXG4gICAgICAgIHRoaXMucmlnaHRCdG5YID0gMC43MztcclxuICAgICAgICB0aGlzLnJpZ2h0QnRuWSA9IDEuMztcclxuICAgICAgICB0aGlzLmxlZnRCdG5TaXplID0gMTA7XHJcbiAgICAgICAgdGhpcy5sZWZ0QnRuWCA9IDEwO1xyXG4gICAgICAgIHRoaXMubGVmdEJ0blkgPSAxLjM7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gZGF0YS5tYWp2ZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IGRhdGEubWludmVyc2lvbjtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gYXdhaXQgY3JlYXRlQmFja2dyb3VuZCh0aGlzLmNvbnRleHQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7IExFVkVMX1NFTEVDVElPTl9CQUNLR1JPVU5EIH0sIGxldmVsU2VsZWN0QmdEcmF3aW5nKTtcclxuICAgIH07XHJcbiAgICBhc3luYyBjcmVhdGVMZXZlbEJ1dHRvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgaW1hZ2VzID0gYXdhaXQgbG9hZExldmVsSW1hZ2VzKCk7XHJcbiAgICAgICAgY29uc3QgcG9zcyA9IGdldGRlZmF1bHRDbG91ZEJ0bnNQb3ModGhpcy5jYW52YXMpO1xyXG4gICAgICAgIGNvbnN0IGxldmVsc0FyciA9IHBvc3NbMF0ubWFwKChjb29yZGluYXRlcywgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxldmVsT2JqZWN0KGNvb3JkaW5hdGVzWzBdLCBjb29yZGluYXRlc1sxXSwgaW5kZXggKyAxLCBpbWFnZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubGV2ZWxzID0gYXdhaXQgUHJvbWlzZS5hbGwobGV2ZWxzQXJyKTtcclxuICAgICAgICB0aGlzLmxldmVsQnV0dG9ucyA9IHRoaXMubGV2ZWxzLm1hcChidG5Db29yZGluYXRlcyA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTGV2ZWxCbG9vbkJ1dHRvbih0aGlzLmNhbnZhcywgdGhpcy5jb250ZXh0LCB7IC4uLmJ0bkNvb3JkaW5hdGVzIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgYWRkTGlzdGVuZXJzKCkge1xyXG4gICAgICAgIC8vIG5leHQgcHJldiBidXR0b24gbGlzdG5lciAjMVxyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLmhhbmRsZU1vdXNlRG93biwgZmFsc2UpO1xyXG4gICAgICAgIC8vIHdoZW4gYXBwIGdvZXMgYmFja2dyb3VuZCAjMlxyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJ2aXNpYmlsaXR5Y2hhbmdlXCIsIHRoaXMucGF1c2VQbGF5QXVkaW9zLCBmYWxzZSk7XHJcbiAgICAgICAgLy8vIHN3aXBlIGxpc3RlbmVyICMzXHJcbiAgICAgICAgZG9jdW1lbnRcclxuICAgICAgICAgICAgLmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpXHJcbiAgICAgICAgICAgIC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCB0aGlzLmhhbmRsZVRvdWNoU3RhcnQsIGZhbHNlKTtcclxuICAgICAgICAvLyAjNFxyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB0aGlzLmhhbmRsZVRvdWNoTW92ZSwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgcGF1c2VQbGF5QXVkaW9zID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09IFwidmlzaWJsZVwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX0lOVFJPKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBnZXRUb3VjaGVzKGV2dCkge1xyXG4gICAgICAgIHJldHVybiAoZXZ0LnRvdWNoZXMgfHwgLy8gYnJvd3NlciBBUElcclxuICAgICAgICAgICAgZXZ0Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyk7IC8vIGpRdWVyeVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVG91Y2hTdGFydCA9IChldnQpID0+IHtcclxuICAgICAgICBjb25zdCBmaXJzdFRvdWNoID0gdGhpcy5nZXRUb3VjaGVzKGV2dClbMF07XHJcbiAgICAgICAgdGhpcy54RG93biA9IGZpcnN0VG91Y2guY2xpZW50WDtcclxuICAgICAgICB0aGlzLnlEb3duID0gZmlyc3RUb3VjaC5jbGllbnRZO1xyXG4gICAgfTtcclxuICAgIGhhbmRsZVRvdWNoTW92ZSA9IChldnQpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMueERvd24gfHwgIXRoaXMueURvd24pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgeFVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WDtcclxuICAgICAgICBsZXQgeVVwID0gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WTtcclxuICAgICAgICBsZXQgeERpZmYgPSB0aGlzLnhEb3duIC0geFVwO1xyXG4gICAgICAgIGxldCB5RGlmZiA9IHRoaXMueURvd24gLSB5VXA7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHhEaWZmKSA+IE1hdGguYWJzKHlEaWZmKSkge1xyXG4gICAgICAgICAgICAvKm1vc3Qgc2lnbmlmaWNhbnQqL1xyXG4gICAgICAgICAgICBpZiAoeERpZmYgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSB0aGlzLmxldmVsc1NlY3Rpb25Db3VudCAqIDEwIC0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCArIDEwO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8qIHJpZ2h0IHN3aXBlICovXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCA9IHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggLSAxMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZG93bkJ1dHRvbih0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4KTtcclxuICAgICAgICAgICAgICAgIC8qIGxlZnQgc3dpcGUgKi9cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvKiByZXNldCB2YWx1ZXMgKi9cclxuICAgICAgICB0aGlzLnhEb3duID0gbnVsbDtcclxuICAgICAgICB0aGlzLnlEb3duID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGxldCByZWN0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBjb25zdCBpc1dpdGhpbkJ1dHRvbkFyZWEgPSAoYnRuWCwgYnRuWSA9IDEuMykgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKHggPj0gYnRuWCAmJlxyXG4gICAgICAgICAgICAgICAgeCA8IGJ0blggKyB0aGlzLmNhbnZhcy5oZWlnaHQgLyAxMCAmJlxyXG4gICAgICAgICAgICAgICAgeSA+IHRoaXMuY2FudmFzLmhlaWdodCAvIGJ0blkgJiZcclxuICAgICAgICAgICAgICAgIHkgPCB0aGlzLmNhbnZhcy5oZWlnaHQgLyBidG5ZICsgdGhpcy5jYW52YXMuaGVpZ2h0IC8gMTApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgaXNSaWdodCA9IGlzV2l0aGluQnV0dG9uQXJlYSh0aGlzLmNhbnZhcy53aWR0aCAqIDAuNyk7XHJcbiAgICAgICAgY29uc3QgaXNMZWZ0ID0gaXNXaXRoaW5CdXR0b25BcmVhKHRoaXMuY2FudmFzLndpZHRoIC8gMTApO1xyXG4gICAgICAgIGlmIChpc0xlZnQgfHwgaXNSaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VJbmRleCA9IHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXg7XHJcbiAgICAgICAgICAgIGlmIChpc1JpZ2h0ICYmIHBhZ2VJbmRleCAhPSB0aGlzLmxldmVsc1NlY3Rpb25Db3VudCAqIDEwIC0gMTApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGV2ZWxTZWxlY3Rpb25QYWdlSW5kZXggPSBwYWdlSW5kZXggKyAxMDtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRCdG5TaXplID0gMTAuNTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRCdG5ZID0gMS4yOTk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoaXNMZWZ0ICYmIHBhZ2VJbmRleCAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4ID0gcGFnZUluZGV4IC0gMTA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRCdG5TaXplID0gMTAuMztcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdEJ0blkgPSAxLjI5OTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRvd25CdXR0b24odGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAobGV0IGJ0biBvZiB0aGlzLmxldmVsQnV0dG9ucykge1xyXG4gICAgICAgICAgICBidG4ub25DbGljayh4LCB5LCB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMSwgdGhpcy51bmxvY2tMZXZlbEluZGV4ICsgMSwgKGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxldmVsTnVtYmVyID0gaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRHYW1lKHRoaXMubGV2ZWxOdW1iZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZHJhd0xldmVsKGxldmVsQnRuLCBnYW1lTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY3VycmVudExldmVsSW5kZXggPSBsZXZlbEJ0bi5sZXZlbERhdGEuaW5kZXggKyB0aGlzLmxldmVsU2VsZWN0aW9uUGFnZUluZGV4O1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRMZXZlbCA9IHRoaXMucHJldmlvdXNQbGF5ZWRMZXZlbE51bWJlciArIDE7XHJcbiAgICAgICAgaWYgKGN1cnJlbnRMZXZlbEluZGV4ID09PSBjdXJyZW50TGV2ZWwpIHtcclxuICAgICAgICAgICAgbGV2ZWxCdG4uYXBwbHlQdWxzZUVmZmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY3VycmVudExldmVsSW5kZXggPD0gdGhpcy5kYXRhLmxldmVscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1VubG9ja2VkTGV2ZWwoZ2FtZUxldmVsRGF0YSk7XHJcbiAgICAgICAgICAgIGxldmVsQnRuLmRyYXcodGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCwgdGhpcy51bmxvY2tMZXZlbEluZGV4LCBnYW1lTGV2ZWxEYXRhLCB0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIERlYnVnZ2VyLkRlYnVnTW9kZVxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLmNvbnRleHQuZmlsbFRleHQodGhpcy5kYXRhLmxldmVsc1tjdXJyZW50TGV2ZWxJbmRleCAtIDFdXHJcbiAgICAgICAgICAgICAgICAgICAgLmxldmVsTWV0YS5sZXZlbFR5cGUsIGxldmVsQnRuLmxldmVsRGF0YS54ICsgbGV2ZWxCdG4uYnRuU2l6ZSAvIDMuNSwgbGV2ZWxCdG4ubGV2ZWxEYXRhLnkgKyBsZXZlbEJ0bi5idG5TaXplIC8gMS4zKVxyXG4gICAgICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGRyYXcoKSB7XHJcbiAgICAgICAgZm9yIChsZXQgbGV2ZWxCdG4gb2YgdGhpcy5sZXZlbEJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmF3TGV2ZWwobGV2ZWxCdG4sIHRoaXMuZ2FtZUxldmVsRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZG93bkJ1dHRvbihsZXZlbCkge1xyXG4gICAgICAgIGlmIChsZXZlbCAhPSB0aGlzLmxldmVsc1NlY3Rpb25Db3VudCAqIDEwIC0gMTApIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5uZXh0YnRuLCB0aGlzLmNhbnZhcy53aWR0aCAqIHRoaXMucmlnaHRCdG5YLCB0aGlzLmNhbnZhcy5oZWlnaHQgLyB0aGlzLnJpZ2h0QnRuWSwgdGhpcy5jYW52YXMuaGVpZ2h0IC8gdGhpcy5yaWdodEJ0blNpemUsIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMucmlnaHRCdG5TaXplKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHRCdG5TaXplID4gMTApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHRCdG5TaXplID0gdGhpcy5yaWdodEJ0blNpemUgLSAwLjAyNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0QnRuWSA9IHRoaXMucmlnaHRCdG5TaXplID4gMTAgPyAxLjI5OSA6IDEuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRCdG5TaXplID0gMTA7XHJcbiAgICAgICAgICAgIHRoaXMucmlnaHRCdG5YID0gMC43O1xyXG4gICAgICAgICAgICB0aGlzLnJpZ2h0QnRuWSA9IDEuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxldmVsICE9IDApIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5iYWNrYnRuLCB0aGlzLmNhbnZhcy53aWR0aCAvIHRoaXMubGVmdEJ0blgsIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMubGVmdEJ0blksIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMubGVmdEJ0blNpemUsIHRoaXMuY2FudmFzLmhlaWdodCAvIHRoaXMubGVmdEJ0blNpemUpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5sZWZ0QnRuU2l6ZSA+IDEwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxlZnRCdG5TaXplID0gdGhpcy5sZWZ0QnRuU2l6ZSAtIDAuMDI1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGVmdEJ0blkgPSB0aGlzLmxlZnRCdG5TaXplID4gMTAgPyAxLjI5OSA6IDEuMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubGVmdEJ0blNpemUgPSAxMDtcclxuICAgICAgICAgICAgdGhpcy5sZWZ0QnRuWCA9IDEwO1xyXG4gICAgICAgICAgICB0aGlzLmxlZnRCdG5ZID0gMS4zO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNoZWNrVW5sb2NrZWRMZXZlbChnYW1lTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgaWYgKGdhbWVMZXZlbERhdGEubGVuZ3RoICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBnYW1lIG9mIGdhbWVMZXZlbERhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnVubG9ja0xldmVsSW5kZXggPCBwYXJzZUludChnYW1lLmxldmVsTnVtYmVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGdhbWUuc3RhckNvdW50ID49IDJcclxuICAgICAgICAgICAgICAgICAgICAgICAgPyAodGhpcy51bmxvY2tMZXZlbEluZGV4ID0gcGFyc2VJbnQoZ2FtZS5sZXZlbE51bWJlcikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHN0YXJ0R2FtZShsZXZlbF9udW1iZXIpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICBjb25zdCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IHtcclxuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGF0YS5sZXZlbHNbbGV2ZWxfbnVtYmVyXSxcclxuICAgICAgICAgICAgICAgIGxldmVsTnVtYmVyOiBsZXZlbF9udW1iZXIsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNlbGVjdGVkTGV2ZWxOdW1iZXI6IGxldmVsX251bWJlcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubG9nU2VsZWN0ZWRMZXZlbEV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5jYWxsQmFjayhnYW1lUGxheURhdGEsIFwiTGV2ZWxTZWxlY3Rpb25cIik7XHJcbiAgICB9XHJcbiAgICBsb2dTZWxlY3RlZExldmVsRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRMZXZlbHREYXRhID0ge1xyXG4gICAgICAgICAgICBjcl91c2VyX2lkOiBwc2V1ZG9JZCxcclxuICAgICAgICAgICAgZnRtX2xhbmd1YWdlOiBsYW5nLFxyXG4gICAgICAgICAgICBwcm9maWxlX251bWJlcjogMCxcclxuICAgICAgICAgICAgdmVyc2lvbl9udW1iZXI6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpLmlubmVySFRNTCxcclxuICAgICAgICAgICAganNvbl92ZXJzaW9uX251bWJlcjogISF0aGlzLm1halZlcnNpb24gJiYgISF0aGlzLm1pblZlcnNpb25cclxuICAgICAgICAgICAgICAgID8gdGhpcy5tYWpWZXJzaW9uLnRvU3RyaW5nKCkgKyBcIi5cIiArIHRoaXMubWluVmVyc2lvbi50b1N0cmluZygpXHJcbiAgICAgICAgICAgICAgICA6IFwiXCIsXHJcbiAgICAgICAgICAgIGxldmVsX3NlbGVjdGVkOiB0aGlzLmxldmVsTnVtYmVyLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maXJlYmFzZUludGVncmF0aW9uLnNlbmRTZWxlY3RlZExldmVsRXZlbnQoc2VsZWN0ZWRMZXZlbHREYXRhKTtcclxuICAgIH1cclxuICAgIGRyYXdMZXZlbFNlbGVjdGlvbigpIHtcclxuICAgICAgICBpZiAodGhpcy5pbWFnZXNMb2FkZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLmRvd25CdXR0b24odGhpcy5sZXZlbFNlbGVjdGlvblBhZ2VJbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnN0b3BBbGxBdWRpb3MoKTtcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgdGhpcy5oYW5kbGVNb3VzZURvd24sIGZhbHNlKTtcclxuICAgICAgICAvLyB3aGVuIGFwcCBnb2VzIGJhY2tncm91bmQgIzJcclxuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCB0aGlzLnBhdXNlUGxheUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgICAgIC8vLyBzd2lwZSBsaXN0ZW5lciAjM1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgdGhpcy5oYW5kbGVUb3VjaFN0YXJ0LCBmYWxzZSk7XHJcbiAgICAgICAgLy8gIzRcclxuICAgICAgICBkb2N1bWVudFxyXG4gICAgICAgICAgICAuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIilcclxuICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdGhpcy5oYW5kbGVUb3VjaE1vdmUsIGZhbHNlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzLCBDTElDSywgaXNEb2N1bWVudFZpc2libGUgfSBmcm9tIFwiQGNvbW1vblwiO1xyXG5pbXBvcnQgeyBBdWRpb1BsYXllciwgTW9uc3RlciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBDbG9zZUJ1dHRvbiwgTmV4dEJ1dHRvbiwgUmV0cnlCdXR0b24gfSBmcm9tIFwiQGJ1dHRvbnNcIjtcclxuaW1wb3J0IHsgQkFDS0dST1VORF9BU1NFVF9MSVNULCBjcmVhdGVCYWNrZ3JvdW5kLCBsb2FkRHluYW1pY0JnQXNzZXRzLCB9IGZyb20gXCJAY29tcG9zaXRpb25zXCI7XHJcbmltcG9ydCB7IEFVRElPX0lOVFJPLCBBVURJT19MRVZFTF9MT1NFLCBBVURJT19MRVZFTF9XSU4sIERFRkFVTFRfQkFDS0dST1VORF8xLCBQSU5fU1RBUl8xLCBQSU5fU1RBUl8yLCBQSU5fU1RBUl8zLCBXSU5fQkcsIH0gZnJvbSBcIkBjb25zdGFudHNcIjtcclxuZXhwb3J0IGNsYXNzIExldmVsRW5kU2NlbmUge1xyXG4gICAgY2FudmFzO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgd2lkdGg7XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQ7XHJcbiAgICBpZDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBtb25zdGVyO1xyXG4gICAgY2xvc2VCdXR0b247XHJcbiAgICByZXRyeUJ1dHRvbjtcclxuICAgIG5leHRCdXR0b247XHJcbiAgICBzdGFyQ291bnQ7XHJcbiAgICBjdXJyZW50TGV2ZWw7XHJcbiAgICBzd2l0Y2hUb0dhbWVwbGF5Q0I7XHJcbiAgICBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0I7XHJcbiAgICBkYXRhO1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgdGltZW91dHM7XHJcbiAgICBzdGFyRHJhd25Db3VudDtcclxuICAgIGlzTGFzdExldmVsO1xyXG4gICAgY29uc3RydWN0b3IoY2FudmFzLCBoZWlnaHQsIHdpZHRoLCBjb250ZXh0LCBzdGFyQ291bnQsIGN1cnJlbnRMZXZlbCwgc3dpdGNoVG9HYW1lcGxheUNCLCBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IsIGRhdGEsIG1vbnN0ZXJQaGFzZU51bWJlcikge1xyXG4gICAgICAgIHRoaXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCBtb25zdGVyUGhhc2VOdW1iZXIsIHRoaXMuc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbik7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IgPSBzd2l0Y2hUb0dhbWVwbGF5Q0I7XHJcbiAgICAgICAgdGhpcy5zd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IgPSBzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0I7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLnN0YXJEcmF3bkNvdW50ID0gMDtcclxuICAgICAgICB0aGlzLmNsb3NlQnV0dG9uID0gbmV3IENsb3NlQnV0dG9uKGNvbnRleHQsIGNhbnZhcywgdGhpcy53aWR0aCAqIDAuMiAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMucmV0cnlCdXR0b24gPSBuZXcgUmV0cnlCdXR0b24odGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgdGhpcy53aWR0aCAqIDAuNSAtICh0aGlzLndpZHRoICogMC4xOSkgLyAyLCB0aGlzLmhlaWdodCAvIDEuMjUpO1xyXG4gICAgICAgIHRoaXMubmV4dEJ1dHRvbiA9IG5ldyBOZXh0QnV0dG9uKHRoaXMuY29udGV4dCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHRoaXMud2lkdGggKiAwLjggLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgLyAxLjI1KTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zdGFyQ291bnQgPSBzdGFyQ291bnQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50TGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmRJbWc6IFdJTl9CRyxcclxuICAgICAgICAgICAgc3RhcjFJbWc6IFBJTl9TVEFSXzEsXHJcbiAgICAgICAgICAgIHN0YXIySW1nOiBQSU5fU1RBUl8yLFxyXG4gICAgICAgICAgICBzdGFyM0ltZzogUElOX1NUQVJfMyxcclxuICAgICAgICAgICAgd2luQmFja2dyb3VuZEltZzogREVGQVVMVF9CQUNLR1JPVU5EXzEsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJBbmltYXRpb24oKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cEJnKCk7XHJcbiAgICAgICAgdGhpcy5pc0xhc3RMZXZlbCA9XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudExldmVsICE9PVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmxldmVsc1t0aGlzLmRhdGEubGV2ZWxzLmxlbmd0aCAtIDFdLmxldmVsTWV0YS5sZXZlbE51bWJlciAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyQ291bnQgPj0gMjtcclxuICAgIH1cclxuICAgIHNldHVwQmcgPSBhc3luYyAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgeyBCR19HUk9VUF9JTUdTLCBkcmF3IH0gPSBsb2FkRHluYW1pY0JnQXNzZXRzKHRoaXMuY3VycmVudExldmVsLCBCQUNLR1JPVU5EX0FTU0VUX0xJU1QpO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgQkdfR1JPVVBfSU1HUywgZHJhdyk7XHJcbiAgICB9O1xyXG4gICAgc3dpdGNoVG9SZWFjdGlvbkFuaW1hdGlvbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5zdGFyQ291bnQgPD0gMSkge1xyXG4gICAgICAgICAgICBpZiAoaXNEb2N1bWVudFZpc2libGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QXVkaW8oQVVESU9fTEVWRUxfTE9TRSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvU3BpdEFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGlzRG9jdW1lbnRWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUF1ZGlvKEFVRElPX0xFVkVMX1dJTik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19JTlRSTyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLmNoYW5nZVRvRWF0QW5pbWF0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGRyYXcoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmFja2dyb3VuZEltZywgMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKyB0aGlzLmhlaWdodCAqIDAuMTIpO1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdTdGFycygpO1xyXG4gICAgICAgICAgICB0aGlzLm1vbnN0ZXIudXBkYXRlKGRlbHRhVGltZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24uZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnJldHJ5QnV0dG9uLmRyYXcoKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNMYXN0TGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV4dEJ1dHRvbi5kcmF3KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzdGFyQW5pbWF0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbnMgPSBbXHJcbiAgICAgICAgICAgIHsgZGVsYXk6IDUwMCwgY291bnQ6IDEgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTAwMCwgY291bnQ6IDIgfSxcclxuICAgICAgICAgICAgeyBkZWxheTogMTUwMCwgY291bnQ6IDMgfSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMudGltZW91dHMgPSBhbmltYXRpb25zLm1hcCgoYW5pbWF0aW9uKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPSBhbmltYXRpb24uY291bnQ7XHJcbiAgICAgICAgICAgIH0sIGFuaW1hdGlvbi5kZWxheSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBkcmF3U3RhcnMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDEgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjFJbWcsIHRoaXMud2lkdGggKiAwLjIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJDb3VudCA8PSAzICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJDb3VudCA+IDEgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckRyYXduQ291bnQgPD0gMyAmJlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyRHJhd25Db3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuc3RhcjJJbWcsIHRoaXMud2lkdGggKiAwLjUgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoICogMC4xOSwgdGhpcy53aWR0aCAqIDAuMTkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhckNvdW50ID49IDMgJiYgdGhpcy5zdGFyRHJhd25Db3VudCA+PSAzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5zdGFyM0ltZywgdGhpcy53aWR0aCAqIDAuODIgLSAodGhpcy53aWR0aCAqIDAuMTkpIC8gMiwgdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGggKiAwLjE5LCB0aGlzLndpZHRoICogMC4xOSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhZGRFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAuYWRkRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlTW91c2VDbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3NlQnV0dG9uLm9uQ2xpY2soeCwgeSkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpb1BsYXllci5wbGF5QnV0dG9uQ2xpY2tTb3VuZCgpO1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFRvTGV2ZWxTZWxlY3Rpb25DQihcIkxldmVsRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5yZXRyeUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgbGV0IGdhbWVQbGF5RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZXZlbERhdGE6IHtcclxuICAgICAgICAgICAgICAgICAgICAuLi50aGlzLmRhdGEubGV2ZWxzW3RoaXMuY3VycmVudExldmVsXSxcclxuICAgICAgICAgICAgICAgICAgICBsZXZlbE51bWJlcjogdGhpcy5jdXJyZW50TGV2ZWwsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRMZXZlbE51bWJlcjogdGhpcy5jdXJyZW50TGV2ZWwsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vIHBhc3Mgc2FtZSBkYXRhIGFzIGxldmVsIGlzIHNhbWVcclxuICAgICAgICAgICAgdGhpcy5zd2l0Y2hUb0dhbWVwbGF5Q0IoZ2FtZVBsYXlEYXRhLCBcIkxldmVsRW5kXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc0xhc3RMZXZlbCAmJlxyXG4gICAgICAgICAgICB0aGlzLm5leHRCdXR0b24ub25DbGljayh4LCB5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlCdXR0b25DbGlja1NvdW5kKCk7XHJcbiAgICAgICAgICAgIGxldCBuZXh0ID0gTnVtYmVyKHRoaXMuY3VycmVudExldmVsKSArIDE7XHJcbiAgICAgICAgICAgIGxldCBnYW1lUGxheURhdGEgPSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWxEYXRhOiB7IC4uLnRoaXMuZGF0YS5sZXZlbHNbbmV4dF0sIGxldmVsTnVtYmVyOiBuZXh0IH0sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZExldmVsTnVtYmVyOiBuZXh0LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnN3aXRjaFRvR2FtZXBsYXlDQihnYW1lUGxheURhdGEsIFwiTGV2ZWxFbmRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHBhdXNlQXVkaW9zID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChpc0RvY3VtZW50VmlzaWJsZSgpKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJDb3VudCA+PSAyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvUGxheWVyLnBsYXlBdWRpbyhBVURJT19JTlRSTyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIuc3RvcEFsbEF1ZGlvcygpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaXNwb3NlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubW9uc3Rlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0cy5mb3JFYWNoKCh0aW1lb3V0KSA9PiBjbGVhclRpbWVvdXQodGltZW91dCkpO1xyXG4gICAgICAgIGRvY3VtZW50XHJcbiAgICAgICAgICAgIC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKVxyXG4gICAgICAgICAgICAucmVtb3ZlRXZlbnRMaXN0ZW5lcihDTElDSywgdGhpcy5oYW5kbGVNb3VzZUNsaWNrLCBmYWxzZSk7XHJcbiAgICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInZpc2liaWxpdHljaGFuZ2VcIiwgdGhpcy5wYXVzZUF1ZGlvcywgZmFsc2UpO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBsb2FkSW1hZ2VzIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgQ0xPVURfNiwgQ0xPVURfNywgQ0xPVURfOCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBMb2FkaW5nU2NlbmUge1xyXG4gICAgY2FudmFzO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgd2lkdGg7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkO1xyXG4gICAgY2xvdWRYUG9zaXRpb24gPSAtNTAwO1xyXG4gICAgc3RvcENsb3VkTW92aW5nID0gZmFsc2U7XHJcbiAgICBjbG91ZE1vdmluZ1RpbWVPdXQgPSAwO1xyXG4gICAgcmVtb3ZlTG9hZGluZztcclxuICAgIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIHJlbW92ZUxvYWRpbmcpIHtcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibG9hZGluZ1wiKTtcclxuICAgICAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nID0gcmVtb3ZlTG9hZGluZztcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7XHJcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7XHJcbiAgICAgICAgICAgIGNsb3VkNjogQ0xPVURfNixcclxuICAgICAgICAgICAgY2xvdWQ3OiBDTE9VRF83LFxyXG4gICAgICAgICAgICBjbG91ZDg6IENMT1VEXzgsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZHJhdyhkZWx0YVRpbWUpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmNsb3VkWFBvc2l0aW9uICs9IGRlbHRhVGltZSAqIDAuNzU7XHJcbiAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgKz0gZGVsdGFUaW1lO1xyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkTW92aW5nVGltZU91dCA+IDI5ODMpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVMb2FkaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjUgJiYgIXRoaXMuc3RvcENsb3VkTW92aW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ICs9IGRlbHRhVGltZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY2xvdWRNb3ZpbmdUaW1lT3V0ID4gMjAwMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wQ2xvdWRNb3ZpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbG91ZFhQb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zdG9wQ2xvdWRNb3ZpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IDAgPyAwIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjYsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ2LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDcsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gMCA/IDAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgLXRoaXMuaGVpZ2h0ICogMC4xNSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gdGhpcy53aWR0aCAqIDAuMDVcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjA1XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjIsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IC10aGlzLndpZHRoICogMC42XHJcbiAgICAgICAgICAgICAgICAgICAgPyAtdGhpcy53aWR0aCAqIDAuNlxyXG4gICAgICAgICAgICAgICAgICAgIDogdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLmNsb3VkWFBvc2l0aW9uID49IHRoaXMud2lkdGggKiAwLjVcclxuICAgICAgICAgICAgICAgICAgICA/IHRoaXMud2lkdGggKiAwLjVcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC40LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNywgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSAtdGhpcy53aWR0aCAqIDAuNFxyXG4gICAgICAgICAgICAgICAgICAgID8gLXRoaXMud2lkdGggKiAwLjRcclxuICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy5jbG91ZFhQb3NpdGlvbiA+PSB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLndpZHRoICogMC40XHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMuY2xvdWRYUG9zaXRpb24gPj0gLXRoaXMud2lkdGggKiAwLjJcclxuICAgICAgICAgICAgICAgICAgICA/IC10aGlzLndpZHRoICogMC4yXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIDAgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDYsIHRoaXMud2lkdGggKiAwLjQgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCAwICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgLXRoaXMud2lkdGggKiAwLjQgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCAtdGhpcy5oZWlnaHQgKiAwLjE1LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMTUsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ4LCB0aGlzLndpZHRoICogMC4wNSArIHRoaXMuY2xvdWRYUG9zaXRpb24sIC10aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5jbG91ZDgsIC10aGlzLndpZHRoICogMC42ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjMsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC41KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCB0aGlzLndpZHRoICogMC41ICsgdGhpcy5jbG91ZFhQb3NpdGlvbiwgdGhpcy5oZWlnaHQgKiAwLjQsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0ICogMC40KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuY2xvdWQ3LCAtdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkOCwgdGhpcy53aWR0aCAqIDAuNCArIHRoaXMuY2xvdWRYUG9zaXRpb24sIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCAqIDAuNSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuZHJhd0ltYWdlKHRoaXMubG9hZGVkSW1hZ2VzLmNsb3VkNiwgLXRoaXMud2lkdGggKiAwLjIgKyB0aGlzLmNsb3VkWFBvc2l0aW9uLCB0aGlzLmhlaWdodCAqIDAuMiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgKiAwLjUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaW5pdENsb3VkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY2xvdWRYUG9zaXRpb24gPSAtNTAwO1xyXG4gICAgICAgIHRoaXMuc3RvcENsb3VkTW92aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbG91ZE1vdmluZ1RpbWVPdXQgPSAwO1xyXG4gICAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBNb25zdGVyLCBBdWRpb1BsYXllciB9IGZyb20gXCJAY29tcG9uZW50c1wiO1xyXG5pbXBvcnQgeyBQbGF5QnV0dG9uIH0gZnJvbSBcIkBidXR0b25zXCI7XHJcbmltcG9ydCB7IHRvZ2dsZURlYnVnTW9kZSwgVXRpbHMsIH0gZnJvbSBcIkBjb21tb25cIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VJbnRlZ3JhdGlvbiB9IGZyb20gXCIuLi9GaXJlYmFzZS9maXJlYmFzZS1pbnRlZ3JhdGlvblwiO1xyXG5pbXBvcnQgeyBjcmVhdGVCYWNrZ3JvdW5kLCBkZWZhdWx0QmdEcmF3aW5nIH0gZnJvbSBcIkBjb21wb3NpdGlvbnNcIjtcclxuaW1wb3J0IHsgRmlyZWJhc2VVc2VyQ2xpY2tlZCwgUFdBSW5zdGFsbFN0YXR1cywgREVGQVVMVF9CR19HUk9VUF9JTUdTLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmV4cG9ydCBjbGFzcyBTdGFydFNjZW5lIHtcclxuICAgIGNhbnZhcztcclxuICAgIGRhdGE7XHJcbiAgICB3aWR0aDtcclxuICAgIGhlaWdodDtcclxuICAgIG1vbnN0ZXI7XHJcbiAgICBwaWNrZWRTdG9uZTtcclxuICAgIHB3YV9zdGF0dXM7XHJcbiAgICBmaXJlYmFzZV9hbmFseXRpY3M7XHJcbiAgICBpZDtcclxuICAgIGNhbmF2c0VsZW1lbnQ7XHJcbiAgICBjb250ZXh0O1xyXG4gICAgYnV0dG9uQ29udGV4dDtcclxuICAgIHBsYXlCdXR0b247XHJcbiAgICBpbWFnZXM7XHJcbiAgICBsb2FkZWRJbWFnZXM7XHJcbiAgICBpbWFnZXNMb2FkZWQgPSBmYWxzZTtcclxuICAgIGhhbmRsZXI7XHJcbiAgICBzdGF0aWMgU2NlbmVOYW1lO1xyXG4gICAgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uO1xyXG4gICAgYmFja2dyb3VuZDtcclxuICAgIGF1ZGlvUGxheWVyO1xyXG4gICAgdG9nZ2xlQnRuO1xyXG4gICAgcHdhX2luc3RhbGxfc3RhdHVzO1xyXG4gICAgdGl0bGVUZXh0RWxlbWVudDtcclxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywgZGF0YSwgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbmF2c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbmF2c0VsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGUtYnRuXCIpO1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCA0KTtcclxuICAgICAgICB0aGlzLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbiA9IHN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgICAgICB0aGlzLmF1ZGlvUGxheWVyID0gbmV3IEF1ZGlvUGxheWVyKCk7XHJcbiAgICAgICAgdGhpcy5wd2Ffc3RhdHVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oUFdBSW5zdGFsbFN0YXR1cyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5kZXZUb2dnbGUoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZWluc3RhbGxwcm9tcHRcIiwgdGhpcy5oYW5kbGVySW5zdGFsbFByb21wdCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cEJnKCk7XHJcbiAgICAgICAgdGhpcy50aXRsZVRleHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKTtcclxuICAgICAgICB0aGlzLmdlbmVyYXRlR2FtZVRpdGxlKCk7XHJcbiAgICB9XHJcbiAgICBzZXR1cEJnID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IGF3YWl0IGNyZWF0ZUJhY2tncm91bmQodGhpcy5jb250ZXh0LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgREVGQVVMVF9CR19HUk9VUF9JTUdTLCBkZWZhdWx0QmdEcmF3aW5nKTtcclxuICAgIH07XHJcbiAgICBkZXZUb2dnbGUgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy50b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRvZ2dsZURlYnVnTW9kZSh0aGlzLnRvZ2dsZUJ0bikpO1xyXG4gICAgfTtcclxuICAgIGdlbmVyYXRlR2FtZVRpdGxlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudGl0bGVUZXh0RWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuZGF0YS50aXRsZTtcclxuICAgIH07XHJcbiAgICBhbmltYXRpb24gPSAoZGVsdGFUaW1lKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kPy5kcmF3KCk7XHJcbiAgICAgICAgdGhpcy5tb25zdGVyLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgICAgIHRoaXMucGxheUJ1dHRvbi5kcmF3KCk7XHJcbiAgICB9O1xyXG4gICAgY3JlYXRlUGxheUJ1dHRvbigpIHtcclxuICAgICAgICB0aGlzLnBsYXlCdXR0b24gPSBuZXcgUGxheUJ1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDcpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGhhbmRsZU1vdXNlQ2xpY2sgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHZhciByZWN0ID0gc2VsZkVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgY29uc3QgeCA9IGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQ7XHJcbiAgICAgICAgY29uc3QgeSA9IGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcDtcclxuICAgICAgICBjb25zdCB7IGV4Y2x1ZGVYLCBleGNsdWRlWSB9ID0gVXRpbHMuZ2V0RXhjbHVkZWRDb29yZGluYXRlcyhzZWxmRWxlbWVudCwgMTUpO1xyXG4gICAgICAgIGlmICghKHggPCBleGNsdWRlWCAmJiB5IDwgZXhjbHVkZVkpKSB7XHJcbiAgICAgICAgICAgIEZpcmViYXNlSW50ZWdyYXRpb24uZ2V0SW5zdGFuY2UoKS5zZW5kVXNlckNsaWNrZWRPblBsYXlFdmVudCgpO1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGZicShcInRyYWNrQ3VzdG9tXCIsIEZpcmViYXNlVXNlckNsaWNrZWQsIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBcImNsaWNrXCIsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9QbGF5ZXIucGxheUJ1dHRvbkNsaWNrU291bmQoKTtcclxuICAgICAgICAgICAgc2VsZi5zd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24oXCJTdGFydFNjZW5lXCIpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBkaXNwb3NlKCkge1xyXG4gICAgICAgIHRoaXMubW9uc3Rlci5kaXNwb3NlKCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb1BsYXllci5zdG9wQWxsQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmhhbmRsZU1vdXNlQ2xpY2ssIGZhbHNlKTtcclxuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZWluc3RhbGxwcm9tcHRcIiwgdGhpcy5oYW5kbGVySW5zdGFsbFByb21wdCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgaGFuZGxlckluc3RhbGxQcm9tcHQgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHRoaXMucHdhX2luc3RhbGxfc3RhdHVzID0gZXZlbnQ7XHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oUFdBSW5zdGFsbFN0YXR1cywgXCJmYWxzZVwiKTtcclxuICAgIH07XHJcbn1cclxuIiwiaW1wb3J0IHsgQVNTRVRTX1BBVEhfRkVOQ0UsIEFTU0VUU19QQVRIX0hJTEwsIEFTU0VUU19QQVRIX01PTlNURVJfSURMRSwgQVNTRVRTX1BBVEhfVE9URU0sIERFRkFVTFRfQkFDS0dST1VORF8xLCBGaXJlYmFzZVVzZXJDbGlja2VkLCBQV0FJbnN0YWxsU3RhdHVzLCB9IGZyb20gXCJAY29uc3RhbnRzXCI7XHJcbmltcG9ydCB7IExldmVsSW5kaWNhdG9ycywgUHJvbXB0VGV4dCwgVGltZXJUaWNraW5nLCBTdG9uZUhhbmRsZXIsIE1vbnN0ZXIsIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFBsYXlCdXR0b24gfSBmcm9tIFwiQGJ1dHRvbnNcIjtcclxuaW1wb3J0IHsgbG9hZEltYWdlcywgdG9nZ2xlRGVidWdNb2RlIH0gZnJvbSBcIkBjb21tb25cIjtcclxuY29uc3QgdG9nZ2xlQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGUtYnRuXCIpO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZWluc3RhbGxwcm9tcHRcIiwgKGUpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFBXQUluc3RhbGxTdGF0dXMsIFwiZmFsc2VcIik7XHJcbn0pO1xyXG5leHBvcnQgY2xhc3MgVGVzdEdhbWVwbGF5U2NlbmUge1xyXG4gICAgY2FudmFzO1xyXG4gICAgZGF0YTtcclxuICAgIHdpZHRoO1xyXG4gICAgaGVpZ2h0O1xyXG4gICAgbW9uc3RlcjtcclxuICAgIGxldmVsSW5kaWNhdG9yO1xyXG4gICAgcHJvbXB0VGV4dDtcclxuICAgIHRpbWVyVGlja2luZztcclxuICAgIHN0b25lSGFuZGxlcjtcclxuICAgIHBpY2tlZFN0b25lO1xyXG4gICAgcHdhX3N0YXR1cztcclxuICAgIGZpcmViYXNlX2FuYWx5dGljcztcclxuICAgIGlkO1xyXG4gICAgY2FuYXZzRWxlbWVudDtcclxuICAgIGNvbnRleHQ7XHJcbiAgICBidXR0b25Db250ZXh0O1xyXG4gICAgb3V0Y29tZTtcclxuICAgIHBsYXlCdXR0b247XHJcbiAgICBsZXZlbFNlbGVjdGlvblNjZW5lO1xyXG4gICAgaW1hZ2VzO1xyXG4gICAgbG9hZGVkSW1hZ2VzO1xyXG4gICAgaW1hZ2VzTG9hZGVkID0gZmFsc2U7XHJcbiAgICBoYW5kbGVyO1xyXG4gICAgc3RhdGljIFNjZW5lTmFtZTtcclxuICAgIHN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgIGNvdW50ZXIgPSAwO1xyXG4gICAgdHV0b3JpYWw7XHJcbiAgICBjb25zdHJ1Y3RvcihjYW52YXMsIGRhdGEsIGZpcmViYXNlX2FuYWx5dGljcywgc3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcclxuICAgICAgICB0aGlzLndpZHRoID0gY2FudmFzLndpZHRoO1xyXG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbmF2c0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSB0aGlzLmNhbmF2c0VsZW1lbnQuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG4gICAgICAgIHRoaXMubW9uc3RlciA9IG5ldyBNb25zdGVyKHRoaXMuY2FudmFzLCAwKTtcclxuICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmxvZyguLi5vb19vbyhgMjUxMDY4ODIwMF82OV80XzY5XzUxXzRgLCBEYXRlLm5vdywgXCIgOjo6IFwiLCBwZXJmb3JtYW5jZS5ub3cpKTtcclxuICAgICAgICB0aGlzLnN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbiA9IHN3aXRjaFNjZW5lVG9MZXZlbFNlbGVjdGlvbjtcclxuICAgICAgICB0aGlzLnN0b25lSGFuZGxlciA9IG5ldyBTdG9uZUhhbmRsZXIodGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgMiwgdGhpcy5kYXRhLmxldmVsc1s5Ml0sIHRoaXMuZGF0YS5mZWVkYmFja0F1ZGlvcywgdGhpcy50aW1lclRpY2tpbmcpO1xyXG4gICAgICAgIC8vLyB0ZXN0aW5nIHByb21wdGV4clxyXG4gICAgICAgIHRoaXMucHJvbXB0VGV4dCA9IG5ldyBQcm9tcHRUZXh0KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmRhdGEubGV2ZWxzWzkyXS5wdXp6bGVzWzJdLCB0aGlzLmRhdGEubGV2ZWxzWzkyXSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nID0gbmV3IFRpbWVyVGlja2luZyh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgdGhpcy50aW1lT3ZlckNhbGxiYWNrKTtcclxuICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vZW5kXHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvciA9IG5ldyBMZXZlbEluZGljYXRvcnModGhpcy5jb250ZXh0LCB0aGlzLmNhbnZhcywgMCk7XHJcbiAgICAgICAgdGhpcy5sZXZlbEluZGljYXRvci5zZXRJbmRpY2F0b3JzKDMpO1xyXG4gICAgICAgIHRoaXMudHV0b3JpYWwudXBkYXRlVGFyZ2V0U3RvbmVQb3NpdGlvbnMoWzEwMCwgMTAwXSk7XHJcbiAgICAgICAgdGhpcy5wd2Ffc3RhdHVzID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oUFdBSW5zdGFsbFN0YXR1cyk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdGhpcy5kZXZUb2dnbGUoKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZVBsYXlCdXR0b24oKTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlX2FuYWx5dGljcyA9IGZpcmViYXNlX2FuYWx5dGljcztcclxuICAgICAgICB0aGlzLmFuaW1hdGlvbigwKTtcclxuICAgICAgICB0aGlzLmltYWdlcyA9IHtcclxuICAgICAgICAgICAgcGlsbGVySW1nOiBBU1NFVFNfUEFUSF9UT1RFTSxcclxuICAgICAgICAgICAgYmdJbWc6IERFRkFVTFRfQkFDS0dST1VORF8xLFxyXG4gICAgICAgICAgICBoaWxsSW1nOiBBU1NFVFNfUEFUSF9ISUxMLFxyXG4gICAgICAgICAgICBmZW5jaEltZzogQVNTRVRTX1BBVEhfRkVOQ0UsXHJcbiAgICAgICAgICAgIHByb2ZpbGVNb25zdGVyOiBBU1NFVFNfUEFUSF9NT05TVEVSX0lETEUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2FkSW1hZ2VzKHRoaXMuaW1hZ2VzLCAoaW1hZ2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGVkSW1hZ2VzID0gT2JqZWN0LmFzc2lnbih7fSwgaW1hZ2VzKTtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdGltZU92ZXJDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAvLyB0aW1lIHRvIGxvYWQgbmV3IHB1enpsZVxyXG4gICAgICAgIHRoaXMudGltZXJUaWNraW5nLnJlYWR5VGltZXIoKTtcclxuICAgICAgICB0aGlzLnRpbWVyVGlja2luZy5zdGFydFRpbWVyKCk7XHJcbiAgICAgICAgdGhpcy50aW1lclRpY2tpbmcuaXNNeVRpbWVyT3ZlciA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmNvdW50ZXIgPT0gNSlcclxuICAgICAgICAgICAgdGhpcy5jb3VudGVyID0gMDtcclxuICAgICAgICB0aGlzLmxldmVsSW5kaWNhdG9yLnNldEluZGljYXRvcnModGhpcy5jb3VudGVyKyspO1xyXG4gICAgfTtcclxuICAgIGRldlRvZ2dsZSA9ICgpID0+IHtcclxuICAgICAgICB0b2dnbGVCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRvZ2dsZURlYnVnTW9kZSh0b2dnbGVCdG4pKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZVVwID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgdmFyIHJlY3QgPSBzZWxmRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB4ID0gZXZlbnQuY2xpZW50WCAtIHJlY3QubGVmdDtcclxuICAgICAgICBjb25zdCB5ID0gZXZlbnQuY2xpZW50WSAtIHJlY3QudG9wO1xyXG4gICAgICAgIGlmIChNYXRoLnNxcnQoKHggLSBzZWxmLm1vbnN0ZXIueCAtIHNlbGYuY2FudmFzLndpZHRoIC8gNCkgKlxyXG4gICAgICAgICAgICAoeCAtIHNlbGYubW9uc3Rlci54IC0gc2VsZi5jYW52YXMud2lkdGggLyA0KSArXHJcbiAgICAgICAgICAgICh5IC0gc2VsZi5tb25zdGVyLnkgLSBzZWxmLmNhbnZhcy5oZWlnaHQgLyAyLjcpICpcclxuICAgICAgICAgICAgICAgICh5IC0gc2VsZi5tb25zdGVyLnkgLSBzZWxmLmNhbnZhcy5oZWlnaHQgLyAyLjcpKSA8PSA2MCkge1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgc2VsZi5tb25zdGVyLmNoYW5nZVRvSWRsZUFuaW1hdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzZWxmLnBpY2tlZFN0b25lID0gbnVsbDtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZURvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgLy8vLy8vLy8vIHNlbmRpbmcgZGF0YSB0byBzdG9uZSBjb25maWdcclxuICAgICAgICBmb3IgKGxldCBzYyBvZiBzZWxmLnN0b25lSGFuZGxlci5mb2lsU3RvbmVzKSB7XHJcbiAgICAgICAgICAgIGlmIChNYXRoLnNxcnQoKHggLSBzYy54KSAqICh4IC0gc2MueCkgKyAoeSAtIHNjLnkpICogKHkgLSBzYy55KSkgPD0gNDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGlja2VkU3RvbmUgPSBzYztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLy8vLy8vIGVuZCBvZiBzdG9uZSBkYXRhIHNlbmRpbmdcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZU1vdmUgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgY29uc3Qgc2VsZkVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHNlbGYucGlja2VkU3RvbmUpIHtcclxuICAgICAgICAgICAgc2VsZi5tb25zdGVyLmNoYW5nZVRvRHJhZ0FuaW1hdGlvbigpO1xyXG4gICAgICAgICAgICBzZWxmLnBpY2tlZFN0b25lLnggPSB4O1xyXG4gICAgICAgICAgICBzZWxmLnBpY2tlZFN0b25lLnkgPSB5O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBhbmltYXRpb24gPSAoZGVsdGFUaW1lKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5kcmF3SW1hZ2UodGhpcy5sb2FkZWRJbWFnZXMuYmdJbWcsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5waWxsZXJJbWcsIHRoaXMud2lkdGggKiAwLjYsIHRoaXMuaGVpZ2h0IC8gNiwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5mZW5jaEltZywgLXRoaXMud2lkdGggKiAwLjQsIHRoaXMuaGVpZ2h0IC8gMywgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQgLyAzKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmRyYXdJbWFnZSh0aGlzLmxvYWRlZEltYWdlcy5oaWxsSW1nLCAtdGhpcy53aWR0aCAqIDAuMjUsIHRoaXMuaGVpZ2h0IC8gMiwgdGhpcy53aWR0aCAqIDEuNSwgdGhpcy5oZWlnaHQgLyAyKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZvbnQgPSBcImJvbGQgNDBweCBBcmlhbFwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxUZXh0KFwiVGVzdGluZyBHYW1lcGxheVwiLCB0aGlzLndpZHRoICogMC41LCB0aGlzLmhlaWdodCAvIDEwKTtcclxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLnVwZGF0ZShkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnByb21wdFRleHQuZHJhdyhkZWx0YVRpbWUpO1xyXG4gICAgICAgICAgICB0aGlzLnN0b25lSGFuZGxlci5kcmF3KGRlbHRhVGltZSk7XHJcbiAgICAgICAgICAgIHRoaXMubGV2ZWxJbmRpY2F0b3IuZHJhdygpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbWVyVGlja2luZy51cGRhdGUoZGVsdGFUaW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZHJhdygpIHsgfVxyXG4gICAgY3JlYXRlUGxheUJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnBsYXlCdXR0b24gPSBuZXcgUGxheUJ1dHRvbih0aGlzLmNvbnRleHQsIHRoaXMuY2FudmFzLCB0aGlzLmNhbnZhcy53aWR0aCAqIDAuMzUsIHRoaXMuY2FudmFzLmhlaWdodCAvIDcpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLmhhbmRsZU1vdXNlVXAsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmhhbmRsZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB0aGlzLmhhbmRsZU1vdXNlTW92ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMuaGFuZGxlTW91c2VEb3duLCBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUudG91Y2hlc1swXTtcclxuICAgICAgICAgICAgdmFyIG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudChcIm1vdXNlZG93blwiLCB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaC5jbGllbnRYLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50WTogdG91Y2guY2xpZW50WSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUudG91Y2hlc1swXTtcclxuICAgICAgICAgICAgdmFyIG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudChcIm1vdXNlbW92ZVwiLCB7XHJcbiAgICAgICAgICAgICAgICBjbGllbnRYOiB0b3VjaC5jbGllbnRYLFxyXG4gICAgICAgICAgICAgICAgY2xpZW50WTogdG91Y2guY2xpZW50WSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpLmRpc3BhdGNoRXZlbnQobW91c2VFdmVudCk7XHJcbiAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlci5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIHRvdWNoID0gZS5jaGFuZ2VkVG91Y2hlc1swXTtcclxuICAgICAgICAgICAgdmFyIG1vdXNlRXZlbnQgPSBuZXcgTW91c2VFdmVudChcIm1vdXNldXBcIiwge1xyXG4gICAgICAgICAgICAgICAgY2xpZW50WDogdG91Y2guY2xpZW50WCxcclxuICAgICAgICAgICAgICAgIGNsaWVudFk6IHRvdWNoLmNsaWVudFksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKS5kaXNwYXRjaEV2ZW50KG1vdXNlRXZlbnQpO1xyXG4gICAgICAgIH0sIGZhbHNlKTtcclxuICAgIH07XHJcbiAgICBoYW5kbGVNb3VzZUNsaWNrID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIGNvbnN0IHNlbGZFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB2YXIgcmVjdCA9IHNlbGZFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgIGNvbnN0IHggPSBldmVudC5jbGllbnRYIC0gcmVjdC5sZWZ0O1xyXG4gICAgICAgIGNvbnN0IHkgPSBldmVudC5jbGllbnRZIC0gcmVjdC50b3A7XHJcbiAgICAgICAgaWYgKHNlbGYucGxheUJ1dHRvbi5vbkNsaWNrKHgsIHkpKSB7XHJcbiAgICAgICAgICAgIHNlbGYuZmlyZWJhc2VfYW5hbHl0aWNzXHJcbiAgICAgICAgICAgICAgICA/IHNlbGYuZmlyZWJhc2VfYW5hbHl0aWNzLmxvZ0V2ZW50KEZpcmViYXNlVXNlckNsaWNrZWQsIFwiY2xpY2tcIilcclxuICAgICAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBmYnEoXCJ0cmFja0N1c3RvbVwiLCBGaXJlYmFzZVVzZXJDbGlja2VkLCB7XHJcbiAgICAgICAgICAgICAgICBldmVudDogXCJjbGlja1wiLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdG9nZ2xlQnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgc2VsZi5zd2l0Y2hTY2VuZVRvTGV2ZWxTZWxlY3Rpb24oKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLmhhbmRsZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuaGFuZGxlTW91c2VDbGljaywgZmFsc2UpO1xyXG4gICAgfVxyXG59XHJcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIC8qIGM4IGlnbm9yZSBzdGFydCAqLyAvKiBlc2xpbnQtZGlzYWJsZSAqLyA7XHJcbmZ1bmN0aW9uIG9vX2NtKCkgeyB0cnkge1xyXG4gICAgcmV0dXJuICgwLCBldmFsKShcImdsb2JhbFRoaXMuX2NvbnNvbGVfbmluamFcIikgfHwgKDAsIGV2YWwpKFwiLyogaHR0cHM6Ly9naXRodWIuY29tL3dhbGxhYnlqcy9jb25zb2xlLW5pbmphI2hvdy1kb2VzLWl0LXdvcmsgKi8ndXNlIHN0cmljdCc7dmFyIF8weGZiNGY4OT1fMHgzZmY5OyhmdW5jdGlvbihfMHgzM2ZmY2UsXzB4NDc3NmFhKXt2YXIgXzB4MmFjMmQyPV8weDNmZjksXzB4NmUwMjEyPV8weDMzZmZjZSgpO3doaWxlKCEhW10pe3RyeXt2YXIgXzB4NTY2ZmUxPS1wYXJzZUludChfMHgyYWMyZDIoMHgxMjIpKS8weDEqKC1wYXJzZUludChfMHgyYWMyZDIoMHgxNmEpKS8weDIpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxNGEpKS8weDMrLXBhcnNlSW50KF8weDJhYzJkMigweGM5KSkvMHg0KigtcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTViKSkvMHg1KSstcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTI3KSkvMHg2Ky1wYXJzZUludChfMHgyYWMyZDIoMHgxODcpKS8weDcqKHBhcnNlSW50KF8weDJhYzJkMigweDEwOSkpLzB4OCkrLXBhcnNlSW50KF8weDJhYzJkMigweDEyNikpLzB4OSooLXBhcnNlSW50KF8weDJhYzJkMigweDFiYSkpLzB4YSkrLXBhcnNlSW50KF8weDJhYzJkMigweDEyYSkpLzB4YioocGFyc2VJbnQoXzB4MmFjMmQyKDB4MTFiKSkvMHhjKTtpZihfMHg1NjZmZTE9PT1fMHg0Nzc2YWEpYnJlYWs7ZWxzZSBfMHg2ZTAyMTJbJ3B1c2gnXShfMHg2ZTAyMTJbJ3NoaWZ0J10oKSk7fWNhdGNoKF8weDJjNmMxZCl7XzB4NmUwMjEyWydwdXNoJ10oXzB4NmUwMjEyWydzaGlmdCddKCkpO319fShfMHgyNmVkLDB4ZDk0MDUpKTtmdW5jdGlvbiBfMHgyNmVkKCl7dmFyIF8weDI1MWZlZD1bJ29uZXJyb3InLCdfaW5OZXh0RWRnZScsJ2RhdGUnLCdjbG9zZScsJ2xvZycsJ2Z1bmNOYW1lJywnYWxsU3RyTGVuZ3RoJyxcXFwiYzpcXFxcXFxcXFVzZXJzXFxcXFxcXFxzaGVlcndvb2RjXFxcXFxcXFwudnNjb2RlXFxcXFxcXFxleHRlbnNpb25zXFxcXFxcXFx3YWxsYWJ5anMuY29uc29sZS1uaW5qYS0xLjAuMzYwXFxcXFxcXFxub2RlX21vZHVsZXNcXFwiLCdbb2JqZWN0XFxcXHgyMERhdGVdJywnbnVtYmVyJywnYmluZCcsJ2dhdGV3YXkuZG9ja2VyLmludGVybmFsJywnYm9vbGVhbicsJ19hZGRMb2FkTm9kZScsJ3Byb3RvdHlwZScsJ19hZGRQcm9wZXJ0eScsJ29uY2xvc2UnLCdfcXVvdGVkUmVnRXhwJywnX3JlZ0V4cFRvU3RyaW5nJywnc3BsaXQnLCdkb2NrZXJpemVkQXBwJywnZW51bWVyYWJsZScsJ01hcCcsJ3VybCcsJ19TeW1ib2wnLCd2YWx1ZU9mJywnbm9GdW5jdGlvbnMnLCdfY29uc29sZV9uaW5qYV9zZXNzaW9uJywnc3RyaW5naWZ5JywnX3RyZWVOb2RlUHJvcGVydGllc0FmdGVyRnVsbFZhbHVlJywndG90YWxTdHJMZW5ndGgnLCdsZW5ndGgnLCdvbm1lc3NhZ2UnLCdtYXRjaCcsJ2RlZmF1bHQnLCdfZGlzcG9zZVdlYnNvY2tldCcsJ3NvcnRQcm9wcycsJ19jb25uZWN0QXR0ZW1wdENvdW50JywnJywndW5yZWYnLCdzZXJpYWxpemUnLCdfc2V0Tm9kZVBlcm1pc3Npb25zJywndW5rbm93bicsJ3R5cGUnLCdfaXNOZWdhdGl2ZVplcm8nLCdzdHJpbmcnLCd0b1VwcGVyQ2FzZScsJ3BlcmZvcm1hbmNlJywnZXhwSWQnLCdnZXRXZWJTb2NrZXRDbGFzcycsJ2dldCcsJ3N0ckxlbmd0aCcsJzE2YnZuSk1mJywnZm9yRWFjaCcsJ3dzL2luZGV4LmpzJywnMTI3LjAuMC4xJywnYXV0b0V4cGFuZFByZXZpb3VzT2JqZWN0cycsJ2NvbnN0cnVjdG9yJywnX2hhc1N5bWJvbFByb3BlcnR5T25JdHNQYXRoJywnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnLCdfY2xlYW5Ob2RlJywnX3NvY2tldCcsJ0NvbnNvbGVcXFxceDIwTmluamFcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMHNlbmRcXFxceDIwbG9ncyxcXFxceDIwcmVzdGFydGluZ1xcXFx4MjB0aGVcXFxceDIwcHJvY2Vzc1xcXFx4MjBtYXlcXFxceDIwaGVscDtcXFxceDIwYWxzb1xcXFx4MjBzZWVcXFxceDIwJywnX3NvcnRQcm9wcycsJ2FyZ3MnLCdjYXBwZWRQcm9wcycsJ2ZhaWxlZFxcXFx4MjB0b1xcXFx4MjBjb25uZWN0XFxcXHgyMHRvXFxcXHgyMGhvc3Q6XFxcXHgyMCcsJ2NvdW50Jywnc2VuZCcsJ3NlZVxcXFx4MjBodHRwczovL3Rpbnl1cmwuY29tLzJ2dDhqeHp3XFxcXHgyMGZvclxcXFx4MjBtb3JlXFxcXHgyMGluZm8uJywnMjA2NzI3NkRWb3pUWicsJ2NhbGwnLCd0aW1lU3RhbXAnLCdub3cnLCdzdGFja1RyYWNlTGltaXQnLCdmdW5jdGlvbicsJ19pc0FycmF5JywnN1FicXJhdycsJ2V2ZW50UmVjZWl2ZWRDYWxsYmFjaycsJ25lZ2F0aXZlWmVybycsJ19oYXNNYXBPbkl0c1BhdGgnLCcxMzE0SlNDcmZQJywnMjA5NTY5MnViTExCSicsJ2hpdHMnLCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywnNzdOZlRVdUsnLCdfc2V0Tm9kZUlkJywnX2luQnJvd3NlcicsJ193cycsJ19nZXRPd25Qcm9wZXJ0eVN5bWJvbHMnLCdFcnJvcicsJ19kYXRlVG9TdHJpbmcnLCdOdW1iZXInLCdlZGdlJywnX2NhcElmU3RyaW5nJywnX2FsbG93ZWRUb0Nvbm5lY3RPblNlbmQnLCdtZXNzYWdlJywnX2tleVN0clJlZ0V4cCcsJ1N0cmluZycsJ2V4cHJlc3Npb25zVG9FdmFsdWF0ZScsJ25leHQuanMnLCcxJywncGF0aFRvRmlsZVVSTCcsJ190eXBlJywnX2lzUHJpbWl0aXZlV3JhcHBlclR5cGUnLCdtYXAnLCdfV2ViU29ja2V0Q2xhc3MnLCdfaXNVbmRlZmluZWQnLCdfbnVtYmVyUmVnRXhwJywnY2FwcGVkRWxlbWVudHMnLCdvYmplY3QnLCdsb2dnZXJcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGNvbm5lY3RcXFxceDIwdG9cXFxceDIwaG9zdCxcXFxceDIwc2VlXFxcXHgyMCcsJ19XZWJTb2NrZXQnLCdhdXRvRXhwYW5kTGltaXQnLCdbb2JqZWN0XFxcXHgyMFNldF0nLCdlbmRzV2l0aCcsJ3JlbWl4JywnMTU5MjI1M3lNUHl1eScsJ3BhdGgnLCdjb25jYXQnLCdzb21lJywndG9TdHJpbmcnLCdfYWRkaXRpb25hbE1ldGFkYXRhJywnX2NvbnNvbGVfbmluamEnLCdfZ2V0T3duUHJvcGVydHlOYW1lcycsJ19vYmplY3RUb1N0cmluZycsJ2h0dHBzOi8vdGlueXVybC5jb20vMzd4OGI3OXQnLCdCb29sZWFuJywnX2NvbnNvbGVOaW5qYUFsbG93ZWRUb1N0YXJ0JywnY292ZXJhZ2UnLCd3czovLycsJ3JlbG9hZCcsJ2RlcHRoJywnZ2xvYmFsJywnNDY5ODM1bldGdm9nJywnZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGZpbmRcXFxceDIwYW5kXFxcXHgyMGxvYWRcXFxceDIwV2ViU29ja2V0JywnX0hUTUxBbGxDb2xsZWN0aW9uJywnX2lzU2V0JywnX2FkZEZ1bmN0aW9uc05vZGUnLCdsb2dnZXJcXFxceDIwd2Vic29ja2V0XFxcXHgyMGVycm9yJywnX2JsYWNrbGlzdGVkUHJvcGVydHknLCdwb3AnLCdDb25zb2xlXFxcXHgyME5pbmphXFxcXHgyMGZhaWxlZFxcXFx4MjB0b1xcXFx4MjBzZW5kXFxcXHgyMGxvZ3MsXFxcXHgyMHJlZnJlc2hpbmdcXFxceDIwdGhlXFxcXHgyMHBhZ2VcXFxceDIwbWF5XFxcXHgyMGhlbHA7XFxcXHgyMGFsc29cXFxceDIwc2VlXFxcXHgyMCcsJ19pc01hcCcsJ2hydGltZScsJ3JlcGxhY2UnLCdfdW5kZWZpbmVkJywnX3RyZWVOb2RlUHJvcGVydGllc0JlZm9yZUZ1bGxWYWx1ZScsJ2VudicsJzQ4Mjk2OGtBUUFoRicsJ3Jvb3RfZXhwJywnX2Nvbm5lY3RlZCcsJ2pvaW4nLCdpbmNsdWRlcycsJ1N5bWJvbCcsJ3Byb2Nlc3MnLCdwdXNoJywnaXNBcnJheScsJ19pc1ByaW1pdGl2ZVR5cGUnLCdjb25zb2xlJywncG9zaXRpdmVJbmZpbml0eScsJ19wX2xlbmd0aCcsJ19yZWNvbm5lY3RUaW1lb3V0JywndGVzdCcsJ3BlcmZfaG9va3MnLCdfcHJvY2Vzc1RyZWVOb2RlUmVzdWx0JywnaG9zdCcsJ2Vycm9yJywncHJvcHMnLCdzb3J0JywnYmlnaW50JywnW29iamVjdFxcXFx4MjBBcnJheV0nLCdlbGFwc2VkJywnbm9kZScsJ2NhcHBlZCcsJ3JlZHVjZUxpbWl0cycsJ05FR0FUSVZFX0lORklOSVRZJywnY3JlYXRlJywnODQ2MDEzdWJPRFJuJywnbGV2ZWwnLCdvcmlnaW4nLCdhc3RybycsJ3N1YnN0cicsJ19uaW5qYUlnbm9yZU5leHRFcnJvcicsJ19hdHRlbXB0VG9SZWNvbm5lY3RTaG9ydGx5JywnX3NldE5vZGVFeHByZXNzaW9uUGF0aCcsJ193ZWJTb2NrZXRFcnJvckRvY3NMaW5rJywnZ2V0T3duUHJvcGVydHlTeW1ib2xzJywnb25vcGVuJywnUE9TSVRJVkVfSU5GSU5JVFknLCdwb3J0JywnQnVmZmVyJywnX3NlbmRFcnJvck1lc3NhZ2UnLCdfc2V0Tm9kZUV4cGFuZGFibGVTdGF0ZScsJycsJ3Jlc29sdmVHZXR0ZXJzJywndG9Mb3dlckNhc2UnLCdwYXJzZScsJ1NldCcsJ19jb25uZWN0aW5nJywnY2F0Y2gnLCdjdXJyZW50JywnX2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsJ3ZhbHVlJywndGltZScsJ2F1dG9FeHBhbmQnLCdjaGFyQXQnLCdnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3InLCdpc0V4cHJlc3Npb25Ub0V2YWx1YXRlJyxbXFxcImxvY2FsaG9zdFxcXCIsXFxcIjEyNy4wLjAuMVxcXCIsXFxcImV4YW1wbGUuY3lwcmVzcy5pb1xcXCIsXFxcIkNFQi1MQVBUT1AtMDAwNlxcXCIsXFxcIjE5Mi4xNjguMS43OVxcXCJdLCdhcnJheScsJ2hvc3RuYW1lJywnaW5kZXgnLCd3YXJuJywndHJhY2UnLCcuLi4nLCd1bnNoaWZ0JywnX2Nvbm5lY3RUb0hvc3ROb3cnLCdbb2JqZWN0XFxcXHgyME1hcF0nLCdzdGFjaycsJ1xcXFx4MjBzZXJ2ZXInLCdkYXRhJywnZ2V0UHJvdG90eXBlT2YnLCdudWxsJywnX3Byb3BlcnR5Jywnc3RhcnRzV2l0aCcsJ2F1dG9FeHBhbmRNYXhEZXB0aCcsJ2Zyb21DaGFyQ29kZScsJ3Jvb3RFeHByZXNzaW9uJywnODUyOTBFWHFUWUgnLCdbb2JqZWN0XFxcXHgyMEJpZ0ludF0nLCdfYWxsb3dlZFRvU2VuZCcsJ19zZXROb2RlTGFiZWwnLCdyb290X2V4cF9pZCcsJ1xcXFx4MjBicm93c2VyJywnSFRNTEFsbENvbGxlY3Rpb24nLCduYW1lJywnZGlzYWJsZWRUcmFjZScsJ3JlYWR5U3RhdGUnLCdfcHJvcGVydHlOYW1lJywnX3BfJywnc3ltYm9sJywndW5kZWZpbmVkJywnZWxlbWVudHMnLCcxMmlDblJsbCcsJ19zZXROb2RlUXVlcnlQYXRoJywndGhlbicsJyVjXFxcXHgyMENvbnNvbGVcXFxceDIwTmluamFcXFxceDIwZXh0ZW5zaW9uXFxcXHgyMGlzXFxcXHgyMGNvbm5lY3RlZFxcXFx4MjB0b1xcXFx4MjAnLCdXZWJTb2NrZXQnLCdwYXJlbnQnLCdORVhUX1JVTlRJTUUnLCdfYWRkT2JqZWN0UHJvcGVydHknLCdub2RlTW9kdWxlcycsJ3ZlcnNpb25zJywnMS4wLjAnLCdpbmRleE9mJ107XzB4MjZlZD1mdW5jdGlvbigpe3JldHVybiBfMHgyNTFmZWQ7fTtyZXR1cm4gXzB4MjZlZCgpO312YXIgSz1PYmplY3RbXzB4ZmI0Zjg5KDB4MTg2KV0sUT1PYmplY3RbJ2RlZmluZVByb3BlcnR5J10sRz1PYmplY3RbXzB4ZmI0Zjg5KDB4MWE0KV0sZWU9T2JqZWN0W18weGZiNGY4OSgweDEyOSldLHRlPU9iamVjdFtfMHhmYjRmODkoMHgxYjMpXSxuZT1PYmplY3RbXzB4ZmI0Zjg5KDB4ZTMpXVsnaGFzT3duUHJvcGVydHknXSxyZT0oXzB4NThiYzdjLF8weDRkZGQwZCxfMHg0NTY2MzAsXzB4M2YwYmFhKT0+e3ZhciBfMHg0ZWEwMTg9XzB4ZmI0Zjg5O2lmKF8weDRkZGQwZCYmdHlwZW9mIF8weDRkZGQwZD09XzB4NGVhMDE4KDB4MTQzKXx8dHlwZW9mIF8weDRkZGQwZD09XzB4NGVhMDE4KDB4MTIwKSl7Zm9yKGxldCBfMHg0ZDUzNDkgb2YgZWUoXzB4NGRkZDBkKSkhbmVbJ2NhbGwnXShfMHg1OGJjN2MsXzB4NGQ1MzQ5KSYmXzB4NGQ1MzQ5IT09XzB4NDU2NjMwJiZRKF8weDU4YmM3YyxfMHg0ZDUzNDkseydnZXQnOigpPT5fMHg0ZGRkMGRbXzB4NGQ1MzQ5XSwnZW51bWVyYWJsZSc6IShfMHgzZjBiYWE9RyhfMHg0ZGRkMGQsXzB4NGQ1MzQ5KSl8fF8weDNmMGJhYVtfMHg0ZWEwMTgoMHhlYSldfSk7fXJldHVybiBfMHg1OGJjN2M7fSxWPShfMHgxY2ZjMDgsXzB4MjgxOTMwLF8weDE5NzQ3Yik9PihfMHgxOTc0N2I9XzB4MWNmYzA4IT1udWxsP0sodGUoXzB4MWNmYzA4KSk6e30scmUoXzB4MjgxOTMwfHwhXzB4MWNmYzA4fHwhXzB4MWNmYzA4WydfX2VzJysnTW9kdWxlJ10/UShfMHgxOTc0N2IsXzB4ZmI0Zjg5KDB4ZjcpLHsndmFsdWUnOl8weDFjZmMwOCwnZW51bWVyYWJsZSc6ITB4MH0pOl8weDE5NzQ3YixfMHgxY2ZjMDgpKSxaPWNsYXNze2NvbnN0cnVjdG9yKF8weDI3ZGEzZCxfMHgzM2M4M2YsXzB4NTE0MjJkLF8weDFiZDI3ZixfMHgxZjE2MjgsXzB4MmMyN2Y5KXt2YXIgXzB4MzBiYWUwPV8weGZiNGY4OSxfMHhkYjJhZWUsXzB4MjE1YjZiLF8weDMzMzBhMyxfMHg1NDE3YjU7dGhpc1snZ2xvYmFsJ109XzB4MjdkYTNkLHRoaXNbXzB4MzBiYWUwKDB4MTdiKV09XzB4MzNjODNmLHRoaXNbXzB4MzBiYWUwKDB4MTkzKV09XzB4NTE0MjJkLHRoaXNbXzB4MzBiYWUwKDB4ZDEpXT1fMHgxYmQyN2YsdGhpc1snZG9ja2VyaXplZEFwcCddPV8weDFmMTYyOCx0aGlzW18weDMwYmFlMCgweDEyMyldPV8weDJjMjdmOSx0aGlzWydfYWxsb3dlZFRvU2VuZCddPSEweDAsdGhpc1tfMHgzMGJhZTAoMHgxMzQpXT0hMHgwLHRoaXNbXzB4MzBiYWUwKDB4MTZjKV09ITB4MSx0aGlzW18weDMwYmFlMCgweDE5YyldPSEweDEsdGhpc1tfMHgzMGJhZTAoMHhkNildPSgoXzB4MjE1YjZiPShfMHhkYjJhZWU9XzB4MjdkYTNkW18weDMwYmFlMCgweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHhkYjJhZWVbXzB4MzBiYWUwKDB4MTY5KV0pPT1udWxsP3ZvaWQgMHgwOl8weDIxNWI2YltfMHgzMGJhZTAoMHhjZildKT09PV8weDMwYmFlMCgweDEzMiksdGhpc1tfMHgzMGJhZTAoMHgxMmMpXT0hKChfMHg1NDE3YjU9KF8weDMzMzBhMz10aGlzW18weDMwYmFlMCgweDE1YSldWydwcm9jZXNzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDMzMzBhM1tfMHgzMGJhZTAoMHhkMildKSE9bnVsbCYmXzB4NTQxN2I1Wydub2RlJ10pJiYhdGhpc1snX2luTmV4dEVkZ2UnXSx0aGlzWydfV2ViU29ja2V0Q2xhc3MnXT1udWxsLHRoaXNbXzB4MzBiYWUwKDB4ZmEpXT0weDAsdGhpc1snX21heENvbm5lY3RBdHRlbXB0Q291bnQnXT0weDE0LHRoaXNbXzB4MzBiYWUwKDB4MThmKV09XzB4MzBiYWUwKDB4MTUzKSx0aGlzW18weDMwYmFlMCgweDE5NSldPSh0aGlzW18weDMwYmFlMCgweDEyYyldP18weDMwYmFlMCgweDE2Myk6XzB4MzBiYWUwKDB4MTEzKSkrdGhpc1snX3dlYlNvY2tldEVycm9yRG9jc0xpbmsnXTt9YXN5bmNbJ2dldFdlYlNvY2tldENsYXNzJ10oKXt2YXIgXzB4NWFmYTliPV8weGZiNGY4OSxfMHgyZDlmOTYsXzB4NTY1MDU4O2lmKHRoaXNbXzB4NWFmYTliKDB4MTNmKV0pcmV0dXJuIHRoaXNbJ19XZWJTb2NrZXRDbGFzcyddO2xldCBfMHgyZTEyYzM7aWYodGhpc1tfMHg1YWZhOWIoMHgxMmMpXXx8dGhpc1tfMHg1YWZhOWIoMHhkNildKV8weDJlMTJjMz10aGlzW18weDVhZmE5YigweDE1YSldW18weDVhZmE5YigweGNkKV07ZWxzZXtpZigoXzB4MmQ5Zjk2PXRoaXNbXzB4NWFmYTliKDB4MTVhKV1bJ3Byb2Nlc3MnXSkhPW51bGwmJl8weDJkOWY5NltfMHg1YWZhOWIoMHgxNDUpXSlfMHgyZTEyYzM9KF8weDU2NTA1OD10aGlzWydnbG9iYWwnXVtfMHg1YWZhOWIoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4NTY1MDU4W18weDVhZmE5YigweDE0NSldO2Vsc2UgdHJ5e2xldCBfMHg1NWE4YTc9YXdhaXQgaW1wb3J0KF8weDVhZmE5YigweDE0YikpO18weDJlMTJjMz0oYXdhaXQgaW1wb3J0KChhd2FpdCBpbXBvcnQoXzB4NWFmYTliKDB4ZWMpKSlbXzB4NWFmYTliKDB4MTNiKV0oXzB4NTVhOGE3W18weDVhZmE5YigweDE2ZCldKHRoaXNbXzB4NWFmYTliKDB4ZDEpXSxfMHg1YWZhOWIoMHgxMGIpKSlbXzB4NWFmYTliKDB4MTRlKV0oKSkpWydkZWZhdWx0J107fWNhdGNoe3RyeXtfMHgyZTEyYzM9cmVxdWlyZShyZXF1aXJlKF8weDVhZmE5YigweDE0YikpW18weDVhZmE5YigweDE2ZCldKHRoaXNbXzB4NWFmYTliKDB4ZDEpXSwnd3MnKSk7fWNhdGNoe3Rocm93IG5ldyBFcnJvcihfMHg1YWZhOWIoMHgxNWMpKTt9fX1yZXR1cm4gdGhpc1tfMHg1YWZhOWIoMHgxM2YpXT1fMHgyZTEyYzMsXzB4MmUxMmMzO31bXzB4ZmI0Zjg5KDB4MWFlKV0oKXt2YXIgXzB4M2NhZDYwPV8weGZiNGY4OTt0aGlzW18weDNjYWQ2MCgweDE5YyldfHx0aGlzW18weDNjYWQ2MCgweDE2YyldfHx0aGlzWydfY29ubmVjdEF0dGVtcHRDb3VudCddPj10aGlzWydfbWF4Q29ubmVjdEF0dGVtcHRDb3VudCddfHwodGhpc1tfMHgzY2FkNjAoMHgxMzQpXT0hMHgxLHRoaXNbXzB4M2NhZDYwKDB4MTljKV09ITB4MCx0aGlzW18weDNjYWQ2MCgweGZhKV0rKyx0aGlzW18weDNjYWQ2MCgweDEyZCldPW5ldyBQcm9taXNlKChfMHgzNDNhYmQsXzB4YmEwODhiKT0+e3ZhciBfMHgxMTMxMWE9XzB4M2NhZDYwO3RoaXNbXzB4MTEzMTFhKDB4MTA2KV0oKVtfMHgxMTMxMWEoMHhjYildKF8weGIwOTQ1MD0+e3ZhciBfMHg0M2ZhZGE9XzB4MTEzMTFhO2xldCBfMHgzODc3NDk9bmV3IF8weGIwOTQ1MChfMHg0M2ZhZGEoMHgxNTcpKyghdGhpc1tfMHg0M2ZhZGEoMHgxMmMpXSYmdGhpc1tfMHg0M2ZhZGEoMHhlOSldP18weDQzZmFkYSgweGUwKTp0aGlzW18weDQzZmFkYSgweDE3YildKSsnOicrdGhpc1tfMHg0M2ZhZGEoMHgxOTMpXSk7XzB4Mzg3NzQ5WydvbmVycm9yJ109KCk9Pnt2YXIgXzB4NDUzY2I3PV8weDQzZmFkYTt0aGlzWydfYWxsb3dlZFRvU2VuZCddPSEweDEsdGhpc1tfMHg0NTNjYjcoMHhmOCldKF8weDM4Nzc0OSksdGhpc1tfMHg0NTNjYjcoMHgxOGQpXSgpLF8weGJhMDg4YihuZXcgRXJyb3IoXzB4NDUzY2I3KDB4MTYwKSkpO30sXzB4Mzg3NzQ5W18weDQzZmFkYSgweDE5MSldPSgpPT57dmFyIF8weGRhZjQ3Yz1fMHg0M2ZhZGE7dGhpc1tfMHhkYWY0N2MoMHgxMmMpXXx8XzB4Mzg3NzQ5Wydfc29ja2V0J10mJl8weDM4Nzc0OVtfMHhkYWY0N2MoMHgxMTIpXVtfMHhkYWY0N2MoMHhmYyldJiZfMHgzODc3NDlbXzB4ZGFmNDdjKDB4MTEyKV1bJ3VucmVmJ10oKSxfMHgzNDNhYmQoXzB4Mzg3NzQ5KTt9LF8weDM4Nzc0OVtfMHg0M2ZhZGEoMHhlNSldPSgpPT57dmFyIF8weGM1Njc0OD1fMHg0M2ZhZGE7dGhpc1tfMHhjNTY3NDgoMHgxMzQpXT0hMHgwLHRoaXNbXzB4YzU2NzQ4KDB4ZjgpXShfMHgzODc3NDkpLHRoaXNbXzB4YzU2NzQ4KDB4MThkKV0oKTt9LF8weDM4Nzc0OVtfMHg0M2ZhZGEoMHhmNSldPV8weDQ3ZWQzYT0+e3ZhciBfMHgyOGY1ODA9XzB4NDNmYWRhO3RyeXtpZighKF8weDQ3ZWQzYSE9bnVsbCYmXzB4NDdlZDNhW18weDI4ZjU4MCgweDFiMildKXx8IXRoaXNbXzB4MjhmNTgwKDB4MTIzKV0pcmV0dXJuO2xldCBfMHg0NzllZTU9SlNPTltfMHgyOGY1ODAoMHgxOWEpXShfMHg0N2VkM2FbJ2RhdGEnXSk7dGhpc1tfMHgyOGY1ODAoMHgxMjMpXShfMHg0NzllZTVbJ21ldGhvZCddLF8weDQ3OWVlNVtfMHgyOGY1ODAoMHgxMTUpXSx0aGlzW18weDI4ZjU4MCgweDE1YSldLHRoaXNbXzB4MjhmNTgwKDB4MTJjKV0pO31jYXRjaHt9fTt9KVtfMHgxMTMxMWEoMHhjYildKF8weDEzNTIwPT4odGhpc1snX2Nvbm5lY3RlZCddPSEweDAsdGhpc1snX2Nvbm5lY3RpbmcnXT0hMHgxLHRoaXNbXzB4MTEzMTFhKDB4MTM0KV09ITB4MSx0aGlzW18weDExMzExYSgweGJjKV09ITB4MCx0aGlzW18weDExMzExYSgweGZhKV09MHgwLF8weDEzNTIwKSlbXzB4MTEzMTFhKDB4MTlkKV0oXzB4MThmMWE5PT4odGhpc1tfMHgxMTMxMWEoMHgxNmMpXT0hMHgxLHRoaXNbXzB4MTEzMTFhKDB4MTljKV09ITB4MSxjb25zb2xlW18weDExMzExYSgweDFhYSldKF8weDExMzExYSgweDE0NCkrdGhpc1snX3dlYlNvY2tldEVycm9yRG9jc0xpbmsnXSksXzB4YmEwODhiKG5ldyBFcnJvcihfMHgxMTMxMWEoMHgxMTcpKyhfMHgxOGYxYTkmJl8weDE4ZjFhOVsnbWVzc2FnZSddKSkpKSk7fSkpO31bJ19kaXNwb3NlV2Vic29ja2V0J10oXzB4MzQ3MjU5KXt2YXIgXzB4NTUxODhkPV8weGZiNGY4OTt0aGlzW18weDU1MTg4ZCgweDE2YyldPSEweDEsdGhpc1tfMHg1NTE4OGQoMHgxOWMpXT0hMHgxO3RyeXtfMHgzNDcyNTlbJ29uY2xvc2UnXT1udWxsLF8weDM0NzI1OVtfMHg1NTE4OGQoMHhkNSldPW51bGwsXzB4MzQ3MjU5W18weDU1MTg4ZCgweDE5MSldPW51bGw7fWNhdGNoe310cnl7XzB4MzQ3MjU5W18weDU1MTg4ZCgweGMzKV08MHgyJiZfMHgzNDcyNTlbXzB4NTUxODhkKDB4ZDgpXSgpO31jYXRjaHt9fVsnX2F0dGVtcHRUb1JlY29ubmVjdFNob3J0bHknXSgpe3ZhciBfMHgzNjY2Mjc9XzB4ZmI0Zjg5O2NsZWFyVGltZW91dCh0aGlzW18weDM2NjYyNygweDE3NyldKSwhKHRoaXNbJ19jb25uZWN0QXR0ZW1wdENvdW50J10+PXRoaXNbJ19tYXhDb25uZWN0QXR0ZW1wdENvdW50J10pJiYodGhpc1tfMHgzNjY2MjcoMHgxNzcpXT1zZXRUaW1lb3V0KCgpPT57dmFyIF8weDQxMWI3Yj1fMHgzNjY2MjcsXzB4NWU4ZjM0O3RoaXNbXzB4NDExYjdiKDB4MTZjKV18fHRoaXNbXzB4NDExYjdiKDB4MTljKV18fCh0aGlzW18weDQxMWI3YigweDFhZSldKCksKF8weDVlOGYzND10aGlzW18weDQxMWI3YigweDEyZCldKT09bnVsbHx8XzB4NWU4ZjM0W18weDQxMWI3YigweDE5ZCldKCgpPT50aGlzW18weDQxMWI3YigweDE4ZCldKCkpKTt9LDB4MWY0KSx0aGlzWydfcmVjb25uZWN0VGltZW91dCddW18weDM2NjYyNygweGZjKV0mJnRoaXNbXzB4MzY2NjI3KDB4MTc3KV1bXzB4MzY2NjI3KDB4ZmMpXSgpKTt9YXN5bmNbXzB4ZmI0Zjg5KDB4MTE5KV0oXzB4MjNmNTFlKXt2YXIgXzB4MzM3OTU5PV8weGZiNGY4OTt0cnl7aWYoIXRoaXNbJ19hbGxvd2VkVG9TZW5kJ10pcmV0dXJuO3RoaXNbXzB4MzM3OTU5KDB4MTM0KV0mJnRoaXNbXzB4MzM3OTU5KDB4MWFlKV0oKSwoYXdhaXQgdGhpc1snX3dzJ10pWydzZW5kJ10oSlNPTltfMHgzMzc5NTkoMHhmMSldKF8weDIzZjUxZSkpO31jYXRjaChfMHg1YjBmYmMpe2NvbnNvbGVbJ3dhcm4nXSh0aGlzW18weDMzNzk1OSgweDE5NSldKyc6XFxcXHgyMCcrKF8weDViMGZiYyYmXzB4NWIwZmJjW18weDMzNzk1OSgweDEzNSldKSksdGhpc1tfMHgzMzc5NTkoMHhiYyldPSEweDEsdGhpc1tfMHgzMzc5NTkoMHgxOGQpXSgpO319fTtmdW5jdGlvbiBxKF8weDI0ZGFlYixfMHhiNmY1MTksXzB4NTUyYTgzLF8weDQxNzJjZixfMHg3NmRiYjcsXzB4NTA2ODQzLF8weGJmNzVhYyxfMHgzYWMyYzQ9aWUpe3ZhciBfMHg1YjlkNjQ9XzB4ZmI0Zjg5O2xldCBfMHg0YjkzNzM9XzB4NTUyYTgzW18weDViOWQ2NCgweGU4KV0oJywnKVtfMHg1YjlkNjQoMHgxM2UpXShfMHg1ZGJmZTQ9Pnt2YXIgXzB4NjZjNzFiPV8weDViOWQ2NCxfMHg5ZTE2NjgsXzB4NWEzN2Q1LF8weDEzYTBjYyxfMHgzZTNjYzY7dHJ5e2lmKCFfMHgyNGRhZWJbXzB4NjZjNzFiKDB4ZjApXSl7bGV0IF8weDI4MGY3MD0oKF8weDVhMzdkNT0oXzB4OWUxNjY4PV8weDI0ZGFlYltfMHg2NmM3MWIoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4OWUxNjY4Wyd2ZXJzaW9ucyddKT09bnVsbD92b2lkIDB4MDpfMHg1YTM3ZDVbXzB4NjZjNzFiKDB4MTgyKV0pfHwoKF8weDNlM2NjNj0oXzB4MTNhMGNjPV8weDI0ZGFlYltfMHg2NmM3MWIoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4MTNhMGNjW18weDY2YzcxYigweDE2OSldKT09bnVsbD92b2lkIDB4MDpfMHgzZTNjYzZbXzB4NjZjNzFiKDB4Y2YpXSk9PT1fMHg2NmM3MWIoMHgxMzIpOyhfMHg3NmRiYjc9PT0nbmV4dC5qcyd8fF8weDc2ZGJiNz09PV8weDY2YzcxYigweDE0OSl8fF8weDc2ZGJiNz09PV8weDY2YzcxYigweDE4YSl8fF8weDc2ZGJiNz09PSdhbmd1bGFyJykmJihfMHg3NmRiYjcrPV8weDI4MGY3MD9fMHg2NmM3MWIoMHgxYjEpOl8weDY2YzcxYigweGJmKSksXzB4MjRkYWViWydfY29uc29sZV9uaW5qYV9zZXNzaW9uJ109eydpZCc6K25ldyBEYXRlKCksJ3Rvb2wnOl8weDc2ZGJiN30sXzB4YmY3NWFjJiZfMHg3NmRiYjcmJiFfMHgyODBmNzAmJmNvbnNvbGVbXzB4NjZjNzFiKDB4ZDkpXShfMHg2NmM3MWIoMHhjYykrKF8weDc2ZGJiN1tfMHg2NmM3MWIoMHgxYTMpXSgweDApW18weDY2YzcxYigweDEwMyldKCkrXzB4NzZkYmI3W18weDY2YzcxYigweDE4YildKDB4MSkpKycsJywnYmFja2dyb3VuZDpcXFxceDIwcmdiKDMwLDMwLDMwKTtcXFxceDIwY29sb3I6XFxcXHgyMHJnYigyNTUsMjEzLDkyKScsXzB4NjZjNzFiKDB4MTFhKSk7fWxldCBfMHgxNGM2MDA9bmV3IFooXzB4MjRkYWViLF8weGI2ZjUxOSxfMHg1ZGJmZTQsXzB4NDE3MmNmLF8weDUwNjg0MyxfMHgzYWMyYzQpO3JldHVybiBfMHgxNGM2MDBbXzB4NjZjNzFiKDB4MTE5KV1bXzB4NjZjNzFiKDB4ZGYpXShfMHgxNGM2MDApO31jYXRjaChfMHg5ZWY4ZGIpe3JldHVybiBjb25zb2xlW18weDY2YzcxYigweDFhYSldKCdsb2dnZXJcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGNvbm5lY3RcXFxceDIwdG9cXFxceDIwaG9zdCcsXzB4OWVmOGRiJiZfMHg5ZWY4ZGJbJ21lc3NhZ2UnXSksKCk9Pnt9O319KTtyZXR1cm4gXzB4NDE4MTIwPT5fMHg0YjkzNzNbJ2ZvckVhY2gnXShfMHgyOGM5YTU9Pl8weDI4YzlhNShfMHg0MTgxMjApKTt9ZnVuY3Rpb24gXzB4M2ZmOShfMHhlNjc4MzgsXzB4NmQxNDg2KXt2YXIgXzB4MjZlZDY4PV8weDI2ZWQoKTtyZXR1cm4gXzB4M2ZmOT1mdW5jdGlvbihfMHgzZmY5MjAsXzB4NDg5MzI5KXtfMHgzZmY5MjA9XzB4M2ZmOTIwLTB4YmI7dmFyIF8weDM5OTVjYz1fMHgyNmVkNjhbXzB4M2ZmOTIwXTtyZXR1cm4gXzB4Mzk5NWNjO30sXzB4M2ZmOShfMHhlNjc4MzgsXzB4NmQxNDg2KTt9ZnVuY3Rpb24gaWUoXzB4NTc3MjdmLF8weDRiMzdjNyxfMHgxNGRhYmQsXzB4NWI5MGE5KXt2YXIgXzB4NDQwODk5PV8weGZiNGY4OTtfMHg1YjkwYTkmJl8weDU3NzI3Zj09PV8weDQ0MDg5OSgweDE1OCkmJl8weDE0ZGFiZFsnbG9jYXRpb24nXVsncmVsb2FkJ10oKTt9ZnVuY3Rpb24gQihfMHgyNmM5YWMpe3ZhciBfMHg0N2YwODU9XzB4ZmI0Zjg5LF8weDNlY2I3YSxfMHg0N2I1MTY7bGV0IF8weDIyMDgwNj1mdW5jdGlvbihfMHgzYTAyMGUsXzB4NTNjNjlhKXtyZXR1cm4gXzB4NTNjNjlhLV8weDNhMDIwZTt9LF8weDIxMDhjMjtpZihfMHgyNmM5YWNbXzB4NDdmMDg1KDB4MTA0KV0pXzB4MjEwOGMyPWZ1bmN0aW9uKCl7dmFyIF8weDMzNzQyMz1fMHg0N2YwODU7cmV0dXJuIF8weDI2YzlhY1tfMHgzMzc0MjMoMHgxMDQpXVtfMHgzMzc0MjMoMHgxMWUpXSgpO307ZWxzZXtpZihfMHgyNmM5YWNbXzB4NDdmMDg1KDB4MTcwKV0mJl8weDI2YzlhY1tfMHg0N2YwODUoMHgxNzApXVtfMHg0N2YwODUoMHgxNjUpXSYmKChfMHg0N2I1MTY9KF8weDNlY2I3YT1fMHgyNmM5YWNbJ3Byb2Nlc3MnXSk9PW51bGw/dm9pZCAweDA6XzB4M2VjYjdhW18weDQ3ZjA4NSgweDE2OSldKT09bnVsbD92b2lkIDB4MDpfMHg0N2I1MTZbJ05FWFRfUlVOVElNRSddKSE9PSdlZGdlJylfMHgyMTA4YzI9ZnVuY3Rpb24oKXtyZXR1cm4gXzB4MjZjOWFjWydwcm9jZXNzJ11bJ2hydGltZSddKCk7fSxfMHgyMjA4MDY9ZnVuY3Rpb24oXzB4MzQxZmIzLF8weDJjNjYxOCl7cmV0dXJuIDB4M2U4KihfMHgyYzY2MThbMHgwXS1fMHgzNDFmYjNbMHgwXSkrKF8weDJjNjYxOFsweDFdLV8weDM0MWZiM1sweDFdKS8weGY0MjQwO307ZWxzZSB0cnl7bGV0IHtwZXJmb3JtYW5jZTpfMHg0MTZhNTJ9PXJlcXVpcmUoXzB4NDdmMDg1KDB4MTc5KSk7XzB4MjEwOGMyPWZ1bmN0aW9uKCl7dmFyIF8weDQ4MTUwZj1fMHg0N2YwODU7cmV0dXJuIF8weDQxNmE1MltfMHg0ODE1MGYoMHgxMWUpXSgpO307fWNhdGNoe18weDIxMDhjMj1mdW5jdGlvbigpe3JldHVybituZXcgRGF0ZSgpO307fX1yZXR1cm57J2VsYXBzZWQnOl8weDIyMDgwNiwndGltZVN0YW1wJzpfMHgyMTA4YzIsJ25vdyc6KCk9PkRhdGVbJ25vdyddKCl9O31mdW5jdGlvbiBIKF8weGNiZGMyMCxfMHgxY2UyNDIsXzB4MWI2NmNmKXt2YXIgXzB4YTEzODI1PV8weGZiNGY4OSxfMHgzNmUyNmYsXzB4MmQ2NTJjLF8weDVlNzNmMyxfMHgyMWFjNDUsXzB4MTdlYjc5O2lmKF8weGNiZGMyMFsnX2NvbnNvbGVOaW5qYUFsbG93ZWRUb1N0YXJ0J10hPT12b2lkIDB4MClyZXR1cm4gXzB4Y2JkYzIwW18weGExMzgyNSgweDE1NSldO2xldCBfMHg0MGJiMmI9KChfMHgyZDY1MmM9KF8weDM2ZTI2Zj1fMHhjYmRjMjBbJ3Byb2Nlc3MnXSk9PW51bGw/dm9pZCAweDA6XzB4MzZlMjZmW18weGExMzgyNSgweGQyKV0pPT1udWxsP3ZvaWQgMHgwOl8weDJkNjUyY1tfMHhhMTM4MjUoMHgxODIpXSl8fCgoXzB4MjFhYzQ1PShfMHg1ZTczZjM9XzB4Y2JkYzIwW18weGExMzgyNSgweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHg1ZTczZjNbJ2VudiddKT09bnVsbD92b2lkIDB4MDpfMHgyMWFjNDVbXzB4YTEzODI1KDB4Y2YpXSk9PT0nZWRnZSc7ZnVuY3Rpb24gXzB4M2U4Y2Q4KF8weDM3ODdkNil7dmFyIF8weDUyNTMwYT1fMHhhMTM4MjU7aWYoXzB4Mzc4N2Q2W18weDUyNTMwYSgweDFiNildKCcvJykmJl8weDM3ODdkNltfMHg1MjUzMGEoMHgxNDgpXSgnLycpKXtsZXQgXzB4NTIzODE1PW5ldyBSZWdFeHAoXzB4Mzc4N2Q2WydzbGljZSddKDB4MSwtMHgxKSk7cmV0dXJuIF8weDVlYmYyYT0+XzB4NTIzODE1W18weDUyNTMwYSgweDE3OCldKF8weDVlYmYyYSk7fWVsc2V7aWYoXzB4Mzc4N2Q2WydpbmNsdWRlcyddKCcqJyl8fF8weDM3ODdkNltfMHg1MjUzMGEoMHgxNmUpXSgnPycpKXtsZXQgXzB4MTg1ZTk1PW5ldyBSZWdFeHAoJ14nK18weDM3ODdkNlsncmVwbGFjZSddKC9cXFxcLi9nLFN0cmluZ1tfMHg1MjUzMGEoMHgxYjgpXSgweDVjKSsnLicpWydyZXBsYWNlJ10oL1xcXFwqL2csJy4qJylbJ3JlcGxhY2UnXSgvXFxcXD8vZywnLicpK1N0cmluZ1tfMHg1MjUzMGEoMHgxYjgpXSgweDI0KSk7cmV0dXJuIF8weDE3NTg2Mz0+XzB4MTg1ZTk1W18weDUyNTMwYSgweDE3OCldKF8weDE3NTg2Myk7fWVsc2UgcmV0dXJuIF8weDI3NGVjYz0+XzB4Mjc0ZWNjPT09XzB4Mzc4N2Q2O319bGV0IF8weDRiNjE3MT1fMHgxY2UyNDJbJ21hcCddKF8weDNlOGNkOCk7cmV0dXJuIF8weGNiZGMyMFsnX2NvbnNvbGVOaW5qYUFsbG93ZWRUb1N0YXJ0J109XzB4NDBiYjJifHwhXzB4MWNlMjQyLCFfMHhjYmRjMjBbJ19jb25zb2xlTmluamFBbGxvd2VkVG9TdGFydCddJiYoKF8weDE3ZWI3OT1fMHhjYmRjMjBbJ2xvY2F0aW9uJ10pPT1udWxsP3ZvaWQgMHgwOl8weDE3ZWI3OVtfMHhhMTM4MjUoMHgxYTgpXSkmJihfMHhjYmRjMjBbXzB4YTEzODI1KDB4MTU1KV09XzB4NGI2MTcxW18weGExMzgyNSgweDE0ZCldKF8weDVjMTBmMT0+XzB4NWMxMGYxKF8weGNiZGMyMFsnbG9jYXRpb24nXVsnaG9zdG5hbWUnXSkpKSxfMHhjYmRjMjBbXzB4YTEzODI1KDB4MTU1KV07fWZ1bmN0aW9uIFgoXzB4MzYzZDU1LF8weDFkOTE2OSxfMHg0NmNhOTAsXzB4NDZmNjdjKXt2YXIgXzB4MTBlZDI4PV8weGZiNGY4OTtfMHgzNjNkNTU9XzB4MzYzZDU1LF8weDFkOTE2OT1fMHgxZDkxNjksXzB4NDZjYTkwPV8weDQ2Y2E5MCxfMHg0NmY2N2M9XzB4NDZmNjdjO2xldCBfMHg5MmFjMWU9QihfMHgzNjNkNTUpLF8weDIyNGZmYj1fMHg5MmFjMWVbXzB4MTBlZDI4KDB4MTgxKV0sXzB4NGViZWY4PV8weDkyYWMxZVtfMHgxMGVkMjgoMHgxMWQpXTtjbGFzcyBfMHgzMjhiZGV7Y29uc3RydWN0b3IoKXt2YXIgXzB4M2MyYWNjPV8weDEwZWQyODt0aGlzW18weDNjMmFjYygweDEzNildPS9eKD8hKD86ZG98aWZ8aW58Zm9yfGxldHxuZXd8dHJ5fHZhcnxjYXNlfGVsc2V8ZW51bXxldmFsfGZhbHNlfG51bGx8dGhpc3x0cnVlfHZvaWR8d2l0aHxicmVha3xjYXRjaHxjbGFzc3xjb25zdHxzdXBlcnx0aHJvd3x3aGlsZXx5aWVsZHxkZWxldGV8ZXhwb3J0fGltcG9ydHxwdWJsaWN8cmV0dXJufHN0YXRpY3xzd2l0Y2h8dHlwZW9mfGRlZmF1bHR8ZXh0ZW5kc3xmaW5hbGx5fHBhY2thZ2V8cHJpdmF0ZXxjb250aW51ZXxkZWJ1Z2dlcnxmdW5jdGlvbnxhcmd1bWVudHN8aW50ZXJmYWNlfHByb3RlY3RlZHxpbXBsZW1lbnRzfGluc3RhbmNlb2YpJClbXyRhLXpBLVpcXFxceEEwLVxcXFx1RkZGRl1bXyRhLXpBLVowLTlcXFxceEEwLVxcXFx1RkZGRl0qJC8sdGhpc1tfMHgzYzJhY2MoMHgxNDEpXT0vXigwfFsxLTldWzAtOV0qKSQvLHRoaXNbXzB4M2MyYWNjKDB4ZTYpXT0vJyhbXlxcXFxcXFxcJ118XFxcXFxcXFwnKSonLyx0aGlzW18weDNjMmFjYygweDE2NyldPV8weDM2M2Q1NVtfMHgzYzJhY2MoMHhjNyldLHRoaXNbXzB4M2MyYWNjKDB4MTVkKV09XzB4MzYzZDU1WydIVE1MQWxsQ29sbGVjdGlvbiddLHRoaXNbXzB4M2MyYWNjKDB4MTlmKV09T2JqZWN0W18weDNjMmFjYygweDFhNCldLHRoaXNbJ19nZXRPd25Qcm9wZXJ0eU5hbWVzJ109T2JqZWN0W18weDNjMmFjYygweDEyOSldLHRoaXNbXzB4M2MyYWNjKDB4ZWQpXT1fMHgzNjNkNTVbXzB4M2MyYWNjKDB4MTZmKV0sdGhpc1snX3JlZ0V4cFRvU3RyaW5nJ109UmVnRXhwWydwcm90b3R5cGUnXVtfMHgzYzJhY2MoMHgxNGUpXSx0aGlzW18weDNjMmFjYygweDEzMCldPURhdGVbXzB4M2MyYWNjKDB4ZTMpXVtfMHgzYzJhY2MoMHgxNGUpXTt9W18weDEwZWQyOCgweGZkKV0oXzB4NTg2M2UwLF8weDU2MzY3NSxfMHgyNWRkZTgsXzB4NDIzNWFiKXt2YXIgXzB4NWVhYzk3PV8weDEwZWQyOCxfMHgxNWQyYWU9dGhpcyxfMHg0OGE1NTg9XzB4MjVkZGU4W18weDVlYWM5NygweDFhMildO2Z1bmN0aW9uIF8weDM0YzBkNChfMHgyOTU5ZDAsXzB4M2UzMzNjLF8weDZlYzk2ZSl7dmFyIF8weDI5YWQ3Yj1fMHg1ZWFjOTc7XzB4M2UzMzNjW18weDI5YWQ3YigweDEwMCldPV8weDI5YWQ3YigweGZmKSxfMHgzZTMzM2NbXzB4MjlhZDdiKDB4MTdjKV09XzB4Mjk1OWQwW18weDI5YWQ3YigweDEzNSldLF8weDJhMDk4Yj1fMHg2ZWM5NmVbXzB4MjlhZDdiKDB4MTgyKV1bXzB4MjlhZDdiKDB4MTllKV0sXzB4NmVjOTZlW18weDI5YWQ3YigweDE4MildW18weDI5YWQ3YigweDE5ZSldPV8weDNlMzMzYyxfMHgxNWQyYWVbXzB4MjlhZDdiKDB4MTY4KV0oXzB4M2UzMzNjLF8weDZlYzk2ZSk7fXRyeXtfMHgyNWRkZThbJ2xldmVsJ10rKyxfMHgyNWRkZThbJ2F1dG9FeHBhbmQnXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDEwZCldW18weDVlYWM5NygweDE3MSldKF8weDU2MzY3NSk7dmFyIF8weDVlOTM3ZCxfMHg0ZDQ4MzcsXzB4N2E5NGNlLF8weDEyZTQzNyxfMHg1NDI3M2M9W10sXzB4MzA3NmQzPVtdLF8weDRhMjdkNSxfMHgxZjFhYTA9dGhpc1tfMHg1ZWFjOTcoMHgxM2MpXShfMHg1NjM2NzUpLF8weDFmZThmYz1fMHgxZjFhYTA9PT0nYXJyYXknLF8weDFkOWQzMz0hMHgxLF8weDFmN2NmZT1fMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHgxMjApLF8weDMwODRhZT10aGlzW18weDVlYWM5NygweDE3MyldKF8weDFmMWFhMCksXzB4YzM1YmM3PXRoaXNbXzB4NWVhYzk3KDB4MTNkKV0oXzB4MWYxYWEwKSxfMHg0OGQ5ZTE9XzB4MzA4NGFlfHxfMHhjMzViYzcsXzB4NTkwNDQ5PXt9LF8weDI5ZmMyOD0weDAsXzB4MzFiMDIyPSEweDEsXzB4MmEwOThiLF8weDE0ZTJhNj0vXigoWzEtOV17MX1bMC05XSopfDApJC87aWYoXzB4MjVkZGU4W18weDVlYWM5NygweDE1OSldKXtpZihfMHgxZmU4ZmMpe2lmKF8weDRkNDgzNz1fMHg1NjM2NzVbXzB4NWVhYzk3KDB4ZjQpXSxfMHg0ZDQ4Mzc+XzB4MjVkZGU4W18weDVlYWM5NygweGM4KV0pe2ZvcihfMHg3YTk0Y2U9MHgwLF8weDEyZTQzNz1fMHgyNWRkZThbJ2VsZW1lbnRzJ10sXzB4NWU5MzdkPV8weDdhOTRjZTtfMHg1ZTkzN2Q8XzB4MTJlNDM3O18weDVlOTM3ZCsrKV8weDMwNzZkM1sncHVzaCddKF8weDE1ZDJhZVtfMHg1ZWFjOTcoMHhlNCldKF8weDU0MjczYyxfMHg1NjM2NzUsXzB4MWYxYWEwLF8weDVlOTM3ZCxfMHgyNWRkZTgpKTtfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTQyKV09ITB4MDt9ZWxzZXtmb3IoXzB4N2E5NGNlPTB4MCxfMHgxMmU0Mzc9XzB4NGQ0ODM3LF8weDVlOTM3ZD1fMHg3YTk0Y2U7XzB4NWU5MzdkPF8weDEyZTQzNztfMHg1ZTkzN2QrKylfMHgzMDc2ZDNbXzB4NWVhYzk3KDB4MTcxKV0oXzB4MTVkMmFlW18weDVlYWM5NygweGU0KV0oXzB4NTQyNzNjLF8weDU2MzY3NSxfMHgxZjFhYTAsXzB4NWU5MzdkLF8weDI1ZGRlOCkpO31fMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0rPV8weDMwNzZkM1tfMHg1ZWFjOTcoMHhmNCldO31pZighKF8weDFmMWFhMD09PSdudWxsJ3x8XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4YzcpKSYmIV8weDMwODRhZSYmXzB4MWYxYWEwIT09XzB4NWVhYzk3KDB4MTM3KSYmXzB4MWYxYWEwIT09XzB4NWVhYzk3KDB4MTk0KSYmXzB4MWYxYWEwIT09XzB4NWVhYzk3KDB4MTdmKSl7dmFyIF8weDNhMDA5Mj1fMHg0MjM1YWJbXzB4NWVhYzk3KDB4MTdkKV18fF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxN2QpXTtpZih0aGlzW18weDVlYWM5NygweDE1ZSldKF8weDU2MzY3NSk/KF8weDVlOTM3ZD0weDAsXzB4NTYzNjc1W18weDVlYWM5NygweDEwYSldKGZ1bmN0aW9uKF8weDRiMzMxOSl7dmFyIF8weDNkMmFhOD1fMHg1ZWFjOTc7aWYoXzB4MjlmYzI4KyssXzB4MjVkZGU4W18weDNkMmFhOCgweDExMCldKyssXzB4MjlmYzI4Pl8weDNhMDA5Mil7XzB4MzFiMDIyPSEweDA7cmV0dXJuO31pZighXzB4MjVkZGU4Wydpc0V4cHJlc3Npb25Ub0V2YWx1YXRlJ10mJl8weDI1ZGRlOFtfMHgzZDJhYTgoMHgxYTIpXSYmXzB4MjVkZGU4WydhdXRvRXhwYW5kUHJvcGVydHlDb3VudCddPl8weDI1ZGRlOFsnYXV0b0V4cGFuZExpbWl0J10pe18weDMxYjAyMj0hMHgwO3JldHVybjt9XzB4MzA3NmQzW18weDNkMmFhOCgweDE3MSldKF8weDE1ZDJhZVtfMHgzZDJhYTgoMHhlNCldKF8weDU0MjczYyxfMHg1NjM2NzUsXzB4M2QyYWE4KDB4MTliKSxfMHg1ZTkzN2QrKyxfMHgyNWRkZTgsZnVuY3Rpb24oXzB4NWU3ZWJlKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gXzB4NWU3ZWJlO307fShfMHg0YjMzMTkpKSk7fSkpOnRoaXNbXzB4NWVhYzk3KDB4MTY0KV0oXzB4NTYzNjc1KSYmXzB4NTYzNjc1W18weDVlYWM5NygweDEwYSldKGZ1bmN0aW9uKF8weDc4OWY5LF8weDQwYmZlZCl7dmFyIF8weDU5NTUxNT1fMHg1ZWFjOTc7aWYoXzB4MjlmYzI4KyssXzB4MjVkZGU4W18weDU5NTUxNSgweDExMCldKyssXzB4MjlmYzI4Pl8weDNhMDA5Mil7XzB4MzFiMDIyPSEweDA7cmV0dXJuO31pZighXzB4MjVkZGU4Wydpc0V4cHJlc3Npb25Ub0V2YWx1YXRlJ10mJl8weDI1ZGRlOFtfMHg1OTU1MTUoMHgxYTIpXSYmXzB4MjVkZGU4W18weDU5NTUxNSgweDExMCldPl8weDI1ZGRlOFsnYXV0b0V4cGFuZExpbWl0J10pe18weDMxYjAyMj0hMHgwO3JldHVybjt9dmFyIF8weDE0ZDA5Nj1fMHg0MGJmZWRbXzB4NTk1NTE1KDB4MTRlKV0oKTtfMHgxNGQwOTZbXzB4NTk1NTE1KDB4ZjQpXT4weDY0JiYoXzB4MTRkMDk2PV8weDE0ZDA5Nlsnc2xpY2UnXSgweDAsMHg2NCkrXzB4NTk1NTE1KDB4MWFjKSksXzB4MzA3NmQzW18weDU5NTUxNSgweDE3MSldKF8weDE1ZDJhZVtfMHg1OTU1MTUoMHhlNCldKF8weDU0MjczYyxfMHg1NjM2NzUsXzB4NTk1NTE1KDB4ZWIpLF8weDE0ZDA5NixfMHgyNWRkZTgsZnVuY3Rpb24oXzB4ODQ0OGMyKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gXzB4ODQ0OGMyO307fShfMHg3ODlmOSkpKTt9KSwhXzB4MWQ5ZDMzKXt0cnl7Zm9yKF8weDRhMjdkNSBpbiBfMHg1NjM2NzUpaWYoIShfMHgxZmU4ZmMmJl8weDE0ZTJhNlsndGVzdCddKF8weDRhMjdkNSkpJiYhdGhpc1snX2JsYWNrbGlzdGVkUHJvcGVydHknXShfMHg1NjM2NzUsXzB4NGEyN2Q1LF8weDI1ZGRlOCkpe2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMTApXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO2JyZWFrO31pZighXzB4MjVkZGU4W18weDVlYWM5NygweDFhNSldJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWEyKV0mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMTApXT5fMHgyNWRkZThbXzB4NWVhYzk3KDB4MTQ2KV0pe18weDMxYjAyMj0hMHgwO2JyZWFrO31fMHgzMDc2ZDNbXzB4NWVhYzk3KDB4MTcxKV0oXzB4MTVkMmFlW18weDVlYWM5NygweGQwKV0oXzB4NTQyNzNjLF8weDU5MDQ0OSxfMHg1NjM2NzUsXzB4MWYxYWEwLF8weDRhMjdkNSxfMHgyNWRkZTgpKTt9fWNhdGNoe31pZihfMHg1OTA0NDlbXzB4NWVhYzk3KDB4MTc2KV09ITB4MCxfMHgxZjdjZmUmJihfMHg1OTA0NDlbJ19wX25hbWUnXT0hMHgwKSwhXzB4MzFiMDIyKXt2YXIgXzB4MThjMGY1PVtdW18weDVlYWM5NygweDE0YyldKHRoaXNbXzB4NWVhYzk3KDB4MTUxKV0oXzB4NTYzNjc1KSlbXzB4NWVhYzk3KDB4MTRjKV0odGhpc1tfMHg1ZWFjOTcoMHgxMmUpXShfMHg1NjM2NzUpKTtmb3IoXzB4NWU5MzdkPTB4MCxfMHg0ZDQ4Mzc9XzB4MThjMGY1WydsZW5ndGgnXTtfMHg1ZTkzN2Q8XzB4NGQ0ODM3O18weDVlOTM3ZCsrKWlmKF8weDRhMjdkNT1fMHgxOGMwZjVbXzB4NWU5MzdkXSwhKF8weDFmZThmYyYmXzB4MTRlMmE2W18weDVlYWM5NygweDE3OCldKF8weDRhMjdkNVtfMHg1ZWFjOTcoMHgxNGUpXSgpKSkmJiF0aGlzW18weDVlYWM5NygweDE2MSldKF8weDU2MzY3NSxfMHg0YTI3ZDUsXzB4MjVkZGU4KSYmIV8weDU5MDQ0OVtfMHg1ZWFjOTcoMHhjNSkrXzB4NGEyN2Q1W18weDVlYWM5NygweDE0ZSldKCldKXtpZihfMHgyOWZjMjgrKyxfMHgyNWRkZThbJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50J10rKyxfMHgyOWZjMjg+XzB4M2EwMDkyKXtfMHgzMWIwMjI9ITB4MDticmVhazt9aWYoIV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTUpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDFhMildJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTEwKV0+XzB4MjVkZGU4W18weDVlYWM5NygweDE0NildKXtfMHgzMWIwMjI9ITB4MDticmVhazt9XzB4MzA3NmQzWydwdXNoJ10oXzB4MTVkMmFlW18weDVlYWM5NygweGQwKV0oXzB4NTQyNzNjLF8weDU5MDQ0OSxfMHg1NjM2NzUsXzB4MWYxYWEwLF8weDRhMjdkNSxfMHgyNWRkZTgpKTt9fX19fWlmKF8weDU4NjNlMFtfMHg1ZWFjOTcoMHgxMDApXT1fMHgxZjFhYTAsXzB4NDhkOWUxPyhfMHg1ODYzZTBbJ3ZhbHVlJ109XzB4NTYzNjc1W18weDVlYWM5NygweGVlKV0oKSx0aGlzW18weDVlYWM5NygweDEzMyldKF8weDFmMWFhMCxfMHg1ODYzZTAsXzB4MjVkZGU4LF8weDQyMzVhYikpOl8weDFmMWFhMD09PV8weDVlYWM5NygweGQ3KT9fMHg1ODYzZTBbXzB4NWVhYzk3KDB4MWEwKV09dGhpc1tfMHg1ZWFjOTcoMHgxMzApXVtfMHg1ZWFjOTcoMHgxMWMpXShfMHg1NjM2NzUpOl8weDFmMWFhMD09PV8weDVlYWM5NygweDE3Zik/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPV8weDU2MzY3NVtfMHg1ZWFjOTcoMHgxNGUpXSgpOl8weDFmMWFhMD09PSdSZWdFeHAnP18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxYTApXT10aGlzW18weDVlYWM5NygweGU3KV1bXzB4NWVhYzk3KDB4MTFjKV0oXzB4NTYzNjc1KTpfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHhjNikmJnRoaXNbXzB4NWVhYzk3KDB4ZWQpXT9fMHg1ODYzZTBbXzB4NWVhYzk3KDB4MWEwKV09dGhpc1snX1N5bWJvbCddW18weDVlYWM5NygweGUzKV1bXzB4NWVhYzk3KDB4MTRlKV1bJ2NhbGwnXShfMHg1NjM2NzUpOiFfMHgyNWRkZThbJ2RlcHRoJ10mJiEoXzB4MWYxYWEwPT09J251bGwnfHxfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHhjNykpJiYoZGVsZXRlIF8weDU4NjNlMFsndmFsdWUnXSxfMHg1ODYzZTBbJ2NhcHBlZCddPSEweDApLF8weDMxYjAyMiYmKF8weDU4NjNlMFtfMHg1ZWFjOTcoMHgxMTYpXT0hMHgwKSxfMHgyYTA5OGI9XzB4MjVkZGU4W18weDVlYWM5NygweDE4MildW18weDVlYWM5NygweDE5ZSldLF8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxODIpXVtfMHg1ZWFjOTcoMHgxOWUpXT1fMHg1ODYzZTAsdGhpc1tfMHg1ZWFjOTcoMHgxNjgpXShfMHg1ODYzZTAsXzB4MjVkZGU4KSxfMHgzMDc2ZDNbXzB4NWVhYzk3KDB4ZjQpXSl7Zm9yKF8weDVlOTM3ZD0weDAsXzB4NGQ0ODM3PV8weDMwNzZkM1tfMHg1ZWFjOTcoMHhmNCldO18weDVlOTM3ZDxfMHg0ZDQ4Mzc7XzB4NWU5MzdkKyspXzB4MzA3NmQzW18weDVlOTM3ZF0oXzB4NWU5MzdkKTt9XzB4NTQyNzNjW18weDVlYWM5NygweGY0KV0mJihfMHg1ODYzZTBbXzB4NWVhYzk3KDB4MTdkKV09XzB4NTQyNzNjKTt9Y2F0Y2goXzB4NWI2YTYyKXtfMHgzNGMwZDQoXzB4NWI2YTYyLF8weDU4NjNlMCxfMHgyNWRkZTgpO31yZXR1cm4gdGhpc1tfMHg1ZWFjOTcoMHgxNGYpXShfMHg1NjM2NzUsXzB4NTg2M2UwKSx0aGlzWydfdHJlZU5vZGVQcm9wZXJ0aWVzQWZ0ZXJGdWxsVmFsdWUnXShfMHg1ODYzZTAsXzB4MjVkZGU4KSxfMHgyNWRkZThbJ25vZGUnXVtfMHg1ZWFjOTcoMHgxOWUpXT1fMHgyYTA5OGIsXzB4MjVkZGU4WydsZXZlbCddLS0sXzB4MjVkZGU4W18weDVlYWM5NygweDFhMildPV8weDQ4YTU1OCxfMHgyNWRkZThbJ2F1dG9FeHBhbmQnXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDEwZCldW18weDVlYWM5NygweDE2MildKCksXzB4NTg2M2UwO31bXzB4MTBlZDI4KDB4MTJlKV0oXzB4NWU3ZTQ1KXt2YXIgXzB4MTExZGQxPV8weDEwZWQyODtyZXR1cm4gT2JqZWN0W18weDExMWRkMSgweDE5MCldP09iamVjdFtfMHgxMTFkZDEoMHgxOTApXShfMHg1ZTdlNDUpOltdO31bXzB4MTBlZDI4KDB4MTVlKV0oXzB4NWI2OWE5KXt2YXIgXzB4NTVhYzI3PV8weDEwZWQyODtyZXR1cm4hIShfMHg1YjY5YTkmJl8weDM2M2Q1NVtfMHg1NWFjMjcoMHgxOWIpXSYmdGhpc1tfMHg1NWFjMjcoMHgxNTIpXShfMHg1YjY5YTkpPT09XzB4NTVhYzI3KDB4MTQ3KSYmXzB4NWI2OWE5W18weDU1YWMyNygweDEwYSldKTt9WydfYmxhY2tsaXN0ZWRQcm9wZXJ0eSddKF8weDI4YjE1ZixfMHg1ODFkZDYsXzB4MzIyMjZjKXt2YXIgXzB4MjQ3YTc0PV8weDEwZWQyODtyZXR1cm4gXzB4MzIyMjZjW18weDI0N2E3NCgweGVmKV0/dHlwZW9mIF8weDI4YjE1ZltfMHg1ODFkZDZdPT1fMHgyNDdhNzQoMHgxMjApOiEweDE7fVtfMHgxMGVkMjgoMHgxM2MpXShfMHgzNTIxMzYpe3ZhciBfMHg0NzQ5OGU9XzB4MTBlZDI4LF8weDQ1NjgyMj0nJztyZXR1cm4gXzB4NDU2ODIyPXR5cGVvZiBfMHgzNTIxMzYsXzB4NDU2ODIyPT09XzB4NDc0OThlKDB4MTQzKT90aGlzW18weDQ3NDk4ZSgweDE1MildKF8weDM1MjEzNik9PT1fMHg0NzQ5OGUoMHgxODApP18weDQ1NjgyMj1fMHg0NzQ5OGUoMHgxYTcpOnRoaXNbXzB4NDc0OThlKDB4MTUyKV0oXzB4MzUyMTM2KT09PV8weDQ3NDk4ZSgweGRkKT9fMHg0NTY4MjI9J2RhdGUnOnRoaXNbJ19vYmplY3RUb1N0cmluZyddKF8weDM1MjEzNik9PT1fMHg0NzQ5OGUoMHhiYik/XzB4NDU2ODIyPV8weDQ3NDk4ZSgweDE3Zik6XzB4MzUyMTM2PT09bnVsbD9fMHg0NTY4MjI9XzB4NDc0OThlKDB4MWI0KTpfMHgzNTIxMzZbXzB4NDc0OThlKDB4MTBlKV0mJihfMHg0NTY4MjI9XzB4MzUyMTM2W18weDQ3NDk4ZSgweDEwZSldW18weDQ3NDk4ZSgweGMxKV18fF8weDQ1NjgyMik6XzB4NDU2ODIyPT09J3VuZGVmaW5lZCcmJnRoaXNbXzB4NDc0OThlKDB4MTVkKV0mJl8weDM1MjEzNiBpbnN0YW5jZW9mIHRoaXNbXzB4NDc0OThlKDB4MTVkKV0mJihfMHg0NTY4MjI9XzB4NDc0OThlKDB4YzApKSxfMHg0NTY4MjI7fVsnX29iamVjdFRvU3RyaW5nJ10oXzB4MWRlNjZjKXt2YXIgXzB4NDczZTY1PV8weDEwZWQyODtyZXR1cm4gT2JqZWN0W18weDQ3M2U2NSgweGUzKV1bJ3RvU3RyaW5nJ11bXzB4NDczZTY1KDB4MTFjKV0oXzB4MWRlNjZjKTt9W18weDEwZWQyOCgweDE3MyldKF8weDFiNzMxYSl7dmFyIF8weGI2MGIxND1fMHgxMGVkMjg7cmV0dXJuIF8weDFiNzMxYT09PV8weGI2MGIxNCgweGUxKXx8XzB4MWI3MzFhPT09XzB4YjYwYjE0KDB4MTAyKXx8XzB4MWI3MzFhPT09XzB4YjYwYjE0KDB4ZGUpO31bJ19pc1ByaW1pdGl2ZVdyYXBwZXJUeXBlJ10oXzB4MzMxYjA5KXt2YXIgXzB4MTZkN2Q5PV8weDEwZWQyODtyZXR1cm4gXzB4MzMxYjA5PT09XzB4MTZkN2Q5KDB4MTU0KXx8XzB4MzMxYjA5PT09XzB4MTZkN2Q5KDB4MTM3KXx8XzB4MzMxYjA5PT09XzB4MTZkN2Q5KDB4MTMxKTt9W18weDEwZWQyOCgweGU0KV0oXzB4MjljOTliLF8weDJmNDg3NixfMHgxZDJmNGYsXzB4MzA3NmJjLF8weDE3ODMyNyxfMHgyZWVjNDkpe3ZhciBfMHg0NThmNGY9dGhpcztyZXR1cm4gZnVuY3Rpb24oXzB4NTMwZjk5KXt2YXIgXzB4Mzc0NzQ2PV8weDNmZjksXzB4NjBkZjgzPV8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxOWUpXSxfMHgyNWEyMDk9XzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweDFhOSldLF8weDI5MGU5OT1fMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bJ3BhcmVudCddO18weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHhjZSldPV8weDYwZGY4MyxfMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4MWE5KV09dHlwZW9mIF8weDMwNzZiYz09XzB4Mzc0NzQ2KDB4ZGUpP18weDMwNzZiYzpfMHg1MzBmOTksXzB4MjljOTliW18weDM3NDc0NigweDE3MSldKF8weDQ1OGY0ZltfMHgzNzQ3NDYoMHgxYjUpXShfMHgyZjQ4NzYsXzB4MWQyZjRmLF8weDMwNzZiYyxfMHgxNzgzMjcsXzB4MmVlYzQ5KSksXzB4MTc4MzI3Wydub2RlJ11bXzB4Mzc0NzQ2KDB4Y2UpXT1fMHgyOTBlOTksXzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweDFhOSldPV8weDI1YTIwOTt9O31bXzB4MTBlZDI4KDB4ZDApXShfMHg4M2IwZSxfMHg0ZGJmYjcsXzB4NTc4MjVlLF8weDUwZjI1ZSxfMHhmNzQyY2IsXzB4NWUwNDAyLF8weDJkZjQxNSl7dmFyIF8weDRmZjgwYz1fMHgxMGVkMjgsXzB4M2MyM2Q0PXRoaXM7cmV0dXJuIF8weDRkYmZiN1tfMHg0ZmY4MGMoMHhjNSkrXzB4Zjc0MmNiWyd0b1N0cmluZyddKCldPSEweDAsZnVuY3Rpb24oXzB4M2FiZDY1KXt2YXIgXzB4NGFjOTVlPV8weDRmZjgwYyxfMHgyYzljM2Y9XzB4NWUwNDAyW18weDRhYzk1ZSgweDE4MildWydjdXJyZW50J10sXzB4MjYzNWJkPV8weDVlMDQwMltfMHg0YWM5NWUoMHgxODIpXVtfMHg0YWM5NWUoMHgxYTkpXSxfMHhjMmUwZD1fMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHhjZSldO18weDVlMDQwMlsnbm9kZSddW18weDRhYzk1ZSgweGNlKV09XzB4MmM5YzNmLF8weDVlMDQwMltfMHg0YWM5NWUoMHgxODIpXVsnaW5kZXgnXT1fMHgzYWJkNjUsXzB4ODNiMGVbXzB4NGFjOTVlKDB4MTcxKV0oXzB4M2MyM2Q0W18weDRhYzk1ZSgweDFiNSldKF8weDU3ODI1ZSxfMHg1MGYyNWUsXzB4Zjc0MmNiLF8weDVlMDQwMixfMHgyZGY0MTUpKSxfMHg1ZTA0MDJbJ25vZGUnXVtfMHg0YWM5NWUoMHhjZSldPV8weGMyZTBkLF8weDVlMDQwMlsnbm9kZSddW18weDRhYzk1ZSgweDFhOSldPV8weDI2MzViZDt9O31bXzB4MTBlZDI4KDB4MWI1KV0oXzB4ZjM4YWMzLF8weDViZGNmZCxfMHgyOTBlNjIsXzB4Nzk5MGNmLF8weDQ4ZTYwNCl7dmFyIF8weDFhYTU3ZT1fMHgxMGVkMjgsXzB4MmJmZjhjPXRoaXM7XzB4NDhlNjA0fHwoXzB4NDhlNjA0PWZ1bmN0aW9uKF8weDQzYmE4ZixfMHg1OTdkMjYpe3JldHVybiBfMHg0M2JhOGZbXzB4NTk3ZDI2XTt9KTt2YXIgXzB4NDhhMjBlPV8weDI5MGU2MltfMHgxYWE1N2UoMHgxNGUpXSgpLF8weGQ2ODczZD1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTM4KV18fHt9LF8weDc0MjZmMz1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTU5KV0sXzB4M2YzMTk5PV8weDc5OTBjZltfMHgxYWE1N2UoMHgxYTUpXTt0cnl7dmFyIF8weDE4YjcwMj10aGlzWydfaXNNYXAnXShfMHhmMzhhYzMpLF8weDVhMWFlND1fMHg0OGEyMGU7XzB4MThiNzAyJiZfMHg1YTFhZTRbMHgwXT09PSdcXFxceDI3JyYmKF8weDVhMWFlND1fMHg1YTFhZTRbJ3N1YnN0ciddKDB4MSxfMHg1YTFhZTRbXzB4MWFhNTdlKDB4ZjQpXS0weDIpKTt2YXIgXzB4NmFmMWExPV8weDc5OTBjZltfMHgxYWE1N2UoMHgxMzgpXT1fMHhkNjg3M2RbJ19wXycrXzB4NWExYWU0XTtfMHg2YWYxYTEmJihfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTU5KV09XzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldKzB4MSksXzB4Nzk5MGNmW18weDFhYTU3ZSgweDFhNSldPSEhXzB4NmFmMWExO3ZhciBfMHgyMzMzZDc9dHlwZW9mIF8weDI5MGU2Mj09XzB4MWFhNTdlKDB4YzYpLF8weDIyY2JhMD17J25hbWUnOl8weDIzMzNkN3x8XzB4MThiNzAyP18weDQ4YTIwZTp0aGlzWydfcHJvcGVydHlOYW1lJ10oXzB4NDhhMjBlKX07aWYoXzB4MjMzM2Q3JiYoXzB4MjJjYmEwW18weDFhYTU3ZSgweGM2KV09ITB4MCksIShfMHg1YmRjZmQ9PT1fMHgxYWE1N2UoMHgxYTcpfHxfMHg1YmRjZmQ9PT1fMHgxYWE1N2UoMHgxMmYpKSl7dmFyIF8weDE1NmI2ZD10aGlzW18weDFhYTU3ZSgweDE5ZildKF8weGYzOGFjMyxfMHgyOTBlNjIpO2lmKF8weDE1NmI2ZCYmKF8weDE1NmI2ZFsnc2V0J10mJihfMHgyMmNiYTBbJ3NldHRlciddPSEweDApLF8weDE1NmI2ZFtfMHgxYWE1N2UoMHgxMDcpXSYmIV8weDZhZjFhMSYmIV8weDc5OTBjZltfMHgxYWE1N2UoMHgxOTgpXSkpcmV0dXJuIF8weDIyY2JhMFsnZ2V0dGVyJ109ITB4MCx0aGlzW18weDFhYTU3ZSgweDE3YSldKF8weDIyY2JhMCxfMHg3OTkwY2YpLF8weDIyY2JhMDt9dmFyIF8weDM2ZmQyNTt0cnl7XzB4MzZmZDI1PV8weDQ4ZTYwNChfMHhmMzhhYzMsXzB4MjkwZTYyKTt9Y2F0Y2goXzB4MjEwMDgyKXtyZXR1cm4gXzB4MjJjYmEwPXsnbmFtZSc6XzB4NDhhMjBlLCd0eXBlJzpfMHgxYWE1N2UoMHhmZiksJ2Vycm9yJzpfMHgyMTAwODJbXzB4MWFhNTdlKDB4MTM1KV19LHRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZiksXzB4MjJjYmEwO312YXIgXzB4MTVjMDFlPXRoaXNbXzB4MWFhNTdlKDB4MTNjKV0oXzB4MzZmZDI1KSxfMHgxYWFiOTk9dGhpc1tfMHgxYWE1N2UoMHgxNzMpXShfMHgxNWMwMWUpO2lmKF8weDIyY2JhMFsndHlwZSddPV8weDE1YzAxZSxfMHgxYWFiOTkpdGhpc1tfMHgxYWE1N2UoMHgxN2EpXShfMHgyMmNiYTAsXzB4Nzk5MGNmLF8weDM2ZmQyNSxmdW5jdGlvbigpe3ZhciBfMHg0ZjhkNzU9XzB4MWFhNTdlO18weDIyY2JhMFtfMHg0ZjhkNzUoMHgxYTApXT1fMHgzNmZkMjVbJ3ZhbHVlT2YnXSgpLCFfMHg2YWYxYTEmJl8weDJiZmY4Y1tfMHg0ZjhkNzUoMHgxMzMpXShfMHgxNWMwMWUsXzB4MjJjYmEwLF8weDc5OTBjZix7fSk7fSk7ZWxzZXt2YXIgXzB4MzM1ZjU5PV8weDc5OTBjZltfMHgxYWE1N2UoMHgxYTIpXSYmXzB4Nzk5MGNmWydsZXZlbCddPF8weDc5OTBjZlsnYXV0b0V4cGFuZE1heERlcHRoJ10mJl8weDc5OTBjZltfMHgxYWE1N2UoMHgxMGQpXVtfMHgxYWE1N2UoMHhkNCldKF8weDM2ZmQyNSk8MHgwJiZfMHgxNWMwMWUhPT1fMHgxYWE1N2UoMHgxMjApJiZfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTEwKV08XzB4Nzk5MGNmWydhdXRvRXhwYW5kTGltaXQnXTtfMHgzMzVmNTl8fF8weDc5OTBjZltfMHgxYWE1N2UoMHgxODgpXTxfMHg3NDI2ZjN8fF8weDZhZjFhMT8odGhpc1snc2VyaWFsaXplJ10oXzB4MjJjYmEwLF8weDM2ZmQyNSxfMHg3OTkwY2YsXzB4NmFmMWExfHx7fSksdGhpc1tfMHgxYWE1N2UoMHgxNGYpXShfMHgzNmZkMjUsXzB4MjJjYmEwKSk6dGhpc1tfMHgxYWE1N2UoMHgxN2EpXShfMHgyMmNiYTAsXzB4Nzk5MGNmLF8weDM2ZmQyNSxmdW5jdGlvbigpe3ZhciBfMHg1M2QwMDA9XzB4MWFhNTdlO18weDE1YzAxZT09PV8weDUzZDAwMCgweDFiNCl8fF8weDE1YzAxZT09PV8weDUzZDAwMCgweGM3KXx8KGRlbGV0ZSBfMHgyMmNiYTBbXzB4NTNkMDAwKDB4MWEwKV0sXzB4MjJjYmEwW18weDUzZDAwMCgweDE4MyldPSEweDApO30pO31yZXR1cm4gXzB4MjJjYmEwO31maW5hbGx5e18weDc5OTBjZltfMHgxYWE1N2UoMHgxMzgpXT1fMHhkNjg3M2QsXzB4Nzk5MGNmW18weDFhYTU3ZSgweDE1OSldPV8weDc0MjZmMyxfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWE1KV09XzB4M2YzMTk5O319WydfY2FwSWZTdHJpbmcnXShfMHg5NjAyMGMsXzB4NGU0Y2MzLF8weGFlYWIzNixfMHgxZTU2NTcpe3ZhciBfMHgyMzU2ZTQ9XzB4MTBlZDI4LF8weDJiYmZhNj1fMHgxZTU2NTdbJ3N0ckxlbmd0aCddfHxfMHhhZWFiMzZbXzB4MjM1NmU0KDB4MTA4KV07aWYoKF8weDk2MDIwYz09PV8weDIzNTZlNCgweDEwMil8fF8weDk2MDIwYz09PV8weDIzNTZlNCgweDEzNykpJiZfMHg0ZTRjYzNbJ3ZhbHVlJ10pe2xldCBfMHgyZTBkMjE9XzB4NGU0Y2MzWyd2YWx1ZSddW18weDIzNTZlNCgweGY0KV07XzB4YWVhYjM2WydhbGxTdHJMZW5ndGgnXSs9XzB4MmUwZDIxLF8weGFlYWIzNlsnYWxsU3RyTGVuZ3RoJ10+XzB4YWVhYjM2W18weDIzNTZlNCgweGYzKV0/KF8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxODMpXT0nJyxkZWxldGUgXzB4NGU0Y2MzWyd2YWx1ZSddKTpfMHgyZTBkMjE+XzB4MmJiZmE2JiYoXzB4NGU0Y2MzW18weDIzNTZlNCgweDE4MyldPV8weDRlNGNjM1tfMHgyMzU2ZTQoMHgxYTApXVtfMHgyMzU2ZTQoMHgxOGIpXSgweDAsXzB4MmJiZmE2KSxkZWxldGUgXzB4NGU0Y2MzW18weDIzNTZlNCgweDFhMCldKTt9fVtfMHgxMGVkMjgoMHgxNjQpXShfMHgzZWZlZjMpe3ZhciBfMHgzNDg4YWM9XzB4MTBlZDI4O3JldHVybiEhKF8weDNlZmVmMyYmXzB4MzYzZDU1W18weDM0ODhhYygweGViKV0mJnRoaXNbXzB4MzQ4OGFjKDB4MTUyKV0oXzB4M2VmZWYzKT09PV8weDM0ODhhYygweDFhZikmJl8weDNlZmVmM1tfMHgzNDg4YWMoMHgxMGEpXSk7fVtfMHgxMGVkMjgoMHhjNCldKF8weDExYzM1Yil7dmFyIF8weDIzNDUzZD1fMHgxMGVkMjg7aWYoXzB4MTFjMzViW18weDIzNDUzZCgweGY2KV0oL15cXFxcZCskLykpcmV0dXJuIF8weDExYzM1Yjt2YXIgXzB4NGY2YTAzO3RyeXtfMHg0ZjZhMDM9SlNPTltfMHgyMzQ1M2QoMHhmMSldKCcnK18weDExYzM1Yik7fWNhdGNoe18weDRmNmEwMz0nXFxcXHgyMicrdGhpc1tfMHgyMzQ1M2QoMHgxNTIpXShfMHgxMWMzNWIpKydcXFxceDIyJzt9cmV0dXJuIF8weDRmNmEwM1tfMHgyMzQ1M2QoMHhmNildKC9eXFxcIihbYS16QS1aX11bYS16QS1aXzAtOV0qKVxcXCIkLyk/XzB4NGY2YTAzPV8weDRmNmEwM1snc3Vic3RyJ10oMHgxLF8weDRmNmEwM1snbGVuZ3RoJ10tMHgyKTpfMHg0ZjZhMDM9XzB4NGY2YTAzW18weDIzNDUzZCgweDE2NildKC8nL2csJ1xcXFx4NWNcXFxceDI3JylbJ3JlcGxhY2UnXSgvXFxcXFxcXFxcXFwiL2csJ1xcXFx4MjInKVsncmVwbGFjZSddKC8oXlxcXCJ8XFxcIiQpL2csJ1xcXFx4MjcnKSxfMHg0ZjZhMDM7fVtfMHgxMGVkMjgoMHgxN2EpXShfMHg1NWNjNDcsXzB4MTFiYWIzLF8weDQxNzE4ZixfMHgxNjNiNmEpe3ZhciBfMHg0N2M5MDI9XzB4MTBlZDI4O3RoaXNbXzB4NDdjOTAyKDB4MTY4KV0oXzB4NTVjYzQ3LF8weDExYmFiMyksXzB4MTYzYjZhJiZfMHgxNjNiNmEoKSx0aGlzWydfYWRkaXRpb25hbE1ldGFkYXRhJ10oXzB4NDE3MThmLF8weDU1Y2M0NyksdGhpc1snX3RyZWVOb2RlUHJvcGVydGllc0FmdGVyRnVsbFZhbHVlJ10oXzB4NTVjYzQ3LF8weDExYmFiMyk7fVtfMHgxMGVkMjgoMHgxNjgpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KXt2YXIgXzB4NDljNjllPV8weDEwZWQyODt0aGlzW18weDQ5YzY5ZSgweDEyYildKF8weDNmOGIzYSxfMHg0ZDU4ODQpLHRoaXNbXzB4NDljNjllKDB4Y2EpXShfMHgzZjhiM2EsXzB4NGQ1ODg0KSx0aGlzW18weDQ5YzY5ZSgweDE4ZSldKF8weDNmOGIzYSxfMHg0ZDU4ODQpLHRoaXNbJ19zZXROb2RlUGVybWlzc2lvbnMnXShfMHgzZjhiM2EsXzB4NGQ1ODg0KTt9W18weDEwZWQyOCgweDEyYildKF8weDI0ZDVmOCxfMHgxNGVhZWEpe31bXzB4MTBlZDI4KDB4Y2EpXShfMHg1NzZhMzIsXzB4Njg3YzUpe31bXzB4MTBlZDI4KDB4YmQpXShfMHg0ODljOWUsXzB4Zjc2OTU3KXt9W18weDEwZWQyOCgweDE0MCldKF8weDQwYmQ2Yyl7cmV0dXJuIF8weDQwYmQ2Yz09PXRoaXNbJ191bmRlZmluZWQnXTt9W18weDEwZWQyOCgweGYyKV0oXzB4NTlkYmQ3LF8weDM5Yjk5Myl7dmFyIF8weDRhYWIzND1fMHgxMGVkMjg7dGhpc1tfMHg0YWFiMzQoMHhiZCldKF8weDU5ZGJkNyxfMHgzOWI5OTMpLHRoaXNbXzB4NGFhYjM0KDB4MTk2KV0oXzB4NTlkYmQ3KSxfMHgzOWI5OTNbXzB4NGFhYjM0KDB4ZjkpXSYmdGhpc1snX3NvcnRQcm9wcyddKF8weDU5ZGJkNyksdGhpc1tfMHg0YWFiMzQoMHgxNWYpXShfMHg1OWRiZDcsXzB4MzliOTkzKSx0aGlzW18weDRhYWIzNCgweGUyKV0oXzB4NTlkYmQ3LF8weDM5Yjk5MyksdGhpc1tfMHg0YWFiMzQoMHgxMTEpXShfMHg1OWRiZDcpO31bXzB4MTBlZDI4KDB4MTRmKV0oXzB4MjUxOTY1LF8weDliOTNjZCl7dmFyIF8weDgzY2JkND1fMHgxMGVkMjg7bGV0IF8weGNkMzkzZjt0cnl7XzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldJiYoXzB4Y2QzOTNmPV8weDM2M2Q1NVtfMHg4M2NiZDQoMHgxNzQpXVsnZXJyb3InXSxfMHgzNjNkNTVbXzB4ODNjYmQ0KDB4MTc0KV1bXzB4ODNjYmQ0KDB4MTdjKV09ZnVuY3Rpb24oKXt9KSxfMHgyNTE5NjUmJnR5cGVvZiBfMHgyNTE5NjVbXzB4ODNjYmQ0KDB4ZjQpXT09XzB4ODNjYmQ0KDB4ZGUpJiYoXzB4OWI5M2NkW18weDgzY2JkNCgweGY0KV09XzB4MjUxOTY1W18weDgzY2JkNCgweGY0KV0pO31jYXRjaHt9ZmluYWxseXtfMHhjZDM5M2YmJihfMHgzNjNkNTVbXzB4ODNjYmQ0KDB4MTc0KV1bXzB4ODNjYmQ0KDB4MTdjKV09XzB4Y2QzOTNmKTt9aWYoXzB4OWI5M2NkW18weDgzY2JkNCgweDEwMCldPT09XzB4ODNjYmQ0KDB4ZGUpfHxfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MTAwKV09PT1fMHg4M2NiZDQoMHgxMzEpKXtpZihpc05hTihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV0pKV8weDliOTNjZFsnbmFuJ109ITB4MCxkZWxldGUgXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldO2Vsc2Ugc3dpdGNoKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXSl7Y2FzZSBOdW1iZXJbXzB4ODNjYmQ0KDB4MTkyKV06XzB4OWI5M2NkW18weDgzY2JkNCgweDE3NSldPSEweDAsZGVsZXRlIF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXTticmVhaztjYXNlIE51bWJlcltfMHg4M2NiZDQoMHgxODUpXTpfMHg5YjkzY2RbJ25lZ2F0aXZlSW5maW5pdHknXT0hMHgwLGRlbGV0ZSBfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV07YnJlYWs7Y2FzZSAweDA6dGhpc1tfMHg4M2NiZDQoMHgxMDEpXShfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV0pJiYoXzB4OWI5M2NkW18weDgzY2JkNCgweDEyNCldPSEweDApO2JyZWFrO319ZWxzZSBfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MTAwKV09PT1fMHg4M2NiZDQoMHgxMjApJiZ0eXBlb2YgXzB4MjUxOTY1W18weDgzY2JkNCgweGMxKV09PV8weDgzY2JkNCgweDEwMikmJl8weDI1MTk2NVtfMHg4M2NiZDQoMHhjMSldJiZfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4YzEpXSYmXzB4MjUxOTY1WyduYW1lJ10hPT1fMHg5YjkzY2RbXzB4ODNjYmQ0KDB4YzEpXSYmKF8weDliOTNjZFtfMHg4M2NiZDQoMHhkYSldPV8weDI1MTk2NVsnbmFtZSddKTt9W18weDEwZWQyOCgweDEwMSldKF8weGRjNzJmNil7dmFyIF8weDM5NmYzMj1fMHgxMGVkMjg7cmV0dXJuIDB4MS9fMHhkYzcyZjY9PT1OdW1iZXJbXzB4Mzk2ZjMyKDB4MTg1KV07fVtfMHgxMGVkMjgoMHgxMTQpXShfMHhjNDlmNTkpe3ZhciBfMHgxNWQzMWE9XzB4MTBlZDI4OyFfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTdkKV18fCFfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTdkKV1bJ2xlbmd0aCddfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTAwKV09PT1fMHgxNWQzMWEoMHgxYTcpfHxfMHhjNDlmNTlbXzB4MTVkMzFhKDB4MTAwKV09PT1fMHgxNWQzMWEoMHhlYil8fF8weGM0OWY1OVtfMHgxNWQzMWEoMHgxMDApXT09PV8weDE1ZDMxYSgweDE5Yil8fF8weGM0OWY1OVtfMHgxNWQzMWEoMHgxN2QpXVtfMHgxNWQzMWEoMHgxN2UpXShmdW5jdGlvbihfMHg1MjFhNjYsXzB4MzAzN2I5KXt2YXIgXzB4MTliM2M4PV8weDE1ZDMxYSxfMHgzMDc0MGY9XzB4NTIxYTY2W18weDE5YjNjOCgweGMxKV1bXzB4MTliM2M4KDB4MTk5KV0oKSxfMHgzNzdmZjE9XzB4MzAzN2I5W18weDE5YjNjOCgweGMxKV1bJ3RvTG93ZXJDYXNlJ10oKTtyZXR1cm4gXzB4MzA3NDBmPF8weDM3N2ZmMT8tMHgxOl8weDMwNzQwZj5fMHgzNzdmZjE/MHgxOjB4MDt9KTt9WydfYWRkRnVuY3Rpb25zTm9kZSddKF8weDI0ZjE0NixfMHgzMDRmZGEpe3ZhciBfMHgyYTBmMTU9XzB4MTBlZDI4O2lmKCEoXzB4MzA0ZmRhW18weDJhMGYxNSgweGVmKV18fCFfMHgyNGYxNDZbXzB4MmEwZjE1KDB4MTdkKV18fCFfMHgyNGYxNDZbXzB4MmEwZjE1KDB4MTdkKV1bXzB4MmEwZjE1KDB4ZjQpXSkpe2Zvcih2YXIgXzB4MTRjOWY1PVtdLF8weDRkOWVlND1bXSxfMHg0ODhmNzk9MHgwLF8weDEwMWEzND1fMHgyNGYxNDZbXzB4MmEwZjE1KDB4MTdkKV1bXzB4MmEwZjE1KDB4ZjQpXTtfMHg0ODhmNzk8XzB4MTAxYTM0O18weDQ4OGY3OSsrKXt2YXIgXzB4MTk2NTFmPV8weDI0ZjE0NltfMHgyYTBmMTUoMHgxN2QpXVtfMHg0ODhmNzldO18weDE5NjUxZltfMHgyYTBmMTUoMHgxMDApXT09PV8weDJhMGYxNSgweDEyMCk/XzB4MTRjOWY1W18weDJhMGYxNSgweDE3MSldKF8weDE5NjUxZik6XzB4NGQ5ZWU0WydwdXNoJ10oXzB4MTk2NTFmKTt9aWYoISghXzB4NGQ5ZWU0W18weDJhMGYxNSgweGY0KV18fF8weDE0YzlmNVsnbGVuZ3RoJ108PTB4MSkpe18weDI0ZjE0NlsncHJvcHMnXT1fMHg0ZDllZTQ7dmFyIF8weDIzMGJlYz17J2Z1bmN0aW9uc05vZGUnOiEweDAsJ3Byb3BzJzpfMHgxNGM5ZjV9O3RoaXNbXzB4MmEwZjE1KDB4MTJiKV0oXzB4MjMwYmVjLF8weDMwNGZkYSksdGhpc1tfMHgyYTBmMTUoMHhiZCldKF8weDIzMGJlYyxfMHgzMDRmZGEpLHRoaXNbXzB4MmEwZjE1KDB4MTk2KV0oXzB4MjMwYmVjKSx0aGlzW18weDJhMGYxNSgweGZlKV0oXzB4MjMwYmVjLF8weDMwNGZkYSksXzB4MjMwYmVjWydpZCddKz0nXFxcXHgyMGYnLF8weDI0ZjE0NlsncHJvcHMnXVtfMHgyYTBmMTUoMHgxYWQpXShfMHgyMzBiZWMpO319fVtfMHgxMGVkMjgoMHhlMildKF8weDQ2OGU5OSxfMHg0Mzg4ZjApe31bJ19zZXROb2RlRXhwYW5kYWJsZVN0YXRlJ10oXzB4NWViNzE3KXt9W18weDEwZWQyOCgweDEyMSldKF8weDM4YzA1Yyl7dmFyIF8weDFhZWUxYT1fMHgxMGVkMjg7cmV0dXJuIEFycmF5W18weDFhZWUxYSgweDE3MildKF8weDM4YzA1Yyl8fHR5cGVvZiBfMHgzOGMwNWM9PV8weDFhZWUxYSgweDE0MykmJnRoaXNbXzB4MWFlZTFhKDB4MTUyKV0oXzB4MzhjMDVjKT09PV8weDFhZWUxYSgweDE4MCk7fVsnX3NldE5vZGVQZXJtaXNzaW9ucyddKF8weDRlZWZhMCxfMHgxNzA1YTkpe31bXzB4MTBlZDI4KDB4MTExKV0oXzB4NTE2OTA2KXt2YXIgXzB4MjM2OTA2PV8weDEwZWQyODtkZWxldGUgXzB4NTE2OTA2W18weDIzNjkwNigweDEwZildLGRlbGV0ZSBfMHg1MTY5MDZbJ19oYXNTZXRPbkl0c1BhdGgnXSxkZWxldGUgXzB4NTE2OTA2W18weDIzNjkwNigweDEyNSldO31bXzB4MTBlZDI4KDB4MThlKV0oXzB4MjNjMWMyLF8weDI5YTIxYil7fX1sZXQgXzB4NGU3ZDdkPW5ldyBfMHgzMjhiZGUoKSxfMHgzODg2ZWE9eydwcm9wcyc6MHg2NCwnZWxlbWVudHMnOjB4NjQsJ3N0ckxlbmd0aCc6MHg0MDAqMHgzMiwndG90YWxTdHJMZW5ndGgnOjB4NDAwKjB4MzIsJ2F1dG9FeHBhbmRMaW1pdCc6MHgxMzg4LCdhdXRvRXhwYW5kTWF4RGVwdGgnOjB4YX0sXzB4MzBjNTU3PXsncHJvcHMnOjB4NSwnZWxlbWVudHMnOjB4NSwnc3RyTGVuZ3RoJzoweDEwMCwndG90YWxTdHJMZW5ndGgnOjB4MTAwKjB4MywnYXV0b0V4cGFuZExpbWl0JzoweDFlLCdhdXRvRXhwYW5kTWF4RGVwdGgnOjB4Mn07ZnVuY3Rpb24gXzB4NTg2ZDM2KF8weDU0ZjNiZSxfMHgxODFiMWEsXzB4MmI3ZWI1LF8weDFkZDYzNCxfMHg0OWMwN2MsXzB4Mzk3NDQ2KXt2YXIgXzB4MmYxOGRkPV8weDEwZWQyODtsZXQgXzB4NGU3ZjcyLF8weDFkZTVhMTt0cnl7XzB4MWRlNWExPV8weDRlYmVmOCgpLF8weDRlN2Y3Mj1fMHg0NmNhOTBbXzB4MTgxYjFhXSwhXzB4NGU3ZjcyfHxfMHgxZGU1YTEtXzB4NGU3ZjcyWyd0cyddPjB4MWY0JiZfMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTE4KV0mJl8weDRlN2Y3MlsndGltZSddL18weDRlN2Y3MltfMHgyZjE4ZGQoMHgxMTgpXTwweDY0PyhfMHg0NmNhOTBbXzB4MTgxYjFhXT1fMHg0ZTdmNzI9eydjb3VudCc6MHgwLCd0aW1lJzoweDAsJ3RzJzpfMHgxZGU1YTF9LF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXT17fSk6XzB4MWRlNWExLV8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVsndHMnXT4weDMyJiZfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MTE4KV0mJl8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxYTEpXS9fMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bJ2NvdW50J108MHg2NCYmKF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXT17fSk7bGV0IF8weDRkZGQzZD1bXSxfMHgyYzFiNDU9XzB4NGU3ZjcyW18weDJmMThkZCgweDE4NCldfHxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MTg0KV0/XzB4MzBjNTU3Ol8weDM4ODZlYSxfMHgzOThhZjU9XzB4MzBjODRjPT57dmFyIF8weDk4OGUzYj1fMHgyZjE4ZGQ7bGV0IF8weDE0YjNkYz17fTtyZXR1cm4gXzB4MTRiM2RjW18weDk4OGUzYigweDE3ZCldPV8weDMwYzg0Y1sncHJvcHMnXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4YzgpXT1fMHgzMGM4NGNbJ2VsZW1lbnRzJ10sXzB4MTRiM2RjW18weDk4OGUzYigweDEwOCldPV8weDMwYzg0Y1tfMHg5ODhlM2IoMHgxMDgpXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4ZjMpXT1fMHgzMGM4NGNbXzB4OTg4ZTNiKDB4ZjMpXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTQ2KV09XzB4MzBjODRjW18weDk4OGUzYigweDE0NildLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxYjcpXT1fMHgzMGM4NGNbXzB4OTg4ZTNiKDB4MWI3KV0sXzB4MTRiM2RjW18weDk4OGUzYigweGY5KV09ITB4MSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4ZWYpXT0hXzB4MWQ5MTY5LF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxNTkpXT0weDEsXzB4MTRiM2RjW18weDk4OGUzYigweDE4OCldPTB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTA1KV09XzB4OTg4ZTNiKDB4YmUpLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxYjkpXT1fMHg5ODhlM2IoMHgxNmIpLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxYTIpXT0hMHgwLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxMGQpXT1bXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTEwKV09MHgwLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxOTgpXT0hMHgwLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhkYildPTB4MCxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTgyKV09eydjdXJyZW50Jzp2b2lkIDB4MCwncGFyZW50Jzp2b2lkIDB4MCwnaW5kZXgnOjB4MH0sXzB4MTRiM2RjO307Zm9yKHZhciBfMHg0ZThiNDY9MHgwO18weDRlOGI0NjxfMHg0OWMwN2NbXzB4MmYxOGRkKDB4ZjQpXTtfMHg0ZThiNDYrKylfMHg0ZGRkM2RbXzB4MmYxOGRkKDB4MTcxKV0oXzB4NGU3ZDdkW18weDJmMThkZCgweGZkKV0oeyd0aW1lTm9kZSc6XzB4NTRmM2JlPT09XzB4MmYxOGRkKDB4MWExKXx8dm9pZCAweDB9LF8weDQ5YzA3Y1tfMHg0ZThiNDZdLF8weDM5OGFmNShfMHgyYzFiNDUpLHt9KSk7aWYoXzB4NTRmM2JlPT09XzB4MmYxOGRkKDB4MWFiKXx8XzB4NTRmM2JlPT09XzB4MmYxOGRkKDB4MTdjKSl7bGV0IF8weDM4ODg2Yz1FcnJvcltfMHgyZjE4ZGQoMHgxMWYpXTt0cnl7RXJyb3JbJ3N0YWNrVHJhY2VMaW1pdCddPTB4MS8weDAsXzB4NGRkZDNkW18weDJmMThkZCgweDE3MSldKF8weDRlN2Q3ZFsnc2VyaWFsaXplJ10oeydzdGFja05vZGUnOiEweDB9LG5ldyBFcnJvcigpW18weDJmMThkZCgweDFiMCldLF8weDM5OGFmNShfMHgyYzFiNDUpLHsnc3RyTGVuZ3RoJzoweDEvMHgwfSkpO31maW5hbGx5e0Vycm9yW18weDJmMThkZCgweDExZildPV8weDM4ODg2Yzt9fXJldHVybnsnbWV0aG9kJzpfMHgyZjE4ZGQoMHhkOSksJ3ZlcnNpb24nOl8weDQ2ZjY3YywnYXJncyc6W3sndHMnOl8weDJiN2ViNSwnc2Vzc2lvbic6XzB4MWRkNjM0LCdhcmdzJzpfMHg0ZGRkM2QsJ2lkJzpfMHgxODFiMWEsJ2NvbnRleHQnOl8weDM5NzQ0Nn1dfTt9Y2F0Y2goXzB4MTRjZDE4KXtyZXR1cm57J21ldGhvZCc6XzB4MmYxOGRkKDB4ZDkpLCd2ZXJzaW9uJzpfMHg0NmY2N2MsJ2FyZ3MnOlt7J3RzJzpfMHgyYjdlYjUsJ3Nlc3Npb24nOl8weDFkZDYzNCwnYXJncyc6W3sndHlwZSc6XzB4MmYxOGRkKDB4ZmYpLCdlcnJvcic6XzB4MTRjZDE4JiZfMHgxNGNkMThbXzB4MmYxOGRkKDB4MTM1KV19XSwnaWQnOl8weDE4MWIxYSwnY29udGV4dCc6XzB4Mzk3NDQ2fV19O31maW5hbGx5e3RyeXtpZihfMHg0ZTdmNzImJl8weDFkZTVhMSl7bGV0IF8weGEwMDI1PV8weDRlYmVmOCgpO18weDRlN2Y3MlsnY291bnQnXSsrLF8weDRlN2Y3MlsndGltZSddKz1fMHgyMjRmZmIoXzB4MWRlNWExLF8weGEwMDI1KSxfMHg0ZTdmNzJbJ3RzJ109XzB4YTAwMjUsXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDExOCldKyssXzB4NDZjYTkwWydoaXRzJ11bXzB4MmYxOGRkKDB4MWExKV0rPV8weDIyNGZmYihfMHgxZGU1YTEsXzB4YTAwMjUpLF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVsndHMnXT1fMHhhMDAyNSwoXzB4NGU3ZjcyW18weDJmMThkZCgweDExOCldPjB4MzJ8fF8weDRlN2Y3MlsndGltZSddPjB4NjQpJiYoXzB4NGU3ZjcyW18weDJmMThkZCgweDE4NCldPSEweDApLChfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MTE4KV0+MHgzZTh8fF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxYTEpXT4weDEyYykmJihfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MTg0KV09ITB4MCk7fX1jYXRjaHt9fX1yZXR1cm4gXzB4NTg2ZDM2O30oKF8weDE3ODkxZSxfMHg0ZjRiOWMsXzB4M2ZkNmQ1LF8weDFjNTQyMixfMHg0NzljYTIsXzB4NGIwYWM4LF8weDUyNDZhZixfMHg0MmJmYWMsXzB4NGNhODJmLF8weDEyMzU4MCxfMHgxODk2OWQpPT57dmFyIF8weDQwNzI0Mj1fMHhmYjRmODk7aWYoXzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldKXJldHVybiBfMHgxNzg5MWVbXzB4NDA3MjQyKDB4MTUwKV07aWYoIUgoXzB4MTc4OTFlLF8weDQyYmZhYyxfMHg0NzljYTIpKXJldHVybiBfMHgxNzg5MWVbJ19jb25zb2xlX25pbmphJ109eydjb25zb2xlTG9nJzooKT0+e30sJ2NvbnNvbGVUcmFjZSc6KCk9Pnt9LCdjb25zb2xlVGltZSc6KCk9Pnt9LCdjb25zb2xlVGltZUVuZCc6KCk9Pnt9LCdhdXRvTG9nJzooKT0+e30sJ2F1dG9Mb2dNYW55JzooKT0+e30sJ2F1dG9UcmFjZU1hbnknOigpPT57fSwnY292ZXJhZ2UnOigpPT57fSwnYXV0b1RyYWNlJzooKT0+e30sJ2F1dG9UaW1lJzooKT0+e30sJ2F1dG9UaW1lRW5kJzooKT0+e319LF8weDE3ODkxZVtfMHg0MDcyNDIoMHgxNTApXTtsZXQgXzB4Mzc2MTBlPUIoXzB4MTc4OTFlKSxfMHgzNDM3Y2E9XzB4Mzc2MTBlWydlbGFwc2VkJ10sXzB4MjViNWU1PV8weDM3NjEwZVsndGltZVN0YW1wJ10sXzB4NGJmNzZiPV8weDM3NjEwZVtfMHg0MDcyNDIoMHgxMWUpXSxfMHgxMjVjN2Q9eydoaXRzJzp7fSwndHMnOnt9fSxfMHgxNWI0NmE9WChfMHgxNzg5MWUsXzB4NGNhODJmLF8weDEyNWM3ZCxfMHg0YjBhYzgpLF8weGQ1NDg2Yj1fMHg0ZDMwZTE9PntfMHgxMjVjN2RbJ3RzJ11bXzB4NGQzMGUxXT1fMHgyNWI1ZTUoKTt9LF8weDJkMDdlNj0oXzB4NWJjMzU1LF8weGUzNGZlKT0+e3ZhciBfMHgyMzM5Y2U9XzB4NDA3MjQyO2xldCBfMHg1OWZiNmE9XzB4MTI1YzdkWyd0cyddW18weGUzNGZlXTtpZihkZWxldGUgXzB4MTI1YzdkWyd0cyddW18weGUzNGZlXSxfMHg1OWZiNmEpe2xldCBfMHg1OTIxYTY9XzB4MzQzN2NhKF8weDU5ZmI2YSxfMHgyNWI1ZTUoKSk7XzB4MmNmMjkwKF8weDE1YjQ2YShfMHgyMzM5Y2UoMHgxYTEpLF8weDViYzM1NSxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsW18weDU5MjFhNl0sXzB4ZTM0ZmUpKTt9fSxfMHg0OWJjZWM9XzB4NDNlNzJmPT57dmFyIF8weDJlNDdiZj1fMHg0MDcyNDIsXzB4NTVkOTVkO3JldHVybiBfMHg0NzljYTI9PT1fMHgyZTQ3YmYoMHgxMzkpJiZfMHgxNzg5MWVbJ29yaWdpbiddJiYoKF8weDU1ZDk1ZD1fMHg0M2U3MmY9PW51bGw/dm9pZCAweDA6XzB4NDNlNzJmWydhcmdzJ10pPT1udWxsP3ZvaWQgMHgwOl8weDU1ZDk1ZFsnbGVuZ3RoJ10pJiYoXzB4NDNlNzJmWydhcmdzJ11bMHgwXVtfMHgyZTQ3YmYoMHgxODkpXT1fMHgxNzg5MWVbJ29yaWdpbiddKSxfMHg0M2U3MmY7fTtfMHgxNzg5MWVbXzB4NDA3MjQyKDB4MTUwKV09eydjb25zb2xlTG9nJzooXzB4MzFjOTJlLF8weDI0NDg4ZCk9Pnt2YXIgXzB4OTNlNjdlPV8weDQwNzI0MjtfMHgxNzg5MWVbJ2NvbnNvbGUnXVsnbG9nJ11bXzB4OTNlNjdlKDB4YzEpXSE9PSdkaXNhYmxlZExvZycmJl8weDJjZjI5MChfMHgxNWI0NmEoXzB4OTNlNjdlKDB4ZDkpLF8weDMxYzkyZSxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4MjQ0ODhkKSk7fSwnY29uc29sZVRyYWNlJzooXzB4M2I2NmE3LF8weGJhODgwZSk9Pnt2YXIgXzB4NTY3ZTEzPV8weDQwNzI0MixfMHgzMTcxNmUsXzB4NWE5YzYwO18weDE3ODkxZVtfMHg1NjdlMTMoMHgxNzQpXVsnbG9nJ11bXzB4NTY3ZTEzKDB4YzEpXSE9PV8weDU2N2UxMygweGMyKSYmKChfMHg1YTljNjA9KF8weDMxNzE2ZT1fMHgxNzg5MWVbXzB4NTY3ZTEzKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDMxNzE2ZVtfMHg1NjdlMTMoMHhkMildKSE9bnVsbCYmXzB4NWE5YzYwW18weDU2N2UxMygweDE4MildJiYoXzB4MTc4OTFlW18weDU2N2UxMygweDE4YyldPSEweDApLF8weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKF8weDU2N2UxMygweDFhYiksXzB4M2I2NmE3LF8weDRiZjc2YigpLF8weDI1MzUzNixfMHhiYTg4MGUpKSkpO30sJ2NvbnNvbGVFcnJvcic6KF8weDNmYTczNixfMHgxMjFhM2IpPT57dmFyIF8weDEyZGZiOD1fMHg0MDcyNDI7XzB4MTc4OTFlW18weDEyZGZiOCgweDE4YyldPSEweDAsXzB4MmNmMjkwKF8weDQ5YmNlYyhfMHgxNWI0NmEoJ2Vycm9yJyxfMHgzZmE3MzYsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weDEyMWEzYikpKTt9LCdjb25zb2xlVGltZSc6XzB4MTg0OGE3PT57XzB4ZDU0ODZiKF8weDE4NDhhNyk7fSwnY29uc29sZVRpbWVFbmQnOihfMHgzMWFlNjUsXzB4M2QxMDRhKT0+e18weDJkMDdlNihfMHgzZDEwNGEsXzB4MzFhZTY1KTt9LCdhdXRvTG9nJzooXzB4Mzc4MDgsXzB4MmFkNTU4KT0+e3ZhciBfMHgyMjkzOGI9XzB4NDA3MjQyO18weDJjZjI5MChfMHgxNWI0NmEoXzB4MjI5MzhiKDB4ZDkpLF8weDJhZDU1OCxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsW18weDM3ODA4XSkpO30sJ2F1dG9Mb2dNYW55JzooXzB4MTYxZDdlLF8weDQzZGVkYik9Pnt2YXIgXzB4Mzc5NTA2PV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4MTViNDZhKF8weDM3OTUwNigweGQ5KSxfMHgxNjFkN2UsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weDQzZGVkYikpO30sJ2F1dG9UcmFjZSc6KF8weDEyMTdlNixfMHg0NDY3MDcpPT57dmFyIF8weDNhNTI1Mj1fMHg0MDcyNDI7XzB4MmNmMjkwKF8weDQ5YmNlYyhfMHgxNWI0NmEoXzB4M2E1MjUyKDB4MWFiKSxfMHg0NDY3MDcsXzB4NGJmNzZiKCksXzB4MjUzNTM2LFtfMHgxMjE3ZTZdKSkpO30sJ2F1dG9UcmFjZU1hbnknOihfMHg1Yjc3YzQsXzB4NGZjNDNhKT0+e3ZhciBfMHg1YmZiZjI9XzB4NDA3MjQyO18weDJjZjI5MChfMHg0OWJjZWMoXzB4MTViNDZhKF8weDViZmJmMigweDFhYiksXzB4NWI3N2M0LF8weDRiZjc2YigpLF8weDI1MzUzNixfMHg0ZmM0M2EpKSk7fSwnYXV0b1RpbWUnOihfMHgyNDE4M2EsXzB4NDQyNzU5LF8weDI5NmE0Yyk9PntfMHhkNTQ4NmIoXzB4Mjk2YTRjKTt9LCdhdXRvVGltZUVuZCc6KF8weDI5MjdhOSxfMHgyNDNkMzAsXzB4NWJkNjNiKT0+e18weDJkMDdlNihfMHgyNDNkMzAsXzB4NWJkNjNiKTt9LCdjb3ZlcmFnZSc6XzB4NTE5ZmMyPT57dmFyIF8weDQ1MjU1ND1fMHg0MDcyNDI7XzB4MmNmMjkwKHsnbWV0aG9kJzpfMHg0NTI1NTQoMHgxNTYpLCd2ZXJzaW9uJzpfMHg0YjBhYzgsJ2FyZ3MnOlt7J2lkJzpfMHg1MTlmYzJ9XX0pO319O2xldCBfMHgyY2YyOTA9cShfMHgxNzg5MWUsXzB4NGY0YjljLF8weDNmZDZkNSxfMHgxYzU0MjIsXzB4NDc5Y2EyLF8weDEyMzU4MCxfMHgxODk2OWQpLF8weDI1MzUzNj1fMHgxNzg5MWVbXzB4NDA3MjQyKDB4ZjApXTtyZXR1cm4gXzB4MTc4OTFlWydfY29uc29sZV9uaW5qYSddO30pKGdsb2JhbFRoaXMsXzB4ZmI0Zjg5KDB4MTBjKSwnNjA1OTEnLF8weGZiNGY4OSgweGRjKSwnd2VicGFjaycsXzB4ZmI0Zjg5KDB4ZDMpLCcxNzI3OTUwMDA1MDE2JyxfMHhmYjRmODkoMHgxYTYpLF8weGZiNGY4OSgweGZiKSxfMHhmYjRmODkoMHgxOTcpLF8weGZiNGY4OSgweDEzYSkpO1wiKTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IH1cclxuOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb19vbyhpLCAuLi52KSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVMb2coaSwgdik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX29vOyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190cihpLCAuLi52KSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVUcmFjZShpLCB2KTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fdHI7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX3R4KGksIC4uLnYpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZUVycm9yKGksIHYpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb190eDsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fdHModikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlVGltZSh2KTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fdHM7IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX3RlKHYsIGkpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZVRpbWVFbmQodiwgaSk7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3RlOyAvKmVzbGludCB1bmljb3JuL25vLWFidXNpdmUtZXNsaW50LWRpc2FibGU6LGVzbGludC1jb21tZW50cy9kaXNhYmxlLWVuYWJsZS1wYWlyOixlc2xpbnQtY29tbWVudHMvbm8tdW5saW1pdGVkLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby1hZ2dyZWdhdGluZy1lbmFibGU6LGVzbGludC1jb21tZW50cy9uby1kdXBsaWNhdGUtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLXVudXNlZC1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tdW51c2VkLWVuYWJsZTosKi9cclxuIiwiaW1wb3J0IHsgX2dldFByb3ZpZGVyLCBnZXRBcHAsIF9yZWdpc3RlckNvbXBvbmVudCwgcmVnaXN0ZXJWZXJzaW9uIH0gZnJvbSAnQGZpcmViYXNlL2FwcCc7XG5pbXBvcnQgeyBMb2dnZXIgfSBmcm9tICdAZmlyZWJhc2UvbG9nZ2VyJztcbmltcG9ydCB7IEVycm9yRmFjdG9yeSwgY2FsY3VsYXRlQmFja29mZk1pbGxpcywgRmlyZWJhc2VFcnJvciwgaXNJbmRleGVkREJBdmFpbGFibGUsIHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUsIGlzQnJvd3NlckV4dGVuc2lvbiwgYXJlQ29va2llc0VuYWJsZWQsIGdldE1vZHVsYXJJbnN0YW5jZSwgZGVlcEVxdWFsIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgJ0BmaXJlYmFzZS9pbnN0YWxsYXRpb25zJztcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFR5cGUgY29uc3RhbnQgZm9yIEZpcmViYXNlIEFuYWx5dGljcy5cclxuICovXHJcbmNvbnN0IEFOQUxZVElDU19UWVBFID0gJ2FuYWx5dGljcyc7XHJcbi8vIEtleSB0byBhdHRhY2ggRklEIHRvIGluIGd0YWcgcGFyYW1zLlxyXG5jb25zdCBHQV9GSURfS0VZID0gJ2ZpcmViYXNlX2lkJztcclxuY29uc3QgT1JJR0lOX0tFWSA9ICdvcmlnaW4nO1xyXG5jb25zdCBGRVRDSF9USU1FT1VUX01JTExJUyA9IDYwICogMTAwMDtcclxuY29uc3QgRFlOQU1JQ19DT05GSUdfVVJMID0gJ2h0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlYXBpcy5jb20vdjFhbHBoYS9wcm9qZWN0cy8tL2FwcHMve2FwcC1pZH0vd2ViQ29uZmlnJztcclxuY29uc3QgR1RBR19VUkwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xldGFnbWFuYWdlci5jb20vZ3RhZy9qcyc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoJ0BmaXJlYmFzZS9hbmFseXRpY3MnKTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgRVJST1JTID0ge1xyXG4gICAgW1wiYWxyZWFkeS1leGlzdHNcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0VYSVNUUyAqL106ICdBIEZpcmViYXNlIEFuYWx5dGljcyBpbnN0YW5jZSB3aXRoIHRoZSBhcHBJZCB7JGlkfSAnICtcclxuICAgICAgICAnIGFscmVhZHkgZXhpc3RzLiAnICtcclxuICAgICAgICAnT25seSBvbmUgRmlyZWJhc2UgQW5hbHl0aWNzIGluc3RhbmNlIGNhbiBiZSBjcmVhdGVkIGZvciBlYWNoIGFwcElkLicsXHJcbiAgICBbXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQUxSRUFEWV9JTklUSUFMSVpFRCAqL106ICdpbml0aWFsaXplQW5hbHl0aWNzKCkgY2Fubm90IGJlIGNhbGxlZCBhZ2FpbiB3aXRoIGRpZmZlcmVudCBvcHRpb25zIHRoYW4gdGhvc2UgJyArXHJcbiAgICAgICAgJ2l0IHdhcyBpbml0aWFsbHkgY2FsbGVkIHdpdGguIEl0IGNhbiBiZSBjYWxsZWQgYWdhaW4gd2l0aCB0aGUgc2FtZSBvcHRpb25zIHRvICcgK1xyXG4gICAgICAgICdyZXR1cm4gdGhlIGV4aXN0aW5nIGluc3RhbmNlLCBvciBnZXRBbmFseXRpY3MoKSBjYW4gYmUgdXNlZCAnICtcclxuICAgICAgICAndG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBhbHJlYWR5LWludGlhbGl6ZWQgaW5zdGFuY2UuJyxcclxuICAgIFtcImFscmVhZHktaW5pdGlhbGl6ZWQtc2V0dGluZ3NcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEX1NFVFRJTkdTICovXTogJ0ZpcmViYXNlIEFuYWx5dGljcyBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkLicgK1xyXG4gICAgICAgICdzZXR0aW5ncygpIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBpbml0aWFsaXppbmcgYW55IEFuYWx5dGljcyBpbnN0YW5jZScgK1xyXG4gICAgICAgICdvciBpdCB3aWxsIGhhdmUgbm8gZWZmZWN0LicsXHJcbiAgICBbXCJpbnRlcm9wLWNvbXBvbmVudC1yZWctZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5URVJPUF9DT01QT05FTlRfUkVHX0ZBSUxFRCAqL106ICdGaXJlYmFzZSBBbmFseXRpY3MgSW50ZXJvcCBDb21wb25lbnQgZmFpbGVkIHRvIGluc3RhbnRpYXRlOiB7JHJlYXNvbn0nLFxyXG4gICAgW1wiaW52YWxpZC1hbmFseXRpY3MtY29udGV4dFwiIC8qIEFuYWx5dGljc0Vycm9yLklOVkFMSURfQU5BTFlUSUNTX0NPTlRFWFQgKi9dOiAnRmlyZWJhc2UgQW5hbHl0aWNzIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBlbnZpcm9ubWVudC4gJyArXHJcbiAgICAgICAgJ1dyYXAgaW5pdGlhbGl6YXRpb24gb2YgYW5hbHl0aWNzIGluIGFuYWx5dGljcy5pc1N1cHBvcnRlZCgpICcgK1xyXG4gICAgICAgICd0byBwcmV2ZW50IGluaXRpYWxpemF0aW9uIGluIHVuc3VwcG9ydGVkIGVudmlyb25tZW50cy4gRGV0YWlsczogeyRlcnJvckluZm99JyxcclxuICAgIFtcImluZGV4ZWRkYi11bmF2YWlsYWJsZVwiIC8qIEFuYWx5dGljc0Vycm9yLklOREVYRUREQl9VTkFWQUlMQUJMRSAqL106ICdJbmRleGVkREIgdW5hdmFpbGFibGUgb3IgcmVzdHJpY3RlZCBpbiB0aGlzIGVudmlyb25tZW50LiAnICtcclxuICAgICAgICAnV3JhcCBpbml0aWFsaXphdGlvbiBvZiBhbmFseXRpY3MgaW4gYW5hbHl0aWNzLmlzU3VwcG9ydGVkKCkgJyArXHJcbiAgICAgICAgJ3RvIHByZXZlbnQgaW5pdGlhbGl6YXRpb24gaW4gdW5zdXBwb3J0ZWQgZW52aXJvbm1lbnRzLiBEZXRhaWxzOiB7JGVycm9ySW5mb30nLFxyXG4gICAgW1wiZmV0Y2gtdGhyb3R0bGVcIiAvKiBBbmFseXRpY3NFcnJvci5GRVRDSF9USFJPVFRMRSAqL106ICdUaGUgY29uZmlnIGZldGNoIHJlcXVlc3QgdGltZWQgb3V0IHdoaWxlIGluIGFuIGV4cG9uZW50aWFsIGJhY2tvZmYgc3RhdGUuJyArXHJcbiAgICAgICAgJyBVbml4IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHMgd2hlbiBmZXRjaCByZXF1ZXN0IHRocm90dGxpbmcgZW5kczogeyR0aHJvdHRsZUVuZFRpbWVNaWxsaXN9LicsXHJcbiAgICBbXCJjb25maWctZmV0Y2gtZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQ09ORklHX0ZFVENIX0ZBSUxFRCAqL106ICdEeW5hbWljIGNvbmZpZyBmZXRjaCBmYWlsZWQ6IFt7JGh0dHBTdGF0dXN9XSB7JHJlc3BvbnNlTWVzc2FnZX0nLFxyXG4gICAgW1wibm8tYXBpLWtleVwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQSV9LRVkgKi9dOiAnVGhlIFwiYXBpS2V5XCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gRmlyZWJhc2UgQW5hbHl0aWNzIHJlcXVpcmVzIHRoaXMgZmllbGQgdG8nICtcclxuICAgICAgICAnY29udGFpbiBhIHZhbGlkIEFQSSBrZXkuJyxcclxuICAgIFtcIm5vLWFwcC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQUF9JRCAqL106ICdUaGUgXCJhcHBJZFwiIGZpZWxkIGlzIGVtcHR5IGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIEZpcmViYXNlIEFuYWx5dGljcyByZXF1aXJlcyB0aGlzIGZpZWxkIHRvJyArXHJcbiAgICAgICAgJ2NvbnRhaW4gYSB2YWxpZCBhcHAgSUQuJyxcclxuICAgIFtcIm5vLWNsaWVudC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0NMSUVOVF9JRCAqL106ICdUaGUgXCJjbGllbnRfaWRcIiBmaWVsZCBpcyBlbXB0eS4nLFxyXG4gICAgW1wiaW52YWxpZC1ndGFnLXJlc291cmNlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5WQUxJRF9HVEFHX1JFU09VUkNFICovXTogJ1RydXN0ZWQgVHlwZXMgZGV0ZWN0ZWQgYW4gaW52YWxpZCBndGFnIHJlc291cmNlOiB7JGd0YWdVUkx9LidcclxufTtcclxuY29uc3QgRVJST1JfRkFDVE9SWSA9IG5ldyBFcnJvckZhY3RvcnkoJ2FuYWx5dGljcycsICdBbmFseXRpY3MnLCBFUlJPUlMpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVmVyaWZpZXMgYW5kIGNyZWF0ZXMgYSBUcnVzdGVkU2NyaXB0VVJMLlxyXG4gKi9cclxuZnVuY3Rpb24gY3JlYXRlR3RhZ1RydXN0ZWRUeXBlc1NjcmlwdFVSTCh1cmwpIHtcclxuICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoR1RBR19VUkwpKSB7XHJcbiAgICAgICAgY29uc3QgZXJyID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnZhbGlkLWd0YWctcmVzb3VyY2VcIiAvKiBBbmFseXRpY3NFcnJvci5JTlZBTElEX0dUQUdfUkVTT1VSQ0UgKi8sIHtcclxuICAgICAgICAgICAgZ3RhZ1VSTDogdXJsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbG9nZ2VyLndhcm4oZXJyLm1lc3NhZ2UpO1xyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICAgIHJldHVybiB1cmw7XHJcbn1cclxuLyoqXHJcbiAqIE1ha2VzaGlmdCBwb2x5ZmlsbCBmb3IgUHJvbWlzZS5hbGxTZXR0bGVkKCkuIFJlc29sdmVzIHdoZW4gYWxsIHByb21pc2VzXHJcbiAqIGhhdmUgZWl0aGVyIHJlc29sdmVkIG9yIHJlamVjdGVkLlxyXG4gKlxyXG4gKiBAcGFyYW0gcHJvbWlzZXMgQXJyYXkgb2YgcHJvbWlzZXMgdG8gd2FpdCBmb3IuXHJcbiAqL1xyXG5mdW5jdGlvbiBwcm9taXNlQWxsU2V0dGxlZChwcm9taXNlcykge1xyXG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzLm1hcChwcm9taXNlID0+IHByb21pc2UuY2F0Y2goZSA9PiBlKSkpO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgVHJ1c3RlZFR5cGVQb2xpY3kgb2JqZWN0IHRoYXQgaW1wbGVtZW50cyB0aGUgcnVsZXMgcGFzc2VkIGFzIHBvbGljeU9wdGlvbnMuXHJcbiAqXHJcbiAqIEBwYXJhbSBwb2xpY3lOYW1lIEEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgdGhlIHBvbGljeVxyXG4gKiBAcGFyYW0gcG9saWN5T3B0aW9ucyBPYmplY3QgY29udGFpbmluZyBpbXBsZW1lbnRhdGlvbnMgb2YgaW5zdGFuY2UgbWV0aG9kcyBmb3IgVHJ1c3RlZFR5cGVzUG9saWN5LCBzZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9UcnVzdGVkVHlwZVBvbGljeSNpbnN0YW5jZV9tZXRob2RzXHJcbiAqIHwgdGhlIFRydXN0ZWRUeXBlUG9saWN5IHJlZmVyZW5jZSBkb2N1bWVudGF0aW9ufS5cclxuICovXHJcbmZ1bmN0aW9uIGNyZWF0ZVRydXN0ZWRUeXBlc1BvbGljeShwb2xpY3lOYW1lLCBwb2xpY3lPcHRpb25zKSB7XHJcbiAgICAvLyBDcmVhdGUgYSBUcnVzdGVkVHlwZXMgcG9saWN5IHRoYXQgd2UgY2FuIHVzZSBmb3IgdXBkYXRpbmcgc3JjXHJcbiAgICAvLyBwcm9wZXJ0aWVzXHJcbiAgICBsZXQgdHJ1c3RlZFR5cGVzUG9saWN5O1xyXG4gICAgaWYgKHdpbmRvdy50cnVzdGVkVHlwZXMpIHtcclxuICAgICAgICB0cnVzdGVkVHlwZXNQb2xpY3kgPSB3aW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeShwb2xpY3lOYW1lLCBwb2xpY3lPcHRpb25zKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVzdGVkVHlwZXNQb2xpY3k7XHJcbn1cclxuLyoqXHJcbiAqIEluc2VydHMgZ3RhZyBzY3JpcHQgdGFnIGludG8gdGhlIHBhZ2UgdG8gYXN5bmNocm9ub3VzbHkgZG93bmxvYWQgZ3RhZy5cclxuICogQHBhcmFtIGRhdGFMYXllck5hbWUgTmFtZSBvZiBkYXRhbGF5ZXIgKG1vc3Qgb2Z0ZW4gdGhlIGRlZmF1bHQsIFwiX2RhdGFMYXllclwiKS5cclxuICovXHJcbmZ1bmN0aW9uIGluc2VydFNjcmlwdFRhZyhkYXRhTGF5ZXJOYW1lLCBtZWFzdXJlbWVudElkKSB7XHJcbiAgICBjb25zdCB0cnVzdGVkVHlwZXNQb2xpY3kgPSBjcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3koJ2ZpcmViYXNlLWpzLXNkay1wb2xpY3knLCB7XHJcbiAgICAgICAgY3JlYXRlU2NyaXB0VVJMOiBjcmVhdGVHdGFnVHJ1c3RlZFR5cGVzU2NyaXB0VVJMXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgLy8gV2UgYXJlIG5vdCBwcm92aWRpbmcgYW4gYW5hbHl0aWNzSWQgaW4gdGhlIFVSTCBiZWNhdXNlIGl0IHdvdWxkIHRyaWdnZXIgYSBgcGFnZV92aWV3YFxyXG4gICAgLy8gd2l0aG91dCBmaWQuIFdlIHdpbGwgaW5pdGlhbGl6ZSBnYS1pZCB1c2luZyBndGFnIChjb25maWcpIGNvbW1hbmQgdG9nZXRoZXIgd2l0aCBmaWQuXHJcbiAgICBjb25zdCBndGFnU2NyaXB0VVJMID0gYCR7R1RBR19VUkx9P2w9JHtkYXRhTGF5ZXJOYW1lfSZpZD0ke21lYXN1cmVtZW50SWR9YDtcclxuICAgIHNjcmlwdC5zcmMgPSB0cnVzdGVkVHlwZXNQb2xpY3lcclxuICAgICAgICA/IHRydXN0ZWRUeXBlc1BvbGljeSA9PT0gbnVsbCB8fCB0cnVzdGVkVHlwZXNQb2xpY3kgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVTY3JpcHRVUkwoZ3RhZ1NjcmlwdFVSTClcclxuICAgICAgICA6IGd0YWdTY3JpcHRVUkw7XHJcbiAgICBzY3JpcHQuYXN5bmMgPSB0cnVlO1xyXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xyXG59XHJcbi8qKlxyXG4gKiBHZXQgcmVmZXJlbmNlIHRvLCBvciBjcmVhdGUsIGdsb2JhbCBkYXRhbGF5ZXIuXHJcbiAqIEBwYXJhbSBkYXRhTGF5ZXJOYW1lIE5hbWUgb2YgZGF0YWxheWVyIChtb3N0IG9mdGVuIHRoZSBkZWZhdWx0LCBcIl9kYXRhTGF5ZXJcIikuXHJcbiAqL1xyXG5mdW5jdGlvbiBnZXRPckNyZWF0ZURhdGFMYXllcihkYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICAvLyBDaGVjayBmb3IgZXhpc3RpbmcgZGF0YUxheWVyIGFuZCBjcmVhdGUgaWYgbmVlZGVkLlxyXG4gICAgbGV0IGRhdGFMYXllciA9IFtdO1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkod2luZG93W2RhdGFMYXllck5hbWVdKSkge1xyXG4gICAgICAgIGRhdGFMYXllciA9IHdpbmRvd1tkYXRhTGF5ZXJOYW1lXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHdpbmRvd1tkYXRhTGF5ZXJOYW1lXSA9IGRhdGFMYXllcjtcclxuICAgIH1cclxuICAgIHJldHVybiBkYXRhTGF5ZXI7XHJcbn1cclxuLyoqXHJcbiAqIFdyYXBwZWQgZ3RhZyBsb2dpYyB3aGVuIGd0YWcgaXMgY2FsbGVkIHdpdGggJ2NvbmZpZycgY29tbWFuZC5cclxuICpcclxuICogQHBhcmFtIGd0YWdDb3JlIEJhc2ljIGd0YWcgZnVuY3Rpb24gdGhhdCBqdXN0IGFwcGVuZHMgdG8gZGF0YUxheWVyLlxyXG4gKiBAcGFyYW0gaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCBNYXAgb2YgYXBwSWRzIHRvIHRoZWlyIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCBBcnJheSBvZiBkeW5hbWljIGNvbmZpZyBmZXRjaCBwcm9taXNlcy5cclxuICogQHBhcmFtIG1lYXN1cmVtZW50SWRUb0FwcElkIE1hcCBvZiBHQSBtZWFzdXJlbWVudElEcyB0byBjb3JyZXNwb25kaW5nIEZpcmViYXNlIGFwcElkLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZCBHQSBNZWFzdXJlbWVudCBJRCB0byBzZXQgY29uZmlnIGZvci5cclxuICogQHBhcmFtIGd0YWdQYXJhbXMgR3RhZyBjb25maWcgcGFyYW1zIHRvIHNldC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGd0YWdPbkNvbmZpZyhndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIG1lYXN1cmVtZW50SWQsIGd0YWdQYXJhbXMpIHtcclxuICAgIC8vIElmIGNvbmZpZyBpcyBhbHJlYWR5IGZldGNoZWQsIHdlIGtub3cgdGhlIGFwcElkIGFuZCBjYW4gdXNlIGl0IHRvIGxvb2sgdXAgd2hhdCBGSUQgcHJvbWlzZSB3ZVxyXG4gICAgLy8vIGFyZSB3YWl0aW5nIGZvciwgYW5kIHdhaXQgb25seSBvbiB0aGF0IG9uZS5cclxuICAgIGNvbnN0IGNvcnJlc3BvbmRpbmdBcHBJZCA9IG1lYXN1cmVtZW50SWRUb0FwcElkW21lYXN1cmVtZW50SWRdO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZiAoY29ycmVzcG9uZGluZ0FwcElkKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbY29ycmVzcG9uZGluZ0FwcElkXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIElmIGNvbmZpZyBpcyBub3QgZmV0Y2hlZCB5ZXQsIHdhaXQgZm9yIGFsbCBjb25maWdzICh3ZSBkb24ndCBrbm93IHdoaWNoIG9uZSB3ZSBuZWVkKSBhbmRcclxuICAgICAgICAgICAgLy8gZmluZCB0aGUgYXBwSWQgKGlmIGFueSkgY29ycmVzcG9uZGluZyB0byB0aGlzIG1lYXN1cmVtZW50SWQuIElmIHRoZXJlIGlzIG9uZSwgd2FpdCBvblxyXG4gICAgICAgICAgICAvLyB0aGF0IGFwcElkJ3MgaW5pdGlhbGl6YXRpb24gcHJvbWlzZS4gSWYgdGhlcmUgaXMgbm9uZSwgcHJvbWlzZSByZXNvbHZlcyBhbmQgZ3RhZ1xyXG4gICAgICAgICAgICAvLyBjYWxsIGdvZXMgdGhyb3VnaC5cclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0NvbmZpZ1Jlc3VsdHMgPSBhd2FpdCBwcm9taXNlQWxsU2V0dGxlZChkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0KTtcclxuICAgICAgICAgICAgY29uc3QgZm91bmRDb25maWcgPSBkeW5hbWljQ29uZmlnUmVzdWx0cy5maW5kKGNvbmZpZyA9PiBjb25maWcubWVhc3VyZW1lbnRJZCA9PT0gbWVhc3VyZW1lbnRJZCk7XHJcbiAgICAgICAgICAgIGlmIChmb3VuZENvbmZpZykge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFtmb3VuZENvbmZpZy5hcHBJZF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGxvZ2dlci5lcnJvcihlKTtcclxuICAgIH1cclxuICAgIGd0YWdDb3JlKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zKTtcclxufVxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGxvZ2ljIHdoZW4gZ3RhZyBpcyBjYWxsZWQgd2l0aCAnZXZlbnQnIGNvbW1hbmQuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnQ29yZSBCYXNpYyBndGFnIGZ1bmN0aW9uIHRoYXQganVzdCBhcHBlbmRzIHRvIGRhdGFMYXllci5cclxuICogQHBhcmFtIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgTWFwIG9mIGFwcElkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkIEdBIE1lYXN1cmVtZW50IElEIHRvIGxvZyBldmVudCB0by5cclxuICogQHBhcmFtIGd0YWdQYXJhbXMgUGFyYW1zIHRvIGxvZyB3aXRoIHRoaXMgZXZlbnQuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBndGFnT25FdmVudChndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBsZXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlc1RvV2FpdEZvciA9IFtdO1xyXG4gICAgICAgIC8vIElmIHRoZXJlJ3MgYSAnc2VuZF90bycgcGFyYW0sIGNoZWNrIGlmIGFueSBJRCBzcGVjaWZpZWQgbWF0Y2hlc1xyXG4gICAgICAgIC8vIGFuIGluaXRpYWxpemVJZHMoKSBwcm9taXNlIHdlIGFyZSB3YWl0aW5nIGZvci5cclxuICAgICAgICBpZiAoZ3RhZ1BhcmFtcyAmJiBndGFnUGFyYW1zWydzZW5kX3RvJ10pIHtcclxuICAgICAgICAgICAgbGV0IGdhU2VuZFRvTGlzdCA9IGd0YWdQYXJhbXNbJ3NlbmRfdG8nXTtcclxuICAgICAgICAgICAgLy8gTWFrZSBpdCBhbiBhcnJheSBpZiBpcyBpc24ndCwgc28gaXQgY2FuIGJlIGRlYWx0IHdpdGggdGhlIHNhbWUgd2F5LlxyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZ2FTZW5kVG9MaXN0KSkge1xyXG4gICAgICAgICAgICAgICAgZ2FTZW5kVG9MaXN0ID0gW2dhU2VuZFRvTGlzdF07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gQ2hlY2tpbmcgJ3NlbmRfdG8nIGZpZWxkcyByZXF1aXJlcyBoYXZpbmcgYWxsIG1lYXN1cmVtZW50IElEIHJlc3VsdHMgYmFjayBmcm9tXHJcbiAgICAgICAgICAgIC8vIHRoZSBkeW5hbWljIGNvbmZpZyBmZXRjaC5cclxuICAgICAgICAgICAgY29uc3QgZHluYW1pY0NvbmZpZ1Jlc3VsdHMgPSBhd2FpdCBwcm9taXNlQWxsU2V0dGxlZChkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0KTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzZW5kVG9JZCBvZiBnYVNlbmRUb0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIEFueSBmZXRjaGVkIGR5bmFtaWMgbWVhc3VyZW1lbnQgSUQgdGhhdCBtYXRjaGVzIHRoaXMgJ3NlbmRfdG8nIElEXHJcbiAgICAgICAgICAgICAgICBjb25zdCBmb3VuZENvbmZpZyA9IGR5bmFtaWNDb25maWdSZXN1bHRzLmZpbmQoY29uZmlnID0+IGNvbmZpZy5tZWFzdXJlbWVudElkID09PSBzZW5kVG9JZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbml0aWFsaXphdGlvblByb21pc2UgPSBmb3VuZENvbmZpZyAmJiBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2ZvdW5kQ29uZmlnLmFwcElkXTtcclxuICAgICAgICAgICAgICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yLnB1c2goaW5pdGlhbGl6YXRpb25Qcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIGl0ZW0gaW4gJ3NlbmRfdG8nIHRoYXQgaXMgbm90IGFzc29jaWF0ZWRcclxuICAgICAgICAgICAgICAgICAgICAvLyBkaXJlY3RseSB3aXRoIGFuIEZJRCwgcG9zc2libHkgYSBncm91cC4gIEVtcHR5IHRoaXMgYXJyYXksXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhpdCB0aGUgbG9vcCBlYXJseSwgYW5kIGxldCBpdCBnZXQgcG9wdWxhdGVkIGJlbG93LlxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdW5wb3B1bGF0ZWQgaWYgdGhlcmUgd2FzIG5vICdzZW5kX3RvJyBmaWVsZCAsIG9yXHJcbiAgICAgICAgLy8gaWYgbm90IGFsbCBlbnRyaWVzIGluIHRoZSAnc2VuZF90bycgZmllbGQgY291bGQgYmUgbWFwcGVkIHRvXHJcbiAgICAgICAgLy8gYSBGSUQuIEluIHRoZXNlIGNhc2VzLCB3YWl0IG9uIGFsbCBwZW5kaW5nIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gICAgICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yID0gT2JqZWN0LnZhbHVlcyhpbml0aWFsaXphdGlvblByb21pc2VzTWFwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUnVuIGNvcmUgZ3RhZyBmdW5jdGlvbiB3aXRoIGFyZ3MgYWZ0ZXIgYWxsIHJlbGV2YW50IGluaXRpYWxpemF0aW9uXHJcbiAgICAgICAgLy8gcHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkLlxyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGluaXRpYWxpemF0aW9uUHJvbWlzZXNUb1dhaXRGb3IpO1xyXG4gICAgICAgIC8vIFdvcmthcm91bmQgZm9yIGh0dHA6Ly9iLzE0MTM3MDQ0OSAtIHRoaXJkIGFyZ3VtZW50IGNhbm5vdCBiZSB1bmRlZmluZWQuXHJcbiAgICAgICAgZ3RhZ0NvcmUoXCJldmVudFwiIC8qIEd0YWdDb21tYW5kLkVWRU5UICovLCBtZWFzdXJlbWVudElkLCBndGFnUGFyYW1zIHx8IHt9KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKGUpO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBXcmFwcyBhIHN0YW5kYXJkIGd0YWcgZnVuY3Rpb24gd2l0aCBleHRyYSBjb2RlIHRvIHdhaXQgZm9yIGNvbXBsZXRpb24gb2ZcclxuICogcmVsZXZhbnQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgYmVmb3JlIHNlbmRpbmcgcmVxdWVzdHMuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnQ29yZSBCYXNpYyBndGFnIGZ1bmN0aW9uIHRoYXQganVzdCBhcHBlbmRzIHRvIGRhdGFMYXllci5cclxuICogQHBhcmFtIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAgTWFwIG9mIGFwcElkcyB0byB0aGVpciBpbml0aWFsaXphdGlvbiBwcm9taXNlcy5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgZHluYW1pYyBjb25maWcgZmV0Y2ggcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBtZWFzdXJlbWVudElkVG9BcHBJZCBNYXAgb2YgR0EgbWVhc3VyZW1lbnRJRHMgdG8gY29ycmVzcG9uZGluZyBGaXJlYmFzZSBhcHBJZC5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBHdGFnKGd0YWdDb3JlLCBcclxuLyoqXHJcbiAqIEFsbG93cyB3cmFwcGVkIGd0YWcgY2FsbHMgdG8gd2FpdCBvbiB3aGljaGV2ZXIgaW50aWFsaXphdGlvbiBwcm9taXNlcyBhcmUgcmVxdWlyZWQsXHJcbiAqIGRlcGVuZGluZyBvbiB0aGUgY29udGVudHMgb2YgdGhlIGd0YWcgcGFyYW1zJyBgc2VuZF90b2AgZmllbGQsIGlmIGFueS5cclxuICovXHJcbmluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXAsIFxyXG4vKipcclxuICogV3JhcHBlZCBndGFnIGNhbGxzIHNvbWV0aW1lcyByZXF1aXJlIGFsbCBkeW5hbWljIGNvbmZpZyBmZXRjaGVzIHRvIGhhdmUgcmV0dXJuZWRcclxuICogYmVmb3JlIGRldGVybWluaW5nIHdoYXQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgKHdoaWNoIGluY2x1ZGUgRklEcykgdG8gd2FpdCBmb3IuXHJcbiAqL1xyXG5keW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBcclxuLyoqXHJcbiAqIFdyYXBwZWQgZ3RhZyBjb25maWcgY2FsbHMgY2FuIG5hcnJvdyBkb3duIHdoaWNoIGluaXRpYWxpemF0aW9uIHByb21pc2UgKHdpdGggRklEKVxyXG4gKiB0byB3YWl0IGZvciBpZiB0aGUgbWVhc3VyZW1lbnRJZCBpcyBhbHJlYWR5IGZldGNoZWQsIGJ5IGdldHRpbmcgdGhlIGNvcnJlc3BvbmRpbmcgYXBwSWQsXHJcbiAqIHdoaWNoIGlzIHRoZSBrZXkgZm9yIHRoZSBpbml0aWFsaXphdGlvbiBwcm9taXNlcyBtYXAuXHJcbiAqL1xyXG5tZWFzdXJlbWVudElkVG9BcHBJZCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBXcmFwcGVyIGFyb3VuZCBndGFnIHRoYXQgZW5zdXJlcyBGSUQgaXMgc2VudCB3aXRoIGd0YWcgY2FsbHMuXHJcbiAgICAgKiBAcGFyYW0gY29tbWFuZCBHdGFnIGNvbW1hbmQgdHlwZS5cclxuICAgICAqIEBwYXJhbSBpZE9yTmFtZU9yUGFyYW1zIE1lYXN1cmVtZW50IElEIGlmIGNvbW1hbmQgaXMgRVZFTlQvQ09ORklHLCBwYXJhbXMgaWYgY29tbWFuZCBpcyBTRVQuXHJcbiAgICAgKiBAcGFyYW0gZ3RhZ1BhcmFtcyBQYXJhbXMgaWYgZXZlbnQgaXMgRVZFTlQvQ09ORklHLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBmdW5jdGlvbiBndGFnV3JhcHBlcihjb21tYW5kLCAuLi5hcmdzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgLy8gSWYgZXZlbnQsIGNoZWNrIHRoYXQgcmVsZXZhbnQgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMgaGF2ZSBjb21wbGV0ZWQuXHJcbiAgICAgICAgICAgIGlmIChjb21tYW5kID09PSBcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFttZWFzdXJlbWVudElkLCBndGFnUGFyYW1zXSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBFVkVOVCwgc2Vjb25kIGFyZyBtdXN0IGJlIG1lYXN1cmVtZW50SWQuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBndGFnT25FdmVudChndGFnQ29yZSwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFttZWFzdXJlbWVudElkLCBndGFnUGFyYW1zXSA9IGFyZ3M7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiBDT05GSUcsIHNlY29uZCBhcmcgbXVzdCBiZSBtZWFzdXJlbWVudElkLlxyXG4gICAgICAgICAgICAgICAgYXdhaXQgZ3RhZ09uQ29uZmlnKGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgbWVhc3VyZW1lbnRJZCwgZ3RhZ1BhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoY29tbWFuZCA9PT0gXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2d0YWdQYXJhbXNdID0gYXJncztcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKFwiY29uc2VudFwiIC8qIEd0YWdDb21tYW5kLkNPTlNFTlQgKi8sICd1cGRhdGUnLCBndGFnUGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcImdldFwiIC8qIEd0YWdDb21tYW5kLkdFVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW21lYXN1cmVtZW50SWQsIGZpZWxkTmFtZSwgY2FsbGJhY2tdID0gYXJncztcclxuICAgICAgICAgICAgICAgIGd0YWdDb3JlKFwiZ2V0XCIgLyogR3RhZ0NvbW1hbmQuR0VUICovLCBtZWFzdXJlbWVudElkLCBmaWVsZE5hbWUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChjb21tYW5kID09PSBcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2N1c3RvbVBhcmFtc10gPSBhcmdzO1xyXG4gICAgICAgICAgICAgICAgLy8gSWYgU0VULCBzZWNvbmQgYXJnIG11c3QgYmUgcGFyYW1zLlxyXG4gICAgICAgICAgICAgICAgZ3RhZ0NvcmUoXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIGN1c3RvbVBhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBndGFnQ29yZShjb21tYW5kLCAuLi5hcmdzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGd0YWdXcmFwcGVyO1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGdsb2JhbCBndGFnIGZ1bmN0aW9uIG9yIHdyYXBzIGV4aXN0aW5nIG9uZSBpZiBmb3VuZC5cclxuICogVGhpcyB3cmFwcGVkIGZ1bmN0aW9uIGF0dGFjaGVzIEZpcmViYXNlIGluc3RhbmNlIElEIChGSUQpIHRvIGd0YWcgJ2NvbmZpZycgYW5kXHJcbiAqICdldmVudCcgY2FsbHMgdGhhdCBiZWxvbmcgdG8gdGhlIEdBSUQgYXNzb2NpYXRlZCB3aXRoIHRoaXMgRmlyZWJhc2UgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwYXJhbSBpbml0aWFsaXphdGlvblByb21pc2VzTWFwIE1hcCBvZiBhcHBJZHMgdG8gdGhlaXIgaW5pdGlhbGl6YXRpb24gcHJvbWlzZXMuXHJcbiAqIEBwYXJhbSBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0IEFycmF5IG9mIGR5bmFtaWMgY29uZmlnIGZldGNoIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZFRvQXBwSWQgTWFwIG9mIEdBIG1lYXN1cmVtZW50SURzIHRvIGNvcnJlc3BvbmRpbmcgRmlyZWJhc2UgYXBwSWQuXHJcbiAqIEBwYXJhbSBkYXRhTGF5ZXJOYW1lIE5hbWUgb2YgZ2xvYmFsIEdBIGRhdGFsYXllciBhcnJheS5cclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbk5hbWUgTmFtZSBvZiBnbG9iYWwgZ3RhZyBmdW5jdGlvbiAoXCJndGFnXCIgaWYgbm90IHVzZXItc3BlY2lmaWVkKS5cclxuICovXHJcbmZ1bmN0aW9uIHdyYXBPckNyZWF0ZUd0YWcoaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGRhdGFMYXllck5hbWUsIGd0YWdGdW5jdGlvbk5hbWUpIHtcclxuICAgIC8vIENyZWF0ZSBhIGJhc2ljIGNvcmUgZ3RhZyBmdW5jdGlvblxyXG4gICAgbGV0IGd0YWdDb3JlID0gZnVuY3Rpb24gKC4uLl9hcmdzKSB7XHJcbiAgICAgICAgLy8gTXVzdCBwdXNoIElBcmd1bWVudHMgb2JqZWN0LCBub3QgYW4gYXJyYXkuXHJcbiAgICAgICAgd2luZG93W2RhdGFMYXllck5hbWVdLnB1c2goYXJndW1lbnRzKTtcclxuICAgIH07XHJcbiAgICAvLyBSZXBsYWNlIGl0IHdpdGggZXhpc3Rpbmcgb25lIGlmIGZvdW5kXHJcbiAgICBpZiAod2luZG93W2d0YWdGdW5jdGlvbk5hbWVdICYmXHJcbiAgICAgICAgdHlwZW9mIHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBndGFnQ29yZSA9IHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXTtcclxuICAgIH1cclxuICAgIHdpbmRvd1tndGFnRnVuY3Rpb25OYW1lXSA9IHdyYXBHdGFnKGd0YWdDb3JlLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCk7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGd0YWdDb3JlLFxyXG4gICAgICAgIHdyYXBwZWRHdGFnOiB3aW5kb3dbZ3RhZ0Z1bmN0aW9uTmFtZV1cclxuICAgIH07XHJcbn1cclxuLyoqXHJcbiAqIFJldHVybnMgdGhlIHNjcmlwdCB0YWcgaW4gdGhlIERPTSBtYXRjaGluZyBib3RoIHRoZSBndGFnIHVybCBwYXR0ZXJuXHJcbiAqIGFuZCB0aGUgcHJvdmlkZWQgZGF0YSBsYXllciBuYW1lLlxyXG4gKi9cclxuZnVuY3Rpb24gZmluZEd0YWdTY3JpcHRPblBhZ2UoZGF0YUxheWVyTmFtZSkge1xyXG4gICAgY29uc3Qgc2NyaXB0VGFncyA9IHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBPYmplY3QudmFsdWVzKHNjcmlwdFRhZ3MpKSB7XHJcbiAgICAgICAgaWYgKHRhZy5zcmMgJiZcclxuICAgICAgICAgICAgdGFnLnNyYy5pbmNsdWRlcyhHVEFHX1VSTCkgJiZcclxuICAgICAgICAgICAgdGFnLnNyYy5pbmNsdWRlcyhkYXRhTGF5ZXJOYW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBCYWNrb2ZmIGZhY3RvciBmb3IgNTAzIGVycm9ycywgd2hpY2ggd2Ugd2FudCB0byBiZSBjb25zZXJ2YXRpdmUgYWJvdXRcclxuICogdG8gYXZvaWQgb3ZlcmxvYWRpbmcgc2VydmVycy4gRWFjaCByZXRyeSBpbnRlcnZhbCB3aWxsIGJlXHJcbiAqIEJBU0VfSU5URVJWQUxfTUlMTElTICogTE9OR19SRVRSWV9GQUNUT1IgXiByZXRyeUNvdW50LCBzbyB0aGUgc2Vjb25kIG9uZVxyXG4gKiB3aWxsIGJlIH4zMCBzZWNvbmRzICh3aXRoIGZ1enppbmcpLlxyXG4gKi9cclxuY29uc3QgTE9OR19SRVRSWV9GQUNUT1IgPSAzMDtcclxuLyoqXHJcbiAqIEJhc2Ugd2FpdCBpbnRlcnZhbCB0byBtdWx0aXBsaWVkIGJ5IGJhY2tvZmZGYWN0b3JeYmFja29mZkNvdW50LlxyXG4gKi9cclxuY29uc3QgQkFTRV9JTlRFUlZBTF9NSUxMSVMgPSAxMDAwO1xyXG4vKipcclxuICogU3R1YmJhYmxlIHJldHJ5IGRhdGEgc3RvcmFnZSBjbGFzcy5cclxuICovXHJcbmNsYXNzIFJldHJ5RGF0YSB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aHJvdHRsZU1ldGFkYXRhID0ge30sIGludGVydmFsTWlsbGlzID0gQkFTRV9JTlRFUlZBTF9NSUxMSVMpIHtcclxuICAgICAgICB0aGlzLnRocm90dGxlTWV0YWRhdGEgPSB0aHJvdHRsZU1ldGFkYXRhO1xyXG4gICAgICAgIHRoaXMuaW50ZXJ2YWxNaWxsaXMgPSBpbnRlcnZhbE1pbGxpcztcclxuICAgIH1cclxuICAgIGdldFRocm90dGxlTWV0YWRhdGEoYXBwSWQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50aHJvdHRsZU1ldGFkYXRhW2FwcElkXTtcclxuICAgIH1cclxuICAgIHNldFRocm90dGxlTWV0YWRhdGEoYXBwSWQsIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgdGhpcy50aHJvdHRsZU1ldGFkYXRhW2FwcElkXSA9IG1ldGFkYXRhO1xyXG4gICAgfVxyXG4gICAgZGVsZXRlVGhyb3R0bGVNZXRhZGF0YShhcHBJZCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnRocm90dGxlTWV0YWRhdGFbYXBwSWRdO1xyXG4gICAgfVxyXG59XHJcbmNvbnN0IGRlZmF1bHRSZXRyeURhdGEgPSBuZXcgUmV0cnlEYXRhKCk7XHJcbi8qKlxyXG4gKiBTZXQgR0VUIHJlcXVlc3QgaGVhZGVycy5cclxuICogQHBhcmFtIGFwaUtleSBBcHAgQVBJIGtleS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEhlYWRlcnMoYXBpS2V5KSB7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICd4LWdvb2ctYXBpLWtleSc6IGFwaUtleVxyXG4gICAgfSk7XHJcbn1cclxuLyoqXHJcbiAqIEZldGNoZXMgZHluYW1pYyBjb25maWcgZnJvbSBiYWNrZW5kLlxyXG4gKiBAcGFyYW0gYXBwIEZpcmViYXNlIGFwcCB0byBmZXRjaCBjb25maWcgZm9yLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hEeW5hbWljQ29uZmlnKGFwcEZpZWxkcykge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgeyBhcHBJZCwgYXBpS2V5IH0gPSBhcHBGaWVsZHM7XHJcbiAgICBjb25zdCByZXF1ZXN0ID0ge1xyXG4gICAgICAgIG1ldGhvZDogJ0dFVCcsXHJcbiAgICAgICAgaGVhZGVyczogZ2V0SGVhZGVycyhhcGlLZXkpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgYXBwVXJsID0gRFlOQU1JQ19DT05GSUdfVVJMLnJlcGxhY2UoJ3thcHAtaWR9JywgYXBwSWQpO1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcHBVcmwsIHJlcXVlc3QpO1xyXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyAhPT0gMzA0KSB7XHJcbiAgICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICcnO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIC8vIFRyeSB0byBnZXQgYW55IGVycm9yIG1lc3NhZ2UgdGV4dCBmcm9tIHNlcnZlciByZXNwb25zZS5cclxuICAgICAgICAgICAgY29uc3QganNvblJlc3BvbnNlID0gKGF3YWl0IHJlc3BvbnNlLmpzb24oKSk7XHJcbiAgICAgICAgICAgIGlmICgoX2EgPSBqc29uUmVzcG9uc2UuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5tZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBqc29uUmVzcG9uc2UuZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoX2lnbm9yZWQpIHsgfVxyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiY29uZmlnLWZldGNoLWZhaWxlZFwiIC8qIEFuYWx5dGljc0Vycm9yLkNPTkZJR19GRVRDSF9GQUlMRUQgKi8sIHtcclxuICAgICAgICAgICAgaHR0cFN0YXR1czogcmVzcG9uc2Uuc3RhdHVzLFxyXG4gICAgICAgICAgICByZXNwb25zZU1lc3NhZ2U6IGVycm9yTWVzc2FnZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxufVxyXG4vKipcclxuICogRmV0Y2hlcyBkeW5hbWljIGNvbmZpZyBmcm9tIGJhY2tlbmQsIHJldHJ5aW5nIGlmIGZhaWxlZC5cclxuICogQHBhcmFtIGFwcCBGaXJlYmFzZSBhcHAgdG8gZmV0Y2ggY29uZmlnIGZvci5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeShhcHAsIFxyXG4vLyByZXRyeURhdGEgYW5kIHRpbWVvdXRNaWxsaXMgYXJlIHBhcmFtZXRlcml6ZWQgdG8gYWxsb3cgcGFzc2luZyBhIGRpZmZlcmVudCB2YWx1ZSBmb3IgdGVzdGluZy5cclxucmV0cnlEYXRhID0gZGVmYXVsdFJldHJ5RGF0YSwgdGltZW91dE1pbGxpcykge1xyXG4gICAgY29uc3QgeyBhcHBJZCwgYXBpS2V5LCBtZWFzdXJlbWVudElkIH0gPSBhcHAub3B0aW9ucztcclxuICAgIGlmICghYXBwSWQpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcC1pZFwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQUF9JRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwaUtleSkge1xyXG4gICAgICAgIGlmIChtZWFzdXJlbWVudElkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBtZWFzdXJlbWVudElkLFxyXG4gICAgICAgICAgICAgICAgYXBwSWRcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcGkta2V5XCIgLyogQW5hbHl0aWNzRXJyb3IuTk9fQVBJX0tFWSAqLyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aHJvdHRsZU1ldGFkYXRhID0gcmV0cnlEYXRhLmdldFRocm90dGxlTWV0YWRhdGEoYXBwSWQpIHx8IHtcclxuICAgICAgICBiYWNrb2ZmQ291bnQ6IDAsXHJcbiAgICAgICAgdGhyb3R0bGVFbmRUaW1lTWlsbGlzOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgc2lnbmFsID0gbmV3IEFuYWx5dGljc0Fib3J0U2lnbmFsKCk7XHJcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcclxuICAgICAgICAvLyBOb3RlIGEgdmVyeSBsb3cgZGVsYXksIGVnIDwgMTBtcywgY2FuIGVsYXBzZSBiZWZvcmUgbGlzdGVuZXJzIGFyZSBpbml0aWFsaXplZC5cclxuICAgICAgICBzaWduYWwuYWJvcnQoKTtcclxuICAgIH0sIHRpbWVvdXRNaWxsaXMgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXRNaWxsaXMgOiBGRVRDSF9USU1FT1VUX01JTExJUyk7XHJcbiAgICByZXR1cm4gYXR0ZW1wdEZldGNoRHluYW1pY0NvbmZpZ1dpdGhSZXRyeSh7IGFwcElkLCBhcGlLZXksIG1lYXN1cmVtZW50SWQgfSwgdGhyb3R0bGVNZXRhZGF0YSwgc2lnbmFsLCByZXRyeURhdGEpO1xyXG59XHJcbi8qKlxyXG4gKiBSdW5zIG9uZSByZXRyeSBhdHRlbXB0LlxyXG4gKiBAcGFyYW0gYXBwRmllbGRzIE5lY2Vzc2FyeSBhcHAgY29uZmlnIGZpZWxkcy5cclxuICogQHBhcmFtIHRocm90dGxlTWV0YWRhdGEgT25nb2luZyBtZXRhZGF0YSB0byBkZXRlcm1pbmUgdGhyb3R0bGluZyB0aW1lcy5cclxuICogQHBhcmFtIHNpZ25hbCBBYm9ydCBzaWduYWwuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBhdHRlbXB0RmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KGFwcEZpZWxkcywgeyB0aHJvdHRsZUVuZFRpbWVNaWxsaXMsIGJhY2tvZmZDb3VudCB9LCBzaWduYWwsIHJldHJ5RGF0YSA9IGRlZmF1bHRSZXRyeURhdGEgLy8gZm9yIHRlc3RpbmdcclxuKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCB7IGFwcElkLCBtZWFzdXJlbWVudElkIH0gPSBhcHBGaWVsZHM7XHJcbiAgICAvLyBTdGFydHMgd2l0aCBhIChwb3RlbnRpYWxseSB6ZXJvKSB0aW1lb3V0IHRvIHN1cHBvcnQgcmVzdW1wdGlvbiBmcm9tIHN0b3JlZCBzdGF0ZS5cclxuICAgIC8vIEVuc3VyZXMgdGhlIHRocm90dGxlIGVuZCB0aW1lIGlzIGhvbm9yZWQgaWYgdGhlIGxhc3QgYXR0ZW1wdCB0aW1lZCBvdXQuXHJcbiAgICAvLyBOb3RlIHRoZSBTREsgd2lsbCBuZXZlciBtYWtlIGEgcmVxdWVzdCBpZiB0aGUgZmV0Y2ggdGltZW91dCBleHBpcmVzIGF0IHRoaXMgcG9pbnQuXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IHNldEFib3J0YWJsZVRpbWVvdXQoc2lnbmFsLCB0aHJvdHRsZUVuZFRpbWVNaWxsaXMpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAobWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihgVGltZWQgb3V0IGZldGNoaW5nIHRoaXMgRmlyZWJhc2UgYXBwJ3MgbWVhc3VyZW1lbnQgSUQgZnJvbSB0aGUgc2VydmVyLmAgK1xyXG4gICAgICAgICAgICAgICAgYCBGYWxsaW5nIGJhY2sgdG8gdGhlIG1lYXN1cmVtZW50IElEICR7bWVhc3VyZW1lbnRJZH1gICtcclxuICAgICAgICAgICAgICAgIGAgcHJvdmlkZWQgaW4gdGhlIFwibWVhc3VyZW1lbnRJZFwiIGZpZWxkIGluIHRoZSBsb2NhbCBGaXJlYmFzZSBjb25maWcuIFske2UgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tZXNzYWdlfV1gKTtcclxuICAgICAgICAgICAgcmV0dXJuIHsgYXBwSWQsIG1lYXN1cmVtZW50SWQgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaER5bmFtaWNDb25maWcoYXBwRmllbGRzKTtcclxuICAgICAgICAvLyBOb3RlIHRoZSBTREsgb25seSBjbGVhcnMgdGhyb3R0bGUgc3RhdGUgaWYgcmVzcG9uc2UgaXMgc3VjY2VzcyBvciBub24tcmV0cmlhYmxlLlxyXG4gICAgICAgIHJldHJ5RGF0YS5kZWxldGVUaHJvdHRsZU1ldGFkYXRhKGFwcElkKTtcclxuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yID0gZTtcclxuICAgICAgICBpZiAoIWlzUmV0cmlhYmxlRXJyb3IoZXJyb3IpKSB7XHJcbiAgICAgICAgICAgIHJldHJ5RGF0YS5kZWxldGVUaHJvdHRsZU1ldGFkYXRhKGFwcElkKTtcclxuICAgICAgICAgICAgaWYgKG1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKGBGYWlsZWQgdG8gZmV0Y2ggdGhpcyBGaXJlYmFzZSBhcHAncyBtZWFzdXJlbWVudCBJRCBmcm9tIHRoZSBzZXJ2ZXIuYCArXHJcbiAgICAgICAgICAgICAgICAgICAgYCBGYWxsaW5nIGJhY2sgdG8gdGhlIG1lYXN1cmVtZW50IElEICR7bWVhc3VyZW1lbnRJZH1gICtcclxuICAgICAgICAgICAgICAgICAgICBgIHByb3ZpZGVkIGluIHRoZSBcIm1lYXN1cmVtZW50SWRcIiBmaWVsZCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnLiBbJHtlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZX1dYCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBhcHBJZCwgbWVhc3VyZW1lbnRJZCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBiYWNrb2ZmTWlsbGlzID0gTnVtYmVyKChfYSA9IGVycm9yID09PSBudWxsIHx8IGVycm9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlcnJvci5jdXN0b21EYXRhKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaHR0cFN0YXR1cykgPT09IDUwM1xyXG4gICAgICAgICAgICA/IGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMoYmFja29mZkNvdW50LCByZXRyeURhdGEuaW50ZXJ2YWxNaWxsaXMsIExPTkdfUkVUUllfRkFDVE9SKVxyXG4gICAgICAgICAgICA6IGNhbGN1bGF0ZUJhY2tvZmZNaWxsaXMoYmFja29mZkNvdW50LCByZXRyeURhdGEuaW50ZXJ2YWxNaWxsaXMpO1xyXG4gICAgICAgIC8vIEluY3JlbWVudHMgYmFja29mZiBzdGF0ZS5cclxuICAgICAgICBjb25zdCB0aHJvdHRsZU1ldGFkYXRhID0ge1xyXG4gICAgICAgICAgICB0aHJvdHRsZUVuZFRpbWVNaWxsaXM6IERhdGUubm93KCkgKyBiYWNrb2ZmTWlsbGlzLFxyXG4gICAgICAgICAgICBiYWNrb2ZmQ291bnQ6IGJhY2tvZmZDb3VudCArIDFcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIFBlcnNpc3RzIHN0YXRlLlxyXG4gICAgICAgIHJldHJ5RGF0YS5zZXRUaHJvdHRsZU1ldGFkYXRhKGFwcElkLCB0aHJvdHRsZU1ldGFkYXRhKTtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYENhbGxpbmcgYXR0ZW1wdEZldGNoIGFnYWluIGluICR7YmFja29mZk1pbGxpc30gbWlsbGlzYCk7XHJcbiAgICAgICAgcmV0dXJuIGF0dGVtcHRGZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkoYXBwRmllbGRzLCB0aHJvdHRsZU1ldGFkYXRhLCBzaWduYWwsIHJldHJ5RGF0YSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFN1cHBvcnRzIHdhaXRpbmcgb24gYSBiYWNrb2ZmIGJ5OlxyXG4gKlxyXG4gKiA8dWw+XHJcbiAqICAgPGxpPlByb21pc2lmeWluZyBzZXRUaW1lb3V0LCBzbyB3ZSBjYW4gc2V0IGEgdGltZW91dCBpbiBvdXIgUHJvbWlzZSBjaGFpbjwvbGk+XHJcbiAqICAgPGxpPkxpc3RlbmluZyBvbiBhIHNpZ25hbCBidXMgZm9yIGFib3J0IGV2ZW50cywganVzdCBsaWtlIHRoZSBGZXRjaCBBUEk8L2xpPlxyXG4gKiAgIDxsaT5GYWlsaW5nIGluIHRoZSBzYW1lIHdheSB0aGUgRmV0Y2ggQVBJIGZhaWxzLCBzbyB0aW1pbmcgb3V0IGEgbGl2ZSByZXF1ZXN0IGFuZCBhIHRocm90dGxlZFxyXG4gKiAgICAgICByZXF1ZXN0IGFwcGVhciB0aGUgc2FtZS48L2xpPlxyXG4gKiA8L3VsPlxyXG4gKlxyXG4gKiA8cD5WaXNpYmxlIGZvciB0ZXN0aW5nLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0QWJvcnRhYmxlVGltZW91dChzaWduYWwsIHRocm90dGxlRW5kVGltZU1pbGxpcykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAvLyBEZXJpdmVzIGJhY2tvZmYgZnJvbSBnaXZlbiBlbmQgdGltZSwgbm9ybWFsaXppbmcgbmVnYXRpdmUgbnVtYmVycyB0byB6ZXJvLlxyXG4gICAgICAgIGNvbnN0IGJhY2tvZmZNaWxsaXMgPSBNYXRoLm1heCh0aHJvdHRsZUVuZFRpbWVNaWxsaXMgLSBEYXRlLm5vdygpLCAwKTtcclxuICAgICAgICBjb25zdCB0aW1lb3V0ID0gc2V0VGltZW91dChyZXNvbHZlLCBiYWNrb2ZmTWlsbGlzKTtcclxuICAgICAgICAvLyBBZGRzIGxpc3RlbmVyLCByYXRoZXIgdGhhbiBzZXRzIG9uYWJvcnQsIGJlY2F1c2Ugc2lnbmFsIGlzIGEgc2hhcmVkIG9iamVjdC5cclxuICAgICAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcclxuICAgICAgICAgICAgLy8gSWYgdGhlIHJlcXVlc3QgY29tcGxldGVzIGJlZm9yZSB0aGlzIHRpbWVvdXQsIHRoZSByZWplY3Rpb24gaGFzIG5vIGVmZmVjdC5cclxuICAgICAgICAgICAgcmVqZWN0KEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZmV0Y2gtdGhyb3R0bGVcIiAvKiBBbmFseXRpY3NFcnJvci5GRVRDSF9USFJPVFRMRSAqLywge1xyXG4gICAgICAgICAgICAgICAgdGhyb3R0bGVFbmRUaW1lTWlsbGlzXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHtAbGluayBFcnJvcn0gaW5kaWNhdGVzIGEgZmV0Y2ggcmVxdWVzdCBtYXkgc3VjY2VlZCBsYXRlci5cclxuICovXHJcbmZ1bmN0aW9uIGlzUmV0cmlhYmxlRXJyb3IoZSkge1xyXG4gICAgaWYgKCEoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHx8ICFlLmN1c3RvbURhdGEpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBVc2VzIHN0cmluZyBpbmRleCBkZWZpbmVkIGJ5IEVycm9yRGF0YSwgd2hpY2ggRmlyZWJhc2VFcnJvciBpbXBsZW1lbnRzLlxyXG4gICAgY29uc3QgaHR0cFN0YXR1cyA9IE51bWJlcihlLmN1c3RvbURhdGFbJ2h0dHBTdGF0dXMnXSk7XHJcbiAgICByZXR1cm4gKGh0dHBTdGF0dXMgPT09IDQyOSB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwMCB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwMyB8fFxyXG4gICAgICAgIGh0dHBTdGF0dXMgPT09IDUwNCk7XHJcbn1cclxuLyoqXHJcbiAqIFNoaW1zIGEgbWluaW1hbCBBYm9ydFNpZ25hbCAoY29waWVkIGZyb20gUmVtb3RlIENvbmZpZykuXHJcbiAqXHJcbiAqIDxwPkFib3J0Q29udHJvbGxlcidzIEFib3J0U2lnbmFsIGNvbnZlbmllbnRseSBkZWNvdXBsZXMgZmV0Y2ggdGltZW91dCBsb2dpYyBmcm9tIG90aGVyIGFzcGVjdHNcclxuICogb2YgbmV0d29ya2luZywgc3VjaCBhcyByZXRyaWVzLiBGaXJlYmFzZSBkb2Vzbid0IHVzZSBBYm9ydENvbnRyb2xsZXIgZW5vdWdoIHRvIGp1c3RpZnkgYVxyXG4gKiBwb2x5ZmlsbCByZWNvbW1lbmRhdGlvbiwgbGlrZSB3ZSBkbyB3aXRoIHRoZSBGZXRjaCBBUEksIGJ1dCB0aGlzIG1pbmltYWwgc2hpbSBjYW4gZWFzaWx5IGJlXHJcbiAqIHN3YXBwZWQgb3V0IGlmL3doZW4gd2UgZG8uXHJcbiAqL1xyXG5jbGFzcyBBbmFseXRpY3NBYm9ydFNpZ25hbCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gICAgfVxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihsaXN0ZW5lcikge1xyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG4gICAgYWJvcnQoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKTtcclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRXZlbnQgcGFyYW1ldGVycyB0byBzZXQgb24gJ2d0YWcnIGR1cmluZyBpbml0aWFsaXphdGlvbi5cclxuICovXHJcbmxldCBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdDtcclxuLyoqXHJcbiAqIExvZ3MgYW4gYW5hbHl0aWNzIGV2ZW50IHRocm91Z2ggdGhlIEZpcmViYXNlIFNESy5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gZXZlbnROYW1lIEdvb2dsZSBBbmFseXRpY3MgZXZlbnQgbmFtZSwgY2hvb3NlIGZyb20gc3RhbmRhcmQgbGlzdCBvciB1c2UgYSBjdXN0b20gc3RyaW5nLlxyXG4gKiBAcGFyYW0gZXZlbnRQYXJhbXMgQW5hbHl0aWNzIGV2ZW50IHBhcmFtZXRlcnMuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBsb2dFdmVudCQxKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8sIGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICAgICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBldmVudFBhcmFtcyksIHsgJ3NlbmRfdG8nOiBtZWFzdXJlbWVudElkIH0pO1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImV2ZW50XCIgLyogR3RhZ0NvbW1hbmQuRVZFTlQgKi8sIGV2ZW50TmFtZSwgcGFyYW1zKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2V0IHNjcmVlbl9uYW1lIHBhcmFtZXRlciBmb3IgdGhpcyBHb29nbGUgQW5hbHl0aWNzIElELlxyXG4gKlxyXG4gKiBAZGVwcmVjYXRlZCBVc2Uge0BsaW5rIGxvZ0V2ZW50fSB3aXRoIGBldmVudE5hbWVgIGFzICdzY3JlZW5fdmlldycgYW5kIGFkZCByZWxldmFudCBgZXZlbnRQYXJhbXNgLlxyXG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vZmlyZWJhc2UuZ29vZ2xlLmNvbS9kb2NzL2FuYWx5dGljcy9zY3JlZW52aWV3cyB8IFRyYWNrIFNjcmVlbnZpZXdzfS5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gc2NyZWVuTmFtZSBTY3JlZW4gbmFtZSBzdHJpbmcgdG8gc2V0LlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gc2V0Q3VycmVudFNjcmVlbiQxKGd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBzY3JlZW5OYW1lLCBvcHRpb25zKSB7XHJcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmdsb2JhbCkge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgeyAnc2NyZWVuX25hbWUnOiBzY3JlZW5OYW1lIH0pO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBtZWFzdXJlbWVudElkLCB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgJ3NjcmVlbl9uYW1lJzogc2NyZWVuTmFtZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBTZXQgdXNlcl9pZCBwYXJhbWV0ZXIgZm9yIHRoaXMgR29vZ2xlIEFuYWx5dGljcyBJRC5cclxuICpcclxuICogQHBhcmFtIGd0YWdGdW5jdGlvbiBXcmFwcGVkIGd0YWcgZnVuY3Rpb24gdGhhdCB3YWl0cyBmb3IgZmlkIHRvIGJlIHNldCBiZWZvcmUgc2VuZGluZyBhbiBldmVudFxyXG4gKiBAcGFyYW0gaWQgVXNlciBJRCBzdHJpbmcgdG8gc2V0XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBzZXRVc2VySWQkMShndGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZSwgaWQsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCB7ICd1c2VyX2lkJzogaWQgfSk7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgY29uc3QgbWVhc3VyZW1lbnRJZCA9IGF3YWl0IGluaXRpYWxpemF0aW9uUHJvbWlzZTtcclxuICAgICAgICBndGFnRnVuY3Rpb24oXCJjb25maWdcIiAvKiBHdGFnQ29tbWFuZC5DT05GSUcgKi8sIG1lYXN1cmVtZW50SWQsIHtcclxuICAgICAgICAgICAgdXBkYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAndXNlcl9pZCc6IGlkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuLyoqXHJcbiAqIFNldCBhbGwgb3RoZXIgdXNlciBwcm9wZXJ0aWVzIG90aGVyIHRoYW4gdXNlcl9pZCBhbmQgc2NyZWVuX25hbWUuXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICogQHBhcmFtIHByb3BlcnRpZXMgTWFwIG9mIHVzZXIgcHJvcGVydGllcyB0byBzZXRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldFVzZXJQcm9wZXJ0aWVzJDEoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UsIHByb3BlcnRpZXMsIG9wdGlvbnMpIHtcclxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgY29uc3QgZmxhdFByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSkge1xyXG4gICAgICAgICAgICAvLyB1c2UgZG90IG5vdGF0aW9uIGZvciBtZXJnZSBiZWhhdmlvciBpbiBndGFnLmpzXHJcbiAgICAgICAgICAgIGZsYXRQcm9wZXJ0aWVzW2B1c2VyX3Byb3BlcnRpZXMuJHtrZXl9YF0gPSBwcm9wZXJ0aWVzW2tleV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcInNldFwiIC8qIEd0YWdDb21tYW5kLlNFVCAqLywgZmxhdFByb3BlcnRpZXMpO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICAgICAgZ3RhZ0Z1bmN0aW9uKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBtZWFzdXJlbWVudElkLCB7XHJcbiAgICAgICAgICAgIHVwZGF0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgJ3VzZXJfcHJvcGVydGllcyc6IHByb3BlcnRpZXNcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmV0cmlldmVzIGEgdW5pcXVlIEdvb2dsZSBBbmFseXRpY3MgaWRlbnRpZmllciBmb3IgdGhlIHdlYiBjbGllbnQuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vYW5hbHl0aWNzL2Rldmd1aWRlcy9jb2xsZWN0aW9uL2dhNC9yZWZlcmVuY2UvY29uZmlnI2NsaWVudF9pZCB8IGNsaWVudF9pZH0uXHJcbiAqXHJcbiAqIEBwYXJhbSBndGFnRnVuY3Rpb24gV3JhcHBlZCBndGFnIGZ1bmN0aW9uIHRoYXQgd2FpdHMgZm9yIGZpZCB0byBiZSBzZXQgYmVmb3JlIHNlbmRpbmcgYW4gZXZlbnRcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGludGVybmFsR2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQoZ3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2UpIHtcclxuICAgIGNvbnN0IG1lYXN1cmVtZW50SWQgPSBhd2FpdCBpbml0aWFsaXphdGlvblByb21pc2U7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgIGd0YWdGdW5jdGlvbihcImdldFwiIC8qIEd0YWdDb21tYW5kLkdFVCAqLywgbWVhc3VyZW1lbnRJZCwgJ2NsaWVudF9pZCcsIChjbGllbnRJZCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWNsaWVudElkKSB7XHJcbiAgICAgICAgICAgICAgICByZWplY3QoRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1jbGllbnQtaWRcIiAvKiBBbmFseXRpY3NFcnJvci5OT19DTElFTlRfSUQgKi8pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXNvbHZlKGNsaWVudElkKTtcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG59XHJcbi8qKlxyXG4gKiBTZXQgd2hldGhlciBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgSUQuXHJcbiAqXHJcbiAqIEBwYXJhbSBlbmFibGVkIElmIHRydWUsIGNvbGxlY3Rpb24gaXMgZW5hYmxlZCBmb3IgdGhpcyBJRC5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkJDEoaW5pdGlhbGl6YXRpb25Qcm9taXNlLCBlbmFibGVkKSB7XHJcbiAgICBjb25zdCBtZWFzdXJlbWVudElkID0gYXdhaXQgaW5pdGlhbGl6YXRpb25Qcm9taXNlO1xyXG4gICAgd2luZG93W2BnYS1kaXNhYmxlLSR7bWVhc3VyZW1lbnRJZH1gXSA9ICFlbmFibGVkO1xyXG59XHJcbi8qKlxyXG4gKiBDb25zZW50IHBhcmFtZXRlcnMgdG8gZGVmYXVsdCB0byBkdXJpbmcgJ2d0YWcnIGluaXRpYWxpemF0aW9uLlxyXG4gKi9cclxubGV0IGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0O1xyXG4vKipcclxuICogU2V0cyB0aGUgdmFyaWFibGUge0BsaW5rIGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0fSBmb3IgdXNlIGluIHRoZSBpbml0aWFsaXphdGlvbiBvZlxyXG4gKiBhbmFseXRpY3MuXHJcbiAqXHJcbiAqIEBwYXJhbSBjb25zZW50U2V0dGluZ3MgTWFwcyB0aGUgYXBwbGljYWJsZSBlbmQgdXNlciBjb25zZW50IHN0YXRlIGZvciBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gX3NldENvbnNlbnREZWZhdWx0Rm9ySW5pdChjb25zZW50U2V0dGluZ3MpIHtcclxuICAgIGRlZmF1bHRDb25zZW50U2V0dGluZ3NGb3JJbml0ID0gY29uc2VudFNldHRpbmdzO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIHRoZSB2YXJpYWJsZSBgZGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXRgIGZvciB1c2UgaW4gdGhlIGluaXRpYWxpemF0aW9uIG9mXHJcbiAqIGFuYWx5dGljcy5cclxuICpcclxuICogQHBhcmFtIGN1c3RvbVBhcmFtcyBBbnkgY3VzdG9tIHBhcmFtcyB0aGUgdXNlciBtYXkgcGFzcyB0byBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KGN1c3RvbVBhcmFtcykge1xyXG4gICAgZGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQgPSBjdXN0b21QYXJhbXM7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gdmFsaWRhdGVJbmRleGVkREIoKSB7XHJcbiAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICBsb2dnZXIud2FybihFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImluZGV4ZWRkYi11bmF2YWlsYWJsZVwiIC8qIEFuYWx5dGljc0Vycm9yLklOREVYRUREQl9VTkFWQUlMQUJMRSAqLywge1xyXG4gICAgICAgICAgICBlcnJvckluZm86ICdJbmRleGVkREIgaXMgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50LidcclxuICAgICAgICB9KS5tZXNzYWdlKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBhd2FpdCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5kZXhlZGRiLXVuYXZhaWxhYmxlXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5ERVhFRERCX1VOQVZBSUxBQkxFICovLCB7XHJcbiAgICAgICAgICAgICAgICBlcnJvckluZm86IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS50b1N0cmluZygpXHJcbiAgICAgICAgICAgIH0pLm1lc3NhZ2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgdGhlIGFuYWx5dGljcyBpbnN0YW5jZSBpbiBndGFnLmpzIGJ5IGNhbGxpbmcgY29uZmlnIGNvbW1hbmQgd2l0aCBmaWQuXHJcbiAqXHJcbiAqIE5PVEU6IFdlIGNvbWJpbmUgYW5hbHl0aWNzIGluaXRpYWxpemF0aW9uIGFuZCBzZXR0aW5nIGZpZCB0b2dldGhlciBiZWNhdXNlIHdlIHdhbnQgZmlkIHRvIGJlXHJcbiAqIHBhcnQgb2YgdGhlIGBwYWdlX3ZpZXdgIGV2ZW50IHRoYXQncyBzZW50IGR1cmluZyB0aGUgaW5pdGlhbGl6YXRpb25cclxuICogQHBhcmFtIGFwcCBGaXJlYmFzZSBhcHBcclxuICogQHBhcmFtIGd0YWdDb3JlIFRoZSBndGFnIGZ1bmN0aW9uIHRoYXQncyBub3Qgd3JhcHBlZC5cclxuICogQHBhcmFtIGR5bmFtaWNDb25maWdQcm9taXNlc0xpc3QgQXJyYXkgb2YgYWxsIGR5bmFtaWMgY29uZmlnIHByb21pc2VzLlxyXG4gKiBAcGFyYW0gbWVhc3VyZW1lbnRJZFRvQXBwSWQgTWFwcyBtZWFzdXJlbWVudElEIHRvIGFwcElELlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyBfRmlyZWJhc2VJbnN0YWxsYXRpb25zSW50ZXJuYWwgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEByZXR1cm5zIE1lYXN1cmVtZW50IElELlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gX2luaXRpYWxpemVBbmFseXRpY3MoYXBwLCBkeW5hbWljQ29uZmlnUHJvbWlzZXNMaXN0LCBtZWFzdXJlbWVudElkVG9BcHBJZCwgaW5zdGFsbGF0aW9ucywgZ3RhZ0NvcmUsIGRhdGFMYXllck5hbWUsIG9wdGlvbnMpIHtcclxuICAgIHZhciBfYTtcclxuICAgIGNvbnN0IGR5bmFtaWNDb25maWdQcm9taXNlID0gZmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5KGFwcCk7XHJcbiAgICAvLyBPbmNlIGZldGNoZWQsIG1hcCBtZWFzdXJlbWVudElkcyB0byBhcHBJZCwgZm9yIGVhc2Ugb2YgbG9va3VwIGluIHdyYXBwZWQgZ3RhZyBmdW5jdGlvbi5cclxuICAgIGR5bmFtaWNDb25maWdQcm9taXNlXHJcbiAgICAgICAgLnRoZW4oY29uZmlnID0+IHtcclxuICAgICAgICBtZWFzdXJlbWVudElkVG9BcHBJZFtjb25maWcubWVhc3VyZW1lbnRJZF0gPSBjb25maWcuYXBwSWQ7XHJcbiAgICAgICAgaWYgKGFwcC5vcHRpb25zLm1lYXN1cmVtZW50SWQgJiZcclxuICAgICAgICAgICAgY29uZmlnLm1lYXN1cmVtZW50SWQgIT09IGFwcC5vcHRpb25zLm1lYXN1cmVtZW50SWQpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oYFRoZSBtZWFzdXJlbWVudCBJRCBpbiB0aGUgbG9jYWwgRmlyZWJhc2UgY29uZmlnICgke2FwcC5vcHRpb25zLm1lYXN1cmVtZW50SWR9KWAgK1xyXG4gICAgICAgICAgICAgICAgYCBkb2VzIG5vdCBtYXRjaCB0aGUgbWVhc3VyZW1lbnQgSUQgZmV0Y2hlZCBmcm9tIHRoZSBzZXJ2ZXIgKCR7Y29uZmlnLm1lYXN1cmVtZW50SWR9KS5gICtcclxuICAgICAgICAgICAgICAgIGAgVG8gZW5zdXJlIGFuYWx5dGljcyBldmVudHMgYXJlIGFsd2F5cyBzZW50IHRvIHRoZSBjb3JyZWN0IEFuYWx5dGljcyBwcm9wZXJ0eSxgICtcclxuICAgICAgICAgICAgICAgIGAgdXBkYXRlIHRoZWAgK1xyXG4gICAgICAgICAgICAgICAgYCBtZWFzdXJlbWVudCBJRCBmaWVsZCBpbiB0aGUgbG9jYWwgY29uZmlnIG9yIHJlbW92ZSBpdCBmcm9tIHRoZSBsb2NhbCBjb25maWcuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgICAgICAuY2F0Y2goZSA9PiBsb2dnZXIuZXJyb3IoZSkpO1xyXG4gICAgLy8gQWRkIHRvIGxpc3QgdG8gdHJhY2sgc3RhdGUgb2YgYWxsIGR5bmFtaWMgY29uZmlnIHByb21pc2VzLlxyXG4gICAgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdC5wdXNoKGR5bmFtaWNDb25maWdQcm9taXNlKTtcclxuICAgIGNvbnN0IGZpZFByb21pc2UgPSB2YWxpZGF0ZUluZGV4ZWREQigpLnRoZW4oZW52SXNWYWxpZCA9PiB7XHJcbiAgICAgICAgaWYgKGVudklzVmFsaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGluc3RhbGxhdGlvbnMuZ2V0SWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBbZHluYW1pY0NvbmZpZywgZmlkXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcclxuICAgICAgICBkeW5hbWljQ29uZmlnUHJvbWlzZSxcclxuICAgICAgICBmaWRQcm9taXNlXHJcbiAgICBdKTtcclxuICAgIC8vIERldGVjdCBpZiB1c2VyIGhhcyBhbHJlYWR5IHB1dCB0aGUgZ3RhZyA8c2NyaXB0PiB0YWcgb24gdGhpcyBwYWdlIHdpdGggdGhlIHBhc3NlZCBpblxyXG4gICAgLy8gZGF0YSBsYXllciBuYW1lLlxyXG4gICAgaWYgKCFmaW5kR3RhZ1NjcmlwdE9uUGFnZShkYXRhTGF5ZXJOYW1lKSkge1xyXG4gICAgICAgIGluc2VydFNjcmlwdFRhZyhkYXRhTGF5ZXJOYW1lLCBkeW5hbWljQ29uZmlnLm1lYXN1cmVtZW50SWQpO1xyXG4gICAgfVxyXG4gICAgLy8gRGV0ZWN0cyBpZiB0aGVyZSBhcmUgY29uc2VudCBzZXR0aW5ncyB0aGF0IG5lZWQgdG8gYmUgY29uZmlndXJlZC5cclxuICAgIGlmIChkZWZhdWx0Q29uc2VudFNldHRpbmdzRm9ySW5pdCkge1xyXG4gICAgICAgIGd0YWdDb3JlKFwiY29uc2VudFwiIC8qIEd0YWdDb21tYW5kLkNPTlNFTlQgKi8sICdkZWZhdWx0JywgZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQpO1xyXG4gICAgICAgIF9zZXRDb25zZW50RGVmYXVsdEZvckluaXQodW5kZWZpbmVkKTtcclxuICAgIH1cclxuICAgIC8vIFRoaXMgY29tbWFuZCBpbml0aWFsaXplcyBndGFnLmpzIGFuZCBvbmx5IG5lZWRzIHRvIGJlIGNhbGxlZCBvbmNlIGZvciB0aGUgZW50aXJlIHdlYiBhcHAsXHJcbiAgICAvLyBidXQgc2luY2UgaXQgaXMgaWRlbXBvdGVudCwgd2UgY2FuIGNhbGwgaXQgbXVsdGlwbGUgdGltZXMuXHJcbiAgICAvLyBXZSBrZWVwIGl0IHRvZ2V0aGVyIHdpdGggb3RoZXIgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGJldHRlciBjb2RlIHN0cnVjdHVyZS5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbiAgICBndGFnQ29yZSgnanMnLCBuZXcgRGF0ZSgpKTtcclxuICAgIC8vIFVzZXIgY29uZmlnIGFkZGVkIGZpcnN0LiBXZSBkb24ndCB3YW50IHVzZXJzIHRvIGFjY2lkZW50YWxseSBvdmVyd3JpdGVcclxuICAgIC8vIGJhc2UgRmlyZWJhc2UgY29uZmlnIHByb3BlcnRpZXMuXHJcbiAgICBjb25zdCBjb25maWdQcm9wZXJ0aWVzID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbmZpZykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge307XHJcbiAgICAvLyBndWFyZCBhZ2FpbnN0IGRldmVsb3BlcnMgYWNjaWRlbnRhbGx5IHNldHRpbmcgcHJvcGVydGllcyB3aXRoIHByZWZpeCBgZmlyZWJhc2VfYFxyXG4gICAgY29uZmlnUHJvcGVydGllc1tPUklHSU5fS0VZXSA9ICdmaXJlYmFzZSc7XHJcbiAgICBjb25maWdQcm9wZXJ0aWVzLnVwZGF0ZSA9IHRydWU7XHJcbiAgICBpZiAoZmlkICE9IG51bGwpIHtcclxuICAgICAgICBjb25maWdQcm9wZXJ0aWVzW0dBX0ZJRF9LRVldID0gZmlkO1xyXG4gICAgfVxyXG4gICAgLy8gSXQgc2hvdWxkIGJlIHRoZSBmaXJzdCBjb25maWcgY29tbWFuZCBjYWxsZWQgb24gdGhpcyBHQS1JRFxyXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGlzIEdBLUlEIGFuZCBzZXQgRklEIG9uIGl0IHVzaW5nIHRoZSBndGFnIGNvbmZpZyBBUEkuXHJcbiAgICAvLyBOb3RlOiBUaGlzIHdpbGwgdHJpZ2dlciBhIHBhZ2VfdmlldyBldmVudCB1bmxlc3MgJ3NlbmRfcGFnZV92aWV3JyBpcyBzZXQgdG8gZmFsc2UgaW5cclxuICAgIC8vIGBjb25maWdQcm9wZXJ0aWVzYC5cclxuICAgIGd0YWdDb3JlKFwiY29uZmlnXCIgLyogR3RhZ0NvbW1hbmQuQ09ORklHICovLCBkeW5hbWljQ29uZmlnLm1lYXN1cmVtZW50SWQsIGNvbmZpZ1Byb3BlcnRpZXMpO1xyXG4gICAgLy8gRGV0ZWN0cyBpZiB0aGVyZSBpcyBkYXRhIHRoYXQgd2lsbCBiZSBzZXQgb24gZXZlcnkgZXZlbnQgbG9nZ2VkIGZyb20gdGhlIFNESy5cclxuICAgIGlmIChkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdCkge1xyXG4gICAgICAgIGd0YWdDb3JlKFwic2V0XCIgLyogR3RhZ0NvbW1hbmQuU0VUICovLCBkZWZhdWx0RXZlbnRQYXJhbWV0ZXJzRm9ySW5pdCk7XHJcbiAgICAgICAgX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0KHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZHluYW1pY0NvbmZpZy5tZWFzdXJlbWVudElkO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBBbmFseXRpY3MgU2VydmljZSBjbGFzcy5cclxuICovXHJcbmNsYXNzIEFuYWx5dGljc1NlcnZpY2Uge1xyXG4gICAgY29uc3RydWN0b3IoYXBwKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICB9XHJcbiAgICBfZGVsZXRlKCkge1xyXG4gICAgICAgIGRlbGV0ZSBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW3RoaXMuYXBwLm9wdGlvbnMuYXBwSWRdO1xyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogTWFwcyBhcHBJZCB0byBmdWxsIGluaXRpYWxpemF0aW9uIHByb21pc2UuIFdyYXBwZWQgZ3RhZyBjYWxscyBtdXN0IHdhaXQgb25cclxuICogYWxsIG9yIHNvbWUgb2YgdGhlc2UsIGRlcGVuZGluZyBvbiB0aGUgY2FsbCdzIGBzZW5kX3RvYCBwYXJhbSBhbmQgdGhlIHN0YXR1c1xyXG4gKiBvZiB0aGUgZHluYW1pYyBjb25maWcgZmV0Y2hlcyAoc2VlIGJlbG93KS5cclxuICovXHJcbmxldCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwID0ge307XHJcbi8qKlxyXG4gKiBMaXN0IG9mIGR5bmFtaWMgY29uZmlnIGZldGNoIHByb21pc2VzLiBJbiBjZXJ0YWluIGNhc2VzLCB3cmFwcGVkIGd0YWcgY2FsbHNcclxuICogd2FpdCBvbiBhbGwgdGhlc2UgdG8gYmUgY29tcGxldGUgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIGlmIGl0IGNhbiBzZWxlY3RpdmVseVxyXG4gKiB3YWl0IGZvciBvbmx5IGNlcnRhaW4gaW5pdGlhbGl6YXRpb24gKEZJRCkgcHJvbWlzZXMgb3IgaWYgaXQgbXVzdCB3YWl0IGZvciBhbGwuXHJcbiAqL1xyXG5sZXQgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCA9IFtdO1xyXG4vKipcclxuICogTWFwcyBmZXRjaGVkIG1lYXN1cmVtZW50SWRzIHRvIGFwcElkLiBQb3B1bGF0ZWQgd2hlbiB0aGUgYXBwJ3MgZHluYW1pYyBjb25maWdcclxuICogZmV0Y2ggY29tcGxldGVzLiBJZiBhbHJlYWR5IHBvcHVsYXRlZCwgZ3RhZyBjb25maWcgY2FsbHMgY2FuIHVzZSB0aGlzIHRvXHJcbiAqIHNlbGVjdGl2ZWx5IHdhaXQgZm9yIG9ubHkgdGhpcyBhcHAncyBpbml0aWFsaXphdGlvbiBwcm9taXNlIChGSUQpIGluc3RlYWQgb2YgYWxsXHJcbiAqIGluaXRpYWxpemF0aW9uIHByb21pc2VzLlxyXG4gKi9cclxuY29uc3QgbWVhc3VyZW1lbnRJZFRvQXBwSWQgPSB7fTtcclxuLyoqXHJcbiAqIE5hbWUgZm9yIHdpbmRvdyBnbG9iYWwgZGF0YSBsYXllciBhcnJheSB1c2VkIGJ5IEdBOiBkZWZhdWx0cyB0byAnZGF0YUxheWVyJy5cclxuICovXHJcbmxldCBkYXRhTGF5ZXJOYW1lID0gJ2RhdGFMYXllcic7XHJcbi8qKlxyXG4gKiBOYW1lIGZvciB3aW5kb3cgZ2xvYmFsIGd0YWcgZnVuY3Rpb24gdXNlZCBieSBHQTogZGVmYXVsdHMgdG8gJ2d0YWcnLlxyXG4gKi9cclxubGV0IGd0YWdOYW1lID0gJ2d0YWcnO1xyXG4vKipcclxuICogUmVwcm9kdWN0aW9uIG9mIHN0YW5kYXJkIGd0YWcgZnVuY3Rpb24gb3IgcmVmZXJlbmNlIHRvIGV4aXN0aW5nXHJcbiAqIGd0YWcgZnVuY3Rpb24gb24gd2luZG93IG9iamVjdC5cclxuICovXHJcbmxldCBndGFnQ29yZUZ1bmN0aW9uO1xyXG4vKipcclxuICogV3JhcHBlciBhcm91bmQgZ3RhZyBmdW5jdGlvbiB0aGF0IGVuc3VyZXMgRklEIGlzIHNlbnQgd2l0aCBhbGxcclxuICogcmVsZXZhbnQgZXZlbnQgYW5kIGNvbmZpZyBjYWxscy5cclxuICovXHJcbmxldCB3cmFwcGVkR3RhZ0Z1bmN0aW9uO1xyXG4vKipcclxuICogRmxhZyB0byBlbnN1cmUgcGFnZSBpbml0aWFsaXphdGlvbiBzdGVwcyAoY3JlYXRpb24gb3Igd3JhcHBpbmcgb2ZcclxuICogZGF0YUxheWVyIGFuZCBndGFnIHNjcmlwdCkgYXJlIG9ubHkgcnVuIG9uY2UgcGVyIHBhZ2UgbG9hZC5cclxuICovXHJcbmxldCBnbG9iYWxJbml0RG9uZSA9IGZhbHNlO1xyXG4vKipcclxuICogQ29uZmlndXJlcyBGaXJlYmFzZSBBbmFseXRpY3MgdG8gdXNlIGN1c3RvbSBgZ3RhZ2Agb3IgYGRhdGFMYXllcmAgbmFtZXMuXHJcbiAqIEludGVuZGVkIHRvIGJlIHVzZWQgaWYgYGd0YWcuanNgIHNjcmlwdCBoYXMgYmVlbiBpbnN0YWxsZWQgb25cclxuICogdGhpcyBwYWdlIGluZGVwZW5kZW50bHkgb2YgRmlyZWJhc2UgQW5hbHl0aWNzLCBhbmQgaXMgdXNpbmcgbm9uLWRlZmF1bHRcclxuICogbmFtZXMgZm9yIGVpdGhlciB0aGUgYGd0YWdgIGZ1bmN0aW9uIG9yIGZvciBgZGF0YUxheWVyYC5cclxuICogTXVzdCBiZSBjYWxsZWQgYmVmb3JlIGNhbGxpbmcgYGdldEFuYWx5dGljcygpYCBvciBpdCB3b24ndFxyXG4gKiBoYXZlIGFueSBlZmZlY3QuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIG9wdGlvbnMgLSBDdXN0b20gZ3RhZyBhbmQgZGF0YUxheWVyIG5hbWVzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0dGluZ3Mob3B0aW9ucykge1xyXG4gICAgaWYgKGdsb2JhbEluaXREb25lKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhbHJlYWR5LWluaXRpYWxpemVkXCIgLyogQW5hbHl0aWNzRXJyb3IuQUxSRUFEWV9JTklUSUFMSVpFRCAqLyk7XHJcbiAgICB9XHJcbiAgICBpZiAob3B0aW9ucy5kYXRhTGF5ZXJOYW1lKSB7XHJcbiAgICAgICAgZGF0YUxheWVyTmFtZSA9IG9wdGlvbnMuZGF0YUxheWVyTmFtZTtcclxuICAgIH1cclxuICAgIGlmIChvcHRpb25zLmd0YWdOYW1lKSB7XHJcbiAgICAgICAgZ3RhZ05hbWUgPSBvcHRpb25zLmd0YWdOYW1lO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgbm8gZW52aXJvbm1lbnQgbWlzbWF0Y2ggaXMgZm91bmQuXHJcbiAqIElmIGVudmlyb25tZW50IG1pc21hdGNoZXMgYXJlIGZvdW5kLCB0aHJvd3MgYW4gSU5WQUxJRF9BTkFMWVRJQ1NfQ09OVEVYVFxyXG4gKiBlcnJvciB0aGF0IGFsc28gbGlzdHMgZGV0YWlscyBmb3IgZWFjaCBtaXNtYXRjaCBmb3VuZC5cclxuICovXHJcbmZ1bmN0aW9uIHdhcm5PbkJyb3dzZXJDb250ZXh0TWlzbWF0Y2goKSB7XHJcbiAgICBjb25zdCBtaXNtYXRjaGVkRW52TWVzc2FnZXMgPSBbXTtcclxuICAgIGlmIChpc0Jyb3dzZXJFeHRlbnNpb24oKSkge1xyXG4gICAgICAgIG1pc21hdGNoZWRFbnZNZXNzYWdlcy5wdXNoKCdUaGlzIGlzIGEgYnJvd3NlciBleHRlbnNpb24gZW52aXJvbm1lbnQuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFyZUNvb2tpZXNFbmFibGVkKCkpIHtcclxuICAgICAgICBtaXNtYXRjaGVkRW52TWVzc2FnZXMucHVzaCgnQ29va2llcyBhcmUgbm90IGF2YWlsYWJsZS4nKTtcclxuICAgIH1cclxuICAgIGlmIChtaXNtYXRjaGVkRW52TWVzc2FnZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGNvbnN0IGRldGFpbHMgPSBtaXNtYXRjaGVkRW52TWVzc2FnZXNcclxuICAgICAgICAgICAgLm1hcCgobWVzc2FnZSwgaW5kZXgpID0+IGAoJHtpbmRleCArIDF9KSAke21lc3NhZ2V9YClcclxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgICAgICBjb25zdCBlcnIgPSBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtYW5hbHl0aWNzLWNvbnRleHRcIiAvKiBBbmFseXRpY3NFcnJvci5JTlZBTElEX0FOQUxZVElDU19DT05URVhUICovLCB7XHJcbiAgICAgICAgICAgIGVycm9ySW5mbzogZGV0YWlsc1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxvZ2dlci53YXJuKGVyci5tZXNzYWdlKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQW5hbHl0aWNzIGluc3RhbmNlIGZhY3RvcnkuXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gZmFjdG9yeShhcHAsIGluc3RhbGxhdGlvbnMsIG9wdGlvbnMpIHtcclxuICAgIHdhcm5PbkJyb3dzZXJDb250ZXh0TWlzbWF0Y2goKTtcclxuICAgIGNvbnN0IGFwcElkID0gYXBwLm9wdGlvbnMuYXBwSWQ7XHJcbiAgICBpZiAoIWFwcElkKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJuby1hcHAtaWRcIiAvKiBBbmFseXRpY3NFcnJvci5OT19BUFBfSUQgKi8pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhcHAub3B0aW9ucy5hcGlLZXkpIHtcclxuICAgICAgICBpZiAoYXBwLm9wdGlvbnMubWVhc3VyZW1lbnRJZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihgVGhlIFwiYXBpS2V5XCIgZmllbGQgaXMgZW1wdHkgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy4gVGhpcyBpcyBuZWVkZWQgdG8gZmV0Y2ggdGhlIGxhdGVzdGAgK1xyXG4gICAgICAgICAgICAgICAgYCBtZWFzdXJlbWVudCBJRCBmb3IgdGhpcyBGaXJlYmFzZSBhcHAuIEZhbGxpbmcgYmFjayB0byB0aGUgbWVhc3VyZW1lbnQgSUQgJHthcHAub3B0aW9ucy5tZWFzdXJlbWVudElkfWAgK1xyXG4gICAgICAgICAgICAgICAgYCBwcm92aWRlZCBpbiB0aGUgXCJtZWFzdXJlbWVudElkXCIgZmllbGQgaW4gdGhlIGxvY2FsIEZpcmViYXNlIGNvbmZpZy5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm8tYXBpLWtleVwiIC8qIEFuYWx5dGljc0Vycm9yLk5PX0FQSV9LRVkgKi8pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FwcElkXSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhbHJlYWR5LWV4aXN0c1wiIC8qIEFuYWx5dGljc0Vycm9yLkFMUkVBRFlfRVhJU1RTICovLCB7XHJcbiAgICAgICAgICAgIGlkOiBhcHBJZFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaWYgKCFnbG9iYWxJbml0RG9uZSkge1xyXG4gICAgICAgIC8vIFN0ZXBzIGhlcmUgc2hvdWxkIG9ubHkgYmUgZG9uZSBvbmNlIHBlciBwYWdlOiBjcmVhdGlvbiBvciB3cmFwcGluZ1xyXG4gICAgICAgIC8vIG9mIGRhdGFMYXllciBhbmQgZ2xvYmFsIGd0YWcgZnVuY3Rpb24uXHJcbiAgICAgICAgZ2V0T3JDcmVhdGVEYXRhTGF5ZXIoZGF0YUxheWVyTmFtZSk7XHJcbiAgICAgICAgY29uc3QgeyB3cmFwcGVkR3RhZywgZ3RhZ0NvcmUgfSA9IHdyYXBPckNyZWF0ZUd0YWcoaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGRhdGFMYXllck5hbWUsIGd0YWdOYW1lKTtcclxuICAgICAgICB3cmFwcGVkR3RhZ0Z1bmN0aW9uID0gd3JhcHBlZEd0YWc7XHJcbiAgICAgICAgZ3RhZ0NvcmVGdW5jdGlvbiA9IGd0YWdDb3JlO1xyXG4gICAgICAgIGdsb2JhbEluaXREb25lID0gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIEFzeW5jIGJ1dCBub24tYmxvY2tpbmcuXHJcbiAgICAvLyBUaGlzIG1hcCByZWZsZWN0cyB0aGUgY29tcGxldGlvbiBzdGF0ZSBvZiBhbGwgcHJvbWlzZXMgZm9yIGVhY2ggYXBwSWQuXHJcbiAgICBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FwcElkXSA9IF9pbml0aWFsaXplQW5hbHl0aWNzKGFwcCwgZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCwgbWVhc3VyZW1lbnRJZFRvQXBwSWQsIGluc3RhbGxhdGlvbnMsIGd0YWdDb3JlRnVuY3Rpb24sIGRhdGFMYXllck5hbWUsIG9wdGlvbnMpO1xyXG4gICAgY29uc3QgYW5hbHl0aWNzSW5zdGFuY2UgPSBuZXcgQW5hbHl0aWNzU2VydmljZShhcHApO1xyXG4gICAgcmV0dXJuIGFuYWx5dGljc0luc3RhbmNlO1xyXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYW4ge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UgZm9yIHRoZSBnaXZlbiBhcHAuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gdG8gdXNlLlxyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QW5hbHl0aWNzKGFwcCA9IGdldEFwcCgpKSB7XHJcbiAgICBhcHAgPSBnZXRNb2R1bGFySW5zdGFuY2UoYXBwKTtcclxuICAgIC8vIERlcGVuZGVuY2llc1xyXG4gICAgY29uc3QgYW5hbHl0aWNzUHJvdmlkZXIgPSBfZ2V0UHJvdmlkZXIoYXBwLCBBTkFMWVRJQ1NfVFlQRSk7XHJcbiAgICBpZiAoYW5hbHl0aWNzUHJvdmlkZXIuaXNJbml0aWFsaXplZCgpKSB7XHJcbiAgICAgICAgcmV0dXJuIGFuYWx5dGljc1Byb3ZpZGVyLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluaXRpYWxpemVBbmFseXRpY3MoYXBwKTtcclxufVxyXG4vKipcclxuICogUmV0dXJucyBhbiB7QGxpbmsgQW5hbHl0aWNzfSBpbnN0YW5jZSBmb3IgdGhlIGdpdmVuIGFwcC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYXBwIC0gVGhlIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSB0byB1c2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBpbml0aWFsaXplQW5hbHl0aWNzKGFwcCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAvLyBEZXBlbmRlbmNpZXNcclxuICAgIGNvbnN0IGFuYWx5dGljc1Byb3ZpZGVyID0gX2dldFByb3ZpZGVyKGFwcCwgQU5BTFlUSUNTX1RZUEUpO1xyXG4gICAgaWYgKGFuYWx5dGljc1Byb3ZpZGVyLmlzSW5pdGlhbGl6ZWQoKSkge1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5zdGFuY2UgPSBhbmFseXRpY3NQcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICBpZiAoZGVlcEVxdWFsKG9wdGlvbnMsIGFuYWx5dGljc1Byb3ZpZGVyLmdldE9wdGlvbnMoKSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nSW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImFscmVhZHktaW5pdGlhbGl6ZWRcIiAvKiBBbmFseXRpY3NFcnJvci5BTFJFQURZX0lOSVRJQUxJWkVEICovKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBhbmFseXRpY3NJbnN0YW5jZSA9IGFuYWx5dGljc1Byb3ZpZGVyLmluaXRpYWxpemUoeyBvcHRpb25zIH0pO1xyXG4gICAgcmV0dXJuIGFuYWx5dGljc0luc3RhbmNlO1xyXG59XHJcbi8qKlxyXG4gKiBUaGlzIGlzIGEgcHVibGljIHN0YXRpYyBtZXRob2QgcHJvdmlkZWQgdG8gdXNlcnMgdGhhdCB3cmFwcyBmb3VyIGRpZmZlcmVudCBjaGVja3M6XHJcbiAqXHJcbiAqIDEuIENoZWNrIGlmIGl0J3Mgbm90IGEgYnJvd3NlciBleHRlbnNpb24gZW52aXJvbm1lbnQuXHJcbiAqIDIuIENoZWNrIGlmIGNvb2tpZXMgYXJlIGVuYWJsZWQgaW4gY3VycmVudCBicm93c2VyLlxyXG4gKiAzLiBDaGVjayBpZiBJbmRleGVkREIgaXMgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyIGVudmlyb25tZW50LlxyXG4gKiA0LiBDaGVjayBpZiB0aGUgY3VycmVudCBicm93c2VyIGNvbnRleHQgaXMgdmFsaWQgZm9yIHVzaW5nIGBJbmRleGVkREIub3BlbigpYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gaXNTdXBwb3J0ZWQoKSB7XHJcbiAgICBpZiAoaXNCcm93c2VyRXh0ZW5zaW9uKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFyZUNvb2tpZXNFbmFibGVkKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoIWlzSW5kZXhlZERCQXZhaWxhYmxlKCkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IGlzREJPcGVuYWJsZSA9IGF3YWl0IHZhbGlkYXRlSW5kZXhlZERCT3BlbmFibGUoKTtcclxuICAgICAgICByZXR1cm4gaXNEQk9wZW5hYmxlO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcbi8qKlxyXG4gKiBVc2UgZ3RhZyBgY29uZmlnYCBjb21tYW5kIHRvIHNldCBgc2NyZWVuX25hbWVgLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBkZXByZWNhdGVkIFVzZSB7QGxpbmsgbG9nRXZlbnR9IHdpdGggYGV2ZW50TmFtZWAgYXMgJ3NjcmVlbl92aWV3JyBhbmQgYWRkIHJlbGV2YW50IGBldmVudFBhcmFtc2AuXHJcbiAqIFNlZSB7QGxpbmsgaHR0cHM6Ly9maXJlYmFzZS5nb29nbGUuY29tL2RvY3MvYW5hbHl0aWNzL3NjcmVlbnZpZXdzIHwgVHJhY2sgU2NyZWVudmlld3N9LlxyXG4gKlxyXG4gKiBAcGFyYW0gYW5hbHl0aWNzSW5zdGFuY2UgLSBUaGUge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBzY3JlZW5OYW1lIC0gU2NyZWVuIG5hbWUgdG8gc2V0LlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0Q3VycmVudFNjcmVlbihhbmFseXRpY3NJbnN0YW5jZSwgc2NyZWVuTmFtZSwgb3B0aW9ucykge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0Q3VycmVudFNjcmVlbiQxKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBzY3JlZW5OYW1lLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFJldHJpZXZlcyBhIHVuaXF1ZSBHb29nbGUgQW5hbHl0aWNzIGlkZW50aWZpZXIgZm9yIHRoZSB3ZWIgY2xpZW50LlxyXG4gKiBTZWUge0BsaW5rIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2FuYWx5dGljcy9kZXZndWlkZXMvY29sbGVjdGlvbi9nYTQvcmVmZXJlbmNlL2NvbmZpZyNjbGllbnRfaWQgfCBjbGllbnRfaWR9LlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBUaGUge0BsaW5rIEBmaXJlYmFzZS9hcHAjRmlyZWJhc2VBcHB9IHRvIHVzZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkKGFuYWx5dGljc0luc3RhbmNlKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICByZXR1cm4gaW50ZXJuYWxHZXRHb29nbGVBbmFseXRpY3NDbGllbnRJZCh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSk7XHJcbn1cclxuLyoqXHJcbiAqIFVzZSBndGFnIGBjb25maWdgIGNvbW1hbmQgdG8gc2V0IGB1c2VyX2lkYC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYW5hbHl0aWNzSW5zdGFuY2UgLSBUaGUge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBpZCAtIFVzZXIgSUQgdG8gc2V0LlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0VXNlcklkKGFuYWx5dGljc0luc3RhbmNlLCBpZCwgb3B0aW9ucykge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0VXNlcklkJDEod3JhcHBlZEd0YWdGdW5jdGlvbiwgaW5pdGlhbGl6YXRpb25Qcm9taXNlc01hcFthbmFseXRpY3NJbnN0YW5jZS5hcHAub3B0aW9ucy5hcHBJZF0sIGlkLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFVzZSBndGFnIGBjb25maWdgIGNvbW1hbmQgdG8gc2V0IGFsbCBwYXJhbXMgc3BlY2lmaWVkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRVc2VyUHJvcGVydGllcyhhbmFseXRpY3NJbnN0YW5jZSwgcHJvcGVydGllcywgb3B0aW9ucykge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0VXNlclByb3BlcnRpZXMkMSh3cmFwcGVkR3RhZ0Z1bmN0aW9uLCBpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSwgcHJvcGVydGllcywgb3B0aW9ucykuY2F0Y2goZSA9PiBsb2dnZXIuZXJyb3IoZSkpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIHdoZXRoZXIgR29vZ2xlIEFuYWx5dGljcyBjb2xsZWN0aW9uIGlzIGVuYWJsZWQgZm9yIHRoaXMgYXBwIG9uIHRoaXMgZGV2aWNlLlxyXG4gKiBTZXRzIGdsb2JhbCBgd2luZG93WydnYS1kaXNhYmxlLWFuYWx5dGljc0lkJ10gPSB0cnVlO2BcclxuICpcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0gYW5hbHl0aWNzSW5zdGFuY2UgLSBUaGUge0BsaW5rIEFuYWx5dGljc30gaW5zdGFuY2UuXHJcbiAqIEBwYXJhbSBlbmFibGVkIC0gSWYgdHJ1ZSwgZW5hYmxlcyBjb2xsZWN0aW9uLCBpZiBmYWxzZSwgZGlzYWJsZXMgaXQuXHJcbiAqL1xyXG5mdW5jdGlvbiBzZXRBbmFseXRpY3NDb2xsZWN0aW9uRW5hYmxlZChhbmFseXRpY3NJbnN0YW5jZSwgZW5hYmxlZCkge1xyXG4gICAgYW5hbHl0aWNzSW5zdGFuY2UgPSBnZXRNb2R1bGFySW5zdGFuY2UoYW5hbHl0aWNzSW5zdGFuY2UpO1xyXG4gICAgc2V0QW5hbHl0aWNzQ29sbGVjdGlvbkVuYWJsZWQkMShpbml0aWFsaXphdGlvblByb21pc2VzTWFwW2FuYWx5dGljc0luc3RhbmNlLmFwcC5vcHRpb25zLmFwcElkXSwgZW5hYmxlZCkuY2F0Y2goZSA9PiBsb2dnZXIuZXJyb3IoZSkpO1xyXG59XHJcbi8qKlxyXG4gKiBBZGRzIGRhdGEgdGhhdCB3aWxsIGJlIHNldCBvbiBldmVyeSBldmVudCBsb2dnZWQgZnJvbSB0aGUgU0RLLCBpbmNsdWRpbmcgYXV0b21hdGljIG9uZXMuXHJcbiAqIFdpdGggZ3RhZydzIFwic2V0XCIgY29tbWFuZCwgdGhlIHZhbHVlcyBwYXNzZWQgcGVyc2lzdCBvbiB0aGUgY3VycmVudCBwYWdlIGFuZCBhcmUgcGFzc2VkIHdpdGhcclxuICogYWxsIHN1YnNlcXVlbnQgZXZlbnRzLlxyXG4gKiBAcHVibGljXHJcbiAqIEBwYXJhbSBjdXN0b21QYXJhbXMgLSBBbnkgY3VzdG9tIHBhcmFtcyB0aGUgdXNlciBtYXkgcGFzcyB0byBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVycyhjdXN0b21QYXJhbXMpIHtcclxuICAgIC8vIENoZWNrIGlmIHJlZmVyZW5jZSB0byBleGlzdGluZyBndGFnIGZ1bmN0aW9uIG9uIHdpbmRvdyBvYmplY3QgZXhpc3RzXHJcbiAgICBpZiAod3JhcHBlZEd0YWdGdW5jdGlvbikge1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24oXCJzZXRcIiAvKiBHdGFnQ29tbWFuZC5TRVQgKi8sIGN1c3RvbVBhcmFtcyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBfc2V0RGVmYXVsdEV2ZW50UGFyYW1ldGVyc0ZvckluaXQoY3VzdG9tUGFyYW1zKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogU2VuZHMgYSBHb29nbGUgQW5hbHl0aWNzIGV2ZW50IHdpdGggZ2l2ZW4gYGV2ZW50UGFyYW1zYC4gVGhpcyBtZXRob2RcclxuICogYXV0b21hdGljYWxseSBhc3NvY2lhdGVzIHRoaXMgbG9nZ2VkIGV2ZW50IHdpdGggdGhpcyBGaXJlYmFzZSB3ZWJcclxuICogYXBwIGluc3RhbmNlIG9uIHRoaXMgZGV2aWNlLlxyXG4gKiBMaXN0IG9mIG9mZmljaWFsIGV2ZW50IHBhcmFtZXRlcnMgY2FuIGJlIGZvdW5kIGluIHRoZSBndGFnLmpzXHJcbiAqIHJlZmVyZW5jZSBkb2N1bWVudGF0aW9uOlxyXG4gKiB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vZ3RhZ2pzL3JlZmVyZW5jZS9nYTQtZXZlbnRzXHJcbiAqIHwgdGhlIEdBNCByZWZlcmVuY2UgZG9jdW1lbnRhdGlvbn0uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGxvZ0V2ZW50KGFuYWx5dGljc0luc3RhbmNlLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKSB7XHJcbiAgICBhbmFseXRpY3NJbnN0YW5jZSA9IGdldE1vZHVsYXJJbnN0YW5jZShhbmFseXRpY3NJbnN0YW5jZSk7XHJcbiAgICBsb2dFdmVudCQxKHdyYXBwZWRHdGFnRnVuY3Rpb24sIGluaXRpYWxpemF0aW9uUHJvbWlzZXNNYXBbYW5hbHl0aWNzSW5zdGFuY2UuYXBwLm9wdGlvbnMuYXBwSWRdLCBldmVudE5hbWUsIGV2ZW50UGFyYW1zLCBvcHRpb25zKS5jYXRjaChlID0+IGxvZ2dlci5lcnJvcihlKSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgdGhlIGFwcGxpY2FibGUgZW5kIHVzZXIgY29uc2VudCBzdGF0ZSBmb3IgdGhpcyB3ZWIgYXBwIGFjcm9zcyBhbGwgZ3RhZyByZWZlcmVuY2VzIG9uY2VcclxuICogRmlyZWJhc2UgQW5hbHl0aWNzIGlzIGluaXRpYWxpemVkLlxyXG4gKlxyXG4gKiBVc2UgdGhlIHtAbGluayBDb25zZW50U2V0dGluZ3N9IHRvIHNwZWNpZnkgaW5kaXZpZHVhbCBjb25zZW50IHR5cGUgdmFsdWVzLiBCeSBkZWZhdWx0IGNvbnNlbnRcclxuICogdHlwZXMgYXJlIHNldCB0byBcImdyYW50ZWRcIi5cclxuICogQHB1YmxpY1xyXG4gKiBAcGFyYW0gY29uc2VudFNldHRpbmdzIC0gTWFwcyB0aGUgYXBwbGljYWJsZSBlbmQgdXNlciBjb25zZW50IHN0YXRlIGZvciBndGFnLmpzLlxyXG4gKi9cclxuZnVuY3Rpb24gc2V0Q29uc2VudChjb25zZW50U2V0dGluZ3MpIHtcclxuICAgIC8vIENoZWNrIGlmIHJlZmVyZW5jZSB0byBleGlzdGluZyBndGFnIGZ1bmN0aW9uIG9uIHdpbmRvdyBvYmplY3QgZXhpc3RzXHJcbiAgICBpZiAod3JhcHBlZEd0YWdGdW5jdGlvbikge1xyXG4gICAgICAgIHdyYXBwZWRHdGFnRnVuY3Rpb24oXCJjb25zZW50XCIgLyogR3RhZ0NvbW1hbmQuQ09OU0VOVCAqLywgJ3VwZGF0ZScsIGNvbnNlbnRTZXR0aW5ncyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0KGNvbnNlbnRTZXR0aW5ncyk7XHJcbiAgICB9XHJcbn1cblxuY29uc3QgbmFtZSA9IFwiQGZpcmViYXNlL2FuYWx5dGljc1wiO1xuY29uc3QgdmVyc2lvbiA9IFwiMC4xMC4wXCI7XG5cbi8qKlxyXG4gKiBGaXJlYmFzZSBBbmFseXRpY3NcclxuICpcclxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiByZWdpc3RlckFuYWx5dGljcygpIHtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KEFOQUxZVElDU19UWVBFLCAoY29udGFpbmVyLCB7IG9wdGlvbnM6IGFuYWx5dGljc09wdGlvbnMgfSkgPT4ge1xyXG4gICAgICAgIC8vIGdldEltbWVkaWF0ZSBmb3IgRmlyZWJhc2VBcHAgd2lsbCBhbHdheXMgc3VjY2VlZFxyXG4gICAgICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgY29uc3QgaW5zdGFsbGF0aW9ucyA9IGNvbnRhaW5lclxyXG4gICAgICAgICAgICAuZ2V0UHJvdmlkZXIoJ2luc3RhbGxhdGlvbnMtaW50ZXJuYWwnKVxyXG4gICAgICAgICAgICAuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhY3RvcnkoYXBwLCBpbnN0YWxsYXRpb25zLCBhbmFseXRpY3NPcHRpb25zKTtcclxuICAgIH0sIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KCdhbmFseXRpY3MtaW50ZXJuYWwnLCBpbnRlcm5hbEZhY3RvcnksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24pO1xyXG4gICAgLy8gQlVJTERfVEFSR0VUIHdpbGwgYmUgcmVwbGFjZWQgYnkgdmFsdWVzIGxpa2UgZXNtNSwgZXNtMjAxNywgY2pzNSwgZXRjIGR1cmluZyB0aGUgY29tcGlsYXRpb25cclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnZXNtMjAxNycpO1xyXG4gICAgZnVuY3Rpb24gaW50ZXJuYWxGYWN0b3J5KGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFuYWx5dGljcyA9IGNvbnRhaW5lci5nZXRQcm92aWRlcihBTkFMWVRJQ1NfVFlQRSkuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsb2dFdmVudDogKGV2ZW50TmFtZSwgZXZlbnRQYXJhbXMsIG9wdGlvbnMpID0+IGxvZ0V2ZW50KGFuYWx5dGljcywgZXZlbnROYW1lLCBldmVudFBhcmFtcywgb3B0aW9ucylcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpbnRlcm9wLWNvbXBvbmVudC1yZWctZmFpbGVkXCIgLyogQW5hbHl0aWNzRXJyb3IuSU5URVJPUF9DT01QT05FTlRfUkVHX0ZBSUxFRCAqLywge1xyXG4gICAgICAgICAgICAgICAgcmVhc29uOiBlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5yZWdpc3RlckFuYWx5dGljcygpO1xuXG5leHBvcnQgeyBnZXRBbmFseXRpY3MsIGdldEdvb2dsZUFuYWx5dGljc0NsaWVudElkLCBpbml0aWFsaXplQW5hbHl0aWNzLCBpc1N1cHBvcnRlZCwgbG9nRXZlbnQsIHNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkLCBzZXRDb25zZW50LCBzZXRDdXJyZW50U2NyZWVuLCBzZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzLCBzZXRVc2VySWQsIHNldFVzZXJQcm9wZXJ0aWVzLCBzZXR0aW5ncyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyIH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBMb2dnZXIsIHNldFVzZXJMb2dIYW5kbGVyLCBzZXRMb2dMZXZlbCBhcyBzZXRMb2dMZXZlbCQxIH0gZnJvbSAnQGZpcmViYXNlL2xvZ2dlcic7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIGdldERlZmF1bHRBcHBDb25maWcsIGRlZXBFcXVhbCwgRmlyZWJhc2VFcnJvciwgYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcsIGlzSW5kZXhlZERCQXZhaWxhYmxlLCB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlIH0gZnJvbSAnQGZpcmViYXNlL3V0aWwnO1xuZXhwb3J0IHsgRmlyZWJhc2VFcnJvciB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcbmltcG9ydCB7IG9wZW5EQiB9IGZyb20gJ2lkYic7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNsYXNzIFBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwge1xyXG4gICAgY29uc3RydWN0b3IoY29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICB9XHJcbiAgICAvLyBJbiBpbml0aWFsIGltcGxlbWVudGF0aW9uLCB0aGlzIHdpbGwgYmUgY2FsbGVkIGJ5IGluc3RhbGxhdGlvbnMgb25cclxuICAgIC8vIGF1dGggdG9rZW4gcmVmcmVzaCwgYW5kIGluc3RhbGxhdGlvbnMgd2lsbCBzZW5kIHRoaXMgc3RyaW5nLlxyXG4gICAgZ2V0UGxhdGZvcm1JbmZvU3RyaW5nKCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVycyA9IHRoaXMuY29udGFpbmVyLmdldFByb3ZpZGVycygpO1xyXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBwcm92aWRlcnMgYW5kIGdldCBsaWJyYXJ5L3ZlcnNpb24gcGFpcnMgZnJvbSBhbnkgdGhhdCBhcmVcclxuICAgICAgICAvLyB2ZXJzaW9uIGNvbXBvbmVudHMuXHJcbiAgICAgICAgcmV0dXJuIHByb3ZpZGVyc1xyXG4gICAgICAgICAgICAubWFwKHByb3ZpZGVyID0+IHtcclxuICAgICAgICAgICAgaWYgKGlzVmVyc2lvblNlcnZpY2VQcm92aWRlcihwcm92aWRlcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlcnZpY2UgPSBwcm92aWRlci5nZXRJbW1lZGlhdGUoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzZXJ2aWNlLmxpYnJhcnl9LyR7c2VydmljZS52ZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIobG9nU3RyaW5nID0+IGxvZ1N0cmluZylcclxuICAgICAgICAgICAgLmpvaW4oJyAnKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIHByb3ZpZGVyIGNoZWNrIGlmIHRoaXMgcHJvdmlkZXIgcHJvdmlkZXMgYSBWZXJzaW9uU2VydmljZVxyXG4gKlxyXG4gKiBOT1RFOiBVc2luZyBQcm92aWRlcjwnYXBwLXZlcnNpb24nPiBpcyBhIGhhY2sgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcHJvdmlkZXJcclxuICogcHJvdmlkZXMgVmVyc2lvblNlcnZpY2UuIFRoZSBwcm92aWRlciBpcyBub3QgbmVjZXNzYXJpbHkgYSAnYXBwLXZlcnNpb24nXHJcbiAqIHByb3ZpZGVyLlxyXG4gKi9cclxuZnVuY3Rpb24gaXNWZXJzaW9uU2VydmljZVByb3ZpZGVyKHByb3ZpZGVyKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnQgPSBwcm92aWRlci5nZXRDb21wb25lbnQoKTtcclxuICAgIHJldHVybiAoY29tcG9uZW50ID09PSBudWxsIHx8IGNvbXBvbmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcG9uZW50LnR5cGUpID09PSBcIlZFUlNJT05cIiAvKiBDb21wb25lbnRUeXBlLlZFUlNJT04gKi87XHJcbn1cblxuY29uc3QgbmFtZSRvID0gXCJAZmlyZWJhc2UvYXBwXCI7XG5jb25zdCB2ZXJzaW9uJDEgPSBcIjAuOS4xNVwiO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCdAZmlyZWJhc2UvYXBwJyk7XG5cbmNvbnN0IG5hbWUkbiA9IFwiQGZpcmViYXNlL2FwcC1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRtID0gXCJAZmlyZWJhc2UvYW5hbHl0aWNzLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGwgPSBcIkBmaXJlYmFzZS9hbmFseXRpY3NcIjtcblxuY29uc3QgbmFtZSRrID0gXCJAZmlyZWJhc2UvYXBwLWNoZWNrLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGogPSBcIkBmaXJlYmFzZS9hcHAtY2hlY2tcIjtcblxuY29uc3QgbmFtZSRpID0gXCJAZmlyZWJhc2UvYXV0aFwiO1xuXG5jb25zdCBuYW1lJGggPSBcIkBmaXJlYmFzZS9hdXRoLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGcgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZVwiO1xuXG5jb25zdCBuYW1lJGYgPSBcIkBmaXJlYmFzZS9kYXRhYmFzZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRlID0gXCJAZmlyZWJhc2UvZnVuY3Rpb25zXCI7XG5cbmNvbnN0IG5hbWUkZCA9IFwiQGZpcmViYXNlL2Z1bmN0aW9ucy1jb21wYXRcIjtcblxuY29uc3QgbmFtZSRjID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuXG5jb25zdCBuYW1lJGIgPSBcIkBmaXJlYmFzZS9pbnN0YWxsYXRpb25zLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJGEgPSBcIkBmaXJlYmFzZS9tZXNzYWdpbmdcIjtcblxuY29uc3QgbmFtZSQ5ID0gXCJAZmlyZWJhc2UvbWVzc2FnaW5nLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDggPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZVwiO1xuXG5jb25zdCBuYW1lJDcgPSBcIkBmaXJlYmFzZS9wZXJmb3JtYW5jZS1jb21wYXRcIjtcblxuY29uc3QgbmFtZSQ2ID0gXCJAZmlyZWJhc2UvcmVtb3RlLWNvbmZpZ1wiO1xuXG5jb25zdCBuYW1lJDUgPSBcIkBmaXJlYmFzZS9yZW1vdGUtY29uZmlnLWNvbXBhdFwiO1xuXG5jb25zdCBuYW1lJDQgPSBcIkBmaXJlYmFzZS9zdG9yYWdlXCI7XG5cbmNvbnN0IG5hbWUkMyA9IFwiQGZpcmViYXNlL3N0b3JhZ2UtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUkMiA9IFwiQGZpcmViYXNlL2ZpcmVzdG9yZVwiO1xuXG5jb25zdCBuYW1lJDEgPSBcIkBmaXJlYmFzZS9maXJlc3RvcmUtY29tcGF0XCI7XG5cbmNvbnN0IG5hbWUgPSBcImZpcmViYXNlXCI7XG5jb25zdCB2ZXJzaW9uID0gXCIxMC4xLjBcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGFwcCBuYW1lXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XHJcbmNvbnN0IFBMQVRGT1JNX0xPR19TVFJJTkcgPSB7XHJcbiAgICBbbmFtZSRvXTogJ2ZpcmUtY29yZScsXHJcbiAgICBbbmFtZSRuXTogJ2ZpcmUtY29yZS1jb21wYXQnLFxyXG4gICAgW25hbWUkbF06ICdmaXJlLWFuYWx5dGljcycsXHJcbiAgICBbbmFtZSRtXTogJ2ZpcmUtYW5hbHl0aWNzLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRqXTogJ2ZpcmUtYXBwLWNoZWNrJyxcclxuICAgIFtuYW1lJGtdOiAnZmlyZS1hcHAtY2hlY2stY29tcGF0JyxcclxuICAgIFtuYW1lJGldOiAnZmlyZS1hdXRoJyxcclxuICAgIFtuYW1lJGhdOiAnZmlyZS1hdXRoLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRnXTogJ2ZpcmUtcnRkYicsXHJcbiAgICBbbmFtZSRmXTogJ2ZpcmUtcnRkYi1jb21wYXQnLFxyXG4gICAgW25hbWUkZV06ICdmaXJlLWZuJyxcclxuICAgIFtuYW1lJGRdOiAnZmlyZS1mbi1jb21wYXQnLFxyXG4gICAgW25hbWUkY106ICdmaXJlLWlpZCcsXHJcbiAgICBbbmFtZSRiXTogJ2ZpcmUtaWlkLWNvbXBhdCcsXHJcbiAgICBbbmFtZSRhXTogJ2ZpcmUtZmNtJyxcclxuICAgIFtuYW1lJDldOiAnZmlyZS1mY20tY29tcGF0JyxcclxuICAgIFtuYW1lJDhdOiAnZmlyZS1wZXJmJyxcclxuICAgIFtuYW1lJDddOiAnZmlyZS1wZXJmLWNvbXBhdCcsXHJcbiAgICBbbmFtZSQ2XTogJ2ZpcmUtcmMnLFxyXG4gICAgW25hbWUkNV06ICdmaXJlLXJjLWNvbXBhdCcsXHJcbiAgICBbbmFtZSQ0XTogJ2ZpcmUtZ2NzJyxcclxuICAgIFtuYW1lJDNdOiAnZmlyZS1nY3MtY29tcGF0JyxcclxuICAgIFtuYW1lJDJdOiAnZmlyZS1mc3QnLFxyXG4gICAgW25hbWUkMV06ICdmaXJlLWZzdC1jb21wYXQnLFxyXG4gICAgJ2ZpcmUtanMnOiAnZmlyZS1qcycsXHJcbiAgICBbbmFtZV06ICdmaXJlLWpzLWFsbCdcclxufTtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuY29uc3QgX2FwcHMgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBSZWdpc3RlcmVkIGNvbXBvbmVudHMuXHJcbiAqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuY29uc3QgX2NvbXBvbmVudHMgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBAcGFyYW0gY29tcG9uZW50IC0gdGhlIGNvbXBvbmVudCBiZWluZyBhZGRlZCB0byB0aGlzIGFwcCdzIGNvbnRhaW5lclxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYXBwLmNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgbG9nZ2VyLmRlYnVnKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZmFpbGVkIHRvIHJlZ2lzdGVyIHdpdGggRmlyZWJhc2VBcHAgJHthcHAubmFtZX1gLCBlKTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoYXBwLCBjb21wb25lbnQpIHtcclxuICAgIGFwcC5jb250YWluZXIuYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGNvbXBvbmVudCAtIHRoZSBjb21wb25lbnQgdG8gcmVnaXN0ZXJcclxuICogQHJldHVybnMgd2hldGhlciBvciBub3QgdGhlIGNvbXBvbmVudCBpcyByZWdpc3RlcmVkIHN1Y2Nlc3NmdWxseVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9yZWdpc3RlckNvbXBvbmVudChjb21wb25lbnQpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBjb21wb25lbnQubmFtZTtcclxuICAgIGlmIChfY29tcG9uZW50cy5oYXMoY29tcG9uZW50TmFtZSkpIHtcclxuICAgICAgICBsb2dnZXIuZGVidWcoYFRoZXJlIHdlcmUgbXVsdGlwbGUgYXR0ZW1wdHMgdG8gcmVnaXN0ZXIgY29tcG9uZW50ICR7Y29tcG9uZW50TmFtZX0uYCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgX2NvbXBvbmVudHMuc2V0KGNvbXBvbmVudE5hbWUsIGNvbXBvbmVudCk7XHJcbiAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCB0byBleGlzdGluZyBhcHAgaW5zdGFuY2VzXHJcbiAgICBmb3IgKGNvbnN0IGFwcCBvZiBfYXBwcy52YWx1ZXMoKSkge1xyXG4gICAgICAgIF9hZGRDb21wb25lbnQoYXBwLCBjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn1cclxuLyoqXHJcbiAqXHJcbiAqIEBwYXJhbSBhcHAgLSBGaXJlYmFzZUFwcCBpbnN0YW5jZVxyXG4gKiBAcGFyYW0gbmFtZSAtIHNlcnZpY2UgbmFtZVxyXG4gKlxyXG4gKiBAcmV0dXJucyB0aGUgcHJvdmlkZXIgZm9yIHRoZSBzZXJ2aWNlIHdpdGggdGhlIG1hdGNoaW5nIG5hbWVcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKSB7XHJcbiAgICBjb25zdCBoZWFydGJlYXRDb250cm9sbGVyID0gYXBwLmNvbnRhaW5lclxyXG4gICAgICAgIC5nZXRQcm92aWRlcignaGVhcnRiZWF0JylcclxuICAgICAgICAuZ2V0SW1tZWRpYXRlKHsgb3B0aW9uYWw6IHRydWUgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0Q29udHJvbGxlcikge1xyXG4gICAgICAgIHZvaWQgaGVhcnRiZWF0Q29udHJvbGxlci50cmlnZ2VySGVhcnRiZWF0KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXBwLmNvbnRhaW5lci5nZXRQcm92aWRlcihuYW1lKTtcclxufVxyXG4vKipcclxuICpcclxuICogQHBhcmFtIGFwcCAtIEZpcmViYXNlQXBwIGluc3RhbmNlXHJcbiAqIEBwYXJhbSBuYW1lIC0gc2VydmljZSBuYW1lXHJcbiAqIEBwYXJhbSBpbnN0YW5jZUlkZW50aWZpZXIgLSBzZXJ2aWNlIGluc3RhbmNlIGlkZW50aWZpZXIgaW4gY2FzZSB0aGUgc2VydmljZSBzdXBwb3J0cyBtdWx0aXBsZSBpbnN0YW5jZXNcclxuICpcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBfcmVtb3ZlU2VydmljZUluc3RhbmNlKGFwcCwgbmFtZSwgaW5zdGFuY2VJZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICBfZ2V0UHJvdmlkZXIoYXBwLCBuYW1lKS5jbGVhckluc3RhbmNlKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbn1cclxuLyoqXHJcbiAqIFRlc3Qgb25seVxyXG4gKlxyXG4gKiBAaW50ZXJuYWxcclxuICovXHJcbmZ1bmN0aW9uIF9jbGVhckNvbXBvbmVudHMoKSB7XHJcbiAgICBfY29tcG9uZW50cy5jbGVhcigpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IEVSUk9SUyA9IHtcclxuICAgIFtcIm5vLWFwcFwiIC8qIEFwcEVycm9yLk5PX0FQUCAqL106IFwiTm8gRmlyZWJhc2UgQXBwICd7JGFwcE5hbWV9JyBoYXMgYmVlbiBjcmVhdGVkIC0gXCIgK1xyXG4gICAgICAgICdjYWxsIGluaXRpYWxpemVBcHAoKSBmaXJzdCcsXHJcbiAgICBbXCJiYWQtYXBwLW5hbWVcIiAvKiBBcHBFcnJvci5CQURfQVBQX05BTUUgKi9dOiBcIklsbGVnYWwgQXBwIG5hbWU6ICd7JGFwcE5hbWV9XCIsXHJcbiAgICBbXCJkdXBsaWNhdGUtYXBwXCIgLyogQXBwRXJyb3IuRFVQTElDQVRFX0FQUCAqL106IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGV4aXN0cyB3aXRoIGRpZmZlcmVudCBvcHRpb25zIG9yIGNvbmZpZ1wiLFxyXG4gICAgW1wiYXBwLWRlbGV0ZWRcIiAvKiBBcHBFcnJvci5BUFBfREVMRVRFRCAqL106IFwiRmlyZWJhc2UgQXBwIG5hbWVkICd7JGFwcE5hbWV9JyBhbHJlYWR5IGRlbGV0ZWRcIixcclxuICAgIFtcIm5vLW9wdGlvbnNcIiAvKiBBcHBFcnJvci5OT19PUFRJT05TICovXTogJ05lZWQgdG8gcHJvdmlkZSBvcHRpb25zLCB3aGVuIG5vdCBiZWluZyBkZXBsb3llZCB0byBob3N0aW5nIHZpYSBzb3VyY2UuJyxcclxuICAgIFtcImludmFsaWQtYXBwLWFyZ3VtZW50XCIgLyogQXBwRXJyb3IuSU5WQUxJRF9BUFBfQVJHVU1FTlQgKi9dOiAnZmlyZWJhc2UueyRhcHBOYW1lfSgpIHRha2VzIGVpdGhlciBubyBhcmd1bWVudCBvciBhICcgK1xyXG4gICAgICAgICdGaXJlYmFzZSBBcHAgaW5zdGFuY2UuJyxcclxuICAgIFtcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogQXBwRXJyb3IuSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi9dOiAnRmlyc3QgYXJndW1lbnQgdG8gYG9uTG9nYCBtdXN0IGJlIG51bGwgb3IgYSBmdW5jdGlvbi4nLFxyXG4gICAgW1wiaWRiLW9wZW5cIiAvKiBBcHBFcnJvci5JREJfT1BFTiAqL106ICdFcnJvciB0aHJvd24gd2hlbiBvcGVuaW5nIEluZGV4ZWREQi4gT3JpZ2luYWwgZXJyb3I6IHskb3JpZ2luYWxFcnJvck1lc3NhZ2V9LicsXHJcbiAgICBbXCJpZGItZ2V0XCIgLyogQXBwRXJyb3IuSURCX0dFVCAqL106ICdFcnJvciB0aHJvd24gd2hlbiByZWFkaW5nIGZyb20gSW5kZXhlZERCLiBPcmlnaW5hbCBlcnJvcjogeyRvcmlnaW5hbEVycm9yTWVzc2FnZX0uJyxcclxuICAgIFtcImlkYi1zZXRcIiAvKiBBcHBFcnJvci5JREJfV1JJVEUgKi9dOiAnRXJyb3IgdGhyb3duIHdoZW4gd3JpdGluZyB0byBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nLFxyXG4gICAgW1wiaWRiLWRlbGV0ZVwiIC8qIEFwcEVycm9yLklEQl9ERUxFVEUgKi9dOiAnRXJyb3IgdGhyb3duIHdoZW4gZGVsZXRpbmcgZnJvbSBJbmRleGVkREIuIE9yaWdpbmFsIGVycm9yOiB7JG9yaWdpbmFsRXJyb3JNZXNzYWdlfS4nXHJcbn07XHJcbmNvbnN0IEVSUk9SX0ZBQ1RPUlkgPSBuZXcgRXJyb3JGYWN0b3J5KCdhcHAnLCAnRmlyZWJhc2UnLCBFUlJPUlMpO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jbGFzcyBGaXJlYmFzZUFwcEltcGwge1xyXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgY29uZmlnLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLl9pc0RlbGV0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5fY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgY29uZmlnKTtcclxuICAgICAgICB0aGlzLl9uYW1lID0gY29uZmlnLm5hbWU7XHJcbiAgICAgICAgdGhpcy5fYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkID1cclxuICAgICAgICAgICAgY29uZmlnLmF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZDtcclxuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBjb250YWluZXI7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ2FwcCcsICgpID0+IHRoaXMsIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pKTtcclxuICAgIH1cclxuICAgIGdldCBhdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0Rlc3Ryb3llZCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQ7XHJcbiAgICB9XHJcbiAgICBzZXQgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkKHZhbCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICB0aGlzLl9hdXRvbWF0aWNEYXRhQ29sbGVjdGlvbkVuYWJsZWQgPSB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgbmFtZSgpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbiAgICB9XHJcbiAgICBnZXQgb3B0aW9ucygpIHtcclxuICAgICAgICB0aGlzLmNoZWNrRGVzdHJveWVkKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XHJcbiAgICB9XHJcbiAgICBnZXQgY29uZmlnKCkge1xyXG4gICAgICAgIHRoaXMuY2hlY2tEZXN0cm95ZWQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29uZmlnO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbnRhaW5lcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xyXG4gICAgfVxyXG4gICAgZ2V0IGlzRGVsZXRlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faXNEZWxldGVkO1xyXG4gICAgfVxyXG4gICAgc2V0IGlzRGVsZXRlZCh2YWwpIHtcclxuICAgICAgICB0aGlzLl9pc0RlbGV0ZWQgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCB0aHJvdyBhbiBFcnJvciBpZiB0aGUgQXBwIGhhcyBhbHJlYWR5IGJlZW4gZGVsZXRlZCAtXHJcbiAgICAgKiB1c2UgYmVmb3JlIHBlcmZvcm1pbmcgQVBJIGFjdGlvbnMgb24gdGhlIEFwcC5cclxuICAgICAqL1xyXG4gICAgY2hlY2tEZXN0cm95ZWQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEZWxldGVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLWRlbGV0ZWRcIiAvKiBBcHBFcnJvci5BUFBfREVMRVRFRCAqLywgeyBhcHBOYW1lOiB0aGlzLl9uYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogVGhlIGN1cnJlbnQgU0RLIHZlcnNpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmNvbnN0IFNES19WRVJTSU9OID0gdmVyc2lvbjtcclxuZnVuY3Rpb24gaW5pdGlhbGl6ZUFwcChfb3B0aW9ucywgcmF3Q29uZmlnID0ge30pIHtcclxuICAgIGxldCBvcHRpb25zID0gX29wdGlvbnM7XHJcbiAgICBpZiAodHlwZW9mIHJhd0NvbmZpZyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICBjb25zdCBuYW1lID0gcmF3Q29uZmlnO1xyXG4gICAgICAgIHJhd0NvbmZpZyA9IHsgbmFtZSB9O1xyXG4gICAgfVxyXG4gICAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7IG5hbWU6IERFRkFVTFRfRU5UUllfTkFNRSwgYXV0b21hdGljRGF0YUNvbGxlY3Rpb25FbmFibGVkOiBmYWxzZSB9LCByYXdDb25maWcpO1xyXG4gICAgY29uc3QgbmFtZSA9IGNvbmZpZy5uYW1lO1xyXG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJyB8fCAhbmFtZSkge1xyXG4gICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYmFkLWFwcC1uYW1lXCIgLyogQXBwRXJyb3IuQkFEX0FQUF9OQU1FICovLCB7XHJcbiAgICAgICAgICAgIGFwcE5hbWU6IFN0cmluZyhuYW1lKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IGdldERlZmF1bHRBcHBDb25maWcoKSk7XHJcbiAgICBpZiAoIW9wdGlvbnMpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLW9wdGlvbnNcIiAvKiBBcHBFcnJvci5OT19PUFRJT05TICovKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGV4aXN0aW5nQXBwID0gX2FwcHMuZ2V0KG5hbWUpO1xyXG4gICAgaWYgKGV4aXN0aW5nQXBwKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIHRoZSBleGlzdGluZyBhcHAgaWYgb3B0aW9ucyBhbmQgY29uZmlnIGRlZXAgZXF1YWwgdGhlIG9uZXMgaW4gdGhlIGV4aXN0aW5nIGFwcC5cclxuICAgICAgICBpZiAoZGVlcEVxdWFsKG9wdGlvbnMsIGV4aXN0aW5nQXBwLm9wdGlvbnMpICYmXHJcbiAgICAgICAgICAgIGRlZXBFcXVhbChjb25maWcsIGV4aXN0aW5nQXBwLmNvbmZpZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nQXBwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJkdXBsaWNhdGUtYXBwXCIgLyogQXBwRXJyb3IuRFVQTElDQVRFX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnN0IGNvbnRhaW5lciA9IG5ldyBDb21wb25lbnRDb250YWluZXIobmFtZSk7XHJcbiAgICBmb3IgKGNvbnN0IGNvbXBvbmVudCBvZiBfY29tcG9uZW50cy52YWx1ZXMoKSkge1xyXG4gICAgICAgIGNvbnRhaW5lci5hZGRDb21wb25lbnQoY29tcG9uZW50KTtcclxuICAgIH1cclxuICAgIGNvbnN0IG5ld0FwcCA9IG5ldyBGaXJlYmFzZUFwcEltcGwob3B0aW9ucywgY29uZmlnLCBjb250YWluZXIpO1xyXG4gICAgX2FwcHMuc2V0KG5hbWUsIG5ld0FwcCk7XHJcbiAgICByZXR1cm4gbmV3QXBwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXRyaWV2ZXMgYSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIFdoZW4gY2FsbGVkIHdpdGggbm8gYXJndW1lbnRzLCB0aGUgZGVmYXVsdCBhcHAgaXMgcmV0dXJuZWQuIFdoZW4gYW4gYXBwIG5hbWVcclxuICogaXMgcHJvdmlkZWQsIHRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGF0IG5hbWUgaXMgcmV0dXJuZWQuXHJcbiAqXHJcbiAqIEFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gaWYgdGhlIGFwcCBiZWluZyByZXRyaWV2ZWQgaGFzIG5vdCB5ZXQgYmVlblxyXG4gKiBpbml0aWFsaXplZC5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBSZXR1cm4gdGhlIGRlZmF1bHQgYXBwXHJcbiAqIGNvbnN0IGFwcCA9IGdldEFwcCgpO1xyXG4gKiBgYGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBSZXR1cm4gYSBuYW1lZCBhcHBcclxuICogY29uc3Qgb3RoZXJBcHAgPSBnZXRBcHAoXCJvdGhlckFwcFwiKTtcclxuICogYGBgXHJcbiAqXHJcbiAqIEBwYXJhbSBuYW1lIC0gT3B0aW9uYWwgbmFtZSBvZiB0aGUgYXBwIHRvIHJldHVybi4gSWYgbm8gbmFtZSBpc1xyXG4gKiAgIHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBpcyBgXCJbREVGQVVMVF1cImAuXHJcbiAqXHJcbiAqIEByZXR1cm5zIFRoZSBhcHAgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvdmlkZWQgYXBwIG5hbWUuXHJcbiAqICAgSWYgbm8gYXBwIG5hbWUgaXMgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGFwcCBpcyByZXR1cm5lZC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXBwKG5hbWUgPSBERUZBVUxUX0VOVFJZX05BTUUpIHtcclxuICAgIGNvbnN0IGFwcCA9IF9hcHBzLmdldChuYW1lKTtcclxuICAgIGlmICghYXBwICYmIG5hbWUgPT09IERFRkFVTFRfRU5UUllfTkFNRSAmJiBnZXREZWZhdWx0QXBwQ29uZmlnKCkpIHtcclxuICAgICAgICByZXR1cm4gaW5pdGlhbGl6ZUFwcCgpO1xyXG4gICAgfVxyXG4gICAgaWYgKCFhcHApIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm5vLWFwcFwiIC8qIEFwcEVycm9yLk5PX0FQUCAqLywgeyBhcHBOYW1lOiBuYW1lIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFwcDtcclxufVxyXG4vKipcclxuICogQSAocmVhZC1vbmx5KSBhcnJheSBvZiBhbGwgaW5pdGlhbGl6ZWQgYXBwcy5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gZ2V0QXBwcygpIHtcclxuICAgIHJldHVybiBBcnJheS5mcm9tKF9hcHBzLnZhbHVlcygpKTtcclxufVxyXG4vKipcclxuICogUmVuZGVycyB0aGlzIGFwcCB1bnVzYWJsZSBhbmQgZnJlZXMgdGhlIHJlc291cmNlcyBvZiBhbGwgYXNzb2NpYXRlZFxyXG4gKiBzZXJ2aWNlcy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiBkZWxldGVBcHAoYXBwKVxyXG4gKiAgIC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gKiAgICAgY29uc29sZS5sb2coXCJBcHAgZGVsZXRlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAqICAgfSlcclxuICogICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcclxuICogICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgZGVsZXRpbmcgYXBwOlwiLCBlcnJvcik7XHJcbiAqICAgfSk7XHJcbiAqIGBgYFxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBkZWxldGVBcHAoYXBwKSB7XHJcbiAgICBjb25zdCBuYW1lID0gYXBwLm5hbWU7XHJcbiAgICBpZiAoX2FwcHMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgX2FwcHMuZGVsZXRlKG5hbWUpO1xyXG4gICAgICAgIGF3YWl0IFByb21pc2UuYWxsKGFwcC5jb250YWluZXJcclxuICAgICAgICAgICAgLmdldFByb3ZpZGVycygpXHJcbiAgICAgICAgICAgIC5tYXAocHJvdmlkZXIgPT4gcHJvdmlkZXIuZGVsZXRlKCkpKTtcclxuICAgICAgICBhcHAuaXNEZWxldGVkID0gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogUmVnaXN0ZXJzIGEgbGlicmFyeSdzIG5hbWUgYW5kIHZlcnNpb24gZm9yIHBsYXRmb3JtIGxvZ2dpbmcgcHVycG9zZXMuXHJcbiAqIEBwYXJhbSBsaWJyYXJ5IC0gTmFtZSBvZiAxcCBvciAzcCBsaWJyYXJ5IChlLmcuIGZpcmVzdG9yZSwgYW5ndWxhcmZpcmUpXHJcbiAqIEBwYXJhbSB2ZXJzaW9uIC0gQ3VycmVudCB2ZXJzaW9uIG9mIHRoYXQgbGlicmFyeS5cclxuICogQHBhcmFtIHZhcmlhbnQgLSBCdW5kbGUgdmFyaWFudCwgZS5nLiwgbm9kZSwgcm4sIGV0Yy5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gcmVnaXN0ZXJWZXJzaW9uKGxpYnJhcnlLZXlPck5hbWUsIHZlcnNpb24sIHZhcmlhbnQpIHtcclxuICAgIHZhciBfYTtcclxuICAgIC8vIFRPRE86IFdlIGNhbiB1c2UgdGhpcyBjaGVjayB0byB3aGl0ZWxpc3Qgc3RyaW5ncyB3aGVuL2lmIHdlIHNldCB1cFxyXG4gICAgLy8gYSBnb29kIHdoaXRlbGlzdCBzeXN0ZW0uXHJcbiAgICBsZXQgbGlicmFyeSA9IChfYSA9IFBMQVRGT1JNX0xPR19TVFJJTkdbbGlicmFyeUtleU9yTmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGxpYnJhcnlLZXlPck5hbWU7XHJcbiAgICBpZiAodmFyaWFudCkge1xyXG4gICAgICAgIGxpYnJhcnkgKz0gYC0ke3ZhcmlhbnR9YDtcclxuICAgIH1cclxuICAgIGNvbnN0IGxpYnJhcnlNaXNtYXRjaCA9IGxpYnJhcnkubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgIGNvbnN0IHZlcnNpb25NaXNtYXRjaCA9IHZlcnNpb24ubWF0Y2goL1xcc3xcXC8vKTtcclxuICAgIGlmIChsaWJyYXJ5TWlzbWF0Y2ggfHwgdmVyc2lvbk1pc21hdGNoKSB7XHJcbiAgICAgICAgY29uc3Qgd2FybmluZyA9IFtcclxuICAgICAgICAgICAgYFVuYWJsZSB0byByZWdpc3RlciBsaWJyYXJ5IFwiJHtsaWJyYXJ5fVwiIHdpdGggdmVyc2lvbiBcIiR7dmVyc2lvbn1cIjpgXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAobGlicmFyeU1pc21hdGNoKSB7XHJcbiAgICAgICAgICAgIHdhcm5pbmcucHVzaChgbGlicmFyeSBuYW1lIFwiJHtsaWJyYXJ5fVwiIGNvbnRhaW5zIGlsbGVnYWwgY2hhcmFjdGVycyAod2hpdGVzcGFjZSBvciBcIi9cIilgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxpYnJhcnlNaXNtYXRjaCAmJiB2ZXJzaW9uTWlzbWF0Y2gpIHtcclxuICAgICAgICAgICAgd2FybmluZy5wdXNoKCdhbmQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZlcnNpb25NaXNtYXRjaCkge1xyXG4gICAgICAgICAgICB3YXJuaW5nLnB1c2goYHZlcnNpb24gbmFtZSBcIiR7dmVyc2lvbn1cIiBjb250YWlucyBpbGxlZ2FsIGNoYXJhY3RlcnMgKHdoaXRlc3BhY2Ugb3IgXCIvXCIpYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxvZ2dlci53YXJuKHdhcm5pbmcuam9pbignICcpKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudChgJHtsaWJyYXJ5fS12ZXJzaW9uYCwgKCkgPT4gKHsgbGlicmFyeSwgdmVyc2lvbiB9KSwgXCJWRVJTSU9OXCIgLyogQ29tcG9uZW50VHlwZS5WRVJTSU9OICovKSk7XHJcbn1cclxuLyoqXHJcbiAqIFNldHMgbG9nIGhhbmRsZXIgZm9yIGFsbCBGaXJlYmFzZSBTREtzLlxyXG4gKiBAcGFyYW0gbG9nQ2FsbGJhY2sgLSBBbiBvcHRpb25hbCBjdXN0b20gbG9nIGhhbmRsZXIgdGhhdCBleGVjdXRlcyB1c2VyIGNvZGUgd2hlbmV2ZXJcclxuICogdGhlIEZpcmViYXNlIFNESyBtYWtlcyBhIGxvZ2dpbmcgY2FsbC5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gb25Mb2cobG9nQ2FsbGJhY2ssIG9wdGlvbnMpIHtcclxuICAgIGlmIChsb2dDYWxsYmFjayAhPT0gbnVsbCAmJiB0eXBlb2YgbG9nQ2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImludmFsaWQtbG9nLWFyZ3VtZW50XCIgLyogQXBwRXJyb3IuSU5WQUxJRF9MT0dfQVJHVU1FTlQgKi8pO1xyXG4gICAgfVxyXG4gICAgc2V0VXNlckxvZ0hhbmRsZXIobG9nQ2FsbGJhY2ssIG9wdGlvbnMpO1xyXG59XHJcbi8qKlxyXG4gKiBTZXRzIGxvZyBsZXZlbCBmb3IgYWxsIEZpcmViYXNlIFNES3MuXHJcbiAqXHJcbiAqIEFsbCBvZiB0aGUgbG9nIHR5cGVzIGFib3ZlIHRoZSBjdXJyZW50IGxvZyBsZXZlbCBhcmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBpbmZvYCwgZXJyb3JzIGFyZSBsb2dnZWQsIGJ1dCBgZGVidWdgIGFuZFxyXG4gKiBgdmVyYm9zZWAgbG9ncyBhcmUgbm90KS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gc2V0TG9nTGV2ZWwobG9nTGV2ZWwpIHtcclxuICAgIHNldExvZ0xldmVsJDEobG9nTGV2ZWwpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IERCX05BTUUgPSAnZmlyZWJhc2UtaGVhcnRiZWF0LWRhdGFiYXNlJztcclxuY29uc3QgREJfVkVSU0lPTiA9IDE7XHJcbmNvbnN0IFNUT1JFX05BTUUgPSAnZmlyZWJhc2UtaGVhcnRiZWF0LXN0b3JlJztcclxubGV0IGRiUHJvbWlzZSA9IG51bGw7XHJcbmZ1bmN0aW9uIGdldERiUHJvbWlzZSgpIHtcclxuICAgIGlmICghZGJQcm9taXNlKSB7XHJcbiAgICAgICAgZGJQcm9taXNlID0gb3BlbkRCKERCX05BTUUsIERCX1ZFUlNJT04sIHtcclxuICAgICAgICAgICAgdXBncmFkZTogKGRiLCBvbGRWZXJzaW9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBXZSBkb24ndCB1c2UgJ2JyZWFrJyBpbiB0aGlzIHN3aXRjaCBzdGF0ZW1lbnQsIHRoZSBmYWxsLXRocm91Z2hcclxuICAgICAgICAgICAgICAgIC8vIGJlaGF2aW9yIGlzIHdoYXQgd2Ugd2FudCwgYmVjYXVzZSBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgdmVyc2lvbnMgYmV0d2VlblxyXG4gICAgICAgICAgICAgICAgLy8gdGhlIG9sZCB2ZXJzaW9uIGFuZCB0aGUgY3VycmVudCB2ZXJzaW9uLCB3ZSB3YW50IEFMTCB0aGUgbWlncmF0aW9uc1xyXG4gICAgICAgICAgICAgICAgLy8gdGhhdCBjb3JyZXNwb25kIHRvIHRob3NlIHZlcnNpb25zIHRvIHJ1biwgbm90IG9ubHkgdGhlIGxhc3Qgb25lLlxyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtY2FzZVxyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvbGRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZShTVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhdGNoKGUgPT4ge1xyXG4gICAgICAgICAgICB0aHJvdyBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcImlkYi1vcGVuXCIgLyogQXBwRXJyb3IuSURCX09QRU4gKi8sIHtcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXJyb3JNZXNzYWdlOiBlLm1lc3NhZ2VcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGJQcm9taXNlO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIHJlYWRIZWFydGJlYXRzRnJvbUluZGV4ZWREQihhcHApIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXREYlByb21pc2UoKTtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBkYlxyXG4gICAgICAgICAgICAudHJhbnNhY3Rpb24oU1RPUkVfTkFNRSlcclxuICAgICAgICAgICAgLm9iamVjdFN0b3JlKFNUT1JFX05BTUUpXHJcbiAgICAgICAgICAgIC5nZXQoY29tcHV0ZUtleShhcHApKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZpcmViYXNlRXJyb3IpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oZS5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkYkdldEVycm9yID0gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJpZGItZ2V0XCIgLyogQXBwRXJyb3IuSURCX0dFVCAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihpZGJHZXRFcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIoYXBwLCBoZWFydGJlYXRPYmplY3QpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgZGIgPSBhd2FpdCBnZXREYlByb21pc2UoKTtcclxuICAgICAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKFNUT1JFX05BTUUsICdyZWFkd3JpdGUnKTtcclxuICAgICAgICBjb25zdCBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKFNUT1JFX05BTUUpO1xyXG4gICAgICAgIGF3YWl0IG9iamVjdFN0b3JlLnB1dChoZWFydGJlYXRPYmplY3QsIGNvbXB1dGVLZXkoYXBwKSk7XHJcbiAgICAgICAgYXdhaXQgdHguZG9uZTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBGaXJlYmFzZUVycm9yKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKGUubWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpZGJHZXRFcnJvciA9IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaWRiLXNldFwiIC8qIEFwcEVycm9yLklEQl9XUklURSAqLywge1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFcnJvck1lc3NhZ2U6IGUgPT09IG51bGwgfHwgZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZS5tZXNzYWdlXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBsb2dnZXIud2FybihpZGJHZXRFcnJvci5tZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gY29tcHV0ZUtleShhcHApIHtcclxuICAgIHJldHVybiBgJHthcHAubmFtZX0hJHthcHAub3B0aW9ucy5hcHBJZH1gO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IE1BWF9IRUFERVJfQllURVMgPSAxMDI0O1xyXG4vLyAzMCBkYXlzXHJcbmNvbnN0IFNUT1JFRF9IRUFSVEJFQVRfUkVURU5USU9OX01BWF9NSUxMSVMgPSAzMCAqIDI0ICogNjAgKiA2MCAqIDEwMDA7XHJcbmNsYXNzIEhlYXJ0YmVhdFNlcnZpY2VJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIEluLW1lbW9yeSBjYWNoZSBmb3IgaGVhcnRiZWF0cywgdXNlZCBieSBnZXRIZWFydGJlYXRzSGVhZGVyKCkgdG8gZ2VuZXJhdGVcclxuICAgICAgICAgKiB0aGUgaGVhZGVyIHN0cmluZy5cclxuICAgICAgICAgKiBTdG9yZXMgb25lIHJlY29yZCBwZXIgZGF0ZS4gVGhpcyB3aWxsIGJlIGNvbnNvbGlkYXRlZCBpbnRvIHRoZSBzdGFuZGFyZFxyXG4gICAgICAgICAqIGZvcm1hdCBvZiBvbmUgcmVjb3JkIHBlciB1c2VyIGFnZW50IHN0cmluZyBiZWZvcmUgYmVpbmcgc2VudCBhcyBhIGhlYWRlci5cclxuICAgICAgICAgKiBQb3B1bGF0ZWQgZnJvbSBpbmRleGVkREIgd2hlbiB0aGUgY29udHJvbGxlciBpcyBpbnN0YW50aWF0ZWQgYW5kIHNob3VsZFxyXG4gICAgICAgICAqIGJlIGtlcHQgaW4gc3luYyB3aXRoIGluZGV4ZWREQi5cclxuICAgICAgICAgKiBMZWF2ZSBwdWJsaWMgZm9yIGVhc2llciB0ZXN0aW5nLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IG51bGw7XHJcbiAgICAgICAgY29uc3QgYXBwID0gdGhpcy5jb250YWluZXIuZ2V0UHJvdmlkZXIoJ2FwcCcpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgICAgIHRoaXMuX3N0b3JhZ2UgPSBuZXcgSGVhcnRiZWF0U3RvcmFnZUltcGwoYXBwKTtcclxuICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlID0gdGhpcy5fc3RvcmFnZS5yZWFkKCkudGhlbihyZXN1bHQgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUgPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB0byByZXBvcnQgYSBoZWFydGJlYXQuIFRoZSBmdW5jdGlvbiB3aWxsIGdlbmVyYXRlXHJcbiAgICAgKiBhIEhlYXJ0YmVhdHNCeVVzZXJBZ2VudCBvYmplY3QsIHVwZGF0ZSBoZWFydGJlYXRzQ2FjaGUsIGFuZCBwZXJzaXN0IGl0XHJcbiAgICAgKiB0byBJbmRleGVkREIuXHJcbiAgICAgKiBOb3RlIHRoYXQgd2Ugb25seSBzdG9yZSBvbmUgaGVhcnRiZWF0IHBlciBkYXkuIFNvIGlmIGEgaGVhcnRiZWF0IGZvciB0b2RheSBpc1xyXG4gICAgICogYWxyZWFkeSBsb2dnZWQsIHN1YnNlcXVlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiBpbiB0aGUgc2FtZSBkYXkgd2lsbCBiZSBpZ25vcmVkLlxyXG4gICAgICovXHJcbiAgICBhc3luYyB0cmlnZ2VySGVhcnRiZWF0KCkge1xyXG4gICAgICAgIGNvbnN0IHBsYXRmb3JtTG9nZ2VyID0gdGhpcy5jb250YWluZXJcclxuICAgICAgICAgICAgLmdldFByb3ZpZGVyKCdwbGF0Zm9ybS1sb2dnZXInKVxyXG4gICAgICAgICAgICAuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgXCJGaXJlYmFzZSB1c2VyIGFnZW50XCIgc3RyaW5nIGZyb20gdGhlIHBsYXRmb3JtIGxvZ2dlclxyXG4gICAgICAgIC8vIHNlcnZpY2UsIG5vdCB0aGUgYnJvd3NlciB1c2VyIGFnZW50LlxyXG4gICAgICAgIGNvbnN0IGFnZW50ID0gcGxhdGZvcm1Mb2dnZXIuZ2V0UGxhdGZvcm1JbmZvU3RyaW5nKCk7XHJcbiAgICAgICAgY29uc3QgZGF0ZSA9IGdldFVUQ0RhdGVTdHJpbmcoKTtcclxuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSA9IGF3YWl0IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIERvIG5vdCBzdG9yZSBhIGhlYXJ0YmVhdCBpZiBvbmUgaXMgYWxyZWFkeSBzdG9yZWQgZm9yIHRoaXMgZGF5XHJcbiAgICAgICAgLy8gb3IgaWYgYSBoZWFkZXIgaGFzIGFscmVhZHkgYmVlbiBzZW50IHRvZGF5LlxyXG4gICAgICAgIGlmICh0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID09PSBkYXRlIHx8XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLnNvbWUoc2luZ2xlRGF0ZUhlYXJ0YmVhdCA9PiBzaW5nbGVEYXRlSGVhcnRiZWF0LmRhdGUgPT09IGRhdGUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIFRoZXJlIGlzIG5vIGVudHJ5IGZvciB0aGlzIGRhdGUuIENyZWF0ZSBvbmUuXHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLnB1c2goeyBkYXRlLCBhZ2VudCB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUmVtb3ZlIGVudHJpZXMgb2xkZXIgdGhhbiAzMCBkYXlzLlxyXG4gICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzID0gdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMuZmlsdGVyKHNpbmdsZURhdGVIZWFydGJlYXQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBoYlRpbWVzdGFtcCA9IG5ldyBEYXRlKHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSkudmFsdWVPZigpO1xyXG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICByZXR1cm4gbm93IC0gaGJUaW1lc3RhbXAgPD0gU1RPUkVEX0hFQVJUQkVBVF9SRVRFTlRJT05fTUFYX01JTExJUztcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RvcmFnZS5vdmVyd3JpdGUodGhpcy5faGVhcnRiZWF0c0NhY2hlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIGJhc2U2NCBlbmNvZGVkIHN0cmluZyB3aGljaCBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlIGhlYXJ0YmVhdC1zcGVjaWZpYyBoZWFkZXIgZGlyZWN0bHkuXHJcbiAgICAgKiBJdCBhbHNvIGNsZWFycyBhbGwgaGVhcnRiZWF0cyBmcm9tIG1lbW9yeSBhcyB3ZWxsIGFzIGluIEluZGV4ZWREQi5cclxuICAgICAqXHJcbiAgICAgKiBOT1RFOiBDb25zdW1pbmcgcHJvZHVjdCBTREtzIHNob3VsZCBub3Qgc2VuZCB0aGUgaGVhZGVyIGlmIHRoaXMgbWV0aG9kXHJcbiAgICAgKiByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0SGVhcnRiZWF0c0hlYWRlcigpIHtcclxuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuX2hlYXJ0YmVhdHNDYWNoZVByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIElmIGl0J3Mgc3RpbGwgbnVsbCBvciB0aGUgYXJyYXkgaXMgZW1wdHksIHRoZXJlIGlzIG5vIGRhdGEgdG8gc2VuZC5cclxuICAgICAgICBpZiAodGhpcy5faGVhcnRiZWF0c0NhY2hlID09PSBudWxsIHx8XHJcbiAgICAgICAgICAgIHRoaXMuX2hlYXJ0YmVhdHNDYWNoZS5oZWFydGJlYXRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGRhdGUgPSBnZXRVVENEYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgLy8gRXh0cmFjdCBhcyBtYW55IGhlYXJ0YmVhdHMgZnJvbSB0aGUgY2FjaGUgYXMgd2lsbCBmaXQgdW5kZXIgdGhlIHNpemUgbGltaXQuXHJcbiAgICAgICAgY29uc3QgeyBoZWFydGJlYXRzVG9TZW5kLCB1bnNlbnRFbnRyaWVzIH0gPSBleHRyYWN0SGVhcnRiZWF0c0ZvckhlYWRlcih0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyk7XHJcbiAgICAgICAgY29uc3QgaGVhZGVyU3RyaW5nID0gYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoSlNPTi5zdHJpbmdpZnkoeyB2ZXJzaW9uOiAyLCBoZWFydGJlYXRzOiBoZWFydGJlYXRzVG9TZW5kIH0pKTtcclxuICAgICAgICAvLyBTdG9yZSBsYXN0IHNlbnQgZGF0ZSB0byBwcmV2ZW50IGFub3RoZXIgYmVpbmcgbG9nZ2VkL3NlbnQgZm9yIHRoZSBzYW1lIGRheS5cclxuICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUubGFzdFNlbnRIZWFydGJlYXREYXRlID0gZGF0ZTtcclxuICAgICAgICBpZiAodW5zZW50RW50cmllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIFN0b3JlIGFueSB1bnNlbnQgZW50cmllcyBpZiB0aGV5IGV4aXN0LlxyXG4gICAgICAgICAgICB0aGlzLl9oZWFydGJlYXRzQ2FjaGUuaGVhcnRiZWF0cyA9IHVuc2VudEVudHJpZXM7XHJcbiAgICAgICAgICAgIC8vIFRoaXMgc2VlbXMgbW9yZSBsaWtlbHkgdGhhbiBlbXB0eWluZyB0aGUgYXJyYXkgKGJlbG93KSB0byBsZWFkIHRvIHNvbWUgb2RkIHN0YXRlXHJcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoZSBjYWNoZSBpc24ndCBlbXB0eSBhbmQgdGhpcyB3aWxsIGJlIGNhbGxlZCBhZ2FpbiBvbiB0aGUgbmV4dCByZXF1ZXN0LFxyXG4gICAgICAgICAgICAvLyBhbmQgaXMgcHJvYmFibHkgc2FmZXN0IGlmIHdlIGF3YWl0IGl0LlxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLl9zdG9yYWdlLm92ZXJ3cml0ZSh0aGlzLl9oZWFydGJlYXRzQ2FjaGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5faGVhcnRiZWF0c0NhY2hlLmhlYXJ0YmVhdHMgPSBbXTtcclxuICAgICAgICAgICAgLy8gRG8gbm90IHdhaXQgZm9yIHRoaXMsIHRvIHJlZHVjZSBsYXRlbmN5LlxyXG4gICAgICAgICAgICB2b2lkIHRoaXMuX3N0b3JhZ2Uub3ZlcndyaXRlKHRoaXMuX2hlYXJ0YmVhdHNDYWNoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBoZWFkZXJTdHJpbmc7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZ2V0VVRDRGF0ZVN0cmluZygpIHtcclxuICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgIC8vIFJldHVybnMgZGF0ZSBmb3JtYXQgJ1lZWVktTU0tREQnXHJcbiAgICByZXR1cm4gdG9kYXkudG9JU09TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xyXG59XHJcbmZ1bmN0aW9uIGV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyKGhlYXJ0YmVhdHNDYWNoZSwgbWF4U2l6ZSA9IE1BWF9IRUFERVJfQllURVMpIHtcclxuICAgIC8vIEhlYXJ0YmVhdHMgZ3JvdXBlZCBieSB1c2VyIGFnZW50IGluIHRoZSBzdGFuZGFyZCBmb3JtYXQgdG8gYmUgc2VudCBpblxyXG4gICAgLy8gdGhlIGhlYWRlci5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdHNUb1NlbmQgPSBbXTtcclxuICAgIC8vIFNpbmdsZSBkYXRlIGZvcm1hdCBoZWFydGJlYXRzIHRoYXQgYXJlIG5vdCBzZW50LlxyXG4gICAgbGV0IHVuc2VudEVudHJpZXMgPSBoZWFydGJlYXRzQ2FjaGUuc2xpY2UoKTtcclxuICAgIGZvciAoY29uc3Qgc2luZ2xlRGF0ZUhlYXJ0YmVhdCBvZiBoZWFydGJlYXRzQ2FjaGUpIHtcclxuICAgICAgICAvLyBMb29rIGZvciBhbiBleGlzdGluZyBlbnRyeSB3aXRoIHRoZSBzYW1lIHVzZXIgYWdlbnQuXHJcbiAgICAgICAgY29uc3QgaGVhcnRiZWF0RW50cnkgPSBoZWFydGJlYXRzVG9TZW5kLmZpbmQoaGIgPT4gaGIuYWdlbnQgPT09IHNpbmdsZURhdGVIZWFydGJlYXQuYWdlbnQpO1xyXG4gICAgICAgIGlmICghaGVhcnRiZWF0RW50cnkpIHtcclxuICAgICAgICAgICAgLy8gSWYgbm8gZW50cnkgZm9yIHRoaXMgdXNlciBhZ2VudCBleGlzdHMsIGNyZWF0ZSBvbmUuXHJcbiAgICAgICAgICAgIGhlYXJ0YmVhdHNUb1NlbmQucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBhZ2VudDogc2luZ2xlRGF0ZUhlYXJ0YmVhdC5hZ2VudCxcclxuICAgICAgICAgICAgICAgIGRhdGVzOiBbc2luZ2xlRGF0ZUhlYXJ0YmVhdC5kYXRlXVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKGNvdW50Qnl0ZXMoaGVhcnRiZWF0c1RvU2VuZCkgPiBtYXhTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgaGVhZGVyIHdvdWxkIGV4Y2VlZCBtYXggc2l6ZSwgcmVtb3ZlIHRoZSBhZGRlZCBoZWFydGJlYXRcclxuICAgICAgICAgICAgICAgIC8vIGVudHJ5IGFuZCBzdG9wIGFkZGluZyB0byB0aGUgaGVhZGVyLlxyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0c1RvU2VuZC5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBoZWFydGJlYXRFbnRyeS5kYXRlcy5wdXNoKHNpbmdsZURhdGVIZWFydGJlYXQuZGF0ZSk7XHJcbiAgICAgICAgICAgIC8vIElmIHRoZSBoZWFkZXIgd291bGQgZXhjZWVkIG1heCBzaXplLCByZW1vdmUgdGhlIGFkZGVkIGRhdGVcclxuICAgICAgICAgICAgLy8gYW5kIHN0b3AgYWRkaW5nIHRvIHRoZSBoZWFkZXIuXHJcbiAgICAgICAgICAgIGlmIChjb3VudEJ5dGVzKGhlYXJ0YmVhdHNUb1NlbmQpID4gbWF4U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0RW50cnkuZGF0ZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBQb3AgdW5zZW50IGVudHJ5IGZyb20gcXVldWUuIChTa2lwcGVkIGlmIGFkZGluZyB0aGUgZW50cnkgZXhjZWVkZWRcclxuICAgICAgICAvLyBxdW90YSBhbmQgdGhlIGxvb3AgYnJlYWtzIGVhcmx5LilcclxuICAgICAgICB1bnNlbnRFbnRyaWVzID0gdW5zZW50RW50cmllcy5zbGljZSgxKTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGVhcnRiZWF0c1RvU2VuZCxcclxuICAgICAgICB1bnNlbnRFbnRyaWVzXHJcbiAgICB9O1xyXG59XHJcbmNsYXNzIEhlYXJ0YmVhdFN0b3JhZ2VJbXBsIHtcclxuICAgIGNvbnN0cnVjdG9yKGFwcCkge1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgICAgIHRoaXMuX2NhblVzZUluZGV4ZWREQlByb21pc2UgPSB0aGlzLnJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2soKTtcclxuICAgIH1cclxuICAgIGFzeW5jIHJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2soKSB7XHJcbiAgICAgICAgaWYgKCFpc0luZGV4ZWREQkF2YWlsYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHRydWUpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4gZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhbGwgaGVhcnRiZWF0cy5cclxuICAgICAqL1xyXG4gICAgYXN5bmMgcmVhZCgpIHtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGhlYXJ0YmVhdHM6IFtdIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpZGJIZWFydGJlYXRPYmplY3QgPSBhd2FpdCByZWFkSGVhcnRiZWF0c0Zyb21JbmRleGVkREIodGhpcy5hcHApO1xyXG4gICAgICAgICAgICByZXR1cm4gaWRiSGVhcnRiZWF0T2JqZWN0IHx8IHsgaGVhcnRiZWF0czogW10gfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBvdmVyd3JpdGUgdGhlIHN0b3JhZ2Ugd2l0aCB0aGUgcHJvdmlkZWQgaGVhcnRiZWF0c1xyXG4gICAgYXN5bmMgb3ZlcndyaXRlKGhlYXJ0YmVhdHNPYmplY3QpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3QgY2FuVXNlSW5kZXhlZERCID0gYXdhaXQgdGhpcy5fY2FuVXNlSW5kZXhlZERCUHJvbWlzZTtcclxuICAgICAgICBpZiAoIWNhblVzZUluZGV4ZWREQikge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QgPSBhd2FpdCB0aGlzLnJlYWQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHdyaXRlSGVhcnRiZWF0c1RvSW5kZXhlZERCKHRoaXMuYXBwLCB7XHJcbiAgICAgICAgICAgICAgICBsYXN0U2VudEhlYXJ0YmVhdERhdGU6IChfYSA9IGhlYXJ0YmVhdHNPYmplY3QubGFzdFNlbnRIZWFydGJlYXREYXRlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBleGlzdGluZ0hlYXJ0YmVhdHNPYmplY3QubGFzdFNlbnRIZWFydGJlYXREYXRlLFxyXG4gICAgICAgICAgICAgICAgaGVhcnRiZWF0czogaGVhcnRiZWF0c09iamVjdC5oZWFydGJlYXRzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGFkZCBoZWFydGJlYXRzXHJcbiAgICBhc3luYyBhZGQoaGVhcnRiZWF0c09iamVjdCkge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBjb25zdCBjYW5Vc2VJbmRleGVkREIgPSBhd2FpdCB0aGlzLl9jYW5Vc2VJbmRleGVkREJQcm9taXNlO1xyXG4gICAgICAgIGlmICghY2FuVXNlSW5kZXhlZERCKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdCA9IGF3YWl0IHRoaXMucmVhZCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gd3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIodGhpcy5hcHAsIHtcclxuICAgICAgICAgICAgICAgIGxhc3RTZW50SGVhcnRiZWF0RGF0ZTogKF9hID0gaGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGV4aXN0aW5nSGVhcnRiZWF0c09iamVjdC5sYXN0U2VudEhlYXJ0YmVhdERhdGUsXHJcbiAgICAgICAgICAgICAgICBoZWFydGJlYXRzOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0LmhlYXJ0YmVhdHMsXHJcbiAgICAgICAgICAgICAgICAgICAgLi4uaGVhcnRiZWF0c09iamVjdC5oZWFydGJlYXRzXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2FsY3VsYXRlIGJ5dGVzIG9mIGEgSGVhcnRiZWF0c0J5VXNlckFnZW50IGFycmF5IGFmdGVyIGJlaW5nIHdyYXBwZWRcclxuICogaW4gYSBwbGF0Zm9ybSBsb2dnaW5nIGhlYWRlciBKU09OIG9iamVjdCwgc3RyaW5naWZpZWQsIGFuZCBjb252ZXJ0ZWRcclxuICogdG8gYmFzZSA2NC5cclxuICovXHJcbmZ1bmN0aW9uIGNvdW50Qnl0ZXMoaGVhcnRiZWF0c0NhY2hlKSB7XHJcbiAgICAvLyBiYXNlNjQgaGFzIGEgcmVzdHJpY3RlZCBzZXQgb2YgY2hhcmFjdGVycywgYWxsIG9mIHdoaWNoIHNob3VsZCBiZSAxIGJ5dGUuXHJcbiAgICByZXR1cm4gYmFzZTY0dXJsRW5jb2RlV2l0aG91dFBhZGRpbmcoXHJcbiAgICAvLyBoZWFydGJlYXRzQ2FjaGUgd3JhcHBlciBwcm9wZXJ0aWVzXHJcbiAgICBKU09OLnN0cmluZ2lmeSh7IHZlcnNpb246IDIsIGhlYXJ0YmVhdHM6IGhlYXJ0YmVhdHNDYWNoZSB9KSkubGVuZ3RoO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIHJlZ2lzdGVyQ29yZUNvbXBvbmVudHModmFyaWFudCkge1xyXG4gICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5ldyBDb21wb25lbnQoJ3BsYXRmb3JtLWxvZ2dlcicsIGNvbnRhaW5lciA9PiBuZXcgUGxhdGZvcm1Mb2dnZXJTZXJ2aWNlSW1wbChjb250YWluZXIpLCBcIlBSSVZBVEVcIiAvKiBDb21wb25lbnRUeXBlLlBSSVZBVEUgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KCdoZWFydGJlYXQnLCBjb250YWluZXIgPT4gbmV3IEhlYXJ0YmVhdFNlcnZpY2VJbXBsKGNvbnRhaW5lciksIFwiUFJJVkFURVwiIC8qIENvbXBvbmVudFR5cGUuUFJJVkFURSAqLykpO1xyXG4gICAgLy8gUmVnaXN0ZXIgYGFwcGAgcGFja2FnZS5cclxuICAgIHJlZ2lzdGVyVmVyc2lvbihuYW1lJG8sIHZlcnNpb24kMSwgdmFyaWFudCk7XHJcbiAgICAvLyBCVUlMRF9UQVJHRVQgd2lsbCBiZSByZXBsYWNlZCBieSB2YWx1ZXMgbGlrZSBlc201LCBlc20yMDE3LCBjanM1LCBldGMgZHVyaW5nIHRoZSBjb21waWxhdGlvblxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKG5hbWUkbywgdmVyc2lvbiQxLCAnZXNtMjAxNycpO1xyXG4gICAgLy8gUmVnaXN0ZXIgcGxhdGZvcm0gU0RLIGlkZW50aWZpZXIgKG5vIHZlcnNpb24pLlxyXG4gICAgcmVnaXN0ZXJWZXJzaW9uKCdmaXJlLWpzJywgJycpO1xyXG59XG5cbi8qKlxyXG4gKiBGaXJlYmFzZSBBcHBcclxuICpcclxuICogQHJlbWFya3MgVGhpcyBwYWNrYWdlIGNvb3JkaW5hdGVzIHRoZSBjb21tdW5pY2F0aW9uIGJldHdlZW4gdGhlIGRpZmZlcmVudCBGaXJlYmFzZSBjb21wb25lbnRzXHJcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxyXG4gKi9cclxucmVnaXN0ZXJDb3JlQ29tcG9uZW50cygnJyk7XG5cbmV4cG9ydCB7IFNES19WRVJTSU9OLCBERUZBVUxUX0VOVFJZX05BTUUgYXMgX0RFRkFVTFRfRU5UUllfTkFNRSwgX2FkZENvbXBvbmVudCwgX2FkZE9yT3ZlcndyaXRlQ29tcG9uZW50LCBfYXBwcywgX2NsZWFyQ29tcG9uZW50cywgX2NvbXBvbmVudHMsIF9nZXRQcm92aWRlciwgX3JlZ2lzdGVyQ29tcG9uZW50LCBfcmVtb3ZlU2VydmljZUluc3RhbmNlLCBkZWxldGVBcHAsIGdldEFwcCwgZ2V0QXBwcywgaW5pdGlhbGl6ZUFwcCwgb25Mb2csIHJlZ2lzdGVyVmVyc2lvbiwgc2V0TG9nTGV2ZWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJ0BmaXJlYmFzZS91dGlsJztcblxuLyoqXHJcbiAqIENvbXBvbmVudCBmb3Igc2VydmljZSBuYW1lIFQsIGUuZy4gYGF1dGhgLCBgYXV0aC1pbnRlcm5hbGBcclxuICovXHJcbmNsYXNzIENvbXBvbmVudCB7XHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgcHVibGljIHNlcnZpY2UgbmFtZSwgZS5nLiBhcHAsIGF1dGgsIGZpcmVzdG9yZSwgZGF0YWJhc2VcclxuICAgICAqIEBwYXJhbSBpbnN0YW5jZUZhY3RvcnkgU2VydmljZSBmYWN0b3J5IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUgcHVibGljIGludGVyZmFjZVxyXG4gICAgICogQHBhcmFtIHR5cGUgd2hldGhlciB0aGUgc2VydmljZSBwcm92aWRlZCBieSB0aGUgY29tcG9uZW50IGlzIHB1YmxpYyBvciBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIGluc3RhbmNlRmFjdG9yeSwgdHlwZSkge1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZUZhY3RvcnkgPSBpbnN0YW5jZUZhY3Rvcnk7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gZmFsc2U7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUHJvcGVydGllcyB0byBiZSBhZGRlZCB0byB0aGUgc2VydmljZSBuYW1lc3BhY2VcclxuICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHt9O1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBcIkxBWllcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5MQVpZICovO1xyXG4gICAgICAgIHRoaXMub25JbnN0YW5jZUNyZWF0ZWQgPSBudWxsO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFudGlhdGlvbk1vZGUobW9kZSkge1xyXG4gICAgICAgIHRoaXMuaW5zdGFudGlhdGlvbk1vZGUgPSBtb2RlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0TXVsdGlwbGVJbnN0YW5jZXMobXVsdGlwbGVJbnN0YW5jZXMpIHtcclxuICAgICAgICB0aGlzLm11bHRpcGxlSW5zdGFuY2VzID0gbXVsdGlwbGVJbnN0YW5jZXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBzZXRTZXJ2aWNlUHJvcHMocHJvcHMpIHtcclxuICAgICAgICB0aGlzLnNlcnZpY2VQcm9wcyA9IHByb3BzO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0SW5zdGFuY2VDcmVhdGVkQ2FsbGJhY2soY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLm9uSW5zdGFuY2VDcmVhdGVkID0gY2FsbGJhY2s7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREVGQVVMVF9FTlRSWV9OQU1FID0gJ1tERUZBVUxUXSc7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBQcm92aWRlciBmb3IgaW5zdGFuY2UgZm9yIHNlcnZpY2UgbmFtZSBULCBlLmcuICdhdXRoJywgJ2F1dGgtaW50ZXJuYWwnXHJcbiAqIE5hbWVTZXJ2aWNlTWFwcGluZ1tUXSBpcyBhbiBhbGlhcyBmb3IgdGhlIHR5cGUgb2YgdGhlIGluc3RhbmNlXHJcbiAqL1xyXG5jbGFzcyBQcm92aWRlciB7XHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBjb250YWluZXIpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2VzT3B0aW9ucyA9IG5ldyBNYXAoKTtcclxuICAgICAgICB0aGlzLm9uSW5pdENhbGxiYWNrcyA9IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQSBwcm92aWRlciBjYW4gcHJvdmlkZSBtdWxpdHBsZSBpbnN0YW5jZXMgb2YgYSBzZXJ2aWNlXHJcbiAgICAgKiBpZiB0aGlzLmNvbXBvbmVudC5tdWx0aXBsZUluc3RhbmNlcyBpcyB0cnVlLlxyXG4gICAgICovXHJcbiAgICBnZXQoaWRlbnRpZmllcikge1xyXG4gICAgICAgIC8vIGlmIG11bHRpcGxlSW5zdGFuY2VzIGlzIG5vdCBzdXBwb3J0ZWQsIHVzZSB0aGUgZGVmYXVsdCBuYW1lXHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIXRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuaGFzKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZlcnJlZCA9IG5ldyBEZWZlcnJlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc0RlZmVycmVkLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZGVmZXJyZWQpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG91bGRBdXRvSW5pdGlhbGl6ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXplIHRoZSBzZXJ2aWNlIGlmIGl0IGNhbiBiZSBhdXRvLWluaXRpYWxpemVkXHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVkSWRlbnRpZmllclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgZ2V0KCksIGl0IHNob3VsZCBub3QgY2F1c2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBhIGZhdGFsIGVycm9yLiBXZSBqdXN0IHJldHVybiB0aGUgdW5yZXNvbHZlZCBwcm9taXNlIGluIHRoaXMgY2FzZS5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpLnByb21pc2U7XHJcbiAgICB9XHJcbiAgICBnZXRJbW1lZGlhdGUob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICAvLyBpZiBtdWx0aXBsZUluc3RhbmNlcyBpcyBub3Qgc3VwcG9ydGVkLCB1c2UgdGhlIGRlZmF1bHQgbmFtZVxyXG4gICAgICAgIGNvbnN0IG5vcm1hbGl6ZWRJZGVudGlmaWVyID0gdGhpcy5ub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmlkZW50aWZpZXIpO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbmFsID0gKF9hID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm9wdGlvbmFsKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSB8fFxyXG4gICAgICAgICAgICB0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE9ySW5pdGlhbGl6ZVNlcnZpY2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIEluIGNhc2UgYSBjb21wb25lbnQgaXMgbm90IGluaXRpYWxpemVkIGFuZCBzaG91bGQvY2FuIG5vdCBiZSBhdXRvLWluaXRpYWxpemVkIGF0IHRoZSBtb21lbnQsIHJldHVybiBudWxsIGlmIHRoZSBvcHRpb25hbCBmbGFnIGlzIHNldCwgb3IgdGhyb3dcclxuICAgICAgICAgICAgaWYgKG9wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBTZXJ2aWNlICR7dGhpcy5uYW1lfSBpcyBub3QgYXZhaWxhYmxlYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXRDb21wb25lbnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50O1xyXG4gICAgfVxyXG4gICAgc2V0Q29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGlmIChjb21wb25lbnQubmFtZSAhPT0gdGhpcy5uYW1lKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBNaXNtYXRjaGluZyBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gZm9yIFByb3ZpZGVyICR7dGhpcy5uYW1lfS5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgZm9yICR7dGhpcy5uYW1lfSBoYXMgYWxyZWFkeSBiZWVuIHByb3ZpZGVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY29tcG9uZW50ID0gY29tcG9uZW50O1xyXG4gICAgICAgIC8vIHJldHVybiBlYXJseSB3aXRob3V0IGF0dGVtcHRpbmcgdG8gaW5pdGlhbGl6ZSB0aGUgY29tcG9uZW50IGlmIHRoZSBjb21wb25lbnQgcmVxdWlyZXMgZXhwbGljaXQgaW5pdGlhbGl6YXRpb24gKGNhbGxpbmcgYFByb3ZpZGVyLmluaXRpYWxpemUoKWApXHJcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZEF1dG9Jbml0aWFsaXplKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiB0aGUgc2VydmljZSBpcyBlYWdlciwgaW5pdGlhbGl6ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZVxyXG4gICAgICAgIGlmIChpc0NvbXBvbmVudEVhZ2VyKGNvbXBvbmVudCkpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7IGluc3RhbmNlSWRlbnRpZmllcjogREVGQVVMVF9FTlRSWV9OQU1FIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB3aGVuIHRoZSBpbnN0YW5jZSBmYWN0b3J5IGZvciBhbiBlYWdlciBDb21wb25lbnQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBkdXJpbmcgdGhlIGVhZ2VyXHJcbiAgICAgICAgICAgICAgICAvLyBpbml0aWFsaXphdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZSBhIGZhdGFsIGVycm9yLlxyXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogSW52ZXN0aWdhdGUgaWYgd2UgbmVlZCB0byBtYWtlIGl0IGNvbmZpZ3VyYWJsZSwgYmVjYXVzZSBzb21lIGNvbXBvbmVudCBtYXkgd2FudCB0byBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvciBpbiB0aGlzIGNhc2U/XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gQ3JlYXRlIHNlcnZpY2UgaW5zdGFuY2VzIGZvciB0aGUgcGVuZGluZyBwcm9taXNlcyBhbmQgcmVzb2x2ZSB0aGVtXHJcbiAgICAgICAgLy8gTk9URTogaWYgdGhpcy5tdWx0aXBsZUluc3RhbmNlcyBpcyBmYWxzZSwgb25seSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB3aWxsIGJlIGNyZWF0ZWRcclxuICAgICAgICAvLyBhbmQgYWxsIHByb21pc2VzIHdpdGggcmVzb2x2ZSB3aXRoIGl0IHJlZ2FyZGxlc3Mgb2YgdGhlIGlkZW50aWZpZXIuXHJcbiAgICAgICAgZm9yIChjb25zdCBbaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZURlZmVycmVkXSBvZiB0aGlzLmluc3RhbmNlc0RlZmVycmVkLmVudHJpZXMoKSkge1xyXG4gICAgICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAvLyBgZ2V0T3JJbml0aWFsaXplU2VydmljZSgpYCBzaG91bGQgYWx3YXlzIHJldHVybiBhIHZhbGlkIGluc3RhbmNlIHNpbmNlIGEgY29tcG9uZW50IGlzIGd1YXJhbnRlZWQuIHVzZSAhIHRvIG1ha2UgdHlwZXNjcmlwdCBoYXBweS5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcy5nZXRPckluaXRpYWxpemVTZXJ2aWNlKHtcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZUlkZW50aWZpZXI6IG5vcm1hbGl6ZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdoZW4gdGhlIGluc3RhbmNlIGZhY3RvcnkgdGhyb3dzIGFuIGV4Y2VwdGlvbiwgaXQgc2hvdWxkIG5vdCBjYXVzZVxyXG4gICAgICAgICAgICAgICAgLy8gYSBmYXRhbCBlcnJvci4gV2UganVzdCBsZWF2ZSB0aGUgcHJvbWlzZSB1bnJlc29sdmVkLlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2xlYXJJbnN0YW5jZShpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNEZWZlcnJlZC5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICAgICAgdGhpcy5pbnN0YW5jZXNPcHRpb25zLmRlbGV0ZShpZGVudGlmaWVyKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlcy5kZWxldGUoaWRlbnRpZmllcik7XHJcbiAgICB9XHJcbiAgICAvLyBhcHAuZGVsZXRlKCkgd2lsbCBjYWxsIHRoaXMgbWV0aG9kIG9uIGV2ZXJ5IHByb3ZpZGVyIHRvIGRlbGV0ZSB0aGUgc2VydmljZXNcclxuICAgIC8vIFRPRE86IHNob3VsZCB3ZSBtYXJrIHRoZSBwcm92aWRlciBhcyBkZWxldGVkP1xyXG4gICAgYXN5bmMgZGVsZXRlKCkge1xyXG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gQXJyYXkuZnJvbSh0aGlzLmluc3RhbmNlcy52YWx1ZXMoKSk7XHJcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdJTlRFUk5BTCcgaW4gc2VydmljZSkgLy8gbGVnYWN5IHNlcnZpY2VzXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxyXG4gICAgICAgICAgICAgICAgLm1hcChzZXJ2aWNlID0+IHNlcnZpY2UuSU5URVJOQUwuZGVsZXRlKCkpLFxyXG4gICAgICAgICAgICAuLi5zZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLmZpbHRlcihzZXJ2aWNlID0+ICdfZGVsZXRlJyBpbiBzZXJ2aWNlKSAvLyBtb2R1bGFyaXplZCBzZXJ2aWNlc1xyXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcclxuICAgICAgICAgICAgICAgIC5tYXAoc2VydmljZSA9PiBzZXJ2aWNlLl9kZWxldGUoKSlcclxuICAgICAgICBdKTtcclxuICAgIH1cclxuICAgIGlzQ29tcG9uZW50U2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBvbmVudCAhPSBudWxsO1xyXG4gICAgfVxyXG4gICAgaXNJbml0aWFsaXplZChpZGVudGlmaWVyID0gREVGQVVMVF9FTlRSWV9OQU1FKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zdGFuY2VzLmhhcyhpZGVudGlmaWVyKTtcclxuICAgIH1cclxuICAgIGdldE9wdGlvbnMoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluc3RhbmNlc09wdGlvbnMuZ2V0KGlkZW50aWZpZXIpIHx8IHt9O1xyXG4gICAgfVxyXG4gICAgaW5pdGlhbGl6ZShvcHRzID0ge30pIHtcclxuICAgICAgICBjb25zdCB7IG9wdGlvbnMgPSB7fSB9ID0gb3B0cztcclxuICAgICAgICBjb25zdCBub3JtYWxpemVkSWRlbnRpZmllciA9IHRoaXMubm9ybWFsaXplSW5zdGFuY2VJZGVudGlmaWVyKG9wdHMuaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKG5vcm1hbGl6ZWRJZGVudGlmaWVyKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcihgJHt0aGlzLm5hbWV9KCR7bm9ybWFsaXplZElkZW50aWZpZXJ9KSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghdGhpcy5pc0NvbXBvbmVudFNldCgpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVycm9yKGBDb21wb25lbnQgJHt0aGlzLm5hbWV9IGhhcyBub3QgYmVlbiByZWdpc3RlcmVkIHlldGApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXMuZ2V0T3JJbml0aWFsaXplU2VydmljZSh7XHJcbiAgICAgICAgICAgIGluc3RhbmNlSWRlbnRpZmllcjogbm9ybWFsaXplZElkZW50aWZpZXIsXHJcbiAgICAgICAgICAgIG9wdGlvbnNcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyByZXNvbHZlIGFueSBwZW5kaW5nIHByb21pc2Ugd2FpdGluZyBmb3IgdGhlIHNlcnZpY2UgaW5zdGFuY2VcclxuICAgICAgICBmb3IgKGNvbnN0IFtpbnN0YW5jZUlkZW50aWZpZXIsIGluc3RhbmNlRGVmZXJyZWRdIG9mIHRoaXMuaW5zdGFuY2VzRGVmZXJyZWQuZW50cmllcygpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpbnN0YW5jZUlkZW50aWZpZXIpO1xyXG4gICAgICAgICAgICBpZiAobm9ybWFsaXplZElkZW50aWZpZXIgPT09IG5vcm1hbGl6ZWREZWZlcnJlZElkZW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIGluc3RhbmNlRGVmZXJyZWQucmVzb2x2ZShpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gYSBmdW5jdGlvbiB0aGF0IHdpbGwgYmUgaW52b2tlZCAgYWZ0ZXIgdGhlIHByb3ZpZGVyIGhhcyBiZWVuIGluaXRpYWxpemVkIGJ5IGNhbGxpbmcgcHJvdmlkZXIuaW5pdGlhbGl6ZSgpLlxyXG4gICAgICogVGhlIGZ1bmN0aW9uIGlzIGludm9rZWQgU1lOQ0hST05PVVNMWSwgc28gaXQgc2hvdWxkIG5vdCBleGVjdXRlIGFueSBsb25ncnVubmluZyB0YXNrcyBpbiBvcmRlciB0byBub3QgYmxvY2sgdGhlIHByb2dyYW0uXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkZW50aWZpZXIgQW4gb3B0aW9uYWwgaW5zdGFuY2UgaWRlbnRpZmllclxyXG4gICAgICogQHJldHVybnMgYSBmdW5jdGlvbiB0byB1bnJlZ2lzdGVyIHRoZSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBvbkluaXQoY2FsbGJhY2ssIGlkZW50aWZpZXIpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElkZW50aWZpZXIgPSB0aGlzLm5vcm1hbGl6ZUluc3RhbmNlSWRlbnRpZmllcihpZGVudGlmaWVyKTtcclxuICAgICAgICBjb25zdCBleGlzdGluZ0NhbGxiYWNrcyA9IChfYSA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChub3JtYWxpemVkSWRlbnRpZmllcikpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG5ldyBTZXQoKTtcclxuICAgICAgICBleGlzdGluZ0NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMub25Jbml0Q2FsbGJhY2tzLnNldChub3JtYWxpemVkSWRlbnRpZmllciwgZXhpc3RpbmdDYWxsYmFja3MpO1xyXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5zdGFuY2UgPSB0aGlzLmluc3RhbmNlcy5nZXQobm9ybWFsaXplZElkZW50aWZpZXIpO1xyXG4gICAgICAgIGlmIChleGlzdGluZ0luc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKGV4aXN0aW5nSW5zdGFuY2UsIG5vcm1hbGl6ZWRJZGVudGlmaWVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgZXhpc3RpbmdDYWxsYmFja3MuZGVsZXRlKGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJbnZva2Ugb25Jbml0IGNhbGxiYWNrcyBzeW5jaHJvbm91c2x5XHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgdGhlIHNlcnZpY2UgaW5zdGFuY2VgXHJcbiAgICAgKi9cclxuICAgIGludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaWRlbnRpZmllcikge1xyXG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9IHRoaXMub25Jbml0Q2FsbGJhY2tzLmdldChpZGVudGlmaWVyKTtcclxuICAgICAgICBpZiAoIWNhbGxiYWNrcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhpbnN0YW5jZSwgaWRlbnRpZmllcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluaXQgY2FsbGJhY2tcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGdldE9ySW5pdGlhbGl6ZVNlcnZpY2UoeyBpbnN0YW5jZUlkZW50aWZpZXIsIG9wdGlvbnMgPSB7fSB9KSB7XHJcbiAgICAgICAgbGV0IGluc3RhbmNlID0gdGhpcy5pbnN0YW5jZXMuZ2V0KGluc3RhbmNlSWRlbnRpZmllcik7XHJcbiAgICAgICAgaWYgKCFpbnN0YW5jZSAmJiB0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICBpbnN0YW5jZSA9IHRoaXMuY29tcG9uZW50Lmluc3RhbmNlRmFjdG9yeSh0aGlzLmNvbnRhaW5lciwge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFuY2VJZGVudGlmaWVyOiBub3JtYWxpemVJZGVudGlmaWVyRm9yRmFjdG9yeShpbnN0YW5jZUlkZW50aWZpZXIpLFxyXG4gICAgICAgICAgICAgICAgb3B0aW9uc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpO1xyXG4gICAgICAgICAgICB0aGlzLmluc3RhbmNlc09wdGlvbnMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgb3B0aW9ucyk7XHJcbiAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgKiBJbnZva2Ugb25Jbml0IGxpc3RlbmVycy5cclxuICAgICAgICAgICAgICogTm90ZSB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCBpcyBkaWZmZXJlbnQsIHdoaWNoIGlzIHVzZWQgYnkgdGhlIGNvbXBvbmVudCBjcmVhdG9yLFxyXG4gICAgICAgICAgICAgKiB3aGlsZSBvbkluaXQgbGlzdGVuZXJzIGFyZSByZWdpc3RlcmVkIGJ5IGNvbnN1bWVycyBvZiB0aGUgcHJvdmlkZXIuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmludm9rZU9uSW5pdENhbGxiYWNrcyhpbnN0YW5jZSwgaW5zdGFuY2VJZGVudGlmaWVyKTtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIE9yZGVyIGlzIGltcG9ydGFudFxyXG4gICAgICAgICAgICAgKiBvbkluc3RhbmNlQ3JlYXRlZCgpIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhpcy5pbnN0YW5jZXMuc2V0KGluc3RhbmNlSWRlbnRpZmllciwgaW5zdGFuY2UpOyB3aGljaFxyXG4gICAgICAgICAgICAgKiBtYWtlcyBgaXNJbml0aWFsaXplZCgpYCByZXR1cm4gdHJ1ZS5cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudC5vbkluc3RhbmNlQ3JlYXRlZCh0aGlzLmNvbnRhaW5lciwgaW5zdGFuY2VJZGVudGlmaWVyLCBpbnN0YW5jZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXRjaCAoX2EpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZ25vcmUgZXJyb3JzIGluIHRoZSBvbkluc3RhbmNlQ3JlYXRlZENhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlIHx8IG51bGw7XHJcbiAgICB9XHJcbiAgICBub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIoaWRlbnRpZmllciA9IERFRkFVTFRfRU5UUllfTkFNRSkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnQubXVsdGlwbGVJbnN0YW5jZXMgPyBpZGVudGlmaWVyIDogREVGQVVMVF9FTlRSWV9OQU1FO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlkZW50aWZpZXI7IC8vIGFzc3VtZSBtdWx0aXBsZSBpbnN0YW5jZXMgYXJlIHN1cHBvcnRlZCBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyBwcm92aWRlZC5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBzaG91bGRBdXRvSW5pdGlhbGl6ZSgpIHtcclxuICAgICAgICByZXR1cm4gKCEhdGhpcy5jb21wb25lbnQgJiZcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgIT09IFwiRVhQTElDSVRcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5FWFBMSUNJVCAqLyk7XHJcbiAgICB9XHJcbn1cclxuLy8gdW5kZWZpbmVkIHNob3VsZCBiZSBwYXNzZWQgdG8gdGhlIHNlcnZpY2UgZmFjdG9yeSBmb3IgdGhlIGRlZmF1bHQgaW5zdGFuY2VcclxuZnVuY3Rpb24gbm9ybWFsaXplSWRlbnRpZmllckZvckZhY3RvcnkoaWRlbnRpZmllcikge1xyXG4gICAgcmV0dXJuIGlkZW50aWZpZXIgPT09IERFRkFVTFRfRU5UUllfTkFNRSA/IHVuZGVmaW5lZCA6IGlkZW50aWZpZXI7XHJcbn1cclxuZnVuY3Rpb24gaXNDb21wb25lbnRFYWdlcihjb21wb25lbnQpIHtcclxuICAgIHJldHVybiBjb21wb25lbnQuaW5zdGFudGlhdGlvbk1vZGUgPT09IFwiRUFHRVJcIiAvKiBJbnN0YW50aWF0aW9uTW9kZS5FQUdFUiAqLztcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ29tcG9uZW50Q29udGFpbmVyIHRoYXQgcHJvdmlkZXMgUHJvdmlkZXJzIGZvciBzZXJ2aWNlIG5hbWUgVCwgZS5nLiBgYXV0aGAsIGBhdXRoLWludGVybmFsYFxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50Q29udGFpbmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIHRoaXMucHJvdmlkZXJzID0gbmV3IE1hcCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNvbXBvbmVudCBDb21wb25lbnQgYmVpbmcgYWRkZWRcclxuICAgICAqIEBwYXJhbSBvdmVyd3JpdGUgV2hlbiBhIGNvbXBvbmVudCB3aXRoIHRoZSBzYW1lIG5hbWUgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLFxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIHRydWU6IG92ZXJ3cml0ZSB0aGUgZXhpc3RpbmcgY29tcG9uZW50IHdpdGggdGhlIG5ldyBjb21wb25lbnQgYW5kIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogcHJvdmlkZXIgd2l0aCB0aGUgbmV3IGNvbXBvbmVudC4gSXQgY2FuIGJlIHVzZWZ1bCBpbiB0ZXN0cyB3aGVyZSB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IG1vY2tzXHJcbiAgICAgKiBmb3IgZGlmZmVyZW50IHRlc3RzLlxyXG4gICAgICogaWYgb3ZlcndyaXRlIGlzIGZhbHNlOiB0aHJvdyBhbiBleGNlcHRpb25cclxuICAgICAqL1xyXG4gICAgYWRkQ29tcG9uZW50KGNvbXBvbmVudCkge1xyXG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdGhpcy5nZXRQcm92aWRlcihjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgaWYgKHByb3ZpZGVyLmlzQ29tcG9uZW50U2V0KCkpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb21wb25lbnQgJHtjb21wb25lbnQubmFtZX0gaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkIHdpdGggJHt0aGlzLm5hbWV9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByb3ZpZGVyLnNldENvbXBvbmVudChjb21wb25lbnQpO1xyXG4gICAgfVxyXG4gICAgYWRkT3JPdmVyd3JpdGVDb21wb25lbnQoY29tcG9uZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSB0aGlzLmdldFByb3ZpZGVyKGNvbXBvbmVudC5uYW1lKTtcclxuICAgICAgICBpZiAocHJvdmlkZXIuaXNDb21wb25lbnRTZXQoKSkge1xyXG4gICAgICAgICAgICAvLyBkZWxldGUgdGhlIGV4aXN0aW5nIHByb3ZpZGVyIGZyb20gdGhlIGNvbnRhaW5lciwgc28gd2UgY2FuIHJlZ2lzdGVyIHRoZSBuZXcgY29tcG9uZW50XHJcbiAgICAgICAgICAgIHRoaXMucHJvdmlkZXJzLmRlbGV0ZShjb21wb25lbnQubmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYWRkQ29tcG9uZW50KGNvbXBvbmVudCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIGdldFByb3ZpZGVyIHByb3ZpZGVzIGEgdHlwZSBzYWZlIGludGVyZmFjZSB3aGVyZSBpdCBjYW4gb25seSBiZSBjYWxsZWQgd2l0aCBhIGZpZWxkIG5hbWVcclxuICAgICAqIHByZXNlbnQgaW4gTmFtZVNlcnZpY2VNYXBwaW5nIGludGVyZmFjZS5cclxuICAgICAqXHJcbiAgICAgKiBGaXJlYmFzZSBTREtzIHByb3ZpZGluZyBzZXJ2aWNlcyBzaG91bGQgZXh0ZW5kIE5hbWVTZXJ2aWNlTWFwcGluZyBpbnRlcmZhY2UgdG8gcmVnaXN0ZXJcclxuICAgICAqIHRoZW1zZWx2ZXMuXHJcbiAgICAgKi9cclxuICAgIGdldFByb3ZpZGVyKG5hbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5wcm92aWRlcnMuaGFzKG5hbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3ZpZGVycy5nZXQobmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGNyZWF0ZSBhIFByb3ZpZGVyIGZvciBhIHNlcnZpY2UgdGhhdCBoYXNuJ3QgcmVnaXN0ZXJlZCB3aXRoIEZpcmViYXNlXHJcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgUHJvdmlkZXIobmFtZSwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5wcm92aWRlcnMuc2V0KG5hbWUsIHByb3ZpZGVyKTtcclxuICAgICAgICByZXR1cm4gcHJvdmlkZXI7XHJcbiAgICB9XHJcbiAgICBnZXRQcm92aWRlcnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpO1xyXG4gICAgfVxyXG59XG5cbmV4cG9ydCB7IENvbXBvbmVudCwgQ29tcG9uZW50Q29udGFpbmVyLCBQcm92aWRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguZXNtMjAxNy5qcy5tYXBcbiIsImltcG9ydCB7IF9nZXRQcm92aWRlciwgZ2V0QXBwLCBfcmVnaXN0ZXJDb21wb25lbnQsIHJlZ2lzdGVyVmVyc2lvbiB9IGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGZpcmViYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBFcnJvckZhY3RvcnksIEZpcmViYXNlRXJyb3IgfSBmcm9tICdAZmlyZWJhc2UvdXRpbCc7XG5pbXBvcnQgeyBvcGVuREIgfSBmcm9tICdpZGInO1xuXG5jb25zdCBuYW1lID0gXCJAZmlyZWJhc2UvaW5zdGFsbGF0aW9uc1wiO1xuY29uc3QgdmVyc2lvbiA9IFwiMC42LjRcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgUEVORElOR19USU1FT1VUX01TID0gMTAwMDA7XHJcbmNvbnN0IFBBQ0tBR0VfVkVSU0lPTiA9IGB3OiR7dmVyc2lvbn1gO1xyXG5jb25zdCBJTlRFUk5BTF9BVVRIX1ZFUlNJT04gPSAnRklTX3YyJztcclxuY29uc3QgSU5TVEFMTEFUSU9OU19BUElfVVJMID0gJ2h0dHBzOi8vZmlyZWJhc2VpbnN0YWxsYXRpb25zLmdvb2dsZWFwaXMuY29tL3YxJztcclxuY29uc3QgVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIgPSA2MCAqIDYwICogMTAwMDsgLy8gT25lIGhvdXJcclxuY29uc3QgU0VSVklDRSA9ICdpbnN0YWxsYXRpb25zJztcclxuY29uc3QgU0VSVklDRV9OQU1FID0gJ0luc3RhbGxhdGlvbnMnO1xuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBFUlJPUl9ERVNDUklQVElPTl9NQVAgPSB7XHJcbiAgICBbXCJtaXNzaW5nLWFwcC1jb25maWctdmFsdWVzXCIgLyogRXJyb3JDb2RlLk1JU1NJTkdfQVBQX0NPTkZJR19WQUxVRVMgKi9dOiAnTWlzc2luZyBBcHAgY29uZmlndXJhdGlvbiB2YWx1ZTogXCJ7JHZhbHVlTmFtZX1cIicsXHJcbiAgICBbXCJub3QtcmVnaXN0ZXJlZFwiIC8qIEVycm9yQ29kZS5OT1RfUkVHSVNURVJFRCAqL106ICdGaXJlYmFzZSBJbnN0YWxsYXRpb24gaXMgbm90IHJlZ2lzdGVyZWQuJyxcclxuICAgIFtcImluc3RhbGxhdGlvbi1ub3QtZm91bmRcIiAvKiBFcnJvckNvZGUuSU5TVEFMTEFUSU9OX05PVF9GT1VORCAqL106ICdGaXJlYmFzZSBJbnN0YWxsYXRpb24gbm90IGZvdW5kLicsXHJcbiAgICBbXCJyZXF1ZXN0LWZhaWxlZFwiIC8qIEVycm9yQ29kZS5SRVFVRVNUX0ZBSUxFRCAqL106ICd7JHJlcXVlc3ROYW1lfSByZXF1ZXN0IGZhaWxlZCB3aXRoIGVycm9yIFwieyRzZXJ2ZXJDb2RlfSB7JHNlcnZlclN0YXR1c306IHskc2VydmVyTWVzc2FnZX1cIicsXHJcbiAgICBbXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqL106ICdDb3VsZCBub3QgcHJvY2VzcyByZXF1ZXN0LiBBcHBsaWNhdGlvbiBvZmZsaW5lLicsXHJcbiAgICBbXCJkZWxldGUtcGVuZGluZy1yZWdpc3RyYXRpb25cIiAvKiBFcnJvckNvZGUuREVMRVRFX1BFTkRJTkdfUkVHSVNUUkFUSU9OICovXTogXCJDYW4ndCBkZWxldGUgaW5zdGFsbGF0aW9uIHdoaWxlIHRoZXJlIGlzIGEgcGVuZGluZyByZWdpc3RyYXRpb24gcmVxdWVzdC5cIlxyXG59O1xyXG5jb25zdCBFUlJPUl9GQUNUT1JZID0gbmV3IEVycm9yRmFjdG9yeShTRVJWSUNFLCBTRVJWSUNFX05BTUUsIEVSUk9SX0RFU0NSSVBUSU9OX01BUCk7XHJcbi8qKiBSZXR1cm5zIHRydWUgaWYgZXJyb3IgaXMgYSBGaXJlYmFzZUVycm9yIHRoYXQgaXMgYmFzZWQgb24gYW4gZXJyb3IgZnJvbSB0aGUgc2VydmVyLiAqL1xyXG5mdW5jdGlvbiBpc1NlcnZlckVycm9yKGVycm9yKSB7XHJcbiAgICByZXR1cm4gKGVycm9yIGluc3RhbmNlb2YgRmlyZWJhc2VFcnJvciAmJlxyXG4gICAgICAgIGVycm9yLmNvZGUuaW5jbHVkZXMoXCJyZXF1ZXN0LWZhaWxlZFwiIC8qIEVycm9yQ29kZS5SRVFVRVNUX0ZBSUxFRCAqLykpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbnNFbmRwb2ludCh7IHByb2plY3RJZCB9KSB7XHJcbiAgICByZXR1cm4gYCR7SU5TVEFMTEFUSU9OU19BUElfVVJMfS9wcm9qZWN0cy8ke3Byb2plY3RJZH0vaW5zdGFsbGF0aW9uc2A7XHJcbn1cclxuZnVuY3Rpb24gZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2UpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdG9rZW46IHJlc3BvbnNlLnRva2VuLFxyXG4gICAgICAgIHJlcXVlc3RTdGF0dXM6IDIgLyogUmVxdWVzdFN0YXR1cy5DT01QTEVURUQgKi8sXHJcbiAgICAgICAgZXhwaXJlc0luOiBnZXRFeHBpcmVzSW5Gcm9tUmVzcG9uc2VFeHBpcmVzSW4ocmVzcG9uc2UuZXhwaXJlc0luKSxcclxuICAgICAgICBjcmVhdGlvblRpbWU6IERhdGUubm93KClcclxuICAgIH07XHJcbn1cclxuYXN5bmMgZnVuY3Rpb24gZ2V0RXJyb3JGcm9tUmVzcG9uc2UocmVxdWVzdE5hbWUsIHJlc3BvbnNlKSB7XHJcbiAgICBjb25zdCByZXNwb25zZUpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zdCBlcnJvckRhdGEgPSByZXNwb25zZUpzb24uZXJyb3I7XHJcbiAgICByZXR1cm4gRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJyZXF1ZXN0LWZhaWxlZFwiIC8qIEVycm9yQ29kZS5SRVFVRVNUX0ZBSUxFRCAqLywge1xyXG4gICAgICAgIHJlcXVlc3ROYW1lLFxyXG4gICAgICAgIHNlcnZlckNvZGU6IGVycm9yRGF0YS5jb2RlLFxyXG4gICAgICAgIHNlcnZlck1lc3NhZ2U6IGVycm9yRGF0YS5tZXNzYWdlLFxyXG4gICAgICAgIHNlcnZlclN0YXR1czogZXJyb3JEYXRhLnN0YXR1c1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0SGVhZGVycyh7IGFwaUtleSB9KSB7XHJcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgQWNjZXB0OiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgJ3gtZ29vZy1hcGkta2V5JzogYXBpS2V5XHJcbiAgICB9KTtcclxufVxyXG5mdW5jdGlvbiBnZXRIZWFkZXJzV2l0aEF1dGgoYXBwQ29uZmlnLCB7IHJlZnJlc2hUb2tlbiB9KSB7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgaGVhZGVycy5hcHBlbmQoJ0F1dGhvcml6YXRpb24nLCBnZXRBdXRob3JpemF0aW9uSGVhZGVyKHJlZnJlc2hUb2tlbikpO1xyXG4gICAgcmV0dXJuIGhlYWRlcnM7XHJcbn1cclxuLyoqXHJcbiAqIENhbGxzIHRoZSBwYXNzZWQgaW4gZmV0Y2ggd3JhcHBlciBhbmQgcmV0dXJucyB0aGUgcmVzcG9uc2UuXHJcbiAqIElmIHRoZSByZXR1cm5lZCByZXNwb25zZSBoYXMgYSBzdGF0dXMgb2YgNXh4LCByZS1ydW5zIHRoZSBmdW5jdGlvbiBvbmNlIGFuZFxyXG4gKiByZXR1cm5zIHRoZSByZXNwb25zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHJldHJ5SWZTZXJ2ZXJFcnJvcihmbikge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZm4oKTtcclxuICAgIGlmIChyZXN1bHQuc3RhdHVzID49IDUwMCAmJiByZXN1bHQuc3RhdHVzIDwgNjAwKSB7XHJcbiAgICAgICAgLy8gSW50ZXJuYWwgU2VydmVyIEVycm9yLiBSZXRyeSByZXF1ZXN0LlxyXG4gICAgICAgIHJldHVybiBmbigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5mdW5jdGlvbiBnZXRFeHBpcmVzSW5Gcm9tUmVzcG9uc2VFeHBpcmVzSW4ocmVzcG9uc2VFeHBpcmVzSW4pIHtcclxuICAgIC8vIFRoaXMgd29ya3MgYmVjYXVzZSB0aGUgc2VydmVyIHdpbGwgbmV2ZXIgcmVzcG9uZCB3aXRoIGZyYWN0aW9ucyBvZiBhIHNlY29uZC5cclxuICAgIHJldHVybiBOdW1iZXIocmVzcG9uc2VFeHBpcmVzSW4ucmVwbGFjZSgncycsICcwMDAnKSk7XHJcbn1cclxuZnVuY3Rpb24gZ2V0QXV0aG9yaXphdGlvbkhlYWRlcihyZWZyZXNoVG9rZW4pIHtcclxuICAgIHJldHVybiBgJHtJTlRFUk5BTF9BVVRIX1ZFUlNJT059ICR7cmVmcmVzaFRva2VufWA7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gY3JlYXRlSW5zdGFsbGF0aW9uUmVxdWVzdCh7IGFwcENvbmZpZywgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyIH0sIHsgZmlkIH0pIHtcclxuICAgIGNvbnN0IGVuZHBvaW50ID0gZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KGFwcENvbmZpZyk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVycyhhcHBDb25maWcpO1xyXG4gICAgLy8gSWYgaGVhcnRiZWF0IHNlcnZpY2UgZXhpc3RzLCBhZGQgdGhlIGhlYXJ0YmVhdCBzdHJpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdFNlcnZpY2UgPSBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKHtcclxuICAgICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0U2VydmljZSkge1xyXG4gICAgICAgIGNvbnN0IGhlYXJ0YmVhdHNIZWFkZXIgPSBhd2FpdCBoZWFydGJlYXRTZXJ2aWNlLmdldEhlYXJ0YmVhdHNIZWFkZXIoKTtcclxuICAgICAgICBpZiAoaGVhcnRiZWF0c0hlYWRlcikge1xyXG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgneC1maXJlYmFzZS1jbGllbnQnLCBoZWFydGJlYXRzSGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICAgIGZpZCxcclxuICAgICAgICBhdXRoVmVyc2lvbjogSU5URVJOQUxfQVVUSF9WRVJTSU9OLFxyXG4gICAgICAgIGFwcElkOiBhcHBDb25maWcuYXBwSWQsXHJcbiAgICAgICAgc2RrVmVyc2lvbjogUEFDS0FHRV9WRVJTSU9OXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXRyeUlmU2VydmVyRXJyb3IoKCkgPT4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpKTtcclxuICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVmFsdWUgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5ID0ge1xyXG4gICAgICAgICAgICBmaWQ6IHJlc3BvbnNlVmFsdWUuZmlkIHx8IGZpZCxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uU3RhdHVzOiAyIC8qIFJlcXVlc3RTdGF0dXMuQ09NUExFVEVEICovLFxyXG4gICAgICAgICAgICByZWZyZXNoVG9rZW46IHJlc3BvbnNlVmFsdWUucmVmcmVzaFRva2VuLFxyXG4gICAgICAgICAgICBhdXRoVG9rZW46IGV4dHJhY3RBdXRoVG9rZW5JbmZvRnJvbVJlc3BvbnNlKHJlc3BvbnNlVmFsdWUuYXV0aFRva2VuKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IGF3YWl0IGdldEVycm9yRnJvbVJlc3BvbnNlKCdDcmVhdGUgSW5zdGFsbGF0aW9uJywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGFmdGVyIGdpdmVuIHRpbWUgcGFzc2VzLiAqL1xyXG5mdW5jdGlvbiBzbGVlcChtcykge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4ge1xyXG4gICAgICAgIHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpO1xyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuZnVuY3Rpb24gYnVmZmVyVG9CYXNlNjRVcmxTYWZlKGFycmF5KSB7XHJcbiAgICBjb25zdCBiNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUoLi4uYXJyYXkpKTtcclxuICAgIHJldHVybiBiNjQucmVwbGFjZSgvXFwrL2csICctJykucmVwbGFjZSgvXFwvL2csICdfJyk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgVkFMSURfRklEX1BBVFRFUk4gPSAvXltjZGVmXVtcXHctXXsyMX0kLztcclxuY29uc3QgSU5WQUxJRF9GSUQgPSAnJztcclxuLyoqXHJcbiAqIEdlbmVyYXRlcyBhIG5ldyBGSUQgdXNpbmcgcmFuZG9tIHZhbHVlcyBmcm9tIFdlYiBDcnlwdG8gQVBJLlxyXG4gKiBSZXR1cm5zIGFuIGVtcHR5IHN0cmluZyBpZiBGSUQgZ2VuZXJhdGlvbiBmYWlscyBmb3IgYW55IHJlYXNvbi5cclxuICovXHJcbmZ1bmN0aW9uIGdlbmVyYXRlRmlkKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLyBBIHZhbGlkIEZJRCBoYXMgZXhhY3RseSAyMiBiYXNlNjQgY2hhcmFjdGVycywgd2hpY2ggaXMgMTMyIGJpdHMsIG9yIDE2LjVcclxuICAgICAgICAvLyBieXRlcy4gb3VyIGltcGxlbWVudGF0aW9uIGdlbmVyYXRlcyBhIDE3IGJ5dGUgYXJyYXkgaW5zdGVhZC5cclxuICAgICAgICBjb25zdCBmaWRCeXRlQXJyYXkgPSBuZXcgVWludDhBcnJheSgxNyk7XHJcbiAgICAgICAgY29uc3QgY3J5cHRvID0gc2VsZi5jcnlwdG8gfHwgc2VsZi5tc0NyeXB0bztcclxuICAgICAgICBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKGZpZEJ5dGVBcnJheSk7XHJcbiAgICAgICAgLy8gUmVwbGFjZSB0aGUgZmlyc3QgNCByYW5kb20gYml0cyB3aXRoIHRoZSBjb25zdGFudCBGSUQgaGVhZGVyIG9mIDBiMDExMS5cclxuICAgICAgICBmaWRCeXRlQXJyYXlbMF0gPSAwYjAxMTEwMDAwICsgKGZpZEJ5dGVBcnJheVswXSAlIDBiMDAwMTAwMDApO1xyXG4gICAgICAgIGNvbnN0IGZpZCA9IGVuY29kZShmaWRCeXRlQXJyYXkpO1xyXG4gICAgICAgIHJldHVybiBWQUxJRF9GSURfUEFUVEVSTi50ZXN0KGZpZCkgPyBmaWQgOiBJTlZBTElEX0ZJRDtcclxuICAgIH1cclxuICAgIGNhdGNoIChfYSkge1xyXG4gICAgICAgIC8vIEZJRCBnZW5lcmF0aW9uIGVycm9yZWRcclxuICAgICAgICByZXR1cm4gSU5WQUxJRF9GSUQ7XHJcbiAgICB9XHJcbn1cclxuLyoqIENvbnZlcnRzIGEgRklEIFVpbnQ4QXJyYXkgdG8gYSBiYXNlNjQgc3RyaW5nIHJlcHJlc2VudGF0aW9uLiAqL1xyXG5mdW5jdGlvbiBlbmNvZGUoZmlkQnl0ZUFycmF5KSB7XHJcbiAgICBjb25zdCBiNjRTdHJpbmcgPSBidWZmZXJUb0Jhc2U2NFVybFNhZmUoZmlkQnl0ZUFycmF5KTtcclxuICAgIC8vIFJlbW92ZSB0aGUgMjNyZCBjaGFyYWN0ZXIgdGhhdCB3YXMgYWRkZWQgYmVjYXVzZSBvZiB0aGUgZXh0cmEgNCBiaXRzIGF0IHRoZVxyXG4gICAgLy8gZW5kIG9mIG91ciAxNyBieXRlIGFycmF5LCBhbmQgdGhlICc9JyBwYWRkaW5nLlxyXG4gICAgcmV0dXJuIGI2NFN0cmluZy5zdWJzdHIoMCwgMjIpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKiBSZXR1cm5zIGEgc3RyaW5nIGtleSB0aGF0IGNhbiBiZSB1c2VkIHRvIGlkZW50aWZ5IHRoZSBhcHAuICovXHJcbmZ1bmN0aW9uIGdldEtleShhcHBDb25maWcpIHtcclxuICAgIHJldHVybiBgJHthcHBDb25maWcuYXBwTmFtZX0hJHthcHBDb25maWcuYXBwSWR9YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5jb25zdCBmaWRDaGFuZ2VDYWxsYmFja3MgPSBuZXcgTWFwKCk7XHJcbi8qKlxyXG4gKiBDYWxscyB0aGUgb25JZENoYW5nZSBjYWxsYmFja3Mgd2l0aCB0aGUgbmV3IEZJRCB2YWx1ZSwgYW5kIGJyb2FkY2FzdHMgdGhlXHJcbiAqIGNoYW5nZSB0byBvdGhlciB0YWJzLlxyXG4gKi9cclxuZnVuY3Rpb24gZmlkQ2hhbmdlZChhcHBDb25maWcsIGZpZCkge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjYWxsRmlkQ2hhbmdlQ2FsbGJhY2tzKGtleSwgZmlkKTtcclxuICAgIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCk7XHJcbn1cclxuZnVuY3Rpb24gYWRkQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjaykge1xyXG4gICAgLy8gT3BlbiB0aGUgYnJvYWRjYXN0IGNoYW5uZWwgaWYgaXQncyBub3QgYWxyZWFkeSBvcGVuLFxyXG4gICAgLy8gdG8gYmUgYWJsZSB0byBsaXN0ZW4gdG8gY2hhbmdlIGV2ZW50cyBmcm9tIG90aGVyIHRhYnMuXHJcbiAgICBnZXRCcm9hZGNhc3RDaGFubmVsKCk7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGxldCBjYWxsYmFja1NldCA9IGZpZENoYW5nZUNhbGxiYWNrcy5nZXQoa2V5KTtcclxuICAgIGlmICghY2FsbGJhY2tTZXQpIHtcclxuICAgICAgICBjYWxsYmFja1NldCA9IG5ldyBTZXQoKTtcclxuICAgICAgICBmaWRDaGFuZ2VDYWxsYmFja3Muc2V0KGtleSwgY2FsbGJhY2tTZXQpO1xyXG4gICAgfVxyXG4gICAgY2FsbGJhY2tTZXQuYWRkKGNhbGxiYWNrKTtcclxufVxyXG5mdW5jdGlvbiByZW1vdmVDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGNhbGxiYWNrU2V0ID0gZmlkQ2hhbmdlQ2FsbGJhY2tzLmdldChrZXkpO1xyXG4gICAgaWYgKCFjYWxsYmFja1NldCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNhbGxiYWNrU2V0LmRlbGV0ZShjYWxsYmFjayk7XHJcbiAgICBpZiAoY2FsbGJhY2tTZXQuc2l6ZSA9PT0gMCkge1xyXG4gICAgICAgIGZpZENoYW5nZUNhbGxiYWNrcy5kZWxldGUoa2V5KTtcclxuICAgIH1cclxuICAgIC8vIENsb3NlIGJyb2FkY2FzdCBjaGFubmVsIGlmIHRoZXJlIGFyZSBubyBtb3JlIGNhbGxiYWNrcy5cclxuICAgIGNsb3NlQnJvYWRjYXN0Q2hhbm5lbCgpO1xyXG59XHJcbmZ1bmN0aW9uIGNhbGxGaWRDaGFuZ2VDYWxsYmFja3Moa2V5LCBmaWQpIHtcclxuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGZpZENoYW5nZUNhbGxiYWNrcy5nZXQoa2V5KTtcclxuICAgIGlmICghY2FsbGJhY2tzKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgZm9yIChjb25zdCBjYWxsYmFjayBvZiBjYWxsYmFja3MpIHtcclxuICAgICAgICBjYWxsYmFjayhmaWQpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGJyb2FkY2FzdEZpZENoYW5nZShrZXksIGZpZCkge1xyXG4gICAgY29uc3QgY2hhbm5lbCA9IGdldEJyb2FkY2FzdENoYW5uZWwoKTtcclxuICAgIGlmIChjaGFubmVsKSB7XHJcbiAgICAgICAgY2hhbm5lbC5wb3N0TWVzc2FnZSh7IGtleSwgZmlkIH0pO1xyXG4gICAgfVxyXG4gICAgY2xvc2VCcm9hZGNhc3RDaGFubmVsKCk7XHJcbn1cclxubGV0IGJyb2FkY2FzdENoYW5uZWwgPSBudWxsO1xyXG4vKiogT3BlbnMgYW5kIHJldHVybnMgYSBCcm9hZGNhc3RDaGFubmVsIGlmIGl0IGlzIHN1cHBvcnRlZCBieSB0aGUgYnJvd3Nlci4gKi9cclxuZnVuY3Rpb24gZ2V0QnJvYWRjYXN0Q2hhbm5lbCgpIHtcclxuICAgIGlmICghYnJvYWRjYXN0Q2hhbm5lbCAmJiAnQnJvYWRjYXN0Q2hhbm5lbCcgaW4gc2VsZikge1xyXG4gICAgICAgIGJyb2FkY2FzdENoYW5uZWwgPSBuZXcgQnJvYWRjYXN0Q2hhbm5lbCgnW0ZpcmViYXNlXSBGSUQgQ2hhbmdlJyk7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbC5vbm1lc3NhZ2UgPSBlID0+IHtcclxuICAgICAgICAgICAgY2FsbEZpZENoYW5nZUNhbGxiYWNrcyhlLmRhdGEua2V5LCBlLmRhdGEuZmlkKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGJyb2FkY2FzdENoYW5uZWw7XHJcbn1cclxuZnVuY3Rpb24gY2xvc2VCcm9hZGNhc3RDaGFubmVsKCkge1xyXG4gICAgaWYgKGZpZENoYW5nZUNhbGxiYWNrcy5zaXplID09PSAwICYmIGJyb2FkY2FzdENoYW5uZWwpIHtcclxuICAgICAgICBicm9hZGNhc3RDaGFubmVsLmNsb3NlKCk7XHJcbiAgICAgICAgYnJvYWRjYXN0Q2hhbm5lbCA9IG51bGw7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgREFUQUJBU0VfTkFNRSA9ICdmaXJlYmFzZS1pbnN0YWxsYXRpb25zLWRhdGFiYXNlJztcclxuY29uc3QgREFUQUJBU0VfVkVSU0lPTiA9IDE7XHJcbmNvbnN0IE9CSkVDVF9TVE9SRV9OQU1FID0gJ2ZpcmViYXNlLWluc3RhbGxhdGlvbnMtc3RvcmUnO1xyXG5sZXQgZGJQcm9taXNlID0gbnVsbDtcclxuZnVuY3Rpb24gZ2V0RGJQcm9taXNlKCkge1xyXG4gICAgaWYgKCFkYlByb21pc2UpIHtcclxuICAgICAgICBkYlByb21pc2UgPSBvcGVuREIoREFUQUJBU0VfTkFNRSwgREFUQUJBU0VfVkVSU0lPTiwge1xyXG4gICAgICAgICAgICB1cGdyYWRlOiAoZGIsIG9sZFZlcnNpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIFdlIGRvbid0IHVzZSAnYnJlYWsnIGluIHRoaXMgc3dpdGNoIHN0YXRlbWVudCwgdGhlIGZhbGwtdGhyb3VnaFxyXG4gICAgICAgICAgICAgICAgLy8gYmVoYXZpb3IgaXMgd2hhdCB3ZSB3YW50LCBiZWNhdXNlIGlmIHRoZXJlIGFyZSBtdWx0aXBsZSB2ZXJzaW9ucyBiZXR3ZWVuXHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgb2xkIHZlcnNpb24gYW5kIHRoZSBjdXJyZW50IHZlcnNpb24sIHdlIHdhbnQgQUxMIHRoZSBtaWdyYXRpb25zXHJcbiAgICAgICAgICAgICAgICAvLyB0aGF0IGNvcnJlc3BvbmQgdG8gdGhvc2UgdmVyc2lvbnMgdG8gcnVuLCBub3Qgb25seSB0aGUgbGFzdCBvbmUuXHJcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZGVmYXVsdC1jYXNlXHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9sZFZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRiUHJvbWlzZTtcclxufVxyXG4vKiogQXNzaWducyBvciBvdmVyd3JpdGVzIHRoZSByZWNvcmQgZm9yIHRoZSBnaXZlbiBrZXkgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHNldChhcHBDb25maWcsIHZhbHVlKSB7XHJcbiAgICBjb25zdCBrZXkgPSBnZXRLZXkoYXBwQ29uZmlnKTtcclxuICAgIGNvbnN0IGRiID0gYXdhaXQgZ2V0RGJQcm9taXNlKCk7XHJcbiAgICBjb25zdCB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9OQU1FLCAncmVhZHdyaXRlJyk7XHJcbiAgICBjb25zdCBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9OQU1FKTtcclxuICAgIGNvbnN0IG9sZFZhbHVlID0gKGF3YWl0IG9iamVjdFN0b3JlLmdldChrZXkpKTtcclxuICAgIGF3YWl0IG9iamVjdFN0b3JlLnB1dCh2YWx1ZSwga2V5KTtcclxuICAgIGF3YWl0IHR4LmRvbmU7XHJcbiAgICBpZiAoIW9sZFZhbHVlIHx8IG9sZFZhbHVlLmZpZCAhPT0gdmFsdWUuZmlkKSB7XHJcbiAgICAgICAgZmlkQ2hhbmdlZChhcHBDb25maWcsIHZhbHVlLmZpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuLyoqIFJlbW92ZXMgcmVjb3JkKHMpIGZyb20gdGhlIG9iamVjdFN0b3JlIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIGtleS4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVtb3ZlKGFwcENvbmZpZykge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgYXdhaXQgdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX05BTUUpLmRlbGV0ZShrZXkpO1xyXG4gICAgYXdhaXQgdHguZG9uZTtcclxufVxyXG4vKipcclxuICogQXRvbWljYWxseSB1cGRhdGVzIGEgcmVjb3JkIHdpdGggdGhlIHJlc3VsdCBvZiB1cGRhdGVGbiwgd2hpY2ggZ2V0c1xyXG4gKiBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCB2YWx1ZS4gSWYgbmV3VmFsdWUgaXMgdW5kZWZpbmVkLCB0aGUgcmVjb3JkIGlzXHJcbiAqIGRlbGV0ZWQgaW5zdGVhZC5cclxuICogQHJldHVybiBVcGRhdGVkIHZhbHVlXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB1cGRhdGUoYXBwQ29uZmlnLCB1cGRhdGVGbikge1xyXG4gICAgY29uc3Qga2V5ID0gZ2V0S2V5KGFwcENvbmZpZyk7XHJcbiAgICBjb25zdCBkYiA9IGF3YWl0IGdldERiUHJvbWlzZSgpO1xyXG4gICAgY29uc3QgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfTkFNRSwgJ3JlYWR3cml0ZScpO1xyXG4gICAgY29uc3Qgc3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfTkFNRSk7XHJcbiAgICBjb25zdCBvbGRWYWx1ZSA9IChhd2FpdCBzdG9yZS5nZXQoa2V5KSk7XHJcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHVwZGF0ZUZuKG9sZFZhbHVlKTtcclxuICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgYXdhaXQgc3RvcmUuZGVsZXRlKGtleSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhd2FpdCBzdG9yZS5wdXQobmV3VmFsdWUsIGtleSk7XHJcbiAgICB9XHJcbiAgICBhd2FpdCB0eC5kb25lO1xyXG4gICAgaWYgKG5ld1ZhbHVlICYmICghb2xkVmFsdWUgfHwgb2xkVmFsdWUuZmlkICE9PSBuZXdWYWx1ZS5maWQpKSB7XHJcbiAgICAgICAgZmlkQ2hhbmdlZChhcHBDb25maWcsIG5ld1ZhbHVlLmZpZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV3VmFsdWU7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFVwZGF0ZXMgYW5kIHJldHVybnMgdGhlIEluc3RhbGxhdGlvbkVudHJ5IGZyb20gdGhlIGRhdGFiYXNlLlxyXG4gKiBBbHNvIHRyaWdnZXJzIGEgcmVnaXN0cmF0aW9uIHJlcXVlc3QgaWYgaXQgaXMgbmVjZXNzYXJ5IGFuZCBwb3NzaWJsZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbkVudHJ5KGluc3RhbGxhdGlvbnMpIHtcclxuICAgIGxldCByZWdpc3RyYXRpb25Qcm9taXNlO1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uRW50cnkgPSBhd2FpdCB1cGRhdGUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBjb25zdCBpbnN0YWxsYXRpb25FbnRyeSA9IHVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkob2xkRW50cnkpO1xyXG4gICAgICAgIGNvbnN0IGVudHJ5V2l0aFByb21pc2UgPSB0cmlnZ2VyUmVnaXN0cmF0aW9uSWZOZWNlc3NhcnkoaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2UgPSBlbnRyeVdpdGhQcm9taXNlLnJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICAgICAgcmV0dXJuIGVudHJ5V2l0aFByb21pc2UuaW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICB9KTtcclxuICAgIGlmIChpbnN0YWxsYXRpb25FbnRyeS5maWQgPT09IElOVkFMSURfRklEKSB7XHJcbiAgICAgICAgLy8gRklEIGdlbmVyYXRpb24gZmFpbGVkLiBXYWl0aW5nIGZvciB0aGUgRklEIGZyb20gdGhlIHNlcnZlci5cclxuICAgICAgICByZXR1cm4geyBpbnN0YWxsYXRpb25FbnRyeTogYXdhaXQgcmVnaXN0cmF0aW9uUHJvbWlzZSB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlXHJcbiAgICB9O1xyXG59XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IEluc3RhbGxhdGlvbiBFbnRyeSBpZiBvbmUgZG9lcyBub3QgZXhpc3QuXHJcbiAqIEFsc28gY2xlYXJzIHRpbWVkIG91dCBwZW5kaW5nIHJlcXVlc3RzLlxyXG4gKi9cclxuZnVuY3Rpb24gdXBkYXRlT3JDcmVhdGVJbnN0YWxsYXRpb25FbnRyeShvbGRFbnRyeSkge1xyXG4gICAgY29uc3QgZW50cnkgPSBvbGRFbnRyeSB8fCB7XHJcbiAgICAgICAgZmlkOiBnZW5lcmF0ZUZpZCgpLFxyXG4gICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIGNsZWFyVGltZWRPdXRSZXF1ZXN0KGVudHJ5KTtcclxufVxyXG4vKipcclxuICogSWYgdGhlIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyBub3QgcmVnaXN0ZXJlZCB5ZXQsIHRoaXMgd2lsbCB0cmlnZ2VyIHRoZVxyXG4gKiByZWdpc3RyYXRpb24gYW5kIHJldHVybiBhbiBJblByb2dyZXNzSW5zdGFsbGF0aW9uRW50cnkuXHJcbiAqXHJcbiAqIElmIHJlZ2lzdHJhdGlvblByb21pc2UgZG9lcyBub3QgZXhpc3QsIHRoZSBpbnN0YWxsYXRpb25FbnRyeSBpcyBndWFyYW50ZWVkXHJcbiAqIHRvIGJlIHJlZ2lzdGVyZWQuXHJcbiAqL1xyXG5mdW5jdGlvbiB0cmlnZ2VyUmVnaXN0cmF0aW9uSWZOZWNlc3NhcnkoaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIGlmIChpbnN0YWxsYXRpb25FbnRyeS5yZWdpc3RyYXRpb25TdGF0dXMgPT09IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLykge1xyXG4gICAgICAgIGlmICghbmF2aWdhdG9yLm9uTGluZSkge1xyXG4gICAgICAgICAgICAvLyBSZWdpc3RyYXRpb24gcmVxdWlyZWQgYnV0IGFwcCBpcyBvZmZsaW5lLlxyXG4gICAgICAgICAgICBjb25zdCByZWdpc3RyYXRpb25Qcm9taXNlV2l0aEVycm9yID0gUHJvbWlzZS5yZWplY3QoRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJhcHAtb2ZmbGluZVwiIC8qIEVycm9yQ29kZS5BUFBfT0ZGTElORSAqLykpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaW5zdGFsbGF0aW9uRW50cnksXHJcbiAgICAgICAgICAgICAgICByZWdpc3RyYXRpb25Qcm9taXNlOiByZWdpc3RyYXRpb25Qcm9taXNlV2l0aEVycm9yXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIFRyeSByZWdpc3RlcmluZy4gQ2hhbmdlIHN0YXR1cyB0byBJTl9QUk9HUkVTUy5cclxuICAgICAgICBjb25zdCBpblByb2dyZXNzRW50cnkgPSB7XHJcbiAgICAgICAgICAgIGZpZDogaW5zdGFsbGF0aW9uRW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLyxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uVGltZTogRGF0ZS5ub3coKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcmVnaXN0cmF0aW9uUHJvbWlzZSA9IHJlZ2lzdGVySW5zdGFsbGF0aW9uKGluc3RhbGxhdGlvbnMsIGluUHJvZ3Jlc3NFbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIHsgaW5zdGFsbGF0aW9uRW50cnk6IGluUHJvZ3Jlc3NFbnRyeSwgcmVnaXN0cmF0aW9uUHJvbWlzZSB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8pIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBpbnN0YWxsYXRpb25FbnRyeSxcclxuICAgICAgICAgICAgcmVnaXN0cmF0aW9uUHJvbWlzZTogd2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uKGluc3RhbGxhdGlvbnMpXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB7IGluc3RhbGxhdGlvbkVudHJ5IH07XHJcbiAgICB9XHJcbn1cclxuLyoqIFRoaXMgd2lsbCBiZSBleGVjdXRlZCBvbmx5IG9uY2UgZm9yIGVhY2ggbmV3IEZpcmViYXNlIEluc3RhbGxhdGlvbi4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVnaXN0ZXJJbnN0YWxsYXRpb24oaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgY29uc3QgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5ID0gYXdhaXQgY3JlYXRlSW5zdGFsbGF0aW9uUmVxdWVzdChpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIHNldChpbnN0YWxsYXRpb25zLmFwcENvbmZpZywgcmVnaXN0ZXJlZEluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGlzU2VydmVyRXJyb3IoZSkgJiYgZS5jdXN0b21EYXRhLnNlcnZlckNvZGUgPT09IDQwOSkge1xyXG4gICAgICAgICAgICAvLyBTZXJ2ZXIgcmV0dXJuZWQgYSBcIkZJRCBjYW4gbm90IGJlIHVzZWRcIiBlcnJvci5cclxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICBhd2FpdCByZW1vdmUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gUmVnaXN0cmF0aW9uIGZhaWxlZC4gU2V0IEZJRCBhcyBub3QgcmVnaXN0ZXJlZC5cclxuICAgICAgICAgICAgYXdhaXQgc2V0KGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnLCB7XHJcbiAgICAgICAgICAgICAgICBmaWQ6IGluc3RhbGxhdGlvbkVudHJ5LmZpZCxcclxuICAgICAgICAgICAgICAgIHJlZ2lzdHJhdGlvblN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgfVxyXG59XHJcbi8qKiBDYWxsIGlmIEZJRCByZWdpc3RyYXRpb24gaXMgcGVuZGluZyBpbiBhbm90aGVyIHJlcXVlc3QuICovXHJcbmFzeW5jIGZ1bmN0aW9uIHdhaXRVbnRpbEZpZFJlZ2lzdHJhdGlvbihpbnN0YWxsYXRpb25zKSB7XHJcbiAgICAvLyBVbmZvcnR1bmF0ZWx5LCB0aGVyZSBpcyBubyB3YXkgb2YgcmVsaWFibHkgb2JzZXJ2aW5nIHdoZW4gYSB2YWx1ZSBpblxyXG4gICAgLy8gSW5kZXhlZERCIGNoYW5nZXMgKHlldCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL2luZGV4ZWQtZGItb2JzZXJ2ZXJzKSxcclxuICAgIC8vIHNvIHdlIG5lZWQgdG8gcG9sbC5cclxuICAgIGxldCBlbnRyeSA9IGF3YWl0IHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgd2hpbGUgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgLy8gY3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3Qgc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgYXdhaXQgc2xlZXAoMTAwKTtcclxuICAgICAgICBlbnRyeSA9IGF3YWl0IHVwZGF0ZUluc3RhbGxhdGlvblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgfVxyXG4gICAgaWYgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovKSB7XHJcbiAgICAgICAgLy8gVGhlIHJlcXVlc3QgdGltZWQgb3V0IG9yIGZhaWxlZCBpbiBhIGRpZmZlcmVudCBjYWxsLiBUcnkgYWdhaW4uXHJcbiAgICAgICAgY29uc3QgeyBpbnN0YWxsYXRpb25FbnRyeSwgcmVnaXN0cmF0aW9uUHJvbWlzZSB9ID0gYXdhaXQgZ2V0SW5zdGFsbGF0aW9uRW50cnkoaW5zdGFsbGF0aW9ucyk7XHJcbiAgICAgICAgaWYgKHJlZ2lzdHJhdGlvblByb21pc2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBubyByZWdpc3RyYXRpb25Qcm9taXNlLCBlbnRyeSBpcyByZWdpc3RlcmVkLlxyXG4gICAgICAgICAgICByZXR1cm4gaW5zdGFsbGF0aW9uRW50cnk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVudHJ5O1xyXG59XHJcbi8qKlxyXG4gKiBDYWxsZWQgb25seSBpZiB0aGVyZSBpcyBhIENyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gKlxyXG4gKiBVcGRhdGVzIHRoZSBJbnN0YWxsYXRpb25FbnRyeSBpbiB0aGUgREIgYmFzZWQgb24gdGhlIHN0YXR1cyBvZiB0aGVcclxuICogQ3JlYXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QuXHJcbiAqXHJcbiAqIFJldHVybnMgdGhlIHVwZGF0ZWQgSW5zdGFsbGF0aW9uRW50cnkuXHJcbiAqL1xyXG5mdW5jdGlvbiB1cGRhdGVJbnN0YWxsYXRpb25SZXF1ZXN0KGFwcENvbmZpZykge1xyXG4gICAgcmV0dXJuIHVwZGF0ZShhcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBpZiAoIW9sZEVudHJ5KSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiaW5zdGFsbGF0aW9uLW5vdC1mb3VuZFwiIC8qIEVycm9yQ29kZS5JTlNUQUxMQVRJT05fTk9UX0ZPVU5EICovKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZWRPdXRSZXF1ZXN0KG9sZEVudHJ5KTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGNsZWFyVGltZWRPdXRSZXF1ZXN0KGVudHJ5KSB7XHJcbiAgICBpZiAoaGFzSW5zdGFsbGF0aW9uUmVxdWVzdFRpbWVkT3V0KGVudHJ5KSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGZpZDogZW50cnkuZmlkLFxyXG4gICAgICAgICAgICByZWdpc3RyYXRpb25TdGF0dXM6IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqL1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZW50cnk7XHJcbn1cclxuZnVuY3Rpb24gaGFzSW5zdGFsbGF0aW9uUmVxdWVzdFRpbWVkT3V0KGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICByZXR1cm4gKGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovICYmXHJcbiAgICAgICAgaW5zdGFsbGF0aW9uRW50cnkucmVnaXN0cmF0aW9uVGltZSArIFBFTkRJTkdfVElNRU9VVF9NUyA8IERhdGUubm93KCkpO1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdCh7IGFwcENvbmZpZywgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyIH0sIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICBjb25zdCBlbmRwb2ludCA9IGdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQoYXBwQ29uZmlnLCBpbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICBjb25zdCBoZWFkZXJzID0gZ2V0SGVhZGVyc1dpdGhBdXRoKGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgLy8gSWYgaGVhcnRiZWF0IHNlcnZpY2UgZXhpc3RzLCBhZGQgdGhlIGhlYXJ0YmVhdCBzdHJpbmcgdG8gdGhlIGhlYWRlci5cclxuICAgIGNvbnN0IGhlYXJ0YmVhdFNlcnZpY2UgPSBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIuZ2V0SW1tZWRpYXRlKHtcclxuICAgICAgICBvcHRpb25hbDogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBpZiAoaGVhcnRiZWF0U2VydmljZSkge1xyXG4gICAgICAgIGNvbnN0IGhlYXJ0YmVhdHNIZWFkZXIgPSBhd2FpdCBoZWFydGJlYXRTZXJ2aWNlLmdldEhlYXJ0YmVhdHNIZWFkZXIoKTtcclxuICAgICAgICBpZiAoaGVhcnRiZWF0c0hlYWRlcikge1xyXG4gICAgICAgICAgICBoZWFkZXJzLmFwcGVuZCgneC1maXJlYmFzZS1jbGllbnQnLCBoZWFydGJlYXRzSGVhZGVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBib2R5ID0ge1xyXG4gICAgICAgIGluc3RhbGxhdGlvbjoge1xyXG4gICAgICAgICAgICBzZGtWZXJzaW9uOiBQQUNLQUdFX1ZFUlNJT04sXHJcbiAgICAgICAgICAgIGFwcElkOiBhcHBDb25maWcuYXBwSWRcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVxdWVzdCA9IHtcclxuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcclxuICAgICAgICBoZWFkZXJzLFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGJvZHkpXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXRyeUlmU2VydmVyRXJyb3IoKCkgPT4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpKTtcclxuICAgIGlmIChyZXNwb25zZS5vaykge1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlVmFsdWUgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgY29uc3QgY29tcGxldGVkQXV0aFRva2VuID0gZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UocmVzcG9uc2VWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlZEF1dGhUb2tlbjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IGF3YWl0IGdldEVycm9yRnJvbVJlc3BvbnNlKCdHZW5lcmF0ZSBBdXRoIFRva2VuJywgcmVzcG9uc2UpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQoYXBwQ29uZmlnLCB7IGZpZCB9KSB7XHJcbiAgICByZXR1cm4gYCR7Z2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50KGFwcENvbmZpZyl9LyR7ZmlkfS9hdXRoVG9rZW5zOmdlbmVyYXRlYDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogUmV0dXJucyBhIHZhbGlkIGF1dGhlbnRpY2F0aW9uIHRva2VuIGZvciB0aGUgaW5zdGFsbGF0aW9uLiBHZW5lcmF0ZXMgYSBuZXdcclxuICogdG9rZW4gaWYgb25lIGRvZXNuJ3QgZXhpc3QsIGlzIGV4cGlyZWQgb3IgYWJvdXQgdG8gZXhwaXJlLlxyXG4gKlxyXG4gKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpcyByZWdpc3RlcmVkLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gcmVmcmVzaEF1dGhUb2tlbihpbnN0YWxsYXRpb25zLCBmb3JjZVJlZnJlc2ggPSBmYWxzZSkge1xyXG4gICAgbGV0IHRva2VuUHJvbWlzZTtcclxuICAgIGNvbnN0IGVudHJ5ID0gYXdhaXQgdXBkYXRlKGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnLCBvbGRFbnRyeSA9PiB7XHJcbiAgICAgICAgaWYgKCFpc0VudHJ5UmVnaXN0ZXJlZChvbGRFbnRyeSkpIHtcclxuICAgICAgICAgICAgdGhyb3cgRVJST1JfRkFDVE9SWS5jcmVhdGUoXCJub3QtcmVnaXN0ZXJlZFwiIC8qIEVycm9yQ29kZS5OT1RfUkVHSVNURVJFRCAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG9sZEF1dGhUb2tlbiA9IG9sZEVudHJ5LmF1dGhUb2tlbjtcclxuICAgICAgICBpZiAoIWZvcmNlUmVmcmVzaCAmJiBpc0F1dGhUb2tlblZhbGlkKG9sZEF1dGhUb2tlbikpIHtcclxuICAgICAgICAgICAgLy8gVGhlcmUgaXMgYSB2YWxpZCB0b2tlbiBpbiB0aGUgREIuXHJcbiAgICAgICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAob2xkQXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDEgLyogUmVxdWVzdFN0YXR1cy5JTl9QUk9HUkVTUyAqLykge1xyXG4gICAgICAgICAgICAvLyBUaGVyZSBhbHJlYWR5IGlzIGEgdG9rZW4gcmVxdWVzdCBpbiBwcm9ncmVzcy5cclxuICAgICAgICAgICAgdG9rZW5Qcm9taXNlID0gd2FpdFVudGlsQXV0aFRva2VuUmVxdWVzdChpbnN0YWxsYXRpb25zLCBmb3JjZVJlZnJlc2gpO1xyXG4gICAgICAgICAgICByZXR1cm4gb2xkRW50cnk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBObyB0b2tlbiBvciB0b2tlbiBleHBpcmVkLlxyXG4gICAgICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLW9mZmxpbmVcIiAvKiBFcnJvckNvZGUuQVBQX09GRkxJTkUgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGluUHJvZ3Jlc3NFbnRyeSA9IG1ha2VBdXRoVG9rZW5SZXF1ZXN0SW5Qcm9ncmVzc0VudHJ5KG9sZEVudHJ5KTtcclxuICAgICAgICAgICAgdG9rZW5Qcm9taXNlID0gZmV0Y2hBdXRoVG9rZW5Gcm9tU2VydmVyKGluc3RhbGxhdGlvbnMsIGluUHJvZ3Jlc3NFbnRyeSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpblByb2dyZXNzRW50cnk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBhdXRoVG9rZW4gPSB0b2tlblByb21pc2VcclxuICAgICAgICA/IGF3YWl0IHRva2VuUHJvbWlzZVxyXG4gICAgICAgIDogZW50cnkuYXV0aFRva2VuO1xyXG4gICAgcmV0dXJuIGF1dGhUb2tlbjtcclxufVxyXG4vKipcclxuICogQ2FsbCBvbmx5IGlmIEZJRCBpcyByZWdpc3RlcmVkIGFuZCBBdXRoIFRva2VuIHJlcXVlc3QgaXMgaW4gcHJvZ3Jlc3MuXHJcbiAqXHJcbiAqIFdhaXRzIHVudGlsIHRoZSBjdXJyZW50IHBlbmRpbmcgcmVxdWVzdCBmaW5pc2hlcy4gSWYgdGhlIHJlcXVlc3QgdGltZXMgb3V0LFxyXG4gKiB0cmllcyBvbmNlIGluIHRoaXMgdGhyZWFkIGFzIHdlbGwuXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiB3YWl0VW50aWxBdXRoVG9rZW5SZXF1ZXN0KGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCkge1xyXG4gICAgLy8gVW5mb3J0dW5hdGVseSwgdGhlcmUgaXMgbm8gd2F5IG9mIHJlbGlhYmx5IG9ic2VydmluZyB3aGVuIGEgdmFsdWUgaW5cclxuICAgIC8vIEluZGV4ZWREQiBjaGFuZ2VzICh5ZXQsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9pbmRleGVkLWRiLW9ic2VydmVycyksXHJcbiAgICAvLyBzbyB3ZSBuZWVkIHRvIHBvbGwuXHJcbiAgICBsZXQgZW50cnkgPSBhd2FpdCB1cGRhdGVBdXRoVG9rZW5SZXF1ZXN0KGluc3RhbGxhdGlvbnMuYXBwQ29uZmlnKTtcclxuICAgIHdoaWxlIChlbnRyeS5hdXRoVG9rZW4ucmVxdWVzdFN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgLy8gZ2VuZXJhdGVBdXRoVG9rZW4gc3RpbGwgaW4gcHJvZ3Jlc3MuXHJcbiAgICAgICAgYXdhaXQgc2xlZXAoMTAwKTtcclxuICAgICAgICBlbnRyeSA9IGF3YWl0IHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYXV0aFRva2VuID0gZW50cnkuYXV0aFRva2VuO1xyXG4gICAgaWYgKGF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAvLyBUaGUgcmVxdWVzdCB0aW1lZCBvdXQgb3IgZmFpbGVkIGluIGEgZGlmZmVyZW50IGNhbGwuIFRyeSBhZ2Fpbi5cclxuICAgICAgICByZXR1cm4gcmVmcmVzaEF1dGhUb2tlbihpbnN0YWxsYXRpb25zLCBmb3JjZVJlZnJlc2gpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGF1dGhUb2tlbjtcclxuICAgIH1cclxufVxyXG4vKipcclxuICogQ2FsbGVkIG9ubHkgaWYgdGhlcmUgaXMgYSBHZW5lcmF0ZUF1dGhUb2tlbiByZXF1ZXN0IGluIHByb2dyZXNzLlxyXG4gKlxyXG4gKiBVcGRhdGVzIHRoZSBJbnN0YWxsYXRpb25FbnRyeSBpbiB0aGUgREIgYmFzZWQgb24gdGhlIHN0YXR1cyBvZiB0aGVcclxuICogR2VuZXJhdGVBdXRoVG9rZW4gcmVxdWVzdC5cclxuICpcclxuICogUmV0dXJucyB0aGUgdXBkYXRlZCBJbnN0YWxsYXRpb25FbnRyeS5cclxuICovXHJcbmZ1bmN0aW9uIHVwZGF0ZUF1dGhUb2tlblJlcXVlc3QoYXBwQ29uZmlnKSB7XHJcbiAgICByZXR1cm4gdXBkYXRlKGFwcENvbmZpZywgb2xkRW50cnkgPT4ge1xyXG4gICAgICAgIGlmICghaXNFbnRyeVJlZ2lzdGVyZWQob2xkRW50cnkpKSB7XHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwibm90LXJlZ2lzdGVyZWRcIiAvKiBFcnJvckNvZGUuTk9UX1JFR0lTVEVSRUQgKi8pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvbGRBdXRoVG9rZW4gPSBvbGRFbnRyeS5hdXRoVG9rZW47XHJcbiAgICAgICAgaWYgKGhhc0F1dGhUb2tlblJlcXVlc3RUaW1lZE91dChvbGRBdXRoVG9rZW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIG9sZEVudHJ5KSwgeyBhdXRoVG9rZW46IHsgcmVxdWVzdFN0YXR1czogMCAvKiBSZXF1ZXN0U3RhdHVzLk5PVF9TVEFSVEVEICovIH0gfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgIH0pO1xyXG59XHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoQXV0aFRva2VuRnJvbVNlcnZlcihpbnN0YWxsYXRpb25zLCBpbnN0YWxsYXRpb25FbnRyeSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCBhdXRoVG9rZW4gPSBhd2FpdCBnZW5lcmF0ZUF1dGhUb2tlblJlcXVlc3QoaW5zdGFsbGF0aW9ucywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgaW5zdGFsbGF0aW9uRW50cnkpLCB7IGF1dGhUb2tlbiB9KTtcclxuICAgICAgICBhd2FpdCBzZXQoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgcmV0dXJuIGF1dGhUb2tlbjtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGlzU2VydmVyRXJyb3IoZSkgJiZcclxuICAgICAgICAgICAgKGUuY3VzdG9tRGF0YS5zZXJ2ZXJDb2RlID09PSA0MDEgfHwgZS5jdXN0b21EYXRhLnNlcnZlckNvZGUgPT09IDQwNCkpIHtcclxuICAgICAgICAgICAgLy8gU2VydmVyIHJldHVybmVkIGEgXCJGSUQgbm90IGZvdW5kXCIgb3IgYSBcIkludmFsaWQgYXV0aGVudGljYXRpb25cIiBlcnJvci5cclxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgSUQgbmV4dCB0aW1lLlxyXG4gICAgICAgICAgICBhd2FpdCByZW1vdmUoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZEluc3RhbGxhdGlvbkVudHJ5ID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBpbnN0YWxsYXRpb25FbnRyeSksIHsgYXV0aFRva2VuOiB7IHJlcXVlc3RTdGF0dXM6IDAgLyogUmVxdWVzdFN0YXR1cy5OT1RfU1RBUlRFRCAqLyB9IH0pO1xyXG4gICAgICAgICAgICBhd2FpdCBzZXQoaW5zdGFsbGF0aW9ucy5hcHBDb25maWcsIHVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gaXNFbnRyeVJlZ2lzdGVyZWQoaW5zdGFsbGF0aW9uRW50cnkpIHtcclxuICAgIHJldHVybiAoaW5zdGFsbGF0aW9uRW50cnkgIT09IHVuZGVmaW5lZCAmJlxyXG4gICAgICAgIGluc3RhbGxhdGlvbkVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLyk7XHJcbn1cclxuZnVuY3Rpb24gaXNBdXRoVG9rZW5WYWxpZChhdXRoVG9rZW4pIHtcclxuICAgIHJldHVybiAoYXV0aFRva2VuLnJlcXVlc3RTdGF0dXMgPT09IDIgLyogUmVxdWVzdFN0YXR1cy5DT01QTEVURUQgKi8gJiZcclxuICAgICAgICAhaXNBdXRoVG9rZW5FeHBpcmVkKGF1dGhUb2tlbikpO1xyXG59XHJcbmZ1bmN0aW9uIGlzQXV0aFRva2VuRXhwaXJlZChhdXRoVG9rZW4pIHtcclxuICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgICByZXR1cm4gKG5vdyA8IGF1dGhUb2tlbi5jcmVhdGlvblRpbWUgfHxcclxuICAgICAgICBhdXRoVG9rZW4uY3JlYXRpb25UaW1lICsgYXV0aFRva2VuLmV4cGlyZXNJbiA8IG5vdyArIFRPS0VOX0VYUElSQVRJT05fQlVGRkVSKTtcclxufVxyXG4vKiogUmV0dXJucyBhbiB1cGRhdGVkIEluc3RhbGxhdGlvbkVudHJ5IHdpdGggYW4gSW5Qcm9ncmVzc0F1dGhUb2tlbi4gKi9cclxuZnVuY3Rpb24gbWFrZUF1dGhUb2tlblJlcXVlc3RJblByb2dyZXNzRW50cnkob2xkRW50cnkpIHtcclxuICAgIGNvbnN0IGluUHJvZ3Jlc3NBdXRoVG9rZW4gPSB7XHJcbiAgICAgICAgcmVxdWVzdFN0YXR1czogMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovLFxyXG4gICAgICAgIHJlcXVlc3RUaW1lOiBEYXRlLm5vdygpXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb2xkRW50cnkpLCB7IGF1dGhUb2tlbjogaW5Qcm9ncmVzc0F1dGhUb2tlbiB9KTtcclxufVxyXG5mdW5jdGlvbiBoYXNBdXRoVG9rZW5SZXF1ZXN0VGltZWRPdXQoYXV0aFRva2VuKSB7XHJcbiAgICByZXR1cm4gKGF1dGhUb2tlbi5yZXF1ZXN0U3RhdHVzID09PSAxIC8qIFJlcXVlc3RTdGF0dXMuSU5fUFJPR1JFU1MgKi8gJiZcclxuICAgICAgICBhdXRoVG9rZW4ucmVxdWVzdFRpbWUgKyBQRU5ESU5HX1RJTUVPVVRfTVMgPCBEYXRlLm5vdygpKTtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogQ3JlYXRlcyBhIEZpcmViYXNlIEluc3RhbGxhdGlvbiBpZiB0aGVyZSBpc24ndCBvbmUgZm9yIHRoZSBhcHAgYW5kXHJcbiAqIHJldHVybnMgdGhlIEluc3RhbGxhdGlvbiBJRC5cclxuICogQHBhcmFtIGluc3RhbGxhdGlvbnMgLSBUaGUgYEluc3RhbGxhdGlvbnNgIGluc3RhbmNlLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBnZXRJZChpbnN0YWxsYXRpb25zKSB7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zSW1wbCA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBjb25zdCB7IGluc3RhbGxhdGlvbkVudHJ5LCByZWdpc3RyYXRpb25Qcm9taXNlIH0gPSBhd2FpdCBnZXRJbnN0YWxsYXRpb25FbnRyeShpbnN0YWxsYXRpb25zSW1wbCk7XHJcbiAgICBpZiAocmVnaXN0cmF0aW9uUHJvbWlzZSkge1xyXG4gICAgICAgIHJlZ2lzdHJhdGlvblByb21pc2UuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICAvLyBJZiB0aGUgaW5zdGFsbGF0aW9uIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCwgdXBkYXRlIHRoZSBhdXRoZW50aWNhdGlvblxyXG4gICAgICAgIC8vIHRva2VuIGlmIG5lZWRlZC5cclxuICAgICAgICByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnNJbXBsKS5jYXRjaChjb25zb2xlLmVycm9yKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25FbnRyeS5maWQ7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIFJldHVybnMgYSBGaXJlYmFzZSBJbnN0YWxsYXRpb25zIGF1dGggdG9rZW4sIGlkZW50aWZ5aW5nIHRoZSBjdXJyZW50XHJcbiAqIEZpcmViYXNlIEluc3RhbGxhdGlvbi5cclxuICogQHBhcmFtIGluc3RhbGxhdGlvbnMgLSBUaGUgYEluc3RhbGxhdGlvbnNgIGluc3RhbmNlLlxyXG4gKiBAcGFyYW0gZm9yY2VSZWZyZXNoIC0gRm9yY2UgcmVmcmVzaCByZWdhcmRsZXNzIG9mIHRva2VuIGV4cGlyYXRpb24uXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaCA9IGZhbHNlKSB7XHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zSW1wbCA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBhd2FpdCBjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbihpbnN0YWxsYXRpb25zSW1wbCk7XHJcbiAgICAvLyBBdCB0aGlzIHBvaW50IHdlIGVpdGhlciBoYXZlIGEgUmVnaXN0ZXJlZCBJbnN0YWxsYXRpb24gaW4gdGhlIERCLCBvciB3ZSd2ZVxyXG4gICAgLy8gYWxyZWFkeSB0aHJvd24gYW4gZXJyb3IuXHJcbiAgICBjb25zdCBhdXRoVG9rZW4gPSBhd2FpdCByZWZyZXNoQXV0aFRva2VuKGluc3RhbGxhdGlvbnNJbXBsLCBmb3JjZVJlZnJlc2gpO1xyXG4gICAgcmV0dXJuIGF1dGhUb2tlbi50b2tlbjtcclxufVxyXG5hc3luYyBmdW5jdGlvbiBjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbihpbnN0YWxsYXRpb25zKSB7XHJcbiAgICBjb25zdCB7IHJlZ2lzdHJhdGlvblByb21pc2UgfSA9IGF3YWl0IGdldEluc3RhbGxhdGlvbkVudHJ5KGluc3RhbGxhdGlvbnMpO1xyXG4gICAgaWYgKHJlZ2lzdHJhdGlvblByb21pc2UpIHtcclxuICAgICAgICAvLyBBIGNyZWF0ZUluc3RhbGxhdGlvbiByZXF1ZXN0IGlzIGluIHByb2dyZXNzLiBXYWl0IHVudGlsIGl0IGZpbmlzaGVzLlxyXG4gICAgICAgIGF3YWl0IHJlZ2lzdHJhdGlvblByb21pc2U7XHJcbiAgICB9XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KSB7XHJcbiAgICBjb25zdCBlbmRwb2ludCA9IGdldERlbGV0ZUVuZHBvaW50KGFwcENvbmZpZywgaW5zdGFsbGF0aW9uRW50cnkpO1xyXG4gICAgY29uc3QgaGVhZGVycyA9IGdldEhlYWRlcnNXaXRoQXV0aChhcHBDb25maWcsIGluc3RhbGxhdGlvbkVudHJ5KTtcclxuICAgIGNvbnN0IHJlcXVlc3QgPSB7XHJcbiAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcclxuICAgICAgICBoZWFkZXJzXHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXRyeUlmU2VydmVyRXJyb3IoKCkgPT4gZmV0Y2goZW5kcG9pbnQsIHJlcXVlc3QpKTtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgICB0aHJvdyBhd2FpdCBnZXRFcnJvckZyb21SZXNwb25zZSgnRGVsZXRlIEluc3RhbGxhdGlvbicsIHJlc3BvbnNlKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXREZWxldGVFbmRwb2ludChhcHBDb25maWcsIHsgZmlkIH0pIHtcclxuICAgIHJldHVybiBgJHtnZXRJbnN0YWxsYXRpb25zRW5kcG9pbnQoYXBwQ29uZmlnKX0vJHtmaWR9YDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG4vKipcclxuICogRGVsZXRlcyB0aGUgRmlyZWJhc2UgSW5zdGFsbGF0aW9uIGFuZCBhbGwgYXNzb2NpYXRlZCBkYXRhLlxyXG4gKiBAcGFyYW0gaW5zdGFsbGF0aW9ucyAtIFRoZSBgSW5zdGFsbGF0aW9uc2AgaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUluc3RhbGxhdGlvbnMoaW5zdGFsbGF0aW9ucykge1xyXG4gICAgY29uc3QgeyBhcHBDb25maWcgfSA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBjb25zdCBlbnRyeSA9IGF3YWl0IHVwZGF0ZShhcHBDb25maWcsIG9sZEVudHJ5ID0+IHtcclxuICAgICAgICBpZiAob2xkRW50cnkgJiYgb2xkRW50cnkucmVnaXN0cmF0aW9uU3RhdHVzID09PSAwIC8qIFJlcXVlc3RTdGF0dXMuTk9UX1NUQVJURUQgKi8pIHtcclxuICAgICAgICAgICAgLy8gRGVsZXRlIHRoZSB1bnJlZ2lzdGVyZWQgZW50cnkgd2l0aG91dCBzZW5kaW5nIGEgZGVsZXRlSW5zdGFsbGF0aW9uIHJlcXVlc3QuXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvbGRFbnRyeTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgaWYgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMSAvKiBSZXF1ZXN0U3RhdHVzLklOX1BST0dSRVNTICovKSB7XHJcbiAgICAgICAgICAgIC8vIENhbid0IGRlbGV0ZSB3aGlsZSB0cnlpbmcgdG8gcmVnaXN0ZXIuXHJcbiAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiZGVsZXRlLXBlbmRpbmctcmVnaXN0cmF0aW9uXCIgLyogRXJyb3JDb2RlLkRFTEVURV9QRU5ESU5HX1JFR0lTVFJBVElPTiAqLyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGVudHJ5LnJlZ2lzdHJhdGlvblN0YXR1cyA9PT0gMiAvKiBSZXF1ZXN0U3RhdHVzLkNPTVBMRVRFRCAqLykge1xyXG4gICAgICAgICAgICBpZiAoIW5hdmlnYXRvci5vbkxpbmUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IEVSUk9SX0ZBQ1RPUlkuY3JlYXRlKFwiYXBwLW9mZmxpbmVcIiAvKiBFcnJvckNvZGUuQVBQX09GRkxJTkUgKi8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgZGVsZXRlSW5zdGFsbGF0aW9uUmVxdWVzdChhcHBDb25maWcsIGVudHJ5KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHJlbW92ZShhcHBDb25maWcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBTZXRzIGEgbmV3IGNhbGxiYWNrIHRoYXQgd2lsbCBnZXQgY2FsbGVkIHdoZW4gSW5zdGFsbGF0aW9uIElEIGNoYW5nZXMuXHJcbiAqIFJldHVybnMgYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCB3aWxsIHJlbW92ZSB0aGUgY2FsbGJhY2sgd2hlbiBjYWxsZWQuXHJcbiAqIEBwYXJhbSBpbnN0YWxsYXRpb25zIC0gVGhlIGBJbnN0YWxsYXRpb25zYCBpbnN0YW5jZS5cclxuICogQHBhcmFtIGNhbGxiYWNrIC0gVGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHRoYXQgaXMgaW52b2tlZCB3aGVuIEZJRCBjaGFuZ2VzLlxyXG4gKiBAcmV0dXJucyBBIGZ1bmN0aW9uIHRoYXQgY2FuIGJlIGNhbGxlZCB0byB1bnN1YnNjcmliZS5cclxuICpcclxuICogQHB1YmxpY1xyXG4gKi9cclxuZnVuY3Rpb24gb25JZENoYW5nZShpbnN0YWxsYXRpb25zLCBjYWxsYmFjaykge1xyXG4gICAgY29uc3QgeyBhcHBDb25maWcgfSA9IGluc3RhbGxhdGlvbnM7XHJcbiAgICBhZGRDYWxsYmFjayhhcHBDb25maWcsIGNhbGxiYWNrKTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgcmVtb3ZlQ2FsbGJhY2soYXBwQ29uZmlnLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG59XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGluc3RhbmNlIG9mIHtAbGluayBJbnN0YWxsYXRpb25zfSBhc3NvY2lhdGVkIHdpdGggdGhlIGdpdmVuXHJcbiAqIHtAbGluayBAZmlyZWJhc2UvYXBwI0ZpcmViYXNlQXBwfSBpbnN0YW5jZS5cclxuICogQHBhcmFtIGFwcCAtIFRoZSB7QGxpbmsgQGZpcmViYXNlL2FwcCNGaXJlYmFzZUFwcH0gaW5zdGFuY2UuXHJcbiAqXHJcbiAqIEBwdWJsaWNcclxuICovXHJcbmZ1bmN0aW9uIGdldEluc3RhbGxhdGlvbnMoYXBwID0gZ2V0QXBwKCkpIHtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbXBsID0gX2dldFByb3ZpZGVyKGFwcCwgJ2luc3RhbGxhdGlvbnMnKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgIHJldHVybiBpbnN0YWxsYXRpb25zSW1wbDtcclxufVxuXG4vKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQ1xyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxyXG4gKlxyXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXHJcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcclxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXHJcbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcclxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbiAqL1xyXG5mdW5jdGlvbiBleHRyYWN0QXBwQ29uZmlnKGFwcCkge1xyXG4gICAgaWYgKCFhcHAgfHwgIWFwcC5vcHRpb25zKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBDb25maWd1cmF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIWFwcC5uYW1lKSB7XHJcbiAgICAgICAgdGhyb3cgZ2V0TWlzc2luZ1ZhbHVlRXJyb3IoJ0FwcCBOYW1lJyk7XHJcbiAgICB9XHJcbiAgICAvLyBSZXF1aXJlZCBhcHAgY29uZmlnIGtleXNcclxuICAgIGNvbnN0IGNvbmZpZ0tleXMgPSBbXHJcbiAgICAgICAgJ3Byb2plY3RJZCcsXHJcbiAgICAgICAgJ2FwaUtleScsXHJcbiAgICAgICAgJ2FwcElkJ1xyXG4gICAgXTtcclxuICAgIGZvciAoY29uc3Qga2V5TmFtZSBvZiBjb25maWdLZXlzKSB7XHJcbiAgICAgICAgaWYgKCFhcHAub3B0aW9uc1trZXlOYW1lXSkge1xyXG4gICAgICAgICAgICB0aHJvdyBnZXRNaXNzaW5nVmFsdWVFcnJvcihrZXlOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGFwcE5hbWU6IGFwcC5uYW1lLFxyXG4gICAgICAgIHByb2plY3RJZDogYXBwLm9wdGlvbnMucHJvamVjdElkLFxyXG4gICAgICAgIGFwaUtleTogYXBwLm9wdGlvbnMuYXBpS2V5LFxyXG4gICAgICAgIGFwcElkOiBhcHAub3B0aW9ucy5hcHBJZFxyXG4gICAgfTtcclxufVxyXG5mdW5jdGlvbiBnZXRNaXNzaW5nVmFsdWVFcnJvcih2YWx1ZU5hbWUpIHtcclxuICAgIHJldHVybiBFUlJPUl9GQUNUT1JZLmNyZWF0ZShcIm1pc3NpbmctYXBwLWNvbmZpZy12YWx1ZXNcIiAvKiBFcnJvckNvZGUuTUlTU0lOR19BUFBfQ09ORklHX1ZBTFVFUyAqLywge1xyXG4gICAgICAgIHZhbHVlTmFtZVxyXG4gICAgfSk7XHJcbn1cblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuY29uc3QgSU5TVEFMTEFUSU9OU19OQU1FID0gJ2luc3RhbGxhdGlvbnMnO1xyXG5jb25zdCBJTlNUQUxMQVRJT05TX05BTUVfSU5URVJOQUwgPSAnaW5zdGFsbGF0aW9ucy1pbnRlcm5hbCc7XHJcbmNvbnN0IHB1YmxpY0ZhY3RvcnkgPSAoY29udGFpbmVyKSA9PiB7XHJcbiAgICBjb25zdCBhcHAgPSBjb250YWluZXIuZ2V0UHJvdmlkZXIoJ2FwcCcpLmdldEltbWVkaWF0ZSgpO1xyXG4gICAgLy8gVGhyb3dzIGlmIGFwcCBpc24ndCBjb25maWd1cmVkIHByb3Blcmx5LlxyXG4gICAgY29uc3QgYXBwQ29uZmlnID0gZXh0cmFjdEFwcENvbmZpZyhhcHApO1xyXG4gICAgY29uc3QgaGVhcnRiZWF0U2VydmljZVByb3ZpZGVyID0gX2dldFByb3ZpZGVyKGFwcCwgJ2hlYXJ0YmVhdCcpO1xyXG4gICAgY29uc3QgaW5zdGFsbGF0aW9uc0ltcGwgPSB7XHJcbiAgICAgICAgYXBwLFxyXG4gICAgICAgIGFwcENvbmZpZyxcclxuICAgICAgICBoZWFydGJlYXRTZXJ2aWNlUHJvdmlkZXIsXHJcbiAgICAgICAgX2RlbGV0ZTogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKClcclxuICAgIH07XHJcbiAgICByZXR1cm4gaW5zdGFsbGF0aW9uc0ltcGw7XHJcbn07XHJcbmNvbnN0IGludGVybmFsRmFjdG9yeSA9IChjb250YWluZXIpID0+IHtcclxuICAgIGNvbnN0IGFwcCA9IGNvbnRhaW5lci5nZXRQcm92aWRlcignYXBwJykuZ2V0SW1tZWRpYXRlKCk7XHJcbiAgICAvLyBJbnRlcm5hbCBGSVMgaW5zdGFuY2UgcmVsaWVzIG9uIHB1YmxpYyBGSVMgaW5zdGFuY2UuXHJcbiAgICBjb25zdCBpbnN0YWxsYXRpb25zID0gX2dldFByb3ZpZGVyKGFwcCwgSU5TVEFMTEFUSU9OU19OQU1FKS5nZXRJbW1lZGlhdGUoKTtcclxuICAgIGNvbnN0IGluc3RhbGxhdGlvbnNJbnRlcm5hbCA9IHtcclxuICAgICAgICBnZXRJZDogKCkgPT4gZ2V0SWQoaW5zdGFsbGF0aW9ucyksXHJcbiAgICAgICAgZ2V0VG9rZW46IChmb3JjZVJlZnJlc2gpID0+IGdldFRva2VuKGluc3RhbGxhdGlvbnMsIGZvcmNlUmVmcmVzaClcclxuICAgIH07XHJcbiAgICByZXR1cm4gaW5zdGFsbGF0aW9uc0ludGVybmFsO1xyXG59O1xyXG5mdW5jdGlvbiByZWdpc3Rlckluc3RhbGxhdGlvbnMoKSB7XHJcbiAgICBfcmVnaXN0ZXJDb21wb25lbnQobmV3IENvbXBvbmVudChJTlNUQUxMQVRJT05TX05BTUUsIHB1YmxpY0ZhY3RvcnksIFwiUFVCTElDXCIgLyogQ29tcG9uZW50VHlwZS5QVUJMSUMgKi8pKTtcclxuICAgIF9yZWdpc3RlckNvbXBvbmVudChuZXcgQ29tcG9uZW50KElOU1RBTExBVElPTlNfTkFNRV9JTlRFUk5BTCwgaW50ZXJuYWxGYWN0b3J5LCBcIlBSSVZBVEVcIiAvKiBDb21wb25lbnRUeXBlLlBSSVZBVEUgKi8pKTtcclxufVxuXG4vKipcclxuICogRmlyZWJhc2UgSW5zdGFsbGF0aW9uc1xyXG4gKlxyXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cclxuICovXHJcbnJlZ2lzdGVySW5zdGFsbGF0aW9ucygpO1xyXG5yZWdpc3RlclZlcnNpb24obmFtZSwgdmVyc2lvbik7XHJcbi8vIEJVSUxEX1RBUkdFVCB3aWxsIGJlIHJlcGxhY2VkIGJ5IHZhbHVlcyBsaWtlIGVzbTUsIGVzbTIwMTcsIGNqczUsIGV0YyBkdXJpbmcgdGhlIGNvbXBpbGF0aW9uXHJcbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnZXNtMjAxNycpO1xuXG5leHBvcnQgeyBkZWxldGVJbnN0YWxsYXRpb25zLCBnZXRJZCwgZ2V0SW5zdGFsbGF0aW9ucywgZ2V0VG9rZW4sIG9uSWRDaGFuZ2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyB3IGFzIHdyYXAsIHIgYXMgcmVwbGFjZVRyYXBzIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5leHBvcnQgeyB1IGFzIHVud3JhcCwgdyBhcyB3cmFwIH0gZnJvbSAnLi93cmFwLWlkYi12YWx1ZS5qcyc7XG5cbi8qKlxuICogT3BlbiBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICogQHBhcmFtIHZlcnNpb24gU2NoZW1hIHZlcnNpb24uXG4gKiBAcGFyYW0gY2FsbGJhY2tzIEFkZGl0aW9uYWwgY2FsbGJhY2tzLlxuICovXG5mdW5jdGlvbiBvcGVuREIobmFtZSwgdmVyc2lvbiwgeyBibG9ja2VkLCB1cGdyYWRlLCBibG9ja2luZywgdGVybWluYXRlZCB9ID0ge30pIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4obmFtZSwgdmVyc2lvbik7XG4gICAgY29uc3Qgb3BlblByb21pc2UgPSB3cmFwKHJlcXVlc3QpO1xuICAgIGlmICh1cGdyYWRlKSB7XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigndXBncmFkZW5lZWRlZCcsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgdXBncmFkZSh3cmFwKHJlcXVlc3QucmVzdWx0KSwgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgd3JhcChyZXF1ZXN0LnRyYW5zYWN0aW9uKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICBvcGVuUHJvbWlzZVxuICAgICAgICAudGhlbigoZGIpID0+IHtcbiAgICAgICAgaWYgKHRlcm1pbmF0ZWQpXG4gICAgICAgICAgICBkYi5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsICgpID0+IHRlcm1pbmF0ZWQoKSk7XG4gICAgICAgIGlmIChibG9ja2luZylcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoKSA9PiBibG9ja2luZygpKTtcbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZClcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdibG9ja2VkJywgKCkgPT4gYmxvY2tlZCgpKTtcbiAgICByZXR1cm4gd3JhcChyZXF1ZXN0KS50aGVuKCgpID0+IHVuZGVmaW5lZCk7XG59XG5cbmNvbnN0IHJlYWRNZXRob2RzID0gWydnZXQnLCAnZ2V0S2V5JywgJ2dldEFsbCcsICdnZXRBbGxLZXlzJywgJ2NvdW50J107XG5jb25zdCB3cml0ZU1ldGhvZHMgPSBbJ3B1dCcsICdhZGQnLCAnZGVsZXRlJywgJ2NsZWFyJ107XG5jb25zdCBjYWNoZWRNZXRob2RzID0gbmV3IE1hcCgpO1xuZnVuY3Rpb24gZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkge1xuICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIElEQkRhdGFiYXNlICYmXG4gICAgICAgICEocHJvcCBpbiB0YXJnZXQpICYmXG4gICAgICAgIHR5cGVvZiBwcm9wID09PSAnc3RyaW5nJykpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2FjaGVkTWV0aG9kcy5nZXQocHJvcCkpXG4gICAgICAgIHJldHVybiBjYWNoZWRNZXRob2RzLmdldChwcm9wKTtcbiAgICBjb25zdCB0YXJnZXRGdW5jTmFtZSA9IHByb3AucmVwbGFjZSgvRnJvbUluZGV4JC8sICcnKTtcbiAgICBjb25zdCB1c2VJbmRleCA9IHByb3AgIT09IHRhcmdldEZ1bmNOYW1lO1xuICAgIGNvbnN0IGlzV3JpdGUgPSB3cml0ZU1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpO1xuICAgIGlmIChcbiAgICAvLyBCYWlsIGlmIHRoZSB0YXJnZXQgZG9lc24ndCBleGlzdCBvbiB0aGUgdGFyZ2V0LiBFZywgZ2V0QWxsIGlzbid0IGluIEVkZ2UuXG4gICAgISh0YXJnZXRGdW5jTmFtZSBpbiAodXNlSW5kZXggPyBJREJJbmRleCA6IElEQk9iamVjdFN0b3JlKS5wcm90b3R5cGUpIHx8XG4gICAgICAgICEoaXNXcml0ZSB8fCByZWFkTWV0aG9kcy5pbmNsdWRlcyh0YXJnZXRGdW5jTmFtZSkpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbWV0aG9kID0gYXN5bmMgZnVuY3Rpb24gKHN0b3JlTmFtZSwgLi4uYXJncykge1xuICAgICAgICAvLyBpc1dyaXRlID8gJ3JlYWR3cml0ZScgOiB1bmRlZmluZWQgZ3ppcHBzIGJldHRlciwgYnV0IGZhaWxzIGluIEVkZ2UgOihcbiAgICAgICAgY29uc3QgdHggPSB0aGlzLnRyYW5zYWN0aW9uKHN0b3JlTmFtZSwgaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogJ3JlYWRvbmx5Jyk7XG4gICAgICAgIGxldCB0YXJnZXQgPSB0eC5zdG9yZTtcbiAgICAgICAgaWYgKHVzZUluZGV4KVxuICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LmluZGV4KGFyZ3Muc2hpZnQoKSk7XG4gICAgICAgIC8vIE11c3QgcmVqZWN0IGlmIG9wIHJlamVjdHMuXG4gICAgICAgIC8vIElmIGl0J3MgYSB3cml0ZSBvcGVyYXRpb24sIG11c3QgcmVqZWN0IGlmIHR4LmRvbmUgcmVqZWN0cy5cbiAgICAgICAgLy8gTXVzdCByZWplY3Qgd2l0aCBvcCByZWplY3Rpb24gZmlyc3QuXG4gICAgICAgIC8vIE11c3QgcmVzb2x2ZSB3aXRoIG9wIHZhbHVlLlxuICAgICAgICAvLyBNdXN0IGhhbmRsZSBib3RoIHByb21pc2VzIChubyB1bmhhbmRsZWQgcmVqZWN0aW9ucylcbiAgICAgICAgcmV0dXJuIChhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgICAgICB0YXJnZXRbdGFyZ2V0RnVuY05hbWVdKC4uLmFyZ3MpLFxuICAgICAgICAgICAgaXNXcml0ZSAmJiB0eC5kb25lLFxuICAgICAgICBdKSlbMF07XG4gICAgfTtcbiAgICBjYWNoZWRNZXRob2RzLnNldChwcm9wLCBtZXRob2QpO1xuICAgIHJldHVybiBtZXRob2Q7XG59XG5yZXBsYWNlVHJhcHMoKG9sZFRyYXBzKSA9PiAoe1xuICAgIC4uLm9sZFRyYXBzLFxuICAgIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+IGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmdldCh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSxcbiAgICBoYXM6ICh0YXJnZXQsIHByb3ApID0+ICEhZ2V0TWV0aG9kKHRhcmdldCwgcHJvcCkgfHwgb2xkVHJhcHMuaGFzKHRhcmdldCwgcHJvcCksXG59KSk7XG5cbmV4cG9ydCB7IGRlbGV0ZURCLCBvcGVuREIgfTtcbiIsImNvbnN0IGluc3RhbmNlT2ZBbnkgPSAob2JqZWN0LCBjb25zdHJ1Y3RvcnMpID0+IGNvbnN0cnVjdG9ycy5zb21lKChjKSA9PiBvYmplY3QgaW5zdGFuY2VvZiBjKTtcblxubGV0IGlkYlByb3h5YWJsZVR5cGVzO1xubGV0IGN1cnNvckFkdmFuY2VNZXRob2RzO1xuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRJZGJQcm94eWFibGVUeXBlcygpIHtcbiAgICByZXR1cm4gKGlkYlByb3h5YWJsZVR5cGVzIHx8XG4gICAgICAgIChpZGJQcm94eWFibGVUeXBlcyA9IFtcbiAgICAgICAgICAgIElEQkRhdGFiYXNlLFxuICAgICAgICAgICAgSURCT2JqZWN0U3RvcmUsXG4gICAgICAgICAgICBJREJJbmRleCxcbiAgICAgICAgICAgIElEQkN1cnNvcixcbiAgICAgICAgICAgIElEQlRyYW5zYWN0aW9uLFxuICAgICAgICBdKSk7XG59XG4vLyBUaGlzIGlzIGEgZnVuY3Rpb24gdG8gcHJldmVudCBpdCB0aHJvd2luZyB1cCBpbiBub2RlIGVudmlyb25tZW50cy5cbmZ1bmN0aW9uIGdldEN1cnNvckFkdmFuY2VNZXRob2RzKCkge1xuICAgIHJldHVybiAoY3Vyc29yQWR2YW5jZU1ldGhvZHMgfHxcbiAgICAgICAgKGN1cnNvckFkdmFuY2VNZXRob2RzID0gW1xuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5hZHZhbmNlLFxuICAgICAgICAgICAgSURCQ3Vyc29yLnByb3RvdHlwZS5jb250aW51ZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWVQcmltYXJ5S2V5LFxuICAgICAgICBdKSk7XG59XG5jb25zdCBjdXJzb3JSZXF1ZXN0TWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zYWN0aW9uRG9uZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNmb3JtQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHByb21pc2lmeVJlcXVlc3QocmVxdWVzdCkge1xuICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHVubGlzdGVuID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzdWNjZXNzJywgc3VjY2Vzcyk7XG4gICAgICAgICAgICByZXF1ZXN0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdWNjZXNzID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSh3cmFwKHJlcXVlc3QucmVzdWx0KSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdChyZXF1ZXN0LmVycm9yKTtcbiAgICAgICAgICAgIHVubGlzdGVuKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgIH0pO1xuICAgIHByb21pc2VcbiAgICAgICAgLnRoZW4oKHZhbHVlKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIGN1cnNvcmluZyByZXVzZXMgdGhlIElEQlJlcXVlc3QgKCpzaWdoKiksIHdlIGNhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgLy8gKHNlZSB3cmFwRnVuY3Rpb24pLlxuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJDdXJzb3IpIHtcbiAgICAgICAgICAgIGN1cnNvclJlcXVlc3RNYXAuc2V0KHZhbHVlLCByZXF1ZXN0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDYXRjaGluZyB0byBhdm9pZCBcIlVuY2F1Z2h0IFByb21pc2UgZXhjZXB0aW9uc1wiXG4gICAgfSlcbiAgICAgICAgLmNhdGNoKCgpID0+IHsgfSk7XG4gICAgLy8gVGhpcyBtYXBwaW5nIGV4aXN0cyBpbiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYnV0IGRvZXNuJ3QgZG9lc24ndCBleGlzdCBpbiB0cmFuc2Zvcm1DYWNoZS4gVGhpc1xuICAgIC8vIGlzIGJlY2F1c2Ugd2UgY3JlYXRlIG1hbnkgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0LlxuICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQocHJvbWlzZSwgcmVxdWVzdCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBjYWNoZURvbmVQcm9taXNlRm9yVHJhbnNhY3Rpb24odHgpIHtcbiAgICAvLyBFYXJseSBiYWlsIGlmIHdlJ3ZlIGFscmVhZHkgY3JlYXRlZCBhIGRvbmUgcHJvbWlzZSBmb3IgdGhpcyB0cmFuc2FjdGlvbi5cbiAgICBpZiAodHJhbnNhY3Rpb25Eb25lTWFwLmhhcyh0eCkpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBkb25lID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgY29tcGxldGUpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgY29tcGxldGUgPSAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBlcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlamVjdCh0eC5lcnJvciB8fCBuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydEVycm9yJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBlcnJvcik7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgZXJyb3IpO1xuICAgIH0pO1xuICAgIC8vIENhY2hlIGl0IGZvciBsYXRlciByZXRyaWV2YWwuXG4gICAgdHJhbnNhY3Rpb25Eb25lTWFwLnNldCh0eCwgZG9uZSk7XG59XG5sZXQgaWRiUHJveHlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHRyYW5zYWN0aW9uLmRvbmUuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ2RvbmUnKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbkRvbmVNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICAvLyBQb2x5ZmlsbCBmb3Igb2JqZWN0U3RvcmVOYW1lcyBiZWNhdXNlIG9mIEVkZ2UuXG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gJ29iamVjdFN0b3JlTmFtZXMnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5vYmplY3RTdG9yZU5hbWVzIHx8IHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5nZXQodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIE1ha2UgdHguc3RvcmUgcmV0dXJuIHRoZSBvbmx5IHN0b3JlIGluIHRoZSB0cmFuc2FjdGlvbiwgb3IgdW5kZWZpbmVkIGlmIHRoZXJlIGFyZSBtYW55LlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdzdG9yZScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjZWl2ZXIub2JqZWN0U3RvcmVOYW1lc1sxXVxuICAgICAgICAgICAgICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgICA6IHJlY2VpdmVyLm9iamVjdFN0b3JlKHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEVsc2UgdHJhbnNmb3JtIHdoYXRldmVyIHdlIGdldCBiYWNrLlxuICAgICAgICByZXR1cm4gd3JhcCh0YXJnZXRbcHJvcF0pO1xuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgcHJvcCwgdmFsdWUpIHtcbiAgICAgICAgdGFyZ2V0W3Byb3BdID0gdmFsdWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgaGFzKHRhcmdldCwgcHJvcCkge1xuICAgICAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24gJiZcbiAgICAgICAgICAgIChwcm9wID09PSAnZG9uZScgfHwgcHJvcCA9PT0gJ3N0b3JlJykpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wIGluIHRhcmdldDtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHJlcGxhY2VUcmFwcyhjYWxsYmFjaykge1xuICAgIGlkYlByb3h5VHJhcHMgPSBjYWxsYmFjayhpZGJQcm94eVRyYXBzKTtcbn1cbmZ1bmN0aW9uIHdyYXBGdW5jdGlvbihmdW5jKSB7XG4gICAgLy8gRHVlIHRvIGV4cGVjdGVkIG9iamVjdCBlcXVhbGl0eSAod2hpY2ggaXMgZW5mb3JjZWQgYnkgdGhlIGNhY2hpbmcgaW4gYHdyYXBgKSwgd2VcbiAgICAvLyBvbmx5IGNyZWF0ZSBvbmUgbmV3IGZ1bmMgcGVyIGZ1bmMuXG4gICAgLy8gRWRnZSBkb2Vzbid0IHN1cHBvcnQgb2JqZWN0U3RvcmVOYW1lcyAoYm9vbyksIHNvIHdlIHBvbHlmaWxsIGl0IGhlcmUuXG4gICAgaWYgKGZ1bmMgPT09IElEQkRhdGFiYXNlLnByb3RvdHlwZS50cmFuc2FjdGlvbiAmJlxuICAgICAgICAhKCdvYmplY3RTdG9yZU5hbWVzJyBpbiBJREJUcmFuc2FjdGlvbi5wcm90b3R5cGUpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc3RvcmVOYW1lcywgLi4uYXJncykge1xuICAgICAgICAgICAgY29uc3QgdHggPSBmdW5jLmNhbGwodW53cmFwKHRoaXMpLCBzdG9yZU5hbWVzLCAuLi5hcmdzKTtcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmVOYW1lc01hcC5zZXQodHgsIHN0b3JlTmFtZXMuc29ydCA/IHN0b3JlTmFtZXMuc29ydCgpIDogW3N0b3JlTmFtZXNdKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKHR4KTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ3Vyc29yIG1ldGhvZHMgYXJlIHNwZWNpYWwsIGFzIHRoZSBiZWhhdmlvdXIgaXMgYSBsaXR0bGUgbW9yZSBkaWZmZXJlbnQgdG8gc3RhbmRhcmQgSURCLiBJblxuICAgIC8vIElEQiwgeW91IGFkdmFuY2UgdGhlIGN1cnNvciBhbmQgd2FpdCBmb3IgYSBuZXcgJ3N1Y2Nlc3MnIG9uIHRoZSBJREJSZXF1ZXN0IHRoYXQgZ2F2ZSB5b3UgdGhlXG4gICAgLy8gY3Vyc29yLiBJdCdzIGtpbmRhIGxpa2UgYSBwcm9taXNlIHRoYXQgY2FuIHJlc29sdmUgd2l0aCBtYW55IHZhbHVlcy4gVGhhdCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAvLyB3aXRoIHJlYWwgcHJvbWlzZXMsIHNvIGVhY2ggYWR2YW5jZSBtZXRob2RzIHJldHVybnMgYSBuZXcgcHJvbWlzZSBmb3IgdGhlIGN1cnNvciBvYmplY3QsIG9yXG4gICAgLy8gdW5kZWZpbmVkIGlmIHRoZSBlbmQgb2YgdGhlIGN1cnNvciBoYXMgYmVlbiByZWFjaGVkLlxuICAgIGlmIChnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpLmluY2x1ZGVzKGZ1bmMpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAgICAgLy8gQ2FsbGluZyB0aGUgb3JpZ2luYWwgZnVuY3Rpb24gd2l0aCB0aGUgcHJveHkgYXMgJ3RoaXMnIGNhdXNlcyBJTExFR0FMIElOVk9DQVRJT04sIHNvIHdlIHVzZVxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgICAgIGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKTtcbiAgICAgICAgICAgIHJldHVybiB3cmFwKGN1cnNvclJlcXVlc3RNYXAuZ2V0KHRoaXMpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgLy8gdGhlIG9yaWdpbmFsIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHdyYXAoZnVuYy5hcHBseSh1bndyYXAodGhpcyksIGFyZ3MpKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB3cmFwRnVuY3Rpb24odmFsdWUpO1xuICAgIC8vIFRoaXMgZG9lc24ndCByZXR1cm4sIGl0IGp1c3QgY3JlYXRlcyBhICdkb25lJyBwcm9taXNlIGZvciB0aGUgdHJhbnNhY3Rpb24sXG4gICAgLy8gd2hpY2ggaXMgbGF0ZXIgcmV0dXJuZWQgZm9yIHRyYW5zYWN0aW9uLmRvbmUgKHNlZSBpZGJPYmplY3RIYW5kbGVyKS5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJUcmFuc2FjdGlvbilcbiAgICAgICAgY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHZhbHVlKTtcbiAgICBpZiAoaW5zdGFuY2VPZkFueSh2YWx1ZSwgZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSkpXG4gICAgICAgIHJldHVybiBuZXcgUHJveHkodmFsdWUsIGlkYlByb3h5VHJhcHMpO1xuICAgIC8vIFJldHVybiB0aGUgc2FtZSB2YWx1ZSBiYWNrIGlmIHdlJ3JlIG5vdCBnb2luZyB0byB0cmFuc2Zvcm0gaXQuXG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gd3JhcCh2YWx1ZSkge1xuICAgIC8vIFdlIHNvbWV0aW1lcyBnZW5lcmF0ZSBtdWx0aXBsZSBwcm9taXNlcyBmcm9tIGEgc2luZ2xlIElEQlJlcXVlc3QgKGVnIHdoZW4gY3Vyc29yaW5nKSwgYmVjYXVzZVxuICAgIC8vIElEQiBpcyB3ZWlyZCBhbmQgYSBzaW5nbGUgSURCUmVxdWVzdCBjYW4geWllbGQgbWFueSByZXNwb25zZXMsIHNvIHRoZXNlIGNhbid0IGJlIGNhY2hlZC5cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJREJSZXF1ZXN0KVxuICAgICAgICByZXR1cm4gcHJvbWlzaWZ5UmVxdWVzdCh2YWx1ZSk7XG4gICAgLy8gSWYgd2UndmUgYWxyZWFkeSB0cmFuc2Zvcm1lZCB0aGlzIHZhbHVlIGJlZm9yZSwgcmV1c2UgdGhlIHRyYW5zZm9ybWVkIHZhbHVlLlxuICAgIC8vIFRoaXMgaXMgZmFzdGVyLCBidXQgaXQgYWxzbyBwcm92aWRlcyBvYmplY3QgZXF1YWxpdHkuXG4gICAgaWYgKHRyYW5zZm9ybUNhY2hlLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdHJhbnNmb3JtQ2FjaGFibGVWYWx1ZSh2YWx1ZSk7XG4gICAgLy8gTm90IGFsbCB0eXBlcyBhcmUgdHJhbnNmb3JtZWQuXG4gICAgLy8gVGhlc2UgbWF5IGJlIHByaW1pdGl2ZSB0eXBlcywgc28gdGhleSBjYW4ndCBiZSBXZWFrTWFwIGtleXMuXG4gICAgaWYgKG5ld1ZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQodmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlLnNldChuZXdWYWx1ZSwgdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3VmFsdWU7XG59XG5jb25zdCB1bndyYXAgPSAodmFsdWUpID0+IHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5nZXQodmFsdWUpO1xuXG5leHBvcnQgeyByZXZlcnNlVHJhbnNmb3JtQ2FjaGUgYXMgYSwgaW5zdGFuY2VPZkFueSBhcyBpLCByZXBsYWNlVHJhcHMgYXMgciwgdW53cmFwIGFzIHUsIHdyYXAgYXMgdyB9O1xuIiwiLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuLyoqXHJcbiAqIEEgY29udGFpbmVyIGZvciBhbGwgb2YgdGhlIExvZ2dlciBpbnN0YW5jZXNcclxuICovXHJcbmNvbnN0IGluc3RhbmNlcyA9IFtdO1xyXG4vKipcclxuICogVGhlIEpTIFNESyBzdXBwb3J0cyA1IGxvZyBsZXZlbHMgYW5kIGFsc28gYWxsb3dzIGEgdXNlciB0aGUgYWJpbGl0eSB0b1xyXG4gKiBzaWxlbmNlIHRoZSBsb2dzIGFsdG9nZXRoZXIuXHJcbiAqXHJcbiAqIFRoZSBvcmRlciBpcyBhIGZvbGxvd3M6XHJcbiAqIERFQlVHIDwgVkVSQk9TRSA8IElORk8gPCBXQVJOIDwgRVJST1JcclxuICpcclxuICogQWxsIG9mIHRoZSBsb2cgdHlwZXMgYWJvdmUgdGhlIGN1cnJlbnQgbG9nIGxldmVsIHdpbGwgYmUgY2FwdHVyZWQgKGkuZS4gaWZcclxuICogeW91IHNldCB0aGUgbG9nIGxldmVsIHRvIGBJTkZPYCwgZXJyb3JzIHdpbGwgc3RpbGwgYmUgbG9nZ2VkLCBidXQgYERFQlVHYCBhbmRcclxuICogYFZFUkJPU0VgIGxvZ3Mgd2lsbCBub3QpXHJcbiAqL1xyXG52YXIgTG9nTGV2ZWw7XHJcbihmdW5jdGlvbiAoTG9nTGV2ZWwpIHtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiREVCVUdcIl0gPSAwXSA9IFwiREVCVUdcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiVkVSQk9TRVwiXSA9IDFdID0gXCJWRVJCT1NFXCI7XHJcbiAgICBMb2dMZXZlbFtMb2dMZXZlbFtcIklORk9cIl0gPSAyXSA9IFwiSU5GT1wiO1xyXG4gICAgTG9nTGV2ZWxbTG9nTGV2ZWxbXCJXQVJOXCJdID0gM10gPSBcIldBUk5cIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiRVJST1JcIl0gPSA0XSA9IFwiRVJST1JcIjtcclxuICAgIExvZ0xldmVsW0xvZ0xldmVsW1wiU0lMRU5UXCJdID0gNV0gPSBcIlNJTEVOVFwiO1xyXG59KShMb2dMZXZlbCB8fCAoTG9nTGV2ZWwgPSB7fSkpO1xyXG5jb25zdCBsZXZlbFN0cmluZ1RvRW51bSA9IHtcclxuICAgICdkZWJ1Zyc6IExvZ0xldmVsLkRFQlVHLFxyXG4gICAgJ3ZlcmJvc2UnOiBMb2dMZXZlbC5WRVJCT1NFLFxyXG4gICAgJ2luZm8nOiBMb2dMZXZlbC5JTkZPLFxyXG4gICAgJ3dhcm4nOiBMb2dMZXZlbC5XQVJOLFxyXG4gICAgJ2Vycm9yJzogTG9nTGV2ZWwuRVJST1IsXHJcbiAgICAnc2lsZW50JzogTG9nTGV2ZWwuU0lMRU5UXHJcbn07XHJcbi8qKlxyXG4gKiBUaGUgZGVmYXVsdCBsb2cgbGV2ZWxcclxuICovXHJcbmNvbnN0IGRlZmF1bHRMb2dMZXZlbCA9IExvZ0xldmVsLklORk87XHJcbi8qKlxyXG4gKiBCeSBkZWZhdWx0LCBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGRpc3BsYXllZCBpbiB0aGUgZGV2ZWxvcGVyIGNvbnNvbGUgKGluXHJcbiAqIGNocm9tZSkuIFRvIGF2b2lkIGZvcmNpbmcgdXNlcnMgdG8gaGF2ZSB0byBvcHQtaW4gdG8gdGhlc2UgbG9ncyB0d2ljZVxyXG4gKiAoaS5lLiBvbmNlIGZvciBmaXJlYmFzZSwgYW5kIG9uY2UgaW4gdGhlIGNvbnNvbGUpLCB3ZSBhcmUgc2VuZGluZyBgREVCVUdgXHJcbiAqIGxvZ3MgdG8gdGhlIGBjb25zb2xlLmxvZ2AgZnVuY3Rpb24uXHJcbiAqL1xyXG5jb25zdCBDb25zb2xlTWV0aG9kID0ge1xyXG4gICAgW0xvZ0xldmVsLkRFQlVHXTogJ2xvZycsXHJcbiAgICBbTG9nTGV2ZWwuVkVSQk9TRV06ICdsb2cnLFxyXG4gICAgW0xvZ0xldmVsLklORk9dOiAnaW5mbycsXHJcbiAgICBbTG9nTGV2ZWwuV0FSTl06ICd3YXJuJyxcclxuICAgIFtMb2dMZXZlbC5FUlJPUl06ICdlcnJvcidcclxufTtcclxuLyoqXHJcbiAqIFRoZSBkZWZhdWx0IGxvZyBoYW5kbGVyIHdpbGwgZm9yd2FyZCBERUJVRywgVkVSQk9TRSwgSU5GTywgV0FSTiwgYW5kIEVSUk9SXHJcbiAqIG1lc3NhZ2VzIG9uIHRvIHRoZWlyIGNvcnJlc3BvbmRpbmcgY29uc29sZSBjb3VudGVycGFydHMgKGlmIHRoZSBsb2cgbWV0aG9kXHJcbiAqIGlzIHN1cHBvcnRlZCBieSB0aGUgY3VycmVudCBsb2cgbGV2ZWwpXHJcbiAqL1xyXG5jb25zdCBkZWZhdWx0TG9nSGFuZGxlciA9IChpbnN0YW5jZSwgbG9nVHlwZSwgLi4uYXJncykgPT4ge1xyXG4gICAgaWYgKGxvZ1R5cGUgPCBpbnN0YW5jZS5sb2dMZXZlbCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcclxuICAgIGNvbnN0IG1ldGhvZCA9IENvbnNvbGVNZXRob2RbbG9nVHlwZV07XHJcbiAgICBpZiAobWV0aG9kKSB7XHJcbiAgICAgICAgY29uc29sZVttZXRob2RdKGBbJHtub3d9XSAgJHtpbnN0YW5jZS5uYW1lfTpgLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQXR0ZW1wdGVkIHRvIGxvZyBhIG1lc3NhZ2Ugd2l0aCBhbiBpbnZhbGlkIGxvZ1R5cGUgKHZhbHVlOiAke2xvZ1R5cGV9KWApO1xyXG4gICAgfVxyXG59O1xyXG5jbGFzcyBMb2dnZXIge1xyXG4gICAgLyoqXHJcbiAgICAgKiBHaXZlcyB5b3UgYW4gaW5zdGFuY2Ugb2YgYSBMb2dnZXIgdG8gY2FwdHVyZSBtZXNzYWdlcyBhY2NvcmRpbmcgdG9cclxuICAgICAqIEZpcmViYXNlJ3MgbG9nZ2luZyBzY2hlbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdGhhdCB0aGUgbG9ncyB3aWxsIGJlIGFzc29jaWF0ZWQgd2l0aFxyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUaGUgbG9nIGxldmVsIG9mIHRoZSBnaXZlbiBMb2dnZXIgaW5zdGFuY2UuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSBkZWZhdWx0TG9nTGV2ZWw7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVGhlIG1haW4gKGludGVybmFsKSBsb2cgaGFuZGxlciBmb3IgdGhlIExvZ2dlciBpbnN0YW5jZS5cclxuICAgICAgICAgKiBDYW4gYmUgc2V0IHRvIGEgbmV3IGZ1bmN0aW9uIGluIGludGVybmFsIHBhY2thZ2UgY29kZSBidXQgbm90IGJ5IHVzZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IGRlZmF1bHRMb2dIYW5kbGVyO1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIFRoZSBvcHRpb25hbCwgYWRkaXRpb25hbCwgdXNlci1kZWZpbmVkIGxvZyBoYW5kbGVyIGZvciB0aGUgTG9nZ2VyIGluc3RhbmNlLlxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyID0gbnVsbDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBDYXB0dXJlIHRoZSBjdXJyZW50IGluc3RhbmNlIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgKi9cclxuICAgICAgICBpbnN0YW5jZXMucHVzaCh0aGlzKTtcclxuICAgIH1cclxuICAgIGdldCBsb2dMZXZlbCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9nTGV2ZWw7XHJcbiAgICB9XHJcbiAgICBzZXQgbG9nTGV2ZWwodmFsKSB7XHJcbiAgICAgICAgaWYgKCEodmFsIGluIExvZ0xldmVsKSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlIFwiJHt2YWx9XCIgYXNzaWduZWQgdG8gXFxgbG9nTGV2ZWxcXGBgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBzZXR0ZXIvZ2V0dGVyIGhhdmluZyB0byBiZSB0aGUgc2FtZSB0eXBlLlxyXG4gICAgc2V0TG9nTGV2ZWwodmFsKSB7XHJcbiAgICAgICAgdGhpcy5fbG9nTGV2ZWwgPSB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyA/IGxldmVsU3RyaW5nVG9FbnVtW3ZhbF0gOiB2YWw7XHJcbiAgICB9XHJcbiAgICBnZXQgbG9nSGFuZGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbG9nSGFuZGxlcjtcclxuICAgIH1cclxuICAgIHNldCBsb2dIYW5kbGVyKHZhbCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1ZhbHVlIGFzc2lnbmVkIHRvIGBsb2dIYW5kbGVyYCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlciA9IHZhbDtcclxuICAgIH1cclxuICAgIGdldCB1c2VyTG9nSGFuZGxlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdXNlckxvZ0hhbmRsZXI7XHJcbiAgICB9XHJcbiAgICBzZXQgdXNlckxvZ0hhbmRsZXIodmFsKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgPSB2YWw7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBmdW5jdGlvbnMgYmVsb3cgYXJlIGFsbCBiYXNlZCBvbiB0aGUgYGNvbnNvbGVgIGludGVyZmFjZVxyXG4gICAgICovXHJcbiAgICBkZWJ1ZyguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuREVCVUcsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuREVCVUcsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgbG9nKC4uLmFyZ3MpIHtcclxuICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlciAmJlxyXG4gICAgICAgICAgICB0aGlzLl91c2VyTG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5WRVJCT1NFLCAuLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9sb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLlZFUkJPU0UsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG4gICAgaW5mbyguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuSU5GTywgLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fbG9nSGFuZGxlcih0aGlzLCBMb2dMZXZlbC5JTkZPLCAuLi5hcmdzKTtcclxuICAgIH1cclxuICAgIHdhcm4oLi4uYXJncykge1xyXG4gICAgICAgIHRoaXMuX3VzZXJMb2dIYW5kbGVyICYmIHRoaXMuX3VzZXJMb2dIYW5kbGVyKHRoaXMsIExvZ0xldmVsLldBUk4sIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuV0FSTiwgLi4uYXJncyk7XHJcbiAgICB9XHJcbiAgICBlcnJvciguLi5hcmdzKSB7XHJcbiAgICAgICAgdGhpcy5fdXNlckxvZ0hhbmRsZXIgJiYgdGhpcy5fdXNlckxvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuRVJST1IsIC4uLmFyZ3MpO1xyXG4gICAgICAgIHRoaXMuX2xvZ0hhbmRsZXIodGhpcywgTG9nTGV2ZWwuRVJST1IsIC4uLmFyZ3MpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7XHJcbiAgICBpbnN0YW5jZXMuZm9yRWFjaChpbnN0ID0+IHtcclxuICAgICAgICBpbnN0LnNldExvZ0xldmVsKGxldmVsKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHNldFVzZXJMb2dIYW5kbGVyKGxvZ0NhbGxiYWNrLCBvcHRpb25zKSB7XHJcbiAgICBmb3IgKGNvbnN0IGluc3RhbmNlIG9mIGluc3RhbmNlcykge1xyXG4gICAgICAgIGxldCBjdXN0b21Mb2dMZXZlbCA9IG51bGw7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5sZXZlbCkge1xyXG4gICAgICAgICAgICBjdXN0b21Mb2dMZXZlbCA9IGxldmVsU3RyaW5nVG9FbnVtW29wdGlvbnMubGV2ZWxdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobG9nQ2FsbGJhY2sgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UudXNlckxvZ0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaW5zdGFuY2UudXNlckxvZ0hhbmRsZXIgPSAoaW5zdGFuY2UsIGxldmVsLCAuLi5hcmdzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXJnc1xyXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoYXJnID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJnID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8IHR5cGVvZiBhcmcgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmcubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoaWdub3JlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoYXJnID0+IGFyZylcclxuICAgICAgICAgICAgICAgICAgICAuam9pbignICcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGxldmVsID49IChjdXN0b21Mb2dMZXZlbCAhPT0gbnVsbCAmJiBjdXN0b21Mb2dMZXZlbCAhPT0gdm9pZCAwID8gY3VzdG9tTG9nTGV2ZWwgOiBpbnN0YW5jZS5sb2dMZXZlbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2dDYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiBMb2dMZXZlbFtsZXZlbF0udG9Mb3dlckNhc2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXJncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW5zdGFuY2UubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxuXG5leHBvcnQgeyBMb2dMZXZlbCwgTG9nZ2VyLCBzZXRMb2dMZXZlbCwgc2V0VXNlckxvZ0hhbmRsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbTIwMTcuanMubWFwXG4iLCJpbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmV4cG9ydCAqIGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG52YXIgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbnZhciB2ZXJzaW9uID0gXCIxMC4xLjBcIjtcblxuLyoqXHJcbiAqIEBsaWNlbnNlXHJcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTENcclxuICpcclxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcclxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxyXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcclxuICpcclxuICogICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXHJcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxyXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXHJcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxucmVnaXN0ZXJWZXJzaW9uKG5hbWUsIHZlcnNpb24sICdhcHAnKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzbS5qcy5tYXBcbiIsImltcG9ydCB7IHcgYXMgd3JhcCwgciBhcyByZXBsYWNlVHJhcHMgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcbmV4cG9ydCB7IHUgYXMgdW53cmFwLCB3IGFzIHdyYXAgfSBmcm9tICcuL3dyYXAtaWRiLXZhbHVlLmpzJztcblxuLyoqXG4gKiBPcGVuIGEgZGF0YWJhc2UuXG4gKlxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgZGF0YWJhc2UuXG4gKiBAcGFyYW0gdmVyc2lvbiBTY2hlbWEgdmVyc2lvbi5cbiAqIEBwYXJhbSBjYWxsYmFja3MgQWRkaXRpb25hbCBjYWxsYmFja3MuXG4gKi9cbmZ1bmN0aW9uIG9wZW5EQihuYW1lLCB2ZXJzaW9uLCB7IGJsb2NrZWQsIHVwZ3JhZGUsIGJsb2NraW5nLCB0ZXJtaW5hdGVkIH0gPSB7fSkge1xuICAgIGNvbnN0IHJlcXVlc3QgPSBpbmRleGVkREIub3BlbihuYW1lLCB2ZXJzaW9uKTtcbiAgICBjb25zdCBvcGVuUHJvbWlzZSA9IHdyYXAocmVxdWVzdCk7XG4gICAgaWYgKHVwZ3JhZGUpIHtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCd1cGdyYWRlbmVlZGVkJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICB1cGdyYWRlKHdyYXAocmVxdWVzdC5yZXN1bHQpLCBldmVudC5vbGRWZXJzaW9uLCBldmVudC5uZXdWZXJzaW9uLCB3cmFwKHJlcXVlc3QudHJhbnNhY3Rpb24pLCBldmVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQubmV3VmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgb3BlblByb21pc2VcbiAgICAgICAgLnRoZW4oKGRiKSA9PiB7XG4gICAgICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgICAgICAgZGIuYWRkRXZlbnRMaXN0ZW5lcignY2xvc2UnLCAoKSA9PiB0ZXJtaW5hdGVkKCkpO1xuICAgICAgICBpZiAoYmxvY2tpbmcpIHtcbiAgICAgICAgICAgIGRiLmFkZEV2ZW50TGlzdGVuZXIoJ3ZlcnNpb25jaGFuZ2UnLCAoZXZlbnQpID0+IGJsb2NraW5nKGV2ZW50Lm9sZFZlcnNpb24sIGV2ZW50Lm5ld1ZlcnNpb24sIGV2ZW50KSk7XG4gICAgICAgIH1cbiAgICB9KVxuICAgICAgICAuY2F0Y2goKCkgPT4geyB9KTtcbiAgICByZXR1cm4gb3BlblByb21pc2U7XG59XG4vKipcbiAqIERlbGV0ZSBhIGRhdGFiYXNlLlxuICpcbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGRhdGFiYXNlLlxuICovXG5mdW5jdGlvbiBkZWxldGVEQihuYW1lLCB7IGJsb2NrZWQgfSA9IHt9KSB7XG4gICAgY29uc3QgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShuYW1lKTtcbiAgICBpZiAoYmxvY2tlZCkge1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ2Jsb2NrZWQnLCAoZXZlbnQpID0+IGJsb2NrZWQoXG4gICAgICAgIC8vIENhc3RpbmcgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC1ET00tbGliLWdlbmVyYXRvci9wdWxsLzE0MDVcbiAgICAgICAgZXZlbnQub2xkVmVyc2lvbiwgZXZlbnQpKTtcbiAgICB9XG4gICAgcmV0dXJuIHdyYXAocmVxdWVzdCkudGhlbigoKSA9PiB1bmRlZmluZWQpO1xufVxuXG5jb25zdCByZWFkTWV0aG9kcyA9IFsnZ2V0JywgJ2dldEtleScsICdnZXRBbGwnLCAnZ2V0QWxsS2V5cycsICdjb3VudCddO1xuY29uc3Qgd3JpdGVNZXRob2RzID0gWydwdXQnLCAnYWRkJywgJ2RlbGV0ZScsICdjbGVhciddO1xuY29uc3QgY2FjaGVkTWV0aG9kcyA9IG5ldyBNYXAoKTtcbmZ1bmN0aW9uIGdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHtcbiAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBJREJEYXRhYmFzZSAmJlxuICAgICAgICAhKHByb3AgaW4gdGFyZ2V0KSAmJlxuICAgICAgICB0eXBlb2YgcHJvcCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGNhY2hlZE1ldGhvZHMuZ2V0KHByb3ApKVxuICAgICAgICByZXR1cm4gY2FjaGVkTWV0aG9kcy5nZXQocHJvcCk7XG4gICAgY29uc3QgdGFyZ2V0RnVuY05hbWUgPSBwcm9wLnJlcGxhY2UoL0Zyb21JbmRleCQvLCAnJyk7XG4gICAgY29uc3QgdXNlSW5kZXggPSBwcm9wICE9PSB0YXJnZXRGdW5jTmFtZTtcbiAgICBjb25zdCBpc1dyaXRlID0gd3JpdGVNZXRob2RzLmluY2x1ZGVzKHRhcmdldEZ1bmNOYW1lKTtcbiAgICBpZiAoXG4gICAgLy8gQmFpbCBpZiB0aGUgdGFyZ2V0IGRvZXNuJ3QgZXhpc3Qgb24gdGhlIHRhcmdldC4gRWcsIGdldEFsbCBpc24ndCBpbiBFZGdlLlxuICAgICEodGFyZ2V0RnVuY05hbWUgaW4gKHVzZUluZGV4ID8gSURCSW5kZXggOiBJREJPYmplY3RTdG9yZSkucHJvdG90eXBlKSB8fFxuICAgICAgICAhKGlzV3JpdGUgfHwgcmVhZE1ldGhvZHMuaW5jbHVkZXModGFyZ2V0RnVuY05hbWUpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1ldGhvZCA9IGFzeW5jIGZ1bmN0aW9uIChzdG9yZU5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgLy8gaXNXcml0ZSA/ICdyZWFkd3JpdGUnIDogdW5kZWZpbmVkIGd6aXBwcyBiZXR0ZXIsIGJ1dCBmYWlscyBpbiBFZGdlIDooXG4gICAgICAgIGNvbnN0IHR4ID0gdGhpcy50cmFuc2FjdGlvbihzdG9yZU5hbWUsIGlzV3JpdGUgPyAncmVhZHdyaXRlJyA6ICdyZWFkb25seScpO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gdHguc3RvcmU7XG4gICAgICAgIGlmICh1c2VJbmRleClcbiAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5pbmRleChhcmdzLnNoaWZ0KCkpO1xuICAgICAgICAvLyBNdXN0IHJlamVjdCBpZiBvcCByZWplY3RzLlxuICAgICAgICAvLyBJZiBpdCdzIGEgd3JpdGUgb3BlcmF0aW9uLCBtdXN0IHJlamVjdCBpZiB0eC5kb25lIHJlamVjdHMuXG4gICAgICAgIC8vIE11c3QgcmVqZWN0IHdpdGggb3AgcmVqZWN0aW9uIGZpcnN0LlxuICAgICAgICAvLyBNdXN0IHJlc29sdmUgd2l0aCBvcCB2YWx1ZS5cbiAgICAgICAgLy8gTXVzdCBoYW5kbGUgYm90aCBwcm9taXNlcyAobm8gdW5oYW5kbGVkIHJlamVjdGlvbnMpXG4gICAgICAgIHJldHVybiAoYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICAgICAgdGFyZ2V0W3RhcmdldEZ1bmNOYW1lXSguLi5hcmdzKSxcbiAgICAgICAgICAgIGlzV3JpdGUgJiYgdHguZG9uZSxcbiAgICAgICAgXSkpWzBdO1xuICAgIH07XG4gICAgY2FjaGVkTWV0aG9kcy5zZXQocHJvcCwgbWV0aG9kKTtcbiAgICByZXR1cm4gbWV0aG9kO1xufVxucmVwbGFjZVRyYXBzKChvbGRUcmFwcykgPT4gKHtcbiAgICAuLi5vbGRUcmFwcyxcbiAgICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PiBnZXRNZXRob2QodGFyZ2V0LCBwcm9wKSB8fCBvbGRUcmFwcy5nZXQodGFyZ2V0LCBwcm9wLCByZWNlaXZlciksXG4gICAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PiAhIWdldE1ldGhvZCh0YXJnZXQsIHByb3ApIHx8IG9sZFRyYXBzLmhhcyh0YXJnZXQsIHByb3ApLFxufSkpO1xuXG5leHBvcnQgeyBkZWxldGVEQiwgb3BlbkRCIH07XG4iLCJjb25zdCBpbnN0YW5jZU9mQW55ID0gKG9iamVjdCwgY29uc3RydWN0b3JzKSA9PiBjb25zdHJ1Y3RvcnMuc29tZSgoYykgPT4gb2JqZWN0IGluc3RhbmNlb2YgYyk7XG5cbmxldCBpZGJQcm94eWFibGVUeXBlcztcbmxldCBjdXJzb3JBZHZhbmNlTWV0aG9kcztcbi8vIFRoaXMgaXMgYSBmdW5jdGlvbiB0byBwcmV2ZW50IGl0IHRocm93aW5nIHVwIGluIG5vZGUgZW52aXJvbm1lbnRzLlxuZnVuY3Rpb24gZ2V0SWRiUHJveHlhYmxlVHlwZXMoKSB7XG4gICAgcmV0dXJuIChpZGJQcm94eWFibGVUeXBlcyB8fFxuICAgICAgICAoaWRiUHJveHlhYmxlVHlwZXMgPSBbXG4gICAgICAgICAgICBJREJEYXRhYmFzZSxcbiAgICAgICAgICAgIElEQk9iamVjdFN0b3JlLFxuICAgICAgICAgICAgSURCSW5kZXgsXG4gICAgICAgICAgICBJREJDdXJzb3IsXG4gICAgICAgICAgICBJREJUcmFuc2FjdGlvbixcbiAgICAgICAgXSkpO1xufVxuLy8gVGhpcyBpcyBhIGZ1bmN0aW9uIHRvIHByZXZlbnQgaXQgdGhyb3dpbmcgdXAgaW4gbm9kZSBlbnZpcm9ubWVudHMuXG5mdW5jdGlvbiBnZXRDdXJzb3JBZHZhbmNlTWV0aG9kcygpIHtcbiAgICByZXR1cm4gKGN1cnNvckFkdmFuY2VNZXRob2RzIHx8XG4gICAgICAgIChjdXJzb3JBZHZhbmNlTWV0aG9kcyA9IFtcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuYWR2YW5jZSxcbiAgICAgICAgICAgIElEQkN1cnNvci5wcm90b3R5cGUuY29udGludWUsXG4gICAgICAgICAgICBJREJDdXJzb3IucHJvdG90eXBlLmNvbnRpbnVlUHJpbWFyeUtleSxcbiAgICAgICAgXSkpO1xufVxuY29uc3QgY3Vyc29yUmVxdWVzdE1hcCA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB0cmFuc2FjdGlvbkRvbmVNYXAgPSBuZXcgV2Vha01hcCgpO1xuY29uc3QgdHJhbnNhY3Rpb25TdG9yZU5hbWVzTWFwID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHRyYW5zZm9ybUNhY2hlID0gbmV3IFdlYWtNYXAoKTtcbmNvbnN0IHJldmVyc2VUcmFuc2Zvcm1DYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBwcm9taXNpZnlSZXF1ZXN0KHJlcXVlc3QpIHtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCB1bmxpc3RlbiA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3QucmVtb3ZlRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIHN1Y2Nlc3MpO1xuICAgICAgICAgICAgcmVxdWVzdC5yZW1vdmVFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VjY2VzcyA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUod3JhcChyZXF1ZXN0LnJlc3VsdCkpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QocmVxdWVzdC5lcnJvcik7XG4gICAgICAgICAgICB1bmxpc3RlbigpO1xuICAgICAgICB9O1xuICAgICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBzdWNjZXNzKTtcbiAgICAgICAgcmVxdWVzdC5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGVycm9yKTtcbiAgICB9KTtcbiAgICBwcm9taXNlXG4gICAgICAgIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyBTaW5jZSBjdXJzb3JpbmcgcmV1c2VzIHRoZSBJREJSZXF1ZXN0ICgqc2lnaCopLCB3ZSBjYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgICAgIC8vIChzZWUgd3JhcEZ1bmN0aW9uKS5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCQ3Vyc29yKSB7XG4gICAgICAgICAgICBjdXJzb3JSZXF1ZXN0TWFwLnNldCh2YWx1ZSwgcmVxdWVzdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2F0Y2hpbmcgdG8gYXZvaWQgXCJVbmNhdWdodCBQcm9taXNlIGV4Y2VwdGlvbnNcIlxuICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7IH0pO1xuICAgIC8vIFRoaXMgbWFwcGluZyBleGlzdHMgaW4gcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGJ1dCBkb2Vzbid0IGRvZXNuJ3QgZXhpc3QgaW4gdHJhbnNmb3JtQ2FjaGUuIFRoaXNcbiAgICAvLyBpcyBiZWNhdXNlIHdlIGNyZWF0ZSBtYW55IHByb21pc2VzIGZyb20gYSBzaW5nbGUgSURCUmVxdWVzdC5cbiAgICByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuc2V0KHByb21pc2UsIHJlcXVlc3QpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gY2FjaGVEb25lUHJvbWlzZUZvclRyYW5zYWN0aW9uKHR4KSB7XG4gICAgLy8gRWFybHkgYmFpbCBpZiB3ZSd2ZSBhbHJlYWR5IGNyZWF0ZWQgYSBkb25lIHByb21pc2UgZm9yIHRoaXMgdHJhbnNhY3Rpb24uXG4gICAgaWYgKHRyYW5zYWN0aW9uRG9uZU1hcC5oYXModHgpKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgZG9uZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgdW5saXN0ZW4gPSAoKSA9PiB7XG4gICAgICAgICAgICB0eC5yZW1vdmVFdmVudExpc3RlbmVyKCdjb21wbGV0ZScsIGNvbXBsZXRlKTtcbiAgICAgICAgICAgIHR4LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBlcnJvcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlID0gKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICByZWplY3QodHguZXJyb3IgfHwgbmV3IERPTUV4Y2VwdGlvbignQWJvcnRFcnJvcicsICdBYm9ydEVycm9yJykpO1xuICAgICAgICAgICAgdW5saXN0ZW4oKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHguYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBjb21wbGV0ZSk7XG4gICAgICAgIHR4LmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB0eC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGVycm9yKTtcbiAgICB9KTtcbiAgICAvLyBDYWNoZSBpdCBmb3IgbGF0ZXIgcmV0cmlldmFsLlxuICAgIHRyYW5zYWN0aW9uRG9uZU1hcC5zZXQodHgsIGRvbmUpO1xufVxubGV0IGlkYlByb3h5VHJhcHMgPSB7XG4gICAgZ2V0KHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBTcGVjaWFsIGhhbmRsaW5nIGZvciB0cmFuc2FjdGlvbi5kb25lLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdkb25lJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNhY3Rpb25Eb25lTWFwLmdldCh0YXJnZXQpO1xuICAgICAgICAgICAgLy8gUG9seWZpbGwgZm9yIG9iamVjdFN0b3JlTmFtZXMgYmVjYXVzZSBvZiBFZGdlLlxuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdvYmplY3RTdG9yZU5hbWVzJykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQub2JqZWN0U3RvcmVOYW1lcyB8fCB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuZ2V0KHRhcmdldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYWtlIHR4LnN0b3JlIHJldHVybiB0aGUgb25seSBzdG9yZSBpbiB0aGUgdHJhbnNhY3Rpb24sIG9yIHVuZGVmaW5lZCBpZiB0aGVyZSBhcmUgbWFueS5cbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnc3RvcmUnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY2VpdmVyLm9iamVjdFN0b3JlTmFtZXNbMV1cbiAgICAgICAgICAgICAgICAgICAgPyB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgOiByZWNlaXZlci5vYmplY3RTdG9yZShyZWNlaXZlci5vYmplY3RTdG9yZU5hbWVzWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBFbHNlIHRyYW5zZm9ybSB3aGF0ZXZlciB3ZSBnZXQgYmFjay5cbiAgICAgICAgcmV0dXJuIHdyYXAodGFyZ2V0W3Byb3BdKTtcbiAgICB9LFxuICAgIHNldCh0YXJnZXQsIHByb3AsIHZhbHVlKSB7XG4gICAgICAgIHRhcmdldFtwcm9wXSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuICAgIGhhcyh0YXJnZXQsIHByb3ApIHtcbiAgICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElEQlRyYW5zYWN0aW9uICYmXG4gICAgICAgICAgICAocHJvcCA9PT0gJ2RvbmUnIHx8IHByb3AgPT09ICdzdG9yZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcHJvcCBpbiB0YXJnZXQ7XG4gICAgfSxcbn07XG5mdW5jdGlvbiByZXBsYWNlVHJhcHMoY2FsbGJhY2spIHtcbiAgICBpZGJQcm94eVRyYXBzID0gY2FsbGJhY2soaWRiUHJveHlUcmFwcyk7XG59XG5mdW5jdGlvbiB3cmFwRnVuY3Rpb24oZnVuYykge1xuICAgIC8vIER1ZSB0byBleHBlY3RlZCBvYmplY3QgZXF1YWxpdHkgKHdoaWNoIGlzIGVuZm9yY2VkIGJ5IHRoZSBjYWNoaW5nIGluIGB3cmFwYCksIHdlXG4gICAgLy8gb25seSBjcmVhdGUgb25lIG5ldyBmdW5jIHBlciBmdW5jLlxuICAgIC8vIEVkZ2UgZG9lc24ndCBzdXBwb3J0IG9iamVjdFN0b3JlTmFtZXMgKGJvb28pLCBzbyB3ZSBwb2x5ZmlsbCBpdCBoZXJlLlxuICAgIGlmIChmdW5jID09PSBJREJEYXRhYmFzZS5wcm90b3R5cGUudHJhbnNhY3Rpb24gJiZcbiAgICAgICAgISgnb2JqZWN0U3RvcmVOYW1lcycgaW4gSURCVHJhbnNhY3Rpb24ucHJvdG90eXBlKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHN0b3JlTmFtZXMsIC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIGNvbnN0IHR4ID0gZnVuYy5jYWxsKHVud3JhcCh0aGlzKSwgc3RvcmVOYW1lcywgLi4uYXJncyk7XG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAuc2V0KHR4LCBzdG9yZU5hbWVzLnNvcnQgPyBzdG9yZU5hbWVzLnNvcnQoKSA6IFtzdG9yZU5hbWVzXSk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcCh0eCk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIEN1cnNvciBtZXRob2RzIGFyZSBzcGVjaWFsLCBhcyB0aGUgYmVoYXZpb3VyIGlzIGEgbGl0dGxlIG1vcmUgZGlmZmVyZW50IHRvIHN0YW5kYXJkIElEQi4gSW5cbiAgICAvLyBJREIsIHlvdSBhZHZhbmNlIHRoZSBjdXJzb3IgYW5kIHdhaXQgZm9yIGEgbmV3ICdzdWNjZXNzJyBvbiB0aGUgSURCUmVxdWVzdCB0aGF0IGdhdmUgeW91IHRoZVxuICAgIC8vIGN1cnNvci4gSXQncyBraW5kYSBsaWtlIGEgcHJvbWlzZSB0aGF0IGNhbiByZXNvbHZlIHdpdGggbWFueSB2YWx1ZXMuIFRoYXQgZG9lc24ndCBtYWtlIHNlbnNlXG4gICAgLy8gd2l0aCByZWFsIHByb21pc2VzLCBzbyBlYWNoIGFkdmFuY2UgbWV0aG9kcyByZXR1cm5zIGEgbmV3IHByb21pc2UgZm9yIHRoZSBjdXJzb3Igb2JqZWN0LCBvclxuICAgIC8vIHVuZGVmaW5lZCBpZiB0aGUgZW5kIG9mIHRoZSBjdXJzb3IgaGFzIGJlZW4gcmVhY2hlZC5cbiAgICBpZiAoZ2V0Q3Vyc29yQWR2YW5jZU1ldGhvZHMoKS5pbmNsdWRlcyhmdW5jKSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIENhbGxpbmcgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIHdpdGggdGhlIHByb3h5IGFzICd0aGlzJyBjYXVzZXMgSUxMRUdBTCBJTlZPQ0FUSU9OLCBzbyB3ZSB1c2VcbiAgICAgICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgICAgICBmdW5jLmFwcGx5KHVud3JhcCh0aGlzKSwgYXJncyk7XG4gICAgICAgICAgICByZXR1cm4gd3JhcChjdXJzb3JSZXF1ZXN0TWFwLmdldCh0aGlzKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyBDYWxsaW5nIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm94eSBhcyAndGhpcycgY2F1c2VzIElMTEVHQUwgSU5WT0NBVElPTiwgc28gd2UgdXNlXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBvYmplY3QuXG4gICAgICAgIHJldHVybiB3cmFwKGZ1bmMuYXBwbHkodW53cmFwKHRoaXMpLCBhcmdzKSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICByZXR1cm4gd3JhcEZ1bmN0aW9uKHZhbHVlKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgcmV0dXJuLCBpdCBqdXN0IGNyZWF0ZXMgYSAnZG9uZScgcHJvbWlzZSBmb3IgdGhlIHRyYW5zYWN0aW9uLFxuICAgIC8vIHdoaWNoIGlzIGxhdGVyIHJldHVybmVkIGZvciB0cmFuc2FjdGlvbi5kb25lIChzZWUgaWRiT2JqZWN0SGFuZGxlcikuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCVHJhbnNhY3Rpb24pXG4gICAgICAgIGNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbih2YWx1ZSk7XG4gICAgaWYgKGluc3RhbmNlT2ZBbnkodmFsdWUsIGdldElkYlByb3h5YWJsZVR5cGVzKCkpKVxuICAgICAgICByZXR1cm4gbmV3IFByb3h5KHZhbHVlLCBpZGJQcm94eVRyYXBzKTtcbiAgICAvLyBSZXR1cm4gdGhlIHNhbWUgdmFsdWUgYmFjayBpZiB3ZSdyZSBub3QgZ29pbmcgdG8gdHJhbnNmb3JtIGl0LlxuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHdyYXAodmFsdWUpIHtcbiAgICAvLyBXZSBzb21ldGltZXMgZ2VuZXJhdGUgbXVsdGlwbGUgcHJvbWlzZXMgZnJvbSBhIHNpbmdsZSBJREJSZXF1ZXN0IChlZyB3aGVuIGN1cnNvcmluZyksIGJlY2F1c2VcbiAgICAvLyBJREIgaXMgd2VpcmQgYW5kIGEgc2luZ2xlIElEQlJlcXVlc3QgY2FuIHlpZWxkIG1hbnkgcmVzcG9uc2VzLCBzbyB0aGVzZSBjYW4ndCBiZSBjYWNoZWQuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgSURCUmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHByb21pc2lmeVJlcXVlc3QodmFsdWUpO1xuICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgdHJhbnNmb3JtZWQgdGhpcyB2YWx1ZSBiZWZvcmUsIHJldXNlIHRoZSB0cmFuc2Zvcm1lZCB2YWx1ZS5cbiAgICAvLyBUaGlzIGlzIGZhc3RlciwgYnV0IGl0IGFsc28gcHJvdmlkZXMgb2JqZWN0IGVxdWFsaXR5LlxuICAgIGlmICh0cmFuc2Zvcm1DYWNoZS5oYXModmFsdWUpKVxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHRyYW5zZm9ybUNhY2hhYmxlVmFsdWUodmFsdWUpO1xuICAgIC8vIE5vdCBhbGwgdHlwZXMgYXJlIHRyYW5zZm9ybWVkLlxuICAgIC8vIFRoZXNlIG1heSBiZSBwcmltaXRpdmUgdHlwZXMsIHNvIHRoZXkgY2FuJ3QgYmUgV2Vha01hcCBrZXlzLlxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgdHJhbnNmb3JtQ2FjaGUuc2V0KHZhbHVlLCBuZXdWYWx1ZSk7XG4gICAgICAgIHJldmVyc2VUcmFuc2Zvcm1DYWNoZS5zZXQobmV3VmFsdWUsIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xufVxuY29uc3QgdW53cmFwID0gKHZhbHVlKSA9PiByZXZlcnNlVHJhbnNmb3JtQ2FjaGUuZ2V0KHZhbHVlKTtcblxuZXhwb3J0IHsgcmV2ZXJzZVRyYW5zZm9ybUNhY2hlIGFzIGEsIGluc3RhbmNlT2ZBbnkgYXMgaSwgcmVwbGFjZVRyYXBzIGFzIHIsIHVud3JhcCBhcyB1LCB3cmFwIGFzIHcgfTtcbiIsInRyeXtzZWxmW1wid29ya2JveDp3aW5kb3c6NC4zLjFcIl0mJl8oKX1jYXRjaChuKXt9dmFyIG49ZnVuY3Rpb24obix0KXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24oaSl7dmFyIGU9bmV3IE1lc3NhZ2VDaGFubmVsO2UucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKG4pe3JldHVybiBpKG4uZGF0YSl9LG4ucG9zdE1lc3NhZ2UodCxbZS5wb3J0Ml0pfSl9O2Z1bmN0aW9uIHQobix0KXtmb3IodmFyIGk9MDtpPHQubGVuZ3RoO2krKyl7dmFyIGU9dFtpXTtlLmVudW1lcmFibGU9ZS5lbnVtZXJhYmxlfHwhMSxlLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBlJiYoZS53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KG4sZS5rZXksZSl9fWZ1bmN0aW9uIGkobil7aWYodm9pZCAwPT09bil0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7cmV0dXJuIG59dHJ5e3NlbGZbXCJ3b3JrYm94OmNvcmU6NC4zLjFcIl0mJl8oKX1jYXRjaChuKXt9dmFyIGU9ZnVuY3Rpb24oKXt2YXIgbj10aGlzO3RoaXMucHJvbWlzZT1uZXcgUHJvbWlzZShmdW5jdGlvbih0LGkpe24ucmVzb2x2ZT10LG4ucmVqZWN0PWl9KX0scj1mdW5jdGlvbihuLHQpe3JldHVybiBuZXcgVVJMKG4sbG9jYXRpb24pLmhyZWY9PT1uZXcgVVJMKHQsbG9jYXRpb24pLmhyZWZ9LG89ZnVuY3Rpb24obix0KXtPYmplY3QuYXNzaWduKHRoaXMsdCx7dHlwZTpufSl9O2Z1bmN0aW9uIHUobil7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGk9MDtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKXRbaV09YXJndW1lbnRzW2ldO3RyeXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG4uYXBwbHkodGhpcyx0KSl9Y2F0Y2gobil7cmV0dXJuIFByb21pc2UucmVqZWN0KG4pfX19ZnVuY3Rpb24gYShuLHQsaSl7cmV0dXJuIGk/dD90KG4pOm46KG4mJm4udGhlbnx8KG49UHJvbWlzZS5yZXNvbHZlKG4pKSx0P24udGhlbih0KTpuKX1mdW5jdGlvbiBzKCl7fXZhciBjPWZ1bmN0aW9uKGMpe3ZhciBmLGg7ZnVuY3Rpb24gdihuLHQpe3ZhciByO3JldHVybiB2b2lkIDA9PT10JiYodD17fSksKHI9Yy5jYWxsKHRoaXMpfHx0aGlzKS50PW4sci5pPXQsci5vPTAsci51PW5ldyBlLHIucz1uZXcgZSxyLmg9bmV3IGUsci52PXIudi5iaW5kKGkoaShyKSkpLHIubD1yLmwuYmluZChpKGkocikpKSxyLmc9ci5nLmJpbmQoaShpKHIpKSksci5tPXIubS5iaW5kKGkoaShyKSkpLHJ9aD1jLChmPXYpLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGgucHJvdG90eXBlKSxmLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1mLGYuX19wcm90b19fPWg7dmFyIGwsdyxnLGQ9di5wcm90b3R5cGU7cmV0dXJuIGQucmVnaXN0ZXI9dShmdW5jdGlvbihuKXt2YXIgdCxpLGU9dGhpcyx1PSh2b2lkIDA9PT1uP3t9Om4pLmltbWVkaWF0ZSxjPXZvaWQgMCE9PXUmJnU7cmV0dXJuIHQ9ZnVuY3Rpb24oKXtyZXR1cm4gZS5wPUJvb2xlYW4obmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlciksZS5QPWUuUigpLGEoZS5rKCksZnVuY3Rpb24obil7ZS5CPW4sZS5QJiYoZS5PPWUuUCxlLnMucmVzb2x2ZShlLlApLGUuaC5yZXNvbHZlKGUuUCksZS5qKGUuUCksZS5QLmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLGUubCx7b25jZTohMH0pKTt2YXIgdD1lLkIud2FpdGluZztyZXR1cm4gdCYmcih0LnNjcmlwdFVSTCxlLnQpJiYoZS5PPXQsUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpe2UuZGlzcGF0Y2hFdmVudChuZXcgbyhcIndhaXRpbmdcIix7c3c6dCx3YXNXYWl0aW5nQmVmb3JlUmVnaXN0ZXI6ITB9KSl9KSksZS5PJiZlLnUucmVzb2x2ZShlLk8pLGUuQi5hZGRFdmVudExpc3RlbmVyKFwidXBkYXRlZm91bmRcIixlLmcpLG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJjb250cm9sbGVyY2hhbmdlXCIsZS5tLHtvbmNlOiEwfSksXCJCcm9hZGNhc3RDaGFubmVsXCJpbiBzZWxmJiYoZS5DPW5ldyBCcm9hZGNhc3RDaGFubmVsKFwid29ya2JveFwiKSxlLkMuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIixlLnYpKSxuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGUudiksZS5CfSl9LChpPWZ1bmN0aW9uKCl7aWYoIWMmJlwiY29tcGxldGVcIiE9PWRvY3VtZW50LnJlYWR5U3RhdGUpcmV0dXJuIGZ1bmN0aW9uKG4sdCl7aWYoIXQpcmV0dXJuIG4mJm4udGhlbj9uLnRoZW4ocyk6UHJvbWlzZS5yZXNvbHZlKCl9KG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4pe3JldHVybiBhZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLG4pfSkpfSgpKSYmaS50aGVuP2kudGhlbih0KTp0KGkpfSksZC5nZXRTVz11KGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuT3x8dGhpcy51LnByb21pc2V9KSxkLm1lc3NhZ2VTVz11KGZ1bmN0aW9uKHQpe3JldHVybiBhKHRoaXMuZ2V0U1coKSxmdW5jdGlvbihpKXtyZXR1cm4gbihpLHQpfSl9KSxkLlI9ZnVuY3Rpb24oKXt2YXIgbj1uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyO2lmKG4mJnIobi5zY3JpcHRVUkwsdGhpcy50KSlyZXR1cm4gbn0sZC5rPXUoZnVuY3Rpb24oKXt2YXIgbj10aGlzO3JldHVybiBmdW5jdGlvbihuLHQpe3RyeXt2YXIgaT1uKCl9Y2F0Y2gobil7cmV0dXJuIHQobil9cmV0dXJuIGkmJmkudGhlbj9pLnRoZW4odm9pZCAwLHQpOml9KGZ1bmN0aW9uKCl7cmV0dXJuIGEobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIucmVnaXN0ZXIobi50LG4uaSksZnVuY3Rpb24odCl7cmV0dXJuIG4uTD1wZXJmb3JtYW5jZS5ub3coKSx0fSl9LGZ1bmN0aW9uKG4pe3Rocm93IG59KX0pLGQuaj1mdW5jdGlvbih0KXtuKHQse3R5cGU6XCJXSU5ET1dfUkVBRFlcIixtZXRhOlwid29ya2JveC13aW5kb3dcIn0pfSxkLmc9ZnVuY3Rpb24oKXt2YXIgbj10aGlzLkIuaW5zdGFsbGluZzt0aGlzLm8+MHx8IXIobi5zY3JpcHRVUkwsdGhpcy50KXx8cGVyZm9ybWFuY2Uubm93KCk+dGhpcy5MKzZlND8odGhpcy5XPW4sdGhpcy5CLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ1cGRhdGVmb3VuZFwiLHRoaXMuZykpOih0aGlzLk89bix0aGlzLnUucmVzb2x2ZShuKSksKyt0aGlzLm8sbi5hZGRFdmVudExpc3RlbmVyKFwic3RhdGVjaGFuZ2VcIix0aGlzLmwpfSxkLmw9ZnVuY3Rpb24obil7dmFyIHQ9dGhpcyxpPW4udGFyZ2V0LGU9aS5zdGF0ZSxyPWk9PT10aGlzLlcsdT1yP1wiZXh0ZXJuYWxcIjpcIlwiLGE9e3N3Omksb3JpZ2luYWxFdmVudDpufTshciYmdGhpcy5wJiYoYS5pc1VwZGF0ZT0hMCksdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBvKHUrZSxhKSksXCJpbnN0YWxsZWRcIj09PWU/dGhpcy5fPXNldFRpbWVvdXQoZnVuY3Rpb24oKXtcImluc3RhbGxlZFwiPT09ZSYmdC5CLndhaXRpbmc9PT1pJiZ0LmRpc3BhdGNoRXZlbnQobmV3IG8odStcIndhaXRpbmdcIixhKSl9LDIwMCk6XCJhY3RpdmF0aW5nXCI9PT1lJiYoY2xlYXJUaW1lb3V0KHRoaXMuXykscnx8dGhpcy5zLnJlc29sdmUoaSkpfSxkLm09ZnVuY3Rpb24obil7dmFyIHQ9dGhpcy5PO3Q9PT1uYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyJiYodGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBvKFwiY29udHJvbGxpbmdcIix7c3c6dCxvcmlnaW5hbEV2ZW50Om59KSksdGhpcy5oLnJlc29sdmUodCkpfSxkLnY9ZnVuY3Rpb24obil7dmFyIHQ9bi5kYXRhO3RoaXMuZGlzcGF0Y2hFdmVudChuZXcgbyhcIm1lc3NhZ2VcIix7ZGF0YTp0LG9yaWdpbmFsRXZlbnQ6bn0pKX0sbD12LCh3PVt7a2V5OlwiYWN0aXZlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucy5wcm9taXNlfX0se2tleTpcImNvbnRyb2xsaW5nXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaC5wcm9taXNlfX1dKSYmdChsLnByb3RvdHlwZSx3KSxnJiZ0KGwsZyksdn0oZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dGhpcy5EPXt9fXZhciB0PW4ucHJvdG90eXBlO3JldHVybiB0LmFkZEV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLlQobikuYWRkKHQpfSx0LnJlbW92ZUV2ZW50TGlzdGVuZXI9ZnVuY3Rpb24obix0KXt0aGlzLlQobikuZGVsZXRlKHQpfSx0LmRpc3BhdGNoRXZlbnQ9ZnVuY3Rpb24obil7bi50YXJnZXQ9dGhpcyx0aGlzLlQobi50eXBlKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0KG4pfSl9LHQuVD1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5EW25dPXRoaXMuRFtuXXx8bmV3IFNldH0sbn0oKSk7ZXhwb3J0e2MgYXMgV29ya2JveCxuIGFzIG1lc3NhZ2VTV307XG4vLyMgc291cmNlTWFwcGluZ1VSTD13b3JrYm94LXdpbmRvdy5wcm9kLmVzNS5tanMubWFwXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgZ2V0RGF0YSwgRGF0YU1vZGFsLCBjdXN0b21Gb250cyB9IGZyb20gXCJAZGF0YVwiO1xyXG5pbXBvcnQgeyBTY2VuZUhhbmRsZXIgfSBmcm9tIFwiQHNjZW5lSGFuZGxlclwiO1xyXG5pbXBvcnQgeyBBVURJT19VUkxfUFJFTE9BRCwgSXNDYWNoZWQgfSBmcm9tIFwiQGNvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBXb3JrYm94IH0gZnJvbSBcIndvcmtib3gtd2luZG93XCI7XHJcbmltcG9ydCB7IEZpcmViYXNlSW50ZWdyYXRpb24gfSBmcm9tIFwiLi9zcmMvRmlyZWJhc2UvZmlyZWJhc2UtaW50ZWdyYXRpb25cIjtcclxuaW1wb3J0IHsgVXRpbHMsIFZJU0lCSUxJVFlfQ0hBTkdFLCBEZWJ1Z2dlciwgbGFuZywgcHNldWRvSWQsIGlzRG9jdW1lbnRWaXNpYmxlLCB9IGZyb20gXCJAY29tbW9uXCI7XHJcbmltcG9ydCB7IEF1ZGlvUGxheWVyIH0gZnJvbSBcIkBjb21wb25lbnRzXCI7XHJcbmltcG9ydCB7IFVSTCB9IGZyb20gXCJAZGF0YVwiO1xyXG5jbGFzcyBBcHAge1xyXG4gICAgY2FudmFzO1xyXG4gICAgdmVyc2lvbkluZm9FbGVtZW50O1xyXG4gICAgbGFuZztcclxuICAgIGlzX2NhY2hlZDtcclxuICAgIHByb2dyZXNzQmFyO1xyXG4gICAgcHJvZ3Jlc3NCYXJDb250YWluZXI7XHJcbiAgICBjaGFubmVsO1xyXG4gICAgc2NlbmVIYW5kbGVyO1xyXG4gICAgbG9hZGluZ0VsZW1lbnQ7XHJcbiAgICBtYWpWZXJzaW9uO1xyXG4gICAgbWluVmVyc2lvbjtcclxuICAgIGRhdGFNb2RhbDtcclxuICAgIHN0YXJ0U2Vzc2lvblRpbWU7XHJcbiAgICB0aXRsZVRleHRFbGVtZW50O1xyXG4gICAgZmVlZEJhY2tUZXh0RWxlbWVudDtcclxuICAgIGN1cnJlbnRQcm9ncmVzcztcclxuICAgIGZpcmViYXNlSW50ZWdyYXRpb247XHJcbiAgICBjb25zdHJ1Y3RvcihsYW5nKSB7XHJcbiAgICAgICAgdGhpcy5sYW5nID0gbGFuZztcclxuICAgICAgICB0aGlzLmN1cnJlbnRQcm9ncmVzcyA9IDEwOyAvLyBJbml0aWFsaXplIHByb2dyZXNzIHRvIDBcclxuICAgICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IG5ldyBCcm9hZGNhc3RDaGFubmVsKFwibXktY2hhbm5lbFwiKTtcclxuICAgICAgICB0aGlzLnByb2dyZXNzQmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9ncmVzcy1iYXJcIik7XHJcbiAgICAgICAgdGhpcy50aXRsZVRleHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKTtcclxuICAgICAgICB0aGlzLmZlZWRCYWNrVGV4dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZlZWRiYWNrLXRleHRcIik7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJvZ3Jlc3MtYmFyLWNvbnRhaW5lclwiKTtcclxuICAgICAgICB0aGlzLnZlcnNpb25JbmZvRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmVyc2lvbi1pbmZvLWlkXCIpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImxvYWRpbmctc2NyZWVuXCIpO1xyXG4gICAgICAgIHRoaXMuaXNfY2FjaGVkID0gdGhpcy5pbml0aWFsaXplQ2FjaGVkRGF0YSgpO1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbiA9IG5ldyBGaXJlYmFzZUludGVncmF0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5zdGFydFNlc3Npb25UaW1lID0gMDtcclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgICAgICB0aGlzLmNoYW5uZWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVTZXJ2aWNlV29ya2VyTWVzc2FnZSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5oYW5kbGVCZWZvcmVVbmxvYWQpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5oYW5kbGVSZXNpemUuYmluZCh0aGlzKSk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBpbml0KCkge1xyXG4gICAgICAgIGNvbnN0IGZvbnQgPSBhd2FpdCBVdGlscy5nZXRMYW5ndWFnZVNwZWNpZmljRm9udCh0aGlzLmxhbmcpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZEFuZENhY2hlRm9udChmb250LCBgLi9hc3NldHMvZm9udHMvJHtmb250fS50dGZgKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnByZWxvYWRHYW1lQXVkaW9zKCk7XHJcbiAgICAgICAgdGhpcy5oYW5kbGVMb2FkaW5nU2NyZWVuKCk7XHJcbiAgICAgICAgdGhpcy5zZXR1cENhbnZhcygpO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBnZXREYXRhKCk7XHJcbiAgICAgICAgdGhpcy5tYWpWZXJzaW9uID0gZGF0YS5tYWp2ZXJzaW9uO1xyXG4gICAgICAgIHRoaXMubWluVmVyc2lvbiA9IGRhdGEubWludmVyc2lvbjtcclxuICAgICAgICB0aGlzLmRhdGFNb2RhbCA9IHRoaXMuY3JlYXRlRGF0YU1vZGFsKGRhdGEpO1xyXG4gICAgICAgIHRoaXMuZ2xvYmFsSW5pdGlhbGl6YXRpb24oZGF0YSk7XHJcbiAgICAgICAgdGhpcy5sb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlc2l6ZSh0aGlzLmRhdGFNb2RhbCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfY2FjaGVkLmhhcyh0aGlzLmxhbmcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQ2FjaGVkU2NlbmFyaW8odGhpcy5kYXRhTW9kYWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZ2lzdGVyV29ya2JveCgpO1xyXG4gICAgICAgIHRoaXMubG9hZFRpdGxlRmVlZGJhY2tDdXN0b21Gb250KCk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBsb2FkVGl0bGVGZWVkYmFja0N1c3RvbUZvbnQoKSB7XHJcbiAgICAgICAgY29uc3QgY3VzdG9tVGl0bGVGZWVkYmFja0ZvbnQgPSBjdXN0b21Gb250c1t0aGlzLmxhbmddIHx8IGN1c3RvbUZvbnRzLmRlZmF1bHQ7XHJcbiAgICAgICAgY29uc3QgZm9udEZhbWlseSA9IGAnJHtjdXN0b21UaXRsZUZlZWRiYWNrRm9udH0nLCBzYW5zLXNlcmlmYDtcclxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRBbmRDYWNoZUZvbnQoY3VzdG9tVGl0bGVGZWVkYmFja0ZvbnQsIGAuL2Fzc2V0cy9mb250cy8ke2N1c3RvbVRpdGxlRmVlZGJhY2tGb250fS50dGZgKTtcclxuICAgICAgICBbdGhpcy50aXRsZVRleHRFbGVtZW50LCB0aGlzLmZlZWRCYWNrVGV4dEVsZW1lbnRdLmZvckVhY2goZWxlbWVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBsb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50KCkge1xyXG4gICAgICAgIGxldCBsYXN0U2Vzc2lvbkVuZFRpbWUgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImxhc3RTZXNzaW9uRW5kVGltZVwiKTtcclxuICAgICAgICBsZXQgbGFzdFRpbWUgPSAwO1xyXG4gICAgICAgIHRoaXMuc3RhcnRTZXNzaW9uVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgIGlmIChsYXN0U2Vzc2lvbkVuZFRpbWUpIHtcclxuICAgICAgICAgICAgbGV0IHBhcnNlZFRpbWVzdGFtcCA9IHBhcnNlSW50KGxhc3RTZXNzaW9uRW5kVGltZSk7XHJcbiAgICAgICAgICAgIGlmICghaXNOYU4ocGFyc2VkVGltZXN0YW1wKSkge1xyXG4gICAgICAgICAgICAgICAgbGFzdFRpbWUgPSBNYXRoLmFicyhuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHBhcnNlZFRpbWVzdGFtcCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZGF5c1NpbmNlTGFzdCA9IGxhc3RUaW1lID8gbGFzdFRpbWUgLyAoMTAwMCAqIDYwICogNjAgKiAyNCkgOiAwO1xyXG4gICAgICAgIGNvbnN0IHJvdW5kZWREYXlzU2luY2VMYXN0ID0gcGFyc2VGbG9hdChkYXlzU2luY2VMYXN0LnRvRml4ZWQoMykpO1xyXG4gICAgICAgIGNvbnN0IHNlc3Npb25TdGFydERhdGEgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiAhIXRoaXMubWFqVmVyc2lvbiAmJiAhIXRoaXMubWluVmVyc2lvblxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLm1halZlcnNpb24udG9TdHJpbmcoKSArIFwiLlwiICsgdGhpcy5taW5WZXJzaW9uLnRvU3RyaW5nKClcclxuICAgICAgICAgICAgICAgIDogXCJcIixcclxuICAgICAgICAgICAgZGF5c19zaW5jZV9sYXN0OiByb3VuZGVkRGF5c1NpbmNlTGFzdCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuZmlyZWJhc2VJbnRlZ3JhdGlvbi5zZW5kU2Vzc2lvblN0YXJ0RXZlbnQoc2Vzc2lvblN0YXJ0RGF0YSk7XHJcbiAgICB9XHJcbiAgICBsb2dTZXNzaW9uRW5kRmlyZWJhc2VFdmVudCgpIHtcclxuICAgICAgICBjb25zdCBzZXNzaW9uRW5kRGF0YSA9IHtcclxuICAgICAgICAgICAgY3JfdXNlcl9pZDogcHNldWRvSWQsXHJcbiAgICAgICAgICAgIGZ0bV9sYW5ndWFnZTogbGFuZyxcclxuICAgICAgICAgICAgcHJvZmlsZV9udW1iZXI6IDAsXHJcbiAgICAgICAgICAgIHZlcnNpb25fbnVtYmVyOiB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwsXHJcbiAgICAgICAgICAgIGpzb25fdmVyc2lvbl9udW1iZXI6ICEhdGhpcy5tYWpWZXJzaW9uICYmICEhdGhpcy5taW5WZXJzaW9uXHJcbiAgICAgICAgICAgICAgICA/IHRoaXMubWFqVmVyc2lvbi50b1N0cmluZygpICsgXCIuXCIgKyB0aGlzLm1pblZlcnNpb24udG9TdHJpbmcoKVxyXG4gICAgICAgICAgICAgICAgOiBcIlwiLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGhpcy5zdGFydFNlc3Npb25UaW1lKSAvIDEwMDAsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcImxhc3RTZXNzaW9uRW5kVGltZVwiLCBuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygpKTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZFNlc3Npb25FbmRFdmVudChzZXNzaW9uRW5kRGF0YSk7XHJcbiAgICB9XHJcbiAgICBpbml0aWFsaXplQ2FjaGVkRGF0YSgpIHtcclxuICAgICAgICBjb25zdCBzdG9yZWREYXRhID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oSXNDYWNoZWQpO1xyXG4gICAgICAgIHJldHVybiBzdG9yZWREYXRhID8gbmV3IE1hcChKU09OLnBhcnNlKHN0b3JlZERhdGEpKSA6IG5ldyBNYXAoKTtcclxuICAgIH1cclxuICAgIGFzeW5jIGxvYWRBbmRDYWNoZUZvbnQoZm9udE5hbWUsIGZvbnRQYXRoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSBhd2FpdCBjYWNoZXMub3BlbihcImZvbnRDYWNoZVwiKTtcclxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBjYWNoZS5tYXRjaChmb250UGF0aCk7XHJcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRSZXNwb25zZSA9IGF3YWl0IGZldGNoKGZvbnRQYXRoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvbnRCbG9iID0gYXdhaXQgZm9udFJlc3BvbnNlLmJsb2IoKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGNhY2hlLnB1dChmb250UGF0aCwgbmV3IFJlc3BvbnNlKGZvbnRCbG9iKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZm9udCA9IG5ldyBGb250RmFjZShmb250TmFtZSwgYHVybCgke2ZvbnRQYXRofSkgZm9ybWF0KCd0cnVldHlwZScpYCk7XHJcbiAgICAgICAgICAgIGF3YWl0IGZvbnQubG9hZCgpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5mb250cy5hZGQoZm9udCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmVycm9yKC4uLm9vX3R4KGAzMDYzODU1OTgwXzE2OF82XzE2OF82Ml8xMWAsIGBGYWlsZWQgdG8gbG9hZCBhbmQgY2FjaGUgZm9udDogJHtlcnJvcn1gKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZGluZ1NjcmVlbiA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc19jYWNoZWQuZ2V0KGxhbmcpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZGluZ0VsZW1lbnQuc3R5bGUuekluZGV4ID0gXCItMVwiO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRpbmdFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcm9ncmVzc0JhckNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCI7XHJcbiAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiO1xyXG4gICAgICAgICAgICB0aGlzLnByb2dyZXNzQmFyLnN0eWxlLndpZHRoID0gXCIxMCVcIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgYXN5bmMgcmVnaXN0ZXJXb3JrYm94KCkge1xyXG4gICAgICAgIGlmIChcInNlcnZpY2VXb3JrZXJcIiBpbiBuYXZpZ2F0b3IpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdiID0gbmV3IFdvcmtib3goXCIuL3N3LmpzXCIsIHt9KTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IHdiLnJlZ2lzdGVyKCk7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoYW5uZWwucG9zdE1lc3NhZ2UoeyBjb21tYW5kOiBcIkNhY2hlXCIsIGRhdGE6IHRoaXMubGFuZyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZldGNoKFVSTCArIFwiP2NhY2hlLWJ1c3Q9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDYWNoZS1Db250cm9sXCI6IFwibm8tc3RvcmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGU6IFwibm8tc3RvcmVcIixcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8gY29uc29sZS5lcnJvciguLi5vb190eChgMzA2Mzg1NTk4MF8yMDVfMTZfMjA3XzE3XzExYCwgXCJGYWlsZWQgdG8gZmV0Y2ggdGhlIGNvbnRlbnQgZmlsZSBmcm9tIHRoZSBzZXJ2ZXIhXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdDb250ZW50RmlsZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFoZWFkQ29udGVudFZlcnNpb24gPSBuZXdDb250ZW50RmlsZURhdGFbXCJtYWp2ZXJzaW9uXCJdICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvbnRlbnRGaWxlRGF0YVtcIm1pbnZlcnNpb25cIl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlZFZlcnNpb24gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInZlcnNpb25cIiArIGxhbmcudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2hlY2sgaGVyZSBmb3IgdGhlIGNvbnRlbnQgdmVyc2lvbiB1cGRhdGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZXJlJ3MgYSBuZXcgY29udGVudCB2ZXJzaW9uLCB3ZSBuZWVkIHRvIHJlbW92ZSB0aGUgY2FjaGVkIGNvbnRlbnQgYW5kIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBXZSBhcmUgY29tcGFyaW5nIGhlcmUgdGhlIGNvbnRlbnRWZXJzaW9uIHdpdGggdGhlIGFoZWFkQ29udGVudFZlcnNpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFoZWFkQ29udGVudFZlcnNpb24gJiYgY2FjaGVkVmVyc2lvbiAhPSBhaGVhZENvbnRlbnRWZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmxvZyguLi5vb19vbyhgMzA2Mzg1NTk4MF8yMjJfMTZfMjIyXzY5XzRgLCBcIkNvbnRlbnQgdmVyc2lvbiBtaXNtYXRjaCEgUmVsb2FkaW5nLi4uXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZWRJdGVtID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcImlzX2NhY2hlZFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmxvZyguLi5vb19vbyhgMzA2Mzg1NTk4MF8yMjRfMTZfMjI0XzUyXzRgLCBcImN1cnJlbnQgbGFuZyAgXCIgKyBsYW5nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2FjaGVkSXRlbSA9IGNhY2hlZEl0ZW0uZmlsdGVyKChlKSA9PiAhZS50b1N0cmluZygpLmluY2x1ZGVzKGxhbmcpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKElzQ2FjaGVkLCBKU09OLnN0cmluZ2lmeShuZXdDYWNoZWRJdGVtKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShcInZlcnNpb25cIiArIGxhbmcudG9Mb3dlckNhc2UoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDbGVhciB0aGUgY2FjaGUgZm9yIHRodCBwYXJ0aWN1bGFyIGNvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlcy5kZWxldGUobGFuZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVVwZGF0ZUZvdW5kTWVzc2FnZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBlc2xpbnQtZGlzYWJsZSAqLyBjb25zb2xlLmVycm9yKC4uLm9vX3R4KGAzMDYzODU1OTgwXzIzNl8xNF8yMzZfNzJfMTFgLCBcIkVycm9yIGZldGNoaW5nIHRoZSBjb250ZW50IGZpbGU6IFwiICsgZXJyb3IpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8gY29uc29sZS5lcnJvciguLi5vb190eChgMzA2Mzg1NTk4MF8yNDRfOF8yNDRfNjhfMTFgLCBgRmFpbGVkIHRvIHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyOiAke2Vycm9yfWApKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNldHVwQ2FudmFzKCkge1xyXG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgICAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGggPiAxMDgwID8gNzY4IDogd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVEYXRhTW9kYWwoZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0YU1vZGFsKGRhdGEudGl0bGUsIGRhdGEuT3RoZXJBdWRpb3MsIGRhdGEuTGV2ZWxzLCBkYXRhLkZlZWRiYWNrVGV4dHMsIGRhdGEuUmlnaHRUb0xlZnQsIGRhdGEuRmVlZGJhY2tBdWRpb3MsIGRhdGEubWFqdmVyc2lvbiwgZGF0YS5taW52ZXJzaW9uLCBkYXRhLnZlcnNpb24pO1xyXG4gICAgfVxyXG4gICAgZ2xvYmFsSW5pdGlhbGl6YXRpb24oZGF0YSkge1xyXG4gICAgICAgIGdsb2JhbFRoaXMuYWJvdXRDb21wYW55ID0gZGF0YS5hYm91dENvbXBhbnk7XHJcbiAgICAgICAgZ2xvYmFsVGhpcy5kZXNjcmlwdGlvblRleHQgPSBkYXRhLmRlc2NyaXB0aW9uVGV4dDtcclxuICAgIH1cclxuICAgIGhhbmRsZVJlc2l6ZShkYXRhTW9kYWwpIHtcclxuICAgICAgICBpZiAodGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVWZXJzaW9uSW5mb0VsZW1lbnQoZGF0YU1vZGFsKTtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cENhbnZhcygpO1xyXG4gICAgICAgICAgICB0aGlzLnJlaW5pdGlhbGl6ZVNjZW5lSGFuZGxlcihkYXRhTW9kYWwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudChkYXRhTW9kYWwpIHtcclxuICAgICAgICBpZiAodGhpcy5pc19jYWNoZWQuaGFzKHRoaXMubGFuZykgJiYgRGVidWdnZXIuRGV2ZWxvcG1lbnRMaW5rKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhTW9kYWwubWFqVmVyc2lvbiAmJiBkYXRhTW9kYWwubWluVmVyc2lvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MICs9IGAvai52JHtkYXRhTW9kYWwubWFqVmVyc2lvbn0uJHtkYXRhTW9kYWwubWluVmVyc2lvbn1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGFNb2RhbC52ZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnNpb25JbmZvRWxlbWVudC5pbm5lckhUTUwgKz0gYC9qLnYke2RhdGFNb2RhbC52ZXJzaW9ufWA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0b2dnbGUtYnRuXCIpLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVpbml0aWFsaXplU2NlbmVIYW5kbGVyKGRhdGFNb2RhbCkge1xyXG4gICAgICAgIGRlbGV0ZSB0aGlzLnNjZW5lSGFuZGxlcjtcclxuICAgICAgICB0aGlzLnNjZW5lSGFuZGxlciA9IG5ldyBTY2VuZUhhbmRsZXIodGhpcy5jYW52YXMsIGRhdGFNb2RhbCk7XHJcbiAgICAgICAgdGhpcy5wYXNzaW5nRGF0YVRvQ29udGFpbmVyKCk7XHJcbiAgICB9XHJcbiAgICBoYW5kbGVDYWNoZWRTY2VuYXJpbyhkYXRhTW9kYWwpIHtcclxuICAgICAgICB0aGlzLnVwZGF0ZVZlcnNpb25JbmZvRWxlbWVudChkYXRhTW9kYWwpO1xyXG4gICAgICAgIHRoaXMuc2NlbmVIYW5kbGVyID0gbmV3IFNjZW5lSGFuZGxlcih0aGlzLmNhbnZhcywgZGF0YU1vZGFsKTtcclxuICAgICAgICB0aGlzLnBhc3NpbmdEYXRhVG9Db250YWluZXIoKTtcclxuICAgIH1cclxuICAgIHBhc3NpbmdEYXRhVG9Db250YWluZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5BbmRyb2lkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5BbmRyb2lkLmNhY2hlZFN0YXR1cyh0aGlzLmlzX2NhY2hlZC5nZXQodGhpcy5sYW5nKSA9PSB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgc2V0Q29udGFpbmVyQXBwT3JpZW50YXRpb24oKSB7XHJcbiAgICAgICAgaWYgKHdpbmRvdy5BbmRyb2lkKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5BbmRyb2lkLnNldENvbnRhaW5lckFwcE9yaWVudGF0aW9uKFwicG9ydHJhaXRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCkge1xyXG4gICAgICAgIGxldCB0ZXh0ID0gXCJVcGRhdGUgRm91bmRcXG5QcmVzcyBvayB0byB1cGRhdGVcIjtcclxuICAgICAgICBjb25zdCB1c2VyQ29uZmlybWVkID0gY29uZmlybSh0ZXh0KTtcclxuICAgICAgICBpZiAodXNlckNvbmZpcm1lZCkge1xyXG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlTG9hZGluZ01lc3NhZ2UgPSAoZGF0YSkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnByb2dyZXNzQmFyQ29udGFpbmVyICYmIHRoaXMucHJvZ3Jlc3NCYXIpIHtcclxuICAgICAgICAgICAgdGhpcy5zaG93UHJvZ3Jlc3NCYXIoKTtcclxuICAgICAgICAgICAgY29uc3QgcHJvZ3Jlc3NWYWx1ZSA9IE1hdGgubWluKDEwMCwgTWF0aC5tYXgoMCwgZGF0YS5kYXRhKSk7IC8vIEVuc3VyZSBwcm9ncmVzcyBpcyBiZXR3ZWVuIDAgYW5kIDEwMFxyXG4gICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSBpZiBuZXcgcHJvZ3Jlc3MgaXMgZ3JlYXRlciB0aGFuIHRoZSBjdXJyZW50IHByb2dyZXNzXHJcbiAgICAgICAgICAgIGlmIChwcm9ncmVzc1ZhbHVlID4gdGhpcy5jdXJyZW50UHJvZ3Jlc3MpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFByb2dyZXNzID0gcHJvZ3Jlc3NWYWx1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc3R5bGUud2lkdGggPSBgJHt0aGlzLmN1cnJlbnRQcm9ncmVzc30lYDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBDaGVjayBpZiBkb3dubG9hZCBjb21wbGV0ZWRcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNEb3dubG9hZENvbXBsZXRlZCh0aGlzLmN1cnJlbnRQcm9ncmVzcykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVMYW5ndWFnZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZW5kQ29tcGxldGlvbkV2ZW50KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVMb2FkaW5nU2NyZWVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy9TaG93cyB0aGUgcHJvZ3Jlc3MgYmFyLlxyXG4gICAgc2hvd1Byb2dyZXNzQmFyKCkge1xyXG4gICAgICAgIHRoaXMucHJvZ3Jlc3NCYXJDb250YWluZXIuY2xhc3NMaXN0LmFkZChcInZpc2libGVcIik7XHJcbiAgICAgICAgdGhpcy5wcm9ncmVzc0Jhci5jbGFzc0xpc3QuYWRkKFwidmlzaWJsZVwiKTtcclxuICAgIH1cclxuICAgIC8vQ2hlY2tzIGlmIGRvd25sb2FkIGlzIGNvbXBsZXRlZC5cclxuICAgIGlzRG93bmxvYWRDb21wbGV0ZWQocHJvZ3Jlc3MpIHtcclxuICAgICAgICByZXR1cm4gcHJvZ3Jlc3MgPT09IDEwMCAmJiAhdGhpcy5pc19jYWNoZWQuZ2V0KHRoaXMubGFuZyk7XHJcbiAgICB9XHJcbiAgICAvL0hhbmRsZXMgY2FjaGluZy5cclxuICAgIGNhY2hlTGFuZ3VhZ2UoKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5pc19jYWNoZWQuc2V0KHRoaXMubGFuZywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKElzQ2FjaGVkLCBKU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKHRoaXMuaXNfY2FjaGVkLmVudHJpZXMoKSkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovIGNvbnNvbGUuZXJyb3IoLi4ub29fdHgoYDMwNjM4NTU5ODBfMzY0XzZfMzY0XzUzXzExYCwgXCJFcnJvciBjYWNoaW5nIGxhbmd1YWdlOlwiLCBlcnJvcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIEhhbmRsZXMgRXZlbnQgc2VuZGluZy5cclxuICAgIHNlbmRDb21wbGV0aW9uRXZlbnQoKSB7XHJcbiAgICAgICAgY29uc3QgZG93bmxvYWRDb21wbGV0ZWQgPSB7XHJcbiAgICAgICAgICAgIGNyX3VzZXJfaWQ6IHBzZXVkb0lkLFxyXG4gICAgICAgICAgICBmdG1fbGFuZ3VhZ2U6IGxhbmcsXHJcbiAgICAgICAgICAgIHByb2ZpbGVfbnVtYmVyOiAwLFxyXG4gICAgICAgICAgICB2ZXJzaW9uX251bWJlcjogdGhpcy52ZXJzaW9uSW5mb0VsZW1lbnQuaW5uZXJIVE1MLFxyXG4gICAgICAgICAgICBqc29uX3ZlcnNpb25fbnVtYmVyOiB0aGlzLmdldEpzb25WZXJzaW9uTnVtYmVyKCksXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLmZpcmViYXNlSW50ZWdyYXRpb24uc2VuZERvd25sb2FkQ29tcGxldGVkRXZlbnQoZG93bmxvYWRDb21wbGV0ZWQpO1xyXG4gICAgfVxyXG4gICAgZ2V0SnNvblZlcnNpb25OdW1iZXIoKSB7XHJcbiAgICAgICAgcmV0dXJuICEhdGhpcy5tYWpWZXJzaW9uICYmICEhdGhpcy5taW5WZXJzaW9uXHJcbiAgICAgICAgICAgID8gdGhpcy5tYWpWZXJzaW9uICsgXCIuXCIgKyB0aGlzLm1pblZlcnNpb25cclxuICAgICAgICAgICAgOiBcIlwiO1xyXG4gICAgfVxyXG4gICAgLy9IaWRlcyB0aGUgbG9hZGluZyBzY3JlZW4uXHJcbiAgICBoaWRlTG9hZGluZ1NjcmVlbigpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInZlcnNpb25cIiArIHRoaXMubGFuZywgdGhpcy5nZXRKc29uVmVyc2lvbk51bWJlcigpKTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkaW5nRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlUmVzaXplKHRoaXMuZGF0YU1vZGFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovIGNvbnNvbGUuZXJyb3IoLi4ub29fdHgoYDMwNjM4NTU5ODBfMzkxXzZfMzkxXzU4XzExYCwgXCJFcnJvciBoaWRpbmcgbG9hZGluZyBzY3JlZW46XCIsIGVycm9yKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaGFuZGxlU2VydmljZVdvcmtlck1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICBpZiAoZXZlbnQuZGF0YS5tc2cgPT09IFwiTG9hZGluZ1wiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTG9hZGluZ01lc3NhZ2UoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGV2ZW50LmRhdGEubXNnID09PSBcIlVwZGF0ZSBGb3VuZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlVXBkYXRlRm91bmRNZXNzYWdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGlzRG9jdW1lbnRWaXNpYmxlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5sb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxvZ1Nlc3Npb25FbmRGaXJlYmFzZUV2ZW50KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGhhbmRsZUJlZm9yZVVubG9hZCA9IGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQoKTtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgICBwcmVsb2FkR2FtZUF1ZGlvcyA9IGFzeW5jICgpID0+IHtcclxuICAgICAgICBsZXQgYXVkaW9VcmxzID0gQVVESU9fVVJMX1BSRUxPQUQ7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlbG9hZFByb21pc2VzID0gYXVkaW9VcmxzLm1hcCgoYXVkaW9TcmMpID0+IG5ldyBBdWRpb1BsYXllcigpLnByZWxvYWRHYW1lQXVkaW8oYXVkaW9TcmMpKTtcclxuICAgICAgICAgICAgUHJvbWlzZS5hbGwocHJlbG9hZFByb21pc2VzKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4gcmVzb2x2ZSgpKVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi8gY29uc29sZS5lcnJvciguLi5vb190eChgMzA2Mzg1NTk4MF80MjhfMTBfNDI4XzU3XzExYCwgXCJFcnJvciBwcmVsb2FkaW5nIGF1ZGlvOlwiLCBlcnJvcikpO1xyXG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgLy8gQWRkIHRoZSBkaXNwb3NlIG1ldGhvZFxyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLmNoYW5uZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgdGhpcy5oYW5kbGVTZXJ2aWNlV29ya2VyTWVzc2FnZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgdGhpcy5oYW5kbGVCZWZvcmVVbmxvYWQpO1xyXG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoVklTSUJJTElUWV9DSEFOR0UsIHRoaXMuaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSk7XHJcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5oYW5kbGVSZXNpemUpO1xyXG4gICAgICAgIGlmIChuYXZpZ2F0b3Iuc2VydmljZVdvcmtlcikge1xyXG4gICAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLmhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gUGVyZm9ybSBhZGRpdGlvbmFsIGNsZWFudXAgaWYgbmVjZXNzYXJ5XHJcbiAgICB9XHJcbn1cclxuY29uc3QgYXBwID0gbmV3IEFwcChsYW5nKTtcclxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8gLyogYzggaWdub3JlIHN0YXJ0ICovIC8qIGVzbGludC1kaXNhYmxlICovIDtcclxuZnVuY3Rpb24gb29fY20oKSB7IHRyeSB7XHJcbiAgICByZXR1cm4gKDAsIGV2YWwpKFwiZ2xvYmFsVGhpcy5fY29uc29sZV9uaW5qYVwiKSB8fCAoMCwgZXZhbCkoXCIvKiBodHRwczovL2dpdGh1Yi5jb20vd2FsbGFieWpzL2NvbnNvbGUtbmluamEjaG93LWRvZXMtaXQtd29yayAqLyd1c2Ugc3RyaWN0Jzt2YXIgXzB4ZmI0Zjg5PV8weDNmZjk7KGZ1bmN0aW9uKF8weDMzZmZjZSxfMHg0Nzc2YWEpe3ZhciBfMHgyYWMyZDI9XzB4M2ZmOSxfMHg2ZTAyMTI9XzB4MzNmZmNlKCk7d2hpbGUoISFbXSl7dHJ5e3ZhciBfMHg1NjZmZTE9LXBhcnNlSW50KF8weDJhYzJkMigweDEyMikpLzB4MSooLXBhcnNlSW50KF8weDJhYzJkMigweDE2YSkpLzB4MikrLXBhcnNlSW50KF8weDJhYzJkMigweDE0YSkpLzB4MystcGFyc2VJbnQoXzB4MmFjMmQyKDB4YzkpKS8weDQqKC1wYXJzZUludChfMHgyYWMyZDIoMHgxNWIpKS8weDUpKy1wYXJzZUludChfMHgyYWMyZDIoMHgxMjcpKS8weDYrLXBhcnNlSW50KF8weDJhYzJkMigweDE4NykpLzB4NyoocGFyc2VJbnQoXzB4MmFjMmQyKDB4MTA5KSkvMHg4KSstcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTI2KSkvMHg5KigtcGFyc2VJbnQoXzB4MmFjMmQyKDB4MWJhKSkvMHhhKSstcGFyc2VJbnQoXzB4MmFjMmQyKDB4MTJhKSkvMHhiKihwYXJzZUludChfMHgyYWMyZDIoMHgxMWIpKS8weGMpO2lmKF8weDU2NmZlMT09PV8weDQ3NzZhYSlicmVhaztlbHNlIF8weDZlMDIxMlsncHVzaCddKF8weDZlMDIxMlsnc2hpZnQnXSgpKTt9Y2F0Y2goXzB4MmM2YzFkKXtfMHg2ZTAyMTJbJ3B1c2gnXShfMHg2ZTAyMTJbJ3NoaWZ0J10oKSk7fX19KF8weDI2ZWQsMHhkOTQwNSkpO2Z1bmN0aW9uIF8weDI2ZWQoKXt2YXIgXzB4MjUxZmVkPVsnb25lcnJvcicsJ19pbk5leHRFZGdlJywnZGF0ZScsJ2Nsb3NlJywnbG9nJywnZnVuY05hbWUnLCdhbGxTdHJMZW5ndGgnLFxcXCJjOlxcXFxcXFxcVXNlcnNcXFxcXFxcXHNoZWVyd29vZGNcXFxcXFxcXC52c2NvZGVcXFxcXFxcXGV4dGVuc2lvbnNcXFxcXFxcXHdhbGxhYnlqcy5jb25zb2xlLW5pbmphLTEuMC4zNjBcXFxcXFxcXG5vZGVfbW9kdWxlc1xcXCIsJ1tvYmplY3RcXFxceDIwRGF0ZV0nLCdudW1iZXInLCdiaW5kJywnZ2F0ZXdheS5kb2NrZXIuaW50ZXJuYWwnLCdib29sZWFuJywnX2FkZExvYWROb2RlJywncHJvdG90eXBlJywnX2FkZFByb3BlcnR5Jywnb25jbG9zZScsJ19xdW90ZWRSZWdFeHAnLCdfcmVnRXhwVG9TdHJpbmcnLCdzcGxpdCcsJ2RvY2tlcml6ZWRBcHAnLCdlbnVtZXJhYmxlJywnTWFwJywndXJsJywnX1N5bWJvbCcsJ3ZhbHVlT2YnLCdub0Z1bmN0aW9ucycsJ19jb25zb2xlX25pbmphX3Nlc3Npb24nLCdzdHJpbmdpZnknLCdfdHJlZU5vZGVQcm9wZXJ0aWVzQWZ0ZXJGdWxsVmFsdWUnLCd0b3RhbFN0ckxlbmd0aCcsJ2xlbmd0aCcsJ29ubWVzc2FnZScsJ21hdGNoJywnZGVmYXVsdCcsJ19kaXNwb3NlV2Vic29ja2V0Jywnc29ydFByb3BzJywnX2Nvbm5lY3RBdHRlbXB0Q291bnQnLCcnLCd1bnJlZicsJ3NlcmlhbGl6ZScsJ19zZXROb2RlUGVybWlzc2lvbnMnLCd1bmtub3duJywndHlwZScsJ19pc05lZ2F0aXZlWmVybycsJ3N0cmluZycsJ3RvVXBwZXJDYXNlJywncGVyZm9ybWFuY2UnLCdleHBJZCcsJ2dldFdlYlNvY2tldENsYXNzJywnZ2V0Jywnc3RyTGVuZ3RoJywnMTZidm5KTWYnLCdmb3JFYWNoJywnd3MvaW5kZXguanMnLCcxMjcuMC4wLjEnLCdhdXRvRXhwYW5kUHJldmlvdXNPYmplY3RzJywnY29uc3RydWN0b3InLCdfaGFzU3ltYm9sUHJvcGVydHlPbkl0c1BhdGgnLCdhdXRvRXhwYW5kUHJvcGVydHlDb3VudCcsJ19jbGVhbk5vZGUnLCdfc29ja2V0JywnQ29uc29sZVxcXFx4MjBOaW5qYVxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwc2VuZFxcXFx4MjBsb2dzLFxcXFx4MjByZXN0YXJ0aW5nXFxcXHgyMHRoZVxcXFx4MjBwcm9jZXNzXFxcXHgyMG1heVxcXFx4MjBoZWxwO1xcXFx4MjBhbHNvXFxcXHgyMHNlZVxcXFx4MjAnLCdfc29ydFByb3BzJywnYXJncycsJ2NhcHBlZFByb3BzJywnZmFpbGVkXFxcXHgyMHRvXFxcXHgyMGNvbm5lY3RcXFxceDIwdG9cXFxceDIwaG9zdDpcXFxceDIwJywnY291bnQnLCdzZW5kJywnc2VlXFxcXHgyMGh0dHBzOi8vdGlueXVybC5jb20vMnZ0OGp4endcXFxceDIwZm9yXFxcXHgyMG1vcmVcXFxceDIwaW5mby4nLCcyMDY3Mjc2RFZvelRaJywnY2FsbCcsJ3RpbWVTdGFtcCcsJ25vdycsJ3N0YWNrVHJhY2VMaW1pdCcsJ2Z1bmN0aW9uJywnX2lzQXJyYXknLCc3UWJxcmF3JywnZXZlbnRSZWNlaXZlZENhbGxiYWNrJywnbmVnYXRpdmVaZXJvJywnX2hhc01hcE9uSXRzUGF0aCcsJzEzMTRKU0NyZlAnLCcyMDk1NjkydWJMTEJKJywnaGl0cycsJ2dldE93blByb3BlcnR5TmFtZXMnLCc3N05mVFV1SycsJ19zZXROb2RlSWQnLCdfaW5Ccm93c2VyJywnX3dzJywnX2dldE93blByb3BlcnR5U3ltYm9scycsJ0Vycm9yJywnX2RhdGVUb1N0cmluZycsJ051bWJlcicsJ2VkZ2UnLCdfY2FwSWZTdHJpbmcnLCdfYWxsb3dlZFRvQ29ubmVjdE9uU2VuZCcsJ21lc3NhZ2UnLCdfa2V5U3RyUmVnRXhwJywnU3RyaW5nJywnZXhwcmVzc2lvbnNUb0V2YWx1YXRlJywnbmV4dC5qcycsJzEnLCdwYXRoVG9GaWxlVVJMJywnX3R5cGUnLCdfaXNQcmltaXRpdmVXcmFwcGVyVHlwZScsJ21hcCcsJ19XZWJTb2NrZXRDbGFzcycsJ19pc1VuZGVmaW5lZCcsJ19udW1iZXJSZWdFeHAnLCdjYXBwZWRFbGVtZW50cycsJ29iamVjdCcsJ2xvZ2dlclxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwY29ubmVjdFxcXFx4MjB0b1xcXFx4MjBob3N0LFxcXFx4MjBzZWVcXFxceDIwJywnX1dlYlNvY2tldCcsJ2F1dG9FeHBhbmRMaW1pdCcsJ1tvYmplY3RcXFxceDIwU2V0XScsJ2VuZHNXaXRoJywncmVtaXgnLCcxNTkyMjUzeU1QeXV5JywncGF0aCcsJ2NvbmNhdCcsJ3NvbWUnLCd0b1N0cmluZycsJ19hZGRpdGlvbmFsTWV0YWRhdGEnLCdfY29uc29sZV9uaW5qYScsJ19nZXRPd25Qcm9wZXJ0eU5hbWVzJywnX29iamVjdFRvU3RyaW5nJywnaHR0cHM6Ly90aW55dXJsLmNvbS8zN3g4Yjc5dCcsJ0Jvb2xlYW4nLCdfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnLCdjb3ZlcmFnZScsJ3dzOi8vJywncmVsb2FkJywnZGVwdGgnLCdnbG9iYWwnLCc0Njk4MzVuV0Z2b2cnLCdmYWlsZWRcXFxceDIwdG9cXFxceDIwZmluZFxcXFx4MjBhbmRcXFxceDIwbG9hZFxcXFx4MjBXZWJTb2NrZXQnLCdfSFRNTEFsbENvbGxlY3Rpb24nLCdfaXNTZXQnLCdfYWRkRnVuY3Rpb25zTm9kZScsJ2xvZ2dlclxcXFx4MjB3ZWJzb2NrZXRcXFxceDIwZXJyb3InLCdfYmxhY2tsaXN0ZWRQcm9wZXJ0eScsJ3BvcCcsJ0NvbnNvbGVcXFxceDIwTmluamFcXFxceDIwZmFpbGVkXFxcXHgyMHRvXFxcXHgyMHNlbmRcXFxceDIwbG9ncyxcXFxceDIwcmVmcmVzaGluZ1xcXFx4MjB0aGVcXFxceDIwcGFnZVxcXFx4MjBtYXlcXFxceDIwaGVscDtcXFxceDIwYWxzb1xcXFx4MjBzZWVcXFxceDIwJywnX2lzTWFwJywnaHJ0aW1lJywncmVwbGFjZScsJ191bmRlZmluZWQnLCdfdHJlZU5vZGVQcm9wZXJ0aWVzQmVmb3JlRnVsbFZhbHVlJywnZW52JywnNDgyOTY4a0FRQWhGJywncm9vdF9leHAnLCdfY29ubmVjdGVkJywnam9pbicsJ2luY2x1ZGVzJywnU3ltYm9sJywncHJvY2VzcycsJ3B1c2gnLCdpc0FycmF5JywnX2lzUHJpbWl0aXZlVHlwZScsJ2NvbnNvbGUnLCdwb3NpdGl2ZUluZmluaXR5JywnX3BfbGVuZ3RoJywnX3JlY29ubmVjdFRpbWVvdXQnLCd0ZXN0JywncGVyZl9ob29rcycsJ19wcm9jZXNzVHJlZU5vZGVSZXN1bHQnLCdob3N0JywnZXJyb3InLCdwcm9wcycsJ3NvcnQnLCdiaWdpbnQnLCdbb2JqZWN0XFxcXHgyMEFycmF5XScsJ2VsYXBzZWQnLCdub2RlJywnY2FwcGVkJywncmVkdWNlTGltaXRzJywnTkVHQVRJVkVfSU5GSU5JVFknLCdjcmVhdGUnLCc4NDYwMTN1Yk9EUm4nLCdsZXZlbCcsJ29yaWdpbicsJ2FzdHJvJywnc3Vic3RyJywnX25pbmphSWdub3JlTmV4dEVycm9yJywnX2F0dGVtcHRUb1JlY29ubmVjdFNob3J0bHknLCdfc2V0Tm9kZUV4cHJlc3Npb25QYXRoJywnX3dlYlNvY2tldEVycm9yRG9jc0xpbmsnLCdnZXRPd25Qcm9wZXJ0eVN5bWJvbHMnLCdvbm9wZW4nLCdQT1NJVElWRV9JTkZJTklUWScsJ3BvcnQnLCdCdWZmZXInLCdfc2VuZEVycm9yTWVzc2FnZScsJ19zZXROb2RlRXhwYW5kYWJsZVN0YXRlJywnJywncmVzb2x2ZUdldHRlcnMnLCd0b0xvd2VyQ2FzZScsJ3BhcnNlJywnU2V0JywnX2Nvbm5lY3RpbmcnLCdjYXRjaCcsJ2N1cnJlbnQnLCdfZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywndmFsdWUnLCd0aW1lJywnYXV0b0V4cGFuZCcsJ2NoYXJBdCcsJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsJ2lzRXhwcmVzc2lvblRvRXZhbHVhdGUnLFtcXFwibG9jYWxob3N0XFxcIixcXFwiMTI3LjAuMC4xXFxcIixcXFwiZXhhbXBsZS5jeXByZXNzLmlvXFxcIixcXFwiQ0VCLUxBUFRPUC0wMDA2XFxcIixcXFwiMTkyLjE2OC4xLjc5XFxcIl0sJ2FycmF5JywnaG9zdG5hbWUnLCdpbmRleCcsJ3dhcm4nLCd0cmFjZScsJy4uLicsJ3Vuc2hpZnQnLCdfY29ubmVjdFRvSG9zdE5vdycsJ1tvYmplY3RcXFxceDIwTWFwXScsJ3N0YWNrJywnXFxcXHgyMHNlcnZlcicsJ2RhdGEnLCdnZXRQcm90b3R5cGVPZicsJ251bGwnLCdfcHJvcGVydHknLCdzdGFydHNXaXRoJywnYXV0b0V4cGFuZE1heERlcHRoJywnZnJvbUNoYXJDb2RlJywncm9vdEV4cHJlc3Npb24nLCc4NTI5MEVYcVRZSCcsJ1tvYmplY3RcXFxceDIwQmlnSW50XScsJ19hbGxvd2VkVG9TZW5kJywnX3NldE5vZGVMYWJlbCcsJ3Jvb3RfZXhwX2lkJywnXFxcXHgyMGJyb3dzZXInLCdIVE1MQWxsQ29sbGVjdGlvbicsJ25hbWUnLCdkaXNhYmxlZFRyYWNlJywncmVhZHlTdGF0ZScsJ19wcm9wZXJ0eU5hbWUnLCdfcF8nLCdzeW1ib2wnLCd1bmRlZmluZWQnLCdlbGVtZW50cycsJzEyaUNuUmxsJywnX3NldE5vZGVRdWVyeVBhdGgnLCd0aGVuJywnJWNcXFxceDIwQ29uc29sZVxcXFx4MjBOaW5qYVxcXFx4MjBleHRlbnNpb25cXFxceDIwaXNcXFxceDIwY29ubmVjdGVkXFxcXHgyMHRvXFxcXHgyMCcsJ1dlYlNvY2tldCcsJ3BhcmVudCcsJ05FWFRfUlVOVElNRScsJ19hZGRPYmplY3RQcm9wZXJ0eScsJ25vZGVNb2R1bGVzJywndmVyc2lvbnMnLCcxLjAuMCcsJ2luZGV4T2YnXTtfMHgyNmVkPWZ1bmN0aW9uKCl7cmV0dXJuIF8weDI1MWZlZDt9O3JldHVybiBfMHgyNmVkKCk7fXZhciBLPU9iamVjdFtfMHhmYjRmODkoMHgxODYpXSxRPU9iamVjdFsnZGVmaW5lUHJvcGVydHknXSxHPU9iamVjdFtfMHhmYjRmODkoMHgxYTQpXSxlZT1PYmplY3RbXzB4ZmI0Zjg5KDB4MTI5KV0sdGU9T2JqZWN0W18weGZiNGY4OSgweDFiMyldLG5lPU9iamVjdFtfMHhmYjRmODkoMHhlMyldWydoYXNPd25Qcm9wZXJ0eSddLHJlPShfMHg1OGJjN2MsXzB4NGRkZDBkLF8weDQ1NjYzMCxfMHgzZjBiYWEpPT57dmFyIF8weDRlYTAxOD1fMHhmYjRmODk7aWYoXzB4NGRkZDBkJiZ0eXBlb2YgXzB4NGRkZDBkPT1fMHg0ZWEwMTgoMHgxNDMpfHx0eXBlb2YgXzB4NGRkZDBkPT1fMHg0ZWEwMTgoMHgxMjApKXtmb3IobGV0IF8weDRkNTM0OSBvZiBlZShfMHg0ZGRkMGQpKSFuZVsnY2FsbCddKF8weDU4YmM3YyxfMHg0ZDUzNDkpJiZfMHg0ZDUzNDkhPT1fMHg0NTY2MzAmJlEoXzB4NThiYzdjLF8weDRkNTM0OSx7J2dldCc6KCk9Pl8weDRkZGQwZFtfMHg0ZDUzNDldLCdlbnVtZXJhYmxlJzohKF8weDNmMGJhYT1HKF8weDRkZGQwZCxfMHg0ZDUzNDkpKXx8XzB4M2YwYmFhW18weDRlYTAxOCgweGVhKV19KTt9cmV0dXJuIF8weDU4YmM3Yzt9LFY9KF8weDFjZmMwOCxfMHgyODE5MzAsXzB4MTk3NDdiKT0+KF8weDE5NzQ3Yj1fMHgxY2ZjMDghPW51bGw/Syh0ZShfMHgxY2ZjMDgpKTp7fSxyZShfMHgyODE5MzB8fCFfMHgxY2ZjMDh8fCFfMHgxY2ZjMDhbJ19fZXMnKydNb2R1bGUnXT9RKF8weDE5NzQ3YixfMHhmYjRmODkoMHhmNykseyd2YWx1ZSc6XzB4MWNmYzA4LCdlbnVtZXJhYmxlJzohMHgwfSk6XzB4MTk3NDdiLF8weDFjZmMwOCkpLFo9Y2xhc3N7Y29uc3RydWN0b3IoXzB4MjdkYTNkLF8weDMzYzgzZixfMHg1MTQyMmQsXzB4MWJkMjdmLF8weDFmMTYyOCxfMHgyYzI3Zjkpe3ZhciBfMHgzMGJhZTA9XzB4ZmI0Zjg5LF8weGRiMmFlZSxfMHgyMTViNmIsXzB4MzMzMGEzLF8weDU0MTdiNTt0aGlzWydnbG9iYWwnXT1fMHgyN2RhM2QsdGhpc1tfMHgzMGJhZTAoMHgxN2IpXT1fMHgzM2M4M2YsdGhpc1tfMHgzMGJhZTAoMHgxOTMpXT1fMHg1MTQyMmQsdGhpc1tfMHgzMGJhZTAoMHhkMSldPV8weDFiZDI3Zix0aGlzWydkb2NrZXJpemVkQXBwJ109XzB4MWYxNjI4LHRoaXNbXzB4MzBiYWUwKDB4MTIzKV09XzB4MmMyN2Y5LHRoaXNbJ19hbGxvd2VkVG9TZW5kJ109ITB4MCx0aGlzW18weDMwYmFlMCgweDEzNCldPSEweDAsdGhpc1tfMHgzMGJhZTAoMHgxNmMpXT0hMHgxLHRoaXNbXzB4MzBiYWUwKDB4MTljKV09ITB4MSx0aGlzW18weDMwYmFlMCgweGQ2KV09KChfMHgyMTViNmI9KF8weGRiMmFlZT1fMHgyN2RhM2RbXzB4MzBiYWUwKDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weGRiMmFlZVtfMHgzMGJhZTAoMHgxNjkpXSk9PW51bGw/dm9pZCAweDA6XzB4MjE1YjZiW18weDMwYmFlMCgweGNmKV0pPT09XzB4MzBiYWUwKDB4MTMyKSx0aGlzW18weDMwYmFlMCgweDEyYyldPSEoKF8weDU0MTdiNT0oXzB4MzMzMGEzPXRoaXNbXzB4MzBiYWUwKDB4MTVhKV1bJ3Byb2Nlc3MnXSk9PW51bGw/dm9pZCAweDA6XzB4MzMzMGEzW18weDMwYmFlMCgweGQyKV0pIT1udWxsJiZfMHg1NDE3YjVbJ25vZGUnXSkmJiF0aGlzWydfaW5OZXh0RWRnZSddLHRoaXNbJ19XZWJTb2NrZXRDbGFzcyddPW51bGwsdGhpc1tfMHgzMGJhZTAoMHhmYSldPTB4MCx0aGlzWydfbWF4Q29ubmVjdEF0dGVtcHRDb3VudCddPTB4MTQsdGhpc1tfMHgzMGJhZTAoMHgxOGYpXT1fMHgzMGJhZTAoMHgxNTMpLHRoaXNbXzB4MzBiYWUwKDB4MTk1KV09KHRoaXNbXzB4MzBiYWUwKDB4MTJjKV0/XzB4MzBiYWUwKDB4MTYzKTpfMHgzMGJhZTAoMHgxMTMpKSt0aGlzWydfd2ViU29ja2V0RXJyb3JEb2NzTGluayddO31hc3luY1snZ2V0V2ViU29ja2V0Q2xhc3MnXSgpe3ZhciBfMHg1YWZhOWI9XzB4ZmI0Zjg5LF8weDJkOWY5NixfMHg1NjUwNTg7aWYodGhpc1tfMHg1YWZhOWIoMHgxM2YpXSlyZXR1cm4gdGhpc1snX1dlYlNvY2tldENsYXNzJ107bGV0IF8weDJlMTJjMztpZih0aGlzW18weDVhZmE5YigweDEyYyldfHx0aGlzW18weDVhZmE5YigweGQ2KV0pXzB4MmUxMmMzPXRoaXNbXzB4NWFmYTliKDB4MTVhKV1bXzB4NWFmYTliKDB4Y2QpXTtlbHNle2lmKChfMHgyZDlmOTY9dGhpc1tfMHg1YWZhOWIoMHgxNWEpXVsncHJvY2VzcyddKSE9bnVsbCYmXzB4MmQ5Zjk2W18weDVhZmE5YigweDE0NSldKV8weDJlMTJjMz0oXzB4NTY1MDU4PXRoaXNbJ2dsb2JhbCddW18weDVhZmE5YigweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHg1NjUwNThbXzB4NWFmYTliKDB4MTQ1KV07ZWxzZSB0cnl7bGV0IF8weDU1YThhNz1hd2FpdCBpbXBvcnQoXzB4NWFmYTliKDB4MTRiKSk7XzB4MmUxMmMzPShhd2FpdCBpbXBvcnQoKGF3YWl0IGltcG9ydChfMHg1YWZhOWIoMHhlYykpKVtfMHg1YWZhOWIoMHgxM2IpXShfMHg1NWE4YTdbXzB4NWFmYTliKDB4MTZkKV0odGhpc1tfMHg1YWZhOWIoMHhkMSldLF8weDVhZmE5YigweDEwYikpKVtfMHg1YWZhOWIoMHgxNGUpXSgpKSlbJ2RlZmF1bHQnXTt9Y2F0Y2h7dHJ5e18weDJlMTJjMz1yZXF1aXJlKHJlcXVpcmUoXzB4NWFmYTliKDB4MTRiKSlbXzB4NWFmYTliKDB4MTZkKV0odGhpc1tfMHg1YWZhOWIoMHhkMSldLCd3cycpKTt9Y2F0Y2h7dGhyb3cgbmV3IEVycm9yKF8weDVhZmE5YigweDE1YykpO319fXJldHVybiB0aGlzW18weDVhZmE5YigweDEzZildPV8weDJlMTJjMyxfMHgyZTEyYzM7fVtfMHhmYjRmODkoMHgxYWUpXSgpe3ZhciBfMHgzY2FkNjA9XzB4ZmI0Zjg5O3RoaXNbXzB4M2NhZDYwKDB4MTljKV18fHRoaXNbXzB4M2NhZDYwKDB4MTZjKV18fHRoaXNbJ19jb25uZWN0QXR0ZW1wdENvdW50J10+PXRoaXNbJ19tYXhDb25uZWN0QXR0ZW1wdENvdW50J118fCh0aGlzW18weDNjYWQ2MCgweDEzNCldPSEweDEsdGhpc1tfMHgzY2FkNjAoMHgxOWMpXT0hMHgwLHRoaXNbXzB4M2NhZDYwKDB4ZmEpXSsrLHRoaXNbXzB4M2NhZDYwKDB4MTJkKV09bmV3IFByb21pc2UoKF8weDM0M2FiZCxfMHhiYTA4OGIpPT57dmFyIF8weDExMzExYT1fMHgzY2FkNjA7dGhpc1tfMHgxMTMxMWEoMHgxMDYpXSgpW18weDExMzExYSgweGNiKV0oXzB4YjA5NDUwPT57dmFyIF8weDQzZmFkYT1fMHgxMTMxMWE7bGV0IF8weDM4Nzc0OT1uZXcgXzB4YjA5NDUwKF8weDQzZmFkYSgweDE1NykrKCF0aGlzW18weDQzZmFkYSgweDEyYyldJiZ0aGlzW18weDQzZmFkYSgweGU5KV0/XzB4NDNmYWRhKDB4ZTApOnRoaXNbXzB4NDNmYWRhKDB4MTdiKV0pKyc6Jyt0aGlzW18weDQzZmFkYSgweDE5MyldKTtfMHgzODc3NDlbJ29uZXJyb3InXT0oKT0+e3ZhciBfMHg0NTNjYjc9XzB4NDNmYWRhO3RoaXNbJ19hbGxvd2VkVG9TZW5kJ109ITB4MSx0aGlzW18weDQ1M2NiNygweGY4KV0oXzB4Mzg3NzQ5KSx0aGlzW18weDQ1M2NiNygweDE4ZCldKCksXzB4YmEwODhiKG5ldyBFcnJvcihfMHg0NTNjYjcoMHgxNjApKSk7fSxfMHgzODc3NDlbXzB4NDNmYWRhKDB4MTkxKV09KCk9Pnt2YXIgXzB4ZGFmNDdjPV8weDQzZmFkYTt0aGlzW18weGRhZjQ3YygweDEyYyldfHxfMHgzODc3NDlbJ19zb2NrZXQnXSYmXzB4Mzg3NzQ5W18weGRhZjQ3YygweDExMildW18weGRhZjQ3YygweGZjKV0mJl8weDM4Nzc0OVtfMHhkYWY0N2MoMHgxMTIpXVsndW5yZWYnXSgpLF8weDM0M2FiZChfMHgzODc3NDkpO30sXzB4Mzg3NzQ5W18weDQzZmFkYSgweGU1KV09KCk9Pnt2YXIgXzB4YzU2NzQ4PV8weDQzZmFkYTt0aGlzW18weGM1Njc0OCgweDEzNCldPSEweDAsdGhpc1tfMHhjNTY3NDgoMHhmOCldKF8weDM4Nzc0OSksdGhpc1tfMHhjNTY3NDgoMHgxOGQpXSgpO30sXzB4Mzg3NzQ5W18weDQzZmFkYSgweGY1KV09XzB4NDdlZDNhPT57dmFyIF8weDI4ZjU4MD1fMHg0M2ZhZGE7dHJ5e2lmKCEoXzB4NDdlZDNhIT1udWxsJiZfMHg0N2VkM2FbXzB4MjhmNTgwKDB4MWIyKV0pfHwhdGhpc1tfMHgyOGY1ODAoMHgxMjMpXSlyZXR1cm47bGV0IF8weDQ3OWVlNT1KU09OW18weDI4ZjU4MCgweDE5YSldKF8weDQ3ZWQzYVsnZGF0YSddKTt0aGlzW18weDI4ZjU4MCgweDEyMyldKF8weDQ3OWVlNVsnbWV0aG9kJ10sXzB4NDc5ZWU1W18weDI4ZjU4MCgweDExNSldLHRoaXNbXzB4MjhmNTgwKDB4MTVhKV0sdGhpc1tfMHgyOGY1ODAoMHgxMmMpXSk7fWNhdGNoe319O30pW18weDExMzExYSgweGNiKV0oXzB4MTM1MjA9Pih0aGlzWydfY29ubmVjdGVkJ109ITB4MCx0aGlzWydfY29ubmVjdGluZyddPSEweDEsdGhpc1tfMHgxMTMxMWEoMHgxMzQpXT0hMHgxLHRoaXNbXzB4MTEzMTFhKDB4YmMpXT0hMHgwLHRoaXNbXzB4MTEzMTFhKDB4ZmEpXT0weDAsXzB4MTM1MjApKVtfMHgxMTMxMWEoMHgxOWQpXShfMHgxOGYxYTk9Pih0aGlzW18weDExMzExYSgweDE2YyldPSEweDEsdGhpc1tfMHgxMTMxMWEoMHgxOWMpXT0hMHgxLGNvbnNvbGVbXzB4MTEzMTFhKDB4MWFhKV0oXzB4MTEzMTFhKDB4MTQ0KSt0aGlzWydfd2ViU29ja2V0RXJyb3JEb2NzTGluayddKSxfMHhiYTA4OGIobmV3IEVycm9yKF8weDExMzExYSgweDExNykrKF8weDE4ZjFhOSYmXzB4MThmMWE5WydtZXNzYWdlJ10pKSkpKTt9KSk7fVsnX2Rpc3Bvc2VXZWJzb2NrZXQnXShfMHgzNDcyNTkpe3ZhciBfMHg1NTE4OGQ9XzB4ZmI0Zjg5O3RoaXNbXzB4NTUxODhkKDB4MTZjKV09ITB4MSx0aGlzW18weDU1MTg4ZCgweDE5YyldPSEweDE7dHJ5e18weDM0NzI1OVsnb25jbG9zZSddPW51bGwsXzB4MzQ3MjU5W18weDU1MTg4ZCgweGQ1KV09bnVsbCxfMHgzNDcyNTlbXzB4NTUxODhkKDB4MTkxKV09bnVsbDt9Y2F0Y2h7fXRyeXtfMHgzNDcyNTlbXzB4NTUxODhkKDB4YzMpXTwweDImJl8weDM0NzI1OVtfMHg1NTE4OGQoMHhkOCldKCk7fWNhdGNoe319WydfYXR0ZW1wdFRvUmVjb25uZWN0U2hvcnRseSddKCl7dmFyIF8weDM2NjYyNz1fMHhmYjRmODk7Y2xlYXJUaW1lb3V0KHRoaXNbXzB4MzY2NjI3KDB4MTc3KV0pLCEodGhpc1snX2Nvbm5lY3RBdHRlbXB0Q291bnQnXT49dGhpc1snX21heENvbm5lY3RBdHRlbXB0Q291bnQnXSkmJih0aGlzW18weDM2NjYyNygweDE3NyldPXNldFRpbWVvdXQoKCk9Pnt2YXIgXzB4NDExYjdiPV8weDM2NjYyNyxfMHg1ZThmMzQ7dGhpc1tfMHg0MTFiN2IoMHgxNmMpXXx8dGhpc1tfMHg0MTFiN2IoMHgxOWMpXXx8KHRoaXNbXzB4NDExYjdiKDB4MWFlKV0oKSwoXzB4NWU4ZjM0PXRoaXNbXzB4NDExYjdiKDB4MTJkKV0pPT1udWxsfHxfMHg1ZThmMzRbXzB4NDExYjdiKDB4MTlkKV0oKCk9PnRoaXNbXzB4NDExYjdiKDB4MThkKV0oKSkpO30sMHgxZjQpLHRoaXNbJ19yZWNvbm5lY3RUaW1lb3V0J11bXzB4MzY2NjI3KDB4ZmMpXSYmdGhpc1tfMHgzNjY2MjcoMHgxNzcpXVtfMHgzNjY2MjcoMHhmYyldKCkpO31hc3luY1tfMHhmYjRmODkoMHgxMTkpXShfMHgyM2Y1MWUpe3ZhciBfMHgzMzc5NTk9XzB4ZmI0Zjg5O3RyeXtpZighdGhpc1snX2FsbG93ZWRUb1NlbmQnXSlyZXR1cm47dGhpc1tfMHgzMzc5NTkoMHgxMzQpXSYmdGhpc1tfMHgzMzc5NTkoMHgxYWUpXSgpLChhd2FpdCB0aGlzWydfd3MnXSlbJ3NlbmQnXShKU09OW18weDMzNzk1OSgweGYxKV0oXzB4MjNmNTFlKSk7fWNhdGNoKF8weDViMGZiYyl7Y29uc29sZVsnd2FybiddKHRoaXNbXzB4MzM3OTU5KDB4MTk1KV0rJzpcXFxceDIwJysoXzB4NWIwZmJjJiZfMHg1YjBmYmNbXzB4MzM3OTU5KDB4MTM1KV0pKSx0aGlzW18weDMzNzk1OSgweGJjKV09ITB4MSx0aGlzW18weDMzNzk1OSgweDE4ZCldKCk7fX19O2Z1bmN0aW9uIHEoXzB4MjRkYWViLF8weGI2ZjUxOSxfMHg1NTJhODMsXzB4NDE3MmNmLF8weDc2ZGJiNyxfMHg1MDY4NDMsXzB4YmY3NWFjLF8weDNhYzJjND1pZSl7dmFyIF8weDViOWQ2ND1fMHhmYjRmODk7bGV0IF8weDRiOTM3Mz1fMHg1NTJhODNbXzB4NWI5ZDY0KDB4ZTgpXSgnLCcpW18weDViOWQ2NCgweDEzZSldKF8weDVkYmZlND0+e3ZhciBfMHg2NmM3MWI9XzB4NWI5ZDY0LF8weDllMTY2OCxfMHg1YTM3ZDUsXzB4MTNhMGNjLF8weDNlM2NjNjt0cnl7aWYoIV8weDI0ZGFlYltfMHg2NmM3MWIoMHhmMCldKXtsZXQgXzB4MjgwZjcwPSgoXzB4NWEzN2Q1PShfMHg5ZTE2Njg9XzB4MjRkYWViW18weDY2YzcxYigweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHg5ZTE2NjhbJ3ZlcnNpb25zJ10pPT1udWxsP3ZvaWQgMHgwOl8weDVhMzdkNVtfMHg2NmM3MWIoMHgxODIpXSl8fCgoXzB4M2UzY2M2PShfMHgxM2EwY2M9XzB4MjRkYWViW18weDY2YzcxYigweDE3MCldKT09bnVsbD92b2lkIDB4MDpfMHgxM2EwY2NbXzB4NjZjNzFiKDB4MTY5KV0pPT1udWxsP3ZvaWQgMHgwOl8weDNlM2NjNltfMHg2NmM3MWIoMHhjZildKT09PV8weDY2YzcxYigweDEzMik7KF8weDc2ZGJiNz09PSduZXh0LmpzJ3x8XzB4NzZkYmI3PT09XzB4NjZjNzFiKDB4MTQ5KXx8XzB4NzZkYmI3PT09XzB4NjZjNzFiKDB4MThhKXx8XzB4NzZkYmI3PT09J2FuZ3VsYXInKSYmKF8weDc2ZGJiNys9XzB4MjgwZjcwP18weDY2YzcxYigweDFiMSk6XzB4NjZjNzFiKDB4YmYpKSxfMHgyNGRhZWJbJ19jb25zb2xlX25pbmphX3Nlc3Npb24nXT17J2lkJzorbmV3IERhdGUoKSwndG9vbCc6XzB4NzZkYmI3fSxfMHhiZjc1YWMmJl8weDc2ZGJiNyYmIV8weDI4MGY3MCYmY29uc29sZVtfMHg2NmM3MWIoMHhkOSldKF8weDY2YzcxYigweGNjKSsoXzB4NzZkYmI3W18weDY2YzcxYigweDFhMyldKDB4MClbXzB4NjZjNzFiKDB4MTAzKV0oKStfMHg3NmRiYjdbXzB4NjZjNzFiKDB4MThiKV0oMHgxKSkrJywnLCdiYWNrZ3JvdW5kOlxcXFx4MjByZ2IoMzAsMzAsMzApO1xcXFx4MjBjb2xvcjpcXFxceDIwcmdiKDI1NSwyMTMsOTIpJyxfMHg2NmM3MWIoMHgxMWEpKTt9bGV0IF8weDE0YzYwMD1uZXcgWihfMHgyNGRhZWIsXzB4YjZmNTE5LF8weDVkYmZlNCxfMHg0MTcyY2YsXzB4NTA2ODQzLF8weDNhYzJjNCk7cmV0dXJuIF8weDE0YzYwMFtfMHg2NmM3MWIoMHgxMTkpXVtfMHg2NmM3MWIoMHhkZildKF8weDE0YzYwMCk7fWNhdGNoKF8weDllZjhkYil7cmV0dXJuIGNvbnNvbGVbXzB4NjZjNzFiKDB4MWFhKV0oJ2xvZ2dlclxcXFx4MjBmYWlsZWRcXFxceDIwdG9cXFxceDIwY29ubmVjdFxcXFx4MjB0b1xcXFx4MjBob3N0JyxfMHg5ZWY4ZGImJl8weDllZjhkYlsnbWVzc2FnZSddKSwoKT0+e307fX0pO3JldHVybiBfMHg0MTgxMjA9Pl8weDRiOTM3M1snZm9yRWFjaCddKF8weDI4YzlhNT0+XzB4MjhjOWE1KF8weDQxODEyMCkpO31mdW5jdGlvbiBfMHgzZmY5KF8weGU2NzgzOCxfMHg2ZDE0ODYpe3ZhciBfMHgyNmVkNjg9XzB4MjZlZCgpO3JldHVybiBfMHgzZmY5PWZ1bmN0aW9uKF8weDNmZjkyMCxfMHg0ODkzMjkpe18weDNmZjkyMD1fMHgzZmY5MjAtMHhiYjt2YXIgXzB4Mzk5NWNjPV8weDI2ZWQ2OFtfMHgzZmY5MjBdO3JldHVybiBfMHgzOTk1Y2M7fSxfMHgzZmY5KF8weGU2NzgzOCxfMHg2ZDE0ODYpO31mdW5jdGlvbiBpZShfMHg1NzcyN2YsXzB4NGIzN2M3LF8weDE0ZGFiZCxfMHg1YjkwYTkpe3ZhciBfMHg0NDA4OTk9XzB4ZmI0Zjg5O18weDViOTBhOSYmXzB4NTc3MjdmPT09XzB4NDQwODk5KDB4MTU4KSYmXzB4MTRkYWJkWydsb2NhdGlvbiddWydyZWxvYWQnXSgpO31mdW5jdGlvbiBCKF8weDI2YzlhYyl7dmFyIF8weDQ3ZjA4NT1fMHhmYjRmODksXzB4M2VjYjdhLF8weDQ3YjUxNjtsZXQgXzB4MjIwODA2PWZ1bmN0aW9uKF8weDNhMDIwZSxfMHg1M2M2OWEpe3JldHVybiBfMHg1M2M2OWEtXzB4M2EwMjBlO30sXzB4MjEwOGMyO2lmKF8weDI2YzlhY1tfMHg0N2YwODUoMHgxMDQpXSlfMHgyMTA4YzI9ZnVuY3Rpb24oKXt2YXIgXzB4MzM3NDIzPV8weDQ3ZjA4NTtyZXR1cm4gXzB4MjZjOWFjW18weDMzNzQyMygweDEwNCldW18weDMzNzQyMygweDExZSldKCk7fTtlbHNle2lmKF8weDI2YzlhY1tfMHg0N2YwODUoMHgxNzApXSYmXzB4MjZjOWFjW18weDQ3ZjA4NSgweDE3MCldW18weDQ3ZjA4NSgweDE2NSldJiYoKF8weDQ3YjUxNj0oXzB4M2VjYjdhPV8weDI2YzlhY1sncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgzZWNiN2FbXzB4NDdmMDg1KDB4MTY5KV0pPT1udWxsP3ZvaWQgMHgwOl8weDQ3YjUxNlsnTkVYVF9SVU5USU1FJ10pIT09J2VkZ2UnKV8weDIxMDhjMj1mdW5jdGlvbigpe3JldHVybiBfMHgyNmM5YWNbJ3Byb2Nlc3MnXVsnaHJ0aW1lJ10oKTt9LF8weDIyMDgwNj1mdW5jdGlvbihfMHgzNDFmYjMsXzB4MmM2NjE4KXtyZXR1cm4gMHgzZTgqKF8weDJjNjYxOFsweDBdLV8weDM0MWZiM1sweDBdKSsoXzB4MmM2NjE4WzB4MV0tXzB4MzQxZmIzWzB4MV0pLzB4ZjQyNDA7fTtlbHNlIHRyeXtsZXQge3BlcmZvcm1hbmNlOl8weDQxNmE1Mn09cmVxdWlyZShfMHg0N2YwODUoMHgxNzkpKTtfMHgyMTA4YzI9ZnVuY3Rpb24oKXt2YXIgXzB4NDgxNTBmPV8weDQ3ZjA4NTtyZXR1cm4gXzB4NDE2YTUyW18weDQ4MTUwZigweDExZSldKCk7fTt9Y2F0Y2h7XzB4MjEwOGMyPWZ1bmN0aW9uKCl7cmV0dXJuK25ldyBEYXRlKCk7fTt9fXJldHVybnsnZWxhcHNlZCc6XzB4MjIwODA2LCd0aW1lU3RhbXAnOl8weDIxMDhjMiwnbm93JzooKT0+RGF0ZVsnbm93J10oKX07fWZ1bmN0aW9uIEgoXzB4Y2JkYzIwLF8weDFjZTI0MixfMHgxYjY2Y2Ype3ZhciBfMHhhMTM4MjU9XzB4ZmI0Zjg5LF8weDM2ZTI2ZixfMHgyZDY1MmMsXzB4NWU3M2YzLF8weDIxYWM0NSxfMHgxN2ViNzk7aWYoXzB4Y2JkYzIwWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXSE9PXZvaWQgMHgwKXJldHVybiBfMHhjYmRjMjBbXzB4YTEzODI1KDB4MTU1KV07bGV0IF8weDQwYmIyYj0oKF8weDJkNjUyYz0oXzB4MzZlMjZmPV8weGNiZGMyMFsncHJvY2VzcyddKT09bnVsbD92b2lkIDB4MDpfMHgzNmUyNmZbXzB4YTEzODI1KDB4ZDIpXSk9PW51bGw/dm9pZCAweDA6XzB4MmQ2NTJjW18weGExMzgyNSgweDE4MildKXx8KChfMHgyMWFjNDU9KF8weDVlNzNmMz1fMHhjYmRjMjBbXzB4YTEzODI1KDB4MTcwKV0pPT1udWxsP3ZvaWQgMHgwOl8weDVlNzNmM1snZW52J10pPT1udWxsP3ZvaWQgMHgwOl8weDIxYWM0NVtfMHhhMTM4MjUoMHhjZildKT09PSdlZGdlJztmdW5jdGlvbiBfMHgzZThjZDgoXzB4Mzc4N2Q2KXt2YXIgXzB4NTI1MzBhPV8weGExMzgyNTtpZihfMHgzNzg3ZDZbXzB4NTI1MzBhKDB4MWI2KV0oJy8nKSYmXzB4Mzc4N2Q2W18weDUyNTMwYSgweDE0OCldKCcvJykpe2xldCBfMHg1MjM4MTU9bmV3IFJlZ0V4cChfMHgzNzg3ZDZbJ3NsaWNlJ10oMHgxLC0weDEpKTtyZXR1cm4gXzB4NWViZjJhPT5fMHg1MjM4MTVbXzB4NTI1MzBhKDB4MTc4KV0oXzB4NWViZjJhKTt9ZWxzZXtpZihfMHgzNzg3ZDZbJ2luY2x1ZGVzJ10oJyonKXx8XzB4Mzc4N2Q2W18weDUyNTMwYSgweDE2ZSldKCc/Jykpe2xldCBfMHgxODVlOTU9bmV3IFJlZ0V4cCgnXicrXzB4Mzc4N2Q2WydyZXBsYWNlJ10oL1xcXFwuL2csU3RyaW5nW18weDUyNTMwYSgweDFiOCldKDB4NWMpKycuJylbJ3JlcGxhY2UnXSgvXFxcXCovZywnLionKVsncmVwbGFjZSddKC9cXFxcPy9nLCcuJykrU3RyaW5nW18weDUyNTMwYSgweDFiOCldKDB4MjQpKTtyZXR1cm4gXzB4MTc1ODYzPT5fMHgxODVlOTVbXzB4NTI1MzBhKDB4MTc4KV0oXzB4MTc1ODYzKTt9ZWxzZSByZXR1cm4gXzB4Mjc0ZWNjPT5fMHgyNzRlY2M9PT1fMHgzNzg3ZDY7fX1sZXQgXzB4NGI2MTcxPV8weDFjZTI0MlsnbWFwJ10oXzB4M2U4Y2Q4KTtyZXR1cm4gXzB4Y2JkYzIwWydfY29uc29sZU5pbmphQWxsb3dlZFRvU3RhcnQnXT1fMHg0MGJiMmJ8fCFfMHgxY2UyNDIsIV8weGNiZGMyMFsnX2NvbnNvbGVOaW5qYUFsbG93ZWRUb1N0YXJ0J10mJigoXzB4MTdlYjc5PV8weGNiZGMyMFsnbG9jYXRpb24nXSk9PW51bGw/dm9pZCAweDA6XzB4MTdlYjc5W18weGExMzgyNSgweDFhOCldKSYmKF8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNTUpXT1fMHg0YjYxNzFbXzB4YTEzODI1KDB4MTRkKV0oXzB4NWMxMGYxPT5fMHg1YzEwZjEoXzB4Y2JkYzIwWydsb2NhdGlvbiddWydob3N0bmFtZSddKSkpLF8weGNiZGMyMFtfMHhhMTM4MjUoMHgxNTUpXTt9ZnVuY3Rpb24gWChfMHgzNjNkNTUsXzB4MWQ5MTY5LF8weDQ2Y2E5MCxfMHg0NmY2N2Mpe3ZhciBfMHgxMGVkMjg9XzB4ZmI0Zjg5O18weDM2M2Q1NT1fMHgzNjNkNTUsXzB4MWQ5MTY5PV8weDFkOTE2OSxfMHg0NmNhOTA9XzB4NDZjYTkwLF8weDQ2ZjY3Yz1fMHg0NmY2N2M7bGV0IF8weDkyYWMxZT1CKF8weDM2M2Q1NSksXzB4MjI0ZmZiPV8weDkyYWMxZVtfMHgxMGVkMjgoMHgxODEpXSxfMHg0ZWJlZjg9XzB4OTJhYzFlW18weDEwZWQyOCgweDExZCldO2NsYXNzIF8weDMyOGJkZXtjb25zdHJ1Y3Rvcigpe3ZhciBfMHgzYzJhY2M9XzB4MTBlZDI4O3RoaXNbXzB4M2MyYWNjKDB4MTM2KV09L14oPyEoPzpkb3xpZnxpbnxmb3J8bGV0fG5ld3x0cnl8dmFyfGNhc2V8ZWxzZXxlbnVtfGV2YWx8ZmFsc2V8bnVsbHx0aGlzfHRydWV8dm9pZHx3aXRofGJyZWFrfGNhdGNofGNsYXNzfGNvbnN0fHN1cGVyfHRocm93fHdoaWxlfHlpZWxkfGRlbGV0ZXxleHBvcnR8aW1wb3J0fHB1YmxpY3xyZXR1cm58c3RhdGljfHN3aXRjaHx0eXBlb2Z8ZGVmYXVsdHxleHRlbmRzfGZpbmFsbHl8cGFja2FnZXxwcml2YXRlfGNvbnRpbnVlfGRlYnVnZ2VyfGZ1bmN0aW9ufGFyZ3VtZW50c3xpbnRlcmZhY2V8cHJvdGVjdGVkfGltcGxlbWVudHN8aW5zdGFuY2VvZikkKVtfJGEtekEtWlxcXFx4QTAtXFxcXHVGRkZGXVtfJGEtekEtWjAtOVxcXFx4QTAtXFxcXHVGRkZGXSokLyx0aGlzW18weDNjMmFjYygweDE0MSldPS9eKDB8WzEtOV1bMC05XSopJC8sdGhpc1tfMHgzYzJhY2MoMHhlNildPS8nKFteXFxcXFxcXFwnXXxcXFxcXFxcXCcpKicvLHRoaXNbXzB4M2MyYWNjKDB4MTY3KV09XzB4MzYzZDU1W18weDNjMmFjYygweGM3KV0sdGhpc1tfMHgzYzJhY2MoMHgxNWQpXT1fMHgzNjNkNTVbJ0hUTUxBbGxDb2xsZWN0aW9uJ10sdGhpc1tfMHgzYzJhY2MoMHgxOWYpXT1PYmplY3RbXzB4M2MyYWNjKDB4MWE0KV0sdGhpc1snX2dldE93blByb3BlcnR5TmFtZXMnXT1PYmplY3RbXzB4M2MyYWNjKDB4MTI5KV0sdGhpc1tfMHgzYzJhY2MoMHhlZCldPV8weDM2M2Q1NVtfMHgzYzJhY2MoMHgxNmYpXSx0aGlzWydfcmVnRXhwVG9TdHJpbmcnXT1SZWdFeHBbJ3Byb3RvdHlwZSddW18weDNjMmFjYygweDE0ZSldLHRoaXNbXzB4M2MyYWNjKDB4MTMwKV09RGF0ZVtfMHgzYzJhY2MoMHhlMyldW18weDNjMmFjYygweDE0ZSldO31bXzB4MTBlZDI4KDB4ZmQpXShfMHg1ODYzZTAsXzB4NTYzNjc1LF8weDI1ZGRlOCxfMHg0MjM1YWIpe3ZhciBfMHg1ZWFjOTc9XzB4MTBlZDI4LF8weDE1ZDJhZT10aGlzLF8weDQ4YTU1OD1fMHgyNWRkZThbXzB4NWVhYzk3KDB4MWEyKV07ZnVuY3Rpb24gXzB4MzRjMGQ0KF8weDI5NTlkMCxfMHgzZTMzM2MsXzB4NmVjOTZlKXt2YXIgXzB4MjlhZDdiPV8weDVlYWM5NztfMHgzZTMzM2NbXzB4MjlhZDdiKDB4MTAwKV09XzB4MjlhZDdiKDB4ZmYpLF8weDNlMzMzY1tfMHgyOWFkN2IoMHgxN2MpXT1fMHgyOTU5ZDBbXzB4MjlhZDdiKDB4MTM1KV0sXzB4MmEwOThiPV8weDZlYzk2ZVtfMHgyOWFkN2IoMHgxODIpXVtfMHgyOWFkN2IoMHgxOWUpXSxfMHg2ZWM5NmVbXzB4MjlhZDdiKDB4MTgyKV1bXzB4MjlhZDdiKDB4MTllKV09XzB4M2UzMzNjLF8weDE1ZDJhZVtfMHgyOWFkN2IoMHgxNjgpXShfMHgzZTMzM2MsXzB4NmVjOTZlKTt9dHJ5e18weDI1ZGRlOFsnbGV2ZWwnXSsrLF8weDI1ZGRlOFsnYXV0b0V4cGFuZCddJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTBkKV1bXzB4NWVhYzk3KDB4MTcxKV0oXzB4NTYzNjc1KTt2YXIgXzB4NWU5MzdkLF8weDRkNDgzNyxfMHg3YTk0Y2UsXzB4MTJlNDM3LF8weDU0MjczYz1bXSxfMHgzMDc2ZDM9W10sXzB4NGEyN2Q1LF8weDFmMWFhMD10aGlzW18weDVlYWM5NygweDEzYyldKF8weDU2MzY3NSksXzB4MWZlOGZjPV8weDFmMWFhMD09PSdhcnJheScsXzB4MWQ5ZDMzPSEweDEsXzB4MWY3Y2ZlPV8weDFmMWFhMD09PV8weDVlYWM5NygweDEyMCksXzB4MzA4NGFlPXRoaXNbXzB4NWVhYzk3KDB4MTczKV0oXzB4MWYxYWEwKSxfMHhjMzViYzc9dGhpc1tfMHg1ZWFjOTcoMHgxM2QpXShfMHgxZjFhYTApLF8weDQ4ZDllMT1fMHgzMDg0YWV8fF8weGMzNWJjNyxfMHg1OTA0NDk9e30sXzB4MjlmYzI4PTB4MCxfMHgzMWIwMjI9ITB4MSxfMHgyYTA5OGIsXzB4MTRlMmE2PS9eKChbMS05XXsxfVswLTldKil8MCkkLztpZihfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTU5KV0pe2lmKF8weDFmZThmYyl7aWYoXzB4NGQ0ODM3PV8weDU2MzY3NVtfMHg1ZWFjOTcoMHhmNCldLF8weDRkNDgzNz5fMHgyNWRkZThbXzB4NWVhYzk3KDB4YzgpXSl7Zm9yKF8weDdhOTRjZT0weDAsXzB4MTJlNDM3PV8weDI1ZGRlOFsnZWxlbWVudHMnXSxfMHg1ZTkzN2Q9XzB4N2E5NGNlO18weDVlOTM3ZDxfMHgxMmU0Mzc7XzB4NWU5MzdkKyspXzB4MzA3NmQzWydwdXNoJ10oXzB4MTVkMmFlW18weDVlYWM5NygweGU0KV0oXzB4NTQyNzNjLF8weDU2MzY3NSxfMHgxZjFhYTAsXzB4NWU5MzdkLF8weDI1ZGRlOCkpO18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxNDIpXT0hMHgwO31lbHNle2ZvcihfMHg3YTk0Y2U9MHgwLF8weDEyZTQzNz1fMHg0ZDQ4MzcsXzB4NWU5MzdkPV8weDdhOTRjZTtfMHg1ZTkzN2Q8XzB4MTJlNDM3O18weDVlOTM3ZCsrKV8weDMwNzZkM1tfMHg1ZWFjOTcoMHgxNzEpXShfMHgxNWQyYWVbXzB4NWVhYzk3KDB4ZTQpXShfMHg1NDI3M2MsXzB4NTYzNjc1LF8weDFmMWFhMCxfMHg1ZTkzN2QsXzB4MjVkZGU4KSk7fV8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMTApXSs9XzB4MzA3NmQzW18weDVlYWM5NygweGY0KV07fWlmKCEoXzB4MWYxYWEwPT09J251bGwnfHxfMHgxZjFhYTA9PT1fMHg1ZWFjOTcoMHhjNykpJiYhXzB4MzA4NGFlJiZfMHgxZjFhYTAhPT1fMHg1ZWFjOTcoMHgxMzcpJiZfMHgxZjFhYTAhPT1fMHg1ZWFjOTcoMHgxOTQpJiZfMHgxZjFhYTAhPT1fMHg1ZWFjOTcoMHgxN2YpKXt2YXIgXzB4M2EwMDkyPV8weDQyMzVhYltfMHg1ZWFjOTcoMHgxN2QpXXx8XzB4MjVkZGU4W18weDVlYWM5NygweDE3ZCldO2lmKHRoaXNbXzB4NWVhYzk3KDB4MTVlKV0oXzB4NTYzNjc1KT8oXzB4NWU5MzdkPTB4MCxfMHg1NjM2NzVbXzB4NWVhYzk3KDB4MTBhKV0oZnVuY3Rpb24oXzB4NGIzMzE5KXt2YXIgXzB4M2QyYWE4PV8weDVlYWM5NztpZihfMHgyOWZjMjgrKyxfMHgyNWRkZThbXzB4M2QyYWE4KDB4MTEwKV0rKyxfMHgyOWZjMjg+XzB4M2EwMDkyKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fWlmKCFfMHgyNWRkZThbJ2lzRXhwcmVzc2lvblRvRXZhbHVhdGUnXSYmXzB4MjVkZGU4W18weDNkMmFhOCgweDFhMildJiZfMHgyNWRkZThbJ2F1dG9FeHBhbmRQcm9wZXJ0eUNvdW50J10+XzB4MjVkZGU4WydhdXRvRXhwYW5kTGltaXQnXSl7XzB4MzFiMDIyPSEweDA7cmV0dXJuO31fMHgzMDc2ZDNbXzB4M2QyYWE4KDB4MTcxKV0oXzB4MTVkMmFlW18weDNkMmFhOCgweGU0KV0oXzB4NTQyNzNjLF8weDU2MzY3NSxfMHgzZDJhYTgoMHgxOWIpLF8weDVlOTM3ZCsrLF8weDI1ZGRlOCxmdW5jdGlvbihfMHg1ZTdlYmUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBfMHg1ZTdlYmU7fTt9KF8weDRiMzMxOSkpKTt9KSk6dGhpc1tfMHg1ZWFjOTcoMHgxNjQpXShfMHg1NjM2NzUpJiZfMHg1NjM2NzVbXzB4NWVhYzk3KDB4MTBhKV0oZnVuY3Rpb24oXzB4Nzg5ZjksXzB4NDBiZmVkKXt2YXIgXzB4NTk1NTE1PV8weDVlYWM5NztpZihfMHgyOWZjMjgrKyxfMHgyNWRkZThbXzB4NTk1NTE1KDB4MTEwKV0rKyxfMHgyOWZjMjg+XzB4M2EwMDkyKXtfMHgzMWIwMjI9ITB4MDtyZXR1cm47fWlmKCFfMHgyNWRkZThbJ2lzRXhwcmVzc2lvblRvRXZhbHVhdGUnXSYmXzB4MjVkZGU4W18weDU5NTUxNSgweDFhMildJiZfMHgyNWRkZThbXzB4NTk1NTE1KDB4MTEwKV0+XzB4MjVkZGU4WydhdXRvRXhwYW5kTGltaXQnXSl7XzB4MzFiMDIyPSEweDA7cmV0dXJuO312YXIgXzB4MTRkMDk2PV8weDQwYmZlZFtfMHg1OTU1MTUoMHgxNGUpXSgpO18weDE0ZDA5NltfMHg1OTU1MTUoMHhmNCldPjB4NjQmJihfMHgxNGQwOTY9XzB4MTRkMDk2WydzbGljZSddKDB4MCwweDY0KStfMHg1OTU1MTUoMHgxYWMpKSxfMHgzMDc2ZDNbXzB4NTk1NTE1KDB4MTcxKV0oXzB4MTVkMmFlW18weDU5NTUxNSgweGU0KV0oXzB4NTQyNzNjLF8weDU2MzY3NSxfMHg1OTU1MTUoMHhlYiksXzB4MTRkMDk2LF8weDI1ZGRlOCxmdW5jdGlvbihfMHg4NDQ4YzIpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBfMHg4NDQ4YzI7fTt9KF8weDc4OWY5KSkpO30pLCFfMHgxZDlkMzMpe3RyeXtmb3IoXzB4NGEyN2Q1IGluIF8weDU2MzY3NSlpZighKF8weDFmZThmYyYmXzB4MTRlMmE2Wyd0ZXN0J10oXzB4NGEyN2Q1KSkmJiF0aGlzWydfYmxhY2tsaXN0ZWRQcm9wZXJ0eSddKF8weDU2MzY3NSxfMHg0YTI3ZDUsXzB4MjVkZGU4KSl7aWYoXzB4MjlmYzI4KyssXzB4MjVkZGU4W18weDVlYWM5NygweDExMCldKyssXzB4MjlmYzI4Pl8weDNhMDA5Mil7XzB4MzFiMDIyPSEweDA7YnJlYWs7fWlmKCFfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWE1KV0mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxYTIpXSYmXzB4MjVkZGU4W18weDVlYWM5NygweDExMCldPl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxNDYpXSl7XzB4MzFiMDIyPSEweDA7YnJlYWs7fV8weDMwNzZkM1tfMHg1ZWFjOTcoMHgxNzEpXShfMHgxNWQyYWVbXzB4NWVhYzk3KDB4ZDApXShfMHg1NDI3M2MsXzB4NTkwNDQ5LF8weDU2MzY3NSxfMHgxZjFhYTAsXzB4NGEyN2Q1LF8weDI1ZGRlOCkpO319Y2F0Y2h7fWlmKF8weDU5MDQ0OVtfMHg1ZWFjOTcoMHgxNzYpXT0hMHgwLF8weDFmN2NmZSYmKF8weDU5MDQ0OVsnX3BfbmFtZSddPSEweDApLCFfMHgzMWIwMjIpe3ZhciBfMHgxOGMwZjU9W11bXzB4NWVhYzk3KDB4MTRjKV0odGhpc1tfMHg1ZWFjOTcoMHgxNTEpXShfMHg1NjM2NzUpKVtfMHg1ZWFjOTcoMHgxNGMpXSh0aGlzW18weDVlYWM5NygweDEyZSldKF8weDU2MzY3NSkpO2ZvcihfMHg1ZTkzN2Q9MHgwLF8weDRkNDgzNz1fMHgxOGMwZjVbJ2xlbmd0aCddO18weDVlOTM3ZDxfMHg0ZDQ4Mzc7XzB4NWU5MzdkKyspaWYoXzB4NGEyN2Q1PV8weDE4YzBmNVtfMHg1ZTkzN2RdLCEoXzB4MWZlOGZjJiZfMHgxNGUyYTZbXzB4NWVhYzk3KDB4MTc4KV0oXzB4NGEyN2Q1W18weDVlYWM5NygweDE0ZSldKCkpKSYmIXRoaXNbXzB4NWVhYzk3KDB4MTYxKV0oXzB4NTYzNjc1LF8weDRhMjdkNSxfMHgyNWRkZTgpJiYhXzB4NTkwNDQ5W18weDVlYWM5NygweGM1KStfMHg0YTI3ZDVbXzB4NWVhYzk3KDB4MTRlKV0oKV0pe2lmKF8weDI5ZmMyOCsrLF8weDI1ZGRlOFsnYXV0b0V4cGFuZFByb3BlcnR5Q291bnQnXSsrLF8weDI5ZmMyOD5fMHgzYTAwOTIpe18weDMxYjAyMj0hMHgwO2JyZWFrO31pZighXzB4MjVkZGU4W18weDVlYWM5NygweDFhNSldJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWEyKV0mJl8weDI1ZGRlOFtfMHg1ZWFjOTcoMHgxMTApXT5fMHgyNWRkZThbXzB4NWVhYzk3KDB4MTQ2KV0pe18weDMxYjAyMj0hMHgwO2JyZWFrO31fMHgzMDc2ZDNbJ3B1c2gnXShfMHgxNWQyYWVbXzB4NWVhYzk3KDB4ZDApXShfMHg1NDI3M2MsXzB4NTkwNDQ5LF8weDU2MzY3NSxfMHgxZjFhYTAsXzB4NGEyN2Q1LF8weDI1ZGRlOCkpO319fX19aWYoXzB4NTg2M2UwW18weDVlYWM5NygweDEwMCldPV8weDFmMWFhMCxfMHg0OGQ5ZTE/KF8weDU4NjNlMFsndmFsdWUnXT1fMHg1NjM2NzVbXzB4NWVhYzk3KDB4ZWUpXSgpLHRoaXNbXzB4NWVhYzk3KDB4MTMzKV0oXzB4MWYxYWEwLF8weDU4NjNlMCxfMHgyNWRkZTgsXzB4NDIzNWFiKSk6XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4ZDcpP18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxYTApXT10aGlzW18weDVlYWM5NygweDEzMCldW18weDVlYWM5NygweDExYyldKF8weDU2MzY3NSk6XzB4MWYxYWEwPT09XzB4NWVhYzk3KDB4MTdmKT9fMHg1ODYzZTBbXzB4NWVhYzk3KDB4MWEwKV09XzB4NTYzNjc1W18weDVlYWM5NygweDE0ZSldKCk6XzB4MWYxYWEwPT09J1JlZ0V4cCc/XzB4NTg2M2UwW18weDVlYWM5NygweDFhMCldPXRoaXNbXzB4NWVhYzk3KDB4ZTcpXVtfMHg1ZWFjOTcoMHgxMWMpXShfMHg1NjM2NzUpOl8weDFmMWFhMD09PV8weDVlYWM5NygweGM2KSYmdGhpc1tfMHg1ZWFjOTcoMHhlZCldP18weDU4NjNlMFtfMHg1ZWFjOTcoMHgxYTApXT10aGlzWydfU3ltYm9sJ11bXzB4NWVhYzk3KDB4ZTMpXVtfMHg1ZWFjOTcoMHgxNGUpXVsnY2FsbCddKF8weDU2MzY3NSk6IV8weDI1ZGRlOFsnZGVwdGgnXSYmIShfMHgxZjFhYTA9PT0nbnVsbCd8fF8weDFmMWFhMD09PV8weDVlYWM5NygweGM3KSkmJihkZWxldGUgXzB4NTg2M2UwWyd2YWx1ZSddLF8weDU4NjNlMFsnY2FwcGVkJ109ITB4MCksXzB4MzFiMDIyJiYoXzB4NTg2M2UwW18weDVlYWM5NygweDExNildPSEweDApLF8weDJhMDk4Yj1fMHgyNWRkZThbXzB4NWVhYzk3KDB4MTgyKV1bXzB4NWVhYzk3KDB4MTllKV0sXzB4MjVkZGU4W18weDVlYWM5NygweDE4MildW18weDVlYWM5NygweDE5ZSldPV8weDU4NjNlMCx0aGlzW18weDVlYWM5NygweDE2OCldKF8weDU4NjNlMCxfMHgyNWRkZTgpLF8weDMwNzZkM1tfMHg1ZWFjOTcoMHhmNCldKXtmb3IoXzB4NWU5MzdkPTB4MCxfMHg0ZDQ4Mzc9XzB4MzA3NmQzW18weDVlYWM5NygweGY0KV07XzB4NWU5MzdkPF8weDRkNDgzNztfMHg1ZTkzN2QrKylfMHgzMDc2ZDNbXzB4NWU5MzdkXShfMHg1ZTkzN2QpO31fMHg1NDI3M2NbXzB4NWVhYzk3KDB4ZjQpXSYmKF8weDU4NjNlMFtfMHg1ZWFjOTcoMHgxN2QpXT1fMHg1NDI3M2MpO31jYXRjaChfMHg1YjZhNjIpe18weDM0YzBkNChfMHg1YjZhNjIsXzB4NTg2M2UwLF8weDI1ZGRlOCk7fXJldHVybiB0aGlzW18weDVlYWM5NygweDE0ZildKF8weDU2MzY3NSxfMHg1ODYzZTApLHRoaXNbJ190cmVlTm9kZVByb3BlcnRpZXNBZnRlckZ1bGxWYWx1ZSddKF8weDU4NjNlMCxfMHgyNWRkZTgpLF8weDI1ZGRlOFsnbm9kZSddW18weDVlYWM5NygweDE5ZSldPV8weDJhMDk4YixfMHgyNWRkZThbJ2xldmVsJ10tLSxfMHgyNWRkZThbXzB4NWVhYzk3KDB4MWEyKV09XzB4NDhhNTU4LF8weDI1ZGRlOFsnYXV0b0V4cGFuZCddJiZfMHgyNWRkZThbXzB4NWVhYzk3KDB4MTBkKV1bXzB4NWVhYzk3KDB4MTYyKV0oKSxfMHg1ODYzZTA7fVtfMHgxMGVkMjgoMHgxMmUpXShfMHg1ZTdlNDUpe3ZhciBfMHgxMTFkZDE9XzB4MTBlZDI4O3JldHVybiBPYmplY3RbXzB4MTExZGQxKDB4MTkwKV0/T2JqZWN0W18weDExMWRkMSgweDE5MCldKF8weDVlN2U0NSk6W107fVtfMHgxMGVkMjgoMHgxNWUpXShfMHg1YjY5YTkpe3ZhciBfMHg1NWFjMjc9XzB4MTBlZDI4O3JldHVybiEhKF8weDViNjlhOSYmXzB4MzYzZDU1W18weDU1YWMyNygweDE5YildJiZ0aGlzW18weDU1YWMyNygweDE1MildKF8weDViNjlhOSk9PT1fMHg1NWFjMjcoMHgxNDcpJiZfMHg1YjY5YTlbXzB4NTVhYzI3KDB4MTBhKV0pO31bJ19ibGFja2xpc3RlZFByb3BlcnR5J10oXzB4MjhiMTVmLF8weDU4MWRkNixfMHgzMjIyNmMpe3ZhciBfMHgyNDdhNzQ9XzB4MTBlZDI4O3JldHVybiBfMHgzMjIyNmNbXzB4MjQ3YTc0KDB4ZWYpXT90eXBlb2YgXzB4MjhiMTVmW18weDU4MWRkNl09PV8weDI0N2E3NCgweDEyMCk6ITB4MTt9W18weDEwZWQyOCgweDEzYyldKF8weDM1MjEzNil7dmFyIF8weDQ3NDk4ZT1fMHgxMGVkMjgsXzB4NDU2ODIyPScnO3JldHVybiBfMHg0NTY4MjI9dHlwZW9mIF8weDM1MjEzNixfMHg0NTY4MjI9PT1fMHg0NzQ5OGUoMHgxNDMpP3RoaXNbXzB4NDc0OThlKDB4MTUyKV0oXzB4MzUyMTM2KT09PV8weDQ3NDk4ZSgweDE4MCk/XzB4NDU2ODIyPV8weDQ3NDk4ZSgweDFhNyk6dGhpc1tfMHg0NzQ5OGUoMHgxNTIpXShfMHgzNTIxMzYpPT09XzB4NDc0OThlKDB4ZGQpP18weDQ1NjgyMj0nZGF0ZSc6dGhpc1snX29iamVjdFRvU3RyaW5nJ10oXzB4MzUyMTM2KT09PV8weDQ3NDk4ZSgweGJiKT9fMHg0NTY4MjI9XzB4NDc0OThlKDB4MTdmKTpfMHgzNTIxMzY9PT1udWxsP18weDQ1NjgyMj1fMHg0NzQ5OGUoMHgxYjQpOl8weDM1MjEzNltfMHg0NzQ5OGUoMHgxMGUpXSYmKF8weDQ1NjgyMj1fMHgzNTIxMzZbXzB4NDc0OThlKDB4MTBlKV1bXzB4NDc0OThlKDB4YzEpXXx8XzB4NDU2ODIyKTpfMHg0NTY4MjI9PT0ndW5kZWZpbmVkJyYmdGhpc1tfMHg0NzQ5OGUoMHgxNWQpXSYmXzB4MzUyMTM2IGluc3RhbmNlb2YgdGhpc1tfMHg0NzQ5OGUoMHgxNWQpXSYmKF8weDQ1NjgyMj1fMHg0NzQ5OGUoMHhjMCkpLF8weDQ1NjgyMjt9Wydfb2JqZWN0VG9TdHJpbmcnXShfMHgxZGU2NmMpe3ZhciBfMHg0NzNlNjU9XzB4MTBlZDI4O3JldHVybiBPYmplY3RbXzB4NDczZTY1KDB4ZTMpXVsndG9TdHJpbmcnXVtfMHg0NzNlNjUoMHgxMWMpXShfMHgxZGU2NmMpO31bXzB4MTBlZDI4KDB4MTczKV0oXzB4MWI3MzFhKXt2YXIgXzB4YjYwYjE0PV8weDEwZWQyODtyZXR1cm4gXzB4MWI3MzFhPT09XzB4YjYwYjE0KDB4ZTEpfHxfMHgxYjczMWE9PT1fMHhiNjBiMTQoMHgxMDIpfHxfMHgxYjczMWE9PT1fMHhiNjBiMTQoMHhkZSk7fVsnX2lzUHJpbWl0aXZlV3JhcHBlclR5cGUnXShfMHgzMzFiMDkpe3ZhciBfMHgxNmQ3ZDk9XzB4MTBlZDI4O3JldHVybiBfMHgzMzFiMDk9PT1fMHgxNmQ3ZDkoMHgxNTQpfHxfMHgzMzFiMDk9PT1fMHgxNmQ3ZDkoMHgxMzcpfHxfMHgzMzFiMDk9PT1fMHgxNmQ3ZDkoMHgxMzEpO31bXzB4MTBlZDI4KDB4ZTQpXShfMHgyOWM5OWIsXzB4MmY0ODc2LF8weDFkMmY0ZixfMHgzMDc2YmMsXzB4MTc4MzI3LF8weDJlZWM0OSl7dmFyIF8weDQ1OGY0Zj10aGlzO3JldHVybiBmdW5jdGlvbihfMHg1MzBmOTkpe3ZhciBfMHgzNzQ3NDY9XzB4M2ZmOSxfMHg2MGRmODM9XzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweDE5ZSldLF8weDI1YTIwOT1fMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4MWE5KV0sXzB4MjkwZTk5PV8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVsncGFyZW50J107XzB4MTc4MzI3W18weDM3NDc0NigweDE4MildW18weDM3NDc0NigweGNlKV09XzB4NjBkZjgzLF8weDE3ODMyN1tfMHgzNzQ3NDYoMHgxODIpXVtfMHgzNzQ3NDYoMHgxYTkpXT10eXBlb2YgXzB4MzA3NmJjPT1fMHgzNzQ3NDYoMHhkZSk/XzB4MzA3NmJjOl8weDUzMGY5OSxfMHgyOWM5OWJbXzB4Mzc0NzQ2KDB4MTcxKV0oXzB4NDU4ZjRmW18weDM3NDc0NigweDFiNSldKF8weDJmNDg3NixfMHgxZDJmNGYsXzB4MzA3NmJjLF8weDE3ODMyNyxfMHgyZWVjNDkpKSxfMHgxNzgzMjdbJ25vZGUnXVtfMHgzNzQ3NDYoMHhjZSldPV8weDI5MGU5OSxfMHgxNzgzMjdbXzB4Mzc0NzQ2KDB4MTgyKV1bXzB4Mzc0NzQ2KDB4MWE5KV09XzB4MjVhMjA5O307fVtfMHgxMGVkMjgoMHhkMCldKF8weDgzYjBlLF8weDRkYmZiNyxfMHg1NzgyNWUsXzB4NTBmMjVlLF8weGY3NDJjYixfMHg1ZTA0MDIsXzB4MmRmNDE1KXt2YXIgXzB4NGZmODBjPV8weDEwZWQyOCxfMHgzYzIzZDQ9dGhpcztyZXR1cm4gXzB4NGRiZmI3W18weDRmZjgwYygweGM1KStfMHhmNzQyY2JbJ3RvU3RyaW5nJ10oKV09ITB4MCxmdW5jdGlvbihfMHgzYWJkNjUpe3ZhciBfMHg0YWM5NWU9XzB4NGZmODBjLF8weDJjOWMzZj1fMHg1ZTA0MDJbXzB4NGFjOTVlKDB4MTgyKV1bJ2N1cnJlbnQnXSxfMHgyNjM1YmQ9XzB4NWUwNDAyW18weDRhYzk1ZSgweDE4MildW18weDRhYzk1ZSgweDFhOSldLF8weGMyZTBkPV8weDVlMDQwMlsnbm9kZSddW18weDRhYzk1ZSgweGNlKV07XzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4Y2UpXT1fMHgyYzljM2YsXzB4NWUwNDAyW18weDRhYzk1ZSgweDE4MildWydpbmRleCddPV8weDNhYmQ2NSxfMHg4M2IwZVtfMHg0YWM5NWUoMHgxNzEpXShfMHgzYzIzZDRbXzB4NGFjOTVlKDB4MWI1KV0oXzB4NTc4MjVlLF8weDUwZjI1ZSxfMHhmNzQyY2IsXzB4NWUwNDAyLF8weDJkZjQxNSkpLF8weDVlMDQwMlsnbm9kZSddW18weDRhYzk1ZSgweGNlKV09XzB4YzJlMGQsXzB4NWUwNDAyWydub2RlJ11bXzB4NGFjOTVlKDB4MWE5KV09XzB4MjYzNWJkO307fVtfMHgxMGVkMjgoMHgxYjUpXShfMHhmMzhhYzMsXzB4NWJkY2ZkLF8weDI5MGU2MixfMHg3OTkwY2YsXzB4NDhlNjA0KXt2YXIgXzB4MWFhNTdlPV8weDEwZWQyOCxfMHgyYmZmOGM9dGhpcztfMHg0OGU2MDR8fChfMHg0OGU2MDQ9ZnVuY3Rpb24oXzB4NDNiYThmLF8weDU5N2QyNil7cmV0dXJuIF8weDQzYmE4ZltfMHg1OTdkMjZdO30pO3ZhciBfMHg0OGEyMGU9XzB4MjkwZTYyW18weDFhYTU3ZSgweDE0ZSldKCksXzB4ZDY4NzNkPV8weDc5OTBjZltfMHgxYWE1N2UoMHgxMzgpXXx8e30sXzB4NzQyNmYzPV8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXSxfMHgzZjMxOTk9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDFhNSldO3RyeXt2YXIgXzB4MThiNzAyPXRoaXNbJ19pc01hcCddKF8weGYzOGFjMyksXzB4NWExYWU0PV8weDQ4YTIwZTtfMHgxOGI3MDImJl8weDVhMWFlNFsweDBdPT09J1xcXFx4MjcnJiYoXzB4NWExYWU0PV8weDVhMWFlNFsnc3Vic3RyJ10oMHgxLF8weDVhMWFlNFtfMHgxYWE1N2UoMHhmNCldLTB4MikpO3ZhciBfMHg2YWYxYTE9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDEzOCldPV8weGQ2ODczZFsnX3BfJytfMHg1YTFhZTRdO18weDZhZjFhMSYmKF8weDc5OTBjZltfMHgxYWE1N2UoMHgxNTkpXT1fMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTU5KV0rMHgxKSxfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MWE1KV09ISFfMHg2YWYxYTE7dmFyIF8weDIzMzNkNz10eXBlb2YgXzB4MjkwZTYyPT1fMHgxYWE1N2UoMHhjNiksXzB4MjJjYmEwPXsnbmFtZSc6XzB4MjMzM2Q3fHxfMHgxOGI3MDI/XzB4NDhhMjBlOnRoaXNbJ19wcm9wZXJ0eU5hbWUnXShfMHg0OGEyMGUpfTtpZihfMHgyMzMzZDcmJihfMHgyMmNiYTBbXzB4MWFhNTdlKDB4YzYpXT0hMHgwKSwhKF8weDViZGNmZD09PV8weDFhYTU3ZSgweDFhNyl8fF8weDViZGNmZD09PV8weDFhYTU3ZSgweDEyZikpKXt2YXIgXzB4MTU2YjZkPXRoaXNbXzB4MWFhNTdlKDB4MTlmKV0oXzB4ZjM4YWMzLF8weDI5MGU2Mik7aWYoXzB4MTU2YjZkJiYoXzB4MTU2YjZkWydzZXQnXSYmKF8weDIyY2JhMFsnc2V0dGVyJ109ITB4MCksXzB4MTU2YjZkW18weDFhYTU3ZSgweDEwNyldJiYhXzB4NmFmMWExJiYhXzB4Nzk5MGNmW18weDFhYTU3ZSgweDE5OCldKSlyZXR1cm4gXzB4MjJjYmEwWydnZXR0ZXInXT0hMHgwLHRoaXNbXzB4MWFhNTdlKDB4MTdhKV0oXzB4MjJjYmEwLF8weDc5OTBjZiksXzB4MjJjYmEwO312YXIgXzB4MzZmZDI1O3RyeXtfMHgzNmZkMjU9XzB4NDhlNjA0KF8weGYzOGFjMyxfMHgyOTBlNjIpO31jYXRjaChfMHgyMTAwODIpe3JldHVybiBfMHgyMmNiYTA9eyduYW1lJzpfMHg0OGEyMGUsJ3R5cGUnOl8weDFhYTU3ZSgweGZmKSwnZXJyb3InOl8weDIxMDA4MltfMHgxYWE1N2UoMHgxMzUpXX0sdGhpc1tfMHgxYWE1N2UoMHgxN2EpXShfMHgyMmNiYTAsXzB4Nzk5MGNmKSxfMHgyMmNiYTA7fXZhciBfMHgxNWMwMWU9dGhpc1tfMHgxYWE1N2UoMHgxM2MpXShfMHgzNmZkMjUpLF8weDFhYWI5OT10aGlzW18weDFhYTU3ZSgweDE3MyldKF8weDE1YzAxZSk7aWYoXzB4MjJjYmEwWyd0eXBlJ109XzB4MTVjMDFlLF8weDFhYWI5OSl0aGlzW18weDFhYTU3ZSgweDE3YSldKF8weDIyY2JhMCxfMHg3OTkwY2YsXzB4MzZmZDI1LGZ1bmN0aW9uKCl7dmFyIF8weDRmOGQ3NT1fMHgxYWE1N2U7XzB4MjJjYmEwW18weDRmOGQ3NSgweDFhMCldPV8weDM2ZmQyNVsndmFsdWVPZiddKCksIV8weDZhZjFhMSYmXzB4MmJmZjhjW18weDRmOGQ3NSgweDEzMyldKF8weDE1YzAxZSxfMHgyMmNiYTAsXzB4Nzk5MGNmLHt9KTt9KTtlbHNle3ZhciBfMHgzMzVmNTk9XzB4Nzk5MGNmW18weDFhYTU3ZSgweDFhMildJiZfMHg3OTkwY2ZbJ2xldmVsJ108XzB4Nzk5MGNmWydhdXRvRXhwYW5kTWF4RGVwdGgnXSYmXzB4Nzk5MGNmW18weDFhYTU3ZSgweDEwZCldW18weDFhYTU3ZSgweGQ0KV0oXzB4MzZmZDI1KTwweDAmJl8weDE1YzAxZSE9PV8weDFhYTU3ZSgweDEyMCkmJl8weDc5OTBjZltfMHgxYWE1N2UoMHgxMTApXTxfMHg3OTkwY2ZbJ2F1dG9FeHBhbmRMaW1pdCddO18weDMzNWY1OXx8XzB4Nzk5MGNmW18weDFhYTU3ZSgweDE4OCldPF8weDc0MjZmM3x8XzB4NmFmMWExPyh0aGlzWydzZXJpYWxpemUnXShfMHgyMmNiYTAsXzB4MzZmZDI1LF8weDc5OTBjZixfMHg2YWYxYTF8fHt9KSx0aGlzW18weDFhYTU3ZSgweDE0ZildKF8weDM2ZmQyNSxfMHgyMmNiYTApKTp0aGlzW18weDFhYTU3ZSgweDE3YSldKF8weDIyY2JhMCxfMHg3OTkwY2YsXzB4MzZmZDI1LGZ1bmN0aW9uKCl7dmFyIF8weDUzZDAwMD1fMHgxYWE1N2U7XzB4MTVjMDFlPT09XzB4NTNkMDAwKDB4MWI0KXx8XzB4MTVjMDFlPT09XzB4NTNkMDAwKDB4YzcpfHwoZGVsZXRlIF8weDIyY2JhMFtfMHg1M2QwMDAoMHgxYTApXSxfMHgyMmNiYTBbXzB4NTNkMDAwKDB4MTgzKV09ITB4MCk7fSk7fXJldHVybiBfMHgyMmNiYTA7fWZpbmFsbHl7XzB4Nzk5MGNmW18weDFhYTU3ZSgweDEzOCldPV8weGQ2ODczZCxfMHg3OTkwY2ZbXzB4MWFhNTdlKDB4MTU5KV09XzB4NzQyNmYzLF8weDc5OTBjZltfMHgxYWE1N2UoMHgxYTUpXT1fMHgzZjMxOTk7fX1bJ19jYXBJZlN0cmluZyddKF8weDk2MDIwYyxfMHg0ZTRjYzMsXzB4YWVhYjM2LF8weDFlNTY1Nyl7dmFyIF8weDIzNTZlND1fMHgxMGVkMjgsXzB4MmJiZmE2PV8weDFlNTY1N1snc3RyTGVuZ3RoJ118fF8weGFlYWIzNltfMHgyMzU2ZTQoMHgxMDgpXTtpZigoXzB4OTYwMjBjPT09XzB4MjM1NmU0KDB4MTAyKXx8XzB4OTYwMjBjPT09XzB4MjM1NmU0KDB4MTM3KSkmJl8weDRlNGNjM1sndmFsdWUnXSl7bGV0IF8weDJlMGQyMT1fMHg0ZTRjYzNbJ3ZhbHVlJ11bXzB4MjM1NmU0KDB4ZjQpXTtfMHhhZWFiMzZbJ2FsbFN0ckxlbmd0aCddKz1fMHgyZTBkMjEsXzB4YWVhYjM2WydhbGxTdHJMZW5ndGgnXT5fMHhhZWFiMzZbXzB4MjM1NmU0KDB4ZjMpXT8oXzB4NGU0Y2MzW18weDIzNTZlNCgweDE4MyldPScnLGRlbGV0ZSBfMHg0ZTRjYzNbJ3ZhbHVlJ10pOl8weDJlMGQyMT5fMHgyYmJmYTYmJihfMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MTgzKV09XzB4NGU0Y2MzW18weDIzNTZlNCgweDFhMCldW18weDIzNTZlNCgweDE4YildKDB4MCxfMHgyYmJmYTYpLGRlbGV0ZSBfMHg0ZTRjYzNbXzB4MjM1NmU0KDB4MWEwKV0pO319W18weDEwZWQyOCgweDE2NCldKF8weDNlZmVmMyl7dmFyIF8weDM0ODhhYz1fMHgxMGVkMjg7cmV0dXJuISEoXzB4M2VmZWYzJiZfMHgzNjNkNTVbXzB4MzQ4OGFjKDB4ZWIpXSYmdGhpc1tfMHgzNDg4YWMoMHgxNTIpXShfMHgzZWZlZjMpPT09XzB4MzQ4OGFjKDB4MWFmKSYmXzB4M2VmZWYzW18weDM0ODhhYygweDEwYSldKTt9W18weDEwZWQyOCgweGM0KV0oXzB4MTFjMzViKXt2YXIgXzB4MjM0NTNkPV8weDEwZWQyODtpZihfMHgxMWMzNWJbXzB4MjM0NTNkKDB4ZjYpXSgvXlxcXFxkKyQvKSlyZXR1cm4gXzB4MTFjMzViO3ZhciBfMHg0ZjZhMDM7dHJ5e18weDRmNmEwMz1KU09OW18weDIzNDUzZCgweGYxKV0oJycrXzB4MTFjMzViKTt9Y2F0Y2h7XzB4NGY2YTAzPSdcXFxceDIyJyt0aGlzW18weDIzNDUzZCgweDE1MildKF8weDExYzM1YikrJ1xcXFx4MjInO31yZXR1cm4gXzB4NGY2YTAzW18weDIzNDUzZCgweGY2KV0oL15cXFwiKFthLXpBLVpfXVthLXpBLVpfMC05XSopXFxcIiQvKT9fMHg0ZjZhMDM9XzB4NGY2YTAzWydzdWJzdHInXSgweDEsXzB4NGY2YTAzWydsZW5ndGgnXS0weDIpOl8weDRmNmEwMz1fMHg0ZjZhMDNbXzB4MjM0NTNkKDB4MTY2KV0oLycvZywnXFxcXHg1Y1xcXFx4MjcnKVsncmVwbGFjZSddKC9cXFxcXFxcXFxcXCIvZywnXFxcXHgyMicpWydyZXBsYWNlJ10oLyheXFxcInxcXFwiJCkvZywnXFxcXHgyNycpLF8weDRmNmEwMzt9W18weDEwZWQyOCgweDE3YSldKF8weDU1Y2M0NyxfMHgxMWJhYjMsXzB4NDE3MThmLF8weDE2M2I2YSl7dmFyIF8weDQ3YzkwMj1fMHgxMGVkMjg7dGhpc1tfMHg0N2M5MDIoMHgxNjgpXShfMHg1NWNjNDcsXzB4MTFiYWIzKSxfMHgxNjNiNmEmJl8weDE2M2I2YSgpLHRoaXNbJ19hZGRpdGlvbmFsTWV0YWRhdGEnXShfMHg0MTcxOGYsXzB4NTVjYzQ3KSx0aGlzWydfdHJlZU5vZGVQcm9wZXJ0aWVzQWZ0ZXJGdWxsVmFsdWUnXShfMHg1NWNjNDcsXzB4MTFiYWIzKTt9W18weDEwZWQyOCgweDE2OCldKF8weDNmOGIzYSxfMHg0ZDU4ODQpe3ZhciBfMHg0OWM2OWU9XzB4MTBlZDI4O3RoaXNbXzB4NDljNjllKDB4MTJiKV0oXzB4M2Y4YjNhLF8weDRkNTg4NCksdGhpc1tfMHg0OWM2OWUoMHhjYSldKF8weDNmOGIzYSxfMHg0ZDU4ODQpLHRoaXNbXzB4NDljNjllKDB4MThlKV0oXzB4M2Y4YjNhLF8weDRkNTg4NCksdGhpc1snX3NldE5vZGVQZXJtaXNzaW9ucyddKF8weDNmOGIzYSxfMHg0ZDU4ODQpO31bXzB4MTBlZDI4KDB4MTJiKV0oXzB4MjRkNWY4LF8weDE0ZWFlYSl7fVtfMHgxMGVkMjgoMHhjYSldKF8weDU3NmEzMixfMHg2ODdjNSl7fVtfMHgxMGVkMjgoMHhiZCldKF8weDQ4OWM5ZSxfMHhmNzY5NTcpe31bXzB4MTBlZDI4KDB4MTQwKV0oXzB4NDBiZDZjKXtyZXR1cm4gXzB4NDBiZDZjPT09dGhpc1snX3VuZGVmaW5lZCddO31bXzB4MTBlZDI4KDB4ZjIpXShfMHg1OWRiZDcsXzB4MzliOTkzKXt2YXIgXzB4NGFhYjM0PV8weDEwZWQyODt0aGlzW18weDRhYWIzNCgweGJkKV0oXzB4NTlkYmQ3LF8weDM5Yjk5MyksdGhpc1tfMHg0YWFiMzQoMHgxOTYpXShfMHg1OWRiZDcpLF8weDM5Yjk5M1tfMHg0YWFiMzQoMHhmOSldJiZ0aGlzWydfc29ydFByb3BzJ10oXzB4NTlkYmQ3KSx0aGlzW18weDRhYWIzNCgweDE1ZildKF8weDU5ZGJkNyxfMHgzOWI5OTMpLHRoaXNbXzB4NGFhYjM0KDB4ZTIpXShfMHg1OWRiZDcsXzB4MzliOTkzKSx0aGlzW18weDRhYWIzNCgweDExMSldKF8weDU5ZGJkNyk7fVtfMHgxMGVkMjgoMHgxNGYpXShfMHgyNTE5NjUsXzB4OWI5M2NkKXt2YXIgXzB4ODNjYmQ0PV8weDEwZWQyODtsZXQgXzB4Y2QzOTNmO3RyeXtfMHgzNjNkNTVbXzB4ODNjYmQ0KDB4MTc0KV0mJihfMHhjZDM5M2Y9XzB4MzYzZDU1W18weDgzY2JkNCgweDE3NCldWydlcnJvciddLF8weDM2M2Q1NVtfMHg4M2NiZDQoMHgxNzQpXVtfMHg4M2NiZDQoMHgxN2MpXT1mdW5jdGlvbigpe30pLF8weDI1MTk2NSYmdHlwZW9mIF8weDI1MTk2NVtfMHg4M2NiZDQoMHhmNCldPT1fMHg4M2NiZDQoMHhkZSkmJihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4ZjQpXT1fMHgyNTE5NjVbXzB4ODNjYmQ0KDB4ZjQpXSk7fWNhdGNoe31maW5hbGx5e18weGNkMzkzZiYmKF8weDM2M2Q1NVtfMHg4M2NiZDQoMHgxNzQpXVtfMHg4M2NiZDQoMHgxN2MpXT1fMHhjZDM5M2YpO31pZihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MTAwKV09PT1fMHg4M2NiZDQoMHhkZSl8fF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMDApXT09PV8weDgzY2JkNCgweDEzMSkpe2lmKGlzTmFOKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXSkpXzB4OWI5M2NkWyduYW4nXT0hMHgwLGRlbGV0ZSBfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MWEwKV07ZWxzZSBzd2l0Y2goXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldKXtjYXNlIE51bWJlcltfMHg4M2NiZDQoMHgxOTIpXTpfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MTc1KV09ITB4MCxkZWxldGUgXzB4OWI5M2NkW18weDgzY2JkNCgweDFhMCldO2JyZWFrO2Nhc2UgTnVtYmVyW18weDgzY2JkNCgweDE4NSldOl8weDliOTNjZFsnbmVnYXRpdmVJbmZpbml0eSddPSEweDAsZGVsZXRlIF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXTticmVhaztjYXNlIDB4MDp0aGlzW18weDgzY2JkNCgweDEwMSldKF8weDliOTNjZFtfMHg4M2NiZDQoMHgxYTApXSkmJihfMHg5YjkzY2RbXzB4ODNjYmQ0KDB4MTI0KV09ITB4MCk7YnJlYWs7fX1lbHNlIF8weDliOTNjZFtfMHg4M2NiZDQoMHgxMDApXT09PV8weDgzY2JkNCgweDEyMCkmJnR5cGVvZiBfMHgyNTE5NjVbXzB4ODNjYmQ0KDB4YzEpXT09XzB4ODNjYmQ0KDB4MTAyKSYmXzB4MjUxOTY1W18weDgzY2JkNCgweGMxKV0mJl8weDliOTNjZFtfMHg4M2NiZDQoMHhjMSldJiZfMHgyNTE5NjVbJ25hbWUnXSE9PV8weDliOTNjZFtfMHg4M2NiZDQoMHhjMSldJiYoXzB4OWI5M2NkW18weDgzY2JkNCgweGRhKV09XzB4MjUxOTY1WyduYW1lJ10pO31bXzB4MTBlZDI4KDB4MTAxKV0oXzB4ZGM3MmY2KXt2YXIgXzB4Mzk2ZjMyPV8weDEwZWQyODtyZXR1cm4gMHgxL18weGRjNzJmNj09PU51bWJlcltfMHgzOTZmMzIoMHgxODUpXTt9W18weDEwZWQyOCgweDExNCldKF8weGM0OWY1OSl7dmFyIF8weDE1ZDMxYT1fMHgxMGVkMjg7IV8weGM0OWY1OVtfMHgxNWQzMWEoMHgxN2QpXXx8IV8weGM0OWY1OVtfMHgxNWQzMWEoMHgxN2QpXVsnbGVuZ3RoJ118fF8weGM0OWY1OVtfMHgxNWQzMWEoMHgxMDApXT09PV8weDE1ZDMxYSgweDFhNyl8fF8weGM0OWY1OVtfMHgxNWQzMWEoMHgxMDApXT09PV8weDE1ZDMxYSgweGViKXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDEwMCldPT09XzB4MTVkMzFhKDB4MTliKXx8XzB4YzQ5ZjU5W18weDE1ZDMxYSgweDE3ZCldW18weDE1ZDMxYSgweDE3ZSldKGZ1bmN0aW9uKF8weDUyMWE2NixfMHgzMDM3Yjkpe3ZhciBfMHgxOWIzYzg9XzB4MTVkMzFhLF8weDMwNzQwZj1fMHg1MjFhNjZbXzB4MTliM2M4KDB4YzEpXVtfMHgxOWIzYzgoMHgxOTkpXSgpLF8weDM3N2ZmMT1fMHgzMDM3YjlbXzB4MTliM2M4KDB4YzEpXVsndG9Mb3dlckNhc2UnXSgpO3JldHVybiBfMHgzMDc0MGY8XzB4Mzc3ZmYxPy0weDE6XzB4MzA3NDBmPl8weDM3N2ZmMT8weDE6MHgwO30pO31bJ19hZGRGdW5jdGlvbnNOb2RlJ10oXzB4MjRmMTQ2LF8weDMwNGZkYSl7dmFyIF8weDJhMGYxNT1fMHgxMGVkMjg7aWYoIShfMHgzMDRmZGFbXzB4MmEwZjE1KDB4ZWYpXXx8IV8weDI0ZjE0NltfMHgyYTBmMTUoMHgxN2QpXXx8IV8weDI0ZjE0NltfMHgyYTBmMTUoMHgxN2QpXVtfMHgyYTBmMTUoMHhmNCldKSl7Zm9yKHZhciBfMHgxNGM5ZjU9W10sXzB4NGQ5ZWU0PVtdLF8weDQ4OGY3OT0weDAsXzB4MTAxYTM0PV8weDI0ZjE0NltfMHgyYTBmMTUoMHgxN2QpXVtfMHgyYTBmMTUoMHhmNCldO18weDQ4OGY3OTxfMHgxMDFhMzQ7XzB4NDg4Zjc5Kyspe3ZhciBfMHgxOTY1MWY9XzB4MjRmMTQ2W18weDJhMGYxNSgweDE3ZCldW18weDQ4OGY3OV07XzB4MTk2NTFmW18weDJhMGYxNSgweDEwMCldPT09XzB4MmEwZjE1KDB4MTIwKT9fMHgxNGM5ZjVbXzB4MmEwZjE1KDB4MTcxKV0oXzB4MTk2NTFmKTpfMHg0ZDllZTRbJ3B1c2gnXShfMHgxOTY1MWYpO31pZighKCFfMHg0ZDllZTRbXzB4MmEwZjE1KDB4ZjQpXXx8XzB4MTRjOWY1WydsZW5ndGgnXTw9MHgxKSl7XzB4MjRmMTQ2Wydwcm9wcyddPV8weDRkOWVlNDt2YXIgXzB4MjMwYmVjPXsnZnVuY3Rpb25zTm9kZSc6ITB4MCwncHJvcHMnOl8weDE0YzlmNX07dGhpc1tfMHgyYTBmMTUoMHgxMmIpXShfMHgyMzBiZWMsXzB4MzA0ZmRhKSx0aGlzW18weDJhMGYxNSgweGJkKV0oXzB4MjMwYmVjLF8weDMwNGZkYSksdGhpc1tfMHgyYTBmMTUoMHgxOTYpXShfMHgyMzBiZWMpLHRoaXNbXzB4MmEwZjE1KDB4ZmUpXShfMHgyMzBiZWMsXzB4MzA0ZmRhKSxfMHgyMzBiZWNbJ2lkJ10rPSdcXFxceDIwZicsXzB4MjRmMTQ2Wydwcm9wcyddW18weDJhMGYxNSgweDFhZCldKF8weDIzMGJlYyk7fX19W18weDEwZWQyOCgweGUyKV0oXzB4NDY4ZTk5LF8weDQzODhmMCl7fVsnX3NldE5vZGVFeHBhbmRhYmxlU3RhdGUnXShfMHg1ZWI3MTcpe31bXzB4MTBlZDI4KDB4MTIxKV0oXzB4MzhjMDVjKXt2YXIgXzB4MWFlZTFhPV8weDEwZWQyODtyZXR1cm4gQXJyYXlbXzB4MWFlZTFhKDB4MTcyKV0oXzB4MzhjMDVjKXx8dHlwZW9mIF8weDM4YzA1Yz09XzB4MWFlZTFhKDB4MTQzKSYmdGhpc1tfMHgxYWVlMWEoMHgxNTIpXShfMHgzOGMwNWMpPT09XzB4MWFlZTFhKDB4MTgwKTt9Wydfc2V0Tm9kZVBlcm1pc3Npb25zJ10oXzB4NGVlZmEwLF8weDE3MDVhOSl7fVtfMHgxMGVkMjgoMHgxMTEpXShfMHg1MTY5MDYpe3ZhciBfMHgyMzY5MDY9XzB4MTBlZDI4O2RlbGV0ZSBfMHg1MTY5MDZbXzB4MjM2OTA2KDB4MTBmKV0sZGVsZXRlIF8weDUxNjkwNlsnX2hhc1NldE9uSXRzUGF0aCddLGRlbGV0ZSBfMHg1MTY5MDZbXzB4MjM2OTA2KDB4MTI1KV07fVtfMHgxMGVkMjgoMHgxOGUpXShfMHgyM2MxYzIsXzB4MjlhMjFiKXt9fWxldCBfMHg0ZTdkN2Q9bmV3IF8weDMyOGJkZSgpLF8weDM4ODZlYT17J3Byb3BzJzoweDY0LCdlbGVtZW50cyc6MHg2NCwnc3RyTGVuZ3RoJzoweDQwMCoweDMyLCd0b3RhbFN0ckxlbmd0aCc6MHg0MDAqMHgzMiwnYXV0b0V4cGFuZExpbWl0JzoweDEzODgsJ2F1dG9FeHBhbmRNYXhEZXB0aCc6MHhhfSxfMHgzMGM1NTc9eydwcm9wcyc6MHg1LCdlbGVtZW50cyc6MHg1LCdzdHJMZW5ndGgnOjB4MTAwLCd0b3RhbFN0ckxlbmd0aCc6MHgxMDAqMHgzLCdhdXRvRXhwYW5kTGltaXQnOjB4MWUsJ2F1dG9FeHBhbmRNYXhEZXB0aCc6MHgyfTtmdW5jdGlvbiBfMHg1ODZkMzYoXzB4NTRmM2JlLF8weDE4MWIxYSxfMHgyYjdlYjUsXzB4MWRkNjM0LF8weDQ5YzA3YyxfMHgzOTc0NDYpe3ZhciBfMHgyZjE4ZGQ9XzB4MTBlZDI4O2xldCBfMHg0ZTdmNzIsXzB4MWRlNWExO3RyeXtfMHgxZGU1YTE9XzB4NGViZWY4KCksXzB4NGU3ZjcyPV8weDQ2Y2E5MFtfMHgxODFiMWFdLCFfMHg0ZTdmNzJ8fF8weDFkZTVhMS1fMHg0ZTdmNzJbJ3RzJ10+MHgxZjQmJl8weDRlN2Y3MltfMHgyZjE4ZGQoMHgxMTgpXSYmXzB4NGU3ZjcyWyd0aW1lJ10vXzB4NGU3ZjcyW18weDJmMThkZCgweDExOCldPDB4NjQ/KF8weDQ2Y2E5MFtfMHgxODFiMWFdPV8weDRlN2Y3Mj17J2NvdW50JzoweDAsJ3RpbWUnOjB4MCwndHMnOl8weDFkZTVhMX0sXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldPXt9KTpfMHgxZGU1YTEtXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldWyd0cyddPjB4MzImJl8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxMTgpXSYmXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDFhMSldL18weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVsnY291bnQnXTwweDY0JiYoXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldPXt9KTtsZXQgXzB4NGRkZDNkPVtdLF8weDJjMWI0NT1fMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTg0KV18fF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxODQpXT9fMHgzMGM1NTc6XzB4Mzg4NmVhLF8weDM5OGFmNT1fMHgzMGM4NGM9Pnt2YXIgXzB4OTg4ZTNiPV8weDJmMThkZDtsZXQgXzB4MTRiM2RjPXt9O3JldHVybiBfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTdkKV09XzB4MzBjODRjWydwcm9wcyddLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhjOCldPV8weDMwYzg0Y1snZWxlbWVudHMnXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTA4KV09XzB4MzBjODRjW18weDk4OGUzYigweDEwOCldLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhmMyldPV8weDMwYzg0Y1tfMHg5ODhlM2IoMHhmMyldLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxNDYpXT1fMHgzMGM4NGNbXzB4OTg4ZTNiKDB4MTQ2KV0sXzB4MTRiM2RjW18weDk4OGUzYigweDFiNyldPV8weDMwYzg0Y1tfMHg5ODhlM2IoMHgxYjcpXSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4ZjkpXT0hMHgxLF8weDE0YjNkY1tfMHg5ODhlM2IoMHhlZildPSFfMHgxZDkxNjksXzB4MTRiM2RjW18weDk4OGUzYigweDE1OSldPTB4MSxfMHgxNGIzZGNbXzB4OTg4ZTNiKDB4MTg4KV09MHgwLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxMDUpXT1fMHg5ODhlM2IoMHhiZSksXzB4MTRiM2RjW18weDk4OGUzYigweDFiOSldPV8weDk4OGUzYigweDE2YiksXzB4MTRiM2RjW18weDk4OGUzYigweDFhMildPSEweDAsXzB4MTRiM2RjW18weDk4OGUzYigweDEwZCldPVtdLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxMTApXT0weDAsXzB4MTRiM2RjW18weDk4OGUzYigweDE5OCldPSEweDAsXzB4MTRiM2RjW18weDk4OGUzYigweGRiKV09MHgwLF8weDE0YjNkY1tfMHg5ODhlM2IoMHgxODIpXT17J2N1cnJlbnQnOnZvaWQgMHgwLCdwYXJlbnQnOnZvaWQgMHgwLCdpbmRleCc6MHgwfSxfMHgxNGIzZGM7fTtmb3IodmFyIF8weDRlOGI0Nj0weDA7XzB4NGU4YjQ2PF8weDQ5YzA3Y1tfMHgyZjE4ZGQoMHhmNCldO18weDRlOGI0NisrKV8weDRkZGQzZFtfMHgyZjE4ZGQoMHgxNzEpXShfMHg0ZTdkN2RbXzB4MmYxOGRkKDB4ZmQpXSh7J3RpbWVOb2RlJzpfMHg1NGYzYmU9PT1fMHgyZjE4ZGQoMHgxYTEpfHx2b2lkIDB4MH0sXzB4NDljMDdjW18weDRlOGI0Nl0sXzB4Mzk4YWY1KF8weDJjMWI0NSkse30pKTtpZihfMHg1NGYzYmU9PT1fMHgyZjE4ZGQoMHgxYWIpfHxfMHg1NGYzYmU9PT1fMHgyZjE4ZGQoMHgxN2MpKXtsZXQgXzB4Mzg4ODZjPUVycm9yW18weDJmMThkZCgweDExZildO3RyeXtFcnJvclsnc3RhY2tUcmFjZUxpbWl0J109MHgxLzB4MCxfMHg0ZGRkM2RbXzB4MmYxOGRkKDB4MTcxKV0oXzB4NGU3ZDdkWydzZXJpYWxpemUnXSh7J3N0YWNrTm9kZSc6ITB4MH0sbmV3IEVycm9yKClbXzB4MmYxOGRkKDB4MWIwKV0sXzB4Mzk4YWY1KF8weDJjMWI0NSkseydzdHJMZW5ndGgnOjB4MS8weDB9KSk7fWZpbmFsbHl7RXJyb3JbXzB4MmYxOGRkKDB4MTFmKV09XzB4Mzg4ODZjO319cmV0dXJueydtZXRob2QnOl8weDJmMThkZCgweGQ5KSwndmVyc2lvbic6XzB4NDZmNjdjLCdhcmdzJzpbeyd0cyc6XzB4MmI3ZWI1LCdzZXNzaW9uJzpfMHgxZGQ2MzQsJ2FyZ3MnOl8weDRkZGQzZCwnaWQnOl8weDE4MWIxYSwnY29udGV4dCc6XzB4Mzk3NDQ2fV19O31jYXRjaChfMHgxNGNkMTgpe3JldHVybnsnbWV0aG9kJzpfMHgyZjE4ZGQoMHhkOSksJ3ZlcnNpb24nOl8weDQ2ZjY3YywnYXJncyc6W3sndHMnOl8weDJiN2ViNSwnc2Vzc2lvbic6XzB4MWRkNjM0LCdhcmdzJzpbeyd0eXBlJzpfMHgyZjE4ZGQoMHhmZiksJ2Vycm9yJzpfMHgxNGNkMTgmJl8weDE0Y2QxOFtfMHgyZjE4ZGQoMHgxMzUpXX1dLCdpZCc6XzB4MTgxYjFhLCdjb250ZXh0JzpfMHgzOTc0NDZ9XX07fWZpbmFsbHl7dHJ5e2lmKF8weDRlN2Y3MiYmXzB4MWRlNWExKXtsZXQgXzB4YTAwMjU9XzB4NGViZWY4KCk7XzB4NGU3ZjcyWydjb3VudCddKyssXzB4NGU3ZjcyWyd0aW1lJ10rPV8weDIyNGZmYihfMHgxZGU1YTEsXzB4YTAwMjUpLF8weDRlN2Y3MlsndHMnXT1fMHhhMDAyNSxfMHg0NmNhOTBbXzB4MmYxOGRkKDB4MTI4KV1bXzB4MmYxOGRkKDB4MTE4KV0rKyxfMHg0NmNhOTBbJ2hpdHMnXVtfMHgyZjE4ZGQoMHgxYTEpXSs9XzB4MjI0ZmZiKF8weDFkZTVhMSxfMHhhMDAyNSksXzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldWyd0cyddPV8weGEwMDI1LChfMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTE4KV0+MHgzMnx8XzB4NGU3ZjcyWyd0aW1lJ10+MHg2NCkmJihfMHg0ZTdmNzJbXzB4MmYxOGRkKDB4MTg0KV09ITB4MCksKF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxMTgpXT4weDNlOHx8XzB4NDZjYTkwW18weDJmMThkZCgweDEyOCldW18weDJmMThkZCgweDFhMSldPjB4MTJjKSYmKF8weDQ2Y2E5MFtfMHgyZjE4ZGQoMHgxMjgpXVtfMHgyZjE4ZGQoMHgxODQpXT0hMHgwKTt9fWNhdGNoe319fXJldHVybiBfMHg1ODZkMzY7fSgoXzB4MTc4OTFlLF8weDRmNGI5YyxfMHgzZmQ2ZDUsXzB4MWM1NDIyLF8weDQ3OWNhMixfMHg0YjBhYzgsXzB4NTI0NmFmLF8weDQyYmZhYyxfMHg0Y2E4MmYsXzB4MTIzNTgwLF8weDE4OTY5ZCk9Pnt2YXIgXzB4NDA3MjQyPV8weGZiNGY4OTtpZihfMHgxNzg5MWVbXzB4NDA3MjQyKDB4MTUwKV0pcmV0dXJuIF8weDE3ODkxZVtfMHg0MDcyNDIoMHgxNTApXTtpZighSChfMHgxNzg5MWUsXzB4NDJiZmFjLF8weDQ3OWNhMikpcmV0dXJuIF8weDE3ODkxZVsnX2NvbnNvbGVfbmluamEnXT17J2NvbnNvbGVMb2cnOigpPT57fSwnY29uc29sZVRyYWNlJzooKT0+e30sJ2NvbnNvbGVUaW1lJzooKT0+e30sJ2NvbnNvbGVUaW1lRW5kJzooKT0+e30sJ2F1dG9Mb2cnOigpPT57fSwnYXV0b0xvZ01hbnknOigpPT57fSwnYXV0b1RyYWNlTWFueSc6KCk9Pnt9LCdjb3ZlcmFnZSc6KCk9Pnt9LCdhdXRvVHJhY2UnOigpPT57fSwnYXV0b1RpbWUnOigpPT57fSwnYXV0b1RpbWVFbmQnOigpPT57fX0sXzB4MTc4OTFlW18weDQwNzI0MigweDE1MCldO2xldCBfMHgzNzYxMGU9QihfMHgxNzg5MWUpLF8weDM0MzdjYT1fMHgzNzYxMGVbJ2VsYXBzZWQnXSxfMHgyNWI1ZTU9XzB4Mzc2MTBlWyd0aW1lU3RhbXAnXSxfMHg0YmY3NmI9XzB4Mzc2MTBlW18weDQwNzI0MigweDExZSldLF8weDEyNWM3ZD17J2hpdHMnOnt9LCd0cyc6e319LF8weDE1YjQ2YT1YKF8weDE3ODkxZSxfMHg0Y2E4MmYsXzB4MTI1YzdkLF8weDRiMGFjOCksXzB4ZDU0ODZiPV8weDRkMzBlMT0+e18weDEyNWM3ZFsndHMnXVtfMHg0ZDMwZTFdPV8weDI1YjVlNSgpO30sXzB4MmQwN2U2PShfMHg1YmMzNTUsXzB4ZTM0ZmUpPT57dmFyIF8weDIzMzljZT1fMHg0MDcyNDI7bGV0IF8weDU5ZmI2YT1fMHgxMjVjN2RbJ3RzJ11bXzB4ZTM0ZmVdO2lmKGRlbGV0ZSBfMHgxMjVjN2RbJ3RzJ11bXzB4ZTM0ZmVdLF8weDU5ZmI2YSl7bGV0IF8weDU5MjFhNj1fMHgzNDM3Y2EoXzB4NTlmYjZhLF8weDI1YjVlNSgpKTtfMHgyY2YyOTAoXzB4MTViNDZhKF8weDIzMzljZSgweDFhMSksXzB4NWJjMzU1LF8weDRiZjc2YigpLF8weDI1MzUzNixbXzB4NTkyMWE2XSxfMHhlMzRmZSkpO319LF8weDQ5YmNlYz1fMHg0M2U3MmY9Pnt2YXIgXzB4MmU0N2JmPV8weDQwNzI0MixfMHg1NWQ5NWQ7cmV0dXJuIF8weDQ3OWNhMj09PV8weDJlNDdiZigweDEzOSkmJl8weDE3ODkxZVsnb3JpZ2luJ10mJigoXzB4NTVkOTVkPV8weDQzZTcyZj09bnVsbD92b2lkIDB4MDpfMHg0M2U3MmZbJ2FyZ3MnXSk9PW51bGw/dm9pZCAweDA6XzB4NTVkOTVkWydsZW5ndGgnXSkmJihfMHg0M2U3MmZbJ2FyZ3MnXVsweDBdW18weDJlNDdiZigweDE4OSldPV8weDE3ODkxZVsnb3JpZ2luJ10pLF8weDQzZTcyZjt9O18weDE3ODkxZVtfMHg0MDcyNDIoMHgxNTApXT17J2NvbnNvbGVMb2cnOihfMHgzMWM5MmUsXzB4MjQ0ODhkKT0+e3ZhciBfMHg5M2U2N2U9XzB4NDA3MjQyO18weDE3ODkxZVsnY29uc29sZSddWydsb2cnXVtfMHg5M2U2N2UoMHhjMSldIT09J2Rpc2FibGVkTG9nJyYmXzB4MmNmMjkwKF8weDE1YjQ2YShfMHg5M2U2N2UoMHhkOSksXzB4MzFjOTJlLF8weDRiZjc2YigpLF8weDI1MzUzNixfMHgyNDQ4OGQpKTt9LCdjb25zb2xlVHJhY2UnOihfMHgzYjY2YTcsXzB4YmE4ODBlKT0+e3ZhciBfMHg1NjdlMTM9XzB4NDA3MjQyLF8weDMxNzE2ZSxfMHg1YTljNjA7XzB4MTc4OTFlW18weDU2N2UxMygweDE3NCldWydsb2cnXVtfMHg1NjdlMTMoMHhjMSldIT09XzB4NTY3ZTEzKDB4YzIpJiYoKF8weDVhOWM2MD0oXzB4MzE3MTZlPV8weDE3ODkxZVtfMHg1NjdlMTMoMHgxNzApXSk9PW51bGw/dm9pZCAweDA6XzB4MzE3MTZlW18weDU2N2UxMygweGQyKV0pIT1udWxsJiZfMHg1YTljNjBbXzB4NTY3ZTEzKDB4MTgyKV0mJihfMHgxNzg5MWVbXzB4NTY3ZTEzKDB4MThjKV09ITB4MCksXzB4MmNmMjkwKF8weDQ5YmNlYyhfMHgxNWI0NmEoXzB4NTY3ZTEzKDB4MWFiKSxfMHgzYjY2YTcsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weGJhODgwZSkpKSk7fSwnY29uc29sZUVycm9yJzooXzB4M2ZhNzM2LF8weDEyMWEzYik9Pnt2YXIgXzB4MTJkZmI4PV8weDQwNzI0MjtfMHgxNzg5MWVbXzB4MTJkZmI4KDB4MThjKV09ITB4MCxfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YSgnZXJyb3InLF8weDNmYTczNixfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4MTIxYTNiKSkpO30sJ2NvbnNvbGVUaW1lJzpfMHgxODQ4YTc9PntfMHhkNTQ4NmIoXzB4MTg0OGE3KTt9LCdjb25zb2xlVGltZUVuZCc6KF8weDMxYWU2NSxfMHgzZDEwNGEpPT57XzB4MmQwN2U2KF8weDNkMTA0YSxfMHgzMWFlNjUpO30sJ2F1dG9Mb2cnOihfMHgzNzgwOCxfMHgyYWQ1NTgpPT57dmFyIF8weDIyOTM4Yj1fMHg0MDcyNDI7XzB4MmNmMjkwKF8weDE1YjQ2YShfMHgyMjkzOGIoMHhkOSksXzB4MmFkNTU4LF8weDRiZjc2YigpLF8weDI1MzUzNixbXzB4Mzc4MDhdKSk7fSwnYXV0b0xvZ01hbnknOihfMHgxNjFkN2UsXzB4NDNkZWRiKT0+e3ZhciBfMHgzNzk1MDY9XzB4NDA3MjQyO18weDJjZjI5MChfMHgxNWI0NmEoXzB4Mzc5NTA2KDB4ZDkpLF8weDE2MWQ3ZSxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsXzB4NDNkZWRiKSk7fSwnYXV0b1RyYWNlJzooXzB4MTIxN2U2LF8weDQ0NjcwNyk9Pnt2YXIgXzB4M2E1MjUyPV8weDQwNzI0MjtfMHgyY2YyOTAoXzB4NDliY2VjKF8weDE1YjQ2YShfMHgzYTUyNTIoMHgxYWIpLF8weDQ0NjcwNyxfMHg0YmY3NmIoKSxfMHgyNTM1MzYsW18weDEyMTdlNl0pKSk7fSwnYXV0b1RyYWNlTWFueSc6KF8weDViNzdjNCxfMHg0ZmM0M2EpPT57dmFyIF8weDViZmJmMj1fMHg0MDcyNDI7XzB4MmNmMjkwKF8weDQ5YmNlYyhfMHgxNWI0NmEoXzB4NWJmYmYyKDB4MWFiKSxfMHg1Yjc3YzQsXzB4NGJmNzZiKCksXzB4MjUzNTM2LF8weDRmYzQzYSkpKTt9LCdhdXRvVGltZSc6KF8weDI0MTgzYSxfMHg0NDI3NTksXzB4Mjk2YTRjKT0+e18weGQ1NDg2YihfMHgyOTZhNGMpO30sJ2F1dG9UaW1lRW5kJzooXzB4MjkyN2E5LF8weDI0M2QzMCxfMHg1YmQ2M2IpPT57XzB4MmQwN2U2KF8weDI0M2QzMCxfMHg1YmQ2M2IpO30sJ2NvdmVyYWdlJzpfMHg1MTlmYzI9Pnt2YXIgXzB4NDUyNTU0PV8weDQwNzI0MjtfMHgyY2YyOTAoeydtZXRob2QnOl8weDQ1MjU1NCgweDE1NiksJ3ZlcnNpb24nOl8weDRiMGFjOCwnYXJncyc6W3snaWQnOl8weDUxOWZjMn1dfSk7fX07bGV0IF8weDJjZjI5MD1xKF8weDE3ODkxZSxfMHg0ZjRiOWMsXzB4M2ZkNmQ1LF8weDFjNTQyMixfMHg0NzljYTIsXzB4MTIzNTgwLF8weDE4OTY5ZCksXzB4MjUzNTM2PV8weDE3ODkxZVtfMHg0MDcyNDIoMHhmMCldO3JldHVybiBfMHgxNzg5MWVbJ19jb25zb2xlX25pbmphJ107fSkoZ2xvYmFsVGhpcyxfMHhmYjRmODkoMHgxMGMpLCc2MDU5MScsXzB4ZmI0Zjg5KDB4ZGMpLCd3ZWJwYWNrJyxfMHhmYjRmODkoMHhkMyksJzE3Mjc5NTAwMDUwMTYnLF8weGZiNGY4OSgweDFhNiksXzB4ZmI0Zjg5KDB4ZmIpLF8weGZiNGY4OSgweDE5NyksXzB4ZmI0Zjg5KDB4MTNhKSk7XCIpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gfVxyXG47IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX29vKGksIC4uLnYpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZUxvZyhpLCB2KTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fb287IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXHJcbmZ1bmN0aW9uIG9vX3RyKGksIC4uLnYpIHsgdHJ5IHtcclxuICAgIG9vX2NtKCkuY29uc29sZVRyYWNlKGksIHYpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb190cjsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fdHgoaSwgLi4udikgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlRXJyb3IoaSwgdik7XHJcbn1cclxuY2F0Y2ggKGUpIHsgfSByZXR1cm4gdjsgfVxyXG47XHJcbm9vX3R4OyAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xyXG5mdW5jdGlvbiBvb190cyh2KSB7IHRyeSB7XHJcbiAgICBvb19jbSgpLmNvbnNvbGVUaW1lKHYpO1xyXG59XHJcbmNhdGNoIChlKSB7IH0gcmV0dXJuIHY7IH1cclxuO1xyXG5vb190czsgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuZnVuY3Rpb24gb29fdGUodiwgaSkgeyB0cnkge1xyXG4gICAgb29fY20oKS5jb25zb2xlVGltZUVuZCh2LCBpKTtcclxufVxyXG5jYXRjaCAoZSkgeyB9IHJldHVybiB2OyB9XHJcbjtcclxub29fdGU7IC8qZXNsaW50IHVuaWNvcm4vbm8tYWJ1c2l2ZS1lc2xpbnQtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL2Rpc2FibGUtZW5hYmxlLXBhaXI6LGVzbGludC1jb21tZW50cy9uby11bmxpbWl0ZWQtZGlzYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLWFnZ3JlZ2F0aW5nLWVuYWJsZTosZXNsaW50LWNvbW1lbnRzL25vLWR1cGxpY2F0ZS1kaXNhYmxlOixlc2xpbnQtY29tbWVudHMvbm8tdW51c2VkLWRpc2FibGU6LGVzbGludC1jb21tZW50cy9uby11bnVzZWQtZW5hYmxlOiwqL1xyXG4iXSwibmFtZXMiOlsiQ09OU1RBTlRTIiwiTk9ERV9DTElFTlQiLCJOT0RFX0FETUlOIiwiU0RLX1ZFUlNJT04iLCJhc3NlcnQiLCJhc3NlcnRpb24iLCJtZXNzYWdlIiwiYXNzZXJ0aW9uRXJyb3IiLCJFcnJvciIsInN0cmluZ1RvQnl0ZUFycmF5JDEiLCJzdHIiLCJvdXQiLCJwIiwiaSIsImxlbmd0aCIsImMiLCJjaGFyQ29kZUF0IiwiYmFzZTY0IiwiYnl0ZVRvQ2hhck1hcF8iLCJjaGFyVG9CeXRlTWFwXyIsImJ5dGVUb0NoYXJNYXBXZWJTYWZlXyIsImNoYXJUb0J5dGVNYXBXZWJTYWZlXyIsIkVOQ09ERURfVkFMU19CQVNFIiwiRU5DT0RFRF9WQUxTIiwidGhpcyIsIkVOQ09ERURfVkFMU19XRUJTQUZFIiwiSEFTX05BVElWRV9TVVBQT1JUIiwiYXRvYiIsImVuY29kZUJ5dGVBcnJheSIsImlucHV0Iiwid2ViU2FmZSIsIkFycmF5IiwiaXNBcnJheSIsImluaXRfIiwiYnl0ZVRvQ2hhck1hcCIsIm91dHB1dCIsImJ5dGUxIiwiaGF2ZUJ5dGUyIiwiYnl0ZTIiLCJoYXZlQnl0ZTMiLCJieXRlMyIsIm91dEJ5dGUxIiwib3V0Qnl0ZTIiLCJvdXRCeXRlMyIsIm91dEJ5dGU0IiwicHVzaCIsImpvaW4iLCJlbmNvZGVTdHJpbmciLCJidG9hIiwiZGVjb2RlU3RyaW5nIiwiYnl0ZXMiLCJwb3MiLCJjMSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImMyIiwidSIsImMzIiwiYnl0ZUFycmF5VG9TdHJpbmciLCJkZWNvZGVTdHJpbmdUb0J5dGVBcnJheSIsImNoYXJUb0J5dGVNYXAiLCJjaGFyQXQiLCJieXRlNCIsIkRlY29kZUJhc2U2NFN0cmluZ0Vycm9yIiwiY29uc3RydWN0b3IiLCJzdXBlciIsImFyZ3VtZW50cyIsIm5hbWUiLCJiYXNlNjRFbmNvZGUiLCJ1dGY4Qnl0ZXMiLCJiYXNlNjR1cmxFbmNvZGVXaXRob3V0UGFkZGluZyIsInJlcGxhY2UiLCJiYXNlNjREZWNvZGUiLCJlIiwiY29uc29sZSIsImVycm9yIiwiZGVlcENvcHkiLCJ2YWx1ZSIsImRlZXBFeHRlbmQiLCJ1bmRlZmluZWQiLCJ0YXJnZXQiLCJzb3VyY2UiLCJPYmplY3QiLCJEYXRlIiwiZ2V0VGltZSIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImdldEdsb2JhbCIsInNlbGYiLCJ3aW5kb3ciLCJnIiwiZ2V0RGVmYXVsdHMiLCJfX0ZJUkVCQVNFX0RFRkFVTFRTX18iLCJwcm9jZXNzIiwiZW52IiwiZGVmYXVsdHNKc29uU3RyaW5nIiwiSlNPTiIsInBhcnNlIiwiZ2V0RGVmYXVsdHNGcm9tRW52VmFyaWFibGUiLCJkb2N1bWVudCIsIm1hdGNoIiwiY29va2llIiwiZGVjb2RlZCIsImdldERlZmF1bHRzRnJvbUNvb2tpZSIsImluZm8iLCJnZXREZWZhdWx0RW11bGF0b3JIb3N0IiwicHJvZHVjdE5hbWUiLCJfYSIsIl9iIiwiZW11bGF0b3JIb3N0cyIsImdldERlZmF1bHRFbXVsYXRvckhvc3RuYW1lQW5kUG9ydCIsImhvc3QiLCJzZXBhcmF0b3JJbmRleCIsImxhc3RJbmRleE9mIiwicG9ydCIsInBhcnNlSW50Iiwic3Vic3RyaW5nIiwiZ2V0RGVmYXVsdEFwcENvbmZpZyIsImNvbmZpZyIsImdldEV4cGVyaW1lbnRhbFNldHRpbmciLCJEZWZlcnJlZCIsInJlamVjdCIsInJlc29sdmUiLCJwcm9taXNlIiwiUHJvbWlzZSIsIndyYXBDYWxsYmFjayIsImNhbGxiYWNrIiwiY2F0Y2giLCJjcmVhdGVNb2NrVXNlclRva2VuIiwidG9rZW4iLCJwcm9qZWN0SWQiLCJ1aWQiLCJwcm9qZWN0IiwiaWF0Iiwic3ViIiwidXNlcl9pZCIsInBheWxvYWQiLCJhc3NpZ24iLCJpc3MiLCJhdWQiLCJleHAiLCJhdXRoX3RpbWUiLCJmaXJlYmFzZSIsInNpZ25faW5fcHJvdmlkZXIiLCJpZGVudGl0aWVzIiwic3RyaW5naWZ5IiwiYWxnIiwidHlwZSIsImdldFVBIiwibmF2aWdhdG9yIiwiaXNNb2JpbGVDb3Jkb3ZhIiwidGVzdCIsImlzTm9kZSIsImZvcmNlRW52aXJvbm1lbnQiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJpc0Jyb3dzZXIiLCJpc0Jyb3dzZXJFeHRlbnNpb24iLCJydW50aW1lIiwiY2hyb21lIiwiYnJvd3NlciIsImlkIiwiaXNSZWFjdE5hdGl2ZSIsImlzRWxlY3Ryb24iLCJpbmRleE9mIiwiaXNJRSIsInVhIiwiaXNVV1AiLCJpc05vZGVTZGsiLCJpc1NhZmFyaSIsInVzZXJBZ2VudCIsImluY2x1ZGVzIiwiaXNJbmRleGVkREJBdmFpbGFibGUiLCJpbmRleGVkREIiLCJ2YWxpZGF0ZUluZGV4ZWREQk9wZW5hYmxlIiwicHJlRXhpc3QiLCJEQl9DSEVDS19OQU1FIiwicmVxdWVzdCIsIm9wZW4iLCJvbnN1Y2Nlc3MiLCJyZXN1bHQiLCJjbG9zZSIsImRlbGV0ZURhdGFiYXNlIiwib251cGdyYWRlbmVlZGVkIiwib25lcnJvciIsImFyZUNvb2tpZXNFbmFibGVkIiwiY29va2llRW5hYmxlZCIsIkZpcmViYXNlRXJyb3IiLCJjb2RlIiwiY3VzdG9tRGF0YSIsInNldFByb3RvdHlwZU9mIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJFcnJvckZhY3RvcnkiLCJjcmVhdGUiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJlcnJvcnMiLCJkYXRhIiwiZnVsbENvZGUiLCJ0ZW1wbGF0ZSIsIlBBVFRFUk4iLCJfIiwia2V5IiwicmVwbGFjZVRlbXBsYXRlIiwiZnVsbE1lc3NhZ2UiLCJqc29uRXZhbCIsImRlY29kZSIsImhlYWRlciIsImNsYWltcyIsInNpZ25hdHVyZSIsInBhcnRzIiwic3BsaXQiLCJpc1ZhbGlkVGltZXN0YW1wIiwibm93IiwiTWF0aCIsImZsb29yIiwidmFsaWRTaW5jZSIsInZhbGlkVW50aWwiLCJpc3N1ZWRBdFRpbWUiLCJpc1ZhbGlkRm9ybWF0IiwiaXNBZG1pbiIsImNvbnRhaW5zIiwib2JqIiwic2FmZUdldCIsImlzRW1wdHkiLCJtYXAiLCJmbiIsImNvbnRleHRPYmoiLCJyZXMiLCJkZWVwRXF1YWwiLCJhIiwiYiIsImFLZXlzIiwia2V5cyIsImJLZXlzIiwiayIsImFQcm9wIiwiYlByb3AiLCJpc09iamVjdCIsInRoaW5nIiwicHJvbWlzZVdpdGhUaW1lb3V0IiwidGltZUluTVMiLCJkZWZlcnJlZFByb21pc2UiLCJzZXRUaW1lb3V0IiwidGhlbiIsInF1ZXJ5c3RyaW5nIiwicXVlcnlzdHJpbmdQYXJhbXMiLCJwYXJhbXMiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImFycmF5VmFsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwicXVlcnlzdHJpbmdEZWNvZGUiLCJkZWNvZGVVUklDb21wb25lbnQiLCJleHRyYWN0UXVlcnlzdHJpbmciLCJ1cmwiLCJxdWVyeVN0YXJ0IiwiZnJhZ21lbnRTdGFydCIsIlNoYTEiLCJjaGFpbl8iLCJidWZfIiwiV18iLCJwYWRfIiwiaW5idWZfIiwidG90YWxfIiwiYmxvY2tTaXplIiwicmVzZXQiLCJjb21wcmVzc18iLCJidWYiLCJvZmZzZXQiLCJXIiwidCIsImYiLCJkIiwidXBkYXRlIiwibGVuZ3RoTWludXNCbG9jayIsIm4iLCJpbmJ1ZiIsImRpZ2VzdCIsInRvdGFsQml0cyIsImoiLCJjcmVhdGVTdWJzY3JpYmUiLCJleGVjdXRvciIsIm9uTm9PYnNlcnZlcnMiLCJwcm94eSIsIk9ic2VydmVyUHJveHkiLCJzdWJzY3JpYmUiLCJiaW5kIiwib2JzZXJ2ZXJzIiwidW5zdWJzY3JpYmVzIiwib2JzZXJ2ZXJDb3VudCIsInRhc2siLCJmaW5hbGl6ZWQiLCJuZXh0IiwiZm9yRWFjaE9ic2VydmVyIiwib2JzZXJ2ZXIiLCJjb21wbGV0ZSIsIm5leHRPck9ic2VydmVyIiwibWV0aG9kcyIsIm1ldGhvZCIsImltcGxlbWVudHNBbnlNZXRob2RzIiwibm9vcCIsInVuc3ViIiwidW5zdWJzY3JpYmVPbmUiLCJmaW5hbEVycm9yIiwic2VuZE9uZSIsImVyciIsImFzeW5jIiwib25FcnJvciIsImFyZ3MiLCJ2YWxpZGF0ZUFyZ0NvdW50IiwiZm5OYW1lIiwibWluQ291bnQiLCJtYXhDb3VudCIsImFyZ0NvdW50IiwiYXJnRXJyb3IiLCJlcnJvclByZWZpeCIsImFyZ05hbWUiLCJ2YWxpZGF0ZU5hbWVzcGFjZSIsIm5hbWVzcGFjZSIsIm9wdGlvbmFsIiwidmFsaWRhdGVDYWxsYmFjayIsImFyZ3VtZW50TmFtZSIsInZhbGlkYXRlQ29udGV4dE9iamVjdCIsImNvbnRleHQiLCJzdHJpbmdUb0J5dGVBcnJheSIsImhpZ2giLCJzdHJpbmdMZW5ndGgiLCJ1dWlkdjQiLCJyIiwicmFuZG9tIiwiREVGQVVMVF9JTlRFUlZBTF9NSUxMSVMiLCJERUZBVUxUX0JBQ0tPRkZfRkFDVE9SIiwiTUFYX1ZBTFVFX01JTExJUyIsIlJBTkRPTV9GQUNUT1IiLCJjYWxjdWxhdGVCYWNrb2ZmTWlsbGlzIiwiYmFja29mZkNvdW50IiwiaW50ZXJ2YWxNaWxsaXMiLCJiYWNrb2ZmRmFjdG9yIiwiY3VyckJhc2VWYWx1ZSIsInBvdyIsInJhbmRvbVdhaXQiLCJyb3VuZCIsIm1pbiIsIm9yZGluYWwiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImFicyIsImNlbnQiLCJkZWMiLCJpbmRpY2F0b3IiLCJnZXRNb2R1bGFySW5zdGFuY2UiLCJfZGVsZWdhdGUiLCJCYXNlRmlyZWJhc2VJbnRlZ3JhdGlvbiIsImZpcmViYXNlQXBwIiwiYW5hbHl0aWNzIiwiaW5pdGlhbGl6ZUZpcmViYXNlIiwiY3VzdG9tRXZlbnRzIiwiZXZlbnROYW1lIiwiZXZlbnQiLCJsb2dFdmVudCIsIm9vX3R4Iiwic2Vzc2lvbkVuZCIsIm9uTGluZSIsImluaXRpYWxpemVBcHAiLCJmaXJlYmFzZUNvbmZpZyIsImdldEFuYWx5dGljcyIsIm9vX2NtIiwiZXZhbCIsInYiLCJjb25zb2xlRXJyb3IiLCJhcGlLZXkiLCJhdXRoRG9tYWluIiwiZGF0YWJhc2VVUkwiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsIm1lYXN1cmVtZW50SWQiLCJGaXJlYmFzZUludGVncmF0aW9uIiwic3RhdGljIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsInNlbmRTZXNzaW9uU3RhcnRFdmVudCIsInNlbmRTZXNzaW9uRW5kRXZlbnQiLCJzZW5kU2VsZWN0ZWRMZXZlbEV2ZW50Iiwic2VuZFRhcHBlZFN0YXJ0RXZlbnQiLCJzZW5kUHV6emxlQ29tcGxldGVkRXZlbnQiLCJzZW5kTGV2ZWxDb21wbGV0ZWRFdmVudCIsInNlbmRVc2VyQ2xpY2tlZE9uUGxheUV2ZW50IiwiY2xpY2siLCJzZW5kRG93bmxvYWRDb21wbGV0ZWRFdmVudCIsIkxPQURQVVpaTEUiLCJTVE9ORURST1AiLCJNT1VTRU1PVkUiLCJNT1VTRURPV04iLCJNT1VTRVVQIiwiVE9VQ0hTVEFSVCIsIlRPVUNITU9WRSIsIlRPVUNIRU5EIiwiQ0xJQ0siLCJWSVNJQklMSVRZX0NIQU5HRSIsInVybFBhcmFtcyIsIlVSTFNlYXJjaFBhcmFtcyIsImxvY2F0aW9uIiwic2VhcmNoIiwicHNldWRvSWQiLCJnZXQiLCJsYW5nIiwiZm9udCIsIlV0aWxzIiwiZ2V0TGFuZ3VhZ2VTcGVjaWZpY0ZvbnQiLCJEZWJ1Z2dlciIsIkRldmVsb3BtZW50TGluayIsImhyZWYiLCJEZXZlbG9wbWVudFNlcnZlciIsIkRlYnVnTW9kZSIsIlN0b25lQ29uZmlnIiwieCIsInkiLCJvcmlneCIsIm9yaWd5IiwidGV4dCIsImltZyIsImltYWdlU2l6ZSIsInRleHRGb250U2l6ZSIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiaW1hZ2VDZW50ZXJPZmZzZXRYIiwiaW1hZ2VDZW50ZXJPZmZzZXRZIiwidHV0b3JpYWxJbnN0YW5jZSIsInRpbWVyVGlja2luZ0luc3RhbmNlIiwiZnJhbWUiLCJzdG9uZUxldHRlciIsInhQb3MiLCJ5UG9zIiwiY2FsY3VsYXRlSW1hZ2VBbmRGb250U2l6ZSIsIm1lYXN1cmVUZXh0Iiwid2lkdGgiLCJnZXRFYXNlIiwiY3VycmVudFByb2dyZXNzIiwic3RhcnQiLCJkaXN0YW5jZSIsInN0ZXBzIiwiY29zIiwiUEkiLCJnZXRYIiwiZ2V0WSIsImRyYXciLCJkZWx0YVRpbWUiLCJmaWxsU3R5bGUiLCJzaGFkb3dDb2xvciIsInNoYWRvd0JsdXIiLCJzaGFkb3dPZmZzZXRYIiwic2hhZG93T2Zmc2V0WSIsImRyYXdJbWFnZSIsInRleHRBbGlnbiIsImZpbGxUZXh0IiwiZ2V0Q29udmVydGVkRGV2UHJvZFVSTCIsInNsaWNlIiwiVXJsU3Vic3RyaW5nIiwibGFuZ3VhZ2UiLCJsb3dlckNhc2VMYW5ndWFnZSIsInRvTG93ZXJDYXNlIiwibGFuZ3VhZ2VGb250TWFwcGluZyIsImxvZyIsIm9vX29vIiwiZ2V0UmFuZG9tTnVtYmVyIiwibWF4IiwiZ2V0RXhjbHVkZWRDb29yZGluYXRlcyIsImNhbnZhcyIsImV4Y2x1c2lvblBlcmNlbnRhZ2UiLCJleGNsdWRlWCIsImV4Y2x1ZGVZIiwiaGVpZ2h0IiwiY3JlYXRlUmlwcGxlRWZmZWN0IiwiY3R4IiwiY2VudGVyWCIsImNlbnRlclkiLCJvdXRlclJhZGl1cyIsImlubmVyUmFkaXVzIiwicmVzdGFydCIsImJlZ2luUGF0aCIsImFyYyIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwibG9hZEltYWdlcyIsInNvdXJjZXMiLCJpbWFnZXMiLCJsb2FkZWRJbWFnZXMiLCJudW1JbWFnZXMiLCJzcmMiLCJJbWFnZSIsIm9ubG9hZCIsInN5bmNMb2FkaW5nSW1hZ2VzIiwibG9hZEltZ1Byb21pc2VzIiwiYXJyS2V5IiwiaW1hZ2UiLCJuZXdJbWFnZSIsImNyZWF0ZUltZyIsImFsbCIsInJlZHVjZSIsImFjY3VtdWxhdG9yIiwiY3VycmVudCIsImlzQ2xpY2tJbnNpZGVCdXR0b24iLCJ4Q2xpY2siLCJ5Q2xpY2siLCJidXR0b25YIiwiYnV0dG9uWSIsImJ1dHRvbldpZHRoIiwiYnV0dG9uSGVpZ2h0IiwiaXNDaXJjdWxhciIsInNxcnQiLCJpc0RvY3VtZW50VmlzaWJsZSIsInZpc2liaWxpdHlTdGF0ZSIsInRvZ2dsZURlYnVnTW9kZSIsInRvZ2dsZUJ0biIsImNsYXNzTGlzdCIsInRvZ2dsZSIsImlzT24iLCJpbm5lclRleHQiLCJoaWRlRWxlbWVudCIsImlzSGlkZSIsImVsZW1lbnQiLCJyZW1vdmUiLCJhZGQiLCJjb25zb2xlTG9nIiwiQXVkaW9QbGF5ZXIiLCJhdWRpb0NvbnRleHQiLCJzb3VyY2VOb2RlIiwiYXVkaW9RdWV1ZSIsInByb21wdEF1ZGlvQnVmZmVyIiwiY2xpY2tTb3VuZEJ1ZmZlciIsIk1hcCIsImF1ZGlvU291cmNzIiwiaXNDbGlja1NvdW5kTG9hZGVkIiwiQXVkaW9Db250ZXh0TWFuYWdlciIsImdldEF1ZGlvQ29udGV4dCIsInBsYXlCdXR0b25DbGlja1NvdW5kIiwiYXVkaW9TcmMiLCJBVURJT19QQVRIX0JUTl9DTElDSyIsImxvYWRBbmREZWNvZGVBdWRpbyIsImF1ZGlvQnVmZmVycyIsInNldCIsImNyZWF0ZUJ1ZmZlclNvdXJjZSIsImJ1ZmZlciIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbiIsInJlc3BvbnNlIiwiZmV0Y2giLCJhcnJheUJ1ZmZlciIsImRlY29kZUF1ZGlvRGF0YSIsInByZWxvYWRQcm9tcHRBdWRpbyIsImF1ZGlvQnVmZmVyIiwicHJlbG9hZEdhbWVBdWRpbyIsImhhcyIsInBsYXlBdWRpbyIsInBsYXlGZWVkYmFja0F1ZGlvcyIsImxvb3AiLCJmaWxlVXJsIiwicGxheUZldGNoIiwicGxheVByb21wdEF1ZGlvIiwic3RvcEZlZWRiYWNrQXVkaW8iLCJzdG9wIiwic3RvcEFsbEF1ZGlvcyIsImluZGV4Iiwib25lbmRlZCIsImhhbmRsZUF1ZGlvRW5kZWQiLCJkaXNjb25uZWN0IiwiQXVkaW9Db250ZXh0Iiwid2Via2l0QXVkaW9Db250ZXh0IiwiYmdJbWciLCJERUZBVUxUX0JBQ0tHUk9VTkRfMSIsImhpbGxJbWciLCJBU1NFVFNfUEFUSF9ISUxMIiwicGlsbGVySW1nIiwiQVNTRVRTX1BBVEhfVE9URU0iLCJmZW5jaEltZyIsIkFTU0VUU19QQVRIX0ZFTkNFIiwiYXV0dW1uQmdJbWciLCJBVVRVTU5fQkFDS0dST1VORF8xIiwiYXV0dW1uSGlsbEltZyIsIkFVVFVNTl9ISUxMXzEiLCJhdXR1bW5QaWxsZXJJbWciLCJBVVRVTU5fUElMTEFSXzEiLCJhdXR1bW5TaWduSW1nIiwiQVVUVU1OX1NJR05fMSIsImF1dHVtbkZlbmNlSW1nIiwiQVVUVU1OX0ZFTkNFXzEiLCJ3aW50ZXJCZ0ltZyIsIldJTlRFUl9CQUNLR1JPVU5EXzEiLCJ3aW50ZXJIaWxsSW1nIiwiV0lOVEVSX0hJTExfMSIsIndpbnRlclNpZ25JbWciLCJXSU5URVJfU0lHTl8xIiwid2ludGVyRmVuY2VJbWciLCJXSU5URVJfRkVOQ0VfMSIsIndpbnRlclBpbGxlckltZyIsIldJTlRFUl9QSUxMQVJfMSIsIkJhY2tncm91bmQiLCJpbWFnZXNMb2FkZWQiLCJsZXZlbE51bWJlciIsImF2YWlsYWJsZUJhY2tncm91bmRUeXBlcyIsImJhY2tncm91bmRUeXBlIiwiQ2FuY2VsQnV0dG9uIiwicG9zWCIsInBvc1kiLCJjYW5jZWxfYnV0dG9uX2ltYWdlIiwiYnRuU2l6ZUFuaW1hdGlvbiIsImJ0bk9yaWdpbmFsU2l6ZSIsIm9yaWduYWxQb3MiLCJDQU5DRUxfQlROX0lNRyIsIm9uQ2xpY2siLCJpc0luc2lkZSIsIkNsb3NlQnV0dG9uIiwiY2xvc2VfYnV0dG9uX2ltYWdlIiwiTUFQX0JUTl9JTUciLCJMZXZlbEJsb29uQnV0dG9uIiwibGV2ZWxEYXRhIiwib3JpZ2luYWxQb3NYIiwib3JpZ2luYWxQb3NZIiwic2l6ZSIsInJhZGl1c09mZlNldCIsImJsb29uU2l6ZSIsImJ0blNpemUiLCJsb2NrU2l6ZSIsImlzTGV2ZWxTcGVjaWFsIiwiaXNTcGVjaWFsTGV2ZWwiLCJTUEVDSUFMX0xFVkVMUyIsImlzU3BlY2lhbCIsImxldmVsU2VsZWN0aW9uUGFnZUluZGV4IiwidW5sb2NrTGV2ZWxJbmRleCIsImdhbWVMZXZlbERhdGEiLCJ0b3RhbEdhbWVMZXZlbHMiLCJiYWxsb29uSW1nIiwiZHJhd0ljb25zIiwiYXBwbHlQdWxzZUVmZmVjdCIsIkdyb3dQaGFzZVRocmVzaG9sZCIsImFuaW1hdGlvblByb2dyZXNzIiwiZ3Jvd1BoYXNlIiwicHJvZ3Jlc3MiLCJzaGFkb3dTaXplIiwic2hhZG93T3BhY2l0eSIsInNjYWxlWCIsInNjYWxlWSIsInJhZGl1cyIsInNjYWxlUmFkaXVzIiwic2F2ZSIsImZpbGwiLCJyZXN0b3JlIiwicGFnZUluZGV4IiwiZHJhd0xvY2siLCJjaGVja1N0YXJzIiwic3RhckNvdW50IiwibG9ja0ltZyIsImRyYXdTdGFyIiwic3RhckltZyIsImNhbGxCYWNrIiwiTmV4dEJ1dHRvbiIsIm5leHRfYnV0dG9uX2ltYWdlIiwiTkVYVF9CVE5fSU1HIiwiTm9CdXR0b24iLCJub19idXR0b25faW1hZ2UiLCJQYXVzZUJ1dHRvbiIsInBhdXNlX2J1dHRvbl9pbWFnZSIsIlBBVVNFX0JUTl9JTUciLCJQbGF5QnV0dG9uIiwibWFqVmVyc2lvbiIsIm1pblZlcnNpb24iLCJmaXJlYmFzZUludGVncmF0aW9uIiwiaW5pdCIsIlBMQVlfQlROX0lNRyIsImdldERhdGEiLCJtYWp2ZXJzaW9uIiwibWludmVyc2lvbiIsImxvZ1RhcHBlZFN0YXJ0RmlyZWJhc2VFdmVudCIsInRhcHBlZFN0YXJ0RGF0YSIsImNyX3VzZXJfaWQiLCJmdG1fbGFuZ3VhZ2UiLCJwcm9maWxlX251bWJlciIsInZlcnNpb25fbnVtYmVyIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJqc29uX3ZlcnNpb25fbnVtYmVyIiwiUmV0cnlCdXR0b24iLCJyZXRyeV9idXR0b25faW1hZ2UiLCJSRVRSWV9CVE5fSU1HIiwiWWVzQnV0dG9uIiwieWVzX2J1dHRvbl9pbWFnZSIsIllFU19CVE5fSU1HIiwiRmVlZGJhY2tUZXh0RWZmZWN0cyIsImZlZWRiYWNrVGV4dEVsZW1lbnQiLCJoaWRlVGltZW91dElkIiwiaW5pdGlhbGl6ZSIsImlzRmVlZGJhY2tFbGVtZW50QXZhaWxhYmxlIiwid3JhcFRleHQiLCJ0ZXh0Q29udGVudCIsInNldEhpZGVUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiTGV2ZWxJbmRpY2F0b3JzIiwiRXZlbnRNYW5hZ2VyIiwiYWN0aXZlSW5kaWNhdG9ycyIsInN0b25lRHJvcENhbGxiYWNrSGFuZGxlciIsImhhbmRsZVN0b25lRHJvcCIsImxvYWRQdXp6bGVDYWxsYmFja0hhbmRsZXIiLCJoYW5kbGVMb2FkUHV6emxlIiwibGV2ZWxfaW5kaWNhdG9yIiwiTEVWRUxfSU5ESUNBVE9SIiwiYmFyX2VtcHR5IiwiQkFSX0VNUFRZIiwiYmFyX2Z1bGwiLCJCQVJfRlVMTCIsInNldEluZGljYXRvcnMiLCJpbmRpY2F0b3JDb3VudCIsImFkZERyb3BTdG9uZUV2ZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3Bvc2UiLCJ1bnJlZ2lzdGVyRXZlbnRMaXN0ZW5lciIsImRldGFpbCIsImNvdW50ZXIiLCJNb25zdGVyIiwiemluZGV4IiwiZnJhbWVYIiwiZnJhbWVZIiwibWF4RnJhbWUiLCJmcHMiLCJjb3VudEZyYW1lIiwiZnJhbWVJbnRlcnZhbCIsImZyYW1lVGltZXIiLCJjYW52YXNTdGFjayIsImNhbmF2c0VsZW1lbnQiLCJnYW1lIiwibW9uc3RlclBoYXNlIiwiY2FsbEJhY2tGdW5jdGlvbiIsImdldENvbnRleHQiLCJlYXRJbWciLCJpZGxlSW1nIiwic3BpdEltZyIsImRyYWdJbWciLCJjaGFuZ2VUb0lkbGVBbmltYXRpb24iLCJjaGFuZ2VJbWFnZSIsImNoYW5nZVRvRHJhZ0FuaW1hdGlvbiIsImNoYW5nZVRvRWF0QW5pbWF0aW9uIiwiY2hhbmdlVG9TcGl0QW5pbWF0aW9uIiwiaXNDb3JyZWN0IiwiUGF1c2VQb3BVcCIsImNhbmNlbEJ1dHRvbiIsInJldHJ5QnV0dG9uIiwiY2xvc2VCdXR0b24iLCJwb3BfdXBfaW1hZ2UiLCJzd2l0Y2hUb0xldmVsU2VsZWN0aW9uIiwicmVsb2FkU2NlbmUiLCJnYW1lcGxheURhdGEiLCJhdWRpb1BsYXllciIsInJldHJ5U3VyZVBvcHVwIiwiQ2xvc2VTdXJlUG9wdXAiLCJpc1JldHJ5QnV0dG9uQ2xpY2tlZCIsImlzQ2xvc2VCdXR0b25DbGlja2VkIiwic2VsZklkRWxlbWVudCIsIlBPUFVQX0JHX0lNRyIsInllc1JldHJ5Q2FsbGJhY2siLCJub1JldHJ5Q2FsbGJhY2siLCJub0Nsb3NlQ2FsbGJhY2siLCJwbGF5Q2xpY2tTb3VuZCIsImFkZExpc3RuZXIiLCJoYW5kbGVNb3VzZUNsaWNrIiwic2VsZkVsZW1lbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRYIiwibGVmdCIsImNsaWVudFkiLCJ0b3AiLCJwbGF5QXJlWW91U3VyZVNvdW5kIiwiZmlsbFJlY3QiLCJBVURJT19BUkVfWU9VX1NVUkUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiQXJlWW91U3VyZVBvcFVwIiwieWVzQnV0dG9uIiwibm9CdXR0b24iLCJ5ZXNDYWxsYmFjayIsIm5vQ2FsbGJhY2siLCJQcm9tcHRUZXh0IiwiY3VycmVudFByb21wdFRleHQiLCJjdXJyZW50UHV6emxlRGF0YSIsInByb21wdF9pbWFnZSIsInRhcmdldFN0b25lcyIsInJpZ2h0VG9MZWZ0IiwiaXNTdG9uZURyb3BwZWQiLCJkcm9wcGVkU3RvbmVzIiwidGltZSIsInByb21wdEltYWdlV2lkdGgiLCJpc0FwcEZvcmVncm91bmQiLCJzY2FsZSIsImlzU2NhbGluZ1VwIiwic2NhbGVGYWN0b3IiLCJwcm9tcHRJbWFnZUhlaWdodCIsInByb21wdFBsYXlCdXR0b24iLCJwcm9tcHQiLCJwcm9tcHRUZXh0IiwiZ2V0UHJvbXB0QXVkaW9VcmwiLCJoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlIiwiaGFuZGxlTW91c2VEb3duIiwicGxheVNvdW5kIiwicHJvbXB0QXVkaW8iLCJzZXRDdXJycmVudFB1enpsZURhdGEiLCJkcmF3UlRMTGFuZyIsImZvbnRTaXplIiwiY2FsY3VsYXRlRm9udCIsInNjYWxlZFdpZHRoIiwic2NhbGVkSGVpZ2h0IiwibGV2ZWxNZXRhIiwibGV2ZWxUeXBlIiwicHJvdG9UeXBlIiwibGV0dGVySW5Xb3JkIiwiUmVnRXhwIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJkcmF3T3RoZXJzIiwicHJvbXB0VGV4dExldHRlcnMiLCJzdGFydFByb21wdHRleHRYIiwiY3VycmVudFdvcmRXaWR0aCIsImxldHRlckhpZ2hsaWdodCIsInVwZGF0ZVNjYWxpbmciLCJwdXp6bGVzIiwiZHJvcHBlZFN0b25lSW5kZXgiLCJpbWFnZTFQcm9taXNlIiwibG9hZEltYWdlIiwiUFJPTVBUX1RFWFRfQkciLCJpbWFnZTJQcm9taXNlIiwiUFJPTVBUX1BMQVlfQlVUVE9OIiwiU3RvbmVIYW5kbGVyIiwic3RvbmVQb3MiLCJwaWNrZWRTdG9uZSIsImZvaWxTdG9uZXMiLCJhbnN3ZXIiLCJwdXp6bGVOdW1iZXIiLCJjb3JyZWN0QW5zd2VyIiwicHV6emxlU3RhcnRUaW1lIiwic2hvd1R1dG9yaWFsIiwiR2FtZVNjb3JlIiwiZ2V0RGF0YWZyb21TdG9yYWdlIiwiY29ycmVjdFN0b25lQXVkaW8iLCJ0dXRvcmlhbCIsImNvcnJlY3RUYXJnZXRTdG9uZSIsInN0b25lYmciLCJmZWVkYmFja0F1ZGlvcyIsImlzR2FtZVBhdXNlZCIsInNldFRhcmdldFN0b25lIiwiaW5pdGlhbGl6ZVN0b25lUG9zIiwiQXVkaW8iLCJBVURJT19QQVRIX0NPUlJFQ1RfU1RPTkUiLCJjb252ZXJ0RmVlZEJhY2tBdWRpb3NUb0xpc3QiLCJUdXRvcmlhbCIsIkFTU0VUU19QQVRIX1NUT05FX1BJTktfQkciLCJjcmVhdGVTdG9uZXMiLCJnZXRGb2lsU3RvbmVzIiwidXBkYXRlVGFyZ2V0U3RvbmVQb3NpdGlvbnMiLCJkcmF3V29yZFB1enpsZUxldHRlcnMiLCJzaG91bGRIaWRlU3RvbmVDaGVja2VyIiwib2Zmc2V0Q29vcmRpbmF0ZVZhbHVlIiwic29ydCIsInNldFB1enpsZU51bWJlciIsImlzU3RvbmVMZXR0ZXJEcm9wQ29ycmVjdCIsImRyb3BwZWRTdG9uZSIsImZlZWRCYWNrSW5kZXgiLCJpc1dvcmQiLCJpc0xldHRlckRyb3BDb3JyZWN0IiwicHJvY2Vzc0xldHRlckRyb3BGZWVkYmFja0F1ZGlvIiwiZ2V0Q29ycmVjdFRhcmdldFN0b25lIiwicGxheUNvcnJlY3RBbnN3ZXJGZWVkYmFja1NvdW5kIiwiQVVESU9fUEFUSF9FQVRTIiwiQVVESU9fUEFUSF9DSEVFUklOR19GVU5DIiwiQVVESU9fUEFUSF9NT05TVEVSX1NQSVQiLCJBVURJT19QQVRIX01PTlNURVJfRElTU0FQT0lOVEVEIiwic3BsaWNlIiwidG90YWxTdG9uZXNDb3VudCIsImV4dHJhU3RvbmVzQ291bnQiLCJwYXVzZSIsInNldEdhbWVQYXVzZSIsInJhbmRvbU51bWJlciIsIkFVRElPX1BBVEhfUE9JTlRTX0FERCIsInBsYXkiLCJyZXNldFN0b25lUG9zaXRpb24iLCJwaWNrZWRTdG9uZU9iamVjdCIsInN0b25lIiwic3RvbmVPYmoiLCJ4TGltaXQiLCJoYWxmV2lkdGgiLCJjb21wdXRlQ3Vyc29yRGlzdGFuY2UiLCJzYyIsImhhbmRsZVBpY2tTdG9uZVVwIiwiY3RyIiwiaGFuZGxlSG92ZXJpbmdUb0Fub3RoZXJTdG9uZSIsInNob3VsZEdyb3VwTGV0dGVyIiwiaGFuZGxlTW92aW5nU3RvbmVMZXR0ZXIiLCJkcmFnZ2luZ1N0b25lIiwidXBkYXRlZFN0b25lQ29vcmRpbmF0ZXMiLCJUaW1lclRpY2tpbmciLCJ0aW1lcldpZHRoIiwidGltZXJIZWlnaHQiLCJ3aWR0aFRvQ2xlYXIiLCJ0aW1lciIsImlzVGltZXJTdGFydGVkIiwiaXNUaW1lckVuZGVkIiwiaXNUaW1lclJ1bm5pbmdPdXQiLCJ0aW1lcl9mdWxsIiwicGF1c2VCdXR0b25DbGlja2VkIiwic3RhcnRNeVRpbWVyIiwiaXNNeVRpbWVyT3ZlciIsInBsYXlMZXZlbEVuZEF1ZGlvT25jZSIsInRpbWVyX2VtcHR5IiwiVElNRVJfRU1QVFkiLCJyb3RhdGluZ19jbG9jayIsIlJPVEFUSU5HX0NMT0NLIiwiVElNRVJfRlVMTCIsInN0YXJ0VGltZXIiLCJyZWFkeVRpbWVyIiwiQVVESU9fVElNRU9VVCIsIlRyYWlsRWZmZWN0IiwicGFydGljbGVzIiwibW91c2UiLCJpc0RpYW1vbmQiLCJkcmF3VHJhaWwiLCJ0ZW1wIiwidHRsIiwiYWRkVHJhaWxQYXJ0aWNsZXNPbk1vdmUiLCJQYXJ0aWNsZXMiLCJyZXNldFBhcnRpY2xlcyIsImVuZCIsInN0eWxlIiwicmdiIiwiaHlwIiwic3RhclgiLCJzdGFyWSIsInN0YXJBbmdsZSIsInN0YXJ0UG9zWCIsImRldGVybWluZVZhbHVlQnlTY3JlZW5XaWR0aCIsInN0YXJ0UG9zWSIsImVuZFBvc1giLCJlbmRQb3NZIiwiZ2V0UmFuZG9tSW50IiwiYmdTY3JlZW5WYWwiLCJzbWFsbFNjcmVlblZhbCIsInNjcmVlbiIsImVhc2VPdXRRdWFydCIsImlzRHJhd0RpYW1vbmQiLCJzdGFyUGFydGljbGUiLCJjaXJjbGVQYXJ0aWNsZSIsIm1vdmVUbyIsImxpbmVUbyIsInR1dG9yaWFsSW1nIiwidGFyZ2V0U3RvbmVQb3NpdGlvbnMiLCJzdGFydHgiLCJzdGFydHkiLCJlbmR4IiwiZW5keSIsImVuZFR1dG9yaWFsIiwicGxheU1uc3RyQ2xrVHRybEFuaW0iLCJ0b3RhbFRpbWUiLCJtb25zdGVyU3RvbmVEaWZmZXJlbmNlIiwiZHgiLCJkeSIsImFic2R4IiwiYWJzZHkiLCJzdGFydFJpcHBsZSIsImRyYXdSaXBwbGUiLCJUVVRPUklBTF9IQU5EIiwidGFyZ2V0U3RvbmVQb3NpdGlvbiIsImFuaW1hdGVJbWFnZSIsImlzTW9iaWxlIiwic2V0VHV0b3JpYWxFbmQiLCJzaG91bGRQbGF5VHV0b3JpYWwiLCJkaXN4IiwiZGlzeSIsIm1vbnN0ZXJTdG9uZURpZmZlcmVuY2VJblBlcmNlbnRhZ2UiLCJjcmVhdGVIYW5kU2NhbGVBbmltYXRpb24iLCJwcmV2aW91c0FscGhhIiwiZ2xvYmFsQWxwaGEiLCJzaG91bGRDcmVhdGVSaXBwbGUiLCJzaW51c29pZGFsSW50ZXJwb2xhdGlvbiIsIm1pblNjYWxlIiwibWF4U2NhbGUiLCJkdXJhdGlvbiIsImFtcGxpdHVkZSIsImZyZXF1ZW5jeSIsInNpbiIsImNsaWNrT25Nb25zdGVyVHV0b3JpYWwiLCJzaG91bGRQbGF5TW9uc3RlckNsaWNrVHV0b3JpYWxBbmltYXRpb24iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJib3R0b21Qb3NpdGlvbiIsInRvcFBvc2l0aW9uIiwiY3VycmVudE9mZnNldFkiLCJnZXRBbGxHYW1lTGV2ZWxJbmZvIiwicHV6emxlTnVtZXIiLCJzZXRQbGF5TW9uc3RlckNsaWNrQW5pbWF0aW9uIiwiQkFDS0dST1VORF9BU1NFVF9MSVNUIiwic3VtbWVyIiwiQkdfR1JPVVBfSU1HUyIsIkRFRkFVTFRfQkdfR1JPVVBfSU1HUyIsImRlZmF1bHRCZ0RyYXdpbmciLCJhdXR1bW4iLCJBVVRVTU5fQkdfR1JPVVBfSU1HUyIsImF1dHVtQmdEcmF3aW5nIiwid2ludGVyIiwiV0lOVEVSX0JHX0dST1VQX0lNR1MiLCJ3aW50ZXJCZ0RyYXdpbmciLCJjcmVhdGVCYWNrZ3JvdW5kIiwiYmFja2dyb3VuZEltZyIsImRyYXdNZXRob2QiLCJsb2FkRHluYW1pY0JnQXNzZXRzIiwiYXNzZXRzTGlzdCIsImFyciIsImJnSW1hZ2VzIiwibGV2ZWxTZWxlY3RCZ0RyYXdpbmciLCJMRVZFTF9TRUxFQ1RJT05fQkFDS0dST1VORCIsImdldGRlZmF1bHRDbG91ZEJ0bnNQb3MiLCJsb2FkTGV2ZWxJbWFnZXMiLCJNQVBfSUNPTl9JTUciLCJzcGVjaWFsQmxvb25JbWciLCJNQVBfSUNPTl9TUEVDSUFMX0lNRyIsIk1BUF9MT0NLX0lNRyIsIlNUQVJfSU1HIiwiY3JlYXRlTGV2ZWxPYmplY3QiLCJGaXJlYmFzZVVzZXJDbGlja2VkIiwiRmlyZWJhc2VVc2VySW5zdGFsbCIsIlBXQUluc3RhbGxTdGF0dXMiLCJVc2VyQ2FuY2VsbGVkIiwiTmF0aXZlUGxheUJ1dHRvbiIsIlByZXZpb3VzUGxheWVkTGV2ZWwiLCJTdG9yZU1vbnN0ZXJQaGFzZU51bWJlciIsIklzQ2FjaGVkIiwiTW9uc3RlckF1ZGlvIiwiRmVlZGJhY2tBdWRpbyIsIkludHJvTXVzaWMiLCJQcm9tcHRBdWRpbyIsIkJ1dHRvbkNsaWNrIiwiVGltZU92ZXIiLCJTdG9uZU11c2ljIiwiUGhyYXNlQXVkaW8iLCJMZXZlbEVuZEF1ZGlvIiwiU3RhcnRTY2VuZTEiLCJMZXZlbFNlbGVjdGlvbjEiLCJHYW1lU2NlbmUxIiwiRW5kU2NlbmUxIiwiRk9OVF9CQVNFX1BBVEgiLCJBVURJT19QQVRIX09OX0RSQUciLCJBVURJT19JTlRSTyIsIkFVRElPX0xFVkVMX0xPU0UiLCJBVURJT19MRVZFTF9XSU4iLCJBVURJT19VUkxfUFJFTE9BRCIsIkFTU0VUU19QQVRIX0JHXzAxIiwiQVNTRVRTX1BBVEhfTU9OU1RFUl9JRExFIiwiV0lOX0JHIiwiUElOX1NUQVJfMSIsIlBJTl9TVEFSXzIiLCJQSU5fU1RBUl8zIiwiQ0xPVURfNiIsIkNMT1VEXzciLCJDTE9VRF84IiwiQkFDS19CVE5fSU1HIiwiR0FNRVBMQVlfQkdfR1JPVVBfSU1HUyIsIlNDRU5FX05BTUVfU1RBUlQiLCJTQ0VORV9OQU1FX0xFVkVMX1NFTEVDVCIsIlNDRU5FX05BTUVfR0FNRV9QTEFZIiwiU0NFTkVfTkFNRV9MRVZFTF9FTkQiLCJVUkwiLCJnZXRGdG1EYXRhIiwiaGVhZGVycyIsImpzb24iLCJjdXN0b21Gb250cyIsImRlZmF1bHQiLCJlbmdsaXNoIiwic3dhaGlsaSIsIndvbG9mIiwidGFqaWsiLCJtYXJhdGhpIiwiYW1oYXJpYyIsInB1bmphYmkiLCJ0YW1pbCIsInNlcGVkaSIsImd1amFyYXRpIiwidGVsdWd1IiwidHNvbmdhIiwibWFsYXkiLCJuZGViZWxlIiwidmVuZGEiLCJzaXN3YXRpIiwidHN3YW5hIiwidGhhaSIsImZ1bGEiLCJmYXJzaSIsImJ1cm1lc2UiLCJiZW5nYWxpIiwiQXplcmJhaWphbmkiLCJTZXNvdGhvIiwiR2VvcmdpYW4iLCJCcmF6aWxpYW5Qb3J0dWd1ZXNlIiwiU29tYWxpIiwiSGF1c2EiLCJJZ2JvIiwiSGF0aWFuQ3Jlb2xlIiwiT3JvbW8iLCJMdWdhbmRhIiwiWW9ydWJhIiwiS2htZXIiLCJKYXZhbmVzZSIsIlVyZHUiLCJLaW55YXJ3YW5kYSIsIlNob25hIiwiS3VyZGlzaCIsIkZyZW5jaCIsImlzaVhob3NhIiwiQWZyaWthYW5zIiwiTmVwYWxpIiwiVWtyYWluaWFuIiwiSGluZGkiLCJUYWdhbG9nIiwiVmlldG5hbWVzZSIsIlBhc2h0byIsIlR3aSIsIkFyYWJpYyIsIkRhdGFNb2RhbCIsInRpdGxlIiwib3RoZXJBdWRpb3MiLCJsZXZlbHMiLCJGZWVkYmFja1RleHRzIiwiRmVlZGJhY2tBdWRpb3MiLCJ2ZXJzaW9uIiwiZmVlZGJhY2tUZXh0cyIsIk90aGVyQXVkaW9zIiwiZ2V0TGV2ZWxzIiwibGV2ZWxBcnJheSIsIkxldmVscyIsInNlbGN0WW91clBsYXllciIsIndhdGNoTWVHcm93IiwiYXJlWW91U3VyZSIsImZhbnRhc3RpYyIsImdyZWF0IiwiYW1hemluZyIsImdldFB1enpsZURhdGEiLCJMZXZlbE1ldGEiLCJMZXZlbE51bWJlciIsInB1enpsZU9iamVjdHMiLCJQdXp6bGVzIiwicHV6emxlRGF0YSIsInNlZ21lbnROdW1iZXIiLCJwdXp6bGUiLCJTZWdtZW50TnVtYmVyIiwiUHJvbXB0IiwiZ2V0VGFyZ2V0U3RvbmVzIiwiZm9pbFN0b25lQXJyYXkiLCJmb2lsc3RvbmVzIiwic3RvbmVzIiwiU3RvbmVUZXh0IiwidGFyZ2V0U3RvbmVBcnJheSIsInRhcmdldHN0b25lcyIsIkZvaWxTdG9uZSIsInN0b25lVGV4dCIsIlRhcmdldFN0b25lIiwicHJvbXB0RmFkZU91dCIsImxldHRlckdyb3VwIiwiUHJvbXB0RmFkZW91dCIsIkxldHRlckdyb3VwIiwiUHJvbXB0VHlwZSIsIkxldmVsVHlwZSIsInNldEdhbWVMZXZlbFNjb3JlIiwiY3VycmVudExldmVsSW5mbyIsInNjb3JlIiwic3RhcnNHYWluZWQiLCJjYWxjdWxhdGVTdGFyQ291bnQiLCJsZXZlbFBsYXllZEluZm8iLCJsZXZlbE5hbWUiLCJzZXRUb3RhbFN0YXJDb3VudCIsImFsbEdhbWVsZXZlbEluZm8iLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwiY3VycmVudGxhbmd1YWdlIiwiZ2V0SXRlbSIsInRvdGFsU3RhckNvdW50IiwiZ2V0VG90YWxTdGFyQ291bnQiLCJoYW5kbGVyIiwiaGFuZGxlU3RvbmVEcm9wcGVkRXZlbnQiLCJoYW5kbGVMb2FkUHV6emxlRXZlbnQiLCJXb3JkUHV6emxlTG9naWMiLCJncm91cGVkTGV0dGVycyIsImRyb3BwZWRMZXR0ZXJzIiwiZ3JvdXBlZE9iaiIsImRyb3BwZWRIaXN0b3J5IiwiaGlkZUxpc3RPYmoiLCJnZXRUYXJnZXRXb3JkIiwiZ2V0VmFsdWVzIiwiY2hlY2tJc1dvcmRQdXp6bGUiLCJ1cGRhdGVQdXp6bGVMZXZlbCIsImNsZWFyQWxsVmFsdWVzIiwiY2xlYXJQaWNrZWRVcCIsInZhbGlkYXRlU2hvdWxkSGlkZUxldHRlciIsImZvaWxTdG9uZUluZGV4IiwiaGFuZGxlQ2hlY2tIb3ZlcmVkU3RvbmUiLCJmb2lsU3RvbmVUZXh0IiwiY29tYmluZWRMZXR0ZXJzIiwidGFyZ2V0V29yZCIsImlzTGV0dGVyQWxyZWFkeUFkZGVkIiwiaXNTYW1lTGV0dGVyVW5pcXVlIiwidmFsaWRhdGVGZWRMZXR0ZXJzIiwidmFsaWRhdGVXb3JkUHV6emxlIiwic2V0R3JvdXBUb0Ryb3BwZWQiLCJzZXRQaWNrVXBMZXR0ZXIiLCJsZXR0ZXIiLCJhcnJGb2lsU3RvbmVJbmRleCIsIlNjZW5lSGFuZGxlciIsInN0YXJ0U2NlbmUiLCJsZXZlbFNlbGVjdGlvblNjZW5lIiwiZ2FtZXBsYXlTY2VuZSIsImxldmVsRW5kU2NlbmUiLCJsb2FkaW5nU2NyZWVuIiwibG9hZGluZyIsImxhc3RUaW1lIiwidGl0bGVUZXh0RWxlbWVudCIsImhhbmRsZUluc3RhbGxQcm9tcHQiLCJTdGFydFNjZW5lIiwic3dpdGNoU2NlbmVUb0xldmVsU2VsZWN0aW9uIiwiU2NlbmVOYW1lIiwiTG9hZGluZ1NjZW5lIiwicmVtb3ZlTG9hZGluZyIsInN0YXJ0QW5pbWF0aW9uTG9vcCIsImFuaW1hdGUiLCJ0aW1lU3RhbXAiLCJhbmltYXRpb24iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJkZXZUb2dnbGUiLCJjaGVja01vbnN0ZXJQaGFzZVVwZGF0aW9uIiwibW9uc3RlclBoYXNlTnVtYmVyIiwiY2xlYXJSZWN0IiwiZHJhd0xldmVsU2VsZWN0aW9uIiwic3dpdGNoU2NlbmVUb0dhbWVwbGF5IiwiZ2FtZVBsYXlEYXRhIiwiY2hhbmdlU2NlbmVSZXF1ZXN0RnJvbSIsInNob3dMb2FkaW5nIiwianNvblZlcnNpb25OdW1iZXIiLCJHYW1lcGxheVNjZW5lIiwiY3VycmVudExldmVsRGF0YSIsInN3aXRjaFNjZW5lVG9FbmRMZXZlbCIsInNlbGVjdGVkTGV2ZWxOdW1iZXIiLCJjdXJyZW50TGV2ZWxOdW1iZXIiLCJpbml0Q2xvdWQiLCJMZXZlbEVuZFNjZW5lIiwiTGV2ZWxTZWxlY3Rpb25TY3JlZW4iLCJkaXNwbGF5IiwibGFzdFNjZW5lTmFtZSIsInpJbmRleCIsIm1vbnN0ZXIiLCJ0aW1lclRpY2tpbmciLCJwYXVzZUJ1dHRvbiIsImxldmVsSW5kaWNhdG9ycyIsInN0b25lc0NvdW50IiwiZmVlZEJhY2tUZXh0cyIsImlzUHV6emxlQ29tcGxldGVkIiwic3dpdGNoU2NlbmVUb0VuZCIsInN0b25lSGFuZGxlciIsInBhdXNlUG9wdXAiLCJpc1BhdXNlQnV0dG9uQ2xpY2tlZCIsImJhY2tncm91bmQiLCJmZWVkQmFja1RleHRDYW5hdnNFbGVtZW50IiwiZmVlZGJhY2tUZXh0RWZmZWN0cyIsImlzR2FtZVN0YXJ0ZWQiLCJzdGFydFRpbWUiLCJwdXp6bGVUaW1lIiwiaXNEaXNwb3NpbmciLCJyZXNldEFuaW1hdGlvbklEIiwidHJhaWxQYXJ0aWNsZXMiLCJjbGlja1RyYWlsVG9nZ2xlIiwiaGFzRmVkIiwid29yZFB1enpsZUxvZ2ljIiwid2lsbFJlYWRGcmVxdWVudGx5Iiwic3RhcnRHYW1lVGltZSIsInN0YXJ0UHV6emxlVGltZSIsImxvYWRQdXp6bGUiLCJyZXN1bWVHYW1lIiwicHJvZmlsZU1vbnN0ZXIiLCJwcmV2aW91c1BsYXllZExldmVsIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJzZXR1cEJnIiwiZ2V0UmFuZG9tRmVlZEJhY2tUZXh0IiwicmFuZG9tSW5kZXgiLCJzZWxlY3RlZEtleSIsImRlZmluZWRWYWx1ZXNNYXhDb3VudCIsInZhbHVlcyIsImZpbHRlciIsImhhbmRsZU1vdXNlVXAiLCJsZXR0ZXJQdXp6bGUiLCJ3b3JkUHV6emxlIiwic2V0UGlja2VkVXAiLCJoYW5kbGVNb3VzZU1vdmUiLCJ0cmFpbFgiLCJ0cmFpbFkiLCJuZXdTdG9uZUNvb3JkaW5hdGVzIiwibmV3U3RvbmVMZXR0ZXIiLCJwYXVzZUdhbWVQbGF5IiwiaGFuZGxlVG91Y2hTdGFydCIsInRvdWNoIiwidG91Y2hlcyIsImhhbmRsZVRvdWNoTW92ZSIsImhhbmRsZVRvdWNoRW5kIiwiY2hhbmdlZFRvdWNoZXMiLCJoYW5kbGVTdG9uZUxldHRlckRyYXdpbmciLCJyZW1vdmVFdmVudExpc3RlbmVycyIsInRpbWVyRW5kZWQiLCJCb29sZWFuIiwibG9nUHV6emxlRW5kRmlyZWJhc2VFdmVudCIsImxvZ0xldmVsRW5kRmlyZWJhc2VFdmVudCIsImxvYWRQdXp6bGVFdmVudCIsIkN1c3RvbUV2ZW50IiwiaW5pdE5ld1B1enpsZSIsImNoZWNrU3RvbmVEcm9wcGVkIiwiaGFuZGxlQ29ycmVjdFN0b25lRHJvcCIsImhhbmRsZVN0b25lRHJvcEVuZCIsImRyb3BwZWRTdG9uZUluc3RhbmNlIiwicmVzZXRUb0lkbGVBbmltYXRpb24iLCJkZWxheSIsInB1enpsZVR5cGUiLCJkaXNwYXRjaFN0b25lRHJvcEV2ZW50IiwiZmVlZGJhY2tJbmRleCIsImRyb3BTdG9uZUV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImVuZFRpbWUiLCJwdXp6bGVDb21wbGV0ZWREYXRhIiwic3VjY2Vzc19vcl9mYWlsdXJlIiwibGV2ZWxfbnVtYmVyIiwicHV6emxlX251bWJlciIsIml0ZW1fc2VsZWN0ZWQiLCJmb2lscyIsInJlc3BvbnNlX3RpbWUiLCJsZXZlbENvbXBsZXRlZERhdGEiLCJudW1iZXJfb2Zfc3VjY2Vzc2Z1bF9wdXp6bGVzIiwiY2FudmFzRWxlbWVudCIsInhEb3duIiwieURvd24iLCJwcmV2aW91c1BsYXllZExldmVsTnVtYmVyIiwibGV2ZWxzU2VjdGlvbkNvdW50IiwicmlnaHRCdG5TaXplIiwicmlnaHRCdG5YIiwicmlnaHRCdG5ZIiwibGVmdEJ0blNpemUiLCJsZWZ0QnRuWCIsImxlZnRCdG5ZIiwibGV2ZWxCdXR0b25zIiwiY3JlYXRlTGV2ZWxCdXR0b25zIiwibmV4dGJ0biIsImJhY2tidG4iLCJhZGRMaXN0ZW5lcnMiLCJsZXZlbHNBcnIiLCJjb29yZGluYXRlcyIsImJ0bkNvb3JkaW5hdGVzIiwicGF1c2VQbGF5QXVkaW9zIiwiZ2V0VG91Y2hlcyIsImV2dCIsIm9yaWdpbmFsRXZlbnQiLCJmaXJzdFRvdWNoIiwieFVwIiwieVVwIiwieERpZmYiLCJ5RGlmZiIsImRvd25CdXR0b24iLCJpc1dpdGhpbkJ1dHRvbkFyZWEiLCJidG5YIiwiYnRuWSIsImlzUmlnaHQiLCJpc0xlZnQiLCJidG4iLCJzdGFydEdhbWUiLCJkcmF3TGV2ZWwiLCJsZXZlbEJ0biIsImN1cnJlbnRMZXZlbEluZGV4IiwiY2hlY2tVbmxvY2tlZExldmVsIiwibGV2ZWwiLCJsb2dTZWxlY3RlZExldmVsRXZlbnQiLCJzZWxlY3RlZExldmVsdERhdGEiLCJsZXZlbF9zZWxlY3RlZCIsIm5leHRCdXR0b24iLCJjdXJyZW50TGV2ZWwiLCJzd2l0Y2hUb0dhbWVwbGF5Q0IiLCJzd2l0Y2hUb0xldmVsU2VsZWN0aW9uQ0IiLCJ0aW1lb3V0cyIsInN0YXJEcmF3bkNvdW50IiwiaXNMYXN0TGV2ZWwiLCJzd2l0Y2hUb1JlYWN0aW9uQW5pbWF0aW9uIiwic3RhcjFJbWciLCJzdGFyMkltZyIsInN0YXIzSW1nIiwid2luQmFja2dyb3VuZEltZyIsInN0YXJBbmltYXRpb24iLCJkcmF3U3RhcnMiLCJjb3VudCIsInBhdXNlQXVkaW9zIiwidGltZW91dCIsImNsb3VkWFBvc2l0aW9uIiwic3RvcENsb3VkTW92aW5nIiwiY2xvdWRNb3ZpbmdUaW1lT3V0IiwiY2xvdWQ2IiwiY2xvdWQ3IiwiY2xvdWQ4IiwicHdhX3N0YXR1cyIsImZpcmViYXNlX2FuYWx5dGljcyIsImJ1dHRvbkNvbnRleHQiLCJwbGF5QnV0dG9uIiwicHdhX2luc3RhbGxfc3RhdHVzIiwiY3JlYXRlUGxheUJ1dHRvbiIsImhhbmRsZXJJbnN0YWxsUHJvbXB0IiwiZ2VuZXJhdGVHYW1lVGl0bGUiLCJmYnEiLCJUZXN0R2FtZXBsYXlTY2VuZSIsImxldmVsSW5kaWNhdG9yIiwib3V0Y29tZSIsInBlcmZvcm1hbmNlIiwidGltZU92ZXJDYWxsYmFjayIsIm1vdXNlRXZlbnQiLCJNb3VzZUV2ZW50IiwiQU5BTFlUSUNTX1RZUEUiLCJHQV9GSURfS0VZIiwiT1JJR0lOX0tFWSIsIkZFVENIX1RJTUVPVVRfTUlMTElTIiwiRFlOQU1JQ19DT05GSUdfVVJMIiwiR1RBR19VUkwiLCJsb2dnZXIiLCJMb2dnZXIiLCJFUlJPUlMiLCJFUlJPUl9GQUNUT1JZIiwiY3JlYXRlR3RhZ1RydXN0ZWRUeXBlc1NjcmlwdFVSTCIsInN0YXJ0c1dpdGgiLCJndGFnVVJMIiwid2FybiIsInByb21pc2VBbGxTZXR0bGVkIiwicHJvbWlzZXMiLCJpbnNlcnRTY3JpcHRUYWciLCJkYXRhTGF5ZXJOYW1lIiwidHJ1c3RlZFR5cGVzUG9saWN5IiwicG9saWN5TmFtZSIsInBvbGljeU9wdGlvbnMiLCJ0cnVzdGVkVHlwZXMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVUcnVzdGVkVHlwZXNQb2xpY3kiLCJjcmVhdGVTY3JpcHRVUkwiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwiZ3RhZ1NjcmlwdFVSTCIsImhlYWQiLCJhcHBlbmRDaGlsZCIsIndyYXBHdGFnIiwiZ3RhZ0NvcmUiLCJpbml0aWFsaXphdGlvblByb21pc2VzTWFwIiwiZHluYW1pY0NvbmZpZ1Byb21pc2VzTGlzdCIsIm1lYXN1cmVtZW50SWRUb0FwcElkIiwiY29tbWFuZCIsImd0YWdQYXJhbXMiLCJpbml0aWFsaXphdGlvblByb21pc2VzVG9XYWl0Rm9yIiwiZ2FTZW5kVG9MaXN0IiwiZHluYW1pY0NvbmZpZ1Jlc3VsdHMiLCJzZW5kVG9JZCIsImZvdW5kQ29uZmlnIiwiZmluZCIsImluaXRpYWxpemF0aW9uUHJvbWlzZSIsImd0YWdPbkV2ZW50IiwiY29ycmVzcG9uZGluZ0FwcElkIiwiZ3RhZ09uQ29uZmlnIiwiZmllbGROYW1lIiwiY3VzdG9tUGFyYW1zIiwiTE9OR19SRVRSWV9GQUNUT1IiLCJkZWZhdWx0UmV0cnlEYXRhIiwidGhyb3R0bGVNZXRhZGF0YSIsImdldFRocm90dGxlTWV0YWRhdGEiLCJzZXRUaHJvdHRsZU1ldGFkYXRhIiwibWV0YWRhdGEiLCJkZWxldGVUaHJvdHRsZU1ldGFkYXRhIiwiZ2V0SGVhZGVycyIsIkhlYWRlcnMiLCJBY2NlcHQiLCJmZXRjaER5bmFtaWNDb25maWdXaXRoUmV0cnkiLCJhcHAiLCJyZXRyeURhdGEiLCJ0aW1lb3V0TWlsbGlzIiwib3B0aW9ucyIsInRocm90dGxlRW5kVGltZU1pbGxpcyIsInNpZ25hbCIsIkFuYWx5dGljc0Fib3J0U2lnbmFsIiwiYWJvcnQiLCJhdHRlbXB0RmV0Y2hEeW5hbWljQ29uZmlnV2l0aFJldHJ5IiwiYXBwRmllbGRzIiwiYmFja29mZk1pbGxpcyIsInNldEFib3J0YWJsZVRpbWVvdXQiLCJhcHBVcmwiLCJzdGF0dXMiLCJlcnJvck1lc3NhZ2UiLCJqc29uUmVzcG9uc2UiLCJfaWdub3JlZCIsImh0dHBTdGF0dXMiLCJyZXNwb25zZU1lc3NhZ2UiLCJmZXRjaER5bmFtaWNDb25maWciLCJpc1JldHJpYWJsZUVycm9yIiwiZGVidWciLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImRlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0IiwiZGVmYXVsdENvbnNlbnRTZXR0aW5nc0ZvckluaXQiLCJfc2V0Q29uc2VudERlZmF1bHRGb3JJbml0IiwiY29uc2VudFNldHRpbmdzIiwiX3NldERlZmF1bHRFdmVudFBhcmFtZXRlcnNGb3JJbml0IiwiX2luaXRpYWxpemVBbmFseXRpY3MiLCJpbnN0YWxsYXRpb25zIiwiZHluYW1pY0NvbmZpZ1Byb21pc2UiLCJmaWRQcm9taXNlIiwiZXJyb3JJbmZvIiwidmFsaWRhdGVJbmRleGVkREIiLCJlbnZJc1ZhbGlkIiwiZ2V0SWQiLCJkeW5hbWljQ29uZmlnIiwiZmlkIiwic2NyaXB0VGFncyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnIiwiZmluZEd0YWdTY3JpcHRPblBhZ2UiLCJjb25maWdQcm9wZXJ0aWVzIiwiQW5hbHl0aWNzU2VydmljZSIsIl9kZWxldGUiLCJndGFnQ29yZUZ1bmN0aW9uIiwid3JhcHBlZEd0YWdGdW5jdGlvbiIsImd0YWdOYW1lIiwiZ2xvYmFsSW5pdERvbmUiLCJzZXR0aW5ncyIsImZhY3RvcnkiLCJtaXNtYXRjaGVkRW52TWVzc2FnZXMiLCJkZXRhaWxzIiwid2Fybk9uQnJvd3NlckNvbnRleHRNaXNtYXRjaCIsImRhdGFMYXllciIsImdldE9yQ3JlYXRlRGF0YUxheWVyIiwid3JhcHBlZEd0YWciLCJndGFnRnVuY3Rpb25OYW1lIiwiX2FyZ3MiLCJ3cmFwT3JDcmVhdGVHdGFnIiwiZ2V0QXBwIiwiYW5hbHl0aWNzUHJvdmlkZXIiLCJfZ2V0UHJvdmlkZXIiLCJpc0luaXRpYWxpemVkIiwiZ2V0SW1tZWRpYXRlIiwiaW5pdGlhbGl6ZUFuYWx5dGljcyIsImV4aXN0aW5nSW5zdGFuY2UiLCJnZXRPcHRpb25zIiwiaXNTdXBwb3J0ZWQiLCJzZXRDdXJyZW50U2NyZWVuIiwiYW5hbHl0aWNzSW5zdGFuY2UiLCJzY3JlZW5OYW1lIiwiZ3RhZ0Z1bmN0aW9uIiwiZ2xvYmFsIiwic2V0Q3VycmVudFNjcmVlbiQxIiwiZ2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQiLCJjbGllbnRJZCIsImludGVybmFsR2V0R29vZ2xlQW5hbHl0aWNzQ2xpZW50SWQiLCJzZXRVc2VySWQiLCJzZXRVc2VySWQkMSIsInNldFVzZXJQcm9wZXJ0aWVzIiwicHJvcGVydGllcyIsImZsYXRQcm9wZXJ0aWVzIiwic2V0VXNlclByb3BlcnRpZXMkMSIsInNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkIiwiZW5hYmxlZCIsInNldEFuYWx5dGljc0NvbGxlY3Rpb25FbmFibGVkJDEiLCJzZXREZWZhdWx0RXZlbnRQYXJhbWV0ZXJzIiwiZXZlbnRQYXJhbXMiLCJsb2dFdmVudCQxIiwic2V0Q29uc2VudCIsIl9yZWdpc3RlckNvbXBvbmVudCIsIkNvbXBvbmVudCIsImNvbnRhaW5lciIsImFuYWx5dGljc09wdGlvbnMiLCJnZXRQcm92aWRlciIsInJlYXNvbiIsInJlZ2lzdGVyVmVyc2lvbiIsIlBsYXRmb3JtTG9nZ2VyU2VydmljZUltcGwiLCJnZXRQbGF0Zm9ybUluZm9TdHJpbmciLCJnZXRQcm92aWRlcnMiLCJwcm92aWRlciIsImNvbXBvbmVudCIsImdldENvbXBvbmVudCIsImlzVmVyc2lvblNlcnZpY2VQcm92aWRlciIsImxpYnJhcnkiLCJsb2dTdHJpbmciLCJuYW1lJG8iLCJ2ZXJzaW9uJDEiLCJuYW1lJG4iLCJuYW1lJG0iLCJuYW1lJGwiLCJuYW1lJGsiLCJuYW1lJGoiLCJuYW1lJGkiLCJuYW1lJGgiLCJuYW1lJGciLCJuYW1lJGYiLCJuYW1lJGUiLCJuYW1lJGQiLCJuYW1lJGMiLCJuYW1lJGIiLCJuYW1lJGEiLCJuYW1lJDkiLCJuYW1lJDgiLCJuYW1lJDciLCJuYW1lJDYiLCJuYW1lJDUiLCJuYW1lJDQiLCJuYW1lJDMiLCJuYW1lJDIiLCJuYW1lJDEiLCJERUZBVUxUX0VOVFJZX05BTUUiLCJQTEFURk9STV9MT0dfU1RSSU5HIiwiX2FwcHMiLCJfY29tcG9uZW50cyIsIl9hZGRDb21wb25lbnQiLCJhZGRDb21wb25lbnQiLCJfYWRkT3JPdmVyd3JpdGVDb21wb25lbnQiLCJhZGRPck92ZXJ3cml0ZUNvbXBvbmVudCIsImNvbXBvbmVudE5hbWUiLCJoZWFydGJlYXRDb250cm9sbGVyIiwidHJpZ2dlckhlYXJ0YmVhdCIsIl9yZW1vdmVTZXJ2aWNlSW5zdGFuY2UiLCJpbnN0YW5jZUlkZW50aWZpZXIiLCJjbGVhckluc3RhbmNlIiwiX2NsZWFyQ29tcG9uZW50cyIsImNsZWFyIiwiRmlyZWJhc2VBcHBJbXBsIiwiX2lzRGVsZXRlZCIsIl9vcHRpb25zIiwiX2NvbmZpZyIsIl9uYW1lIiwiX2F1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsImF1dG9tYXRpY0RhdGFDb2xsZWN0aW9uRW5hYmxlZCIsIl9jb250YWluZXIiLCJjaGVja0Rlc3Ryb3llZCIsInZhbCIsImlzRGVsZXRlZCIsImFwcE5hbWUiLCJyYXdDb25maWciLCJleGlzdGluZ0FwcCIsIkNvbXBvbmVudENvbnRhaW5lciIsIm5ld0FwcCIsImdldEFwcHMiLCJmcm9tIiwiZGVsZXRlQXBwIiwiZGVsZXRlIiwibGlicmFyeUtleU9yTmFtZSIsInZhcmlhbnQiLCJsaWJyYXJ5TWlzbWF0Y2giLCJ2ZXJzaW9uTWlzbWF0Y2giLCJ3YXJuaW5nIiwib25Mb2ciLCJsb2dDYWxsYmFjayIsInNldFVzZXJMb2dIYW5kbGVyIiwic2V0TG9nTGV2ZWwiLCJsb2dMZXZlbCIsIkRCX05BTUUiLCJEQl9WRVJTSU9OIiwiU1RPUkVfTkFNRSIsImRiUHJvbWlzZSIsImdldERiUHJvbWlzZSIsIm9wZW5EQiIsInVwZ3JhZGUiLCJkYiIsIm9sZFZlcnNpb24iLCJjcmVhdGVPYmplY3RTdG9yZSIsIm9yaWdpbmFsRXJyb3JNZXNzYWdlIiwid3JpdGVIZWFydGJlYXRzVG9JbmRleGVkREIiLCJoZWFydGJlYXRPYmplY3QiLCJ0eCIsInRyYW5zYWN0aW9uIiwib2JqZWN0U3RvcmUiLCJwdXQiLCJjb21wdXRlS2V5IiwiZG9uZSIsImlkYkdldEVycm9yIiwiSGVhcnRiZWF0U2VydmljZUltcGwiLCJfaGVhcnRiZWF0c0NhY2hlIiwiX3N0b3JhZ2UiLCJIZWFydGJlYXRTdG9yYWdlSW1wbCIsIl9oZWFydGJlYXRzQ2FjaGVQcm9taXNlIiwicmVhZCIsImFnZW50IiwiZGF0ZSIsImdldFVUQ0RhdGVTdHJpbmciLCJsYXN0U2VudEhlYXJ0YmVhdERhdGUiLCJoZWFydGJlYXRzIiwic29tZSIsInNpbmdsZURhdGVIZWFydGJlYXQiLCJoYlRpbWVzdGFtcCIsInZhbHVlT2YiLCJvdmVyd3JpdGUiLCJnZXRIZWFydGJlYXRzSGVhZGVyIiwiaGVhcnRiZWF0c1RvU2VuZCIsInVuc2VudEVudHJpZXMiLCJoZWFydGJlYXRzQ2FjaGUiLCJtYXhTaXplIiwiaGVhcnRiZWF0RW50cnkiLCJoYiIsImRhdGVzIiwiY291bnRCeXRlcyIsInBvcCIsImV4dHJhY3RIZWFydGJlYXRzRm9ySGVhZGVyIiwiaGVhZGVyU3RyaW5nIiwidG9JU09TdHJpbmciLCJfY2FuVXNlSW5kZXhlZERCUHJvbWlzZSIsInJ1bkluZGV4ZWREQkVudmlyb25tZW50Q2hlY2siLCJyZWFkSGVhcnRiZWF0c0Zyb21JbmRleGVkREIiLCJoZWFydGJlYXRzT2JqZWN0IiwiZXhpc3RpbmdIZWFydGJlYXRzT2JqZWN0IiwiaW5zdGFuY2VGYWN0b3J5IiwibXVsdGlwbGVJbnN0YW5jZXMiLCJzZXJ2aWNlUHJvcHMiLCJpbnN0YW50aWF0aW9uTW9kZSIsIm9uSW5zdGFuY2VDcmVhdGVkIiwic2V0SW5zdGFudGlhdGlvbk1vZGUiLCJtb2RlIiwic2V0TXVsdGlwbGVJbnN0YW5jZXMiLCJzZXRTZXJ2aWNlUHJvcHMiLCJwcm9wcyIsInNldEluc3RhbmNlQ3JlYXRlZENhbGxiYWNrIiwiUHJvdmlkZXIiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZXNEZWZlcnJlZCIsImluc3RhbmNlc09wdGlvbnMiLCJvbkluaXRDYWxsYmFja3MiLCJpZGVudGlmaWVyIiwibm9ybWFsaXplZElkZW50aWZpZXIiLCJub3JtYWxpemVJbnN0YW5jZUlkZW50aWZpZXIiLCJkZWZlcnJlZCIsInNob3VsZEF1dG9Jbml0aWFsaXplIiwiZ2V0T3JJbml0aWFsaXplU2VydmljZSIsInNldENvbXBvbmVudCIsImlzQ29tcG9uZW50RWFnZXIiLCJpbnN0YW5jZURlZmVycmVkIiwic2VydmljZXMiLCJJTlRFUk5BTCIsImlzQ29tcG9uZW50U2V0Iiwib3B0cyIsIm9uSW5pdCIsImV4aXN0aW5nQ2FsbGJhY2tzIiwiU2V0IiwiaW52b2tlT25Jbml0Q2FsbGJhY2tzIiwiY2FsbGJhY2tzIiwicHJvdmlkZXJzIiwiUEVORElOR19USU1FT1VUX01TIiwiUEFDS0FHRV9WRVJTSU9OIiwiSU5URVJOQUxfQVVUSF9WRVJTSU9OIiwiSU5TVEFMTEFUSU9OU19BUElfVVJMIiwiVE9LRU5fRVhQSVJBVElPTl9CVUZGRVIiLCJFUlJPUl9ERVNDUklQVElPTl9NQVAiLCJpc1NlcnZlckVycm9yIiwiZ2V0SW5zdGFsbGF0aW9uc0VuZHBvaW50IiwiZXh0cmFjdEF1dGhUb2tlbkluZm9Gcm9tUmVzcG9uc2UiLCJyZXF1ZXN0U3RhdHVzIiwiZXhwaXJlc0luIiwicmVzcG9uc2VFeHBpcmVzSW4iLCJjcmVhdGlvblRpbWUiLCJnZXRFcnJvckZyb21SZXNwb25zZSIsInJlcXVlc3ROYW1lIiwiZXJyb3JEYXRhIiwic2VydmVyQ29kZSIsInNlcnZlck1lc3NhZ2UiLCJzZXJ2ZXJTdGF0dXMiLCJnZXRIZWFkZXJzV2l0aEF1dGgiLCJhcHBDb25maWciLCJyZWZyZXNoVG9rZW4iLCJhcHBlbmQiLCJnZXRBdXRob3JpemF0aW9uSGVhZGVyIiwicmV0cnlJZlNlcnZlckVycm9yIiwic2xlZXAiLCJtcyIsIlZBTElEX0ZJRF9QQVRURVJOIiwiSU5WQUxJRF9GSUQiLCJnZW5lcmF0ZUZpZCIsImZpZEJ5dGVBcnJheSIsIlVpbnQ4QXJyYXkiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsImI2NFN0cmluZyIsImFycmF5Iiwic3Vic3RyIiwiZW5jb2RlIiwiZ2V0S2V5IiwiZmlkQ2hhbmdlQ2FsbGJhY2tzIiwiZmlkQ2hhbmdlZCIsImNhbGxGaWRDaGFuZ2VDYWxsYmFja3MiLCJjaGFubmVsIiwiZ2V0QnJvYWRjYXN0Q2hhbm5lbCIsInBvc3RNZXNzYWdlIiwiY2xvc2VCcm9hZGNhc3RDaGFubmVsIiwiYnJvYWRjYXN0RmlkQ2hhbmdlIiwiYnJvYWRjYXN0Q2hhbm5lbCIsIkJyb2FkY2FzdENoYW5uZWwiLCJvbm1lc3NhZ2UiLCJEQVRBQkFTRV9OQU1FIiwiREFUQUJBU0VfVkVSU0lPTiIsIk9CSkVDVF9TVE9SRV9OQU1FIiwib2xkVmFsdWUiLCJ1cGRhdGVGbiIsInN0b3JlIiwibmV3VmFsdWUiLCJnZXRJbnN0YWxsYXRpb25FbnRyeSIsInJlZ2lzdHJhdGlvblByb21pc2UiLCJpbnN0YWxsYXRpb25FbnRyeSIsIm9sZEVudHJ5IiwiZW50cnkiLCJyZWdpc3RyYXRpb25TdGF0dXMiLCJjbGVhclRpbWVkT3V0UmVxdWVzdCIsInVwZGF0ZU9yQ3JlYXRlSW5zdGFsbGF0aW9uRW50cnkiLCJlbnRyeVdpdGhQcm9taXNlIiwiaW5Qcm9ncmVzc0VudHJ5IiwicmVnaXN0cmF0aW9uVGltZSIsInJlZ2lzdGVyZWRJbnN0YWxsYXRpb25FbnRyeSIsImhlYXJ0YmVhdFNlcnZpY2VQcm92aWRlciIsImVuZHBvaW50IiwiaGVhcnRiZWF0U2VydmljZSIsImhlYXJ0YmVhdHNIZWFkZXIiLCJib2R5IiwiYXV0aFZlcnNpb24iLCJzZGtWZXJzaW9uIiwib2siLCJyZXNwb25zZVZhbHVlIiwiYXV0aFRva2VuIiwiY3JlYXRlSW5zdGFsbGF0aW9uUmVxdWVzdCIsInJlZ2lzdGVySW5zdGFsbGF0aW9uIiwid2FpdFVudGlsRmlkUmVnaXN0cmF0aW9uIiwidHJpZ2dlclJlZ2lzdHJhdGlvbklmTmVjZXNzYXJ5IiwidXBkYXRlSW5zdGFsbGF0aW9uUmVxdWVzdCIsImdlbmVyYXRlQXV0aFRva2VuUmVxdWVzdCIsImdldEdlbmVyYXRlQXV0aFRva2VuRW5kcG9pbnQiLCJpbnN0YWxsYXRpb24iLCJyZWZyZXNoQXV0aFRva2VuIiwiZm9yY2VSZWZyZXNoIiwidG9rZW5Qcm9taXNlIiwiaXNFbnRyeVJlZ2lzdGVyZWQiLCJvbGRBdXRoVG9rZW4iLCJpc0F1dGhUb2tlbkV4cGlyZWQiLCJpc0F1dGhUb2tlblZhbGlkIiwidXBkYXRlQXV0aFRva2VuUmVxdWVzdCIsIndhaXRVbnRpbEF1dGhUb2tlblJlcXVlc3QiLCJpblByb2dyZXNzQXV0aFRva2VuIiwicmVxdWVzdFRpbWUiLCJtYWtlQXV0aFRva2VuUmVxdWVzdEluUHJvZ3Jlc3NFbnRyeSIsInVwZGF0ZWRJbnN0YWxsYXRpb25FbnRyeSIsImZldGNoQXV0aFRva2VuRnJvbVNlcnZlciIsImluc3RhbGxhdGlvbnNJbXBsIiwiZ2V0VG9rZW4iLCJjb21wbGV0ZUluc3RhbGxhdGlvblJlZ2lzdHJhdGlvbiIsImRlbGV0ZUluc3RhbGxhdGlvblJlcXVlc3QiLCJnZXREZWxldGVFbmRwb2ludCIsImRlbGV0ZUluc3RhbGxhdGlvbnMiLCJvbklkQ2hhbmdlIiwiY2FsbGJhY2tTZXQiLCJhZGRDYWxsYmFjayIsInJlbW92ZUNhbGxiYWNrIiwiZ2V0SW5zdGFsbGF0aW9ucyIsImdldE1pc3NpbmdWYWx1ZUVycm9yIiwidmFsdWVOYW1lIiwiSU5TVEFMTEFUSU9OU19OQU1FIiwicHVibGljRmFjdG9yeSIsImNvbmZpZ0tleXMiLCJrZXlOYW1lIiwiZXh0cmFjdEFwcENvbmZpZyIsImludGVybmFsRmFjdG9yeSIsImJsb2NrZWQiLCJibG9ja2luZyIsInRlcm1pbmF0ZWQiLCJvcGVuUHJvbWlzZSIsInciLCJuZXdWZXJzaW9uIiwiZGVsZXRlREIiLCJyZWFkTWV0aG9kcyIsIndyaXRlTWV0aG9kcyIsImNhY2hlZE1ldGhvZHMiLCJnZXRNZXRob2QiLCJJREJEYXRhYmFzZSIsInRhcmdldEZ1bmNOYW1lIiwidXNlSW5kZXgiLCJpc1dyaXRlIiwiSURCSW5kZXgiLCJJREJPYmplY3RTdG9yZSIsInN0b3JlTmFtZSIsInNoaWZ0Iiwib2xkVHJhcHMiLCJyZWNlaXZlciIsImluc3RhbmNlT2ZBbnkiLCJvYmplY3QiLCJjb25zdHJ1Y3RvcnMiLCJpZGJQcm94eWFibGVUeXBlcyIsImN1cnNvckFkdmFuY2VNZXRob2RzIiwiY3Vyc29yUmVxdWVzdE1hcCIsIldlYWtNYXAiLCJ0cmFuc2FjdGlvbkRvbmVNYXAiLCJ0cmFuc2FjdGlvblN0b3JlTmFtZXNNYXAiLCJ0cmFuc2Zvcm1DYWNoZSIsInJldmVyc2VUcmFuc2Zvcm1DYWNoZSIsImlkYlByb3h5VHJhcHMiLCJJREJUcmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlTmFtZXMiLCJ3cmFwIiwicmVwbGFjZVRyYXBzIiwid3JhcEZ1bmN0aW9uIiwiZnVuYyIsIklEQkN1cnNvciIsImFkdmFuY2UiLCJjb250aW51ZSIsImNvbnRpbnVlUHJpbWFyeUtleSIsImFwcGx5IiwidW53cmFwIiwic3RvcmVOYW1lcyIsInRyYW5zZm9ybUNhY2hhYmxlVmFsdWUiLCJ1bmxpc3RlbiIsIkRPTUV4Y2VwdGlvbiIsImNhY2hlRG9uZVByb21pc2VGb3JUcmFuc2FjdGlvbiIsIlByb3h5IiwiSURCUmVxdWVzdCIsInN1Y2Nlc3MiLCJwcm9taXNpZnlSZXF1ZXN0IiwiTG9nTGV2ZWwiLCJsZXZlbFN0cmluZ1RvRW51bSIsIkRFQlVHIiwiVkVSQk9TRSIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJTSUxFTlQiLCJkZWZhdWx0TG9nTGV2ZWwiLCJDb25zb2xlTWV0aG9kIiwiZGVmYXVsdExvZ0hhbmRsZXIiLCJsb2dUeXBlIiwiX2xvZ0xldmVsIiwiX2xvZ0hhbmRsZXIiLCJfdXNlckxvZ0hhbmRsZXIiLCJUeXBlRXJyb3IiLCJsb2dIYW5kbGVyIiwidXNlckxvZ0hhbmRsZXIiLCJpbnN0IiwiY3VzdG9tTG9nTGV2ZWwiLCJhcmciLCJpZ25vcmVkIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsInBvcnQyIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydHkiLCJSZWZlcmVuY2VFcnJvciIsIm8iLCJzIiwiaCIsImwiLCJtIiwiX19wcm90b19fIiwicmVnaXN0ZXIiLCJpbW1lZGlhdGUiLCJzZXJ2aWNlV29ya2VyIiwiY29udHJvbGxlciIsIlAiLCJSIiwiQiIsIk8iLCJvbmNlIiwid2FpdGluZyIsInNjcmlwdFVSTCIsInN3Iiwid2FzV2FpdGluZ0JlZm9yZVJlZ2lzdGVyIiwiQyIsInJlYWR5U3RhdGUiLCJnZXRTVyIsIm1lc3NhZ2VTVyIsIkwiLCJtZXRhIiwiaW5zdGFsbGluZyIsInN0YXRlIiwiaXNVcGRhdGUiLCJEIiwiVCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmVyc2lvbkluZm9FbGVtZW50IiwiaXNfY2FjaGVkIiwicHJvZ3Jlc3NCYXIiLCJwcm9ncmVzc0JhckNvbnRhaW5lciIsInNjZW5lSGFuZGxlciIsImxvYWRpbmdFbGVtZW50IiwiZGF0YU1vZGFsIiwic3RhcnRTZXNzaW9uVGltZSIsImZlZWRCYWNrVGV4dEVsZW1lbnQiLCJpbml0aWFsaXplQ2FjaGVkRGF0YSIsImhhbmRsZVNlcnZpY2VXb3JrZXJNZXNzYWdlIiwiaGFuZGxlQmVmb3JlVW5sb2FkIiwiaGFuZGxlUmVzaXplIiwibG9hZEFuZENhY2hlRm9udCIsInByZWxvYWRHYW1lQXVkaW9zIiwiaGFuZGxlTG9hZGluZ1NjcmVlbiIsInNldHVwQ2FudmFzIiwiY3JlYXRlRGF0YU1vZGFsIiwiZ2xvYmFsSW5pdGlhbGl6YXRpb24iLCJsb2dTZXNzaW9uU3RhcnRGaXJlYmFzZUV2ZW50IiwiaGFuZGxlQ2FjaGVkU2NlbmFyaW8iLCJyZWdpc3Rlcldvcmtib3giLCJsb2FkVGl0bGVGZWVkYmFja0N1c3RvbUZvbnQiLCJjdXN0b21UaXRsZUZlZWRiYWNrRm9udCIsImZvbnRGYW1pbHkiLCJsYXN0U2Vzc2lvbkVuZFRpbWUiLCJwYXJzZWRUaW1lc3RhbXAiLCJpc05hTiIsInJvdW5kZWREYXlzU2luY2VMYXN0IiwicGFyc2VGbG9hdCIsInRvRml4ZWQiLCJzZXNzaW9uU3RhcnREYXRhIiwiZGF5c19zaW5jZV9sYXN0IiwibG9nU2Vzc2lvbkVuZEZpcmViYXNlRXZlbnQiLCJzZXNzaW9uRW5kRGF0YSIsInN0b3JlZERhdGEiLCJmb250TmFtZSIsImZvbnRQYXRoIiwiY2FjaGUiLCJjYWNoZXMiLCJmb250UmVzcG9uc2UiLCJmb250QmxvYiIsImJsb2IiLCJSZXNwb25zZSIsIkZvbnRGYWNlIiwibG9hZCIsImZvbnRzIiwid2IiLCJXb3JrYm94IiwicmVhZHkiLCJuZXdDb250ZW50RmlsZURhdGEiLCJhaGVhZENvbnRlbnRWZXJzaW9uIiwiY2FjaGVkVmVyc2lvbiIsImNhY2hlZEl0ZW0iLCJuZXdDYWNoZWRJdGVtIiwicmVtb3ZlSXRlbSIsImhhbmRsZVVwZGF0ZUZvdW5kTWVzc2FnZSIsImlubmVySGVpZ2h0IiwiaW5uZXJXaWR0aCIsIlJpZ2h0VG9MZWZ0IiwiYWJvdXRDb21wYW55IiwiZGVzY3JpcHRpb25UZXh0IiwidXBkYXRlVmVyc2lvbkluZm9FbGVtZW50IiwicmVpbml0aWFsaXplU2NlbmVIYW5kbGVyIiwicGFzc2luZ0RhdGFUb0NvbnRhaW5lciIsIkFuZHJvaWQiLCJjYWNoZWRTdGF0dXMiLCJzZXRDb250YWluZXJBcHBPcmllbnRhdGlvbiIsImNvbmZpcm0iLCJyZWxvYWQiLCJoYW5kbGVMb2FkaW5nTWVzc2FnZSIsInNob3dQcm9ncmVzc0JhciIsInByb2dyZXNzVmFsdWUiLCJpc0Rvd25sb2FkQ29tcGxldGVkIiwiY2FjaGVMYW5ndWFnZSIsInNlbmRDb21wbGV0aW9uRXZlbnQiLCJoaWRlTG9hZGluZ1NjcmVlbiIsImRvd25sb2FkQ29tcGxldGVkIiwiZ2V0SnNvblZlcnNpb25OdW1iZXIiLCJtc2ciLCJhdWRpb1VybHMiLCJwcmVsb2FkUHJvbWlzZXMiXSwic291cmNlUm9vdCI6IiJ9