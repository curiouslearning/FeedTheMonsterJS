/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var t={"./node_modules/@firebase/util/dist/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{CONSTANTS:()=>i,DecodeBase64StringError:()=>h,Deferred:()=>S,ErrorFactory:()=>z,FirebaseError:()=>N,MAX_VALUE_MILLIS:()=>vt,RANDOM_FACTOR:()=>wt,Sha1:()=>st,areCookiesEnabled:()=>M,assert:()=>n,assertionError:()=>a,async:()=>at,base64:()=>r,base64Decode:()=>d,base64Encode:()=>c,base64urlEncodeWithoutPadding:()=>l,calculateBackoffMillis:()=>bt,contains:()=>X,createMockUserToken:()=>I,createSubscribe:()=>it,decode:()=>H,deepCopy:()=>u,deepEqual:()=>q,deepExtend:()=>g,errorPrefix:()=>ht,extractQuerystring:()=>et,getDefaultAppConfig:()=>w,getDefaultEmulatorHost:()=>f,getDefaultEmulatorHostnameAndPort:()=>v,getDefaults:()=>p,getExperimentalSetting:()=>b,getGlobal:()=>m,getModularInstance:()=>It,getUA:()=>y,isAdmin:()=>V,isBrowser:()=>x,isBrowserExtension:()=>T,isElectron:()=>P,isEmpty:()=>$,isIE:()=>L,isIndexedDBAvailable:()=>B,isMobileCordova:()=>_,isNode:()=>E,isNodeSdk:()=>D,isReactNative:()=>C,isSafari:()=>k,isUWP:()=>A,isValidFormat:()=>G,isValidTimestamp:()=>j,issuedAtTime:()=>W,jsonEval:()=>R,map:()=>K,ordinal:()=>St,promiseWithTimeout:()=>Z,querystring:()=>Q,querystringDecode:()=>tt,safeGet:()=>Y,stringLength:()=>gt,stringToByteArray:()=>ut,stringify:()=>F,uuidv4:()=>mt,validateArgCount:()=>rt,validateCallback:()=>lt,validateContextObject:()=>dt,validateIndexedDBOpenable:()=>O,validateNamespace:()=>ct});const i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},n=function(t,e){if(!t)throw a(e)},a=function(t){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+t)},o=function(t){const e=[];let s=0;for(let i=0;i<t.length;i++){let n=t.charCodeAt(i);n<128?e[s++]=n:n<2048?(e[s++]=n>>6|192,e[s++]=63&n|128):55296==(64512&n)&&i+1<t.length&&56320==(64512&t.charCodeAt(i+1))?(n=65536+((1023&n)<<10)+(1023&t.charCodeAt(++i)),e[s++]=n>>18|240,e[s++]=n>>12&63|128,e[s++]=n>>6&63|128,e[s++]=63&n|128):(e[s++]=n>>12|224,e[s++]=n>>6&63|128,e[s++]=63&n|128)}return e},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();const s=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,i=[];for(let e=0;e<t.length;e+=3){const n=t[e],a=e+1<t.length,o=a?t[e+1]:0,r=e+2<t.length,h=r?t[e+2]:0,c=n>>2,l=(3&n)<<4|o>>4;let d=(15&o)<<2|h>>6,u=63&h;r||(u=64,a||(d=64)),i.push(s[c],s[l],s[d],s[u])}return i.join("")},encodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(o(t),e)},decodeString(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){const e=[];let s=0,i=0;for(;s<t.length;){const n=t[s++];if(n<128)e[i++]=String.fromCharCode(n);else if(n>191&&n<224){const a=t[s++];e[i++]=String.fromCharCode((31&n)<<6|63&a)}else if(n>239&&n<365){const a=((7&n)<<18|(63&t[s++])<<12|(63&t[s++])<<6|63&t[s++])-65536;e[i++]=String.fromCharCode(55296+(a>>10)),e[i++]=String.fromCharCode(56320+(1023&a))}else{const a=t[s++],o=t[s++];e[i++]=String.fromCharCode((15&n)<<12|(63&a)<<6|63&o)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray(t,e){this.init_();const s=e?this.charToByteMapWebSafe_:this.charToByteMap_,i=[];for(let e=0;e<t.length;){const n=s[t.charAt(e++)],a=e<t.length?s[t.charAt(e)]:0;++e;const o=e<t.length?s[t.charAt(e)]:64;++e;const r=e<t.length?s[t.charAt(e)]:64;if(++e,null==n||null==a||null==o||null==r)throw new h;const c=n<<2|a>>4;if(i.push(c),64!==o){const t=a<<4&240|o>>2;if(i.push(t),64!==r){const t=o<<6&192|r;i.push(t)}}}return i},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}};class h extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const c=function(t){const e=o(t);return r.encodeByteArray(e,!0)},l=function(t){return c(t).replace(/\./g,"")},d=function(t){try{return r.decodeString(t,!0)}catch(t){console.error("base64Decode failed: ",t)}return null};function u(t){return g(void 0,t)}function g(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(const s in e)e.hasOwnProperty(s)&&"__proto__"!==s&&(t[s]=g(t[s],e[s]));return t}function m(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==s.g)return s.g;throw new Error("Unable to locate global object.")}const p=()=>{try{return m().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const t=process.env.__FIREBASE_DEFAULTS__;return t?JSON.parse(t):void 0})()||(()=>{if("undefined"==typeof document)return;let t;try{t=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(t){return}const e=t&&d(t[1]);return e&&JSON.parse(e)})()}catch(t){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${t}`)}},f=t=>{var e,s;return null===(s=null===(e=p())||void 0===e?void 0:e.emulatorHosts)||void 0===s?void 0:s[t]},v=t=>{const e=f(t);if(!e)return;const s=e.lastIndexOf(":");if(s<=0||s+1===e.length)throw new Error(`Invalid host ${e} with no separate hostname and port!`);const i=parseInt(e.substring(s+1),10);return"["===e[0]?[e.substring(1,s-1),i]:[e.substring(0,s),i]},w=()=>{var t;return null===(t=p())||void 0===t?void 0:t.config},b=t=>{var e;return null===(e=p())||void 0===e?void 0:e[`_${t}`]};class S{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,s)=>{e?this.reject(e):this.resolve(s),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,s))}}}function I(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const s=e||"demo-project",i=t.iat||0,n=t.sub||t.user_id;if(!n)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${s}`,aud:s,iat:i,exp:i+3600,auth_time:i,sub:n,user_id:n,firebase:{sign_in_provider:"custom",identities:{}}},t);return[l(JSON.stringify({alg:"none",type:"JWT"})),l(JSON.stringify(a)),""].join(".")}function y(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function _(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(y())}function E(){var t;const e=null===(t=p())||void 0===t?void 0:t.forceEnvironment;if("node"===e)return!0;if("browser"===e)return!1;try{return"[object process]"===Object.prototype.toString.call(s.g.process)}catch(t){return!1}}function x(){return"object"==typeof self&&self.self===self}function T(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function C(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function P(){return y().indexOf("Electron/")>=0}function L(){const t=y();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function A(){return y().indexOf("MSAppHost/")>=0}function D(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN}function k(){return!E()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function B(){try{return"object"==typeof indexedDB}catch(t){return!1}}function O(){return new Promise(((t,e)=>{try{let s=!0;const i="validate-browser-context-for-indexeddb-analytics-module",n=self.indexedDB.open(i);n.onsuccess=()=>{n.result.close(),s||self.indexedDB.deleteDatabase(i),t(!0)},n.onupgradeneeded=()=>{s=!1},n.onerror=()=>{var t;e((null===(t=n.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function M(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class N extends Error{constructor(t,e,s){super(e),this.code=t,this.customData=s,this.name="FirebaseError",Object.setPrototypeOf(this,N.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(t,e,s){this.service=t,this.serviceName=e,this.errors=s}create(t,...e){const s=e[0]||{},i=`${this.service}/${t}`,n=this.errors[t],a=n?function(t,e){return t.replace(U,((t,s)=>{const i=e[s];return null!=i?String(i):`<${s}?>`}))}(n,s):"Error",o=`${this.serviceName}: ${a} (${i}).`;return new N(i,o,s)}}const U=/\{\$([^}]+)}/g;function R(t){return JSON.parse(t)}function F(t){return JSON.stringify(t)}const H=function(t){let e={},s={},i={},n="";try{const a=t.split(".");e=R(d(a[0])||""),s=R(d(a[1])||""),n=a[2],i=s.d||{},delete s.d}catch(t){}return{header:e,claims:s,data:i,signature:n}},j=function(t){const e=H(t).claims,s=Math.floor((new Date).getTime()/1e3);let i=0,n=0;return"object"==typeof e&&(e.hasOwnProperty("nbf")?i=e.nbf:e.hasOwnProperty("iat")&&(i=e.iat),n=e.hasOwnProperty("exp")?e.exp:i+86400),!!s&&!!i&&!!n&&s>=i&&s<=n},W=function(t){const e=H(t).claims;return"object"==typeof e&&e.hasOwnProperty("iat")?e.iat:null},G=function(t){const e=H(t).claims;return!!e&&"object"==typeof e&&e.hasOwnProperty("iat")},V=function(t){const e=H(t).claims;return"object"==typeof e&&!0===e.admin};function X(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function Y(t,e){return Object.prototype.hasOwnProperty.call(t,e)?t[e]:void 0}function $(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}function K(t,e,s){const i={};for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&(i[n]=e.call(s,t[n],n,t));return i}function q(t,e){if(t===e)return!0;const s=Object.keys(t),i=Object.keys(e);for(const n of s){if(!i.includes(n))return!1;const s=t[n],a=e[n];if(J(s)&&J(a)){if(!q(s,a))return!1}else if(s!==a)return!1}for(const t of i)if(!s.includes(t))return!1;return!0}function J(t){return null!==t&&"object"==typeof t}function Z(t,e=2e3){const s=new S;return setTimeout((()=>s.reject("timeout!")),e),t.then(s.resolve,s.reject),s.promise}function Q(t){const e=[];for(const[s,i]of Object.entries(t))Array.isArray(i)?i.forEach((t=>{e.push(encodeURIComponent(s)+"="+encodeURIComponent(t))})):e.push(encodeURIComponent(s)+"="+encodeURIComponent(i));return e.length?"&"+e.join("&"):""}function tt(t){const e={};return t.replace(/^\?/,"").split("&").forEach((t=>{if(t){const[s,i]=t.split("=");e[decodeURIComponent(s)]=decodeURIComponent(i)}})),e}function et(t){const e=t.indexOf("?");if(!e)return"";const s=t.indexOf("#",e);return t.substring(e,s>0?s:void 0)}class st{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(t,e){e||(e=0);const s=this.W_;if("string"==typeof t)for(let i=0;i<16;i++)s[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(let i=0;i<16;i++)s[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(let t=16;t<80;t++){const e=s[t-3]^s[t-8]^s[t-14]^s[t-16];s[t]=4294967295&(e<<1|e>>>31)}let i,n,a=this.chain_[0],o=this.chain_[1],r=this.chain_[2],h=this.chain_[3],c=this.chain_[4];for(let t=0;t<80;t++){t<40?t<20?(i=h^o&(r^h),n=1518500249):(i=o^r^h,n=1859775393):t<60?(i=o&r|h&(o|r),n=2400959708):(i=o^r^h,n=3395469782);const e=(a<<5|a>>>27)+i+c+n+s[t]&4294967295;c=h,h=r,r=4294967295&(o<<30|o>>>2),o=a,a=e}this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+o&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+c&4294967295}update(t,e){if(null==t)return;void 0===e&&(e=t.length);const s=e-this.blockSize;let i=0;const n=this.buf_;let a=this.inbuf_;for(;i<e;){if(0===a)for(;i<=s;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(n[a]=t.charCodeAt(i),++a,++i,a===this.blockSize){this.compress_(n),a=0;break}}else for(;i<e;)if(n[a]=t[i],++a,++i,a===this.blockSize){this.compress_(n),a=0;break}}this.inbuf_=a,this.total_+=e}digest(){const t=[];let e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let t=this.blockSize-1;t>=56;t--)this.buf_[t]=255&e,e/=256;this.compress_(this.buf_);let s=0;for(let e=0;e<5;e++)for(let i=24;i>=0;i-=8)t[s]=this.chain_[e]>>i&255,++s;return t}}function it(t,e){const s=new nt(t,e);return s.subscribe.bind(s)}class nt{constructor(t,e){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((()=>{t(this)})).catch((t=>{this.error(t)}))}next(t){this.forEachObserver((e=>{e.next(t)}))}error(t){this.forEachObserver((e=>{e.error(t)})),this.close(t)}complete(){this.forEachObserver((t=>{t.complete()})),this.close()}subscribe(t,e,s){let i;if(void 0===t&&void 0===e&&void 0===s)throw new Error("Missing Observer.");i=function(t,e){if("object"!=typeof t||null===t)return!1;for(const s of e)if(s in t&&"function"==typeof t[s])return!0;return!1}(t,["next","error","complete"])?t:{next:t,error:e,complete:s},void 0===i.next&&(i.next=ot),void 0===i.error&&(i.error=ot),void 0===i.complete&&(i.complete=ot);const n=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?i.error(this.finalError):i.complete()}catch(t){}})),this.observers.push(i),n}unsubscribeOne(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(t){if(!this.finalized)for(let e=0;e<this.observers.length;e++)this.sendOne(e,t)}sendOne(t,e){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[t])try{e(this.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))}close(t){this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function at(t,e){return(...s)=>{Promise.resolve(!0).then((()=>{t(...s)})).catch((t=>{e&&e(t)}))}}function ot(){}const rt=function(t,e,s,i){let n;if(i<e?n="at least "+e:i>s&&(n=0===s?"none":"no more than "+s),n){throw new Error(t+" failed: Was called with "+i+(1===i?" argument.":" arguments.")+" Expects "+n+".")}};function ht(t,e){return`${t} failed: ${e} argument `}function ct(t,e,s){if((!s||e)&&"string"!=typeof e)throw new Error(ht(t,"namespace")+"must be a valid firebase namespace.")}function lt(t,e,s,i){if((!i||s)&&"function"!=typeof s)throw new Error(ht(t,e)+"must be a valid function.")}function dt(t,e,s,i){if((!i||s)&&("object"!=typeof s||null===s))throw new Error(ht(t,e)+"must be a valid context object.")}const ut=function(t){const e=[];let s=0;for(let i=0;i<t.length;i++){let a=t.charCodeAt(i);if(a>=55296&&a<=56319){const e=a-55296;i++,n(i<t.length,"Surrogate pair missing trail surrogate.");a=65536+(e<<10)+(t.charCodeAt(i)-56320)}a<128?e[s++]=a:a<2048?(e[s++]=a>>6|192,e[s++]=63&a|128):a<65536?(e[s++]=a>>12|224,e[s++]=a>>6&63|128,e[s++]=63&a|128):(e[s++]=a>>18|240,e[s++]=a>>12&63|128,e[s++]=a>>6&63|128,e[s++]=63&a|128)}return e},gt=function(t){let e=0;for(let s=0;s<t.length;s++){const i=t.charCodeAt(s);i<128?e++:i<2048?e+=2:i>=55296&&i<=56319?(e+=4,s++):e+=3}return e},mt=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(t=>{const e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))},pt=1e3,ft=2,vt=144e5,wt=.5;function bt(t,e=pt,s=ft){const i=e*Math.pow(s,t),n=Math.round(wt*i*(Math.random()-.5)*2);return Math.min(vt,i+n)}function St(t){return Number.isFinite(t)?t+function(t){t=Math.abs(t);const e=t%100;if(e>=10&&e<=20)return"th";const s=t%10;if(1===s)return"st";if(2===s)return"nd";if(3===s)return"rd";return"th"}(t):`${t}`}function It(t){return t&&t._delegate?t._delegate:t}},"./src/Firebase/base-firebase-integration.ts":(t,e,s)=>{s.r(e),s.d(e,{BaseFirebaseIntegration:()=>o});var i=s("./node_modules/firebase/app/dist/esm/index.esm.js"),n=s("./node_modules/firebase/analytics/dist/esm/index.esm.js"),a=s("./src/Firebase/firebase-config.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(t,e){try{(0,n.logEvent)(this.analytics,t,e)}catch(t){console.error("Error while logging custom event:",t)}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,n.logEvent)(this.analytics,"session_end")}catch(t){console.error("Error while logging session_end event:",t)}}initializeFirebase(){try{this.firebaseApp=(0,i.initializeApp)(a.firebaseConfig),this.analytics=(0,n.getAnalytics)(this.firebaseApp)}catch(t){console.error("Error while initializing Firebase:",t)}}}},"./src/Firebase/firebase-config.ts":(t,e,s)=>{s.r(e),s.d(e,{firebaseConfig:()=>i});const i={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(t,e,s)=>{s.r(e),s.d(e,{FirebaseIntegration:()=>n});var i=s("./src/Firebase/base-firebase-integration.ts");class n extends i.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return n.instance||(n.instance=new n),n.instance}sendSessionStartEvent(t){this.customEvents("session_start",t)}sendSessionEndEvent(t){this.customEvents("session_end",t)}sendSelectedLevelEvent(t){this.customEvents("selected_level",t)}sendTappedStartEvent(t){this.customEvents("tapped_start",t)}sendPuzzleCompletedEvent(t){this.customEvents("puzzle_completed",t)}sendLevelCompletedEvent(t){this.customEvents("level_completed",t)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(t){this.customEvents("download_completed",t)}}},"./src/common/event-names.ts":(t,e,s)=>{s.r(e),s.d(e,{CLICK:()=>d,LOADPUZZLE:()=>i,MOUSEDOWN:()=>o,MOUSEMOVE:()=>a,MOUSEUP:()=>r,STONEDROP:()=>n,TOUCHEND:()=>l,TOUCHMOVE:()=>c,TOUCHSTART:()=>h,VISIBILITY_CHANGE:()=>u});const i="loadpuzzle",n="stonesdropped",a="mousemove",o="mousedown",r="mouseup",h="touchstart",c="touchmove",l="touchend",d="click",u="visibilitychange"},"./src/common/global-variables.ts":(t,e,s)=>{s.r(e),s.d(e,{Debugger:()=>c,font:()=>h,lang:()=>r,pseudoId:()=>o});var i=s("./src/constants/index.ts"),n=s("./src/common/index.ts");const a=new URLSearchParams(window.location.search);var o=a.get("cr_user_id"),r=null==a.get("cr_lang")?"english":a.get("cr_lang");const h=n.Utils.getLanguageSpecificFont(r),c={DevelopmentLink:!!window.location.href.includes(i.DevelopmentServer),DebugMode:!1};window.feedbackTextWorkerPath="./workers/feedback-text-worker.js"},"./src/common/index.ts":(t,e,s)=>{s.r(e),s.d(e,{CLICK:()=>o.CLICK,Debugger:()=>a.Debugger,LOADPUZZLE:()=>o.LOADPUZZLE,LevelConfig:()=>r.LevelConfig,MOUSEDOWN:()=>o.MOUSEDOWN,MOUSEMOVE:()=>o.MOUSEMOVE,MOUSEUP:()=>o.MOUSEUP,STONEDROP:()=>o.STONEDROP,StoneConfig:()=>i.StoneConfig,TOUCHEND:()=>o.TOUCHEND,TOUCHMOVE:()=>o.TOUCHMOVE,TOUCHSTART:()=>o.TOUCHSTART,Utils:()=>n.Utils,VISIBILITY_CHANGE:()=>o.VISIBILITY_CHANGE,createRippleEffect:()=>n.createRippleEffect,font:()=>a.font,lang:()=>a.lang,loadImages:()=>n.loadImages,pseudoId:()=>a.pseudoId,syncLoadingImages:()=>n.syncLoadingImages});var i=s("./src/common/stone-config.ts"),n=s("./src/common/utils.ts"),a=s("./src/common/global-variables.ts"),o=s("./src/common/event-names.ts"),r=s("./src/common/level-config.ts")},"./src/common/level-config.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelConfig:()=>n});var i=s("./src/constants/index.ts");class n{x;y;index;drawready;img;constructor(t,e,s){this.x=t,this.y=e,this.index=s,this.drawready=!1,this.img=new Image,this.img.src=i.MAP_ICON,this.img.onload=function(){}}}},"./src/common/stone-config.ts":(t,e,s)=>{s.r(e),s.d(e,{StoneConfig:()=>n});var i=s("./src/common/index.ts");class n{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(t,e,s,i,n,a,o,r,h){this.x=n,this.y=a,this.origx=n,this.origy=a,this.canvasWidth=e,this.canvasHeight=s,this.tutorialInstance=h,this.text=i,this.img=o,this.context=t,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(t,e,s,i)=>-s/2*(Math.cos(Math.PI*t/i)-1)+e;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);draw(t){this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,this.getX()-this.imageCenterOffsetX,this.getY()-this.imageCenterOffsetY,this.imageSize,this.imageSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(t,this.img,this.imageSize)}}},"./src/common/utils.ts":(t,e,s)=>{s.r(e),s.d(e,{Utils:()=>a,createRippleEffect:()=>o,loadImages:()=>r,syncLoadingImages:()=>h});var i=s("./src/common/index.ts"),n=s("./src/data/i18-font-mapping.ts");class a{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(t){return i.Debugger.DevelopmentLink?t.slice(0,t.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+t.slice(t.indexOf(this.UrlSubstring)+this.UrlSubstring.length):t}static getLanguageSpecificFont(t){const e=t.toLowerCase();for(const t in n.languageFontMapping)if(t.toLowerCase()===e)return n.languageFontMapping[t];return console.log(`Font not found for language: ${t}`),"NotoSans-Regular"}static getRandomNumber(t,e){return Math.floor(Math.random()*(e-t+1))+t}static getExcludedCoordinates(t,e){return{excludeX:t.width*(e/100),excludeY:t.height*(e/100)}}}function o(t){const e=t;if(!e)throw new Error("Canvas context is null");let s=0,i=0;let n=10,a=10;return function(t,o,r){r&&(n=0,a=0),s=t,i=o,e.beginPath(),e.arc(s,i,n,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),e.beginPath(),e.arc(s,i,a,0,2*Math.PI),e.strokeStyle="white",e.lineWidth=2,e.stroke(),e.closePath(),n+=.5,a+=.5,(n>=60||a>=60)&&(n=10,a=10)}}function r(t,e){const s={};let i=0;const n=Object.keys(t).length;for(let a in t)s[a]=new Image,s[a].onload=function(){++i>=n&&e(s)},s[a].src=t[a]}const h=async t=>{const e=Object.keys(t).map((async e=>{const s=await(async t=>{const e=new Image;return new Promise((s=>{e.onload=()=>s(e),e.src=t}))})(t[e]);return{[e]:s}}));return(await Promise.all(e)).reduce(((t,e)=>({...t,...e})),{})}},"./src/components/audio-player.ts":(t,e,s)=>{s.r(e),s.d(e,{AudioPlayer:()=>n});var i=s("./src/constants/index.ts");class n{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=a.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const t=i.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(t),n.audioBuffers.set(t,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(t){return void console.error("Error loading or decoding click sound:",t)}if(this.clickSoundBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.clickSoundBuffer,t.connect(this.audioContext.destination),t.start()}else console.error("Click sound buffer is not available.")}async loadAndDecodeAudio(t){return new Promise((async(e,s)=>{try{const s=await fetch(t),i=await s.arrayBuffer();e(await this.audioContext.decodeAudioData(i))}catch(t){console.error("Error loading or decoding audio:",t),s(t)}}))}async preloadPromptAudio(t){const e=await this.loadAndDecodeAudio(t);e&&(this.promptAudioBuffer=e)}async preloadGameAudio(t){if(n.audioBuffers.has(t))return;const e=await this.loadAndDecodeAudio(t);e&&n.audioBuffers.set(t,e)}playAudio(t){const e=n.audioBuffers.get(t);if(e){const t=this.audioContext.createBufferSource();t.buffer=e,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}}playFeedbackAudios=(t=!1,...e)=>{e.length>0&&(this.audioQueue=e,this.playFetch(0,t))};playPromptAudio=t=>{if(this.promptAudioBuffer){const t=this.audioContext.createBufferSource();t.buffer=this.promptAudioBuffer,t.connect(this.audioContext.destination),this.audioSourcs.push(t),t.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((t=>{t.stop()})),this.audioSourcs=[]};playFetch=(t,e)=>{t>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[t]&&fetch(this.audioQueue[t]).then((t=>t.arrayBuffer())).then((s=>{this.audioContext?.decodeAudioData(s,(s=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=s,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=e,this.sourceNode.onended=()=>this.handleAudioEnded(t,e),this.sourceNode.start()}))}))};handleAudioEnded=(t,e)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(t+1,e)}}class a{static instance=null;static getAudioContext(){return a.instance||(a.instance=new(window.AudioContext||window.webkitAudioContext)),a.instance}}},"./src/components/background.ts":(t,e,s)=>{s.r(e),s.d(e,{Background:()=>o});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts"),a={bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.ASSETS_PATH_HILL,pillerImg:n.ASSETS_PATH_TOTEM,fenchImg:n.ASSETS_PATH_FENCE,autumnBgImg:n.AUTUMN_BACKGROUND_1,autumnHillImg:n.AUTUMN_HILL_1,autumnPillerImg:n.AUTUMN_PILLAR_1,autumnSignImg:n.AUTUMN_SIGN_1,autumnFenceImg:n.AUTUMN_FENCE_1,winterBgImg:n.WINTER_BACKGROUND_1,winterHillImg:n.WINTER_HILL_1,winterSignImg:n.WINTER_SIGN_1,winterFenceImg:n.WINTER_FENCE_1,winterPillerImg:n.WINTER_PILLAR_1};class o{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(t,e,s,n){this.width=e,this.height=s,this.context=t,this.levelNumber=n,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,i.loadImages)(a,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;constructor(t,e){this.posX=.1*e.width+.15*e.width/2,this.posY=.2*e.height,this.context=t,this.canvas=e,this.cancel_button_image=new Image,this.cancel_button_image.src=i.CANCEL_BUTTON,this.cancel_button_image.onload=t=>{this.imagesLoaded=!0,this.cancel_button_image=this.cancel_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.cancel_button_image,this.posX,this.posY,.15*this.canvas.width,.15*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/close-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;constructor(t,e,s,n){this.posX=s,this.posY=n,this.context=t,this.canvas=e,this.close_button_image=new Image,this.close_button_image.src=i.CLOSE_BUTTON,this.close_button_image.onload=t=>{this.imagesLoaded=!0,this.close_button_image=this.close_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.close_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/index.ts":(t,e,s)=>{s.r(e),s.d(e,{CancelButton:()=>n.default,CloseButton:()=>i.default,NextButton:()=>a.default,NoButton:()=>o.default,PauseButton:()=>r.default,PlayButton:()=>l.default,RetryButton:()=>h.default,YesButton:()=>c.default});var i=s("./src/components/buttons/close-button.ts"),n=s("./src/components/buttons/cancel-button.ts"),a=s("./src/components/buttons/next-button.ts"),o=s("./src/components/buttons/no-button.ts"),r=s("./src/components/buttons/pause-button.ts"),h=s("./src/components/buttons/retry-button.ts"),c=s("./src/components/buttons/yes-button.ts"),l=s("./src/components/buttons/play-button.ts")},"./src/components/buttons/next-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;constructor(t,e,s,n,a){this.posX=n,this.posY=a,this.context=t,this.width=e,this.height=s,this.next_button_image=new Image,this.next_button_image.src=i.NEXT_BUTTON,this.next_button_image.onload=t=>{this.imagesLoaded=!0,this.next_button_image=this.next_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.next_button_image,this.posX,this.posY,.19*this.width,.19*this.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.width/2)*(t-this.posX-.19*this.width/2)+(e-this.posY-.19*this.width/2)*(e-this.posY-.19*this.width/2))<.19*this.width/2)return!0}}},"./src/components/buttons/no-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;constructor(t,e,s,n){this.posX=s,this.posY=n,this.context=t,this.canvas=e,this.no_button_image=new Image,this.no_button_image.src=i.NO_BUTTON,this.no_button_image.onload=t=>{this.imagesLoaded=!0,this.no_button_image=this.no_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.no_button_image,this.posX+5,this.posY+10,.18*this.canvas.width,.18*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/buttons/pause-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;constructor(t,e){this.posX=e.width-.09*e.height,this.posY=0,this.context=t,this.canvas=e,this.pause_button_image=new Image,this.pause_button_image.src=i.PAUSE_BUTTON,this.pause_button_image.onload=t=>{this.imagesLoaded=!0,this.pause_button_image=this.pause_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.pause_button_image,this.posX,this.posY,.09*this.canvas.height,.09*this.canvas.height)}onClick(t,e){if(Math.sqrt((t-this.posX-.09*this.canvas.height/2)*(t-this.posX-.09*this.canvas.height/2)+(e-this.posY-.09*this.canvas.height/2)*(e-this.posY-.09*this.canvas.height/2))<.09*this.canvas.height/2)return!0}}},"./src/components/buttons/play-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/constants/index.ts"),n=s("./src/Firebase/firebase-integration.ts"),a=s("./src/common/index.ts"),o=s("./src/data/index.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(t,e,s,o){this.posX=s,this.posY=o,this.context=t,this.canvas=e,this.firebaseIntegration=new n.FirebaseIntegration,this.init(),this.images={pause_button_image:i.PLAY_BUTTON},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}async init(){const t=await(0,o.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(t,e){const s=Math.sqrt((t-this.posX-this.canvas.width/6)*(t-this.posX-this.canvas.width/6)+(e-this.posY-this.canvas.width/6)*(e-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),s<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const t={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(t)}}},"./src/components/buttons/retry-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;constructor(t,e,s,n){this.posX=s,this.posY=n,this.context=t,this.canvas=e,this.retry_button_image=new Image,this.retry_button_image.src=i.RETRY_BUTTON,this.retry_button_image.onload=t=>{this.imagesLoaded=!0,this.retry_button_image=this.retry_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.retry_button_image,this.posX,this.posY,.19*this.canvas.width,.19*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.19*this.canvas.width/2)*(t-this.posX-.19*this.canvas.width/2)+(e-this.posY-.19*this.canvas.width/2)*(e-this.posY-.19*this.canvas.width/2))<.19*this.canvas.width/2)return!0}}},"./src/components/buttons/yes-button.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>n});var i=s("./src/constants/index.ts");class n{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;constructor(t,e,s,n){this.posX=s,this.posY=n,this.context=t,this.canvas=e,this.yes_button_image=new Image,this.yes_button_image.src=i.YES_BUTTON,this.yes_button_image.onload=t=>{this.imagesLoaded=!0,this.yes_button_image=this.yes_button_image}}draw(){this.imagesLoaded&&this.context.drawImage(this.yes_button_image,this.posX-5,this.posY,.2*this.canvas.width,.2*this.canvas.width)}onClick(t,e){if(Math.sqrt((t-this.posX-.15*this.canvas.width/2)*(t-this.posX-.15*this.canvas.width/2)+(e-this.posY-.15*this.canvas.width/2)*(e-this.posY-.15*this.canvas.width/2))<.15*this.canvas.width/2)return!0}}},"./src/components/feedback-particle-effect/feedback-text-effects.ts":(t,e,s)=>{s.r(e),s.d(e,{FeedbackTextEffects:()=>a});var i=s("./src/components/feedback-particle-effect/text-particle.ts"),n=s("./src/common/index.ts");class a{context;canvasWidth;canvasHeight;textX;textY;fontSize;lineHeight;maxTextWidth;particleDuration;startTime;particles;gap;mouse;textWorker;constructor(t,e,s){this.context=t,this.canvasWidth=e,this.canvasHeight=s,this.textX=this.canvasWidth/1.8,this.textY=this.canvasHeight/2,this.fontSize=this.canvasWidth/7.5,this.lineHeight=.8*this.fontSize,this.maxTextWidth=5*this.canvasWidth,this.particleDuration=5e3,this.startTime=null,this.particles=[],this.gap=3,this.mouse={radius:2e3,x:0,y:0},this.textWorker=new Worker(window.feedbackTextWorkerPath),this.textWorker.addEventListener("message",this.handleTextWorkerMessage.bind(this))}wrapText(t){const e=this.context.createLinearGradient(0,0,this.canvasWidth,this.canvasHeight);e.addColorStop(.3,"#F8E218"),e.addColorStop(.5,"#F8E218"),e.addColorStop(.7,"#E39D37"),this.context.fillStyle=e,this.context.textAlign="center",this.context.textBaseline="middle",this.context.lineWidth=3,this.context.strokeStyle="#A46225",this.context.font=`${this.fontSize-.3*t.length}px ${n.font}, monospace`;let s=[],i=t.split(" "),a=0,o="";for(let t=0;t<i.length;t++){let e=o+i[t]+" ";this.context.measureText(e).width>this.maxTextWidth?(o=i[t]+"",a++):o=e,s[a]=o}let r=this.lineHeight*a;this.textY=this.canvasHeight/4.2-r/2;t=t.trim(),s.forEach(((t,e)=>{let s=t.lastIndexOf(" ",t.lastIndexOf(" ")-1);if(this.fontSize*t.length>1.7*this.canvasWidth&&-1!=s){let i=t.slice(0,s),n=" "+t.slice(s+1);this.context.fillText(i,this.textX,this.textY+e*this.lineHeight),this.context.fillText(n,this.textX,this.textY+e*this.lineHeight+this.canvasHeight/12)}else this.context.fillText(t,this.textX,this.textY+e*this.lineHeight)})),this.convertToParticle()}handleTextWorkerMessage(t){this.particles=t.data.map((({x:t,y:e,color:s})=>new i.TextParticle(this,t,e,s)))}convertToParticle(){const t=this.context.getImageData(0,0,this.canvasWidth,this.canvasHeight);this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.textWorker.postMessage({canvasWidth:this.canvasWidth,canvasHeight:this.canvasHeight,gap:this.gap,pixels:t.data})}render(){this.context.clearRect(0,0,this.canvasWidth,this.canvasHeight),this.particles.forEach((t=>{t.draw(),t.update()}))}updateParticles(){this.textWorker.postMessage({particles:this.particles,particleDuration:this.particleDuration,startTime:this.startTime})}clearParticle(){this.particles=[]}unregisterEventListener(){this.textWorker.removeEventListener("message",this.handleTextWorkerMessage),this.textWorker.terminate()}}},"./src/components/feedback-particle-effect/text-particle.ts":(t,e,s)=>{s.r(e),s.d(e,{TextParticle:()=>i});class i{feedbackTextEffects;x;y;color;originX;originY;size;ease;constructor(t,e,s,i){this.feedbackTextEffects=t,this.x=Math.random()*this.feedbackTextEffects.canvasWidth,this.y=0,this.color=i,this.originX=e,this.originY=s,this.size=this.feedbackTextEffects.gap,this.ease=.1*Math.random()+.055}draw(){this.feedbackTextEffects.context.fillStyle=this.color,this.feedbackTextEffects.context.fillRect(this.x,this.y,this.size,this.size)}update(){this.x+=(this.originX-this.x)*this.ease,this.y+=this.originY-this.y}}},"./src/components/index.ts":(t,e,s)=>{s.r(e),s.d(e,{AudioPlayer:()=>u.AudioPlayer,Background:()=>l.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>n.LevelIndicators,Monster:()=>h.Monster,PauseButton:()=>i.default,PromptText:()=>a.PromptText,StoneHandler:()=>o.default,TimerTicking:()=>c.TimerTicking,TrailEffect:()=>g.default,Tutorial:()=>r.Tutorial});var i=s("./src/components/buttons/pause-button.ts"),n=s("./src/components/level-indicator.ts"),a=s("./src/components/prompt-text.ts"),o=s("./src/components/stone-handler.ts"),r=s("./src/components/tutorial.ts"),h=s("./src/components/monster.ts"),c=s("./src/components/timer-ticking.ts"),l=s("./src/components/background.ts"),d=s("./src/components/feedback-particle-effect/feedback-text-effects.ts"),u=s("./src/components/audio-player.ts"),g=s("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelIndicators:()=>o});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts"),a=s("./src/events/index.ts");class o extends a.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.activeIndicators=s,this.images={level_indicator:n.LEVEL_INDICATOR,bar_empty:n.BAR_EMPTY,bar_full:n.BAR_FULL},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}setIndicators(t){this.activeIndicators=t}addDropStoneEvent(){document.addEventListener("dropstone",(t=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var t=0;t<5;t++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(t=0;t<this.activeIndicators;t++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(t+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(t){}handleLoadPuzzle(t){this.setIndicators(t.detail.counter)}}},"./src/components/monster.ts":(t,e,s)=>{s.r(e),s.d(e,{Monster:()=>a});var i=s("./src/common/index.ts"),n=s("./src/events/index.ts");class a extends n.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.game=t,this.monsterPhase=e,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.changeToIdleAnimation(),this.imagesLoaded=!0,s&&s()}))}update(t){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=t,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(t){this.image.src=t}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(t){t.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(t){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(t,e){if(Math.sqrt((t-this.x-this.width/4)*(t-this.x-this.width/4)+(e-this.y-this.height/2.2)*(e-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h});var i=s("./src/components/buttons/index.ts"),n=s("./src/common/index.ts"),a=s("./src/components/index.ts"),o=s("./src/components/popups/sure-popup.ts"),r=s("./src/constants/index.ts");class h{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(t,e,s,n,h){this.canvas=t,this.callback=e,this.gameplayData=h,this.switchToLevelSelection=s,this.reloadScene=n;const c=document.getElementById("canvas");this.context=c.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.cancelButton=new i.CancelButton(this.context,this.canvas),this.retryButton=new i.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new i.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src=r.SURE_AND_PAUSE_POPUP,this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0},this.retrySurePopup=new o.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new o.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,a=t.clientY-s.top;this.cancelButton.onClick(i,a)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(i,a)&&("english"==n.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(i,a)&&("english"==n.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==n.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==n.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(r.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>r});var i=s("./src/common/index.ts"),n=s("./src/components/index.ts"),a=s("./src/components/buttons/index.ts"),o=s("./src/constants/index.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(t,e,s){this.canvas=t,this.yesCallback=e,this.noCallback=s,this.context=this.canvas.getContext("2d"),this.audioPlayer=new n.AudioPlayer,this.yesButton=new a.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new a.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.pop_up_image=new Image,this.pop_up_image.src=o.SURE_AND_PAUSE_POPUP,this.pop_up_image.onload=t=>{this.pop_up_image=this.pop_up_image,this.imagesLoaded=!0}}addListner=()=>{this.canvas.addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.yesButton.onClick(i,n)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(i,n)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(t,e,s)=>{s.r(e),s.d(e,{PromptText:()=>r});var i=s("./src/events/index.ts"),n=s("./src/common/index.ts"),a=s("./src/components/index.ts"),o=s("./src/constants/index.ts");class r extends i.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(t,e,s,i,o){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.levelData=i,this.rightToLeft=o,this.currentPromptText=s.prompt.promptText,this.currentPuzzleData=s,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new a.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=t=>{const e=document.getElementById("canvas");t.preventDefault();var s=e.getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;this.onClick(i,n)&&this.playSound()};getPromptAudioUrl=()=>n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(n.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(t,e){return Math.sqrt(t-this.width/3)<12&&Math.sqrt(e-this.height/5.5)<10}setCurrrentPuzzleData(t){this.currentPuzzleData=t,this.currentPromptText=t.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var t=this.width/2;const e=.26*this.height;this.context.textAlign="center";var s=this.calculateFont();const i=this.promptImageWidth,a=this.promptImageHeight;if(this.context.font=`${s}px ${n.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var o=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],t+this.context.measureText(o).width/2,e),this.context.fillStyle="black",this.context.fillText(o,t-this.context.measureText(this.targetStones[0]).width/2,e)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,a/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){t-=.5*this.context.measureText(this.currentPromptText).width;for(let s=this.targetStones.length-1;s>=0;s--)this.droppedStones>s||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[s],t,e)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[s],t,e)),t=t+this.context.measureText(this.targetStones[s]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,a/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const t=1.25*(this.width-i),e=.33*(this.height-a);this.context.drawImage(this.promptPlayButton,t,e,i/4,a/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,t,e)):this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.15,i/4,a/4)}drawOthers(){const t=this.currentPromptText.split(""),e=(this.width,.28*this.height),s=this.promptImageWidth,i=this.promptImageHeight;var a=this.calculateFont();this.context.font=`${a}px ${n.font}, monospace`;let o=this.width/2-this.context.measureText(this.currentPromptText).width/2,r=0;var h=this.currentPuzzleData.targetStones[0].split("");for(let n=0;n<t.length;n++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){h.includes(t[n])?(h=h.slice(1,h.length),this.context.fillStyle="red",this.context.fillText(t[n],o,e)):(this.context.fillStyle="black",this.context.fillText(t[n],o,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){this.droppedStones>n||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(t[n],o,e)):(this.context.fillStyle="red",this.context.fillText(t[n],o,e));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,e);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,e/1.25,s/4,i/4)}r=(this.context.measureText(t[n]).width+this.context.measureText(t[n+1]).width)/2,o+=r}}draw(t){if(this.updateScaling(),this.time=t<17?this.time+Math.floor(t):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const t=this.promptImageWidth*this.scale,e=this.promptImageHeight*this.scale,s=(this.width-t)/2,i=(this.height-e)/5;this.context.drawImage(this.prompt_image,s,i,t,e),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.droppedStones=0,this.currentPuzzleData=this.levelData.puzzles[t.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(t){this.droppedStones=t}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const t=this.loadImage(this.prompt_image,o.PROMPT_TEXT_BG),e=this.loadImage(this.promptPlayButton,o.PROMPT_PLAY_BUTTON);await Promise.all([t,e]),this.imagesLoaded=!0}loadImage(t,e){return new Promise(((s,i)=>{t.onload=()=>{s()},t.src=e,t.onerror=t=>{i(t)}}))}}},"./src/components/stone-handler.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>h});var i=s("./src/common/index.ts"),n=s("./src/events/index.ts"),a=s("./src/components/index.ts"),o=s("./src/data/index.ts"),r=s("./src/constants/index.ts");class h extends n.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==o.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(t,e,s,n,o,h){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.context=t,this.canvas=e,this.puzzleNumber=s,this.levelData=n,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(r.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(o),this.puzzleStartTime=new Date,this.tutorial=new a.Tutorial(t,e.width,e.height,s),this.stonebg=new Image,this.stonebg.src=r.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new a.AudioPlayer,this.stonebg.onload=t=>{this.createStones(this.stonebg)},this.audioPlayer=new a.AudioPlayer,this.timerTickingInstance=h,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(t){const e=this.getFoilStones();for(let s=0;s<e.length;s++)e[s]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[s]),this.foilStones.push(new i.StoneConfig(this.context,this.canvas.width,this.canvas.height,e[s],this.stonePos[s][0],this.stonePos[s][1],t,this.timerTickingInstance,s==e.length-1?this.tutorial:null))}draw(t){for(let e=0;e<this.foilStones.length;e++)this.foilStones[e].draw(t);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(t)}initializeStonePos(){let t=32;this.stonePos=[[this.canvas.width/5-t,this.canvas.height/1.9-t],[this.canvas.width/2-t,this.canvas.height/1.15-t],[this.canvas.width/3.5+this.canvas.width/2-t,this.canvas.height/1.2-t],[this.canvas.width/4-t,this.canvas.height/1.28-t],[this.canvas.width/7-t,this.canvas.height/1.5-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.9-t],[this.canvas.width/2.3+this.canvas.width/2.1-t,this.canvas.height/1.42-t],[this.canvas.width/6-t,this.canvas.height/1.1-t]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(t){this.currentPuzzleData=this.levelData.puzzles[t],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}isDroppedStoneCorrect(t){return t==this.correctTargetStone}handleStoneDrop(t){this.foilStones=[]}handleLoadPuzzle(t){this.foilStones=[],this.tutorial.setPuzzleNumber(t.detail.counter),this.puzzleNumber=t.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(t,e,s=!1){const i=s?t==this.correctTargetStone.substring(0,t.length):t==this.correctTargetStone;return this.processLetterDropFeedbackAudio(e,i,s,t),i}processLetterDropFeedbackAudio(t,e,s,i){if(e){(s?i===this.getCorrectTargetStone():e)?this.playCorrectAnswerFeedbackSound(t):this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,r.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?r.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((t=>{const e=this.currentPuzzleData.foilStones.indexOf(t);-1!==e&&this.currentPuzzleData.foilStones.splice(e,1)}));const t=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(t>8){const e=t-8;this.currentPuzzleData.foilStones.splice(0,e)}return this.currentPuzzleData.targetStones.forEach((t=>{this.currentPuzzleData.foilStones.push(t)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(t){return[t.fantastic,t.great,t.amazing]}setGamePause(t){this.isGamePaused=t}playCorrectAnswerFeedbackSound(t){const e=i.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(e),r.AUDIO_PATH_POINTS_ADD,i.Utils.getConvertedDevProdURL(this.feedbackAudios[t])),this.correctStoneAudio.play()}}},"./src/components/timer-ticking.ts":(t,e,s)=>{s.r(e),s.d(e,{TimerTicking:()=>r});var i=s("./src/common/index.ts"),n=s("./src/events/index.ts"),a=s("./src/components/index.ts"),o=s("./src/constants/index.ts");class r extends n.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(t,e,s){super({stoneDropCallbackHandler:t=>this.handleStoneDrop(t),loadPuzzleCallbackHandler:t=>this.handleLoadPuzzle(t)}),this.width=t,this.height=e,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=s,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new a.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:o.TIMER_EMPTY,rotating_clock:o.ROTATING_CLOCK,timer_full:o.TIMER_FULL},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(t){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*t),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(o.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(t){this.isStoneDropped=!0}handleLoadPuzzle(t){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});class i{canvas;ctx;particles;mouse;constructor(t){this.canvas=t,this.ctx=t.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0}}init(){this.draw()}draw(){this.drawTrail();let t=[];for(let e=0;e<this.particles.length;e++)this.particles[e].time<=this.particles[e].ttl&&t.push(this.particles[e]);this.particles=t}drawTrail(){for(let t=0;t<this.particles.length;t++)this.particles[t].update(),this.particles[t].draw()}addTrailParticlesOnMove(t,e){this.mouse.x=t,this.mouse.y=e,this.particles.push(new n(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class n{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(t,e){this.ctx=t,this.rgb=["rgb(255,255,255,255)","rgb(243,208,144,255)","rgb(229,170,100,255)"],this.start={x:e.x+this.getRandomInt(-5,5),y:e.y+this.getRandomInt(-5,5),size:1},this.end={x:this.start.x+this.getRandomInt(-10,10),y:this.start.y+this.getRandomInt(-20,20)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=45,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}update(){if(this.time<=this.ttl){const t=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(t)),this.x=this.x+.001*(this.end.x-this.x),this.y=this.y+.001*(this.end.y-this.y)}this.time++}draw(){this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(t,e){return Math.round(Math.random()*(e-t))+t}easeOutQuart(t){return 1-Math.pow(1-t,4)}}},"./src/components/tutorial.ts":(t,e,s)=>{s.r(e),s.d(e,{Tutorial:()=>o});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts"),a=s("./src/data/index.ts");class o{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(t,e,s,a){this.width=e,this.height=s,this.context=t,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=a>=0?a:null,this.tutorialImg=new Image,this.tutorialImg.src=n.TUTORIAL_HAND,this.drawRipple=(0,i.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(t){this.startx=t[0]-22,this.starty=t[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(t){this.endTutorial=t}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(t,e,s){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*t:this.x-this.absdx*t,this.y=this.dy>=0?this.y+this.absdy*t:this.y-this.absdy*t;const i=this.x-this.endx+this.absdx,n=this.y-this.endy+this.absdy;let a=100*Math.sqrt(i*i+n*n)/this.monsterStoneDifference;if(a<15)a>1?this.createHandScaleAnimation(t,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(a>80)this.createHandScaleAnimation(t,this.startx+15,this.starty+10,!1);else{let t=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(e,this.x,this.y+20,s,s),this.context.globalAlpha=t,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(t,e,s,i){this.totalTime+=Math.floor(t);const n=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),a=this.tutorialImg.width*n,o=this.tutorialImg.height*n;this.context.drawImage(this.tutorialImg,e,s,a,o),!i&&this.drawRipple(e+.02*this.width,s+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(t,e,s,i){const n=(s-e)/2,a=Math.PI/i;return e+n*Math.sin(a*t)}clickOnMonsterTutorial(t){if(this.shouldPlayMonsterClickTutorialAnimation()){const e=2e3,s=this.height/1.9+this.tutorialImg.height/.8,i=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let n;const a=this.endx;this.totalTime<e/2?(n=i+this.totalTime/(e/2)*(s-i),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.5,!0)):(n=s-(this.totalTime-e/2)/(e/2)*(s-i),this.drawRipple(a,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,a,n,this.tutorialImg.width,this.tutorialImg.height),n<=i&&(this.totalTime=0),this.totalTime+=t}}shouldPlayTutorial(){return a.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return a.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(t){this.puzzleNumber=t}setPlayMonsterClickAnimation(t){this.playMnstrClkTtrlAnim=t}}},"./src/compositions/background/index.ts":(t,e,s)=>{s.r(e),s.d(e,{BACKGROUND_ASSET_LIST:()=>a,autumBgDrawing:()=>c,createBackground:()=>o,defaultBgDrawing:()=>h,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>l});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts");const a={summer:{BG_GROUP_IMGS:n.DEFAULT_BG_GROUP_IMGS,draw:h},autumn:{BG_GROUP_IMGS:n.AUTUMN_BG_GROUP_IMGS,draw:c},winter:{BG_GROUP_IMGS:n.WINTER_BG_GROUP_IMGS,draw:l}};async function o(t,e,s,n,a){return{...{...a(t,e,s,{...await(0,i.syncLoadingImages)(n)})}}}const r=(t,e)=>{const s=Object.keys(e);let i=Math.floor(t/10)%s.length;return t>=30&&(i%=3),{...e[s[i]]}};function h(t,e,s,i){return{draw:()=>{t.drawImage(i?.DEFAULT_BACKGROUND_1,0,0,e,s),t.drawImage(i?.ASSETS_PATH_TOTEM,.6*e,s/6,e,s/2),t.drawImage(i?.ASSETS_PATH_FENCE,.4*-e,s/3,e,s/3),t.drawImage(i?.ASSETS_PATH_HILL,.25*-e,s/2,1.5*e,s/2)}}}function c(t,e,s,i){return{draw:()=>{t.drawImage(i.AUTUMN_BACKGROUND_1,0,0,e,s),t.drawImage(i.AUTUMN_PILLAR_1,.38*e,s/6,e/1.2,s/2),t.drawImage(i.AUTUMN_FENCE_1,.4*-e,s/4,e,s/2),t.drawImage(i.AUTUMN_HILL_1,.25*-e,s/2,1.5*e,s/2)}}}function l(t,e,s,i){return{draw:()=>{t.drawImage(i.WINTER_BACKGROUND_1,0,0,e,s),t.drawImage(i.WINTER_PILLAR_1,.38*e,s/6,e/1.2,s/2),t.drawImage(i.WINTER_FENCE_1,.4*-e,s/4,e,s/2),t.drawImage(i.WINTER_HILL_1,.25*-e,s/2,1.5*e,s/2)}}}function d(t,e,s,i){return{draw:()=>{t.drawImage(i?.LEVEL_SELECTION_BACKGROUND,0,0,e,s)}}}},"./src/constants/index.ts":(t,e,s)=>{s.r(e),s.d(e,{ASSETS_PATH_BG_01:()=>j,ASSETS_PATH_FENCE:()=>G,ASSETS_PATH_HILL:()=>W,ASSETS_PATH_MONSTER_IDLE:()=>V,ASSETS_PATH_STONE_PINK_BG:()=>F,ASSETS_PATH_TOTEM:()=>H,AUDIO_ARE_YOU_SURE:()=>O,AUDIO_INTRO:()=>N,AUDIO_LEVEL_LOSE:()=>z,AUDIO_LEVEL_WIN:()=>U,AUDIO_PATH_BTN_CLICK:()=>k,AUDIO_PATH_CHEERING_FUNC:()=>D,AUDIO_PATH_CORRECT_STONE:()=>A,AUDIO_PATH_EATS:()=>T,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>P,AUDIO_PATH_MONSTER_SPIT:()=>C,AUDIO_PATH_ON_DRAG:()=>B,AUDIO_PATH_POINTS_ADD:()=>L,AUDIO_TIMEOUT:()=>M,AUDIO_URL_PRELOAD:()=>R,AUTUMN_BACKGROUND_1:()=>Y,AUTUMN_BG_GROUP_IMGS:()=>Nt,AUTUMN_FENCE_1:()=>J,AUTUMN_HILL_1:()=>$,AUTUMN_PILLAR_1:()=>K,AUTUMN_SIGN_1:()=>q,BACK_BUTTON:()=>Tt,BAR_EMPTY:()=>vt,BAR_FULL:()=>wt,ButtonClick:()=>p,CANCEL_BUTTON:()=>at,CLOSE_BUTTON:()=>ot,CLOUD_6:()=>Dt,CLOUD_7:()=>kt,CLOUD_8:()=>Bt,DEFAULT_BACKGROUND_1:()=>X,DEFAULT_BG_GROUP_IMGS:()=>Mt,DevelopmentServer:()=>I,EndScene1:()=>x,FeedbackAudio:()=>u,FirebaseUserClicked:()=>i,FirebaseUserInstall:()=>n,GAMEPLAY_BG_GROUP_IMGS:()=>Ot,GameScene1:()=>E,IntroMusic:()=>g,IsCached:()=>l,LEVEL_INDICATOR:()=>ft,LEVEL_SELECTION_BACKGROUND:()=>it,LevelEndAudio:()=>b,LevelSelection1:()=>_,MAP_ICON:()=>nt,MAP_ICON_SPECIAL:()=>_t,MAP_LOCK:()=>Et,MonsterAudio:()=>d,NEXT_BUTTON:()=>rt,NO_BUTTON:()=>ht,NativePlayButton:()=>r,PAUSE_BUTTON:()=>ct,PIN_STAR_1:()=>Pt,PIN_STAR_2:()=>Lt,PIN_STAR_3:()=>At,PLAY_BUTTON:()=>gt,PROMPT_PLAY_BUTTON:()=>pt,PROMPT_TEXT_BG:()=>mt,PWAInstallStatus:()=>a,PhraseAudio:()=>w,PreviousPlayedLevel:()=>h,PromptAudio:()=>m,RETRY_BUTTON:()=>lt,ROTATING_CLOCK:()=>St,SCENE_NAME_GAME_PLAY:()=>Ft,SCENE_NAME_LEVEL_END:()=>Ht,SCENE_NAME_LEVEL_SELECT:()=>Rt,SCENE_NAME_START:()=>Ut,STAR:()=>xt,SURE_AND_PAUSE_POPUP:()=>ut,StartScene1:()=>y,StoneMusic:()=>v,StoreMonsterPhaseNumber:()=>c,TIMER_EMPTY:()=>bt,TIMER_FULL:()=>It,TUTORIAL_HAND:()=>yt,TimeOver:()=>f,UrlSubstring:()=>S,UserCancelled:()=>o,WINTER_BACKGROUND_1:()=>Z,WINTER_BG_GROUP_IMGS:()=>zt,WINTER_FENCE_1:()=>et,WINTER_HILL_1:()=>Q,WINTER_PILLAR_1:()=>st,WINTER_SIGN_1:()=>tt,WIN_BG:()=>Ct,YES_BUTTON:()=>dt});const i="user_clicked",n="user_installed",a="pwa_installed_status",o="user_cancel_installation",r="native_playbutton_clicked",h="storePreviousPlayedLevel",c="storeMonsterPhaseNumber",l="is_cached",d="monster_audio",u="feedback_audio",g="intro_music",m="prompt_audio",p="button_click",f="time_over",v="stone_music",w="phrase_audio",b="level_end_audio",S="/feedthemonster",I="https://feedthemonsterdev.curiouscontent.org",y="StartScene1",_="LevelSelection1",E="GameScene1",x="EndScene1",T="./assets/audios/Eat.mp3",C="./assets/audios/MonsterSpit.mp3",P="./assets/audios/Disapointed-05.mp3",L="assets/audios/PointsAdd.wav",A="assets/audios/CorrectStoneFinal.mp3",D=t=>`./assets/audios/Cheering-0${t}.mp3`,k="./assets/audios/ButtonClick.mp3",B="./assets/audios/onDrag.mp3",O="./assets/audios/are-you-sure.mp3",M="./assets/audios/timeout.mp3",N="./assets/audios/intro.mp3",z="./assets/audios/LevelLoseFanfare.mp3",U="./assets/audios/LevelWinFanfare.mp3",R=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],F="./assets/images/stone_pink.webp",H="./assets/images/Totem_v02_v01.webp",j="./assets/images/bg_v01.webp",W="./assets/images/hill_v01.webp",G="./assets/images/fence_v01.webp",V="./assets/images/idle4.png",X="./assets/images/bg_v01.webp",Y="./assets/images/Autumn_bg_v01.webp",$="./assets/images/Autumn_hill_v01.webp",K="./assets/images/Autumn_sign_v01.webp",q="./assets/images/Autumn_sign_v01.webp",J="./assets/images/Autumn_fence_v01.webp",Z="./assets/images/Winter_bg_01.webp",Q="./assets/images/Winter_hill_v01.webp",tt="./assets/images/Winter_sign_v01.webp",et="./assets/images/Winter_fence_v01.webp",st="./assets/images/Winter_sign_v01.webp",it="./assets/images/map.webp",nt="./assets/images/mapIcon.webp",at="./assets/images/close_btn.webp",ot="./assets/images/map_btn.webp",rt="./assets/images/next_btn.webp",ht="./assets/images/close_btn.webp",ct="./assets/images/pause_v01.webp",lt="./assets/images/retry_btn.webp",dt="./assets/images/confirm_btn.webp",ut="./assets/images/popup_bg_v01.webp",gt="./assets/images/Play_button.webp",mt="./assets/images/promptTextBg.webp",pt="./assets/images/promptPlayButton.webp",ft="./assets/images/levels_v01.webp",vt="./assets/images/bar_empty_v01.webp",wt="./assets/images/bar_full_v01.webp",bt="./assets/images/timer_empty.webp",St="./assets/images/timer.webp",It="./assets/images/timer_full.png",yt="./assets/images/tutorial_hand.webp",_t="./assets/images/map_icon_monster_level_v01.webp",Et="./assets/images/mapLock.webp",xt="./assets/images/star.webp",Tt="./assets/images/back_btn.webp",Ct="./assets/images/WIN_screen_bg.webp",Pt="./assets/images/pinStar1.webp",Lt="./assets/images/pinStar2.webp",At="./assets/images/pinStar3.webp",Dt="./assets/images/cloud_01.png",kt="./assets/images/cloud_02.png",Bt="./assets/images/cloud_03.png",Ot={ASSETS_PATH_TOTEM:H,DEFAULT_BACKGROUND_1:X,ASSETS_PATH_HILL:W,ASSETS_PATH_FENCE:G,ASSETS_PATH_MONSTER_IDLE:V},Mt={DEFAULT_BACKGROUND_1:X,ASSETS_PATH_HILL:W,ASSETS_PATH_TOTEM:H,ASSETS_PATH_FENCE:G},Nt={AUTUMN_BACKGROUND_1:Y,AUTUMN_HILL_1:$,AUTUMN_PILLAR_1:K,AUTUMN_SIGN_1:q,AUTUMN_FENCE_1:J},zt={WINTER_BACKGROUND_1:Z,WINTER_HILL_1:Q,WINTER_SIGN_1:tt,WINTER_FENCE_1:et,WINTER_PILLAR_1:st},Ut="StartScene",Rt="LevelSelection",Ft="GamePlay",Ht="LevelEnd"},"./src/data/api-data.ts":(t,e,s)=>{s.r(e),s.d(e,{URL:()=>n,getData:()=>o,getFtmData:()=>a});var i=s("./src/common/index.ts");const n="./lang/"+i.lang+"/ftm_"+i.lang+".json";function a(){return fetch(n,{method:"GET",headers:{"Content-Type":"application/json"}}).then((t=>t.json().then((t=>t))))}async function o(){return await a()}},"./src/data/data-modal.ts":(t,e,s)=>{s.r(e),s.d(e,{DataModal:()=>i,FeedbackAudios:()=>o,FeedbackTexts:()=>a,FoilStone:()=>c,LevelMeta:()=>u,Levels:()=>r,OtherAudios:()=>n,Prompt:()=>d,Puzzles:()=>h,TargetStone:()=>l});class i{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(t,e,s,i,r,h,c,l,d){this.title=t,this.otherAudios=new n(e),this.levels=this.getLevels(s),this.FeedbackTexts=new a(i),this.FeedbackAudios=new o(h),this.rightToLeft=r,this.majVersion=c,this.minVersion=l,this.version=d}getLevels(t){let e=[];for(let s=0;s<t.length;s++)e.push(new r(t[s]));return e}}class n{selctYourPlayer;watchMeGrow;areYouSure;constructor(t){this.selctYourPlayer=t["Select your player"],this.watchMeGrow=t["Watch me grow"],this.areYouSure=t["Are you sure"]}}class a{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class o{fantastic;great;amazing;constructor(t){t.length>=1&&(this.fantastic=t[0]),t.length>=2&&(this.great=t[1]),t.length>=3&&(this.amazing=t[2])}}class r{puzzles;levelMeta;levelNumber;constructor(t){this.puzzles=this.getPuzzleData(t),this.levelMeta=new u(t.LevelMeta),this.levelNumber=t.LevelNumber}getPuzzleData(t){let e=[];return t.Puzzles.map(((t,s)=>{e.push(new h(t))})),e}}class h{segmentNumber;prompt;foilStones;targetStones;constructor(t){this.segmentNumber=t.SegmentNumber,this.prompt=new d(t.prompt),this.foilStones=this.getFoilStones(t),this.targetStones=this.getTargetStones(t)}getFoilStones(t){let e=[];return t.foilstones.map(((t,s)=>{e.push(t.StoneText)})),e}getTargetStones(t){let e=[];return t.targetstones.map(((t,s)=>{e.push(t.StoneText)})),e}}class c{stoneText;constructor(t){this.stoneText=t}}class l{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(t){this.promptText=t.PromptText,this.promptAudio=t.PromptAudio}}class u{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(t){this.promptFadeOut=t.PromptFadeout,this.letterGroup=t.LetterGroup,this.levelNumber=t.LevelNumber,this.protoType=t.PromptType,this.levelType=t.LevelType}}},"./src/data/game-score.ts":(t,e,s)=>{s.r(e),s.d(e,{GameScore:()=>n});var i=s("./src/common/index.ts");class n{static currentlanguage=i.lang;static setGameLevelScore(t,e){let s=this.calculateStarCount(e),i={levelName:t.levelMeta.levelType,levelNumber:t.levelMeta.levelNumber,score:e,starCount:s};this.setTotalStarCount(s);let n=this.getAllGameLevelInfo(),a=-1;for(let t=0;t<n.length;t++)if(n[t].levelNumber===i.levelNumber){a=t;break}-1!==a&&i.score>n[a].score?n[a]=i:n.push(i),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(n))}static getAllGameLevelInfo(){const t=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==t?[]:JSON.parse(t)}static setTotalStarCount(t){let e=this.getTotalStarCount()+t;localStorage.setItem(this.currentlanguage+"totalStarCount",e)}static getTotalStarCount(){const t=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==t?0:parseInt(t)}static calculateStarCount(t){return 200==t?1:300==t||400==t?2:500==t?3:0}static getDatafromStorage(){return i.Debugger.DebugMode?JSON.parse(localStorage.getItem(i.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(i.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(t,e,s)=>{s.r(e),s.d(e,{languageFontMapping:()=>i});const i={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(t,e,s)=>{s.r(e),s.d(e,{DataModal:()=>n.DataModal,FeedbackAudios:()=>n.FeedbackAudios,FeedbackTexts:()=>n.FeedbackTexts,FoilStone:()=>n.FoilStone,GameScore:()=>a.GameScore,LevelMeta:()=>n.LevelMeta,Levels:()=>n.Levels,OtherAudios:()=>n.OtherAudios,Prompt:()=>n.Prompt,Puzzles:()=>n.Puzzles,TargetStone:()=>n.TargetStone,URL:()=>i.URL,getData:()=>i.getData,getFtmData:()=>i.getFtmData,languageFontMapping:()=>o.languageFontMapping});var i=s("./src/data/api-data.ts"),n=s("./src/data/data-modal.ts"),a=s("./src/data/game-score.ts"),o=s("./src/data/i18-font-mapping.ts")},"./src/events/index.ts":(t,e,s)=>{s.r(e),s.d(e,{EventManager:()=>n});var i=s("./src/common/index.ts");class n{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(t){this.handler=t,this.stoneDropCallbackHandler=t.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=t.loadPuzzleCallbackHandler,document.addEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=t=>{this.stoneDropCallbackHandler(t)};handleLoadPuzzleEvent=t=>{this.loadPuzzleCallbackHandler(t)};unregisterEventListener=()=>{document.removeEventListener(i.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(i.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/sceneHandler/index.ts":(t,e,s)=>{s.r(e),s.d(e,{SceneHandler:()=>r});var i=s("./src/scenes/index.ts"),n=s("./src/data/index.ts"),a=s("./src/common/index.ts"),o=s("./src/constants/index.ts");class r{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;pwa_install_status;toggleBtn;constructor(t,e){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new i.StartScene(t,e,this.switchSceneToLevelSelection),r.SceneName=o.StartScene1,this.loadingScreen=new i.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const t=e=>{this.animation(e),requestAnimationFrame(t)};requestAnimationFrame(t)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let t=n.GameScore.getTotalStarCount(),e=Math.floor(t/12)+1||1;return e<=4?e:4}animation=t=>{let e=t-this.lastTime;this.lastTime=t,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(e),r.SceneName===o.StartScene1?this.startScene.animation(e):r.SceneName===o.LevelSelection1?this.levelSelectionScene.drawLevelSelection():r.SceneName===o.GameScene1?this.gameplayScene.draw(e):r.SceneName===o.EndScene1&&this.levelEndScene.draw(e)};switchSceneToGameplay=(t,e)=>{this.showLoading(),this.dispose(e);let s=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new i.GameplayScene(this.canvas,t.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,t.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(o.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,s,this.data.FeedbackAudios),r.SceneName=o.GameScene1}),800)};switchSceneToEndLevel=(t,e,s,n)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(o.SCENE_NAME_GAME_PLAY),document.getElementById("feedback-text").style.zIndex="0",this.levelEndScene=new i.LevelEndScene(this.canvas,this.height,this.width,this.context,t,s,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,e),r.SceneName=o.EndScene1}),n?0:4e3)};switchSceneToLevelSelection=t=>{this.showLoading(),this.dispose(t),setTimeout((()=>{this.levelSelectionScene=new i.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),r.SceneName=o.LevelSelection1}),800)};dispose=t=>{t==o.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():t===o.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():t===o.SCENE_NAME_START?this.startScene.dispose():t==o.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(o.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{GameplayScene:()=>l});var i=s("./src/components/index.ts"),n=s("./src/components/popups/pause-popup.ts"),a=s("./src/common/index.ts"),o=s("./src/data/index.ts"),r=s("./src/Firebase/firebase-integration.ts"),h=s("./src/constants/index.ts"),c=s("./src/compositions/background/index.ts");class l{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;tempWordforWordPuzzle="";switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;constructor(t,e,s,o,c,l,d,u,g,m,p){this.width=t.width,this.height=t.height,this.rightToLeft=c,this.canvas=t,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new i.TrailEffect(t),this.monsterPhaseNumber=s||1,this.levelData=e,this.switchSceneToEnd=l,this.levelNumber=d,this.switchToLevelSelection=u,this.reloadScene=g,this.jsonVersionNumber=m,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new i.PauseButton(this.context,this.canvas),this.timerTicking=new i.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new i.StoneHandler(this.context,this.canvas,this.counter,this.levelData,p,this.timerTicking),this.tutorial=new i.Tutorial(this.context,t.width,t.height),this.promptText=new i.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new i.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new n.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:e,selectedLevelNumber:d}),this.firebaseIntegration=new r.FirebaseIntegration,this.feedBackTextCanavsElement=document.getElementById("feedback-text"),this.feedBackTextCanavsElement.height=this.height,this.feedBackTextCanavsElement.width=this.width,this.feedbackTextEffects=new i.FeedbackTextEffects(this.feedBackTextCanavsElement.getContext("2d",{willReadFrequently:!0}),this.width,this.height),this.audioPlayer=new i.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=e.puzzles,this.feedBackTexts=o,this.images={profileMonster:h.ASSETS_PATH_MONSTER_IDLE},(0,a.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}));var f=this.levelData.levelMeta.levelNumber;a.Debugger.DebugMode?localStorage.setItem(h.PreviousPlayedLevel+a.lang+"Debug",f):localStorage.setItem(h.PreviousPlayedLevel+a.lang,f),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,c.loadDynamicBgAssets)(this.levelData.levelNumber,c.BACKGROUND_ASSET_LIST);this.background=await(0,c.createBackground)(this.context,this.width,this.height,t,e)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(t){const e=Object.keys(this.feedBackTexts)[t];return this.feedBackTexts[e]}getRandomInt(t,e){const s=Object.values(this.feedBackTexts).filter((t=>null!=t)).length-1;return Math.floor(Math.random()*(s-t+1))+t}handleMouseUp=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;if(Math.sqrt((s-this.monster.x-this.canvas.width/4)**2+(i-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:t}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(t);break;case"Word":case"SoundWord":this.wordPuzzle(t,this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const t=50,e=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<t&&this.pickedStoneObject.origx<e?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.clickTrailToggle=!1};handleMouseDown=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;for(let t of this.stoneHandler.foilStones){if(Math.sqrt((s-t.x)**2+(i-t.y)**2)<=40){this.pickedStoneObject=t,this.pickedStone=t,this.audioPlayer.playAudio(h.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};handleMouseMove=t=>{if(this.pickedStone){let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;this.monster.changeToDragAnimation(),this.pickedStone.x=s,this.pickedStone.y=i,this.trailParticles?.addTrailParticlesOnMove(s,i)}else this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(t.clientX,t.clientY)};handleMouseClick=t=>{let e=this.canvas.getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;this.monster.onClick(s,i)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(s,i)&&this.promptText.playSound()};handleTouchStart=t=>{const e=t.touches[0];this.handleMouseDown({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=t=>{const e=t.touches[0];this.handleMouseMove({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.addTrailParticlesOnMove(e.clientX,e.clientY)};handleTouchEnd=t=>{const e=t.changedTouches[0];this.handleMouseUp({clientX:e.clientX,clientY:e.clientY}),this.trailParticles?.resetParticles()};draw(t){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+t,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(t),this.monster.update(t),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.stoneHandler.draw(t),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||(this.feedbackTextEffects.render(),0==this.counter&&this.tutorial.clickOnMonsterTutorial(t)),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.stoneHandler.draw(t)}addEventListeners(){this.handler.addEventListener(a.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(a.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(a.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(a.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(a.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(a.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(a.CLICK,this.handleMouseClick,!1),document.addEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(a.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=t=>{this.removeEventListeners(),this.stonesCount=1;const e=Boolean(t);if(e&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),o.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(o.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,e);else{const t=new CustomEvent(a.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(t)}),e?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.feedbackTextEffects.unregisterEventListener(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(a.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};letterPuzzle(t){const e=this.getRandomInt(0,1),s=this.stoneHandler.isStoneLetterDropCorrect(t,e);s&&this.handleCorrectStoneDrop(e),this.handleStoneDropEnd(s)}wordPuzzle(t,e){this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const s=this.getRandomInt(0,1);this.tempWordforWordPuzzle=this.tempWordforWordPuzzle+t;const i=this.stoneHandler.isStoneLetterDropCorrect(this.tempWordforWordPuzzle,s,!0);if(this.stoneHandler.getCorrectTargetStone()==this.tempWordforWordPuzzle&&i)return this.handleCorrectStoneDrop(s),this.handleStoneDropEnd(i,"Word"),void(this.stonesCount=1);i?(this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==a.lang?this.stonesCount:this.tempWordforWordPuzzle.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation()}),2e3)):(this.handleStoneDropEnd(i,"Word"),this.stonesCount=1)}resetToIdleAnimation(t,e){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(t,e)}handleStoneDropEnd(t,e=null){this.logPuzzleEndFirebaseEvent(t,e),this.dispatchStoneDropEvent(t),this.loadPuzzle()}handleCorrectStoneDrop=t=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(t)),this.feedBackTextCanavsElement.style.zIndex="2"};dispatchStoneDropEvent(t){const e=new CustomEvent(a.STONEDROP,{detail:{isCorrect:t}});document.dispatchEvent(e)}initNewPuzzle(t){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.tempWordforWordPuzzle="",this.pickedStone=null,this.feedbackTextEffects.clearParticle(),this.feedBackTextCanavsElement.style.zIndex="0",document.dispatchEvent(t),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime()}logPuzzleEndFirebaseEvent(t,e){let s=Date.now();const i={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:t?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==e?null==this.tempWordforWordPuzzle||null==this.tempWordforWordPuzzle?"TIMEOUT":this.tempWordforWordPuzzle:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(s-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let t=Date.now();const e={cr_user_id:a.pseudoId,ftm_language:a.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:o.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(t-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(e)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(t,e,s)=>{s.r(e),s.d(e,{GameplayScene:()=>i.GameplayScene,LevelEndScene:()=>a.LevelEndScene,LevelSelectionScreen:()=>n.LevelSelectionScreen,LoadingScene:()=>o.LoadingScene,StartScene:()=>r.StartScene,TestGameplayScene:()=>h.TestGameplayScene});var i=s("./src/scenes/gameplay-scene.ts"),n=s("./src/scenes/level-selection-scene.ts"),a=s("./src/scenes/levelend-scene.ts"),o=s("./src/scenes/loading-scene.ts"),r=s("./src/scenes/start-scene.ts"),h=s("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelSelectionScreen:()=>c});var i=s("./src/common/index.ts"),n=s("./src/components/index.ts"),a=s("./src/data/index.ts"),o=s("./src/Firebase/firebase-integration.ts"),r=s("./src/compositions/background/index.ts"),h=s("./src/constants/index.ts");class c{canvas;data;width;height;levelButtonPos;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height;let r=this;this.callBack=s,this.levelsSectionCount=r.data.levels.length/10>Math.floor(r.data.levels.length/10)?Math.floor(r.data.levels.length/10)+1:Math.floor(r.data.levels.length/10),this.initialiseButtonPos(),this.levels=[],this.firebaseIntegration=new o.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(this.levelButtonPos),this.gameLevelData=a.GameScore.getAllGameLevelInfo(),this.audioPlayer=new n.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(i.Debugger.DebugMode?localStorage.getItem(h.PreviousPlayedLevel+i.lang+"Debug"):localStorage.getItem(h.PreviousPlayedLevel+i.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={mapIcon:h.MAP_ICON,mapIconSpecial:h.MAP_ICON_SPECIAL,mapLock:h.MAP_LOCK,star:h.STAR,nextbtn:h.NEXT_BUTTON,backbtn:h.BACK_BUTTON},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(h.AUDIO_INTRO)})),this.addListeners()}async init(){const t=await(0,a.getData)();this.majVersion=t.majversion,this.minVersion=t.minversion}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:h.LEVEL_SELECTION_BACKGROUND},r.levelSelectBgDrawing)};initialiseButtonPos(){this.levelButtonPos=[[[this.canvas.width/10,this.canvas.height/10],[this.canvas.width/2.5,this.canvas.height/10],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/10],[this.canvas.width/10,this.canvas.height/3],[this.canvas.width/2.5,this.canvas.height/3],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/3],[this.canvas.width/10,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.8],[this.canvas.width/3+this.canvas.width/2.8,this.canvas.height/1.8],[this.canvas.width/2.5,this.canvas.height/1.3]]]}createLevelButtons(t){let e=t[0],s=0;for(let t=0;t<10;t++){let t=new i.LevelConfig(e[s][0],e[s][1],s+1);this.levels.push(t),s+=1}}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(h.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(t){return t.touches||t.originalEvent.touches}handleTouchStart=t=>{const e=this.getTouches(t)[0];this.xDown=e.clientX,this.yDown=e.clientY};handleTouchMove=t=>{if(!this.xDown||!this.yDown)return;let e=t.touches[0].clientX,s=t.touches[0].clientY,i=this.xDown-e,n=this.yDown-s;Math.abs(i)>Math.abs(n)&&(i>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=t=>{t.preventDefault();let e=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-e.left,n=t.clientY-e.top;s>=.7*this.canvas.width&&s<.7*this.canvas.width+this.canvas.height/10&&n>this.canvas.height/1.3&&n<this.canvas.height/1.3+this.canvas.height/10&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex))),s>=this.canvas.width/10&&s<this.canvas.width/10+this.canvas.height/10&&n>this.canvas.height/1.3&&n<this.canvas.height/1.3+this.canvas.height/10&&(this.audioPlayer.playButtonClickSound(),0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex));for(let t of this.levels)Math.sqrt((s-t.x-this.canvas.height/20)*(s-t.x-this.canvas.height/20)+(n-t.y-this.canvas.height/20)*(n-t.y-this.canvas.height/20))<45&&(i.Debugger.DebugMode||t.index+this.levelSelectionPageIndex-1<=this.unlockLevelIndex+1)&&(this.audioPlayer.playButtonClickSound(),this.levelNumber=t.index+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber))};drawLevel(t,e){let s=e.height/5,n=s/6;const a=[5,13,20,30,42];if(t.index+this.levelSelectionPageIndex<=this.data.levels.length){const e=t.index+this.levelSelectionPageIndex,o=a.includes(e);this.context.drawImage(o?this.loadedImages.mapIconSpecial:this.loadedImages.mapIcon,t.x,t.y,o?.9*s:s,o?.9*s:s),this.context.fillStyle="white",this.context.font=n+`px ${i.font}, monospace`,this.context.textAlign="center",this.context.fillText(t.index+this.levelSelectionPageIndex,t.x+s/3.5,t.y+s/3),this.context.font=n-s/30+`px ${i.font}, monospace`,i.Debugger.DebugMode&&this.context.fillText(this.data.levels[t.index+this.levelSelectionPageIndex-1].levelMeta.levelType,t.x+s/3.5,t.y+s/1.3)}}draw(){for(let t of this.levels)this.drawLevel(t,this.canvas)}downButton(t){let e=this.canvas.height/10;t!=10*this.levelsSectionCount-10&&this.context.drawImage(this.loadedImages.nextbtn,.7*this.canvas.width,this.canvas.height/1.3,e,e),0!=t&&this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/10,this.canvas.height/1.3,e,e)}drawStars(t){if(null!=t){if(null!=t.length)for(let e of t)this.unlockLevelIndex<parseInt(e.levelNumber)&&e.starCount>=2&&(this.unlockLevelIndex=parseInt(e.levelNumber));for(let e of this.levels)if(e.index+this.levelSelectionPageIndex<=this.data.levels.length){i.Debugger.DebugMode||e.index+this.levelSelectionPageIndex-1>this.unlockLevelIndex+1&&this.context.drawImage(this.loadedImages.mapLock,e.x,e.y,this.canvas.height/13,this.canvas.height/13);for(let s=0;s<t.length;s++)if(e.index-1+this.levelSelectionPageIndex==parseInt(t[s].levelNumber)){this.drawStar(e,this.canvas,t[s].starCount,this.context);break}}}}drawStar(t,e,s,i){let n=e.height/5;s>=1&&i.drawImage(this.loadedImages.star,t.x,t.y-.01*n,n/5,n/5),s>1&&i.drawImage(this.loadedImages.star,t.x+n/2.5,t.y-.01*n,n/5,n/5),3==s&&i.drawImage(this.loadedImages.star,t.x+n/5,t.y-.1*n,n/5,n/5)}startGame(t){this.dispose(),this.audioPlayer.stopAllAudios();const e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.logSelectedLevelEvent(),this.callBack(e,"LevelSelection")}logSelectedLevelEvent(){const t={cr_user_id:i.pseudoId,ftm_language:i.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(t)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex),this.drawStars(this.gameLevelData))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LevelEndScene:()=>h});var i=s("./src/common/index.ts"),n=s("./src/components/index.ts"),a=s("./src/components/buttons/index.ts"),o=s("./src/compositions/background/index.ts"),r=s("./src/constants/index.ts");class h{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;constructor(t,e,s,o,h,c,l,d,u,g){this.canvas=t,this.height=e,this.width=s,this.context=o,this.monster=new n.Monster(this.canvas,g,this.switchToReactionAnimation),this.switchToGameplayCB=l,this.switchToLevelSelectionCB=d,this.data=u,this.starDrawnCount=0,this.closeButton=new a.CloseButton(o,t,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new a.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new a.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new n.AudioPlayer,this.starCount=h,this.currentLevel=c,this.images={backgroundImg:r.WIN_BG,star1Img:r.PIN_STAR_1,star2Img:r.PIN_STAR_2,star3Img:r.PIN_STAR_3,winBackgroundImg:r.DEFAULT_BACKGROUND_1},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new n.AudioPlayer,this.setupBg()}setupBg=async()=>{const{BG_GROUP_IMGS:t,draw:e}=(0,o.loadDynamicBgAssets)(this.currentLevel,o.BACKGROUND_ASSET_LIST);this.background=await(0,o.createBackground)(this.context,this.width,this.height,t,e)};switchToReactionAnimation=()=>{this.starCount<=1?("visible"===document.visibilityState&&this.audioPlayer.playAudio(r.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):("visible"===document.visibilityState&&(this.audioPlayer.playAudio(r.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(r.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(t){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(t),this.closeButton.draw(),this.retryButton.draw(),this.starCount>=2&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((t=>setTimeout((()=>{this.starDrawnCount=t.count}),t.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(i.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=t=>{var e=document.getElementById("canvas").getBoundingClientRect();const s=t.clientX-e.left,i=t.clientY-e.top;if(this.closeButton.onClick(s,i)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(s,i)){this.audioPlayer.playButtonClickSound();let t={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(t,"LevelEnd")}if(this.nextButton.onClick(s,i)&&this.starCount>=2){this.audioPlayer.playButtonClickSound();let t=Number(this.currentLevel)+1,e={currentLevelData:{...this.data.levels[t],levelNumber:t},selectedLevelNumber:t};this.switchToGameplayCB(e,"LevelEnd")}};pauseAudios=()=>{"visible"===document.visibilityState?this.starCount>=2&&this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((t=>clearTimeout(t))),document.getElementById("canvas").removeEventListener(i.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{LoadingScene:()=>a});var i=s("./src/common/index.ts"),n=s("./src/constants/index.ts");class a{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(t,e,s){this.canvas=document.getElementById("loading"),this.canvas.height=e,this.canvas.width=t,this.height=e,this.width=t,this.removeLoading=s,this.context=this.canvas.getContext("2d"),this.images={cloud6:n.CLOUD_6,cloud7:n.CLOUD_7,cloud8:n.CLOUD_8},(0,i.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}draw(t){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*t,this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=t,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{StartScene:()=>c});var i=s("./src/components/index.ts"),n=s("./src/components/buttons/index.ts"),a=s("./src/common/index.ts"),o=s("./src/Firebase/firebase-integration.ts"),r=s("./src/compositions/background/index.ts"),h=s("./src/constants/index.ts");class c{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;titleFont;background;audioPlayer;toggleBtn;pwa_install_status;constructor(t,e,s){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new i.Monster(this.canvas,4),this.switchSceneToLevelSelection=s,this.audioPlayer=new i.AudioPlayer,this.pwa_status=localStorage.getItem(h.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg()}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,h.DEFAULT_BG_GROUP_IMGS,r.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(a.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(a.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))};animation=t=>{this.titleFont=this.getFontWidthOfTitle(),this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.context.font=`${this.titleFont}px ${a.font}, monospace`,this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText(this.data.title,.5*this.width,this.height/10),this.monster.update(t),this.playButton.draw()};createPlayButton(){this.playButton=new n.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(t){t.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=t=>{let e=this;const s=document.getElementById("canvas");t.preventDefault();var i=s.getBoundingClientRect();const n=t.clientX-i.left,r=t.clientY-i.top,{excludeX:c,excludeY:l}=a.Utils.getExcludedCoordinates(s,15);n<c&&r<l||(o.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",h.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),e.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}getFontWidthOfTitle(){return(this.width+200)/this.data.title.length}handlerInstallPrompt=t=>{t.preventDefault(),this.pwa_install_status=t,localStorage.setItem(h.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(t,e,s)=>{s.r(e),s.d(e,{TestGameplayScene:()=>c});var i=s("./src/constants/index.ts"),n=s("./src/components/index.ts"),a=s("./src/components/buttons/index.ts"),o=s("./src/common/index.ts");let r;const h=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(t=>{t.preventDefault(),r=t,localStorage.setItem(i.PWAInstallStatus,"false")}));class c{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(t,e,s,a){this.canvas=t,this.data=e,this.width=t.width,this.height=t.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new n.Monster(this.canvas,0),console.log(Date.now," ::: ",performance.now),this.switchSceneToLevelSelection=a,this.stoneHandler=new n.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new n.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new n.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new n.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(i.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=s,this.animation(0),this.images={pillerImg:i.ASSETS_PATH_TOTEM,bgImg:i.DEFAULT_BACKGROUND_1,hillImg:i.ASSETS_PATH_HILL,fenchImg:i.ASSETS_PATH_FENCE,profileMonster:i.ASSETS_PATH_MONSTER_IDLE},(0,o.loadImages)(this.images,(t=>{this.loadedImages=Object.assign({},t),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle(){h.addEventListener("click",(()=>{h.classList.toggle("on"),h.classList.contains("on")?(o.Debugger.DebugMode=!0,h.innerText="Dev"):(o.Debugger.DebugMode=!1,h.innerText="Dev")}))}handleMouseUp=t=>{let e=this;var s=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;Math.sqrt((i-e.monster.x-e.canvas.width/4)*(i-e.monster.x-e.canvas.width/4)+(n-e.monster.y-e.canvas.height/2.7)*(n-e.monster.y-e.canvas.height/2.7))<=60||e.monster.changeToIdleAnimation(),e.pickedStone=null};handleMouseDown=t=>{let e=this;var s=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;for(let t of e.stoneHandler.foilStones)Math.sqrt((i-t.x)*(i-t.x)+(n-t.y)*(n-t.y))<=40&&(this.pickedStone=t)};handleMouseMove=t=>{let e=this;var s=document.getElementById("canvas").getBoundingClientRect();const i=t.clientX-s.left,n=t.clientY-s.top;e.pickedStone&&(e.monster.changeToDragAnimation(),e.pickedStone.x=i,e.pickedStone.y=n)};animation=t=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(t),this.promptText.draw(t),this.stoneHandler.draw(t),this.levelIndicator.draw(),this.timerTicking.update(t))};draw(){}createPlayButton=()=>{this.playButton=new a.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(t){var e=t.touches[0],s=new MouseEvent("mousedown",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(s)}),!1),this.handler.addEventListener("touchmove",(function(t){var e=t.touches[0],s=new MouseEvent("mousemove",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(s)}),!1),this.handler.addEventListener("touchend",(function(t){var e=t.changedTouches[0],s=new MouseEvent("mouseup",{clientX:e.clientX,clientY:e.clientY});document.getElementById("canvas").dispatchEvent(s)}),!1)};handleMouseClick=t=>{let e=this;const s=document.getElementById("canvas");t.preventDefault();var n=s.getBoundingClientRect();const a=t.clientX-n.left,o=t.clientY-n.top;e.playButton.onClick(a,o)&&(e.firebase_analytics&&e.firebase_analytics.logEvent(i.FirebaseUserClicked,"click"),fbq("trackCustom",i.FirebaseUserClicked,{event:"click"}),h.style.display="none",e.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{getAnalytics:()=>j,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>W,isSupported:()=>G,logEvent:()=>J,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>Z,setCurrentScreen:()=>V,setDefaultEventParameters:()=>q,setUserId:()=>Y,setUserProperties:()=>$,settings:()=>F});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js");s("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",h="firebase_id",c="origin",l=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",u="https://www.googletagmanager.com/gtag/js",g=new n.Logger("@firebase/analytics"),m={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},p=new a.ErrorFactory("analytics","Analytics",m);function f(t){if(!t.startsWith(u)){const e=p.create("invalid-gtag-resource",{gtagURL:t});return g.warn(e.message),""}return t}function v(t){return Promise.all(t.map((t=>t.catch((t=>t)))))}function w(t,e){const s=function(t,e){let s;return window.trustedTypes&&(s=window.trustedTypes.createPolicy(t,e)),s}("firebase-js-sdk-policy",{createScriptURL:f}),i=document.createElement("script"),n=`${u}?l=${t}&id=${e}`;i.src=s?null==s?void 0:s.createScriptURL(n):n,i.async=!0,document.head.appendChild(i)}function b(t,e,s,i){return async function(n,...a){try{if("event"===n){const[i,n]=a;await async function(t,e,s,i,n){try{let a=[];if(n&&n.send_to){let t=n.send_to;Array.isArray(t)||(t=[t]);const i=await v(s);for(const s of t){const t=i.find((t=>t.measurementId===s)),n=t&&e[t.appId];if(!n){a=[];break}a.push(n)}}0===a.length&&(a=Object.values(e)),await Promise.all(a),t("event",i,n||{})}catch(t){g.error(t)}}(t,e,s,i,n)}else if("config"===n){const[n,o]=a;await async function(t,e,s,i,n,a){const o=i[n];try{if(o)await e[o];else{const t=(await v(s)).find((t=>t.measurementId===n));t&&await e[t.appId]}}catch(t){g.error(t)}t("config",n,a)}(t,e,s,i,n,o)}else if("consent"===n){const[e]=a;t("consent","update",e)}else if("get"===n){const[e,s,i]=a;t("get",e,s,i)}else if("set"===n){const[e]=a;t("set",e)}else t(n,...a)}catch(t){g.error(t)}}}const S=30;const I=new class{constructor(t={},e=1e3){this.throttleMetadata=t,this.intervalMillis=e}getThrottleMetadata(t){return this.throttleMetadata[t]}setThrottleMetadata(t,e){this.throttleMetadata[t]=e}deleteThrottleMetadata(t){delete this.throttleMetadata[t]}};function y(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}async function _(t,e=I,s){const{appId:i,apiKey:n,measurementId:a}=t.options;if(!i)throw p.create("no-app-id");if(!n){if(a)return{measurementId:a,appId:i};throw p.create("no-api-key")}const o=e.getThrottleMetadata(i)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new x;return setTimeout((async()=>{r.abort()}),void 0!==s?s:l),E({appId:i,apiKey:n,measurementId:a},o,r,e)}async function E(t,{throttleEndTimeMillis:e,backoffCount:s},i,n=I){var o;const{appId:r,measurementId:h}=t;try{await function(t,e){return new Promise(((s,i)=>{const n=Math.max(e-Date.now(),0),a=setTimeout(s,n);t.addEventListener((()=>{clearTimeout(a),i(p.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}(i,e)}catch(t){if(h)return g.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==t?void 0:t.message}]`),{appId:r,measurementId:h};throw t}try{const e=await async function(t){var e;const{appId:s,apiKey:i}=t,n={method:"GET",headers:y(i)},a=d.replace("{app-id}",s),o=await fetch(a,n);if(200!==o.status&&304!==o.status){let t="";try{const s=await o.json();(null===(e=s.error)||void 0===e?void 0:e.message)&&(t=s.error.message)}catch(t){}throw p.create("config-fetch-failed",{httpStatus:o.status,responseMessage:t})}return o.json()}(t);return n.deleteThrottleMetadata(r),e}catch(e){const c=e;if(!function(t){if(!(t instanceof a.FirebaseError&&t.customData))return!1;const e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(c)){if(n.deleteThrottleMetadata(r),h)return g.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${h} provided in the "measurementId" field in the local Firebase config. [${null==c?void 0:c.message}]`),{appId:r,measurementId:h};throw e}const l=503===Number(null===(o=null==c?void 0:c.customData)||void 0===o?void 0:o.httpStatus)?(0,a.calculateBackoffMillis)(s,n.intervalMillis,S):(0,a.calculateBackoffMillis)(s,n.intervalMillis),d={throttleEndTimeMillis:Date.now()+l,backoffCount:s+1};return n.setThrottleMetadata(r,d),g.debug(`Calling attemptFetch again in ${l} millis`),E(t,d,i,n)}}class x{constructor(){this.listeners=[]}addEventListener(t){this.listeners.push(t)}abort(){this.listeners.forEach((t=>t()))}}let T,C;function P(t){C=t}function L(t){T=t}async function A(t,e,s,i,n,o,r){var l;const d=_(t);d.then((e=>{s[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&g.warn(`The measurement ID in the local Firebase config (${t.options.measurementId}) does not match the measurement ID fetched from the server (${e.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((t=>g.error(t))),e.push(d);const m=async function(){if(!(0,a.isIndexedDBAvailable)())return g.warn(p.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,a.validateIndexedDBOpenable)()}catch(t){return g.warn(p.create("indexeddb-unavailable",{errorInfo:null==t?void 0:t.toString()}).message),!1}return!0}().then((t=>t?i.getId():void 0)),[f,v]=await Promise.all([d,m]);(function(t){const e=window.document.getElementsByTagName("script");for(const s of Object.values(e))if(s.src&&s.src.includes(u)&&s.src.includes(t))return s;return null})(o)||w(o,f.measurementId),C&&(n("consent","default",C),P(void 0)),n("js",new Date);const b=null!==(l=null==r?void 0:r.config)&&void 0!==l?l:{};return b[c]="firebase",b.update=!0,null!=v&&(b[h]=v),n("config",f.measurementId,b),T&&(n("set",T),L(void 0)),f.measurementId}class D{constructor(t){this.app=t}_delete(){return delete k[this.app.options.appId],Promise.resolve()}}let k={},B=[];const O={};let M,N,z="dataLayer",U="gtag",R=!1;function F(t){if(R)throw p.create("already-initialized");t.dataLayerName&&(z=t.dataLayerName),t.gtagName&&(U=t.gtagName)}function H(t,e,s){!function(){const t=[];if((0,a.isBrowserExtension)()&&t.push("This is a browser extension environment."),(0,a.areCookiesEnabled)()||t.push("Cookies are not available."),t.length>0){const e=t.map(((t,e)=>`(${e+1}) ${t}`)).join(" "),s=p.create("invalid-analytics-context",{errorInfo:e});g.warn(s.message)}}();const i=t.options.appId;if(!i)throw p.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw p.create("no-api-key");g.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${t.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=k[i])throw p.create("already-exists",{id:i});if(!R){!function(t){let e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(z);const{wrappedGtag:t,gtagCore:e}=function(t,e,s,i,n){let a=function(...t){window[i].push(arguments)};return window[n]&&"function"==typeof window[n]&&(a=window[n]),window[n]=b(a,t,e,s),{gtagCore:a,wrappedGtag:window[n]}}(k,B,O,z,U);N=t,M=e,R=!0}k[i]=A(t,B,O,e,M,z,s);return new D(t)}function j(t=(0,i.getApp)()){t=(0,a.getModularInstance)(t);const e=(0,i._getProvider)(t,r);return e.isInitialized()?e.getImmediate():W(t)}function W(t,e={}){const s=(0,i._getProvider)(t,r);if(s.isInitialized()){const t=s.getImmediate();if((0,a.deepEqual)(e,s.getOptions()))return t;throw p.create("already-initialized")}return s.initialize({options:e})}async function G(){if((0,a.isBrowserExtension)())return!1;if(!(0,a.areCookiesEnabled)())return!1;if(!(0,a.isIndexedDBAvailable)())return!1;try{return await(0,a.validateIndexedDBOpenable)()}catch(t){return!1}}function V(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global)return t("set",{screen_name:s}),Promise.resolve();t("config",await e,{update:!0,screen_name:s})}(N,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}async function X(t){return t=(0,a.getModularInstance)(t),async function(t,e){const s=await e;return new Promise(((e,i)=>{t("get",s,"client_id",(t=>{t||i(p.create("no-client-id")),e(t)}))}))}(N,k[t.app.options.appId])}function Y(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global)return t("set",{user_id:s}),Promise.resolve();t("config",await e,{update:!0,user_id:s})}(N,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}function $(t,e,s){t=(0,a.getModularInstance)(t),async function(t,e,s,i){if(i&&i.global){const e={};for(const t of Object.keys(s))e[`user_properties.${t}`]=s[t];return t("set",e),Promise.resolve()}t("config",await e,{update:!0,user_properties:s})}(N,k[t.app.options.appId],e,s).catch((t=>g.error(t)))}function K(t,e){t=(0,a.getModularInstance)(t),async function(t,e){const s=await t;window[`ga-disable-${s}`]=!e}(k[t.app.options.appId],e).catch((t=>g.error(t)))}function q(t){N?N("set",t):L(t)}function J(t,e,s,i){t=(0,a.getModularInstance)(t),async function(t,e,s,i,n){if(n&&n.global)t("event",s,i);else{const n=await e;t("event",s,Object.assign(Object.assign({},i),{send_to:n}))}}(N,k[t.app.options.appId],e,s,i).catch((t=>g.error(t)))}function Z(t){N?N("consent","update",t):P(t)}const Q="@firebase/analytics",tt="0.10.0";(0,i._registerComponent)(new o.Component(r,((t,{options:e})=>H(t.getProvider("app").getImmediate(),t.getProvider("installations-internal").getImmediate(),e)),"PUBLIC")),(0,i._registerComponent)(new o.Component("analytics-internal",(function(t){try{const e=t.getProvider(r).getImmediate();return{logEvent:(t,s,i)=>J(e,t,s,i)}}catch(t){throw p.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),(0,i.registerVersion)(Q,tt),(0,i.registerVersion)(Q,tt,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{FirebaseError:()=>a.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>M,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>z,_clearComponents:()=>G,_components:()=>U,_getProvider:()=>j,_registerComponent:()=>H,_removeServiceInstance:()=>W,deleteApp:()=>Z,getApp:()=>q,getApps:()=>J,initializeApp:()=>K,onLog:()=>tt,registerVersion:()=>Q,setLogLevel:()=>et});var i=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/idb/build/index.js");class r{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const h="@firebase/app",c="0.9.15",l=new n.Logger("@firebase/app"),d="@firebase/app-compat",u="@firebase/analytics-compat",g="@firebase/analytics",m="@firebase/app-check-compat",p="@firebase/app-check",f="@firebase/auth",v="@firebase/auth-compat",w="@firebase/database",b="@firebase/database-compat",S="@firebase/functions",I="@firebase/functions-compat",y="@firebase/installations",_="@firebase/installations-compat",E="@firebase/messaging",x="@firebase/messaging-compat",T="@firebase/performance",C="@firebase/performance-compat",P="@firebase/remote-config",L="@firebase/remote-config-compat",A="@firebase/storage",D="@firebase/storage-compat",k="@firebase/firestore",B="@firebase/firestore-compat",O="firebase",M="[DEFAULT]",N={[h]:"fire-core",[d]:"fire-core-compat",[g]:"fire-analytics",[u]:"fire-analytics-compat",[p]:"fire-app-check",[m]:"fire-app-check-compat",[f]:"fire-auth",[v]:"fire-auth-compat",[w]:"fire-rtdb",[b]:"fire-rtdb-compat",[S]:"fire-fn",[I]:"fire-fn-compat",[y]:"fire-iid",[_]:"fire-iid-compat",[E]:"fire-fcm",[x]:"fire-fcm-compat",[T]:"fire-perf",[C]:"fire-perf-compat",[P]:"fire-rc",[L]:"fire-rc-compat",[A]:"fire-gcs",[D]:"fire-gcs-compat",[k]:"fire-fst",[B]:"fire-fst-compat","fire-js":"fire-js",[O]:"fire-js-all"},z=new Map,U=new Map;function R(t,e){try{t.container.addComponent(e)}catch(s){l.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,s)}}function F(t,e){t.container.addOrOverwriteComponent(e)}function H(t){const e=t.name;if(U.has(e))return l.debug(`There were multiple attempts to register component ${e}.`),!1;U.set(e,t);for(const e of z.values())R(e,t);return!0}function j(t,e){const s=t.container.getProvider("heartbeat").getImmediate({optional:!0});return s&&s.triggerHeartbeat(),t.container.getProvider(e)}function W(t,e,s=M){j(t,e).clearInstance(s)}function G(){U.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new a.ErrorFactory("app","Firebase",V);class Y{constructor(t,e,s){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=s,this.container.addComponent(new i.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(t,e={}){let s=t;if("object"!=typeof e){e={name:e}}const n=Object.assign({name:M,automaticDataCollectionEnabled:!1},e),o=n.name;if("string"!=typeof o||!o)throw X.create("bad-app-name",{appName:String(o)});if(s||(s=(0,a.getDefaultAppConfig)()),!s)throw X.create("no-options");const r=z.get(o);if(r){if((0,a.deepEqual)(s,r.options)&&(0,a.deepEqual)(n,r.config))return r;throw X.create("duplicate-app",{appName:o})}const h=new i.ComponentContainer(o);for(const t of U.values())h.addComponent(t);const c=new Y(s,n,h);return z.set(o,c),c}function q(t=M){const e=z.get(t);if(!e&&t===M&&(0,a.getDefaultAppConfig)())return K();if(!e)throw X.create("no-app",{appName:t});return e}function J(){return Array.from(z.values())}async function Z(t){const e=t.name;z.has(e)&&(z.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function Q(t,e,s){var n;let a=null!==(n=N[t])&&void 0!==n?n:t;s&&(a+=`-${s}`);const o=a.match(/\s|\//),r=e.match(/\s|\//);if(o||r){const t=[`Unable to register library "${a}" with version "${e}":`];return o&&t.push(`library name "${a}" contains illegal characters (whitespace or "/")`),o&&r&&t.push("and"),r&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void l.warn(t.join(" "))}H(new i.Component(`${a}-version`,(()=>({library:a,version:e})),"VERSION"))}function tt(t,e){if(null!==t&&"function"!=typeof t)throw X.create("invalid-log-argument");(0,n.setUserLogHandler)(t,e)}function et(t){(0,n.setLogLevel)(t)}const st="firebase-heartbeat-database",it=1,nt="firebase-heartbeat-store";let at=null;function ot(){return at||(at=(0,o.openDB)(st,it,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(nt)}}).catch((t=>{throw X.create("idb-open",{originalErrorMessage:t.message})}))),at}async function rt(t,e){try{const s=(await ot()).transaction(nt,"readwrite"),i=s.objectStore(nt);await i.put(e,ht(t)),await s.done}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=X.create("idb-set",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}function ht(t){return`${t.name}!${t.options.appId}`}class ct{constructor(t){this.container=t,this._heartbeatsCache=null;const e=this.container.getProvider("app").getImmediate();this._storage=new dt(e),this._heartbeatsCachePromise=this._storage.read().then((t=>(this._heartbeatsCache=t,t)))}async triggerHeartbeat(){const t=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),e=lt();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==e&&!this._heartbeatsCache.heartbeats.some((t=>t.date===e)))return this._heartbeatsCache.heartbeats.push({date:e,agent:t}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((t=>{const e=new Date(t.date).valueOf();return Date.now()-e<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const t=lt(),{heartbeatsToSend:e,unsentEntries:s}=function(t,e=1024){const s=[];let i=t.slice();for(const n of t){const t=s.find((t=>t.agent===n.agent));if(t){if(t.dates.push(n.date),ut(s)>e){t.dates.pop();break}}else if(s.push({agent:n.agent,dates:[n.date]}),ut(s)>e){s.pop();break}i=i.slice(1)}return{heartbeatsToSend:s,unsentEntries:i}}(this._heartbeatsCache.heartbeats),i=(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e}));return this._heartbeatsCache.lastSentHeartbeatDate=t,s.length>0?(this._heartbeatsCache.heartbeats=s,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),i}}function lt(){return(new Date).toISOString().substring(0,10)}class dt{constructor(t){this.app=t,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.isIndexedDBAvailable)()&&(0,a.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(t){try{const e=await ot();return await e.transaction(nt).objectStore(nt).get(ht(t))}catch(t){if(t instanceof a.FirebaseError)l.warn(t.message);else{const e=X.create("idb-get",{originalErrorMessage:null==t?void 0:t.message});l.warn(e.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(t){var e;if(await this._canUseIndexedDBPromise){const s=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:s.lastSentHeartbeatDate,heartbeats:t.heartbeats})}}async add(t){var e;if(await this._canUseIndexedDBPromise){const s=await this.read();return rt(this.app,{lastSentHeartbeatDate:null!==(e=t.lastSentHeartbeatDate)&&void 0!==e?e:s.lastSentHeartbeatDate,heartbeats:[...s.heartbeats,...t.heartbeats]})}}}function ut(t){return(0,a.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t})).length}var gt;gt="",H(new i.Component("platform-logger",(t=>new r(t)),"PRIVATE")),H(new i.Component("heartbeat",(t=>new ct(t)),"PRIVATE")),Q(h,c,gt),Q(h,c,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{Component:()=>n,ComponentContainer:()=>r,Provider:()=>o});var i=s("./node_modules/@firebase/util/dist/index.esm2017.js");class n{constructor(t,e,s){this.name=t,this.instanceFactory=e,this.type=s,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const a="[DEFAULT]";class o{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){const t=new i.Deferred;if(this.instancesDeferred.set(e,t),this.isInitialized(e)||this.shouldAutoInitialize())try{const s=this.getOrInitializeService({instanceIdentifier:e});s&&t.resolve(s)}catch(t){}}return this.instancesDeferred.get(e).promise}getImmediate(t){var e;const s=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(s)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:s})}catch(t){if(i)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:a})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const s=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:s});e.resolve(t)}catch(t){}}}}clearInstance(t=a){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t=a){return this.instances.has(t)}getOptions(t=a){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,s=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(s))throw Error(`${this.name}(${s}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:s,options:e});for(const[t,e]of this.instancesDeferred.entries()){s===this.normalizeInstanceIdentifier(t)&&e.resolve(i)}return i}onInit(t,e){var s;const i=this.normalizeInstanceIdentifier(e),n=null!==(s=this.onInitCallbacks.get(i))&&void 0!==s?s:new Set;n.add(t),this.onInitCallbacks.set(i,n);const a=this.instances.get(i);return a&&t(a,i),()=>{n.delete(t)}}invokeOnInitCallbacks(t,e){const s=this.onInitCallbacks.get(e);if(s)for(const i of s)try{i(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let s=this.instances.get(t);if(!s&&this.component&&(s=this.component.instanceFactory(this.container,{instanceIdentifier:(i=t,i===a?void 0:i),options:e}),this.instances.set(t,s),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(s,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,s)}catch(t){}var i;return s||null}normalizeInstanceIdentifier(t=a){return this.component?this.component.multipleInstances?t:a:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new o(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>et,getToken:()=>J,onIdChange:()=>tt});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),n=s("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),a=s("./node_modules/@firebase/util/dist/index.esm2017.js"),o=s("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",h="0.6.4",c=1e4,l=`w:${h}`,d="FIS_v2",u="https://firebaseinstallations.googleapis.com/v1",g=36e5,m={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},p=new a.ErrorFactory("installations","Installations",m);function f(t){return t instanceof a.FirebaseError&&t.code.includes("request-failed")}function v({projectId:t}){return`${u}/projects/${t}/installations`}function w(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}async function b(t,e){const s=(await e.json()).error;return p.create("request-failed",{requestName:t,serverCode:s.code,serverMessage:s.message,serverStatus:s.status})}function S({apiKey:t}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":t})}function I(t,{refreshToken:e}){const s=S(t);return s.append("Authorization",function(t){return`${d} ${t}`}(e)),s}async function y(t){const e=await t();return e.status>=500&&e.status<600?t():e}function _(t){return new Promise((e=>{setTimeout(e,t)}))}const E=/^[cdef][\w-]{21}$/,x="";function T(){try{const t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;const e=function(t){const e=(s=t,btoa(String.fromCharCode(...s)).replace(/\+/g,"-").replace(/\//g,"_"));var s;return e.substr(0,22)}(t);return E.test(e)?e:x}catch(t){return x}}function C(t){return`${t.appName}!${t.appId}`}const P=new Map;function L(t,e){const s=C(t);A(s,e),function(t,e){const s=k();s&&s.postMessage({key:t,fid:e});B()}(s,e)}function A(t,e){const s=P.get(t);if(s)for(const t of s)t(e)}let D=null;function k(){return!D&&"BroadcastChannel"in self&&(D=new BroadcastChannel("[Firebase] FID Change"),D.onmessage=t=>{A(t.data.key,t.data.fid)}),D}function B(){0===P.size&&D&&(D.close(),D=null)}const O="firebase-installations-database",M=1,N="firebase-installations-store";let z=null;function U(){return z||(z=(0,o.openDB)(O,M,{upgrade:(t,e)=>{if(0===e)t.createObjectStore(N)}})),z}async function R(t,e){const s=C(t),i=(await U()).transaction(N,"readwrite"),n=i.objectStore(N),a=await n.get(s);return await n.put(e,s),await i.done,a&&a.fid===e.fid||L(t,e.fid),e}async function F(t){const e=C(t),s=(await U()).transaction(N,"readwrite");await s.objectStore(N).delete(e),await s.done}async function H(t,e){const s=C(t),i=(await U()).transaction(N,"readwrite"),n=i.objectStore(N),a=await n.get(s),o=e(a);return void 0===o?await n.delete(s):await n.put(o,s),await i.done,!o||a&&a.fid===o.fid||L(t,o.fid),o}async function j(t){let e;const s=await H(t.appConfig,(s=>{const i=function(t){const e=t||{fid:T(),registrationStatus:0};return V(e)}(s),n=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine){return{installationEntry:e,registrationPromise:Promise.reject(p.create("app-offline"))}}const s={fid:e.fid,registrationStatus:1,registrationTime:Date.now()},i=async function(t,e){try{const s=await async function({appConfig:t,heartbeatServiceProvider:e},{fid:s}){const i=v(t),n=S(t),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={fid:s,authVersion:d,appId:t.appId,sdkVersion:l},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await y((()=>fetch(i,r)));if(h.ok){const t=await h.json();return{fid:t.fid||s,registrationStatus:2,refreshToken:t.refreshToken,authToken:w(t.authToken)}}throw await b("Create Installation",h)}(t,e);return R(t.appConfig,s)}catch(s){throw f(s)&&409===s.customData.serverCode?await F(t.appConfig):await R(t.appConfig,{fid:e.fid,registrationStatus:0}),s}}(t,s);return{installationEntry:s,registrationPromise:i}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:W(t)}:{installationEntry:e}}(t,i);return e=n.registrationPromise,n.installationEntry}));return s.fid===x?{installationEntry:await e}:{installationEntry:s,registrationPromise:e}}async function W(t){let e=await G(t.appConfig);for(;1===e.registrationStatus;)await _(100),e=await G(t.appConfig);if(0===e.registrationStatus){const{installationEntry:e,registrationPromise:s}=await j(t);return s||e}return e}function G(t){return H(t,(t=>{if(!t)throw p.create("installation-not-found");return V(t)}))}function V(t){return 1===(e=t).registrationStatus&&e.registrationTime+c<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}async function X({appConfig:t,heartbeatServiceProvider:e},s){const i=function(t,{fid:e}){return`${v(t)}/${e}/authTokens:generate`}(t,s),n=I(t,s),a=e.getImmediate({optional:!0});if(a){const t=await a.getHeartbeatsHeader();t&&n.append("x-firebase-client",t)}const o={installation:{sdkVersion:l,appId:t.appId}},r={method:"POST",headers:n,body:JSON.stringify(o)},h=await y((()=>fetch(i,r)));if(h.ok){return w(await h.json())}throw await b("Generate Auth Token",h)}async function Y(t,e=!1){let s;const i=await H(t.appConfig,(i=>{if(!K(i))throw p.create("not-registered");const n=i.authToken;if(!e&&function(t){return 2===t.requestStatus&&!function(t){const e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+g}(t)}(n))return i;if(1===n.requestStatus)return s=async function(t,e){let s=await $(t.appConfig);for(;1===s.authToken.requestStatus;)await _(100),s=await $(t.appConfig);const i=s.authToken;return 0===i.requestStatus?Y(t,e):i}(t,e),i;{if(!navigator.onLine)throw p.create("app-offline");const e=function(t){const e={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},t),{authToken:e})}(i);return s=async function(t,e){try{const s=await X(t,e),i=Object.assign(Object.assign({},e),{authToken:s});return await R(t.appConfig,i),s}catch(s){if(!f(s)||401!==s.customData.serverCode&&404!==s.customData.serverCode){const s=Object.assign(Object.assign({},e),{authToken:{requestStatus:0}});await R(t.appConfig,s)}else await F(t.appConfig);throw s}}(t,e),e}}));return s?await s:i.authToken}function $(t){return H(t,(t=>{if(!K(t))throw p.create("not-registered");const e=t.authToken;return 1===(s=e).requestStatus&&s.requestTime+c<Date.now()?Object.assign(Object.assign({},t),{authToken:{requestStatus:0}}):t;var s}))}function K(t){return void 0!==t&&2===t.registrationStatus}async function q(t){const e=t,{installationEntry:s,registrationPromise:i}=await j(e);return i?i.catch(console.error):Y(e).catch(console.error),s.fid}async function J(t,e=!1){const s=t;await async function(t){const{registrationPromise:e}=await j(t);e&&await e}(s);return(await Y(s,e)).token}async function Z(t,e){const s=function(t,{fid:e}){return`${v(t)}/${e}`}(t,e),i={method:"DELETE",headers:I(t,e)},n=await y((()=>fetch(s,i)));if(!n.ok)throw await b("Delete Installation",n)}async function Q(t){const{appConfig:e}=t,s=await H(e,(t=>{if(!t||0!==t.registrationStatus)return t}));if(s){if(1===s.registrationStatus)throw p.create("delete-pending-registration");if(2===s.registrationStatus){if(!navigator.onLine)throw p.create("app-offline");await Z(e,s),await F(e)}}}function tt(t,e){const{appConfig:s}=t;return function(t,e){k();const s=C(t);let i=P.get(s);i||(i=new Set,P.set(s,i)),i.add(e)}(s,e),()=>{!function(t,e){const s=C(t),i=P.get(s);i&&(i.delete(e),0===i.size&&P.delete(s),B())}(s,e)}}function et(t=(0,i.getApp)()){return(0,i._getProvider)(t,"installations").getImmediate()}function st(t){return p.create("missing-app-config-values",{valueName:t})}const it="installations",nt=t=>{const e=t.getProvider("app").getImmediate(),s=function(t){if(!t||!t.options)throw st("App Configuration");if(!t.name)throw st("App Name");const e=["projectId","apiKey","appId"];for(const s of e)if(!t.options[s])throw st(s);return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e);return{app:e,appConfig:s,heartbeatServiceProvider:(0,i._getProvider)(e,"heartbeat"),_delete:()=>Promise.resolve()}},at=t=>{const e=t.getProvider("app").getImmediate(),s=(0,i._getProvider)(e,it).getImmediate();return{getId:()=>q(s),getToken:t=>J(s,t)}};(0,i._registerComponent)(new n.Component(it,nt,"PUBLIC")),(0,i._registerComponent)(new n.Component("installations-internal",at,"PRIVATE")),(0,i.registerVersion)(r,h),(0,i.registerVersion)(r,h,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(t,e,s)=>{s.r(e),s.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:s,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,i.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,i.w)(r.result),t.oldVersion,t.newVersion,(0,i.w)(r.transaction))})),s&&r.addEventListener("blocked",(()=>s())),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(()=>a()))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);return e&&s.addEventListener("blocked",(()=>e())),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function c(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const s=e.replace(/FromIndex$/,""),i=e!==s,n=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(s))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(e.shift())),(await Promise.all([o[s](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,i.r)((t=>({...t,get:(e,s,i)=>c(e,s)||t.get(e,s,i),has:(e,s)=>!!c(e,s)||t.has(e,s)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(t,e,s)=>{s.r(e),s.d(e,{a:()=>l,i:()=>i,r:()=>u,u:()=>f,w:()=>p});const i=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,c=new WeakMap,l=new WeakMap;let d={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return p(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function g(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...s){const i=t.call(f(this),e,...s);return h.set(i,e.sort?e.sort():[e]),p(i)}}function m(t){return"function"==typeof t?g(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),i()},a=()=>{s(t.error||new DOMException("AbortError","AbortError")),i()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),i(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),i()},a=()=>{s(t.error),i()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(c.has(t))return c.get(t);const e=m(t);return e!==t&&(c.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(t,e,s)=>{s.r(e),s.d(e,{LogLevel:()=>n,Logger:()=>c,setLogLevel:()=>l,setUserLogHandler:()=>d});const i=[];var n;!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(n||(n={}));const a={debug:n.DEBUG,verbose:n.VERBOSE,info:n.INFO,warn:n.WARN,error:n.ERROR,silent:n.SILENT},o=n.INFO,r={[n.DEBUG]:"log",[n.VERBOSE]:"log",[n.INFO]:"info",[n.WARN]:"warn",[n.ERROR]:"error"},h=(t,e,...s)=>{if(e<t.logLevel)return;const i=(new Date).toISOString(),n=r[e];if(!n)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[n](`[${i}]  ${t.name}:`,...s)};class c{constructor(t){this.name=t,this._logLevel=o,this._logHandler=h,this._userLogHandler=null,i.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in n))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?a[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,n.DEBUG,...t),this._logHandler(this,n.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,n.VERBOSE,...t),this._logHandler(this,n.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,n.INFO,...t),this._logHandler(this,n.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,n.WARN,...t),this._logHandler(this,n.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,n.ERROR,...t),this._logHandler(this,n.ERROR,...t)}}function l(t){i.forEach((e=>{e.setLogLevel(t)}))}function d(t,e){for(const s of i){let i=null;e&&e.level&&(i=a[e.level]),s.userLogHandler=null===t?null:(e,s,...a)=>{const o=a.map((t=>{if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((t=>t)).join(" ");s>=(null!=i?i:e.logLevel)&&t({level:n[s].toLowerCase(),message:o,args:a,type:e.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(t,e,s)=>{s.r(e),s.d(e,{getAnalytics:()=>i.getAnalytics,getGoogleAnalyticsClientId:()=>i.getGoogleAnalyticsClientId,initializeAnalytics:()=>i.initializeAnalytics,isSupported:()=>i.isSupported,logEvent:()=>i.logEvent,setAnalyticsCollectionEnabled:()=>i.setAnalyticsCollectionEnabled,setConsent:()=>i.setConsent,setCurrentScreen:()=>i.setCurrentScreen,setDefaultEventParameters:()=>i.setDefaultEventParameters,setUserId:()=>i.setUserId,setUserProperties:()=>i.setUserProperties,settings:()=>i.settings});var i=s("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(t,e,s)=>{s.r(e),s.d(e,{FirebaseError:()=>i.FirebaseError,SDK_VERSION:()=>i.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>i._DEFAULT_ENTRY_NAME,_addComponent:()=>i._addComponent,_addOrOverwriteComponent:()=>i._addOrOverwriteComponent,_apps:()=>i._apps,_clearComponents:()=>i._clearComponents,_components:()=>i._components,_getProvider:()=>i._getProvider,_registerComponent:()=>i._registerComponent,_removeServiceInstance:()=>i._removeServiceInstance,deleteApp:()=>i.deleteApp,getApp:()=>i.getApp,getApps:()=>i.getApps,initializeApp:()=>i.initializeApp,onLog:()=>i.onLog,registerVersion:()=>i.registerVersion,setLogLevel:()=>i.setLogLevel});var i=s("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,i.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(t,e,s)=>{s.r(e),s.d(e,{deleteDB:()=>a,openDB:()=>n,unwrap:()=>i.u,wrap:()=>i.w});var i=s("./node_modules/idb/build/wrap-idb-value.js");function n(t,e,{blocked:s,upgrade:n,blocking:a,terminated:o}={}){const r=indexedDB.open(t,e),h=(0,i.w)(r);return n&&r.addEventListener("upgradeneeded",(t=>{n((0,i.w)(r.result),t.oldVersion,t.newVersion,(0,i.w)(r.transaction),t)})),s&&r.addEventListener("blocked",(t=>s(t.oldVersion,t.newVersion,t))),h.then((t=>{o&&t.addEventListener("close",(()=>o())),a&&t.addEventListener("versionchange",(t=>a(t.oldVersion,t.newVersion,t)))})).catch((()=>{})),h}function a(t,{blocked:e}={}){const s=indexedDB.deleteDatabase(t);return e&&s.addEventListener("blocked",(t=>e(t.oldVersion,t))),(0,i.w)(s).then((()=>{}))}const o=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],h=new Map;function c(t,e){if(!(t instanceof IDBDatabase)||e in t||"string"!=typeof e)return;if(h.get(e))return h.get(e);const s=e.replace(/FromIndex$/,""),i=e!==s,n=r.includes(s);if(!(s in(i?IDBIndex:IDBObjectStore).prototype)||!n&&!o.includes(s))return;const a=async function(t,...e){const a=this.transaction(t,n?"readwrite":"readonly");let o=a.store;return i&&(o=o.index(e.shift())),(await Promise.all([o[s](...e),n&&a.done]))[0]};return h.set(e,a),a}(0,i.r)((t=>({...t,get:(e,s,i)=>c(e,s)||t.get(e,s,i),has:(e,s)=>!!c(e,s)||t.has(e,s)})))},"./node_modules/idb/build/wrap-idb-value.js":(t,e,s)=>{s.r(e),s.d(e,{a:()=>l,i:()=>i,r:()=>u,u:()=>f,w:()=>p});const i=(t,e)=>e.some((e=>t instanceof e));let n,a;const o=new WeakMap,r=new WeakMap,h=new WeakMap,c=new WeakMap,l=new WeakMap;let d={get(t,e,s){if(t instanceof IDBTransaction){if("done"===e)return r.get(t);if("objectStoreNames"===e)return t.objectStoreNames||h.get(t);if("store"===e)return s.objectStoreNames[1]?void 0:s.objectStore(s.objectStoreNames[0])}return p(t[e])},set:(t,e,s)=>(t[e]=s,!0),has:(t,e)=>t instanceof IDBTransaction&&("done"===e||"store"===e)||e in t};function u(t){d=t(d)}function g(t){return t!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(a||(a=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(f(this),e),p(o.get(this))}:function(...e){return p(t.apply(f(this),e))}:function(e,...s){const i=t.call(f(this),e,...s);return h.set(i,e.sort?e.sort():[e]),p(i)}}function m(t){return"function"==typeof t?g(t):(t instanceof IDBTransaction&&function(t){if(r.has(t))return;const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("complete",n),t.removeEventListener("error",a),t.removeEventListener("abort",a)},n=()=>{e(),i()},a=()=>{s(t.error||new DOMException("AbortError","AbortError")),i()};t.addEventListener("complete",n),t.addEventListener("error",a),t.addEventListener("abort",a)}));r.set(t,e)}(t),i(t,n||(n=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(t,d):t)}function p(t){if(t instanceof IDBRequest)return function(t){const e=new Promise(((e,s)=>{const i=()=>{t.removeEventListener("success",n),t.removeEventListener("error",a)},n=()=>{e(p(t.result)),i()},a=()=>{s(t.error),i()};t.addEventListener("success",n),t.addEventListener("error",a)}));return e.then((e=>{e instanceof IDBCursor&&o.set(e,t)})).catch((()=>{})),l.set(e,t),e}(t);if(c.has(t))return c.get(t);const e=m(t);return e!==t&&(c.set(t,e),l.set(e,t)),e}const f=t=>l.get(t)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(t,e,s)=>{s.r(e),s.d(e,{Workbox:()=>u,messageSW:()=>i});try{self["workbox:window:4.3.1"]&&_()}catch(i){}var i=function(t,e){return new Promise((function(s){var i=new MessageChannel;i.port1.onmessage=function(t){return s(t.data)},t.postMessage(e,[i.port2])}))};function n(t,e){for(var s=0;s<e.length;s++){var i=e[s];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function a(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}try{self["workbox:core:4.3.1"]&&_()}catch(i){}var o=function(){var t=this;this.promise=new Promise((function(e,s){t.resolve=e,t.reject=s}))},r=function(t,e){return new URL(t,location).href===new URL(e,location).href},h=function(t,e){Object.assign(this,e,{type:t})};function c(t){return function(){for(var e=[],s=0;s<arguments.length;s++)e[s]=arguments[s];try{return Promise.resolve(t.apply(this,e))}catch(t){return Promise.reject(t)}}}function l(t,e,s){return s?e?e(t):t:(t&&t.then||(t=Promise.resolve(t)),e?t.then(e):t)}function d(){}var u=function(t){var e,s;function u(e,s){var i;return void 0===s&&(s={}),(i=t.call(this)||this).t=e,i.i=s,i.o=0,i.u=new o,i.s=new o,i.h=new o,i.v=i.v.bind(a(a(i))),i.l=i.l.bind(a(a(i))),i.g=i.g.bind(a(a(i))),i.m=i.m.bind(a(a(i))),i}s=t,(e=u).prototype=Object.create(s.prototype),e.prototype.constructor=e,e.__proto__=s;var g,m,p=u.prototype;return p.register=c((function(t){var e,s,i=this,n=(void 0===t?{}:t).immediate,a=void 0!==n&&n;return e=function(){return i.p=Boolean(navigator.serviceWorker.controller),i.P=i.R(),l(i.k(),(function(t){i.B=t,i.P&&(i.O=i.P,i.s.resolve(i.P),i.h.resolve(i.P),i.j(i.P),i.P.addEventListener("statechange",i.l,{once:!0}));var e=i.B.waiting;return e&&r(e.scriptURL,i.t)&&(i.O=e,Promise.resolve().then((function(){i.dispatchEvent(new h("waiting",{sw:e,wasWaitingBeforeRegister:!0}))}))),i.O&&i.u.resolve(i.O),i.B.addEventListener("updatefound",i.g),navigator.serviceWorker.addEventListener("controllerchange",i.m,{once:!0}),"BroadcastChannel"in self&&(i.C=new BroadcastChannel("workbox"),i.C.addEventListener("message",i.v)),navigator.serviceWorker.addEventListener("message",i.v),i.B}))},(s=function(){if(!a&&"complete"!==document.readyState)return function(t,e){return t&&t.then?t.then(d):Promise.resolve()}(new Promise((function(t){return addEventListener("load",t)})))}())&&s.then?s.then(e):e()})),p.getSW=c((function(){return this.O||this.u.promise})),p.messageSW=c((function(t){return l(this.getSW(),(function(e){return i(e,t)}))})),p.R=function(){var t=navigator.serviceWorker.controller;if(t&&r(t.scriptURL,this.t))return t},p.k=c((function(){var t=this;return function(t,e){try{var s=t()}catch(t){return e(t)}return s&&s.then?s.then(void 0,e):s}((function(){return l(navigator.serviceWorker.register(t.t,t.i),(function(e){return t.L=performance.now(),e}))}),(function(t){throw t}))})),p.j=function(t){i(t,{type:"WINDOW_READY",meta:"workbox-window"})},p.g=function(){var t=this.B.installing;this.o>0||!r(t.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=t,this.B.removeEventListener("updatefound",this.g)):(this.O=t,this.u.resolve(t)),++this.o,t.addEventListener("statechange",this.l)},p.l=function(t){var e=this,s=t.target,i=s.state,n=s===this.W,a=n?"external":"",o={sw:s,originalEvent:t};!n&&this.p&&(o.isUpdate=!0),this.dispatchEvent(new h(a+i,o)),"installed"===i?this._=setTimeout((function(){"installed"===i&&e.B.waiting===s&&e.dispatchEvent(new h(a+"waiting",o))}),200):"activating"===i&&(clearTimeout(this._),n||this.s.resolve(s))},p.m=function(t){var e=this.O;e===navigator.serviceWorker.controller&&(this.dispatchEvent(new h("controlling",{sw:e,originalEvent:t})),this.h.resolve(e))},p.v=function(t){var e=t.data;this.dispatchEvent(new h("message",{data:e,originalEvent:t}))},g=u,(m=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&n(g.prototype,m),u}(function(){function t(){this.D={}}var e=t.prototype;return e.addEventListener=function(t,e){this.T(t).add(e)},e.removeEventListener=function(t,e){this.T(t).delete(e)},e.dispatchEvent=function(t){t.target=this,this.T(t.type).forEach((function(e){return e(t)}))},e.T=function(t){return this.D[t]=this.D[t]||new Set},t}())}},e={};function s(i){var n=e[i];if(void 0!==n)return n.exports;var a=e[i]={exports:{}};return t[i](a,a.exports,s),a.exports}s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var i={};(()=>{s.r(i);var t=s("./src/data/index.ts"),e=s("./src/sceneHandler/index.ts"),n=s("./src/constants/index.ts"),a=s("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),o=s("./src/Firebase/firebase-integration.ts"),r=s("./src/common/index.ts"),h=s("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;firebaseIntegration;constructor(t){this.lang=t,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new o.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const e=await r.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(e,`./assets/fonts/${e}.ttf`),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const s=await(0,t.getData)();this.majVersion=s.majversion,this.minVersion=s.minversion,this.dataModal=this.createDataModal(s),this.globalInitialization(s),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)})),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}logSessionStartFirebaseEvent(){let t=localStorage.getItem("lastSessionEndTime"),e=0;if(this.startSessionTime=(new Date).getTime(),t){let s=parseInt(t);isNaN(s)||(e=Math.abs((new Date).getTime()-s))}const s=parseFloat((e?e/864e5:0).toFixed(3)),i={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:s};this.firebaseIntegration.sendSessionStartEvent(i)}logSessionEndFirebaseEvent(){const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(t)}initializeCachedData(){const t=localStorage.getItem(n.IsCached);return t?new Map(JSON.parse(t)):new Map}async loadAndCacheFont(t,e){try{const s=await caches.open("fontCache");if(!await s.match(e)){const t=await fetch(e),i=await t.blob();await s.put(e,new Response(i))}const i=new FontFace(t,`url(${e}) format('truetype')`);await i.load(),document.fonts.add(i)}catch(t){console.error(`Failed to load and cache font: ${t}`)}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="30%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const e=new a.Workbox("./sw.js",{});await e.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(t.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async t=>{if(!t.ok)return void console.error("Failed to fetch the content file from the server!");const e=await t.json();console.log(e);const s=e.majversion+"."+e.minversion,i=localStorage.getItem("version"+r.lang.toLowerCase());if(console.log("No Cache Content version: "+s),console.log("cached version :"+i),s&&i!=s){console.log("Content version mismatch! Reloading...");var a=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+r.lang);var o=a.filter((t=>!t.toString().includes(r.lang)));localStorage.setItem(n.IsCached,JSON.stringify(o)),localStorage.removeItem("version"+r.lang.toLowerCase()),caches.delete(r.lang),this.handleUpdateFoundMessage()}})).catch((t=>{console.error("Error fetching the content file: "+t)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(t){console.error(`Failed to register service worker: ${t}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(e){return new t.DataModal(e.title,e.OtherAudios,e.Levels,e.FeedbackTexts,e.RightToLeft,e.FeedbackAudios,e.majversion,e.minversion,e.version)}globalInitialization(t){globalThis.aboutCompany=t.aboutCompany,globalThis.descriptionText=t.descriptionText}handleResize(t){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(t),this.setupCanvas(),this.reinitializeSceneHandler(t))}updateVersionInfoElement(t){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(t.majVersion&&t.minVersion?this.versionInfoElement.innerHTML+=`/j.v${t.majVersion}.${t.minVersion}`:t.version&&(this.versionInfoElement.innerHTML+=`/j.v${t.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(t){delete this.sceneHandler,this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}handleCachedScenario(t){this.updateVersionInfoElement(t),this.sceneHandler=new e.SceneHandler(this.canvas,t),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=t=>{if(this.progressBarContainer&&this.progressBar){if(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",parseInt(this.progressBar.style.width||"0")>=40&&(this.progressBar.style.width=`${t.data}%`),t.data%100==0&&!this.is_cached.get(this.lang)){this.is_cached.set(this.lang,!0),localStorage.setItem(n.IsCached,JSON.stringify(Array.from(this.is_cached.entries())));const t={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendDownloadCompletedEvent(t),localStorage.setItem("version"+this.lang,this.majVersion+"."+this.minVersion),this.loadingElement.style.display="none",this.handleResize(this.dataModal),console.log("hide progress")}this.progressBar.style.width=`${t.data}%`}};handleServiceWorkerMessage=t=>{"Loading"===t.data.msg?this.handleLoadingMessage(t.data):"Update Found"===t.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{"visible"===document.visibilityState?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async t=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let t=n.AUDIO_URL_PRELOAD;return new Promise(((e,s)=>{const i=t.map((t=>(new h.AudioPlayer).preloadGameAudio(t)));Promise.all(i).then((()=>e())).catch((t=>{console.error("Error preloading audio:",t),s(t)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,