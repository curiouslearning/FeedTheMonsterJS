/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/@firebase/util/dist/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{CONSTANTS:()=>x,DecodeBase64StringError:()=>_,Deferred:()=>v,ErrorFactory:()=>M,FirebaseError:()=>z,MAX_VALUE_MILLIS:()=>pe,RANDOM_FACTOR:()=>ge,Sha1:()=>ae,areCookiesEnabled:()=>O,assert:()=>i,assertionError:()=>s,async:()=>se,base64:()=>o,base64Decode:()=>d,base64Encode:()=>r,base64urlEncodeWithoutPadding:()=>c,calculateBackoffMillis:()=>me,contains:()=>X,createMockUserToken:()=>w,createSubscribe:()=>xe,decode:()=>U,deepCopy:()=>h,deepEqual:()=>q,deepExtend:()=>l,errorPrefix:()=>_e,extractQuerystring:()=>te,getDefaultAppConfig:()=>g,getDefaultEmulatorHost:()=>b,getDefaultEmulatorHostnameAndPort:()=>p,getDefaults:()=>u,getExperimentalSetting:()=>m,getGlobal:()=>f,getModularInstance:()=>we,getUA:()=>S,isAdmin:()=>W,isBrowser:()=>E,isBrowserExtension:()=>T,isElectron:()=>L,isEmpty:()=>$,isIE:()=>A,isIndexedDBAvailable:()=>N,isMobileCordova:()=>y,isNode:()=>I,isNodeSdk:()=>k,isReactNative:()=>P,isSafari:()=>D,isUWP:()=>C,isValidFormat:()=>V,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>R,map:()=>K,ordinal:()=>ve,promiseWithTimeout:()=>J,querystring:()=>Q,querystringDecode:()=>ee,safeGet:()=>Y,stringLength:()=>le,stringToByteArray:()=>he,stringify:()=>F,uuidv4:()=>fe,validateArgCount:()=>oe,validateCallback:()=>ce,validateContextObject:()=>de,validateIndexedDBOpenable:()=>B,validateNamespace:()=>re});const x={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},i=function(e,t){if(!e)throw s(t)},s=function(e){return new Error("Firebase Database ("+x.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},n=function(e){const t=[];let a=0;for(let x=0;x<e.length;x++){let i=e.charCodeAt(x);i<128?t[a++]=i:i<2048?(t[a++]=i>>6|192,t[a++]=63&i|128):55296==(64512&i)&&x+1<e.length&&56320==(64512&e.charCodeAt(x+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++x)),t[a++]=i>>18|240,t[a++]=i>>12&63|128,t[a++]=i>>6&63|128,t[a++]=63&i|128):(t[a++]=i>>12|224,t[a++]=i>>6&63|128,t[a++]=63&i|128)}return t},o={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const a=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,x=[];for(let t=0;t<e.length;t+=3){const i=e[t],s=t+1<e.length,n=s?e[t+1]:0,o=t+2<e.length,_=o?e[t+2]:0,r=i>>2,c=(3&i)<<4|n>>4;let d=(15&n)<<2|_>>6,h=63&_;o||(h=64,s||(d=64)),x.push(a[r],a[c],a[d],a[h])}return x.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(n(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let a=0,x=0;for(;a<e.length;){const i=e[a++];if(i<128)t[x++]=String.fromCharCode(i);else if(i>191&&i<224){const s=e[a++];t[x++]=String.fromCharCode((31&i)<<6|63&s)}else if(i>239&&i<365){const s=((7&i)<<18|(63&e[a++])<<12|(63&e[a++])<<6|63&e[a++])-65536;t[x++]=String.fromCharCode(55296+(s>>10)),t[x++]=String.fromCharCode(56320+(1023&s))}else{const s=e[a++],n=e[a++];t[x++]=String.fromCharCode((15&i)<<12|(63&s)<<6|63&n)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const a=t?this.charToByteMapWebSafe_:this.charToByteMap_,x=[];for(let t=0;t<e.length;){const i=a[e.charAt(t++)],s=t<e.length?a[e.charAt(t)]:0;++t;const n=t<e.length?a[e.charAt(t)]:64;++t;const o=t<e.length?a[e.charAt(t)]:64;if(++t,null==i||null==s||null==n||null==o)throw new _;const r=i<<2|s>>4;if(x.push(r),64!==n){const e=s<<4&240|n>>2;if(x.push(e),64!==o){const e=n<<6&192|o;x.push(e)}}}return x},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class _ extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const r=function(e){const t=n(e);return o.encodeByteArray(t,!0)},c=function(e){return r(e).replace(/\./g,"")},d=function(e){try{return o.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function h(e){return l(void 0,e)}function l(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const a in t)t.hasOwnProperty(a)&&"__proto__"!==a&&(e[a]=l(e[a],t[a]));return e}function f(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==a.g)return a.g;throw new Error("Unable to locate global object.")}const u=()=>{try{return f().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&d(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},b=e=>{var t,a;return null===(a=null===(t=u())||void 0===t?void 0:t.emulatorHosts)||void 0===a?void 0:a[e]},p=e=>{const t=b(e);if(!t)return;const a=t.lastIndexOf(":");if(a<=0||a+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const x=parseInt(t.substring(a+1),10);return"["===t[0]?[t.substring(1,a-1),x]:[t.substring(0,a),x]},g=()=>{var e;return null===(e=u())||void 0===e?void 0:e.config},m=e=>{var t;return null===(t=u())||void 0===t?void 0:t[`_${e}`]};class v{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,a)=>{t?this.reject(t):this.resolve(a),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,a))}}}function w(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const a=t||"demo-project",x=e.iat||0,i=e.sub||e.user_id;if(!i)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const s=Object.assign({iss:`https://securetoken.google.com/${a}`,aud:a,iat:x,exp:x+3600,auth_time:x,sub:i,user_id:i,firebase:{sign_in_provider:"custom",identities:{}}},e);return[c(JSON.stringify({alg:"none",type:"JWT"})),c(JSON.stringify(s)),""].join(".")}function S(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function y(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(S())}function I(){var e;const t=null===(e=u())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(a.g.process)}catch(e){return!1}}function E(){return"object"==typeof self&&self.self===self}function T(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function P(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function L(){return S().indexOf("Electron/")>=0}function A(){const e=S();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function C(){return S().indexOf("MSAppHost/")>=0}function k(){return!0===x.NODE_CLIENT||!0===x.NODE_ADMIN}function D(){return!I()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function N(){try{return"object"==typeof indexedDB}catch(e){return!1}}function B(){return new Promise(((e,t)=>{try{let a=!0;const x="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(x);i.onsuccess=()=>{i.result.close(),a||self.indexedDB.deleteDatabase(x),e(!0)},i.onupgradeneeded=()=>{a=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}function O(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class z extends Error{constructor(e,t,a){super(t),this.code=e,this.customData=a,this.name="FirebaseError",Object.setPrototypeOf(this,z.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,M.prototype.create)}}class M{constructor(e,t,a){this.service=e,this.serviceName=t,this.errors=a}create(e,...t){const a=t[0]||{},x=`${this.service}/${e}`,i=this.errors[e],s=i?function(e,t){return e.replace(j,((e,a)=>{const x=t[a];return null!=x?String(x):`<${a}?>`}))}(i,a):"Error",n=`${this.serviceName}: ${s} (${x}).`;return new z(x,n,a)}}const j=/\{\$([^}]+)}/g;function R(e){return JSON.parse(e)}function F(e){return JSON.stringify(e)}const U=function(e){let t={},a={},x={},i="";try{const s=e.split(".");t=R(d(s[0])||""),a=R(d(s[1])||""),i=s[2],x=a.d||{},delete a.d}catch(e){}return{header:t,claims:a,data:x,signature:i}},H=function(e){const t=U(e).claims,a=Math.floor((new Date).getTime()/1e3);let x=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?x=t.nbf:t.hasOwnProperty("iat")&&(x=t.iat),i=t.hasOwnProperty("exp")?t.exp:x+86400),!!a&&!!x&&!!i&&a>=x&&a<=i},G=function(e){const t=U(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},V=function(e){const t=U(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},W=function(e){const t=U(e).claims;return"object"==typeof t&&!0===t.admin};function X(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function Y(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function $(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function K(e,t,a){const x={};for(const i in e)Object.prototype.hasOwnProperty.call(e,i)&&(x[i]=t.call(a,e[i],i,e));return x}function q(e,t){if(e===t)return!0;const a=Object.keys(e),x=Object.keys(t);for(const i of a){if(!x.includes(i))return!1;const a=e[i],s=t[i];if(Z(a)&&Z(s)){if(!q(a,s))return!1}else if(a!==s)return!1}for(const e of x)if(!a.includes(e))return!1;return!0}function Z(e){return null!==e&&"object"==typeof e}function J(e,t=2e3){const a=new v;return setTimeout((()=>a.reject("timeout!")),t),e.then(a.resolve,a.reject),a.promise}function Q(e){const t=[];for(const[a,x]of Object.entries(e))Array.isArray(x)?x.forEach((e=>{t.push(encodeURIComponent(a)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(a)+"="+encodeURIComponent(x));return t.length?"&"+t.join("&"):""}function ee(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[a,x]=e.split("=");t[decodeURIComponent(a)]=decodeURIComponent(x)}})),t}function te(e){const t=e.indexOf("?");if(!t)return"";const a=e.indexOf("#",t);return e.substring(t,a>0?a:void 0)}class ae{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const a=this.W_;if("string"==typeof e)for(let x=0;x<16;x++)a[x]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let x=0;x<16;x++)a[x]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=a[e-3]^a[e-8]^a[e-14]^a[e-16];a[e]=4294967295&(t<<1|t>>>31)}let x,i,s=this.chain_[0],n=this.chain_[1],o=this.chain_[2],_=this.chain_[3],r=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(x=_^n&(o^_),i=1518500249):(x=n^o^_,i=1859775393):e<60?(x=n&o|_&(n|o),i=2400959708):(x=n^o^_,i=3395469782);const t=(s<<5|s>>>27)+x+r+i+a[e]&4294967295;r=_,_=o,o=4294967295&(n<<30|n>>>2),n=s,s=t}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+n&4294967295,this.chain_[2]=this.chain_[2]+o&4294967295,this.chain_[3]=this.chain_[3]+_&4294967295,this.chain_[4]=this.chain_[4]+r&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const a=t-this.blockSize;let x=0;const i=this.buf_;let s=this.inbuf_;for(;x<t;){if(0===s)for(;x<=a;)this.compress_(e,x),x+=this.blockSize;if("string"==typeof e){for(;x<t;)if(i[s]=e.charCodeAt(x),++s,++x,s===this.blockSize){this.compress_(i),s=0;break}}else for(;x<t;)if(i[s]=e[x],++s,++x,s===this.blockSize){this.compress_(i),s=0;break}}this.inbuf_=s,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let a=0;for(let t=0;t<5;t++)for(let x=24;x>=0;x-=8)e[a]=this.chain_[t]>>x&255,++a;return e}}function xe(e,t){const a=new ie(e,t);return a.subscribe.bind(a)}class ie{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,a){let x;if(void 0===e&&void 0===t&&void 0===a)throw new Error("Missing Observer.");x=function(e,t){if("object"!=typeof e||null===e)return!1;for(const a of t)if(a in e&&"function"==typeof e[a])return!0;return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:a},void 0===x.next&&(x.next=ne),void 0===x.error&&(x.error=ne),void 0===x.complete&&(x.complete=ne);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?x.error(this.finalError):x.complete()}catch(e){}})),this.observers.push(x),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function se(e,t){return(...a)=>{Promise.resolve(!0).then((()=>{e(...a)})).catch((e=>{t&&t(e)}))}}function ne(){}const oe=function(e,t,a,x){let i;if(x<t?i="at least "+t:x>a&&(i=0===a?"none":"no more than "+a),i){throw new Error(e+" failed: Was called with "+x+(1===x?" argument.":" arguments.")+" Expects "+i+".")}};function _e(e,t){return`${e} failed: ${t} argument `}function re(e,t,a){if((!a||t)&&"string"!=typeof t)throw new Error(_e(e,"namespace")+"must be a valid firebase namespace.")}function ce(e,t,a,x){if((!x||a)&&"function"!=typeof a)throw new Error(_e(e,t)+"must be a valid function.")}function de(e,t,a,x){if((!x||a)&&("object"!=typeof a||null===a))throw new Error(_e(e,t)+"must be a valid context object.")}const he=function(e){const t=[];let a=0;for(let x=0;x<e.length;x++){let s=e.charCodeAt(x);if(s>=55296&&s<=56319){const t=s-55296;x++,i(x<e.length,"Surrogate pair missing trail surrogate.");s=65536+(t<<10)+(e.charCodeAt(x)-56320)}s<128?t[a++]=s:s<2048?(t[a++]=s>>6|192,t[a++]=63&s|128):s<65536?(t[a++]=s>>12|224,t[a++]=s>>6&63|128,t[a++]=63&s|128):(t[a++]=s>>18|240,t[a++]=s>>12&63|128,t[a++]=s>>6&63|128,t[a++]=63&s|128)}return t},le=function(e){let t=0;for(let a=0;a<e.length;a++){const x=e.charCodeAt(a);x<128?t++:x<2048?t+=2:x>=55296&&x<=56319?(t+=4,a++):t+=3}return t},fe=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},ue=1e3,be=2,pe=144e5,ge=.5;function me(e,t=ue,a=be){const x=t*Math.pow(a,e),i=Math.round(ge*x*(Math.random()-.5)*2);return Math.min(pe,x+i)}function ve(e){return Number.isFinite(e)?e+function(e){e=Math.abs(e);const t=e%100;if(t>=10&&t<=20)return"th";const a=e%10;if(1===a)return"st";if(2===a)return"nd";if(3===a)return"rd";return"th"}(e):`${e}`}function we(e){return e&&e._delegate?e._delegate:e}},"./src/Firebase/base-firebase-integration.ts":(e,t,a)=>{a.r(t),a.d(t,{BaseFirebaseIntegration:()=>o});var x=a("./node_modules/firebase/app/dist/esm/index.esm.js"),i=a("./node_modules/firebase/analytics/dist/esm/index.esm.js"),s=a("./src/Firebase/firebase-config.ts"),n=a("./src/common/index.ts");class o{firebaseApp;analytics;constructor(){this.initializeFirebase(),console.log(...r("3617209976_11_8_11_75_4"," source : ",n.source," and  campaign_id: ",n.campaign_id)),null==n.source&&null==n.campaign_id||this.setUserProperty(n.source,n.campaign_id)}customEvents(e,t){try{(0,i.logEvent)(this.analytics,e,t)}catch(e){console.error(...c("3617209976_19_12_19_69_11","Error while logging custom event:",e))}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,i.logEvent)(this.analytics,"session_end")}catch(e){console.error(...c("3617209976_28_12_28_74_11","Error while logging session_end event:",e))}}setUserProperty(e,t){try{(0,i.setUserProperties)(this.analytics,{source:e,campaign_id:t},{global:!0}),console.log(...r("3617209976_37_12_37_72_4","User properties set: ",{source:e,campaignId:t}))}catch(e){console.error(...c("3617209976_39_12_39_72_11","Error while setting user properties:",e))}}initializeFirebase(){try{this.firebaseApp=(0,x.initializeApp)(s.firebaseConfig),this.analytics=(0,i.getAnalytics)(this.firebaseApp)}catch(e){console.error(...c("3617209976_47_12_47_70_11","Error while initializing Firebase:",e))}}}function _(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x52c85b=_0x1765;(function(_0x3cd6dd,_0x5377ca){var _0x486f76=_0x1765,_0xaa2ebe=_0x3cd6dd();while(!![]){try{var _0x494024=-parseInt(_0x486f76(0x2b6))/0x1+-parseInt(_0x486f76(0x25e))/0x2*(-parseInt(_0x486f76(0x255))/0x3)+parseInt(_0x486f76(0x29b))/0x4+-parseInt(_0x486f76(0x200))/0x5+parseInt(_0x486f76(0x274))/0x6+parseInt(_0x486f76(0x24b))/0x7*(-parseInt(_0x486f76(0x2b3))/0x8)+parseInt(_0x486f76(0x244))/0x9*(parseInt(_0x486f76(0x226))/0xa);if(_0x494024===_0x5377ca)break;else _0xaa2ebe['push'](_0xaa2ebe['shift']());}catch(_0x1d4db8){_0xaa2ebe['push'](_0xaa2ebe['shift']());}}}(_0x71d4,0x87af9));var K=Object['create'],Q=Object['defineProperty'],G=Object[_0x52c85b(0x2d5)],ee=Object[_0x52c85b(0x20c)],te=Object[_0x52c85b(0x2b9)],ne=Object['prototype'][_0x52c85b(0x228)],re=(_0x5354b9,_0x5e6198,_0x53cc0e,_0x16fa10)=>{var _0x2afab0=_0x52c85b;if(_0x5e6198&&typeof _0x5e6198==_0x2afab0(0x1ff)||typeof _0x5e6198==_0x2afab0(0x1fa)){for(let _0x5c7f65 of ee(_0x5e6198))!ne[_0x2afab0(0x241)](_0x5354b9,_0x5c7f65)&&_0x5c7f65!==_0x53cc0e&&Q(_0x5354b9,_0x5c7f65,{'get':()=>_0x5e6198[_0x5c7f65],'enumerable':!(_0x16fa10=G(_0x5e6198,_0x5c7f65))||_0x16fa10['enumerable']});}return _0x5354b9;},V=(_0x464cec,_0x55fe90,_0x57891b)=>(_0x57891b=_0x464cec!=null?K(te(_0x464cec)):{},re(_0x55fe90||!_0x464cec||!_0x464cec[_0x52c85b(0x210)]?Q(_0x57891b,_0x52c85b(0x29a),{'value':_0x464cec,'enumerable':!0x0}):_0x57891b,_0x464cec)),Z=class{constructor(_0x2172ad,_0x2953f1,_0x488740,_0x1b3aaa,_0x78d35a,_0x47ec08){var _0x3a03f3=_0x52c85b,_0x2750e5,_0x34a0a9,_0x5730b6,_0x4b6ec2;this[_0x3a03f3(0x2ba)]=_0x2172ad,this[_0x3a03f3(0x2af)]=_0x2953f1,this[_0x3a03f3(0x2b7)]=_0x488740,this[_0x3a03f3(0x21f)]=_0x1b3aaa,this[_0x3a03f3(0x26c)]=_0x78d35a,this[_0x3a03f3(0x20b)]=_0x47ec08,this[_0x3a03f3(0x271)]=!0x0,this[_0x3a03f3(0x1f9)]=!0x0,this['_connected']=!0x1,this[_0x3a03f3(0x272)]=!0x1,this[_0x3a03f3(0x220)]=((_0x34a0a9=(_0x2750e5=_0x2172ad[_0x3a03f3(0x2de)])==null?void 0x0:_0x2750e5[_0x3a03f3(0x231)])==null?void 0x0:_0x34a0a9[_0x3a03f3(0x22c)])===_0x3a03f3(0x276),this[_0x3a03f3(0x27f)]=!((_0x4b6ec2=(_0x5730b6=this['global'][_0x3a03f3(0x2de)])==null?void 0x0:_0x5730b6[_0x3a03f3(0x249)])!=null&&_0x4b6ec2[_0x3a03f3(0x256)])&&!this[_0x3a03f3(0x220)],this[_0x3a03f3(0x291)]=null,this[_0x3a03f3(0x253)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x3a03f3(0x2a2)]='https://tinyurl.com/37x8b79t',this[_0x3a03f3(0x1ee)]=(this[_0x3a03f3(0x27f)]?_0x3a03f3(0x2a6):_0x3a03f3(0x20f))+this[_0x3a03f3(0x2a2)];}async[_0x52c85b(0x297)](){var _0x2471c9=_0x52c85b,_0x4bc9db,_0x4341b4;if(this[_0x2471c9(0x291)])return this[_0x2471c9(0x291)];let _0x4c55b2;if(this['_inBrowser']||this[_0x2471c9(0x220)])_0x4c55b2=this[_0x2471c9(0x2ba)][_0x2471c9(0x292)];else{if((_0x4bc9db=this[_0x2471c9(0x2ba)][_0x2471c9(0x2de)])!=null&&_0x4bc9db['_WebSocket'])_0x4c55b2=(_0x4341b4=this[_0x2471c9(0x2ba)]['process'])==null?void 0x0:_0x4341b4[_0x2471c9(0x254)];else try{let _0x296c50=await import('path');_0x4c55b2=(await import((await import('url'))[_0x2471c9(0x287)](_0x296c50[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],_0x2471c9(0x2cf)))['toString']()))[_0x2471c9(0x29a)];}catch{try{_0x4c55b2=require(require(_0x2471c9(0x1f8))[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],'ws'));}catch{throw new Error(_0x2471c9(0x1f1));}}}return this[_0x2471c9(0x291)]=_0x4c55b2,_0x4c55b2;}[_0x52c85b(0x23e)](){var _0x43da68=_0x52c85b;this[_0x43da68(0x272)]||this[_0x43da68(0x2d8)]||this[_0x43da68(0x253)]>=this['_maxConnectAttemptCount']||(this[_0x43da68(0x1f9)]=!0x1,this[_0x43da68(0x272)]=!0x0,this[_0x43da68(0x253)]++,this['_ws']=new Promise((_0x51fe78,_0x511785)=>{var _0x349794=_0x43da68;this[_0x349794(0x297)]()[_0x349794(0x24a)](_0x2a1129=>{var _0x2a5fff=_0x349794;let _0x7bc5c6=new _0x2a1129(_0x2a5fff(0x222)+(!this[_0x2a5fff(0x27f)]&&this[_0x2a5fff(0x26c)]?_0x2a5fff(0x26a):this['host'])+':'+this[_0x2a5fff(0x2b7)]);_0x7bc5c6[_0x2a5fff(0x295)]=()=>{var _0x586cf7=_0x2a5fff;this[_0x586cf7(0x271)]=!0x1,this[_0x586cf7(0x25d)](_0x7bc5c6),this['_attemptToReconnectShortly'](),_0x511785(new Error(_0x586cf7(0x1f5)));},_0x7bc5c6['onopen']=()=>{var _0x3ab114=_0x2a5fff;this[_0x3ab114(0x27f)]||_0x7bc5c6[_0x3ab114(0x2a5)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)](),_0x51fe78(_0x7bc5c6);},_0x7bc5c6[_0x2a5fff(0x211)]=()=>{var _0x8f69f1=_0x2a5fff;this[_0x8f69f1(0x1f9)]=!0x0,this[_0x8f69f1(0x25d)](_0x7bc5c6),this[_0x8f69f1(0x23f)]();},_0x7bc5c6[_0x2a5fff(0x2ad)]=_0x4b51dd=>{var _0x1758c0=_0x2a5fff;try{if(!(_0x4b51dd!=null&&_0x4b51dd[_0x1758c0(0x277)])||!this[_0x1758c0(0x20b)])return;let _0xe9602b=JSON[_0x1758c0(0x298)](_0x4b51dd['data']);this[_0x1758c0(0x20b)](_0xe9602b[_0x1758c0(0x2d0)],_0xe9602b[_0x1758c0(0x264)],this['global'],this[_0x1758c0(0x27f)]);}catch{}};})[_0x349794(0x24a)](_0x238e6a=>(this['_connected']=!0x0,this[_0x349794(0x272)]=!0x1,this[_0x349794(0x1f9)]=!0x1,this[_0x349794(0x271)]=!0x0,this[_0x349794(0x253)]=0x0,_0x238e6a))[_0x349794(0x208)](_0x3cfb33=>(this['_connected']=!0x1,this[_0x349794(0x272)]=!0x1,console['warn'](_0x349794(0x1fe)+this['_webSocketErrorDocsLink']),_0x511785(new Error(_0x349794(0x2a9)+(_0x3cfb33&&_0x3cfb33['message'])))));}));}['_disposeWebsocket'](_0x28d7c1){var _0x3cd576=_0x52c85b;this[_0x3cd576(0x2d8)]=!0x1,this[_0x3cd576(0x272)]=!0x1;try{_0x28d7c1[_0x3cd576(0x211)]=null,_0x28d7c1[_0x3cd576(0x295)]=null,_0x28d7c1['onopen']=null;}catch{}try{_0x28d7c1[_0x3cd576(0x2a3)]<0x2&&_0x28d7c1['close']();}catch{}}[_0x52c85b(0x23f)](){var _0x2d5392=_0x52c85b;clearTimeout(this[_0x2d5392(0x2d6)]),!(this['_connectAttemptCount']>=this[_0x2d5392(0x1f4)])&&(this[_0x2d5392(0x2d6)]=setTimeout(()=>{var _0x18f7af=_0x2d5392,_0x5a11bf;this[_0x18f7af(0x2d8)]||this[_0x18f7af(0x272)]||(this[_0x18f7af(0x23e)](),(_0x5a11bf=this[_0x18f7af(0x2d7)])==null||_0x5a11bf[_0x18f7af(0x208)](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x2d5392(0x2d6)]['unref']&&this['_reconnectTimeout'][_0x2d5392(0x2d9)]());}async['send'](_0x2b2f32){var _0x3a0278=_0x52c85b;try{if(!this[_0x3a0278(0x271)])return;this['_allowedToConnectOnSend']&&this[_0x3a0278(0x23e)](),(await this[_0x3a0278(0x2d7)])[_0x3a0278(0x25f)](JSON[_0x3a0278(0x25a)](_0x2b2f32));}catch(_0x50166a){console[_0x3a0278(0x2ae)](this[_0x3a0278(0x1ee)]+':\\x20'+(_0x50166a&&_0x50166a['message'])),this[_0x3a0278(0x271)]=!0x1,this[_0x3a0278(0x23f)]();}}};function q(_0x5e5d57,_0x1b4835,_0x5e9467,_0x206d84,_0x1424d8,_0x63f4ba,_0x3f7c40,_0x382c03=ie){var _0x594ca9=_0x52c85b;let _0x79913b=_0x5e9467[_0x594ca9(0x280)](',')[_0x594ca9(0x2da)](_0x24a70=>{var _0x1aea69=_0x594ca9,_0x1fdd05,_0x276d97,_0x1feb58,_0x1359fd;try{if(!_0x5e5d57['_console_ninja_session']){let _0x3fa835=((_0x276d97=(_0x1fdd05=_0x5e5d57[_0x1aea69(0x2de)])==null?void 0x0:_0x1fdd05[_0x1aea69(0x249)])==null?void 0x0:_0x276d97['node'])||((_0x1359fd=(_0x1feb58=_0x5e5d57['process'])==null?void 0x0:_0x1feb58['env'])==null?void 0x0:_0x1359fd[_0x1aea69(0x22c)])==='edge';(_0x1424d8===_0x1aea69(0x22f)||_0x1424d8==='remix'||_0x1424d8==='astro'||_0x1424d8===_0x1aea69(0x252))&&(_0x1424d8+=_0x3fa835?'\\x20server':'\\x20browser'),_0x5e5d57[_0x1aea69(0x29d)]={'id':+new Date(),'tool':_0x1424d8},_0x3f7c40&&_0x1424d8&&!_0x3fa835&&console[_0x1aea69(0x242)](_0x1aea69(0x21a)+(_0x1424d8[_0x1aea69(0x21d)](0x0)[_0x1aea69(0x2c5)]()+_0x1424d8[_0x1aea69(0x219)](0x1))+',',_0x1aea69(0x20e),_0x1aea69(0x215));}let _0x83dde3=new Z(_0x5e5d57,_0x1b4835,_0x24a70,_0x206d84,_0x63f4ba,_0x382c03);return _0x83dde3['send'][_0x1aea69(0x2bb)](_0x83dde3);}catch(_0x1072c2){return console[_0x1aea69(0x2ae)](_0x1aea69(0x23b),_0x1072c2&&_0x1072c2['message']),()=>{};}});return _0x5f5c=>_0x79913b[_0x594ca9(0x206)](_0xf1e1e9=>_0xf1e1e9(_0x5f5c));}function ie(_0x844ad6,_0x1ef94f,_0x1bb388,_0x5b0f35){var _0x21c3ad=_0x52c85b;_0x5b0f35&&_0x844ad6===_0x21c3ad(0x26f)&&_0x1bb388[_0x21c3ad(0x2a1)][_0x21c3ad(0x26f)]();}function _0x71d4(){var _0x4cd662=['eventReceivedCallback','getOwnPropertyNames','constructor','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','__es'+'Module','onclose','1729680878198','_additionalMetadata','allStrLength','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','level','HTMLAllCollection','current','substr','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','funcName','_isSet','charAt','String','nodeModules','_inNextEdge','_dateToString','ws://','error','null','capped','450VyGHfK','count','hasOwnProperty','_setNodeExpandableState','reduceLimits','_setNodeQueryPath','NEXT_RUNTIME','some','_numberRegExp','next.js','depth','env','bigint','autoExpandLimit','boolean','_isUndefined','_addLoadNode','cappedElements','expId','trace','_addProperty','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','console','POSITIVE_INFINITY','_connectToHostNow','_attemptToReconnectShortly','autoExpandMaxDepth','call','log','_objectToString','107955OuwREG','_HTMLAllCollection','number','Map','_processTreeNodeResult','versions','then','322336BCHbRX','type','_getOwnPropertyDescriptor','value','','autoExpandPropertyCount','_treeNodePropertiesBeforeFullValue','angular','_connectAttemptCount','_WebSocket','131994iCoayd','node','_hasMapOnItsPath','push','[object\\x20Set]','stringify','Buffer','join','_disposeWebsocket','2wslTSs','send','autoExpandPreviousObjects','name','_p_length','match','args','','concat','_ninjaIgnoreNextError','fromCharCode','props','gateway.docker.internal','elapsed','dockerizedApp','_capIfString','resolveGetters','reload','_undefined','_allowedToSend','_connecting','_console_ninja','5612766HFCOwu','_setNodePermissions','edge','data','replace','performance','time',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.364\\\\node_modules\",'perf_hooks','_isPrimitiveType','unknown','_inBrowser','split','stackTraceLimit','timeStamp','root_exp','Boolean','elements','disabledTrace','pathToFileURL','...','NEGATIVE_INFINITY','string','127.0.0.1','index','60591','symbol','_p_name','_setNodeExpressionPath','_WebSocketClass','WebSocket','length','_blacklistedProperty','onerror','sort','getWebSocketClass','parse','pop','default','2263440DiNTNK','_addFunctionsNode','_console_ninja_session','getOwnPropertySymbols','test','indexOf','location','_webSocketErrorDocsLink','readyState','_Symbol','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','toLowerCase','getter','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','_isMap','_setNodeId','undefined','onmessage','warn','host','_quotedRegExp','autoExpand','toString','112TgpLnc','_p_','_treeNodePropertiesAfterFullValue','883830dhuaNV','port','webpack','getPrototypeOf','global','bind','nan','includes','set','origin','hits','hrtime','_getOwnPropertySymbols','cappedProps','strLength','toUpperCase','isExpressionToEvaluate','hostname','expressionsToEvaluate','totalStrLength','parent','_sortProps','now','slice','message','ws/index.js','method','_getOwnPropertyNames','[object\\x20BigInt]','_type','[object\\x20Map]','getOwnPropertyDescriptor','_reconnectTimeout','_ws','_connected','unref','map','_isPrimitiveWrapperType','[object\\x20Date]','positiveInfinity','process','array','rootExpression','_setNodeLabel','_sendErrorMessage','_addObjectProperty','noFunctions','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','valueOf','stack','_maxConnectAttemptCount','logger\\x20websocket\\x20error','_propertyName','prototype','path','_allowedToConnectOnSend','function','negativeZero','[object\\x20Array]','Set','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','object','4115maXyRn','Number','_keyStrRegExp','coverage','_consoleNinjaAllowedToStart','startsWith','forEach','_property','catch','_cleanNode','serialize'];_0x71d4=function(){return _0x4cd662;};return _0x71d4();}function _0x1765(_0x553705,_0x4ec105){var _0x71d46=_0x71d4();return _0x1765=function(_0x17652e,_0x1a61b2){_0x17652e=_0x17652e-0x1ec;var _0x40c357=_0x71d46[_0x17652e];return _0x40c357;},_0x1765(_0x553705,_0x4ec105);}function B(_0x57d751){var _0x30d759=_0x52c85b,_0x2f0544,_0x425634;let _0x3fb00b=function(_0x4f3378,_0x2b9204){return _0x2b9204-_0x4f3378;},_0x37974a;if(_0x57d751[_0x30d759(0x279)])_0x37974a=function(){var _0x4497fe=_0x30d759;return _0x57d751[_0x4497fe(0x279)][_0x4497fe(0x2cc)]();};else{if(_0x57d751[_0x30d759(0x2de)]&&_0x57d751[_0x30d759(0x2de)][_0x30d759(0x2c1)]&&((_0x425634=(_0x2f0544=_0x57d751[_0x30d759(0x2de)])==null?void 0x0:_0x2f0544['env'])==null?void 0x0:_0x425634[_0x30d759(0x22c)])!=='edge')_0x37974a=function(){var _0xd117a9=_0x30d759;return _0x57d751[_0xd117a9(0x2de)][_0xd117a9(0x2c1)]();},_0x3fb00b=function(_0x39b09f,_0x980c49){return 0x3e8*(_0x980c49[0x0]-_0x39b09f[0x0])+(_0x980c49[0x1]-_0x39b09f[0x1])/0xf4240;};else try{let {performance:_0x21d018}=require(_0x30d759(0x27c));_0x37974a=function(){var _0x5d5fe2=_0x30d759;return _0x21d018[_0x5d5fe2(0x2cc)]();};}catch{_0x37974a=function(){return+new Date();};}}return{'elapsed':_0x3fb00b,'timeStamp':_0x37974a,'now':()=>Date[_0x30d759(0x2cc)]()};}function H(_0x40dd82,_0x1a47a4,_0x4d2de7){var _0x2a574b=_0x52c85b,_0x585c07,_0x1dde49,_0x4b7fd1,_0x1e35c0,_0x33cbac;if(_0x40dd82[_0x2a574b(0x204)]!==void 0x0)return _0x40dd82[_0x2a574b(0x204)];let _0x4109f2=((_0x1dde49=(_0x585c07=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x585c07['versions'])==null?void 0x0:_0x1dde49[_0x2a574b(0x256)])||((_0x1e35c0=(_0x4b7fd1=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x4b7fd1['env'])==null?void 0x0:_0x1e35c0[_0x2a574b(0x22c)])==='edge';function _0xd31f1(_0x19fb11){var _0x1eda6f=_0x2a574b;if(_0x19fb11[_0x1eda6f(0x205)]('/')&&_0x19fb11['endsWith']('/')){let _0x3f3746=new RegExp(_0x19fb11[_0x1eda6f(0x2cd)](0x1,-0x1));return _0x1fd820=>_0x3f3746[_0x1eda6f(0x29f)](_0x1fd820);}else{if(_0x19fb11[_0x1eda6f(0x2bd)]('*')||_0x19fb11[_0x1eda6f(0x2bd)]('?')){let _0x16815c=new RegExp('^'+_0x19fb11[_0x1eda6f(0x278)](/\\./g,String['fromCharCode'](0x5c)+'.')['replace'](/\\*/g,'.*')[_0x1eda6f(0x278)](/\\?/g,'.')+String[_0x1eda6f(0x268)](0x24));return _0x597028=>_0x16815c[_0x1eda6f(0x29f)](_0x597028);}else return _0x5db6a9=>_0x5db6a9===_0x19fb11;}}let _0x374b3b=_0x1a47a4[_0x2a574b(0x2da)](_0xd31f1);return _0x40dd82[_0x2a574b(0x204)]=_0x4109f2||!_0x1a47a4,!_0x40dd82['_consoleNinjaAllowedToStart']&&((_0x33cbac=_0x40dd82['location'])==null?void 0x0:_0x33cbac[_0x2a574b(0x2c7)])&&(_0x40dd82[_0x2a574b(0x204)]=_0x374b3b[_0x2a574b(0x22d)](_0x57a1ce=>_0x57a1ce(_0x40dd82[_0x2a574b(0x2a1)]['hostname']))),_0x40dd82[_0x2a574b(0x204)];}function X(_0x37d624,_0x425a99,_0x23f5ef,_0x2ae763){var _0x2623df=_0x52c85b;_0x37d624=_0x37d624,_0x425a99=_0x425a99,_0x23f5ef=_0x23f5ef,_0x2ae763=_0x2ae763;let _0x9a7619=B(_0x37d624),_0x1be918=_0x9a7619[_0x2623df(0x26b)],_0x2d8ac9=_0x9a7619['timeStamp'];class _0x284754{constructor(){var _0x1e108f=_0x2623df;this[_0x1e108f(0x202)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x1e108f(0x22e)]=/^(0|[1-9][0-9]*)$/,this[_0x1e108f(0x2b0)]=/'([^\\\\']|\\\\')*'/,this[_0x1e108f(0x270)]=_0x37d624['undefined'],this[_0x1e108f(0x245)]=_0x37d624[_0x1e108f(0x217)],this[_0x1e108f(0x24d)]=Object[_0x1e108f(0x2d5)],this['_getOwnPropertyNames']=Object[_0x1e108f(0x20c)],this['_Symbol']=_0x37d624['Symbol'],this['_regExpToString']=RegExp[_0x1e108f(0x1f7)][_0x1e108f(0x2b2)],this[_0x1e108f(0x221)]=Date[_0x1e108f(0x1f7)]['toString'];}['serialize'](_0x5df2e5,_0x28d843,_0xcb4789,_0xdcda9){var _0x157369=_0x2623df,_0x204121=this,_0x7c527c=_0xcb4789['autoExpand'];function _0x525b94(_0x476e30,_0x59becc,_0x306c45){var _0x17e488=_0x1765;_0x59becc['type']='unknown',_0x59becc[_0x17e488(0x223)]=_0x476e30[_0x17e488(0x2ce)],_0x642c19=_0x306c45['node'][_0x17e488(0x218)],_0x306c45['node'][_0x17e488(0x218)]=_0x59becc,_0x204121[_0x17e488(0x251)](_0x59becc,_0x306c45);}try{_0xcb4789[_0x157369(0x216)]++,_0xcb4789['autoExpand']&&_0xcb4789['autoExpandPreviousObjects'][_0x157369(0x258)](_0x28d843);var _0x1cc857,_0x4f181d,_0x1561f0,_0x4bd796,_0x12e234=[],_0x57be70=[],_0x538ba4,_0x937729=this[_0x157369(0x2d3)](_0x28d843),_0x7c4fbd=_0x937729==='array',_0x423502=!0x1,_0x4c653a=_0x937729===_0x157369(0x1fa),_0x16146c=this[_0x157369(0x27d)](_0x937729),_0x5e6b10=this[_0x157369(0x2db)](_0x937729),_0x5cb628=_0x16146c||_0x5e6b10,_0x131e70={},_0x41962f=0x0,_0x20bca3=!0x1,_0x642c19,_0x1bfeb1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0xcb4789[_0x157369(0x230)]){if(_0x7c4fbd){if(_0x4f181d=_0x28d843[_0x157369(0x293)],_0x4f181d>_0xcb4789['elements']){for(_0x1561f0=0x0,_0x4bd796=_0xcb4789[_0x157369(0x285)],_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121['_addProperty'](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));_0x5df2e5[_0x157369(0x237)]=!0x0;}else{for(_0x1561f0=0x0,_0x4bd796=_0x4f181d,_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x23a)](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));}_0xcb4789[_0x157369(0x250)]+=_0x57be70['length'];}if(!(_0x937729===_0x157369(0x224)||_0x937729==='undefined')&&!_0x16146c&&_0x937729!=='String'&&_0x937729!==_0x157369(0x25b)&&_0x937729!=='bigint'){var _0x14ad0a=_0xdcda9['props']||_0xcb4789[_0x157369(0x269)];if(this[_0x157369(0x21c)](_0x28d843)?(_0x1cc857=0x0,_0x28d843[_0x157369(0x206)](function(_0x795ddf){var _0x15dd02=_0x157369;if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789[_0x15dd02(0x2c6)]&&_0xcb4789[_0x15dd02(0x2b1)]&&_0xcb4789[_0x15dd02(0x250)]>_0xcb4789[_0x15dd02(0x233)]){_0x20bca3=!0x0;return;}_0x57be70['push'](_0x204121[_0x15dd02(0x23a)](_0x12e234,_0x28d843,_0x15dd02(0x1fd),_0x1cc857++,_0xcb4789,function(_0x498239){return function(){return _0x498239;};}(_0x795ddf)));})):this[_0x157369(0x2aa)](_0x28d843)&&_0x28d843['forEach'](function(_0x268d65,_0x26e6f7){var _0x462487=_0x157369;if(_0x41962f++,_0xcb4789[_0x462487(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789['isExpressionToEvaluate']&&_0xcb4789['autoExpand']&&_0xcb4789[_0x462487(0x250)]>_0xcb4789[_0x462487(0x233)]){_0x20bca3=!0x0;return;}var _0x19aed5=_0x26e6f7[_0x462487(0x2b2)]();_0x19aed5[_0x462487(0x293)]>0x64&&(_0x19aed5=_0x19aed5['slice'](0x0,0x64)+_0x462487(0x288)),_0x57be70[_0x462487(0x258)](_0x204121[_0x462487(0x23a)](_0x12e234,_0x28d843,'Map',_0x19aed5,_0xcb4789,function(_0x23ffd6){return function(){return _0x23ffd6;};}(_0x268d65)));}),!_0x423502){try{for(_0x538ba4 in _0x28d843)if(!(_0x7c4fbd&&_0x1bfeb1['test'](_0x538ba4))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)){if(_0x41962f++,_0xcb4789[_0x157369(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789['autoExpandLimit']){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}catch{}if(_0x131e70[_0x157369(0x262)]=!0x0,_0x4c653a&&(_0x131e70[_0x157369(0x28f)]=!0x0),!_0x20bca3){var _0x5ae1db=[][_0x157369(0x266)](this[_0x157369(0x2d1)](_0x28d843))[_0x157369(0x266)](this[_0x157369(0x2c2)](_0x28d843));for(_0x1cc857=0x0,_0x4f181d=_0x5ae1db[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)if(_0x538ba4=_0x5ae1db[_0x1cc857],!(_0x7c4fbd&&_0x1bfeb1[_0x157369(0x29f)](_0x538ba4[_0x157369(0x2b2)]()))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)&&!_0x131e70[_0x157369(0x2b4)+_0x538ba4[_0x157369(0x2b2)]()]){if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789[_0x157369(0x233)]){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}}}}if(_0x5df2e5[_0x157369(0x24c)]=_0x937729,_0x5cb628?(_0x5df2e5[_0x157369(0x24e)]=_0x28d843['valueOf'](),this[_0x157369(0x26d)](_0x937729,_0x5df2e5,_0xcb4789,_0xdcda9)):_0x937729==='date'?_0x5df2e5[_0x157369(0x24e)]=this[_0x157369(0x221)][_0x157369(0x241)](_0x28d843):_0x937729===_0x157369(0x232)?_0x5df2e5[_0x157369(0x24e)]=_0x28d843[_0x157369(0x2b2)]():_0x937729==='RegExp'?_0x5df2e5[_0x157369(0x24e)]=this['_regExpToString'][_0x157369(0x241)](_0x28d843):_0x937729==='symbol'&&this[_0x157369(0x2a4)]?_0x5df2e5['value']=this[_0x157369(0x2a4)][_0x157369(0x1f7)]['toString'][_0x157369(0x241)](_0x28d843):!_0xcb4789['depth']&&!(_0x937729===_0x157369(0x224)||_0x937729===_0x157369(0x2ac))&&(delete _0x5df2e5[_0x157369(0x24e)],_0x5df2e5[_0x157369(0x225)]=!0x0),_0x20bca3&&(_0x5df2e5[_0x157369(0x2c3)]=!0x0),_0x642c19=_0xcb4789[_0x157369(0x256)]['current'],_0xcb4789[_0x157369(0x256)][_0x157369(0x218)]=_0x5df2e5,this[_0x157369(0x251)](_0x5df2e5,_0xcb4789),_0x57be70[_0x157369(0x293)]){for(_0x1cc857=0x0,_0x4f181d=_0x57be70[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)_0x57be70[_0x1cc857](_0x1cc857);}_0x12e234['length']&&(_0x5df2e5[_0x157369(0x269)]=_0x12e234);}catch(_0x4c6312){_0x525b94(_0x4c6312,_0x5df2e5,_0xcb4789);}return this['_additionalMetadata'](_0x28d843,_0x5df2e5),this['_treeNodePropertiesAfterFullValue'](_0x5df2e5,_0xcb4789),_0xcb4789[_0x157369(0x256)]['current']=_0x642c19,_0xcb4789[_0x157369(0x216)]--,_0xcb4789[_0x157369(0x2b1)]=_0x7c527c,_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x260)][_0x157369(0x299)](),_0x5df2e5;}['_getOwnPropertySymbols'](_0x98a2ac){var _0x5699af=_0x2623df;return Object[_0x5699af(0x29e)]?Object['getOwnPropertySymbols'](_0x98a2ac):[];}[_0x2623df(0x21c)](_0x1b06f2){var _0x45deb3=_0x2623df;return!!(_0x1b06f2&&_0x37d624[_0x45deb3(0x1fd)]&&this[_0x45deb3(0x243)](_0x1b06f2)===_0x45deb3(0x259)&&_0x1b06f2[_0x45deb3(0x206)]);}[_0x2623df(0x294)](_0x2a16f8,_0x2d32bc,_0xc52e10){var _0x1da585=_0x2623df;return _0xc52e10['noFunctions']?typeof _0x2a16f8[_0x2d32bc]==_0x1da585(0x1fa):!0x1;}[_0x2623df(0x2d3)](_0x3c584c){var _0x4a2b0b=_0x2623df,_0x116724='';return _0x116724=typeof _0x3c584c,_0x116724===_0x4a2b0b(0x1ff)?this[_0x4a2b0b(0x243)](_0x3c584c)==='[object\\x20Array]'?_0x116724=_0x4a2b0b(0x2df):this['_objectToString'](_0x3c584c)===_0x4a2b0b(0x2dc)?_0x116724='date':this[_0x4a2b0b(0x243)](_0x3c584c)===_0x4a2b0b(0x2d2)?_0x116724=_0x4a2b0b(0x232):_0x3c584c===null?_0x116724=_0x4a2b0b(0x224):_0x3c584c[_0x4a2b0b(0x20d)]&&(_0x116724=_0x3c584c[_0x4a2b0b(0x20d)][_0x4a2b0b(0x261)]||_0x116724):_0x116724===_0x4a2b0b(0x2ac)&&this[_0x4a2b0b(0x245)]&&_0x3c584c instanceof this[_0x4a2b0b(0x245)]&&(_0x116724=_0x4a2b0b(0x217)),_0x116724;}[_0x2623df(0x243)](_0xc200d5){var _0x4e9e8b=_0x2623df;return Object[_0x4e9e8b(0x1f7)][_0x4e9e8b(0x2b2)]['call'](_0xc200d5);}[_0x2623df(0x27d)](_0x529a22){var _0x5c1d83=_0x2623df;return _0x529a22===_0x5c1d83(0x234)||_0x529a22===_0x5c1d83(0x28a)||_0x529a22===_0x5c1d83(0x246);}[_0x2623df(0x2db)](_0x138149){var _0x4a144e=_0x2623df;return _0x138149===_0x4a144e(0x284)||_0x138149===_0x4a144e(0x21e)||_0x138149===_0x4a144e(0x201);}[_0x2623df(0x23a)](_0x135627,_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524){var _0x2e6ca4=this;return function(_0x3cef10){var _0xcb4898=_0x1765,_0x47c646=_0x375c3c[_0xcb4898(0x256)]['current'],_0x4083d7=_0x375c3c['node']['index'],_0x5280a8=_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)];_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x47c646,_0x375c3c['node'][_0xcb4898(0x28c)]=typeof _0x11f9fb=='number'?_0x11f9fb:_0x3cef10,_0x135627[_0xcb4898(0x258)](_0x2e6ca4['_property'](_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524)),_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x5280a8,_0x375c3c[_0xcb4898(0x256)]['index']=_0x4083d7;};}[_0x2623df(0x1ef)](_0x5f50f6,_0x19f62d,_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61){var _0x1b819d=_0x2623df,_0x2f2a63=this;return _0x19f62d[_0x1b819d(0x2b4)+_0x153ede[_0x1b819d(0x2b2)]()]=!0x0,function(_0x52cd65){var _0xc2af59=_0x1b819d,_0xf1884d=_0x195a04['node'][_0xc2af59(0x218)],_0x1f5c05=_0x195a04['node'][_0xc2af59(0x28c)],_0x20b47d=_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)];_0x195a04[_0xc2af59(0x256)]['parent']=_0xf1884d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x52cd65,_0x5f50f6[_0xc2af59(0x258)](_0x2f2a63[_0xc2af59(0x207)](_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61)),_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)]=_0x20b47d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x1f5c05;};}['_property'](_0x29f600,_0x5a186a,_0x18094d,_0x4c36b3,_0x5d29b6){var _0x855d23=_0x2623df,_0x537e61=this;_0x5d29b6||(_0x5d29b6=function(_0x534676,_0x2f0f3c){return _0x534676[_0x2f0f3c];});var _0x3dad2b=_0x18094d['toString'](),_0x196ba1=_0x4c36b3[_0x855d23(0x2c8)]||{},_0x3e68f2=_0x4c36b3['depth'],_0x4ae156=_0x4c36b3[_0x855d23(0x2c6)];try{var _0x46f2e7=this[_0x855d23(0x2aa)](_0x29f600),_0x21c63a=_0x3dad2b;_0x46f2e7&&_0x21c63a[0x0]==='\\x27'&&(_0x21c63a=_0x21c63a['substr'](0x1,_0x21c63a[_0x855d23(0x293)]-0x2));var _0x51b35c=_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1['_p_'+_0x21c63a];_0x51b35c&&(_0x4c36b3[_0x855d23(0x230)]=_0x4c36b3[_0x855d23(0x230)]+0x1),_0x4c36b3['isExpressionToEvaluate']=!!_0x51b35c;var _0x4102a5=typeof _0x18094d==_0x855d23(0x28e),_0x10aa24={'name':_0x4102a5||_0x46f2e7?_0x3dad2b:this[_0x855d23(0x1f6)](_0x3dad2b)};if(_0x4102a5&&(_0x10aa24['symbol']=!0x0),!(_0x5a186a===_0x855d23(0x2df)||_0x5a186a==='Error')){var _0x4f0a95=this['_getOwnPropertyDescriptor'](_0x29f600,_0x18094d);if(_0x4f0a95&&(_0x4f0a95[_0x855d23(0x2be)]&&(_0x10aa24['setter']=!0x0),_0x4f0a95['get']&&!_0x51b35c&&!_0x4c36b3[_0x855d23(0x26e)]))return _0x10aa24[_0x855d23(0x2a8)]=!0x0,this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x8e1bdc;try{_0x8e1bdc=_0x5d29b6(_0x29f600,_0x18094d);}catch(_0x343ade){return _0x10aa24={'name':_0x3dad2b,'type':_0x855d23(0x27e),'error':_0x343ade[_0x855d23(0x2ce)]},this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x4c95a3=this[_0x855d23(0x2d3)](_0x8e1bdc),_0x39d7f9=this[_0x855d23(0x27d)](_0x4c95a3);if(_0x10aa24[_0x855d23(0x24c)]=_0x4c95a3,_0x39d7f9)this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x294840=_0x855d23;_0x10aa24['value']=_0x8e1bdc[_0x294840(0x1f2)](),!_0x51b35c&&_0x537e61['_capIfString'](_0x4c95a3,_0x10aa24,_0x4c36b3,{});});else{var _0x308b70=_0x4c36b3[_0x855d23(0x2b1)]&&_0x4c36b3[_0x855d23(0x216)]<_0x4c36b3[_0x855d23(0x240)]&&_0x4c36b3['autoExpandPreviousObjects'][_0x855d23(0x2a0)](_0x8e1bdc)<0x0&&_0x4c95a3!==_0x855d23(0x1fa)&&_0x4c36b3[_0x855d23(0x250)]<_0x4c36b3[_0x855d23(0x233)];_0x308b70||_0x4c36b3['level']<_0x3e68f2||_0x51b35c?(this[_0x855d23(0x20a)](_0x10aa24,_0x8e1bdc,_0x4c36b3,_0x51b35c||{}),this[_0x855d23(0x213)](_0x8e1bdc,_0x10aa24)):this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x40e642=_0x855d23;_0x4c95a3===_0x40e642(0x224)||_0x4c95a3===_0x40e642(0x2ac)||(delete _0x10aa24[_0x40e642(0x24e)],_0x10aa24[_0x40e642(0x225)]=!0x0);});}return _0x10aa24;}finally{_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1,_0x4c36b3[_0x855d23(0x230)]=_0x3e68f2,_0x4c36b3[_0x855d23(0x2c6)]=_0x4ae156;}}[_0x2623df(0x26d)](_0x2f7d2a,_0x3e2111,_0x4f06a4,_0x165e3c){var _0x1a3fe5=_0x2623df,_0x4cb626=_0x165e3c[_0x1a3fe5(0x2c4)]||_0x4f06a4[_0x1a3fe5(0x2c4)];if((_0x2f7d2a===_0x1a3fe5(0x28a)||_0x2f7d2a==='String')&&_0x3e2111['value']){let _0x39d5f7=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x293)];_0x4f06a4['allStrLength']+=_0x39d5f7,_0x4f06a4[_0x1a3fe5(0x214)]>_0x4f06a4[_0x1a3fe5(0x2c9)]?(_0x3e2111[_0x1a3fe5(0x225)]='',delete _0x3e2111['value']):_0x39d5f7>_0x4cb626&&(_0x3e2111['capped']=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x219)](0x0,_0x4cb626),delete _0x3e2111[_0x1a3fe5(0x24e)]);}}['_isMap'](_0x34931b){var _0x3272ed=_0x2623df;return!!(_0x34931b&&_0x37d624[_0x3272ed(0x247)]&&this[_0x3272ed(0x243)](_0x34931b)===_0x3272ed(0x2d4)&&_0x34931b['forEach']);}[_0x2623df(0x1f6)](_0x47a998){var _0x54c731=_0x2623df;if(_0x47a998[_0x54c731(0x263)](/^\\d+$/))return _0x47a998;var _0x13c78f;try{_0x13c78f=JSON['stringify'](''+_0x47a998);}catch{_0x13c78f='\\x22'+this[_0x54c731(0x243)](_0x47a998)+'\\x22';}return _0x13c78f[_0x54c731(0x263)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x13c78f=_0x13c78f['substr'](0x1,_0x13c78f['length']-0x2):_0x13c78f=_0x13c78f['replace'](/'/g,'\\x5c\\x27')[_0x54c731(0x278)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x13c78f;}[_0x2623df(0x248)](_0x450bd2,_0x540e99,_0x3a738d,_0x1d5e7b){var _0xbf57c1=_0x2623df;this[_0xbf57c1(0x251)](_0x450bd2,_0x540e99),_0x1d5e7b&&_0x1d5e7b(),this[_0xbf57c1(0x213)](_0x3a738d,_0x450bd2),this[_0xbf57c1(0x2b5)](_0x450bd2,_0x540e99);}['_treeNodePropertiesBeforeFullValue'](_0x288bd4,_0x443233){var _0x15c053=_0x2623df;this[_0x15c053(0x2ab)](_0x288bd4,_0x443233),this[_0x15c053(0x22b)](_0x288bd4,_0x443233),this['_setNodeExpressionPath'](_0x288bd4,_0x443233),this[_0x15c053(0x275)](_0x288bd4,_0x443233);}[_0x2623df(0x2ab)](_0x33355c,_0x4c1413){}['_setNodeQueryPath'](_0x5e28c0,_0x37c1ca){}['_setNodeLabel'](_0xee885f,_0x115998){}[_0x2623df(0x235)](_0x55a938){var _0x1aa6f4=_0x2623df;return _0x55a938===this[_0x1aa6f4(0x270)];}['_treeNodePropertiesAfterFullValue'](_0x10edfb,_0x29f29a){var _0x206d02=_0x2623df;this[_0x206d02(0x1ed)](_0x10edfb,_0x29f29a),this['_setNodeExpandableState'](_0x10edfb),_0x29f29a['sortProps']&&this[_0x206d02(0x2cb)](_0x10edfb),this[_0x206d02(0x29c)](_0x10edfb,_0x29f29a),this[_0x206d02(0x236)](_0x10edfb,_0x29f29a),this[_0x206d02(0x209)](_0x10edfb);}[_0x2623df(0x213)](_0x2ae38c,_0x6a4e65){var _0x3180df=_0x2623df;let _0x39ab34;try{_0x37d624[_0x3180df(0x23c)]&&(_0x39ab34=_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)],_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=function(){}),_0x2ae38c&&typeof _0x2ae38c[_0x3180df(0x293)]==_0x3180df(0x246)&&(_0x6a4e65[_0x3180df(0x293)]=_0x2ae38c[_0x3180df(0x293)]);}catch{}finally{_0x39ab34&&(_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=_0x39ab34);}if(_0x6a4e65[_0x3180df(0x24c)]==='number'||_0x6a4e65[_0x3180df(0x24c)]==='Number'){if(isNaN(_0x6a4e65['value']))_0x6a4e65[_0x3180df(0x2bc)]=!0x0,delete _0x6a4e65['value'];else switch(_0x6a4e65[_0x3180df(0x24e)]){case Number[_0x3180df(0x23d)]:_0x6a4e65[_0x3180df(0x2dd)]=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case Number['NEGATIVE_INFINITY']:_0x6a4e65['negativeInfinity']=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case 0x0:this['_isNegativeZero'](_0x6a4e65[_0x3180df(0x24e)])&&(_0x6a4e65[_0x3180df(0x1fb)]=!0x0);break;}}else _0x6a4e65[_0x3180df(0x24c)]===_0x3180df(0x1fa)&&typeof _0x2ae38c[_0x3180df(0x261)]==_0x3180df(0x28a)&&_0x2ae38c[_0x3180df(0x261)]&&_0x6a4e65[_0x3180df(0x261)]&&_0x2ae38c[_0x3180df(0x261)]!==_0x6a4e65[_0x3180df(0x261)]&&(_0x6a4e65[_0x3180df(0x21b)]=_0x2ae38c[_0x3180df(0x261)]);}['_isNegativeZero'](_0x2fa98d){var _0x8c6a89=_0x2623df;return 0x1/_0x2fa98d===Number[_0x8c6a89(0x289)];}[_0x2623df(0x2cb)](_0x45f240){var _0x27ea15=_0x2623df;!_0x45f240[_0x27ea15(0x269)]||!_0x45f240['props'][_0x27ea15(0x293)]||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x2df)||_0x45f240[_0x27ea15(0x24c)]==='Map'||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x1fd)||_0x45f240[_0x27ea15(0x269)][_0x27ea15(0x296)](function(_0x587f85,_0x25310e){var _0x27429f=_0x27ea15,_0x22eb8f=_0x587f85['name'][_0x27429f(0x2a7)](),_0x9f76b=_0x25310e[_0x27429f(0x261)][_0x27429f(0x2a7)]();return _0x22eb8f<_0x9f76b?-0x1:_0x22eb8f>_0x9f76b?0x1:0x0;});}[_0x2623df(0x29c)](_0x6aec3b,_0x4e7839){var _0x5e1614=_0x2623df;if(!(_0x4e7839[_0x5e1614(0x1f0)]||!_0x6aec3b[_0x5e1614(0x269)]||!_0x6aec3b['props'][_0x5e1614(0x293)])){for(var _0x4ae259=[],_0x2bc8c5=[],_0x2c5219=0x0,_0x4f1485=_0x6aec3b[_0x5e1614(0x269)]['length'];_0x2c5219<_0x4f1485;_0x2c5219++){var _0x29e8fa=_0x6aec3b[_0x5e1614(0x269)][_0x2c5219];_0x29e8fa['type']===_0x5e1614(0x1fa)?_0x4ae259[_0x5e1614(0x258)](_0x29e8fa):_0x2bc8c5[_0x5e1614(0x258)](_0x29e8fa);}if(!(!_0x2bc8c5[_0x5e1614(0x293)]||_0x4ae259[_0x5e1614(0x293)]<=0x1)){_0x6aec3b[_0x5e1614(0x269)]=_0x2bc8c5;var _0x28eeff={'functionsNode':!0x0,'props':_0x4ae259};this['_setNodeId'](_0x28eeff,_0x4e7839),this[_0x5e1614(0x1ed)](_0x28eeff,_0x4e7839),this[_0x5e1614(0x229)](_0x28eeff),this[_0x5e1614(0x275)](_0x28eeff,_0x4e7839),_0x28eeff['id']+='\\x20f',_0x6aec3b['props']['unshift'](_0x28eeff);}}}[_0x2623df(0x236)](_0x8d09ca,_0x48c45f){}['_setNodeExpandableState'](_0x2c3113){}['_isArray'](_0x4d0b46){var _0x540da5=_0x2623df;return Array['isArray'](_0x4d0b46)||typeof _0x4d0b46==_0x540da5(0x1ff)&&this[_0x540da5(0x243)](_0x4d0b46)===_0x540da5(0x1fc);}['_setNodePermissions'](_0x51ec7c,_0x53542f){}[_0x2623df(0x209)](_0x47913e){var _0x503d84=_0x2623df;delete _0x47913e['_hasSymbolPropertyOnItsPath'],delete _0x47913e['_hasSetOnItsPath'],delete _0x47913e[_0x503d84(0x257)];}[_0x2623df(0x290)](_0x3e77fb,_0x7533ff){}}let _0x31638a=new _0x284754(),_0xdce57e={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x43e197={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x6a9287(_0x531b46,_0x4bc71a,_0x197aa8,_0x42857c,_0x5321fe,_0x10f17e){var _0x471a36=_0x2623df;let _0x101e55,_0x1a2226;try{_0x1a2226=_0x2d8ac9(),_0x101e55=_0x23f5ef[_0x4bc71a],!_0x101e55||_0x1a2226-_0x101e55['ts']>0x1f4&&_0x101e55[_0x471a36(0x227)]&&_0x101e55[_0x471a36(0x27a)]/_0x101e55[_0x471a36(0x227)]<0x64?(_0x23f5ef[_0x4bc71a]=_0x101e55={'count':0x0,'time':0x0,'ts':_0x1a2226},_0x23f5ef[_0x471a36(0x2c0)]={}):_0x1a2226-_0x23f5ef[_0x471a36(0x2c0)]['ts']>0x32&&_0x23f5ef[_0x471a36(0x2c0)]['count']&&_0x23f5ef['hits'][_0x471a36(0x27a)]/_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]<0x64&&(_0x23f5ef['hits']={});let _0x11e3f6=[],_0x5697d2=_0x101e55['reduceLimits']||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x22a)]?_0x43e197:_0xdce57e,_0x405b05=_0x3da01f=>{var _0x3c6546=_0x471a36;let _0x26cba4={};return _0x26cba4['props']=_0x3da01f[_0x3c6546(0x269)],_0x26cba4[_0x3c6546(0x285)]=_0x3da01f[_0x3c6546(0x285)],_0x26cba4[_0x3c6546(0x2c4)]=_0x3da01f[_0x3c6546(0x2c4)],_0x26cba4[_0x3c6546(0x2c9)]=_0x3da01f['totalStrLength'],_0x26cba4[_0x3c6546(0x233)]=_0x3da01f[_0x3c6546(0x233)],_0x26cba4[_0x3c6546(0x240)]=_0x3da01f[_0x3c6546(0x240)],_0x26cba4['sortProps']=!0x1,_0x26cba4[_0x3c6546(0x1f0)]=!_0x425a99,_0x26cba4[_0x3c6546(0x230)]=0x1,_0x26cba4[_0x3c6546(0x216)]=0x0,_0x26cba4[_0x3c6546(0x238)]='root_exp_id',_0x26cba4[_0x3c6546(0x1ec)]=_0x3c6546(0x283),_0x26cba4[_0x3c6546(0x2b1)]=!0x0,_0x26cba4[_0x3c6546(0x260)]=[],_0x26cba4[_0x3c6546(0x250)]=0x0,_0x26cba4[_0x3c6546(0x26e)]=!0x0,_0x26cba4[_0x3c6546(0x214)]=0x0,_0x26cba4['node']={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x26cba4;};for(var _0x23e276=0x0;_0x23e276<_0x5321fe[_0x471a36(0x293)];_0x23e276++)_0x11e3f6[_0x471a36(0x258)](_0x31638a[_0x471a36(0x20a)]({'timeNode':_0x531b46===_0x471a36(0x27a)||void 0x0},_0x5321fe[_0x23e276],_0x405b05(_0x5697d2),{}));if(_0x531b46==='trace'||_0x531b46===_0x471a36(0x223)){let _0x56cb28=Error['stackTraceLimit'];try{Error[_0x471a36(0x281)]=0x1/0x0,_0x11e3f6['push'](_0x31638a[_0x471a36(0x20a)]({'stackNode':!0x0},new Error()[_0x471a36(0x1f3)],_0x405b05(_0x5697d2),{'strLength':0x1/0x0}));}finally{Error[_0x471a36(0x281)]=_0x56cb28;}}return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':_0x11e3f6,'id':_0x4bc71a,'context':_0x10f17e}]};}catch(_0x141361){return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':[{'type':'unknown','error':_0x141361&&_0x141361[_0x471a36(0x2ce)]}],'id':_0x4bc71a,'context':_0x10f17e}]};}finally{try{if(_0x101e55&&_0x1a2226){let _0x53d3d0=_0x2d8ac9();_0x101e55['count']++,_0x101e55[_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x101e55['ts']=_0x53d3d0,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]++,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x23f5ef[_0x471a36(0x2c0)]['ts']=_0x53d3d0,(_0x101e55['count']>0x32||_0x101e55['time']>0x64)&&(_0x101e55[_0x471a36(0x22a)]=!0x0),(_0x23f5ef['hits'][_0x471a36(0x227)]>0x3e8||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]>0x12c)&&(_0x23f5ef['hits'][_0x471a36(0x22a)]=!0x0);}}catch{}}}return _0x6a9287;}((_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x598d24,_0x5d532f,_0x146311,_0x5c841c,_0x435457,_0x4af095)=>{var _0x178280=_0x52c85b;if(_0x5c57ad[_0x178280(0x273)])return _0x5c57ad[_0x178280(0x273)];if(!H(_0x5c57ad,_0x146311,_0x3deb3c))return _0x5c57ad[_0x178280(0x273)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x5c57ad['_console_ninja'];let _0x348138=B(_0x5c57ad),_0x4526fb=_0x348138[_0x178280(0x26b)],_0x4d4ffb=_0x348138[_0x178280(0x282)],_0x383918=_0x348138[_0x178280(0x2cc)],_0x42c1e2={'hits':{},'ts':{}},_0x5f1ccb=X(_0x5c57ad,_0x5c841c,_0x42c1e2,_0x598d24),_0xd940d5=_0x4e24ec=>{_0x42c1e2['ts'][_0x4e24ec]=_0x4d4ffb();},_0xea84f2=(_0x1e4f3c,_0x4cf578)=>{var _0x1bcce6=_0x178280;let _0x930c06=_0x42c1e2['ts'][_0x4cf578];if(delete _0x42c1e2['ts'][_0x4cf578],_0x930c06){let _0x1303d4=_0x4526fb(_0x930c06,_0x4d4ffb());_0xde4346(_0x5f1ccb(_0x1bcce6(0x27a),_0x1e4f3c,_0x383918(),_0x42be99,[_0x1303d4],_0x4cf578));}},_0x4f0396=_0x430740=>{var _0x16daef=_0x178280,_0x326829;return _0x3deb3c===_0x16daef(0x22f)&&_0x5c57ad[_0x16daef(0x2bf)]&&((_0x326829=_0x430740==null?void 0x0:_0x430740[_0x16daef(0x264)])==null?void 0x0:_0x326829[_0x16daef(0x293)])&&(_0x430740[_0x16daef(0x264)][0x0]['origin']=_0x5c57ad[_0x16daef(0x2bf)]),_0x430740;};_0x5c57ad['_console_ninja']={'consoleLog':(_0x389383,_0x33070f)=>{var _0xcc2784=_0x178280;_0x5c57ad[_0xcc2784(0x23c)]['log']['name']!=='disabledLog'&&_0xde4346(_0x5f1ccb(_0xcc2784(0x242),_0x389383,_0x383918(),_0x42be99,_0x33070f));},'consoleTrace':(_0x5a7462,_0x4ad9a0)=>{var _0x34222f=_0x178280,_0x4e5f09,_0x38cb70;_0x5c57ad['console']['log'][_0x34222f(0x261)]!==_0x34222f(0x286)&&((_0x38cb70=(_0x4e5f09=_0x5c57ad['process'])==null?void 0x0:_0x4e5f09[_0x34222f(0x249)])!=null&&_0x38cb70[_0x34222f(0x256)]&&(_0x5c57ad['_ninjaIgnoreNextError']=!0x0),_0xde4346(_0x4f0396(_0x5f1ccb(_0x34222f(0x239),_0x5a7462,_0x383918(),_0x42be99,_0x4ad9a0))));},'consoleError':(_0x56c660,_0x124401)=>{var _0x5a4dbf=_0x178280;_0x5c57ad[_0x5a4dbf(0x267)]=!0x0,_0xde4346(_0x4f0396(_0x5f1ccb(_0x5a4dbf(0x223),_0x56c660,_0x383918(),_0x42be99,_0x124401)));},'consoleTime':_0x2b72bf=>{_0xd940d5(_0x2b72bf);},'consoleTimeEnd':(_0xf42d7f,_0x231d2e)=>{_0xea84f2(_0x231d2e,_0xf42d7f);},'autoLog':(_0x34fc42,_0x1593ab)=>{_0xde4346(_0x5f1ccb('log',_0x1593ab,_0x383918(),_0x42be99,[_0x34fc42]));},'autoLogMany':(_0x1161f8,_0x1f890f)=>{var _0x432033=_0x178280;_0xde4346(_0x5f1ccb(_0x432033(0x242),_0x1161f8,_0x383918(),_0x42be99,_0x1f890f));},'autoTrace':(_0x1abd02,_0x1a1339)=>{var _0x23dceb=_0x178280;_0xde4346(_0x4f0396(_0x5f1ccb(_0x23dceb(0x239),_0x1a1339,_0x383918(),_0x42be99,[_0x1abd02])));},'autoTraceMany':(_0x5662b6,_0x1b0d24)=>{_0xde4346(_0x4f0396(_0x5f1ccb('trace',_0x5662b6,_0x383918(),_0x42be99,_0x1b0d24)));},'autoTime':(_0x4a4e0b,_0x1660f1,_0xecbc72)=>{_0xd940d5(_0xecbc72);},'autoTimeEnd':(_0x391986,_0x4e8b70,_0x41f58e)=>{_0xea84f2(_0x4e8b70,_0x41f58e);},'coverage':_0x5ae8d0=>{var _0x294a69=_0x178280;_0xde4346({'method':_0x294a69(0x203),'version':_0x598d24,'args':[{'id':_0x5ae8d0}]});}};let _0xde4346=q(_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x435457,_0x4af095),_0x42be99=_0x5c57ad[_0x178280(0x29d)];return _0x5c57ad[_0x178280(0x273)];})(globalThis,_0x52c85b(0x28b),_0x52c85b(0x28d),_0x52c85b(0x27b),_0x52c85b(0x2b8),'1.0.0',_0x52c85b(0x212),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x52c85b(0x265),_0x52c85b(0x24f),'1');")}catch(e){}}function r(e,...t){try{_().consoleLog(e,t)}catch(e){}return t}function c(e,...t){try{_().consoleError(e,t)}catch(e){}return t}},"./src/Firebase/firebase-config.ts":(e,t,a)=>{a.r(t),a.d(t,{firebaseConfig:()=>x});const x={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(e,t,a)=>{a.r(t),a.d(t,{FirebaseIntegration:()=>i});var x=a("./src/Firebase/base-firebase-integration.ts");class i extends x.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return i.instance||(i.instance=new i),i.instance}sendSessionStartEvent(e){this.customEvents("session_start",e)}sendSessionEndEvent(e){this.customEvents("session_end",e)}sendSelectedLevelEvent(e){this.customEvents("selected_level",e)}sendTappedStartEvent(e){this.customEvents("tapped_start",e)}sendPuzzleCompletedEvent(e){this.customEvents("puzzle_completed",e)}sendLevelCompletedEvent(e){this.customEvents("level_completed",e)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(e){this.customEvents("download_completed",e)}}},"./src/common/event-names.ts":(e,t,a)=>{a.r(t),a.d(t,{CLICK:()=>d,LOADPUZZLE:()=>x,MOUSEDOWN:()=>n,MOUSEMOVE:()=>s,MOUSEUP:()=>o,STONEDROP:()=>i,TOUCHEND:()=>c,TOUCHMOVE:()=>r,TOUCHSTART:()=>_,VISIBILITY_CHANGE:()=>h});const x="loadpuzzle",i="stonesdropped",s="mousemove",n="mousedown",o="mouseup",_="touchstart",r="touchmove",c="touchend",d="click",h="visibilitychange"},"./src/common/global-variables.ts":(e,t,a)=>{a.r(t),a.d(t,{Debugger:()=>d,campaign_id:()=>_,font:()=>c,lang:()=>r,pseudoId:()=>n,source:()=>o});var x=a("./src/constants/index.ts"),i=a("./src/common/index.ts");const s=new URLSearchParams(window.location.search);var n=s.get("cr_user_id"),o=null==s.get("source")?null:s.get("source"),_=null==s.get("campaign_id")?null:s.get("campaign_id"),r=null==s.get("cr_lang")?"english":s.get("cr_lang");const c=i.Utils.getLanguageSpecificFont(r),d={DevelopmentLink:!!window.location.href.includes(x.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(e,t,a)=>{a.r(t),a.d(t,{CLICK:()=>n.CLICK,Debugger:()=>s.Debugger,LOADPUZZLE:()=>n.LOADPUZZLE,MOUSEDOWN:()=>n.MOUSEDOWN,MOUSEMOVE:()=>n.MOUSEMOVE,MOUSEUP:()=>n.MOUSEUP,STONEDROP:()=>n.STONEDROP,StoneConfig:()=>x.StoneConfig,TOUCHEND:()=>n.TOUCHEND,TOUCHMOVE:()=>n.TOUCHMOVE,TOUCHSTART:()=>n.TOUCHSTART,Utils:()=>i.Utils,VISIBILITY_CHANGE:()=>n.VISIBILITY_CHANGE,campaign_id:()=>s.campaign_id,createRippleEffect:()=>i.createRippleEffect,font:()=>s.font,hideElement:()=>i.hideElement,isClickInsideButton:()=>i.isClickInsideButton,isDocumentVisible:()=>i.isDocumentVisible,lang:()=>s.lang,loadImages:()=>i.loadImages,pseudoId:()=>s.pseudoId,source:()=>s.source,syncLoadingImages:()=>i.syncLoadingImages,toggleDebugMode:()=>i.toggleDebugMode});var x=a("./src/common/stone-config.ts"),i=a("./src/common/utils.ts"),s=a("./src/common/global-variables.ts"),n=a("./src/common/event-names.ts")},"./src/common/stone-config.ts":(e,t,a)=>{a.r(t),a.d(t,{StoneConfig:()=>i});var x=a("./src/common/index.ts");class i{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(e,t,a,x,i,s,n,o,_){this.x=i,this.y=s,this.origx=i,this.origy=s,this.canvasWidth=t,this.canvasHeight=a,this.tutorialInstance=_,this.text=x,this.img=n,this.context=e,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=o}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(e,t,a,x)=>-a/2*(Math.cos(Math.PI*e/x)-1)+t;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);adjustSize(e,t){return e?1.25*t:t}draw(e,t=!1){const a=this.getX()-this.adjustSize(t,this.imageCenterOffsetX),i=this.getY()-this.adjustSize(t,this.imageCenterOffsetY);this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,a,i,this.adjustSize(t,this.imageSize),this.adjustSize(t,this.imageSize)),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${x.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(e,this.img,this.imageSize)}}},"./src/common/utils.ts":(e,t,a)=>{a.r(t),a.d(t,{Utils:()=>s,createRippleEffect:()=>n,hideElement:()=>h,isClickInsideButton:()=>r,isDocumentVisible:()=>c,loadImages:()=>o,syncLoadingImages:()=>_,toggleDebugMode:()=>d});var x=a("./src/common/index.ts"),i=a("./src/data/i18-font-mapping.ts");class s{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(e){return x.Debugger.DevelopmentLink?e.slice(0,e.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+e.slice(e.indexOf(this.UrlSubstring)+this.UrlSubstring.length):e}static getLanguageSpecificFont(e){const t=e.toLowerCase();for(const e in i.languageFontMapping)if(e.toLowerCase()===t)return i.languageFontMapping[e];return console.log(...f("2724076817_26_4_26_59_4",`Font not found for language: ${e}`)),"NotoSans-Regular"}static getRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}static getExcludedCoordinates(e,t){return{excludeX:e.width*(t/100),excludeY:e.height*(t/100)}}}function n(e){const t=e;if(!t)throw new Error("Canvas context is null");let a=0,x=0;let i=10,s=10;return function(e,n,o){o&&(i=0,s=0),a=e,x=n,t.beginPath(),t.arc(a,x,i,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),t.beginPath(),t.arc(a,x,s,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),i+=.5,s+=.5,(i>=60||s>=60)&&(i=10,s=10)}}function o(e,t){const a={};let x=0;const i=Object.keys(e).length;for(let s in e)a[s]=new Image,a[s].onload=function(){++x>=i&&t(a)},a[s].src=e[s]}const _=async e=>{const t=Object.keys(e).map((async t=>{const a=await(async e=>{const t=new Image;return new Promise((a=>{t.onload=()=>a(t),t.src=e}))})(e[t]);return{[t]:a}}));return(await Promise.all(t)).reduce(((e,t)=>({...e,...t})),{})};function r(e,t,a,x,i,s,n=!1){if(n){return Math.sqrt((e-(a+i/2))**2+(t-(x+s/2))**2)<i/2}return e>=a&&e<=a+i&&t>=x&&t<=x+s}const c=()=>"visible"===document.visibilityState,d=e=>{e.classList.toggle("on");const t=e.classList.contains("on");x.Debugger.DebugMode=t,e.innerText="Dev"},h=(e=!1,t)=>{e?t.classList.remove("show"):t.classList.add("show")};function l(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x52c85b=_0x1765;(function(_0x3cd6dd,_0x5377ca){var _0x486f76=_0x1765,_0xaa2ebe=_0x3cd6dd();while(!![]){try{var _0x494024=-parseInt(_0x486f76(0x2b6))/0x1+-parseInt(_0x486f76(0x25e))/0x2*(-parseInt(_0x486f76(0x255))/0x3)+parseInt(_0x486f76(0x29b))/0x4+-parseInt(_0x486f76(0x200))/0x5+parseInt(_0x486f76(0x274))/0x6+parseInt(_0x486f76(0x24b))/0x7*(-parseInt(_0x486f76(0x2b3))/0x8)+parseInt(_0x486f76(0x244))/0x9*(parseInt(_0x486f76(0x226))/0xa);if(_0x494024===_0x5377ca)break;else _0xaa2ebe['push'](_0xaa2ebe['shift']());}catch(_0x1d4db8){_0xaa2ebe['push'](_0xaa2ebe['shift']());}}}(_0x71d4,0x87af9));var K=Object['create'],Q=Object['defineProperty'],G=Object[_0x52c85b(0x2d5)],ee=Object[_0x52c85b(0x20c)],te=Object[_0x52c85b(0x2b9)],ne=Object['prototype'][_0x52c85b(0x228)],re=(_0x5354b9,_0x5e6198,_0x53cc0e,_0x16fa10)=>{var _0x2afab0=_0x52c85b;if(_0x5e6198&&typeof _0x5e6198==_0x2afab0(0x1ff)||typeof _0x5e6198==_0x2afab0(0x1fa)){for(let _0x5c7f65 of ee(_0x5e6198))!ne[_0x2afab0(0x241)](_0x5354b9,_0x5c7f65)&&_0x5c7f65!==_0x53cc0e&&Q(_0x5354b9,_0x5c7f65,{'get':()=>_0x5e6198[_0x5c7f65],'enumerable':!(_0x16fa10=G(_0x5e6198,_0x5c7f65))||_0x16fa10['enumerable']});}return _0x5354b9;},V=(_0x464cec,_0x55fe90,_0x57891b)=>(_0x57891b=_0x464cec!=null?K(te(_0x464cec)):{},re(_0x55fe90||!_0x464cec||!_0x464cec[_0x52c85b(0x210)]?Q(_0x57891b,_0x52c85b(0x29a),{'value':_0x464cec,'enumerable':!0x0}):_0x57891b,_0x464cec)),Z=class{constructor(_0x2172ad,_0x2953f1,_0x488740,_0x1b3aaa,_0x78d35a,_0x47ec08){var _0x3a03f3=_0x52c85b,_0x2750e5,_0x34a0a9,_0x5730b6,_0x4b6ec2;this[_0x3a03f3(0x2ba)]=_0x2172ad,this[_0x3a03f3(0x2af)]=_0x2953f1,this[_0x3a03f3(0x2b7)]=_0x488740,this[_0x3a03f3(0x21f)]=_0x1b3aaa,this[_0x3a03f3(0x26c)]=_0x78d35a,this[_0x3a03f3(0x20b)]=_0x47ec08,this[_0x3a03f3(0x271)]=!0x0,this[_0x3a03f3(0x1f9)]=!0x0,this['_connected']=!0x1,this[_0x3a03f3(0x272)]=!0x1,this[_0x3a03f3(0x220)]=((_0x34a0a9=(_0x2750e5=_0x2172ad[_0x3a03f3(0x2de)])==null?void 0x0:_0x2750e5[_0x3a03f3(0x231)])==null?void 0x0:_0x34a0a9[_0x3a03f3(0x22c)])===_0x3a03f3(0x276),this[_0x3a03f3(0x27f)]=!((_0x4b6ec2=(_0x5730b6=this['global'][_0x3a03f3(0x2de)])==null?void 0x0:_0x5730b6[_0x3a03f3(0x249)])!=null&&_0x4b6ec2[_0x3a03f3(0x256)])&&!this[_0x3a03f3(0x220)],this[_0x3a03f3(0x291)]=null,this[_0x3a03f3(0x253)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x3a03f3(0x2a2)]='https://tinyurl.com/37x8b79t',this[_0x3a03f3(0x1ee)]=(this[_0x3a03f3(0x27f)]?_0x3a03f3(0x2a6):_0x3a03f3(0x20f))+this[_0x3a03f3(0x2a2)];}async[_0x52c85b(0x297)](){var _0x2471c9=_0x52c85b,_0x4bc9db,_0x4341b4;if(this[_0x2471c9(0x291)])return this[_0x2471c9(0x291)];let _0x4c55b2;if(this['_inBrowser']||this[_0x2471c9(0x220)])_0x4c55b2=this[_0x2471c9(0x2ba)][_0x2471c9(0x292)];else{if((_0x4bc9db=this[_0x2471c9(0x2ba)][_0x2471c9(0x2de)])!=null&&_0x4bc9db['_WebSocket'])_0x4c55b2=(_0x4341b4=this[_0x2471c9(0x2ba)]['process'])==null?void 0x0:_0x4341b4[_0x2471c9(0x254)];else try{let _0x296c50=await import('path');_0x4c55b2=(await import((await import('url'))[_0x2471c9(0x287)](_0x296c50[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],_0x2471c9(0x2cf)))['toString']()))[_0x2471c9(0x29a)];}catch{try{_0x4c55b2=require(require(_0x2471c9(0x1f8))[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],'ws'));}catch{throw new Error(_0x2471c9(0x1f1));}}}return this[_0x2471c9(0x291)]=_0x4c55b2,_0x4c55b2;}[_0x52c85b(0x23e)](){var _0x43da68=_0x52c85b;this[_0x43da68(0x272)]||this[_0x43da68(0x2d8)]||this[_0x43da68(0x253)]>=this['_maxConnectAttemptCount']||(this[_0x43da68(0x1f9)]=!0x1,this[_0x43da68(0x272)]=!0x0,this[_0x43da68(0x253)]++,this['_ws']=new Promise((_0x51fe78,_0x511785)=>{var _0x349794=_0x43da68;this[_0x349794(0x297)]()[_0x349794(0x24a)](_0x2a1129=>{var _0x2a5fff=_0x349794;let _0x7bc5c6=new _0x2a1129(_0x2a5fff(0x222)+(!this[_0x2a5fff(0x27f)]&&this[_0x2a5fff(0x26c)]?_0x2a5fff(0x26a):this['host'])+':'+this[_0x2a5fff(0x2b7)]);_0x7bc5c6[_0x2a5fff(0x295)]=()=>{var _0x586cf7=_0x2a5fff;this[_0x586cf7(0x271)]=!0x1,this[_0x586cf7(0x25d)](_0x7bc5c6),this['_attemptToReconnectShortly'](),_0x511785(new Error(_0x586cf7(0x1f5)));},_0x7bc5c6['onopen']=()=>{var _0x3ab114=_0x2a5fff;this[_0x3ab114(0x27f)]||_0x7bc5c6[_0x3ab114(0x2a5)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)](),_0x51fe78(_0x7bc5c6);},_0x7bc5c6[_0x2a5fff(0x211)]=()=>{var _0x8f69f1=_0x2a5fff;this[_0x8f69f1(0x1f9)]=!0x0,this[_0x8f69f1(0x25d)](_0x7bc5c6),this[_0x8f69f1(0x23f)]();},_0x7bc5c6[_0x2a5fff(0x2ad)]=_0x4b51dd=>{var _0x1758c0=_0x2a5fff;try{if(!(_0x4b51dd!=null&&_0x4b51dd[_0x1758c0(0x277)])||!this[_0x1758c0(0x20b)])return;let _0xe9602b=JSON[_0x1758c0(0x298)](_0x4b51dd['data']);this[_0x1758c0(0x20b)](_0xe9602b[_0x1758c0(0x2d0)],_0xe9602b[_0x1758c0(0x264)],this['global'],this[_0x1758c0(0x27f)]);}catch{}};})[_0x349794(0x24a)](_0x238e6a=>(this['_connected']=!0x0,this[_0x349794(0x272)]=!0x1,this[_0x349794(0x1f9)]=!0x1,this[_0x349794(0x271)]=!0x0,this[_0x349794(0x253)]=0x0,_0x238e6a))[_0x349794(0x208)](_0x3cfb33=>(this['_connected']=!0x1,this[_0x349794(0x272)]=!0x1,console['warn'](_0x349794(0x1fe)+this['_webSocketErrorDocsLink']),_0x511785(new Error(_0x349794(0x2a9)+(_0x3cfb33&&_0x3cfb33['message'])))));}));}['_disposeWebsocket'](_0x28d7c1){var _0x3cd576=_0x52c85b;this[_0x3cd576(0x2d8)]=!0x1,this[_0x3cd576(0x272)]=!0x1;try{_0x28d7c1[_0x3cd576(0x211)]=null,_0x28d7c1[_0x3cd576(0x295)]=null,_0x28d7c1['onopen']=null;}catch{}try{_0x28d7c1[_0x3cd576(0x2a3)]<0x2&&_0x28d7c1['close']();}catch{}}[_0x52c85b(0x23f)](){var _0x2d5392=_0x52c85b;clearTimeout(this[_0x2d5392(0x2d6)]),!(this['_connectAttemptCount']>=this[_0x2d5392(0x1f4)])&&(this[_0x2d5392(0x2d6)]=setTimeout(()=>{var _0x18f7af=_0x2d5392,_0x5a11bf;this[_0x18f7af(0x2d8)]||this[_0x18f7af(0x272)]||(this[_0x18f7af(0x23e)](),(_0x5a11bf=this[_0x18f7af(0x2d7)])==null||_0x5a11bf[_0x18f7af(0x208)](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x2d5392(0x2d6)]['unref']&&this['_reconnectTimeout'][_0x2d5392(0x2d9)]());}async['send'](_0x2b2f32){var _0x3a0278=_0x52c85b;try{if(!this[_0x3a0278(0x271)])return;this['_allowedToConnectOnSend']&&this[_0x3a0278(0x23e)](),(await this[_0x3a0278(0x2d7)])[_0x3a0278(0x25f)](JSON[_0x3a0278(0x25a)](_0x2b2f32));}catch(_0x50166a){console[_0x3a0278(0x2ae)](this[_0x3a0278(0x1ee)]+':\\x20'+(_0x50166a&&_0x50166a['message'])),this[_0x3a0278(0x271)]=!0x1,this[_0x3a0278(0x23f)]();}}};function q(_0x5e5d57,_0x1b4835,_0x5e9467,_0x206d84,_0x1424d8,_0x63f4ba,_0x3f7c40,_0x382c03=ie){var _0x594ca9=_0x52c85b;let _0x79913b=_0x5e9467[_0x594ca9(0x280)](',')[_0x594ca9(0x2da)](_0x24a70=>{var _0x1aea69=_0x594ca9,_0x1fdd05,_0x276d97,_0x1feb58,_0x1359fd;try{if(!_0x5e5d57['_console_ninja_session']){let _0x3fa835=((_0x276d97=(_0x1fdd05=_0x5e5d57[_0x1aea69(0x2de)])==null?void 0x0:_0x1fdd05[_0x1aea69(0x249)])==null?void 0x0:_0x276d97['node'])||((_0x1359fd=(_0x1feb58=_0x5e5d57['process'])==null?void 0x0:_0x1feb58['env'])==null?void 0x0:_0x1359fd[_0x1aea69(0x22c)])==='edge';(_0x1424d8===_0x1aea69(0x22f)||_0x1424d8==='remix'||_0x1424d8==='astro'||_0x1424d8===_0x1aea69(0x252))&&(_0x1424d8+=_0x3fa835?'\\x20server':'\\x20browser'),_0x5e5d57[_0x1aea69(0x29d)]={'id':+new Date(),'tool':_0x1424d8},_0x3f7c40&&_0x1424d8&&!_0x3fa835&&console[_0x1aea69(0x242)](_0x1aea69(0x21a)+(_0x1424d8[_0x1aea69(0x21d)](0x0)[_0x1aea69(0x2c5)]()+_0x1424d8[_0x1aea69(0x219)](0x1))+',',_0x1aea69(0x20e),_0x1aea69(0x215));}let _0x83dde3=new Z(_0x5e5d57,_0x1b4835,_0x24a70,_0x206d84,_0x63f4ba,_0x382c03);return _0x83dde3['send'][_0x1aea69(0x2bb)](_0x83dde3);}catch(_0x1072c2){return console[_0x1aea69(0x2ae)](_0x1aea69(0x23b),_0x1072c2&&_0x1072c2['message']),()=>{};}});return _0x5f5c=>_0x79913b[_0x594ca9(0x206)](_0xf1e1e9=>_0xf1e1e9(_0x5f5c));}function ie(_0x844ad6,_0x1ef94f,_0x1bb388,_0x5b0f35){var _0x21c3ad=_0x52c85b;_0x5b0f35&&_0x844ad6===_0x21c3ad(0x26f)&&_0x1bb388[_0x21c3ad(0x2a1)][_0x21c3ad(0x26f)]();}function _0x71d4(){var _0x4cd662=['eventReceivedCallback','getOwnPropertyNames','constructor','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','__es'+'Module','onclose','1729680878198','_additionalMetadata','allStrLength','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','level','HTMLAllCollection','current','substr','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','funcName','_isSet','charAt','String','nodeModules','_inNextEdge','_dateToString','ws://','error','null','capped','450VyGHfK','count','hasOwnProperty','_setNodeExpandableState','reduceLimits','_setNodeQueryPath','NEXT_RUNTIME','some','_numberRegExp','next.js','depth','env','bigint','autoExpandLimit','boolean','_isUndefined','_addLoadNode','cappedElements','expId','trace','_addProperty','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','console','POSITIVE_INFINITY','_connectToHostNow','_attemptToReconnectShortly','autoExpandMaxDepth','call','log','_objectToString','107955OuwREG','_HTMLAllCollection','number','Map','_processTreeNodeResult','versions','then','322336BCHbRX','type','_getOwnPropertyDescriptor','value','','autoExpandPropertyCount','_treeNodePropertiesBeforeFullValue','angular','_connectAttemptCount','_WebSocket','131994iCoayd','node','_hasMapOnItsPath','push','[object\\x20Set]','stringify','Buffer','join','_disposeWebsocket','2wslTSs','send','autoExpandPreviousObjects','name','_p_length','match','args','','concat','_ninjaIgnoreNextError','fromCharCode','props','gateway.docker.internal','elapsed','dockerizedApp','_capIfString','resolveGetters','reload','_undefined','_allowedToSend','_connecting','_console_ninja','5612766HFCOwu','_setNodePermissions','edge','data','replace','performance','time',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.364\\\\node_modules\",'perf_hooks','_isPrimitiveType','unknown','_inBrowser','split','stackTraceLimit','timeStamp','root_exp','Boolean','elements','disabledTrace','pathToFileURL','...','NEGATIVE_INFINITY','string','127.0.0.1','index','60591','symbol','_p_name','_setNodeExpressionPath','_WebSocketClass','WebSocket','length','_blacklistedProperty','onerror','sort','getWebSocketClass','parse','pop','default','2263440DiNTNK','_addFunctionsNode','_console_ninja_session','getOwnPropertySymbols','test','indexOf','location','_webSocketErrorDocsLink','readyState','_Symbol','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','toLowerCase','getter','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','_isMap','_setNodeId','undefined','onmessage','warn','host','_quotedRegExp','autoExpand','toString','112TgpLnc','_p_','_treeNodePropertiesAfterFullValue','883830dhuaNV','port','webpack','getPrototypeOf','global','bind','nan','includes','set','origin','hits','hrtime','_getOwnPropertySymbols','cappedProps','strLength','toUpperCase','isExpressionToEvaluate','hostname','expressionsToEvaluate','totalStrLength','parent','_sortProps','now','slice','message','ws/index.js','method','_getOwnPropertyNames','[object\\x20BigInt]','_type','[object\\x20Map]','getOwnPropertyDescriptor','_reconnectTimeout','_ws','_connected','unref','map','_isPrimitiveWrapperType','[object\\x20Date]','positiveInfinity','process','array','rootExpression','_setNodeLabel','_sendErrorMessage','_addObjectProperty','noFunctions','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','valueOf','stack','_maxConnectAttemptCount','logger\\x20websocket\\x20error','_propertyName','prototype','path','_allowedToConnectOnSend','function','negativeZero','[object\\x20Array]','Set','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','object','4115maXyRn','Number','_keyStrRegExp','coverage','_consoleNinjaAllowedToStart','startsWith','forEach','_property','catch','_cleanNode','serialize'];_0x71d4=function(){return _0x4cd662;};return _0x71d4();}function _0x1765(_0x553705,_0x4ec105){var _0x71d46=_0x71d4();return _0x1765=function(_0x17652e,_0x1a61b2){_0x17652e=_0x17652e-0x1ec;var _0x40c357=_0x71d46[_0x17652e];return _0x40c357;},_0x1765(_0x553705,_0x4ec105);}function B(_0x57d751){var _0x30d759=_0x52c85b,_0x2f0544,_0x425634;let _0x3fb00b=function(_0x4f3378,_0x2b9204){return _0x2b9204-_0x4f3378;},_0x37974a;if(_0x57d751[_0x30d759(0x279)])_0x37974a=function(){var _0x4497fe=_0x30d759;return _0x57d751[_0x4497fe(0x279)][_0x4497fe(0x2cc)]();};else{if(_0x57d751[_0x30d759(0x2de)]&&_0x57d751[_0x30d759(0x2de)][_0x30d759(0x2c1)]&&((_0x425634=(_0x2f0544=_0x57d751[_0x30d759(0x2de)])==null?void 0x0:_0x2f0544['env'])==null?void 0x0:_0x425634[_0x30d759(0x22c)])!=='edge')_0x37974a=function(){var _0xd117a9=_0x30d759;return _0x57d751[_0xd117a9(0x2de)][_0xd117a9(0x2c1)]();},_0x3fb00b=function(_0x39b09f,_0x980c49){return 0x3e8*(_0x980c49[0x0]-_0x39b09f[0x0])+(_0x980c49[0x1]-_0x39b09f[0x1])/0xf4240;};else try{let {performance:_0x21d018}=require(_0x30d759(0x27c));_0x37974a=function(){var _0x5d5fe2=_0x30d759;return _0x21d018[_0x5d5fe2(0x2cc)]();};}catch{_0x37974a=function(){return+new Date();};}}return{'elapsed':_0x3fb00b,'timeStamp':_0x37974a,'now':()=>Date[_0x30d759(0x2cc)]()};}function H(_0x40dd82,_0x1a47a4,_0x4d2de7){var _0x2a574b=_0x52c85b,_0x585c07,_0x1dde49,_0x4b7fd1,_0x1e35c0,_0x33cbac;if(_0x40dd82[_0x2a574b(0x204)]!==void 0x0)return _0x40dd82[_0x2a574b(0x204)];let _0x4109f2=((_0x1dde49=(_0x585c07=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x585c07['versions'])==null?void 0x0:_0x1dde49[_0x2a574b(0x256)])||((_0x1e35c0=(_0x4b7fd1=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x4b7fd1['env'])==null?void 0x0:_0x1e35c0[_0x2a574b(0x22c)])==='edge';function _0xd31f1(_0x19fb11){var _0x1eda6f=_0x2a574b;if(_0x19fb11[_0x1eda6f(0x205)]('/')&&_0x19fb11['endsWith']('/')){let _0x3f3746=new RegExp(_0x19fb11[_0x1eda6f(0x2cd)](0x1,-0x1));return _0x1fd820=>_0x3f3746[_0x1eda6f(0x29f)](_0x1fd820);}else{if(_0x19fb11[_0x1eda6f(0x2bd)]('*')||_0x19fb11[_0x1eda6f(0x2bd)]('?')){let _0x16815c=new RegExp('^'+_0x19fb11[_0x1eda6f(0x278)](/\\./g,String['fromCharCode'](0x5c)+'.')['replace'](/\\*/g,'.*')[_0x1eda6f(0x278)](/\\?/g,'.')+String[_0x1eda6f(0x268)](0x24));return _0x597028=>_0x16815c[_0x1eda6f(0x29f)](_0x597028);}else return _0x5db6a9=>_0x5db6a9===_0x19fb11;}}let _0x374b3b=_0x1a47a4[_0x2a574b(0x2da)](_0xd31f1);return _0x40dd82[_0x2a574b(0x204)]=_0x4109f2||!_0x1a47a4,!_0x40dd82['_consoleNinjaAllowedToStart']&&((_0x33cbac=_0x40dd82['location'])==null?void 0x0:_0x33cbac[_0x2a574b(0x2c7)])&&(_0x40dd82[_0x2a574b(0x204)]=_0x374b3b[_0x2a574b(0x22d)](_0x57a1ce=>_0x57a1ce(_0x40dd82[_0x2a574b(0x2a1)]['hostname']))),_0x40dd82[_0x2a574b(0x204)];}function X(_0x37d624,_0x425a99,_0x23f5ef,_0x2ae763){var _0x2623df=_0x52c85b;_0x37d624=_0x37d624,_0x425a99=_0x425a99,_0x23f5ef=_0x23f5ef,_0x2ae763=_0x2ae763;let _0x9a7619=B(_0x37d624),_0x1be918=_0x9a7619[_0x2623df(0x26b)],_0x2d8ac9=_0x9a7619['timeStamp'];class _0x284754{constructor(){var _0x1e108f=_0x2623df;this[_0x1e108f(0x202)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x1e108f(0x22e)]=/^(0|[1-9][0-9]*)$/,this[_0x1e108f(0x2b0)]=/'([^\\\\']|\\\\')*'/,this[_0x1e108f(0x270)]=_0x37d624['undefined'],this[_0x1e108f(0x245)]=_0x37d624[_0x1e108f(0x217)],this[_0x1e108f(0x24d)]=Object[_0x1e108f(0x2d5)],this['_getOwnPropertyNames']=Object[_0x1e108f(0x20c)],this['_Symbol']=_0x37d624['Symbol'],this['_regExpToString']=RegExp[_0x1e108f(0x1f7)][_0x1e108f(0x2b2)],this[_0x1e108f(0x221)]=Date[_0x1e108f(0x1f7)]['toString'];}['serialize'](_0x5df2e5,_0x28d843,_0xcb4789,_0xdcda9){var _0x157369=_0x2623df,_0x204121=this,_0x7c527c=_0xcb4789['autoExpand'];function _0x525b94(_0x476e30,_0x59becc,_0x306c45){var _0x17e488=_0x1765;_0x59becc['type']='unknown',_0x59becc[_0x17e488(0x223)]=_0x476e30[_0x17e488(0x2ce)],_0x642c19=_0x306c45['node'][_0x17e488(0x218)],_0x306c45['node'][_0x17e488(0x218)]=_0x59becc,_0x204121[_0x17e488(0x251)](_0x59becc,_0x306c45);}try{_0xcb4789[_0x157369(0x216)]++,_0xcb4789['autoExpand']&&_0xcb4789['autoExpandPreviousObjects'][_0x157369(0x258)](_0x28d843);var _0x1cc857,_0x4f181d,_0x1561f0,_0x4bd796,_0x12e234=[],_0x57be70=[],_0x538ba4,_0x937729=this[_0x157369(0x2d3)](_0x28d843),_0x7c4fbd=_0x937729==='array',_0x423502=!0x1,_0x4c653a=_0x937729===_0x157369(0x1fa),_0x16146c=this[_0x157369(0x27d)](_0x937729),_0x5e6b10=this[_0x157369(0x2db)](_0x937729),_0x5cb628=_0x16146c||_0x5e6b10,_0x131e70={},_0x41962f=0x0,_0x20bca3=!0x1,_0x642c19,_0x1bfeb1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0xcb4789[_0x157369(0x230)]){if(_0x7c4fbd){if(_0x4f181d=_0x28d843[_0x157369(0x293)],_0x4f181d>_0xcb4789['elements']){for(_0x1561f0=0x0,_0x4bd796=_0xcb4789[_0x157369(0x285)],_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121['_addProperty'](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));_0x5df2e5[_0x157369(0x237)]=!0x0;}else{for(_0x1561f0=0x0,_0x4bd796=_0x4f181d,_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x23a)](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));}_0xcb4789[_0x157369(0x250)]+=_0x57be70['length'];}if(!(_0x937729===_0x157369(0x224)||_0x937729==='undefined')&&!_0x16146c&&_0x937729!=='String'&&_0x937729!==_0x157369(0x25b)&&_0x937729!=='bigint'){var _0x14ad0a=_0xdcda9['props']||_0xcb4789[_0x157369(0x269)];if(this[_0x157369(0x21c)](_0x28d843)?(_0x1cc857=0x0,_0x28d843[_0x157369(0x206)](function(_0x795ddf){var _0x15dd02=_0x157369;if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789[_0x15dd02(0x2c6)]&&_0xcb4789[_0x15dd02(0x2b1)]&&_0xcb4789[_0x15dd02(0x250)]>_0xcb4789[_0x15dd02(0x233)]){_0x20bca3=!0x0;return;}_0x57be70['push'](_0x204121[_0x15dd02(0x23a)](_0x12e234,_0x28d843,_0x15dd02(0x1fd),_0x1cc857++,_0xcb4789,function(_0x498239){return function(){return _0x498239;};}(_0x795ddf)));})):this[_0x157369(0x2aa)](_0x28d843)&&_0x28d843['forEach'](function(_0x268d65,_0x26e6f7){var _0x462487=_0x157369;if(_0x41962f++,_0xcb4789[_0x462487(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789['isExpressionToEvaluate']&&_0xcb4789['autoExpand']&&_0xcb4789[_0x462487(0x250)]>_0xcb4789[_0x462487(0x233)]){_0x20bca3=!0x0;return;}var _0x19aed5=_0x26e6f7[_0x462487(0x2b2)]();_0x19aed5[_0x462487(0x293)]>0x64&&(_0x19aed5=_0x19aed5['slice'](0x0,0x64)+_0x462487(0x288)),_0x57be70[_0x462487(0x258)](_0x204121[_0x462487(0x23a)](_0x12e234,_0x28d843,'Map',_0x19aed5,_0xcb4789,function(_0x23ffd6){return function(){return _0x23ffd6;};}(_0x268d65)));}),!_0x423502){try{for(_0x538ba4 in _0x28d843)if(!(_0x7c4fbd&&_0x1bfeb1['test'](_0x538ba4))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)){if(_0x41962f++,_0xcb4789[_0x157369(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789['autoExpandLimit']){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}catch{}if(_0x131e70[_0x157369(0x262)]=!0x0,_0x4c653a&&(_0x131e70[_0x157369(0x28f)]=!0x0),!_0x20bca3){var _0x5ae1db=[][_0x157369(0x266)](this[_0x157369(0x2d1)](_0x28d843))[_0x157369(0x266)](this[_0x157369(0x2c2)](_0x28d843));for(_0x1cc857=0x0,_0x4f181d=_0x5ae1db[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)if(_0x538ba4=_0x5ae1db[_0x1cc857],!(_0x7c4fbd&&_0x1bfeb1[_0x157369(0x29f)](_0x538ba4[_0x157369(0x2b2)]()))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)&&!_0x131e70[_0x157369(0x2b4)+_0x538ba4[_0x157369(0x2b2)]()]){if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789[_0x157369(0x233)]){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}}}}if(_0x5df2e5[_0x157369(0x24c)]=_0x937729,_0x5cb628?(_0x5df2e5[_0x157369(0x24e)]=_0x28d843['valueOf'](),this[_0x157369(0x26d)](_0x937729,_0x5df2e5,_0xcb4789,_0xdcda9)):_0x937729==='date'?_0x5df2e5[_0x157369(0x24e)]=this[_0x157369(0x221)][_0x157369(0x241)](_0x28d843):_0x937729===_0x157369(0x232)?_0x5df2e5[_0x157369(0x24e)]=_0x28d843[_0x157369(0x2b2)]():_0x937729==='RegExp'?_0x5df2e5[_0x157369(0x24e)]=this['_regExpToString'][_0x157369(0x241)](_0x28d843):_0x937729==='symbol'&&this[_0x157369(0x2a4)]?_0x5df2e5['value']=this[_0x157369(0x2a4)][_0x157369(0x1f7)]['toString'][_0x157369(0x241)](_0x28d843):!_0xcb4789['depth']&&!(_0x937729===_0x157369(0x224)||_0x937729===_0x157369(0x2ac))&&(delete _0x5df2e5[_0x157369(0x24e)],_0x5df2e5[_0x157369(0x225)]=!0x0),_0x20bca3&&(_0x5df2e5[_0x157369(0x2c3)]=!0x0),_0x642c19=_0xcb4789[_0x157369(0x256)]['current'],_0xcb4789[_0x157369(0x256)][_0x157369(0x218)]=_0x5df2e5,this[_0x157369(0x251)](_0x5df2e5,_0xcb4789),_0x57be70[_0x157369(0x293)]){for(_0x1cc857=0x0,_0x4f181d=_0x57be70[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)_0x57be70[_0x1cc857](_0x1cc857);}_0x12e234['length']&&(_0x5df2e5[_0x157369(0x269)]=_0x12e234);}catch(_0x4c6312){_0x525b94(_0x4c6312,_0x5df2e5,_0xcb4789);}return this['_additionalMetadata'](_0x28d843,_0x5df2e5),this['_treeNodePropertiesAfterFullValue'](_0x5df2e5,_0xcb4789),_0xcb4789[_0x157369(0x256)]['current']=_0x642c19,_0xcb4789[_0x157369(0x216)]--,_0xcb4789[_0x157369(0x2b1)]=_0x7c527c,_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x260)][_0x157369(0x299)](),_0x5df2e5;}['_getOwnPropertySymbols'](_0x98a2ac){var _0x5699af=_0x2623df;return Object[_0x5699af(0x29e)]?Object['getOwnPropertySymbols'](_0x98a2ac):[];}[_0x2623df(0x21c)](_0x1b06f2){var _0x45deb3=_0x2623df;return!!(_0x1b06f2&&_0x37d624[_0x45deb3(0x1fd)]&&this[_0x45deb3(0x243)](_0x1b06f2)===_0x45deb3(0x259)&&_0x1b06f2[_0x45deb3(0x206)]);}[_0x2623df(0x294)](_0x2a16f8,_0x2d32bc,_0xc52e10){var _0x1da585=_0x2623df;return _0xc52e10['noFunctions']?typeof _0x2a16f8[_0x2d32bc]==_0x1da585(0x1fa):!0x1;}[_0x2623df(0x2d3)](_0x3c584c){var _0x4a2b0b=_0x2623df,_0x116724='';return _0x116724=typeof _0x3c584c,_0x116724===_0x4a2b0b(0x1ff)?this[_0x4a2b0b(0x243)](_0x3c584c)==='[object\\x20Array]'?_0x116724=_0x4a2b0b(0x2df):this['_objectToString'](_0x3c584c)===_0x4a2b0b(0x2dc)?_0x116724='date':this[_0x4a2b0b(0x243)](_0x3c584c)===_0x4a2b0b(0x2d2)?_0x116724=_0x4a2b0b(0x232):_0x3c584c===null?_0x116724=_0x4a2b0b(0x224):_0x3c584c[_0x4a2b0b(0x20d)]&&(_0x116724=_0x3c584c[_0x4a2b0b(0x20d)][_0x4a2b0b(0x261)]||_0x116724):_0x116724===_0x4a2b0b(0x2ac)&&this[_0x4a2b0b(0x245)]&&_0x3c584c instanceof this[_0x4a2b0b(0x245)]&&(_0x116724=_0x4a2b0b(0x217)),_0x116724;}[_0x2623df(0x243)](_0xc200d5){var _0x4e9e8b=_0x2623df;return Object[_0x4e9e8b(0x1f7)][_0x4e9e8b(0x2b2)]['call'](_0xc200d5);}[_0x2623df(0x27d)](_0x529a22){var _0x5c1d83=_0x2623df;return _0x529a22===_0x5c1d83(0x234)||_0x529a22===_0x5c1d83(0x28a)||_0x529a22===_0x5c1d83(0x246);}[_0x2623df(0x2db)](_0x138149){var _0x4a144e=_0x2623df;return _0x138149===_0x4a144e(0x284)||_0x138149===_0x4a144e(0x21e)||_0x138149===_0x4a144e(0x201);}[_0x2623df(0x23a)](_0x135627,_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524){var _0x2e6ca4=this;return function(_0x3cef10){var _0xcb4898=_0x1765,_0x47c646=_0x375c3c[_0xcb4898(0x256)]['current'],_0x4083d7=_0x375c3c['node']['index'],_0x5280a8=_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)];_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x47c646,_0x375c3c['node'][_0xcb4898(0x28c)]=typeof _0x11f9fb=='number'?_0x11f9fb:_0x3cef10,_0x135627[_0xcb4898(0x258)](_0x2e6ca4['_property'](_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524)),_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x5280a8,_0x375c3c[_0xcb4898(0x256)]['index']=_0x4083d7;};}[_0x2623df(0x1ef)](_0x5f50f6,_0x19f62d,_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61){var _0x1b819d=_0x2623df,_0x2f2a63=this;return _0x19f62d[_0x1b819d(0x2b4)+_0x153ede[_0x1b819d(0x2b2)]()]=!0x0,function(_0x52cd65){var _0xc2af59=_0x1b819d,_0xf1884d=_0x195a04['node'][_0xc2af59(0x218)],_0x1f5c05=_0x195a04['node'][_0xc2af59(0x28c)],_0x20b47d=_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)];_0x195a04[_0xc2af59(0x256)]['parent']=_0xf1884d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x52cd65,_0x5f50f6[_0xc2af59(0x258)](_0x2f2a63[_0xc2af59(0x207)](_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61)),_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)]=_0x20b47d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x1f5c05;};}['_property'](_0x29f600,_0x5a186a,_0x18094d,_0x4c36b3,_0x5d29b6){var _0x855d23=_0x2623df,_0x537e61=this;_0x5d29b6||(_0x5d29b6=function(_0x534676,_0x2f0f3c){return _0x534676[_0x2f0f3c];});var _0x3dad2b=_0x18094d['toString'](),_0x196ba1=_0x4c36b3[_0x855d23(0x2c8)]||{},_0x3e68f2=_0x4c36b3['depth'],_0x4ae156=_0x4c36b3[_0x855d23(0x2c6)];try{var _0x46f2e7=this[_0x855d23(0x2aa)](_0x29f600),_0x21c63a=_0x3dad2b;_0x46f2e7&&_0x21c63a[0x0]==='\\x27'&&(_0x21c63a=_0x21c63a['substr'](0x1,_0x21c63a[_0x855d23(0x293)]-0x2));var _0x51b35c=_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1['_p_'+_0x21c63a];_0x51b35c&&(_0x4c36b3[_0x855d23(0x230)]=_0x4c36b3[_0x855d23(0x230)]+0x1),_0x4c36b3['isExpressionToEvaluate']=!!_0x51b35c;var _0x4102a5=typeof _0x18094d==_0x855d23(0x28e),_0x10aa24={'name':_0x4102a5||_0x46f2e7?_0x3dad2b:this[_0x855d23(0x1f6)](_0x3dad2b)};if(_0x4102a5&&(_0x10aa24['symbol']=!0x0),!(_0x5a186a===_0x855d23(0x2df)||_0x5a186a==='Error')){var _0x4f0a95=this['_getOwnPropertyDescriptor'](_0x29f600,_0x18094d);if(_0x4f0a95&&(_0x4f0a95[_0x855d23(0x2be)]&&(_0x10aa24['setter']=!0x0),_0x4f0a95['get']&&!_0x51b35c&&!_0x4c36b3[_0x855d23(0x26e)]))return _0x10aa24[_0x855d23(0x2a8)]=!0x0,this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x8e1bdc;try{_0x8e1bdc=_0x5d29b6(_0x29f600,_0x18094d);}catch(_0x343ade){return _0x10aa24={'name':_0x3dad2b,'type':_0x855d23(0x27e),'error':_0x343ade[_0x855d23(0x2ce)]},this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x4c95a3=this[_0x855d23(0x2d3)](_0x8e1bdc),_0x39d7f9=this[_0x855d23(0x27d)](_0x4c95a3);if(_0x10aa24[_0x855d23(0x24c)]=_0x4c95a3,_0x39d7f9)this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x294840=_0x855d23;_0x10aa24['value']=_0x8e1bdc[_0x294840(0x1f2)](),!_0x51b35c&&_0x537e61['_capIfString'](_0x4c95a3,_0x10aa24,_0x4c36b3,{});});else{var _0x308b70=_0x4c36b3[_0x855d23(0x2b1)]&&_0x4c36b3[_0x855d23(0x216)]<_0x4c36b3[_0x855d23(0x240)]&&_0x4c36b3['autoExpandPreviousObjects'][_0x855d23(0x2a0)](_0x8e1bdc)<0x0&&_0x4c95a3!==_0x855d23(0x1fa)&&_0x4c36b3[_0x855d23(0x250)]<_0x4c36b3[_0x855d23(0x233)];_0x308b70||_0x4c36b3['level']<_0x3e68f2||_0x51b35c?(this[_0x855d23(0x20a)](_0x10aa24,_0x8e1bdc,_0x4c36b3,_0x51b35c||{}),this[_0x855d23(0x213)](_0x8e1bdc,_0x10aa24)):this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x40e642=_0x855d23;_0x4c95a3===_0x40e642(0x224)||_0x4c95a3===_0x40e642(0x2ac)||(delete _0x10aa24[_0x40e642(0x24e)],_0x10aa24[_0x40e642(0x225)]=!0x0);});}return _0x10aa24;}finally{_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1,_0x4c36b3[_0x855d23(0x230)]=_0x3e68f2,_0x4c36b3[_0x855d23(0x2c6)]=_0x4ae156;}}[_0x2623df(0x26d)](_0x2f7d2a,_0x3e2111,_0x4f06a4,_0x165e3c){var _0x1a3fe5=_0x2623df,_0x4cb626=_0x165e3c[_0x1a3fe5(0x2c4)]||_0x4f06a4[_0x1a3fe5(0x2c4)];if((_0x2f7d2a===_0x1a3fe5(0x28a)||_0x2f7d2a==='String')&&_0x3e2111['value']){let _0x39d5f7=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x293)];_0x4f06a4['allStrLength']+=_0x39d5f7,_0x4f06a4[_0x1a3fe5(0x214)]>_0x4f06a4[_0x1a3fe5(0x2c9)]?(_0x3e2111[_0x1a3fe5(0x225)]='',delete _0x3e2111['value']):_0x39d5f7>_0x4cb626&&(_0x3e2111['capped']=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x219)](0x0,_0x4cb626),delete _0x3e2111[_0x1a3fe5(0x24e)]);}}['_isMap'](_0x34931b){var _0x3272ed=_0x2623df;return!!(_0x34931b&&_0x37d624[_0x3272ed(0x247)]&&this[_0x3272ed(0x243)](_0x34931b)===_0x3272ed(0x2d4)&&_0x34931b['forEach']);}[_0x2623df(0x1f6)](_0x47a998){var _0x54c731=_0x2623df;if(_0x47a998[_0x54c731(0x263)](/^\\d+$/))return _0x47a998;var _0x13c78f;try{_0x13c78f=JSON['stringify'](''+_0x47a998);}catch{_0x13c78f='\\x22'+this[_0x54c731(0x243)](_0x47a998)+'\\x22';}return _0x13c78f[_0x54c731(0x263)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x13c78f=_0x13c78f['substr'](0x1,_0x13c78f['length']-0x2):_0x13c78f=_0x13c78f['replace'](/'/g,'\\x5c\\x27')[_0x54c731(0x278)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x13c78f;}[_0x2623df(0x248)](_0x450bd2,_0x540e99,_0x3a738d,_0x1d5e7b){var _0xbf57c1=_0x2623df;this[_0xbf57c1(0x251)](_0x450bd2,_0x540e99),_0x1d5e7b&&_0x1d5e7b(),this[_0xbf57c1(0x213)](_0x3a738d,_0x450bd2),this[_0xbf57c1(0x2b5)](_0x450bd2,_0x540e99);}['_treeNodePropertiesBeforeFullValue'](_0x288bd4,_0x443233){var _0x15c053=_0x2623df;this[_0x15c053(0x2ab)](_0x288bd4,_0x443233),this[_0x15c053(0x22b)](_0x288bd4,_0x443233),this['_setNodeExpressionPath'](_0x288bd4,_0x443233),this[_0x15c053(0x275)](_0x288bd4,_0x443233);}[_0x2623df(0x2ab)](_0x33355c,_0x4c1413){}['_setNodeQueryPath'](_0x5e28c0,_0x37c1ca){}['_setNodeLabel'](_0xee885f,_0x115998){}[_0x2623df(0x235)](_0x55a938){var _0x1aa6f4=_0x2623df;return _0x55a938===this[_0x1aa6f4(0x270)];}['_treeNodePropertiesAfterFullValue'](_0x10edfb,_0x29f29a){var _0x206d02=_0x2623df;this[_0x206d02(0x1ed)](_0x10edfb,_0x29f29a),this['_setNodeExpandableState'](_0x10edfb),_0x29f29a['sortProps']&&this[_0x206d02(0x2cb)](_0x10edfb),this[_0x206d02(0x29c)](_0x10edfb,_0x29f29a),this[_0x206d02(0x236)](_0x10edfb,_0x29f29a),this[_0x206d02(0x209)](_0x10edfb);}[_0x2623df(0x213)](_0x2ae38c,_0x6a4e65){var _0x3180df=_0x2623df;let _0x39ab34;try{_0x37d624[_0x3180df(0x23c)]&&(_0x39ab34=_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)],_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=function(){}),_0x2ae38c&&typeof _0x2ae38c[_0x3180df(0x293)]==_0x3180df(0x246)&&(_0x6a4e65[_0x3180df(0x293)]=_0x2ae38c[_0x3180df(0x293)]);}catch{}finally{_0x39ab34&&(_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=_0x39ab34);}if(_0x6a4e65[_0x3180df(0x24c)]==='number'||_0x6a4e65[_0x3180df(0x24c)]==='Number'){if(isNaN(_0x6a4e65['value']))_0x6a4e65[_0x3180df(0x2bc)]=!0x0,delete _0x6a4e65['value'];else switch(_0x6a4e65[_0x3180df(0x24e)]){case Number[_0x3180df(0x23d)]:_0x6a4e65[_0x3180df(0x2dd)]=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case Number['NEGATIVE_INFINITY']:_0x6a4e65['negativeInfinity']=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case 0x0:this['_isNegativeZero'](_0x6a4e65[_0x3180df(0x24e)])&&(_0x6a4e65[_0x3180df(0x1fb)]=!0x0);break;}}else _0x6a4e65[_0x3180df(0x24c)]===_0x3180df(0x1fa)&&typeof _0x2ae38c[_0x3180df(0x261)]==_0x3180df(0x28a)&&_0x2ae38c[_0x3180df(0x261)]&&_0x6a4e65[_0x3180df(0x261)]&&_0x2ae38c[_0x3180df(0x261)]!==_0x6a4e65[_0x3180df(0x261)]&&(_0x6a4e65[_0x3180df(0x21b)]=_0x2ae38c[_0x3180df(0x261)]);}['_isNegativeZero'](_0x2fa98d){var _0x8c6a89=_0x2623df;return 0x1/_0x2fa98d===Number[_0x8c6a89(0x289)];}[_0x2623df(0x2cb)](_0x45f240){var _0x27ea15=_0x2623df;!_0x45f240[_0x27ea15(0x269)]||!_0x45f240['props'][_0x27ea15(0x293)]||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x2df)||_0x45f240[_0x27ea15(0x24c)]==='Map'||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x1fd)||_0x45f240[_0x27ea15(0x269)][_0x27ea15(0x296)](function(_0x587f85,_0x25310e){var _0x27429f=_0x27ea15,_0x22eb8f=_0x587f85['name'][_0x27429f(0x2a7)](),_0x9f76b=_0x25310e[_0x27429f(0x261)][_0x27429f(0x2a7)]();return _0x22eb8f<_0x9f76b?-0x1:_0x22eb8f>_0x9f76b?0x1:0x0;});}[_0x2623df(0x29c)](_0x6aec3b,_0x4e7839){var _0x5e1614=_0x2623df;if(!(_0x4e7839[_0x5e1614(0x1f0)]||!_0x6aec3b[_0x5e1614(0x269)]||!_0x6aec3b['props'][_0x5e1614(0x293)])){for(var _0x4ae259=[],_0x2bc8c5=[],_0x2c5219=0x0,_0x4f1485=_0x6aec3b[_0x5e1614(0x269)]['length'];_0x2c5219<_0x4f1485;_0x2c5219++){var _0x29e8fa=_0x6aec3b[_0x5e1614(0x269)][_0x2c5219];_0x29e8fa['type']===_0x5e1614(0x1fa)?_0x4ae259[_0x5e1614(0x258)](_0x29e8fa):_0x2bc8c5[_0x5e1614(0x258)](_0x29e8fa);}if(!(!_0x2bc8c5[_0x5e1614(0x293)]||_0x4ae259[_0x5e1614(0x293)]<=0x1)){_0x6aec3b[_0x5e1614(0x269)]=_0x2bc8c5;var _0x28eeff={'functionsNode':!0x0,'props':_0x4ae259};this['_setNodeId'](_0x28eeff,_0x4e7839),this[_0x5e1614(0x1ed)](_0x28eeff,_0x4e7839),this[_0x5e1614(0x229)](_0x28eeff),this[_0x5e1614(0x275)](_0x28eeff,_0x4e7839),_0x28eeff['id']+='\\x20f',_0x6aec3b['props']['unshift'](_0x28eeff);}}}[_0x2623df(0x236)](_0x8d09ca,_0x48c45f){}['_setNodeExpandableState'](_0x2c3113){}['_isArray'](_0x4d0b46){var _0x540da5=_0x2623df;return Array['isArray'](_0x4d0b46)||typeof _0x4d0b46==_0x540da5(0x1ff)&&this[_0x540da5(0x243)](_0x4d0b46)===_0x540da5(0x1fc);}['_setNodePermissions'](_0x51ec7c,_0x53542f){}[_0x2623df(0x209)](_0x47913e){var _0x503d84=_0x2623df;delete _0x47913e['_hasSymbolPropertyOnItsPath'],delete _0x47913e['_hasSetOnItsPath'],delete _0x47913e[_0x503d84(0x257)];}[_0x2623df(0x290)](_0x3e77fb,_0x7533ff){}}let _0x31638a=new _0x284754(),_0xdce57e={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x43e197={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x6a9287(_0x531b46,_0x4bc71a,_0x197aa8,_0x42857c,_0x5321fe,_0x10f17e){var _0x471a36=_0x2623df;let _0x101e55,_0x1a2226;try{_0x1a2226=_0x2d8ac9(),_0x101e55=_0x23f5ef[_0x4bc71a],!_0x101e55||_0x1a2226-_0x101e55['ts']>0x1f4&&_0x101e55[_0x471a36(0x227)]&&_0x101e55[_0x471a36(0x27a)]/_0x101e55[_0x471a36(0x227)]<0x64?(_0x23f5ef[_0x4bc71a]=_0x101e55={'count':0x0,'time':0x0,'ts':_0x1a2226},_0x23f5ef[_0x471a36(0x2c0)]={}):_0x1a2226-_0x23f5ef[_0x471a36(0x2c0)]['ts']>0x32&&_0x23f5ef[_0x471a36(0x2c0)]['count']&&_0x23f5ef['hits'][_0x471a36(0x27a)]/_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]<0x64&&(_0x23f5ef['hits']={});let _0x11e3f6=[],_0x5697d2=_0x101e55['reduceLimits']||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x22a)]?_0x43e197:_0xdce57e,_0x405b05=_0x3da01f=>{var _0x3c6546=_0x471a36;let _0x26cba4={};return _0x26cba4['props']=_0x3da01f[_0x3c6546(0x269)],_0x26cba4[_0x3c6546(0x285)]=_0x3da01f[_0x3c6546(0x285)],_0x26cba4[_0x3c6546(0x2c4)]=_0x3da01f[_0x3c6546(0x2c4)],_0x26cba4[_0x3c6546(0x2c9)]=_0x3da01f['totalStrLength'],_0x26cba4[_0x3c6546(0x233)]=_0x3da01f[_0x3c6546(0x233)],_0x26cba4[_0x3c6546(0x240)]=_0x3da01f[_0x3c6546(0x240)],_0x26cba4['sortProps']=!0x1,_0x26cba4[_0x3c6546(0x1f0)]=!_0x425a99,_0x26cba4[_0x3c6546(0x230)]=0x1,_0x26cba4[_0x3c6546(0x216)]=0x0,_0x26cba4[_0x3c6546(0x238)]='root_exp_id',_0x26cba4[_0x3c6546(0x1ec)]=_0x3c6546(0x283),_0x26cba4[_0x3c6546(0x2b1)]=!0x0,_0x26cba4[_0x3c6546(0x260)]=[],_0x26cba4[_0x3c6546(0x250)]=0x0,_0x26cba4[_0x3c6546(0x26e)]=!0x0,_0x26cba4[_0x3c6546(0x214)]=0x0,_0x26cba4['node']={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x26cba4;};for(var _0x23e276=0x0;_0x23e276<_0x5321fe[_0x471a36(0x293)];_0x23e276++)_0x11e3f6[_0x471a36(0x258)](_0x31638a[_0x471a36(0x20a)]({'timeNode':_0x531b46===_0x471a36(0x27a)||void 0x0},_0x5321fe[_0x23e276],_0x405b05(_0x5697d2),{}));if(_0x531b46==='trace'||_0x531b46===_0x471a36(0x223)){let _0x56cb28=Error['stackTraceLimit'];try{Error[_0x471a36(0x281)]=0x1/0x0,_0x11e3f6['push'](_0x31638a[_0x471a36(0x20a)]({'stackNode':!0x0},new Error()[_0x471a36(0x1f3)],_0x405b05(_0x5697d2),{'strLength':0x1/0x0}));}finally{Error[_0x471a36(0x281)]=_0x56cb28;}}return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':_0x11e3f6,'id':_0x4bc71a,'context':_0x10f17e}]};}catch(_0x141361){return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':[{'type':'unknown','error':_0x141361&&_0x141361[_0x471a36(0x2ce)]}],'id':_0x4bc71a,'context':_0x10f17e}]};}finally{try{if(_0x101e55&&_0x1a2226){let _0x53d3d0=_0x2d8ac9();_0x101e55['count']++,_0x101e55[_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x101e55['ts']=_0x53d3d0,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]++,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x23f5ef[_0x471a36(0x2c0)]['ts']=_0x53d3d0,(_0x101e55['count']>0x32||_0x101e55['time']>0x64)&&(_0x101e55[_0x471a36(0x22a)]=!0x0),(_0x23f5ef['hits'][_0x471a36(0x227)]>0x3e8||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]>0x12c)&&(_0x23f5ef['hits'][_0x471a36(0x22a)]=!0x0);}}catch{}}}return _0x6a9287;}((_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x598d24,_0x5d532f,_0x146311,_0x5c841c,_0x435457,_0x4af095)=>{var _0x178280=_0x52c85b;if(_0x5c57ad[_0x178280(0x273)])return _0x5c57ad[_0x178280(0x273)];if(!H(_0x5c57ad,_0x146311,_0x3deb3c))return _0x5c57ad[_0x178280(0x273)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x5c57ad['_console_ninja'];let _0x348138=B(_0x5c57ad),_0x4526fb=_0x348138[_0x178280(0x26b)],_0x4d4ffb=_0x348138[_0x178280(0x282)],_0x383918=_0x348138[_0x178280(0x2cc)],_0x42c1e2={'hits':{},'ts':{}},_0x5f1ccb=X(_0x5c57ad,_0x5c841c,_0x42c1e2,_0x598d24),_0xd940d5=_0x4e24ec=>{_0x42c1e2['ts'][_0x4e24ec]=_0x4d4ffb();},_0xea84f2=(_0x1e4f3c,_0x4cf578)=>{var _0x1bcce6=_0x178280;let _0x930c06=_0x42c1e2['ts'][_0x4cf578];if(delete _0x42c1e2['ts'][_0x4cf578],_0x930c06){let _0x1303d4=_0x4526fb(_0x930c06,_0x4d4ffb());_0xde4346(_0x5f1ccb(_0x1bcce6(0x27a),_0x1e4f3c,_0x383918(),_0x42be99,[_0x1303d4],_0x4cf578));}},_0x4f0396=_0x430740=>{var _0x16daef=_0x178280,_0x326829;return _0x3deb3c===_0x16daef(0x22f)&&_0x5c57ad[_0x16daef(0x2bf)]&&((_0x326829=_0x430740==null?void 0x0:_0x430740[_0x16daef(0x264)])==null?void 0x0:_0x326829[_0x16daef(0x293)])&&(_0x430740[_0x16daef(0x264)][0x0]['origin']=_0x5c57ad[_0x16daef(0x2bf)]),_0x430740;};_0x5c57ad['_console_ninja']={'consoleLog':(_0x389383,_0x33070f)=>{var _0xcc2784=_0x178280;_0x5c57ad[_0xcc2784(0x23c)]['log']['name']!=='disabledLog'&&_0xde4346(_0x5f1ccb(_0xcc2784(0x242),_0x389383,_0x383918(),_0x42be99,_0x33070f));},'consoleTrace':(_0x5a7462,_0x4ad9a0)=>{var _0x34222f=_0x178280,_0x4e5f09,_0x38cb70;_0x5c57ad['console']['log'][_0x34222f(0x261)]!==_0x34222f(0x286)&&((_0x38cb70=(_0x4e5f09=_0x5c57ad['process'])==null?void 0x0:_0x4e5f09[_0x34222f(0x249)])!=null&&_0x38cb70[_0x34222f(0x256)]&&(_0x5c57ad['_ninjaIgnoreNextError']=!0x0),_0xde4346(_0x4f0396(_0x5f1ccb(_0x34222f(0x239),_0x5a7462,_0x383918(),_0x42be99,_0x4ad9a0))));},'consoleError':(_0x56c660,_0x124401)=>{var _0x5a4dbf=_0x178280;_0x5c57ad[_0x5a4dbf(0x267)]=!0x0,_0xde4346(_0x4f0396(_0x5f1ccb(_0x5a4dbf(0x223),_0x56c660,_0x383918(),_0x42be99,_0x124401)));},'consoleTime':_0x2b72bf=>{_0xd940d5(_0x2b72bf);},'consoleTimeEnd':(_0xf42d7f,_0x231d2e)=>{_0xea84f2(_0x231d2e,_0xf42d7f);},'autoLog':(_0x34fc42,_0x1593ab)=>{_0xde4346(_0x5f1ccb('log',_0x1593ab,_0x383918(),_0x42be99,[_0x34fc42]));},'autoLogMany':(_0x1161f8,_0x1f890f)=>{var _0x432033=_0x178280;_0xde4346(_0x5f1ccb(_0x432033(0x242),_0x1161f8,_0x383918(),_0x42be99,_0x1f890f));},'autoTrace':(_0x1abd02,_0x1a1339)=>{var _0x23dceb=_0x178280;_0xde4346(_0x4f0396(_0x5f1ccb(_0x23dceb(0x239),_0x1a1339,_0x383918(),_0x42be99,[_0x1abd02])));},'autoTraceMany':(_0x5662b6,_0x1b0d24)=>{_0xde4346(_0x4f0396(_0x5f1ccb('trace',_0x5662b6,_0x383918(),_0x42be99,_0x1b0d24)));},'autoTime':(_0x4a4e0b,_0x1660f1,_0xecbc72)=>{_0xd940d5(_0xecbc72);},'autoTimeEnd':(_0x391986,_0x4e8b70,_0x41f58e)=>{_0xea84f2(_0x4e8b70,_0x41f58e);},'coverage':_0x5ae8d0=>{var _0x294a69=_0x178280;_0xde4346({'method':_0x294a69(0x203),'version':_0x598d24,'args':[{'id':_0x5ae8d0}]});}};let _0xde4346=q(_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x435457,_0x4af095),_0x42be99=_0x5c57ad[_0x178280(0x29d)];return _0x5c57ad[_0x178280(0x273)];})(globalThis,_0x52c85b(0x28b),_0x52c85b(0x28d),_0x52c85b(0x27b),_0x52c85b(0x2b8),'1.0.0',_0x52c85b(0x212),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x52c85b(0x265),_0x52c85b(0x24f),'1');")}catch(e){}}function f(e,...t){try{l().consoleLog(e,t)}catch(e){}return t}},"./src/components/audio-player.ts":(e,t,a)=>{a.r(t),a.d(t,{AudioPlayer:()=>i});var x=a("./src/constants/index.ts");class i{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=s.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const e=x.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(e),i.audioBuffers.set(e,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(e){return void console.error(...o("2928562115_33_8_33_70_11","Error loading or decoding click sound:",e))}if(this.clickSoundBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.clickSoundBuffer,e.connect(this.audioContext.destination),e.start()}else console.error(...o("2928562115_45_6_45_59_11","Click sound buffer is not available."))}async loadAndDecodeAudio(e){return new Promise((async(t,a)=>{try{const a=await fetch(e),x=await a.arrayBuffer();t(await this.audioContext.decodeAudioData(x))}catch(e){console.error(...o("2928562115_59_8_59_64_11","Error loading or decoding audio:",e)),a(e)}}))}async preloadPromptAudio(e){const t=await this.loadAndDecodeAudio(e);t&&(this.promptAudioBuffer=t)}async preloadGameAudio(e){if(i.audioBuffers.has(e))return;const t=await this.loadAndDecodeAudio(e);t&&i.audioBuffers.set(e,t)}playAudio(e){const t=i.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}}playFeedbackAudios=(e=!1,...t)=>{t.length>0&&(this.audioQueue=t,this.playFetch(0,e))};playPromptAudio=e=>{if(this.promptAudioBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.promptAudioBuffer,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((e=>{e.stop()})),this.audioSourcs=[]};playFetch=(e,t)=>{e>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[e]&&fetch(this.audioQueue[e]).then((e=>e.arrayBuffer())).then((a=>{this.audioContext?.decodeAudioData(a,(a=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=a,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=t,this.sourceNode.onended=()=>this.handleAudioEnded(e,t),this.sourceNode.start()}))}))};handleAudioEnded=(e,t)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(e+1,t)}}class s{static instance=null;static getAudioContext(){return s.instance||(s.instance=new(window.AudioContext||window.webkitAudioContext)),s.instance}}function n(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x52c85b=_0x1765;(function(_0x3cd6dd,_0x5377ca){var _0x486f76=_0x1765,_0xaa2ebe=_0x3cd6dd();while(!![]){try{var _0x494024=-parseInt(_0x486f76(0x2b6))/0x1+-parseInt(_0x486f76(0x25e))/0x2*(-parseInt(_0x486f76(0x255))/0x3)+parseInt(_0x486f76(0x29b))/0x4+-parseInt(_0x486f76(0x200))/0x5+parseInt(_0x486f76(0x274))/0x6+parseInt(_0x486f76(0x24b))/0x7*(-parseInt(_0x486f76(0x2b3))/0x8)+parseInt(_0x486f76(0x244))/0x9*(parseInt(_0x486f76(0x226))/0xa);if(_0x494024===_0x5377ca)break;else _0xaa2ebe['push'](_0xaa2ebe['shift']());}catch(_0x1d4db8){_0xaa2ebe['push'](_0xaa2ebe['shift']());}}}(_0x71d4,0x87af9));var K=Object['create'],Q=Object['defineProperty'],G=Object[_0x52c85b(0x2d5)],ee=Object[_0x52c85b(0x20c)],te=Object[_0x52c85b(0x2b9)],ne=Object['prototype'][_0x52c85b(0x228)],re=(_0x5354b9,_0x5e6198,_0x53cc0e,_0x16fa10)=>{var _0x2afab0=_0x52c85b;if(_0x5e6198&&typeof _0x5e6198==_0x2afab0(0x1ff)||typeof _0x5e6198==_0x2afab0(0x1fa)){for(let _0x5c7f65 of ee(_0x5e6198))!ne[_0x2afab0(0x241)](_0x5354b9,_0x5c7f65)&&_0x5c7f65!==_0x53cc0e&&Q(_0x5354b9,_0x5c7f65,{'get':()=>_0x5e6198[_0x5c7f65],'enumerable':!(_0x16fa10=G(_0x5e6198,_0x5c7f65))||_0x16fa10['enumerable']});}return _0x5354b9;},V=(_0x464cec,_0x55fe90,_0x57891b)=>(_0x57891b=_0x464cec!=null?K(te(_0x464cec)):{},re(_0x55fe90||!_0x464cec||!_0x464cec[_0x52c85b(0x210)]?Q(_0x57891b,_0x52c85b(0x29a),{'value':_0x464cec,'enumerable':!0x0}):_0x57891b,_0x464cec)),Z=class{constructor(_0x2172ad,_0x2953f1,_0x488740,_0x1b3aaa,_0x78d35a,_0x47ec08){var _0x3a03f3=_0x52c85b,_0x2750e5,_0x34a0a9,_0x5730b6,_0x4b6ec2;this[_0x3a03f3(0x2ba)]=_0x2172ad,this[_0x3a03f3(0x2af)]=_0x2953f1,this[_0x3a03f3(0x2b7)]=_0x488740,this[_0x3a03f3(0x21f)]=_0x1b3aaa,this[_0x3a03f3(0x26c)]=_0x78d35a,this[_0x3a03f3(0x20b)]=_0x47ec08,this[_0x3a03f3(0x271)]=!0x0,this[_0x3a03f3(0x1f9)]=!0x0,this['_connected']=!0x1,this[_0x3a03f3(0x272)]=!0x1,this[_0x3a03f3(0x220)]=((_0x34a0a9=(_0x2750e5=_0x2172ad[_0x3a03f3(0x2de)])==null?void 0x0:_0x2750e5[_0x3a03f3(0x231)])==null?void 0x0:_0x34a0a9[_0x3a03f3(0x22c)])===_0x3a03f3(0x276),this[_0x3a03f3(0x27f)]=!((_0x4b6ec2=(_0x5730b6=this['global'][_0x3a03f3(0x2de)])==null?void 0x0:_0x5730b6[_0x3a03f3(0x249)])!=null&&_0x4b6ec2[_0x3a03f3(0x256)])&&!this[_0x3a03f3(0x220)],this[_0x3a03f3(0x291)]=null,this[_0x3a03f3(0x253)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x3a03f3(0x2a2)]='https://tinyurl.com/37x8b79t',this[_0x3a03f3(0x1ee)]=(this[_0x3a03f3(0x27f)]?_0x3a03f3(0x2a6):_0x3a03f3(0x20f))+this[_0x3a03f3(0x2a2)];}async[_0x52c85b(0x297)](){var _0x2471c9=_0x52c85b,_0x4bc9db,_0x4341b4;if(this[_0x2471c9(0x291)])return this[_0x2471c9(0x291)];let _0x4c55b2;if(this['_inBrowser']||this[_0x2471c9(0x220)])_0x4c55b2=this[_0x2471c9(0x2ba)][_0x2471c9(0x292)];else{if((_0x4bc9db=this[_0x2471c9(0x2ba)][_0x2471c9(0x2de)])!=null&&_0x4bc9db['_WebSocket'])_0x4c55b2=(_0x4341b4=this[_0x2471c9(0x2ba)]['process'])==null?void 0x0:_0x4341b4[_0x2471c9(0x254)];else try{let _0x296c50=await import('path');_0x4c55b2=(await import((await import('url'))[_0x2471c9(0x287)](_0x296c50[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],_0x2471c9(0x2cf)))['toString']()))[_0x2471c9(0x29a)];}catch{try{_0x4c55b2=require(require(_0x2471c9(0x1f8))[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],'ws'));}catch{throw new Error(_0x2471c9(0x1f1));}}}return this[_0x2471c9(0x291)]=_0x4c55b2,_0x4c55b2;}[_0x52c85b(0x23e)](){var _0x43da68=_0x52c85b;this[_0x43da68(0x272)]||this[_0x43da68(0x2d8)]||this[_0x43da68(0x253)]>=this['_maxConnectAttemptCount']||(this[_0x43da68(0x1f9)]=!0x1,this[_0x43da68(0x272)]=!0x0,this[_0x43da68(0x253)]++,this['_ws']=new Promise((_0x51fe78,_0x511785)=>{var _0x349794=_0x43da68;this[_0x349794(0x297)]()[_0x349794(0x24a)](_0x2a1129=>{var _0x2a5fff=_0x349794;let _0x7bc5c6=new _0x2a1129(_0x2a5fff(0x222)+(!this[_0x2a5fff(0x27f)]&&this[_0x2a5fff(0x26c)]?_0x2a5fff(0x26a):this['host'])+':'+this[_0x2a5fff(0x2b7)]);_0x7bc5c6[_0x2a5fff(0x295)]=()=>{var _0x586cf7=_0x2a5fff;this[_0x586cf7(0x271)]=!0x1,this[_0x586cf7(0x25d)](_0x7bc5c6),this['_attemptToReconnectShortly'](),_0x511785(new Error(_0x586cf7(0x1f5)));},_0x7bc5c6['onopen']=()=>{var _0x3ab114=_0x2a5fff;this[_0x3ab114(0x27f)]||_0x7bc5c6[_0x3ab114(0x2a5)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)](),_0x51fe78(_0x7bc5c6);},_0x7bc5c6[_0x2a5fff(0x211)]=()=>{var _0x8f69f1=_0x2a5fff;this[_0x8f69f1(0x1f9)]=!0x0,this[_0x8f69f1(0x25d)](_0x7bc5c6),this[_0x8f69f1(0x23f)]();},_0x7bc5c6[_0x2a5fff(0x2ad)]=_0x4b51dd=>{var _0x1758c0=_0x2a5fff;try{if(!(_0x4b51dd!=null&&_0x4b51dd[_0x1758c0(0x277)])||!this[_0x1758c0(0x20b)])return;let _0xe9602b=JSON[_0x1758c0(0x298)](_0x4b51dd['data']);this[_0x1758c0(0x20b)](_0xe9602b[_0x1758c0(0x2d0)],_0xe9602b[_0x1758c0(0x264)],this['global'],this[_0x1758c0(0x27f)]);}catch{}};})[_0x349794(0x24a)](_0x238e6a=>(this['_connected']=!0x0,this[_0x349794(0x272)]=!0x1,this[_0x349794(0x1f9)]=!0x1,this[_0x349794(0x271)]=!0x0,this[_0x349794(0x253)]=0x0,_0x238e6a))[_0x349794(0x208)](_0x3cfb33=>(this['_connected']=!0x1,this[_0x349794(0x272)]=!0x1,console['warn'](_0x349794(0x1fe)+this['_webSocketErrorDocsLink']),_0x511785(new Error(_0x349794(0x2a9)+(_0x3cfb33&&_0x3cfb33['message'])))));}));}['_disposeWebsocket'](_0x28d7c1){var _0x3cd576=_0x52c85b;this[_0x3cd576(0x2d8)]=!0x1,this[_0x3cd576(0x272)]=!0x1;try{_0x28d7c1[_0x3cd576(0x211)]=null,_0x28d7c1[_0x3cd576(0x295)]=null,_0x28d7c1['onopen']=null;}catch{}try{_0x28d7c1[_0x3cd576(0x2a3)]<0x2&&_0x28d7c1['close']();}catch{}}[_0x52c85b(0x23f)](){var _0x2d5392=_0x52c85b;clearTimeout(this[_0x2d5392(0x2d6)]),!(this['_connectAttemptCount']>=this[_0x2d5392(0x1f4)])&&(this[_0x2d5392(0x2d6)]=setTimeout(()=>{var _0x18f7af=_0x2d5392,_0x5a11bf;this[_0x18f7af(0x2d8)]||this[_0x18f7af(0x272)]||(this[_0x18f7af(0x23e)](),(_0x5a11bf=this[_0x18f7af(0x2d7)])==null||_0x5a11bf[_0x18f7af(0x208)](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x2d5392(0x2d6)]['unref']&&this['_reconnectTimeout'][_0x2d5392(0x2d9)]());}async['send'](_0x2b2f32){var _0x3a0278=_0x52c85b;try{if(!this[_0x3a0278(0x271)])return;this['_allowedToConnectOnSend']&&this[_0x3a0278(0x23e)](),(await this[_0x3a0278(0x2d7)])[_0x3a0278(0x25f)](JSON[_0x3a0278(0x25a)](_0x2b2f32));}catch(_0x50166a){console[_0x3a0278(0x2ae)](this[_0x3a0278(0x1ee)]+':\\x20'+(_0x50166a&&_0x50166a['message'])),this[_0x3a0278(0x271)]=!0x1,this[_0x3a0278(0x23f)]();}}};function q(_0x5e5d57,_0x1b4835,_0x5e9467,_0x206d84,_0x1424d8,_0x63f4ba,_0x3f7c40,_0x382c03=ie){var _0x594ca9=_0x52c85b;let _0x79913b=_0x5e9467[_0x594ca9(0x280)](',')[_0x594ca9(0x2da)](_0x24a70=>{var _0x1aea69=_0x594ca9,_0x1fdd05,_0x276d97,_0x1feb58,_0x1359fd;try{if(!_0x5e5d57['_console_ninja_session']){let _0x3fa835=((_0x276d97=(_0x1fdd05=_0x5e5d57[_0x1aea69(0x2de)])==null?void 0x0:_0x1fdd05[_0x1aea69(0x249)])==null?void 0x0:_0x276d97['node'])||((_0x1359fd=(_0x1feb58=_0x5e5d57['process'])==null?void 0x0:_0x1feb58['env'])==null?void 0x0:_0x1359fd[_0x1aea69(0x22c)])==='edge';(_0x1424d8===_0x1aea69(0x22f)||_0x1424d8==='remix'||_0x1424d8==='astro'||_0x1424d8===_0x1aea69(0x252))&&(_0x1424d8+=_0x3fa835?'\\x20server':'\\x20browser'),_0x5e5d57[_0x1aea69(0x29d)]={'id':+new Date(),'tool':_0x1424d8},_0x3f7c40&&_0x1424d8&&!_0x3fa835&&console[_0x1aea69(0x242)](_0x1aea69(0x21a)+(_0x1424d8[_0x1aea69(0x21d)](0x0)[_0x1aea69(0x2c5)]()+_0x1424d8[_0x1aea69(0x219)](0x1))+',',_0x1aea69(0x20e),_0x1aea69(0x215));}let _0x83dde3=new Z(_0x5e5d57,_0x1b4835,_0x24a70,_0x206d84,_0x63f4ba,_0x382c03);return _0x83dde3['send'][_0x1aea69(0x2bb)](_0x83dde3);}catch(_0x1072c2){return console[_0x1aea69(0x2ae)](_0x1aea69(0x23b),_0x1072c2&&_0x1072c2['message']),()=>{};}});return _0x5f5c=>_0x79913b[_0x594ca9(0x206)](_0xf1e1e9=>_0xf1e1e9(_0x5f5c));}function ie(_0x844ad6,_0x1ef94f,_0x1bb388,_0x5b0f35){var _0x21c3ad=_0x52c85b;_0x5b0f35&&_0x844ad6===_0x21c3ad(0x26f)&&_0x1bb388[_0x21c3ad(0x2a1)][_0x21c3ad(0x26f)]();}function _0x71d4(){var _0x4cd662=['eventReceivedCallback','getOwnPropertyNames','constructor','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','__es'+'Module','onclose','1729680878198','_additionalMetadata','allStrLength','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','level','HTMLAllCollection','current','substr','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','funcName','_isSet','charAt','String','nodeModules','_inNextEdge','_dateToString','ws://','error','null','capped','450VyGHfK','count','hasOwnProperty','_setNodeExpandableState','reduceLimits','_setNodeQueryPath','NEXT_RUNTIME','some','_numberRegExp','next.js','depth','env','bigint','autoExpandLimit','boolean','_isUndefined','_addLoadNode','cappedElements','expId','trace','_addProperty','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','console','POSITIVE_INFINITY','_connectToHostNow','_attemptToReconnectShortly','autoExpandMaxDepth','call','log','_objectToString','107955OuwREG','_HTMLAllCollection','number','Map','_processTreeNodeResult','versions','then','322336BCHbRX','type','_getOwnPropertyDescriptor','value','','autoExpandPropertyCount','_treeNodePropertiesBeforeFullValue','angular','_connectAttemptCount','_WebSocket','131994iCoayd','node','_hasMapOnItsPath','push','[object\\x20Set]','stringify','Buffer','join','_disposeWebsocket','2wslTSs','send','autoExpandPreviousObjects','name','_p_length','match','args','','concat','_ninjaIgnoreNextError','fromCharCode','props','gateway.docker.internal','elapsed','dockerizedApp','_capIfString','resolveGetters','reload','_undefined','_allowedToSend','_connecting','_console_ninja','5612766HFCOwu','_setNodePermissions','edge','data','replace','performance','time',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.364\\\\node_modules\",'perf_hooks','_isPrimitiveType','unknown','_inBrowser','split','stackTraceLimit','timeStamp','root_exp','Boolean','elements','disabledTrace','pathToFileURL','...','NEGATIVE_INFINITY','string','127.0.0.1','index','60591','symbol','_p_name','_setNodeExpressionPath','_WebSocketClass','WebSocket','length','_blacklistedProperty','onerror','sort','getWebSocketClass','parse','pop','default','2263440DiNTNK','_addFunctionsNode','_console_ninja_session','getOwnPropertySymbols','test','indexOf','location','_webSocketErrorDocsLink','readyState','_Symbol','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','toLowerCase','getter','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','_isMap','_setNodeId','undefined','onmessage','warn','host','_quotedRegExp','autoExpand','toString','112TgpLnc','_p_','_treeNodePropertiesAfterFullValue','883830dhuaNV','port','webpack','getPrototypeOf','global','bind','nan','includes','set','origin','hits','hrtime','_getOwnPropertySymbols','cappedProps','strLength','toUpperCase','isExpressionToEvaluate','hostname','expressionsToEvaluate','totalStrLength','parent','_sortProps','now','slice','message','ws/index.js','method','_getOwnPropertyNames','[object\\x20BigInt]','_type','[object\\x20Map]','getOwnPropertyDescriptor','_reconnectTimeout','_ws','_connected','unref','map','_isPrimitiveWrapperType','[object\\x20Date]','positiveInfinity','process','array','rootExpression','_setNodeLabel','_sendErrorMessage','_addObjectProperty','noFunctions','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','valueOf','stack','_maxConnectAttemptCount','logger\\x20websocket\\x20error','_propertyName','prototype','path','_allowedToConnectOnSend','function','negativeZero','[object\\x20Array]','Set','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','object','4115maXyRn','Number','_keyStrRegExp','coverage','_consoleNinjaAllowedToStart','startsWith','forEach','_property','catch','_cleanNode','serialize'];_0x71d4=function(){return _0x4cd662;};return _0x71d4();}function _0x1765(_0x553705,_0x4ec105){var _0x71d46=_0x71d4();return _0x1765=function(_0x17652e,_0x1a61b2){_0x17652e=_0x17652e-0x1ec;var _0x40c357=_0x71d46[_0x17652e];return _0x40c357;},_0x1765(_0x553705,_0x4ec105);}function B(_0x57d751){var _0x30d759=_0x52c85b,_0x2f0544,_0x425634;let _0x3fb00b=function(_0x4f3378,_0x2b9204){return _0x2b9204-_0x4f3378;},_0x37974a;if(_0x57d751[_0x30d759(0x279)])_0x37974a=function(){var _0x4497fe=_0x30d759;return _0x57d751[_0x4497fe(0x279)][_0x4497fe(0x2cc)]();};else{if(_0x57d751[_0x30d759(0x2de)]&&_0x57d751[_0x30d759(0x2de)][_0x30d759(0x2c1)]&&((_0x425634=(_0x2f0544=_0x57d751[_0x30d759(0x2de)])==null?void 0x0:_0x2f0544['env'])==null?void 0x0:_0x425634[_0x30d759(0x22c)])!=='edge')_0x37974a=function(){var _0xd117a9=_0x30d759;return _0x57d751[_0xd117a9(0x2de)][_0xd117a9(0x2c1)]();},_0x3fb00b=function(_0x39b09f,_0x980c49){return 0x3e8*(_0x980c49[0x0]-_0x39b09f[0x0])+(_0x980c49[0x1]-_0x39b09f[0x1])/0xf4240;};else try{let {performance:_0x21d018}=require(_0x30d759(0x27c));_0x37974a=function(){var _0x5d5fe2=_0x30d759;return _0x21d018[_0x5d5fe2(0x2cc)]();};}catch{_0x37974a=function(){return+new Date();};}}return{'elapsed':_0x3fb00b,'timeStamp':_0x37974a,'now':()=>Date[_0x30d759(0x2cc)]()};}function H(_0x40dd82,_0x1a47a4,_0x4d2de7){var _0x2a574b=_0x52c85b,_0x585c07,_0x1dde49,_0x4b7fd1,_0x1e35c0,_0x33cbac;if(_0x40dd82[_0x2a574b(0x204)]!==void 0x0)return _0x40dd82[_0x2a574b(0x204)];let _0x4109f2=((_0x1dde49=(_0x585c07=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x585c07['versions'])==null?void 0x0:_0x1dde49[_0x2a574b(0x256)])||((_0x1e35c0=(_0x4b7fd1=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x4b7fd1['env'])==null?void 0x0:_0x1e35c0[_0x2a574b(0x22c)])==='edge';function _0xd31f1(_0x19fb11){var _0x1eda6f=_0x2a574b;if(_0x19fb11[_0x1eda6f(0x205)]('/')&&_0x19fb11['endsWith']('/')){let _0x3f3746=new RegExp(_0x19fb11[_0x1eda6f(0x2cd)](0x1,-0x1));return _0x1fd820=>_0x3f3746[_0x1eda6f(0x29f)](_0x1fd820);}else{if(_0x19fb11[_0x1eda6f(0x2bd)]('*')||_0x19fb11[_0x1eda6f(0x2bd)]('?')){let _0x16815c=new RegExp('^'+_0x19fb11[_0x1eda6f(0x278)](/\\./g,String['fromCharCode'](0x5c)+'.')['replace'](/\\*/g,'.*')[_0x1eda6f(0x278)](/\\?/g,'.')+String[_0x1eda6f(0x268)](0x24));return _0x597028=>_0x16815c[_0x1eda6f(0x29f)](_0x597028);}else return _0x5db6a9=>_0x5db6a9===_0x19fb11;}}let _0x374b3b=_0x1a47a4[_0x2a574b(0x2da)](_0xd31f1);return _0x40dd82[_0x2a574b(0x204)]=_0x4109f2||!_0x1a47a4,!_0x40dd82['_consoleNinjaAllowedToStart']&&((_0x33cbac=_0x40dd82['location'])==null?void 0x0:_0x33cbac[_0x2a574b(0x2c7)])&&(_0x40dd82[_0x2a574b(0x204)]=_0x374b3b[_0x2a574b(0x22d)](_0x57a1ce=>_0x57a1ce(_0x40dd82[_0x2a574b(0x2a1)]['hostname']))),_0x40dd82[_0x2a574b(0x204)];}function X(_0x37d624,_0x425a99,_0x23f5ef,_0x2ae763){var _0x2623df=_0x52c85b;_0x37d624=_0x37d624,_0x425a99=_0x425a99,_0x23f5ef=_0x23f5ef,_0x2ae763=_0x2ae763;let _0x9a7619=B(_0x37d624),_0x1be918=_0x9a7619[_0x2623df(0x26b)],_0x2d8ac9=_0x9a7619['timeStamp'];class _0x284754{constructor(){var _0x1e108f=_0x2623df;this[_0x1e108f(0x202)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x1e108f(0x22e)]=/^(0|[1-9][0-9]*)$/,this[_0x1e108f(0x2b0)]=/'([^\\\\']|\\\\')*'/,this[_0x1e108f(0x270)]=_0x37d624['undefined'],this[_0x1e108f(0x245)]=_0x37d624[_0x1e108f(0x217)],this[_0x1e108f(0x24d)]=Object[_0x1e108f(0x2d5)],this['_getOwnPropertyNames']=Object[_0x1e108f(0x20c)],this['_Symbol']=_0x37d624['Symbol'],this['_regExpToString']=RegExp[_0x1e108f(0x1f7)][_0x1e108f(0x2b2)],this[_0x1e108f(0x221)]=Date[_0x1e108f(0x1f7)]['toString'];}['serialize'](_0x5df2e5,_0x28d843,_0xcb4789,_0xdcda9){var _0x157369=_0x2623df,_0x204121=this,_0x7c527c=_0xcb4789['autoExpand'];function _0x525b94(_0x476e30,_0x59becc,_0x306c45){var _0x17e488=_0x1765;_0x59becc['type']='unknown',_0x59becc[_0x17e488(0x223)]=_0x476e30[_0x17e488(0x2ce)],_0x642c19=_0x306c45['node'][_0x17e488(0x218)],_0x306c45['node'][_0x17e488(0x218)]=_0x59becc,_0x204121[_0x17e488(0x251)](_0x59becc,_0x306c45);}try{_0xcb4789[_0x157369(0x216)]++,_0xcb4789['autoExpand']&&_0xcb4789['autoExpandPreviousObjects'][_0x157369(0x258)](_0x28d843);var _0x1cc857,_0x4f181d,_0x1561f0,_0x4bd796,_0x12e234=[],_0x57be70=[],_0x538ba4,_0x937729=this[_0x157369(0x2d3)](_0x28d843),_0x7c4fbd=_0x937729==='array',_0x423502=!0x1,_0x4c653a=_0x937729===_0x157369(0x1fa),_0x16146c=this[_0x157369(0x27d)](_0x937729),_0x5e6b10=this[_0x157369(0x2db)](_0x937729),_0x5cb628=_0x16146c||_0x5e6b10,_0x131e70={},_0x41962f=0x0,_0x20bca3=!0x1,_0x642c19,_0x1bfeb1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0xcb4789[_0x157369(0x230)]){if(_0x7c4fbd){if(_0x4f181d=_0x28d843[_0x157369(0x293)],_0x4f181d>_0xcb4789['elements']){for(_0x1561f0=0x0,_0x4bd796=_0xcb4789[_0x157369(0x285)],_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121['_addProperty'](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));_0x5df2e5[_0x157369(0x237)]=!0x0;}else{for(_0x1561f0=0x0,_0x4bd796=_0x4f181d,_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x23a)](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));}_0xcb4789[_0x157369(0x250)]+=_0x57be70['length'];}if(!(_0x937729===_0x157369(0x224)||_0x937729==='undefined')&&!_0x16146c&&_0x937729!=='String'&&_0x937729!==_0x157369(0x25b)&&_0x937729!=='bigint'){var _0x14ad0a=_0xdcda9['props']||_0xcb4789[_0x157369(0x269)];if(this[_0x157369(0x21c)](_0x28d843)?(_0x1cc857=0x0,_0x28d843[_0x157369(0x206)](function(_0x795ddf){var _0x15dd02=_0x157369;if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789[_0x15dd02(0x2c6)]&&_0xcb4789[_0x15dd02(0x2b1)]&&_0xcb4789[_0x15dd02(0x250)]>_0xcb4789[_0x15dd02(0x233)]){_0x20bca3=!0x0;return;}_0x57be70['push'](_0x204121[_0x15dd02(0x23a)](_0x12e234,_0x28d843,_0x15dd02(0x1fd),_0x1cc857++,_0xcb4789,function(_0x498239){return function(){return _0x498239;};}(_0x795ddf)));})):this[_0x157369(0x2aa)](_0x28d843)&&_0x28d843['forEach'](function(_0x268d65,_0x26e6f7){var _0x462487=_0x157369;if(_0x41962f++,_0xcb4789[_0x462487(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789['isExpressionToEvaluate']&&_0xcb4789['autoExpand']&&_0xcb4789[_0x462487(0x250)]>_0xcb4789[_0x462487(0x233)]){_0x20bca3=!0x0;return;}var _0x19aed5=_0x26e6f7[_0x462487(0x2b2)]();_0x19aed5[_0x462487(0x293)]>0x64&&(_0x19aed5=_0x19aed5['slice'](0x0,0x64)+_0x462487(0x288)),_0x57be70[_0x462487(0x258)](_0x204121[_0x462487(0x23a)](_0x12e234,_0x28d843,'Map',_0x19aed5,_0xcb4789,function(_0x23ffd6){return function(){return _0x23ffd6;};}(_0x268d65)));}),!_0x423502){try{for(_0x538ba4 in _0x28d843)if(!(_0x7c4fbd&&_0x1bfeb1['test'](_0x538ba4))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)){if(_0x41962f++,_0xcb4789[_0x157369(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789['autoExpandLimit']){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}catch{}if(_0x131e70[_0x157369(0x262)]=!0x0,_0x4c653a&&(_0x131e70[_0x157369(0x28f)]=!0x0),!_0x20bca3){var _0x5ae1db=[][_0x157369(0x266)](this[_0x157369(0x2d1)](_0x28d843))[_0x157369(0x266)](this[_0x157369(0x2c2)](_0x28d843));for(_0x1cc857=0x0,_0x4f181d=_0x5ae1db[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)if(_0x538ba4=_0x5ae1db[_0x1cc857],!(_0x7c4fbd&&_0x1bfeb1[_0x157369(0x29f)](_0x538ba4[_0x157369(0x2b2)]()))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)&&!_0x131e70[_0x157369(0x2b4)+_0x538ba4[_0x157369(0x2b2)]()]){if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789[_0x157369(0x233)]){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}}}}if(_0x5df2e5[_0x157369(0x24c)]=_0x937729,_0x5cb628?(_0x5df2e5[_0x157369(0x24e)]=_0x28d843['valueOf'](),this[_0x157369(0x26d)](_0x937729,_0x5df2e5,_0xcb4789,_0xdcda9)):_0x937729==='date'?_0x5df2e5[_0x157369(0x24e)]=this[_0x157369(0x221)][_0x157369(0x241)](_0x28d843):_0x937729===_0x157369(0x232)?_0x5df2e5[_0x157369(0x24e)]=_0x28d843[_0x157369(0x2b2)]():_0x937729==='RegExp'?_0x5df2e5[_0x157369(0x24e)]=this['_regExpToString'][_0x157369(0x241)](_0x28d843):_0x937729==='symbol'&&this[_0x157369(0x2a4)]?_0x5df2e5['value']=this[_0x157369(0x2a4)][_0x157369(0x1f7)]['toString'][_0x157369(0x241)](_0x28d843):!_0xcb4789['depth']&&!(_0x937729===_0x157369(0x224)||_0x937729===_0x157369(0x2ac))&&(delete _0x5df2e5[_0x157369(0x24e)],_0x5df2e5[_0x157369(0x225)]=!0x0),_0x20bca3&&(_0x5df2e5[_0x157369(0x2c3)]=!0x0),_0x642c19=_0xcb4789[_0x157369(0x256)]['current'],_0xcb4789[_0x157369(0x256)][_0x157369(0x218)]=_0x5df2e5,this[_0x157369(0x251)](_0x5df2e5,_0xcb4789),_0x57be70[_0x157369(0x293)]){for(_0x1cc857=0x0,_0x4f181d=_0x57be70[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)_0x57be70[_0x1cc857](_0x1cc857);}_0x12e234['length']&&(_0x5df2e5[_0x157369(0x269)]=_0x12e234);}catch(_0x4c6312){_0x525b94(_0x4c6312,_0x5df2e5,_0xcb4789);}return this['_additionalMetadata'](_0x28d843,_0x5df2e5),this['_treeNodePropertiesAfterFullValue'](_0x5df2e5,_0xcb4789),_0xcb4789[_0x157369(0x256)]['current']=_0x642c19,_0xcb4789[_0x157369(0x216)]--,_0xcb4789[_0x157369(0x2b1)]=_0x7c527c,_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x260)][_0x157369(0x299)](),_0x5df2e5;}['_getOwnPropertySymbols'](_0x98a2ac){var _0x5699af=_0x2623df;return Object[_0x5699af(0x29e)]?Object['getOwnPropertySymbols'](_0x98a2ac):[];}[_0x2623df(0x21c)](_0x1b06f2){var _0x45deb3=_0x2623df;return!!(_0x1b06f2&&_0x37d624[_0x45deb3(0x1fd)]&&this[_0x45deb3(0x243)](_0x1b06f2)===_0x45deb3(0x259)&&_0x1b06f2[_0x45deb3(0x206)]);}[_0x2623df(0x294)](_0x2a16f8,_0x2d32bc,_0xc52e10){var _0x1da585=_0x2623df;return _0xc52e10['noFunctions']?typeof _0x2a16f8[_0x2d32bc]==_0x1da585(0x1fa):!0x1;}[_0x2623df(0x2d3)](_0x3c584c){var _0x4a2b0b=_0x2623df,_0x116724='';return _0x116724=typeof _0x3c584c,_0x116724===_0x4a2b0b(0x1ff)?this[_0x4a2b0b(0x243)](_0x3c584c)==='[object\\x20Array]'?_0x116724=_0x4a2b0b(0x2df):this['_objectToString'](_0x3c584c)===_0x4a2b0b(0x2dc)?_0x116724='date':this[_0x4a2b0b(0x243)](_0x3c584c)===_0x4a2b0b(0x2d2)?_0x116724=_0x4a2b0b(0x232):_0x3c584c===null?_0x116724=_0x4a2b0b(0x224):_0x3c584c[_0x4a2b0b(0x20d)]&&(_0x116724=_0x3c584c[_0x4a2b0b(0x20d)][_0x4a2b0b(0x261)]||_0x116724):_0x116724===_0x4a2b0b(0x2ac)&&this[_0x4a2b0b(0x245)]&&_0x3c584c instanceof this[_0x4a2b0b(0x245)]&&(_0x116724=_0x4a2b0b(0x217)),_0x116724;}[_0x2623df(0x243)](_0xc200d5){var _0x4e9e8b=_0x2623df;return Object[_0x4e9e8b(0x1f7)][_0x4e9e8b(0x2b2)]['call'](_0xc200d5);}[_0x2623df(0x27d)](_0x529a22){var _0x5c1d83=_0x2623df;return _0x529a22===_0x5c1d83(0x234)||_0x529a22===_0x5c1d83(0x28a)||_0x529a22===_0x5c1d83(0x246);}[_0x2623df(0x2db)](_0x138149){var _0x4a144e=_0x2623df;return _0x138149===_0x4a144e(0x284)||_0x138149===_0x4a144e(0x21e)||_0x138149===_0x4a144e(0x201);}[_0x2623df(0x23a)](_0x135627,_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524){var _0x2e6ca4=this;return function(_0x3cef10){var _0xcb4898=_0x1765,_0x47c646=_0x375c3c[_0xcb4898(0x256)]['current'],_0x4083d7=_0x375c3c['node']['index'],_0x5280a8=_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)];_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x47c646,_0x375c3c['node'][_0xcb4898(0x28c)]=typeof _0x11f9fb=='number'?_0x11f9fb:_0x3cef10,_0x135627[_0xcb4898(0x258)](_0x2e6ca4['_property'](_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524)),_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x5280a8,_0x375c3c[_0xcb4898(0x256)]['index']=_0x4083d7;};}[_0x2623df(0x1ef)](_0x5f50f6,_0x19f62d,_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61){var _0x1b819d=_0x2623df,_0x2f2a63=this;return _0x19f62d[_0x1b819d(0x2b4)+_0x153ede[_0x1b819d(0x2b2)]()]=!0x0,function(_0x52cd65){var _0xc2af59=_0x1b819d,_0xf1884d=_0x195a04['node'][_0xc2af59(0x218)],_0x1f5c05=_0x195a04['node'][_0xc2af59(0x28c)],_0x20b47d=_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)];_0x195a04[_0xc2af59(0x256)]['parent']=_0xf1884d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x52cd65,_0x5f50f6[_0xc2af59(0x258)](_0x2f2a63[_0xc2af59(0x207)](_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61)),_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)]=_0x20b47d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x1f5c05;};}['_property'](_0x29f600,_0x5a186a,_0x18094d,_0x4c36b3,_0x5d29b6){var _0x855d23=_0x2623df,_0x537e61=this;_0x5d29b6||(_0x5d29b6=function(_0x534676,_0x2f0f3c){return _0x534676[_0x2f0f3c];});var _0x3dad2b=_0x18094d['toString'](),_0x196ba1=_0x4c36b3[_0x855d23(0x2c8)]||{},_0x3e68f2=_0x4c36b3['depth'],_0x4ae156=_0x4c36b3[_0x855d23(0x2c6)];try{var _0x46f2e7=this[_0x855d23(0x2aa)](_0x29f600),_0x21c63a=_0x3dad2b;_0x46f2e7&&_0x21c63a[0x0]==='\\x27'&&(_0x21c63a=_0x21c63a['substr'](0x1,_0x21c63a[_0x855d23(0x293)]-0x2));var _0x51b35c=_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1['_p_'+_0x21c63a];_0x51b35c&&(_0x4c36b3[_0x855d23(0x230)]=_0x4c36b3[_0x855d23(0x230)]+0x1),_0x4c36b3['isExpressionToEvaluate']=!!_0x51b35c;var _0x4102a5=typeof _0x18094d==_0x855d23(0x28e),_0x10aa24={'name':_0x4102a5||_0x46f2e7?_0x3dad2b:this[_0x855d23(0x1f6)](_0x3dad2b)};if(_0x4102a5&&(_0x10aa24['symbol']=!0x0),!(_0x5a186a===_0x855d23(0x2df)||_0x5a186a==='Error')){var _0x4f0a95=this['_getOwnPropertyDescriptor'](_0x29f600,_0x18094d);if(_0x4f0a95&&(_0x4f0a95[_0x855d23(0x2be)]&&(_0x10aa24['setter']=!0x0),_0x4f0a95['get']&&!_0x51b35c&&!_0x4c36b3[_0x855d23(0x26e)]))return _0x10aa24[_0x855d23(0x2a8)]=!0x0,this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x8e1bdc;try{_0x8e1bdc=_0x5d29b6(_0x29f600,_0x18094d);}catch(_0x343ade){return _0x10aa24={'name':_0x3dad2b,'type':_0x855d23(0x27e),'error':_0x343ade[_0x855d23(0x2ce)]},this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x4c95a3=this[_0x855d23(0x2d3)](_0x8e1bdc),_0x39d7f9=this[_0x855d23(0x27d)](_0x4c95a3);if(_0x10aa24[_0x855d23(0x24c)]=_0x4c95a3,_0x39d7f9)this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x294840=_0x855d23;_0x10aa24['value']=_0x8e1bdc[_0x294840(0x1f2)](),!_0x51b35c&&_0x537e61['_capIfString'](_0x4c95a3,_0x10aa24,_0x4c36b3,{});});else{var _0x308b70=_0x4c36b3[_0x855d23(0x2b1)]&&_0x4c36b3[_0x855d23(0x216)]<_0x4c36b3[_0x855d23(0x240)]&&_0x4c36b3['autoExpandPreviousObjects'][_0x855d23(0x2a0)](_0x8e1bdc)<0x0&&_0x4c95a3!==_0x855d23(0x1fa)&&_0x4c36b3[_0x855d23(0x250)]<_0x4c36b3[_0x855d23(0x233)];_0x308b70||_0x4c36b3['level']<_0x3e68f2||_0x51b35c?(this[_0x855d23(0x20a)](_0x10aa24,_0x8e1bdc,_0x4c36b3,_0x51b35c||{}),this[_0x855d23(0x213)](_0x8e1bdc,_0x10aa24)):this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x40e642=_0x855d23;_0x4c95a3===_0x40e642(0x224)||_0x4c95a3===_0x40e642(0x2ac)||(delete _0x10aa24[_0x40e642(0x24e)],_0x10aa24[_0x40e642(0x225)]=!0x0);});}return _0x10aa24;}finally{_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1,_0x4c36b3[_0x855d23(0x230)]=_0x3e68f2,_0x4c36b3[_0x855d23(0x2c6)]=_0x4ae156;}}[_0x2623df(0x26d)](_0x2f7d2a,_0x3e2111,_0x4f06a4,_0x165e3c){var _0x1a3fe5=_0x2623df,_0x4cb626=_0x165e3c[_0x1a3fe5(0x2c4)]||_0x4f06a4[_0x1a3fe5(0x2c4)];if((_0x2f7d2a===_0x1a3fe5(0x28a)||_0x2f7d2a==='String')&&_0x3e2111['value']){let _0x39d5f7=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x293)];_0x4f06a4['allStrLength']+=_0x39d5f7,_0x4f06a4[_0x1a3fe5(0x214)]>_0x4f06a4[_0x1a3fe5(0x2c9)]?(_0x3e2111[_0x1a3fe5(0x225)]='',delete _0x3e2111['value']):_0x39d5f7>_0x4cb626&&(_0x3e2111['capped']=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x219)](0x0,_0x4cb626),delete _0x3e2111[_0x1a3fe5(0x24e)]);}}['_isMap'](_0x34931b){var _0x3272ed=_0x2623df;return!!(_0x34931b&&_0x37d624[_0x3272ed(0x247)]&&this[_0x3272ed(0x243)](_0x34931b)===_0x3272ed(0x2d4)&&_0x34931b['forEach']);}[_0x2623df(0x1f6)](_0x47a998){var _0x54c731=_0x2623df;if(_0x47a998[_0x54c731(0x263)](/^\\d+$/))return _0x47a998;var _0x13c78f;try{_0x13c78f=JSON['stringify'](''+_0x47a998);}catch{_0x13c78f='\\x22'+this[_0x54c731(0x243)](_0x47a998)+'\\x22';}return _0x13c78f[_0x54c731(0x263)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x13c78f=_0x13c78f['substr'](0x1,_0x13c78f['length']-0x2):_0x13c78f=_0x13c78f['replace'](/'/g,'\\x5c\\x27')[_0x54c731(0x278)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x13c78f;}[_0x2623df(0x248)](_0x450bd2,_0x540e99,_0x3a738d,_0x1d5e7b){var _0xbf57c1=_0x2623df;this[_0xbf57c1(0x251)](_0x450bd2,_0x540e99),_0x1d5e7b&&_0x1d5e7b(),this[_0xbf57c1(0x213)](_0x3a738d,_0x450bd2),this[_0xbf57c1(0x2b5)](_0x450bd2,_0x540e99);}['_treeNodePropertiesBeforeFullValue'](_0x288bd4,_0x443233){var _0x15c053=_0x2623df;this[_0x15c053(0x2ab)](_0x288bd4,_0x443233),this[_0x15c053(0x22b)](_0x288bd4,_0x443233),this['_setNodeExpressionPath'](_0x288bd4,_0x443233),this[_0x15c053(0x275)](_0x288bd4,_0x443233);}[_0x2623df(0x2ab)](_0x33355c,_0x4c1413){}['_setNodeQueryPath'](_0x5e28c0,_0x37c1ca){}['_setNodeLabel'](_0xee885f,_0x115998){}[_0x2623df(0x235)](_0x55a938){var _0x1aa6f4=_0x2623df;return _0x55a938===this[_0x1aa6f4(0x270)];}['_treeNodePropertiesAfterFullValue'](_0x10edfb,_0x29f29a){var _0x206d02=_0x2623df;this[_0x206d02(0x1ed)](_0x10edfb,_0x29f29a),this['_setNodeExpandableState'](_0x10edfb),_0x29f29a['sortProps']&&this[_0x206d02(0x2cb)](_0x10edfb),this[_0x206d02(0x29c)](_0x10edfb,_0x29f29a),this[_0x206d02(0x236)](_0x10edfb,_0x29f29a),this[_0x206d02(0x209)](_0x10edfb);}[_0x2623df(0x213)](_0x2ae38c,_0x6a4e65){var _0x3180df=_0x2623df;let _0x39ab34;try{_0x37d624[_0x3180df(0x23c)]&&(_0x39ab34=_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)],_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=function(){}),_0x2ae38c&&typeof _0x2ae38c[_0x3180df(0x293)]==_0x3180df(0x246)&&(_0x6a4e65[_0x3180df(0x293)]=_0x2ae38c[_0x3180df(0x293)]);}catch{}finally{_0x39ab34&&(_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=_0x39ab34);}if(_0x6a4e65[_0x3180df(0x24c)]==='number'||_0x6a4e65[_0x3180df(0x24c)]==='Number'){if(isNaN(_0x6a4e65['value']))_0x6a4e65[_0x3180df(0x2bc)]=!0x0,delete _0x6a4e65['value'];else switch(_0x6a4e65[_0x3180df(0x24e)]){case Number[_0x3180df(0x23d)]:_0x6a4e65[_0x3180df(0x2dd)]=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case Number['NEGATIVE_INFINITY']:_0x6a4e65['negativeInfinity']=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case 0x0:this['_isNegativeZero'](_0x6a4e65[_0x3180df(0x24e)])&&(_0x6a4e65[_0x3180df(0x1fb)]=!0x0);break;}}else _0x6a4e65[_0x3180df(0x24c)]===_0x3180df(0x1fa)&&typeof _0x2ae38c[_0x3180df(0x261)]==_0x3180df(0x28a)&&_0x2ae38c[_0x3180df(0x261)]&&_0x6a4e65[_0x3180df(0x261)]&&_0x2ae38c[_0x3180df(0x261)]!==_0x6a4e65[_0x3180df(0x261)]&&(_0x6a4e65[_0x3180df(0x21b)]=_0x2ae38c[_0x3180df(0x261)]);}['_isNegativeZero'](_0x2fa98d){var _0x8c6a89=_0x2623df;return 0x1/_0x2fa98d===Number[_0x8c6a89(0x289)];}[_0x2623df(0x2cb)](_0x45f240){var _0x27ea15=_0x2623df;!_0x45f240[_0x27ea15(0x269)]||!_0x45f240['props'][_0x27ea15(0x293)]||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x2df)||_0x45f240[_0x27ea15(0x24c)]==='Map'||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x1fd)||_0x45f240[_0x27ea15(0x269)][_0x27ea15(0x296)](function(_0x587f85,_0x25310e){var _0x27429f=_0x27ea15,_0x22eb8f=_0x587f85['name'][_0x27429f(0x2a7)](),_0x9f76b=_0x25310e[_0x27429f(0x261)][_0x27429f(0x2a7)]();return _0x22eb8f<_0x9f76b?-0x1:_0x22eb8f>_0x9f76b?0x1:0x0;});}[_0x2623df(0x29c)](_0x6aec3b,_0x4e7839){var _0x5e1614=_0x2623df;if(!(_0x4e7839[_0x5e1614(0x1f0)]||!_0x6aec3b[_0x5e1614(0x269)]||!_0x6aec3b['props'][_0x5e1614(0x293)])){for(var _0x4ae259=[],_0x2bc8c5=[],_0x2c5219=0x0,_0x4f1485=_0x6aec3b[_0x5e1614(0x269)]['length'];_0x2c5219<_0x4f1485;_0x2c5219++){var _0x29e8fa=_0x6aec3b[_0x5e1614(0x269)][_0x2c5219];_0x29e8fa['type']===_0x5e1614(0x1fa)?_0x4ae259[_0x5e1614(0x258)](_0x29e8fa):_0x2bc8c5[_0x5e1614(0x258)](_0x29e8fa);}if(!(!_0x2bc8c5[_0x5e1614(0x293)]||_0x4ae259[_0x5e1614(0x293)]<=0x1)){_0x6aec3b[_0x5e1614(0x269)]=_0x2bc8c5;var _0x28eeff={'functionsNode':!0x0,'props':_0x4ae259};this['_setNodeId'](_0x28eeff,_0x4e7839),this[_0x5e1614(0x1ed)](_0x28eeff,_0x4e7839),this[_0x5e1614(0x229)](_0x28eeff),this[_0x5e1614(0x275)](_0x28eeff,_0x4e7839),_0x28eeff['id']+='\\x20f',_0x6aec3b['props']['unshift'](_0x28eeff);}}}[_0x2623df(0x236)](_0x8d09ca,_0x48c45f){}['_setNodeExpandableState'](_0x2c3113){}['_isArray'](_0x4d0b46){var _0x540da5=_0x2623df;return Array['isArray'](_0x4d0b46)||typeof _0x4d0b46==_0x540da5(0x1ff)&&this[_0x540da5(0x243)](_0x4d0b46)===_0x540da5(0x1fc);}['_setNodePermissions'](_0x51ec7c,_0x53542f){}[_0x2623df(0x209)](_0x47913e){var _0x503d84=_0x2623df;delete _0x47913e['_hasSymbolPropertyOnItsPath'],delete _0x47913e['_hasSetOnItsPath'],delete _0x47913e[_0x503d84(0x257)];}[_0x2623df(0x290)](_0x3e77fb,_0x7533ff){}}let _0x31638a=new _0x284754(),_0xdce57e={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x43e197={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x6a9287(_0x531b46,_0x4bc71a,_0x197aa8,_0x42857c,_0x5321fe,_0x10f17e){var _0x471a36=_0x2623df;let _0x101e55,_0x1a2226;try{_0x1a2226=_0x2d8ac9(),_0x101e55=_0x23f5ef[_0x4bc71a],!_0x101e55||_0x1a2226-_0x101e55['ts']>0x1f4&&_0x101e55[_0x471a36(0x227)]&&_0x101e55[_0x471a36(0x27a)]/_0x101e55[_0x471a36(0x227)]<0x64?(_0x23f5ef[_0x4bc71a]=_0x101e55={'count':0x0,'time':0x0,'ts':_0x1a2226},_0x23f5ef[_0x471a36(0x2c0)]={}):_0x1a2226-_0x23f5ef[_0x471a36(0x2c0)]['ts']>0x32&&_0x23f5ef[_0x471a36(0x2c0)]['count']&&_0x23f5ef['hits'][_0x471a36(0x27a)]/_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]<0x64&&(_0x23f5ef['hits']={});let _0x11e3f6=[],_0x5697d2=_0x101e55['reduceLimits']||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x22a)]?_0x43e197:_0xdce57e,_0x405b05=_0x3da01f=>{var _0x3c6546=_0x471a36;let _0x26cba4={};return _0x26cba4['props']=_0x3da01f[_0x3c6546(0x269)],_0x26cba4[_0x3c6546(0x285)]=_0x3da01f[_0x3c6546(0x285)],_0x26cba4[_0x3c6546(0x2c4)]=_0x3da01f[_0x3c6546(0x2c4)],_0x26cba4[_0x3c6546(0x2c9)]=_0x3da01f['totalStrLength'],_0x26cba4[_0x3c6546(0x233)]=_0x3da01f[_0x3c6546(0x233)],_0x26cba4[_0x3c6546(0x240)]=_0x3da01f[_0x3c6546(0x240)],_0x26cba4['sortProps']=!0x1,_0x26cba4[_0x3c6546(0x1f0)]=!_0x425a99,_0x26cba4[_0x3c6546(0x230)]=0x1,_0x26cba4[_0x3c6546(0x216)]=0x0,_0x26cba4[_0x3c6546(0x238)]='root_exp_id',_0x26cba4[_0x3c6546(0x1ec)]=_0x3c6546(0x283),_0x26cba4[_0x3c6546(0x2b1)]=!0x0,_0x26cba4[_0x3c6546(0x260)]=[],_0x26cba4[_0x3c6546(0x250)]=0x0,_0x26cba4[_0x3c6546(0x26e)]=!0x0,_0x26cba4[_0x3c6546(0x214)]=0x0,_0x26cba4['node']={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x26cba4;};for(var _0x23e276=0x0;_0x23e276<_0x5321fe[_0x471a36(0x293)];_0x23e276++)_0x11e3f6[_0x471a36(0x258)](_0x31638a[_0x471a36(0x20a)]({'timeNode':_0x531b46===_0x471a36(0x27a)||void 0x0},_0x5321fe[_0x23e276],_0x405b05(_0x5697d2),{}));if(_0x531b46==='trace'||_0x531b46===_0x471a36(0x223)){let _0x56cb28=Error['stackTraceLimit'];try{Error[_0x471a36(0x281)]=0x1/0x0,_0x11e3f6['push'](_0x31638a[_0x471a36(0x20a)]({'stackNode':!0x0},new Error()[_0x471a36(0x1f3)],_0x405b05(_0x5697d2),{'strLength':0x1/0x0}));}finally{Error[_0x471a36(0x281)]=_0x56cb28;}}return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':_0x11e3f6,'id':_0x4bc71a,'context':_0x10f17e}]};}catch(_0x141361){return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':[{'type':'unknown','error':_0x141361&&_0x141361[_0x471a36(0x2ce)]}],'id':_0x4bc71a,'context':_0x10f17e}]};}finally{try{if(_0x101e55&&_0x1a2226){let _0x53d3d0=_0x2d8ac9();_0x101e55['count']++,_0x101e55[_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x101e55['ts']=_0x53d3d0,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]++,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x23f5ef[_0x471a36(0x2c0)]['ts']=_0x53d3d0,(_0x101e55['count']>0x32||_0x101e55['time']>0x64)&&(_0x101e55[_0x471a36(0x22a)]=!0x0),(_0x23f5ef['hits'][_0x471a36(0x227)]>0x3e8||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]>0x12c)&&(_0x23f5ef['hits'][_0x471a36(0x22a)]=!0x0);}}catch{}}}return _0x6a9287;}((_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x598d24,_0x5d532f,_0x146311,_0x5c841c,_0x435457,_0x4af095)=>{var _0x178280=_0x52c85b;if(_0x5c57ad[_0x178280(0x273)])return _0x5c57ad[_0x178280(0x273)];if(!H(_0x5c57ad,_0x146311,_0x3deb3c))return _0x5c57ad[_0x178280(0x273)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x5c57ad['_console_ninja'];let _0x348138=B(_0x5c57ad),_0x4526fb=_0x348138[_0x178280(0x26b)],_0x4d4ffb=_0x348138[_0x178280(0x282)],_0x383918=_0x348138[_0x178280(0x2cc)],_0x42c1e2={'hits':{},'ts':{}},_0x5f1ccb=X(_0x5c57ad,_0x5c841c,_0x42c1e2,_0x598d24),_0xd940d5=_0x4e24ec=>{_0x42c1e2['ts'][_0x4e24ec]=_0x4d4ffb();},_0xea84f2=(_0x1e4f3c,_0x4cf578)=>{var _0x1bcce6=_0x178280;let _0x930c06=_0x42c1e2['ts'][_0x4cf578];if(delete _0x42c1e2['ts'][_0x4cf578],_0x930c06){let _0x1303d4=_0x4526fb(_0x930c06,_0x4d4ffb());_0xde4346(_0x5f1ccb(_0x1bcce6(0x27a),_0x1e4f3c,_0x383918(),_0x42be99,[_0x1303d4],_0x4cf578));}},_0x4f0396=_0x430740=>{var _0x16daef=_0x178280,_0x326829;return _0x3deb3c===_0x16daef(0x22f)&&_0x5c57ad[_0x16daef(0x2bf)]&&((_0x326829=_0x430740==null?void 0x0:_0x430740[_0x16daef(0x264)])==null?void 0x0:_0x326829[_0x16daef(0x293)])&&(_0x430740[_0x16daef(0x264)][0x0]['origin']=_0x5c57ad[_0x16daef(0x2bf)]),_0x430740;};_0x5c57ad['_console_ninja']={'consoleLog':(_0x389383,_0x33070f)=>{var _0xcc2784=_0x178280;_0x5c57ad[_0xcc2784(0x23c)]['log']['name']!=='disabledLog'&&_0xde4346(_0x5f1ccb(_0xcc2784(0x242),_0x389383,_0x383918(),_0x42be99,_0x33070f));},'consoleTrace':(_0x5a7462,_0x4ad9a0)=>{var _0x34222f=_0x178280,_0x4e5f09,_0x38cb70;_0x5c57ad['console']['log'][_0x34222f(0x261)]!==_0x34222f(0x286)&&((_0x38cb70=(_0x4e5f09=_0x5c57ad['process'])==null?void 0x0:_0x4e5f09[_0x34222f(0x249)])!=null&&_0x38cb70[_0x34222f(0x256)]&&(_0x5c57ad['_ninjaIgnoreNextError']=!0x0),_0xde4346(_0x4f0396(_0x5f1ccb(_0x34222f(0x239),_0x5a7462,_0x383918(),_0x42be99,_0x4ad9a0))));},'consoleError':(_0x56c660,_0x124401)=>{var _0x5a4dbf=_0x178280;_0x5c57ad[_0x5a4dbf(0x267)]=!0x0,_0xde4346(_0x4f0396(_0x5f1ccb(_0x5a4dbf(0x223),_0x56c660,_0x383918(),_0x42be99,_0x124401)));},'consoleTime':_0x2b72bf=>{_0xd940d5(_0x2b72bf);},'consoleTimeEnd':(_0xf42d7f,_0x231d2e)=>{_0xea84f2(_0x231d2e,_0xf42d7f);},'autoLog':(_0x34fc42,_0x1593ab)=>{_0xde4346(_0x5f1ccb('log',_0x1593ab,_0x383918(),_0x42be99,[_0x34fc42]));},'autoLogMany':(_0x1161f8,_0x1f890f)=>{var _0x432033=_0x178280;_0xde4346(_0x5f1ccb(_0x432033(0x242),_0x1161f8,_0x383918(),_0x42be99,_0x1f890f));},'autoTrace':(_0x1abd02,_0x1a1339)=>{var _0x23dceb=_0x178280;_0xde4346(_0x4f0396(_0x5f1ccb(_0x23dceb(0x239),_0x1a1339,_0x383918(),_0x42be99,[_0x1abd02])));},'autoTraceMany':(_0x5662b6,_0x1b0d24)=>{_0xde4346(_0x4f0396(_0x5f1ccb('trace',_0x5662b6,_0x383918(),_0x42be99,_0x1b0d24)));},'autoTime':(_0x4a4e0b,_0x1660f1,_0xecbc72)=>{_0xd940d5(_0xecbc72);},'autoTimeEnd':(_0x391986,_0x4e8b70,_0x41f58e)=>{_0xea84f2(_0x4e8b70,_0x41f58e);},'coverage':_0x5ae8d0=>{var _0x294a69=_0x178280;_0xde4346({'method':_0x294a69(0x203),'version':_0x598d24,'args':[{'id':_0x5ae8d0}]});}};let _0xde4346=q(_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x435457,_0x4af095),_0x42be99=_0x5c57ad[_0x178280(0x29d)];return _0x5c57ad[_0x178280(0x273)];})(globalThis,_0x52c85b(0x28b),_0x52c85b(0x28d),_0x52c85b(0x27b),_0x52c85b(0x2b8),'1.0.0',_0x52c85b(0x212),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x52c85b(0x265),_0x52c85b(0x24f),'1');")}catch(e){}}function o(e,...t){try{n().consoleError(e,t)}catch(e){}return t}},"./src/components/background.ts":(e,t,a)=>{a.r(t),a.d(t,{Background:()=>n});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts"),s={bgImg:i.DEFAULT_BACKGROUND_1,hillImg:i.ASSETS_PATH_HILL,pillerImg:i.ASSETS_PATH_TOTEM,fenchImg:i.ASSETS_PATH_FENCE,autumnBgImg:i.AUTUMN_BACKGROUND_1,autumnHillImg:i.AUTUMN_HILL_1,autumnPillerImg:i.AUTUMN_PILLAR_1,autumnSignImg:i.AUTUMN_SIGN_1,autumnFenceImg:i.AUTUMN_FENCE_1,winterBgImg:i.WINTER_BACKGROUND_1,winterHillImg:i.WINTER_HILL_1,winterSignImg:i.WINTER_SIGN_1,winterFenceImg:i.WINTER_FENCE_1,winterPillerImg:i.WINTER_PILLAR_1};class n{width;height;context;imagesLoaded=!1;loadedImages;levelNumber;availableBackgroundTypes=["Summer","Autumn","Winter"];backgroundType;constructor(e,t,a,i){this.width=t,this.height=a,this.context=e,this.levelNumber=i,this.backgroundType=Math.floor(this.levelNumber/10)%this.availableBackgroundTypes.length,this.levelNumber>=30&&(this.backgroundType=this.backgroundType%3),(0,x.loadImages)(s,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(){if(this.imagesLoaded)switch(this.availableBackgroundTypes[this.backgroundType]){case"Winter":this.context.drawImage(this.loadedImages.winterBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.winterPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.winterFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.winterHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;case"Autumn":this.context.drawImage(this.loadedImages.autumnBgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.autumnPillerImg,.38*this.width,this.height/6,this.width/1.2,this.height/2),this.context.drawImage(this.loadedImages.autumnFenceImg,.4*-this.width,this.height/4,this.width,this.height/2),this.context.drawImage(this.loadedImages.autumnHillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2);break;default:this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2)}}}},"./src/components/buttons/cancel-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=.1*t.width+.15*t.width/2,this.posY=.2*t.height,this.context=e,this.canvas=t,(0,x.loadImages)({cancel_button_image:i.CANCEL_BTN_IMG},(e=>{this.cancel_button_image=e.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/close-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,s){this.posX=a,this.posY=s,this.context=e,this.canvas=t,(0,x.loadImages)({close_button_image:i.MAP_BTN_IMG},(e=>{this.close_button_image=e.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:a,y:s}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/index.ts":(e,t,a)=>{a.r(t),a.d(t,{CancelButton:()=>i.default,CloseButton:()=>x.default,LevelBloonButton:()=>d.default,NextButton:()=>s.default,NoButton:()=>n.default,PauseButton:()=>o.default,PlayButton:()=>c.default,RetryButton:()=>_.default,YesButton:()=>r.default});var x=a("./src/components/buttons/close-button.ts"),i=a("./src/components/buttons/cancel-button.ts"),s=a("./src/components/buttons/next-button.ts"),n=a("./src/components/buttons/no-button.ts"),o=a("./src/components/buttons/pause-button.ts"),_=a("./src/components/buttons/retry-button.ts"),r=a("./src/components/buttons/yes-button.ts"),c=a("./src/components/buttons/play-button.ts"),d=a("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(e,t,a){this.context=t,this.levelData=a,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=e.height/5,this.radiusOffSet=e.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=e.height/13,this.textFontSize=this.size/6}isSpecialLevel(e){return i.SPECIAL_LEVELS.includes(e)}isLevelSpecial(e){return this.levelData?.isSpecial?.9*e:e}draw(e,t,a,i){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${x.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+e}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${x.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(e,t,a,i)}applyPulseEffect(){const e=.7,t=Date.now()%1500/1500,a=t<=e,x=a?t/e:(t-e)/(a?e:.30000000000000004),i=a?15*x:15+45*x,s=a?.5*(1-x):0;if(s<=0)return;const{x:n,y:o,radius:_}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},r=this.posX+this.btnSize/n,c=this.posY+this.btnSize/o,d=this.btnSize/_+i;this.context.save(),this.context.beginPath(),this.context.arc(r,c,d,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${s})`,this.context.fill(),this.context.restore()}drawIcons(e,t,a,i){const s=this.levelData.index;if(x.Debugger.DebugMode||s+e-1>t+1&&this.drawLock(),a.length&&s+e<=i)for(let t=0;t<a.length;t++)if(s-1+e===parseInt(a[t].levelNumber)){this.checkStars(a[t].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(e){const t=this.levelData.x,a=this.levelData.y,x=this.size;e>=1&&this.drawStar(t,a-.01*x),e>1&&this.drawStar(t+x/2.5,a-.01*x),3===e&&this.drawStar(t+x/5,a-.1*x)}drawStar(e,t){this.context.drawImage(this.levelData?.starImg,e,t,this.size/5,this.size/5)}onClick(e,t,a,i,s){Math.sqrt((e-this.levelData.x-this.radiusOffSet)*(e-this.levelData.x-this.radiusOffSet)+(t-this.levelData.y-this.radiusOffSet)*(t-this.levelData.y-this.radiusOffSet))<45&&(x.Debugger.DebugMode||this.levelData.index+a<=i)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,s(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,s,n){this.posX=s,this.posY=n,this.context=e,this.width=t,this.height=a,(0,x.loadImages)({next_button_image:i.NEXT_BTN_IMG},(e=>{this.next_button_image=e.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/no-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,s){this.posX=a+5,this.posY=s+10,this.context=e,this.canvas=t,(0,x.loadImages)({no_button_image:i.CANCEL_BTN_IMG},(e=>{this.no_button_image=e.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/pause-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=t.width-.09*t.height,this.posY=0,this.context=e,this.canvas=t,(0,x.loadImages)({pause_button_image:i.PAUSE_BTN_IMG},(e=>{this.pause_button_image=e.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9),a}}},"./src/components/buttons/play-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var x=a("./src/constants/index.ts"),i=a("./src/Firebase/firebase-integration.ts"),s=a("./src/common/index.ts"),n=a("./src/data/index.ts");class o{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(e,t,a,n){this.posX=a,this.posY=n,this.context=e,this.canvas=t,this.firebaseIntegration=new i.FirebaseIntegration,this.init(),this.images={pause_button_image:x.PLAY_BTN_IMG},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}async init(){const e=await(0,n.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(e,t){const a=Math.sqrt((e-this.posX-this.canvas.width/6)*(e-this.posX-this.canvas.width/6)+(t-this.posY-this.canvas.width/6)*(t-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),a<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const e={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(e)}}},"./src/components/buttons/retry-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,s){this.posX=a,this.posY=s,this.context=e,this.canvas=t,(0,x.loadImages)({retry_button_image:i.RETRY_BTN_IMG},(e=>{this.retry_button_image=e.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:a,y:s}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/yes-button.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,s){this.posX=a-5,this.posY=s,this.context=e,this.canvas=t,(0,x.loadImages)({yes_button_image:i.YES_BTN_IMG},(e=>{this.yes_button_image=e.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,x.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/feedback-text/index.ts":(e,t,a)=>{a.r(t),a.d(t,{FeedbackTextEffects:()=>i});var x=a("./src/common/index.ts");class i{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(e){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=e,(0,x.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,x.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(e,t,a)=>{a.r(t),a.d(t,{AudioPlayer:()=>h.AudioPlayer,Background:()=>c.Background,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>i.LevelIndicators,Monster:()=>_.Monster,PauseButton:()=>x.default,PromptText:()=>s.PromptText,StoneHandler:()=>n.default,TimerTicking:()=>r.TimerTicking,TrailEffect:()=>l.default,Tutorial:()=>o.Tutorial});var x=a("./src/components/buttons/pause-button.ts"),i=a("./src/components/level-indicator.ts"),s=a("./src/components/prompt-text.ts"),n=a("./src/components/stone-handler.ts"),o=a("./src/components/tutorial.ts"),_=a("./src/components/monster.ts"),r=a("./src/components/timer-ticking.ts"),c=a("./src/components/background.ts"),d=a("./src/components/feedback-text/index.ts"),h=a("./src/components/audio-player.ts"),l=a("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(e,t,a)=>{a.r(t),a.d(t,{LevelIndicators:()=>n});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts"),s=a("./src/events/index.ts");class n extends s.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.activeIndicators=a,this.images={level_indicator:i.LEVEL_INDICATOR,bar_empty:i.BAR_EMPTY,bar_full:i.BAR_FULL},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}setIndicators(e){this.activeIndicators=e}addDropStoneEvent(){document.addEventListener("dropstone",(e=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var e=0;e<5;e++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(e=0;e<this.activeIndicators;e++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(e){}handleLoadPuzzle(e){this.setIndicators(e.detail.counter)}}},"./src/components/monster.ts":(e,t,a)=>{a.r(t),a.d(t,{Monster:()=>s});var x=a("./src/common/index.ts"),i=a("./src/events/index.ts");class s extends i.EventManager{zindex;width;height;image;frameX;frameY;maxFrame;x;y;fps;countFrame;frameInterval;frameTimer;canvasStack;canavsElement;context;game;images;loadedImages;imagesLoaded=!1;monsterPhase;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.game=e,this.monsterPhase=t,this.width=this.game.width,this.height=this.game.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.image=document.getElementById("monster"),this.frameX=0,this.frameY=0,this.maxFrame=6,this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.countFrame=0,this.frameInterval=1e3/this.fps,this.frameTimer=0,this.images={eatImg:"./assets/images/eat1"+this.monsterPhase+".png",idleImg:"./assets/images/idle1"+this.monsterPhase+".png",spitImg:"./assets/images/spit1"+this.monsterPhase+".png",dragImg:"./assets/images/drag1"+this.monsterPhase+".png"},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.changeToIdleAnimation(),this.imagesLoaded=!0,a&&a()}))}update(e){this.frameTimer>=this.frameInterval?(this.frameTimer=0,this.frameX<this.maxFrame?this.frameX++:this.frameX=0):this.frameTimer+=e,this.draw()}draw(){this.imagesLoaded&&this.context.drawImage(this.image,770*this.frameX,1386*this.frameY,768,1386,.5*this.x,.1*this.y,this.width/2*1.5,this.height/1.5*1.5)}changeImage(e){this.image.src=e}changeToDragAnimation(){this.maxFrame=6,this.image=this.loadedImages.dragImg}changeToEatAnimation(){this.maxFrame=12,this.image=this.loadedImages.eatImg}changeToIdleAnimation(){this.maxFrame=6,this.image=this.loadedImages.idleImg}changeToSpitAnimation(){this.maxFrame=12,this.image=this.loadedImages.spitImg}handleStoneDrop(e){e.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(e){this.changeToIdleAnimation()}dispose(){this.unregisterEventListener()}onClick(e,t){if(Math.sqrt((e-this.x-this.width/4)*(e-this.x-this.width/4)+(t-this.y-this.height/2.2)*(t-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>_});var x=a("./src/components/buttons/index.ts"),i=a("./src/common/index.ts"),s=a("./src/components/index.ts"),n=a("./src/components/popups/sure-popup.ts"),o=a("./src/constants/index.ts");class _{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(e,t,a,_,r){this.canvas=e,this.callback=t,this.gameplayData=r,this.switchToLevelSelection=a,this.reloadScene=_;const c=document.getElementById("canvas");this.context=c.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.cancelButton=new x.CancelButton(this.context,this.canvas),this.retryButton=new x.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new x.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,i.loadImages)({pop_up_image:o.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new n.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new n.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const x=e.clientX-a.left,s=e.clientY-a.top;this.cancelButton.onClick(x,s)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(x,s)&&("english"==i.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(x,s)&&("english"==i.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==i.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==i.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(o.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>o});var x=a("./src/common/index.ts"),i=a("./src/components/index.ts"),s=a("./src/components/buttons/index.ts"),n=a("./src/constants/index.ts");class o{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(e,t,a){this.canvas=e,this.yesCallback=t,this.noCallback=a,this.context=this.canvas.getContext("2d"),this.audioPlayer=new i.AudioPlayer,this.yesButton=new s.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new s.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,x.loadImages)({pop_up_image:n.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(x.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const x=e.clientX-a.left,i=e.clientY-a.top;this.yesButton.onClick(x,i)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(x,i)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(x.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(e,t,a)=>{a.r(t),a.d(t,{PromptText:()=>o});var x=a("./src/events/index.ts"),i=a("./src/common/index.ts"),s=a("./src/components/index.ts"),n=a("./src/constants/index.ts");class o extends x.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;droppedStoneCount=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(e,t,a,x,n){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.levelData=x,this.rightToLeft=n,this.currentPromptText=a.prompt.promptText,this.currentPuzzleData=a,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new s.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const x=e.clientX-a.left,i=e.clientY-a.top;this.onClick(x,i)&&this.playSound()};getPromptAudioUrl=()=>i.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(i.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(e,t){return Math.sqrt(e-this.width/3)<12&&Math.sqrt(t-this.height/5.5)<10}setCurrrentPuzzleData(e){this.currentPuzzleData=e,this.currentPromptText=e.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var e=this.width/2;const t=.26*this.height;this.context.textAlign="center";var a=this.calculateFont();const x=this.promptImageWidth,s=this.promptImageHeight;if(this.context.font=`${a}px ${i.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var n=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],e+this.context.measureText(n).width/2,t),this.context.fillStyle="black",this.context.fillText(n,e-this.context.measureText(this.targetStones[0]).width/2,t)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,x/4,s/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){e-=.5*this.context.measureText(this.currentPromptText).width;for(let a=this.targetStones.length-1;a>=0;a--)this.droppedStones>a||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[a],e,t)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[a],e,t)),e=e+this.context.measureText(this.targetStones[a]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,x/4,s/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const e=1.25*(this.width-x),t=.33*(this.height-s);this.context.drawImage(this.promptPlayButton,e,t,x/4,s/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,e,t)):this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,x/4,s/4)}drawOthers(){const e=this.currentPromptText.split(""),t=(this.width,.28*this.height),a=this.promptImageWidth,x=this.promptImageHeight;var s=this.calculateFont();this.context.font=`${s}px ${i.font}, monospace`;let n=this.width/2-this.context.measureText(this.currentPromptText).width/2,o=0;var _=this.currentPuzzleData.targetStones[0].split("");for(let i=0;i<e.length;i++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){_.includes(e[i])?(_=_.slice(1,_.length),this.context.fillStyle="red",this.context.fillText(e[i],n,t)):(this.context.fillStyle="black",this.context.fillText(e[i],n,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,x/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){if(this.targetStones.length!=this.currentPromptText.length){this.targetStones.length>i&&(this.context.fillStyle=this.droppedStoneCount>i||null==this.droppedStoneCount?"black":"red",this.context.fillText(this.targetStones[i],n+n/10,t));break}this.context.fillStyle=this.droppedStones>i||null==this.droppedStones?"black":"red",this.context.fillText(e[i],n,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,x/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,x/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,x/4)}o=(this.context.measureText(e[i]).width+this.context.measureText(e[i+1]).width)/2,n+=o}}draw(e){if(this.updateScaling(),this.time=e<17?this.time+Math.floor(e):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const e=this.promptImageWidth*this.scale,t=this.promptImageHeight*this.scale,a=(this.width-e)/2,x=(this.height-t)/5;this.context.drawImage(this.prompt_image,a,x,e,t),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.droppedStones=0,this.droppedStoneCount=0,this.currentPuzzleData=this.levelData.puzzles[e.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(e){this.droppedStones=e,this.droppedStoneCount++}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const e=this.loadImage(this.prompt_image,n.PROMPT_TEXT_BG),t=this.loadImage(this.promptPlayButton,n.PROMPT_PLAY_BUTTON);await Promise.all([e,t]),this.imagesLoaded=!0}loadImage(e,t){return new Promise(((a,x)=>{e.onload=()=>{a()},e.src=t,e.onerror=e=>{x(e)}}))}}},"./src/components/stone-handler.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>_});var x=a("./src/common/index.ts"),i=a("./src/events/index.ts"),s=a("./src/components/index.ts"),n=a("./src/data/index.ts"),o=a("./src/constants/index.ts");class _ extends i.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==n.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(e,t,a,i,n,_){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.puzzleNumber=a,this.levelData=i,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(o.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(n),this.puzzleStartTime=new Date,this.tutorial=new s.Tutorial(e,t.width,t.height,a),this.stonebg=new Image,this.stonebg.src=o.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new s.AudioPlayer,this.stonebg.onload=e=>{this.createStones(this.stonebg)},this.audioPlayer=new s.AudioPlayer,this.timerTickingInstance=_,document.addEventListener(x.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(e){const t=this.getFoilStones();for(let a=0;a<t.length;a++)t[a]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[a]),this.foilStones.push(new x.StoneConfig(this.context,this.canvas.width,this.canvas.height,t[a],this.stonePos[a][0],this.stonePos[a][1],e,this.timerTickingInstance,a==t.length-1?this.tutorial:null))}draw(e){this.foilStones.length>0&&(this.foilStones.forEach((t=>{t&&void 0!==t.frame&&t.draw(e)})),this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e))}drawWordPuzzleLetters(e,t,a){for(let x=0;x<this.foilStones.length;x++)t(x)&&this.foilStones[x].draw(e,Object.keys(a).length>1&&void 0!==a[x]);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}initializeStonePos(){let e=32;this.stonePos=[[this.canvas.width/5-e,this.canvas.height/1.9-e],[this.canvas.width/2-e,this.canvas.height/1.15-e],[this.canvas.width/3.5+this.canvas.width/2-e,this.canvas.height/1.2-e],[this.canvas.width/4-e,this.canvas.height/1.28-e],[this.canvas.width/7-e,this.canvas.height/1.5-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.9-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.42-e],[this.canvas.width/6-e,this.canvas.height/1.1-e]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(e){this.currentPuzzleData=this.levelData.puzzles[e],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(e){this.foilStones=[]}handleLoadPuzzle(e){this.foilStones=[],this.tutorial.setPuzzleNumber(e.detail.counter),this.puzzleNumber=e.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(x.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(e,t,a=!1){const x=a?e==this.correctTargetStone.substring(0,e.length):e==this.correctTargetStone;return this.processLetterDropFeedbackAudio(t,x,a,e),x}processLetterDropFeedbackAudio(e,t,a,x){if(t){(a?x===this.getCorrectTargetStone():t)?this.playCorrectAnswerFeedbackSound(e):this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,(0,o.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,o.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?o.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((e=>{const t=this.currentPuzzleData.foilStones.indexOf(e);-1!==t&&this.currentPuzzleData.foilStones.splice(t,1)}));const e=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(e>8){const t=e-8;this.currentPuzzleData.foilStones.splice(0,t)}return this.currentPuzzleData.targetStones.forEach((e=>{this.currentPuzzleData.foilStones.push(e)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(e){return[e.fantastic,e.great,e.amazing]}setGamePause(e){this.isGamePaused=e}playCorrectAnswerFeedbackSound(e){const t=x.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,o.AUDIO_PATH_EATS,(0,o.AUDIO_PATH_CHEERING_FUNC)(t),o.AUDIO_PATH_POINTS_ADD,x.Utils.getConvertedDevProdURL(this.feedbackAudios[e])),this.correctStoneAudio.play()}resetStonePosition(e,t,a){const x=t,i=a;if(x&&i&&x.text&&"number"==typeof i.origx&&"number"==typeof i.origy){const t=50,a=e/2;x.x=x.text.length<=3&&i.origx<t&&i.origx<a?i.origx+25:i.origx,x.y=i.origy}return x}computeCursorDistance(e,t,a){return Math.sqrt((e-a.x)**2+(t-a.y)**2)}handlePickStoneUp(e,t){let a=null,x=0;for(let i of this.foilStones){if(this.computeCursorDistance(e,t,i)<=40){a=i,a.foilStoneIndex=x;break}x++}return a}handleHoveringToAnotherStone(e,t,a){let x=null,i=0;for(let s of this.foilStones){if(this.computeCursorDistance(e,t,s)<=40&&a(s.text,i)){x=s,x.foilStoneIndex=i;break}i++}return x}handleMovingStoneLetter(e,t,a){const x=e,i=this.canvas.getBoundingClientRect();return x.x=t-i.left,x.y=a-i.top,x}}},"./src/components/timer-ticking.ts":(e,t,a)=>{a.r(t),a.d(t,{TimerTicking:()=>o});var x=a("./src/common/index.ts"),i=a("./src/events/index.ts"),s=a("./src/components/index.ts"),n=a("./src/constants/index.ts");class o extends i.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=a,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new s.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:n.TIMER_EMPTY,rotating_clock:n.ROTATING_CLOCK,timer_full:n.TIMER_FULL},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(e){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*e),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(n.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>x});class x{ctx;particles;mouse;isDiamond;constructor(e){this.ctx=e.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1}init(){this.draw()}draw(){this.drawTrail();let e=[];for(let t=0;t<this.particles.length;t++)this.particles[t].time<=this.particles[t].ttl&&e.push(this.particles[t]);this.particles=e}drawTrail(){for(let e=0;e<this.particles.length;e++)this.particles[e].update(),this.isDiamond=!this.isDiamond,this.particles[e].draw(this.isDiamond)}addTrailParticlesOnMove(e,t){this.mouse.x=e,this.mouse.y=t,this.particles.push(new i(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class i{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(e,t){const a=this.determineValueByScreenWidth(30,15),x=this.determineValueByScreenWidth(30,15),i=this.determineValueByScreenWidth(3,.5),s=this.determineValueByScreenWidth(2,.5);this.ctx=e,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:t.x+this.getRandomInt(-a,a),y:t.y+this.getRandomInt(-x,x),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-i,i),y:this.start.y+this.getRandomInt(-s,s)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(e,t){return window.screen.width>768?e:t}update(){if(this.time<=this.ttl){const e=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(e)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(e){e?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(e,t){return Math.round(Math.random()*(t-e))+e}easeOutQuart(e){return 1-Math.pow(1-e,4)}}},"./src/components/tutorial.ts":(e,t,a)=>{a.r(t),a.d(t,{Tutorial:()=>n});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts"),s=a("./src/data/index.ts");class n{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(e,t,a,s){this.width=t,this.height=a,this.context=e,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=s>=0?s:null,this.tutorialImg=new Image,this.tutorialImg.src=i.TUTORIAL_HAND,this.drawRipple=(0,x.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(e){this.startx=e[0]-22,this.starty=e[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(e){this.endTutorial=e}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(e,t,a){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*e:this.x-this.absdx*e,this.y=this.dy>=0?this.y+this.absdy*e:this.y-this.absdy*e;const x=this.x-this.endx+this.absdx,i=this.y-this.endy+this.absdy;let s=100*Math.sqrt(x*x+i*i)/this.monsterStoneDifference;if(s<15)s>1?this.createHandScaleAnimation(e,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(s>80)this.createHandScaleAnimation(e,this.startx+15,this.starty+10,!1);else{let e=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(t,this.x,this.y+20,a,a),this.context.globalAlpha=e,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(e,t,a,x){this.totalTime+=Math.floor(e);const i=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),s=this.tutorialImg.width*i,n=this.tutorialImg.height*i;this.context.drawImage(this.tutorialImg,t,a,s,n),!x&&this.drawRipple(t+.02*this.width,a+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(e,t,a,x){const i=(a-t)/2,s=Math.PI/x;return t+i*Math.sin(s*e)}clickOnMonsterTutorial(e){if(this.shouldPlayMonsterClickTutorialAnimation()){const t=2e3,a=this.height/1.9+this.tutorialImg.height/.8,x=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let i;const s=this.endx;this.totalTime<t/2?(i=x+this.totalTime/(t/2)*(a-x),this.drawRipple(s,this.height/1.9+this.tutorialImg.height/1.5,!0)):(i=a-(this.totalTime-t/2)/(t/2)*(a-x),this.drawRipple(s,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,s,i,this.tutorialImg.width,this.tutorialImg.height),i<=x&&(this.totalTime=0),this.totalTime+=e}}shouldPlayTutorial(){return s.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return s.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(e){this.puzzleNumber=e}setPlayMonsterClickAnimation(e){this.playMnstrClkTtrlAnim=e}}},"./src/compositions/background.ts":(e,t,a)=>{a.r(t),a.d(t,{BACKGROUND_ASSET_LIST:()=>s,autumBgDrawing:()=>r,createBackground:()=>n,defaultBgDrawing:()=>_,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>o,winterBgDrawing:()=>c});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");const s={summer:{BG_GROUP_IMGS:i.DEFAULT_BG_GROUP_IMGS,draw:_},autumn:{BG_GROUP_IMGS:i.AUTUMN_BG_GROUP_IMGS,draw:r},winter:{BG_GROUP_IMGS:i.WINTER_BG_GROUP_IMGS,draw:c}};async function n(e,t,a,i,s){return{...{...s(e,t,a,{...await(0,x.syncLoadingImages)(i)})}}}const o=(e,t)=>{const a=Object.keys(t);let x=Math.floor(e/10)%a.length;return e>=30&&(x%=3),{...t[a[x]]}};function _(e,t,a,x){return{draw:()=>{e.drawImage(x?.DEFAULT_BACKGROUND_1,0,0,t,a),e.drawImage(x?.ASSETS_PATH_TOTEM,.6*t,a/6,t,a/2),e.drawImage(x?.ASSETS_PATH_FENCE,.4*-t,a/3,t,a/3),e.drawImage(x?.ASSETS_PATH_HILL,.25*-t,a/2,1.5*t,a/2)}}}function r(e,t,a,x){return{draw:()=>{e.drawImage(x.AUTUMN_BACKGROUND_1,0,0,t,a),e.drawImage(x.AUTUMN_PILLAR_1,.38*t,a/6,t/1.2,a/2),e.drawImage(x.AUTUMN_FENCE_1,.4*-t,a/4,t,a/2),e.drawImage(x.AUTUMN_HILL_1,.25*-t,a/2,1.5*t,a/2)}}}function c(e,t,a,x){return{draw:()=>{e.drawImage(x.WINTER_BACKGROUND_1,0,0,t,a),e.drawImage(x.WINTER_PILLAR_1,.38*t,a/6,t/1.2,a/2),e.drawImage(x.WINTER_FENCE_1,.4*-t,a/4,t,a/2),e.drawImage(x.WINTER_HILL_1,.25*-t,a/2,1.5*t,a/2)}}}function d(e,t,a,x){return{draw:()=>{e.drawImage(x?.LEVEL_SELECTION_BACKGROUND,0,0,t,a)}}}},"./src/compositions/index.ts":(e,t,a)=>{a.r(t),a.d(t,{BACKGROUND_ASSET_LIST:()=>x.BACKGROUND_ASSET_LIST,autumBgDrawing:()=>x.autumBgDrawing,createBackground:()=>x.createBackground,createLevelObject:()=>i.createLevelObject,defaultBgDrawing:()=>x.defaultBgDrawing,getdefaultCloudBtnsPos:()=>i.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>x.levelSelectBgDrawing,loadDynamicBgAssets:()=>x.loadDynamicBgAssets,loadLevelImages:()=>i.loadLevelImages,winterBgDrawing:()=>x.winterBgDrawing});var x=a("./src/compositions/background.ts"),i=a("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(e,t,a)=>{a.r(t),a.d(t,{createLevelObject:()=>_,getdefaultCloudBtnsPos:()=>n,loadLevelImages:()=>o});var x=a("./src/constants/index.ts"),i=a("./src/common/index.ts");const s=e=>x.SPECIAL_LEVELS.includes(e),n=e=>[[[e.width/10,e.height/10],[e.width/2.5,e.height/10],[e.width/3+e.width/2.8,e.height/10],[e.width/10,e.height/3],[e.width/2.5,e.height/3],[e.width/3+e.width/2.8,e.height/3],[e.width/10,e.height/1.8],[e.width/2.5,e.height/1.8],[e.width/3+e.width/2.8,e.height/1.8],[e.width/2.5,e.height/1.3]]],o=()=>(0,i.syncLoadingImages)({balloonImg:x.MAP_ICON_IMG,specialBloonImg:x.MAP_ICON_SPECIAL_IMG,lockImg:x.MAP_LOCK_IMG,starImg:x.STAR_IMG});async function _(e,t,a,x){const i=s(a);return{...{x:e,y:t,index:a,isSpecial:i,...x,balloonImg:i?x?.specialBloonImg:x?.balloonImg}}}},"./src/constants/index.ts":(e,t,a)=>{a.r(t),a.d(t,{ASSETS_PATH_BG_01:()=>G,ASSETS_PATH_FENCE:()=>W,ASSETS_PATH_HILL:()=>V,ASSETS_PATH_MONSTER_IDLE:()=>X,ASSETS_PATH_STONE_PINK_BG:()=>U,ASSETS_PATH_TOTEM:()=>H,AUDIO_ARE_YOU_SURE:()=>O,AUDIO_INTRO:()=>M,AUDIO_LEVEL_LOSE:()=>j,AUDIO_LEVEL_WIN:()=>R,AUDIO_PATH_BTN_CLICK:()=>N,AUDIO_PATH_CHEERING_FUNC:()=>D,AUDIO_PATH_CORRECT_STONE:()=>k,AUDIO_PATH_EATS:()=>P,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>A,AUDIO_PATH_MONSTER_SPIT:()=>L,AUDIO_PATH_ON_DRAG:()=>B,AUDIO_PATH_POINTS_ADD:()=>C,AUDIO_TIMEOUT:()=>z,AUDIO_URL_PRELOAD:()=>F,AUTUMN_BACKGROUND_1:()=>$,AUTUMN_BG_GROUP_IMGS:()=>ze,AUTUMN_FENCE_1:()=>J,AUTUMN_HILL_1:()=>K,AUTUMN_PILLAR_1:()=>q,AUTUMN_SIGN_1:()=>Z,BACK_BTN_IMG:()=>Ae,BAR_EMPTY:()=>_e,BAR_FULL:()=>re,ButtonClick:()=>u,CANCEL_BTN_IMG:()=>ke,CLOUD_6:()=>ge,CLOUD_7:()=>me,CLOUD_8:()=>ve,DEFAULT_BACKGROUND_1:()=>Y,DEFAULT_BG_GROUP_IMGS:()=>Oe,DevelopmentServer:()=>w,EndScene1:()=>E,FONT_BASE_PATH:()=>T,FeedbackAudio:()=>h,FirebaseUserClicked:()=>x,FirebaseUserInstall:()=>i,GAMEPLAY_BG_GROUP_IMGS:()=>Be,GameScene1:()=>I,IntroMusic:()=>l,IsCached:()=>c,LEVEL_INDICATOR:()=>oe,LEVEL_SELECTION_BACKGROUND:()=>ie,LevelEndAudio:()=>m,LevelSelection1:()=>y,MAP_BTN_IMG:()=>ye,MAP_ICON_IMG:()=>Ie,MAP_ICON_SPECIAL_IMG:()=>Ee,MAP_LOCK_IMG:()=>Te,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>Le,NativePlayButton:()=>o,PAUSE_BTN_IMG:()=>Se,PIN_STAR_1:()=>ue,PIN_STAR_2:()=>be,PIN_STAR_3:()=>pe,PLAY_BTN_IMG:()=>we,POPUP_BG_IMG:()=>Ne,PROMPT_PLAY_BUTTON:()=>ne,PROMPT_TEXT_BG:()=>se,PWAInstallStatus:()=>s,PhraseAudio:()=>g,PreviousPlayedLevel:()=>_,PromptAudio:()=>f,RETRY_BTN_IMG:()=>Ce,ROTATING_CLOCK:()=>de,SCENE_NAME_GAME_PLAY:()=>Fe,SCENE_NAME_LEVEL_END:()=>Ue,SCENE_NAME_LEVEL_SELECT:()=>Re,SCENE_NAME_START:()=>je,SPECIAL_LEVELS:()=>He,STAR_IMG:()=>Pe,StartScene1:()=>S,StoneMusic:()=>p,StoreMonsterPhaseNumber:()=>r,TIMER_EMPTY:()=>ce,TIMER_FULL:()=>he,TUTORIAL_HAND:()=>le,TimeOver:()=>b,UrlSubstring:()=>v,UserCancelled:()=>n,WINTER_BACKGROUND_1:()=>Q,WINTER_BG_GROUP_IMGS:()=>Me,WINTER_FENCE_1:()=>ae,WINTER_HILL_1:()=>ee,WINTER_PILLAR_1:()=>xe,WINTER_SIGN_1:()=>te,WIN_BG:()=>fe,YES_BTN_IMG:()=>De});const x="user_clicked",i="user_installed",s="pwa_installed_status",n="user_cancel_installation",o="native_playbutton_clicked",_="storePreviousPlayedLevel",r="storeMonsterPhaseNumber",c="is_cached",d="monster_audio",h="feedback_audio",l="intro_music",f="prompt_audio",u="button_click",b="time_over",p="stone_music",g="phrase_audio",m="level_end_audio",v="/feedthemonster",w="https://feedthemonsterdev.curiouscontent.org",S="StartScene1",y="LevelSelection1",I="GameScene1",E="EndScene1",T="./assets/fonts/",P="./assets/audios/Eat.mp3",L="./assets/audios/MonsterSpit.mp3",A="./assets/audios/Disapointed-05.mp3",C="assets/audios/PointsAdd.wav",k="assets/audios/CorrectStoneFinal.mp3",D=e=>`./assets/audios/Cheering-0${e}.mp3`,N="./assets/audios/ButtonClick.mp3",B="./assets/audios/onDrag.mp3",O="./assets/audios/are-you-sure.mp3",z="./assets/audios/timeout.mp3",M="./assets/audios/intro.mp3",j="./assets/audios/LevelLoseFanfare.mp3",R="./assets/audios/LevelWinFanfare.mp3",F=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],U="./assets/images/stone_pink.webp",H="./assets/images/Totem_v02_v01.webp",G="./assets/images/bg_v01.webp",V="./assets/images/hill_v01.webp",W="./assets/images/fence_v01.webp",X="./assets/images/idle4.png",Y="./assets/images/bg_v01.webp",$="./assets/images/Autumn_bg_v01.webp",K="./assets/images/Autumn_hill_v01.webp",q="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_sign_v01.webp",J="./assets/images/Autumn_fence_v01.webp",Q="./assets/images/Winter_bg_01.webp",ee="./assets/images/Winter_hill_v01.webp",te="./assets/images/Winter_sign_v01.webp",ae="./assets/images/Winter_fence_v01.webp",xe="./assets/images/Winter_sign_v01.webp",ie="./assets/images/map.webp",se="./assets/images/promptTextBg.webp",ne="./assets/images/promptPlayButton.webp",oe="./assets/images/levels_v01.webp",_e="./assets/images/bar_empty_v01.webp",re="./assets/images/bar_full_v01.webp",ce="./assets/images/timer_empty.webp",de="./assets/images/timer.webp",he="./assets/images/timer_full.png",le="./assets/images/tutorial_hand.webp",fe="./assets/images/WIN_screen_bg.webp",ue="./assets/images/pinStar1.webp",be="./assets/images/pinStar2.webp",pe="./assets/images/pinStar3.webp",ge="./assets/images/cloud_01.png",me="./assets/images/cloud_02.png",ve="./assets/images/cloud_03.png",we="./assets/images/Play_button.webp",Se="./assets/images/pause_v01.webp",ye="./assets/images/map_btn.webp",Ie="./assets/images/mapIcon.webp",Ee="./assets/images/map_icon_monster_level_v01.webp",Te="./assets/images/mapLock.webp",Pe="./assets/images/star.webp",Le="./assets/images/next_btn.webp",Ae="./assets/images/back_btn.webp",Ce="./assets/images/retry_btn.webp",ke="./assets/images/close_btn.webp",De="./assets/images/confirm_btn.webp",Ne="./assets/images/popup_bg_v01.webp",Be={ASSETS_PATH_TOTEM:H,DEFAULT_BACKGROUND_1:Y,ASSETS_PATH_HILL:V,ASSETS_PATH_FENCE:W,ASSETS_PATH_MONSTER_IDLE:X},Oe={DEFAULT_BACKGROUND_1:Y,ASSETS_PATH_HILL:V,ASSETS_PATH_TOTEM:H,ASSETS_PATH_FENCE:W},ze={AUTUMN_BACKGROUND_1:$,AUTUMN_HILL_1:K,AUTUMN_PILLAR_1:q,AUTUMN_SIGN_1:Z,AUTUMN_FENCE_1:J},Me={WINTER_BACKGROUND_1:Q,WINTER_HILL_1:ee,WINTER_SIGN_1:te,WINTER_FENCE_1:ae,WINTER_PILLAR_1:xe},je="StartScene",Re="LevelSelection",Fe="GamePlay",Ue="LevelEnd",He=[5,13,20,30,42]},"./src/data/api-data.ts":(e,t,a)=>{a.r(t),a.d(t,{URL:()=>i,getData:()=>n,getFtmData:()=>s});var x=a("./src/common/index.ts");const i="./lang/"+x.lang+"/ftm_"+x.lang+".json";function s(){return fetch(i,{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json().then((e=>e))))}async function n(){return await s()}},"./src/data/custom-fonts.ts":(e,t,a)=>{a.r(t),a.d(t,{customFonts:()=>x});const x={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"}},"./src/data/data-modal.ts":(e,t,a)=>{a.r(t),a.d(t,{DataModal:()=>x,FeedbackAudios:()=>n,FeedbackTexts:()=>s,FoilStone:()=>r,LevelMeta:()=>h,Levels:()=>o,OtherAudios:()=>i,Prompt:()=>d,Puzzles:()=>_,TargetStone:()=>c});class x{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(e,t,a,x,o,_,r,c,d){this.title=e,this.otherAudios=new i(t),this.levels=this.getLevels(a),this.FeedbackTexts=new s(x),this.FeedbackAudios=new n(_),this.rightToLeft=o,this.majVersion=r,this.minVersion=c,this.version=d}getLevels(e){let t=[];for(let a=0;a<e.length;a++)t.push(new o(e[a]));return t}}class i{selctYourPlayer;watchMeGrow;areYouSure;constructor(e){this.selctYourPlayer=e["Select your player"],this.watchMeGrow=e["Watch me grow"],this.areYouSure=e["Are you sure"]}}class s{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class n{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class o{puzzles;levelMeta;levelNumber;constructor(e){this.puzzles=this.getPuzzleData(e),this.levelMeta=new h(e.LevelMeta),this.levelNumber=e.LevelNumber}getPuzzleData(e){let t=[];return e.Puzzles.map(((e,a)=>{t.push(new _(e))})),t}}class _{segmentNumber;prompt;foilStones;targetStones;constructor(e){this.segmentNumber=e.SegmentNumber,this.prompt=new d(e.prompt),this.foilStones=this.getFoilStones(e),this.targetStones=this.getTargetStones(e)}getFoilStones(e){let t=[];return e.foilstones.map(((e,a)=>{t.push(e.StoneText)})),t}getTargetStones(e){let t=[];return e.targetstones.map(((e,a)=>{t.push(e.StoneText)})),t}}class r{stoneText;constructor(e){this.stoneText=e}}class c{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(e){this.promptText=e.PromptText,this.promptAudio=e.PromptAudio}}class h{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(e){this.promptFadeOut=e.PromptFadeout,this.letterGroup=e.LetterGroup,this.levelNumber=e.LevelNumber,this.protoType=e.PromptType,this.levelType=e.LevelType}}},"./src/data/game-score.ts":(e,t,a)=>{a.r(t),a.d(t,{GameScore:()=>i});var x=a("./src/common/index.ts");class i{static currentlanguage=x.lang;static setGameLevelScore(e,t){let a=this.calculateStarCount(t),x={levelName:e.levelMeta.levelType,levelNumber:e.levelMeta.levelNumber,score:t,starCount:a};this.setTotalStarCount(a);let i=this.getAllGameLevelInfo(),s=-1;for(let e=0;e<i.length;e++)if(i[e].levelNumber===x.levelNumber){s=e;break}-1!==s&&x.score>i[s].score?i[s]=x:i.push(x),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(i))}static getAllGameLevelInfo(){const e=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==e?[]:JSON.parse(e)}static setTotalStarCount(e){let t=this.getTotalStarCount()+e;localStorage.setItem(this.currentlanguage+"totalStarCount",t)}static getTotalStarCount(){const e=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==e?0:parseInt(e)}static calculateStarCount(e){return 200==e?1:300==e||400==e?2:500==e?3:0}static getDatafromStorage(){return x.Debugger.DebugMode?JSON.parse(localStorage.getItem(x.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(x.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(e,t,a)=>{a.r(t),a.d(t,{languageFontMapping:()=>x});const x={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(e,t,a)=>{a.r(t),a.d(t,{DataModal:()=>i.DataModal,FeedbackAudios:()=>i.FeedbackAudios,FeedbackTexts:()=>i.FeedbackTexts,FoilStone:()=>i.FoilStone,GameScore:()=>s.GameScore,LevelMeta:()=>i.LevelMeta,Levels:()=>i.Levels,OtherAudios:()=>i.OtherAudios,Prompt:()=>i.Prompt,Puzzles:()=>i.Puzzles,TargetStone:()=>i.TargetStone,URL:()=>x.URL,customFonts:()=>o.customFonts,getData:()=>x.getData,getFtmData:()=>x.getFtmData,languageFontMapping:()=>n.languageFontMapping});var x=a("./src/data/api-data.ts"),i=a("./src/data/data-modal.ts"),s=a("./src/data/game-score.ts"),n=a("./src/data/i18-font-mapping.ts"),o=a("./src/data/custom-fonts.ts")},"./src/events/index.ts":(e,t,a)=>{a.r(t),a.d(t,{EventManager:()=>i});var x=a("./src/common/index.ts");class i{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(e){this.handler=e,this.stoneDropCallbackHandler=e.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=e.loadPuzzleCallbackHandler,document.addEventListener(x.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(x.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=e=>{this.stoneDropCallbackHandler(e)};handleLoadPuzzleEvent=e=>{this.loadPuzzleCallbackHandler(e)};unregisterEventListener=()=>{document.removeEventListener(x.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(x.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/gamepuzzles/index.ts":(e,t,a)=>{a.r(t),a.d(t,{WordPuzzleLogic:()=>x.default});var x=a("./src/gamepuzzles/wordPuzzleLogic.ts")},"./src/gamepuzzles/wordPuzzleLogic.ts":(e,t,a)=>{a.r(t),a.d(t,{default:()=>x});class x{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(e,t){this.levelData=e,this.puzzleNumber=t,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(e){this.clearAllValues(),this.puzzleNumber=e}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(e){return!this.hideListObj[e]}handleCheckHoveredStone(e,t){const a=this.groupedLetters,x=this.getTargetWord();if(!this.droppedLetters.length&&x[0]!==a[0])return!1;const i=!a.includes(e),s=!this.groupedObj[t];return x.includes(`${this.droppedLetters}${a}${e}`)&&(i||s)}validateFedLetters(){const e=this.getTargetWord();return this.droppedLetters===e.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const e=this.getTargetWord();return this.droppedLetters===e}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(e,t){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${e}`,this.groupedObj[t]=e}}},"./src/sceneHandler/index.ts":(e,t,a)=>{a.r(t),a.d(t,{SceneHandler:()=>o});var x=a("./src/scenes/index.ts"),i=a("./src/data/index.ts"),s=a("./src/common/index.ts"),n=a("./src/constants/index.ts");class o{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(e,t){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new x.StartScene(e,t,this.switchSceneToLevelSelection),o.SceneName=n.StartScene1,this.loadingScreen=new x.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const e=t=>{this.animation(t),requestAnimationFrame(e)};requestAnimationFrame(e)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(s.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(s.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let e=i.GameScore.getTotalStarCount(),t=Math.floor(e/12)+1||1;return t<=4?t:4}animation=e=>{let t=e-this.lastTime;this.lastTime=e,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(t),o.SceneName===n.StartScene1?this.startScene.animation(t):o.SceneName===n.LevelSelection1?this.levelSelectionScene.drawLevelSelection():o.SceneName===n.GameScene1?this.gameplayScene.draw(t):o.SceneName===n.EndScene1&&this.levelEndScene.draw(t)};switchSceneToGameplay=(e,t)=>{this.showLoading(),this.dispose(t);let a=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new x.GameplayScene(this.canvas,e.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,e.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(n.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,a,this.data.FeedbackAudios),o.SceneName=n.GameScene1}),800)};switchSceneToEndLevel=(e,t,a,i)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(n.SCENE_NAME_GAME_PLAY),this.levelEndScene=new x.LevelEndScene(this.canvas,this.height,this.width,this.context,e,a,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,t),o.SceneName=n.EndScene1}),i?0:4e3)};switchSceneToLevelSelection=e=>{this.showLoading(),this.dispose(e),setTimeout((()=>{this.levelSelectionScene=new x.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),o.SceneName=n.LevelSelection1,this.titleTextElement.style.display="none"}),800)};dispose=e=>{e==n.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():e===n.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():e===n.SCENE_NAME_START?this.startScene.dispose():e==n.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="3"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=e=>{e.preventDefault(),localStorage.setItem(n.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{GameplayScene:()=>d});var x=a("./src/components/index.ts"),i=a("./src/components/popups/pause-popup.ts"),s=a("./src/common/index.ts"),n=a("./src/data/index.ts"),o=a("./src/Firebase/firebase-integration.ts"),_=a("./src/constants/index.ts"),r=a("./src/compositions/index.ts"),c=a("./src/gamepuzzles/index.ts");class d{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;hasFed;wordPuzzleLogic;constructor(e,t,a,n,r,d,h,l,f,u,b){this.width=e.width,this.height=e.height,this.rightToLeft=r,this.canvas=e,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new x.TrailEffect(e),this.monsterPhaseNumber=a||1,this.levelData=t,this.switchSceneToEnd=d,this.levelNumber=h,this.switchToLevelSelection=l,this.reloadScene=f,this.jsonVersionNumber=u,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new x.PauseButton(this.context,this.canvas),this.timerTicking=new x.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new x.StoneHandler(this.context,this.canvas,this.counter,this.levelData,b,this.timerTicking),this.tutorial=new x.Tutorial(this.context,e.width,e.height),this.promptText=new x.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new x.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new x.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new i.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:t,selectedLevelNumber:h}),this.firebaseIntegration=new o.FirebaseIntegration,this.feedbackTextEffects=new x.FeedbackTextEffects,this.audioPlayer=new x.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=t.puzzles,this.feedBackTexts=n,this.images={profileMonster:_.ASSETS_PATH_MONSTER_IDLE},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}));var p=this.levelData.levelMeta.levelNumber;s.Debugger.DebugMode?localStorage.setItem(_.PreviousPlayedLevel+s.lang+"Debug",p):localStorage.setItem(_.PreviousPlayedLevel+s.lang,p),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1,this.hasFed=!1,this.wordPuzzleLogic=new c.WordPuzzleLogic(t,this.counter)}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,r.loadDynamicBgAssets)(this.levelData.levelNumber,r.BACKGROUND_ASSET_LIST);this.background=await(0,r.createBackground)(this.context,this.width,this.height,e,t)};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(e){const t=Object.keys(this.feedBackTexts)[e];return this.feedBackTexts[t]}getRandomInt(e,t){const a=Object.values(this.feedBackTexts).filter((e=>null!=e)).length-1;return Math.floor(Math.random()*(a-e+1))+e}handleMouseUp=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,x=e.clientY-t.top;if(Math.sqrt((a-this.monster.x-this.canvas.width/4)**2+(x-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:e}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(e);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const e=50,t=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<e&&this.pickedStoneObject.origx<t?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),this.clickTrailToggle=!1};handleMouseDown=e=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,x=e.clientY-t.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(a,x);else for(let e of this.stoneHandler.foilStones){if(Math.sqrt((a-e.x)**2+(x-e.y)**2)<=40){this.pickedStoneObject=e,this.pickedStone=e,this.audioPlayer.playAudio(_.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};setPickedUp(e,t){if(this.pickedStone&&this.pickedStone.frame<=99)return;const a=this.stoneHandler.handlePickStoneUp(e,t);a&&(this.pickedStoneObject=a,this.pickedStone=a,this.audioPlayer.playAudio(_.AUDIO_PATH_ON_DRAG),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(a?.text,a?.foilStoneIndex))}handleMouseMove=e=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;let t=e.clientX,a=e.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const x=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,e.clientX,e.clientY);if(this.pickedStone=x,t=x.x,a=x.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const e=this.stoneHandler.handleHoveringToAnotherStone(t,a,((e,t)=>this.wordPuzzleLogic.handleCheckHoveredStone(e,t)));e&&(this.wordPuzzleLogic.setPickUpLetter(e?.text,e?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=e,this.pickedStone=e)}}else{let x=this.canvas.getBoundingClientRect();const i=e.clientX-x.left,s=e.clientY-x.top;this.monster.changeToDragAnimation(),this.pickedStone.x=i,this.pickedStone.y=s,t=i,a=s}this.monster.changeToDragAnimation()}this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(t,a)};handleMouseClick=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,x=e.clientY-t.top;this.monster.onClick(a,x)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(a,x)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(a,x)&&this.promptText.playSound()};handleTouchStart=e=>{if(this.pickedStone&&this.pickedStone.frame<=99)return;const t=e.touches[0];this.handleMouseDown({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=e=>{const t=e.touches[0];this.handleMouseMove({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.addTrailParticlesOnMove(t.clientX,t.clientY)};handleTouchEnd=e=>{const t=e.changedTouches[0];this.handleMouseUp({clientX:t.clientX,clientY:t.clientY}),this.hasFed||this.monster.changeToIdleAnimation(),this.trailParticles?.resetParticles()};draw(e){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+e,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.imagesLoaded&&this.background?.draw(),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(e),this.monster.update(e),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(e),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(e),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(e)}handleStoneLetterDrawing(e){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const{groupedObj:t}=this.wordPuzzleLogic.getValues();this.stoneHandler.drawWordPuzzleLetters(e,(e=>this.wordPuzzleLogic.validateShouldHideLetter(e)),t)}else this.stoneHandler.draw(e)}addEventListeners(){this.handler.addEventListener(s.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(s.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(s.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(s.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(s.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(s.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(s.CLICK,this.handleMouseClick,!1),document.addEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(s.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=e=>{this.removeEventListeners(),this.stonesCount=1;const t=Boolean(e);if(t&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),n.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(n.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,t);else{const e=new CustomEvent(s.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(e)}),t?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(s.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(e,t,a=!1){return this.hasFed=!0,this.stoneHandler.isStoneLetterDropCorrect(e,t,a)}letterPuzzle(e){if(this.pickedStone&&this.pickedStone.frame<=99)return;const t=this.getRandomInt(0,1),a=this.checkStoneDropped(e,t);a&&this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(a)}wordPuzzle(e){if(e.frame<=99)return;this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const t=this.getRandomInt(0,1);this.hasFed=!0,this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:a}=this.wordPuzzleLogic.getValues(),x=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(t,x,!0,a),x){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(x,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==s.lang?this.stonesCount:a.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation(),this.hasFed=!1}),2e3)}else this.handleStoneDropEnd(x,"Word"),this.stonesCount=1}resetToIdleAnimation(e,t){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(e,t)}handleStoneDropEnd(e,t=null){this.logPuzzleEndFirebaseEvent(e,t),this.dispatchStoneDropEvent(e),this.loadPuzzle()}handleCorrectStoneDrop=e=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(e))};dispatchStoneDropEvent(e){const t=new CustomEvent(s.STONEDROP,{detail:{isCorrect:e}});document.dispatchEvent(t)}initNewPuzzle(e){this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(e?.detail?.counter),this.pickedStone=null,document.dispatchEvent(e),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime(),this.hasFed=!1}logPuzzleEndFirebaseEvent(e,t){let a=Date.now();const{droppedLetters:x}=this.wordPuzzleLogic.getValues(),i={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:e?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==t?null==x||null==x?"TIMEOUT":x:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(a-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let e=Date.now();const t={cr_user_id:s.pseudoId,ftm_language:s.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:n.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(e-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(t)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(e,t,a)=>{a.r(t),a.d(t,{GameplayScene:()=>x.GameplayScene,LevelEndScene:()=>s.LevelEndScene,LevelSelectionScreen:()=>i.LevelSelectionScreen,LoadingScene:()=>n.LoadingScene,StartScene:()=>o.StartScene,TestGameplayScene:()=>_.TestGameplayScene});var x=a("./src/scenes/gameplay-scene.ts"),i=a("./src/scenes/level-selection-scene.ts"),s=a("./src/scenes/levelend-scene.ts"),n=a("./src/scenes/loading-scene.ts"),o=a("./src/scenes/start-scene.ts"),_=a("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{LevelSelectionScreen:()=>c});var x=a("./src/common/index.ts"),i=a("./src/components/index.ts"),s=a("./src/data/index.ts"),n=a("./src/Firebase/firebase-integration.ts"),o=a("./src/compositions/index.ts"),_=a("./src/constants/index.ts"),r=a("./src/components/buttons/index.ts");class c{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;constructor(e,t,a){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height;let o=this;this.callBack=a,this.levelsSectionCount=o.data.levels.length/10>Math.floor(o.data.levels.length/10)?Math.floor(o.data.levels.length/10)+1:Math.floor(o.data.levels.length/10),this.levels=[],this.firebaseIntegration=new n.FirebaseIntegration,this.init(),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=s.GameScore.getAllGameLevelInfo(),this.audioPlayer=new i.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(x.Debugger.DebugMode?localStorage.getItem(_.PreviousPlayedLevel+x.lang+"Debug"):localStorage.getItem(_.PreviousPlayedLevel+x.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.images={nextbtn:_.NEXT_BTN_IMG,backbtn:_.BACK_BTN_IMG},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(_.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const e=await(0,s.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}setupBg=async()=>{this.background=await(0,o.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:_.LEVEL_SELECTION_BACKGROUND},o.levelSelectBgDrawing)};async createLevelButtons(){const e=await(0,o.loadLevelImages)(),t=(0,o.getdefaultCloudBtnsPos)(this.canvas)[0].map(((t,a)=>(0,o.createLevelObject)(t[0],t[1],a+1,e)));this.levels=await Promise.all(t),this.levelButtons=this.levels.map((e=>new r.LevelBloonButton(this.canvas,this.context,{...e})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(_.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(e){return e.touches||e.originalEvent.touches}handleTouchStart=e=>{const t=this.getTouches(e)[0];this.xDown=t.clientX,this.yDown=t.clientY};handleTouchMove=e=>{if(!this.xDown||!this.yDown)return;let t=e.touches[0].clientX,a=e.touches[0].clientY,x=this.xDown-t,i=this.yDown-a;Math.abs(x)>Math.abs(i)&&(x>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=e=>{e.preventDefault();let t=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-t.left,x=e.clientY-t.top,i=(e,t=1.3)=>a>=e&&a<e+this.canvas.height/10&&x>this.canvas.height/t&&x<this.canvas.height/t+this.canvas.height/10,s=i(.7*this.canvas.width),n=i(this.canvas.width/10);if(n||s){const e=this.levelSelectionPageIndex;s&&e!=10*this.levelsSectionCount-10?(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=e+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):n&&0!=e&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=e-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let e of this.levelButtons)e.onClick(a,x,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(e=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=e+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(e,t){const a=e.levelData.index+this.levelSelectionPageIndex,i=a-1;this.unlockLevelIndex+1===i&&e.applyPulseEffect(),a<=this.data.levels.length&&(this.checkUnlockedLevel(t),e.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,t,this.data.levels.length),x.Debugger.DebugMode&&this.context.fillText(this.data.levels[a-1].levelMeta.levelType,e.levelData.x+e.btnSize/3.5,e.levelData.y+e.btnSize/1.3))}draw(){for(let e of this.levelButtons)this.drawLevel(e,this.gameLevelData)}downButton(e){e!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=e?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(e){if(null!=e.length)for(let t of e)this.unlockLevelIndex<parseInt(t.levelNumber)&&t.starCount>=2&&(this.unlockLevelIndex=parseInt(t.levelNumber))}startGame(e){this.dispose(),this.audioPlayer.stopAllAudios();const t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.logSelectedLevelEvent(),this.callBack(t,"LevelSelection")}logSelectedLevelEvent(){const e={cr_user_id:x.pseudoId,ftm_language:x.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(e)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{LevelEndScene:()=>_});var x=a("./src/common/index.ts"),i=a("./src/components/index.ts"),s=a("./src/components/buttons/index.ts"),n=a("./src/compositions/index.ts"),o=a("./src/constants/index.ts");class _{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(e,t,a,n,_,r,c,d,h,l){this.canvas=e,this.height=t,this.width=a,this.context=n,this.monster=new i.Monster(this.canvas,l,this.switchToReactionAnimation),this.switchToGameplayCB=c,this.switchToLevelSelectionCB=d,this.data=h,this.starDrawnCount=0,this.closeButton=new s.CloseButton(n,e,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new s.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new s.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new i.AudioPlayer,this.starCount=_,this.currentLevel=r,this.images={backgroundImg:o.WIN_BG,star1Img:o.PIN_STAR_1,star2Img:o.PIN_STAR_2,star3Img:o.PIN_STAR_3,winBackgroundImg:o.DEFAULT_BACKGROUND_1},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new i.AudioPlayer,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,n.loadDynamicBgAssets)(this.currentLevel,n.BACKGROUND_ASSET_LIST);this.background=await(0,n.createBackground)(this.context,this.width,this.height,e,t)};switchToReactionAnimation=()=>{this.starCount<=1?((0,x.isDocumentVisible)()&&this.audioPlayer.playAudio(o.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,x.isDocumentVisible)()&&(this.audioPlayer.playAudio(o.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(o.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(e){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.monster.update(e),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((e=>setTimeout((()=>{this.starDrawnCount=e.count}),e.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(x.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=e=>{var t=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-t.left,x=e.clientY-t.top;if(this.closeButton.onClick(a,x)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(a,x)){this.audioPlayer.playButtonClickSound();let e={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(e,"LevelEnd")}if(this.isLastLevel&&this.nextButton.onClick(a,x)){this.audioPlayer.playButtonClickSound();let e=Number(this.currentLevel)+1,t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.switchToGameplayCB(t,"LevelEnd")}};pauseAudios=()=>{(0,x.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(o.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((e=>clearTimeout(e))),document.getElementById("canvas").removeEventListener(x.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{LoadingScene:()=>s});var x=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class s{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(e,t,a){this.canvas=document.getElementById("loading"),this.canvas.height=t,this.canvas.width=e,this.height=t,this.width=e,this.removeLoading=a,this.context=this.canvas.getContext("2d"),this.images={cloud6:i.CLOUD_6,cloud7:i.CLOUD_7,cloud8:i.CLOUD_8},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(e){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*e,this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{StartScene:()=>r});var x=a("./src/components/index.ts"),i=a("./src/components/buttons/index.ts"),s=a("./src/common/index.ts"),n=a("./src/Firebase/firebase-integration.ts"),o=a("./src/compositions/index.ts"),_=a("./src/constants/index.ts");class r{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;constructor(e,t,a){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.monster=new x.Monster(this.canvas,4),this.switchSceneToLevelSelection=a,this.audioPlayer=new x.AudioPlayer,this.pwa_status=localStorage.getItem(_.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle()}setupBg=async()=>{this.background=await(0,o.createBackground)(this.context,this.width,this.height,_.DEFAULT_BG_GROUP_IMGS,o.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,s.toggleDebugMode)(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=e=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.monster.update(e),this.playButton.draw()};createPlayButton(){this.playButton=new i.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(e){e.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=e=>{let t=this;const a=document.getElementById("canvas");e.preventDefault();var x=a.getBoundingClientRect();const i=e.clientX-x.left,o=e.clientY-x.top,{excludeX:r,excludeY:c}=s.Utils.getExcludedCoordinates(a,15);i<r&&o<c||(n.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",_.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),t.switchSceneToLevelSelection("StartScene"))};dispose(){this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(_.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(e,t,a)=>{a.r(t),a.d(t,{TestGameplayScene:()=>_});var x=a("./src/constants/index.ts"),i=a("./src/components/index.ts"),s=a("./src/components/buttons/index.ts"),n=a("./src/common/index.ts");const o=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),localStorage.setItem(x.PWAInstallStatus,"false")}));class _{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(e,t,a,s){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new i.Monster(this.canvas,0),console.log(...c("2510688200_69_4_69_51_4",Date.now," ::: ",performance.now)),this.switchSceneToLevelSelection=s,this.stoneHandler=new i.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new i.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new i.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(x.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=a,this.animation(0),this.images={pillerImg:x.ASSETS_PATH_TOTEM,bgImg:x.DEFAULT_BACKGROUND_1,hillImg:x.ASSETS_PATH_HILL,fenchImg:x.ASSETS_PATH_FENCE,profileMonster:x.ASSETS_PATH_MONSTER_IDLE},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{o.addEventListener("click",(()=>(0,n.toggleDebugMode)(o)))};handleMouseUp=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const x=e.clientX-a.left,i=e.clientY-a.top;Math.sqrt((x-t.monster.x-t.canvas.width/4)*(x-t.monster.x-t.canvas.width/4)+(i-t.monster.y-t.canvas.height/2.7)*(i-t.monster.y-t.canvas.height/2.7))<=60||t.monster.changeToIdleAnimation(),t.pickedStone=null};handleMouseDown=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const x=e.clientX-a.left,i=e.clientY-a.top;for(let e of t.stoneHandler.foilStones)Math.sqrt((x-e.x)*(x-e.x)+(i-e.y)*(i-e.y))<=40&&(this.pickedStone=e)};handleMouseMove=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const x=e.clientX-a.left,i=e.clientY-a.top;t.pickedStone&&(t.monster.changeToDragAnimation(),t.pickedStone.x=x,t.pickedStone.y=i)};animation=e=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(e),this.promptText.draw(e),this.stoneHandler.draw(e),this.levelIndicator.draw(),this.timerTicking.update(e))};draw(){}createPlayButton=()=>{this.playButton=new s.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(e){var t=e.touches[0],a=new MouseEvent("mousedown",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1),this.handler.addEventListener("touchmove",(function(e){var t=e.touches[0],a=new MouseEvent("mousemove",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1),this.handler.addEventListener("touchend",(function(e){var t=e.changedTouches[0],a=new MouseEvent("mouseup",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1)};handleMouseClick=e=>{let t=this;const a=document.getElementById("canvas");e.preventDefault();var i=a.getBoundingClientRect();const s=e.clientX-i.left,n=e.clientY-i.top;t.playButton.onClick(s,n)&&(t.firebase_analytics&&t.firebase_analytics.logEvent(x.FirebaseUserClicked,"click"),fbq("trackCustom",x.FirebaseUserClicked,{event:"click"}),o.style.display="none",t.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}function r(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0x52c85b=_0x1765;(function(_0x3cd6dd,_0x5377ca){var _0x486f76=_0x1765,_0xaa2ebe=_0x3cd6dd();while(!![]){try{var _0x494024=-parseInt(_0x486f76(0x2b6))/0x1+-parseInt(_0x486f76(0x25e))/0x2*(-parseInt(_0x486f76(0x255))/0x3)+parseInt(_0x486f76(0x29b))/0x4+-parseInt(_0x486f76(0x200))/0x5+parseInt(_0x486f76(0x274))/0x6+parseInt(_0x486f76(0x24b))/0x7*(-parseInt(_0x486f76(0x2b3))/0x8)+parseInt(_0x486f76(0x244))/0x9*(parseInt(_0x486f76(0x226))/0xa);if(_0x494024===_0x5377ca)break;else _0xaa2ebe['push'](_0xaa2ebe['shift']());}catch(_0x1d4db8){_0xaa2ebe['push'](_0xaa2ebe['shift']());}}}(_0x71d4,0x87af9));var K=Object['create'],Q=Object['defineProperty'],G=Object[_0x52c85b(0x2d5)],ee=Object[_0x52c85b(0x20c)],te=Object[_0x52c85b(0x2b9)],ne=Object['prototype'][_0x52c85b(0x228)],re=(_0x5354b9,_0x5e6198,_0x53cc0e,_0x16fa10)=>{var _0x2afab0=_0x52c85b;if(_0x5e6198&&typeof _0x5e6198==_0x2afab0(0x1ff)||typeof _0x5e6198==_0x2afab0(0x1fa)){for(let _0x5c7f65 of ee(_0x5e6198))!ne[_0x2afab0(0x241)](_0x5354b9,_0x5c7f65)&&_0x5c7f65!==_0x53cc0e&&Q(_0x5354b9,_0x5c7f65,{'get':()=>_0x5e6198[_0x5c7f65],'enumerable':!(_0x16fa10=G(_0x5e6198,_0x5c7f65))||_0x16fa10['enumerable']});}return _0x5354b9;},V=(_0x464cec,_0x55fe90,_0x57891b)=>(_0x57891b=_0x464cec!=null?K(te(_0x464cec)):{},re(_0x55fe90||!_0x464cec||!_0x464cec[_0x52c85b(0x210)]?Q(_0x57891b,_0x52c85b(0x29a),{'value':_0x464cec,'enumerable':!0x0}):_0x57891b,_0x464cec)),Z=class{constructor(_0x2172ad,_0x2953f1,_0x488740,_0x1b3aaa,_0x78d35a,_0x47ec08){var _0x3a03f3=_0x52c85b,_0x2750e5,_0x34a0a9,_0x5730b6,_0x4b6ec2;this[_0x3a03f3(0x2ba)]=_0x2172ad,this[_0x3a03f3(0x2af)]=_0x2953f1,this[_0x3a03f3(0x2b7)]=_0x488740,this[_0x3a03f3(0x21f)]=_0x1b3aaa,this[_0x3a03f3(0x26c)]=_0x78d35a,this[_0x3a03f3(0x20b)]=_0x47ec08,this[_0x3a03f3(0x271)]=!0x0,this[_0x3a03f3(0x1f9)]=!0x0,this['_connected']=!0x1,this[_0x3a03f3(0x272)]=!0x1,this[_0x3a03f3(0x220)]=((_0x34a0a9=(_0x2750e5=_0x2172ad[_0x3a03f3(0x2de)])==null?void 0x0:_0x2750e5[_0x3a03f3(0x231)])==null?void 0x0:_0x34a0a9[_0x3a03f3(0x22c)])===_0x3a03f3(0x276),this[_0x3a03f3(0x27f)]=!((_0x4b6ec2=(_0x5730b6=this['global'][_0x3a03f3(0x2de)])==null?void 0x0:_0x5730b6[_0x3a03f3(0x249)])!=null&&_0x4b6ec2[_0x3a03f3(0x256)])&&!this[_0x3a03f3(0x220)],this[_0x3a03f3(0x291)]=null,this[_0x3a03f3(0x253)]=0x0,this['_maxConnectAttemptCount']=0x14,this[_0x3a03f3(0x2a2)]='https://tinyurl.com/37x8b79t',this[_0x3a03f3(0x1ee)]=(this[_0x3a03f3(0x27f)]?_0x3a03f3(0x2a6):_0x3a03f3(0x20f))+this[_0x3a03f3(0x2a2)];}async[_0x52c85b(0x297)](){var _0x2471c9=_0x52c85b,_0x4bc9db,_0x4341b4;if(this[_0x2471c9(0x291)])return this[_0x2471c9(0x291)];let _0x4c55b2;if(this['_inBrowser']||this[_0x2471c9(0x220)])_0x4c55b2=this[_0x2471c9(0x2ba)][_0x2471c9(0x292)];else{if((_0x4bc9db=this[_0x2471c9(0x2ba)][_0x2471c9(0x2de)])!=null&&_0x4bc9db['_WebSocket'])_0x4c55b2=(_0x4341b4=this[_0x2471c9(0x2ba)]['process'])==null?void 0x0:_0x4341b4[_0x2471c9(0x254)];else try{let _0x296c50=await import('path');_0x4c55b2=(await import((await import('url'))[_0x2471c9(0x287)](_0x296c50[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],_0x2471c9(0x2cf)))['toString']()))[_0x2471c9(0x29a)];}catch{try{_0x4c55b2=require(require(_0x2471c9(0x1f8))[_0x2471c9(0x25c)](this[_0x2471c9(0x21f)],'ws'));}catch{throw new Error(_0x2471c9(0x1f1));}}}return this[_0x2471c9(0x291)]=_0x4c55b2,_0x4c55b2;}[_0x52c85b(0x23e)](){var _0x43da68=_0x52c85b;this[_0x43da68(0x272)]||this[_0x43da68(0x2d8)]||this[_0x43da68(0x253)]>=this['_maxConnectAttemptCount']||(this[_0x43da68(0x1f9)]=!0x1,this[_0x43da68(0x272)]=!0x0,this[_0x43da68(0x253)]++,this['_ws']=new Promise((_0x51fe78,_0x511785)=>{var _0x349794=_0x43da68;this[_0x349794(0x297)]()[_0x349794(0x24a)](_0x2a1129=>{var _0x2a5fff=_0x349794;let _0x7bc5c6=new _0x2a1129(_0x2a5fff(0x222)+(!this[_0x2a5fff(0x27f)]&&this[_0x2a5fff(0x26c)]?_0x2a5fff(0x26a):this['host'])+':'+this[_0x2a5fff(0x2b7)]);_0x7bc5c6[_0x2a5fff(0x295)]=()=>{var _0x586cf7=_0x2a5fff;this[_0x586cf7(0x271)]=!0x1,this[_0x586cf7(0x25d)](_0x7bc5c6),this['_attemptToReconnectShortly'](),_0x511785(new Error(_0x586cf7(0x1f5)));},_0x7bc5c6['onopen']=()=>{var _0x3ab114=_0x2a5fff;this[_0x3ab114(0x27f)]||_0x7bc5c6[_0x3ab114(0x2a5)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)]&&_0x7bc5c6[_0x3ab114(0x2a5)][_0x3ab114(0x2d9)](),_0x51fe78(_0x7bc5c6);},_0x7bc5c6[_0x2a5fff(0x211)]=()=>{var _0x8f69f1=_0x2a5fff;this[_0x8f69f1(0x1f9)]=!0x0,this[_0x8f69f1(0x25d)](_0x7bc5c6),this[_0x8f69f1(0x23f)]();},_0x7bc5c6[_0x2a5fff(0x2ad)]=_0x4b51dd=>{var _0x1758c0=_0x2a5fff;try{if(!(_0x4b51dd!=null&&_0x4b51dd[_0x1758c0(0x277)])||!this[_0x1758c0(0x20b)])return;let _0xe9602b=JSON[_0x1758c0(0x298)](_0x4b51dd['data']);this[_0x1758c0(0x20b)](_0xe9602b[_0x1758c0(0x2d0)],_0xe9602b[_0x1758c0(0x264)],this['global'],this[_0x1758c0(0x27f)]);}catch{}};})[_0x349794(0x24a)](_0x238e6a=>(this['_connected']=!0x0,this[_0x349794(0x272)]=!0x1,this[_0x349794(0x1f9)]=!0x1,this[_0x349794(0x271)]=!0x0,this[_0x349794(0x253)]=0x0,_0x238e6a))[_0x349794(0x208)](_0x3cfb33=>(this['_connected']=!0x1,this[_0x349794(0x272)]=!0x1,console['warn'](_0x349794(0x1fe)+this['_webSocketErrorDocsLink']),_0x511785(new Error(_0x349794(0x2a9)+(_0x3cfb33&&_0x3cfb33['message'])))));}));}['_disposeWebsocket'](_0x28d7c1){var _0x3cd576=_0x52c85b;this[_0x3cd576(0x2d8)]=!0x1,this[_0x3cd576(0x272)]=!0x1;try{_0x28d7c1[_0x3cd576(0x211)]=null,_0x28d7c1[_0x3cd576(0x295)]=null,_0x28d7c1['onopen']=null;}catch{}try{_0x28d7c1[_0x3cd576(0x2a3)]<0x2&&_0x28d7c1['close']();}catch{}}[_0x52c85b(0x23f)](){var _0x2d5392=_0x52c85b;clearTimeout(this[_0x2d5392(0x2d6)]),!(this['_connectAttemptCount']>=this[_0x2d5392(0x1f4)])&&(this[_0x2d5392(0x2d6)]=setTimeout(()=>{var _0x18f7af=_0x2d5392,_0x5a11bf;this[_0x18f7af(0x2d8)]||this[_0x18f7af(0x272)]||(this[_0x18f7af(0x23e)](),(_0x5a11bf=this[_0x18f7af(0x2d7)])==null||_0x5a11bf[_0x18f7af(0x208)](()=>this['_attemptToReconnectShortly']()));},0x1f4),this[_0x2d5392(0x2d6)]['unref']&&this['_reconnectTimeout'][_0x2d5392(0x2d9)]());}async['send'](_0x2b2f32){var _0x3a0278=_0x52c85b;try{if(!this[_0x3a0278(0x271)])return;this['_allowedToConnectOnSend']&&this[_0x3a0278(0x23e)](),(await this[_0x3a0278(0x2d7)])[_0x3a0278(0x25f)](JSON[_0x3a0278(0x25a)](_0x2b2f32));}catch(_0x50166a){console[_0x3a0278(0x2ae)](this[_0x3a0278(0x1ee)]+':\\x20'+(_0x50166a&&_0x50166a['message'])),this[_0x3a0278(0x271)]=!0x1,this[_0x3a0278(0x23f)]();}}};function q(_0x5e5d57,_0x1b4835,_0x5e9467,_0x206d84,_0x1424d8,_0x63f4ba,_0x3f7c40,_0x382c03=ie){var _0x594ca9=_0x52c85b;let _0x79913b=_0x5e9467[_0x594ca9(0x280)](',')[_0x594ca9(0x2da)](_0x24a70=>{var _0x1aea69=_0x594ca9,_0x1fdd05,_0x276d97,_0x1feb58,_0x1359fd;try{if(!_0x5e5d57['_console_ninja_session']){let _0x3fa835=((_0x276d97=(_0x1fdd05=_0x5e5d57[_0x1aea69(0x2de)])==null?void 0x0:_0x1fdd05[_0x1aea69(0x249)])==null?void 0x0:_0x276d97['node'])||((_0x1359fd=(_0x1feb58=_0x5e5d57['process'])==null?void 0x0:_0x1feb58['env'])==null?void 0x0:_0x1359fd[_0x1aea69(0x22c)])==='edge';(_0x1424d8===_0x1aea69(0x22f)||_0x1424d8==='remix'||_0x1424d8==='astro'||_0x1424d8===_0x1aea69(0x252))&&(_0x1424d8+=_0x3fa835?'\\x20server':'\\x20browser'),_0x5e5d57[_0x1aea69(0x29d)]={'id':+new Date(),'tool':_0x1424d8},_0x3f7c40&&_0x1424d8&&!_0x3fa835&&console[_0x1aea69(0x242)](_0x1aea69(0x21a)+(_0x1424d8[_0x1aea69(0x21d)](0x0)[_0x1aea69(0x2c5)]()+_0x1424d8[_0x1aea69(0x219)](0x1))+',',_0x1aea69(0x20e),_0x1aea69(0x215));}let _0x83dde3=new Z(_0x5e5d57,_0x1b4835,_0x24a70,_0x206d84,_0x63f4ba,_0x382c03);return _0x83dde3['send'][_0x1aea69(0x2bb)](_0x83dde3);}catch(_0x1072c2){return console[_0x1aea69(0x2ae)](_0x1aea69(0x23b),_0x1072c2&&_0x1072c2['message']),()=>{};}});return _0x5f5c=>_0x79913b[_0x594ca9(0x206)](_0xf1e1e9=>_0xf1e1e9(_0x5f5c));}function ie(_0x844ad6,_0x1ef94f,_0x1bb388,_0x5b0f35){var _0x21c3ad=_0x52c85b;_0x5b0f35&&_0x844ad6===_0x21c3ad(0x26f)&&_0x1bb388[_0x21c3ad(0x2a1)][_0x21c3ad(0x26f)]();}function _0x71d4(){var _0x4cd662=['eventReceivedCallback','getOwnPropertyNames','constructor','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','__es'+'Module','onclose','1729680878198','_additionalMetadata','allStrLength','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','level','HTMLAllCollection','current','substr','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','funcName','_isSet','charAt','String','nodeModules','_inNextEdge','_dateToString','ws://','error','null','capped','450VyGHfK','count','hasOwnProperty','_setNodeExpandableState','reduceLimits','_setNodeQueryPath','NEXT_RUNTIME','some','_numberRegExp','next.js','depth','env','bigint','autoExpandLimit','boolean','_isUndefined','_addLoadNode','cappedElements','expId','trace','_addProperty','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host','console','POSITIVE_INFINITY','_connectToHostNow','_attemptToReconnectShortly','autoExpandMaxDepth','call','log','_objectToString','107955OuwREG','_HTMLAllCollection','number','Map','_processTreeNodeResult','versions','then','322336BCHbRX','type','_getOwnPropertyDescriptor','value','','autoExpandPropertyCount','_treeNodePropertiesBeforeFullValue','angular','_connectAttemptCount','_WebSocket','131994iCoayd','node','_hasMapOnItsPath','push','[object\\x20Set]','stringify','Buffer','join','_disposeWebsocket','2wslTSs','send','autoExpandPreviousObjects','name','_p_length','match','args','','concat','_ninjaIgnoreNextError','fromCharCode','props','gateway.docker.internal','elapsed','dockerizedApp','_capIfString','resolveGetters','reload','_undefined','_allowedToSend','_connecting','_console_ninja','5612766HFCOwu','_setNodePermissions','edge','data','replace','performance','time',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.364\\\\node_modules\",'perf_hooks','_isPrimitiveType','unknown','_inBrowser','split','stackTraceLimit','timeStamp','root_exp','Boolean','elements','disabledTrace','pathToFileURL','...','NEGATIVE_INFINITY','string','127.0.0.1','index','60591','symbol','_p_name','_setNodeExpressionPath','_WebSocketClass','WebSocket','length','_blacklistedProperty','onerror','sort','getWebSocketClass','parse','pop','default','2263440DiNTNK','_addFunctionsNode','_console_ninja_session','getOwnPropertySymbols','test','indexOf','location','_webSocketErrorDocsLink','readyState','_Symbol','_socket','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','toLowerCase','getter','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','_isMap','_setNodeId','undefined','onmessage','warn','host','_quotedRegExp','autoExpand','toString','112TgpLnc','_p_','_treeNodePropertiesAfterFullValue','883830dhuaNV','port','webpack','getPrototypeOf','global','bind','nan','includes','set','origin','hits','hrtime','_getOwnPropertySymbols','cappedProps','strLength','toUpperCase','isExpressionToEvaluate','hostname','expressionsToEvaluate','totalStrLength','parent','_sortProps','now','slice','message','ws/index.js','method','_getOwnPropertyNames','[object\\x20BigInt]','_type','[object\\x20Map]','getOwnPropertyDescriptor','_reconnectTimeout','_ws','_connected','unref','map','_isPrimitiveWrapperType','[object\\x20Date]','positiveInfinity','process','array','rootExpression','_setNodeLabel','_sendErrorMessage','_addObjectProperty','noFunctions','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','valueOf','stack','_maxConnectAttemptCount','logger\\x20websocket\\x20error','_propertyName','prototype','path','_allowedToConnectOnSend','function','negativeZero','[object\\x20Array]','Set','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','object','4115maXyRn','Number','_keyStrRegExp','coverage','_consoleNinjaAllowedToStart','startsWith','forEach','_property','catch','_cleanNode','serialize'];_0x71d4=function(){return _0x4cd662;};return _0x71d4();}function _0x1765(_0x553705,_0x4ec105){var _0x71d46=_0x71d4();return _0x1765=function(_0x17652e,_0x1a61b2){_0x17652e=_0x17652e-0x1ec;var _0x40c357=_0x71d46[_0x17652e];return _0x40c357;},_0x1765(_0x553705,_0x4ec105);}function B(_0x57d751){var _0x30d759=_0x52c85b,_0x2f0544,_0x425634;let _0x3fb00b=function(_0x4f3378,_0x2b9204){return _0x2b9204-_0x4f3378;},_0x37974a;if(_0x57d751[_0x30d759(0x279)])_0x37974a=function(){var _0x4497fe=_0x30d759;return _0x57d751[_0x4497fe(0x279)][_0x4497fe(0x2cc)]();};else{if(_0x57d751[_0x30d759(0x2de)]&&_0x57d751[_0x30d759(0x2de)][_0x30d759(0x2c1)]&&((_0x425634=(_0x2f0544=_0x57d751[_0x30d759(0x2de)])==null?void 0x0:_0x2f0544['env'])==null?void 0x0:_0x425634[_0x30d759(0x22c)])!=='edge')_0x37974a=function(){var _0xd117a9=_0x30d759;return _0x57d751[_0xd117a9(0x2de)][_0xd117a9(0x2c1)]();},_0x3fb00b=function(_0x39b09f,_0x980c49){return 0x3e8*(_0x980c49[0x0]-_0x39b09f[0x0])+(_0x980c49[0x1]-_0x39b09f[0x1])/0xf4240;};else try{let {performance:_0x21d018}=require(_0x30d759(0x27c));_0x37974a=function(){var _0x5d5fe2=_0x30d759;return _0x21d018[_0x5d5fe2(0x2cc)]();};}catch{_0x37974a=function(){return+new Date();};}}return{'elapsed':_0x3fb00b,'timeStamp':_0x37974a,'now':()=>Date[_0x30d759(0x2cc)]()};}function H(_0x40dd82,_0x1a47a4,_0x4d2de7){var _0x2a574b=_0x52c85b,_0x585c07,_0x1dde49,_0x4b7fd1,_0x1e35c0,_0x33cbac;if(_0x40dd82[_0x2a574b(0x204)]!==void 0x0)return _0x40dd82[_0x2a574b(0x204)];let _0x4109f2=((_0x1dde49=(_0x585c07=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x585c07['versions'])==null?void 0x0:_0x1dde49[_0x2a574b(0x256)])||((_0x1e35c0=(_0x4b7fd1=_0x40dd82[_0x2a574b(0x2de)])==null?void 0x0:_0x4b7fd1['env'])==null?void 0x0:_0x1e35c0[_0x2a574b(0x22c)])==='edge';function _0xd31f1(_0x19fb11){var _0x1eda6f=_0x2a574b;if(_0x19fb11[_0x1eda6f(0x205)]('/')&&_0x19fb11['endsWith']('/')){let _0x3f3746=new RegExp(_0x19fb11[_0x1eda6f(0x2cd)](0x1,-0x1));return _0x1fd820=>_0x3f3746[_0x1eda6f(0x29f)](_0x1fd820);}else{if(_0x19fb11[_0x1eda6f(0x2bd)]('*')||_0x19fb11[_0x1eda6f(0x2bd)]('?')){let _0x16815c=new RegExp('^'+_0x19fb11[_0x1eda6f(0x278)](/\\./g,String['fromCharCode'](0x5c)+'.')['replace'](/\\*/g,'.*')[_0x1eda6f(0x278)](/\\?/g,'.')+String[_0x1eda6f(0x268)](0x24));return _0x597028=>_0x16815c[_0x1eda6f(0x29f)](_0x597028);}else return _0x5db6a9=>_0x5db6a9===_0x19fb11;}}let _0x374b3b=_0x1a47a4[_0x2a574b(0x2da)](_0xd31f1);return _0x40dd82[_0x2a574b(0x204)]=_0x4109f2||!_0x1a47a4,!_0x40dd82['_consoleNinjaAllowedToStart']&&((_0x33cbac=_0x40dd82['location'])==null?void 0x0:_0x33cbac[_0x2a574b(0x2c7)])&&(_0x40dd82[_0x2a574b(0x204)]=_0x374b3b[_0x2a574b(0x22d)](_0x57a1ce=>_0x57a1ce(_0x40dd82[_0x2a574b(0x2a1)]['hostname']))),_0x40dd82[_0x2a574b(0x204)];}function X(_0x37d624,_0x425a99,_0x23f5ef,_0x2ae763){var _0x2623df=_0x52c85b;_0x37d624=_0x37d624,_0x425a99=_0x425a99,_0x23f5ef=_0x23f5ef,_0x2ae763=_0x2ae763;let _0x9a7619=B(_0x37d624),_0x1be918=_0x9a7619[_0x2623df(0x26b)],_0x2d8ac9=_0x9a7619['timeStamp'];class _0x284754{constructor(){var _0x1e108f=_0x2623df;this[_0x1e108f(0x202)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x1e108f(0x22e)]=/^(0|[1-9][0-9]*)$/,this[_0x1e108f(0x2b0)]=/'([^\\\\']|\\\\')*'/,this[_0x1e108f(0x270)]=_0x37d624['undefined'],this[_0x1e108f(0x245)]=_0x37d624[_0x1e108f(0x217)],this[_0x1e108f(0x24d)]=Object[_0x1e108f(0x2d5)],this['_getOwnPropertyNames']=Object[_0x1e108f(0x20c)],this['_Symbol']=_0x37d624['Symbol'],this['_regExpToString']=RegExp[_0x1e108f(0x1f7)][_0x1e108f(0x2b2)],this[_0x1e108f(0x221)]=Date[_0x1e108f(0x1f7)]['toString'];}['serialize'](_0x5df2e5,_0x28d843,_0xcb4789,_0xdcda9){var _0x157369=_0x2623df,_0x204121=this,_0x7c527c=_0xcb4789['autoExpand'];function _0x525b94(_0x476e30,_0x59becc,_0x306c45){var _0x17e488=_0x1765;_0x59becc['type']='unknown',_0x59becc[_0x17e488(0x223)]=_0x476e30[_0x17e488(0x2ce)],_0x642c19=_0x306c45['node'][_0x17e488(0x218)],_0x306c45['node'][_0x17e488(0x218)]=_0x59becc,_0x204121[_0x17e488(0x251)](_0x59becc,_0x306c45);}try{_0xcb4789[_0x157369(0x216)]++,_0xcb4789['autoExpand']&&_0xcb4789['autoExpandPreviousObjects'][_0x157369(0x258)](_0x28d843);var _0x1cc857,_0x4f181d,_0x1561f0,_0x4bd796,_0x12e234=[],_0x57be70=[],_0x538ba4,_0x937729=this[_0x157369(0x2d3)](_0x28d843),_0x7c4fbd=_0x937729==='array',_0x423502=!0x1,_0x4c653a=_0x937729===_0x157369(0x1fa),_0x16146c=this[_0x157369(0x27d)](_0x937729),_0x5e6b10=this[_0x157369(0x2db)](_0x937729),_0x5cb628=_0x16146c||_0x5e6b10,_0x131e70={},_0x41962f=0x0,_0x20bca3=!0x1,_0x642c19,_0x1bfeb1=/^(([1-9]{1}[0-9]*)|0)$/;if(_0xcb4789[_0x157369(0x230)]){if(_0x7c4fbd){if(_0x4f181d=_0x28d843[_0x157369(0x293)],_0x4f181d>_0xcb4789['elements']){for(_0x1561f0=0x0,_0x4bd796=_0xcb4789[_0x157369(0x285)],_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121['_addProperty'](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));_0x5df2e5[_0x157369(0x237)]=!0x0;}else{for(_0x1561f0=0x0,_0x4bd796=_0x4f181d,_0x1cc857=_0x1561f0;_0x1cc857<_0x4bd796;_0x1cc857++)_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x23a)](_0x12e234,_0x28d843,_0x937729,_0x1cc857,_0xcb4789));}_0xcb4789[_0x157369(0x250)]+=_0x57be70['length'];}if(!(_0x937729===_0x157369(0x224)||_0x937729==='undefined')&&!_0x16146c&&_0x937729!=='String'&&_0x937729!==_0x157369(0x25b)&&_0x937729!=='bigint'){var _0x14ad0a=_0xdcda9['props']||_0xcb4789[_0x157369(0x269)];if(this[_0x157369(0x21c)](_0x28d843)?(_0x1cc857=0x0,_0x28d843[_0x157369(0x206)](function(_0x795ddf){var _0x15dd02=_0x157369;if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789[_0x15dd02(0x2c6)]&&_0xcb4789[_0x15dd02(0x2b1)]&&_0xcb4789[_0x15dd02(0x250)]>_0xcb4789[_0x15dd02(0x233)]){_0x20bca3=!0x0;return;}_0x57be70['push'](_0x204121[_0x15dd02(0x23a)](_0x12e234,_0x28d843,_0x15dd02(0x1fd),_0x1cc857++,_0xcb4789,function(_0x498239){return function(){return _0x498239;};}(_0x795ddf)));})):this[_0x157369(0x2aa)](_0x28d843)&&_0x28d843['forEach'](function(_0x268d65,_0x26e6f7){var _0x462487=_0x157369;if(_0x41962f++,_0xcb4789[_0x462487(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;return;}if(!_0xcb4789['isExpressionToEvaluate']&&_0xcb4789['autoExpand']&&_0xcb4789[_0x462487(0x250)]>_0xcb4789[_0x462487(0x233)]){_0x20bca3=!0x0;return;}var _0x19aed5=_0x26e6f7[_0x462487(0x2b2)]();_0x19aed5[_0x462487(0x293)]>0x64&&(_0x19aed5=_0x19aed5['slice'](0x0,0x64)+_0x462487(0x288)),_0x57be70[_0x462487(0x258)](_0x204121[_0x462487(0x23a)](_0x12e234,_0x28d843,'Map',_0x19aed5,_0xcb4789,function(_0x23ffd6){return function(){return _0x23ffd6;};}(_0x268d65)));}),!_0x423502){try{for(_0x538ba4 in _0x28d843)if(!(_0x7c4fbd&&_0x1bfeb1['test'](_0x538ba4))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)){if(_0x41962f++,_0xcb4789[_0x157369(0x250)]++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789['autoExpandLimit']){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}catch{}if(_0x131e70[_0x157369(0x262)]=!0x0,_0x4c653a&&(_0x131e70[_0x157369(0x28f)]=!0x0),!_0x20bca3){var _0x5ae1db=[][_0x157369(0x266)](this[_0x157369(0x2d1)](_0x28d843))[_0x157369(0x266)](this[_0x157369(0x2c2)](_0x28d843));for(_0x1cc857=0x0,_0x4f181d=_0x5ae1db[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)if(_0x538ba4=_0x5ae1db[_0x1cc857],!(_0x7c4fbd&&_0x1bfeb1[_0x157369(0x29f)](_0x538ba4[_0x157369(0x2b2)]()))&&!this[_0x157369(0x294)](_0x28d843,_0x538ba4,_0xcb4789)&&!_0x131e70[_0x157369(0x2b4)+_0x538ba4[_0x157369(0x2b2)]()]){if(_0x41962f++,_0xcb4789['autoExpandPropertyCount']++,_0x41962f>_0x14ad0a){_0x20bca3=!0x0;break;}if(!_0xcb4789[_0x157369(0x2c6)]&&_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x250)]>_0xcb4789[_0x157369(0x233)]){_0x20bca3=!0x0;break;}_0x57be70[_0x157369(0x258)](_0x204121[_0x157369(0x1ef)](_0x12e234,_0x131e70,_0x28d843,_0x937729,_0x538ba4,_0xcb4789));}}}}}if(_0x5df2e5[_0x157369(0x24c)]=_0x937729,_0x5cb628?(_0x5df2e5[_0x157369(0x24e)]=_0x28d843['valueOf'](),this[_0x157369(0x26d)](_0x937729,_0x5df2e5,_0xcb4789,_0xdcda9)):_0x937729==='date'?_0x5df2e5[_0x157369(0x24e)]=this[_0x157369(0x221)][_0x157369(0x241)](_0x28d843):_0x937729===_0x157369(0x232)?_0x5df2e5[_0x157369(0x24e)]=_0x28d843[_0x157369(0x2b2)]():_0x937729==='RegExp'?_0x5df2e5[_0x157369(0x24e)]=this['_regExpToString'][_0x157369(0x241)](_0x28d843):_0x937729==='symbol'&&this[_0x157369(0x2a4)]?_0x5df2e5['value']=this[_0x157369(0x2a4)][_0x157369(0x1f7)]['toString'][_0x157369(0x241)](_0x28d843):!_0xcb4789['depth']&&!(_0x937729===_0x157369(0x224)||_0x937729===_0x157369(0x2ac))&&(delete _0x5df2e5[_0x157369(0x24e)],_0x5df2e5[_0x157369(0x225)]=!0x0),_0x20bca3&&(_0x5df2e5[_0x157369(0x2c3)]=!0x0),_0x642c19=_0xcb4789[_0x157369(0x256)]['current'],_0xcb4789[_0x157369(0x256)][_0x157369(0x218)]=_0x5df2e5,this[_0x157369(0x251)](_0x5df2e5,_0xcb4789),_0x57be70[_0x157369(0x293)]){for(_0x1cc857=0x0,_0x4f181d=_0x57be70[_0x157369(0x293)];_0x1cc857<_0x4f181d;_0x1cc857++)_0x57be70[_0x1cc857](_0x1cc857);}_0x12e234['length']&&(_0x5df2e5[_0x157369(0x269)]=_0x12e234);}catch(_0x4c6312){_0x525b94(_0x4c6312,_0x5df2e5,_0xcb4789);}return this['_additionalMetadata'](_0x28d843,_0x5df2e5),this['_treeNodePropertiesAfterFullValue'](_0x5df2e5,_0xcb4789),_0xcb4789[_0x157369(0x256)]['current']=_0x642c19,_0xcb4789[_0x157369(0x216)]--,_0xcb4789[_0x157369(0x2b1)]=_0x7c527c,_0xcb4789[_0x157369(0x2b1)]&&_0xcb4789[_0x157369(0x260)][_0x157369(0x299)](),_0x5df2e5;}['_getOwnPropertySymbols'](_0x98a2ac){var _0x5699af=_0x2623df;return Object[_0x5699af(0x29e)]?Object['getOwnPropertySymbols'](_0x98a2ac):[];}[_0x2623df(0x21c)](_0x1b06f2){var _0x45deb3=_0x2623df;return!!(_0x1b06f2&&_0x37d624[_0x45deb3(0x1fd)]&&this[_0x45deb3(0x243)](_0x1b06f2)===_0x45deb3(0x259)&&_0x1b06f2[_0x45deb3(0x206)]);}[_0x2623df(0x294)](_0x2a16f8,_0x2d32bc,_0xc52e10){var _0x1da585=_0x2623df;return _0xc52e10['noFunctions']?typeof _0x2a16f8[_0x2d32bc]==_0x1da585(0x1fa):!0x1;}[_0x2623df(0x2d3)](_0x3c584c){var _0x4a2b0b=_0x2623df,_0x116724='';return _0x116724=typeof _0x3c584c,_0x116724===_0x4a2b0b(0x1ff)?this[_0x4a2b0b(0x243)](_0x3c584c)==='[object\\x20Array]'?_0x116724=_0x4a2b0b(0x2df):this['_objectToString'](_0x3c584c)===_0x4a2b0b(0x2dc)?_0x116724='date':this[_0x4a2b0b(0x243)](_0x3c584c)===_0x4a2b0b(0x2d2)?_0x116724=_0x4a2b0b(0x232):_0x3c584c===null?_0x116724=_0x4a2b0b(0x224):_0x3c584c[_0x4a2b0b(0x20d)]&&(_0x116724=_0x3c584c[_0x4a2b0b(0x20d)][_0x4a2b0b(0x261)]||_0x116724):_0x116724===_0x4a2b0b(0x2ac)&&this[_0x4a2b0b(0x245)]&&_0x3c584c instanceof this[_0x4a2b0b(0x245)]&&(_0x116724=_0x4a2b0b(0x217)),_0x116724;}[_0x2623df(0x243)](_0xc200d5){var _0x4e9e8b=_0x2623df;return Object[_0x4e9e8b(0x1f7)][_0x4e9e8b(0x2b2)]['call'](_0xc200d5);}[_0x2623df(0x27d)](_0x529a22){var _0x5c1d83=_0x2623df;return _0x529a22===_0x5c1d83(0x234)||_0x529a22===_0x5c1d83(0x28a)||_0x529a22===_0x5c1d83(0x246);}[_0x2623df(0x2db)](_0x138149){var _0x4a144e=_0x2623df;return _0x138149===_0x4a144e(0x284)||_0x138149===_0x4a144e(0x21e)||_0x138149===_0x4a144e(0x201);}[_0x2623df(0x23a)](_0x135627,_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524){var _0x2e6ca4=this;return function(_0x3cef10){var _0xcb4898=_0x1765,_0x47c646=_0x375c3c[_0xcb4898(0x256)]['current'],_0x4083d7=_0x375c3c['node']['index'],_0x5280a8=_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)];_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x47c646,_0x375c3c['node'][_0xcb4898(0x28c)]=typeof _0x11f9fb=='number'?_0x11f9fb:_0x3cef10,_0x135627[_0xcb4898(0x258)](_0x2e6ca4['_property'](_0x29b532,_0x21cfc1,_0x11f9fb,_0x375c3c,_0x438524)),_0x375c3c[_0xcb4898(0x256)][_0xcb4898(0x2ca)]=_0x5280a8,_0x375c3c[_0xcb4898(0x256)]['index']=_0x4083d7;};}[_0x2623df(0x1ef)](_0x5f50f6,_0x19f62d,_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61){var _0x1b819d=_0x2623df,_0x2f2a63=this;return _0x19f62d[_0x1b819d(0x2b4)+_0x153ede[_0x1b819d(0x2b2)]()]=!0x0,function(_0x52cd65){var _0xc2af59=_0x1b819d,_0xf1884d=_0x195a04['node'][_0xc2af59(0x218)],_0x1f5c05=_0x195a04['node'][_0xc2af59(0x28c)],_0x20b47d=_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)];_0x195a04[_0xc2af59(0x256)]['parent']=_0xf1884d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x52cd65,_0x5f50f6[_0xc2af59(0x258)](_0x2f2a63[_0xc2af59(0x207)](_0x22009e,_0x1ee267,_0x153ede,_0x195a04,_0x145f61)),_0x195a04[_0xc2af59(0x256)][_0xc2af59(0x2ca)]=_0x20b47d,_0x195a04['node'][_0xc2af59(0x28c)]=_0x1f5c05;};}['_property'](_0x29f600,_0x5a186a,_0x18094d,_0x4c36b3,_0x5d29b6){var _0x855d23=_0x2623df,_0x537e61=this;_0x5d29b6||(_0x5d29b6=function(_0x534676,_0x2f0f3c){return _0x534676[_0x2f0f3c];});var _0x3dad2b=_0x18094d['toString'](),_0x196ba1=_0x4c36b3[_0x855d23(0x2c8)]||{},_0x3e68f2=_0x4c36b3['depth'],_0x4ae156=_0x4c36b3[_0x855d23(0x2c6)];try{var _0x46f2e7=this[_0x855d23(0x2aa)](_0x29f600),_0x21c63a=_0x3dad2b;_0x46f2e7&&_0x21c63a[0x0]==='\\x27'&&(_0x21c63a=_0x21c63a['substr'](0x1,_0x21c63a[_0x855d23(0x293)]-0x2));var _0x51b35c=_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1['_p_'+_0x21c63a];_0x51b35c&&(_0x4c36b3[_0x855d23(0x230)]=_0x4c36b3[_0x855d23(0x230)]+0x1),_0x4c36b3['isExpressionToEvaluate']=!!_0x51b35c;var _0x4102a5=typeof _0x18094d==_0x855d23(0x28e),_0x10aa24={'name':_0x4102a5||_0x46f2e7?_0x3dad2b:this[_0x855d23(0x1f6)](_0x3dad2b)};if(_0x4102a5&&(_0x10aa24['symbol']=!0x0),!(_0x5a186a===_0x855d23(0x2df)||_0x5a186a==='Error')){var _0x4f0a95=this['_getOwnPropertyDescriptor'](_0x29f600,_0x18094d);if(_0x4f0a95&&(_0x4f0a95[_0x855d23(0x2be)]&&(_0x10aa24['setter']=!0x0),_0x4f0a95['get']&&!_0x51b35c&&!_0x4c36b3[_0x855d23(0x26e)]))return _0x10aa24[_0x855d23(0x2a8)]=!0x0,this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x8e1bdc;try{_0x8e1bdc=_0x5d29b6(_0x29f600,_0x18094d);}catch(_0x343ade){return _0x10aa24={'name':_0x3dad2b,'type':_0x855d23(0x27e),'error':_0x343ade[_0x855d23(0x2ce)]},this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3),_0x10aa24;}var _0x4c95a3=this[_0x855d23(0x2d3)](_0x8e1bdc),_0x39d7f9=this[_0x855d23(0x27d)](_0x4c95a3);if(_0x10aa24[_0x855d23(0x24c)]=_0x4c95a3,_0x39d7f9)this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x294840=_0x855d23;_0x10aa24['value']=_0x8e1bdc[_0x294840(0x1f2)](),!_0x51b35c&&_0x537e61['_capIfString'](_0x4c95a3,_0x10aa24,_0x4c36b3,{});});else{var _0x308b70=_0x4c36b3[_0x855d23(0x2b1)]&&_0x4c36b3[_0x855d23(0x216)]<_0x4c36b3[_0x855d23(0x240)]&&_0x4c36b3['autoExpandPreviousObjects'][_0x855d23(0x2a0)](_0x8e1bdc)<0x0&&_0x4c95a3!==_0x855d23(0x1fa)&&_0x4c36b3[_0x855d23(0x250)]<_0x4c36b3[_0x855d23(0x233)];_0x308b70||_0x4c36b3['level']<_0x3e68f2||_0x51b35c?(this[_0x855d23(0x20a)](_0x10aa24,_0x8e1bdc,_0x4c36b3,_0x51b35c||{}),this[_0x855d23(0x213)](_0x8e1bdc,_0x10aa24)):this[_0x855d23(0x248)](_0x10aa24,_0x4c36b3,_0x8e1bdc,function(){var _0x40e642=_0x855d23;_0x4c95a3===_0x40e642(0x224)||_0x4c95a3===_0x40e642(0x2ac)||(delete _0x10aa24[_0x40e642(0x24e)],_0x10aa24[_0x40e642(0x225)]=!0x0);});}return _0x10aa24;}finally{_0x4c36b3[_0x855d23(0x2c8)]=_0x196ba1,_0x4c36b3[_0x855d23(0x230)]=_0x3e68f2,_0x4c36b3[_0x855d23(0x2c6)]=_0x4ae156;}}[_0x2623df(0x26d)](_0x2f7d2a,_0x3e2111,_0x4f06a4,_0x165e3c){var _0x1a3fe5=_0x2623df,_0x4cb626=_0x165e3c[_0x1a3fe5(0x2c4)]||_0x4f06a4[_0x1a3fe5(0x2c4)];if((_0x2f7d2a===_0x1a3fe5(0x28a)||_0x2f7d2a==='String')&&_0x3e2111['value']){let _0x39d5f7=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x293)];_0x4f06a4['allStrLength']+=_0x39d5f7,_0x4f06a4[_0x1a3fe5(0x214)]>_0x4f06a4[_0x1a3fe5(0x2c9)]?(_0x3e2111[_0x1a3fe5(0x225)]='',delete _0x3e2111['value']):_0x39d5f7>_0x4cb626&&(_0x3e2111['capped']=_0x3e2111[_0x1a3fe5(0x24e)][_0x1a3fe5(0x219)](0x0,_0x4cb626),delete _0x3e2111[_0x1a3fe5(0x24e)]);}}['_isMap'](_0x34931b){var _0x3272ed=_0x2623df;return!!(_0x34931b&&_0x37d624[_0x3272ed(0x247)]&&this[_0x3272ed(0x243)](_0x34931b)===_0x3272ed(0x2d4)&&_0x34931b['forEach']);}[_0x2623df(0x1f6)](_0x47a998){var _0x54c731=_0x2623df;if(_0x47a998[_0x54c731(0x263)](/^\\d+$/))return _0x47a998;var _0x13c78f;try{_0x13c78f=JSON['stringify'](''+_0x47a998);}catch{_0x13c78f='\\x22'+this[_0x54c731(0x243)](_0x47a998)+'\\x22';}return _0x13c78f[_0x54c731(0x263)](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x13c78f=_0x13c78f['substr'](0x1,_0x13c78f['length']-0x2):_0x13c78f=_0x13c78f['replace'](/'/g,'\\x5c\\x27')[_0x54c731(0x278)](/\\\\\"/g,'\\x22')['replace'](/(^\"|\"$)/g,'\\x27'),_0x13c78f;}[_0x2623df(0x248)](_0x450bd2,_0x540e99,_0x3a738d,_0x1d5e7b){var _0xbf57c1=_0x2623df;this[_0xbf57c1(0x251)](_0x450bd2,_0x540e99),_0x1d5e7b&&_0x1d5e7b(),this[_0xbf57c1(0x213)](_0x3a738d,_0x450bd2),this[_0xbf57c1(0x2b5)](_0x450bd2,_0x540e99);}['_treeNodePropertiesBeforeFullValue'](_0x288bd4,_0x443233){var _0x15c053=_0x2623df;this[_0x15c053(0x2ab)](_0x288bd4,_0x443233),this[_0x15c053(0x22b)](_0x288bd4,_0x443233),this['_setNodeExpressionPath'](_0x288bd4,_0x443233),this[_0x15c053(0x275)](_0x288bd4,_0x443233);}[_0x2623df(0x2ab)](_0x33355c,_0x4c1413){}['_setNodeQueryPath'](_0x5e28c0,_0x37c1ca){}['_setNodeLabel'](_0xee885f,_0x115998){}[_0x2623df(0x235)](_0x55a938){var _0x1aa6f4=_0x2623df;return _0x55a938===this[_0x1aa6f4(0x270)];}['_treeNodePropertiesAfterFullValue'](_0x10edfb,_0x29f29a){var _0x206d02=_0x2623df;this[_0x206d02(0x1ed)](_0x10edfb,_0x29f29a),this['_setNodeExpandableState'](_0x10edfb),_0x29f29a['sortProps']&&this[_0x206d02(0x2cb)](_0x10edfb),this[_0x206d02(0x29c)](_0x10edfb,_0x29f29a),this[_0x206d02(0x236)](_0x10edfb,_0x29f29a),this[_0x206d02(0x209)](_0x10edfb);}[_0x2623df(0x213)](_0x2ae38c,_0x6a4e65){var _0x3180df=_0x2623df;let _0x39ab34;try{_0x37d624[_0x3180df(0x23c)]&&(_0x39ab34=_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)],_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=function(){}),_0x2ae38c&&typeof _0x2ae38c[_0x3180df(0x293)]==_0x3180df(0x246)&&(_0x6a4e65[_0x3180df(0x293)]=_0x2ae38c[_0x3180df(0x293)]);}catch{}finally{_0x39ab34&&(_0x37d624[_0x3180df(0x23c)][_0x3180df(0x223)]=_0x39ab34);}if(_0x6a4e65[_0x3180df(0x24c)]==='number'||_0x6a4e65[_0x3180df(0x24c)]==='Number'){if(isNaN(_0x6a4e65['value']))_0x6a4e65[_0x3180df(0x2bc)]=!0x0,delete _0x6a4e65['value'];else switch(_0x6a4e65[_0x3180df(0x24e)]){case Number[_0x3180df(0x23d)]:_0x6a4e65[_0x3180df(0x2dd)]=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case Number['NEGATIVE_INFINITY']:_0x6a4e65['negativeInfinity']=!0x0,delete _0x6a4e65[_0x3180df(0x24e)];break;case 0x0:this['_isNegativeZero'](_0x6a4e65[_0x3180df(0x24e)])&&(_0x6a4e65[_0x3180df(0x1fb)]=!0x0);break;}}else _0x6a4e65[_0x3180df(0x24c)]===_0x3180df(0x1fa)&&typeof _0x2ae38c[_0x3180df(0x261)]==_0x3180df(0x28a)&&_0x2ae38c[_0x3180df(0x261)]&&_0x6a4e65[_0x3180df(0x261)]&&_0x2ae38c[_0x3180df(0x261)]!==_0x6a4e65[_0x3180df(0x261)]&&(_0x6a4e65[_0x3180df(0x21b)]=_0x2ae38c[_0x3180df(0x261)]);}['_isNegativeZero'](_0x2fa98d){var _0x8c6a89=_0x2623df;return 0x1/_0x2fa98d===Number[_0x8c6a89(0x289)];}[_0x2623df(0x2cb)](_0x45f240){var _0x27ea15=_0x2623df;!_0x45f240[_0x27ea15(0x269)]||!_0x45f240['props'][_0x27ea15(0x293)]||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x2df)||_0x45f240[_0x27ea15(0x24c)]==='Map'||_0x45f240[_0x27ea15(0x24c)]===_0x27ea15(0x1fd)||_0x45f240[_0x27ea15(0x269)][_0x27ea15(0x296)](function(_0x587f85,_0x25310e){var _0x27429f=_0x27ea15,_0x22eb8f=_0x587f85['name'][_0x27429f(0x2a7)](),_0x9f76b=_0x25310e[_0x27429f(0x261)][_0x27429f(0x2a7)]();return _0x22eb8f<_0x9f76b?-0x1:_0x22eb8f>_0x9f76b?0x1:0x0;});}[_0x2623df(0x29c)](_0x6aec3b,_0x4e7839){var _0x5e1614=_0x2623df;if(!(_0x4e7839[_0x5e1614(0x1f0)]||!_0x6aec3b[_0x5e1614(0x269)]||!_0x6aec3b['props'][_0x5e1614(0x293)])){for(var _0x4ae259=[],_0x2bc8c5=[],_0x2c5219=0x0,_0x4f1485=_0x6aec3b[_0x5e1614(0x269)]['length'];_0x2c5219<_0x4f1485;_0x2c5219++){var _0x29e8fa=_0x6aec3b[_0x5e1614(0x269)][_0x2c5219];_0x29e8fa['type']===_0x5e1614(0x1fa)?_0x4ae259[_0x5e1614(0x258)](_0x29e8fa):_0x2bc8c5[_0x5e1614(0x258)](_0x29e8fa);}if(!(!_0x2bc8c5[_0x5e1614(0x293)]||_0x4ae259[_0x5e1614(0x293)]<=0x1)){_0x6aec3b[_0x5e1614(0x269)]=_0x2bc8c5;var _0x28eeff={'functionsNode':!0x0,'props':_0x4ae259};this['_setNodeId'](_0x28eeff,_0x4e7839),this[_0x5e1614(0x1ed)](_0x28eeff,_0x4e7839),this[_0x5e1614(0x229)](_0x28eeff),this[_0x5e1614(0x275)](_0x28eeff,_0x4e7839),_0x28eeff['id']+='\\x20f',_0x6aec3b['props']['unshift'](_0x28eeff);}}}[_0x2623df(0x236)](_0x8d09ca,_0x48c45f){}['_setNodeExpandableState'](_0x2c3113){}['_isArray'](_0x4d0b46){var _0x540da5=_0x2623df;return Array['isArray'](_0x4d0b46)||typeof _0x4d0b46==_0x540da5(0x1ff)&&this[_0x540da5(0x243)](_0x4d0b46)===_0x540da5(0x1fc);}['_setNodePermissions'](_0x51ec7c,_0x53542f){}[_0x2623df(0x209)](_0x47913e){var _0x503d84=_0x2623df;delete _0x47913e['_hasSymbolPropertyOnItsPath'],delete _0x47913e['_hasSetOnItsPath'],delete _0x47913e[_0x503d84(0x257)];}[_0x2623df(0x290)](_0x3e77fb,_0x7533ff){}}let _0x31638a=new _0x284754(),_0xdce57e={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x43e197={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x6a9287(_0x531b46,_0x4bc71a,_0x197aa8,_0x42857c,_0x5321fe,_0x10f17e){var _0x471a36=_0x2623df;let _0x101e55,_0x1a2226;try{_0x1a2226=_0x2d8ac9(),_0x101e55=_0x23f5ef[_0x4bc71a],!_0x101e55||_0x1a2226-_0x101e55['ts']>0x1f4&&_0x101e55[_0x471a36(0x227)]&&_0x101e55[_0x471a36(0x27a)]/_0x101e55[_0x471a36(0x227)]<0x64?(_0x23f5ef[_0x4bc71a]=_0x101e55={'count':0x0,'time':0x0,'ts':_0x1a2226},_0x23f5ef[_0x471a36(0x2c0)]={}):_0x1a2226-_0x23f5ef[_0x471a36(0x2c0)]['ts']>0x32&&_0x23f5ef[_0x471a36(0x2c0)]['count']&&_0x23f5ef['hits'][_0x471a36(0x27a)]/_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]<0x64&&(_0x23f5ef['hits']={});let _0x11e3f6=[],_0x5697d2=_0x101e55['reduceLimits']||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x22a)]?_0x43e197:_0xdce57e,_0x405b05=_0x3da01f=>{var _0x3c6546=_0x471a36;let _0x26cba4={};return _0x26cba4['props']=_0x3da01f[_0x3c6546(0x269)],_0x26cba4[_0x3c6546(0x285)]=_0x3da01f[_0x3c6546(0x285)],_0x26cba4[_0x3c6546(0x2c4)]=_0x3da01f[_0x3c6546(0x2c4)],_0x26cba4[_0x3c6546(0x2c9)]=_0x3da01f['totalStrLength'],_0x26cba4[_0x3c6546(0x233)]=_0x3da01f[_0x3c6546(0x233)],_0x26cba4[_0x3c6546(0x240)]=_0x3da01f[_0x3c6546(0x240)],_0x26cba4['sortProps']=!0x1,_0x26cba4[_0x3c6546(0x1f0)]=!_0x425a99,_0x26cba4[_0x3c6546(0x230)]=0x1,_0x26cba4[_0x3c6546(0x216)]=0x0,_0x26cba4[_0x3c6546(0x238)]='root_exp_id',_0x26cba4[_0x3c6546(0x1ec)]=_0x3c6546(0x283),_0x26cba4[_0x3c6546(0x2b1)]=!0x0,_0x26cba4[_0x3c6546(0x260)]=[],_0x26cba4[_0x3c6546(0x250)]=0x0,_0x26cba4[_0x3c6546(0x26e)]=!0x0,_0x26cba4[_0x3c6546(0x214)]=0x0,_0x26cba4['node']={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x26cba4;};for(var _0x23e276=0x0;_0x23e276<_0x5321fe[_0x471a36(0x293)];_0x23e276++)_0x11e3f6[_0x471a36(0x258)](_0x31638a[_0x471a36(0x20a)]({'timeNode':_0x531b46===_0x471a36(0x27a)||void 0x0},_0x5321fe[_0x23e276],_0x405b05(_0x5697d2),{}));if(_0x531b46==='trace'||_0x531b46===_0x471a36(0x223)){let _0x56cb28=Error['stackTraceLimit'];try{Error[_0x471a36(0x281)]=0x1/0x0,_0x11e3f6['push'](_0x31638a[_0x471a36(0x20a)]({'stackNode':!0x0},new Error()[_0x471a36(0x1f3)],_0x405b05(_0x5697d2),{'strLength':0x1/0x0}));}finally{Error[_0x471a36(0x281)]=_0x56cb28;}}return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':_0x11e3f6,'id':_0x4bc71a,'context':_0x10f17e}]};}catch(_0x141361){return{'method':_0x471a36(0x242),'version':_0x2ae763,'args':[{'ts':_0x197aa8,'session':_0x42857c,'args':[{'type':'unknown','error':_0x141361&&_0x141361[_0x471a36(0x2ce)]}],'id':_0x4bc71a,'context':_0x10f17e}]};}finally{try{if(_0x101e55&&_0x1a2226){let _0x53d3d0=_0x2d8ac9();_0x101e55['count']++,_0x101e55[_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x101e55['ts']=_0x53d3d0,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x227)]++,_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]+=_0x1be918(_0x1a2226,_0x53d3d0),_0x23f5ef[_0x471a36(0x2c0)]['ts']=_0x53d3d0,(_0x101e55['count']>0x32||_0x101e55['time']>0x64)&&(_0x101e55[_0x471a36(0x22a)]=!0x0),(_0x23f5ef['hits'][_0x471a36(0x227)]>0x3e8||_0x23f5ef[_0x471a36(0x2c0)][_0x471a36(0x27a)]>0x12c)&&(_0x23f5ef['hits'][_0x471a36(0x22a)]=!0x0);}}catch{}}}return _0x6a9287;}((_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x598d24,_0x5d532f,_0x146311,_0x5c841c,_0x435457,_0x4af095)=>{var _0x178280=_0x52c85b;if(_0x5c57ad[_0x178280(0x273)])return _0x5c57ad[_0x178280(0x273)];if(!H(_0x5c57ad,_0x146311,_0x3deb3c))return _0x5c57ad[_0x178280(0x273)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x5c57ad['_console_ninja'];let _0x348138=B(_0x5c57ad),_0x4526fb=_0x348138[_0x178280(0x26b)],_0x4d4ffb=_0x348138[_0x178280(0x282)],_0x383918=_0x348138[_0x178280(0x2cc)],_0x42c1e2={'hits':{},'ts':{}},_0x5f1ccb=X(_0x5c57ad,_0x5c841c,_0x42c1e2,_0x598d24),_0xd940d5=_0x4e24ec=>{_0x42c1e2['ts'][_0x4e24ec]=_0x4d4ffb();},_0xea84f2=(_0x1e4f3c,_0x4cf578)=>{var _0x1bcce6=_0x178280;let _0x930c06=_0x42c1e2['ts'][_0x4cf578];if(delete _0x42c1e2['ts'][_0x4cf578],_0x930c06){let _0x1303d4=_0x4526fb(_0x930c06,_0x4d4ffb());_0xde4346(_0x5f1ccb(_0x1bcce6(0x27a),_0x1e4f3c,_0x383918(),_0x42be99,[_0x1303d4],_0x4cf578));}},_0x4f0396=_0x430740=>{var _0x16daef=_0x178280,_0x326829;return _0x3deb3c===_0x16daef(0x22f)&&_0x5c57ad[_0x16daef(0x2bf)]&&((_0x326829=_0x430740==null?void 0x0:_0x430740[_0x16daef(0x264)])==null?void 0x0:_0x326829[_0x16daef(0x293)])&&(_0x430740[_0x16daef(0x264)][0x0]['origin']=_0x5c57ad[_0x16daef(0x2bf)]),_0x430740;};_0x5c57ad['_console_ninja']={'consoleLog':(_0x389383,_0x33070f)=>{var _0xcc2784=_0x178280;_0x5c57ad[_0xcc2784(0x23c)]['log']['name']!=='disabledLog'&&_0xde4346(_0x5f1ccb(_0xcc2784(0x242),_0x389383,_0x383918(),_0x42be99,_0x33070f));},'consoleTrace':(_0x5a7462,_0x4ad9a0)=>{var _0x34222f=_0x178280,_0x4e5f09,_0x38cb70;_0x5c57ad['console']['log'][_0x34222f(0x261)]!==_0x34222f(0x286)&&((_0x38cb70=(_0x4e5f09=_0x5c57ad['process'])==null?void 0x0:_0x4e5f09[_0x34222f(0x249)])!=null&&_0x38cb70[_0x34222f(0x256)]&&(_0x5c57ad['_ninjaIgnoreNextError']=!0x0),_0xde4346(_0x4f0396(_0x5f1ccb(_0x34222f(0x239),_0x5a7462,_0x383918(),_0x42be99,_0x4ad9a0))));},'consoleError':(_0x56c660,_0x124401)=>{var _0x5a4dbf=_0x178280;_0x5c57ad[_0x5a4dbf(0x267)]=!0x0,_0xde4346(_0x4f0396(_0x5f1ccb(_0x5a4dbf(0x223),_0x56c660,_0x383918(),_0x42be99,_0x124401)));},'consoleTime':_0x2b72bf=>{_0xd940d5(_0x2b72bf);},'consoleTimeEnd':(_0xf42d7f,_0x231d2e)=>{_0xea84f2(_0x231d2e,_0xf42d7f);},'autoLog':(_0x34fc42,_0x1593ab)=>{_0xde4346(_0x5f1ccb('log',_0x1593ab,_0x383918(),_0x42be99,[_0x34fc42]));},'autoLogMany':(_0x1161f8,_0x1f890f)=>{var _0x432033=_0x178280;_0xde4346(_0x5f1ccb(_0x432033(0x242),_0x1161f8,_0x383918(),_0x42be99,_0x1f890f));},'autoTrace':(_0x1abd02,_0x1a1339)=>{var _0x23dceb=_0x178280;_0xde4346(_0x4f0396(_0x5f1ccb(_0x23dceb(0x239),_0x1a1339,_0x383918(),_0x42be99,[_0x1abd02])));},'autoTraceMany':(_0x5662b6,_0x1b0d24)=>{_0xde4346(_0x4f0396(_0x5f1ccb('trace',_0x5662b6,_0x383918(),_0x42be99,_0x1b0d24)));},'autoTime':(_0x4a4e0b,_0x1660f1,_0xecbc72)=>{_0xd940d5(_0xecbc72);},'autoTimeEnd':(_0x391986,_0x4e8b70,_0x41f58e)=>{_0xea84f2(_0x4e8b70,_0x41f58e);},'coverage':_0x5ae8d0=>{var _0x294a69=_0x178280;_0xde4346({'method':_0x294a69(0x203),'version':_0x598d24,'args':[{'id':_0x5ae8d0}]});}};let _0xde4346=q(_0x5c57ad,_0x1873d7,_0x288199,_0xbac8a7,_0x3deb3c,_0x435457,_0x4af095),_0x42be99=_0x5c57ad[_0x178280(0x29d)];return _0x5c57ad[_0x178280(0x273)];})(globalThis,_0x52c85b(0x28b),_0x52c85b(0x28d),_0x52c85b(0x27b),_0x52c85b(0x2b8),'1.0.0',_0x52c85b(0x212),[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],_0x52c85b(0x265),_0x52c85b(0x24f),'1');")}catch(e){}}function c(e,...t){try{r().consoleLog(e,t)}catch(e){}return t}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>X,initializeAnalytics:()=>G,isSupported:()=>V,logEvent:()=>Z,setAnalyticsCollectionEnabled:()=>K,setConsent:()=>J,setCurrentScreen:()=>W,setDefaultEventParameters:()=>q,setUserId:()=>Y,setUserProperties:()=>$,settings:()=>F});var x=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),i=a("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),s=a("./node_modules/@firebase/util/dist/index.esm2017.js"),n=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js");a("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const o="analytics",_="firebase_id",r="origin",c=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",h="https://www.googletagmanager.com/gtag/js",l=new i.Logger("@firebase/analytics"),f={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},u=new s.ErrorFactory("analytics","Analytics",f);function b(e){if(!e.startsWith(h)){const t=u.create("invalid-gtag-resource",{gtagURL:e});return l.warn(t.message),""}return e}function p(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}function g(e,t){const a=function(e,t){let a;return window.trustedTypes&&(a=window.trustedTypes.createPolicy(e,t)),a}("firebase-js-sdk-policy",{createScriptURL:b}),x=document.createElement("script"),i=`${h}?l=${e}&id=${t}`;x.src=a?null==a?void 0:a.createScriptURL(i):i,x.async=!0,document.head.appendChild(x)}function m(e,t,a,x){return async function(i,...s){try{if("event"===i){const[x,i]=s;await async function(e,t,a,x,i){try{let s=[];if(i&&i.send_to){let e=i.send_to;Array.isArray(e)||(e=[e]);const x=await p(a);for(const a of e){const e=x.find((e=>e.measurementId===a)),i=e&&t[e.appId];if(!i){s=[];break}s.push(i)}}0===s.length&&(s=Object.values(t)),await Promise.all(s),e("event",x,i||{})}catch(e){l.error(e)}}(e,t,a,x,i)}else if("config"===i){const[i,n]=s;await async function(e,t,a,x,i,s){const n=x[i];try{if(n)await t[n];else{const e=(await p(a)).find((e=>e.measurementId===i));e&&await t[e.appId]}}catch(e){l.error(e)}e("config",i,s)}(e,t,a,x,i,n)}else if("consent"===i){const[t]=s;e("consent","update",t)}else if("get"===i){const[t,a,x]=s;e("get",t,a,x)}else if("set"===i){const[t]=s;e("set",t)}else e(i,...s)}catch(e){l.error(e)}}}const v=30;const w=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function S(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function y(e,t=w,a){const{appId:x,apiKey:i,measurementId:s}=e.options;if(!x)throw u.create("no-app-id");if(!i){if(s)return{measurementId:s,appId:x};throw u.create("no-api-key")}const n=t.getThrottleMetadata(x)||{backoffCount:0,throttleEndTimeMillis:Date.now()},o=new E;return setTimeout((async()=>{o.abort()}),void 0!==a?a:c),I({appId:x,apiKey:i,measurementId:s},n,o,t)}async function I(e,{throttleEndTimeMillis:t,backoffCount:a},x,i=w){var n;const{appId:o,measurementId:_}=e;try{await function(e,t){return new Promise(((a,x)=>{const i=Math.max(t-Date.now(),0),s=setTimeout(a,i);e.addEventListener((()=>{clearTimeout(s),x(u.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(x,t)}catch(e){if(_)return l.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${_} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:o,measurementId:_};throw e}try{const t=await async function(e){var t;const{appId:a,apiKey:x}=e,i={method:"GET",headers:S(x)},s=d.replace("{app-id}",a),n=await fetch(s,i);if(200!==n.status&&304!==n.status){let e="";try{const a=await n.json();(null===(t=a.error)||void 0===t?void 0:t.message)&&(e=a.error.message)}catch(e){}throw u.create("config-fetch-failed",{httpStatus:n.status,responseMessage:e})}return n.json()}(e);return i.deleteThrottleMetadata(o),t}catch(t){const r=t;if(!function(e){if(!(e instanceof s.FirebaseError&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(r)){if(i.deleteThrottleMetadata(o),_)return l.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${_} provided in the "measurementId" field in the local Firebase config. [${null==r?void 0:r.message}]`),{appId:o,measurementId:_};throw t}const c=503===Number(null===(n=null==r?void 0:r.customData)||void 0===n?void 0:n.httpStatus)?(0,s.calculateBackoffMillis)(a,i.intervalMillis,v):(0,s.calculateBackoffMillis)(a,i.intervalMillis),d={throttleEndTimeMillis:Date.now()+c,backoffCount:a+1};return i.setThrottleMetadata(o,d),l.debug(`Calling attemptFetch again in ${c} millis`),I(e,d,x,i)}}class E{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let T,P;function L(e){P=e}function A(e){T=e}async function C(e,t,a,x,i,n,o){var c;const d=y(e);d.then((t=>{a[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&l.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>l.error(e))),t.push(d);const f=async function(){if(!(0,s.isIndexedDBAvailable)())return l.warn(u.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,s.validateIndexedDBOpenable)()}catch(e){return l.warn(u.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?x.getId():void 0)),[b,p]=await Promise.all([d,f]);(function(e){const t=window.document.getElementsByTagName("script");for(const a of Object.values(t))if(a.src&&a.src.includes(h)&&a.src.includes(e))return a;return null})(n)||g(n,b.measurementId),P&&(i("consent","default",P),L(void 0)),i("js",new Date);const m=null!==(c=null==o?void 0:o.config)&&void 0!==c?c:{};return m[r]="firebase",m.update=!0,null!=p&&(m[_]=p),i("config",b.measurementId,m),T&&(i("set",T),A(void 0)),b.measurementId}class k{constructor(e){this.app=e}_delete(){return delete D[this.app.options.appId],Promise.resolve()}}let D={},N=[];const B={};let O,z,M="dataLayer",j="gtag",R=!1;function F(e){if(R)throw u.create("already-initialized");e.dataLayerName&&(M=e.dataLayerName),e.gtagName&&(j=e.gtagName)}function U(e,t,a){!function(){const e=[];if((0,s.isBrowserExtension)()&&e.push("This is a browser extension environment."),(0,s.areCookiesEnabled)()||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),a=u.create("invalid-analytics-context",{errorInfo:t});l.warn(a.message)}}();const x=e.options.appId;if(!x)throw u.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw u.create("no-api-key");l.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=D[x])throw u.create("already-exists",{id:x});if(!R){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(M);const{wrappedGtag:e,gtagCore:t}=function(e,t,a,x,i){let s=function(...e){window[x].push(arguments)};return window[i]&&"function"==typeof window[i]&&(s=window[i]),window[i]=m(s,e,t,a),{gtagCore:s,wrappedGtag:window[i]}}(D,N,B,M,j);z=e,O=t,R=!0}D[x]=C(e,N,B,t,O,M,a);return new k(e)}function H(e=(0,x.getApp)()){e=(0,s.getModularInstance)(e);const t=(0,x._getProvider)(e,o);return t.isInitialized()?t.getImmediate():G(e)}function G(e,t={}){const a=(0,x._getProvider)(e,o);if(a.isInitialized()){const e=a.getImmediate();if((0,s.deepEqual)(t,a.getOptions()))return e;throw u.create("already-initialized")}return a.initialize({options:t})}async function V(){if((0,s.isBrowserExtension)())return!1;if(!(0,s.areCookiesEnabled)())return!1;if(!(0,s.isIndexedDBAvailable)())return!1;try{return await(0,s.validateIndexedDBOpenable)()}catch(e){return!1}}function W(e,t,a){e=(0,s.getModularInstance)(e),async function(e,t,a,x){if(x&&x.global)return e("set",{screen_name:a}),Promise.resolve();e("config",await t,{update:!0,screen_name:a})}(z,D[e.app.options.appId],t,a).catch((e=>l.error(e)))}async function X(e){return e=(0,s.getModularInstance)(e),async function(e,t){const a=await t;return new Promise(((t,x)=>{e("get",a,"client_id",(e=>{e||x(u.create("no-client-id")),t(e)}))}))}(z,D[e.app.options.appId])}function Y(e,t,a){e=(0,s.getModularInstance)(e),async function(e,t,a,x){if(x&&x.global)return e("set",{user_id:a}),Promise.resolve();e("config",await t,{update:!0,user_id:a})}(z,D[e.app.options.appId],t,a).catch((e=>l.error(e)))}function $(e,t,a){e=(0,s.getModularInstance)(e),async function(e,t,a,x){if(x&&x.global){const t={};for(const e of Object.keys(a))t[`user_properties.${e}`]=a[e];return e("set",t),Promise.resolve()}e("config",await t,{update:!0,user_properties:a})}(z,D[e.app.options.appId],t,a).catch((e=>l.error(e)))}function K(e,t){e=(0,s.getModularInstance)(e),async function(e,t){const a=await e;window[`ga-disable-${a}`]=!t}(D[e.app.options.appId],t).catch((e=>l.error(e)))}function q(e){z?z("set",e):A(e)}function Z(e,t,a,x){e=(0,s.getModularInstance)(e),async function(e,t,a,x,i){if(i&&i.global)e("event",a,x);else{const i=await t;e("event",a,Object.assign(Object.assign({},x),{send_to:i}))}}(z,D[e.app.options.appId],t,a,x).catch((e=>l.error(e)))}function J(e){z?z("consent","update",e):L(e)}const Q="@firebase/analytics",ee="0.10.0";(0,x._registerComponent)(new n.Component(o,((e,{options:t})=>U(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),(0,x._registerComponent)(new n.Component("analytics-internal",(function(e){try{const t=e.getProvider(o).getImmediate();return{logEvent:(e,a,x)=>Z(t,e,a,x)}}catch(e){throw u.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),(0,x.registerVersion)(Q,ee),(0,x.registerVersion)(Q,ee,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{FirebaseError:()=>s.FirebaseError,SDK_VERSION:()=>$,_DEFAULT_ENTRY_NAME:()=>O,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>M,_clearComponents:()=>V,_components:()=>j,_getProvider:()=>H,_registerComponent:()=>U,_removeServiceInstance:()=>G,deleteApp:()=>J,getApp:()=>q,getApps:()=>Z,initializeApp:()=>K,onLog:()=>ee,registerVersion:()=>Q,setLogLevel:()=>te});var x=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),i=a("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),s=a("./node_modules/@firebase/util/dist/index.esm2017.js"),n=a("./node_modules/idb/build/index.js");class o{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const _="@firebase/app",r="0.9.15",c=new i.Logger("@firebase/app"),d="@firebase/app-compat",h="@firebase/analytics-compat",l="@firebase/analytics",f="@firebase/app-check-compat",u="@firebase/app-check",b="@firebase/auth",p="@firebase/auth-compat",g="@firebase/database",m="@firebase/database-compat",v="@firebase/functions",w="@firebase/functions-compat",S="@firebase/installations",y="@firebase/installations-compat",I="@firebase/messaging",E="@firebase/messaging-compat",T="@firebase/performance",P="@firebase/performance-compat",L="@firebase/remote-config",A="@firebase/remote-config-compat",C="@firebase/storage",k="@firebase/storage-compat",D="@firebase/firestore",N="@firebase/firestore-compat",B="firebase",O="[DEFAULT]",z={[_]:"fire-core",[d]:"fire-core-compat",[l]:"fire-analytics",[h]:"fire-analytics-compat",[u]:"fire-app-check",[f]:"fire-app-check-compat",[b]:"fire-auth",[p]:"fire-auth-compat",[g]:"fire-rtdb",[m]:"fire-rtdb-compat",[v]:"fire-fn",[w]:"fire-fn-compat",[S]:"fire-iid",[y]:"fire-iid-compat",[I]:"fire-fcm",[E]:"fire-fcm-compat",[T]:"fire-perf",[P]:"fire-perf-compat",[L]:"fire-rc",[A]:"fire-rc-compat",[C]:"fire-gcs",[k]:"fire-gcs-compat",[D]:"fire-fst",[N]:"fire-fst-compat","fire-js":"fire-js",[B]:"fire-js-all"},M=new Map,j=new Map;function R(e,t){try{e.container.addComponent(t)}catch(a){c.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,a)}}function F(e,t){e.container.addOrOverwriteComponent(t)}function U(e){const t=e.name;if(j.has(t))return c.debug(`There were multiple attempts to register component ${t}.`),!1;j.set(t,e);for(const t of M.values())R(t,e);return!0}function H(e,t){const a=e.container.getProvider("heartbeat").getImmediate({optional:!0});return a&&a.triggerHeartbeat(),e.container.getProvider(t)}function G(e,t,a=O){H(e,t).clearInstance(a)}function V(){j.clear()}const W={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},X=new s.ErrorFactory("app","Firebase",W);class Y{constructor(e,t,a){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=a,this.container.addComponent(new x.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw X.create("app-deleted",{appName:this._name})}}const $="10.1.0";function K(e,t={}){let a=e;if("object"!=typeof t){t={name:t}}const i=Object.assign({name:O,automaticDataCollectionEnabled:!1},t),n=i.name;if("string"!=typeof n||!n)throw X.create("bad-app-name",{appName:String(n)});if(a||(a=(0,s.getDefaultAppConfig)()),!a)throw X.create("no-options");const o=M.get(n);if(o){if((0,s.deepEqual)(a,o.options)&&(0,s.deepEqual)(i,o.config))return o;throw X.create("duplicate-app",{appName:n})}const _=new x.ComponentContainer(n);for(const e of j.values())_.addComponent(e);const r=new Y(a,i,_);return M.set(n,r),r}function q(e=O){const t=M.get(e);if(!t&&e===O&&(0,s.getDefaultAppConfig)())return K();if(!t)throw X.create("no-app",{appName:e});return t}function Z(){return Array.from(M.values())}async function J(e){const t=e.name;M.has(t)&&(M.delete(t),await Promise.all(e.container.getProviders().map((e=>e.delete()))),e.isDeleted=!0)}function Q(e,t,a){var i;let s=null!==(i=z[e])&&void 0!==i?i:e;a&&(s+=`-${a}`);const n=s.match(/\s|\//),o=t.match(/\s|\//);if(n||o){const e=[`Unable to register library "${s}" with version "${t}":`];return n&&e.push(`library name "${s}" contains illegal characters (whitespace or "/")`),n&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void c.warn(e.join(" "))}U(new x.Component(`${s}-version`,(()=>({library:s,version:t})),"VERSION"))}function ee(e,t){if(null!==e&&"function"!=typeof e)throw X.create("invalid-log-argument");(0,i.setUserLogHandler)(e,t)}function te(e){(0,i.setLogLevel)(e)}const ae="firebase-heartbeat-database",xe=1,ie="firebase-heartbeat-store";let se=null;function ne(){return se||(se=(0,n.openDB)(ae,xe,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(ie)}}).catch((e=>{throw X.create("idb-open",{originalErrorMessage:e.message})}))),se}async function oe(e,t){try{const a=(await ne()).transaction(ie,"readwrite"),x=a.objectStore(ie);await x.put(t,_e(e)),await a.done}catch(e){if(e instanceof s.FirebaseError)c.warn(e.message);else{const t=X.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});c.warn(t.message)}}}function _e(e){return`${e.name}!${e.options.appId}`}class re{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new de(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=ce();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=ce(),{heartbeatsToSend:t,unsentEntries:a}=function(e,t=1024){const a=[];let x=e.slice();for(const i of e){const e=a.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),he(a)>t){e.dates.pop();break}}else if(a.push({agent:i.agent,dates:[i.date]}),he(a)>t){a.pop();break}x=x.slice(1)}return{heartbeatsToSend:a,unsentEntries:x}}(this._heartbeatsCache.heartbeats),x=(0,s.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,a.length>0?(this._heartbeatsCache.heartbeats=a,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),x}}function ce(){return(new Date).toISOString().substring(0,10)}class de{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,s.isIndexedDBAvailable)()&&(0,s.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{const t=await ne();return await t.transaction(ie).objectStore(ie).get(_e(e))}catch(e){if(e instanceof s.FirebaseError)c.warn(e.message);else{const t=X.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});c.warn(t.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const a=await this.read();return oe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:a.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const a=await this.read();return oe(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:a.lastSentHeartbeatDate,heartbeats:[...a.heartbeats,...e.heartbeats]})}}}function he(e){return(0,s.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e})).length}var le;le="",U(new x.Component("platform-logger",(e=>new o(e)),"PRIVATE")),U(new x.Component("heartbeat",(e=>new re(e)),"PRIVATE")),Q(_,r,le),Q(_,r,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{Component:()=>i,ComponentContainer:()=>o,Provider:()=>n});var x=a("./node_modules/@firebase/util/dist/index.esm2017.js");class i{constructor(e,t,a){this.name=e,this.instanceFactory=t,this.type=a,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const s="[DEFAULT]";class n{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new x.Deferred;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const a=this.getOrInitializeService({instanceIdentifier:t});a&&e.resolve(a)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const a=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),x=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(a)&&!this.shouldAutoInitialize()){if(x)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:a})}catch(e){if(x)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:s})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const a=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:a});t.resolve(e)}catch(e){}}}}clearInstance(e=s){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=s){return this.instances.has(e)}getOptions(e=s){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,a=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(a))throw Error(`${this.name}(${a}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const x=this.getOrInitializeService({instanceIdentifier:a,options:t});for(const[e,t]of this.instancesDeferred.entries()){a===this.normalizeInstanceIdentifier(e)&&t.resolve(x)}return x}onInit(e,t){var a;const x=this.normalizeInstanceIdentifier(t),i=null!==(a=this.onInitCallbacks.get(x))&&void 0!==a?a:new Set;i.add(e),this.onInitCallbacks.set(x,i);const s=this.instances.get(x);return s&&e(s,x),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const a=this.onInitCallbacks.get(t);if(a)for(const x of a)try{x(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let a=this.instances.get(e);if(!a&&this.component&&(a=this.component.instanceFactory(this.container,{instanceIdentifier:(x=e,x===s?void 0:x),options:t}),this.instances.set(e,a),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(a,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,a)}catch(e){}var x;return a||null}normalizeInstanceIdentifier(e=s){return this.component?this.component.multipleInstances?e:s:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class o{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new n(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{deleteInstallations:()=>Q,getId:()=>q,getInstallations:()=>te,getToken:()=>Z,onIdChange:()=>ee});var x=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),i=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),s=a("./node_modules/@firebase/util/dist/index.esm2017.js"),n=a("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const o="@firebase/installations",_="0.6.4",r=1e4,c=`w:${_}`,d="FIS_v2",h="https://firebaseinstallations.googleapis.com/v1",l=36e5,f={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},u=new s.ErrorFactory("installations","Installations",f);function b(e){return e instanceof s.FirebaseError&&e.code.includes("request-failed")}function p({projectId:e}){return`${h}/projects/${e}/installations`}function g(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function m(e,t){const a=(await t.json()).error;return u.create("request-failed",{requestName:e,serverCode:a.code,serverMessage:a.message,serverStatus:a.status})}function v({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function w(e,{refreshToken:t}){const a=v(e);return a.append("Authorization",function(e){return`${d} ${e}`}(t)),a}async function S(e){const t=await e();return t.status>=500&&t.status<600?e():t}function y(e){return new Promise((t=>{setTimeout(t,e)}))}const I=/^[cdef][\w-]{21}$/,E="";function T(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){const t=(a=e,btoa(String.fromCharCode(...a)).replace(/\+/g,"-").replace(/\//g,"_"));var a;return t.substr(0,22)}(e);return I.test(t)?t:E}catch(e){return E}}function P(e){return`${e.appName}!${e.appId}`}const L=new Map;function A(e,t){const a=P(e);C(a,t),function(e,t){const a=D();a&&a.postMessage({key:e,fid:t});N()}(a,t)}function C(e,t){const a=L.get(e);if(a)for(const e of a)e(t)}let k=null;function D(){return!k&&"BroadcastChannel"in self&&(k=new BroadcastChannel("[Firebase] FID Change"),k.onmessage=e=>{C(e.data.key,e.data.fid)}),k}function N(){0===L.size&&k&&(k.close(),k=null)}const B="firebase-installations-database",O=1,z="firebase-installations-store";let M=null;function j(){return M||(M=(0,n.openDB)(B,O,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(z)}})),M}async function R(e,t){const a=P(e),x=(await j()).transaction(z,"readwrite"),i=x.objectStore(z),s=await i.get(a);return await i.put(t,a),await x.done,s&&s.fid===t.fid||A(e,t.fid),t}async function F(e){const t=P(e),a=(await j()).transaction(z,"readwrite");await a.objectStore(z).delete(t),await a.done}async function U(e,t){const a=P(e),x=(await j()).transaction(z,"readwrite"),i=x.objectStore(z),s=await i.get(a),n=t(s);return void 0===n?await i.delete(a):await i.put(n,a),await x.done,!n||s&&s.fid===n.fid||A(e,n.fid),n}async function H(e){let t;const a=await U(e.appConfig,(a=>{const x=function(e){const t=e||{fid:T(),registrationStatus:0};return W(t)}(a),i=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){return{installationEntry:t,registrationPromise:Promise.reject(u.create("app-offline"))}}const a={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},x=async function(e,t){try{const a=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:a}){const x=p(e),i=v(e),s=t.getImmediate({optional:!0});if(s){const e=await s.getHeartbeatsHeader();e&&i.append("x-firebase-client",e)}const n={fid:a,authVersion:d,appId:e.appId,sdkVersion:c},o={method:"POST",headers:i,body:JSON.stringify(n)},_=await S((()=>fetch(x,o)));if(_.ok){const e=await _.json();return{fid:e.fid||a,registrationStatus:2,refreshToken:e.refreshToken,authToken:g(e.authToken)}}throw await m("Create Installation",_)}(e,t);return R(e.appConfig,a)}catch(a){throw b(a)&&409===a.customData.serverCode?await F(e.appConfig):await R(e.appConfig,{fid:t.fid,registrationStatus:0}),a}}(e,a);return{installationEntry:a,registrationPromise:x}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:G(e)}:{installationEntry:t}}(e,x);return t=i.registrationPromise,i.installationEntry}));return a.fid===E?{installationEntry:await t}:{installationEntry:a,registrationPromise:t}}async function G(e){let t=await V(e.appConfig);for(;1===t.registrationStatus;)await y(100),t=await V(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:a}=await H(e);return a||t}return t}function V(e){return U(e,(e=>{if(!e)throw u.create("installation-not-found");return W(e)}))}function W(e){return 1===(t=e).registrationStatus&&t.registrationTime+r<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function X({appConfig:e,heartbeatServiceProvider:t},a){const x=function(e,{fid:t}){return`${p(e)}/${t}/authTokens:generate`}(e,a),i=w(e,a),s=t.getImmediate({optional:!0});if(s){const e=await s.getHeartbeatsHeader();e&&i.append("x-firebase-client",e)}const n={installation:{sdkVersion:c,appId:e.appId}},o={method:"POST",headers:i,body:JSON.stringify(n)},_=await S((()=>fetch(x,o)));if(_.ok){return g(await _.json())}throw await m("Generate Auth Token",_)}async function Y(e,t=!1){let a;const x=await U(e.appConfig,(x=>{if(!K(x))throw u.create("not-registered");const i=x.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+l}(e)}(i))return x;if(1===i.requestStatus)return a=async function(e,t){let a=await $(e.appConfig);for(;1===a.authToken.requestStatus;)await y(100),a=await $(e.appConfig);const x=a.authToken;return 0===x.requestStatus?Y(e,t):x}(e,t),x;{if(!navigator.onLine)throw u.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(x);return a=async function(e,t){try{const a=await X(e,t),x=Object.assign(Object.assign({},t),{authToken:a});return await R(e.appConfig,x),a}catch(a){if(!b(a)||401!==a.customData.serverCode&&404!==a.customData.serverCode){const a=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await R(e.appConfig,a)}else await F(e.appConfig);throw a}}(e,t),t}}));return a?await a:x.authToken}function $(e){return U(e,(e=>{if(!K(e))throw u.create("not-registered");const t=e.authToken;return 1===(a=t).requestStatus&&a.requestTime+r<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var a}))}function K(e){return void 0!==e&&2===e.registrationStatus}async function q(e){const t=e,{installationEntry:a,registrationPromise:x}=await H(t);return x?x.catch(console.error):Y(t).catch(console.error),a.fid}async function Z(e,t=!1){const a=e;await async function(e){const{registrationPromise:t}=await H(e);t&&await t}(a);return(await Y(a,t)).token}async function J(e,t){const a=function(e,{fid:t}){return`${p(e)}/${t}`}(e,t),x={method:"DELETE",headers:w(e,t)},i=await S((()=>fetch(a,x)));if(!i.ok)throw await m("Delete Installation",i)}async function Q(e){const{appConfig:t}=e,a=await U(t,(e=>{if(!e||0!==e.registrationStatus)return e}));if(a){if(1===a.registrationStatus)throw u.create("delete-pending-registration");if(2===a.registrationStatus){if(!navigator.onLine)throw u.create("app-offline");await J(t,a),await F(t)}}}function ee(e,t){const{appConfig:a}=e;return function(e,t){D();const a=P(e);let x=L.get(a);x||(x=new Set,L.set(a,x)),x.add(t)}(a,t),()=>{!function(e,t){const a=P(e),x=L.get(a);x&&(x.delete(t),0===x.size&&L.delete(a),N())}(a,t)}}function te(e=(0,x.getApp)()){return(0,x._getProvider)(e,"installations").getImmediate()}function ae(e){return u.create("missing-app-config-values",{valueName:e})}const xe="installations",ie=e=>{const t=e.getProvider("app").getImmediate(),a=function(e){if(!e||!e.options)throw ae("App Configuration");if(!e.name)throw ae("App Name");const t=["projectId","apiKey","appId"];for(const a of t)if(!e.options[a])throw ae(a);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:a,heartbeatServiceProvider:(0,x._getProvider)(t,"heartbeat"),_delete:()=>Promise.resolve()}},se=e=>{const t=e.getProvider("app").getImmediate(),a=(0,x._getProvider)(t,xe).getImmediate();return{getId:()=>q(a),getToken:e=>Z(a,e)}};(0,x._registerComponent)(new i.Component(xe,ie,"PUBLIC")),(0,x._registerComponent)(new i.Component("installations-internal",se,"PRIVATE")),(0,x.registerVersion)(o,_),(0,x.registerVersion)(o,_,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(e,t,a)=>{a.r(t),a.d(t,{deleteDB:()=>s,openDB:()=>i,unwrap:()=>x.u,wrap:()=>x.w});var x=a("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function i(e,t,{blocked:a,upgrade:i,blocking:s,terminated:n}={}){const o=indexedDB.open(e,t),_=(0,x.w)(o);return i&&o.addEventListener("upgradeneeded",(e=>{i((0,x.w)(o.result),e.oldVersion,e.newVersion,(0,x.w)(o.transaction))})),a&&o.addEventListener("blocked",(()=>a())),_.then((e=>{n&&e.addEventListener("close",(()=>n())),s&&e.addEventListener("versionchange",(()=>s()))})).catch((()=>{})),_}function s(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);return t&&a.addEventListener("blocked",(()=>t())),(0,x.w)(a).then((()=>{}))}const n=["get","getKey","getAll","getAllKeys","count"],o=["put","add","delete","clear"],_=new Map;function r(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(_.get(t))return _.get(t);const a=t.replace(/FromIndex$/,""),x=t!==a,i=o.includes(a);if(!(a in(x?IDBIndex:IDBObjectStore).prototype)||!i&&!n.includes(a))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let n=s.store;return x&&(n=n.index(t.shift())),(await Promise.all([n[a](...t),i&&s.done]))[0]};return _.set(t,s),s}(0,x.r)((e=>({...e,get:(t,a,x)=>r(t,a)||e.get(t,a,x),has:(t,a)=>!!r(t,a)||e.has(t,a)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(e,t,a)=>{a.r(t),a.d(t,{a:()=>c,i:()=>x,r:()=>h,u:()=>b,w:()=>u});const x=(e,t)=>t.some((t=>e instanceof t));let i,s;const n=new WeakMap,o=new WeakMap,_=new WeakMap,r=new WeakMap,c=new WeakMap;let d={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("objectStoreNames"===t)return e.objectStoreNames||_.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function h(e){d=e(d)}function l(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(n.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...a){const x=e.call(b(this),t,...a);return _.set(x,t.sort?t.sort():[t]),u(x)}}function f(e){return"function"==typeof e?l(e):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,a)=>{const x=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),x()},s=()=>{a(e.error||new DOMException("AbortError","AbortError")),x()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));o.set(e,t)}(e),x(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const x=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(u(e.result)),x()},s=()=>{a(e.error),x()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&n.set(t,e)})).catch((()=>{})),c.set(t,e),t}(e);if(r.has(e))return r.get(e);const t=f(e);return t!==e&&(r.set(e,t),c.set(t,e)),t}const b=e=>c.get(e)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(e,t,a)=>{a.r(t),a.d(t,{LogLevel:()=>i,Logger:()=>r,setLogLevel:()=>c,setUserLogHandler:()=>d});const x=[];var i;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));const s={debug:i.DEBUG,verbose:i.VERBOSE,info:i.INFO,warn:i.WARN,error:i.ERROR,silent:i.SILENT},n=i.INFO,o={[i.DEBUG]:"log",[i.VERBOSE]:"log",[i.INFO]:"info",[i.WARN]:"warn",[i.ERROR]:"error"},_=(e,t,...a)=>{if(t<e.logLevel)return;const x=(new Date).toISOString(),i=o[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${x}]  ${e.name}:`,...a)};class r{constructor(e){this.name=e,this._logLevel=n,this._logHandler=_,this._userLogHandler=null,x.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in i))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?s[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,i.DEBUG,...e),this._logHandler(this,i.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,i.VERBOSE,...e),this._logHandler(this,i.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,i.INFO,...e),this._logHandler(this,i.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,i.WARN,...e),this._logHandler(this,i.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,i.ERROR,...e),this._logHandler(this,i.ERROR,...e)}}function c(e){x.forEach((t=>{t.setLogLevel(e)}))}function d(e,t){for(const a of x){let x=null;t&&t.level&&(x=s[t.level]),a.userLogHandler=null===e?null:(t,a,...s)=>{const n=s.map((e=>{if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((e=>e)).join(" ");a>=(null!=x?x:t.logLevel)&&e({level:i[a].toLowerCase(),message:n,args:s,type:t.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(e,t,a)=>{a.r(t),a.d(t,{getAnalytics:()=>x.getAnalytics,getGoogleAnalyticsClientId:()=>x.getGoogleAnalyticsClientId,initializeAnalytics:()=>x.initializeAnalytics,isSupported:()=>x.isSupported,logEvent:()=>x.logEvent,setAnalyticsCollectionEnabled:()=>x.setAnalyticsCollectionEnabled,setConsent:()=>x.setConsent,setCurrentScreen:()=>x.setCurrentScreen,setDefaultEventParameters:()=>x.setDefaultEventParameters,setUserId:()=>x.setUserId,setUserProperties:()=>x.setUserProperties,settings:()=>x.settings});var x=a("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(e,t,a)=>{a.r(t),a.d(t,{FirebaseError:()=>x.FirebaseError,SDK_VERSION:()=>x.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>x._DEFAULT_ENTRY_NAME,_addComponent:()=>x._addComponent,_addOrOverwriteComponent:()=>x._addOrOverwriteComponent,_apps:()=>x._apps,_clearComponents:()=>x._clearComponents,_components:()=>x._components,_getProvider:()=>x._getProvider,_registerComponent:()=>x._registerComponent,_removeServiceInstance:()=>x._removeServiceInstance,deleteApp:()=>x.deleteApp,getApp:()=>x.getApp,getApps:()=>x.getApps,initializeApp:()=>x.initializeApp,onLog:()=>x.onLog,registerVersion:()=>x.registerVersion,setLogLevel:()=>x.setLogLevel});var x=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,x.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(e,t,a)=>{a.r(t),a.d(t,{deleteDB:()=>s,openDB:()=>i,unwrap:()=>x.u,wrap:()=>x.w});var x=a("./node_modules/idb/build/wrap-idb-value.js");function i(e,t,{blocked:a,upgrade:i,blocking:s,terminated:n}={}){const o=indexedDB.open(e,t),_=(0,x.w)(o);return i&&o.addEventListener("upgradeneeded",(e=>{i((0,x.w)(o.result),e.oldVersion,e.newVersion,(0,x.w)(o.transaction),e)})),a&&o.addEventListener("blocked",(e=>a(e.oldVersion,e.newVersion,e))),_.then((e=>{n&&e.addEventListener("close",(()=>n())),s&&e.addEventListener("versionchange",(e=>s(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),_}function s(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);return t&&a.addEventListener("blocked",(e=>t(e.oldVersion,e))),(0,x.w)(a).then((()=>{}))}const n=["get","getKey","getAll","getAllKeys","count"],o=["put","add","delete","clear"],_=new Map;function r(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(_.get(t))return _.get(t);const a=t.replace(/FromIndex$/,""),x=t!==a,i=o.includes(a);if(!(a in(x?IDBIndex:IDBObjectStore).prototype)||!i&&!n.includes(a))return;const s=async function(e,...t){const s=this.transaction(e,i?"readwrite":"readonly");let n=s.store;return x&&(n=n.index(t.shift())),(await Promise.all([n[a](...t),i&&s.done]))[0]};return _.set(t,s),s}(0,x.r)((e=>({...e,get:(t,a,x)=>r(t,a)||e.get(t,a,x),has:(t,a)=>!!r(t,a)||e.has(t,a)})))},"./node_modules/idb/build/wrap-idb-value.js":(e,t,a)=>{a.r(t),a.d(t,{a:()=>c,i:()=>x,r:()=>h,u:()=>b,w:()=>u});const x=(e,t)=>t.some((t=>e instanceof t));let i,s;const n=new WeakMap,o=new WeakMap,_=new WeakMap,r=new WeakMap,c=new WeakMap;let d={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return o.get(e);if("objectStoreNames"===t)return e.objectStoreNames||_.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function h(e){d=e(d)}function l(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(n.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...a){const x=e.call(b(this),t,...a);return _.set(x,t.sort?t.sort():[t]),u(x)}}function f(e){return"function"==typeof e?l(e):(e instanceof IDBTransaction&&function(e){if(o.has(e))return;const t=new Promise(((t,a)=>{const x=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",s),e.removeEventListener("abort",s)},i=()=>{t(),x()},s=()=>{a(e.error||new DOMException("AbortError","AbortError")),x()};e.addEventListener("complete",i),e.addEventListener("error",s),e.addEventListener("abort",s)}));o.set(e,t)}(e),x(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const x=()=>{e.removeEventListener("success",i),e.removeEventListener("error",s)},i=()=>{t(u(e.result)),x()},s=()=>{a(e.error),x()};e.addEventListener("success",i),e.addEventListener("error",s)}));return t.then((t=>{t instanceof IDBCursor&&n.set(t,e)})).catch((()=>{})),c.set(t,e),t}(e);if(r.has(e))return r.get(e);const t=f(e);return t!==e&&(r.set(e,t),c.set(t,e)),t}const b=e=>c.get(e)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(e,t,a)=>{a.r(t),a.d(t,{Workbox:()=>l,messageSW:()=>x});try{self["workbox:window:4.3.1"]&&_()}catch(x){}var x=function(e,t){return new Promise((function(a){var x=new MessageChannel;x.port1.onmessage=function(e){return a(e.data)},e.postMessage(t,[x.port2])}))};function i(e,t){for(var a=0;a<t.length;a++){var x=t[a];x.enumerable=x.enumerable||!1,x.configurable=!0,"value"in x&&(x.writable=!0),Object.defineProperty(e,x.key,x)}}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}try{self["workbox:core:4.3.1"]&&_()}catch(x){}var n=function(){var e=this;this.promise=new Promise((function(t,a){e.resolve=t,e.reject=a}))},o=function(e,t){return new URL(e,location).href===new URL(t,location).href},r=function(e,t){Object.assign(this,t,{type:e})};function c(e){return function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function d(e,t,a){return a?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function h(){}var l=function(e){var t,a;function _(t,a){var x;return void 0===a&&(a={}),(x=e.call(this)||this).t=t,x.i=a,x.o=0,x.u=new n,x.s=new n,x.h=new n,x.v=x.v.bind(s(s(x))),x.l=x.l.bind(s(s(x))),x.g=x.g.bind(s(s(x))),x.m=x.m.bind(s(s(x))),x}a=e,(t=_).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a;var l,f,u=_.prototype;return u.register=c((function(e){var t,a,x=this,i=(void 0===e?{}:e).immediate,s=void 0!==i&&i;return t=function(){return x.p=Boolean(navigator.serviceWorker.controller),x.P=x.R(),d(x.k(),(function(e){x.B=e,x.P&&(x.O=x.P,x.s.resolve(x.P),x.h.resolve(x.P),x.j(x.P),x.P.addEventListener("statechange",x.l,{once:!0}));var t=x.B.waiting;return t&&o(t.scriptURL,x.t)&&(x.O=t,Promise.resolve().then((function(){x.dispatchEvent(new r("waiting",{sw:t,wasWaitingBeforeRegister:!0}))}))),x.O&&x.u.resolve(x.O),x.B.addEventListener("updatefound",x.g),navigator.serviceWorker.addEventListener("controllerchange",x.m,{once:!0}),"BroadcastChannel"in self&&(x.C=new BroadcastChannel("workbox"),x.C.addEventListener("message",x.v)),navigator.serviceWorker.addEventListener("message",x.v),x.B}))},(a=function(){if(!s&&"complete"!==document.readyState)return function(e,t){return e&&e.then?e.then(h):Promise.resolve()}(new Promise((function(e){return addEventListener("load",e)})))}())&&a.then?a.then(t):t()})),u.getSW=c((function(){return this.O||this.u.promise})),u.messageSW=c((function(e){return d(this.getSW(),(function(t){return x(t,e)}))})),u.R=function(){var e=navigator.serviceWorker.controller;if(e&&o(e.scriptURL,this.t))return e},u.k=c((function(){var e=this;return function(e,t){try{var a=e()}catch(e){return t(e)}return a&&a.then?a.then(void 0,t):a}((function(){return d(navigator.serviceWorker.register(e.t,e.i),(function(t){return e.L=performance.now(),t}))}),(function(e){throw e}))})),u.j=function(e){x(e,{type:"WINDOW_READY",meta:"workbox-window"})},u.g=function(){var e=this.B.installing;this.o>0||!o(e.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=e,this.B.removeEventListener("updatefound",this.g)):(this.O=e,this.u.resolve(e)),++this.o,e.addEventListener("statechange",this.l)},u.l=function(e){var t=this,a=e.target,x=a.state,i=a===this.W,s=i?"external":"",n={sw:a,originalEvent:e};!i&&this.p&&(n.isUpdate=!0),this.dispatchEvent(new r(s+x,n)),"installed"===x?this._=setTimeout((function(){"installed"===x&&t.B.waiting===a&&t.dispatchEvent(new r(s+"waiting",n))}),200):"activating"===x&&(clearTimeout(this._),i||this.s.resolve(a))},u.m=function(e){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new r("controlling",{sw:t,originalEvent:e})),this.h.resolve(t))},u.v=function(e){var t=e.data;this.dispatchEvent(new r("message",{data:t,originalEvent:e}))},l=_,(f=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&i(l.prototype,f),_}(function(){function e(){this.D={}}var t=e.prototype;return t.addEventListener=function(e,t){this.T(e).add(t)},t.removeEventListener=function(e,t){this.T(e).delete(t)},t.dispatchEvent=function(e){e.target=this,this.T(e.type).forEach((function(t){return t(e)}))},t.T=function(e){return this.D[e]=this.D[e]||new Set},e}())}},t={};function a(x){var i=t[x];if(void 0!==i)return i.exports;var s=t[x]={exports:{}};return e[x](s,s.exports,a),s.exports}a.d=(e,t)=>{for(var x in t)a.o(t,x)&&!a.o(e,x)&&Object.defineProperty(e,x,{enumerable:!0,get:t[x]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var x={};(()=>{a.r(x);var e=a("./src/data/index.ts"),t=a("./src/sceneHandler/index.ts"),i=a("./src/constants/index.ts"),s=a("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),n=a("./src/Firebase/firebase-integration.ts"),o=a("./src/common/index.ts"),_=a("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(e){this.lang=e,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new n.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const t=await o.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.loadTitleFeedbackCustomFont(),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const a=await(0,e.getData)();this.majVersion=a.majversion,this.minVersion=a.minversion,this.dataModal=this.createDataModal(a),this.globalInitialization(a),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)}));const x=localStorage.getItem(this.lang+"gamePlayedInfo"),s=x?JSON.parse(x).length-1:0,n=o.Debugger.DebugMode?i.PreviousPlayedLevel+this.lang+"Debug":i.PreviousPlayedLevel+this.lang;localStorage.setItem(n,s.toString()),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}async loadTitleFeedbackCustomFont(){const t=e.customFonts[this.lang]||e.customFonts.default,a=`'${t}', sans-serif`;await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((e=>{e&&(e.style.fontFamily=a)}))}logSessionStartFirebaseEvent(){let e=localStorage.getItem("lastSessionEndTime"),t=0;if(this.startSessionTime=(new Date).getTime(),e){let a=parseInt(e);isNaN(a)||(t=Math.abs((new Date).getTime()-a))}const a=parseFloat((t?t/864e5:0).toFixed(3)),x={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:a};this.firebaseIntegration.sendSessionStartEvent(x)}logSessionEndFirebaseEvent(){const e={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(e)}initializeCachedData(){const e=localStorage.getItem(i.IsCached);return e?new Map(JSON.parse(e)):new Map}async loadAndCacheFont(e,t){try{const a=await caches.open("fontCache");if(!await a.match(t)){const e=await fetch(t),x=await e.blob();await a.put(t,new Response(x))}const x=new FontFace(e,`url(${t}) format('truetype')`);await x.load(),document.fonts.add(x)}catch(e){console.error(`Failed to load and cache font: ${e}`)}}handleLoadingScreen=()=>{this.is_cached.get(o.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new s.Workbox("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(e.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async e=>{if(!e.ok)return void console.error("Failed to fetch the content file from the server!");const t=await e.json(),a=t.majversion+"."+t.minversion,x=localStorage.getItem("version"+o.lang.toLowerCase());if(a&&x!=a){console.log("Content version mismatch! Reloading...");var s=JSON.parse(localStorage.getItem("is_cached"));console.log("current lang  "+o.lang);var n=s.filter((e=>!e.toString().includes(o.lang)));localStorage.setItem(i.IsCached,JSON.stringify(n)),localStorage.removeItem("version"+o.lang.toLowerCase()),caches.delete(o.lang),this.handleUpdateFoundMessage()}})).catch((e=>{console.error("Error fetching the content file: "+e)})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(e){console.error(`Failed to register service worker: ${e}`)}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(e){globalThis.aboutCompany=e.aboutCompany,globalThis.descriptionText=e.descriptionText}handleResize(e){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(e),this.setupCanvas(),this.reinitializeSceneHandler(e))}updateVersionInfoElement(e){this.is_cached.has(this.lang)&&o.Debugger.DevelopmentLink&&(e.majVersion&&e.minVersion?this.versionInfoElement.innerHTML+=`/j.v${e.majVersion}.${e.minVersion}`:e.version&&(this.versionInfoElement.innerHTML+=`/j.v${e.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(e){delete this.sceneHandler,this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}handleCachedScenario(e){this.updateVersionInfoElement(e),this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=e=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const t=Math.min(100,Math.max(0,e.data));t>this.currentProgress&&(this.currentProgress=t,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(e){return 100===e&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(i.IsCached,JSON.stringify(Array.from(this.is_cached.entries())))}catch(e){console.error("Error caching language:",e)}}sendCompletionEvent(){const e={cr_user_id:o.pseudoId,ftm_language:o.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(e)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(e){console.error("Error hiding loading screen:",e)}}handleServiceWorkerMessage=e=>{"Loading"===e.data.msg?this.handleLoadingMessage(e.data):"Update Found"===e.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,o.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async e=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let e=i.AUDIO_URL_PRELOAD;return new Promise(((t,a)=>{const x=e.map((e=>(new _.AudioPlayer).preloadGameAudio(e)));Promise.all(x).then((()=>t())).catch((e=>{console.error("Error preloading audio:",e),a(e)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(o.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(o.lang)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,