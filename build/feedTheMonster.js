/*! For license information please see feedTheMonster.js.LICENSE.txt */
(()=>{var e={"./node_modules/@firebase/util/dist/index.esm2017.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{CONSTANTS:()=>n,DecodeBase64StringError:()=>o,Deferred:()=>v,ErrorFactory:()=>z,FirebaseError:()=>B,MAX_VALUE_MILLIS:()=>pe,RANDOM_FACTOR:()=>me,Sha1:()=>ae,areCookiesEnabled:()=>N,assert:()=>i,assertionError:()=>x,async:()=>xe,base64:()=>r,base64Decode:()=>d,base64Encode:()=>_,base64urlEncodeWithoutPadding:()=>c,calculateBackoffMillis:()=>ge,contains:()=>Y,createMockUserToken:()=>y,createSubscribe:()=>ne,decode:()=>U,deepCopy:()=>l,deepEqual:()=>K,deepExtend:()=>h,errorPrefix:()=>oe,extractQuerystring:()=>te,getDefaultAppConfig:()=>m,getDefaultEmulatorHost:()=>b,getDefaultEmulatorHostnameAndPort:()=>p,getDefaults:()=>u,getExperimentalSetting:()=>g,getGlobal:()=>f,getModularInstance:()=>ye,getUA:()=>w,isAdmin:()=>V,isBrowser:()=>T,isBrowserExtension:()=>I,isElectron:()=>C,isEmpty:()=>X,isIE:()=>P,isIndexedDBAvailable:()=>M,isMobileCordova:()=>S,isNode:()=>E,isNodeSdk:()=>k,isReactNative:()=>A,isSafari:()=>D,isUWP:()=>L,isValidFormat:()=>W,isValidTimestamp:()=>H,issuedAtTime:()=>G,jsonEval:()=>R,map:()=>q,ordinal:()=>ve,promiseWithTimeout:()=>J,querystring:()=>Q,querystringDecode:()=>ee,safeGet:()=>$,stringLength:()=>he,stringToByteArray:()=>le,stringify:()=>F,uuidv4:()=>fe,validateArgCount:()=>re,validateCallback:()=>ce,validateContextObject:()=>de,validateIndexedDBOpenable:()=>O,validateNamespace:()=>_e});const n={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},i=function(e,t){if(!e)throw x(t)},x=function(e){return new Error("Firebase Database ("+n.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},s=function(e){const t=[];let a=0;for(let n=0;n<e.length;n++){let i=e.charCodeAt(n);i<128?t[a++]=i:i<2048?(t[a++]=i>>6|192,t[a++]=63&i|128):55296==(64512&i)&&n+1<e.length&&56320==(64512&e.charCodeAt(n+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++n)),t[a++]=i>>18|240,t[a++]=i>>12&63|128,t[a++]=i>>6&63|128,t[a++]=63&i|128):(t[a++]=i>>12|224,t[a++]=i>>6&63|128,t[a++]=63&i|128)}return t},r={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const a=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,n=[];for(let t=0;t<e.length;t+=3){const i=e[t],x=t+1<e.length,s=x?e[t+1]:0,r=t+2<e.length,o=r?e[t+2]:0,_=i>>2,c=(3&i)<<4|s>>4;let d=(15&s)<<2|o>>6,l=63&o;r||(l=64,x||(d=64)),n.push(a[_],a[c],a[d],a[l])}return n.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(s(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let a=0,n=0;for(;a<e.length;){const i=e[a++];if(i<128)t[n++]=String.fromCharCode(i);else if(i>191&&i<224){const x=e[a++];t[n++]=String.fromCharCode((31&i)<<6|63&x)}else if(i>239&&i<365){const x=((7&i)<<18|(63&e[a++])<<12|(63&e[a++])<<6|63&e[a++])-65536;t[n++]=String.fromCharCode(55296+(x>>10)),t[n++]=String.fromCharCode(56320+(1023&x))}else{const x=e[a++],s=e[a++];t[n++]=String.fromCharCode((15&i)<<12|(63&x)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const a=t?this.charToByteMapWebSafe_:this.charToByteMap_,n=[];for(let t=0;t<e.length;){const i=a[e.charAt(t++)],x=t<e.length?a[e.charAt(t)]:0;++t;const s=t<e.length?a[e.charAt(t)]:64;++t;const r=t<e.length?a[e.charAt(t)]:64;if(++t,null==i||null==x||null==s||null==r)throw new o;const _=i<<2|x>>4;if(n.push(_),64!==s){const e=x<<4&240|s>>2;if(n.push(e),64!==r){const e=s<<6&192|r;n.push(e)}}}return n},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class o extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const _=function(e){const t=s(e);return r.encodeByteArray(t,!0)},c=function(e){return _(e).replace(/\./g,"")},d=function(e){try{return r.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};function l(e){return h(void 0,e)}function h(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(const a in t)t.hasOwnProperty(a)&&"__proto__"!==a&&(e[a]=h(e[a],t[a]));return e}function f(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==a.g)return a.g;throw new Error("Unable to locate global object.")}const u=()=>{try{return f().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&d(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},b=e=>{var t,a;return null===(a=null===(t=u())||void 0===t?void 0:t.emulatorHosts)||void 0===a?void 0:a[e]},p=e=>{const t=b(e);if(!t)return;const a=t.lastIndexOf(":");if(a<=0||a+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const n=parseInt(t.substring(a+1),10);return"["===t[0]?[t.substring(1,a-1),n]:[t.substring(0,a),n]},m=()=>{var e;return null===(e=u())||void 0===e?void 0:e.config},g=e=>{var t;return null===(t=u())||void 0===t?void 0:t[`_${e}`]};class v{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,a)=>{t?this.reject(t):this.resolve(a),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,a))}}}function y(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const a=t||"demo-project",n=e.iat||0,i=e.sub||e.user_id;if(!i)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const x=Object.assign({iss:`https://securetoken.google.com/${a}`,aud:a,iat:n,exp:n+3600,auth_time:n,sub:i,user_id:i,firebase:{sign_in_provider:"custom",identities:{}}},e);return[c(JSON.stringify({alg:"none",type:"JWT"})),c(JSON.stringify(x)),""].join(".")}function w(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function S(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(w())}function E(){var e;const t=null===(e=u())||void 0===e?void 0:e.forceEnvironment;if("node"===t)return!0;if("browser"===t)return!1;try{return"[object process]"===Object.prototype.toString.call(a.g.process)}catch(e){return!1}}function T(){return"object"==typeof self&&self.self===self}function I(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function A(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function C(){return w().indexOf("Electron/")>=0}function P(){const e=w();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}function L(){return w().indexOf("MSAppHost/")>=0}function k(){return!0===n.NODE_CLIENT||!0===n.NODE_ADMIN}function D(){return!E()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}function M(){try{return"object"==typeof indexedDB}catch(e){return!1}}function O(){return new Promise(((e,t)=>{try{let a=!0;const n="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(n);i.onsuccess=()=>{i.result.close(),a||self.indexedDB.deleteDatabase(n),e(!0)},i.onupgradeneeded=()=>{a=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}function N(){return!("undefined"==typeof navigator||!navigator.cookieEnabled)}class B extends Error{constructor(e,t,a){super(t),this.code=e,this.customData=a,this.name="FirebaseError",Object.setPrototypeOf(this,B.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,z.prototype.create)}}class z{constructor(e,t,a){this.service=e,this.serviceName=t,this.errors=a}create(e,...t){const a=t[0]||{},n=`${this.service}/${e}`,i=this.errors[e],x=i?function(e,t){return e.replace(j,((e,a)=>{const n=t[a];return null!=n?String(n):`<${a}?>`}))}(i,a):"Error",s=`${this.serviceName}: ${x} (${n}).`;return new B(n,s,a)}}const j=/\{\$([^}]+)}/g;function R(e){return JSON.parse(e)}function F(e){return JSON.stringify(e)}const U=function(e){let t={},a={},n={},i="";try{const x=e.split(".");t=R(d(x[0])||""),a=R(d(x[1])||""),i=x[2],n=a.d||{},delete a.d}catch(e){}return{header:t,claims:a,data:n,signature:i}},H=function(e){const t=U(e).claims,a=Math.floor((new Date).getTime()/1e3);let n=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?n=t.nbf:t.hasOwnProperty("iat")&&(n=t.iat),i=t.hasOwnProperty("exp")?t.exp:n+86400),!!a&&!!n&&!!i&&a>=n&&a<=i},G=function(e){const t=U(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},W=function(e){const t=U(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},V=function(e){const t=U(e).claims;return"object"==typeof t&&!0===t.admin};function Y(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function $(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0}function X(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function q(e,t,a){const n={};for(const i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=t.call(a,e[i],i,e));return n}function K(e,t){if(e===t)return!0;const a=Object.keys(e),n=Object.keys(t);for(const i of a){if(!n.includes(i))return!1;const a=e[i],x=t[i];if(Z(a)&&Z(x)){if(!K(a,x))return!1}else if(a!==x)return!1}for(const e of n)if(!a.includes(e))return!1;return!0}function Z(e){return null!==e&&"object"==typeof e}function J(e,t=2e3){const a=new v;return setTimeout((()=>a.reject("timeout!")),t),e.then(a.resolve,a.reject),a.promise}function Q(e){const t=[];for(const[a,n]of Object.entries(e))Array.isArray(n)?n.forEach((e=>{t.push(encodeURIComponent(a)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(a)+"="+encodeURIComponent(n));return t.length?"&"+t.join("&"):""}function ee(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[a,n]=e.split("=");t[decodeURIComponent(a)]=decodeURIComponent(n)}})),t}function te(e){const t=e.indexOf("?");if(!t)return"";const a=e.indexOf("#",t);return e.substring(t,a>0?a:void 0)}class ae{constructor(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(let e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}reset(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0}compress_(e,t){t||(t=0);const a=this.W_;if("string"==typeof e)for(let n=0;n<16;n++)a[n]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(let n=0;n<16;n++)a[n]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(let e=16;e<80;e++){const t=a[e-3]^a[e-8]^a[e-14]^a[e-16];a[e]=4294967295&(t<<1|t>>>31)}let n,i,x=this.chain_[0],s=this.chain_[1],r=this.chain_[2],o=this.chain_[3],_=this.chain_[4];for(let e=0;e<80;e++){e<40?e<20?(n=o^s&(r^o),i=1518500249):(n=s^r^o,i=1859775393):e<60?(n=s&r|o&(s|r),i=2400959708):(n=s^r^o,i=3395469782);const t=(x<<5|x>>>27)+n+_+i+a[e]&4294967295;_=o,o=r,r=4294967295&(s<<30|s>>>2),s=x,x=t}this.chain_[0]=this.chain_[0]+x&4294967295,this.chain_[1]=this.chain_[1]+s&4294967295,this.chain_[2]=this.chain_[2]+r&4294967295,this.chain_[3]=this.chain_[3]+o&4294967295,this.chain_[4]=this.chain_[4]+_&4294967295}update(e,t){if(null==e)return;void 0===t&&(t=e.length);const a=t-this.blockSize;let n=0;const i=this.buf_;let x=this.inbuf_;for(;n<t;){if(0===x)for(;n<=a;)this.compress_(e,n),n+=this.blockSize;if("string"==typeof e){for(;n<t;)if(i[x]=e.charCodeAt(n),++x,++n,x===this.blockSize){this.compress_(i),x=0;break}}else for(;n<t;)if(i[x]=e[n],++x,++n,x===this.blockSize){this.compress_(i),x=0;break}}this.inbuf_=x,this.total_+=t}digest(){const e=[];let t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(let e=this.blockSize-1;e>=56;e--)this.buf_[e]=255&t,t/=256;this.compress_(this.buf_);let a=0;for(let t=0;t<5;t++)for(let n=24;n>=0;n-=8)e[a]=this.chain_[t]>>n&255,++a;return e}}function ne(e,t){const a=new ie(e,t);return a.subscribe.bind(a)}class ie{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,a){let n;if(void 0===e&&void 0===t&&void 0===a)throw new Error("Missing Observer.");n=function(e,t){if("object"!=typeof e||null===e)return!1;for(const a of t)if(a in e&&"function"==typeof e[a])return!0;return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:a},void 0===n.next&&(n.next=se),void 0===n.error&&(n.error=se),void 0===n.complete&&(n.complete=se);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?n.error(this.finalError):n.complete()}catch(e){}})),this.observers.push(n),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function xe(e,t){return(...a)=>{Promise.resolve(!0).then((()=>{e(...a)})).catch((e=>{t&&t(e)}))}}function se(){}const re=function(e,t,a,n){let i;if(n<t?i="at least "+t:n>a&&(i=0===a?"none":"no more than "+a),i){throw new Error(e+" failed: Was called with "+n+(1===n?" argument.":" arguments.")+" Expects "+i+".")}};function oe(e,t){return`${e} failed: ${t} argument `}function _e(e,t,a){if((!a||t)&&"string"!=typeof t)throw new Error(oe(e,"namespace")+"must be a valid firebase namespace.")}function ce(e,t,a,n){if((!n||a)&&"function"!=typeof a)throw new Error(oe(e,t)+"must be a valid function.")}function de(e,t,a,n){if((!n||a)&&("object"!=typeof a||null===a))throw new Error(oe(e,t)+"must be a valid context object.")}const le=function(e){const t=[];let a=0;for(let n=0;n<e.length;n++){let x=e.charCodeAt(n);if(x>=55296&&x<=56319){const t=x-55296;n++,i(n<e.length,"Surrogate pair missing trail surrogate.");x=65536+(t<<10)+(e.charCodeAt(n)-56320)}x<128?t[a++]=x:x<2048?(t[a++]=x>>6|192,t[a++]=63&x|128):x<65536?(t[a++]=x>>12|224,t[a++]=x>>6&63|128,t[a++]=63&x|128):(t[a++]=x>>18|240,t[a++]=x>>12&63|128,t[a++]=x>>6&63|128,t[a++]=63&x|128)}return t},he=function(e){let t=0;for(let a=0;a<e.length;a++){const n=e.charCodeAt(a);n<128?t++:n<2048?t+=2:n>=55296&&n<=56319?(t+=4,a++):t+=3}return t},fe=function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(e=>{const t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)}))},ue=1e3,be=2,pe=144e5,me=.5;function ge(e,t=ue,a=be){const n=t*Math.pow(a,e),i=Math.round(me*n*(Math.random()-.5)*2);return Math.min(pe,n+i)}function ve(e){return Number.isFinite(e)?e+function(e){e=Math.abs(e);const t=e%100;if(t>=10&&t<=20)return"th";const a=e%10;if(1===a)return"st";if(2===a)return"nd";if(3===a)return"rd";return"th"}(e):`${e}`}function ye(e){return e&&e._delegate?e._delegate:e}},"./node_modules/@rive-app/canvas/rive.js":function(e){var t;t=()=>(()=>{"use strict";var e=[,(e,t,a)=>{a.r(t),a.d(t,{default:()=>x});var n,i=(n="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0,function(e={}){var t,a,i=e;function x(){function e(e){const x=n;a=t=0,n=new Map,x.forEach((t=>{try{t(e)}catch(e){console.error(e)}})),this.ob(),i&&i.Tb()}let t=0,a=0,n=new Map,i=null,x=null;this.requestAnimationFrame=function(i){t||(t=requestAnimationFrame(e.bind(this)));const x=++a;return n.set(x,i),x},this.cancelAnimationFrame=function(e){n.delete(e),t&&0==n.size&&(cancelAnimationFrame(t),t=0)},this.Rb=function(e){x&&(document.body.remove(x),x=null),e||(x=document.createElement("div"),x.style.backgroundColor="black",x.style.position="fixed",x.style.right=0,x.style.top=0,x.style.color="white",x.style.padding="4px",x.innerHTML="RIVE FPS",e=function(e){x.innerHTML="RIVE FPS "+e.toFixed(1)},document.body.appendChild(x)),i=new function(){let t=0,a=0;this.Tb=function(){var n=performance.now();a?(++t,1e3<(n-=a)&&(e(1e3*t/n),t=a=0)):(a=n,t=0)}}},this.Ob=function(){x&&(document.body.remove(x),x=null),i=null},this.ob=function(){}}function s(e){console.assert(!0);const t=new Map;let a=-1/0;this.push=function(n){return n=n+((1<<e)-1)>>e,t.has(n)&&clearTimeout(t.get(n)),t.set(n,setTimeout((function(){t.delete(n),0==t.length?a=-1/0:n==a&&(a=Math.max(...t.keys()),console.assert(a<n))}),1e3)),a=Math.max(n,a),a<<e}}i.ready=new Promise(((e,n)=>{t=e,a=n}));const r=i.onRuntimeInitialized;i.onRuntimeInitialized=function(){r&&r();let e=i.decodeAudio;i.decodeAudio=function(t,a){a(t=e(t))};let t=i.decodeFont;i.decodeFont=function(e,a){a(e=t(e))};const a=i.FileAssetLoader;i.ptrToAsset=e=>{let t=i.ptrToFileAsset(e);return t.isImage?i.ptrToImageAsset(e):t.isFont?i.ptrToFontAsset(e):t.isAudio?i.ptrToAudioAsset(e):t},i.CustomFileAssetLoader=a.extend("CustomFileAssetLoader",{__construct:function({loadContents:e}){this.__parent.__construct.call(this),this.Gb=e},loadContents:function(e,t){return e=i.ptrToAsset(e),this.Gb(e,t)}}),i.CDNFileAssetLoader=a.extend("CDNFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this)},loadContents:function(e){let t=i.ptrToAsset(e);return""!==(e=t.cdnUuid)&&(a=t.cdnBaseUrl+"/"+e,(n=new XMLHttpRequest).responseType="arraybuffer",n.onreadystatechange=function(){4==n.readyState&&200==n.status&&(e=>{t.decode(new Uint8Array(e.response))})(n)},n.open("GET",a,!0),n.send(null),!0);var a,n}}),i.FallbackFileAssetLoader=a.extend("FallbackFileAssetLoader",{__construct:function(){this.__parent.__construct.call(this),this.kb=[]},addLoader:function(e){this.kb.push(e)},loadContents:function(e,t){for(let a of this.kb)if(a.loadContents(e,t))return!0;return!1}})};const o="createConicGradient createImageData createLinearGradient createPattern createRadialGradient getContextAttributes getImageData getLineDash getTransform isContextLost isPointInPath isPointInStroke measureText".split(" "),_=new function(){function e(){if(!t){var e=document.createElement("canvas"),s={alpha:1,depth:0,stencil:0,antialias:0,premultipliedAlpha:1,preserveDrawingBuffer:0,preferLowPowerToHighPerformance:0,failIfMajorPerformanceCaveat:0,enableExtensionsByDefault:1,explicitSwapControl:1,renderViaOffscreenBackBuffer:1};let r;if(/iPhone|iPad|iPod/i.test(navigator.userAgent)){if(r=e.getContext("webgl",s),a=1,!r)return console.log("No WebGL support. Image mesh will not be drawn."),!1}else if(r=e.getContext("webgl2",s))a=2;else{if(!(r=e.getContext("webgl",s)))return console.log("No WebGL support. Image mesh will not be drawn."),!1;a=1}function o(e,t,a){if(t=r.createShader(t),r.shaderSource(t,a),r.compileShader(t),0<((a=r.getShaderInfoLog(t))||"").length)throw a;r.attachShader(e,t)}if(r=new Proxy(r,{get:(e,t)=>e.isContextLost()?(_||(console.error("Cannot render the mesh because the GL Context was lost. Tried to invoke ",t),_=!0),"function"==typeof e[t]?function(){}:void 0):"function"==typeof e[t]?function(...a){return e[t].apply(e,a)}:e[t],set(e,t,a){if(!e.isContextLost())return e[t]=a,!0;_||(console.error("Cannot render the mesh because the GL Context was lost. Tried to set property "+t),_=!0)}}),n=Math.min(r.getParameter(r.MAX_RENDERBUFFER_SIZE),r.getParameter(r.MAX_TEXTURE_SIZE)),o(e=r.createProgram(),r.VERTEX_SHADER,"attribute vec2 vertex;\n                attribute vec2 uv;\n                uniform vec4 mat;\n                uniform vec2 translate;\n                varying vec2 st;\n                void main() {\n                    st = uv;\n                    gl_Position = vec4(mat2(mat) * vertex + translate, 0, 1);\n                }"),o(e,r.FRAGMENT_SHADER,"precision highp float;\n                uniform sampler2D image;\n                varying vec2 st;\n                void main() {\n                    gl_FragColor = texture2D(image, st);\n                }"),r.bindAttribLocation(e,0,"vertex"),r.bindAttribLocation(e,1,"uv"),r.linkProgram(e),0<((s=r.getProgramInfoLog(e))||"").trim().length)throw s;i=r.getUniformLocation(e,"mat"),x=r.getUniformLocation(e,"translate"),r.useProgram(e),r.bindBuffer(r.ARRAY_BUFFER,r.createBuffer()),r.enableVertexAttribArray(0),r.enableVertexAttribArray(1),r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,r.createBuffer()),r.uniform1i(r.getUniformLocation(e,"image"),0),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!0),t=r}return!0}let t=null,a=0,n=0,i=null,x=null,r=0,o=0,_=!1;e(),this.hc=function(){return e(),n},this.Mb=function(e){t.deleteTexture&&t.deleteTexture(e)},this.Lb=function(n){if(!e())return null;const i=t.createTexture();return i?(t.bindTexture(t.TEXTURE_2D,i),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),2==a?(t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_LINEAR),t.generateMipmap(t.TEXTURE_2D)):t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),i):null};const c=new s(8),d=new s(8),l=new s(10),h=new s(10);this.Qb=function(a,n,s,_,f){if(e()){var u=c.push(a),b=d.push(n);if(t.canvas){for(var p of(t.canvas.width==u&&t.canvas.height==b||(t.canvas.width=u,t.canvas.height=b),t.viewport(0,b-n,a,n),t.disable(t.SCISSOR_TEST),t.clearColor(0,0,0,0),t.clear(t.COLOR_BUFFER_BIT),t.enable(t.SCISSOR_TEST),s.sort(((e,t)=>t.wb-e.wb)),u=l.push(_),r!=u&&(t.bufferData(t.ARRAY_BUFFER,8*u,t.DYNAMIC_DRAW),r=u),u=0,s))t.bufferSubData(t.ARRAY_BUFFER,u,p.Ta),u+=4*p.Ta.length;for(var m of(console.assert(u==4*_),s))t.bufferSubData(t.ARRAY_BUFFER,u,m.Db),u+=4*m.Db.length;for(var g of(console.assert(u==8*_),u=h.push(f),o!=u&&(t.bufferData(t.ELEMENT_ARRAY_BUFFER,2*u,t.DYNAMIC_DRAW),o=u),p=0,s))t.bufferSubData(t.ELEMENT_ARRAY_BUFFER,p,g.indices),p+=2*g.indices.length;console.assert(p==2*f),g=0,m=!0,u=p=0;for(const e of s){e.image.Ka!=g&&(t.bindTexture(t.TEXTURE_2D,e.image.Ja||null),g=e.image.Ka),e.mc?(t.scissor(e.Ya,b-e.Za-e.jb,e.Ac,e.jb),m=!0):m&&(t.scissor(0,b-n,a,n),m=!1),s=2/a;const r=-2/n;t.uniform4f(i,e.ha[0]*s*e.Ba,e.ha[1]*r*e.Ca,e.ha[2]*s*e.Ba,e.ha[3]*r*e.Ca),t.uniform2f(x,e.ha[4]*s*e.Ba+s*(e.Ya-e.ic*e.Ba)-1,e.ha[5]*r*e.Ca+r*(e.Za-e.jc*e.Ca)+1),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,u),t.vertexAttribPointer(1,2,t.FLOAT,!1,0,u+4*_),t.drawElements(t.TRIANGLES,e.indices.length,t.UNSIGNED_SHORT,p),u+=4*e.Ta.length,p+=2*e.indices.length}console.assert(u==4*_),console.assert(p==2*f)}}},this.canvas=function(){return e()&&t.canvas}},c=i.onRuntimeInitialized;i.onRuntimeInitialized=function(){function e(e){switch(e){case f.srcOver:return"source-over";case f.screen:return"screen";case f.overlay:return"overlay";case f.darken:return"darken";case f.lighten:return"lighten";case f.colorDodge:return"color-dodge";case f.colorBurn:return"color-burn";case f.hardLight:return"hard-light";case f.softLight:return"soft-light";case f.difference:return"difference";case f.exclusion:return"exclusion";case f.multiply:return"multiply";case f.hue:return"hue";case f.saturation:return"saturation";case f.color:return"color";case f.luminosity:return"luminosity"}}function t(e){return"rgba("+((16711680&e)>>>16)+","+((65280&e)>>>8)+","+((255&e)>>>0)+","+((4278190080&e)>>>24)/255+")"}function a(){0<E.length&&(_.Qb(S.drawWidth(),S.drawHeight(),E,T,I),E=[],I=T=0,S.reset(512,512));for(const e of w){for(const t of e.H)t();e.H=[]}w.clear()}c&&c();var n=i.RenderPaintStyle;const s=i.RenderPath,r=i.RenderPaint,d=i.Renderer,l=i.StrokeCap,h=i.StrokeJoin,f=i.BlendMode,u=n.fill,b=n.stroke,p=i.FillRule.evenOdd;let m=1;var g=i.RenderImage.extend("CanvasRenderImage",{__construct:function({la:e,xa:t}={}){this.__parent.__construct.call(this),this.Ka=m,m=m+1&2147483647||1,this.la=e,this.xa=t},__destruct:function(){this.Ja&&(_.Mb(this.Ja),URL.revokeObjectURL(this.Wa)),this.__parent.__destruct.call(this)},decode:function(e){var t=this;t.xa&&t.xa(t);var a=new Image;t.Wa=URL.createObjectURL(new Blob([e],{type:"image/png"})),a.onload=function(){t.Fb=a,t.Ja=_.Lb(a),t.size(a.width,a.height),t.la&&t.la(t)},a.src=t.Wa}}),v=s.extend("CanvasRenderPath",{__construct:function(){this.__parent.__construct.call(this),this.T=new Path2D},rewind:function(){this.T=new Path2D},addPath:function(e,t,a,n,i,x,s){var r=this.T,o=r.addPath;e=e.T;const _=new DOMMatrix;_.a=t,_.b=a,_.c=n,_.d=i,_.e=x,_.f=s,o.call(r,e,_)},fillRule:function(e){this.Va=e},moveTo:function(e,t){this.T.moveTo(e,t)},lineTo:function(e,t){this.T.lineTo(e,t)},cubicTo:function(e,t,a,n,i,x){this.T.bezierCurveTo(e,t,a,n,i,x)},close:function(){this.T.closePath()}}),y=r.extend("CanvasRenderPaint",{color:function(e){this.Xa=t(e)},thickness:function(e){this.Ib=e},join:function(e){switch(e){case h.miter:this.Ia="miter";break;case h.round:this.Ia="round";break;case h.bevel:this.Ia="bevel"}},cap:function(e){switch(e){case l.butt:this.Ha="butt";break;case l.round:this.Ha="round";break;case l.square:this.Ha="square"}},style:function(e){this.Hb=e},blendMode:function(t){this.Eb=e(t)},clearGradient:function(){this.ja=null},linearGradient:function(e,t,a,n){this.ja={yb:e,zb:t,bb:a,cb:n,Ra:[]}},radialGradient:function(e,t,a,n){this.ja={yb:e,zb:t,bb:a,cb:n,Ra:[],ec:!0}},addStop:function(e,t){this.ja.Ra.push({color:e,stop:t})},completeGradient:function(){},draw:function(e,a,n){let i=this.Hb;var x=this.Xa,s=this.ja;if(e.globalCompositeOperation=this.Eb,null!=s){x=s.yb;var r=s.zb;const a=s.bb;var o=s.cb;const n=s.Ra;s.ec?(s=a-x,o-=r,x=e.createRadialGradient(x,r,0,x,r,Math.sqrt(s*s+o*o))):x=e.createLinearGradient(x,r,a,o);for(let e=0,a=n.length;e<a;e++)r=n[e],x.addColorStop(r.stop,t(r.color));this.Xa=x,this.ja=null}switch(i){case b:e.strokeStyle=x,e.lineWidth=this.Ib,e.lineCap=this.Ha,e.lineJoin=this.Ia,e.stroke(a);break;case u:e.fillStyle=x,e.fill(a,n)}}});const w=new Set;let S=null,E=[],T=0,I=0;var A=i.CanvasRenderer=d.extend("Renderer",{__construct:function(e){this.__parent.__construct.call(this),this.S=[1,0,0,1,0,0],this.C=e.getContext("2d"),this.Ua=e,this.H=[]},save:function(){this.S.push(...this.S.slice(this.S.length-6)),this.H.push(this.C.save.bind(this.C))},restore:function(){const e=this.S.length-6;if(6>e)throw"restore() called without matching save().";this.S.splice(e),this.H.push(this.C.restore.bind(this.C))},transform:function(e,t,a,n,i,x){const s=this.S,r=s.length-6;s.splice(r,6,s[r]*e+s[r+2]*t,s[r+1]*e+s[r+3]*t,s[r]*a+s[r+2]*n,s[r+1]*a+s[r+3]*n,s[r]*i+s[r+2]*x+s[r+4],s[r+1]*i+s[r+3]*x+s[r+5]),this.H.push(this.C.transform.bind(this.C,e,t,a,n,i,x))},rotate:function(e){const t=Math.sin(e);e=Math.cos(e),this.transform(e,t,-t,e,0,0)},_drawPath:function(e,t){this.H.push(t.draw.bind(t,this.C,e.T,e.Va===p?"evenodd":"nonzero"))},_drawRiveImage:function(t,a,n){var i=t.Fb;if(i){var x=this.C,s=e(a);this.H.push((function(){x.globalCompositeOperation=s,x.globalAlpha=n,x.drawImage(i,0,0),x.globalAlpha=1}))}},_getMatrix:function(e){const t=this.S,a=t.length-6;for(let n=0;6>n;++n)e[n]=t[a+n]},_drawImageMesh:function(t,n,x,s,r,o,c,d,l,h){var f=this.C.canvas.width,u=this.C.canvas.height;const b=l-c,p=h-d;c=Math.max(c,0),d=Math.max(d,0),l=Math.min(l,f),h=Math.min(h,u);const m=l-c,g=h-d;if(console.assert(m<=Math.min(b,f)),console.assert(g<=Math.min(p,u)),!(0>=m||0>=g)){l=m<b||g<p,f=h=1;var v=Math.ceil(m*h),y=Math.ceil(g*f);u=_.hc(),v>u&&(h*=u/v,v=u),y>u&&(f*=u/y,y=u),S||(S=new i.DynamicRectanizer(u),S.reset(512,512)),0>(u=S.addRect(v,y))&&(a(),w.add(this),u=S.addRect(v,y),console.assert(0<=u));var A=65535&u,C=u>>16;E.push({ha:this.S.slice(this.S.length-6),image:t,Ya:A,Za:C,ic:c,jc:d,Ac:v,jb:y,Ba:h,Ca:f,Ta:new Float32Array(s),Db:new Float32Array(r),indices:new Uint16Array(o),mc:l,wb:t.Ka<<1|(l?1:0)}),T+=s.length,I+=o.length;var P=this.C,L=e(n);this.H.push((function(){P.save(),P.resetTransform(),P.globalCompositeOperation=L,P.globalAlpha=x;const e=_.canvas();e&&P.drawImage(e,A,C,v,y,c,d,m,g),P.restore()}))}},_clipPath:function(e){this.H.push(this.C.clip.bind(this.C,e.T,e.Va===p?"evenodd":"nonzero"))},clear:function(){w.add(this),this.H.push(this.C.clearRect.bind(this.C,0,0,this.Ua.width,this.Ua.height))},flush:function(){},translate:function(e,t){this.transform(1,0,0,1,e,t)}});i.makeRenderer=function(e){const t=new A(e),a=t.C;return new Proxy(t,{get(e,n){if("function"==typeof e[n])return function(...t){return e[n].apply(e,t)};if("function"==typeof a[n]){if(-1<o.indexOf(n))throw Error("RiveException: Method call to '"+n+"()' is not allowed, as the renderer cannot immediately pass through the return                 values of any canvas 2d context methods.");return function(...e){t.H.push(a[n].bind(a,...e))}}return e[n]},set(e,n,i){if(n in a)return t.H.push((()=>{a[n]=i})),!0}})},i.decodeImage=function(e,t){new g({la:t}).decode(e)},i.renderFactory={makeRenderPaint:function(){return new y},makeRenderPath:function(){return new v},makeRenderImage:function(){let e=P;return new g({xa:()=>{e.total++},la:()=>{if(e.loaded++,e.loaded===e.total){const t=e.ready;t&&(t(),e.ready=null)}}})}};let C=i.load,P=null;i.load=function(e,t,a=!0){const n=new i.FallbackFileAssetLoader;return void 0!==t&&n.addLoader(t),a&&(t=new i.CDNFileAssetLoader,n.addLoader(t)),new Promise((function(t){let a=null;P={total:0,loaded:0,ready:function(){t(a)}},a=C(e,n),0==P.total&&t(a)}))},n=new x,i.requestAnimationFrame=n.requestAnimationFrame.bind(n),i.cancelAnimationFrame=n.cancelAnimationFrame.bind(n),i.enableFPSCounter=n.Rb.bind(n),i.disableFPSCounter=n.Ob,n.ob=a,i.resolveAnimationFrame=a,i.cleanup=function(){S&&S.delete()}};var d,l,h=Object.assign({},i),f="./this.program",u="object"==typeof window,b="function"==typeof importScripts,p="";(u||b)&&(b?p=self.location.href:"undefined"!=typeof document&&document.currentScript&&(p=document.currentScript.src),n&&(p=n),p=0!==p.indexOf("blob:")?p.substr(0,p.replace(/[?#].*/,"").lastIndexOf("/")+1):"",b&&(l=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),d=(e,t,a)=>{var n=new XMLHttpRequest;n.open("GET",e,!0),n.responseType="arraybuffer",n.onload=()=>{200==n.status||0==n.status&&n.response?t(n.response):a()},n.onerror=a,n.send(null)});var m,g=i.print||console.log.bind(console),v=i.printErr||console.error.bind(console);Object.assign(i,h),h=null,i.thisProgram&&(f=i.thisProgram),i.wasmBinary&&(m=i.wasmBinary),i.noExitRuntime,"object"!=typeof WebAssembly&&H("no native wasm support detected");var y,w,S,E,T,I,A,C,P,L,k=!1;function D(){var e=y.buffer;i.HEAP8=S=new Int8Array(e),i.HEAP16=T=new Int16Array(e),i.HEAP32=A=new Int32Array(e),i.HEAPU8=E=new Uint8Array(e),i.HEAPU16=I=new Uint16Array(e),i.HEAPU32=C=new Uint32Array(e),i.HEAPF32=P=new Float32Array(e),i.HEAPF64=L=new Float64Array(e)}var M,O=[],N=[],B=[];function z(){var e=i.preRun.shift();O.unshift(e)}var j,R=0,F=null,U=null;function H(e){throw i.onAbort&&i.onAbort(e),v(e="Aborted("+e+")"),k=!0,e=new WebAssembly.RuntimeError(e+". Build with -sASSERTIONS for more info."),a(e),e}function G(e){return e.startsWith("data:application/octet-stream;base64,")}if(!G(j="canvas_advanced.wasm")){var W=j;j=i.locateFile?i.locateFile(W,p):p+W}function V(e){if(e==j&&m)return new Uint8Array(m);if(l)return l(e);throw"both async and sync fetching of the wasm failed"}function Y(e,t,a){return function(e){if(!m&&(u||b)){if("function"==typeof fetch&&!e.startsWith("file://"))return fetch(e,{credentials:"same-origin"}).then((t=>{if(!t.ok)throw"failed to load wasm binary file at '"+e+"'";return t.arrayBuffer()})).catch((()=>V(e)));if(d)return new Promise(((t,a)=>{d(e,(e=>t(new Uint8Array(e))),a)}))}return Promise.resolve().then((()=>V(e)))}(e).then((e=>WebAssembly.instantiate(e,t))).then((e=>e)).then(a,(e=>{v("failed to asynchronously prepare wasm: "+e),H(e)}))}var $,X,q={437756:(e,t,a,n,i)=>{if("undefined"==typeof window||void 0===(window.AudioContext||window.webkitAudioContext))return 0;if(void 0===window.h){window.h={Aa:0},window.h.I={},window.h.I.ya=e,window.h.I.capture=t,window.h.I.La=a,window.h.ga={},window.h.ga.stopped=n,window.h.ga.xb=i;let x=window.h;x.D=[],x.yc=function(e){for(var t=0;t<x.D.length;++t)if(null==x.D[t])return x.D[t]=e,t;return x.D.push(e),x.D.length-1},x.Cb=function(e){for(x.D[e]=null;0<x.D.length&&null==x.D[x.D.length-1];)x.D.pop()},x.Sc=function(e){for(var t=0;t<x.D.length;++t)if(x.D[t]==e)return x.Cb(t)},x.ra=function(e){return x.D[e]},x.Bb=["touchend","click"],x.unlock=function(){for(var e=0;e<x.D.length;++e){var t=x.D[e];null!=t&&null!=t.J&&t.state===x.ga.xb&&t.J.resume().then((()=>{Pa(t.pb)}),(e=>{console.error("Failed to resume audiocontext",e)}))}x.Bb.map((function(e){document.removeEventListener(e,x.unlock,!0)}))},x.Bb.map((function(e){document.addEventListener(e,x.unlock,!0)}))}return window.h.Aa+=1,1},439934:()=>{void 0!==window.h&&(--window.h.Aa,0===window.h.Aa&&delete window.h)},440098:()=>void 0!==navigator.mediaDevices&&void 0!==navigator.mediaDevices.getUserMedia,440202:()=>{try{var e=new(window.AudioContext||window.webkitAudioContext),t=e.sampleRate;return e.close(),t}catch(e){return 0}},440373:(e,t,a,n,i,x)=>{if(void 0===window.h)return-1;var s={},r={};return e==window.h.I.ya&&0!=a&&(r.sampleRate=a),s.J=new(window.AudioContext||window.webkitAudioContext)(r),s.J.suspend(),s.state=window.h.ga.stopped,a=0,e!=window.h.I.ya&&(a=t),s.Z=s.J.createScriptProcessor(n,a,t),s.Z.onaudioprocess=function(a){if(null!=s.sa&&0!=s.sa.length||(s.sa=new Float32Array(P.buffer,i,n*t)),e==window.h.I.capture||e==window.h.I.La){for(var r=0;r<t;r+=1)for(var o=a.inputBuffer.getChannelData(r),_=s.sa,c=0;c<n;c+=1)_[c*t+r]=o[c];ka(x,n,i)}if(e==window.h.I.ya||e==window.h.I.La)for(Da(x,n,i),r=0;r<a.outputBuffer.numberOfChannels;++r)for(o=a.outputBuffer.getChannelData(r),_=s.sa,c=0;c<n;c+=1)o[c]=_[c*t+r];else for(r=0;r<a.outputBuffer.numberOfChannels;++r)a.outputBuffer.getChannelData(r).fill(0)},e!=window.h.I.capture&&e!=window.h.I.La||navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then((function(e){s.Da=s.J.createMediaStreamSource(e),s.Da.connect(s.Z),s.Z.connect(s.J.destination)})).catch((function(e){console.log("Failed to get user media: "+e)})),e==window.h.I.ya&&s.Z.connect(s.J.destination),s.pb=x,window.h.yc(s)},443250:e=>window.h.ra(e).J.sampleRate,443323:e=>{void 0!==(e=window.h.ra(e)).Z&&(e.Z.onaudioprocess=function(){},e.Z.disconnect(),e.Z=void 0),void 0!==e.Da&&(e.Da.disconnect(),e.Da=void 0),e.J.close(),e.J=void 0,e.pb=void 0},443723:e=>{window.h.Cb(e)},443773:e=>{(e=window.h.ra(e)).J.resume(),e.state=window.h.ga.xb},443912:e=>{(e=window.h.ra(e)).J.suspend(),e.state=window.h.ga.stopped}},K=e=>{for(;0<e.length;)e.shift()(i)},Z=(e,t)=>{for(var a=0,n=e.length-1;0<=n;n--){var i=e[n];"."===i?e.splice(n,1):".."===i?(e.splice(n,1),a++):a&&(e.splice(n,1),a--)}if(t)for(;a;a--)e.unshift("..");return e},J=e=>{var t="/"===e.charAt(0),a="/"===e.substr(-1);return(e=Z(e.split("/").filter((e=>!!e)),!t).join("/"))||t||(e="."),e&&a&&(e+="/"),(t?"/":"")+e},Q=e=>{var t=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(e).slice(1);return e=t[0],t=t[1],e||t?(t&&(t=t.substr(0,t.length-1)),e+t):"."},ee=e=>{if("/"===e)return"/";var t=(e=(e=J(e)).replace(/\/$/,"")).lastIndexOf("/");return-1===t?e:e.substr(t+1)},te=e=>(te=(()=>{if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues)return e=>crypto.getRandomValues(e);H("initRandomDevice")})())(e);function ae(){for(var e="",t=!1,a=arguments.length-1;-1<=a&&!t;a--){if("string"!=typeof(t=0<=a?arguments[a]:"/"))throw new TypeError("Arguments to path.resolve must be strings");if(!t)return"";e=t+"/"+e,t="/"===t.charAt(0)}return(t?"/":"")+(e=Z(e.split("/").filter((e=>!!e)),!t).join("/"))||"."}var ne="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0,ie=(e,t,a)=>{var n=t+a;for(a=t;e[a]&&!(a>=n);)++a;if(16<a-t&&e.buffer&&ne)return ne.decode(e.subarray(t,a));for(n="";t<a;){var i=e[t++];if(128&i){var x=63&e[t++];if(192==(224&i))n+=String.fromCharCode((31&i)<<6|x);else{var s=63&e[t++];65536>(i=224==(240&i)?(15&i)<<12|x<<6|s:(7&i)<<18|x<<12|s<<6|63&e[t++])?n+=String.fromCharCode(i):(i-=65536,n+=String.fromCharCode(55296|i>>10,56320|1023&i))}}else n+=String.fromCharCode(i)}return n},xe=[],se=e=>{for(var t=0,a=0;a<e.length;++a){var n=e.charCodeAt(a);127>=n?t++:2047>=n?t+=2:55296<=n&&57343>=n?(t+=4,++a):t+=3}return t},re=(e,t,a,n)=>{if(!(0<n))return 0;var i=a;n=a+n-1;for(var x=0;x<e.length;++x){var s=e.charCodeAt(x);if(55296<=s&&57343>=s&&(s=65536+((1023&s)<<10)|1023&e.charCodeAt(++x)),127>=s){if(a>=n)break;t[a++]=s}else{if(2047>=s){if(a+1>=n)break;t[a++]=192|s>>6}else{if(65535>=s){if(a+2>=n)break;t[a++]=224|s>>12}else{if(a+3>=n)break;t[a++]=240|s>>18,t[a++]=128|s>>12&63}t[a++]=128|s>>6&63}t[a++]=128|63&s}}return t[a]=0,a-i};function oe(e,t){var a=Array(se(e)+1);return e=re(e,a,0,a.length),t&&(a.length=e),a}var _e=[];function ce(e,t){_e[e]={input:[],F:[],V:t},Re(e,de)}var de={open:function(e){var t=_e[e.node.za];if(!t)throw new Ie(43);e.s=t,e.seekable=!1},close:function(e){e.s.V.qa(e.s)},qa:function(e){e.s.V.qa(e.s)},read:function(e,t,a,n){if(!e.s||!e.s.V.ib)throw new Ie(60);for(var i=0,x=0;x<n;x++){try{var s=e.s.V.ib(e.s)}catch(e){throw new Ie(29)}if(void 0===s&&0===i)throw new Ie(6);if(null==s)break;i++,t[a+x]=s}return i&&(e.node.timestamp=Date.now()),i},write:function(e,t,a,n){if(!e.s||!e.s.V.Oa)throw new Ie(60);try{for(var i=0;i<n;i++)e.s.V.Oa(e.s,t[a+i])}catch(e){throw new Ie(29)}return n&&(e.node.timestamp=Date.now()),i}},le={ib:function(){e:{if(!xe.length){var e=null;if("undefined"!=typeof window&&"function"==typeof window.prompt?null!==(e=window.prompt("Input: "))&&(e+="\n"):"function"==typeof readline&&null!==(e=readline())&&(e+="\n"),!e){e=null;break e}xe=oe(e,!0)}e=xe.shift()}return e},Oa:function(e,t){null===t||10===t?(g(ie(e.F,0)),e.F=[]):0!=t&&e.F.push(t)},qa:function(e){e.F&&0<e.F.length&&(g(ie(e.F,0)),e.F=[])},bc:function(){return{Fc:25856,Hc:5,Ec:191,Gc:35387,Dc:[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}},cc:function(){return 0},dc:function(){return[24,80]}},he={Oa:function(e,t){null===t||10===t?(v(ie(e.F,0)),e.F=[]):0!=t&&e.F.push(t)},qa:function(e){e.F&&0<e.F.length&&(v(ie(e.F,0)),e.F=[])}};function fe(e,t){var a=e.j?e.j.length:0;a>=t||(t=Math.max(t,a*(1048576>a?2:1.125)>>>0),0!=a&&(t=Math.max(t,256)),a=e.j,e.j=new Uint8Array(t),0<e.v&&e.j.set(a.subarray(0,e.v),0))}var ue,be,pe,me,ge={O:null,U:()=>ge.createNode(null,"/",16895,0),createNode(e,t,a,n){if(24576==(61440&a)||4096==(61440&a))throw new Ie(63);return ge.O||(ge.O={dir:{node:{Y:ge.l.Y,P:ge.l.P,ka:ge.l.ka,va:ge.l.va,ub:ge.l.ub,Ab:ge.l.Ab,vb:ge.l.vb,sb:ge.l.sb,Ea:ge.l.Ea},stream:{ba:ge.m.ba}},file:{node:{Y:ge.l.Y,P:ge.l.P},stream:{ba:ge.m.ba,read:ge.m.read,write:ge.m.write,pa:ge.m.pa,lb:ge.m.lb,nb:ge.m.nb}},link:{node:{Y:ge.l.Y,P:ge.l.P,ma:ge.l.ma},stream:{}},$a:{node:{Y:ge.l.Y,P:ge.l.P},stream:je}}),16384==(61440&(a=De(e,t,a,n)).mode)?(a.l=ge.O.dir.node,a.m=ge.O.dir.stream,a.j={}):32768==(61440&a.mode)?(a.l=ge.O.file.node,a.m=ge.O.file.stream,a.v=0,a.j=null):40960==(61440&a.mode)?(a.l=ge.O.link.node,a.m=ge.O.link.stream):8192==(61440&a.mode)&&(a.l=ge.O.$a.node,a.m=ge.O.$a.stream),a.timestamp=Date.now(),e&&(e.j[t]=a,e.timestamp=a.timestamp),a},Kc:e=>e.j?e.j.subarray?e.j.subarray(0,e.v):new Uint8Array(e.j):new Uint8Array(0),l:{Y(e){var t={};return t.Jc=8192==(61440&e.mode)?e.id:1,t.Mc=e.id,t.mode=e.mode,t.Oc=1,t.uid=0,t.Lc=0,t.za=e.za,16384==(61440&e.mode)?t.size=4096:32768==(61440&e.mode)?t.size=e.v:40960==(61440&e.mode)?t.size=e.link.length:t.size=0,t.Bc=new Date(e.timestamp),t.Nc=new Date(e.timestamp),t.Ic=new Date(e.timestamp),t.Jb=4096,t.Cc=Math.ceil(t.size/t.Jb),t},P(e,t){if(void 0!==t.mode&&(e.mode=t.mode),void 0!==t.timestamp&&(e.timestamp=t.timestamp),void 0!==t.size&&(t=t.size,e.v!=t))if(0==t)e.j=null,e.v=0;else{var a=e.j;e.j=new Uint8Array(t),a&&e.j.set(a.subarray(0,Math.min(t,e.v))),e.v=t}},ka(){throw Ae[44]},va:(e,t,a,n)=>ge.createNode(e,t,a,n),ub(e,t,a){if(16384==(61440&e.mode)){try{var n=ke(t,a)}catch(e){}if(n)for(var i in n.j)throw new Ie(55)}delete e.parent.j[e.name],e.parent.timestamp=Date.now(),e.name=a,t.j[a]=e,t.timestamp=e.parent.timestamp,e.parent=t},Ab(e,t){delete e.j[t],e.timestamp=Date.now()},vb(e,t){var a,n=ke(e,t);for(a in n.j)throw new Ie(55);delete e.j[t],e.timestamp=Date.now()},sb(e){var t,a=[".",".."];for(t in e.j)e.j.hasOwnProperty(t)&&a.push(t);return a},Ea:(e,t,a)=>((e=ge.createNode(e,t,41471,0)).link=a,e),ma(e){if(40960!=(61440&e.mode))throw new Ie(28);return e.link}},m:{read(e,t,a,n,i){var x=e.node.j;if(i>=e.node.v)return 0;if(8<(e=Math.min(e.node.v-i,n))&&x.subarray)t.set(x.subarray(i,i+e),a);else for(n=0;n<e;n++)t[a+n]=x[i+n];return e},write(e,t,a,n,i,x){if(t.buffer===S.buffer&&(x=!1),!n)return 0;if((e=e.node).timestamp=Date.now(),t.subarray&&(!e.j||e.j.subarray)){if(x)return e.j=t.subarray(a,a+n),e.v=n;if(0===e.v&&0===i)return e.j=t.slice(a,a+n),e.v=n;if(i+n<=e.v)return e.j.set(t.subarray(a,a+n),i),n}if(fe(e,i+n),e.j.subarray&&t.subarray)e.j.set(t.subarray(a,a+n),i);else for(x=0;x<n;x++)e.j[i+x]=t[a+x];return e.v=Math.max(e.v,i+n),n},ba(e,t,a){if(1===a?t+=e.position:2===a&&32768==(61440&e.node.mode)&&(t+=e.node.v),0>t)throw new Ie(28);return t},pa(e,t,a){fe(e.node,t+a),e.node.v=Math.max(e.node.v,t+a)},lb(e,t,a,n,i){if(32768!=(61440&e.node.mode))throw new Ie(43);if(e=e.node.j,2&i||e.buffer!==S.buffer){if((0<a||a+t<e.length)&&(e=e.subarray?e.subarray(a,a+t):Array.prototype.slice.call(e,a,a+t)),a=!0,H(),!(t=void 0))throw new Ie(48);S.set(e,t)}else a=!1,t=e.byteOffset;return{o:t,M:a}},nb:(e,t,a,n)=>(ge.m.write(e,t,0,n,a,!1),0)}},ve=null,ye={},we=[],Se=1,Ee=null,Te=!0,Ie=null,Ae={},Ce=(e,t={})=>{if(!(e=ae(e)))return{path:"",node:null};if(8<(t=Object.assign({gb:!0,Qa:0},t)).Qa)throw new Ie(32);e=e.split("/").filter((e=>!!e));for(var a=ve,n="/",i=0;i<e.length;i++){var x=i===e.length-1;if(x&&t.parent)break;if(a=ke(a,e[i]),n=J(n+"/"+e[i]),a.wa&&(!x||x&&t.gb)&&(a=a.wa.root),!x||t.fb)for(x=0;40960==(61440&a.mode);)if(a=We(n),n=ae(Q(n),a),a=Ce(n,{Qa:t.Qa+1}).node,40<x++)throw new Ie(32)}return{path:n,node:a}},Pe=e=>{for(var t;;){if(e===e.parent)return e=e.U.mb,t?"/"!==e[e.length-1]?`${e}/${t}`:e+t:e;t=t?`${e.name}/${t}`:e.name,e=e.parent}},Le=(e,t)=>{for(var a=0,n=0;n<t.length;n++)a=(a<<5)-a+t.charCodeAt(n)|0;return(e+a>>>0)%Ee.length},ke=(e,t)=>{var a;if(a=(a=Oe(e,"x"))?a:e.l.ka?0:2)throw new Ie(a,e);for(a=Ee[Le(e.id,t)];a;a=a.lc){var n=a.name;if(a.parent.id===e.id&&n===t)return a}return e.l.ka(e,t)},De=(e,t,a,n)=>(e=new Sa(e,t,a,n),t=Le(e.parent.id,e.name),e.lc=Ee[t],Ee[t]=e),Me=e=>{var t=["r","w","rw"][3&e];return 512&e&&(t+="w"),t},Oe=(e,t)=>Te?0:!t.includes("r")||292&e.mode?t.includes("w")&&!(146&e.mode)||t.includes("x")&&!(73&e.mode)?2:0:2,Ne=(e,t)=>{try{return ke(e,t),20}catch(e){}return Oe(e,"wx")},Be=e=>{if(!(e=we[e]))throw new Ie(8);return e},ze=(e,t=-1)=>(pe||((pe=function(){this.h={}}).prototype={},Object.defineProperties(pe.prototype,{object:{get(){return this.node},set(e){this.node=e}},flags:{get(){return this.h.flags},set(e){this.h.flags=e}},position:{get(){return this.h.position},set(e){this.h.position=e}}})),e=Object.assign(new pe,e),-1==t&&(t=(()=>{for(var e=0;4096>=e;e++)if(!we[e])return e;throw new Ie(33)})()),e.X=t,we[t]=e),je={open:e=>{e.m=ye[e.node.za].m,e.m.open&&e.m.open(e)},ba:()=>{throw new Ie(70)}},Re=(e,t)=>{ye[e]={m:t}},Fe=(e,t)=>{var a="/"===t,n=!t;if(a&&ve)throw new Ie(10);if(!a&&!n){var i=Ce(t,{gb:!1});if(t=i.path,(i=i.node).wa)throw new Ie(10);if(16384!=(61440&i.mode))throw new Ie(54)}t={type:e,Qc:{},mb:t,kc:[]},(e=e.U(t)).U=t,t.root=e,a?ve=e:i&&(i.wa=t,i.U&&i.U.kc.push(t))},Ue=(e,t,a)=>{var n=Ce(e,{parent:!0}).node;if(!(e=ee(e))||"."===e||".."===e)throw new Ie(28);var i=Ne(n,e);if(i)throw new Ie(i);if(!n.l.va)throw new Ie(63);return n.l.va(n,e,t,a)},He=(e,t,a)=>{void 0===a&&(a=t,t=438),Ue(e,8192|t,a)},Ge=(e,t)=>{if(!ae(e))throw new Ie(44);var a=Ce(t,{parent:!0}).node;if(!a)throw new Ie(44);t=ee(t);var n=Ne(a,t);if(n)throw new Ie(n);if(!a.l.Ea)throw new Ie(63);a.l.Ea(a,t,e)},We=e=>{if(!(e=Ce(e).node))throw new Ie(44);if(!e.l.ma)throw new Ie(28);return ae(Pe(e.parent),e.l.ma(e))},Ve=(e,t,a)=>{if(""===e)throw new Ie(44);if("string"==typeof t){var n={r:0,"r+":2,w:577,"w+":578,a:1089,"a+":1090}[t];if(void 0===n)throw Error(`Unknown file open mode: ${t}`);t=n}if(a=64&t?4095&(void 0===a?438:a)|32768:0,"object"==typeof e)var x=e;else{e=J(e);try{x=Ce(e,{fb:!(131072&t)}).node}catch(e){}}if(n=!1,64&t)if(x){if(128&t)throw new Ie(20)}else x=Ue(e,a,0),n=!0;if(!x)throw new Ie(44);if(8192==(61440&x.mode)&&(t&=-513),65536&t&&16384!=(61440&x.mode))throw new Ie(54);if(!n&&(a=x?40960==(61440&x.mode)?32:16384==(61440&x.mode)&&("r"!==Me(t)||512&t)?31:Oe(x,Me(t)):44))throw new Ie(a);if(512&t&&!n){if(!(a="string"==typeof(a=x)?Ce(a,{fb:!0}).node:a).l.P)throw new Ie(63);if(16384==(61440&a.mode))throw new Ie(31);if(32768!=(61440&a.mode))throw new Ie(28);if(n=Oe(a,"w"))throw new Ie(n);a.l.P(a,{size:0,timestamp:Date.now()})}return t&=-131713,(x=ze({node:x,path:Pe(x),flags:t,seekable:!0,position:0,m:x.m,zc:[],error:!1})).m.open&&x.m.open(x),!i.logReadFiles||1&t||(me||(me={}),e in me||(me[e]=1)),x},Ye=(e,t,a)=>{if(null===e.X)throw new Ie(8);if(!e.seekable||!e.m.ba)throw new Ie(70);if(0!=a&&1!=a&&2!=a)throw new Ie(28);e.position=e.m.ba(e,t,a),e.zc=[]},$e=()=>{Ie||((Ie=function(e,t){this.name="ErrnoError",this.node=t,this.pc=function(e){this.aa=e},this.pc(e),this.message="FS error"}).prototype=Error(),Ie.prototype.constructor=Ie,[44].forEach((e=>{Ae[e]=new Ie(e),Ae[e].stack="<generic error, no stack>"})))},Xe=(e,t,a)=>{e=J("/dev/"+e);var n=function(e,t){var a=0;return e&&(a|=365),t&&(a|=146),a}(!!t,!!a);be||(be=64);var i=be++<<8;Re(i,{open:e=>{e.seekable=!1},close:()=>{a&&a.buffer&&a.buffer.length&&a(10)},read:(e,a,n,i)=>{for(var x=0,s=0;s<i;s++){try{var r=t()}catch(e){throw new Ie(29)}if(void 0===r&&0===x)throw new Ie(6);if(null==r)break;x++,a[n+s]=r}return x&&(e.node.timestamp=Date.now()),x},write:(e,t,n,i)=>{for(var x=0;x<i;x++)try{a(t[n+x])}catch(e){throw new Ie(29)}return i&&(e.node.timestamp=Date.now()),x}}),He(e,n,i)},qe={},Ke=void 0;function Ze(){return A[(Ke+=4)-4>>2]}function Je(e){if(void 0===e)return"_unknown";var t=(e=e.replace(/[^a-zA-Z0-9_]/g,"$")).charCodeAt(0);return 48<=t&&57>=t?`_${e}`:e}function Qe(e,t){return e=Je(e),{[e]:function(){return t.apply(this,arguments)}}[e]}function et(){this.M=[void 0],this.hb=[]}var tt=new et,at=void 0;function nt(e){throw new at(e)}var it=e=>(e||nt("Cannot use deleted val. handle = "+e),tt.get(e).value),xt=e=>{switch(e){case void 0:return 1;case null:return 2;case!0:return 3;case!1:return 4;default:return tt.pa({tb:1,value:e})}};function st(e){var t=Error,a=Qe(e,(function(t){this.name=e,this.message=t,void 0!==(t=Error(t).stack)&&(this.stack=this.toString()+"\n"+t.replace(/^Error(:[^\n]*)?\n/,""))}));return a.prototype=Object.create(t.prototype),a.prototype.constructor=a,a.prototype.toString=function(){return void 0===this.message?this.name:`${this.name}: ${this.message}`},a}var rt=void 0,ot=void 0;function _t(e){for(var t="";E[e];)t+=ot[E[e++]];return t}var ct=[];function dt(){for(;ct.length;){var e=ct.pop();e.g.fa=!1,e.delete()}}var lt=void 0,ht={};function ft(e,t){for(void 0===t&&nt("ptr should not be undefined");e.A;)t=e.na(t),e=e.A;return t}var ut={};function bt(e){var t=_t(e=Oa(e));return Aa(e),t}function pt(e,t){var a=ut[e];return void 0===a&&nt(t+" has unknown type "+bt(e)),a}function mt(){}var gt=!1;function vt(e){--e.count.value,0===e.count.value&&(e.G?e.L.W(e.G):e.u.i.W(e.o))}function yt(e,t,a){return t===a?e:void 0===a.A||null===(e=yt(e,t,a.A))?null:a.Pb(e)}var wt={},St=void 0;function Et(e){throw new St(e)}function Tt(e,t){return t.u&&t.o||Et("makeClassHandle requires ptr and ptrType"),!!t.L!=!!t.G&&Et("Both smartPtrType and smartPtr must be specified"),t.count={value:1},It(Object.create(e,{g:{value:t}}))}function It(e){return"undefined"==typeof FinalizationRegistry?(It=e=>e,e):(gt=new FinalizationRegistry((e=>{vt(e.g)})),mt=e=>{gt.unregister(e)},(It=e=>{var t=e.g;return t.G&&gt.register(e,{g:t},e),e})(e))}var At={};function Ct(e){for(;e.length;){var t=e.pop();e.pop()(t)}}function Pt(e){return this.fromWireType(A[e>>2])}var Lt={},kt={};function Dt(e,t,a){function n(t){(t=a(t)).length!==e.length&&Et("Mismatched type converter count");for(var n=0;n<e.length;++n)Ot(e[n],t[n])}e.forEach((function(e){kt[e]=t}));var i=Array(t.length),x=[],s=0;t.forEach(((e,t)=>{ut.hasOwnProperty(e)?i[t]=ut[e]:(x.push(e),Lt.hasOwnProperty(e)||(Lt[e]=[]),Lt[e].push((()=>{i[t]=ut[e],++s===x.length&&n(i)})))})),0===x.length&&n(i)}function Mt(e){switch(e){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError(`Unknown type size: ${e}`)}}function Ot(e,t,a={}){if(!("argPackAdvance"in t))throw new TypeError("registerType registeredInstance requires argPackAdvance");!function(e,t,a={}){var n=t.name;if(e||nt(`type "${n}" must have a positive integer typeid pointer`),ut.hasOwnProperty(e)){if(a.$b)return;nt(`Cannot register type '${n}' twice`)}ut[e]=t,delete kt[e],Lt.hasOwnProperty(e)&&(t=Lt[e],delete Lt[e],t.forEach((e=>e())))}(e,t,a)}function Nt(e){nt(e.g.u.i.name+" instance already deleted")}function Bt(){}function zt(e,t,a){if(void 0===e[t].B){var n=e[t];e[t]=function(){return e[t].B.hasOwnProperty(arguments.length)||nt(`Function '${a}' called with an invalid number of arguments (${arguments.length}) - expects one of (${e[t].B})!`),e[t].B[arguments.length].apply(this,arguments)},e[t].B=[],e[t].B[n.ea]=n}}function jt(e,t,a){i.hasOwnProperty(e)?((void 0===a||void 0!==i[e].B&&void 0!==i[e].B[a])&&nt(`Cannot register public name '${e}' twice`),zt(i,e,e),i.hasOwnProperty(a)&&nt(`Cannot register multiple overloads of a function with the same number of arguments (${a})!`),i[e].B[a]=t):(i[e]=t,void 0!==a&&(i[e].Pc=a))}function Rt(e,t,a,n,i,x,s,r){this.name=e,this.constructor=t,this.N=a,this.W=n,this.A=i,this.Ub=x,this.na=s,this.Pb=r,this.qb=[]}function Ft(e,t,a){for(;t!==a;)t.na||nt(`Expected null or instance of ${a.name}, got an instance of ${t.name}`),e=t.na(e),t=t.A;return e}function Ut(e,t){return null===t?(this.Na&&nt(`null is not a valid ${this.name}`),0):(t.g||nt(`Cannot pass "${aa(t)}" as a ${this.name}`),t.g.o||nt(`Cannot pass deleted object as a pointer of type ${this.name}`),Ft(t.g.o,t.g.u.i,this.i))}function Ht(e,t){if(null===t){if(this.Na&&nt(`null is not a valid ${this.name}`),this.ua){var a=this.Pa();return null!==e&&e.push(this.W,a),a}return 0}if(t.g||nt(`Cannot pass "${aa(t)}" as a ${this.name}`),t.g.o||nt(`Cannot pass deleted object as a pointer of type ${this.name}`),!this.ta&&t.g.u.ta&&nt(`Cannot convert argument of type ${t.g.L?t.g.L.name:t.g.u.name} to parameter type ${this.name}`),a=Ft(t.g.o,t.g.u.i,this.i),this.ua)switch(void 0===t.g.G&&nt("Passing raw pointer to smart pointer is illegal"),this.tc){case 0:t.g.L===this?a=t.g.G:nt(`Cannot convert argument of type ${t.g.L?t.g.L.name:t.g.u.name} to parameter type ${this.name}`);break;case 1:a=t.g.G;break;case 2:if(t.g.L===this)a=t.g.G;else{var n=t.clone();a=this.oc(a,xt((function(){n.delete()}))),null!==e&&e.push(this.W,a)}break;default:nt("Unsupporting sharing policy")}return a}function Gt(e,t){return null===t?(this.Na&&nt(`null is not a valid ${this.name}`),0):(t.g||nt(`Cannot pass "${aa(t)}" as a ${this.name}`),t.g.o||nt(`Cannot pass deleted object as a pointer of type ${this.name}`),t.g.u.ta&&nt(`Cannot convert argument of type ${t.g.u.name} to parameter type ${this.name}`),Ft(t.g.o,t.g.u.i,this.i))}function Wt(e,t,a,n){this.name=e,this.i=t,this.Na=a,this.ta=n,this.ua=!1,this.W=this.oc=this.Pa=this.rb=this.tc=this.nc=void 0,void 0!==t.A?this.toWireType=Ht:(this.toWireType=n?Ut:Gt,this.K=null)}function Vt(e,t,a){i.hasOwnProperty(e)||Et("Replacing nonexistant public symbol"),void 0!==i[e].B&&void 0!==a?i[e].B[a]=t:(i[e]=t,i[e].ea=a)}var Yt=[],$t=e=>{var t=Yt[e];return t||(e>=Yt.length&&(Yt.length=e+1),Yt[e]=t=M.get(e)),t};function Xt(e,t){var a=(e=_t(e)).includes("j")?((e,t)=>{var a=[];return function(){if(a.length=0,Object.assign(a,arguments),e.includes("j")){var n=i["dynCall_"+e];n=a&&a.length?n.apply(null,[t].concat(a)):n.call(null,t)}else n=$t(t).apply(null,a);return n}})(e,t):$t(t);return"function"!=typeof a&&nt(`unknown function pointer with signature ${e}: ${t}`),a}var qt=void 0;function Kt(e,t){var a=[],n={};throw t.forEach((function e(t){n[t]||ut[t]||(kt[t]?kt[t].forEach(e):(a.push(t),n[t]=!0))})),new qt(`${e}: `+a.map(bt).join([", "]))}function Zt(e,t,a,n,i){var x=t.length;2>x&&nt("argTypes array size mismatch! Must at least get return value and 'this' types!");var s=null!==t[1]&&null!==a,r=!1;for(a=1;a<t.length;++a)if(null!==t[a]&&void 0===t[a].K){r=!0;break}var o="void"!==t[0].name,_=x-2,c=Array(_),d=[],l=[];return function(){if(arguments.length!==_&&nt(`function ${e} called with ${arguments.length} arguments, expected ${_} args!`),l.length=0,d.length=s?2:1,d[0]=i,s){var a=t[1].toWireType(l,this);d[1]=a}for(var x=0;x<_;++x)c[x]=t[x+2].toWireType(l,arguments[x]),d.push(c[x]);if(x=n.apply(null,d),r)Ct(l);else for(var h=s?1:2;h<t.length;h++){var f=1===h?a:c[h-2];null!==t[h].K&&t[h].K(f)}return a=o?t[0].fromWireType(x):void 0}}function Jt(e,t){for(var a=[],n=0;n<e;n++)a.push(C[t+4*n>>2]);return a}function Qt(e,t,a){return e instanceof Object||nt(`${a} with invalid "this": ${e}`),e instanceof t.i.constructor||nt(`${a} incompatible with "this" of type ${e.constructor.name}`),e.g.o||nt(`cannot call emscripten binding method ${a} on deleted object`),Ft(e.g.o,e.g.u.i,t.i)}function ea(e){e>=tt.h&&0==--tt.get(e).tb&&tt.Zb(e)}function ta(e,t,a){switch(t){case 0:return function(e){return this.fromWireType((a?S:E)[e])};case 1:return function(e){return this.fromWireType((a?T:I)[e>>1])};case 2:return function(e){return this.fromWireType((a?A:C)[e>>2])};default:throw new TypeError("Unknown integer type: "+e)}}function aa(e){if(null===e)return"null";var t=typeof e;return"object"===t||"array"===t||"function"===t?e.toString():""+e}function na(e,t){switch(t){case 2:return function(e){return this.fromWireType(P[e>>2])};case 3:return function(e){return this.fromWireType(L[e>>3])};default:throw new TypeError("Unknown float type: "+e)}}function ia(e,t,a){switch(t){case 0:return a?function(e){return S[e]}:function(e){return E[e]};case 1:return a?function(e){return T[e>>1]}:function(e){return I[e>>1]};case 2:return a?function(e){return A[e>>2]}:function(e){return C[e>>2]};default:throw new TypeError("Unknown integer type: "+e)}}var xa="undefined"!=typeof TextDecoder?new TextDecoder("utf-16le"):void 0,sa=(e,t)=>{for(var a=e>>1,n=a+t/2;!(a>=n)&&I[a];)++a;if(32<(a<<=1)-e&&xa)return xa.decode(E.subarray(e,a));for(a="",n=0;!(n>=t/2);++n){var i=T[e+2*n>>1];if(0==i)break;a+=String.fromCharCode(i)}return a},ra=(e,t,a)=>{if(void 0===a&&(a=2147483647),2>a)return 0;var n=t;a=(a-=2)<2*e.length?a/2:e.length;for(var i=0;i<a;++i)T[t>>1]=e.charCodeAt(i),t+=2;return T[t>>1]=0,t-n},oa=e=>2*e.length,_a=(e,t)=>{for(var a=0,n="";!(a>=t/4);){var i=A[e+4*a>>2];if(0==i)break;++a,65536<=i?(i-=65536,n+=String.fromCharCode(55296|i>>10,56320|1023&i)):n+=String.fromCharCode(i)}return n},ca=(e,t,a)=>{if(void 0===a&&(a=2147483647),4>a)return 0;var n=t;a=n+a-4;for(var i=0;i<e.length;++i){var x=e.charCodeAt(i);if(55296<=x&&57343>=x&&(x=65536+((1023&x)<<10)|1023&e.charCodeAt(++i)),A[t>>2]=x,(t+=4)+4>a)break}return A[t>>2]=0,t-n},da=e=>{for(var t=0,a=0;a<e.length;++a){var n=e.charCodeAt(a);55296<=n&&57343>=n&&++a,t+=4}return t},la={};function ha(e){var t=la[e];return void 0===t?_t(e):t}var fa,ua=[],ba=[],pa=[],ma={},ga=()=>{if(!fa){var e,t={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:f||"./this.program"};for(e in ma)void 0===ma[e]?delete t[e]:t[e]=ma[e];var a=[];for(e in t)a.push(`${e}=${t[e]}`);fa=a}return fa},va=e=>0==e%4&&(0!=e%100||0==e%400),ya=[31,29,31,30,31,30,31,31,30,31,30,31],wa=[31,28,31,30,31,30,31,31,30,31,30,31];function Sa(e,t,a,n){e||(e=this),this.parent=e,this.U=e.U,this.wa=null,this.id=Se++,this.name=t,this.mode=a,this.l={},this.m={},this.za=n}Object.defineProperties(Sa.prototype,{read:{get:function(){return!(365&~this.mode)},set:function(e){e?this.mode|=365:this.mode&=-366}},write:{get:function(){return!(146&~this.mode)},set:function(e){e?this.mode|=146:this.mode&=-147}}}),$e(),Ee=Array(4096),Fe(ge,"/"),Ue("/tmp",16895,0),Ue("/home",16895,0),Ue("/home/web_user",16895,0),(()=>{Ue("/dev",16895,0),Re(259,{read:()=>0,write:(e,t,a,n)=>n}),He("/dev/null",259),ce(1280,le),ce(1536,he),He("/dev/tty",1280),He("/dev/tty1",1536);var e=new Uint8Array(1024),t=0,a=()=>(0===t&&(t=te(e).byteLength),e[--t]);Xe("random",a),Xe("urandom",a),Ue("/dev/shm",16895,0),Ue("/dev/shm/tmp",16895,0)})(),(()=>{Ue("/proc",16895,0);var e=Ue("/proc/self",16895,0);Ue("/proc/self/fd",16895,0),Fe({U:()=>{var t=De(e,"fd",16895,73);return t.l={ka:(e,t)=>{var a=Be(+t);return(e={parent:null,U:{mb:"fake"},l:{ma:()=>a.path}}).parent=e}},t}},"/proc/self/fd")})(),Object.assign(et.prototype,{get(e){return this.M[e]},has(e){return void 0!==this.M[e]},pa(e){var t=this.hb.pop()||this.M.length;return this.M[t]=e,t},Zb(e){this.M[e]=void 0,this.hb.push(e)}}),at=i.BindingError=class extends Error{constructor(e){super(e),this.name="BindingError"}},tt.M.push({value:void 0},{value:null},{value:!0},{value:!1}),tt.h=tt.M.length,i.count_emval_handles=function(){for(var e=0,t=tt.h;t<tt.M.length;++t)void 0!==tt.M[t]&&++e;return e},rt=i.PureVirtualError=st("PureVirtualError");for(var Ea=Array(256),Ta=0;256>Ta;++Ta)Ea[Ta]=String.fromCharCode(Ta);ot=Ea,i.getInheritedInstanceCount=function(){return Object.keys(ht).length},i.getLiveInheritedInstances=function(){var e,t=[];for(e in ht)ht.hasOwnProperty(e)&&t.push(ht[e]);return t},i.flushPendingDeletes=dt,i.setDelayFunction=function(e){lt=e,ct.length&&lt&&lt(dt)},St=i.InternalError=class extends Error{constructor(e){super(e),this.name="InternalError"}},Bt.prototype.isAliasOf=function(e){if(!(this instanceof Bt&&e instanceof Bt))return!1;var t=this.g.u.i,a=this.g.o,n=e.g.u.i;for(e=e.g.o;t.A;)a=t.na(a),t=t.A;for(;n.A;)e=n.na(e),n=n.A;return t===n&&a===e},Bt.prototype.clone=function(){if(this.g.o||Nt(this),this.g.ia)return this.g.count.value+=1,this;var e=It,t=Object,a=t.create,n=Object.getPrototypeOf(this),i=this.g;return(e=e(a.call(t,n,{g:{value:{count:i.count,fa:i.fa,ia:i.ia,o:i.o,u:i.u,G:i.G,L:i.L}}}))).g.count.value+=1,e.g.fa=!1,e},Bt.prototype.delete=function(){this.g.o||Nt(this),this.g.fa&&!this.g.ia&&nt("Object already scheduled for deletion"),mt(this),vt(this.g),this.g.ia||(this.g.G=void 0,this.g.o=void 0)},Bt.prototype.isDeleted=function(){return!this.g.o},Bt.prototype.deleteLater=function(){return this.g.o||Nt(this),this.g.fa&&!this.g.ia&&nt("Object already scheduled for deletion"),ct.push(this),1===ct.length&&lt&&lt(dt),this.g.fa=!0,this},Wt.prototype.Vb=function(e){return this.rb&&(e=this.rb(e)),e},Wt.prototype.ab=function(e){this.W&&this.W(e)},Wt.prototype.argPackAdvance=8,Wt.prototype.readValueFromPointer=Pt,Wt.prototype.deleteObject=function(e){null!==e&&e.delete()},Wt.prototype.fromWireType=function(e){function t(){return this.ua?Tt(this.i.N,{u:this.nc,o:a,L:this,G:e}):Tt(this.i.N,{u:this,o:e})}var a=this.Vb(e);if(!a)return this.ab(e),null;var n=function(e,t){return t=ft(e,t),ht[t]}(this.i,a);if(void 0!==n)return 0===n.g.count.value?(n.g.o=a,n.g.G=e,n.clone()):(n=n.clone(),this.ab(e),n);if(n=this.i.Ub(a),!(n=wt[n]))return t.call(this);n=this.ta?n.Kb:n.pointerType;var i=yt(a,this.i,n.i);return null===i?t.call(this):this.ua?Tt(n.i.N,{u:n,o:i,L:this,G:e}):Tt(n.i.N,{u:n,o:i})},qt=i.UnboundTypeError=st("UnboundTypeError");var Ia={__syscall_fcntl64:function(e,t,a){Ke=a;try{var n=Be(e);switch(t){case 0:var i=Ze();return 0>i?-28:ze(n,i).X;case 1:case 2:case 6:case 7:return 0;case 3:return n.flags;case 4:return i=Ze(),n.flags|=i,0;case 5:return i=Ze(),T[i+0>>1]=2,0;case 16:case 8:default:return-28;case 9:return A[Ma()>>2]=28,-1}}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return-e.aa}},__syscall_ioctl:function(e,t,a){Ke=a;try{var n=Be(e);switch(t){case 21509:case 21510:case 21511:case 21512:case 21524:case 21515:return n.s?0:-59;case 21505:if(!n.s)return-59;if(n.s.V.bc){t=[3,28,127,21,4,0,1,0,17,19,26,0,18,15,23,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];var i=Ze();A[i>>2]=25856,A[i+4>>2]=5,A[i+8>>2]=191,A[i+12>>2]=35387;for(var x=0;32>x;x++)S[i+x+17|0]=t[x]||0}return 0;case 21506:case 21507:case 21508:if(!n.s)return-59;if(n.s.V.cc)for(i=Ze(),t=[],x=0;32>x;x++)t.push(S[i+x+17|0]);return 0;case 21519:return n.s?(i=Ze(),A[i>>2]=0):-59;case 21520:return n.s?-28:-59;case 21531:if(i=Ze(),!n.m.ac)throw new Ie(59);return n.m.ac(n,t,i);case 21523:return n.s?(n.s.V.dc&&(x=[24,80],i=Ze(),T[i>>1]=x[0],T[i+2>>1]=x[1]),0):-59;default:return-28}}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return-e.aa}},__syscall_openat:function(e,t,a,n){Ke=n;try{var i=t=t?ie(E,t):"";if("/"===i.charAt(0))t=i;else{var x=-100===e?"/":Be(e).path;if(0==i.length)throw new Ie(44);t=J(x+"/"+i)}var s=n?Ze():0;return Ve(t,a,s).X}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return-e.aa}},_embind_create_inheriting_constructor:function(e,t,a){e=_t(e),t=pt(t,"wrapper"),a=it(a);var n=[].slice,i=t.i,x=i.N,s=i.A.N,r=i.A.constructor;for(var o in e=Qe(e,(function(){i.A.qb.forEach(function(e){if(this[e]===s[e])throw new rt(`Pure virtual function ${e} must be implemented in JavaScript`)}.bind(this)),Object.defineProperty(this,"__parent",{value:x}),this.__construct.apply(this,n.call(arguments))})),x.__construct=function(){this===x&&nt("Pass correct 'this' to __construct");var e=r.implement.apply(void 0,[this].concat(n.call(arguments)));mt(e);var t=e.g;e.notifyOnDestruction(),t.ia=!0,Object.defineProperties(this,{g:{value:t}}),It(this),e=t.o,e=ft(i,e),ht.hasOwnProperty(e)?nt(`Tried to register registered instance: ${e}`):ht[e]=this},x.__destruct=function(){this===x&&nt("Pass correct 'this' to __destruct"),mt(this);var e=this.g.o;e=ft(i,e),ht.hasOwnProperty(e)?delete ht[e]:nt(`Tried to unregister unregistered instance: ${e}`)},e.prototype=Object.create(x),a)e.prototype[o]=a[o];return xt(e)},_embind_finalize_value_object:function(e){var t=At[e];delete At[e];var a=t.Pa,n=t.W,i=t.eb;Dt([e],i.map((e=>e.Yb)).concat(i.map((e=>e.rc))),(e=>{var x={};return i.forEach(((t,a)=>{var n=e[a],s=t.Wb,r=t.Xb,o=e[a+i.length],_=t.qc,c=t.sc;x[t.Sb]={read:e=>n.fromWireType(s(r,e)),write:(e,t)=>{var a=[];_(c,e,o.toWireType(a,t)),Ct(a)}}})),[{name:t.name,fromWireType:function(e){var t,a={};for(t in x)a[t]=x[t].read(e);return n(e),a},toWireType:function(e,t){for(var i in x)if(!(i in t))throw new TypeError(`Missing field: "${i}"`);var s=a();for(i in x)x[i].write(s,t[i]);return null!==e&&e.push(n,s),s},argPackAdvance:8,readValueFromPointer:Pt,K:n}]}))},_embind_register_bigint:function(){},_embind_register_bool:function(e,t,a,n,i){var x=Mt(a);Ot(e,{name:t=_t(t),fromWireType:function(e){return!!e},toWireType:function(e,t){return t?n:i},argPackAdvance:8,readValueFromPointer:function(e){if(1===a)var n=S;else if(2===a)n=T;else{if(4!==a)throw new TypeError("Unknown boolean type size: "+t);n=A}return this.fromWireType(n[e>>x])},K:null})},_embind_register_class:function(e,t,a,n,i,x,s,r,o,_,c,d,l){c=_t(c),x=Xt(i,x),r&&(r=Xt(s,r)),_&&(_=Xt(o,_)),l=Xt(d,l);var h=Je(c);jt(h,(function(){Kt(`Cannot construct ${c} due to unbound types`,[n])})),Dt([e,t,a],n?[n]:[],(function(t){if(t=t[0],n)var a=t.i,i=a.N;else i=Bt.prototype;t=Qe(h,(function(){if(Object.getPrototypeOf(this)!==s)throw new at("Use 'new' to construct "+c);if(void 0===o.$)throw new at(c+" has no accessible constructor");var e=o.$[arguments.length];if(void 0===e)throw new at(`Tried to invoke ctor of ${c} with invalid number of parameters (${arguments.length}) - expected (${Object.keys(o.$).toString()}) parameters instead!`);return e.apply(this,arguments)}));var s=Object.create(i,{constructor:{value:t}});t.prototype=s;var o=new Rt(c,t,s,l,a,x,r,_);o.A&&(void 0===o.A.oa&&(o.A.oa=[]),o.A.oa.push(o)),a=new Wt(c,o,!0,!1),i=new Wt(c+"*",o,!1,!1);var d=new Wt(c+" const*",o,!1,!0);return wt[e]={pointerType:i,Kb:d},Vt(h,t),[a,i,d]}))},_embind_register_class_class_function:function(e,t,a,n,i,x,s){var r=Jt(a,n);t=_t(t),x=Xt(i,x),Dt([],[e],(function(e){function n(){Kt(`Cannot call ${i} due to unbound types`,r)}var i=`${(e=e[0]).name}.${t}`;t.startsWith("@@")&&(t=Symbol[t.substring(2)]);var o=e.i.constructor;return void 0===o[t]?(n.ea=a-1,o[t]=n):(zt(o,t,i),o[t].B[a-1]=n),Dt([],r,(function(n){if(n=Zt(i,[n[0],null].concat(n.slice(1)),null,x,s),void 0===o[t].B?(n.ea=a-1,o[t]=n):o[t].B[a-1]=n,e.i.oa)for(const a of e.i.oa)a.constructor.hasOwnProperty(t)||(a.constructor[t]=n);return[]})),[]}))},_embind_register_class_class_property:function(e,t,a,n,i,x,s,r){t=_t(t),x=Xt(i,x),Dt([],[e],(function(e){var i=`${(e=e[0]).name}.${t}`,o={get(){Kt(`Cannot access ${i} due to unbound types`,[a])},enumerable:!0,configurable:!0};return o.set=r?()=>{Kt(`Cannot access ${i} due to unbound types`,[a])}:()=>{nt(`${i} is a read-only property`)},Object.defineProperty(e.i.constructor,t,o),Dt([],[a],(function(a){a=a[0];var i={get:()=>a.fromWireType(x(n)),enumerable:!0};return r&&(r=Xt(s,r),i.set=e=>{var t=[];r(n,a.toWireType(t,e)),Ct(t)}),Object.defineProperty(e.i.constructor,t,i),[]})),[]}))},_embind_register_class_constructor:function(e,t,a,n,i,x){var s=Jt(t,a);i=Xt(n,i),Dt([],[e],(function(e){var a=`constructor ${(e=e[0]).name}`;if(void 0===e.i.$&&(e.i.$=[]),void 0!==e.i.$[t-1])throw new at(`Cannot register multiple constructors with identical number of parameters (${t-1}) for class '${e.name}'! Overload resolution is currently only performed using the parameter count, not actual type info!`);return e.i.$[t-1]=()=>{Kt(`Cannot construct ${e.name} due to unbound types`,s)},Dt([],s,(function(n){return n.splice(1,0,null),e.i.$[t-1]=Zt(a,n,null,i,x),[]})),[]}))},_embind_register_class_function:function(e,t,a,n,i,x,s,r){var o=Jt(a,n);t=_t(t),x=Xt(i,x),Dt([],[e],(function(e){function n(){Kt(`Cannot call ${i} due to unbound types`,o)}var i=`${(e=e[0]).name}.${t}`;t.startsWith("@@")&&(t=Symbol[t.substring(2)]),r&&e.i.qb.push(t);var _=e.i.N,c=_[t];return void 0===c||void 0===c.B&&c.className!==e.name&&c.ea===a-2?(n.ea=a-2,n.className=e.name,_[t]=n):(zt(_,t,i),_[t].B[a-2]=n),Dt([],o,(function(n){return n=Zt(i,n,e,x,s),void 0===_[t].B?(n.ea=a-2,_[t]=n):_[t].B[a-2]=n,[]})),[]}))},_embind_register_class_property:function(e,t,a,n,i,x,s,r,o,_){t=_t(t),i=Xt(n,i),Dt([],[e],(function(e){var n=`${(e=e[0]).name}.${t}`,c={get(){Kt(`Cannot access ${n} due to unbound types`,[a,s])},enumerable:!0,configurable:!0};return c.set=o?()=>{Kt(`Cannot access ${n} due to unbound types`,[a,s])}:()=>{nt(n+" is a read-only property")},Object.defineProperty(e.i.N,t,c),Dt([],o?[a,s]:[a],(function(a){var s=a[0],c={get(){var t=Qt(this,e,n+" getter");return s.fromWireType(i(x,t))},enumerable:!0};if(o){o=Xt(r,o);var d=a[1];c.set=function(t){var a=Qt(this,e,n+" setter"),i=[];o(_,a,d.toWireType(i,t)),Ct(i)}}return Object.defineProperty(e.i.N,t,c),[]})),[]}))},_embind_register_emval:function(e,t){Ot(e,{name:t=_t(t),fromWireType:function(e){var t=it(e);return ea(e),t},toWireType:function(e,t){return xt(t)},argPackAdvance:8,readValueFromPointer:Pt,K:null})},_embind_register_enum:function(e,t,a,n){function i(){}a=Mt(a),t=_t(t),i.values={},Ot(e,{name:t,constructor:i,fromWireType:function(e){return this.constructor.values[e]},toWireType:function(e,t){return t.value},argPackAdvance:8,readValueFromPointer:ta(t,a,n),K:null}),jt(t,i)},_embind_register_enum_value:function(e,t,a){var n=pt(e,"enum");t=_t(t),e=n.constructor,n=Object.create(n.constructor.prototype,{value:{value:a},constructor:{value:Qe(`${n.name}_${t}`,(function(){}))}}),e.values[a]=n,e[t]=n},_embind_register_float:function(e,t,a){a=Mt(a),Ot(e,{name:t=_t(t),fromWireType:function(e){return e},toWireType:function(e,t){return t},argPackAdvance:8,readValueFromPointer:na(t,a),K:null})},_embind_register_function:function(e,t,a,n,i,x){var s=Jt(t,a);e=_t(e),i=Xt(n,i),jt(e,(function(){Kt(`Cannot call ${e} due to unbound types`,s)}),t-1),Dt([],s,(function(a){return Vt(e,Zt(e,[a[0],null].concat(a.slice(1)),null,i,x),t-1),[]}))},_embind_register_integer:function(e,t,a,n,i){t=_t(t),-1===i&&(i=4294967295),i=Mt(a);var x=e=>e;if(0===n){var s=32-8*a;x=e=>e<<s>>>s}a=t.includes("unsigned")?function(e,t){return t>>>0}:function(e,t){return t},Ot(e,{name:t,fromWireType:x,toWireType:a,argPackAdvance:8,readValueFromPointer:ia(t,i,0!==n),K:null})},_embind_register_memory_view:function(e,t,a){function n(e){e>>=2;var t=C;return new i(t.buffer,t[e+1],t[e])}var i=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array][t];Ot(e,{name:a=_t(a),fromWireType:n,argPackAdvance:8,readValueFromPointer:n},{$b:!0})},_embind_register_std_string:function(e,t){var a="std::string"===(t=_t(t));Ot(e,{name:t,fromWireType:function(e){var t=C[e>>2],n=e+4;if(a)for(var i=n,x=0;x<=t;++x){var s=n+x;if(x==t||0==E[s]){if(i=i?ie(E,i,s-i):"",void 0===r)var r=i;else r+=String.fromCharCode(0),r+=i;i=s+1}}else{for(r=Array(t),x=0;x<t;++x)r[x]=String.fromCharCode(E[n+x]);r=r.join("")}return Aa(e),r},toWireType:function(e,t){t instanceof ArrayBuffer&&(t=new Uint8Array(t));var n="string"==typeof t;n||t instanceof Uint8Array||t instanceof Uint8ClampedArray||t instanceof Int8Array||nt("Cannot pass non-string to std::string");var i=a&&n?se(t):t.length,x=Ca(4+i+1),s=x+4;if(C[x>>2]=i,a&&n)re(t,E,s,i+1);else if(n)for(n=0;n<i;++n){var r=t.charCodeAt(n);255<r&&(Aa(s),nt("String has UTF-16 code units that do not fit in 8 bits")),E[s+n]=r}else for(n=0;n<i;++n)E[s+n]=t[n];return null!==e&&e.push(Aa,x),x},argPackAdvance:8,readValueFromPointer:Pt,K:function(e){Aa(e)}})},_embind_register_std_wstring:function(e,t,a){if(a=_t(a),2===t)var n=sa,i=ra,x=oa,s=()=>I,r=1;else 4===t&&(n=_a,i=ca,x=da,s=()=>C,r=2);Ot(e,{name:a,fromWireType:function(e){for(var a,i=C[e>>2],x=s(),o=e+4,_=0;_<=i;++_){var c=e+4+_*t;_!=i&&0!=x[c>>r]||(o=n(o,c-o),void 0===a?a=o:(a+=String.fromCharCode(0),a+=o),o=c+t)}return Aa(e),a},toWireType:function(e,n){"string"!=typeof n&&nt(`Cannot pass non-string to C++ string type ${a}`);var s=x(n),o=Ca(4+s+t);return C[o>>2]=s>>r,i(n,o+4,s+t),null!==e&&e.push(Aa,o),o},argPackAdvance:8,readValueFromPointer:Pt,K:function(e){Aa(e)}})},_embind_register_value_object:function(e,t,a,n,i,x){At[e]={name:_t(t),Pa:Xt(a,n),W:Xt(i,x),eb:[]}},_embind_register_value_object_field:function(e,t,a,n,i,x,s,r,o,_){At[e].eb.push({Sb:_t(t),Yb:a,Wb:Xt(n,i),Xb:x,rc:s,qc:Xt(r,o),sc:_})},_embind_register_void:function(e,t){Ot(e,{fc:!0,name:t=_t(t),argPackAdvance:0,fromWireType:function(){},toWireType:function(){}})},_emscripten_get_now_is_monotonic:()=>!0,_emval_as:function(e,t,a){e=it(e),t=pt(t,"emval::as");var n=[],i=xt(n);return C[a>>2]=i,t.toWireType(n,e)},_emval_call_method:function(e,t,a,n,i){e=ua[e],t=it(t),a=ha(a);var x=[];return C[n>>2]=xt(x),e(t,a,x,i)},_emval_call_void_method:function(e,t,a,n){(e=ua[e])(t=it(t),a=ha(a),null,n)},_emval_decref:ea,_emval_get_method_caller:function(e,t){var a=function(e,t){for(var a=Array(e),n=0;n<e;++n)a[n]=pt(C[t+4*n>>2],"parameter "+n);return a}(e,t),n=a[0];t=n.name+"_$"+a.slice(1).map((function(e){return e.name})).join("_")+"$";var i=ba[t];if(void 0!==i)return i;var x=Array(e-1);return i=function(e){var t=ua.length;return ua.push(e),t}(((t,i,s,r)=>{for(var o=0,_=0;_<e-1;++_)x[_]=a[_+1].readValueFromPointer(r+o),o+=a[_+1].argPackAdvance;for(t=t[i].apply(t,x),_=0;_<e-1;++_)a[_+1].Nb&&a[_+1].Nb(x[_]);if(!n.fc)return n.toWireType(s,t)})),ba[t]=i},_emval_get_module_property:function(e){return e=ha(e),xt(i[e])},_emval_get_property:function(e,t){return e=it(e),t=it(t),xt(e[t])},_emval_incref:function(e){4<e&&(tt.get(e).tb+=1)},_emval_new_cstring:function(e){return xt(ha(e))},_emval_new_object:function(){return xt({})},_emval_run_destructors:function(e){Ct(it(e)),ea(e)},_emval_set_property:function(e,t,a){e=it(e),t=it(t),a=it(a),e[t]=a},_emval_take_value:function(e,t){return e=(e=pt(e,"_emval_take_value")).readValueFromPointer(t),xt(e)},abort:()=>{H("")},emscripten_asm_const_int:(e,t,a)=>{var n;for(pa.length=0,a>>=2;n=E[t++];)a+=105!=n&a,pa.push(105==n?A[a]:L[a++>>1]),++a;return q[e].apply(null,pa)},emscripten_date_now:function(){return Date.now()},emscripten_get_now:()=>performance.now(),emscripten_memcpy_big:(e,t,a)=>E.copyWithin(e,t,t+a),emscripten_resize_heap:e=>{var t=E.length;if(2147483648<(e>>>=0))return!1;for(var a=1;4>=a;a*=2){var n=t*(1+.2/a);n=Math.min(n,e+100663296);var i=Math;n=Math.max(e,n);e:{i=i.min.call(i,2147483648,n+(65536-n%65536)%65536)-y.buffer.byteLength+65535>>>16;try{y.grow(i),D();var x=1;break e}catch(e){}x=void 0}if(x)return!0}return!1},environ_get:(e,t)=>{var a=0;return ga().forEach((function(n,i){var x=t+a;for(i=C[e+4*i>>2]=x,x=0;x<n.length;++x)S[0|i++]=n.charCodeAt(x);S[0|i]=0,a+=n.length+1})),0},environ_sizes_get:(e,t)=>{var a=ga();C[e>>2]=a.length;var n=0;return a.forEach((function(e){n+=e.length+1})),C[t>>2]=n,0},fd_close:function(e){try{var t=Be(e);if(null===t.X)throw new Ie(8);t.Ma&&(t.Ma=null);try{t.m.close&&t.m.close(t)}catch(e){throw e}finally{we[t.X]=null}return t.X=null,0}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return e.aa}},fd_read:function(e,t,a,n){try{e:{var i=Be(e);e=t;for(var x,s=t=0;s<a;s++){var r=C[e>>2],o=C[e+4>>2];e+=8;var _=i,c=r,d=o,l=x,h=S;if(0>d||0>l)throw new Ie(28);if(null===_.X)throw new Ie(8);if(1==(2097155&_.flags))throw new Ie(8);if(16384==(61440&_.node.mode))throw new Ie(31);if(!_.m.read)throw new Ie(28);var f=void 0!==l;if(f){if(!_.seekable)throw new Ie(70)}else l=_.position;var u=_.m.read(_,h,c,d,l);f||(_.position+=u);var b=u;if(0>b){var p=-1;break e}if(t+=b,b<o)break;void 0!==x&&(x+=b)}p=t}return C[n>>2]=p,0}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return e.aa}},fd_seek:function(e,t,a,n,i){t=a+2097152>>>0<4194305-!!t?(t>>>0)+4294967296*a:NaN;try{if(isNaN(t))return 61;var x=Be(e);return Ye(x,t,n),X=[x.position>>>0,($=x.position,1<=+Math.abs($)?0<$?+Math.floor($/4294967296)>>>0:~~+Math.ceil(($-+(~~$>>>0))/4294967296)>>>0:0)],A[i>>2]=X[0],A[i+4>>2]=X[1],x.Ma&&0===t&&0===n&&(x.Ma=null),0}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return e.aa}},fd_write:function(e,t,a,n){try{e:{var i=Be(e);e=t;for(var x,s=t=0;s<a;s++){var r=C[e>>2],o=C[e+4>>2];e+=8;var _=i,c=r,d=o,l=x,h=S;if(0>d||0>l)throw new Ie(28);if(null===_.X)throw new Ie(8);if(!(2097155&_.flags))throw new Ie(8);if(16384==(61440&_.node.mode))throw new Ie(31);if(!_.m.write)throw new Ie(28);_.seekable&&1024&_.flags&&Ye(_,0,2);var f=void 0!==l;if(f){if(!_.seekable)throw new Ie(70)}else l=_.position;var u=_.m.write(_,h,c,d,l,void 0);f||(_.position+=u);var b=u;if(0>b){var p=-1;break e}t+=b,void 0!==x&&(x+=b)}p=t}return C[n>>2]=p,0}catch(e){if(void 0===qe||"ErrnoError"!==e.name)throw e;return e.aa}},strftime_l:(e,t,a,n)=>((e,t,a,n)=>{function i(e,t,a){for(e="number"==typeof e?e.toString():e||"";e.length<t;)e=a[0]+e;return e}function x(e,t){return i(e,t,"0")}function s(e,t){function a(e){return 0>e?-1:0<e?1:0}var n;return 0===(n=a(e.getFullYear()-t.getFullYear()))&&0===(n=a(e.getMonth()-t.getMonth()))&&(n=a(e.getDate()-t.getDate())),n}function r(e){switch(e.getDay()){case 0:return new Date(e.getFullYear()-1,11,29);case 1:return e;case 2:return new Date(e.getFullYear(),0,3);case 3:return new Date(e.getFullYear(),0,2);case 4:return new Date(e.getFullYear(),0,1);case 5:return new Date(e.getFullYear()-1,11,31);case 6:return new Date(e.getFullYear()-1,11,30)}}function o(e){var t=e.ca;for(e=new Date(new Date(e.da+1900,0,1).getTime());0<t;){var a=e.getMonth(),n=(va(e.getFullYear())?ya:wa)[a];if(!(t>n-e.getDate())){e.setDate(e.getDate()+t);break}t-=n-e.getDate()+1,e.setDate(1),11>a?e.setMonth(a+1):(e.setMonth(0),e.setFullYear(e.getFullYear()+1))}return a=new Date(e.getFullYear()+1,0,4),t=r(new Date(e.getFullYear(),0,4)),a=r(a),0>=s(t,e)?0>=s(a,e)?e.getFullYear()+1:e.getFullYear():e.getFullYear()-1}var _=A[n+40>>2];for(var c in n={wc:A[n>>2],vc:A[n+4>>2],Fa:A[n+8>>2],Sa:A[n+12>>2],Ga:A[n+16>>2],da:A[n+20>>2],R:A[n+24>>2],ca:A[n+28>>2],Rc:A[n+32>>2],uc:A[n+36>>2],xc:_&&_?ie(E,_):""},a=a?ie(E,a):"",_={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})a=a.replace(new RegExp(c,"g"),_[c]);var d="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),l="January February March April May June July August September October November December".split(" ");for(c in _={"%a":e=>d[e.R].substring(0,3),"%A":e=>d[e.R],"%b":e=>l[e.Ga].substring(0,3),"%B":e=>l[e.Ga],"%C":e=>x((e.da+1900)/100|0,2),"%d":e=>x(e.Sa,2),"%e":e=>i(e.Sa,2," "),"%g":e=>o(e).toString().substring(2),"%G":e=>o(e),"%H":e=>x(e.Fa,2),"%I":e=>(0==(e=e.Fa)?e=12:12<e&&(e-=12),x(e,2)),"%j":e=>{for(var t=0,a=0;a<=e.Ga-1;t+=(va(e.da+1900)?ya:wa)[a++]);return x(e.Sa+t,3)},"%m":e=>x(e.Ga+1,2),"%M":e=>x(e.vc,2),"%n":()=>"\n","%p":e=>0<=e.Fa&&12>e.Fa?"AM":"PM","%S":e=>x(e.wc,2),"%t":()=>"\t","%u":e=>e.R||7,"%U":e=>x(Math.floor((e.ca+7-e.R)/7),2),"%V":e=>{var t=Math.floor((e.ca+7-(e.R+6)%7)/7);if(2>=(e.R+371-e.ca-2)%7&&t++,t)53==t&&(4==(a=(e.R+371-e.ca)%7)||3==a&&va(e.da)||(t=1));else{t=52;var a=(e.R+7-e.ca-1)%7;(4==a||5==a&&va(e.da%400-1))&&t++}return x(t,2)},"%w":e=>e.R,"%W":e=>x(Math.floor((e.ca+7-(e.R+6)%7)/7),2),"%y":e=>(e.da+1900).toString().substring(2),"%Y":e=>e.da+1900,"%z":e=>{var t=0<=(e=e.uc);return e=Math.abs(e)/60,(t?"+":"-")+String("0000"+(e/60*100+e%60)).slice(-4)},"%Z":e=>e.xc,"%%":()=>"%"},a=a.replace(/%%/g,"\0\0"),_)a.includes(c)&&(a=a.replace(new RegExp(c,"g"),_[c](n)));return(c=oe(a=a.replace(/\0\0/g,"%"),!1)).length>t?0:(S.set(c,e),c.length-1)})(e,t,a,n)};!function(){function e(e){if(w=e=e.exports,y=w.memory,D(),M=w.__indirect_function_table,N.unshift(w.__wasm_call_ctors),R--,i.monitorRunDependencies&&i.monitorRunDependencies(R),0==R&&(null!==F&&(clearInterval(F),F=null),U)){var t=U;U=null,t()}return e}var t={env:Ia,wasi_snapshot_preview1:Ia};if(R++,i.monitorRunDependencies&&i.monitorRunDependencies(R),i.instantiateWasm)try{return i.instantiateWasm(t,e)}catch(e){v("Module.instantiateWasm callback failed with error: "+e),a(e)}(function(e,t){var a=j;return m||"function"!=typeof WebAssembly.instantiateStreaming||G(a)||a.startsWith("file://")||"function"!=typeof fetch?Y(a,e,t):fetch(a,{credentials:"same-origin"}).then((n=>WebAssembly.instantiateStreaming(n,e).then(t,(function(n){return v("wasm streaming compile failed: "+n),v("falling back to ArrayBuffer instantiation"),Y(a,e,t)}))))})(t,(function(t){e(t.instance)})).catch(a)}();var Aa=e=>(Aa=w.free)(e),Ca=e=>(Ca=w.malloc)(e),Pa=i._ma_device__on_notification_unlocked=e=>(Pa=i._ma_device__on_notification_unlocked=w.ma_device__on_notification_unlocked)(e);i._ma_malloc_emscripten=(e,t)=>(i._ma_malloc_emscripten=w.ma_malloc_emscripten)(e,t),i._ma_free_emscripten=(e,t)=>(i._ma_free_emscripten=w.ma_free_emscripten)(e,t);var La,ka=i._ma_device_process_pcm_frames_capture__webaudio=(e,t,a)=>(ka=i._ma_device_process_pcm_frames_capture__webaudio=w.ma_device_process_pcm_frames_capture__webaudio)(e,t,a),Da=i._ma_device_process_pcm_frames_playback__webaudio=(e,t,a)=>(Da=i._ma_device_process_pcm_frames_playback__webaudio=w.ma_device_process_pcm_frames_playback__webaudio)(e,t,a),Ma=()=>(Ma=w.__errno_location)(),Oa=e=>(Oa=w.__getTypeName)(e);function Na(){function e(){if(!La&&(La=!0,i.calledRun=!0,!k)){if(i.noFSInit||ue||(ue=!0,$e(),i.stdin=i.stdin,i.stdout=i.stdout,i.stderr=i.stderr,i.stdin?Xe("stdin",i.stdin):Ge("/dev/tty","/dev/stdin"),i.stdout?Xe("stdout",null,i.stdout):Ge("/dev/tty","/dev/stdout"),i.stderr?Xe("stderr",null,i.stderr):Ge("/dev/tty1","/dev/stderr"),Ve("/dev/stdin",0),Ve("/dev/stdout",1),Ve("/dev/stderr",1)),Te=!1,K(N),t(i),i.onRuntimeInitialized&&i.onRuntimeInitialized(),i.postRun)for("function"==typeof i.postRun&&(i.postRun=[i.postRun]);i.postRun.length;){var e=i.postRun.shift();B.unshift(e)}K(B)}}if(!(0<R)){if(i.preRun)for("function"==typeof i.preRun&&(i.preRun=[i.preRun]);i.preRun.length;)z();K(O),0<R||(i.setStatus?(i.setStatus("Running..."),setTimeout((function(){setTimeout((function(){i.setStatus("")}),1),e()}),1)):e())}}if(i.__embind_initialize_bindings=()=>(i.__embind_initialize_bindings=w._embind_initialize_bindings)(),i.dynCall_iiji=(e,t,a,n,x)=>(i.dynCall_iiji=w.dynCall_iiji)(e,t,a,n,x),i.dynCall_jiji=(e,t,a,n,x)=>(i.dynCall_jiji=w.dynCall_jiji)(e,t,a,n,x),i.dynCall_iiiji=(e,t,a,n,x,s)=>(i.dynCall_iiiji=w.dynCall_iiiji)(e,t,a,n,x,s),i.dynCall_iij=(e,t,a,n)=>(i.dynCall_iij=w.dynCall_iij)(e,t,a,n),i.dynCall_jii=(e,t,a)=>(i.dynCall_jii=w.dynCall_jii)(e,t,a),i.dynCall_viijii=(e,t,a,n,x,s,r)=>(i.dynCall_viijii=w.dynCall_viijii)(e,t,a,n,x,s,r),i.dynCall_iiiiij=(e,t,a,n,x,s,r)=>(i.dynCall_iiiiij=w.dynCall_iiiiij)(e,t,a,n,x,s,r),i.dynCall_iiiiijj=(e,t,a,n,x,s,r,o,_)=>(i.dynCall_iiiiijj=w.dynCall_iiiiijj)(e,t,a,n,x,s,r,o,_),i.dynCall_iiiiiijj=(e,t,a,n,x,s,r,o,_,c)=>(i.dynCall_iiiiiijj=w.dynCall_iiiiiijj)(e,t,a,n,x,s,r,o,_,c),U=function e(){La||Na(),La||(U=e)},i.preInit)for("function"==typeof i.preInit&&(i.preInit=[i.preInit]);0<i.preInit.length;)i.preInit.pop()();return Na(),e.ready});const x=i},e=>{e.exports=JSON.parse('{"name":"@rive-app/canvas","version":"2.21.5","description":"Rive\'s canvas based web api.","main":"rive.js","homepage":"https://rive.app","repository":{"type":"git","url":"https://github.com/rive-app/rive-wasm/tree/master/js"},"keywords":["rive","animation"],"author":"Rive","contributors":["Luigi Rosso <luigi@rive.app> (https://rive.app)","Maxwell Talbot <max@rive.app> (https://rive.app)","Arthur Vivian <arthur@rive.app> (https://rive.app)","Umberto Sonnino <umberto@rive.app> (https://rive.app)","Matthew Sullivan <matt.j.sullivan@gmail.com> (mailto:matt.j.sullivan@gmail.com)"],"license":"MIT","files":["rive.js","rive.js.map","rive.wasm","rive_fallback.wasm","rive.d.ts","rive_advanced.mjs.d.ts"],"typings":"rive.d.ts","dependencies":{},"browser":{"fs":false,"path":false}}')},(e,t,a)=>{a.r(t),a.d(t,{Animation:()=>n.Animation});var n=a(4)},(e,t,a)=>{a.r(t),a.d(t,{Animation:()=>n});var n=function(){function e(e,t,a,n){this.animation=e,this.artboard=t,this.playing=n,this.loopCount=0,this.scrubTo=null,this.instance=new a.LinearAnimationInstance(e,t)}return Object.defineProperty(e.prototype,"name",{get:function(){return this.animation.name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"time",{get:function(){return this.instance.time},set:function(e){this.instance.time=e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loopValue",{get:function(){return this.animation.loopValue},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"needsScrub",{get:function(){return null!==this.scrubTo},enumerable:!1,configurable:!0}),e.prototype.advance=function(e){null===this.scrubTo?this.instance.advance(e):(this.instance.time=0,this.instance.advance(this.scrubTo),this.scrubTo=null)},e.prototype.apply=function(e){this.instance.apply(e)},e.prototype.cleanup=function(){this.instance.delete()},e}()},(e,t,a)=>{a.r(t),a.d(t,{BLANK_URL:()=>i.BLANK_URL,registerTouchInteractions:()=>n.registerTouchInteractions,sanitizeUrl:()=>i.sanitizeUrl});var n=a(6),i=a(7)},(e,t,a)=>{a.r(t),a.d(t,{registerTouchInteractions:()=>n});var n=function(e){var t=e.canvas,a=e.artboard,n=e.stateMachines,i=void 0===n?[]:n,x=e.renderer,s=e.rive,r=e.fit,o=e.alignment,_=e.isTouchScrollEnabled,c=void 0!==_&&_;if(!(t&&i.length&&x&&s&&a&&"undefined"!=typeof window))return null;var d=null,l=!1,h=function(e){if(l&&e instanceof MouseEvent)"mouseup"==e.type&&(l=!1);else{l=c&&"touchend"===e.type&&"touchstart"===d,d=e.type;var t=e.currentTarget.getBoundingClientRect(),n=function(e,t){var a,n;return["touchstart","touchmove"].indexOf(e.type)>-1&&(null===(a=e.touches)||void 0===a?void 0:a.length)?(t||e.preventDefault(),{clientX:e.touches[0].clientX,clientY:e.touches[0].clientY}):"touchend"===e.type&&(null===(n=e.changedTouches)||void 0===n?void 0:n.length)?{clientX:e.changedTouches[0].clientX,clientY:e.changedTouches[0].clientY}:{clientX:e.clientX,clientY:e.clientY}}(e,c),x=n.clientX,_=n.clientY;if(x||_){var h=x-t.left,f=_-t.top,u=s.computeAlignment(r,o,{minX:0,minY:0,maxX:t.width,maxY:t.height},a.bounds),b=new s.Mat2D;u.invert(b);var p=new s.Vec2D(h,f),m=s.mapXY(b,p),g=m.x(),v=m.y();switch(m.delete(),b.delete(),p.delete(),u.delete(),e.type){case"mouseout":for(var y=0,w=i;y<w.length;y++)w[y].pointerMove(g<0?g-1e4:g+1e4,v<0?v-1e4:v+1e4);break;case"touchmove":case"mouseover":case"mousemove":for(var S=0,E=i;S<E.length;S++)E[S].pointerMove(g,v);break;case"touchstart":case"mousedown":for(var T=0,I=i;T<I.length;T++)I[T].pointerDown(g,v);break;case"touchend":case"mouseup":for(var A=0,C=i;A<C.length;A++)C[A].pointerUp(g,v)}}}}.bind(void 0);return t.addEventListener("mouseover",h),t.addEventListener("mouseout",h),t.addEventListener("mousemove",h),t.addEventListener("mousedown",h),t.addEventListener("mouseup",h),t.addEventListener("touchmove",h,{passive:c}),t.addEventListener("touchstart",h,{passive:c}),t.addEventListener("touchend",h),function(){t.removeEventListener("mouseover",h),t.removeEventListener("mouseout",h),t.removeEventListener("mousemove",h),t.removeEventListener("mousedown",h),t.removeEventListener("mouseup",h),t.removeEventListener("touchmove",h),t.removeEventListener("touchstart",h),t.removeEventListener("touchend",h)}}},(e,t,a)=>{a.r(t),a.d(t,{BLANK_URL:()=>_,sanitizeUrl:()=>c});var n=/^([^\w]*)(javascript|data|vbscript)/im,i=/&#(\w+)(^\w|;)?/g,x=/&(newline|tab);/gi,s=/[\u0000-\u001F\u007F-\u009F\u2000-\u200D\uFEFF]/gim,r=/^.+(:|&colon;)/gim,o=[".","/"],_="about:blank";function c(e){if(!e)return _;var t,a=(t=e,t.replace(s,"").replace(i,(function(e,t){return String.fromCharCode(t)}))).replace(x,"").replace(s,"").trim();if(!a)return _;if(function(e){return o.indexOf(e[0])>-1}(a))return a;var c=a.match(r);if(!c)return a;var d=c[0];return n.test(d)?_:a}}],t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var x=t[n]={exports:{}};return e[n](x,x.exports,a),x.exports}a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};return(()=>{a.r(n),a.d(n,{Alignment:()=>i,EventType:()=>p,Fit:()=>t,Layout:()=>h,LoopType:()=>m,Rive:()=>L,RiveEventType:()=>u,RiveFile:()=>P,RuntimeLoader:()=>f,StateMachineInput:()=>b,StateMachineInputType:()=>l,Testing:()=>M,decodeAudio:()=>O,decodeFont:()=>B,decodeImage:()=>N});var e,t,i,x=a(1),s=a(2),r=a(3),o=a(5),_=(e=function(t,a){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])},e(t,a)},function(t,a){if("function"!=typeof a&&null!==a)throw new TypeError("Class extends value "+String(a)+" is not a constructor or null");function n(){this.constructor=t}e(t,a),t.prototype=null===a?Object.create(a):(n.prototype=a.prototype,new n)}),c=function(e,t,a,n){return new(a||(a=Promise))((function(i,x){function s(e){try{o(n.next(e))}catch(e){x(e)}}function r(e){try{o(n.throw(e))}catch(e){x(e)}}function o(e){var t;e.done?i(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(s,r)}o((n=n.apply(e,t||[])).next())}))},d=function(e,t){var a,n,i,x,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return x={next:r(0),throw:r(1),return:r(2)},"function"==typeof Symbol&&(x[Symbol.iterator]=function(){return this}),x;function r(r){return function(o){return function(r){if(a)throw new TypeError("Generator is already executing.");for(;x&&(x=0,r[0]&&(s=0)),s;)try{if(a=1,n&&(i=2&r[0]?n.return:r[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,r[1])).done)return i;switch(n=0,i&&(r=[2&r[0],i.value]),r[0]){case 0:case 1:i=r;break;case 4:return s.label++,{value:r[1],done:!1};case 5:s.label++,n=r[1],r=[0];continue;case 7:r=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==r[0]&&2!==r[0])){s=0;continue}if(3===r[0]&&(!i||r[1]>i[0]&&r[1]<i[3])){s.label=r[1];break}if(6===r[0]&&s.label<i[1]){s.label=i[1],i=r;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(r);break}i[2]&&s.ops.pop(),s.trys.pop();continue}r=t.call(e,s)}catch(e){r=[6,e],n=0}finally{a=i=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,o])}}};!function(e){e.Cover="cover",e.Contain="contain",e.Fill="fill",e.FitWidth="fitWidth",e.FitHeight="fitHeight",e.None="none",e.ScaleDown="scaleDown"}(t||(t={})),function(e){e.Center="center",e.TopLeft="topLeft",e.TopCenter="topCenter",e.TopRight="topRight",e.CenterLeft="centerLeft",e.CenterRight="centerRight",e.BottomLeft="bottomLeft",e.BottomCenter="bottomCenter",e.BottomRight="bottomRight"}(i||(i={}));var l,h=function(){function e(e){var a,n,x,s,r,o;this.fit=null!==(a=null==e?void 0:e.fit)&&void 0!==a?a:t.Contain,this.alignment=null!==(n=null==e?void 0:e.alignment)&&void 0!==n?n:i.Center,this.minX=null!==(x=null==e?void 0:e.minX)&&void 0!==x?x:0,this.minY=null!==(s=null==e?void 0:e.minY)&&void 0!==s?s:0,this.maxX=null!==(r=null==e?void 0:e.maxX)&&void 0!==r?r:0,this.maxY=null!==(o=null==e?void 0:e.maxY)&&void 0!==o?o:0}return e.new=function(t){var a=t.fit,n=t.alignment,i=t.minX,x=t.minY,s=t.maxX,r=t.maxY;return console.warn("This function is deprecated: please use `new Layout({})` instead"),new e({fit:a,alignment:n,minX:i,minY:x,maxX:s,maxY:r})},e.prototype.copyWith=function(t){var a=t.fit,n=t.alignment,i=t.minX,x=t.minY,s=t.maxX,r=t.maxY;return new e({fit:null!=a?a:this.fit,alignment:null!=n?n:this.alignment,minX:null!=i?i:this.minX,minY:null!=x?x:this.minY,maxX:null!=s?s:this.maxX,maxY:null!=r?r:this.maxY})},e.prototype.runtimeFit=function(e){return this.cachedRuntimeFit?this.cachedRuntimeFit:(a=this.fit===t.Cover?e.Fit.cover:this.fit===t.Contain?e.Fit.contain:this.fit===t.Fill?e.Fit.fill:this.fit===t.FitWidth?e.Fit.fitWidth:this.fit===t.FitHeight?e.Fit.fitHeight:this.fit===t.ScaleDown?e.Fit.scaleDown:e.Fit.none,this.cachedRuntimeFit=a,a);var a},e.prototype.runtimeAlignment=function(e){return this.cachedRuntimeAlignment?this.cachedRuntimeAlignment:(t=this.alignment===i.TopLeft?e.Alignment.topLeft:this.alignment===i.TopCenter?e.Alignment.topCenter:this.alignment===i.TopRight?e.Alignment.topRight:this.alignment===i.CenterLeft?e.Alignment.centerLeft:this.alignment===i.CenterRight?e.Alignment.centerRight:this.alignment===i.BottomLeft?e.Alignment.bottomLeft:this.alignment===i.BottomCenter?e.Alignment.bottomCenter:this.alignment===i.BottomRight?e.Alignment.bottomRight:e.Alignment.center,this.cachedRuntimeAlignment=t,t);var t},e}(),f=function(){function e(){}return e.loadRuntime=function(){x.default({locateFile:function(){return e.wasmURL}}).then((function(t){var a;for(e.runtime=t;e.callBackQueue.length>0;)null===(a=e.callBackQueue.shift())||void 0===a||a(e.runtime)})).catch((function(){var t="https://cdn.jsdelivr.net/npm/".concat(s.name,"@").concat(s.version,"/rive_fallback.wasm");e.wasmURL.toLowerCase()!==t?(console.warn("Failed to load WASM from ".concat(e.wasmURL,", trying jsdelivr as a backup")),e.setWasmUrl(t),e.loadRuntime()):console.error("Could not load Rive WASM file from unpkg or jsdelivr, network connection may be down, or         you may need to call set a new WASM source via RuntimeLoader.setWasmUrl() and call         RuntimeLoader.loadRuntime() again")}))},e.getInstance=function(t){e.isLoading||(e.isLoading=!0,e.loadRuntime()),e.runtime?t(e.runtime):e.callBackQueue.push(t)},e.awaitInstance=function(){return new Promise((function(t){return e.getInstance((function(e){return t(e)}))}))},e.setWasmUrl=function(t){e.wasmURL=t},e.isLoading=!1,e.callBackQueue=[],e.wasmURL="https://unpkg.com/".concat(s.name,"@").concat(s.version,"/rive.wasm"),e}();!function(e){e[e.Number=56]="Number",e[e.Trigger=58]="Trigger",e[e.Boolean=59]="Boolean"}(l||(l={}));var u,b=function(){function e(e,t){this.type=e,this.runtimeInput=t}return Object.defineProperty(e.prototype,"name",{get:function(){return this.runtimeInput.name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.runtimeInput.value},set:function(e){this.runtimeInput.value=e},enumerable:!1,configurable:!0}),e.prototype.fire=function(){this.type===l.Trigger&&this.runtimeInput.fire()},e}();!function(e){e[e.General=128]="General",e[e.OpenUrl=131]="OpenUrl"}(u||(u={}));var p,m,g=function(){function e(e,t,a,n){this.stateMachine=e,this.playing=a,this.artboard=n,this.inputs=[],this.instance=new t.StateMachineInstance(e,n),this.initInputs(t)}return Object.defineProperty(e.prototype,"name",{get:function(){return this.stateMachine.name},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"statesChanged",{get:function(){for(var e=[],t=0;t<this.instance.stateChangedCount();t++)e.push(this.instance.stateChangedNameByIndex(t));return e},enumerable:!1,configurable:!0}),e.prototype.advance=function(e){this.instance.advance(e)},e.prototype.reportedEventCount=function(){return this.instance.reportedEventCount()},e.prototype.reportedEventAt=function(e){return this.instance.reportedEventAt(e)},e.prototype.initInputs=function(e){for(var t=0;t<this.instance.inputCount();t++){var a=this.instance.input(t);this.inputs.push(this.mapRuntimeInput(a,e))}},e.prototype.mapRuntimeInput=function(e,t){return e.type===t.SMIInput.bool?new b(l.Boolean,e.asBool()):e.type===t.SMIInput.number?new b(l.Number,e.asNumber()):e.type===t.SMIInput.trigger?new b(l.Trigger,e.asTrigger()):void 0},e.prototype.cleanup=function(){this.instance.delete()},e}(),v=function(){function e(e,t,a,n,i){void 0===n&&(n=[]),void 0===i&&(i=[]),this.runtime=e,this.artboard=t,this.eventManager=a,this.animations=n,this.stateMachines=i}return e.prototype.add=function(e,t,a){if(void 0===a&&(a=!0),0===(e=D(e)).length)this.animations.forEach((function(e){return e.playing=t})),this.stateMachines.forEach((function(e){return e.playing=t}));else for(var n=this.animations.map((function(e){return e.name})),i=this.stateMachines.map((function(e){return e.name})),x=0;x<e.length;x++){var s=n.indexOf(e[x]),o=i.indexOf(e[x]);if(s>=0||o>=0)s>=0?this.animations[s].playing=t:this.stateMachines[o].playing=t;else{var _=this.artboard.animationByName(e[x]);if(_){var c=new r.Animation(_,this.artboard,this.runtime,t);c.advance(0),c.apply(1),this.animations.push(c)}else{var d=this.artboard.stateMachineByName(e[x]);if(d){var l=new g(d,this.runtime,t,this.artboard);this.stateMachines.push(l)}}}}return a&&(t?this.eventManager.fire({type:p.Play,data:this.playing}):this.eventManager.fire({type:p.Pause,data:this.paused})),t?this.playing:this.paused},e.prototype.initLinearAnimations=function(e,t){for(var a=this.animations.map((function(e){return e.name})),n=0;n<e.length;n++){var i=a.indexOf(e[n]);if(i>=0)this.animations[i].playing=t;else{var x=this.artboard.animationByName(e[n]);if(x){var s=new r.Animation(x,this.artboard,this.runtime,t);s.advance(0),s.apply(1),this.animations.push(s)}}}},e.prototype.initStateMachines=function(e,t){for(var a=this.stateMachines.map((function(e){return e.name})),n=0;n<e.length;n++){var i=a.indexOf(e[n]);if(i>=0)this.stateMachines[i].playing=t;else{var x=this.artboard.stateMachineByName(e[n]);if(x){var s=new g(x,this.runtime,t,this.artboard);this.stateMachines.push(s)}else this.initLinearAnimations([e[n]],t)}}},e.prototype.play=function(e){return this.add(e,!0)},e.prototype.pause=function(e){return this.add(e,!1)},e.prototype.scrub=function(e,t){var a=this.animations.filter((function(t){return e.includes(t.name)}));return a.forEach((function(e){return e.scrubTo=t})),a.map((function(e){return e.name}))},Object.defineProperty(e.prototype,"playing",{get:function(){return this.animations.filter((function(e){return e.playing})).map((function(e){return e.name})).concat(this.stateMachines.filter((function(e){return e.playing})).map((function(e){return e.name})))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"paused",{get:function(){return this.animations.filter((function(e){return!e.playing})).map((function(e){return e.name})).concat(this.stateMachines.filter((function(e){return!e.playing})).map((function(e){return e.name})))},enumerable:!1,configurable:!0}),e.prototype.stop=function(e){var t=this,a=[];if(0===(e=D(e)).length)a=this.animations.map((function(e){return e.name})).concat(this.stateMachines.map((function(e){return e.name}))),this.animations.forEach((function(e){return e.cleanup()})),this.stateMachines.forEach((function(e){return e.cleanup()})),this.animations.splice(0,this.animations.length),this.stateMachines.splice(0,this.stateMachines.length);else{var n=this.animations.filter((function(t){return e.includes(t.name)}));n.forEach((function(e){e.cleanup(),t.animations.splice(t.animations.indexOf(e),1)}));var i=this.stateMachines.filter((function(t){return e.includes(t.name)}));i.forEach((function(e){e.cleanup(),t.stateMachines.splice(t.stateMachines.indexOf(e),1)})),a=n.map((function(e){return e.name})).concat(i.map((function(e){return e.name})))}return this.eventManager.fire({type:p.Stop,data:a}),a},Object.defineProperty(e.prototype,"isPlaying",{get:function(){return this.animations.reduce((function(e,t){return e||t.playing}),!1)||this.stateMachines.reduce((function(e,t){return e||t.playing}),!1)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isPaused",{get:function(){return!this.isPlaying&&(this.animations.length>0||this.stateMachines.length>0)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isStopped",{get:function(){return 0===this.animations.length&&0===this.stateMachines.length},enumerable:!1,configurable:!0}),e.prototype.atLeastOne=function(e,t){var a;return void 0===t&&(t=!0),0===this.animations.length&&0===this.stateMachines.length&&(this.artboard.animationCount()>0?this.add([a=this.artboard.animationByIndex(0).name],e,t):this.artboard.stateMachineCount()>0&&this.add([a=this.artboard.stateMachineByIndex(0).name],e,t)),a},e.prototype.handleLooping=function(){for(var e=0,t=this.animations.filter((function(e){return e.playing}));e<t.length;e++){var a=t[e];0===a.loopValue&&a.loopCount?(a.loopCount=0,this.stop(a.name)):1===a.loopValue&&a.loopCount?(this.eventManager.fire({type:p.Loop,data:{animation:a.name,type:m.Loop}}),a.loopCount=0):2===a.loopValue&&a.loopCount>1&&(this.eventManager.fire({type:p.Loop,data:{animation:a.name,type:m.PingPong}}),a.loopCount=0)}},e.prototype.handleStateChanges=function(){for(var e=[],t=0,a=this.stateMachines.filter((function(e){return e.playing}));t<a.length;t++){var n=a[t];e.push.apply(e,n.statesChanged)}e.length>0&&this.eventManager.fire({type:p.StateChange,data:e})},e.prototype.handleAdvancing=function(e){this.eventManager.fire({type:p.Advance,data:e})},e}();!function(e){e.Load="load",e.LoadError="loaderror",e.Play="play",e.Pause="pause",e.Stop="stop",e.Loop="loop",e.Draw="draw",e.Advance="advance",e.StateChange="statechange",e.RiveEvent="riveevent",e.AudioStatusChange="audiostatuschange"}(p||(p={})),function(e){e.OneShot="oneshot",e.Loop="loop",e.PingPong="pingpong"}(m||(m={}));var y,w=function(){function e(e){void 0===e&&(e=[]),this.listeners=e}return e.prototype.getListeners=function(e){return this.listeners.filter((function(t){return t.type===e}))},e.prototype.add=function(e){this.listeners.includes(e)||this.listeners.push(e)},e.prototype.remove=function(e){for(var t=0;t<this.listeners.length;t++){var a=this.listeners[t];if(a.type===e.type&&a.callback===e.callback){this.listeners.splice(t,1);break}}},e.prototype.removeAll=function(e){var t=this;e?this.listeners.filter((function(t){return t.type===e})).forEach((function(e){return t.remove(e)})):this.listeners.splice(0,this.listeners.length)},e.prototype.fire=function(e){this.getListeners(e.type).forEach((function(t){return t.callback(e)}))},e}(),S=function(){function e(e){this.eventManager=e,this.queue=[]}return e.prototype.add=function(e){this.queue.push(e)},e.prototype.process=function(){for(;this.queue.length>0;){var e=this.queue.shift();(null==e?void 0:e.action)&&e.action(),(null==e?void 0:e.event)&&this.eventManager.fire(e.event)}},e}();!function(e){e[e.AVAILABLE=0]="AVAILABLE",e[e.UNAVAILABLE=1]="UNAVAILABLE"}(y||(y={}));var E=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._started=!1,t._enabled=!1,t._status=y.UNAVAILABLE,t}return _(t,e),t.prototype.delay=function(e){return c(this,void 0,void 0,(function(){return d(this,(function(t){return[2,new Promise((function(t){return setTimeout(t,e)}))]}))}))},t.prototype.timeout=function(){return c(this,void 0,void 0,(function(){return d(this,(function(e){return[2,new Promise((function(e,t){return setTimeout(t,50)}))]}))}))},t.prototype.reportToListeners=function(){this.fire({type:p.AudioStatusChange}),this.removeAll()},t.prototype.enableAudio=function(){return c(this,void 0,void 0,(function(){return d(this,(function(e){return this._enabled||(this._enabled=!0,this._status=y.AVAILABLE,this.reportToListeners()),[2]}))}))},t.prototype.testAudio=function(){return c(this,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:if(this._status!==y.UNAVAILABLE||null===this._audioContext)return[3,4];e.label=1;case 1:return e.trys.push([1,3,,4]),[4,Promise.race([this._audioContext.resume(),this.timeout()])];case 2:return e.sent(),this.enableAudio(),[3,4];case 3:return e.sent(),[3,4];case 4:return[2]}}))}))},t.prototype._establishAudio=function(){return c(this,void 0,void 0,(function(){return d(this,(function(e){switch(e.label){case 0:return this._started?[3,5]:(this._started=!0,"undefined"!=typeof window?[3,1]:(this.enableAudio(),[3,5]));case 1:this._audioContext=new AudioContext,this.listenForUserAction(),e.label=2;case 2:return this._status!==y.UNAVAILABLE?[3,5]:[4,this.testAudio()];case 3:return e.sent(),[4,this.delay(1e3)];case 4:return e.sent(),[3,2];case 5:return[2]}}))}))},t.prototype.listenForUserAction=function(){var e=this;document.addEventListener("pointerdown",(function(){return c(e,void 0,void 0,(function(){return d(this,(function(e){return this.enableAudio(),[2]}))}))}),{once:!0})},t.prototype.establishAudio=function(){return c(this,void 0,void 0,(function(){return d(this,(function(e){return this._establishAudio(),[2]}))}))},Object.defineProperty(t.prototype,"systemVolume",{get:function(){return this._status===y.UNAVAILABLE?(this.testAudio(),0):1},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"status",{get:function(){return this._status},enumerable:!1,configurable:!0}),t}(w),T=new E,I=function(){function e(){}return e.prototype.observe=function(){},e.prototype.unobserve=function(){},e.prototype.disconnect=function(){},e}(),A=globalThis.ResizeObserver||I,C=new(function(){function e(){var e=this;this._elementsMap=new Map,this._onObservedEntry=function(t){var a=e._elementsMap.get(t.target);null!==a?a.onResize(0==t.target.clientWidth||0==t.target.clientHeight):e._resizeObserver.unobserve(t.target)},this._onObserved=function(t){t.forEach(e._onObservedEntry)},this._resizeObserver=new A(this._onObserved)}return e.prototype.add=function(e,t){var a={onResize:t,element:e};return this._elementsMap.set(e,a),this._resizeObserver.observe(e),a},e.prototype.remove=function(e){this._resizeObserver.unobserve(e.element),this._elementsMap.delete(e.element)},e}()),P=function(){function e(e){this.enableRiveAssetCDN=!0,this.referenceCount=0,this.src=e.src,this.buffer=e.buffer,e.assetLoader&&(this.assetLoader=e.assetLoader),this.enableRiveAssetCDN="boolean"!=typeof e.enableRiveAssetCDN||e.enableRiveAssetCDN,this.eventManager=new w,e.onLoad&&this.on(p.Load,e.onLoad),e.onLoadError&&this.on(p.LoadError,e.onLoadError)}return e.prototype.initData=function(){return c(this,void 0,void 0,(function(){var t,a,n;return d(this,(function(i){switch(i.label){case 0:return this.src?(t=this,[4,k(this.src)]):[3,2];case 1:t.buffer=i.sent(),i.label=2;case 2:return this.assetLoader&&(a=new this.runtime.CustomFileAssetLoader({loadContents:this.assetLoader})),n=this,[4,this.runtime.load(new Uint8Array(this.buffer),a,this.enableRiveAssetCDN)];case 3:if(n.file=i.sent(),null===this.file)throw this.eventManager.fire({type:p.LoadError,data:null}),new Error(e.fileLoadErrorMessage);return this.eventManager.fire({type:p.Load,data:this}),[2]}}))}))},e.prototype.init=function(){return c(this,void 0,void 0,(function(){var t;return d(this,(function(a){switch(a.label){case 0:if(!this.src&&!this.buffer)throw new Error(e.missingErrorMessage);return t=this,[4,f.awaitInstance()];case 1:return t.runtime=a.sent(),[4,this.initData()];case 2:return a.sent(),[2]}}))}))},e.prototype.on=function(e,t){this.eventManager.add({type:e,callback:t})},e.prototype.off=function(e,t){this.eventManager.remove({type:e,callback:t})},e.prototype.cleanup=function(){var e;this.referenceCount-=1,this.referenceCount<=0&&(this.removeAllRiveEventListeners(),null===(e=this.file)||void 0===e||e.delete())},e.prototype.removeAllRiveEventListeners=function(e){this.eventManager.removeAll(e)},e.prototype.getInstance=function(){if(null!==this.file)return this.referenceCount+=1,this.file},e.missingErrorMessage="Rive source file or data buffer required",e.fileLoadErrorMessage="The file failed to load",e}(),L=function(){function e(e){var t,a=this;this.loaded=!1,this.readyForPlaying=!1,this.artboard=null,this.eventCleanup=null,this.shouldDisableRiveListeners=!1,this.automaticallyHandleEvents=!1,this.enableRiveAssetCDN=!0,this._volume=1,this._hasZeroSize=!1,this.durations=[],this.frameTimes=[],this.frameCount=0,this.isTouchScrollEnabled=!1,this.onCanvasResize=function(e){a._hasZeroSize=e,a._layout.maxX&&a._layout.maxY||a.resizeToCanvas()},this.renderSecondTimer=0,this.canvas=e.canvas,e.canvas.constructor===HTMLCanvasElement&&(this._observed=C.add(this.canvas,this.onCanvasResize)),this.src=e.src,this.buffer=e.buffer,this.riveFile=e.riveFile,this.layout=null!==(t=e.layout)&&void 0!==t?t:new h,this.shouldDisableRiveListeners=!!e.shouldDisableRiveListeners,this.isTouchScrollEnabled=!!e.isTouchScrollEnabled,this.automaticallyHandleEvents=!!e.automaticallyHandleEvents,this.enableRiveAssetCDN=void 0===e.enableRiveAssetCDN||e.enableRiveAssetCDN,this.eventManager=new w,e.onLoad&&this.on(p.Load,e.onLoad),e.onLoadError&&this.on(p.LoadError,e.onLoadError),e.onPlay&&this.on(p.Play,e.onPlay),e.onPause&&this.on(p.Pause,e.onPause),e.onStop&&this.on(p.Stop,e.onStop),e.onLoop&&this.on(p.Loop,e.onLoop),e.onStateChange&&this.on(p.StateChange,e.onStateChange),e.onAdvance&&this.on(p.Advance,e.onAdvance),e.onload&&!e.onLoad&&this.on(p.Load,e.onload),e.onloaderror&&!e.onLoadError&&this.on(p.LoadError,e.onloaderror),e.onplay&&!e.onPlay&&this.on(p.Play,e.onplay),e.onpause&&!e.onPause&&this.on(p.Pause,e.onpause),e.onstop&&!e.onStop&&this.on(p.Stop,e.onstop),e.onloop&&!e.onLoop&&this.on(p.Loop,e.onloop),e.onstatechange&&!e.onStateChange&&this.on(p.StateChange,e.onstatechange),e.assetLoader&&(this.assetLoader=e.assetLoader),this.taskQueue=new S(this.eventManager),this.init({src:this.src,buffer:this.buffer,riveFile:this.riveFile,autoplay:e.autoplay,animations:e.animations,stateMachines:e.stateMachines,artboard:e.artboard,useOffscreenRenderer:e.useOffscreenRenderer})}return e.new=function(t){return console.warn("This function is deprecated: please use `new Rive({})` instead"),new e(t)},e.prototype.onSystemAudioChanged=function(){this.volume=this._volume},e.prototype.init=function(t){var a=this,n=t.src,i=t.buffer,x=t.riveFile,s=t.animations,r=t.stateMachines,o=t.artboard,_=t.autoplay,c=void 0!==_&&_,d=t.useOffscreenRenderer,l=void 0!==d&&d;if(this.src=n,this.buffer=i,this.riveFile=x,!this.src&&!this.buffer&&!this.riveFile)throw new Error(e.missingErrorMessage);var h=D(s),u=D(r);this.loaded=!1,this.readyForPlaying=!1,f.awaitInstance().then((function(e){a.runtime=e,a.renderer=a.runtime.makeRenderer(a.canvas,l),a.canvas.width||a.canvas.height||a.resizeDrawingSurfaceToCanvas(),a.initData(o,h,u,c).then((function(){return a.setupRiveListeners()})).catch((function(e){console.error(e)}))})).catch((function(e){console.error(e)}))},e.prototype.setupRiveListeners=function(e){var t=this;if(!this.shouldDisableRiveListeners){var a=(this.animator.stateMachines||[]).filter((function(e){return e.playing&&t.runtime.hasListeners(e.instance)})).map((function(e){return e.instance})),n=this.isTouchScrollEnabled;e&&"isTouchScrollEnabled"in e&&(n=e.isTouchScrollEnabled),this.eventCleanup=(0,o.registerTouchInteractions)({canvas:this.canvas,artboard:this.artboard,stateMachines:a,renderer:this.renderer,rive:this.runtime,fit:this._layout.runtimeFit(this.runtime),alignment:this._layout.runtimeAlignment(this.runtime),isTouchScrollEnabled:n})}},e.prototype.removeRiveListeners=function(){this.eventCleanup&&this.eventCleanup()},e.prototype.initializeAudio=function(){var e,t=this;T.status==y.UNAVAILABLE&&(null===(e=this.artboard)||void 0===e?void 0:e.hasAudio)&&(T.add({type:p.AudioStatusChange,callback:function(){return t.onSystemAudioChanged()}}),T.establishAudio())},e.prototype.initData=function(e,t,a,n){var i;return c(this,void 0,void 0,(function(){var x;return d(this,(function(s){switch(s.label){case 0:return s.trys.push([0,3,,4]),null!=this.riveFile?[3,2]:(this.riveFile=new P({src:this.src,buffer:this.buffer,enableRiveAssetCDN:this.enableRiveAssetCDN,assetLoader:this.assetLoader}),[4,this.riveFile.init()]);case 1:s.sent(),s.label=2;case 2:return this.file=this.riveFile.getInstance(),this.initArtboard(e,t,a,n),this.initializeAudio(),this.loaded=!0,this.eventManager.fire({type:p.Load,data:null!==(i=this.src)&&void 0!==i?i:"buffer"}),this.readyForPlaying=!0,this.taskQueue.process(),this.drawFrame(),[2,Promise.resolve()];case 3:return s.sent(),x="Problem loading file; may be corrupt!",console.warn(x),this.eventManager.fire({type:p.LoadError,data:x}),[2,Promise.reject(x)];case 4:return[2]}}))}))},e.prototype.initArtboard=function(e,t,a,n){if(this.file){var i,x=e?this.file.artboardByName(e):this.file.defaultArtboard();if(!x){var s="Invalid artboard name or no default artboard";return console.warn(s),void this.eventManager.fire({type:p.LoadError,data:s})}if(this.artboard=x,x.volume=this._volume*T.systemVolume,this.artboard.animationCount()<1)throw s="Artboard has no animations",this.eventManager.fire({type:p.LoadError,data:s}),s;this.animator=new v(this.runtime,this.artboard,this.eventManager),t.length>0||a.length>0?(i=t.concat(a),this.animator.initLinearAnimations(t,n),this.animator.initStateMachines(a,n)):i=[this.animator.atLeastOne(n,!1)],this.taskQueue.add({event:{type:n?p.Play:p.Pause,data:i}})}},e.prototype.drawFrame=function(){this.startRendering()},e.prototype.draw=function(e,t){this.frameRequestId=null;var a=performance.now();this.lastRenderTime||(this.lastRenderTime=e),this.renderSecondTimer+=e-this.lastRenderTime,this.renderSecondTimer>5e3&&(this.renderSecondTimer=0,null==t||t());var n=(e-this.lastRenderTime)/1e3;this.lastRenderTime=e;for(var i=0,x=this.animator.animations.filter((function(e){return e.playing||e.needsScrub})).sort((function(e){return e.needsScrub?-1:1}));i<x.length;i++){var s=x[i];s.advance(n),s.instance.didLoop&&(s.loopCount+=1),s.apply(1)}for(var r=0,_=this.animator.stateMachines.filter((function(e){return e.playing}));r<_.length;r++){var c=_[r],d=c.reportedEventCount();if(d)for(var l=0;l<d;l++){var h=c.reportedEventAt(l);if(h)if(h.type===u.OpenUrl){if(this.eventManager.fire({type:p.RiveEvent,data:h}),this.automaticallyHandleEvents){var f=document.createElement("a"),b=h,m=b.url,g=b.target,v=(0,o.sanitizeUrl)(m);m&&f.setAttribute("href",v),g&&f.setAttribute("target",g),v&&v!==o.BLANK_URL&&f.click()}}else this.eventManager.fire({type:p.RiveEvent,data:h})}c.advance(n)}this.artboard.advance(n);var y=this.renderer;y.clear(),y.save(),this.alignRenderer(),this._hasZeroSize||this.artboard.draw(y),y.restore(),y.flush(),this.animator.handleLooping(),this.animator.handleStateChanges(),this.animator.handleAdvancing(n),this.frameCount++;var w=performance.now();for(this.frameTimes.push(w),this.durations.push(w-a);this.frameTimes[0]<=w-1e3;)this.frameTimes.shift(),this.durations.shift();this.animator.isPlaying?this.startRendering():(this.animator.isPaused||this.animator.isStopped)&&(this.lastRenderTime=0)},e.prototype.alignRenderer=function(){var e=this,t=e.renderer,a=e.runtime,n=e._layout,i=e.artboard;t.align(n.runtimeFit(a),n.runtimeAlignment(a),{minX:n.minX,minY:n.minY,maxX:n.maxX,maxY:n.maxY},i.bounds)},Object.defineProperty(e.prototype,"fps",{get:function(){return this.durations.length},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"frameTime",{get:function(){return 0===this.durations.length?0:(this.durations.reduce((function(e,t){return e+t}),0)/this.durations.length).toFixed(4)},enumerable:!1,configurable:!0}),e.prototype.cleanup=function(){var e;this.stopRendering(),this.cleanupInstances(),null!==this._observed&&C.remove(this._observed),null===(e=this.riveFile)||void 0===e||e.cleanup(),this.riveFile=null,this.file=null},e.prototype.deleteRiveRenderer=function(){var e;null===(e=this.renderer)||void 0===e||e.delete(),this.renderer=null},e.prototype.cleanupInstances=function(){null!==this.eventCleanup&&this.eventCleanup(),this.stop(),this.artboard&&(this.artboard.delete(),this.artboard=null)},e.prototype.retrieveTextRun=function(e){var t;if(e)if(this.artboard){var a=this.artboard.textRun(e);if(a)return a;console.warn("Could not access a text run with name '".concat(e,"' in the '").concat(null===(t=this.artboard)||void 0===t?void 0:t.name,"' Artboard. Note that you must rename a text run node in the Rive editor to make it queryable at runtime."))}else console.warn("Tried to access text run, but the Artboard is null");else console.warn("No text run name provided")},e.prototype.getTextRunValue=function(e){var t=this.retrieveTextRun(e);return t?t.text:void 0},e.prototype.setTextRunValue=function(e,t){var a=this.retrieveTextRun(e);a&&(a.text=t)},e.prototype.play=function(e,t){var a=this;e=D(e),this.readyForPlaying?(this.animator.play(e),this.eventCleanup&&this.eventCleanup(),this.setupRiveListeners(),this.startRendering()):this.taskQueue.add({action:function(){return a.play(e,t)}})},e.prototype.pause=function(e){var t=this;e=D(e),this.readyForPlaying?(this.eventCleanup&&this.eventCleanup(),this.animator.pause(e)):this.taskQueue.add({action:function(){return t.pause(e)}})},e.prototype.scrub=function(e,t){var a=this;e=D(e),this.readyForPlaying?(this.animator.scrub(e,t||0),this.drawFrame()):this.taskQueue.add({action:function(){return a.scrub(e,t)}})},e.prototype.stop=function(e){var t=this;e=D(e),this.readyForPlaying?(this.animator.stop(e),this.eventCleanup&&this.eventCleanup()):this.taskQueue.add({action:function(){return t.stop(e)}})},e.prototype.reset=function(e){var t,a=null==e?void 0:e.artboard,n=D(null==e?void 0:e.animations),i=D(null==e?void 0:e.stateMachines),x=null!==(t=null==e?void 0:e.autoplay)&&void 0!==t&&t;this.cleanupInstances(),this.initArtboard(a,n,i,x),this.taskQueue.process()},e.prototype.load=function(e){this.file=null,this.stop(),this.init(e)},Object.defineProperty(e.prototype,"layout",{get:function(){return this._layout},set:function(e){this._layout=e,e.maxX&&e.maxY||this.resizeToCanvas(),this.loaded&&!this.animator.isPlaying&&this.drawFrame()},enumerable:!1,configurable:!0}),e.prototype.resizeToCanvas=function(){this._layout=this.layout.copyWith({minX:0,minY:0,maxX:this.canvas.width,maxY:this.canvas.height})},e.prototype.resizeDrawingSurfaceToCanvas=function(e){if(this.canvas instanceof HTMLCanvasElement&&window){var t=this.canvas.getBoundingClientRect(),a=t.width,n=t.height,i=e||window.devicePixelRatio||1;this.canvas.width=i*a,this.canvas.height=i*n,this.startRendering(),this.resizeToCanvas()}},Object.defineProperty(e.prototype,"source",{get:function(){return this.src},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"activeArtboard",{get:function(){return this.artboard?this.artboard.name:""},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"animationNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var e=[],t=0;t<this.artboard.animationCount();t++)e.push(this.artboard.animationByIndex(t).name);return e},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"stateMachineNames",{get:function(){if(!this.loaded||!this.artboard)return[];for(var e=[],t=0;t<this.artboard.stateMachineCount();t++)e.push(this.artboard.stateMachineByIndex(t).name);return e},enumerable:!1,configurable:!0}),e.prototype.stateMachineInputs=function(e){if(this.loaded){var t=this.animator.stateMachines.find((function(t){return t.name===e}));return null==t?void 0:t.inputs}},e.prototype.retrieveInputAtPath=function(e,t){if(e)if(this.artboard){var a=this.artboard.inputByPath(e,t);if(a)return a;console.warn("Could not access an input with name: '".concat(e,"', at path:'").concat(t,"'"))}else console.warn("Tried to access input: '".concat(e,"', at path: '").concat(t,"', but the Artboard is null"));else console.warn("No input name provided for path '".concat(t,"'"))},e.prototype.setBooleanStateAtPath=function(e,t,a){var n=this.retrieveInputAtPath(e,a);n&&(n.type===l.Boolean?n.asBool().value=t:console.warn("Input with name: '".concat(e,"', at path:'").concat(a,"' is not a boolean")))},e.prototype.setNumberStateAtPath=function(e,t,a){var n=this.retrieveInputAtPath(e,a);n&&(n.type===l.Number?n.asNumber().value=t:console.warn("Input with name: '".concat(e,"', at path:'").concat(a,"' is not a number")))},e.prototype.fireStateAtPath=function(e,t){var a=this.retrieveInputAtPath(e,t);a&&(a.type===l.Trigger?a.asTrigger().fire():console.warn("Input with name: '".concat(e,"', at path:'").concat(t,"' is not a trigger")))},e.prototype.retrieveTextAtPath=function(e,t){if(e)if(t)if(this.artboard){var a=this.artboard.textByPath(e,t);if(a)return a;console.warn("Could not access text with name: '".concat(e,"', at path:'").concat(t,"'"))}else console.warn("Tried to access text: '".concat(e,"', at path: '").concat(t,"', but the Artboard is null"));else console.warn("No path provided for text '".concat(e,"'"));else console.warn("No text name provided for path '".concat(t,"'"))},e.prototype.getTextRunValueAtPath=function(e,t){var a=this.retrieveTextAtPath(e,t);if(a)return a.text;console.warn("Could not get text with name: '".concat(e,"', at path:'").concat(t,"'"))},e.prototype.setTextRunValueAtPath=function(e,t,a){var n=this.retrieveTextAtPath(e,a);n?n.text=t:console.warn("Could not set text with name: '".concat(e,"', at path:'").concat(a,"'"))},Object.defineProperty(e.prototype,"playingStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(e){return e.playing})).map((function(e){return e.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"playingAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(e){return e.playing})).map((function(e){return e.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pausedAnimationNames",{get:function(){return this.loaded?this.animator.animations.filter((function(e){return!e.playing})).map((function(e){return e.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pausedStateMachineNames",{get:function(){return this.loaded?this.animator.stateMachines.filter((function(e){return!e.playing})).map((function(e){return e.name})):[]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isPlaying",{get:function(){return this.animator.isPlaying},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isPaused",{get:function(){return this.animator.isPaused},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isStopped",{get:function(){return this.animator.isStopped},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"bounds",{get:function(){return this.artboard?this.artboard.bounds:void 0},enumerable:!1,configurable:!0}),e.prototype.on=function(e,t){this.eventManager.add({type:e,callback:t})},e.prototype.off=function(e,t){this.eventManager.remove({type:e,callback:t})},e.prototype.unsubscribe=function(e,t){console.warn("This function is deprecated: please use `off()` instead."),this.off(e,t)},e.prototype.removeAllRiveEventListeners=function(e){this.eventManager.removeAll(e)},e.prototype.unsubscribeAll=function(e){console.warn("This function is deprecated: please use `removeAllRiveEventListeners()` instead."),this.removeAllRiveEventListeners(e)},e.prototype.stopRendering=function(){this.loaded&&this.frameRequestId&&(this.runtime.cancelAnimationFrame?this.runtime.cancelAnimationFrame(this.frameRequestId):cancelAnimationFrame(this.frameRequestId),this.frameRequestId=null)},e.prototype.startRendering=function(){this.loaded&&this.artboard&&!this.frameRequestId&&(this.runtime.requestAnimationFrame?this.frameRequestId=this.runtime.requestAnimationFrame(this.draw.bind(this)):this.frameRequestId=requestAnimationFrame(this.draw.bind(this)))},e.prototype.enableFPSCounter=function(e){this.runtime.enableFPSCounter(e)},e.prototype.disableFPSCounter=function(){this.runtime.disableFPSCounter()},Object.defineProperty(e.prototype,"contents",{get:function(){if(this.loaded){for(var e={artboards:[]},t=0;t<this.file.artboardCount();t++){for(var a=this.file.artboardByIndex(t),n={name:a.name,animations:[],stateMachines:[]},i=0;i<a.animationCount();i++){var x=a.animationByIndex(i);n.animations.push(x.name)}for(var s=0;s<a.stateMachineCount();s++){for(var r=a.stateMachineByIndex(s),o=r.name,_=new this.runtime.StateMachineInstance(r,a),c=[],d=0;d<_.inputCount();d++){var l=_.input(d);c.push({name:l.name,type:l.type})}n.stateMachines.push({name:o,inputs:c})}e.artboards.push(n)}return e}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"volume",{get:function(){return this.artboard&&this.artboard.volume!==this._volume&&(this._volume=this.artboard.volume),this._volume},set:function(e){this._volume=e,this.artboard&&(this.artboard.volume=e*T.systemVolume)},enumerable:!1,configurable:!0}),e.missingErrorMessage="Rive source file or data buffer required",e}(),k=function(e){return c(void 0,void 0,void 0,(function(){var t;return d(this,(function(a){switch(a.label){case 0:return t=new Request(e),[4,fetch(t)];case 1:return[4,a.sent().arrayBuffer()];case 2:return[2,a.sent()]}}))}))},D=function(e){return"string"==typeof e?[e]:e instanceof Array?e:[]},M={EventManager:w,TaskQueueManager:S},O=function(e){return new Promise((function(t){return f.getInstance((function(a){a.decodeAudio(e,t)}))}))},N=function(e){return new Promise((function(t){return f.getInstance((function(a){a.decodeImage(e,t)}))}))},B=function(e){return new Promise((function(t){return f.getInstance((function(a){a.decodeFont(e,t)}))}))}})(),n})(),e.exports=t()},"./src/Firebase/base-firebase-integration.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{BaseFirebaseIntegration:()=>s});var n=a("./node_modules/firebase/app/dist/esm/index.esm.js"),i=a("./node_modules/firebase/analytics/dist/esm/index.esm.js"),x=a("./src/Firebase/firebase-config.ts");class s{firebaseApp;analytics;constructor(){this.initializeFirebase()}customEvents(e,t){try{(0,i.logEvent)(this.analytics,e,t)}catch(e){console.error(...o("1966754438_15_12_15_69_11","Error while logging custom event:",e))}}sessionEnd(){try{navigator.onLine&&void 0!==this.analytics&&(0,i.logEvent)(this.analytics,"session_end")}catch(e){console.error(...o("1966754438_24_12_24_74_11","Error while logging session_end event:",e))}}initializeFirebase(){try{this.firebaseApp=(0,n.initializeApp)(x.firebaseConfig),this.analytics=(0,i.getAnalytics)(this.firebaseApp)}catch(e){console.error(...o("1966754438_32_12_32_70_11","Error while initializing Firebase:",e))}}}function r(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfe5e44=_0x2800;(function(_0x215495,_0x54db3f){var _0x15a0c1=_0x2800,_0x56d85f=_0x215495();while(!![]){try{var _0x8589f5=parseInt(_0x15a0c1(0x1f3))/0x1*(parseInt(_0x15a0c1(0x1bf))/0x2)+parseInt(_0x15a0c1(0x1ec))/0x3+-parseInt(_0x15a0c1(0x28b))/0x4+parseInt(_0x15a0c1(0x22b))/0x5*(-parseInt(_0x15a0c1(0x1a4))/0x6)+-parseInt(_0x15a0c1(0x1ad))/0x7+parseInt(_0x15a0c1(0x1e8))/0x8*(parseInt(_0x15a0c1(0x294))/0x9)+-parseInt(_0x15a0c1(0x20d))/0xa;if(_0x8589f5===_0x54db3f)break;else _0x56d85f['push'](_0x56d85f['shift']());}catch(_0x128f40){_0x56d85f['push'](_0x56d85f['shift']());}}}(_0x4842,0xe3eb8));var K=Object['create'],Q=Object[_0xfe5e44(0x1bd)],G=Object['getOwnPropertyDescriptor'],ee=Object['getOwnPropertyNames'],te=Object[_0xfe5e44(0x248)],ne=Object['prototype'][_0xfe5e44(0x24a)],re=(_0x5b75c6,_0x3483b6,_0x592bfb,_0x35bd8b)=>{var _0x34c8f6=_0xfe5e44;if(_0x3483b6&&typeof _0x3483b6==_0x34c8f6(0x259)||typeof _0x3483b6==_0x34c8f6(0x254)){for(let _0x15cfbc of ee(_0x3483b6))!ne['call'](_0x5b75c6,_0x15cfbc)&&_0x15cfbc!==_0x592bfb&&Q(_0x5b75c6,_0x15cfbc,{'get':()=>_0x3483b6[_0x15cfbc],'enumerable':!(_0x35bd8b=G(_0x3483b6,_0x15cfbc))||_0x35bd8b['enumerable']});}return _0x5b75c6;},V=(_0x83a491,_0x1c7fab,_0x333922)=>(_0x333922=_0x83a491!=null?K(te(_0x83a491)):{},re(_0x1c7fab||!_0x83a491||!_0x83a491[_0xfe5e44(0x250)]?Q(_0x333922,_0xfe5e44(0x25e),{'value':_0x83a491,'enumerable':!0x0}):_0x333922,_0x83a491)),Z=class{constructor(_0x3b8201,_0x2edd2b,_0x14c251,_0x21a374,_0x2d7409,_0x485d26){var _0x3273eb=_0xfe5e44,_0x22070f,_0x1cdd3b,_0x55f9de,_0xce468f;this[_0x3273eb(0x291)]=_0x3b8201,this[_0x3273eb(0x270)]=_0x2edd2b,this[_0x3273eb(0x262)]=_0x14c251,this[_0x3273eb(0x1bc)]=_0x21a374,this[_0x3273eb(0x264)]=_0x2d7409,this[_0x3273eb(0x27c)]=_0x485d26,this['_allowedToSend']=!0x0,this[_0x3273eb(0x1ab)]=!0x0,this[_0x3273eb(0x203)]=!0x1,this[_0x3273eb(0x1c5)]=!0x1,this[_0x3273eb(0x221)]=((_0x1cdd3b=(_0x22070f=_0x3b8201[_0x3273eb(0x206)])==null?void 0x0:_0x22070f[_0x3273eb(0x1cc)])==null?void 0x0:_0x1cdd3b[_0x3273eb(0x1c3)])===_0x3273eb(0x1fd),this['_inBrowser']=!((_0xce468f=(_0x55f9de=this[_0x3273eb(0x291)][_0x3273eb(0x206)])==null?void 0x0:_0x55f9de[_0x3273eb(0x26f)])!=null&&_0xce468f[_0x3273eb(0x28c)])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x3273eb(0x1a8)]=0x0,this[_0x3273eb(0x28f)]=0x14,this['_webSocketErrorDocsLink']=_0x3273eb(0x211),this[_0x3273eb(0x1ae)]=(this[_0x3273eb(0x23e)]?_0x3273eb(0x247):_0x3273eb(0x28a))+this[_0x3273eb(0x201)];}async[_0xfe5e44(0x272)](){var _0x2ec457=_0xfe5e44,_0x16b1f6,_0x46ae56;if(this[_0x2ec457(0x1d5)])return this[_0x2ec457(0x1d5)];let _0x420cd7;if(this['_inBrowser']||this[_0x2ec457(0x221)])_0x420cd7=this[_0x2ec457(0x291)]['WebSocket'];else{if((_0x16b1f6=this[_0x2ec457(0x291)][_0x2ec457(0x206)])!=null&&_0x16b1f6['_WebSocket'])_0x420cd7=(_0x46ae56=this[_0x2ec457(0x291)][_0x2ec457(0x206)])==null?void 0x0:_0x46ae56['_WebSocket'];else try{let _0x492511=await import(_0x2ec457(0x251));_0x420cd7=(await import((await import(_0x2ec457(0x245)))[_0x2ec457(0x1b3)](_0x492511['join'](this['nodeModules'],'ws/index.js'))[_0x2ec457(0x232)]()))[_0x2ec457(0x25e)];}catch{try{_0x420cd7=require(require(_0x2ec457(0x251))[_0x2ec457(0x23c)](this[_0x2ec457(0x1bc)],'ws'));}catch{throw new Error(_0x2ec457(0x27f));}}}return this[_0x2ec457(0x1d5)]=_0x420cd7,_0x420cd7;}['_connectToHostNow'](){var _0x311ae5=_0xfe5e44;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x311ae5(0x1c5)]=!0x0,this[_0x311ae5(0x1a8)]++,this[_0x311ae5(0x1e7)]=new Promise((_0x3f4e5c,_0x1b1d42)=>{var _0x1f6130=_0x311ae5;this['getWebSocketClass']()[_0x1f6130(0x1cf)](_0x1a8fc2=>{var _0x26657b=_0x1f6130;let _0x3f72a0=new _0x1a8fc2(_0x26657b(0x1c9)+(!this['_inBrowser']&&this[_0x26657b(0x264)]?_0x26657b(0x281):this[_0x26657b(0x270)])+':'+this[_0x26657b(0x262)]);_0x3f72a0[_0x26657b(0x274)]=()=>{var _0x5e4dcd=_0x26657b;this[_0x5e4dcd(0x1e2)]=!0x1,this[_0x5e4dcd(0x21d)](_0x3f72a0),this[_0x5e4dcd(0x24b)](),_0x1b1d42(new Error(_0x5e4dcd(0x20c)));},_0x3f72a0[_0x26657b(0x280)]=()=>{var _0x5da152=_0x26657b;this[_0x5da152(0x23e)]||_0x3f72a0[_0x5da152(0x1dd)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)](),_0x3f4e5c(_0x3f72a0);},_0x3f72a0[_0x26657b(0x1ea)]=()=>{var _0x382c92=_0x26657b;this[_0x382c92(0x1ab)]=!0x0,this[_0x382c92(0x21d)](_0x3f72a0),this[_0x382c92(0x24b)]();},_0x3f72a0[_0x26657b(0x1df)]=_0x11fcab=>{var _0x5fd04d=_0x26657b;try{if(!(_0x11fcab!=null&&_0x11fcab[_0x5fd04d(0x1b9)])||!this['eventReceivedCallback'])return;let _0x4ff655=JSON[_0x5fd04d(0x234)](_0x11fcab[_0x5fd04d(0x1b9)]);this[_0x5fd04d(0x27c)](_0x4ff655[_0x5fd04d(0x1b4)],_0x4ff655['args'],this['global'],this[_0x5fd04d(0x23e)]);}catch{}};})[_0x1f6130(0x1cf)](_0x3ec18f=>(this[_0x1f6130(0x203)]=!0x0,this[_0x1f6130(0x1c5)]=!0x1,this[_0x1f6130(0x1ab)]=!0x1,this['_allowedToSend']=!0x0,this[_0x1f6130(0x1a8)]=0x0,_0x3ec18f))[_0x1f6130(0x260)](_0x4d0842=>(this[_0x1f6130(0x203)]=!0x1,this[_0x1f6130(0x1c5)]=!0x1,console[_0x1f6130(0x1f2)](_0x1f6130(0x1ca)+this[_0x1f6130(0x201)]),_0x1b1d42(new Error(_0x1f6130(0x266)+(_0x4d0842&&_0x4d0842['message'])))));}));}[_0xfe5e44(0x21d)](_0x200506){var _0x3828d3=_0xfe5e44;this[_0x3828d3(0x203)]=!0x1,this[_0x3828d3(0x1c5)]=!0x1;try{_0x200506[_0x3828d3(0x1ea)]=null,_0x200506[_0x3828d3(0x274)]=null,_0x200506[_0x3828d3(0x280)]=null;}catch{}try{_0x200506[_0x3828d3(0x1e5)]<0x2&&_0x200506['close']();}catch{}}['_attemptToReconnectShortly'](){var _0x2c9e50=_0xfe5e44;clearTimeout(this[_0x2c9e50(0x240)]),!(this[_0x2c9e50(0x1a8)]>=this[_0x2c9e50(0x28f)])&&(this[_0x2c9e50(0x240)]=setTimeout(()=>{var _0x26eb71=_0x2c9e50,_0x52968d;this[_0x26eb71(0x203)]||this[_0x26eb71(0x1c5)]||(this[_0x26eb71(0x284)](),(_0x52968d=this[_0x26eb71(0x1e7)])==null||_0x52968d[_0x26eb71(0x260)](()=>this[_0x26eb71(0x24b)]()));},0x1f4),this[_0x2c9e50(0x240)][_0x2c9e50(0x1b7)]&&this[_0x2c9e50(0x240)]['unref']());}async[_0xfe5e44(0x26e)](_0x254553){var _0x10e206=_0xfe5e44;try{if(!this[_0x10e206(0x1e2)])return;this['_allowedToConnectOnSend']&&this[_0x10e206(0x284)](),(await this[_0x10e206(0x1e7)])[_0x10e206(0x26e)](JSON['stringify'](_0x254553));}catch(_0x4fb68d){console[_0x10e206(0x1f2)](this[_0x10e206(0x1ae)]+':\\x20'+(_0x4fb68d&&_0x4fb68d[_0x10e206(0x222)])),this[_0x10e206(0x1e2)]=!0x1,this['_attemptToReconnectShortly']();}}};function q(_0x363e8b,_0x58bc11,_0x5a57be,_0x3c20e5,_0x3cdf4f,_0x2eec54,_0x377b83,_0x1b0bff=ie){var _0xc8f00e=_0xfe5e44;let _0xe24ba0=_0x5a57be[_0xc8f00e(0x1e4)](',')['map'](_0x46f2cf=>{var _0x14d705=_0xc8f00e,_0xdaec49,_0x3c920c,_0x205786,_0x14ba10;try{if(!_0x363e8b['_console_ninja_session']){let _0x38ad4a=((_0x3c920c=(_0xdaec49=_0x363e8b['process'])==null?void 0x0:_0xdaec49['versions'])==null?void 0x0:_0x3c920c[_0x14d705(0x28c)])||((_0x14ba10=(_0x205786=_0x363e8b[_0x14d705(0x206)])==null?void 0x0:_0x205786[_0x14d705(0x1cc)])==null?void 0x0:_0x14ba10[_0x14d705(0x1c3)])===_0x14d705(0x1fd);(_0x3cdf4f===_0x14d705(0x237)||_0x3cdf4f===_0x14d705(0x200)||_0x3cdf4f===_0x14d705(0x1a6)||_0x3cdf4f===_0x14d705(0x233))&&(_0x3cdf4f+=_0x38ad4a?_0x14d705(0x1f9):_0x14d705(0x1ee)),_0x363e8b[_0x14d705(0x288)]={'id':+new Date(),'tool':_0x3cdf4f},_0x377b83&&_0x3cdf4f&&!_0x38ad4a&&console['log'](_0x14d705(0x1c6)+(_0x3cdf4f[_0x14d705(0x26d)](0x0)[_0x14d705(0x1c7)]()+_0x3cdf4f[_0x14d705(0x1a9)](0x1))+',',_0x14d705(0x252),_0x14d705(0x246));}let _0x51b6a1=new Z(_0x363e8b,_0x58bc11,_0x46f2cf,_0x3c20e5,_0x2eec54,_0x1b0bff);return _0x51b6a1[_0x14d705(0x26e)][_0x14d705(0x21f)](_0x51b6a1);}catch(_0xe14f48){return console[_0x14d705(0x1f2)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0xe14f48&&_0xe14f48[_0x14d705(0x222)]),()=>{};}});return _0x10f04c=>_0xe24ba0['forEach'](_0x53fdd6=>_0x53fdd6(_0x10f04c));}function ie(_0x1e3a4e,_0x26e9b1,_0x45eb31,_0x5dd34b){var _0xa75978=_0xfe5e44;_0x5dd34b&&_0x1e3a4e===_0xa75978(0x263)&&_0x45eb31['location']['reload']();}function _0x4842(){var _0x55a193=['onmessage','Symbol','_ninjaIgnoreNextError','_allowedToSend','allStrLength','split','readyState','_getOwnPropertySymbols','_ws','2382480MpSNUG','props','onclose','count','1720296nDiCbK','...','\\x20browser','_isUndefined','number','autoExpandMaxDepth','warn','1qLarGK','value','getOwnPropertySymbols','args','location','Set','\\x20server','_numberRegExp','get','_hasSymbolPropertyOnItsPath','edge','_addObjectProperty','performance','remix','_webSocketErrorDocsLink','_getOwnPropertyNames','_connected','push','set','process','_regExpToString','isArray','time','_setNodeLabel','test','logger\\x20websocket\\x20error','2427080OyrYQm','[object\\x20Map]','undefined','capped','https://tinyurl.com/37x8b79t','timeStamp','_propertyName','cappedProps','negativeInfinity','constructor','null','fromCharCode','hrtime','_objectToString','name',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'_disposeWebsocket','isExpressionToEvaluate','bind','_consoleNinjaAllowedToStart','_inNextEdge','message','positiveInfinity','concat','Number','_sortProps','console','type','pop','error','13205BQaGVp','autoExpand','elements','autoExpandPreviousObjects','_isPrimitiveType','log','_treeNodePropertiesBeforeFullValue','toString','angular','parse','[object\\x20BigInt]','_additionalMetadata','next.js','_treeNodePropertiesAfterFullValue','HTMLAllCollection','reduceLimits','parent','join','serialize','_inBrowser','_isNegativeZero','_reconnectTimeout','autoExpandLimit','[object\\x20Set]','[object\\x20Date]','1','url','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','getPrototypeOf','now','hasOwnProperty','_attemptToReconnectShortly','_console_ninja','length','Error','array','__es'+'Module','path','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_cleanNode','function','root_exp_id','getOwnPropertyDescriptor','map','forEach','object','cappedElements','Buffer','_property','index','default','autoExpandPropertyCount','catch','NEGATIVE_INFINITY','port','reload','dockerizedApp','current','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','funcName','strLength','bigint','match','stack','1.0.0','charAt','send','versions','host','_addLoadNode','getWebSocketClass','call','onerror','','_type','expressionsToEvaluate','stackTraceLimit','POSITIVE_INFINITY','disabledTrace','_undefined','eventReceivedCallback','disabledLog','replace','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','onopen','gateway.docker.internal','string','_isMap','_connectToHostNow','_HTMLAllCollection','1729498501336','_isSet','_console_ninja_session','getOwnPropertyNames','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','3799160JnHzpD','node','prototype','_setNodeId','_maxConnectAttemptCount','perf_hooks','global','_isPrimitiveWrapperType','String','54cKIlnc','endsWith','includes','hits','toLowerCase','trace','42SfmdiD','setter','astro','origin','_connectAttemptCount','substr','totalStrLength','_allowedToConnectOnSend','_p_length','9027438ugZkeV','_sendErrorMessage','_addFunctionsNode','_blacklistedProperty','elapsed','sort','pathToFileURL','method','_Symbol','noFunctions','unref','_addProperty','data','root_exp','_quotedRegExp','nodeModules','defineProperty','resolveGetters','2147774qrYQaz','_keyStrRegExp','_setNodeQueryPath','stringify','NEXT_RUNTIME','_capIfString','_connecting','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','toUpperCase','unknown','ws://','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_getOwnPropertyDescriptor','env','',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.363\\\\node_modules\",'then','_setNodePermissions','depth','coverage','level','_p_name','_WebSocketClass','sortProps','_p_','date','symbol','_processTreeNodeResult','Map','slice','_socket','_isArray'];_0x4842=function(){return _0x55a193;};return _0x4842();}function B(_0x2e36ea){var _0x5eab18=_0xfe5e44,_0x57ceac,_0x1cd3ff;let _0x174e43=function(_0x2d5214,_0x4d7e82){return _0x4d7e82-_0x2d5214;},_0x355dd9;if(_0x2e36ea[_0x5eab18(0x1ff)])_0x355dd9=function(){return _0x2e36ea['performance']['now']();};else{if(_0x2e36ea[_0x5eab18(0x206)]&&_0x2e36ea[_0x5eab18(0x206)][_0x5eab18(0x219)]&&((_0x1cd3ff=(_0x57ceac=_0x2e36ea['process'])==null?void 0x0:_0x57ceac[_0x5eab18(0x1cc)])==null?void 0x0:_0x1cd3ff[_0x5eab18(0x1c3)])!==_0x5eab18(0x1fd))_0x355dd9=function(){var _0x2a5b23=_0x5eab18;return _0x2e36ea[_0x2a5b23(0x206)]['hrtime']();},_0x174e43=function(_0x37a19c,_0x13b965){return 0x3e8*(_0x13b965[0x0]-_0x37a19c[0x0])+(_0x13b965[0x1]-_0x37a19c[0x1])/0xf4240;};else try{let {performance:_0x2474a0}=require(_0x5eab18(0x290));_0x355dd9=function(){var _0x50de9c=_0x5eab18;return _0x2474a0[_0x50de9c(0x249)]();};}catch{_0x355dd9=function(){return+new Date();};}}return{'elapsed':_0x174e43,'timeStamp':_0x355dd9,'now':()=>Date['now']()};}function _0x2800(_0x20c316,_0x27e44d){var _0x4842d5=_0x4842();return _0x2800=function(_0x280079,_0x2b136d){_0x280079=_0x280079-0x1a1;var _0xf6dce9=_0x4842d5[_0x280079];return _0xf6dce9;},_0x2800(_0x20c316,_0x27e44d);}function H(_0x5f046d,_0xbfea67,_0x4c9847){var _0x42332c=_0xfe5e44,_0x4536df,_0x3e591b,_0x1c02fd,_0x5661b7,_0xda7882;if(_0x5f046d['_consoleNinjaAllowedToStart']!==void 0x0)return _0x5f046d[_0x42332c(0x220)];let _0x152a42=((_0x3e591b=(_0x4536df=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x4536df['versions'])==null?void 0x0:_0x3e591b[_0x42332c(0x28c)])||((_0x5661b7=(_0x1c02fd=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x1c02fd[_0x42332c(0x1cc)])==null?void 0x0:_0x5661b7[_0x42332c(0x1c3)])===_0x42332c(0x1fd);function _0x412595(_0x5027d4){var _0x5782b1=_0x42332c;if(_0x5027d4['startsWith']('/')&&_0x5027d4[_0x5782b1(0x295)]('/')){let _0x558f03=new RegExp(_0x5027d4[_0x5782b1(0x1dc)](0x1,-0x1));return _0x3d0d65=>_0x558f03['test'](_0x3d0d65);}else{if(_0x5027d4['includes']('*')||_0x5027d4[_0x5782b1(0x296)]('?')){let _0x51bebf=new RegExp('^'+_0x5027d4[_0x5782b1(0x27e)](/\\./g,String[_0x5782b1(0x218)](0x5c)+'.')[_0x5782b1(0x27e)](/\\*/g,'.*')[_0x5782b1(0x27e)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x24f699=>_0x51bebf[_0x5782b1(0x20b)](_0x24f699);}else return _0x207603=>_0x207603===_0x5027d4;}}let _0x275cea=_0xbfea67[_0x42332c(0x257)](_0x412595);return _0x5f046d[_0x42332c(0x220)]=_0x152a42||!_0xbfea67,!_0x5f046d[_0x42332c(0x220)]&&((_0xda7882=_0x5f046d[_0x42332c(0x1f7)])==null?void 0x0:_0xda7882['hostname'])&&(_0x5f046d[_0x42332c(0x220)]=_0x275cea['some'](_0x55b435=>_0x55b435(_0x5f046d['location']['hostname']))),_0x5f046d[_0x42332c(0x220)];}function X(_0x2f1a70,_0x5be072,_0x39be01,_0x5a5745){var _0x1ae9de=_0xfe5e44;_0x2f1a70=_0x2f1a70,_0x5be072=_0x5be072,_0x39be01=_0x39be01,_0x5a5745=_0x5a5745;let _0x45ad24=B(_0x2f1a70),_0x34913b=_0x45ad24[_0x1ae9de(0x1b1)],_0x5f4254=_0x45ad24[_0x1ae9de(0x212)];class _0x39aee3{constructor(){var _0x209462=_0x1ae9de;this[_0x209462(0x1c0)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x209462(0x1fa)]=/^(0|[1-9][0-9]*)$/,this[_0x209462(0x1bb)]=/'([^\\\\']|\\\\')*'/,this[_0x209462(0x27b)]=_0x2f1a70[_0x209462(0x20f)],this['_HTMLAllCollection']=_0x2f1a70[_0x209462(0x239)],this[_0x209462(0x1cb)]=Object[_0x209462(0x256)],this[_0x209462(0x202)]=Object[_0x209462(0x289)],this[_0x209462(0x1b5)]=_0x2f1a70[_0x209462(0x1e0)],this['_regExpToString']=RegExp['prototype'][_0x209462(0x232)],this['_dateToString']=Date[_0x209462(0x28d)][_0x209462(0x232)];}[_0x1ae9de(0x23d)](_0x24b7f3,_0x296f73,_0x46653d,_0x5bf9fd){var _0xda21b4=_0x1ae9de,_0x2a2fd0=this,_0x4dd6b0=_0x46653d[_0xda21b4(0x22c)];function _0x131eb6(_0x24c1df,_0x28bf57,_0x408d48){var _0x479131=_0xda21b4;_0x28bf57[_0x479131(0x228)]='unknown',_0x28bf57['error']=_0x24c1df[_0x479131(0x222)],_0x1f0d56=_0x408d48[_0x479131(0x28c)][_0x479131(0x265)],_0x408d48[_0x479131(0x28c)][_0x479131(0x265)]=_0x28bf57,_0x2a2fd0[_0x479131(0x231)](_0x28bf57,_0x408d48);}try{_0x46653d['level']++,_0x46653d['autoExpand']&&_0x46653d['autoExpandPreviousObjects'][_0xda21b4(0x204)](_0x296f73);var _0x1e2094,_0x16aefa,_0x542566,_0x42e28b,_0xce7f95=[],_0xe6f1c3=[],_0xf17c29,_0x207db8=this[_0xda21b4(0x276)](_0x296f73),_0x277de6=_0x207db8==='array',_0x5c426c=!0x1,_0x66fe1b=_0x207db8===_0xda21b4(0x254),_0xca6e64=this[_0xda21b4(0x22f)](_0x207db8),_0x2c405a=this[_0xda21b4(0x292)](_0x207db8),_0x4f5d62=_0xca6e64||_0x2c405a,_0x6961d3={},_0x1bc657=0x0,_0x201335=!0x1,_0x1f0d56,_0x46ae26=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x46653d[_0xda21b4(0x1d1)]){if(_0x277de6){if(_0x16aefa=_0x296f73[_0xda21b4(0x24d)],_0x16aefa>_0x46653d[_0xda21b4(0x22d)]){for(_0x542566=0x0,_0x42e28b=_0x46653d[_0xda21b4(0x22d)],_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0['_addProperty'](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));_0x24b7f3[_0xda21b4(0x25a)]=!0x0;}else{for(_0x542566=0x0,_0x42e28b=_0x16aefa,_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1b8)](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));}_0x46653d['autoExpandPropertyCount']+=_0xe6f1c3[_0xda21b4(0x24d)];}if(!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&!_0xca6e64&&_0x207db8!==_0xda21b4(0x293)&&_0x207db8!==_0xda21b4(0x25b)&&_0x207db8!==_0xda21b4(0x269)){var _0x56b380=_0x5bf9fd[_0xda21b4(0x1e9)]||_0x46653d[_0xda21b4(0x1e9)];if(this['_isSet'](_0x296f73)?(_0x1e2094=0x0,_0x296f73[_0xda21b4(0x258)](function(_0x365782){var _0x20415e=_0xda21b4;if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d['isExpressionToEvaluate']&&_0x46653d['autoExpand']&&_0x46653d[_0x20415e(0x25f)]>_0x46653d[_0x20415e(0x241)]){_0x201335=!0x0;return;}_0xe6f1c3['push'](_0x2a2fd0[_0x20415e(0x1b8)](_0xce7f95,_0x296f73,'Set',_0x1e2094++,_0x46653d,function(_0x464074){return function(){return _0x464074;};}(_0x365782)));})):this[_0xda21b4(0x283)](_0x296f73)&&_0x296f73[_0xda21b4(0x258)](function(_0x378430,_0x28b1c6){var _0x29ac38=_0xda21b4;if(_0x1bc657++,_0x46653d[_0x29ac38(0x25f)]++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d[_0x29ac38(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0x29ac38(0x25f)]>_0x46653d[_0x29ac38(0x241)]){_0x201335=!0x0;return;}var _0x39ddf3=_0x28b1c6['toString']();_0x39ddf3[_0x29ac38(0x24d)]>0x64&&(_0x39ddf3=_0x39ddf3[_0x29ac38(0x1dc)](0x0,0x64)+_0x29ac38(0x1ed)),_0xe6f1c3[_0x29ac38(0x204)](_0x2a2fd0[_0x29ac38(0x1b8)](_0xce7f95,_0x296f73,_0x29ac38(0x1db),_0x39ddf3,_0x46653d,function(_0x46bd7a){return function(){return _0x46bd7a;};}(_0x378430)));}),!_0x5c426c){try{for(_0xf17c29 in _0x296f73)if(!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29))&&!this['_blacklistedProperty'](_0x296f73,_0xf17c29,_0x46653d)){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d[_0xda21b4(0x241)]){_0x201335=!0x0;break;}_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}catch{}if(_0x6961d3[_0xda21b4(0x1ac)]=!0x0,_0x66fe1b&&(_0x6961d3[_0xda21b4(0x1d4)]=!0x0),!_0x201335){var _0x2658ba=[][_0xda21b4(0x224)](this[_0xda21b4(0x202)](_0x296f73))[_0xda21b4(0x224)](this[_0xda21b4(0x1e6)](_0x296f73));for(_0x1e2094=0x0,_0x16aefa=_0x2658ba[_0xda21b4(0x24d)];_0x1e2094<_0x16aefa;_0x1e2094++)if(_0xf17c29=_0x2658ba[_0x1e2094],!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29[_0xda21b4(0x232)]()))&&!this[_0xda21b4(0x1b0)](_0x296f73,_0xf17c29,_0x46653d)&&!_0x6961d3[_0xda21b4(0x1d7)+_0xf17c29[_0xda21b4(0x232)]()]){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d['autoExpandLimit']){_0x201335=!0x0;break;}_0xe6f1c3['push'](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}}}}if(_0x24b7f3[_0xda21b4(0x228)]=_0x207db8,_0x4f5d62?(_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73['valueOf'](),this['_capIfString'](_0x207db8,_0x24b7f3,_0x46653d,_0x5bf9fd)):_0x207db8==='date'?_0x24b7f3[_0xda21b4(0x1f4)]=this['_dateToString'][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x269)?_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73[_0xda21b4(0x232)]():_0x207db8==='RegExp'?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x207)][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x1d9)&&this[_0xda21b4(0x1b5)]?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x1b5)][_0xda21b4(0x28d)][_0xda21b4(0x232)][_0xda21b4(0x273)](_0x296f73):!_0x46653d[_0xda21b4(0x1d1)]&&!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&(delete _0x24b7f3[_0xda21b4(0x1f4)],_0x24b7f3[_0xda21b4(0x210)]=!0x0),_0x201335&&(_0x24b7f3[_0xda21b4(0x214)]=!0x0),_0x1f0d56=_0x46653d['node'][_0xda21b4(0x265)],_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x24b7f3,this[_0xda21b4(0x231)](_0x24b7f3,_0x46653d),_0xe6f1c3[_0xda21b4(0x24d)]){for(_0x1e2094=0x0,_0x16aefa=_0xe6f1c3['length'];_0x1e2094<_0x16aefa;_0x1e2094++)_0xe6f1c3[_0x1e2094](_0x1e2094);}_0xce7f95[_0xda21b4(0x24d)]&&(_0x24b7f3[_0xda21b4(0x1e9)]=_0xce7f95);}catch(_0x38ef6d){_0x131eb6(_0x38ef6d,_0x24b7f3,_0x46653d);}return this[_0xda21b4(0x236)](_0x296f73,_0x24b7f3),this[_0xda21b4(0x238)](_0x24b7f3,_0x46653d),_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x1f0d56,_0x46653d[_0xda21b4(0x1d3)]--,_0x46653d[_0xda21b4(0x22c)]=_0x4dd6b0,_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x22e)][_0xda21b4(0x229)](),_0x24b7f3;}[_0x1ae9de(0x1e6)](_0xb74ebd){var _0x1753d6=_0x1ae9de;return Object[_0x1753d6(0x1f5)]?Object[_0x1753d6(0x1f5)](_0xb74ebd):[];}[_0x1ae9de(0x287)](_0x28d2ef){var _0x33e17f=_0x1ae9de;return!!(_0x28d2ef&&_0x2f1a70[_0x33e17f(0x1f8)]&&this[_0x33e17f(0x21a)](_0x28d2ef)===_0x33e17f(0x242)&&_0x28d2ef[_0x33e17f(0x258)]);}[_0x1ae9de(0x1b0)](_0x329b1b,_0x42292a,_0x37ab2c){var _0x453ac9=_0x1ae9de;return _0x37ab2c[_0x453ac9(0x1b6)]?typeof _0x329b1b[_0x42292a]=='function':!0x1;}[_0x1ae9de(0x276)](_0x22f058){var _0x241b7a=_0x1ae9de,_0x3d4e65='';return _0x3d4e65=typeof _0x22f058,_0x3d4e65==='object'?this['_objectToString'](_0x22f058)==='[object\\x20Array]'?_0x3d4e65='array':this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x243)?_0x3d4e65=_0x241b7a(0x1d8):this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x235)?_0x3d4e65=_0x241b7a(0x269):_0x22f058===null?_0x3d4e65=_0x241b7a(0x217):_0x22f058[_0x241b7a(0x216)]&&(_0x3d4e65=_0x22f058[_0x241b7a(0x216)][_0x241b7a(0x21b)]||_0x3d4e65):_0x3d4e65===_0x241b7a(0x20f)&&this['_HTMLAllCollection']&&_0x22f058 instanceof this[_0x241b7a(0x285)]&&(_0x3d4e65=_0x241b7a(0x239)),_0x3d4e65;}[_0x1ae9de(0x21a)](_0x1de872){var _0x3570e9=_0x1ae9de;return Object[_0x3570e9(0x28d)][_0x3570e9(0x232)][_0x3570e9(0x273)](_0x1de872);}[_0x1ae9de(0x22f)](_0x42b981){var _0x1b4389=_0x1ae9de;return _0x42b981==='boolean'||_0x42b981==='string'||_0x42b981===_0x1b4389(0x1f0);}['_isPrimitiveWrapperType'](_0x57d12a){var _0x51fa40=_0x1ae9de;return _0x57d12a==='Boolean'||_0x57d12a==='String'||_0x57d12a===_0x51fa40(0x225);}[_0x1ae9de(0x1b8)](_0x3de90e,_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85){var _0x279d30=this;return function(_0x56c688){var _0x31cb49=_0x2800,_0x64fca0=_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x265)],_0x189cd8=_0x5bf061['node'][_0x31cb49(0x25d)],_0x5ea25f=_0x5bf061[_0x31cb49(0x28c)]['parent'];_0x5bf061['node'][_0x31cb49(0x23b)]=_0x64fca0,_0x5bf061['node'][_0x31cb49(0x25d)]=typeof _0x22b26e==_0x31cb49(0x1f0)?_0x22b26e:_0x56c688,_0x3de90e[_0x31cb49(0x204)](_0x279d30[_0x31cb49(0x25c)](_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85)),_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x23b)]=_0x5ea25f,_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x25d)]=_0x189cd8;};}['_addObjectProperty'](_0x8f1714,_0x46c19e,_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881){var _0x557444=_0x1ae9de,_0x58766c=this;return _0x46c19e[_0x557444(0x1d7)+_0x3c5712['toString']()]=!0x0,function(_0x494a74){var _0x3c739b=_0x557444,_0x38c099=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x265)],_0xea8865=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)],_0x1da583=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)];_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x38c099,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0x494a74,_0x8f1714[_0x3c739b(0x204)](_0x58766c[_0x3c739b(0x25c)](_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881)),_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x1da583,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0xea8865;};}[_0x1ae9de(0x25c)](_0xa26af7,_0xd1783c,_0x4c3410,_0xa3bf2,_0x9fad98){var _0xa63a4b=_0x1ae9de,_0x36eca9=this;_0x9fad98||(_0x9fad98=function(_0x4958a8,_0x41ca28){return _0x4958a8[_0x41ca28];});var _0x29cbb9=_0x4c3410[_0xa63a4b(0x232)](),_0x5cfb46=_0xa3bf2[_0xa63a4b(0x277)]||{},_0x445183=_0xa3bf2[_0xa63a4b(0x1d1)],_0x316f50=_0xa3bf2['isExpressionToEvaluate'];try{var _0x141d25=this['_isMap'](_0xa26af7),_0xfd5f67=_0x29cbb9;_0x141d25&&_0xfd5f67[0x0]==='\\x27'&&(_0xfd5f67=_0xfd5f67[_0xa63a4b(0x1a9)](0x1,_0xfd5f67[_0xa63a4b(0x24d)]-0x2));var _0x4fdb4d=_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46[_0xa63a4b(0x1d7)+_0xfd5f67];_0x4fdb4d&&(_0xa3bf2[_0xa63a4b(0x1d1)]=_0xa3bf2[_0xa63a4b(0x1d1)]+0x1),_0xa3bf2[_0xa63a4b(0x21e)]=!!_0x4fdb4d;var _0x475157=typeof _0x4c3410=='symbol',_0x29d85c={'name':_0x475157||_0x141d25?_0x29cbb9:this['_propertyName'](_0x29cbb9)};if(_0x475157&&(_0x29d85c[_0xa63a4b(0x1d9)]=!0x0),!(_0xd1783c===_0xa63a4b(0x24f)||_0xd1783c===_0xa63a4b(0x24e))){var _0x260b73=this[_0xa63a4b(0x1cb)](_0xa26af7,_0x4c3410);if(_0x260b73&&(_0x260b73[_0xa63a4b(0x205)]&&(_0x29d85c[_0xa63a4b(0x1a5)]=!0x0),_0x260b73[_0xa63a4b(0x1fb)]&&!_0x4fdb4d&&!_0xa3bf2[_0xa63a4b(0x1be)]))return _0x29d85c['getter']=!0x0,this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x194fa5;try{_0x194fa5=_0x9fad98(_0xa26af7,_0x4c3410);}catch(_0x2c3142){return _0x29d85c={'name':_0x29cbb9,'type':_0xa63a4b(0x1c8),'error':_0x2c3142[_0xa63a4b(0x222)]},this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x50852a=this[_0xa63a4b(0x276)](_0x194fa5),_0x3ab79e=this[_0xa63a4b(0x22f)](_0x50852a);if(_0x29d85c[_0xa63a4b(0x228)]=_0x50852a,_0x3ab79e)this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x30a33f=_0xa63a4b;_0x29d85c[_0x30a33f(0x1f4)]=_0x194fa5['valueOf'](),!_0x4fdb4d&&_0x36eca9[_0x30a33f(0x1c4)](_0x50852a,_0x29d85c,_0xa3bf2,{});});else{var _0x2eb8d1=_0xa3bf2[_0xa63a4b(0x22c)]&&_0xa3bf2[_0xa63a4b(0x1d3)]<_0xa3bf2['autoExpandMaxDepth']&&_0xa3bf2[_0xa63a4b(0x22e)]['indexOf'](_0x194fa5)<0x0&&_0x50852a!=='function'&&_0xa3bf2[_0xa63a4b(0x25f)]<_0xa3bf2['autoExpandLimit'];_0x2eb8d1||_0xa3bf2[_0xa63a4b(0x1d3)]<_0x445183||_0x4fdb4d?(this['serialize'](_0x29d85c,_0x194fa5,_0xa3bf2,_0x4fdb4d||{}),this[_0xa63a4b(0x236)](_0x194fa5,_0x29d85c)):this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x1ac2f4=_0xa63a4b;_0x50852a===_0x1ac2f4(0x217)||_0x50852a==='undefined'||(delete _0x29d85c['value'],_0x29d85c[_0x1ac2f4(0x210)]=!0x0);});}return _0x29d85c;}finally{_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46,_0xa3bf2['depth']=_0x445183,_0xa3bf2[_0xa63a4b(0x21e)]=_0x316f50;}}['_capIfString'](_0x15a619,_0x2e9551,_0x2d0dc7,_0x3aa61d){var _0x1ccfd8=_0x1ae9de,_0x14e5ce=_0x3aa61d[_0x1ccfd8(0x268)]||_0x2d0dc7[_0x1ccfd8(0x268)];if((_0x15a619===_0x1ccfd8(0x282)||_0x15a619===_0x1ccfd8(0x293))&&_0x2e9551['value']){let _0x381743=_0x2e9551[_0x1ccfd8(0x1f4)]['length'];_0x2d0dc7['allStrLength']+=_0x381743,_0x2d0dc7['allStrLength']>_0x2d0dc7['totalStrLength']?(_0x2e9551[_0x1ccfd8(0x210)]='',delete _0x2e9551[_0x1ccfd8(0x1f4)]):_0x381743>_0x14e5ce&&(_0x2e9551[_0x1ccfd8(0x210)]=_0x2e9551[_0x1ccfd8(0x1f4)]['substr'](0x0,_0x14e5ce),delete _0x2e9551['value']);}}[_0x1ae9de(0x283)](_0x11ab3e){var _0x455bcd=_0x1ae9de;return!!(_0x11ab3e&&_0x2f1a70['Map']&&this[_0x455bcd(0x21a)](_0x11ab3e)===_0x455bcd(0x20e)&&_0x11ab3e[_0x455bcd(0x258)]);}[_0x1ae9de(0x213)](_0x59761d){var _0x205d94=_0x1ae9de;if(_0x59761d[_0x205d94(0x26a)](/^\\d+$/))return _0x59761d;var _0x283bad;try{_0x283bad=JSON[_0x205d94(0x1c2)](''+_0x59761d);}catch{_0x283bad='\\x22'+this[_0x205d94(0x21a)](_0x59761d)+'\\x22';}return _0x283bad['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x283bad=_0x283bad[_0x205d94(0x1a9)](0x1,_0x283bad[_0x205d94(0x24d)]-0x2):_0x283bad=_0x283bad[_0x205d94(0x27e)](/'/g,'\\x5c\\x27')[_0x205d94(0x27e)](/\\\\\"/g,'\\x22')[_0x205d94(0x27e)](/(^\"|\"$)/g,'\\x27'),_0x283bad;}[_0x1ae9de(0x1da)](_0x55bb11,_0x1b3795,_0x48f261,_0x3e21aa){var _0x571adc=_0x1ae9de;this[_0x571adc(0x231)](_0x55bb11,_0x1b3795),_0x3e21aa&&_0x3e21aa(),this['_additionalMetadata'](_0x48f261,_0x55bb11),this[_0x571adc(0x238)](_0x55bb11,_0x1b3795);}[_0x1ae9de(0x231)](_0xe082ed,_0x50b700){var _0x489d9f=_0x1ae9de;this['_setNodeId'](_0xe082ed,_0x50b700),this[_0x489d9f(0x1c1)](_0xe082ed,_0x50b700),this['_setNodeExpressionPath'](_0xe082ed,_0x50b700),this['_setNodePermissions'](_0xe082ed,_0x50b700);}['_setNodeId'](_0x56e200,_0x453198){}['_setNodeQueryPath'](_0x40a95f,_0x1f617a){}[_0x1ae9de(0x20a)](_0x295c6a,_0x297bb4){}[_0x1ae9de(0x1ef)](_0x3f6925){return _0x3f6925===this['_undefined'];}[_0x1ae9de(0x238)](_0x215840,_0x2292fd){var _0x544c37=_0x1ae9de;this[_0x544c37(0x20a)](_0x215840,_0x2292fd),this['_setNodeExpandableState'](_0x215840),_0x2292fd[_0x544c37(0x1d6)]&&this['_sortProps'](_0x215840),this[_0x544c37(0x1af)](_0x215840,_0x2292fd),this[_0x544c37(0x271)](_0x215840,_0x2292fd),this[_0x544c37(0x253)](_0x215840);}[_0x1ae9de(0x236)](_0x90e37d,_0x2905ac){var _0x245bf4=_0x1ae9de;let _0x404a53;try{_0x2f1a70[_0x245bf4(0x227)]&&(_0x404a53=_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)],_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)]=function(){}),_0x90e37d&&typeof _0x90e37d[_0x245bf4(0x24d)]==_0x245bf4(0x1f0)&&(_0x2905ac[_0x245bf4(0x24d)]=_0x90e37d[_0x245bf4(0x24d)]);}catch{}finally{_0x404a53&&(_0x2f1a70['console'][_0x245bf4(0x22a)]=_0x404a53);}if(_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x1f0)||_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x225)){if(isNaN(_0x2905ac[_0x245bf4(0x1f4)]))_0x2905ac['nan']=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];else switch(_0x2905ac[_0x245bf4(0x1f4)]){case Number[_0x245bf4(0x279)]:_0x2905ac[_0x245bf4(0x223)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case Number[_0x245bf4(0x261)]:_0x2905ac[_0x245bf4(0x215)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case 0x0:this['_isNegativeZero'](_0x2905ac['value'])&&(_0x2905ac['negativeZero']=!0x0);break;}}else _0x2905ac['type']==='function'&&typeof _0x90e37d[_0x245bf4(0x21b)]==_0x245bf4(0x282)&&_0x90e37d[_0x245bf4(0x21b)]&&_0x2905ac['name']&&_0x90e37d[_0x245bf4(0x21b)]!==_0x2905ac[_0x245bf4(0x21b)]&&(_0x2905ac[_0x245bf4(0x267)]=_0x90e37d['name']);}[_0x1ae9de(0x23f)](_0x3603f9){return 0x1/_0x3603f9===Number['NEGATIVE_INFINITY'];}[_0x1ae9de(0x226)](_0x91135f){var _0x27bcc9=_0x1ae9de;!_0x91135f['props']||!_0x91135f['props'][_0x27bcc9(0x24d)]||_0x91135f[_0x27bcc9(0x228)]==='array'||_0x91135f[_0x27bcc9(0x228)]==='Map'||_0x91135f[_0x27bcc9(0x228)]===_0x27bcc9(0x1f8)||_0x91135f['props'][_0x27bcc9(0x1b2)](function(_0x2a2cdb,_0x49ee4b){var _0x5e76b3=_0x27bcc9,_0x19063e=_0x2a2cdb[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)](),_0x446003=_0x49ee4b[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)]();return _0x19063e<_0x446003?-0x1:_0x19063e>_0x446003?0x1:0x0;});}['_addFunctionsNode'](_0x2e8e4d,_0x199c30){var _0x3d3aa0=_0x1ae9de;if(!(_0x199c30[_0x3d3aa0(0x1b6)]||!_0x2e8e4d[_0x3d3aa0(0x1e9)]||!_0x2e8e4d['props']['length'])){for(var _0x435133=[],_0x2531e7=[],_0x4b5a61=0x0,_0x36d28b=_0x2e8e4d[_0x3d3aa0(0x1e9)]['length'];_0x4b5a61<_0x36d28b;_0x4b5a61++){var _0x10d795=_0x2e8e4d['props'][_0x4b5a61];_0x10d795[_0x3d3aa0(0x228)]===_0x3d3aa0(0x254)?_0x435133[_0x3d3aa0(0x204)](_0x10d795):_0x2531e7[_0x3d3aa0(0x204)](_0x10d795);}if(!(!_0x2531e7[_0x3d3aa0(0x24d)]||_0x435133['length']<=0x1)){_0x2e8e4d['props']=_0x2531e7;var _0x14dec4={'functionsNode':!0x0,'props':_0x435133};this[_0x3d3aa0(0x28e)](_0x14dec4,_0x199c30),this[_0x3d3aa0(0x20a)](_0x14dec4,_0x199c30),this['_setNodeExpandableState'](_0x14dec4),this['_setNodePermissions'](_0x14dec4,_0x199c30),_0x14dec4['id']+='\\x20f',_0x2e8e4d['props']['unshift'](_0x14dec4);}}}['_addLoadNode'](_0x4a8f7a,_0x346db0){}['_setNodeExpandableState'](_0x1c6fd1){}[_0x1ae9de(0x1de)](_0x1211e9){var _0x3903b5=_0x1ae9de;return Array[_0x3903b5(0x208)](_0x1211e9)||typeof _0x1211e9=='object'&&this[_0x3903b5(0x21a)](_0x1211e9)==='[object\\x20Array]';}[_0x1ae9de(0x1d0)](_0x311e8c,_0x69f8f0){}[_0x1ae9de(0x253)](_0x1fb5ad){var _0x4e516a=_0x1ae9de;delete _0x1fb5ad[_0x4e516a(0x1fc)],delete _0x1fb5ad['_hasSetOnItsPath'],delete _0x1fb5ad['_hasMapOnItsPath'];}['_setNodeExpressionPath'](_0x1f43f0,_0x5dc18c){}}let _0x44e097=new _0x39aee3(),_0x555933={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x5ef4bb={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x47aee0(_0x5f519b,_0x36e1c2,_0x38a5b2,_0x245a33,_0x33842e,_0x47f99d){var _0x1b6dc9=_0x1ae9de;let _0x4e9097,_0x2d5f08;try{_0x2d5f08=_0x5f4254(),_0x4e9097=_0x39be01[_0x36e1c2],!_0x4e9097||_0x2d5f08-_0x4e9097['ts']>0x1f4&&_0x4e9097[_0x1b6dc9(0x1eb)]&&_0x4e9097[_0x1b6dc9(0x209)]/_0x4e9097[_0x1b6dc9(0x1eb)]<0x64?(_0x39be01[_0x36e1c2]=_0x4e9097={'count':0x0,'time':0x0,'ts':_0x2d5f08},_0x39be01[_0x1b6dc9(0x1a1)]={}):_0x2d5f08-_0x39be01[_0x1b6dc9(0x1a1)]['ts']>0x32&&_0x39be01[_0x1b6dc9(0x1a1)]['count']&&_0x39be01[_0x1b6dc9(0x1a1)]['time']/_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x1eb)]<0x64&&(_0x39be01[_0x1b6dc9(0x1a1)]={});let _0x321c5e=[],_0x103871=_0x4e9097['reduceLimits']||_0x39be01[_0x1b6dc9(0x1a1)]['reduceLimits']?_0x5ef4bb:_0x555933,_0x1e4aec=_0x11f00b=>{var _0x1d93c3=_0x1b6dc9;let _0x3970c5={};return _0x3970c5['props']=_0x11f00b[_0x1d93c3(0x1e9)],_0x3970c5[_0x1d93c3(0x22d)]=_0x11f00b[_0x1d93c3(0x22d)],_0x3970c5[_0x1d93c3(0x268)]=_0x11f00b[_0x1d93c3(0x268)],_0x3970c5[_0x1d93c3(0x1aa)]=_0x11f00b[_0x1d93c3(0x1aa)],_0x3970c5[_0x1d93c3(0x241)]=_0x11f00b['autoExpandLimit'],_0x3970c5[_0x1d93c3(0x1f1)]=_0x11f00b['autoExpandMaxDepth'],_0x3970c5[_0x1d93c3(0x1d6)]=!0x1,_0x3970c5['noFunctions']=!_0x5be072,_0x3970c5[_0x1d93c3(0x1d1)]=0x1,_0x3970c5[_0x1d93c3(0x1d3)]=0x0,_0x3970c5['expId']=_0x1d93c3(0x255),_0x3970c5['rootExpression']=_0x1d93c3(0x1ba),_0x3970c5[_0x1d93c3(0x22c)]=!0x0,_0x3970c5[_0x1d93c3(0x22e)]=[],_0x3970c5['autoExpandPropertyCount']=0x0,_0x3970c5[_0x1d93c3(0x1be)]=!0x0,_0x3970c5[_0x1d93c3(0x1e3)]=0x0,_0x3970c5[_0x1d93c3(0x28c)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3970c5;};for(var _0x4e066e=0x0;_0x4e066e<_0x33842e[_0x1b6dc9(0x24d)];_0x4e066e++)_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'timeNode':_0x5f519b===_0x1b6dc9(0x209)||void 0x0},_0x33842e[_0x4e066e],_0x1e4aec(_0x103871),{}));if(_0x5f519b===_0x1b6dc9(0x1a3)||_0x5f519b===_0x1b6dc9(0x22a)){let _0x4223a0=Error['stackTraceLimit'];try{Error[_0x1b6dc9(0x278)]=0x1/0x0,_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'stackNode':!0x0},new Error()[_0x1b6dc9(0x26b)],_0x1e4aec(_0x103871),{'strLength':0x1/0x0}));}finally{Error[_0x1b6dc9(0x278)]=_0x4223a0;}}return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':_0x321c5e,'id':_0x36e1c2,'context':_0x47f99d}]};}catch(_0x5b28ee){return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':[{'type':'unknown','error':_0x5b28ee&&_0x5b28ee[_0x1b6dc9(0x222)]}],'id':_0x36e1c2,'context':_0x47f99d}]};}finally{try{if(_0x4e9097&&_0x2d5f08){let _0x1d65c6=_0x5f4254();_0x4e9097['count']++,_0x4e9097[_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x4e9097['ts']=_0x1d65c6,_0x39be01[_0x1b6dc9(0x1a1)]['count']++,_0x39be01['hits'][_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x39be01['hits']['ts']=_0x1d65c6,(_0x4e9097[_0x1b6dc9(0x1eb)]>0x32||_0x4e9097[_0x1b6dc9(0x209)]>0x64)&&(_0x4e9097['reduceLimits']=!0x0),(_0x39be01['hits']['count']>0x3e8||_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x209)]>0x12c)&&(_0x39be01['hits'][_0x1b6dc9(0x23a)]=!0x0);}}catch{}}}return _0x47aee0;}((_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x2de19f,_0x1e302a,_0x363b8d,_0xa0a303,_0x5e55f1,_0x306ab3)=>{var _0x313444=_0xfe5e44;if(_0x2abb00[_0x313444(0x24c)])return _0x2abb00[_0x313444(0x24c)];if(!H(_0x2abb00,_0x363b8d,_0x1722a1))return _0x2abb00[_0x313444(0x24c)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x2abb00[_0x313444(0x24c)];let _0x3b7d8d=B(_0x2abb00),_0x4d9f47=_0x3b7d8d[_0x313444(0x1b1)],_0xfc6f6c=_0x3b7d8d[_0x313444(0x212)],_0x175f2b=_0x3b7d8d[_0x313444(0x249)],_0x128725={'hits':{},'ts':{}},_0x42d6ce=X(_0x2abb00,_0xa0a303,_0x128725,_0x2de19f),_0x541b4e=_0x187c8d=>{_0x128725['ts'][_0x187c8d]=_0xfc6f6c();},_0x49ea08=(_0x2965f7,_0x54e0b4)=>{let _0xa3a7a1=_0x128725['ts'][_0x54e0b4];if(delete _0x128725['ts'][_0x54e0b4],_0xa3a7a1){let _0x3799a5=_0x4d9f47(_0xa3a7a1,_0xfc6f6c());_0x48a896(_0x42d6ce('time',_0x2965f7,_0x175f2b(),_0x1c96ca,[_0x3799a5],_0x54e0b4));}},_0x1ca95f=_0x556e2e=>{var _0x634c6d=_0x313444,_0x3a78f9;return _0x1722a1===_0x634c6d(0x237)&&_0x2abb00[_0x634c6d(0x1a7)]&&((_0x3a78f9=_0x556e2e==null?void 0x0:_0x556e2e[_0x634c6d(0x1f6)])==null?void 0x0:_0x3a78f9[_0x634c6d(0x24d)])&&(_0x556e2e['args'][0x0][_0x634c6d(0x1a7)]=_0x2abb00[_0x634c6d(0x1a7)]),_0x556e2e;};_0x2abb00[_0x313444(0x24c)]={'consoleLog':(_0x1d9044,_0x3da3ab)=>{var _0x578a1e=_0x313444;_0x2abb00[_0x578a1e(0x227)]['log'][_0x578a1e(0x21b)]!==_0x578a1e(0x27d)&&_0x48a896(_0x42d6ce('log',_0x1d9044,_0x175f2b(),_0x1c96ca,_0x3da3ab));},'consoleTrace':(_0x38468d,_0x50b548)=>{var _0x144123=_0x313444,_0x2c0a3b,_0x41bd30;_0x2abb00['console'][_0x144123(0x230)][_0x144123(0x21b)]!==_0x144123(0x27a)&&((_0x41bd30=(_0x2c0a3b=_0x2abb00[_0x144123(0x206)])==null?void 0x0:_0x2c0a3b[_0x144123(0x26f)])!=null&&_0x41bd30[_0x144123(0x28c)]&&(_0x2abb00[_0x144123(0x1e1)]=!0x0),_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x38468d,_0x175f2b(),_0x1c96ca,_0x50b548))));},'consoleError':(_0xe83c02,_0x52826e)=>{var _0x14dcca=_0x313444;_0x2abb00[_0x14dcca(0x1e1)]=!0x0,_0x48a896(_0x1ca95f(_0x42d6ce(_0x14dcca(0x22a),_0xe83c02,_0x175f2b(),_0x1c96ca,_0x52826e)));},'consoleTime':_0x5caf3f=>{_0x541b4e(_0x5caf3f);},'consoleTimeEnd':(_0x27d8c5,_0x417474)=>{_0x49ea08(_0x417474,_0x27d8c5);},'autoLog':(_0x85c6df,_0x7f39a2)=>{var _0x40bb49=_0x313444;_0x48a896(_0x42d6ce(_0x40bb49(0x230),_0x7f39a2,_0x175f2b(),_0x1c96ca,[_0x85c6df]));},'autoLogMany':(_0x5158c0,_0x7b99d2)=>{_0x48a896(_0x42d6ce('log',_0x5158c0,_0x175f2b(),_0x1c96ca,_0x7b99d2));},'autoTrace':(_0x1bc11d,_0x565cc9)=>{_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x565cc9,_0x175f2b(),_0x1c96ca,[_0x1bc11d])));},'autoTraceMany':(_0x352345,_0x4c7f95)=>{var _0x378e10=_0x313444;_0x48a896(_0x1ca95f(_0x42d6ce(_0x378e10(0x1a3),_0x352345,_0x175f2b(),_0x1c96ca,_0x4c7f95)));},'autoTime':(_0x5359fa,_0x25990a,_0x323d68)=>{_0x541b4e(_0x323d68);},'autoTimeEnd':(_0x5be9bc,_0x5dbe0a,_0xba445f)=>{_0x49ea08(_0x5dbe0a,_0xba445f);},'coverage':_0x27be41=>{var _0x20affe=_0x313444;_0x48a896({'method':_0x20affe(0x1d2),'version':_0x2de19f,'args':[{'id':_0x27be41}]});}};let _0x48a896=q(_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x5e55f1,_0x306ab3),_0x1c96ca=_0x2abb00['_console_ninja_session'];return _0x2abb00[_0x313444(0x24c)];})(globalThis,'127.0.0.1','60591',_0xfe5e44(0x1ce),'webpack',_0xfe5e44(0x26c),_0xfe5e44(0x286),_0xfe5e44(0x21c),_0xfe5e44(0x1cd),_0xfe5e44(0x275),_0xfe5e44(0x244));")}catch(e){}}function o(e,...t){try{r().consoleError(e,t)}catch(e){}return t}},"./src/Firebase/firebase-config.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{firebaseConfig:()=>n});const n={apiKey:"AIzaSyB8c2lBVi26u7YRL9sxOP97Uaq3yN8hTl4",authDomain:"ftm-b9d99.firebaseapp.com",databaseURL:"https://ftm-b9d99.firebaseio.com",projectId:"ftm-b9d99",storageBucket:"ftm-b9d99.appspot.com",messagingSenderId:"602402387941",appId:"1:602402387941:web:a63f4eaddc949f539de10c",measurementId:"G-FVLSN7D7NM"}},"./src/Firebase/firebase-integration.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{FirebaseIntegration:()=>i});var n=a("./src/Firebase/base-firebase-integration.ts");class i extends n.BaseFirebaseIntegration{static instance;constructor(){super()}static getInstance(){return i.instance||(i.instance=new i),i.instance}sendSessionStartEvent(e){this.customEvents("session_start",e)}sendSessionEndEvent(e){this.customEvents("session_end",e)}sendSelectedLevelEvent(e){this.customEvents("selected_level",e)}sendTappedStartEvent(e){this.customEvents("tapped_start",e)}sendPuzzleCompletedEvent(e){this.customEvents("puzzle_completed",e)}sendLevelCompletedEvent(e){this.customEvents("level_completed",e)}sendUserClickedOnPlayEvent(){this.customEvents("user_clicked",{click:"Click"})}sendDownloadCompletedEvent(e){this.customEvents("download_completed",e)}}},"./src/common/event-names.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{CLICK:()=>d,LOADPUZZLE:()=>n,MOUSEDOWN:()=>s,MOUSEMOVE:()=>x,MOUSEUP:()=>r,STONEDROP:()=>i,TOUCHEND:()=>c,TOUCHMOVE:()=>_,TOUCHSTART:()=>o,VISIBILITY_CHANGE:()=>l});const n="loadpuzzle",i="stonesdropped",x="mousemove",s="mousedown",r="mouseup",o="touchstart",_="touchmove",c="touchend",d="click",l="visibilitychange"},"./src/common/global-variables.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{Debugger:()=>_,font:()=>o,lang:()=>r,pseudoId:()=>s});var n=a("./src/constants/index.ts"),i=a("./src/common/index.ts");const x=new URLSearchParams(window.location.search);var s=x.get("cr_user_id"),r=null==x.get("cr_lang")?"english":x.get("cr_lang");const o=i.Utils.getLanguageSpecificFont(r),_={DevelopmentLink:!!window.location.href.includes(n.DevelopmentServer),DebugMode:!1}},"./src/common/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{CLICK:()=>s.CLICK,Debugger:()=>x.Debugger,LOADPUZZLE:()=>s.LOADPUZZLE,MOUSEDOWN:()=>s.MOUSEDOWN,MOUSEMOVE:()=>s.MOUSEMOVE,MOUSEUP:()=>s.MOUSEUP,STONEDROP:()=>s.STONEDROP,StoneConfig:()=>n.StoneConfig,TOUCHEND:()=>s.TOUCHEND,TOUCHMOVE:()=>s.TOUCHMOVE,TOUCHSTART:()=>s.TOUCHSTART,Utils:()=>i.Utils,VISIBILITY_CHANGE:()=>s.VISIBILITY_CHANGE,createRippleEffect:()=>i.createRippleEffect,font:()=>x.font,hideElement:()=>i.hideElement,isClickInsideButton:()=>i.isClickInsideButton,isDocumentVisible:()=>i.isDocumentVisible,lang:()=>x.lang,loadImages:()=>i.loadImages,pseudoId:()=>x.pseudoId,syncLoadingImages:()=>i.syncLoadingImages,toggleDebugMode:()=>i.toggleDebugMode});var n=a("./src/common/stone-config.ts"),i=a("./src/common/utils.ts"),x=a("./src/common/global-variables.ts"),s=a("./src/common/event-names.ts")},"./src/common/stone-config.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{StoneConfig:()=>i});var n=a("./src/common/index.ts");class i{x;y;origx;origy;text;img;imageSize;textFontSize;canvasWidth;canvasHeight;imageCenterOffsetX;imageCenterOffsetY;context;tutorialInstance;timerTickingInstance;frame=0;constructor(e,t,a,n,i,x,s,r,o){this.x=i,this.y=x,this.origx=i,this.origy=x,this.canvasWidth=t,this.canvasHeight=a,this.tutorialInstance=o,this.text=n,this.img=s,this.context=e,this.calculateImageAndFontSize(),this.imageCenterOffsetX=this.imageSize/2.3,this.imageCenterOffsetY=this.imageSize/1.5,this.timerTickingInstance=r}calculateImageAndFontSize(){1.4*this.context.measureText(this.text).width>this.canvasHeight/9.5?(this.imageSize=1.1*this.context.measureText(this.text).width,this.textFontSize=this.canvasHeight/25,this.text.length>=3&&this.origx<50&&this.origx<this.canvasWidth/2&&(this.x=this.origx+21)):(this.imageSize=this.canvasHeight/9.5,this.textFontSize=this.canvasHeight/20)}getEase=(e,t,a,n)=>-a/2*(Math.cos(Math.PI*e/n)-1)+t;getX=()=>this.frame>=100?this.x:this.getEase(this.frame,0,this.x,100);getY=()=>this.frame>=100?this.y:this.getEase(this.frame,0,this.y,100);adjustSize(e,t){return e?1.25*t:t}draw(e,t=!1){const a=this.getX()-this.adjustSize(t,this.imageCenterOffsetX),i=this.getY()-this.adjustSize(t,this.imageCenterOffsetY);this.context.fillStyle="red",this.context.shadowColor="rgba(255, 255, 255, 1)",this.context.shadowBlur=12,this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.drawImage(this.img,a,i,this.adjustSize(t,this.imageSize),this.adjustSize(t,this.imageSize)),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${n.font}, monospace`,this.context.textAlign="center",this.context.shadowOffsetX=0,this.context.shadowOffsetY=0,this.context.shadowBlur=0,this.context.shadowColor="transparent ",this.context.fillText(this.text,this.getX(),this.getY()),this.frame<100?this.frame=this.frame+1:null==this.tutorialInstance&&null==this.tutorialInstance||this.tutorialInstance.draw(e,this.img,this.imageSize)}}},"./src/common/utils.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{Utils:()=>x,createRippleEffect:()=>s,hideElement:()=>l,isClickInsideButton:()=>_,isDocumentVisible:()=>c,loadImages:()=>r,syncLoadingImages:()=>o,toggleDebugMode:()=>d});var n=a("./src/common/index.ts"),i=a("./src/data/i18-font-mapping.ts");class x{static UrlSubstring="/feedthemonster";static getConvertedDevProdURL(e){return n.Debugger.DevelopmentLink?e.slice(0,e.indexOf(this.UrlSubstring)+this.UrlSubstring.length)+"dev"+e.slice(e.indexOf(this.UrlSubstring)+this.UrlSubstring.length):e}static getLanguageSpecificFont(e){const t=e.toLowerCase();for(const e in i.languageFontMapping)if(e.toLowerCase()===t)return i.languageFontMapping[e];return console.log(...f("2724076817_26_4_26_59_4",`Font not found for language: ${e}`)),"NotoSans-Regular"}static getRandomNumber(e,t){return Math.floor(Math.random()*(t-e+1))+e}static getExcludedCoordinates(e,t){return{excludeX:e.width*(t/100),excludeY:e.height*(t/100)}}}function s(e){const t=e;if(!t)throw new Error("Canvas context is null");let a=0,n=0;let i=10,x=10;return function(e,s,r){r&&(i=0,x=0),a=e,n=s,t.beginPath(),t.arc(a,n,i,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),t.beginPath(),t.arc(a,n,x,0,2*Math.PI),t.strokeStyle="white",t.lineWidth=2,t.stroke(),t.closePath(),i+=.5,x+=.5,(i>=60||x>=60)&&(i=10,x=10)}}function r(e,t){const a={};let n=0;const i=Object.keys(e).length;for(let x in e)a[x]=new Image,a[x].onload=function(){++n>=i&&t(a)},a[x].src=e[x]}const o=async e=>{const t=Object.keys(e).map((async t=>{const a=await(async e=>{const t=new Image;return new Promise((a=>{t.onload=()=>a(t),t.src=e}))})(e[t]);return{[t]:a}}));return(await Promise.all(t)).reduce(((e,t)=>({...e,...t})),{})};function _(e,t,a,n,i,x,s=!1){if(s){return Math.sqrt((e-(a+i/2))**2+(t-(n+x/2))**2)<i/2}return e>=a&&e<=a+i&&t>=n&&t<=n+x}const c=()=>"visible"===document.visibilityState,d=e=>{e.classList.toggle("on");const t=e.classList.contains("on");n.Debugger.DebugMode=t,e.innerText="Dev"},l=(e=!1,t)=>{e?t.classList.remove("show"):t.classList.add("show")};function h(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfe5e44=_0x2800;(function(_0x215495,_0x54db3f){var _0x15a0c1=_0x2800,_0x56d85f=_0x215495();while(!![]){try{var _0x8589f5=parseInt(_0x15a0c1(0x1f3))/0x1*(parseInt(_0x15a0c1(0x1bf))/0x2)+parseInt(_0x15a0c1(0x1ec))/0x3+-parseInt(_0x15a0c1(0x28b))/0x4+parseInt(_0x15a0c1(0x22b))/0x5*(-parseInt(_0x15a0c1(0x1a4))/0x6)+-parseInt(_0x15a0c1(0x1ad))/0x7+parseInt(_0x15a0c1(0x1e8))/0x8*(parseInt(_0x15a0c1(0x294))/0x9)+-parseInt(_0x15a0c1(0x20d))/0xa;if(_0x8589f5===_0x54db3f)break;else _0x56d85f['push'](_0x56d85f['shift']());}catch(_0x128f40){_0x56d85f['push'](_0x56d85f['shift']());}}}(_0x4842,0xe3eb8));var K=Object['create'],Q=Object[_0xfe5e44(0x1bd)],G=Object['getOwnPropertyDescriptor'],ee=Object['getOwnPropertyNames'],te=Object[_0xfe5e44(0x248)],ne=Object['prototype'][_0xfe5e44(0x24a)],re=(_0x5b75c6,_0x3483b6,_0x592bfb,_0x35bd8b)=>{var _0x34c8f6=_0xfe5e44;if(_0x3483b6&&typeof _0x3483b6==_0x34c8f6(0x259)||typeof _0x3483b6==_0x34c8f6(0x254)){for(let _0x15cfbc of ee(_0x3483b6))!ne['call'](_0x5b75c6,_0x15cfbc)&&_0x15cfbc!==_0x592bfb&&Q(_0x5b75c6,_0x15cfbc,{'get':()=>_0x3483b6[_0x15cfbc],'enumerable':!(_0x35bd8b=G(_0x3483b6,_0x15cfbc))||_0x35bd8b['enumerable']});}return _0x5b75c6;},V=(_0x83a491,_0x1c7fab,_0x333922)=>(_0x333922=_0x83a491!=null?K(te(_0x83a491)):{},re(_0x1c7fab||!_0x83a491||!_0x83a491[_0xfe5e44(0x250)]?Q(_0x333922,_0xfe5e44(0x25e),{'value':_0x83a491,'enumerable':!0x0}):_0x333922,_0x83a491)),Z=class{constructor(_0x3b8201,_0x2edd2b,_0x14c251,_0x21a374,_0x2d7409,_0x485d26){var _0x3273eb=_0xfe5e44,_0x22070f,_0x1cdd3b,_0x55f9de,_0xce468f;this[_0x3273eb(0x291)]=_0x3b8201,this[_0x3273eb(0x270)]=_0x2edd2b,this[_0x3273eb(0x262)]=_0x14c251,this[_0x3273eb(0x1bc)]=_0x21a374,this[_0x3273eb(0x264)]=_0x2d7409,this[_0x3273eb(0x27c)]=_0x485d26,this['_allowedToSend']=!0x0,this[_0x3273eb(0x1ab)]=!0x0,this[_0x3273eb(0x203)]=!0x1,this[_0x3273eb(0x1c5)]=!0x1,this[_0x3273eb(0x221)]=((_0x1cdd3b=(_0x22070f=_0x3b8201[_0x3273eb(0x206)])==null?void 0x0:_0x22070f[_0x3273eb(0x1cc)])==null?void 0x0:_0x1cdd3b[_0x3273eb(0x1c3)])===_0x3273eb(0x1fd),this['_inBrowser']=!((_0xce468f=(_0x55f9de=this[_0x3273eb(0x291)][_0x3273eb(0x206)])==null?void 0x0:_0x55f9de[_0x3273eb(0x26f)])!=null&&_0xce468f[_0x3273eb(0x28c)])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x3273eb(0x1a8)]=0x0,this[_0x3273eb(0x28f)]=0x14,this['_webSocketErrorDocsLink']=_0x3273eb(0x211),this[_0x3273eb(0x1ae)]=(this[_0x3273eb(0x23e)]?_0x3273eb(0x247):_0x3273eb(0x28a))+this[_0x3273eb(0x201)];}async[_0xfe5e44(0x272)](){var _0x2ec457=_0xfe5e44,_0x16b1f6,_0x46ae56;if(this[_0x2ec457(0x1d5)])return this[_0x2ec457(0x1d5)];let _0x420cd7;if(this['_inBrowser']||this[_0x2ec457(0x221)])_0x420cd7=this[_0x2ec457(0x291)]['WebSocket'];else{if((_0x16b1f6=this[_0x2ec457(0x291)][_0x2ec457(0x206)])!=null&&_0x16b1f6['_WebSocket'])_0x420cd7=(_0x46ae56=this[_0x2ec457(0x291)][_0x2ec457(0x206)])==null?void 0x0:_0x46ae56['_WebSocket'];else try{let _0x492511=await import(_0x2ec457(0x251));_0x420cd7=(await import((await import(_0x2ec457(0x245)))[_0x2ec457(0x1b3)](_0x492511['join'](this['nodeModules'],'ws/index.js'))[_0x2ec457(0x232)]()))[_0x2ec457(0x25e)];}catch{try{_0x420cd7=require(require(_0x2ec457(0x251))[_0x2ec457(0x23c)](this[_0x2ec457(0x1bc)],'ws'));}catch{throw new Error(_0x2ec457(0x27f));}}}return this[_0x2ec457(0x1d5)]=_0x420cd7,_0x420cd7;}['_connectToHostNow'](){var _0x311ae5=_0xfe5e44;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x311ae5(0x1c5)]=!0x0,this[_0x311ae5(0x1a8)]++,this[_0x311ae5(0x1e7)]=new Promise((_0x3f4e5c,_0x1b1d42)=>{var _0x1f6130=_0x311ae5;this['getWebSocketClass']()[_0x1f6130(0x1cf)](_0x1a8fc2=>{var _0x26657b=_0x1f6130;let _0x3f72a0=new _0x1a8fc2(_0x26657b(0x1c9)+(!this['_inBrowser']&&this[_0x26657b(0x264)]?_0x26657b(0x281):this[_0x26657b(0x270)])+':'+this[_0x26657b(0x262)]);_0x3f72a0[_0x26657b(0x274)]=()=>{var _0x5e4dcd=_0x26657b;this[_0x5e4dcd(0x1e2)]=!0x1,this[_0x5e4dcd(0x21d)](_0x3f72a0),this[_0x5e4dcd(0x24b)](),_0x1b1d42(new Error(_0x5e4dcd(0x20c)));},_0x3f72a0[_0x26657b(0x280)]=()=>{var _0x5da152=_0x26657b;this[_0x5da152(0x23e)]||_0x3f72a0[_0x5da152(0x1dd)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)](),_0x3f4e5c(_0x3f72a0);},_0x3f72a0[_0x26657b(0x1ea)]=()=>{var _0x382c92=_0x26657b;this[_0x382c92(0x1ab)]=!0x0,this[_0x382c92(0x21d)](_0x3f72a0),this[_0x382c92(0x24b)]();},_0x3f72a0[_0x26657b(0x1df)]=_0x11fcab=>{var _0x5fd04d=_0x26657b;try{if(!(_0x11fcab!=null&&_0x11fcab[_0x5fd04d(0x1b9)])||!this['eventReceivedCallback'])return;let _0x4ff655=JSON[_0x5fd04d(0x234)](_0x11fcab[_0x5fd04d(0x1b9)]);this[_0x5fd04d(0x27c)](_0x4ff655[_0x5fd04d(0x1b4)],_0x4ff655['args'],this['global'],this[_0x5fd04d(0x23e)]);}catch{}};})[_0x1f6130(0x1cf)](_0x3ec18f=>(this[_0x1f6130(0x203)]=!0x0,this[_0x1f6130(0x1c5)]=!0x1,this[_0x1f6130(0x1ab)]=!0x1,this['_allowedToSend']=!0x0,this[_0x1f6130(0x1a8)]=0x0,_0x3ec18f))[_0x1f6130(0x260)](_0x4d0842=>(this[_0x1f6130(0x203)]=!0x1,this[_0x1f6130(0x1c5)]=!0x1,console[_0x1f6130(0x1f2)](_0x1f6130(0x1ca)+this[_0x1f6130(0x201)]),_0x1b1d42(new Error(_0x1f6130(0x266)+(_0x4d0842&&_0x4d0842['message'])))));}));}[_0xfe5e44(0x21d)](_0x200506){var _0x3828d3=_0xfe5e44;this[_0x3828d3(0x203)]=!0x1,this[_0x3828d3(0x1c5)]=!0x1;try{_0x200506[_0x3828d3(0x1ea)]=null,_0x200506[_0x3828d3(0x274)]=null,_0x200506[_0x3828d3(0x280)]=null;}catch{}try{_0x200506[_0x3828d3(0x1e5)]<0x2&&_0x200506['close']();}catch{}}['_attemptToReconnectShortly'](){var _0x2c9e50=_0xfe5e44;clearTimeout(this[_0x2c9e50(0x240)]),!(this[_0x2c9e50(0x1a8)]>=this[_0x2c9e50(0x28f)])&&(this[_0x2c9e50(0x240)]=setTimeout(()=>{var _0x26eb71=_0x2c9e50,_0x52968d;this[_0x26eb71(0x203)]||this[_0x26eb71(0x1c5)]||(this[_0x26eb71(0x284)](),(_0x52968d=this[_0x26eb71(0x1e7)])==null||_0x52968d[_0x26eb71(0x260)](()=>this[_0x26eb71(0x24b)]()));},0x1f4),this[_0x2c9e50(0x240)][_0x2c9e50(0x1b7)]&&this[_0x2c9e50(0x240)]['unref']());}async[_0xfe5e44(0x26e)](_0x254553){var _0x10e206=_0xfe5e44;try{if(!this[_0x10e206(0x1e2)])return;this['_allowedToConnectOnSend']&&this[_0x10e206(0x284)](),(await this[_0x10e206(0x1e7)])[_0x10e206(0x26e)](JSON['stringify'](_0x254553));}catch(_0x4fb68d){console[_0x10e206(0x1f2)](this[_0x10e206(0x1ae)]+':\\x20'+(_0x4fb68d&&_0x4fb68d[_0x10e206(0x222)])),this[_0x10e206(0x1e2)]=!0x1,this['_attemptToReconnectShortly']();}}};function q(_0x363e8b,_0x58bc11,_0x5a57be,_0x3c20e5,_0x3cdf4f,_0x2eec54,_0x377b83,_0x1b0bff=ie){var _0xc8f00e=_0xfe5e44;let _0xe24ba0=_0x5a57be[_0xc8f00e(0x1e4)](',')['map'](_0x46f2cf=>{var _0x14d705=_0xc8f00e,_0xdaec49,_0x3c920c,_0x205786,_0x14ba10;try{if(!_0x363e8b['_console_ninja_session']){let _0x38ad4a=((_0x3c920c=(_0xdaec49=_0x363e8b['process'])==null?void 0x0:_0xdaec49['versions'])==null?void 0x0:_0x3c920c[_0x14d705(0x28c)])||((_0x14ba10=(_0x205786=_0x363e8b[_0x14d705(0x206)])==null?void 0x0:_0x205786[_0x14d705(0x1cc)])==null?void 0x0:_0x14ba10[_0x14d705(0x1c3)])===_0x14d705(0x1fd);(_0x3cdf4f===_0x14d705(0x237)||_0x3cdf4f===_0x14d705(0x200)||_0x3cdf4f===_0x14d705(0x1a6)||_0x3cdf4f===_0x14d705(0x233))&&(_0x3cdf4f+=_0x38ad4a?_0x14d705(0x1f9):_0x14d705(0x1ee)),_0x363e8b[_0x14d705(0x288)]={'id':+new Date(),'tool':_0x3cdf4f},_0x377b83&&_0x3cdf4f&&!_0x38ad4a&&console['log'](_0x14d705(0x1c6)+(_0x3cdf4f[_0x14d705(0x26d)](0x0)[_0x14d705(0x1c7)]()+_0x3cdf4f[_0x14d705(0x1a9)](0x1))+',',_0x14d705(0x252),_0x14d705(0x246));}let _0x51b6a1=new Z(_0x363e8b,_0x58bc11,_0x46f2cf,_0x3c20e5,_0x2eec54,_0x1b0bff);return _0x51b6a1[_0x14d705(0x26e)][_0x14d705(0x21f)](_0x51b6a1);}catch(_0xe14f48){return console[_0x14d705(0x1f2)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0xe14f48&&_0xe14f48[_0x14d705(0x222)]),()=>{};}});return _0x10f04c=>_0xe24ba0['forEach'](_0x53fdd6=>_0x53fdd6(_0x10f04c));}function ie(_0x1e3a4e,_0x26e9b1,_0x45eb31,_0x5dd34b){var _0xa75978=_0xfe5e44;_0x5dd34b&&_0x1e3a4e===_0xa75978(0x263)&&_0x45eb31['location']['reload']();}function _0x4842(){var _0x55a193=['onmessage','Symbol','_ninjaIgnoreNextError','_allowedToSend','allStrLength','split','readyState','_getOwnPropertySymbols','_ws','2382480MpSNUG','props','onclose','count','1720296nDiCbK','...','\\x20browser','_isUndefined','number','autoExpandMaxDepth','warn','1qLarGK','value','getOwnPropertySymbols','args','location','Set','\\x20server','_numberRegExp','get','_hasSymbolPropertyOnItsPath','edge','_addObjectProperty','performance','remix','_webSocketErrorDocsLink','_getOwnPropertyNames','_connected','push','set','process','_regExpToString','isArray','time','_setNodeLabel','test','logger\\x20websocket\\x20error','2427080OyrYQm','[object\\x20Map]','undefined','capped','https://tinyurl.com/37x8b79t','timeStamp','_propertyName','cappedProps','negativeInfinity','constructor','null','fromCharCode','hrtime','_objectToString','name',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'_disposeWebsocket','isExpressionToEvaluate','bind','_consoleNinjaAllowedToStart','_inNextEdge','message','positiveInfinity','concat','Number','_sortProps','console','type','pop','error','13205BQaGVp','autoExpand','elements','autoExpandPreviousObjects','_isPrimitiveType','log','_treeNodePropertiesBeforeFullValue','toString','angular','parse','[object\\x20BigInt]','_additionalMetadata','next.js','_treeNodePropertiesAfterFullValue','HTMLAllCollection','reduceLimits','parent','join','serialize','_inBrowser','_isNegativeZero','_reconnectTimeout','autoExpandLimit','[object\\x20Set]','[object\\x20Date]','1','url','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','getPrototypeOf','now','hasOwnProperty','_attemptToReconnectShortly','_console_ninja','length','Error','array','__es'+'Module','path','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_cleanNode','function','root_exp_id','getOwnPropertyDescriptor','map','forEach','object','cappedElements','Buffer','_property','index','default','autoExpandPropertyCount','catch','NEGATIVE_INFINITY','port','reload','dockerizedApp','current','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','funcName','strLength','bigint','match','stack','1.0.0','charAt','send','versions','host','_addLoadNode','getWebSocketClass','call','onerror','','_type','expressionsToEvaluate','stackTraceLimit','POSITIVE_INFINITY','disabledTrace','_undefined','eventReceivedCallback','disabledLog','replace','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','onopen','gateway.docker.internal','string','_isMap','_connectToHostNow','_HTMLAllCollection','1729498501336','_isSet','_console_ninja_session','getOwnPropertyNames','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','3799160JnHzpD','node','prototype','_setNodeId','_maxConnectAttemptCount','perf_hooks','global','_isPrimitiveWrapperType','String','54cKIlnc','endsWith','includes','hits','toLowerCase','trace','42SfmdiD','setter','astro','origin','_connectAttemptCount','substr','totalStrLength','_allowedToConnectOnSend','_p_length','9027438ugZkeV','_sendErrorMessage','_addFunctionsNode','_blacklistedProperty','elapsed','sort','pathToFileURL','method','_Symbol','noFunctions','unref','_addProperty','data','root_exp','_quotedRegExp','nodeModules','defineProperty','resolveGetters','2147774qrYQaz','_keyStrRegExp','_setNodeQueryPath','stringify','NEXT_RUNTIME','_capIfString','_connecting','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','toUpperCase','unknown','ws://','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_getOwnPropertyDescriptor','env','',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.363\\\\node_modules\",'then','_setNodePermissions','depth','coverage','level','_p_name','_WebSocketClass','sortProps','_p_','date','symbol','_processTreeNodeResult','Map','slice','_socket','_isArray'];_0x4842=function(){return _0x55a193;};return _0x4842();}function B(_0x2e36ea){var _0x5eab18=_0xfe5e44,_0x57ceac,_0x1cd3ff;let _0x174e43=function(_0x2d5214,_0x4d7e82){return _0x4d7e82-_0x2d5214;},_0x355dd9;if(_0x2e36ea[_0x5eab18(0x1ff)])_0x355dd9=function(){return _0x2e36ea['performance']['now']();};else{if(_0x2e36ea[_0x5eab18(0x206)]&&_0x2e36ea[_0x5eab18(0x206)][_0x5eab18(0x219)]&&((_0x1cd3ff=(_0x57ceac=_0x2e36ea['process'])==null?void 0x0:_0x57ceac[_0x5eab18(0x1cc)])==null?void 0x0:_0x1cd3ff[_0x5eab18(0x1c3)])!==_0x5eab18(0x1fd))_0x355dd9=function(){var _0x2a5b23=_0x5eab18;return _0x2e36ea[_0x2a5b23(0x206)]['hrtime']();},_0x174e43=function(_0x37a19c,_0x13b965){return 0x3e8*(_0x13b965[0x0]-_0x37a19c[0x0])+(_0x13b965[0x1]-_0x37a19c[0x1])/0xf4240;};else try{let {performance:_0x2474a0}=require(_0x5eab18(0x290));_0x355dd9=function(){var _0x50de9c=_0x5eab18;return _0x2474a0[_0x50de9c(0x249)]();};}catch{_0x355dd9=function(){return+new Date();};}}return{'elapsed':_0x174e43,'timeStamp':_0x355dd9,'now':()=>Date['now']()};}function _0x2800(_0x20c316,_0x27e44d){var _0x4842d5=_0x4842();return _0x2800=function(_0x280079,_0x2b136d){_0x280079=_0x280079-0x1a1;var _0xf6dce9=_0x4842d5[_0x280079];return _0xf6dce9;},_0x2800(_0x20c316,_0x27e44d);}function H(_0x5f046d,_0xbfea67,_0x4c9847){var _0x42332c=_0xfe5e44,_0x4536df,_0x3e591b,_0x1c02fd,_0x5661b7,_0xda7882;if(_0x5f046d['_consoleNinjaAllowedToStart']!==void 0x0)return _0x5f046d[_0x42332c(0x220)];let _0x152a42=((_0x3e591b=(_0x4536df=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x4536df['versions'])==null?void 0x0:_0x3e591b[_0x42332c(0x28c)])||((_0x5661b7=(_0x1c02fd=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x1c02fd[_0x42332c(0x1cc)])==null?void 0x0:_0x5661b7[_0x42332c(0x1c3)])===_0x42332c(0x1fd);function _0x412595(_0x5027d4){var _0x5782b1=_0x42332c;if(_0x5027d4['startsWith']('/')&&_0x5027d4[_0x5782b1(0x295)]('/')){let _0x558f03=new RegExp(_0x5027d4[_0x5782b1(0x1dc)](0x1,-0x1));return _0x3d0d65=>_0x558f03['test'](_0x3d0d65);}else{if(_0x5027d4['includes']('*')||_0x5027d4[_0x5782b1(0x296)]('?')){let _0x51bebf=new RegExp('^'+_0x5027d4[_0x5782b1(0x27e)](/\\./g,String[_0x5782b1(0x218)](0x5c)+'.')[_0x5782b1(0x27e)](/\\*/g,'.*')[_0x5782b1(0x27e)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x24f699=>_0x51bebf[_0x5782b1(0x20b)](_0x24f699);}else return _0x207603=>_0x207603===_0x5027d4;}}let _0x275cea=_0xbfea67[_0x42332c(0x257)](_0x412595);return _0x5f046d[_0x42332c(0x220)]=_0x152a42||!_0xbfea67,!_0x5f046d[_0x42332c(0x220)]&&((_0xda7882=_0x5f046d[_0x42332c(0x1f7)])==null?void 0x0:_0xda7882['hostname'])&&(_0x5f046d[_0x42332c(0x220)]=_0x275cea['some'](_0x55b435=>_0x55b435(_0x5f046d['location']['hostname']))),_0x5f046d[_0x42332c(0x220)];}function X(_0x2f1a70,_0x5be072,_0x39be01,_0x5a5745){var _0x1ae9de=_0xfe5e44;_0x2f1a70=_0x2f1a70,_0x5be072=_0x5be072,_0x39be01=_0x39be01,_0x5a5745=_0x5a5745;let _0x45ad24=B(_0x2f1a70),_0x34913b=_0x45ad24[_0x1ae9de(0x1b1)],_0x5f4254=_0x45ad24[_0x1ae9de(0x212)];class _0x39aee3{constructor(){var _0x209462=_0x1ae9de;this[_0x209462(0x1c0)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x209462(0x1fa)]=/^(0|[1-9][0-9]*)$/,this[_0x209462(0x1bb)]=/'([^\\\\']|\\\\')*'/,this[_0x209462(0x27b)]=_0x2f1a70[_0x209462(0x20f)],this['_HTMLAllCollection']=_0x2f1a70[_0x209462(0x239)],this[_0x209462(0x1cb)]=Object[_0x209462(0x256)],this[_0x209462(0x202)]=Object[_0x209462(0x289)],this[_0x209462(0x1b5)]=_0x2f1a70[_0x209462(0x1e0)],this['_regExpToString']=RegExp['prototype'][_0x209462(0x232)],this['_dateToString']=Date[_0x209462(0x28d)][_0x209462(0x232)];}[_0x1ae9de(0x23d)](_0x24b7f3,_0x296f73,_0x46653d,_0x5bf9fd){var _0xda21b4=_0x1ae9de,_0x2a2fd0=this,_0x4dd6b0=_0x46653d[_0xda21b4(0x22c)];function _0x131eb6(_0x24c1df,_0x28bf57,_0x408d48){var _0x479131=_0xda21b4;_0x28bf57[_0x479131(0x228)]='unknown',_0x28bf57['error']=_0x24c1df[_0x479131(0x222)],_0x1f0d56=_0x408d48[_0x479131(0x28c)][_0x479131(0x265)],_0x408d48[_0x479131(0x28c)][_0x479131(0x265)]=_0x28bf57,_0x2a2fd0[_0x479131(0x231)](_0x28bf57,_0x408d48);}try{_0x46653d['level']++,_0x46653d['autoExpand']&&_0x46653d['autoExpandPreviousObjects'][_0xda21b4(0x204)](_0x296f73);var _0x1e2094,_0x16aefa,_0x542566,_0x42e28b,_0xce7f95=[],_0xe6f1c3=[],_0xf17c29,_0x207db8=this[_0xda21b4(0x276)](_0x296f73),_0x277de6=_0x207db8==='array',_0x5c426c=!0x1,_0x66fe1b=_0x207db8===_0xda21b4(0x254),_0xca6e64=this[_0xda21b4(0x22f)](_0x207db8),_0x2c405a=this[_0xda21b4(0x292)](_0x207db8),_0x4f5d62=_0xca6e64||_0x2c405a,_0x6961d3={},_0x1bc657=0x0,_0x201335=!0x1,_0x1f0d56,_0x46ae26=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x46653d[_0xda21b4(0x1d1)]){if(_0x277de6){if(_0x16aefa=_0x296f73[_0xda21b4(0x24d)],_0x16aefa>_0x46653d[_0xda21b4(0x22d)]){for(_0x542566=0x0,_0x42e28b=_0x46653d[_0xda21b4(0x22d)],_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0['_addProperty'](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));_0x24b7f3[_0xda21b4(0x25a)]=!0x0;}else{for(_0x542566=0x0,_0x42e28b=_0x16aefa,_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1b8)](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));}_0x46653d['autoExpandPropertyCount']+=_0xe6f1c3[_0xda21b4(0x24d)];}if(!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&!_0xca6e64&&_0x207db8!==_0xda21b4(0x293)&&_0x207db8!==_0xda21b4(0x25b)&&_0x207db8!==_0xda21b4(0x269)){var _0x56b380=_0x5bf9fd[_0xda21b4(0x1e9)]||_0x46653d[_0xda21b4(0x1e9)];if(this['_isSet'](_0x296f73)?(_0x1e2094=0x0,_0x296f73[_0xda21b4(0x258)](function(_0x365782){var _0x20415e=_0xda21b4;if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d['isExpressionToEvaluate']&&_0x46653d['autoExpand']&&_0x46653d[_0x20415e(0x25f)]>_0x46653d[_0x20415e(0x241)]){_0x201335=!0x0;return;}_0xe6f1c3['push'](_0x2a2fd0[_0x20415e(0x1b8)](_0xce7f95,_0x296f73,'Set',_0x1e2094++,_0x46653d,function(_0x464074){return function(){return _0x464074;};}(_0x365782)));})):this[_0xda21b4(0x283)](_0x296f73)&&_0x296f73[_0xda21b4(0x258)](function(_0x378430,_0x28b1c6){var _0x29ac38=_0xda21b4;if(_0x1bc657++,_0x46653d[_0x29ac38(0x25f)]++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d[_0x29ac38(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0x29ac38(0x25f)]>_0x46653d[_0x29ac38(0x241)]){_0x201335=!0x0;return;}var _0x39ddf3=_0x28b1c6['toString']();_0x39ddf3[_0x29ac38(0x24d)]>0x64&&(_0x39ddf3=_0x39ddf3[_0x29ac38(0x1dc)](0x0,0x64)+_0x29ac38(0x1ed)),_0xe6f1c3[_0x29ac38(0x204)](_0x2a2fd0[_0x29ac38(0x1b8)](_0xce7f95,_0x296f73,_0x29ac38(0x1db),_0x39ddf3,_0x46653d,function(_0x46bd7a){return function(){return _0x46bd7a;};}(_0x378430)));}),!_0x5c426c){try{for(_0xf17c29 in _0x296f73)if(!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29))&&!this['_blacklistedProperty'](_0x296f73,_0xf17c29,_0x46653d)){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d[_0xda21b4(0x241)]){_0x201335=!0x0;break;}_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}catch{}if(_0x6961d3[_0xda21b4(0x1ac)]=!0x0,_0x66fe1b&&(_0x6961d3[_0xda21b4(0x1d4)]=!0x0),!_0x201335){var _0x2658ba=[][_0xda21b4(0x224)](this[_0xda21b4(0x202)](_0x296f73))[_0xda21b4(0x224)](this[_0xda21b4(0x1e6)](_0x296f73));for(_0x1e2094=0x0,_0x16aefa=_0x2658ba[_0xda21b4(0x24d)];_0x1e2094<_0x16aefa;_0x1e2094++)if(_0xf17c29=_0x2658ba[_0x1e2094],!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29[_0xda21b4(0x232)]()))&&!this[_0xda21b4(0x1b0)](_0x296f73,_0xf17c29,_0x46653d)&&!_0x6961d3[_0xda21b4(0x1d7)+_0xf17c29[_0xda21b4(0x232)]()]){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d['autoExpandLimit']){_0x201335=!0x0;break;}_0xe6f1c3['push'](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}}}}if(_0x24b7f3[_0xda21b4(0x228)]=_0x207db8,_0x4f5d62?(_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73['valueOf'](),this['_capIfString'](_0x207db8,_0x24b7f3,_0x46653d,_0x5bf9fd)):_0x207db8==='date'?_0x24b7f3[_0xda21b4(0x1f4)]=this['_dateToString'][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x269)?_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73[_0xda21b4(0x232)]():_0x207db8==='RegExp'?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x207)][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x1d9)&&this[_0xda21b4(0x1b5)]?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x1b5)][_0xda21b4(0x28d)][_0xda21b4(0x232)][_0xda21b4(0x273)](_0x296f73):!_0x46653d[_0xda21b4(0x1d1)]&&!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&(delete _0x24b7f3[_0xda21b4(0x1f4)],_0x24b7f3[_0xda21b4(0x210)]=!0x0),_0x201335&&(_0x24b7f3[_0xda21b4(0x214)]=!0x0),_0x1f0d56=_0x46653d['node'][_0xda21b4(0x265)],_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x24b7f3,this[_0xda21b4(0x231)](_0x24b7f3,_0x46653d),_0xe6f1c3[_0xda21b4(0x24d)]){for(_0x1e2094=0x0,_0x16aefa=_0xe6f1c3['length'];_0x1e2094<_0x16aefa;_0x1e2094++)_0xe6f1c3[_0x1e2094](_0x1e2094);}_0xce7f95[_0xda21b4(0x24d)]&&(_0x24b7f3[_0xda21b4(0x1e9)]=_0xce7f95);}catch(_0x38ef6d){_0x131eb6(_0x38ef6d,_0x24b7f3,_0x46653d);}return this[_0xda21b4(0x236)](_0x296f73,_0x24b7f3),this[_0xda21b4(0x238)](_0x24b7f3,_0x46653d),_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x1f0d56,_0x46653d[_0xda21b4(0x1d3)]--,_0x46653d[_0xda21b4(0x22c)]=_0x4dd6b0,_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x22e)][_0xda21b4(0x229)](),_0x24b7f3;}[_0x1ae9de(0x1e6)](_0xb74ebd){var _0x1753d6=_0x1ae9de;return Object[_0x1753d6(0x1f5)]?Object[_0x1753d6(0x1f5)](_0xb74ebd):[];}[_0x1ae9de(0x287)](_0x28d2ef){var _0x33e17f=_0x1ae9de;return!!(_0x28d2ef&&_0x2f1a70[_0x33e17f(0x1f8)]&&this[_0x33e17f(0x21a)](_0x28d2ef)===_0x33e17f(0x242)&&_0x28d2ef[_0x33e17f(0x258)]);}[_0x1ae9de(0x1b0)](_0x329b1b,_0x42292a,_0x37ab2c){var _0x453ac9=_0x1ae9de;return _0x37ab2c[_0x453ac9(0x1b6)]?typeof _0x329b1b[_0x42292a]=='function':!0x1;}[_0x1ae9de(0x276)](_0x22f058){var _0x241b7a=_0x1ae9de,_0x3d4e65='';return _0x3d4e65=typeof _0x22f058,_0x3d4e65==='object'?this['_objectToString'](_0x22f058)==='[object\\x20Array]'?_0x3d4e65='array':this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x243)?_0x3d4e65=_0x241b7a(0x1d8):this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x235)?_0x3d4e65=_0x241b7a(0x269):_0x22f058===null?_0x3d4e65=_0x241b7a(0x217):_0x22f058[_0x241b7a(0x216)]&&(_0x3d4e65=_0x22f058[_0x241b7a(0x216)][_0x241b7a(0x21b)]||_0x3d4e65):_0x3d4e65===_0x241b7a(0x20f)&&this['_HTMLAllCollection']&&_0x22f058 instanceof this[_0x241b7a(0x285)]&&(_0x3d4e65=_0x241b7a(0x239)),_0x3d4e65;}[_0x1ae9de(0x21a)](_0x1de872){var _0x3570e9=_0x1ae9de;return Object[_0x3570e9(0x28d)][_0x3570e9(0x232)][_0x3570e9(0x273)](_0x1de872);}[_0x1ae9de(0x22f)](_0x42b981){var _0x1b4389=_0x1ae9de;return _0x42b981==='boolean'||_0x42b981==='string'||_0x42b981===_0x1b4389(0x1f0);}['_isPrimitiveWrapperType'](_0x57d12a){var _0x51fa40=_0x1ae9de;return _0x57d12a==='Boolean'||_0x57d12a==='String'||_0x57d12a===_0x51fa40(0x225);}[_0x1ae9de(0x1b8)](_0x3de90e,_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85){var _0x279d30=this;return function(_0x56c688){var _0x31cb49=_0x2800,_0x64fca0=_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x265)],_0x189cd8=_0x5bf061['node'][_0x31cb49(0x25d)],_0x5ea25f=_0x5bf061[_0x31cb49(0x28c)]['parent'];_0x5bf061['node'][_0x31cb49(0x23b)]=_0x64fca0,_0x5bf061['node'][_0x31cb49(0x25d)]=typeof _0x22b26e==_0x31cb49(0x1f0)?_0x22b26e:_0x56c688,_0x3de90e[_0x31cb49(0x204)](_0x279d30[_0x31cb49(0x25c)](_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85)),_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x23b)]=_0x5ea25f,_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x25d)]=_0x189cd8;};}['_addObjectProperty'](_0x8f1714,_0x46c19e,_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881){var _0x557444=_0x1ae9de,_0x58766c=this;return _0x46c19e[_0x557444(0x1d7)+_0x3c5712['toString']()]=!0x0,function(_0x494a74){var _0x3c739b=_0x557444,_0x38c099=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x265)],_0xea8865=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)],_0x1da583=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)];_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x38c099,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0x494a74,_0x8f1714[_0x3c739b(0x204)](_0x58766c[_0x3c739b(0x25c)](_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881)),_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x1da583,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0xea8865;};}[_0x1ae9de(0x25c)](_0xa26af7,_0xd1783c,_0x4c3410,_0xa3bf2,_0x9fad98){var _0xa63a4b=_0x1ae9de,_0x36eca9=this;_0x9fad98||(_0x9fad98=function(_0x4958a8,_0x41ca28){return _0x4958a8[_0x41ca28];});var _0x29cbb9=_0x4c3410[_0xa63a4b(0x232)](),_0x5cfb46=_0xa3bf2[_0xa63a4b(0x277)]||{},_0x445183=_0xa3bf2[_0xa63a4b(0x1d1)],_0x316f50=_0xa3bf2['isExpressionToEvaluate'];try{var _0x141d25=this['_isMap'](_0xa26af7),_0xfd5f67=_0x29cbb9;_0x141d25&&_0xfd5f67[0x0]==='\\x27'&&(_0xfd5f67=_0xfd5f67[_0xa63a4b(0x1a9)](0x1,_0xfd5f67[_0xa63a4b(0x24d)]-0x2));var _0x4fdb4d=_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46[_0xa63a4b(0x1d7)+_0xfd5f67];_0x4fdb4d&&(_0xa3bf2[_0xa63a4b(0x1d1)]=_0xa3bf2[_0xa63a4b(0x1d1)]+0x1),_0xa3bf2[_0xa63a4b(0x21e)]=!!_0x4fdb4d;var _0x475157=typeof _0x4c3410=='symbol',_0x29d85c={'name':_0x475157||_0x141d25?_0x29cbb9:this['_propertyName'](_0x29cbb9)};if(_0x475157&&(_0x29d85c[_0xa63a4b(0x1d9)]=!0x0),!(_0xd1783c===_0xa63a4b(0x24f)||_0xd1783c===_0xa63a4b(0x24e))){var _0x260b73=this[_0xa63a4b(0x1cb)](_0xa26af7,_0x4c3410);if(_0x260b73&&(_0x260b73[_0xa63a4b(0x205)]&&(_0x29d85c[_0xa63a4b(0x1a5)]=!0x0),_0x260b73[_0xa63a4b(0x1fb)]&&!_0x4fdb4d&&!_0xa3bf2[_0xa63a4b(0x1be)]))return _0x29d85c['getter']=!0x0,this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x194fa5;try{_0x194fa5=_0x9fad98(_0xa26af7,_0x4c3410);}catch(_0x2c3142){return _0x29d85c={'name':_0x29cbb9,'type':_0xa63a4b(0x1c8),'error':_0x2c3142[_0xa63a4b(0x222)]},this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x50852a=this[_0xa63a4b(0x276)](_0x194fa5),_0x3ab79e=this[_0xa63a4b(0x22f)](_0x50852a);if(_0x29d85c[_0xa63a4b(0x228)]=_0x50852a,_0x3ab79e)this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x30a33f=_0xa63a4b;_0x29d85c[_0x30a33f(0x1f4)]=_0x194fa5['valueOf'](),!_0x4fdb4d&&_0x36eca9[_0x30a33f(0x1c4)](_0x50852a,_0x29d85c,_0xa3bf2,{});});else{var _0x2eb8d1=_0xa3bf2[_0xa63a4b(0x22c)]&&_0xa3bf2[_0xa63a4b(0x1d3)]<_0xa3bf2['autoExpandMaxDepth']&&_0xa3bf2[_0xa63a4b(0x22e)]['indexOf'](_0x194fa5)<0x0&&_0x50852a!=='function'&&_0xa3bf2[_0xa63a4b(0x25f)]<_0xa3bf2['autoExpandLimit'];_0x2eb8d1||_0xa3bf2[_0xa63a4b(0x1d3)]<_0x445183||_0x4fdb4d?(this['serialize'](_0x29d85c,_0x194fa5,_0xa3bf2,_0x4fdb4d||{}),this[_0xa63a4b(0x236)](_0x194fa5,_0x29d85c)):this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x1ac2f4=_0xa63a4b;_0x50852a===_0x1ac2f4(0x217)||_0x50852a==='undefined'||(delete _0x29d85c['value'],_0x29d85c[_0x1ac2f4(0x210)]=!0x0);});}return _0x29d85c;}finally{_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46,_0xa3bf2['depth']=_0x445183,_0xa3bf2[_0xa63a4b(0x21e)]=_0x316f50;}}['_capIfString'](_0x15a619,_0x2e9551,_0x2d0dc7,_0x3aa61d){var _0x1ccfd8=_0x1ae9de,_0x14e5ce=_0x3aa61d[_0x1ccfd8(0x268)]||_0x2d0dc7[_0x1ccfd8(0x268)];if((_0x15a619===_0x1ccfd8(0x282)||_0x15a619===_0x1ccfd8(0x293))&&_0x2e9551['value']){let _0x381743=_0x2e9551[_0x1ccfd8(0x1f4)]['length'];_0x2d0dc7['allStrLength']+=_0x381743,_0x2d0dc7['allStrLength']>_0x2d0dc7['totalStrLength']?(_0x2e9551[_0x1ccfd8(0x210)]='',delete _0x2e9551[_0x1ccfd8(0x1f4)]):_0x381743>_0x14e5ce&&(_0x2e9551[_0x1ccfd8(0x210)]=_0x2e9551[_0x1ccfd8(0x1f4)]['substr'](0x0,_0x14e5ce),delete _0x2e9551['value']);}}[_0x1ae9de(0x283)](_0x11ab3e){var _0x455bcd=_0x1ae9de;return!!(_0x11ab3e&&_0x2f1a70['Map']&&this[_0x455bcd(0x21a)](_0x11ab3e)===_0x455bcd(0x20e)&&_0x11ab3e[_0x455bcd(0x258)]);}[_0x1ae9de(0x213)](_0x59761d){var _0x205d94=_0x1ae9de;if(_0x59761d[_0x205d94(0x26a)](/^\\d+$/))return _0x59761d;var _0x283bad;try{_0x283bad=JSON[_0x205d94(0x1c2)](''+_0x59761d);}catch{_0x283bad='\\x22'+this[_0x205d94(0x21a)](_0x59761d)+'\\x22';}return _0x283bad['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x283bad=_0x283bad[_0x205d94(0x1a9)](0x1,_0x283bad[_0x205d94(0x24d)]-0x2):_0x283bad=_0x283bad[_0x205d94(0x27e)](/'/g,'\\x5c\\x27')[_0x205d94(0x27e)](/\\\\\"/g,'\\x22')[_0x205d94(0x27e)](/(^\"|\"$)/g,'\\x27'),_0x283bad;}[_0x1ae9de(0x1da)](_0x55bb11,_0x1b3795,_0x48f261,_0x3e21aa){var _0x571adc=_0x1ae9de;this[_0x571adc(0x231)](_0x55bb11,_0x1b3795),_0x3e21aa&&_0x3e21aa(),this['_additionalMetadata'](_0x48f261,_0x55bb11),this[_0x571adc(0x238)](_0x55bb11,_0x1b3795);}[_0x1ae9de(0x231)](_0xe082ed,_0x50b700){var _0x489d9f=_0x1ae9de;this['_setNodeId'](_0xe082ed,_0x50b700),this[_0x489d9f(0x1c1)](_0xe082ed,_0x50b700),this['_setNodeExpressionPath'](_0xe082ed,_0x50b700),this['_setNodePermissions'](_0xe082ed,_0x50b700);}['_setNodeId'](_0x56e200,_0x453198){}['_setNodeQueryPath'](_0x40a95f,_0x1f617a){}[_0x1ae9de(0x20a)](_0x295c6a,_0x297bb4){}[_0x1ae9de(0x1ef)](_0x3f6925){return _0x3f6925===this['_undefined'];}[_0x1ae9de(0x238)](_0x215840,_0x2292fd){var _0x544c37=_0x1ae9de;this[_0x544c37(0x20a)](_0x215840,_0x2292fd),this['_setNodeExpandableState'](_0x215840),_0x2292fd[_0x544c37(0x1d6)]&&this['_sortProps'](_0x215840),this[_0x544c37(0x1af)](_0x215840,_0x2292fd),this[_0x544c37(0x271)](_0x215840,_0x2292fd),this[_0x544c37(0x253)](_0x215840);}[_0x1ae9de(0x236)](_0x90e37d,_0x2905ac){var _0x245bf4=_0x1ae9de;let _0x404a53;try{_0x2f1a70[_0x245bf4(0x227)]&&(_0x404a53=_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)],_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)]=function(){}),_0x90e37d&&typeof _0x90e37d[_0x245bf4(0x24d)]==_0x245bf4(0x1f0)&&(_0x2905ac[_0x245bf4(0x24d)]=_0x90e37d[_0x245bf4(0x24d)]);}catch{}finally{_0x404a53&&(_0x2f1a70['console'][_0x245bf4(0x22a)]=_0x404a53);}if(_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x1f0)||_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x225)){if(isNaN(_0x2905ac[_0x245bf4(0x1f4)]))_0x2905ac['nan']=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];else switch(_0x2905ac[_0x245bf4(0x1f4)]){case Number[_0x245bf4(0x279)]:_0x2905ac[_0x245bf4(0x223)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case Number[_0x245bf4(0x261)]:_0x2905ac[_0x245bf4(0x215)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case 0x0:this['_isNegativeZero'](_0x2905ac['value'])&&(_0x2905ac['negativeZero']=!0x0);break;}}else _0x2905ac['type']==='function'&&typeof _0x90e37d[_0x245bf4(0x21b)]==_0x245bf4(0x282)&&_0x90e37d[_0x245bf4(0x21b)]&&_0x2905ac['name']&&_0x90e37d[_0x245bf4(0x21b)]!==_0x2905ac[_0x245bf4(0x21b)]&&(_0x2905ac[_0x245bf4(0x267)]=_0x90e37d['name']);}[_0x1ae9de(0x23f)](_0x3603f9){return 0x1/_0x3603f9===Number['NEGATIVE_INFINITY'];}[_0x1ae9de(0x226)](_0x91135f){var _0x27bcc9=_0x1ae9de;!_0x91135f['props']||!_0x91135f['props'][_0x27bcc9(0x24d)]||_0x91135f[_0x27bcc9(0x228)]==='array'||_0x91135f[_0x27bcc9(0x228)]==='Map'||_0x91135f[_0x27bcc9(0x228)]===_0x27bcc9(0x1f8)||_0x91135f['props'][_0x27bcc9(0x1b2)](function(_0x2a2cdb,_0x49ee4b){var _0x5e76b3=_0x27bcc9,_0x19063e=_0x2a2cdb[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)](),_0x446003=_0x49ee4b[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)]();return _0x19063e<_0x446003?-0x1:_0x19063e>_0x446003?0x1:0x0;});}['_addFunctionsNode'](_0x2e8e4d,_0x199c30){var _0x3d3aa0=_0x1ae9de;if(!(_0x199c30[_0x3d3aa0(0x1b6)]||!_0x2e8e4d[_0x3d3aa0(0x1e9)]||!_0x2e8e4d['props']['length'])){for(var _0x435133=[],_0x2531e7=[],_0x4b5a61=0x0,_0x36d28b=_0x2e8e4d[_0x3d3aa0(0x1e9)]['length'];_0x4b5a61<_0x36d28b;_0x4b5a61++){var _0x10d795=_0x2e8e4d['props'][_0x4b5a61];_0x10d795[_0x3d3aa0(0x228)]===_0x3d3aa0(0x254)?_0x435133[_0x3d3aa0(0x204)](_0x10d795):_0x2531e7[_0x3d3aa0(0x204)](_0x10d795);}if(!(!_0x2531e7[_0x3d3aa0(0x24d)]||_0x435133['length']<=0x1)){_0x2e8e4d['props']=_0x2531e7;var _0x14dec4={'functionsNode':!0x0,'props':_0x435133};this[_0x3d3aa0(0x28e)](_0x14dec4,_0x199c30),this[_0x3d3aa0(0x20a)](_0x14dec4,_0x199c30),this['_setNodeExpandableState'](_0x14dec4),this['_setNodePermissions'](_0x14dec4,_0x199c30),_0x14dec4['id']+='\\x20f',_0x2e8e4d['props']['unshift'](_0x14dec4);}}}['_addLoadNode'](_0x4a8f7a,_0x346db0){}['_setNodeExpandableState'](_0x1c6fd1){}[_0x1ae9de(0x1de)](_0x1211e9){var _0x3903b5=_0x1ae9de;return Array[_0x3903b5(0x208)](_0x1211e9)||typeof _0x1211e9=='object'&&this[_0x3903b5(0x21a)](_0x1211e9)==='[object\\x20Array]';}[_0x1ae9de(0x1d0)](_0x311e8c,_0x69f8f0){}[_0x1ae9de(0x253)](_0x1fb5ad){var _0x4e516a=_0x1ae9de;delete _0x1fb5ad[_0x4e516a(0x1fc)],delete _0x1fb5ad['_hasSetOnItsPath'],delete _0x1fb5ad['_hasMapOnItsPath'];}['_setNodeExpressionPath'](_0x1f43f0,_0x5dc18c){}}let _0x44e097=new _0x39aee3(),_0x555933={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x5ef4bb={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x47aee0(_0x5f519b,_0x36e1c2,_0x38a5b2,_0x245a33,_0x33842e,_0x47f99d){var _0x1b6dc9=_0x1ae9de;let _0x4e9097,_0x2d5f08;try{_0x2d5f08=_0x5f4254(),_0x4e9097=_0x39be01[_0x36e1c2],!_0x4e9097||_0x2d5f08-_0x4e9097['ts']>0x1f4&&_0x4e9097[_0x1b6dc9(0x1eb)]&&_0x4e9097[_0x1b6dc9(0x209)]/_0x4e9097[_0x1b6dc9(0x1eb)]<0x64?(_0x39be01[_0x36e1c2]=_0x4e9097={'count':0x0,'time':0x0,'ts':_0x2d5f08},_0x39be01[_0x1b6dc9(0x1a1)]={}):_0x2d5f08-_0x39be01[_0x1b6dc9(0x1a1)]['ts']>0x32&&_0x39be01[_0x1b6dc9(0x1a1)]['count']&&_0x39be01[_0x1b6dc9(0x1a1)]['time']/_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x1eb)]<0x64&&(_0x39be01[_0x1b6dc9(0x1a1)]={});let _0x321c5e=[],_0x103871=_0x4e9097['reduceLimits']||_0x39be01[_0x1b6dc9(0x1a1)]['reduceLimits']?_0x5ef4bb:_0x555933,_0x1e4aec=_0x11f00b=>{var _0x1d93c3=_0x1b6dc9;let _0x3970c5={};return _0x3970c5['props']=_0x11f00b[_0x1d93c3(0x1e9)],_0x3970c5[_0x1d93c3(0x22d)]=_0x11f00b[_0x1d93c3(0x22d)],_0x3970c5[_0x1d93c3(0x268)]=_0x11f00b[_0x1d93c3(0x268)],_0x3970c5[_0x1d93c3(0x1aa)]=_0x11f00b[_0x1d93c3(0x1aa)],_0x3970c5[_0x1d93c3(0x241)]=_0x11f00b['autoExpandLimit'],_0x3970c5[_0x1d93c3(0x1f1)]=_0x11f00b['autoExpandMaxDepth'],_0x3970c5[_0x1d93c3(0x1d6)]=!0x1,_0x3970c5['noFunctions']=!_0x5be072,_0x3970c5[_0x1d93c3(0x1d1)]=0x1,_0x3970c5[_0x1d93c3(0x1d3)]=0x0,_0x3970c5['expId']=_0x1d93c3(0x255),_0x3970c5['rootExpression']=_0x1d93c3(0x1ba),_0x3970c5[_0x1d93c3(0x22c)]=!0x0,_0x3970c5[_0x1d93c3(0x22e)]=[],_0x3970c5['autoExpandPropertyCount']=0x0,_0x3970c5[_0x1d93c3(0x1be)]=!0x0,_0x3970c5[_0x1d93c3(0x1e3)]=0x0,_0x3970c5[_0x1d93c3(0x28c)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3970c5;};for(var _0x4e066e=0x0;_0x4e066e<_0x33842e[_0x1b6dc9(0x24d)];_0x4e066e++)_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'timeNode':_0x5f519b===_0x1b6dc9(0x209)||void 0x0},_0x33842e[_0x4e066e],_0x1e4aec(_0x103871),{}));if(_0x5f519b===_0x1b6dc9(0x1a3)||_0x5f519b===_0x1b6dc9(0x22a)){let _0x4223a0=Error['stackTraceLimit'];try{Error[_0x1b6dc9(0x278)]=0x1/0x0,_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'stackNode':!0x0},new Error()[_0x1b6dc9(0x26b)],_0x1e4aec(_0x103871),{'strLength':0x1/0x0}));}finally{Error[_0x1b6dc9(0x278)]=_0x4223a0;}}return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':_0x321c5e,'id':_0x36e1c2,'context':_0x47f99d}]};}catch(_0x5b28ee){return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':[{'type':'unknown','error':_0x5b28ee&&_0x5b28ee[_0x1b6dc9(0x222)]}],'id':_0x36e1c2,'context':_0x47f99d}]};}finally{try{if(_0x4e9097&&_0x2d5f08){let _0x1d65c6=_0x5f4254();_0x4e9097['count']++,_0x4e9097[_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x4e9097['ts']=_0x1d65c6,_0x39be01[_0x1b6dc9(0x1a1)]['count']++,_0x39be01['hits'][_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x39be01['hits']['ts']=_0x1d65c6,(_0x4e9097[_0x1b6dc9(0x1eb)]>0x32||_0x4e9097[_0x1b6dc9(0x209)]>0x64)&&(_0x4e9097['reduceLimits']=!0x0),(_0x39be01['hits']['count']>0x3e8||_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x209)]>0x12c)&&(_0x39be01['hits'][_0x1b6dc9(0x23a)]=!0x0);}}catch{}}}return _0x47aee0;}((_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x2de19f,_0x1e302a,_0x363b8d,_0xa0a303,_0x5e55f1,_0x306ab3)=>{var _0x313444=_0xfe5e44;if(_0x2abb00[_0x313444(0x24c)])return _0x2abb00[_0x313444(0x24c)];if(!H(_0x2abb00,_0x363b8d,_0x1722a1))return _0x2abb00[_0x313444(0x24c)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x2abb00[_0x313444(0x24c)];let _0x3b7d8d=B(_0x2abb00),_0x4d9f47=_0x3b7d8d[_0x313444(0x1b1)],_0xfc6f6c=_0x3b7d8d[_0x313444(0x212)],_0x175f2b=_0x3b7d8d[_0x313444(0x249)],_0x128725={'hits':{},'ts':{}},_0x42d6ce=X(_0x2abb00,_0xa0a303,_0x128725,_0x2de19f),_0x541b4e=_0x187c8d=>{_0x128725['ts'][_0x187c8d]=_0xfc6f6c();},_0x49ea08=(_0x2965f7,_0x54e0b4)=>{let _0xa3a7a1=_0x128725['ts'][_0x54e0b4];if(delete _0x128725['ts'][_0x54e0b4],_0xa3a7a1){let _0x3799a5=_0x4d9f47(_0xa3a7a1,_0xfc6f6c());_0x48a896(_0x42d6ce('time',_0x2965f7,_0x175f2b(),_0x1c96ca,[_0x3799a5],_0x54e0b4));}},_0x1ca95f=_0x556e2e=>{var _0x634c6d=_0x313444,_0x3a78f9;return _0x1722a1===_0x634c6d(0x237)&&_0x2abb00[_0x634c6d(0x1a7)]&&((_0x3a78f9=_0x556e2e==null?void 0x0:_0x556e2e[_0x634c6d(0x1f6)])==null?void 0x0:_0x3a78f9[_0x634c6d(0x24d)])&&(_0x556e2e['args'][0x0][_0x634c6d(0x1a7)]=_0x2abb00[_0x634c6d(0x1a7)]),_0x556e2e;};_0x2abb00[_0x313444(0x24c)]={'consoleLog':(_0x1d9044,_0x3da3ab)=>{var _0x578a1e=_0x313444;_0x2abb00[_0x578a1e(0x227)]['log'][_0x578a1e(0x21b)]!==_0x578a1e(0x27d)&&_0x48a896(_0x42d6ce('log',_0x1d9044,_0x175f2b(),_0x1c96ca,_0x3da3ab));},'consoleTrace':(_0x38468d,_0x50b548)=>{var _0x144123=_0x313444,_0x2c0a3b,_0x41bd30;_0x2abb00['console'][_0x144123(0x230)][_0x144123(0x21b)]!==_0x144123(0x27a)&&((_0x41bd30=(_0x2c0a3b=_0x2abb00[_0x144123(0x206)])==null?void 0x0:_0x2c0a3b[_0x144123(0x26f)])!=null&&_0x41bd30[_0x144123(0x28c)]&&(_0x2abb00[_0x144123(0x1e1)]=!0x0),_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x38468d,_0x175f2b(),_0x1c96ca,_0x50b548))));},'consoleError':(_0xe83c02,_0x52826e)=>{var _0x14dcca=_0x313444;_0x2abb00[_0x14dcca(0x1e1)]=!0x0,_0x48a896(_0x1ca95f(_0x42d6ce(_0x14dcca(0x22a),_0xe83c02,_0x175f2b(),_0x1c96ca,_0x52826e)));},'consoleTime':_0x5caf3f=>{_0x541b4e(_0x5caf3f);},'consoleTimeEnd':(_0x27d8c5,_0x417474)=>{_0x49ea08(_0x417474,_0x27d8c5);},'autoLog':(_0x85c6df,_0x7f39a2)=>{var _0x40bb49=_0x313444;_0x48a896(_0x42d6ce(_0x40bb49(0x230),_0x7f39a2,_0x175f2b(),_0x1c96ca,[_0x85c6df]));},'autoLogMany':(_0x5158c0,_0x7b99d2)=>{_0x48a896(_0x42d6ce('log',_0x5158c0,_0x175f2b(),_0x1c96ca,_0x7b99d2));},'autoTrace':(_0x1bc11d,_0x565cc9)=>{_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x565cc9,_0x175f2b(),_0x1c96ca,[_0x1bc11d])));},'autoTraceMany':(_0x352345,_0x4c7f95)=>{var _0x378e10=_0x313444;_0x48a896(_0x1ca95f(_0x42d6ce(_0x378e10(0x1a3),_0x352345,_0x175f2b(),_0x1c96ca,_0x4c7f95)));},'autoTime':(_0x5359fa,_0x25990a,_0x323d68)=>{_0x541b4e(_0x323d68);},'autoTimeEnd':(_0x5be9bc,_0x5dbe0a,_0xba445f)=>{_0x49ea08(_0x5dbe0a,_0xba445f);},'coverage':_0x27be41=>{var _0x20affe=_0x313444;_0x48a896({'method':_0x20affe(0x1d2),'version':_0x2de19f,'args':[{'id':_0x27be41}]});}};let _0x48a896=q(_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x5e55f1,_0x306ab3),_0x1c96ca=_0x2abb00['_console_ninja_session'];return _0x2abb00[_0x313444(0x24c)];})(globalThis,'127.0.0.1','60591',_0xfe5e44(0x1ce),'webpack',_0xfe5e44(0x26c),_0xfe5e44(0x286),_0xfe5e44(0x21c),_0xfe5e44(0x1cd),_0xfe5e44(0x275),_0xfe5e44(0x244));")}catch(e){}}function f(e,...t){try{h().consoleLog(e,t)}catch(e){}return t}},"./src/components/audio-player.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{AudioPlayer:()=>i});var n=a("./src/constants/index.ts");class i{audioContext;sourceNode;audioQueue;promptAudioBuffer;clickSoundBuffer;static audioBuffers=new Map;audioSourcs=[];isClickSoundLoaded;constructor(){this.audioContext=x.getAudioContext(),this.sourceNode=null,this.audioQueue=[],this.clickSoundBuffer=null,this.isClickSoundLoaded=!1}async playButtonClickSound(){const e=n.AUDIO_PATH_BTN_CLICK;if(!this.isClickSoundLoaded)try{this.clickSoundBuffer=await this.loadAndDecodeAudio(e),i.audioBuffers.set(e,this.clickSoundBuffer),this.isClickSoundLoaded=!0}catch(e){return void console.error(...r("2928562115_33_8_33_70_11","Error loading or decoding click sound:",e))}if(this.clickSoundBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.clickSoundBuffer,e.connect(this.audioContext.destination),e.start()}else console.error(...r("2928562115_45_6_45_59_11","Click sound buffer is not available."))}async loadAndDecodeAudio(e){return new Promise((async(t,a)=>{try{const a=await fetch(e),n=await a.arrayBuffer();t(await this.audioContext.decodeAudioData(n))}catch(e){console.error(...r("2928562115_59_8_59_64_11","Error loading or decoding audio:",e)),a(e)}}))}async preloadPromptAudio(e){const t=await this.loadAndDecodeAudio(e);t&&(this.promptAudioBuffer=t)}async preloadGameAudio(e){if(i.audioBuffers.has(e))return;const t=await this.loadAndDecodeAudio(e);t&&i.audioBuffers.set(e,t)}playAudio(e){const t=i.audioBuffers.get(e);if(t){const e=this.audioContext.createBufferSource();e.buffer=t,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}}playFeedbackAudios=(e=!1,...t)=>{t.length>0&&(this.audioQueue=t,this.playFetch(0,e))};playPromptAudio=e=>{if(this.promptAudioBuffer){const e=this.audioContext.createBufferSource();e.buffer=this.promptAudioBuffer,e.connect(this.audioContext.destination),this.audioSourcs.push(e),e.start()}};stopFeedbackAudio=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[]};stopAllAudios=()=>{this.sourceNode&&(this.sourceNode.stop(),this.sourceNode=null),this.audioQueue=[],this.audioSourcs.forEach((e=>{e.stop()})),this.audioSourcs=[]};playFetch=(e,t)=>{e>=this.audioQueue.length?this.stopFeedbackAudio():this.audioQueue[e]&&fetch(this.audioQueue[e]).then((e=>e.arrayBuffer())).then((a=>{this.audioContext?.decodeAudioData(a,(a=>{this.sourceNode=this.audioContext?.createBufferSource(),this.sourceNode.buffer=a,this.sourceNode.connect(this.audioContext?.destination),this.sourceNode.loop=t,this.sourceNode.onended=()=>this.handleAudioEnded(e,t),this.sourceNode.start()}))}))};handleAudioEnded=(e,t)=>{this.sourceNode&&(this.sourceNode.onended=null,this.sourceNode.stop(),this.sourceNode.disconnect(),this.sourceNode=null),this.playFetch(e+1,t)}}class x{static instance=null;static getAudioContext(){return x.instance||(x.instance=new(window.AudioContext||window.webkitAudioContext)),x.instance}}function s(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfe5e44=_0x2800;(function(_0x215495,_0x54db3f){var _0x15a0c1=_0x2800,_0x56d85f=_0x215495();while(!![]){try{var _0x8589f5=parseInt(_0x15a0c1(0x1f3))/0x1*(parseInt(_0x15a0c1(0x1bf))/0x2)+parseInt(_0x15a0c1(0x1ec))/0x3+-parseInt(_0x15a0c1(0x28b))/0x4+parseInt(_0x15a0c1(0x22b))/0x5*(-parseInt(_0x15a0c1(0x1a4))/0x6)+-parseInt(_0x15a0c1(0x1ad))/0x7+parseInt(_0x15a0c1(0x1e8))/0x8*(parseInt(_0x15a0c1(0x294))/0x9)+-parseInt(_0x15a0c1(0x20d))/0xa;if(_0x8589f5===_0x54db3f)break;else _0x56d85f['push'](_0x56d85f['shift']());}catch(_0x128f40){_0x56d85f['push'](_0x56d85f['shift']());}}}(_0x4842,0xe3eb8));var K=Object['create'],Q=Object[_0xfe5e44(0x1bd)],G=Object['getOwnPropertyDescriptor'],ee=Object['getOwnPropertyNames'],te=Object[_0xfe5e44(0x248)],ne=Object['prototype'][_0xfe5e44(0x24a)],re=(_0x5b75c6,_0x3483b6,_0x592bfb,_0x35bd8b)=>{var _0x34c8f6=_0xfe5e44;if(_0x3483b6&&typeof _0x3483b6==_0x34c8f6(0x259)||typeof _0x3483b6==_0x34c8f6(0x254)){for(let _0x15cfbc of ee(_0x3483b6))!ne['call'](_0x5b75c6,_0x15cfbc)&&_0x15cfbc!==_0x592bfb&&Q(_0x5b75c6,_0x15cfbc,{'get':()=>_0x3483b6[_0x15cfbc],'enumerable':!(_0x35bd8b=G(_0x3483b6,_0x15cfbc))||_0x35bd8b['enumerable']});}return _0x5b75c6;},V=(_0x83a491,_0x1c7fab,_0x333922)=>(_0x333922=_0x83a491!=null?K(te(_0x83a491)):{},re(_0x1c7fab||!_0x83a491||!_0x83a491[_0xfe5e44(0x250)]?Q(_0x333922,_0xfe5e44(0x25e),{'value':_0x83a491,'enumerable':!0x0}):_0x333922,_0x83a491)),Z=class{constructor(_0x3b8201,_0x2edd2b,_0x14c251,_0x21a374,_0x2d7409,_0x485d26){var _0x3273eb=_0xfe5e44,_0x22070f,_0x1cdd3b,_0x55f9de,_0xce468f;this[_0x3273eb(0x291)]=_0x3b8201,this[_0x3273eb(0x270)]=_0x2edd2b,this[_0x3273eb(0x262)]=_0x14c251,this[_0x3273eb(0x1bc)]=_0x21a374,this[_0x3273eb(0x264)]=_0x2d7409,this[_0x3273eb(0x27c)]=_0x485d26,this['_allowedToSend']=!0x0,this[_0x3273eb(0x1ab)]=!0x0,this[_0x3273eb(0x203)]=!0x1,this[_0x3273eb(0x1c5)]=!0x1,this[_0x3273eb(0x221)]=((_0x1cdd3b=(_0x22070f=_0x3b8201[_0x3273eb(0x206)])==null?void 0x0:_0x22070f[_0x3273eb(0x1cc)])==null?void 0x0:_0x1cdd3b[_0x3273eb(0x1c3)])===_0x3273eb(0x1fd),this['_inBrowser']=!((_0xce468f=(_0x55f9de=this[_0x3273eb(0x291)][_0x3273eb(0x206)])==null?void 0x0:_0x55f9de[_0x3273eb(0x26f)])!=null&&_0xce468f[_0x3273eb(0x28c)])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x3273eb(0x1a8)]=0x0,this[_0x3273eb(0x28f)]=0x14,this['_webSocketErrorDocsLink']=_0x3273eb(0x211),this[_0x3273eb(0x1ae)]=(this[_0x3273eb(0x23e)]?_0x3273eb(0x247):_0x3273eb(0x28a))+this[_0x3273eb(0x201)];}async[_0xfe5e44(0x272)](){var _0x2ec457=_0xfe5e44,_0x16b1f6,_0x46ae56;if(this[_0x2ec457(0x1d5)])return this[_0x2ec457(0x1d5)];let _0x420cd7;if(this['_inBrowser']||this[_0x2ec457(0x221)])_0x420cd7=this[_0x2ec457(0x291)]['WebSocket'];else{if((_0x16b1f6=this[_0x2ec457(0x291)][_0x2ec457(0x206)])!=null&&_0x16b1f6['_WebSocket'])_0x420cd7=(_0x46ae56=this[_0x2ec457(0x291)][_0x2ec457(0x206)])==null?void 0x0:_0x46ae56['_WebSocket'];else try{let _0x492511=await import(_0x2ec457(0x251));_0x420cd7=(await import((await import(_0x2ec457(0x245)))[_0x2ec457(0x1b3)](_0x492511['join'](this['nodeModules'],'ws/index.js'))[_0x2ec457(0x232)]()))[_0x2ec457(0x25e)];}catch{try{_0x420cd7=require(require(_0x2ec457(0x251))[_0x2ec457(0x23c)](this[_0x2ec457(0x1bc)],'ws'));}catch{throw new Error(_0x2ec457(0x27f));}}}return this[_0x2ec457(0x1d5)]=_0x420cd7,_0x420cd7;}['_connectToHostNow'](){var _0x311ae5=_0xfe5e44;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x311ae5(0x1c5)]=!0x0,this[_0x311ae5(0x1a8)]++,this[_0x311ae5(0x1e7)]=new Promise((_0x3f4e5c,_0x1b1d42)=>{var _0x1f6130=_0x311ae5;this['getWebSocketClass']()[_0x1f6130(0x1cf)](_0x1a8fc2=>{var _0x26657b=_0x1f6130;let _0x3f72a0=new _0x1a8fc2(_0x26657b(0x1c9)+(!this['_inBrowser']&&this[_0x26657b(0x264)]?_0x26657b(0x281):this[_0x26657b(0x270)])+':'+this[_0x26657b(0x262)]);_0x3f72a0[_0x26657b(0x274)]=()=>{var _0x5e4dcd=_0x26657b;this[_0x5e4dcd(0x1e2)]=!0x1,this[_0x5e4dcd(0x21d)](_0x3f72a0),this[_0x5e4dcd(0x24b)](),_0x1b1d42(new Error(_0x5e4dcd(0x20c)));},_0x3f72a0[_0x26657b(0x280)]=()=>{var _0x5da152=_0x26657b;this[_0x5da152(0x23e)]||_0x3f72a0[_0x5da152(0x1dd)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)](),_0x3f4e5c(_0x3f72a0);},_0x3f72a0[_0x26657b(0x1ea)]=()=>{var _0x382c92=_0x26657b;this[_0x382c92(0x1ab)]=!0x0,this[_0x382c92(0x21d)](_0x3f72a0),this[_0x382c92(0x24b)]();},_0x3f72a0[_0x26657b(0x1df)]=_0x11fcab=>{var _0x5fd04d=_0x26657b;try{if(!(_0x11fcab!=null&&_0x11fcab[_0x5fd04d(0x1b9)])||!this['eventReceivedCallback'])return;let _0x4ff655=JSON[_0x5fd04d(0x234)](_0x11fcab[_0x5fd04d(0x1b9)]);this[_0x5fd04d(0x27c)](_0x4ff655[_0x5fd04d(0x1b4)],_0x4ff655['args'],this['global'],this[_0x5fd04d(0x23e)]);}catch{}};})[_0x1f6130(0x1cf)](_0x3ec18f=>(this[_0x1f6130(0x203)]=!0x0,this[_0x1f6130(0x1c5)]=!0x1,this[_0x1f6130(0x1ab)]=!0x1,this['_allowedToSend']=!0x0,this[_0x1f6130(0x1a8)]=0x0,_0x3ec18f))[_0x1f6130(0x260)](_0x4d0842=>(this[_0x1f6130(0x203)]=!0x1,this[_0x1f6130(0x1c5)]=!0x1,console[_0x1f6130(0x1f2)](_0x1f6130(0x1ca)+this[_0x1f6130(0x201)]),_0x1b1d42(new Error(_0x1f6130(0x266)+(_0x4d0842&&_0x4d0842['message'])))));}));}[_0xfe5e44(0x21d)](_0x200506){var _0x3828d3=_0xfe5e44;this[_0x3828d3(0x203)]=!0x1,this[_0x3828d3(0x1c5)]=!0x1;try{_0x200506[_0x3828d3(0x1ea)]=null,_0x200506[_0x3828d3(0x274)]=null,_0x200506[_0x3828d3(0x280)]=null;}catch{}try{_0x200506[_0x3828d3(0x1e5)]<0x2&&_0x200506['close']();}catch{}}['_attemptToReconnectShortly'](){var _0x2c9e50=_0xfe5e44;clearTimeout(this[_0x2c9e50(0x240)]),!(this[_0x2c9e50(0x1a8)]>=this[_0x2c9e50(0x28f)])&&(this[_0x2c9e50(0x240)]=setTimeout(()=>{var _0x26eb71=_0x2c9e50,_0x52968d;this[_0x26eb71(0x203)]||this[_0x26eb71(0x1c5)]||(this[_0x26eb71(0x284)](),(_0x52968d=this[_0x26eb71(0x1e7)])==null||_0x52968d[_0x26eb71(0x260)](()=>this[_0x26eb71(0x24b)]()));},0x1f4),this[_0x2c9e50(0x240)][_0x2c9e50(0x1b7)]&&this[_0x2c9e50(0x240)]['unref']());}async[_0xfe5e44(0x26e)](_0x254553){var _0x10e206=_0xfe5e44;try{if(!this[_0x10e206(0x1e2)])return;this['_allowedToConnectOnSend']&&this[_0x10e206(0x284)](),(await this[_0x10e206(0x1e7)])[_0x10e206(0x26e)](JSON['stringify'](_0x254553));}catch(_0x4fb68d){console[_0x10e206(0x1f2)](this[_0x10e206(0x1ae)]+':\\x20'+(_0x4fb68d&&_0x4fb68d[_0x10e206(0x222)])),this[_0x10e206(0x1e2)]=!0x1,this['_attemptToReconnectShortly']();}}};function q(_0x363e8b,_0x58bc11,_0x5a57be,_0x3c20e5,_0x3cdf4f,_0x2eec54,_0x377b83,_0x1b0bff=ie){var _0xc8f00e=_0xfe5e44;let _0xe24ba0=_0x5a57be[_0xc8f00e(0x1e4)](',')['map'](_0x46f2cf=>{var _0x14d705=_0xc8f00e,_0xdaec49,_0x3c920c,_0x205786,_0x14ba10;try{if(!_0x363e8b['_console_ninja_session']){let _0x38ad4a=((_0x3c920c=(_0xdaec49=_0x363e8b['process'])==null?void 0x0:_0xdaec49['versions'])==null?void 0x0:_0x3c920c[_0x14d705(0x28c)])||((_0x14ba10=(_0x205786=_0x363e8b[_0x14d705(0x206)])==null?void 0x0:_0x205786[_0x14d705(0x1cc)])==null?void 0x0:_0x14ba10[_0x14d705(0x1c3)])===_0x14d705(0x1fd);(_0x3cdf4f===_0x14d705(0x237)||_0x3cdf4f===_0x14d705(0x200)||_0x3cdf4f===_0x14d705(0x1a6)||_0x3cdf4f===_0x14d705(0x233))&&(_0x3cdf4f+=_0x38ad4a?_0x14d705(0x1f9):_0x14d705(0x1ee)),_0x363e8b[_0x14d705(0x288)]={'id':+new Date(),'tool':_0x3cdf4f},_0x377b83&&_0x3cdf4f&&!_0x38ad4a&&console['log'](_0x14d705(0x1c6)+(_0x3cdf4f[_0x14d705(0x26d)](0x0)[_0x14d705(0x1c7)]()+_0x3cdf4f[_0x14d705(0x1a9)](0x1))+',',_0x14d705(0x252),_0x14d705(0x246));}let _0x51b6a1=new Z(_0x363e8b,_0x58bc11,_0x46f2cf,_0x3c20e5,_0x2eec54,_0x1b0bff);return _0x51b6a1[_0x14d705(0x26e)][_0x14d705(0x21f)](_0x51b6a1);}catch(_0xe14f48){return console[_0x14d705(0x1f2)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0xe14f48&&_0xe14f48[_0x14d705(0x222)]),()=>{};}});return _0x10f04c=>_0xe24ba0['forEach'](_0x53fdd6=>_0x53fdd6(_0x10f04c));}function ie(_0x1e3a4e,_0x26e9b1,_0x45eb31,_0x5dd34b){var _0xa75978=_0xfe5e44;_0x5dd34b&&_0x1e3a4e===_0xa75978(0x263)&&_0x45eb31['location']['reload']();}function _0x4842(){var _0x55a193=['onmessage','Symbol','_ninjaIgnoreNextError','_allowedToSend','allStrLength','split','readyState','_getOwnPropertySymbols','_ws','2382480MpSNUG','props','onclose','count','1720296nDiCbK','...','\\x20browser','_isUndefined','number','autoExpandMaxDepth','warn','1qLarGK','value','getOwnPropertySymbols','args','location','Set','\\x20server','_numberRegExp','get','_hasSymbolPropertyOnItsPath','edge','_addObjectProperty','performance','remix','_webSocketErrorDocsLink','_getOwnPropertyNames','_connected','push','set','process','_regExpToString','isArray','time','_setNodeLabel','test','logger\\x20websocket\\x20error','2427080OyrYQm','[object\\x20Map]','undefined','capped','https://tinyurl.com/37x8b79t','timeStamp','_propertyName','cappedProps','negativeInfinity','constructor','null','fromCharCode','hrtime','_objectToString','name',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'_disposeWebsocket','isExpressionToEvaluate','bind','_consoleNinjaAllowedToStart','_inNextEdge','message','positiveInfinity','concat','Number','_sortProps','console','type','pop','error','13205BQaGVp','autoExpand','elements','autoExpandPreviousObjects','_isPrimitiveType','log','_treeNodePropertiesBeforeFullValue','toString','angular','parse','[object\\x20BigInt]','_additionalMetadata','next.js','_treeNodePropertiesAfterFullValue','HTMLAllCollection','reduceLimits','parent','join','serialize','_inBrowser','_isNegativeZero','_reconnectTimeout','autoExpandLimit','[object\\x20Set]','[object\\x20Date]','1','url','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','getPrototypeOf','now','hasOwnProperty','_attemptToReconnectShortly','_console_ninja','length','Error','array','__es'+'Module','path','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_cleanNode','function','root_exp_id','getOwnPropertyDescriptor','map','forEach','object','cappedElements','Buffer','_property','index','default','autoExpandPropertyCount','catch','NEGATIVE_INFINITY','port','reload','dockerizedApp','current','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','funcName','strLength','bigint','match','stack','1.0.0','charAt','send','versions','host','_addLoadNode','getWebSocketClass','call','onerror','','_type','expressionsToEvaluate','stackTraceLimit','POSITIVE_INFINITY','disabledTrace','_undefined','eventReceivedCallback','disabledLog','replace','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','onopen','gateway.docker.internal','string','_isMap','_connectToHostNow','_HTMLAllCollection','1729498501336','_isSet','_console_ninja_session','getOwnPropertyNames','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','3799160JnHzpD','node','prototype','_setNodeId','_maxConnectAttemptCount','perf_hooks','global','_isPrimitiveWrapperType','String','54cKIlnc','endsWith','includes','hits','toLowerCase','trace','42SfmdiD','setter','astro','origin','_connectAttemptCount','substr','totalStrLength','_allowedToConnectOnSend','_p_length','9027438ugZkeV','_sendErrorMessage','_addFunctionsNode','_blacklistedProperty','elapsed','sort','pathToFileURL','method','_Symbol','noFunctions','unref','_addProperty','data','root_exp','_quotedRegExp','nodeModules','defineProperty','resolveGetters','2147774qrYQaz','_keyStrRegExp','_setNodeQueryPath','stringify','NEXT_RUNTIME','_capIfString','_connecting','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','toUpperCase','unknown','ws://','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_getOwnPropertyDescriptor','env','',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.363\\\\node_modules\",'then','_setNodePermissions','depth','coverage','level','_p_name','_WebSocketClass','sortProps','_p_','date','symbol','_processTreeNodeResult','Map','slice','_socket','_isArray'];_0x4842=function(){return _0x55a193;};return _0x4842();}function B(_0x2e36ea){var _0x5eab18=_0xfe5e44,_0x57ceac,_0x1cd3ff;let _0x174e43=function(_0x2d5214,_0x4d7e82){return _0x4d7e82-_0x2d5214;},_0x355dd9;if(_0x2e36ea[_0x5eab18(0x1ff)])_0x355dd9=function(){return _0x2e36ea['performance']['now']();};else{if(_0x2e36ea[_0x5eab18(0x206)]&&_0x2e36ea[_0x5eab18(0x206)][_0x5eab18(0x219)]&&((_0x1cd3ff=(_0x57ceac=_0x2e36ea['process'])==null?void 0x0:_0x57ceac[_0x5eab18(0x1cc)])==null?void 0x0:_0x1cd3ff[_0x5eab18(0x1c3)])!==_0x5eab18(0x1fd))_0x355dd9=function(){var _0x2a5b23=_0x5eab18;return _0x2e36ea[_0x2a5b23(0x206)]['hrtime']();},_0x174e43=function(_0x37a19c,_0x13b965){return 0x3e8*(_0x13b965[0x0]-_0x37a19c[0x0])+(_0x13b965[0x1]-_0x37a19c[0x1])/0xf4240;};else try{let {performance:_0x2474a0}=require(_0x5eab18(0x290));_0x355dd9=function(){var _0x50de9c=_0x5eab18;return _0x2474a0[_0x50de9c(0x249)]();};}catch{_0x355dd9=function(){return+new Date();};}}return{'elapsed':_0x174e43,'timeStamp':_0x355dd9,'now':()=>Date['now']()};}function _0x2800(_0x20c316,_0x27e44d){var _0x4842d5=_0x4842();return _0x2800=function(_0x280079,_0x2b136d){_0x280079=_0x280079-0x1a1;var _0xf6dce9=_0x4842d5[_0x280079];return _0xf6dce9;},_0x2800(_0x20c316,_0x27e44d);}function H(_0x5f046d,_0xbfea67,_0x4c9847){var _0x42332c=_0xfe5e44,_0x4536df,_0x3e591b,_0x1c02fd,_0x5661b7,_0xda7882;if(_0x5f046d['_consoleNinjaAllowedToStart']!==void 0x0)return _0x5f046d[_0x42332c(0x220)];let _0x152a42=((_0x3e591b=(_0x4536df=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x4536df['versions'])==null?void 0x0:_0x3e591b[_0x42332c(0x28c)])||((_0x5661b7=(_0x1c02fd=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x1c02fd[_0x42332c(0x1cc)])==null?void 0x0:_0x5661b7[_0x42332c(0x1c3)])===_0x42332c(0x1fd);function _0x412595(_0x5027d4){var _0x5782b1=_0x42332c;if(_0x5027d4['startsWith']('/')&&_0x5027d4[_0x5782b1(0x295)]('/')){let _0x558f03=new RegExp(_0x5027d4[_0x5782b1(0x1dc)](0x1,-0x1));return _0x3d0d65=>_0x558f03['test'](_0x3d0d65);}else{if(_0x5027d4['includes']('*')||_0x5027d4[_0x5782b1(0x296)]('?')){let _0x51bebf=new RegExp('^'+_0x5027d4[_0x5782b1(0x27e)](/\\./g,String[_0x5782b1(0x218)](0x5c)+'.')[_0x5782b1(0x27e)](/\\*/g,'.*')[_0x5782b1(0x27e)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x24f699=>_0x51bebf[_0x5782b1(0x20b)](_0x24f699);}else return _0x207603=>_0x207603===_0x5027d4;}}let _0x275cea=_0xbfea67[_0x42332c(0x257)](_0x412595);return _0x5f046d[_0x42332c(0x220)]=_0x152a42||!_0xbfea67,!_0x5f046d[_0x42332c(0x220)]&&((_0xda7882=_0x5f046d[_0x42332c(0x1f7)])==null?void 0x0:_0xda7882['hostname'])&&(_0x5f046d[_0x42332c(0x220)]=_0x275cea['some'](_0x55b435=>_0x55b435(_0x5f046d['location']['hostname']))),_0x5f046d[_0x42332c(0x220)];}function X(_0x2f1a70,_0x5be072,_0x39be01,_0x5a5745){var _0x1ae9de=_0xfe5e44;_0x2f1a70=_0x2f1a70,_0x5be072=_0x5be072,_0x39be01=_0x39be01,_0x5a5745=_0x5a5745;let _0x45ad24=B(_0x2f1a70),_0x34913b=_0x45ad24[_0x1ae9de(0x1b1)],_0x5f4254=_0x45ad24[_0x1ae9de(0x212)];class _0x39aee3{constructor(){var _0x209462=_0x1ae9de;this[_0x209462(0x1c0)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x209462(0x1fa)]=/^(0|[1-9][0-9]*)$/,this[_0x209462(0x1bb)]=/'([^\\\\']|\\\\')*'/,this[_0x209462(0x27b)]=_0x2f1a70[_0x209462(0x20f)],this['_HTMLAllCollection']=_0x2f1a70[_0x209462(0x239)],this[_0x209462(0x1cb)]=Object[_0x209462(0x256)],this[_0x209462(0x202)]=Object[_0x209462(0x289)],this[_0x209462(0x1b5)]=_0x2f1a70[_0x209462(0x1e0)],this['_regExpToString']=RegExp['prototype'][_0x209462(0x232)],this['_dateToString']=Date[_0x209462(0x28d)][_0x209462(0x232)];}[_0x1ae9de(0x23d)](_0x24b7f3,_0x296f73,_0x46653d,_0x5bf9fd){var _0xda21b4=_0x1ae9de,_0x2a2fd0=this,_0x4dd6b0=_0x46653d[_0xda21b4(0x22c)];function _0x131eb6(_0x24c1df,_0x28bf57,_0x408d48){var _0x479131=_0xda21b4;_0x28bf57[_0x479131(0x228)]='unknown',_0x28bf57['error']=_0x24c1df[_0x479131(0x222)],_0x1f0d56=_0x408d48[_0x479131(0x28c)][_0x479131(0x265)],_0x408d48[_0x479131(0x28c)][_0x479131(0x265)]=_0x28bf57,_0x2a2fd0[_0x479131(0x231)](_0x28bf57,_0x408d48);}try{_0x46653d['level']++,_0x46653d['autoExpand']&&_0x46653d['autoExpandPreviousObjects'][_0xda21b4(0x204)](_0x296f73);var _0x1e2094,_0x16aefa,_0x542566,_0x42e28b,_0xce7f95=[],_0xe6f1c3=[],_0xf17c29,_0x207db8=this[_0xda21b4(0x276)](_0x296f73),_0x277de6=_0x207db8==='array',_0x5c426c=!0x1,_0x66fe1b=_0x207db8===_0xda21b4(0x254),_0xca6e64=this[_0xda21b4(0x22f)](_0x207db8),_0x2c405a=this[_0xda21b4(0x292)](_0x207db8),_0x4f5d62=_0xca6e64||_0x2c405a,_0x6961d3={},_0x1bc657=0x0,_0x201335=!0x1,_0x1f0d56,_0x46ae26=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x46653d[_0xda21b4(0x1d1)]){if(_0x277de6){if(_0x16aefa=_0x296f73[_0xda21b4(0x24d)],_0x16aefa>_0x46653d[_0xda21b4(0x22d)]){for(_0x542566=0x0,_0x42e28b=_0x46653d[_0xda21b4(0x22d)],_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0['_addProperty'](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));_0x24b7f3[_0xda21b4(0x25a)]=!0x0;}else{for(_0x542566=0x0,_0x42e28b=_0x16aefa,_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1b8)](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));}_0x46653d['autoExpandPropertyCount']+=_0xe6f1c3[_0xda21b4(0x24d)];}if(!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&!_0xca6e64&&_0x207db8!==_0xda21b4(0x293)&&_0x207db8!==_0xda21b4(0x25b)&&_0x207db8!==_0xda21b4(0x269)){var _0x56b380=_0x5bf9fd[_0xda21b4(0x1e9)]||_0x46653d[_0xda21b4(0x1e9)];if(this['_isSet'](_0x296f73)?(_0x1e2094=0x0,_0x296f73[_0xda21b4(0x258)](function(_0x365782){var _0x20415e=_0xda21b4;if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d['isExpressionToEvaluate']&&_0x46653d['autoExpand']&&_0x46653d[_0x20415e(0x25f)]>_0x46653d[_0x20415e(0x241)]){_0x201335=!0x0;return;}_0xe6f1c3['push'](_0x2a2fd0[_0x20415e(0x1b8)](_0xce7f95,_0x296f73,'Set',_0x1e2094++,_0x46653d,function(_0x464074){return function(){return _0x464074;};}(_0x365782)));})):this[_0xda21b4(0x283)](_0x296f73)&&_0x296f73[_0xda21b4(0x258)](function(_0x378430,_0x28b1c6){var _0x29ac38=_0xda21b4;if(_0x1bc657++,_0x46653d[_0x29ac38(0x25f)]++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d[_0x29ac38(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0x29ac38(0x25f)]>_0x46653d[_0x29ac38(0x241)]){_0x201335=!0x0;return;}var _0x39ddf3=_0x28b1c6['toString']();_0x39ddf3[_0x29ac38(0x24d)]>0x64&&(_0x39ddf3=_0x39ddf3[_0x29ac38(0x1dc)](0x0,0x64)+_0x29ac38(0x1ed)),_0xe6f1c3[_0x29ac38(0x204)](_0x2a2fd0[_0x29ac38(0x1b8)](_0xce7f95,_0x296f73,_0x29ac38(0x1db),_0x39ddf3,_0x46653d,function(_0x46bd7a){return function(){return _0x46bd7a;};}(_0x378430)));}),!_0x5c426c){try{for(_0xf17c29 in _0x296f73)if(!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29))&&!this['_blacklistedProperty'](_0x296f73,_0xf17c29,_0x46653d)){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d[_0xda21b4(0x241)]){_0x201335=!0x0;break;}_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}catch{}if(_0x6961d3[_0xda21b4(0x1ac)]=!0x0,_0x66fe1b&&(_0x6961d3[_0xda21b4(0x1d4)]=!0x0),!_0x201335){var _0x2658ba=[][_0xda21b4(0x224)](this[_0xda21b4(0x202)](_0x296f73))[_0xda21b4(0x224)](this[_0xda21b4(0x1e6)](_0x296f73));for(_0x1e2094=0x0,_0x16aefa=_0x2658ba[_0xda21b4(0x24d)];_0x1e2094<_0x16aefa;_0x1e2094++)if(_0xf17c29=_0x2658ba[_0x1e2094],!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29[_0xda21b4(0x232)]()))&&!this[_0xda21b4(0x1b0)](_0x296f73,_0xf17c29,_0x46653d)&&!_0x6961d3[_0xda21b4(0x1d7)+_0xf17c29[_0xda21b4(0x232)]()]){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d['autoExpandLimit']){_0x201335=!0x0;break;}_0xe6f1c3['push'](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}}}}if(_0x24b7f3[_0xda21b4(0x228)]=_0x207db8,_0x4f5d62?(_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73['valueOf'](),this['_capIfString'](_0x207db8,_0x24b7f3,_0x46653d,_0x5bf9fd)):_0x207db8==='date'?_0x24b7f3[_0xda21b4(0x1f4)]=this['_dateToString'][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x269)?_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73[_0xda21b4(0x232)]():_0x207db8==='RegExp'?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x207)][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x1d9)&&this[_0xda21b4(0x1b5)]?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x1b5)][_0xda21b4(0x28d)][_0xda21b4(0x232)][_0xda21b4(0x273)](_0x296f73):!_0x46653d[_0xda21b4(0x1d1)]&&!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&(delete _0x24b7f3[_0xda21b4(0x1f4)],_0x24b7f3[_0xda21b4(0x210)]=!0x0),_0x201335&&(_0x24b7f3[_0xda21b4(0x214)]=!0x0),_0x1f0d56=_0x46653d['node'][_0xda21b4(0x265)],_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x24b7f3,this[_0xda21b4(0x231)](_0x24b7f3,_0x46653d),_0xe6f1c3[_0xda21b4(0x24d)]){for(_0x1e2094=0x0,_0x16aefa=_0xe6f1c3['length'];_0x1e2094<_0x16aefa;_0x1e2094++)_0xe6f1c3[_0x1e2094](_0x1e2094);}_0xce7f95[_0xda21b4(0x24d)]&&(_0x24b7f3[_0xda21b4(0x1e9)]=_0xce7f95);}catch(_0x38ef6d){_0x131eb6(_0x38ef6d,_0x24b7f3,_0x46653d);}return this[_0xda21b4(0x236)](_0x296f73,_0x24b7f3),this[_0xda21b4(0x238)](_0x24b7f3,_0x46653d),_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x1f0d56,_0x46653d[_0xda21b4(0x1d3)]--,_0x46653d[_0xda21b4(0x22c)]=_0x4dd6b0,_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x22e)][_0xda21b4(0x229)](),_0x24b7f3;}[_0x1ae9de(0x1e6)](_0xb74ebd){var _0x1753d6=_0x1ae9de;return Object[_0x1753d6(0x1f5)]?Object[_0x1753d6(0x1f5)](_0xb74ebd):[];}[_0x1ae9de(0x287)](_0x28d2ef){var _0x33e17f=_0x1ae9de;return!!(_0x28d2ef&&_0x2f1a70[_0x33e17f(0x1f8)]&&this[_0x33e17f(0x21a)](_0x28d2ef)===_0x33e17f(0x242)&&_0x28d2ef[_0x33e17f(0x258)]);}[_0x1ae9de(0x1b0)](_0x329b1b,_0x42292a,_0x37ab2c){var _0x453ac9=_0x1ae9de;return _0x37ab2c[_0x453ac9(0x1b6)]?typeof _0x329b1b[_0x42292a]=='function':!0x1;}[_0x1ae9de(0x276)](_0x22f058){var _0x241b7a=_0x1ae9de,_0x3d4e65='';return _0x3d4e65=typeof _0x22f058,_0x3d4e65==='object'?this['_objectToString'](_0x22f058)==='[object\\x20Array]'?_0x3d4e65='array':this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x243)?_0x3d4e65=_0x241b7a(0x1d8):this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x235)?_0x3d4e65=_0x241b7a(0x269):_0x22f058===null?_0x3d4e65=_0x241b7a(0x217):_0x22f058[_0x241b7a(0x216)]&&(_0x3d4e65=_0x22f058[_0x241b7a(0x216)][_0x241b7a(0x21b)]||_0x3d4e65):_0x3d4e65===_0x241b7a(0x20f)&&this['_HTMLAllCollection']&&_0x22f058 instanceof this[_0x241b7a(0x285)]&&(_0x3d4e65=_0x241b7a(0x239)),_0x3d4e65;}[_0x1ae9de(0x21a)](_0x1de872){var _0x3570e9=_0x1ae9de;return Object[_0x3570e9(0x28d)][_0x3570e9(0x232)][_0x3570e9(0x273)](_0x1de872);}[_0x1ae9de(0x22f)](_0x42b981){var _0x1b4389=_0x1ae9de;return _0x42b981==='boolean'||_0x42b981==='string'||_0x42b981===_0x1b4389(0x1f0);}['_isPrimitiveWrapperType'](_0x57d12a){var _0x51fa40=_0x1ae9de;return _0x57d12a==='Boolean'||_0x57d12a==='String'||_0x57d12a===_0x51fa40(0x225);}[_0x1ae9de(0x1b8)](_0x3de90e,_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85){var _0x279d30=this;return function(_0x56c688){var _0x31cb49=_0x2800,_0x64fca0=_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x265)],_0x189cd8=_0x5bf061['node'][_0x31cb49(0x25d)],_0x5ea25f=_0x5bf061[_0x31cb49(0x28c)]['parent'];_0x5bf061['node'][_0x31cb49(0x23b)]=_0x64fca0,_0x5bf061['node'][_0x31cb49(0x25d)]=typeof _0x22b26e==_0x31cb49(0x1f0)?_0x22b26e:_0x56c688,_0x3de90e[_0x31cb49(0x204)](_0x279d30[_0x31cb49(0x25c)](_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85)),_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x23b)]=_0x5ea25f,_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x25d)]=_0x189cd8;};}['_addObjectProperty'](_0x8f1714,_0x46c19e,_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881){var _0x557444=_0x1ae9de,_0x58766c=this;return _0x46c19e[_0x557444(0x1d7)+_0x3c5712['toString']()]=!0x0,function(_0x494a74){var _0x3c739b=_0x557444,_0x38c099=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x265)],_0xea8865=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)],_0x1da583=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)];_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x38c099,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0x494a74,_0x8f1714[_0x3c739b(0x204)](_0x58766c[_0x3c739b(0x25c)](_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881)),_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x1da583,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0xea8865;};}[_0x1ae9de(0x25c)](_0xa26af7,_0xd1783c,_0x4c3410,_0xa3bf2,_0x9fad98){var _0xa63a4b=_0x1ae9de,_0x36eca9=this;_0x9fad98||(_0x9fad98=function(_0x4958a8,_0x41ca28){return _0x4958a8[_0x41ca28];});var _0x29cbb9=_0x4c3410[_0xa63a4b(0x232)](),_0x5cfb46=_0xa3bf2[_0xa63a4b(0x277)]||{},_0x445183=_0xa3bf2[_0xa63a4b(0x1d1)],_0x316f50=_0xa3bf2['isExpressionToEvaluate'];try{var _0x141d25=this['_isMap'](_0xa26af7),_0xfd5f67=_0x29cbb9;_0x141d25&&_0xfd5f67[0x0]==='\\x27'&&(_0xfd5f67=_0xfd5f67[_0xa63a4b(0x1a9)](0x1,_0xfd5f67[_0xa63a4b(0x24d)]-0x2));var _0x4fdb4d=_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46[_0xa63a4b(0x1d7)+_0xfd5f67];_0x4fdb4d&&(_0xa3bf2[_0xa63a4b(0x1d1)]=_0xa3bf2[_0xa63a4b(0x1d1)]+0x1),_0xa3bf2[_0xa63a4b(0x21e)]=!!_0x4fdb4d;var _0x475157=typeof _0x4c3410=='symbol',_0x29d85c={'name':_0x475157||_0x141d25?_0x29cbb9:this['_propertyName'](_0x29cbb9)};if(_0x475157&&(_0x29d85c[_0xa63a4b(0x1d9)]=!0x0),!(_0xd1783c===_0xa63a4b(0x24f)||_0xd1783c===_0xa63a4b(0x24e))){var _0x260b73=this[_0xa63a4b(0x1cb)](_0xa26af7,_0x4c3410);if(_0x260b73&&(_0x260b73[_0xa63a4b(0x205)]&&(_0x29d85c[_0xa63a4b(0x1a5)]=!0x0),_0x260b73[_0xa63a4b(0x1fb)]&&!_0x4fdb4d&&!_0xa3bf2[_0xa63a4b(0x1be)]))return _0x29d85c['getter']=!0x0,this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x194fa5;try{_0x194fa5=_0x9fad98(_0xa26af7,_0x4c3410);}catch(_0x2c3142){return _0x29d85c={'name':_0x29cbb9,'type':_0xa63a4b(0x1c8),'error':_0x2c3142[_0xa63a4b(0x222)]},this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x50852a=this[_0xa63a4b(0x276)](_0x194fa5),_0x3ab79e=this[_0xa63a4b(0x22f)](_0x50852a);if(_0x29d85c[_0xa63a4b(0x228)]=_0x50852a,_0x3ab79e)this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x30a33f=_0xa63a4b;_0x29d85c[_0x30a33f(0x1f4)]=_0x194fa5['valueOf'](),!_0x4fdb4d&&_0x36eca9[_0x30a33f(0x1c4)](_0x50852a,_0x29d85c,_0xa3bf2,{});});else{var _0x2eb8d1=_0xa3bf2[_0xa63a4b(0x22c)]&&_0xa3bf2[_0xa63a4b(0x1d3)]<_0xa3bf2['autoExpandMaxDepth']&&_0xa3bf2[_0xa63a4b(0x22e)]['indexOf'](_0x194fa5)<0x0&&_0x50852a!=='function'&&_0xa3bf2[_0xa63a4b(0x25f)]<_0xa3bf2['autoExpandLimit'];_0x2eb8d1||_0xa3bf2[_0xa63a4b(0x1d3)]<_0x445183||_0x4fdb4d?(this['serialize'](_0x29d85c,_0x194fa5,_0xa3bf2,_0x4fdb4d||{}),this[_0xa63a4b(0x236)](_0x194fa5,_0x29d85c)):this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x1ac2f4=_0xa63a4b;_0x50852a===_0x1ac2f4(0x217)||_0x50852a==='undefined'||(delete _0x29d85c['value'],_0x29d85c[_0x1ac2f4(0x210)]=!0x0);});}return _0x29d85c;}finally{_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46,_0xa3bf2['depth']=_0x445183,_0xa3bf2[_0xa63a4b(0x21e)]=_0x316f50;}}['_capIfString'](_0x15a619,_0x2e9551,_0x2d0dc7,_0x3aa61d){var _0x1ccfd8=_0x1ae9de,_0x14e5ce=_0x3aa61d[_0x1ccfd8(0x268)]||_0x2d0dc7[_0x1ccfd8(0x268)];if((_0x15a619===_0x1ccfd8(0x282)||_0x15a619===_0x1ccfd8(0x293))&&_0x2e9551['value']){let _0x381743=_0x2e9551[_0x1ccfd8(0x1f4)]['length'];_0x2d0dc7['allStrLength']+=_0x381743,_0x2d0dc7['allStrLength']>_0x2d0dc7['totalStrLength']?(_0x2e9551[_0x1ccfd8(0x210)]='',delete _0x2e9551[_0x1ccfd8(0x1f4)]):_0x381743>_0x14e5ce&&(_0x2e9551[_0x1ccfd8(0x210)]=_0x2e9551[_0x1ccfd8(0x1f4)]['substr'](0x0,_0x14e5ce),delete _0x2e9551['value']);}}[_0x1ae9de(0x283)](_0x11ab3e){var _0x455bcd=_0x1ae9de;return!!(_0x11ab3e&&_0x2f1a70['Map']&&this[_0x455bcd(0x21a)](_0x11ab3e)===_0x455bcd(0x20e)&&_0x11ab3e[_0x455bcd(0x258)]);}[_0x1ae9de(0x213)](_0x59761d){var _0x205d94=_0x1ae9de;if(_0x59761d[_0x205d94(0x26a)](/^\\d+$/))return _0x59761d;var _0x283bad;try{_0x283bad=JSON[_0x205d94(0x1c2)](''+_0x59761d);}catch{_0x283bad='\\x22'+this[_0x205d94(0x21a)](_0x59761d)+'\\x22';}return _0x283bad['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x283bad=_0x283bad[_0x205d94(0x1a9)](0x1,_0x283bad[_0x205d94(0x24d)]-0x2):_0x283bad=_0x283bad[_0x205d94(0x27e)](/'/g,'\\x5c\\x27')[_0x205d94(0x27e)](/\\\\\"/g,'\\x22')[_0x205d94(0x27e)](/(^\"|\"$)/g,'\\x27'),_0x283bad;}[_0x1ae9de(0x1da)](_0x55bb11,_0x1b3795,_0x48f261,_0x3e21aa){var _0x571adc=_0x1ae9de;this[_0x571adc(0x231)](_0x55bb11,_0x1b3795),_0x3e21aa&&_0x3e21aa(),this['_additionalMetadata'](_0x48f261,_0x55bb11),this[_0x571adc(0x238)](_0x55bb11,_0x1b3795);}[_0x1ae9de(0x231)](_0xe082ed,_0x50b700){var _0x489d9f=_0x1ae9de;this['_setNodeId'](_0xe082ed,_0x50b700),this[_0x489d9f(0x1c1)](_0xe082ed,_0x50b700),this['_setNodeExpressionPath'](_0xe082ed,_0x50b700),this['_setNodePermissions'](_0xe082ed,_0x50b700);}['_setNodeId'](_0x56e200,_0x453198){}['_setNodeQueryPath'](_0x40a95f,_0x1f617a){}[_0x1ae9de(0x20a)](_0x295c6a,_0x297bb4){}[_0x1ae9de(0x1ef)](_0x3f6925){return _0x3f6925===this['_undefined'];}[_0x1ae9de(0x238)](_0x215840,_0x2292fd){var _0x544c37=_0x1ae9de;this[_0x544c37(0x20a)](_0x215840,_0x2292fd),this['_setNodeExpandableState'](_0x215840),_0x2292fd[_0x544c37(0x1d6)]&&this['_sortProps'](_0x215840),this[_0x544c37(0x1af)](_0x215840,_0x2292fd),this[_0x544c37(0x271)](_0x215840,_0x2292fd),this[_0x544c37(0x253)](_0x215840);}[_0x1ae9de(0x236)](_0x90e37d,_0x2905ac){var _0x245bf4=_0x1ae9de;let _0x404a53;try{_0x2f1a70[_0x245bf4(0x227)]&&(_0x404a53=_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)],_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)]=function(){}),_0x90e37d&&typeof _0x90e37d[_0x245bf4(0x24d)]==_0x245bf4(0x1f0)&&(_0x2905ac[_0x245bf4(0x24d)]=_0x90e37d[_0x245bf4(0x24d)]);}catch{}finally{_0x404a53&&(_0x2f1a70['console'][_0x245bf4(0x22a)]=_0x404a53);}if(_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x1f0)||_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x225)){if(isNaN(_0x2905ac[_0x245bf4(0x1f4)]))_0x2905ac['nan']=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];else switch(_0x2905ac[_0x245bf4(0x1f4)]){case Number[_0x245bf4(0x279)]:_0x2905ac[_0x245bf4(0x223)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case Number[_0x245bf4(0x261)]:_0x2905ac[_0x245bf4(0x215)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case 0x0:this['_isNegativeZero'](_0x2905ac['value'])&&(_0x2905ac['negativeZero']=!0x0);break;}}else _0x2905ac['type']==='function'&&typeof _0x90e37d[_0x245bf4(0x21b)]==_0x245bf4(0x282)&&_0x90e37d[_0x245bf4(0x21b)]&&_0x2905ac['name']&&_0x90e37d[_0x245bf4(0x21b)]!==_0x2905ac[_0x245bf4(0x21b)]&&(_0x2905ac[_0x245bf4(0x267)]=_0x90e37d['name']);}[_0x1ae9de(0x23f)](_0x3603f9){return 0x1/_0x3603f9===Number['NEGATIVE_INFINITY'];}[_0x1ae9de(0x226)](_0x91135f){var _0x27bcc9=_0x1ae9de;!_0x91135f['props']||!_0x91135f['props'][_0x27bcc9(0x24d)]||_0x91135f[_0x27bcc9(0x228)]==='array'||_0x91135f[_0x27bcc9(0x228)]==='Map'||_0x91135f[_0x27bcc9(0x228)]===_0x27bcc9(0x1f8)||_0x91135f['props'][_0x27bcc9(0x1b2)](function(_0x2a2cdb,_0x49ee4b){var _0x5e76b3=_0x27bcc9,_0x19063e=_0x2a2cdb[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)](),_0x446003=_0x49ee4b[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)]();return _0x19063e<_0x446003?-0x1:_0x19063e>_0x446003?0x1:0x0;});}['_addFunctionsNode'](_0x2e8e4d,_0x199c30){var _0x3d3aa0=_0x1ae9de;if(!(_0x199c30[_0x3d3aa0(0x1b6)]||!_0x2e8e4d[_0x3d3aa0(0x1e9)]||!_0x2e8e4d['props']['length'])){for(var _0x435133=[],_0x2531e7=[],_0x4b5a61=0x0,_0x36d28b=_0x2e8e4d[_0x3d3aa0(0x1e9)]['length'];_0x4b5a61<_0x36d28b;_0x4b5a61++){var _0x10d795=_0x2e8e4d['props'][_0x4b5a61];_0x10d795[_0x3d3aa0(0x228)]===_0x3d3aa0(0x254)?_0x435133[_0x3d3aa0(0x204)](_0x10d795):_0x2531e7[_0x3d3aa0(0x204)](_0x10d795);}if(!(!_0x2531e7[_0x3d3aa0(0x24d)]||_0x435133['length']<=0x1)){_0x2e8e4d['props']=_0x2531e7;var _0x14dec4={'functionsNode':!0x0,'props':_0x435133};this[_0x3d3aa0(0x28e)](_0x14dec4,_0x199c30),this[_0x3d3aa0(0x20a)](_0x14dec4,_0x199c30),this['_setNodeExpandableState'](_0x14dec4),this['_setNodePermissions'](_0x14dec4,_0x199c30),_0x14dec4['id']+='\\x20f',_0x2e8e4d['props']['unshift'](_0x14dec4);}}}['_addLoadNode'](_0x4a8f7a,_0x346db0){}['_setNodeExpandableState'](_0x1c6fd1){}[_0x1ae9de(0x1de)](_0x1211e9){var _0x3903b5=_0x1ae9de;return Array[_0x3903b5(0x208)](_0x1211e9)||typeof _0x1211e9=='object'&&this[_0x3903b5(0x21a)](_0x1211e9)==='[object\\x20Array]';}[_0x1ae9de(0x1d0)](_0x311e8c,_0x69f8f0){}[_0x1ae9de(0x253)](_0x1fb5ad){var _0x4e516a=_0x1ae9de;delete _0x1fb5ad[_0x4e516a(0x1fc)],delete _0x1fb5ad['_hasSetOnItsPath'],delete _0x1fb5ad['_hasMapOnItsPath'];}['_setNodeExpressionPath'](_0x1f43f0,_0x5dc18c){}}let _0x44e097=new _0x39aee3(),_0x555933={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x5ef4bb={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x47aee0(_0x5f519b,_0x36e1c2,_0x38a5b2,_0x245a33,_0x33842e,_0x47f99d){var _0x1b6dc9=_0x1ae9de;let _0x4e9097,_0x2d5f08;try{_0x2d5f08=_0x5f4254(),_0x4e9097=_0x39be01[_0x36e1c2],!_0x4e9097||_0x2d5f08-_0x4e9097['ts']>0x1f4&&_0x4e9097[_0x1b6dc9(0x1eb)]&&_0x4e9097[_0x1b6dc9(0x209)]/_0x4e9097[_0x1b6dc9(0x1eb)]<0x64?(_0x39be01[_0x36e1c2]=_0x4e9097={'count':0x0,'time':0x0,'ts':_0x2d5f08},_0x39be01[_0x1b6dc9(0x1a1)]={}):_0x2d5f08-_0x39be01[_0x1b6dc9(0x1a1)]['ts']>0x32&&_0x39be01[_0x1b6dc9(0x1a1)]['count']&&_0x39be01[_0x1b6dc9(0x1a1)]['time']/_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x1eb)]<0x64&&(_0x39be01[_0x1b6dc9(0x1a1)]={});let _0x321c5e=[],_0x103871=_0x4e9097['reduceLimits']||_0x39be01[_0x1b6dc9(0x1a1)]['reduceLimits']?_0x5ef4bb:_0x555933,_0x1e4aec=_0x11f00b=>{var _0x1d93c3=_0x1b6dc9;let _0x3970c5={};return _0x3970c5['props']=_0x11f00b[_0x1d93c3(0x1e9)],_0x3970c5[_0x1d93c3(0x22d)]=_0x11f00b[_0x1d93c3(0x22d)],_0x3970c5[_0x1d93c3(0x268)]=_0x11f00b[_0x1d93c3(0x268)],_0x3970c5[_0x1d93c3(0x1aa)]=_0x11f00b[_0x1d93c3(0x1aa)],_0x3970c5[_0x1d93c3(0x241)]=_0x11f00b['autoExpandLimit'],_0x3970c5[_0x1d93c3(0x1f1)]=_0x11f00b['autoExpandMaxDepth'],_0x3970c5[_0x1d93c3(0x1d6)]=!0x1,_0x3970c5['noFunctions']=!_0x5be072,_0x3970c5[_0x1d93c3(0x1d1)]=0x1,_0x3970c5[_0x1d93c3(0x1d3)]=0x0,_0x3970c5['expId']=_0x1d93c3(0x255),_0x3970c5['rootExpression']=_0x1d93c3(0x1ba),_0x3970c5[_0x1d93c3(0x22c)]=!0x0,_0x3970c5[_0x1d93c3(0x22e)]=[],_0x3970c5['autoExpandPropertyCount']=0x0,_0x3970c5[_0x1d93c3(0x1be)]=!0x0,_0x3970c5[_0x1d93c3(0x1e3)]=0x0,_0x3970c5[_0x1d93c3(0x28c)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3970c5;};for(var _0x4e066e=0x0;_0x4e066e<_0x33842e[_0x1b6dc9(0x24d)];_0x4e066e++)_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'timeNode':_0x5f519b===_0x1b6dc9(0x209)||void 0x0},_0x33842e[_0x4e066e],_0x1e4aec(_0x103871),{}));if(_0x5f519b===_0x1b6dc9(0x1a3)||_0x5f519b===_0x1b6dc9(0x22a)){let _0x4223a0=Error['stackTraceLimit'];try{Error[_0x1b6dc9(0x278)]=0x1/0x0,_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'stackNode':!0x0},new Error()[_0x1b6dc9(0x26b)],_0x1e4aec(_0x103871),{'strLength':0x1/0x0}));}finally{Error[_0x1b6dc9(0x278)]=_0x4223a0;}}return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':_0x321c5e,'id':_0x36e1c2,'context':_0x47f99d}]};}catch(_0x5b28ee){return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':[{'type':'unknown','error':_0x5b28ee&&_0x5b28ee[_0x1b6dc9(0x222)]}],'id':_0x36e1c2,'context':_0x47f99d}]};}finally{try{if(_0x4e9097&&_0x2d5f08){let _0x1d65c6=_0x5f4254();_0x4e9097['count']++,_0x4e9097[_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x4e9097['ts']=_0x1d65c6,_0x39be01[_0x1b6dc9(0x1a1)]['count']++,_0x39be01['hits'][_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x39be01['hits']['ts']=_0x1d65c6,(_0x4e9097[_0x1b6dc9(0x1eb)]>0x32||_0x4e9097[_0x1b6dc9(0x209)]>0x64)&&(_0x4e9097['reduceLimits']=!0x0),(_0x39be01['hits']['count']>0x3e8||_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x209)]>0x12c)&&(_0x39be01['hits'][_0x1b6dc9(0x23a)]=!0x0);}}catch{}}}return _0x47aee0;}((_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x2de19f,_0x1e302a,_0x363b8d,_0xa0a303,_0x5e55f1,_0x306ab3)=>{var _0x313444=_0xfe5e44;if(_0x2abb00[_0x313444(0x24c)])return _0x2abb00[_0x313444(0x24c)];if(!H(_0x2abb00,_0x363b8d,_0x1722a1))return _0x2abb00[_0x313444(0x24c)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x2abb00[_0x313444(0x24c)];let _0x3b7d8d=B(_0x2abb00),_0x4d9f47=_0x3b7d8d[_0x313444(0x1b1)],_0xfc6f6c=_0x3b7d8d[_0x313444(0x212)],_0x175f2b=_0x3b7d8d[_0x313444(0x249)],_0x128725={'hits':{},'ts':{}},_0x42d6ce=X(_0x2abb00,_0xa0a303,_0x128725,_0x2de19f),_0x541b4e=_0x187c8d=>{_0x128725['ts'][_0x187c8d]=_0xfc6f6c();},_0x49ea08=(_0x2965f7,_0x54e0b4)=>{let _0xa3a7a1=_0x128725['ts'][_0x54e0b4];if(delete _0x128725['ts'][_0x54e0b4],_0xa3a7a1){let _0x3799a5=_0x4d9f47(_0xa3a7a1,_0xfc6f6c());_0x48a896(_0x42d6ce('time',_0x2965f7,_0x175f2b(),_0x1c96ca,[_0x3799a5],_0x54e0b4));}},_0x1ca95f=_0x556e2e=>{var _0x634c6d=_0x313444,_0x3a78f9;return _0x1722a1===_0x634c6d(0x237)&&_0x2abb00[_0x634c6d(0x1a7)]&&((_0x3a78f9=_0x556e2e==null?void 0x0:_0x556e2e[_0x634c6d(0x1f6)])==null?void 0x0:_0x3a78f9[_0x634c6d(0x24d)])&&(_0x556e2e['args'][0x0][_0x634c6d(0x1a7)]=_0x2abb00[_0x634c6d(0x1a7)]),_0x556e2e;};_0x2abb00[_0x313444(0x24c)]={'consoleLog':(_0x1d9044,_0x3da3ab)=>{var _0x578a1e=_0x313444;_0x2abb00[_0x578a1e(0x227)]['log'][_0x578a1e(0x21b)]!==_0x578a1e(0x27d)&&_0x48a896(_0x42d6ce('log',_0x1d9044,_0x175f2b(),_0x1c96ca,_0x3da3ab));},'consoleTrace':(_0x38468d,_0x50b548)=>{var _0x144123=_0x313444,_0x2c0a3b,_0x41bd30;_0x2abb00['console'][_0x144123(0x230)][_0x144123(0x21b)]!==_0x144123(0x27a)&&((_0x41bd30=(_0x2c0a3b=_0x2abb00[_0x144123(0x206)])==null?void 0x0:_0x2c0a3b[_0x144123(0x26f)])!=null&&_0x41bd30[_0x144123(0x28c)]&&(_0x2abb00[_0x144123(0x1e1)]=!0x0),_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x38468d,_0x175f2b(),_0x1c96ca,_0x50b548))));},'consoleError':(_0xe83c02,_0x52826e)=>{var _0x14dcca=_0x313444;_0x2abb00[_0x14dcca(0x1e1)]=!0x0,_0x48a896(_0x1ca95f(_0x42d6ce(_0x14dcca(0x22a),_0xe83c02,_0x175f2b(),_0x1c96ca,_0x52826e)));},'consoleTime':_0x5caf3f=>{_0x541b4e(_0x5caf3f);},'consoleTimeEnd':(_0x27d8c5,_0x417474)=>{_0x49ea08(_0x417474,_0x27d8c5);},'autoLog':(_0x85c6df,_0x7f39a2)=>{var _0x40bb49=_0x313444;_0x48a896(_0x42d6ce(_0x40bb49(0x230),_0x7f39a2,_0x175f2b(),_0x1c96ca,[_0x85c6df]));},'autoLogMany':(_0x5158c0,_0x7b99d2)=>{_0x48a896(_0x42d6ce('log',_0x5158c0,_0x175f2b(),_0x1c96ca,_0x7b99d2));},'autoTrace':(_0x1bc11d,_0x565cc9)=>{_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x565cc9,_0x175f2b(),_0x1c96ca,[_0x1bc11d])));},'autoTraceMany':(_0x352345,_0x4c7f95)=>{var _0x378e10=_0x313444;_0x48a896(_0x1ca95f(_0x42d6ce(_0x378e10(0x1a3),_0x352345,_0x175f2b(),_0x1c96ca,_0x4c7f95)));},'autoTime':(_0x5359fa,_0x25990a,_0x323d68)=>{_0x541b4e(_0x323d68);},'autoTimeEnd':(_0x5be9bc,_0x5dbe0a,_0xba445f)=>{_0x49ea08(_0x5dbe0a,_0xba445f);},'coverage':_0x27be41=>{var _0x20affe=_0x313444;_0x48a896({'method':_0x20affe(0x1d2),'version':_0x2de19f,'args':[{'id':_0x27be41}]});}};let _0x48a896=q(_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x5e55f1,_0x306ab3),_0x1c96ca=_0x2abb00['_console_ninja_session'];return _0x2abb00[_0x313444(0x24c)];})(globalThis,'127.0.0.1','60591',_0xfe5e44(0x1ce),'webpack',_0xfe5e44(0x26c),_0xfe5e44(0x286),_0xfe5e44(0x21c),_0xfe5e44(0x1cd),_0xfe5e44(0x275),_0xfe5e44(0x244));")}catch(e){}}function r(e,...t){try{s().consoleError(e,t)}catch(e){}return t}},"./src/components/background-component.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{BackgroundComponent:()=>i});var n=a("./src/compositions/index.ts");class i{levelNumber;background;constructor(e){this.levelNumber=e,this.background=null}loadBackground(){const{draw:e}=(0,n.loadBackground)(this.levelNumber,n.BACKGROUND_HTML_LIST);e()}}},"./src/components/buttons/cancel-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;canvas;imagesLoaded=!1;cancel_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=.1*t.width+.15*t.width/2,this.posY=.2*t.height,this.context=e,this.canvas=t,(0,n.loadImages)({cancel_button_image:i.CANCEL_BTN_IMG},(e=>{this.cancel_button_image=e.cancel_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.15,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.cancel_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.15?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.14,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/close-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;canvas;imagesLoaded=!1;close_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,x){this.posX=a,this.posY=x,this.context=e,this.canvas=t,(0,n.loadImages)({close_button_image:i.MAP_BTN_IMG},(e=>{this.close_button_image=e.close_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:a,y:x}}draw(){this.imagesLoaded&&(this.context.drawImage(this.close_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{CancelButton:()=>i.default,CloseButton:()=>n.default,LevelBloonButton:()=>d.default,NextButton:()=>x.default,NoButton:()=>s.default,PauseButton:()=>r.default,PlayButton:()=>c.default,RetryButton:()=>o.default,YesButton:()=>_.default});var n=a("./src/components/buttons/close-button.ts"),i=a("./src/components/buttons/cancel-button.ts"),x=a("./src/components/buttons/next-button.ts"),s=a("./src/components/buttons/no-button.ts"),r=a("./src/components/buttons/pause-button.ts"),o=a("./src/components/buttons/retry-button.ts"),_=a("./src/components/buttons/yes-button.ts"),c=a("./src/components/buttons/play-button.ts"),d=a("./src/components/buttons/level-button.ts")},"./src/components/buttons/level-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{context;levelData;posX;posY;originalPosX;originalPosY;size;radiusOffSet;bloonSize;btnSize;lockSize;textFontSize;constructor(e,t,a){this.context=t,this.levelData=a,this.posX=this.levelData.x,this.posY=this.levelData.y,this.originalPosX=this.posX,this.originalPosY=this.posY,this.size=e.height/5,this.radiusOffSet=e.height/20,this.bloonSize=this.isLevelSpecial(this.size),this.btnSize=this.bloonSize,this.lockSize=e.height/13,this.textFontSize=this.size/6}isSpecialLevel(e){return i.SPECIAL_LEVELS.includes(e)}isLevelSpecial(e){return this.levelData?.isSpecial?.9*e:e}draw(e,t,a,i){this.context.drawImage(this.levelData?.balloonImg,this.posX,this.posY,this.btnSize,this.btnSize),this.context.fillStyle="white",this.context.font=this.textFontSize+`px ${n.font}, monospace`,this.context.textAlign="center",this.context.fillText(`${this.levelData.index+e}`,this.levelData.x+this.size/3.5,this.levelData.y+this.size/3),this.context.font=this.textFontSize-this.size/30+`px ${n.font}, monospace`,this.btnSize<this.bloonSize?this.btnSize=this.btnSize+.5:(this.btnSize=this.bloonSize,this.posX=this.levelData.x,this.posY=this.levelData.y),this.drawIcons(e,t,a,i)}applyPulseEffect(){const e=.7,t=Date.now()%1500/1500,a=t<=e,n=a?t/e:(t-e)/(a?e:.30000000000000004),i=a?15*n:15+45*n,x=a?.5*(1-n):0;if(x<=0)return;const{x:s,y:r,radius:o}=this.levelData?.isSpecial?{x:3,y:2.5,radius:2.2}:{x:3.4,y:3.8,radius:3.2},_=this.posX+this.btnSize/s,c=this.posY+this.btnSize/r,d=this.btnSize/o+i;this.context.save(),this.context.beginPath(),this.context.arc(_,c,d,0,2*Math.PI),this.context.fillStyle=`rgba(255, 255, 255, ${x})`,this.context.fill(),this.context.restore()}drawIcons(e,t,a,i){const x=this.levelData.index;if(n.Debugger.DebugMode||x+e-1>t+1&&this.drawLock(),a.length&&x+e<=i)for(let t=0;t<a.length;t++)if(x-1+e===parseInt(a[t].levelNumber)){this.checkStars(a[t].starCount);break}}drawLock(){this.context.drawImage(this.levelData?.lockImg,this.levelData.x,this.levelData.y,this.lockSize,this.lockSize)}checkStars(e){const t=this.levelData.x,a=this.levelData.y,n=this.size;e>=1&&this.drawStar(t,a-.01*n),e>1&&this.drawStar(t+n/2.5,a-.01*n),3===e&&this.drawStar(t+n/5,a-.1*n)}drawStar(e,t){this.context.drawImage(this.levelData?.starImg,e,t,this.size/5,this.size/5)}onClick(e,t,a,i,x){Math.sqrt((e-this.levelData.x-this.radiusOffSet)*(e-this.levelData.x-this.radiusOffSet)+(t-this.levelData.y-this.radiusOffSet)*(t-this.levelData.y-this.radiusOffSet))<45&&(n.Debugger.DebugMode||this.levelData.index+a<=i)&&(this.btnSize=this.bloonSize-4,this.posX=this.originalPosX+.5,this.posY=this.originalPosY+1,x(this.levelData.index))}}},"./src/components/buttons/next-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;width;height;imagesLoaded=!1;next_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,x,s){this.posX=x,this.posY=s,this.context=e,this.width=t,this.height=a,(0,n.loadImages)({next_button_image:i.NEXT_BTN_IMG},(e=>{this.next_button_image=e.next_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.next_button_image,this.posX,this.posY,this.width*this.btnSizeAnimation,this.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.width*this.btnOriginalSize,this.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/no-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;canvas;imagesLoaded=!1;no_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,x){this.posX=a+5,this.posY=x+10,this.context=e,this.canvas=t,(0,n.loadImages)({no_button_image:i.CANCEL_BTN_IMG},(e=>{this.no_button_image=e.no_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.18,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.no_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.18?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.17,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/pause-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;canvas;imagesLoaded=!1;pause_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t){this.posX=t.width-.09*t.height,this.posY=0,this.context=e,this.canvas=t,(0,n.loadImages)({pause_button_image:i.PAUSE_BTN_IMG},(e=>{this.pause_button_image=e.pause_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.09,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.pause_button_image,this.posX,this.posY,this.canvas.height*this.btnSizeAnimation,this.canvas.height*this.btnSizeAnimation),this.btnSizeAnimation<.09?this.btnSizeAnimation=this.btnSizeAnimation+25e-5:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.height*this.btnOriginalSize,this.canvas.height*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.085,this.posX=this.posX+.9,this.posY=this.posY+.9),a}}},"./src/components/buttons/play-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});var n=a("./src/constants/index.ts"),i=a("./src/Firebase/firebase-integration.ts"),x=a("./src/common/index.ts"),s=a("./src/data/index.ts");class r{posX;posY;context;canvas;images;loadedImages;imagesLoaded=!1;majVersion;minVersion;firebaseIntegration;constructor(e,t,a,s){this.posX=a,this.posY=s,this.context=e,this.canvas=t,this.firebaseIntegration=new i.FirebaseIntegration,this.init(),this.images={pause_button_image:n.PLAY_BTN_IMG},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}async init(){const e=await(0,s.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}draw(){this.imagesLoaded&&this.context.drawImage(this.loadedImages.pause_button_image,this.posX,this.posY,this.canvas.width/3,this.canvas.width/3)}onClick(e,t){const a=Math.sqrt((e-this.posX-this.canvas.width/6)*(e-this.posX-this.canvas.width/6)+(t-this.posY-this.canvas.width/6)*(t-this.posY-this.canvas.width/6));if(this.logTappedStartFirebaseEvent(),a<this.canvas.width/8)return!0}logTappedStartFirebaseEvent(){Date.now();const e={cr_user_id:x.pseudoId,ftm_language:x.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():""};this.firebaseIntegration.sendTappedStartEvent(e)}}},"./src/components/buttons/retry-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;canvas;imagesLoaded=!1;retry_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,x){this.posX=a,this.posY=x,this.context=e,this.canvas=t,(0,n.loadImages)({retry_button_image:i.RETRY_BTN_IMG},(e=>{this.retry_button_image=e.retry_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.19,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:a,y:x}}draw(){this.imagesLoaded&&(this.context.drawImage(this.retry_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.19?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.18,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/buttons/yes-button.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{posX;posY;context;canvas;imagesLoaded=!1;yes_button_image;btnSizeAnimation;btnOriginalSize;orignalPos;constructor(e,t,a,x){this.posX=a-5,this.posY=x,this.context=e,this.canvas=t,(0,n.loadImages)({yes_button_image:i.YES_BTN_IMG},(e=>{this.yes_button_image=e.yes_button_image,this.imagesLoaded=!0})),this.btnSizeAnimation=.205,this.btnOriginalSize=this.btnSizeAnimation,this.orignalPos={x:this.posX,y:this.posY}}draw(){this.imagesLoaded&&(this.context.drawImage(this.yes_button_image,this.posX,this.posY,this.canvas.width*this.btnSizeAnimation,this.canvas.width*this.btnSizeAnimation),this.btnSizeAnimation<.205?this.btnSizeAnimation=this.btnSizeAnimation+5e-4:(this.posX=this.orignalPos.x,this.posY=this.orignalPos.y))}onClick(e,t){const a=(0,n.isClickInsideButton)(e,t,this.posX,this.posY,this.canvas.width*this.btnOriginalSize,this.canvas.width*this.btnOriginalSize,!0);return a&&(this.btnSizeAnimation=.19,this.posX=this.posX+1,this.posY=this.posY+1),a}}},"./src/components/feedback-text/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{FeedbackTextEffects:()=>i});var n=a("./src/common/index.ts");class i{feedbackTextElement;hideTimeoutId;constructor(){this.feedbackTextElement=document.getElementById("feedback-text"),this.hideTimeoutId=null,this.initialize()}initialize(){this.isFeedbackElementAvailable()}isFeedbackElementAvailable(){return!!this.feedbackTextElement}wrapText(e){this.isFeedbackElementAvailable()&&(this.feedbackTextElement.textContent=e,(0,n.hideElement)(!1,this.feedbackTextElement),this.setHideTimeout())}setHideTimeout(){this.hideTimeoutId&&clearTimeout(this.hideTimeoutId),this.hideTimeoutId=window.setTimeout((()=>{(0,n.hideElement)(!0,this.feedbackTextElement),this.hideTimeoutId=null}),4e3)}}},"./src/components/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{AudioPlayer:()=>l.AudioPlayer,BackgroundComponent:()=>c.BackgroundComponent,FeedbackTextEffects:()=>d.FeedbackTextEffects,LevelIndicators:()=>i.LevelIndicators,Monster:()=>o.Monster,PauseButton:()=>n.default,PromptText:()=>x.PromptText,StoneHandler:()=>s.default,TimerTicking:()=>_.TimerTicking,TrailEffect:()=>h.default,Tutorial:()=>r.Tutorial});var n=a("./src/components/buttons/pause-button.ts"),i=a("./src/components/level-indicator.ts"),x=a("./src/components/prompt-text.ts"),s=a("./src/components/stone-handler.ts"),r=a("./src/components/tutorial.ts"),o=a("./src/components/monster.ts"),_=a("./src/components/timer-ticking.ts"),c=a("./src/components/background-component.ts"),d=a("./src/components/feedback-text/index.ts"),l=a("./src/components/audio-player.ts"),h=a("./src/components/trail-particles.ts")},"./src/components/level-indicator.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{LevelIndicators:()=>s});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts"),x=a("./src/events/index.ts");class s extends x.EventManager{context;canvas;activeIndicators;images;loadedImages;imagesLoaded=!1;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.activeIndicators=a,this.images={level_indicator:i.LEVEL_INDICATOR,bar_empty:i.BAR_EMPTY,bar_full:i.BAR_FULL},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}setIndicators(e){this.activeIndicators=e}addDropStoneEvent(){document.addEventListener("dropstone",(e=>{this.setIndicators(2)}))}draw(){if(this.imagesLoaded){this.context.drawImage(this.loadedImages.level_indicator,.15*this.canvas.width,0,.35*this.canvas.width,.09*this.canvas.height);for(var e=0;e<5;e++)this.context.drawImage(this.loadedImages.bar_empty,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3);for(e=0;e<this.activeIndicators;e++)this.context.drawImage(this.loadedImages.bar_full,.35*this.canvas.width/7*(e+1)+.15*this.canvas.width,.09*this.canvas.height/2-.09*this.canvas.height/6,.35*this.canvas.width/10,.09*this.canvas.height/3)}}dispose(){this.unregisterEventListener()}handleStoneDrop(e){}handleLoadPuzzle(e){this.setIndicators(e.detail.counter)}}},"./src/components/monster.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{Monster:()=>x});var n=a("./src/events/index.ts"),i=a("./src/components/riveMonster/rive-monster-component.ts");class x extends n.EventManager{zindex;width;height;x;y;fps;canvasStack;canvasElement;context;game;monsterPhase;riveMonster;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.game=e,this.monsterPhase=t,this.width=this.game.width,this.height=this.game.height,this.canvasElement=document.getElementById("rivecanvas"),this.context=this.canvasElement.getContext("2d"),this.x=this.game.width/2-.243*this.game.width,this.y=this.game.width/3,this.fps=10,this.initializeRiveMonster(),a&&a()}initializeRiveMonster(){this.riveMonster=new i.RiveMonsterComponent({canvas:this.canvasElement,autoplay:!0,fit:"contain",alignment:"topCenter",width:this.canvasElement.width,height:this.canvasElement.height,onLoad:()=>{this.riveMonster.play(i.RiveMonsterComponent.Animations.IDLE)}})}stopRiveMonster(){this.riveMonster&&(this.riveMonster.stop(),console.log("Rive Monster animation stopped."))}changeToDragAnimation(){this.riveMonster.play(i.RiveMonsterComponent.Animations.OPENING_MOUTH_EAT)}changeToEatAnimation(){this.riveMonster.play(i.RiveMonsterComponent.Animations.EAT_HAPPY)}changeToIdleAnimation(){this.riveMonster.play(i.RiveMonsterComponent.Animations.IDLE)}changeToSpitAnimation(){this.riveMonster.play(i.RiveMonsterComponent.Animations.EAT_DISGUST)}handleStoneDrop(e){e.detail.isCorrect?this.changeToEatAnimation():this.changeToSpitAnimation()}handleLoadPuzzle(e){this.changeToIdleAnimation()}dispose(){this.stopRiveMonster(),this.unregisterEventListener()}onClick(e,t){if(Math.sqrt((e-this.x-this.width/4)*(e-this.x-this.width/4)+(t-this.y-this.height/2.2)*(t-this.y-this.height/2.2))<=100)return!0}}},"./src/components/popups/pause-popup.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>o});var n=a("./src/components/buttons/index.ts"),i=a("./src/common/index.ts"),x=a("./src/components/index.ts"),s=a("./src/components/popups/sure-popup.ts"),r=a("./src/constants/index.ts");class o{canvas;context;cancelButton;retryButton;closeButton;imagesLoaded=!1;pop_up_image;callback;switchToLevelSelection;reloadScene;gameplayData;audioPlayer;retrySurePopup;CloseSurePopup;isRetryButtonClicked=!1;isCloseButtonClicked=!1;constructor(e,t,a,o,_){this.canvas=e,this.callback=t,this.gameplayData=_,this.switchToLevelSelection=a,this.reloadScene=o;const c=document.getElementById("canvas");this.context=c.getContext("2d"),this.audioPlayer=new x.AudioPlayer,this.cancelButton=new n.CancelButton(this.context,this.canvas),this.retryButton=new n.RetryButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),this.closeButton=new n.CloseButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.19*this.canvas.width/2),(0,i.loadImages)({pop_up_image:r.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0})),this.retrySurePopup=new s.default(this.canvas,this.yesRetryCallback,this.noRetryCallback),this.CloseSurePopup=new s.default(this.canvas,this.switchToLevelSelection,this.noCloseCallback)}yesRetryCallback=()=>{this.playClickSound(),this.reloadScene(this.gameplayData,"GamePlay")};noRetryCallback=()=>{this.isRetryButtonClicked&&(this.isRetryButtonClicked=!1,this.callback())};noCloseCallback=()=>{this.isCloseButtonClicked&&(this.isCloseButtonClicked=!1,this.callback())};addListner=()=>{document.getElementById("canvas").addEventListener(i.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const n=e.clientX-a.left,x=e.clientY-a.top;this.cancelButton.onClick(n,x)&&(this.playClickSound(),this.callback()),this.retryButton.onClick(n,x)&&("english"==i.lang?(this.playClickSound(),this.dispose(),this.isRetryButtonClicked=!0,this.retrySurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.reloadScene(this.gameplayData,"GamePlay"))),this.closeButton.onClick(n,x)&&("english"==i.lang?(this.playClickSound(),this.dispose(),this.isCloseButtonClicked=!0,this.CloseSurePopup.addListner(),this.playAreYouSureSound()):(this.playClickSound(),this.dispose(),this.switchToLevelSelection("GamePlay")))};draw(){this.imagesLoaded&&(this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width),this.cancelButton.draw(),this.retryButton.draw(),this.closeButton.draw(),1==this.isRetryButtonClicked&&"english"==i.lang&&this.retrySurePopup.draw(),1==this.isCloseButtonClicked&&"english"==i.lang&&this.CloseSurePopup.draw())}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};playAreYouSureSound=()=>{this.audioPlayer.playAudio(r.AUDIO_ARE_YOU_SURE)};dispose=()=>{document.getElementById("canvas").removeEventListener(i.CLICK,this.handleMouseClick,!1)}}},"./src/components/popups/sure-popup.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>r});var n=a("./src/common/index.ts"),i=a("./src/components/index.ts"),x=a("./src/components/buttons/index.ts"),s=a("./src/constants/index.ts");class r{canvas;context;yesButton;noButton;imagesLoaded=!1;pop_up_image;yesCallback;noCallback;audioPlayer;constructor(e,t,a){this.canvas=e,this.yesCallback=t,this.noCallback=a,this.context=this.canvas.getContext("2d"),this.audioPlayer=new i.AudioPlayer,this.yesButton=new x.YesButton(this.context,this.canvas,.55*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),this.noButton=new x.NoButton(this.context,this.canvas,.25*this.canvas.width,.2*this.canvas.height+.4*this.canvas.width-.15*this.canvas.width/2),(0,n.loadImages)({pop_up_image:s.POPUP_BG_IMG},(e=>{this.pop_up_image=e.pop_up_image,this.imagesLoaded=!0}))}addListner=()=>{this.canvas.addEventListener(n.CLICK,this.handleMouseClick,!1)};handleMouseClick=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const n=e.clientX-a.left,i=e.clientY-a.top;this.yesButton.onClick(n,i)&&(this.playClickSound(),this.dispose(),this.yesCallback()),this.noButton.onClick(n,i)&&(this.playClickSound(),this.dispose(),this.noCallback())};draw(){if(this.imagesLoaded){this.context.fillStyle="rgba(0,0,0,0.5)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height),this.context.drawImage(this.pop_up_image,.1*this.canvas.width,.2*this.canvas.height,.8*this.canvas.width,.8*this.canvas.width);this.canvas.height;this.context.fillStyle="white",this.context.font="24px Arial",this.context.fillText("Are you sure?",this.canvas.width/2,this.canvas.height/2.8),this.yesButton.draw(),this.noButton.draw()}}playClickSound=()=>{this.audioPlayer.playButtonClickSound()};dispose=()=>{this.canvas.removeEventListener(n.CLICK,this.handleMouseClick,!1)}}},"./src/components/prompt-text.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{PromptText:()=>r});var n=a("./src/events/index.ts"),i=a("./src/common/index.ts"),x=a("./src/components/index.ts"),s=a("./src/constants/index.ts");class r extends n.EventManager{width;height;levelData;currentPromptText;currentPuzzleData;canavsElement;context;prompt_image;targetStones;rightToLeft;imagesLoaded=!1;audioPlayer;isStoneDropped=!1;droppedStones=0;droppedStoneCount=0;time=0;promptImageWidth=0;isAppForeground=!0;scale=1;isScalingUp=!0;scaleFactor=5e-4;promptImageHeight=0;promptPlayButton;constructor(e,t,a,n,s){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.levelData=n,this.rightToLeft=s,this.currentPromptText=a.prompt.promptText,this.currentPuzzleData=a,this.targetStones=this.currentPuzzleData.targetStones,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.audioPlayer=new x.AudioPlayer,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.prompt_image=new Image,this.promptPlayButton=new Image,this.loadImages(),this.time=0,this.promptImageWidth=.65*this.width,this.promptImageHeight=.3*this.height,document.addEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}handleMouseDown=e=>{const t=document.getElementById("canvas");e.preventDefault();var a=t.getBoundingClientRect();const n=e.clientX-a.left,i=e.clientY-a.top;this.onClick(n,i)&&this.playSound()};getPromptAudioUrl=()=>i.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio);playSound=()=>{this.isAppForeground&&this.audioPlayer.playPromptAudio(i.Utils.getConvertedDevProdURL(this.currentPuzzleData.prompt.promptAudio))};onClick(e,t){return Math.sqrt(e-this.width/3)<12&&Math.sqrt(t-this.height/5.5)<10}setCurrrentPuzzleData(e){this.currentPuzzleData=e,this.currentPromptText=e.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones}drawRTLLang(){var e=this.width/2;const t=.26*this.height;this.context.textAlign="center";var a=this.calculateFont();const n=this.promptImageWidth,x=this.promptImageHeight;if(this.context.font=`${a}px ${i.font}, monospace`,"LetterInWord"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){var s=this.currentPromptText.replace(new RegExp(this.currentPuzzleData.targetStones[0],"g"),"");this.context.fillStyle="red",this.context.fillText(this.targetStones[0],e+this.context.measureText(s).width/2,t),this.context.fillStyle="black",this.context.fillText(s,e-this.context.measureText(this.targetStones[0]).width/2,t)}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,n/4,x/4);else if("Word"==this.levelData.levelMeta.levelType)if("Visible"==this.levelData.levelMeta.protoType){e-=.5*this.context.measureText(this.currentPromptText).width;for(let a=this.targetStones.length-1;a>=0;a--)this.droppedStones>a||null==this.droppedStones?(this.context.fillStyle="black",this.context.fillText(this.targetStones[a],e,t)):(this.context.fillStyle="red",this.context.fillText(this.targetStones[a],e,t)),e=e+this.context.measureText(this.targetStones[a]).width+5}else this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,n/4,x/4);else if("audioPlayerWord"==this.levelData.levelMeta.levelType){const e=1.25*(this.width-n),t=.33*(this.height-x);this.context.drawImage(this.promptPlayButton,e,t,n/4,x/4)}else"Visible"==this.levelData.levelMeta.protoType?(this.context.fillStyle="black",this.context.fillText(this.currentPromptText,e,t)):this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.15,n/4,x/4)}drawOthers(){const e=this.currentPromptText.split(""),t=(this.width,.28*this.height),a=this.promptImageWidth,n=this.promptImageHeight;var x=this.calculateFont();this.context.font=`${x}px ${i.font}, monospace`;let s=this.width/2-this.context.measureText(this.currentPromptText).width/2,r=0;var o=this.currentPuzzleData.targetStones[0].split("");for(let i=0;i<e.length;i++){switch(this.levelData.levelMeta.levelType){case"LetterInWord":if("Visible"==this.levelData.levelMeta.protoType){o.includes(e[i])?(o=o.slice(1,o.length),this.context.fillStyle="red",this.context.fillText(e[i],s,t)):(this.context.fillStyle="black",this.context.fillText(e[i],s,t));break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,n/4);case"Word":if("Visible"==this.levelData.levelMeta.protoType){if(this.targetStones.length!=this.currentPromptText.length){this.targetStones.length>i&&(this.context.fillStyle=this.droppedStoneCount>i||null==this.droppedStoneCount?"black":"red",this.context.fillText(this.targetStones[i],s+s/10,t));break}this.context.fillStyle=this.droppedStones>i||null==this.droppedStones?"black":"red",this.context.fillText(e[i],s,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,n/4);case"SoundWord":this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,n/4);break;default:if("Visible"==this.levelData.levelMeta.protoType){this.context.fillStyle="black",this.context.fillText(this.currentPromptText,this.width/2.1,t);break}this.context.drawImage(this.promptPlayButton,this.width/2.4,t/1.25,a/4,n/4)}r=(this.context.measureText(e[i]).width+this.context.measureText(e[i+1]).width)/2,s+=r}}draw(e){if(this.updateScaling(),this.time=e<17?this.time+Math.floor(e):this.time+16,Math.floor(this.time)>=1910&&Math.floor(this.time)<=1926&&this.playSound(),!this.isStoneDropped){const e=this.promptImageWidth*this.scale,t=this.promptImageHeight*this.scale,a=(this.width-e)/2,n=(this.height-t)/5;this.context.drawImage(this.prompt_image,a,n,e,t),this.context.fillStyle="black",this.rightToLeft?this.drawRTLLang():this.drawOthers()}}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.droppedStones=0,this.droppedStoneCount=0,this.currentPuzzleData=this.levelData.puzzles[e.detail.counter],this.currentPromptText=this.currentPuzzleData.prompt.promptText,this.targetStones=this.currentPuzzleData.targetStones,this.audioPlayer.preloadPromptAudio(this.getPromptAudioUrl()),this.isStoneDropped=!1,this.time=0}dispose(){document.removeEventListener(i.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}droppedStoneIndex(e){this.droppedStones=e,this.droppedStoneCount++}calculateFont(){return this.promptImageWidth/this.currentPromptText.length>35?35:.65*this.width/this.currentPromptText.length}updateScaling(){this.isScalingUp?(this.scale+=this.scaleFactor,this.scale>=1.05&&(this.isScalingUp=!1)):(this.scale-=this.scaleFactor,this.scale<=1&&(this.scale=1,this.isScalingUp=!0))}handleVisibilityChange=()=>{"hidden"==document.visibilityState&&(this.audioPlayer.stopAllAudios(),this.isAppForeground=!1),"visible"==document.visibilityState&&(this.isAppForeground=!0)};async loadImages(){const e=this.loadImage(this.prompt_image,s.PROMPT_TEXT_BG),t=this.loadImage(this.promptPlayButton,s.PROMPT_PLAY_BUTTON);await Promise.all([e,t]),this.imagesLoaded=!0}loadImage(e,t){return new Promise(((a,n)=>{e.onload=()=>{a()},e.src=t,e.onerror=e=>{n(e)}}))}}},"./src/components/riveMonster/rive-monster-component.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{RiveMonsterComponent:()=>i});var n=a("./node_modules/@rive-app/canvas/rive.js");class i{props;riveInstance;src="./assets/monsterrive.riv";stateMachines="State Machine 1";static Animations={OPENING_MOUTH_EAT:"Opening Mouth Eat",EAT_HAPPY:"Eat Happy",IDLE:"Idle",EAT_DISGUST:"Eat Disgust"};constructor(e){this.props=e,this.riveInstance=new n.Rive({src:this.src,canvas:this.props.canvas,autoplay:this.props.autoplay,stateMachines:this.stateMachines,layout:new n.Layout({fit:n.Fit[this.props.fit||"Contain"],alignment:n.Alignment[this.props.alignment||"TopCenter"]}),onLoad:()=>{this.props.onLoad&&this.props.onLoad()}})}play(e){this.riveInstance&&this.riveInstance.play(e)}stop(){this.riveInstance&&this.riveInstance.stop()}onStateChange(e){this.riveInstance.stateMachine.inputs.forEach((t=>{t.onStateChange((t=>{e(t)}))}))}}},"./src/components/stone-handler.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>o});var n=a("./src/common/index.ts"),i=a("./src/events/index.ts"),x=a("./src/components/index.ts"),s=a("./src/data/index.ts"),r=a("./src/constants/index.ts");class o extends i.EventManager{context;canvas;currentPuzzleData;targetStones;stonePos;pickedStone;foilStones=new Array;answer="";puzzleNumber;levelData;correctAnswer;puzzleStartTime;showTutorial=null==s.GameScore.getDatafromStorage().length;correctStoneAudio;tutorial;correctTargetStone;stonebg;audioPlayer;feedbackAudios;timerTickingInstance;isGamePaused=!1;constructor(e,t,a,i,s,o){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.context=e,this.canvas=t,this.puzzleNumber=a,this.levelData=i,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.correctStoneAudio=new Audio(r.AUDIO_PATH_CORRECT_STONE),this.correctStoneAudio.loop=!1,this.feedbackAudios=this.convertFeedBackAudiosToList(s),this.puzzleStartTime=new Date,this.tutorial=new x.Tutorial(e,t.width,t.height,a),this.stonebg=new Image,this.stonebg.src=r.ASSETS_PATH_STONE_PINK_BG,this.audioPlayer=new x.AudioPlayer,this.stonebg.onload=e=>{this.createStones(this.stonebg)},this.audioPlayer=new x.AudioPlayer,this.timerTickingInstance=o,document.addEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}createStones(e){const t=this.getFoilStones();for(let a=0;a<t.length;a++)t[a]==this.correctTargetStone&&this.tutorial.updateTargetStonePositions(this.stonePos[a]),this.foilStones.push(new n.StoneConfig(this.context,this.canvas.width,this.canvas.height,t[a],this.stonePos[a][0],this.stonePos[a][1],e,this.timerTickingInstance,a==t.length-1?this.tutorial:null))}draw(e){for(let t=0;t<this.foilStones.length;t++)this.foilStones[t].draw(e);this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}drawWordPuzzleLetters(e,t,a){for(let n=0;n<this.foilStones.length;n++)t(n)&&this.foilStones[n].draw(e,Object.keys(a).length>1&&void 0!==a[n]);this.foilStones.length>0&&this.foilStones[this.foilStones.length-1].frame>=100&&!this.isGamePaused&&this.timerTickingInstance.update(e)}initializeStonePos(){let e=32;this.stonePos=[[this.canvas.width/5-e,this.canvas.height/1.9-e],[this.canvas.width/2-e,this.canvas.height/1.15-e],[this.canvas.width/3.5+this.canvas.width/2-e,this.canvas.height/1.2-e],[this.canvas.width/4-e,this.canvas.height/1.28-e],[this.canvas.width/7-e,this.canvas.height/1.5-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.9-e],[this.canvas.width/2.3+this.canvas.width/2.1-e,this.canvas.height/1.42-e],[this.canvas.width/6-e,this.canvas.height/1.1-e]],this.stonePos=this.stonePos.sort((()=>Math.random()-.5))}setTargetStone(e){this.currentPuzzleData=this.levelData.puzzles[e],this.targetStones=[...this.currentPuzzleData.targetStones],this.correctTargetStone=this.targetStones.join("")}handleStoneDrop(e){this.foilStones=[]}handleLoadPuzzle(e){this.foilStones=[],this.tutorial.setPuzzleNumber(e.detail.counter),this.puzzleNumber=e.detail.counter,this.setTargetStone(this.puzzleNumber),this.initializeStonePos(),this.createStones(this.stonebg)}dispose(){document.removeEventListener(n.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.unregisterEventListener()}isStoneLetterDropCorrect(e,t,a=!1){const n=a?e==this.correctTargetStone.substring(0,e.length):e==this.correctTargetStone;return this.processLetterDropFeedbackAudio(t,n,a,e),n}processLetterDropFeedbackAudio(e,t,a,n){if(t){(a?n===this.getCorrectTargetStone():t)?this.playCorrectAnswerFeedbackSound(e):this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(2))}else this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,r.AUDIO_PATH_MONSTER_SPIT,Math.round(Math.random())>0?r.AUDIO_PATH_MONSTER_DISSAPOINTED:null)}getCorrectTargetStone(){return this.correctTargetStone}getFoilStones(){this.currentPuzzleData.targetStones.forEach((e=>{const t=this.currentPuzzleData.foilStones.indexOf(e);-1!==t&&this.currentPuzzleData.foilStones.splice(t,1)}));const e=this.currentPuzzleData.targetStones.length+this.currentPuzzleData.foilStones.length;if(e>8){const t=e-8;this.currentPuzzleData.foilStones.splice(0,t)}return this.currentPuzzleData.targetStones.forEach((e=>{this.currentPuzzleData.foilStones.push(e)})),this.currentPuzzleData.foilStones.sort((()=>Math.random()-.5))}handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.correctStoneAudio.pause()};convertFeedBackAudiosToList(e){return[e.fantastic,e.great,e.amazing]}setGamePause(e){this.isGamePaused=e}playCorrectAnswerFeedbackSound(e){const t=n.Utils.getRandomNumber(1,3).toString();this.audioPlayer.playFeedbackAudios(!1,r.AUDIO_PATH_EATS,(0,r.AUDIO_PATH_CHEERING_FUNC)(t),r.AUDIO_PATH_POINTS_ADD,n.Utils.getConvertedDevProdURL(this.feedbackAudios[e])),this.correctStoneAudio.play()}resetStonePosition(e,t,a){const n=t,i=a;if(n&&i&&n.text&&"number"==typeof i.origx&&"number"==typeof i.origy){const t=50,a=e/2;n.x=n.text.length<=3&&i.origx<t&&i.origx<a?i.origx+25:i.origx,n.y=i.origy}return n}computeCursorDistance(e,t,a){return Math.sqrt((e-a.x)**2+(t-a.y)**2)}handlePickStoneUp(e,t){let a=null,n=0;for(let i of this.foilStones){if(this.computeCursorDistance(e,t,i)<=40){a=i,a.foilStoneIndex=n;break}n++}return a}handleHoveringToAnotherStone(e,t,a){let n=null,i=0;for(let x of this.foilStones){if(this.computeCursorDistance(e,t,x)<=40&&a(x.text,i)){n=x,n.foilStoneIndex=i;break}i++}return n}handleMovingStoneLetter(e,t,a){const n=e,i=this.canvas.getBoundingClientRect();return n.x=t-i.left,n.y=a-i.top,n}}},"./src/components/timer-ticking.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{TimerTicking:()=>r});var n=a("./src/common/index.ts"),i=a("./src/events/index.ts"),x=a("./src/components/index.ts"),s=a("./src/constants/index.ts");class r extends i.EventManager{width;height;timerWidth;timerHeight;widthToClear;timer;isTimerStarted;isTimerEnded;isTimerRunningOut;canavsElement;context;timer_full;pauseButtonClicked;images;loadedImages;callback;imagesLoaded=!1;startMyTimer=!0;isMyTimerOver=!1;isStoneDropped=!1;audioPlayer;playLevelEndAudioOnce=!0;constructor(e,t,a){super({stoneDropCallbackHandler:e=>this.handleStoneDrop(e),loadPuzzleCallbackHandler:e=>this.handleLoadPuzzle(e)}),this.width=e,this.height=t,this.widthToClear=this.width/3.4,this.timerHeight=112,this.timerWidth=888,this.callback=a,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.timer=0,this.isTimerStarted=!1,this.isTimerEnded=!1,this.isTimerRunningOut=!1,this.audioPlayer=new x.AudioPlayer,this.playLevelEndAudioOnce=!0,this.images={timer_empty:s.TIMER_EMPTY,rotating_clock:s.ROTATING_CLOCK,timer_full:s.TIMER_FULL},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}startTimer(){this.readyTimer(),this.startMyTimer=!0,this.isMyTimerOver=!1}readyTimer(){this.timer=0}update(e){this.startMyTimer&&!this.isStoneDropped&&(this.timer+=.008*e),40!=Math.floor(.87*this.width-.87*this.width*this.timer*.01)||this.isMyTimerOver||(this.playLevelEndAudioOnce&&this.audioPlayer.playAudio(s.AUDIO_TIMEOUT),this.playLevelEndAudioOnce=!1),.87*this.width-.87*this.width*this.timer*.01<0&&!this.isMyTimerOver&&(this.isMyTimerOver=!0,this.callback(!0))}draw(){this.imagesLoaded&&(this.context.drawImage(this.loadedImages.timer_empty,0,.1*this.height,this.width,.05*this.height),this.context.drawImage(this.loadedImages.rotating_clock,0,.09*this.height,.14*this.width,.065*this.height),this.context.drawImage(this.loadedImages.timer_full,0,0,this.timerWidth-this.timerWidth*this.timer*.01,this.timerHeight,.14*this.width,.099*this.height,.87*this.width-.87*this.width*this.timer*.01,.05*this.height))}handleStoneDrop(e){this.isStoneDropped=!0}handleLoadPuzzle(e){this.playLevelEndAudioOnce=!0,this.isStoneDropped=!1,this.startTimer()}dispose(){this.unregisterEventListener()}}},"./src/components/trail-particles.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});class n{ctx;particles;mouse;isDiamond;constructor(e){this.ctx=e.getContext("2d"),this.particles=[],this.mouse={x:void 0,y:void 0},this.isDiamond=!1}init(){this.draw()}draw(){this.drawTrail();let e=[];for(let t=0;t<this.particles.length;t++)this.particles[t].time<=this.particles[t].ttl&&e.push(this.particles[t]);this.particles=e}drawTrail(){for(let e=0;e<this.particles.length;e++)this.particles[e].update(),this.isDiamond=!this.isDiamond,this.particles[e].draw(this.isDiamond)}addTrailParticlesOnMove(e,t){this.mouse.x=e,this.mouse.y=t,this.particles.push(new i(this.ctx,this.mouse))}resetParticles(){this.mouse.x=void 0,this.mouse.y=void 0}}class i{ctx;start;end;size;style;time;ttl;x;y;rgb;hyp;starX;starY;starAngle;constructor(e,t){const a=this.determineValueByScreenWidth(30,15),n=this.determineValueByScreenWidth(30,15),i=this.determineValueByScreenWidth(3,.5),x=this.determineValueByScreenWidth(2,.5);this.ctx=e,this.rgb=["rgb(255,255,255)","rgb(249,217,170)","rgb(244,182,81)","rgb(244,159,34)"],this.start={x:t.x+this.getRandomInt(-a,a),y:t.y+this.getRandomInt(-n,n),size:this.determineValueByScreenWidth(3,2)},this.end={x:this.start.x+this.getRandomInt(-i,i),y:this.start.y+this.getRandomInt(-x,x)},this.x=this.start.x,this.y=this.start.y,this.size=this.start.size,this.style=this.rgb[this.getRandomInt(0,this.rgb.length-1)],this.time=0,this.ttl=75,this.hyp=0,this.starX=0,this.starY=0,this.starAngle=0}determineValueByScreenWidth(e,t){return window.screen.width>768?e:t}update(){if(this.time<=this.ttl){const e=1-(this.ttl-this.time)/this.ttl;this.size=this.start.size*(1-this.easeOutQuart(e)),this.x=this.x+.01*(this.end.x-this.x),this.y=this.y+.01*(this.end.y-this.y)}this.time++}draw(e){e?this.starParticle():this.circleParticle()}circleParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.arc(this.x,this.y,this.size,0,2*Math.PI),this.ctx.closePath(),this.ctx.fill()}starParticle(){this.ctx.fillStyle=this.style,this.ctx.beginPath(),this.ctx.moveTo(this.x,this.y-this.size),this.ctx.lineTo(this.x+this.size,this.y),this.ctx.lineTo(this.x,this.y+this.size),this.ctx.lineTo(this.x-this.size,this.y),this.ctx.closePath(),this.ctx.fill()}getRandomInt(e,t){return Math.round(Math.random()*(t-e))+e}easeOutQuart(e){return 1-Math.pow(1-e,4)}}},"./src/components/tutorial.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{Tutorial:()=>s});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts"),x=a("./src/data/index.ts");class s{width;height;context;tutorialImg;imagesLoaded=!1;targetStonePositions;startx;starty;endx;endy;endTutorial=!1;puzzleNumber;playMnstrClkTtrlAnim=!0;totalTime=0;monsterStoneDifference=0;x;y;dx;dy;absdx;absdy;startRipple=!1;drawRipple;constructor(e,t,a,x){this.width=t,this.height=a,this.context=e,this.startx=0,this.starty=0,this.endx=this.width/2,this.endy=this.height/2,this.puzzleNumber=x>=0?x:null,this.tutorialImg=new Image,this.tutorialImg.src=i.TUTORIAL_HAND,this.drawRipple=(0,n.createRippleEffect)(this.context),this.tutorialImg.onload=()=>{this.imagesLoaded=!0}}updateTargetStonePositions(e){this.startx=e[0]-22,this.starty=e[1]-50,this.monsterStoneDifference=Math.sqrt((this.startx-this.endx)*(this.startx-this.endx)+(this.starty-this.endy)*(this.starty-this.endy)),this.animateImage()}isMobile(){return/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}setTutorialEnd(e){this.endTutorial=e}animateImage(){this.x=this.startx,this.y=this.starty,this.dx=(this.endx-this.startx)/5e3,this.dy=(this.endy-this.starty)/5e3,this.absdx=this.isMobile()?3*Math.abs(this.dx):Math.abs(this.dx),this.absdy=this.isMobile()?3*Math.abs(this.dy):Math.abs(this.dy),this.setTutorialEnd(!1)}draw(e,t,a){if(this.imagesLoaded&&!this.endTutorial&&this.shouldPlayTutorial()){this.x=this.dx>=0?this.x+this.absdx*e:this.x-this.absdx*e,this.y=this.dy>=0?this.y+this.absdy*e:this.y-this.absdy*e;const n=this.x-this.endx+this.absdx,i=this.y-this.endy+this.absdy;let x=100*Math.sqrt(n*n+i*i)/this.monsterStoneDifference;if(x<15)x>1?this.createHandScaleAnimation(e,this.endx,this.endy+30,!0):(this.x=this.startx,this.y=this.starty);else if(x>80)this.createHandScaleAnimation(e,this.startx+15,this.starty+10,!1);else{let e=this.context.globalAlpha;this.context.globalAlpha=.4,this.context.drawImage(t,this.x,this.y+20,a,a),this.context.globalAlpha=e,this.context.drawImage(this.tutorialImg,this.x+15,this.y+10)}}}createHandScaleAnimation(e,t,a,n){this.totalTime+=Math.floor(e);const i=this.sinusoidalInterpolation(this.totalTime,1,1.5,500),x=this.tutorialImg.width*i,s=this.tutorialImg.height*i;this.context.drawImage(this.tutorialImg,t,a,x,s),!n&&this.drawRipple(t+.02*this.width,a+this.tutorialImg.height/2,!1)}sinusoidalInterpolation(e,t,a,n){const i=(a-t)/2,x=Math.PI/n;return t+i*Math.sin(x*e)}clickOnMonsterTutorial(e){if(this.shouldPlayMonsterClickTutorialAnimation()){const t=2e3,a=this.height/1.9+this.tutorialImg.height/.8,n=this.height/1.9+this.tutorialImg.height/.8-this.tutorialImg.height;let i;const x=this.endx;this.totalTime<t/2?(i=n+this.totalTime/(t/2)*(a-n),this.drawRipple(x,this.height/1.9+this.tutorialImg.height/1.5,!0)):(i=a-(this.totalTime-t/2)/(t/2)*(a-n),this.drawRipple(x,this.height/1.9+this.tutorialImg.height/1.2+this.tutorialImg.height)),this.context.drawImage(this.tutorialImg,x,i,this.tutorialImg.width,this.tutorialImg.height),i<=n&&(this.totalTime=0),this.totalTime+=e}}shouldPlayTutorial(){return x.GameScore.getAllGameLevelInfo().length<=0&&0==this.puzzleNumber}shouldPlayMonsterClickTutorialAnimation(){return x.GameScore.getAllGameLevelInfo().length<=0&&this.playMnstrClkTtrlAnim}setPuzzleNumber(e){this.puzzleNumber=e}setPlayMonsterClickAnimation(e){this.playMnstrClkTtrlAnim=e}}},"./src/compositions/background-html.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{BACKGROUND_HTML_LIST:()=>i,loadBackground:()=>x});const n=e=>{const t=document.getElementById("background");t&&(t.className="",t.classList.add(e))},i={summer:{draw:()=>n("summer-bg")},autumn:{draw:()=>n("autumn-bg")},winter:{draw:()=>n("winter-bg")}},x=(e,t)=>{const a=Object.keys(t),n=Math.floor(e/10)%a.length;return t[a[e>=30?n%3:n]]}},"./src/compositions/background.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{BACKGROUND_ASSET_LIST:()=>x,autumBgDrawing:()=>_,createBackground:()=>s,defaultBgDrawing:()=>o,levelSelectBgDrawing:()=>d,loadDynamicBgAssets:()=>r,winterBgDrawing:()=>c});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");const x={summer:{BG_GROUP_IMGS:i.DEFAULT_BG_GROUP_IMGS,draw:o},autumn:{BG_GROUP_IMGS:i.AUTUMN_BG_GROUP_IMGS,draw:_},winter:{BG_GROUP_IMGS:i.WINTER_BG_GROUP_IMGS,draw:c}};async function s(e,t,a,i,x){return{...{...x(e,t,a,{...await(0,n.syncLoadingImages)(i)})}}}const r=(e,t)=>{const a=Object.keys(t);let n=Math.floor(e/10)%a.length;return e>=30&&(n%=3),{...t[a[n]]}};function o(e,t,a,n){return{draw:()=>{e.drawImage(n?.DEFAULT_BACKGROUND_1,0,0,t,a),e.drawImage(n?.ASSETS_PATH_TOTEM,.6*t,a/6,t,a/2),e.drawImage(n?.ASSETS_PATH_FENCE,.4*-t,a/3,t,a/3),e.drawImage(n?.ASSETS_PATH_HILL,.25*-t,a/2,1.5*t,a/2)}}}function _(e,t,a,n){return{draw:()=>{e.drawImage(n.AUTUMN_BACKGROUND_1,0,0,t,a),e.drawImage(n.AUTUMN_PILLAR_1,.38*t,a/6,t/1.2,a/2),e.drawImage(n.AUTUMN_FENCE_1,.4*-t,a/4,t,a/2),e.drawImage(n.AUTUMN_HILL_1,.25*-t,a/2,1.5*t,a/2)}}}function c(e,t,a,n){return{draw:()=>{e.drawImage(n.WINTER_BACKGROUND_1,0,0,t,a),e.drawImage(n.WINTER_PILLAR_1,.38*t,a/6,t/1.2,a/2),e.drawImage(n.WINTER_FENCE_1,.4*-t,a/4,t,a/2),e.drawImage(n.WINTER_HILL_1,.25*-t,a/2,1.5*t,a/2)}}}function d(e,t,a,n){return{draw:()=>{e.drawImage(n?.LEVEL_SELECTION_BACKGROUND,0,0,t,a)}}}},"./src/compositions/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{BACKGROUND_ASSET_LIST:()=>n.BACKGROUND_ASSET_LIST,BACKGROUND_HTML_LIST:()=>i.BACKGROUND_HTML_LIST,autumBgDrawing:()=>n.autumBgDrawing,createBackground:()=>n.createBackground,createLevelObject:()=>x.createLevelObject,defaultBgDrawing:()=>n.defaultBgDrawing,getdefaultCloudBtnsPos:()=>x.getdefaultCloudBtnsPos,levelSelectBgDrawing:()=>n.levelSelectBgDrawing,loadBackground:()=>i.loadBackground,loadDynamicBgAssets:()=>n.loadDynamicBgAssets,loadLevelImages:()=>x.loadLevelImages,winterBgDrawing:()=>n.winterBgDrawing});var n=a("./src/compositions/background.ts"),i=a("./src/compositions/background-html.ts"),x=a("./src/compositions/level-config.ts")},"./src/compositions/level-config.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{createLevelObject:()=>o,getdefaultCloudBtnsPos:()=>s,loadLevelImages:()=>r});var n=a("./src/constants/index.ts"),i=a("./src/common/index.ts");const x=e=>n.SPECIAL_LEVELS.includes(e),s=e=>[[[e.width/10,e.height/10],[e.width/2.5,e.height/10],[e.width/3+e.width/2.8,e.height/10],[e.width/10,e.height/3],[e.width/2.5,e.height/3],[e.width/3+e.width/2.8,e.height/3],[e.width/10,e.height/1.8],[e.width/2.5,e.height/1.8],[e.width/3+e.width/2.8,e.height/1.8],[e.width/2.5,e.height/1.3]]],r=()=>(0,i.syncLoadingImages)({balloonImg:n.MAP_ICON_IMG,specialBloonImg:n.MAP_ICON_SPECIAL_IMG,lockImg:n.MAP_LOCK_IMG,starImg:n.STAR_IMG});async function o(e,t,a,n){const i=x(a);return{...{x:e,y:t,index:a,isSpecial:i,...n,balloonImg:i?n?.specialBloonImg:n?.balloonImg}}}},"./src/constants/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{ASSETS_PATH_BG_01:()=>G,ASSETS_PATH_FENCE:()=>V,ASSETS_PATH_HILL:()=>W,ASSETS_PATH_MONSTER_IDLE:()=>Y,ASSETS_PATH_STONE_PINK_BG:()=>U,ASSETS_PATH_TOTEM:()=>H,AUDIO_ARE_YOU_SURE:()=>N,AUDIO_INTRO:()=>z,AUDIO_LEVEL_LOSE:()=>j,AUDIO_LEVEL_WIN:()=>R,AUDIO_PATH_BTN_CLICK:()=>M,AUDIO_PATH_CHEERING_FUNC:()=>D,AUDIO_PATH_CORRECT_STONE:()=>k,AUDIO_PATH_EATS:()=>A,AUDIO_PATH_MONSTER_DISSAPOINTED:()=>P,AUDIO_PATH_MONSTER_SPIT:()=>C,AUDIO_PATH_ON_DRAG:()=>O,AUDIO_PATH_POINTS_ADD:()=>L,AUDIO_TIMEOUT:()=>B,AUDIO_URL_PRELOAD:()=>F,AUTUMN_BACKGROUND_1:()=>X,AUTUMN_BG_GROUP_IMGS:()=>Be,AUTUMN_FENCE_1:()=>J,AUTUMN_HILL_1:()=>q,AUTUMN_PILLAR_1:()=>K,AUTUMN_SIGN_1:()=>Z,BACK_BTN_IMG:()=>Pe,BAR_EMPTY:()=>oe,BAR_FULL:()=>_e,ButtonClick:()=>u,CANCEL_BTN_IMG:()=>ke,CLOUD_6:()=>me,CLOUD_7:()=>ge,CLOUD_8:()=>ve,DEFAULT_BACKGROUND_1:()=>$,DEFAULT_BG_GROUP_IMGS:()=>Ne,DevelopmentServer:()=>y,EndScene1:()=>T,FONT_BASE_PATH:()=>I,FeedbackAudio:()=>l,FirebaseUserClicked:()=>n,FirebaseUserInstall:()=>i,GAMEPLAY_BG_GROUP_IMGS:()=>Oe,GameScene1:()=>E,IntroMusic:()=>h,IsCached:()=>c,LEVEL_INDICATOR:()=>re,LEVEL_SELECTION_BACKGROUND:()=>ie,LevelEndAudio:()=>g,LevelSelection1:()=>S,MAP_BTN_IMG:()=>Se,MAP_ICON_IMG:()=>Ee,MAP_ICON_SPECIAL_IMG:()=>Te,MAP_LOCK_IMG:()=>Ie,MonsterAudio:()=>d,NEXT_BTN_IMG:()=>Ce,NativePlayButton:()=>r,PAUSE_BTN_IMG:()=>we,PIN_STAR_1:()=>ue,PIN_STAR_2:()=>be,PIN_STAR_3:()=>pe,PLAY_BTN_IMG:()=>ye,POPUP_BG_IMG:()=>Me,PROMPT_PLAY_BUTTON:()=>se,PROMPT_TEXT_BG:()=>xe,PWAInstallStatus:()=>x,PhraseAudio:()=>m,PreviousPlayedLevel:()=>o,PromptAudio:()=>f,RETRY_BTN_IMG:()=>Le,ROTATING_CLOCK:()=>de,SCENE_NAME_GAME_PLAY:()=>Fe,SCENE_NAME_LEVEL_END:()=>Ue,SCENE_NAME_LEVEL_SELECT:()=>Re,SCENE_NAME_START:()=>je,SPECIAL_LEVELS:()=>He,STAR_IMG:()=>Ae,StartScene1:()=>w,StoneMusic:()=>p,StoreMonsterPhaseNumber:()=>_,TIMER_EMPTY:()=>ce,TIMER_FULL:()=>le,TUTORIAL_HAND:()=>he,TimeOver:()=>b,UrlSubstring:()=>v,UserCancelled:()=>s,WINTER_BACKGROUND_1:()=>Q,WINTER_BG_GROUP_IMGS:()=>ze,WINTER_FENCE_1:()=>ae,WINTER_HILL_1:()=>ee,WINTER_PILLAR_1:()=>ne,WINTER_SIGN_1:()=>te,WIN_BG:()=>fe,YES_BTN_IMG:()=>De});const n="user_clicked",i="user_installed",x="pwa_installed_status",s="user_cancel_installation",r="native_playbutton_clicked",o="storePreviousPlayedLevel",_="storeMonsterPhaseNumber",c="is_cached",d="monster_audio",l="feedback_audio",h="intro_music",f="prompt_audio",u="button_click",b="time_over",p="stone_music",m="phrase_audio",g="level_end_audio",v="/feedthemonster",y="https://feedthemonsterdev.curiouscontent.org",w="StartScene1",S="LevelSelection1",E="GameScene1",T="EndScene1",I="./assets/fonts/",A="./assets/audios/Eat.mp3",C="./assets/audios/MonsterSpit.mp3",P="./assets/audios/Disapointed-05.mp3",L="assets/audios/PointsAdd.wav",k="assets/audios/CorrectStoneFinal.mp3",D=e=>`./assets/audios/Cheering-0${e}.mp3`,M="./assets/audios/ButtonClick.mp3",O="./assets/audios/onDrag.mp3",N="./assets/audios/are-you-sure.mp3",B="./assets/audios/timeout.mp3",z="./assets/audios/intro.mp3",j="./assets/audios/LevelLoseFanfare.mp3",R="./assets/audios/LevelWinFanfare.mp3",F=["./assets/audios/intro.mp3","./assets/audios/Cheering-02.mp3","./assets/audios/Cheering-03.mp3","./assets/audios/Cheering-01.mp3","./assets/audios/onDrag.mp3","./assets/audios/timeout.mp3","./assets/audios/LevelWinFanfare.mp3","./assets/audios/LevelLoseFanfare.mp3","./assets/audios/ButtonClick.mp3","./assets/audios/Monster Spits wrong stones-01.mp3","./assets/audios/Disapointed-05.mp3","./assets/audios/MonsterSpit.mp3","./assets/audios/Eat.mp3","./assets/audios/PointsAdd.wav","./assets/audios/are-you-sure.mp3"],U="./assets/images/stone_pink.webp",H="./assets/images/Totem_v02_v01.webp",G="./assets/images/bg_v01.webp",W="./assets/images/hill_v01.webp",V="./assets/images/fence_v01.webp",Y="./assets/images/idle4.png",$="./assets/images/bg_v01.webp",X="./assets/images/Autumn_bg_v01.webp",q="./assets/images/Autumn_hill_v01.webp",K="./assets/images/Autumn_sign_v01.webp",Z="./assets/images/Autumn_sign_v01.webp",J="./assets/images/Autumn_fence_v01.webp",Q="./assets/images/Winter_bg_01.webp",ee="./assets/images/Winter_hill_v01.webp",te="./assets/images/Winter_sign_v01.webp",ae="./assets/images/Winter_fence_v01.webp",ne="./assets/images/Winter_sign_v01.webp",ie="./assets/images/map.webp",xe="./assets/images/promptTextBg.webp",se="./assets/images/promptPlayButton.webp",re="./assets/images/levels_v01.webp",oe="./assets/images/bar_empty_v01.webp",_e="./assets/images/bar_full_v01.webp",ce="./assets/images/timer_empty.webp",de="./assets/images/timer.webp",le="./assets/images/timer_full.png",he="./assets/images/tutorial_hand.webp",fe="./assets/images/WIN_screen_bg.webp",ue="./assets/images/pinStar1.webp",be="./assets/images/pinStar2.webp",pe="./assets/images/pinStar3.webp",me="./assets/images/cloud_01.png",ge="./assets/images/cloud_02.png",ve="./assets/images/cloud_03.png",ye="./assets/images/Play_button.webp",we="./assets/images/pause_v01.webp",Se="./assets/images/map_btn.webp",Ee="./assets/images/mapIcon.webp",Te="./assets/images/map_icon_monster_level_v01.webp",Ie="./assets/images/mapLock.webp",Ae="./assets/images/star.webp",Ce="./assets/images/next_btn.webp",Pe="./assets/images/back_btn.webp",Le="./assets/images/retry_btn.webp",ke="./assets/images/close_btn.webp",De="./assets/images/confirm_btn.webp",Me="./assets/images/popup_bg_v01.webp",Oe={ASSETS_PATH_TOTEM:H,DEFAULT_BACKGROUND_1:$,ASSETS_PATH_HILL:W,ASSETS_PATH_FENCE:V,ASSETS_PATH_MONSTER_IDLE:Y},Ne={DEFAULT_BACKGROUND_1:$,ASSETS_PATH_HILL:W,ASSETS_PATH_TOTEM:H,ASSETS_PATH_FENCE:V},Be={AUTUMN_BACKGROUND_1:X,AUTUMN_HILL_1:q,AUTUMN_PILLAR_1:K,AUTUMN_SIGN_1:Z,AUTUMN_FENCE_1:J},ze={WINTER_BACKGROUND_1:Q,WINTER_HILL_1:ee,WINTER_SIGN_1:te,WINTER_FENCE_1:ae,WINTER_PILLAR_1:ne},je="StartScene",Re="LevelSelection",Fe="GamePlay",Ue="LevelEnd",He=[5,13,20,30,42]},"./src/data/api-data.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{URL:()=>i,getData:()=>s,getFtmData:()=>x});var n=a("./src/common/index.ts");const i="./lang/"+n.lang+"/ftm_"+n.lang+".json";function x(){return fetch(i,{method:"GET",headers:{"Content-Type":"application/json"}}).then((e=>e.json().then((e=>e))))}async function s(){return await x()}},"./src/data/custom-fonts.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{customFonts:()=>n});const n={default:"Atma-SemiBold",english:"Atma-SemiBold",swahili:"Atma-SemiBold",wolof:"Atma-SemiBold",tajik:"Atma-SemiBold",marathi:"Atma-SemiBold",amharic:"Atma-SemiBold",punjabi:"Atma-SemiBold",tamil:"Atma-SemiBold",sepedi:"Atma-SemiBold",gujarati:"Atma-SemiBold",telugu:"Atma-SemiBold",tsonga:"Atma-SemiBold",malay:"Atma-SemiBold",ndebele:"Atma-SemiBold",venda:"Atma-SemiBold",siswati:"Atma-SemiBold",tswana:"Atma-SemiBold",thai:"Atma-SemiBold",fula:"Atma-SemiBold",farsi:"Atma-SemiBold",burmese:"Atma-SemiBold",bengali:"Atma-SemiBold",Azerbaijani:"Atma-SemiBold",Sesotho:"Atma-SemiBold",Georgian:"Atma-SemiBold",BrazilianPortuguese:"Atma-SemiBold",Somali:"Atma-SemiBold",Hausa:"Atma-SemiBold",Igbo:"Atma-SemiBold",HatianCreole:"Atma-SemiBold",Oromo:"Atma-SemiBold",Luganda:"Atma-SemiBold",Yoruba:"Atma-SemiBold",Khmer:"Atma-SemiBold",Javanese:"Atma-SemiBold",Urdu:"Atma-SemiBold",Kinyarwanda:"Atma-SemiBold",Shona:"Atma-SemiBold",Kurdish:"Atma-SemiBold",French:"Atma-SemiBold",isiXhosa:"Atma-SemiBold",Afrikaans:"Atma-SemiBold",Nepali:"Atma-SemiBold",Ukrainian:"Atma-SemiBold",Hindi:"Atma-SemiBold",Tagalog:"Atma-SemiBold",Vietnamese:"Atma-SemiBold",Pashto:"Atma-SemiBold",Twi:"Atma-SemiBold",Arabic:"Atma-SemiBold"}},"./src/data/data-modal.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{DataModal:()=>n,FeedbackAudios:()=>s,FeedbackTexts:()=>x,FoilStone:()=>_,LevelMeta:()=>l,Levels:()=>r,OtherAudios:()=>i,Prompt:()=>d,Puzzles:()=>o,TargetStone:()=>c});class n{title;otherAudios;levels;FeedbackTexts;FeedbackAudios;rightToLeft;majVersion;minVersion;version;constructor(e,t,a,n,r,o,_,c,d){this.title=e,this.otherAudios=new i(t),this.levels=this.getLevels(a),this.FeedbackTexts=new x(n),this.FeedbackAudios=new s(o),this.rightToLeft=r,this.majVersion=_,this.minVersion=c,this.version=d}getLevels(e){let t=[];for(let a=0;a<e.length;a++)t.push(new r(e[a]));return t}}class i{selctYourPlayer;watchMeGrow;areYouSure;constructor(e){this.selctYourPlayer=e["Select your player"],this.watchMeGrow=e["Watch me grow"],this.areYouSure=e["Are you sure"]}}class x{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class s{fantastic;great;amazing;constructor(e){e.length>=1&&(this.fantastic=e[0]),e.length>=2&&(this.great=e[1]),e.length>=3&&(this.amazing=e[2])}}class r{puzzles;levelMeta;levelNumber;constructor(e){this.puzzles=this.getPuzzleData(e),this.levelMeta=new l(e.LevelMeta),this.levelNumber=e.LevelNumber}getPuzzleData(e){let t=[];return e.Puzzles.map(((e,a)=>{t.push(new o(e))})),t}}class o{segmentNumber;prompt;foilStones;targetStones;constructor(e){this.segmentNumber=e.SegmentNumber,this.prompt=new d(e.prompt),this.foilStones=this.getFoilStones(e),this.targetStones=this.getTargetStones(e)}getFoilStones(e){let t=[];return e.foilstones.map(((e,a)=>{t.push(e.StoneText)})),t}getTargetStones(e){let t=[];return e.targetstones.map(((e,a)=>{t.push(e.StoneText)})),t}}class _{stoneText;constructor(e){this.stoneText=e}}class c{stoneText;constructor(){this.stoneText}}class d{promptText;promptAudio;constructor(e){this.promptText=e.PromptText,this.promptAudio=e.PromptAudio}}class l{promptFadeOut;letterGroup;levelNumber;protoType;levelType;constructor(e){this.promptFadeOut=e.PromptFadeout,this.letterGroup=e.LetterGroup,this.levelNumber=e.LevelNumber,this.protoType=e.PromptType,this.levelType=e.LevelType}}},"./src/data/game-score.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{GameScore:()=>i});var n=a("./src/common/index.ts");class i{static currentlanguage=n.lang;static setGameLevelScore(e,t){let a=this.calculateStarCount(t),n={levelName:e.levelMeta.levelType,levelNumber:e.levelMeta.levelNumber,score:t,starCount:a};this.setTotalStarCount(a);let i=this.getAllGameLevelInfo(),x=-1;for(let e=0;e<i.length;e++)if(i[e].levelNumber===n.levelNumber){x=e;break}-1!==x&&n.score>i[x].score?i[x]=n:i.push(n),localStorage.setItem(this.currentlanguage+"gamePlayedInfo",JSON.stringify(i))}static getAllGameLevelInfo(){const e=localStorage.getItem(this.currentlanguage+"gamePlayedInfo");return null==e?[]:JSON.parse(e)}static setTotalStarCount(e){let t=this.getTotalStarCount()+e;localStorage.setItem(this.currentlanguage+"totalStarCount",t)}static getTotalStarCount(){const e=localStorage.getItem(this.currentlanguage+"totalStarCount");return null==e?0:parseInt(e)}static calculateStarCount(e){return 200==e?1:300==e||400==e?2:500==e?3:0}static getDatafromStorage(){return n.Debugger.DebugMode?JSON.parse(localStorage.getItem(n.lang+"ProfileDebug")||"{}"):JSON.parse(localStorage.getItem(n.lang+"Profile")||"{}")}}},"./src/data/i18-font-mapping.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{languageFontMapping:()=>n});const n={english:"Consolas",swahili:"Consolas",wolof:"Consolas",tajik:"Consolas",marathi:"Consolas",amharic:"Consolas",punjabi:"Consolas",tamil:"Consolas",sepedi:"Consolas",gujarati:"Consolas",telugu:"Consolas",tsonga:"Consolas",malay:"Consolas",ndebele:"Consolas",venda:"NotoSans-Regular",siswati:"Consolas",tswana:"Consolas",thai:"Consolas",fula:"Consolas",farsi:"Consolas",burmese:"Consolas",bengali:"Consolas",Azerbaijani:"NotoSans-Regular",Sesotho:"Consolas",Georgian:"Consolas",BrazilianPortuguese:"Consolas",Somali:"Consolas",Hausa:"NotoSans-Regular",Igbo:"Consolas",HatianCreole:"Consolas",Oromo:"Consolas",Luganda:"Consolas",Yoruba:"Consolas",Khmer:"Consolas",Javanese:"Consolas",Urdu:"Consolas",Kinyarwanda:"Consolas",Shona:"Consolas",Kurdish:"Consolas",French:"Consolas",isiXhosa:"Consolas",Afrikaans:"Consolas",Nepali:"Consolas",Ukrainian:"Consolas",Hindi:"Consolas",Tagalog:"Consolas",Vietnamese:"NotoSans-Regular",Pashto:"Consolas",Twi:"NotoSans-Regular",Arabic:"Adobe-Arabic-Bold"}},"./src/data/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{DataModal:()=>i.DataModal,FeedbackAudios:()=>i.FeedbackAudios,FeedbackTexts:()=>i.FeedbackTexts,FoilStone:()=>i.FoilStone,GameScore:()=>x.GameScore,LevelMeta:()=>i.LevelMeta,Levels:()=>i.Levels,OtherAudios:()=>i.OtherAudios,Prompt:()=>i.Prompt,Puzzles:()=>i.Puzzles,TargetStone:()=>i.TargetStone,URL:()=>n.URL,customFonts:()=>r.customFonts,getData:()=>n.getData,getFtmData:()=>n.getFtmData,languageFontMapping:()=>s.languageFontMapping});var n=a("./src/data/api-data.ts"),i=a("./src/data/data-modal.ts"),x=a("./src/data/game-score.ts"),s=a("./src/data/i18-font-mapping.ts"),r=a("./src/data/custom-fonts.ts")},"./src/events/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{EventManager:()=>i});var n=a("./src/common/index.ts");class i{handler;stoneDropCallbackHandler;loadPuzzleCallbackHandler;constructor(e){this.handler=e,this.stoneDropCallbackHandler=e.stoneDropCallbackHandler,this.loadPuzzleCallbackHandler=e.loadPuzzleCallbackHandler,document.addEventListener(n.STONEDROP,this.handleStoneDroppedEvent,!1),document.addEventListener(n.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}handleStoneDroppedEvent=e=>{this.stoneDropCallbackHandler(e)};handleLoadPuzzleEvent=e=>{this.loadPuzzleCallbackHandler(e)};unregisterEventListener=()=>{document.removeEventListener(n.STONEDROP,this.handleStoneDroppedEvent,!1),document.removeEventListener(n.LOADPUZZLE,this.handleLoadPuzzleEvent,!1)}}},"./src/gamepuzzles/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{WordPuzzleLogic:()=>n.default});var n=a("./src/gamepuzzles/wordPuzzleLogic.ts")},"./src/gamepuzzles/wordPuzzleLogic.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{default:()=>n});class n{levelData;puzzleNumber;groupedLetters;droppedLetters;groupedObj;droppedHistory;hideListObj;constructor(e,t){this.levelData=e,this.puzzleNumber=t,this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={}}getTargetWord(){return this.levelData.puzzles[this.puzzleNumber]?.prompt?.promptText}getValues(){return{groupedLetters:this.groupedLetters,droppedLetters:this.droppedLetters,groupedObj:{...this.groupedObj},droppedHistory:{...this.droppedHistory},hideListObj:{...this.hideListObj}}}checkIsWordPuzzle(){return"Word"===this.levelData?.levelMeta?.levelType}updatePuzzleLevel(e){this.clearAllValues(),this.puzzleNumber=e}clearPickedUp(){this.groupedLetters="",this.groupedObj={},this.hideListObj={...this.droppedHistory}}clearAllValues(){this.groupedLetters="",this.droppedLetters="",this.groupedObj={},this.droppedHistory={},this.hideListObj={},this.puzzleNumber=0}validateShouldHideLetter(e){return!this.hideListObj[e]}handleCheckHoveredStone(e,t){const a=this.groupedLetters,n=this.getTargetWord();if(!this.droppedLetters.length&&n[0]!==a[0])return!1;const i=!a.includes(e),x=!this.groupedObj[t];return n.includes(`${this.droppedLetters}${a}${e}`)&&(i||x)}validateFedLetters(){const e=this.getTargetWord();return this.droppedLetters===e.substring(0,this.droppedLetters.length)}validateWordPuzzle(){const e=this.getTargetWord();return this.droppedLetters===e}setGroupToDropped(){this.droppedLetters=`${this.droppedLetters}${this.groupedLetters}`,this.droppedHistory={...this.droppedHistory,...this.groupedObj}}setPickUpLetter(e,t){this.hideListObj={...this.hideListObj,...this.groupedObj},this.groupedLetters=`${this.groupedLetters}${e}`,this.groupedObj[t]=e}}},"./src/sceneHandler/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{SceneHandler:()=>r});var n=a("./src/scenes/index.ts"),i=a("./src/data/index.ts"),x=a("./src/common/index.ts"),s=a("./src/constants/index.ts");class r{canvas;data;width;height;startScene;levelSelectionScene;gameplayScene;levelEndScene;canavsElement;context;static SceneName;loadingScreen;loading=!1;lastTime=0;toggleBtn;titleTextElement;constructor(e,t){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.toggleBtn=document.getElementById("toggle-btn"),this.titleTextElement=document.getElementById("title"),window.addEventListener("beforeinstallprompt",this.handleInstallPrompt),this.context=this.canavsElement.getContext("2d"),this.startScene=new n.StartScene(e,t,this.switchSceneToLevelSelection),r.SceneName=s.StartScene1,this.loadingScreen=new n.LoadingScene(this.width,this.height,this.removeLoading),this.startAnimationLoop()}startAnimationLoop(){const e=t=>{this.animation(t),requestAnimationFrame(e)};requestAnimationFrame(e)}devToggle(){this.toggleBtn.addEventListener("click",(()=>{this.toggleBtn.classList.toggle("on"),this.toggleBtn.classList.contains("on")?(x.Debugger.DebugMode=!0,this.toggleBtn.innerText="Dev"):(x.Debugger.DebugMode=!1,this.toggleBtn.innerText="Dev")}))}checkMonsterPhaseUpdation(){let e=i.GameScore.getTotalStarCount(),t=Math.floor(e/12)+1||1;return t<=4?t:4}animation=e=>{let t=e-this.lastTime;this.lastTime=e,this.context.clearRect(0,0,this.width,this.height),this.loading&&this.loadingScreen.draw(t),r.SceneName===s.StartScene1?this.startScene.animation(t):r.SceneName===s.LevelSelection1?this.levelSelectionScene.drawLevelSelection():r.SceneName===s.GameScene1?this.gameplayScene.draw(t):r.SceneName===s.EndScene1&&this.levelEndScene.draw(t)};switchSceneToGameplay=(e,t)=>{this.showLoading(),this.dispose(t);let a=this.data.majVersion&&this.data.minVersion?this.data.majVersion.toString()+"."+this.data.minVersion.toString():"";setTimeout((()=>{this.gameplayScene=new n.GameplayScene(this.canvas,e.currentLevelData,this.checkMonsterPhaseUpdation(),this.data.FeedbackTexts,this.data.rightToLeft,this.switchSceneToEndLevel,e.selectedLevelNumber,(()=>{this.switchSceneToLevelSelection(s.SCENE_NAME_GAME_PLAY)}),this.switchSceneToGameplay,a,this.data.FeedbackAudios),r.SceneName=s.GameScene1}),800)};switchSceneToEndLevel=(e,t,a,i)=>{this.loadingScreen.initCloud(),setTimeout((()=>{this.dispose(s.SCENE_NAME_GAME_PLAY),this.levelEndScene=new n.LevelEndScene(this.canvas,this.height,this.width,this.context,e,a,this.switchSceneToGameplay,this.switchSceneToLevelSelection,this.data,t),r.SceneName=s.EndScene1}),i?0:4e3)};switchSceneToLevelSelection=e=>{this.showLoading(),this.dispose(e),setTimeout((()=>{this.levelSelectionScene=new n.LevelSelectionScreen(this.canvas,this.data,this.switchSceneToGameplay),r.SceneName=s.LevelSelection1,this.titleTextElement.style.display="none"}),800)};dispose=e=>{e==s.SCENE_NAME_LEVEL_SELECT?this.levelSelectionScene.dispose():e===s.SCENE_NAME_GAME_PLAY?this.gameplayScene.dispose():e===s.SCENE_NAME_START?this.startScene.dispose():e==s.SCENE_NAME_LEVEL_END&&this.levelEndScene.dispose()};showLoading=()=>{this.loadingScreen.initCloud(),this.loading=!0,document.getElementById("loading").style.zIndex="10"};removeLoading=()=>{document.getElementById("loading").style.zIndex="-1",this.loading=!1};handleInstallPrompt=e=>{e.preventDefault(),localStorage.setItem(s.PWAInstallStatus,"false")}}},"./src/scenes/gameplay-scene.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{GameplayScene:()=>c});var n=a("./src/components/index.ts"),i=a("./src/components/popups/pause-popup.ts"),x=a("./src/common/index.ts"),s=a("./src/data/index.ts"),r=a("./src/Firebase/firebase-integration.ts"),o=a("./src/constants/index.ts"),_=a("./src/gamepuzzles/index.ts");class c{width;height;monster;jsonVersionNumber;canvas;levelData;timerTicking;promptText;pauseButton;tutorial;puzzleData;id;context;levelIndicators;stonesCount=1;monsterPhaseNumber;pickedStone;puzzleStartTime;showTutorial;feedBackTexts;isPuzzleCompleted;rightToLeft;imagesLoaded=!1;switchSceneToEnd;levelNumber;loadedImages;stoneHandler;counter=0;images;handler;pickedStoneObject;pausePopup;isPauseButtonClicked=!1;background;feedBackTextCanavsElement;feedbackTextEffects;isGameStarted=!1;time=0;score=0;switchToLevelSelection;reloadScene;audioPlayer;firebaseIntegration;startTime;puzzleTime;isDisposing;resetAnimationID;trailParticles;clickTrailToggle;hasFed;wordPuzzleLogic;riveMonsterElement;constructor(e,t,a,s,c,d,l,h,f,u,b){this.width=e.width,this.height=e.height,this.rightToLeft=c,this.canvas=e,this.context=this.canvas.getContext("2d",{willReadFrequently:!0}),this.trailParticles=new n.TrailEffect(e),this.monsterPhaseNumber=a||1,this.levelData=t,this.switchSceneToEnd=d,this.levelNumber=l,this.switchToLevelSelection=h,this.reloadScene=f,this.jsonVersionNumber=u,this.startGameTime(),this.startPuzzleTime(),this.isDisposing=!1,this.pauseButton=new n.PauseButton(this.context,this.canvas),this.timerTicking=new n.TimerTicking(this.width,this.height,this.loadPuzzle),this.stoneHandler=new n.StoneHandler(this.context,this.canvas,this.counter,this.levelData,b,this.timerTicking),this.tutorial=new n.Tutorial(this.context,e.width,e.height),this.riveMonsterElement=document.getElementById("rivecanvas"),this.promptText=new n.PromptText(this.width,this.height,this.levelData.puzzles[this.counter],this.levelData,this.rightToLeft),this.levelIndicators=new n.LevelIndicators(this.context,this.canvas,0),this.levelIndicators.setIndicators(this.counter),this.monster=new n.Monster(this.canvas,this.monsterPhaseNumber),this.pausePopup=new i.default(this.canvas,this.resumeGame,this.switchToLevelSelection,this.reloadScene,{currentLevelData:t,selectedLevelNumber:l}),this.firebaseIntegration=new r.FirebaseIntegration,this.feedbackTextEffects=new n.FeedbackTextEffects,this.audioPlayer=new n.AudioPlayer,this.handler=document.getElementById("canvas"),this.puzzleData=t.puzzles,this.feedBackTexts=s,this.images={profileMonster:o.ASSETS_PATH_MONSTER_IDLE},(0,x.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}));var p=this.levelData.levelMeta.levelNumber;x.Debugger.DebugMode?localStorage.setItem(o.PreviousPlayedLevel+x.lang+"Debug",p):localStorage.setItem(o.PreviousPlayedLevel+x.lang,p),this.addEventListeners(),this.resetAnimationID=0,this.setupBg(),this.trailParticles?.init(),this.clickTrailToggle=!1,this.hasFed=!1,this.riveMonsterElement.style.zIndex="4",this.wordPuzzleLogic=new _.WordPuzzleLogic(t,this.counter)}setupBg=()=>{this.background=new n.BackgroundComponent(this.levelData.levelMeta.levelNumber),this.background.loadBackground()};resumeGame=()=>{this.addEventListeners(),this.isPauseButtonClicked=!1,this.stoneHandler.setGamePause(!1),this.pausePopup.dispose()};getRandomFeedBackText(e){const t=Object.keys(this.feedBackTexts)[e];return this.feedBackTexts[t]}getRandomInt(e,t){const a=Object.values(this.feedBackTexts).filter((e=>null!=e)).length-1;return Math.floor(Math.random()*(a-e+1))+e}handleMouseUp=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,n=e.clientY-t.top;if(Math.sqrt((a-this.monster.x-this.canvas.width/4)**2+(n-this.monster.y-this.canvas.height/2.2)**2)<=100&&this.pickedStone){const{text:e}=this.pickedStone;switch(this.levelData.levelMeta.levelType){case"LetterOnly":case"LetterInWord":this.letterPuzzle(e);break;case"Word":case"SoundWord":this.wordPuzzle(this.pickedStone)}}else if(this.pickedStone&&this.pickedStoneObject&&this.pickedStone.text&&"number"==typeof this.pickedStoneObject.origx&&"number"==typeof this.pickedStoneObject.origy){const e=50,t=this.width/2;this.pickedStone.x=this.pickedStone.text.length<=3&&this.pickedStoneObject.origx<e&&this.pickedStoneObject.origx<t?this.pickedStoneObject.origx+25:this.pickedStoneObject.origx,this.pickedStone.y=this.pickedStoneObject.origy}this.pickedStone=null,this.wordPuzzleLogic.clearPickedUp(),this.clickTrailToggle=!1};handleMouseDown=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,n=e.clientY-t.top;if(this.wordPuzzleLogic.checkIsWordPuzzle())this.setPickedUp(a,n);else for(let e of this.stoneHandler.foilStones){if(Math.sqrt((a-e.x)**2+(n-e.y)**2)<=40){this.pickedStoneObject=e,this.pickedStone=e,this.audioPlayer.playAudio(o.AUDIO_PATH_ON_DRAG);break}}this.clickTrailToggle=!0};setPickedUp(e,t){const a=this.stoneHandler.handlePickStoneUp(e,t);a&&(this.pickedStoneObject=a,this.pickedStone=a,this.audioPlayer.playAudio(o.AUDIO_PATH_ON_DRAG),"Word"===this.levelData?.levelMeta?.levelType&&this.wordPuzzleLogic.setPickUpLetter(a?.text,a?.foilStoneIndex))}handleMouseMove=e=>{let t=e.clientX,a=e.clientY;if(this.pickedStone){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const n=this.stoneHandler.handleMovingStoneLetter(this.pickedStone,e.clientX,e.clientY);if(this.pickedStone=n,t=n.x,a=n.y,this.wordPuzzleLogic.checkIsWordPuzzle()){const e=this.stoneHandler.handleHoveringToAnotherStone(t,a,((e,t)=>this.wordPuzzleLogic.handleCheckHoveredStone(e,t)));e&&(this.wordPuzzleLogic.setPickUpLetter(e?.text,e?.foilStoneIndex),this.pickedStone=this.stoneHandler.resetStonePosition(this.width,this.pickedStone,this.pickedStoneObject),this.pickedStoneObject=e,this.pickedStone=e)}}else{let n=this.canvas.getBoundingClientRect();const i=e.clientX-n.left,x=e.clientY-n.top;this.monster.changeToDragAnimation(),this.pickedStone.x=i,this.pickedStone.y=x,t=i,a=x}this.monster.changeToDragAnimation()}this.clickTrailToggle&&this.trailParticles?.addTrailParticlesOnMove(t,a)};handleMouseClick=e=>{let t=this.canvas.getBoundingClientRect();const a=e.clientX-t.left,n=e.clientY-t.top;this.monster.onClick(a,n)&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1)),this.pauseButton.onClick(a,n)&&(this.audioPlayer.playButtonClickSound(),this.pauseGamePlay()),this.promptText.onClick(a,n)&&this.promptText.playSound()};handleTouchStart=e=>{const t=e.touches[0];this.handleMouseDown({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.resetParticles()};handleTouchMove=e=>{const t=e.touches[0];this.handleMouseMove({clientX:t.clientX,clientY:t.clientY}),this.trailParticles?.addTrailParticlesOnMove(t.clientX,t.clientY)};handleTouchEnd=e=>{const t=e.changedTouches[0];this.handleMouseUp({clientX:t.clientX,clientY:t.clientY}),this.hasFed||this.monster.changeToIdleAnimation(),this.trailParticles?.resetParticles()};draw(e){this.isGameStarted||this.isPauseButtonClicked||(this.time=this.time+e,this.time>=5e3&&(this.isGameStarted=!0,this.time=0,this.tutorial.setPlayMonsterClickAnimation(!1))),this.pauseButton.draw(),this.levelIndicators.draw(),this.promptText.draw(e),this.timerTicking.draw(),this.trailParticles?.draw(),this.isPauseButtonClicked&&this.isGameStarted&&(this.handleStoneLetterDrawing(e),this.pausePopup.draw()),this.isPauseButtonClicked||this.isGameStarted||0==this.counter&&this.tutorial.clickOnMonsterTutorial(e),this.isPauseButtonClicked&&!this.isGameStarted&&this.pausePopup.draw(),!this.isPauseButtonClicked&&this.isGameStarted&&this.handleStoneLetterDrawing(e)}handleStoneLetterDrawing(e){if(this.wordPuzzleLogic.checkIsWordPuzzle()){const{groupedObj:t}=this.wordPuzzleLogic.getValues();this.stoneHandler.drawWordPuzzleLetters(e,(e=>this.wordPuzzleLogic.validateShouldHideLetter(e)),t)}else this.stoneHandler.draw(e)}addEventListeners(){this.handler.addEventListener(x.MOUSEUP,this.handleMouseUp,!1),this.handler.addEventListener(x.MOUSEMOVE,this.handleMouseMove,!1),this.handler.addEventListener(x.MOUSEDOWN,this.handleMouseDown,!1),this.handler.addEventListener(x.TOUCHSTART,this.handleTouchStart,!1),this.handler.addEventListener(x.TOUCHMOVE,this.handleTouchMove,!1),this.handler.addEventListener(x.TOUCHEND,this.handleTouchEnd,!1),this.handler.addEventListener(x.CLICK,this.handleMouseClick,!1),document.addEventListener(x.VISIBILITY_CHANGE,this.handleVisibilityChange,!1)}removeEventListeners(){this.handler.removeEventListener(x.CLICK,this.handleMouseClick,!1),this.handler.removeEventListener("mouseup",this.handleMouseUp,!1),this.handler.removeEventListener("mousemove",this.handleMouseMove,!1),this.handler.removeEventListener("mousedown",this.handleMouseDown,!1),this.handler.removeEventListener("touchstart",this.handleTouchStart,!1),this.handler.removeEventListener("touchmove",this.handleTouchMove,!1),this.handler.removeEventListener("touchend",this.handleTouchEnd,!1)}loadPuzzle=e=>{this.removeEventListeners(),this.stonesCount=1;const t=Boolean(e);if(t&&this.logPuzzleEndFirebaseEvent(!1),this.counter+=1,this.isGameStarted=!1,this.counter===this.levelData.puzzles.length)this.levelIndicators.setIndicators(this.counter),this.logLevelEndFirebaseEvent(),s.GameScore.setGameLevelScore(this.levelData,this.score),this.switchSceneToEnd(s.GameScore.calculateStarCount(this.score),this.monsterPhaseNumber,this.levelNumber,t);else{const e=new CustomEvent(x.LOADPUZZLE,{detail:{counter:this.counter}});setTimeout((()=>{this.isDisposing||this.initNewPuzzle(e)}),t?0:4500)}};dispose=()=>{this.isDisposing=!0,this.audioPlayer.stopAllAudios(),this.monster.dispose(),this.timerTicking.dispose(),this.levelIndicators.dispose(),this.stoneHandler.dispose(),this.promptText.dispose(),document.removeEventListener(x.VISIBILITY_CHANGE,this.handleVisibilityChange,!1),this.removeEventListeners()};checkStoneDropped(e,t,a=!1){return this.hasFed=!0,this.stoneHandler.isStoneLetterDropCorrect(e,t,a)}letterPuzzle(e){const t=this.getRandomInt(0,1),a=this.checkStoneDropped(e,t);a&&this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(a)}wordPuzzle(e){this.audioPlayer.stopFeedbackAudio(),e.x=-999,e.y=-999;const t=this.getRandomInt(0,1);this.hasFed=!0,this.wordPuzzleLogic.setGroupToDropped();const{droppedLetters:a}=this.wordPuzzleLogic.getValues(),n=this.wordPuzzleLogic.validateFedLetters();if(this.stoneHandler.processLetterDropFeedbackAudio(t,n,!0,a),n){if(this.wordPuzzleLogic.validateWordPuzzle())return this.handleCorrectStoneDrop(t),this.handleStoneDropEnd(n,"Word"),void(this.stonesCount=1);this.timerTicking.startTimer(),this.monster.changeToEatAnimation(),this.promptText.droppedStoneIndex("arabic"==x.lang?this.stonesCount:a.length),this.stonesCount++,this.resetToIdleAnimation((()=>{this.monster.changeToIdleAnimation(),this.hasFed=!1}),2e3)}else this.handleStoneDropEnd(n,"Word"),this.stonesCount=1}resetToIdleAnimation(e,t){void 0!==this.resetAnimationID&&clearTimeout(this.resetAnimationID),this.resetAnimationID=setTimeout(e,t)}handleStoneDropEnd(e,t=null){this.logPuzzleEndFirebaseEvent(e,t),this.dispatchStoneDropEvent(e),this.loadPuzzle()}handleCorrectStoneDrop=e=>{this.score+=100,this.feedbackTextEffects.wrapText(this.getRandomFeedBackText(e))};dispatchStoneDropEvent(e){const t=new CustomEvent(x.STONEDROP,{detail:{isCorrect:e}});document.dispatchEvent(t)}initNewPuzzle(e){this.monster.changeToIdleAnimation(),this.removeEventListeners(),this.isGameStarted=!1,this.time=0,this.wordPuzzleLogic.updatePuzzleLevel(e?.detail?.counter),this.pickedStone=null,document.dispatchEvent(e),this.addEventListeners(),this.audioPlayer.stopAllAudios(),this.startPuzzleTime(),this.hasFed=!1}logPuzzleEndFirebaseEvent(e,t){let a=Date.now();const{droppedLetters:n}=this.wordPuzzleLogic.getValues(),i={cr_user_id:x.pseudoId,ftm_language:x.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:e?"success":"failure",level_number:this.levelData.levelMeta.levelNumber,puzzle_number:this.counter,item_selected:"Word"==t?null==n||null==n?"TIMEOUT":n:null==this.pickedStone||null==this.pickedStone?"TIMEOUT":this.pickedStone?.text,target:this.stoneHandler.getCorrectTargetStone(),foils:this.stoneHandler.getFoilStones(),response_time:(a-this.puzzleTime)/1e3};this.firebaseIntegration.sendPuzzleCompletedEvent(i)}logLevelEndFirebaseEvent(){let e=Date.now();const t={cr_user_id:x.pseudoId,ftm_language:x.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.jsonVersionNumber,success_or_failure:s.GameScore.calculateStarCount(this.score)>=3?"success":"failure",number_of_successful_puzzles:this.score/100,level_number:this.levelData.levelMeta.levelNumber,duration:(e-this.startTime)/1e3};this.firebaseIntegration.sendLevelCompletedEvent(t)}startGameTime(){this.startTime=Date.now()}startPuzzleTime(){this.puzzleTime=Date.now()}pauseGamePlay=()=>{this.removeEventListeners(),this.isPauseButtonClicked=!0,this.stoneHandler.setGamePause(!0),this.pausePopup.addListner(),this.audioPlayer.stopAllAudios()};handleVisibilityChange=()=>{this.audioPlayer.stopAllAudios(),this.pauseGamePlay()}}},"./src/scenes/index.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{GameplayScene:()=>n.GameplayScene,LevelEndScene:()=>x.LevelEndScene,LevelSelectionScreen:()=>i.LevelSelectionScreen,LoadingScene:()=>s.LoadingScene,StartScene:()=>r.StartScene,TestGameplayScene:()=>o.TestGameplayScene});var n=a("./src/scenes/gameplay-scene.ts"),i=a("./src/scenes/level-selection-scene.ts"),x=a("./src/scenes/levelend-scene.ts"),s=a("./src/scenes/loading-scene.ts"),r=a("./src/scenes/start-scene.ts"),o=a("./src/scenes/test-gameplay-scene.ts")},"./src/scenes/level-selection-scene.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{LevelSelectionScreen:()=>c});var n=a("./src/common/index.ts"),i=a("./src/components/index.ts"),x=a("./src/data/index.ts"),s=a("./src/Firebase/firebase-integration.ts"),r=a("./src/compositions/index.ts"),o=a("./src/constants/index.ts"),_=a("./src/components/buttons/index.ts");class c{canvas;data;width;height;canvasElement;context;levels;gameLevelData;callBack;audioPlayer;images;loadedImages;imagesLoaded=!1;xDown;yDown;previousPlayedLevelNumber;levelSelectionPageIndex=0;levelNumber;levelsSectionCount;unlockLevelIndex;majVersion;minVersion;firebaseIntegration;background;rightBtnSize;rightBtnX;rightBtnY;leftBtnSize;leftBtnX;leftBtnY;levelButtons;riveMonsterElement;constructor(e,t,a){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height;let r=this;this.callBack=a,this.levelsSectionCount=r.data.levels.length/10>Math.floor(r.data.levels.length/10)?Math.floor(r.data.levels.length/10)+1:Math.floor(r.data.levels.length/10),this.levels=[],this.firebaseIntegration=new s.FirebaseIntegration,this.init(),this.riveMonsterElement=document.getElementById("rivecanvas"),this.canvasElement=document.getElementById("canvas"),this.context=this.canvasElement.getContext("2d"),this.createLevelButtons(),this.gameLevelData=x.GameScore.getAllGameLevelInfo(),this.audioPlayer=new i.AudioPlayer,this.unlockLevelIndex=-1,this.previousPlayedLevelNumber=0|parseInt(n.Debugger.DebugMode?localStorage.getItem(o.PreviousPlayedLevel+n.lang+"Debug"):localStorage.getItem(o.PreviousPlayedLevel+n.lang)),null!=this.previousPlayedLevelNumber&&(this.levelSelectionPageIndex=10*Math.floor(this.previousPlayedLevelNumber/10)),this.setupBg(),this.riveMonsterElement.style.zIndex="-1",this.images={nextbtn:o.NEXT_BTN_IMG,backbtn:o.BACK_BTN_IMG},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,"visible"===document.visibilityState&&this.audioPlayer.playAudio(o.AUDIO_INTRO)})),this.addListeners(),this.rightBtnSize=10,this.rightBtnX=.73,this.rightBtnY=1.3,this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3}async init(){const e=await(0,x.getData)();this.majVersion=e.majversion,this.minVersion=e.minversion}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,{LEVEL_SELECTION_BACKGROUND:o.LEVEL_SELECTION_BACKGROUND},r.levelSelectBgDrawing)};async createLevelButtons(){const e=await(0,r.loadLevelImages)(),t=(0,r.getdefaultCloudBtnsPos)(this.canvas)[0].map(((t,a)=>(0,r.createLevelObject)(t[0],t[1],a+1,e)));this.levels=await Promise.all(t),this.levelButtons=this.levels.map((e=>new _.LevelBloonButton(this.canvas,this.context,{...e})))}addListeners(){document.getElementById("canvas").addEventListener("mousedown",this.handleMouseDown,!1),document.addEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").addEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").addEventListener("touchmove",this.handleTouchMove,!1)}pausePlayAudios=()=>{"visible"===document.visibilityState?this.audioPlayer.playAudio(o.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};getTouches(e){return e.touches||e.originalEvent.touches}handleTouchStart=e=>{const t=this.getTouches(e)[0];this.xDown=t.clientX,this.yDown=t.clientY};handleTouchMove=e=>{if(!this.xDown||!this.yDown)return;let t=e.touches[0].clientX,a=e.touches[0].clientY,n=this.xDown-t,i=this.yDown-a;Math.abs(n)>Math.abs(i)&&(n>0?this.levelSelectionPageIndex!=10*this.levelsSectionCount-10&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex+10,this.downButton(this.levelSelectionPageIndex)):(0!=this.levelSelectionPageIndex&&(this.levelSelectionPageIndex=this.levelSelectionPageIndex-10),this.downButton(this.levelSelectionPageIndex))),this.xDown=null,this.yDown=null};handleMouseDown=e=>{e.preventDefault();let t=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-t.left,n=e.clientY-t.top,i=(e,t=1.3)=>a>=e&&a<e+this.canvas.height/10&&n>this.canvas.height/t&&n<this.canvas.height/t+this.canvas.height/10,x=i(.7*this.canvas.width),s=i(this.canvas.width/10);if(s||x){const e=this.levelSelectionPageIndex;x&&e!=10*this.levelsSectionCount-10?(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=e+10,this.rightBtnSize=10.5,this.rightBtnY=1.299):s&&0!=e&&(this.audioPlayer.playButtonClickSound(),this.levelSelectionPageIndex=e-10,this.leftBtnSize=10.3,this.leftBtnY=1.299),this.downButton(this.levelSelectionPageIndex)}for(let e of this.levelButtons)e.onClick(a,n,this.levelSelectionPageIndex-1,this.unlockLevelIndex+1,(e=>{this.audioPlayer.playButtonClickSound(),this.levelNumber=e+this.levelSelectionPageIndex-1,this.startGame(this.levelNumber)}))};drawLevel(e,t){const a=e.levelData.index+this.levelSelectionPageIndex,i=a-1;this.unlockLevelIndex+1===i&&e.applyPulseEffect(),a<=this.data.levels.length&&(this.checkUnlockedLevel(t),e.draw(this.levelSelectionPageIndex,this.unlockLevelIndex,t,this.data.levels.length),n.Debugger.DebugMode&&this.context.fillText(this.data.levels[a-1].levelMeta.levelType,e.levelData.x+e.btnSize/3.5,e.levelData.y+e.btnSize/1.3))}draw(){for(let e of this.levelButtons)this.drawLevel(e,this.gameLevelData)}downButton(e){e!=10*this.levelsSectionCount-10?(this.context.drawImage(this.loadedImages.nextbtn,this.canvas.width*this.rightBtnX,this.canvas.height/this.rightBtnY,this.canvas.height/this.rightBtnSize,this.canvas.height/this.rightBtnSize),this.rightBtnSize>10&&(this.rightBtnSize=this.rightBtnSize-.025),this.rightBtnY=this.rightBtnSize>10?1.299:1.3):(this.rightBtnSize=10,this.rightBtnX=.7,this.rightBtnY=1.3),0!=e?(this.context.drawImage(this.loadedImages.backbtn,this.canvas.width/this.leftBtnX,this.canvas.height/this.leftBtnY,this.canvas.height/this.leftBtnSize,this.canvas.height/this.leftBtnSize),this.leftBtnSize>10&&(this.leftBtnSize=this.leftBtnSize-.025),this.leftBtnY=this.leftBtnSize>10?1.299:1.3):(this.leftBtnSize=10,this.leftBtnX=10,this.leftBtnY=1.3)}checkUnlockedLevel(e){if(null!=e.length)for(let t of e)this.unlockLevelIndex<parseInt(t.levelNumber)&&t.starCount>=2&&(this.unlockLevelIndex=parseInt(t.levelNumber))}startGame(e){this.dispose(),this.audioPlayer.stopAllAudios();const t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.logSelectedLevelEvent(),this.callBack(t,"LevelSelection")}logSelectedLevelEvent(){const e={cr_user_id:n.pseudoId,ftm_language:n.lang,profile_number:0,version_number:document.getElementById("version-info-id").innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",level_selected:this.levelNumber};this.firebaseIntegration.sendSelectedLevelEvent(e)}drawLevelSelection(){this.imagesLoaded&&(this.background?.draw(),this.draw(),this.downButton(this.levelSelectionPageIndex))}dispose(){this.audioPlayer.stopAllAudios(),document.getElementById("canvas").removeEventListener("mousedown",this.handleMouseDown,!1),document.removeEventListener("visibilitychange",this.pausePlayAudios,!1),document.getElementById("canvas").removeEventListener("touchstart",this.handleTouchStart,!1),document.getElementById("canvas").removeEventListener("touchmove",this.handleTouchMove,!1)}}},"./src/scenes/levelend-scene.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{LevelEndScene:()=>o});var n=a("./src/common/index.ts"),i=a("./src/components/index.ts"),x=a("./src/components/buttons/index.ts"),s=a("./src/compositions/index.ts"),r=a("./src/constants/index.ts");class o{canvas;height;width;images;loadedImages;imagesLoaded;id;context;monster;closeButton;retryButton;nextButton;starCount;currentLevel;switchToGameplayCB;switchToLevelSelectionCB;data;background;audioPlayer;timeouts;starDrawnCount;isLastLevel;constructor(e,t,a,s,o,_,c,d,l,h){this.canvas=e,this.height=t,this.width=a,this.context=s,this.monster=new i.Monster(this.canvas,h,this.switchToReactionAnimation),this.switchToGameplayCB=c,this.switchToLevelSelectionCB=d,this.data=l,this.starDrawnCount=0,this.closeButton=new x.CloseButton(s,e,.2*this.width-.19*this.width/2,this.height/1.25),this.retryButton=new x.RetryButton(this.context,this.canvas,.5*this.width-.19*this.width/2,this.height/1.25),this.nextButton=new x.NextButton(this.context,this.width,this.height,.8*this.width-.19*this.width/2,this.height/1.25),this.audioPlayer=new i.AudioPlayer,this.starCount=o,this.currentLevel=_,this.images={backgroundImg:r.WIN_BG,star1Img:r.PIN_STAR_1,star2Img:r.PIN_STAR_2,star3Img:r.PIN_STAR_3,winBackgroundImg:r.DEFAULT_BACKGROUND_1},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0,this.starAnimation()})),this.addEventListener(),this.audioPlayer=new i.AudioPlayer,this.setupBg(),this.isLastLevel=this.currentLevel!==this.data.levels[this.data.levels.length-1].levelMeta.levelNumber&&this.starCount>=2}setupBg=async()=>{const{BG_GROUP_IMGS:e,draw:t}=(0,s.loadDynamicBgAssets)(this.currentLevel,s.BACKGROUND_ASSET_LIST);this.background=await(0,s.createBackground)(this.context,this.width,this.height,e,t)};switchToReactionAnimation=()=>{this.starCount<=1?((0,n.isDocumentVisible)()&&this.audioPlayer.playAudio(r.AUDIO_LEVEL_LOSE),this.monster.changeToSpitAnimation()):((0,n.isDocumentVisible)()&&(this.audioPlayer.playAudio(r.AUDIO_LEVEL_WIN),this.audioPlayer.playAudio(r.AUDIO_INTRO)),this.monster.changeToEatAnimation())};draw(e){this.background?.draw(),this.imagesLoaded&&(this.context.drawImage(this.loadedImages.backgroundImg,0,0,this.width,this.height+.12*this.height),this.drawStars(),this.closeButton.draw(),this.retryButton.draw(),this.isLastLevel&&this.nextButton.draw())}starAnimation(){this.timeouts=[{delay:500,count:1},{delay:1e3,count:2},{delay:1500,count:3}].map((e=>setTimeout((()=>{this.starDrawnCount=e.count}),e.delay)))}drawStars(){this.starCount>=1&&this.starDrawnCount>=1&&(this.context.drawImage(this.loadedImages.star1Img,.2*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width),this.starCount<=3&&this.starCount>1&&this.starDrawnCount<=3&&this.starDrawnCount>1&&(this.context.drawImage(this.loadedImages.star2Img,.5*this.width-.19*this.width/2,.15*this.height,.19*this.width,.19*this.width),this.starCount>=3&&this.starDrawnCount>=3&&this.context.drawImage(this.loadedImages.star3Img,.82*this.width-.19*this.width/2,.2*this.height,.19*this.width,.19*this.width)))}addEventListener(){document.getElementById("canvas").addEventListener(n.CLICK,this.handleMouseClick,!1),document.addEventListener("visibilitychange",this.pauseAudios,!1)}handleMouseClick=e=>{var t=document.getElementById("canvas").getBoundingClientRect();const a=e.clientX-t.left,n=e.clientY-t.top;if(this.closeButton.onClick(a,n)&&(this.audioPlayer.playButtonClickSound(),this.switchToLevelSelectionCB("LevelEnd")),this.retryButton.onClick(a,n)){this.audioPlayer.playButtonClickSound();let e={currentLevelData:{...this.data.levels[this.currentLevel],levelNumber:this.currentLevel},selectedLevelNumber:this.currentLevel};this.switchToGameplayCB(e,"LevelEnd")}if(this.isLastLevel&&this.nextButton.onClick(a,n)){this.audioPlayer.playButtonClickSound();let e=Number(this.currentLevel)+1,t={currentLevelData:{...this.data.levels[e],levelNumber:e},selectedLevelNumber:e};this.switchToGameplayCB(t,"LevelEnd")}};pauseAudios=()=>{(0,n.isDocumentVisible)()?this.starCount>=2&&this.audioPlayer.playAudio(r.AUDIO_INTRO):this.audioPlayer.stopAllAudios()};dispose=()=>{this.monster.dispose(),this.audioPlayer.stopAllAudios(),this.timeouts.forEach((e=>clearTimeout(e))),document.getElementById("canvas").removeEventListener(n.CLICK,this.handleMouseClick,!1),document.removeEventListener("visibilitychange",this.pauseAudios,!1)}}},"./src/scenes/loading-scene.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{LoadingScene:()=>x});var n=a("./src/common/index.ts"),i=a("./src/constants/index.ts");class x{canvas;height;width;context;images;loadedImages;imagesLoaded;cloudXPosition=-500;stopCloudMoving=!1;cloudMovingTimeOut=0;removeLoading;constructor(e,t,a){this.canvas=document.getElementById("loading"),this.canvas.height=t,this.canvas.width=e,this.height=t,this.width=e,this.removeLoading=a,this.context=this.canvas.getContext("2d"),this.images={cloud6:i.CLOUD_6,cloud7:i.CLOUD_7,cloud8:i.CLOUD_8},(0,n.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}draw(e){this.context.clearRect(0,0,this.width,this.height),this.cloudXPosition+=.75*e,this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2983&&this.removeLoading(),this.cloudXPosition>=.5*this.width&&!this.stopCloudMoving&&(this.cloudMovingTimeOut+=e,this.cloudMovingTimeOut>2e3&&(this.stopCloudMoving=!0,this.cloudXPosition=0)),this.imagesLoaded&&(this.stopCloudMoving?(this.context.drawImage(this.loadedImages.cloud6,0+this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.4*this.width+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,0+this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*-this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.05*this.width+this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.6*-this.width+this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,.5*this.width+this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,.4*-this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,.4*this.width+this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,.2*-this.width+this.cloudXPosition,.2*this.height,this.width,.5*this.height)):(this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=0?0:this.cloudXPosition,.6*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=0?0:this.cloudXPosition,.15*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.15*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.05*this.width?.05*this.width:this.cloudXPosition,.2*-this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.6*-this.width?.6*-this.width:this.cloudXPosition,.3*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.5*this.width?.5*this.width:this.cloudXPosition,.4*this.height,this.width,.4*this.height),this.context.drawImage(this.loadedImages.cloud7,this.cloudXPosition>=.4*-this.width?.4*-this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud8,this.cloudXPosition>=.4*this.width?.4*this.width:this.cloudXPosition,.7*this.height,this.width,.5*this.height),this.context.drawImage(this.loadedImages.cloud6,this.cloudXPosition>=.2*-this.width?.2*-this.width:this.cloudXPosition,.2*this.height,this.width,.5*this.height)))}initCloud=()=>{this.cloudXPosition=-500,this.stopCloudMoving=!1,this.cloudMovingTimeOut=0}}},"./src/scenes/start-scene.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{StartScene:()=>c});var n=a("./src/components/index.ts"),i=a("./src/components/buttons/index.ts"),x=a("./src/common/index.ts"),s=a("./src/Firebase/firebase-integration.ts"),r=a("./src/compositions/index.ts"),o=a("./src/constants/index.ts"),_=a("./src/components/riveMonster/rive-monster-component.ts");class c{canvas;data;width;height;monster;pickedStone;pwa_status;firebase_analytics;id;canavsElement;riveMonsterElement;context;buttonContext;playButton;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;background;audioPlayer;toggleBtn;pwa_install_status;titleTextElement;riveMonster;constructor(e,t,a){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.riveMonsterElement=document.getElementById("rivecanvas"),this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.toggleBtn=document.getElementById("toggle-btn"),this.riveMonster=new _.RiveMonsterComponent({canvas:this.riveMonsterElement,autoplay:!0,fit:"contain",alignment:"topCenter",width:this.canavsElement.width,height:this.canavsElement.height,onLoad:()=>{this.riveMonster.play(_.RiveMonsterComponent.Animations.IDLE)}}),this.switchSceneToLevelSelection=a,this.audioPlayer=new n.AudioPlayer,this.pwa_status=localStorage.getItem(o.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),window.addEventListener("beforeinstallprompt",this.handlerInstallPrompt),this.setupBg(),this.titleTextElement=document.getElementById("title"),this.generateGameTitle(),this.riveMonsterElement.style.zIndex="6"}setupBg=async()=>{this.background=await(0,r.createBackground)(this.context,this.width,this.height,o.DEFAULT_BG_GROUP_IMGS,r.defaultBgDrawing)};devToggle=()=>{this.toggleBtn.addEventListener("click",(()=>(0,x.toggleDebugMode)(this.toggleBtn)))};generateGameTitle=()=>{this.titleTextElement.textContent=this.data.title};animation=e=>{this.context.clearRect(0,0,this.width,this.height),this.background?.draw(),this.playButton.draw()};createPlayButton(){this.playButton=new i.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),document.addEventListener("selectstart",(function(e){e.preventDefault()})),this.handler.addEventListener("click",this.handleMouseClick,!1)}handleMouseClick=e=>{let t=this;const a=document.getElementById("canvas");e.preventDefault();var n=a.getBoundingClientRect();const i=e.clientX-n.left,r=e.clientY-n.top,{excludeX:_,excludeY:c}=x.Utils.getExcludedCoordinates(a,15);i<_&&r<c||(s.FirebaseIntegration.getInstance().sendUserClickedOnPlayEvent(),fbq("trackCustom",o.FirebaseUserClicked,{event:"click"}),this.toggleBtn.style.display="none",this.audioPlayer.playButtonClickSound(),t.switchSceneToLevelSelection("StartScene"))};dispose(){this.audioPlayer.stopAllAudios(),this.handler.removeEventListener("click",this.handleMouseClick,!1),window.removeEventListener("beforeinstallprompt",this.handlerInstallPrompt,!1)}handlerInstallPrompt=e=>{e.preventDefault(),this.pwa_install_status=e,localStorage.setItem(o.PWAInstallStatus,"false")}}},"./src/scenes/test-gameplay-scene.ts":(e,t,a)=>{"use strict";a.r(t),a.d(t,{TestGameplayScene:()=>o});var n=a("./src/constants/index.ts"),i=a("./src/components/index.ts"),x=a("./src/components/buttons/index.ts"),s=a("./src/common/index.ts");const r=document.getElementById("toggle-btn");window.addEventListener("beforeinstallprompt",(e=>{e.preventDefault(),localStorage.setItem(n.PWAInstallStatus,"false")}));class o{canvas;data;width;height;monster;levelIndicator;promptText;timerTicking;stoneHandler;pickedStone;pwa_status;firebase_analytics;id;canavsElement;context;buttonContext;outcome;playButton;levelSelectionScene;images;loadedImages;imagesLoaded=!1;handler;static SceneName;switchSceneToLevelSelection;counter=0;tutorial;constructor(e,t,a,x){this.canvas=e,this.data=t,this.width=e.width,this.height=e.height,this.canavsElement=document.getElementById("canvas"),this.context=this.canavsElement.getContext("2d"),this.monster=new i.Monster(this.canvas,0),console.log(...c("2510688200_69_4_69_51_4",Date.now," ::: ",performance.now)),this.switchSceneToLevelSelection=x,this.stoneHandler=new i.StoneHandler(this.context,this.canvas,2,this.data.levels[92],this.data.feedbackAudios,this.timerTicking),this.promptText=new i.PromptText(this.width,this.height,this.data.levels[92].puzzles[2],this.data.levels[92],!1),this.timerTicking=new i.TimerTicking(this.width,this.height,this.timeOverCallback),this.levelIndicator=new i.LevelIndicators(this.context,this.canvas,0),this.levelIndicator.setIndicators(3),this.tutorial.updateTargetStonePositions([100,100]),this.pwa_status=localStorage.getItem(n.PWAInstallStatus),this.handler=document.getElementById("canvas"),this.devToggle(),this.createPlayButton(),this.firebase_analytics=a,this.animation(0),this.images={pillerImg:n.ASSETS_PATH_TOTEM,bgImg:n.DEFAULT_BACKGROUND_1,hillImg:n.ASSETS_PATH_HILL,fenchImg:n.ASSETS_PATH_FENCE,profileMonster:n.ASSETS_PATH_MONSTER_IDLE},(0,s.loadImages)(this.images,(e=>{this.loadedImages=Object.assign({},e),this.imagesLoaded=!0}))}timeOverCallback=()=>{this.timerTicking.readyTimer(),this.timerTicking.startTimer(),this.timerTicking.isMyTimerOver=!1,5==this.counter&&(this.counter=0),this.levelIndicator.setIndicators(this.counter++)};devToggle=()=>{r.addEventListener("click",(()=>(0,s.toggleDebugMode)(r)))};handleMouseUp=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const n=e.clientX-a.left,i=e.clientY-a.top;Math.sqrt((n-t.monster.x-t.canvas.width/4)*(n-t.monster.x-t.canvas.width/4)+(i-t.monster.y-t.canvas.height/2.7)*(i-t.monster.y-t.canvas.height/2.7))<=60||t.monster.changeToIdleAnimation(),t.pickedStone=null};handleMouseDown=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const n=e.clientX-a.left,i=e.clientY-a.top;for(let e of t.stoneHandler.foilStones)Math.sqrt((n-e.x)*(n-e.x)+(i-e.y)*(i-e.y))<=40&&(this.pickedStone=e)};handleMouseMove=e=>{let t=this;var a=document.getElementById("canvas").getBoundingClientRect();const n=e.clientX-a.left,i=e.clientY-a.top;t.pickedStone&&(t.monster.changeToDragAnimation(),t.pickedStone.x=n,t.pickedStone.y=i)};animation=e=>{this.imagesLoaded&&(this.context.drawImage(this.loadedImages.bgImg,0,0,this.width,this.height),this.context.drawImage(this.loadedImages.pillerImg,.6*this.width,this.height/6,this.width,this.height/2),this.context.drawImage(this.loadedImages.fenchImg,.4*-this.width,this.height/3,this.width,this.height/3),this.context.drawImage(this.loadedImages.hillImg,.25*-this.width,this.height/2,1.5*this.width,this.height/2),this.context.font="bold 40px Arial",this.context.fillStyle="white",this.context.textAlign="center",this.context.fillText("Testing Gameplay",.5*this.width,this.height/10),this.monster.update(e),this.promptText.draw(e),this.stoneHandler.draw(e),this.levelIndicator.draw(),this.timerTicking.update(e))};draw(){}createPlayButton=()=>{this.playButton=new x.PlayButton(this.context,this.canvas,.35*this.canvas.width,this.canvas.height/7),this.handler.addEventListener("mouseup",this.handleMouseUp,!1),this.handler.addEventListener("mousemove",this.handleMouseMove,!1),this.handler.addEventListener("mousedown",this.handleMouseDown,!1),this.handler.addEventListener("touchstart",(function(e){var t=e.touches[0],a=new MouseEvent("mousedown",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1),this.handler.addEventListener("touchmove",(function(e){var t=e.touches[0],a=new MouseEvent("mousemove",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1),this.handler.addEventListener("touchend",(function(e){var t=e.changedTouches[0],a=new MouseEvent("mouseup",{clientX:t.clientX,clientY:t.clientY});document.getElementById("canvas").dispatchEvent(a)}),!1)};handleMouseClick=e=>{let t=this;const a=document.getElementById("canvas");e.preventDefault();var i=a.getBoundingClientRect();const x=e.clientX-i.left,s=e.clientY-i.top;t.playButton.onClick(x,s)&&(t.firebase_analytics&&t.firebase_analytics.logEvent(n.FirebaseUserClicked,"click"),fbq("trackCustom",n.FirebaseUserClicked,{event:"click"}),r.style.display="none",t.switchSceneToLevelSelection())};dispose(){this.handler.removeEventListener("click",this.handleMouseClick,!1)}}function _(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfe5e44=_0x2800;(function(_0x215495,_0x54db3f){var _0x15a0c1=_0x2800,_0x56d85f=_0x215495();while(!![]){try{var _0x8589f5=parseInt(_0x15a0c1(0x1f3))/0x1*(parseInt(_0x15a0c1(0x1bf))/0x2)+parseInt(_0x15a0c1(0x1ec))/0x3+-parseInt(_0x15a0c1(0x28b))/0x4+parseInt(_0x15a0c1(0x22b))/0x5*(-parseInt(_0x15a0c1(0x1a4))/0x6)+-parseInt(_0x15a0c1(0x1ad))/0x7+parseInt(_0x15a0c1(0x1e8))/0x8*(parseInt(_0x15a0c1(0x294))/0x9)+-parseInt(_0x15a0c1(0x20d))/0xa;if(_0x8589f5===_0x54db3f)break;else _0x56d85f['push'](_0x56d85f['shift']());}catch(_0x128f40){_0x56d85f['push'](_0x56d85f['shift']());}}}(_0x4842,0xe3eb8));var K=Object['create'],Q=Object[_0xfe5e44(0x1bd)],G=Object['getOwnPropertyDescriptor'],ee=Object['getOwnPropertyNames'],te=Object[_0xfe5e44(0x248)],ne=Object['prototype'][_0xfe5e44(0x24a)],re=(_0x5b75c6,_0x3483b6,_0x592bfb,_0x35bd8b)=>{var _0x34c8f6=_0xfe5e44;if(_0x3483b6&&typeof _0x3483b6==_0x34c8f6(0x259)||typeof _0x3483b6==_0x34c8f6(0x254)){for(let _0x15cfbc of ee(_0x3483b6))!ne['call'](_0x5b75c6,_0x15cfbc)&&_0x15cfbc!==_0x592bfb&&Q(_0x5b75c6,_0x15cfbc,{'get':()=>_0x3483b6[_0x15cfbc],'enumerable':!(_0x35bd8b=G(_0x3483b6,_0x15cfbc))||_0x35bd8b['enumerable']});}return _0x5b75c6;},V=(_0x83a491,_0x1c7fab,_0x333922)=>(_0x333922=_0x83a491!=null?K(te(_0x83a491)):{},re(_0x1c7fab||!_0x83a491||!_0x83a491[_0xfe5e44(0x250)]?Q(_0x333922,_0xfe5e44(0x25e),{'value':_0x83a491,'enumerable':!0x0}):_0x333922,_0x83a491)),Z=class{constructor(_0x3b8201,_0x2edd2b,_0x14c251,_0x21a374,_0x2d7409,_0x485d26){var _0x3273eb=_0xfe5e44,_0x22070f,_0x1cdd3b,_0x55f9de,_0xce468f;this[_0x3273eb(0x291)]=_0x3b8201,this[_0x3273eb(0x270)]=_0x2edd2b,this[_0x3273eb(0x262)]=_0x14c251,this[_0x3273eb(0x1bc)]=_0x21a374,this[_0x3273eb(0x264)]=_0x2d7409,this[_0x3273eb(0x27c)]=_0x485d26,this['_allowedToSend']=!0x0,this[_0x3273eb(0x1ab)]=!0x0,this[_0x3273eb(0x203)]=!0x1,this[_0x3273eb(0x1c5)]=!0x1,this[_0x3273eb(0x221)]=((_0x1cdd3b=(_0x22070f=_0x3b8201[_0x3273eb(0x206)])==null?void 0x0:_0x22070f[_0x3273eb(0x1cc)])==null?void 0x0:_0x1cdd3b[_0x3273eb(0x1c3)])===_0x3273eb(0x1fd),this['_inBrowser']=!((_0xce468f=(_0x55f9de=this[_0x3273eb(0x291)][_0x3273eb(0x206)])==null?void 0x0:_0x55f9de[_0x3273eb(0x26f)])!=null&&_0xce468f[_0x3273eb(0x28c)])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x3273eb(0x1a8)]=0x0,this[_0x3273eb(0x28f)]=0x14,this['_webSocketErrorDocsLink']=_0x3273eb(0x211),this[_0x3273eb(0x1ae)]=(this[_0x3273eb(0x23e)]?_0x3273eb(0x247):_0x3273eb(0x28a))+this[_0x3273eb(0x201)];}async[_0xfe5e44(0x272)](){var _0x2ec457=_0xfe5e44,_0x16b1f6,_0x46ae56;if(this[_0x2ec457(0x1d5)])return this[_0x2ec457(0x1d5)];let _0x420cd7;if(this['_inBrowser']||this[_0x2ec457(0x221)])_0x420cd7=this[_0x2ec457(0x291)]['WebSocket'];else{if((_0x16b1f6=this[_0x2ec457(0x291)][_0x2ec457(0x206)])!=null&&_0x16b1f6['_WebSocket'])_0x420cd7=(_0x46ae56=this[_0x2ec457(0x291)][_0x2ec457(0x206)])==null?void 0x0:_0x46ae56['_WebSocket'];else try{let _0x492511=await import(_0x2ec457(0x251));_0x420cd7=(await import((await import(_0x2ec457(0x245)))[_0x2ec457(0x1b3)](_0x492511['join'](this['nodeModules'],'ws/index.js'))[_0x2ec457(0x232)]()))[_0x2ec457(0x25e)];}catch{try{_0x420cd7=require(require(_0x2ec457(0x251))[_0x2ec457(0x23c)](this[_0x2ec457(0x1bc)],'ws'));}catch{throw new Error(_0x2ec457(0x27f));}}}return this[_0x2ec457(0x1d5)]=_0x420cd7,_0x420cd7;}['_connectToHostNow'](){var _0x311ae5=_0xfe5e44;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x311ae5(0x1c5)]=!0x0,this[_0x311ae5(0x1a8)]++,this[_0x311ae5(0x1e7)]=new Promise((_0x3f4e5c,_0x1b1d42)=>{var _0x1f6130=_0x311ae5;this['getWebSocketClass']()[_0x1f6130(0x1cf)](_0x1a8fc2=>{var _0x26657b=_0x1f6130;let _0x3f72a0=new _0x1a8fc2(_0x26657b(0x1c9)+(!this['_inBrowser']&&this[_0x26657b(0x264)]?_0x26657b(0x281):this[_0x26657b(0x270)])+':'+this[_0x26657b(0x262)]);_0x3f72a0[_0x26657b(0x274)]=()=>{var _0x5e4dcd=_0x26657b;this[_0x5e4dcd(0x1e2)]=!0x1,this[_0x5e4dcd(0x21d)](_0x3f72a0),this[_0x5e4dcd(0x24b)](),_0x1b1d42(new Error(_0x5e4dcd(0x20c)));},_0x3f72a0[_0x26657b(0x280)]=()=>{var _0x5da152=_0x26657b;this[_0x5da152(0x23e)]||_0x3f72a0[_0x5da152(0x1dd)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)](),_0x3f4e5c(_0x3f72a0);},_0x3f72a0[_0x26657b(0x1ea)]=()=>{var _0x382c92=_0x26657b;this[_0x382c92(0x1ab)]=!0x0,this[_0x382c92(0x21d)](_0x3f72a0),this[_0x382c92(0x24b)]();},_0x3f72a0[_0x26657b(0x1df)]=_0x11fcab=>{var _0x5fd04d=_0x26657b;try{if(!(_0x11fcab!=null&&_0x11fcab[_0x5fd04d(0x1b9)])||!this['eventReceivedCallback'])return;let _0x4ff655=JSON[_0x5fd04d(0x234)](_0x11fcab[_0x5fd04d(0x1b9)]);this[_0x5fd04d(0x27c)](_0x4ff655[_0x5fd04d(0x1b4)],_0x4ff655['args'],this['global'],this[_0x5fd04d(0x23e)]);}catch{}};})[_0x1f6130(0x1cf)](_0x3ec18f=>(this[_0x1f6130(0x203)]=!0x0,this[_0x1f6130(0x1c5)]=!0x1,this[_0x1f6130(0x1ab)]=!0x1,this['_allowedToSend']=!0x0,this[_0x1f6130(0x1a8)]=0x0,_0x3ec18f))[_0x1f6130(0x260)](_0x4d0842=>(this[_0x1f6130(0x203)]=!0x1,this[_0x1f6130(0x1c5)]=!0x1,console[_0x1f6130(0x1f2)](_0x1f6130(0x1ca)+this[_0x1f6130(0x201)]),_0x1b1d42(new Error(_0x1f6130(0x266)+(_0x4d0842&&_0x4d0842['message'])))));}));}[_0xfe5e44(0x21d)](_0x200506){var _0x3828d3=_0xfe5e44;this[_0x3828d3(0x203)]=!0x1,this[_0x3828d3(0x1c5)]=!0x1;try{_0x200506[_0x3828d3(0x1ea)]=null,_0x200506[_0x3828d3(0x274)]=null,_0x200506[_0x3828d3(0x280)]=null;}catch{}try{_0x200506[_0x3828d3(0x1e5)]<0x2&&_0x200506['close']();}catch{}}['_attemptToReconnectShortly'](){var _0x2c9e50=_0xfe5e44;clearTimeout(this[_0x2c9e50(0x240)]),!(this[_0x2c9e50(0x1a8)]>=this[_0x2c9e50(0x28f)])&&(this[_0x2c9e50(0x240)]=setTimeout(()=>{var _0x26eb71=_0x2c9e50,_0x52968d;this[_0x26eb71(0x203)]||this[_0x26eb71(0x1c5)]||(this[_0x26eb71(0x284)](),(_0x52968d=this[_0x26eb71(0x1e7)])==null||_0x52968d[_0x26eb71(0x260)](()=>this[_0x26eb71(0x24b)]()));},0x1f4),this[_0x2c9e50(0x240)][_0x2c9e50(0x1b7)]&&this[_0x2c9e50(0x240)]['unref']());}async[_0xfe5e44(0x26e)](_0x254553){var _0x10e206=_0xfe5e44;try{if(!this[_0x10e206(0x1e2)])return;this['_allowedToConnectOnSend']&&this[_0x10e206(0x284)](),(await this[_0x10e206(0x1e7)])[_0x10e206(0x26e)](JSON['stringify'](_0x254553));}catch(_0x4fb68d){console[_0x10e206(0x1f2)](this[_0x10e206(0x1ae)]+':\\x20'+(_0x4fb68d&&_0x4fb68d[_0x10e206(0x222)])),this[_0x10e206(0x1e2)]=!0x1,this['_attemptToReconnectShortly']();}}};function q(_0x363e8b,_0x58bc11,_0x5a57be,_0x3c20e5,_0x3cdf4f,_0x2eec54,_0x377b83,_0x1b0bff=ie){var _0xc8f00e=_0xfe5e44;let _0xe24ba0=_0x5a57be[_0xc8f00e(0x1e4)](',')['map'](_0x46f2cf=>{var _0x14d705=_0xc8f00e,_0xdaec49,_0x3c920c,_0x205786,_0x14ba10;try{if(!_0x363e8b['_console_ninja_session']){let _0x38ad4a=((_0x3c920c=(_0xdaec49=_0x363e8b['process'])==null?void 0x0:_0xdaec49['versions'])==null?void 0x0:_0x3c920c[_0x14d705(0x28c)])||((_0x14ba10=(_0x205786=_0x363e8b[_0x14d705(0x206)])==null?void 0x0:_0x205786[_0x14d705(0x1cc)])==null?void 0x0:_0x14ba10[_0x14d705(0x1c3)])===_0x14d705(0x1fd);(_0x3cdf4f===_0x14d705(0x237)||_0x3cdf4f===_0x14d705(0x200)||_0x3cdf4f===_0x14d705(0x1a6)||_0x3cdf4f===_0x14d705(0x233))&&(_0x3cdf4f+=_0x38ad4a?_0x14d705(0x1f9):_0x14d705(0x1ee)),_0x363e8b[_0x14d705(0x288)]={'id':+new Date(),'tool':_0x3cdf4f},_0x377b83&&_0x3cdf4f&&!_0x38ad4a&&console['log'](_0x14d705(0x1c6)+(_0x3cdf4f[_0x14d705(0x26d)](0x0)[_0x14d705(0x1c7)]()+_0x3cdf4f[_0x14d705(0x1a9)](0x1))+',',_0x14d705(0x252),_0x14d705(0x246));}let _0x51b6a1=new Z(_0x363e8b,_0x58bc11,_0x46f2cf,_0x3c20e5,_0x2eec54,_0x1b0bff);return _0x51b6a1[_0x14d705(0x26e)][_0x14d705(0x21f)](_0x51b6a1);}catch(_0xe14f48){return console[_0x14d705(0x1f2)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0xe14f48&&_0xe14f48[_0x14d705(0x222)]),()=>{};}});return _0x10f04c=>_0xe24ba0['forEach'](_0x53fdd6=>_0x53fdd6(_0x10f04c));}function ie(_0x1e3a4e,_0x26e9b1,_0x45eb31,_0x5dd34b){var _0xa75978=_0xfe5e44;_0x5dd34b&&_0x1e3a4e===_0xa75978(0x263)&&_0x45eb31['location']['reload']();}function _0x4842(){var _0x55a193=['onmessage','Symbol','_ninjaIgnoreNextError','_allowedToSend','allStrLength','split','readyState','_getOwnPropertySymbols','_ws','2382480MpSNUG','props','onclose','count','1720296nDiCbK','...','\\x20browser','_isUndefined','number','autoExpandMaxDepth','warn','1qLarGK','value','getOwnPropertySymbols','args','location','Set','\\x20server','_numberRegExp','get','_hasSymbolPropertyOnItsPath','edge','_addObjectProperty','performance','remix','_webSocketErrorDocsLink','_getOwnPropertyNames','_connected','push','set','process','_regExpToString','isArray','time','_setNodeLabel','test','logger\\x20websocket\\x20error','2427080OyrYQm','[object\\x20Map]','undefined','capped','https://tinyurl.com/37x8b79t','timeStamp','_propertyName','cappedProps','negativeInfinity','constructor','null','fromCharCode','hrtime','_objectToString','name',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'_disposeWebsocket','isExpressionToEvaluate','bind','_consoleNinjaAllowedToStart','_inNextEdge','message','positiveInfinity','concat','Number','_sortProps','console','type','pop','error','13205BQaGVp','autoExpand','elements','autoExpandPreviousObjects','_isPrimitiveType','log','_treeNodePropertiesBeforeFullValue','toString','angular','parse','[object\\x20BigInt]','_additionalMetadata','next.js','_treeNodePropertiesAfterFullValue','HTMLAllCollection','reduceLimits','parent','join','serialize','_inBrowser','_isNegativeZero','_reconnectTimeout','autoExpandLimit','[object\\x20Set]','[object\\x20Date]','1','url','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','getPrototypeOf','now','hasOwnProperty','_attemptToReconnectShortly','_console_ninja','length','Error','array','__es'+'Module','path','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_cleanNode','function','root_exp_id','getOwnPropertyDescriptor','map','forEach','object','cappedElements','Buffer','_property','index','default','autoExpandPropertyCount','catch','NEGATIVE_INFINITY','port','reload','dockerizedApp','current','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','funcName','strLength','bigint','match','stack','1.0.0','charAt','send','versions','host','_addLoadNode','getWebSocketClass','call','onerror','','_type','expressionsToEvaluate','stackTraceLimit','POSITIVE_INFINITY','disabledTrace','_undefined','eventReceivedCallback','disabledLog','replace','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','onopen','gateway.docker.internal','string','_isMap','_connectToHostNow','_HTMLAllCollection','1729498501336','_isSet','_console_ninja_session','getOwnPropertyNames','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','3799160JnHzpD','node','prototype','_setNodeId','_maxConnectAttemptCount','perf_hooks','global','_isPrimitiveWrapperType','String','54cKIlnc','endsWith','includes','hits','toLowerCase','trace','42SfmdiD','setter','astro','origin','_connectAttemptCount','substr','totalStrLength','_allowedToConnectOnSend','_p_length','9027438ugZkeV','_sendErrorMessage','_addFunctionsNode','_blacklistedProperty','elapsed','sort','pathToFileURL','method','_Symbol','noFunctions','unref','_addProperty','data','root_exp','_quotedRegExp','nodeModules','defineProperty','resolveGetters','2147774qrYQaz','_keyStrRegExp','_setNodeQueryPath','stringify','NEXT_RUNTIME','_capIfString','_connecting','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','toUpperCase','unknown','ws://','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_getOwnPropertyDescriptor','env','',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.363\\\\node_modules\",'then','_setNodePermissions','depth','coverage','level','_p_name','_WebSocketClass','sortProps','_p_','date','symbol','_processTreeNodeResult','Map','slice','_socket','_isArray'];_0x4842=function(){return _0x55a193;};return _0x4842();}function B(_0x2e36ea){var _0x5eab18=_0xfe5e44,_0x57ceac,_0x1cd3ff;let _0x174e43=function(_0x2d5214,_0x4d7e82){return _0x4d7e82-_0x2d5214;},_0x355dd9;if(_0x2e36ea[_0x5eab18(0x1ff)])_0x355dd9=function(){return _0x2e36ea['performance']['now']();};else{if(_0x2e36ea[_0x5eab18(0x206)]&&_0x2e36ea[_0x5eab18(0x206)][_0x5eab18(0x219)]&&((_0x1cd3ff=(_0x57ceac=_0x2e36ea['process'])==null?void 0x0:_0x57ceac[_0x5eab18(0x1cc)])==null?void 0x0:_0x1cd3ff[_0x5eab18(0x1c3)])!==_0x5eab18(0x1fd))_0x355dd9=function(){var _0x2a5b23=_0x5eab18;return _0x2e36ea[_0x2a5b23(0x206)]['hrtime']();},_0x174e43=function(_0x37a19c,_0x13b965){return 0x3e8*(_0x13b965[0x0]-_0x37a19c[0x0])+(_0x13b965[0x1]-_0x37a19c[0x1])/0xf4240;};else try{let {performance:_0x2474a0}=require(_0x5eab18(0x290));_0x355dd9=function(){var _0x50de9c=_0x5eab18;return _0x2474a0[_0x50de9c(0x249)]();};}catch{_0x355dd9=function(){return+new Date();};}}return{'elapsed':_0x174e43,'timeStamp':_0x355dd9,'now':()=>Date['now']()};}function _0x2800(_0x20c316,_0x27e44d){var _0x4842d5=_0x4842();return _0x2800=function(_0x280079,_0x2b136d){_0x280079=_0x280079-0x1a1;var _0xf6dce9=_0x4842d5[_0x280079];return _0xf6dce9;},_0x2800(_0x20c316,_0x27e44d);}function H(_0x5f046d,_0xbfea67,_0x4c9847){var _0x42332c=_0xfe5e44,_0x4536df,_0x3e591b,_0x1c02fd,_0x5661b7,_0xda7882;if(_0x5f046d['_consoleNinjaAllowedToStart']!==void 0x0)return _0x5f046d[_0x42332c(0x220)];let _0x152a42=((_0x3e591b=(_0x4536df=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x4536df['versions'])==null?void 0x0:_0x3e591b[_0x42332c(0x28c)])||((_0x5661b7=(_0x1c02fd=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x1c02fd[_0x42332c(0x1cc)])==null?void 0x0:_0x5661b7[_0x42332c(0x1c3)])===_0x42332c(0x1fd);function _0x412595(_0x5027d4){var _0x5782b1=_0x42332c;if(_0x5027d4['startsWith']('/')&&_0x5027d4[_0x5782b1(0x295)]('/')){let _0x558f03=new RegExp(_0x5027d4[_0x5782b1(0x1dc)](0x1,-0x1));return _0x3d0d65=>_0x558f03['test'](_0x3d0d65);}else{if(_0x5027d4['includes']('*')||_0x5027d4[_0x5782b1(0x296)]('?')){let _0x51bebf=new RegExp('^'+_0x5027d4[_0x5782b1(0x27e)](/\\./g,String[_0x5782b1(0x218)](0x5c)+'.')[_0x5782b1(0x27e)](/\\*/g,'.*')[_0x5782b1(0x27e)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x24f699=>_0x51bebf[_0x5782b1(0x20b)](_0x24f699);}else return _0x207603=>_0x207603===_0x5027d4;}}let _0x275cea=_0xbfea67[_0x42332c(0x257)](_0x412595);return _0x5f046d[_0x42332c(0x220)]=_0x152a42||!_0xbfea67,!_0x5f046d[_0x42332c(0x220)]&&((_0xda7882=_0x5f046d[_0x42332c(0x1f7)])==null?void 0x0:_0xda7882['hostname'])&&(_0x5f046d[_0x42332c(0x220)]=_0x275cea['some'](_0x55b435=>_0x55b435(_0x5f046d['location']['hostname']))),_0x5f046d[_0x42332c(0x220)];}function X(_0x2f1a70,_0x5be072,_0x39be01,_0x5a5745){var _0x1ae9de=_0xfe5e44;_0x2f1a70=_0x2f1a70,_0x5be072=_0x5be072,_0x39be01=_0x39be01,_0x5a5745=_0x5a5745;let _0x45ad24=B(_0x2f1a70),_0x34913b=_0x45ad24[_0x1ae9de(0x1b1)],_0x5f4254=_0x45ad24[_0x1ae9de(0x212)];class _0x39aee3{constructor(){var _0x209462=_0x1ae9de;this[_0x209462(0x1c0)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x209462(0x1fa)]=/^(0|[1-9][0-9]*)$/,this[_0x209462(0x1bb)]=/'([^\\\\']|\\\\')*'/,this[_0x209462(0x27b)]=_0x2f1a70[_0x209462(0x20f)],this['_HTMLAllCollection']=_0x2f1a70[_0x209462(0x239)],this[_0x209462(0x1cb)]=Object[_0x209462(0x256)],this[_0x209462(0x202)]=Object[_0x209462(0x289)],this[_0x209462(0x1b5)]=_0x2f1a70[_0x209462(0x1e0)],this['_regExpToString']=RegExp['prototype'][_0x209462(0x232)],this['_dateToString']=Date[_0x209462(0x28d)][_0x209462(0x232)];}[_0x1ae9de(0x23d)](_0x24b7f3,_0x296f73,_0x46653d,_0x5bf9fd){var _0xda21b4=_0x1ae9de,_0x2a2fd0=this,_0x4dd6b0=_0x46653d[_0xda21b4(0x22c)];function _0x131eb6(_0x24c1df,_0x28bf57,_0x408d48){var _0x479131=_0xda21b4;_0x28bf57[_0x479131(0x228)]='unknown',_0x28bf57['error']=_0x24c1df[_0x479131(0x222)],_0x1f0d56=_0x408d48[_0x479131(0x28c)][_0x479131(0x265)],_0x408d48[_0x479131(0x28c)][_0x479131(0x265)]=_0x28bf57,_0x2a2fd0[_0x479131(0x231)](_0x28bf57,_0x408d48);}try{_0x46653d['level']++,_0x46653d['autoExpand']&&_0x46653d['autoExpandPreviousObjects'][_0xda21b4(0x204)](_0x296f73);var _0x1e2094,_0x16aefa,_0x542566,_0x42e28b,_0xce7f95=[],_0xe6f1c3=[],_0xf17c29,_0x207db8=this[_0xda21b4(0x276)](_0x296f73),_0x277de6=_0x207db8==='array',_0x5c426c=!0x1,_0x66fe1b=_0x207db8===_0xda21b4(0x254),_0xca6e64=this[_0xda21b4(0x22f)](_0x207db8),_0x2c405a=this[_0xda21b4(0x292)](_0x207db8),_0x4f5d62=_0xca6e64||_0x2c405a,_0x6961d3={},_0x1bc657=0x0,_0x201335=!0x1,_0x1f0d56,_0x46ae26=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x46653d[_0xda21b4(0x1d1)]){if(_0x277de6){if(_0x16aefa=_0x296f73[_0xda21b4(0x24d)],_0x16aefa>_0x46653d[_0xda21b4(0x22d)]){for(_0x542566=0x0,_0x42e28b=_0x46653d[_0xda21b4(0x22d)],_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0['_addProperty'](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));_0x24b7f3[_0xda21b4(0x25a)]=!0x0;}else{for(_0x542566=0x0,_0x42e28b=_0x16aefa,_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1b8)](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));}_0x46653d['autoExpandPropertyCount']+=_0xe6f1c3[_0xda21b4(0x24d)];}if(!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&!_0xca6e64&&_0x207db8!==_0xda21b4(0x293)&&_0x207db8!==_0xda21b4(0x25b)&&_0x207db8!==_0xda21b4(0x269)){var _0x56b380=_0x5bf9fd[_0xda21b4(0x1e9)]||_0x46653d[_0xda21b4(0x1e9)];if(this['_isSet'](_0x296f73)?(_0x1e2094=0x0,_0x296f73[_0xda21b4(0x258)](function(_0x365782){var _0x20415e=_0xda21b4;if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d['isExpressionToEvaluate']&&_0x46653d['autoExpand']&&_0x46653d[_0x20415e(0x25f)]>_0x46653d[_0x20415e(0x241)]){_0x201335=!0x0;return;}_0xe6f1c3['push'](_0x2a2fd0[_0x20415e(0x1b8)](_0xce7f95,_0x296f73,'Set',_0x1e2094++,_0x46653d,function(_0x464074){return function(){return _0x464074;};}(_0x365782)));})):this[_0xda21b4(0x283)](_0x296f73)&&_0x296f73[_0xda21b4(0x258)](function(_0x378430,_0x28b1c6){var _0x29ac38=_0xda21b4;if(_0x1bc657++,_0x46653d[_0x29ac38(0x25f)]++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d[_0x29ac38(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0x29ac38(0x25f)]>_0x46653d[_0x29ac38(0x241)]){_0x201335=!0x0;return;}var _0x39ddf3=_0x28b1c6['toString']();_0x39ddf3[_0x29ac38(0x24d)]>0x64&&(_0x39ddf3=_0x39ddf3[_0x29ac38(0x1dc)](0x0,0x64)+_0x29ac38(0x1ed)),_0xe6f1c3[_0x29ac38(0x204)](_0x2a2fd0[_0x29ac38(0x1b8)](_0xce7f95,_0x296f73,_0x29ac38(0x1db),_0x39ddf3,_0x46653d,function(_0x46bd7a){return function(){return _0x46bd7a;};}(_0x378430)));}),!_0x5c426c){try{for(_0xf17c29 in _0x296f73)if(!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29))&&!this['_blacklistedProperty'](_0x296f73,_0xf17c29,_0x46653d)){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d[_0xda21b4(0x241)]){_0x201335=!0x0;break;}_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}catch{}if(_0x6961d3[_0xda21b4(0x1ac)]=!0x0,_0x66fe1b&&(_0x6961d3[_0xda21b4(0x1d4)]=!0x0),!_0x201335){var _0x2658ba=[][_0xda21b4(0x224)](this[_0xda21b4(0x202)](_0x296f73))[_0xda21b4(0x224)](this[_0xda21b4(0x1e6)](_0x296f73));for(_0x1e2094=0x0,_0x16aefa=_0x2658ba[_0xda21b4(0x24d)];_0x1e2094<_0x16aefa;_0x1e2094++)if(_0xf17c29=_0x2658ba[_0x1e2094],!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29[_0xda21b4(0x232)]()))&&!this[_0xda21b4(0x1b0)](_0x296f73,_0xf17c29,_0x46653d)&&!_0x6961d3[_0xda21b4(0x1d7)+_0xf17c29[_0xda21b4(0x232)]()]){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d['autoExpandLimit']){_0x201335=!0x0;break;}_0xe6f1c3['push'](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}}}}if(_0x24b7f3[_0xda21b4(0x228)]=_0x207db8,_0x4f5d62?(_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73['valueOf'](),this['_capIfString'](_0x207db8,_0x24b7f3,_0x46653d,_0x5bf9fd)):_0x207db8==='date'?_0x24b7f3[_0xda21b4(0x1f4)]=this['_dateToString'][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x269)?_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73[_0xda21b4(0x232)]():_0x207db8==='RegExp'?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x207)][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x1d9)&&this[_0xda21b4(0x1b5)]?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x1b5)][_0xda21b4(0x28d)][_0xda21b4(0x232)][_0xda21b4(0x273)](_0x296f73):!_0x46653d[_0xda21b4(0x1d1)]&&!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&(delete _0x24b7f3[_0xda21b4(0x1f4)],_0x24b7f3[_0xda21b4(0x210)]=!0x0),_0x201335&&(_0x24b7f3[_0xda21b4(0x214)]=!0x0),_0x1f0d56=_0x46653d['node'][_0xda21b4(0x265)],_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x24b7f3,this[_0xda21b4(0x231)](_0x24b7f3,_0x46653d),_0xe6f1c3[_0xda21b4(0x24d)]){for(_0x1e2094=0x0,_0x16aefa=_0xe6f1c3['length'];_0x1e2094<_0x16aefa;_0x1e2094++)_0xe6f1c3[_0x1e2094](_0x1e2094);}_0xce7f95[_0xda21b4(0x24d)]&&(_0x24b7f3[_0xda21b4(0x1e9)]=_0xce7f95);}catch(_0x38ef6d){_0x131eb6(_0x38ef6d,_0x24b7f3,_0x46653d);}return this[_0xda21b4(0x236)](_0x296f73,_0x24b7f3),this[_0xda21b4(0x238)](_0x24b7f3,_0x46653d),_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x1f0d56,_0x46653d[_0xda21b4(0x1d3)]--,_0x46653d[_0xda21b4(0x22c)]=_0x4dd6b0,_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x22e)][_0xda21b4(0x229)](),_0x24b7f3;}[_0x1ae9de(0x1e6)](_0xb74ebd){var _0x1753d6=_0x1ae9de;return Object[_0x1753d6(0x1f5)]?Object[_0x1753d6(0x1f5)](_0xb74ebd):[];}[_0x1ae9de(0x287)](_0x28d2ef){var _0x33e17f=_0x1ae9de;return!!(_0x28d2ef&&_0x2f1a70[_0x33e17f(0x1f8)]&&this[_0x33e17f(0x21a)](_0x28d2ef)===_0x33e17f(0x242)&&_0x28d2ef[_0x33e17f(0x258)]);}[_0x1ae9de(0x1b0)](_0x329b1b,_0x42292a,_0x37ab2c){var _0x453ac9=_0x1ae9de;return _0x37ab2c[_0x453ac9(0x1b6)]?typeof _0x329b1b[_0x42292a]=='function':!0x1;}[_0x1ae9de(0x276)](_0x22f058){var _0x241b7a=_0x1ae9de,_0x3d4e65='';return _0x3d4e65=typeof _0x22f058,_0x3d4e65==='object'?this['_objectToString'](_0x22f058)==='[object\\x20Array]'?_0x3d4e65='array':this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x243)?_0x3d4e65=_0x241b7a(0x1d8):this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x235)?_0x3d4e65=_0x241b7a(0x269):_0x22f058===null?_0x3d4e65=_0x241b7a(0x217):_0x22f058[_0x241b7a(0x216)]&&(_0x3d4e65=_0x22f058[_0x241b7a(0x216)][_0x241b7a(0x21b)]||_0x3d4e65):_0x3d4e65===_0x241b7a(0x20f)&&this['_HTMLAllCollection']&&_0x22f058 instanceof this[_0x241b7a(0x285)]&&(_0x3d4e65=_0x241b7a(0x239)),_0x3d4e65;}[_0x1ae9de(0x21a)](_0x1de872){var _0x3570e9=_0x1ae9de;return Object[_0x3570e9(0x28d)][_0x3570e9(0x232)][_0x3570e9(0x273)](_0x1de872);}[_0x1ae9de(0x22f)](_0x42b981){var _0x1b4389=_0x1ae9de;return _0x42b981==='boolean'||_0x42b981==='string'||_0x42b981===_0x1b4389(0x1f0);}['_isPrimitiveWrapperType'](_0x57d12a){var _0x51fa40=_0x1ae9de;return _0x57d12a==='Boolean'||_0x57d12a==='String'||_0x57d12a===_0x51fa40(0x225);}[_0x1ae9de(0x1b8)](_0x3de90e,_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85){var _0x279d30=this;return function(_0x56c688){var _0x31cb49=_0x2800,_0x64fca0=_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x265)],_0x189cd8=_0x5bf061['node'][_0x31cb49(0x25d)],_0x5ea25f=_0x5bf061[_0x31cb49(0x28c)]['parent'];_0x5bf061['node'][_0x31cb49(0x23b)]=_0x64fca0,_0x5bf061['node'][_0x31cb49(0x25d)]=typeof _0x22b26e==_0x31cb49(0x1f0)?_0x22b26e:_0x56c688,_0x3de90e[_0x31cb49(0x204)](_0x279d30[_0x31cb49(0x25c)](_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85)),_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x23b)]=_0x5ea25f,_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x25d)]=_0x189cd8;};}['_addObjectProperty'](_0x8f1714,_0x46c19e,_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881){var _0x557444=_0x1ae9de,_0x58766c=this;return _0x46c19e[_0x557444(0x1d7)+_0x3c5712['toString']()]=!0x0,function(_0x494a74){var _0x3c739b=_0x557444,_0x38c099=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x265)],_0xea8865=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)],_0x1da583=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)];_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x38c099,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0x494a74,_0x8f1714[_0x3c739b(0x204)](_0x58766c[_0x3c739b(0x25c)](_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881)),_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x1da583,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0xea8865;};}[_0x1ae9de(0x25c)](_0xa26af7,_0xd1783c,_0x4c3410,_0xa3bf2,_0x9fad98){var _0xa63a4b=_0x1ae9de,_0x36eca9=this;_0x9fad98||(_0x9fad98=function(_0x4958a8,_0x41ca28){return _0x4958a8[_0x41ca28];});var _0x29cbb9=_0x4c3410[_0xa63a4b(0x232)](),_0x5cfb46=_0xa3bf2[_0xa63a4b(0x277)]||{},_0x445183=_0xa3bf2[_0xa63a4b(0x1d1)],_0x316f50=_0xa3bf2['isExpressionToEvaluate'];try{var _0x141d25=this['_isMap'](_0xa26af7),_0xfd5f67=_0x29cbb9;_0x141d25&&_0xfd5f67[0x0]==='\\x27'&&(_0xfd5f67=_0xfd5f67[_0xa63a4b(0x1a9)](0x1,_0xfd5f67[_0xa63a4b(0x24d)]-0x2));var _0x4fdb4d=_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46[_0xa63a4b(0x1d7)+_0xfd5f67];_0x4fdb4d&&(_0xa3bf2[_0xa63a4b(0x1d1)]=_0xa3bf2[_0xa63a4b(0x1d1)]+0x1),_0xa3bf2[_0xa63a4b(0x21e)]=!!_0x4fdb4d;var _0x475157=typeof _0x4c3410=='symbol',_0x29d85c={'name':_0x475157||_0x141d25?_0x29cbb9:this['_propertyName'](_0x29cbb9)};if(_0x475157&&(_0x29d85c[_0xa63a4b(0x1d9)]=!0x0),!(_0xd1783c===_0xa63a4b(0x24f)||_0xd1783c===_0xa63a4b(0x24e))){var _0x260b73=this[_0xa63a4b(0x1cb)](_0xa26af7,_0x4c3410);if(_0x260b73&&(_0x260b73[_0xa63a4b(0x205)]&&(_0x29d85c[_0xa63a4b(0x1a5)]=!0x0),_0x260b73[_0xa63a4b(0x1fb)]&&!_0x4fdb4d&&!_0xa3bf2[_0xa63a4b(0x1be)]))return _0x29d85c['getter']=!0x0,this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x194fa5;try{_0x194fa5=_0x9fad98(_0xa26af7,_0x4c3410);}catch(_0x2c3142){return _0x29d85c={'name':_0x29cbb9,'type':_0xa63a4b(0x1c8),'error':_0x2c3142[_0xa63a4b(0x222)]},this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x50852a=this[_0xa63a4b(0x276)](_0x194fa5),_0x3ab79e=this[_0xa63a4b(0x22f)](_0x50852a);if(_0x29d85c[_0xa63a4b(0x228)]=_0x50852a,_0x3ab79e)this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x30a33f=_0xa63a4b;_0x29d85c[_0x30a33f(0x1f4)]=_0x194fa5['valueOf'](),!_0x4fdb4d&&_0x36eca9[_0x30a33f(0x1c4)](_0x50852a,_0x29d85c,_0xa3bf2,{});});else{var _0x2eb8d1=_0xa3bf2[_0xa63a4b(0x22c)]&&_0xa3bf2[_0xa63a4b(0x1d3)]<_0xa3bf2['autoExpandMaxDepth']&&_0xa3bf2[_0xa63a4b(0x22e)]['indexOf'](_0x194fa5)<0x0&&_0x50852a!=='function'&&_0xa3bf2[_0xa63a4b(0x25f)]<_0xa3bf2['autoExpandLimit'];_0x2eb8d1||_0xa3bf2[_0xa63a4b(0x1d3)]<_0x445183||_0x4fdb4d?(this['serialize'](_0x29d85c,_0x194fa5,_0xa3bf2,_0x4fdb4d||{}),this[_0xa63a4b(0x236)](_0x194fa5,_0x29d85c)):this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x1ac2f4=_0xa63a4b;_0x50852a===_0x1ac2f4(0x217)||_0x50852a==='undefined'||(delete _0x29d85c['value'],_0x29d85c[_0x1ac2f4(0x210)]=!0x0);});}return _0x29d85c;}finally{_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46,_0xa3bf2['depth']=_0x445183,_0xa3bf2[_0xa63a4b(0x21e)]=_0x316f50;}}['_capIfString'](_0x15a619,_0x2e9551,_0x2d0dc7,_0x3aa61d){var _0x1ccfd8=_0x1ae9de,_0x14e5ce=_0x3aa61d[_0x1ccfd8(0x268)]||_0x2d0dc7[_0x1ccfd8(0x268)];if((_0x15a619===_0x1ccfd8(0x282)||_0x15a619===_0x1ccfd8(0x293))&&_0x2e9551['value']){let _0x381743=_0x2e9551[_0x1ccfd8(0x1f4)]['length'];_0x2d0dc7['allStrLength']+=_0x381743,_0x2d0dc7['allStrLength']>_0x2d0dc7['totalStrLength']?(_0x2e9551[_0x1ccfd8(0x210)]='',delete _0x2e9551[_0x1ccfd8(0x1f4)]):_0x381743>_0x14e5ce&&(_0x2e9551[_0x1ccfd8(0x210)]=_0x2e9551[_0x1ccfd8(0x1f4)]['substr'](0x0,_0x14e5ce),delete _0x2e9551['value']);}}[_0x1ae9de(0x283)](_0x11ab3e){var _0x455bcd=_0x1ae9de;return!!(_0x11ab3e&&_0x2f1a70['Map']&&this[_0x455bcd(0x21a)](_0x11ab3e)===_0x455bcd(0x20e)&&_0x11ab3e[_0x455bcd(0x258)]);}[_0x1ae9de(0x213)](_0x59761d){var _0x205d94=_0x1ae9de;if(_0x59761d[_0x205d94(0x26a)](/^\\d+$/))return _0x59761d;var _0x283bad;try{_0x283bad=JSON[_0x205d94(0x1c2)](''+_0x59761d);}catch{_0x283bad='\\x22'+this[_0x205d94(0x21a)](_0x59761d)+'\\x22';}return _0x283bad['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x283bad=_0x283bad[_0x205d94(0x1a9)](0x1,_0x283bad[_0x205d94(0x24d)]-0x2):_0x283bad=_0x283bad[_0x205d94(0x27e)](/'/g,'\\x5c\\x27')[_0x205d94(0x27e)](/\\\\\"/g,'\\x22')[_0x205d94(0x27e)](/(^\"|\"$)/g,'\\x27'),_0x283bad;}[_0x1ae9de(0x1da)](_0x55bb11,_0x1b3795,_0x48f261,_0x3e21aa){var _0x571adc=_0x1ae9de;this[_0x571adc(0x231)](_0x55bb11,_0x1b3795),_0x3e21aa&&_0x3e21aa(),this['_additionalMetadata'](_0x48f261,_0x55bb11),this[_0x571adc(0x238)](_0x55bb11,_0x1b3795);}[_0x1ae9de(0x231)](_0xe082ed,_0x50b700){var _0x489d9f=_0x1ae9de;this['_setNodeId'](_0xe082ed,_0x50b700),this[_0x489d9f(0x1c1)](_0xe082ed,_0x50b700),this['_setNodeExpressionPath'](_0xe082ed,_0x50b700),this['_setNodePermissions'](_0xe082ed,_0x50b700);}['_setNodeId'](_0x56e200,_0x453198){}['_setNodeQueryPath'](_0x40a95f,_0x1f617a){}[_0x1ae9de(0x20a)](_0x295c6a,_0x297bb4){}[_0x1ae9de(0x1ef)](_0x3f6925){return _0x3f6925===this['_undefined'];}[_0x1ae9de(0x238)](_0x215840,_0x2292fd){var _0x544c37=_0x1ae9de;this[_0x544c37(0x20a)](_0x215840,_0x2292fd),this['_setNodeExpandableState'](_0x215840),_0x2292fd[_0x544c37(0x1d6)]&&this['_sortProps'](_0x215840),this[_0x544c37(0x1af)](_0x215840,_0x2292fd),this[_0x544c37(0x271)](_0x215840,_0x2292fd),this[_0x544c37(0x253)](_0x215840);}[_0x1ae9de(0x236)](_0x90e37d,_0x2905ac){var _0x245bf4=_0x1ae9de;let _0x404a53;try{_0x2f1a70[_0x245bf4(0x227)]&&(_0x404a53=_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)],_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)]=function(){}),_0x90e37d&&typeof _0x90e37d[_0x245bf4(0x24d)]==_0x245bf4(0x1f0)&&(_0x2905ac[_0x245bf4(0x24d)]=_0x90e37d[_0x245bf4(0x24d)]);}catch{}finally{_0x404a53&&(_0x2f1a70['console'][_0x245bf4(0x22a)]=_0x404a53);}if(_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x1f0)||_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x225)){if(isNaN(_0x2905ac[_0x245bf4(0x1f4)]))_0x2905ac['nan']=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];else switch(_0x2905ac[_0x245bf4(0x1f4)]){case Number[_0x245bf4(0x279)]:_0x2905ac[_0x245bf4(0x223)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case Number[_0x245bf4(0x261)]:_0x2905ac[_0x245bf4(0x215)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case 0x0:this['_isNegativeZero'](_0x2905ac['value'])&&(_0x2905ac['negativeZero']=!0x0);break;}}else _0x2905ac['type']==='function'&&typeof _0x90e37d[_0x245bf4(0x21b)]==_0x245bf4(0x282)&&_0x90e37d[_0x245bf4(0x21b)]&&_0x2905ac['name']&&_0x90e37d[_0x245bf4(0x21b)]!==_0x2905ac[_0x245bf4(0x21b)]&&(_0x2905ac[_0x245bf4(0x267)]=_0x90e37d['name']);}[_0x1ae9de(0x23f)](_0x3603f9){return 0x1/_0x3603f9===Number['NEGATIVE_INFINITY'];}[_0x1ae9de(0x226)](_0x91135f){var _0x27bcc9=_0x1ae9de;!_0x91135f['props']||!_0x91135f['props'][_0x27bcc9(0x24d)]||_0x91135f[_0x27bcc9(0x228)]==='array'||_0x91135f[_0x27bcc9(0x228)]==='Map'||_0x91135f[_0x27bcc9(0x228)]===_0x27bcc9(0x1f8)||_0x91135f['props'][_0x27bcc9(0x1b2)](function(_0x2a2cdb,_0x49ee4b){var _0x5e76b3=_0x27bcc9,_0x19063e=_0x2a2cdb[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)](),_0x446003=_0x49ee4b[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)]();return _0x19063e<_0x446003?-0x1:_0x19063e>_0x446003?0x1:0x0;});}['_addFunctionsNode'](_0x2e8e4d,_0x199c30){var _0x3d3aa0=_0x1ae9de;if(!(_0x199c30[_0x3d3aa0(0x1b6)]||!_0x2e8e4d[_0x3d3aa0(0x1e9)]||!_0x2e8e4d['props']['length'])){for(var _0x435133=[],_0x2531e7=[],_0x4b5a61=0x0,_0x36d28b=_0x2e8e4d[_0x3d3aa0(0x1e9)]['length'];_0x4b5a61<_0x36d28b;_0x4b5a61++){var _0x10d795=_0x2e8e4d['props'][_0x4b5a61];_0x10d795[_0x3d3aa0(0x228)]===_0x3d3aa0(0x254)?_0x435133[_0x3d3aa0(0x204)](_0x10d795):_0x2531e7[_0x3d3aa0(0x204)](_0x10d795);}if(!(!_0x2531e7[_0x3d3aa0(0x24d)]||_0x435133['length']<=0x1)){_0x2e8e4d['props']=_0x2531e7;var _0x14dec4={'functionsNode':!0x0,'props':_0x435133};this[_0x3d3aa0(0x28e)](_0x14dec4,_0x199c30),this[_0x3d3aa0(0x20a)](_0x14dec4,_0x199c30),this['_setNodeExpandableState'](_0x14dec4),this['_setNodePermissions'](_0x14dec4,_0x199c30),_0x14dec4['id']+='\\x20f',_0x2e8e4d['props']['unshift'](_0x14dec4);}}}['_addLoadNode'](_0x4a8f7a,_0x346db0){}['_setNodeExpandableState'](_0x1c6fd1){}[_0x1ae9de(0x1de)](_0x1211e9){var _0x3903b5=_0x1ae9de;return Array[_0x3903b5(0x208)](_0x1211e9)||typeof _0x1211e9=='object'&&this[_0x3903b5(0x21a)](_0x1211e9)==='[object\\x20Array]';}[_0x1ae9de(0x1d0)](_0x311e8c,_0x69f8f0){}[_0x1ae9de(0x253)](_0x1fb5ad){var _0x4e516a=_0x1ae9de;delete _0x1fb5ad[_0x4e516a(0x1fc)],delete _0x1fb5ad['_hasSetOnItsPath'],delete _0x1fb5ad['_hasMapOnItsPath'];}['_setNodeExpressionPath'](_0x1f43f0,_0x5dc18c){}}let _0x44e097=new _0x39aee3(),_0x555933={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x5ef4bb={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x47aee0(_0x5f519b,_0x36e1c2,_0x38a5b2,_0x245a33,_0x33842e,_0x47f99d){var _0x1b6dc9=_0x1ae9de;let _0x4e9097,_0x2d5f08;try{_0x2d5f08=_0x5f4254(),_0x4e9097=_0x39be01[_0x36e1c2],!_0x4e9097||_0x2d5f08-_0x4e9097['ts']>0x1f4&&_0x4e9097[_0x1b6dc9(0x1eb)]&&_0x4e9097[_0x1b6dc9(0x209)]/_0x4e9097[_0x1b6dc9(0x1eb)]<0x64?(_0x39be01[_0x36e1c2]=_0x4e9097={'count':0x0,'time':0x0,'ts':_0x2d5f08},_0x39be01[_0x1b6dc9(0x1a1)]={}):_0x2d5f08-_0x39be01[_0x1b6dc9(0x1a1)]['ts']>0x32&&_0x39be01[_0x1b6dc9(0x1a1)]['count']&&_0x39be01[_0x1b6dc9(0x1a1)]['time']/_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x1eb)]<0x64&&(_0x39be01[_0x1b6dc9(0x1a1)]={});let _0x321c5e=[],_0x103871=_0x4e9097['reduceLimits']||_0x39be01[_0x1b6dc9(0x1a1)]['reduceLimits']?_0x5ef4bb:_0x555933,_0x1e4aec=_0x11f00b=>{var _0x1d93c3=_0x1b6dc9;let _0x3970c5={};return _0x3970c5['props']=_0x11f00b[_0x1d93c3(0x1e9)],_0x3970c5[_0x1d93c3(0x22d)]=_0x11f00b[_0x1d93c3(0x22d)],_0x3970c5[_0x1d93c3(0x268)]=_0x11f00b[_0x1d93c3(0x268)],_0x3970c5[_0x1d93c3(0x1aa)]=_0x11f00b[_0x1d93c3(0x1aa)],_0x3970c5[_0x1d93c3(0x241)]=_0x11f00b['autoExpandLimit'],_0x3970c5[_0x1d93c3(0x1f1)]=_0x11f00b['autoExpandMaxDepth'],_0x3970c5[_0x1d93c3(0x1d6)]=!0x1,_0x3970c5['noFunctions']=!_0x5be072,_0x3970c5[_0x1d93c3(0x1d1)]=0x1,_0x3970c5[_0x1d93c3(0x1d3)]=0x0,_0x3970c5['expId']=_0x1d93c3(0x255),_0x3970c5['rootExpression']=_0x1d93c3(0x1ba),_0x3970c5[_0x1d93c3(0x22c)]=!0x0,_0x3970c5[_0x1d93c3(0x22e)]=[],_0x3970c5['autoExpandPropertyCount']=0x0,_0x3970c5[_0x1d93c3(0x1be)]=!0x0,_0x3970c5[_0x1d93c3(0x1e3)]=0x0,_0x3970c5[_0x1d93c3(0x28c)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3970c5;};for(var _0x4e066e=0x0;_0x4e066e<_0x33842e[_0x1b6dc9(0x24d)];_0x4e066e++)_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'timeNode':_0x5f519b===_0x1b6dc9(0x209)||void 0x0},_0x33842e[_0x4e066e],_0x1e4aec(_0x103871),{}));if(_0x5f519b===_0x1b6dc9(0x1a3)||_0x5f519b===_0x1b6dc9(0x22a)){let _0x4223a0=Error['stackTraceLimit'];try{Error[_0x1b6dc9(0x278)]=0x1/0x0,_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'stackNode':!0x0},new Error()[_0x1b6dc9(0x26b)],_0x1e4aec(_0x103871),{'strLength':0x1/0x0}));}finally{Error[_0x1b6dc9(0x278)]=_0x4223a0;}}return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':_0x321c5e,'id':_0x36e1c2,'context':_0x47f99d}]};}catch(_0x5b28ee){return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':[{'type':'unknown','error':_0x5b28ee&&_0x5b28ee[_0x1b6dc9(0x222)]}],'id':_0x36e1c2,'context':_0x47f99d}]};}finally{try{if(_0x4e9097&&_0x2d5f08){let _0x1d65c6=_0x5f4254();_0x4e9097['count']++,_0x4e9097[_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x4e9097['ts']=_0x1d65c6,_0x39be01[_0x1b6dc9(0x1a1)]['count']++,_0x39be01['hits'][_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x39be01['hits']['ts']=_0x1d65c6,(_0x4e9097[_0x1b6dc9(0x1eb)]>0x32||_0x4e9097[_0x1b6dc9(0x209)]>0x64)&&(_0x4e9097['reduceLimits']=!0x0),(_0x39be01['hits']['count']>0x3e8||_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x209)]>0x12c)&&(_0x39be01['hits'][_0x1b6dc9(0x23a)]=!0x0);}}catch{}}}return _0x47aee0;}((_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x2de19f,_0x1e302a,_0x363b8d,_0xa0a303,_0x5e55f1,_0x306ab3)=>{var _0x313444=_0xfe5e44;if(_0x2abb00[_0x313444(0x24c)])return _0x2abb00[_0x313444(0x24c)];if(!H(_0x2abb00,_0x363b8d,_0x1722a1))return _0x2abb00[_0x313444(0x24c)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x2abb00[_0x313444(0x24c)];let _0x3b7d8d=B(_0x2abb00),_0x4d9f47=_0x3b7d8d[_0x313444(0x1b1)],_0xfc6f6c=_0x3b7d8d[_0x313444(0x212)],_0x175f2b=_0x3b7d8d[_0x313444(0x249)],_0x128725={'hits':{},'ts':{}},_0x42d6ce=X(_0x2abb00,_0xa0a303,_0x128725,_0x2de19f),_0x541b4e=_0x187c8d=>{_0x128725['ts'][_0x187c8d]=_0xfc6f6c();},_0x49ea08=(_0x2965f7,_0x54e0b4)=>{let _0xa3a7a1=_0x128725['ts'][_0x54e0b4];if(delete _0x128725['ts'][_0x54e0b4],_0xa3a7a1){let _0x3799a5=_0x4d9f47(_0xa3a7a1,_0xfc6f6c());_0x48a896(_0x42d6ce('time',_0x2965f7,_0x175f2b(),_0x1c96ca,[_0x3799a5],_0x54e0b4));}},_0x1ca95f=_0x556e2e=>{var _0x634c6d=_0x313444,_0x3a78f9;return _0x1722a1===_0x634c6d(0x237)&&_0x2abb00[_0x634c6d(0x1a7)]&&((_0x3a78f9=_0x556e2e==null?void 0x0:_0x556e2e[_0x634c6d(0x1f6)])==null?void 0x0:_0x3a78f9[_0x634c6d(0x24d)])&&(_0x556e2e['args'][0x0][_0x634c6d(0x1a7)]=_0x2abb00[_0x634c6d(0x1a7)]),_0x556e2e;};_0x2abb00[_0x313444(0x24c)]={'consoleLog':(_0x1d9044,_0x3da3ab)=>{var _0x578a1e=_0x313444;_0x2abb00[_0x578a1e(0x227)]['log'][_0x578a1e(0x21b)]!==_0x578a1e(0x27d)&&_0x48a896(_0x42d6ce('log',_0x1d9044,_0x175f2b(),_0x1c96ca,_0x3da3ab));},'consoleTrace':(_0x38468d,_0x50b548)=>{var _0x144123=_0x313444,_0x2c0a3b,_0x41bd30;_0x2abb00['console'][_0x144123(0x230)][_0x144123(0x21b)]!==_0x144123(0x27a)&&((_0x41bd30=(_0x2c0a3b=_0x2abb00[_0x144123(0x206)])==null?void 0x0:_0x2c0a3b[_0x144123(0x26f)])!=null&&_0x41bd30[_0x144123(0x28c)]&&(_0x2abb00[_0x144123(0x1e1)]=!0x0),_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x38468d,_0x175f2b(),_0x1c96ca,_0x50b548))));},'consoleError':(_0xe83c02,_0x52826e)=>{var _0x14dcca=_0x313444;_0x2abb00[_0x14dcca(0x1e1)]=!0x0,_0x48a896(_0x1ca95f(_0x42d6ce(_0x14dcca(0x22a),_0xe83c02,_0x175f2b(),_0x1c96ca,_0x52826e)));},'consoleTime':_0x5caf3f=>{_0x541b4e(_0x5caf3f);},'consoleTimeEnd':(_0x27d8c5,_0x417474)=>{_0x49ea08(_0x417474,_0x27d8c5);},'autoLog':(_0x85c6df,_0x7f39a2)=>{var _0x40bb49=_0x313444;_0x48a896(_0x42d6ce(_0x40bb49(0x230),_0x7f39a2,_0x175f2b(),_0x1c96ca,[_0x85c6df]));},'autoLogMany':(_0x5158c0,_0x7b99d2)=>{_0x48a896(_0x42d6ce('log',_0x5158c0,_0x175f2b(),_0x1c96ca,_0x7b99d2));},'autoTrace':(_0x1bc11d,_0x565cc9)=>{_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x565cc9,_0x175f2b(),_0x1c96ca,[_0x1bc11d])));},'autoTraceMany':(_0x352345,_0x4c7f95)=>{var _0x378e10=_0x313444;_0x48a896(_0x1ca95f(_0x42d6ce(_0x378e10(0x1a3),_0x352345,_0x175f2b(),_0x1c96ca,_0x4c7f95)));},'autoTime':(_0x5359fa,_0x25990a,_0x323d68)=>{_0x541b4e(_0x323d68);},'autoTimeEnd':(_0x5be9bc,_0x5dbe0a,_0xba445f)=>{_0x49ea08(_0x5dbe0a,_0xba445f);},'coverage':_0x27be41=>{var _0x20affe=_0x313444;_0x48a896({'method':_0x20affe(0x1d2),'version':_0x2de19f,'args':[{'id':_0x27be41}]});}};let _0x48a896=q(_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x5e55f1,_0x306ab3),_0x1c96ca=_0x2abb00['_console_ninja_session'];return _0x2abb00[_0x313444(0x24c)];})(globalThis,'127.0.0.1','60591',_0xfe5e44(0x1ce),'webpack',_0xfe5e44(0x26c),_0xfe5e44(0x286),_0xfe5e44(0x21c),_0xfe5e44(0x1cd),_0xfe5e44(0x275),_0xfe5e44(0x244));")}catch(e){}}function c(e,...t){try{_().consoleLog(e,t)}catch(e){}return t}},"./node_modules/@firebase/analytics/dist/esm/index.esm2017.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{getAnalytics:()=>H,getGoogleAnalyticsClientId:()=>Y,initializeAnalytics:()=>G,isSupported:()=>W,logEvent:()=>Z,setAnalyticsCollectionEnabled:()=>q,setConsent:()=>J,setCurrentScreen:()=>V,setDefaultEventParameters:()=>K,setUserId:()=>$,setUserProperties:()=>X,settings:()=>F});var n=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),i=a("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),x=a("./node_modules/@firebase/util/dist/index.esm2017.js"),s=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js");a("./node_modules/@firebase/installations/dist/esm/index.esm2017.js");const r="analytics",o="firebase_id",_="origin",c=6e4,d="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig",l="https://www.googletagmanager.com/gtag/js",h=new i.Logger("@firebase/analytics"),f={"already-exists":"A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.","already-initialized":"initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.","already-initialized-settings":"Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.","interop-component-reg-failed":"Firebase Analytics Interop Component failed to instantiate: {$reason}","invalid-analytics-context":"Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","indexeddb-unavailable":"IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}","fetch-throttle":"The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.","config-fetch-failed":"Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}","no-api-key":'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',"no-app-id":'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',"no-client-id":'The "client_id" field is empty.',"invalid-gtag-resource":"Trusted Types detected an invalid gtag resource: {$gtagURL}."},u=new x.ErrorFactory("analytics","Analytics",f);function b(e){if(!e.startsWith(l)){const t=u.create("invalid-gtag-resource",{gtagURL:e});return h.warn(t.message),""}return e}function p(e){return Promise.all(e.map((e=>e.catch((e=>e)))))}function m(e,t){const a=function(e,t){let a;return window.trustedTypes&&(a=window.trustedTypes.createPolicy(e,t)),a}("firebase-js-sdk-policy",{createScriptURL:b}),n=document.createElement("script"),i=`${l}?l=${e}&id=${t}`;n.src=a?null==a?void 0:a.createScriptURL(i):i,n.async=!0,document.head.appendChild(n)}function g(e,t,a,n){return async function(i,...x){try{if("event"===i){const[n,i]=x;await async function(e,t,a,n,i){try{let x=[];if(i&&i.send_to){let e=i.send_to;Array.isArray(e)||(e=[e]);const n=await p(a);for(const a of e){const e=n.find((e=>e.measurementId===a)),i=e&&t[e.appId];if(!i){x=[];break}x.push(i)}}0===x.length&&(x=Object.values(t)),await Promise.all(x),e("event",n,i||{})}catch(e){h.error(e)}}(e,t,a,n,i)}else if("config"===i){const[i,s]=x;await async function(e,t,a,n,i,x){const s=n[i];try{if(s)await t[s];else{const e=(await p(a)).find((e=>e.measurementId===i));e&&await t[e.appId]}}catch(e){h.error(e)}e("config",i,x)}(e,t,a,n,i,s)}else if("consent"===i){const[t]=x;e("consent","update",t)}else if("get"===i){const[t,a,n]=x;e("get",t,a,n)}else if("set"===i){const[t]=x;e("set",t)}else e(i,...x)}catch(e){h.error(e)}}}const v=30;const y=new class{constructor(e={},t=1e3){this.throttleMetadata=e,this.intervalMillis=t}getThrottleMetadata(e){return this.throttleMetadata[e]}setThrottleMetadata(e,t){this.throttleMetadata[e]=t}deleteThrottleMetadata(e){delete this.throttleMetadata[e]}};function w(e){return new Headers({Accept:"application/json","x-goog-api-key":e})}async function S(e,t=y,a){const{appId:n,apiKey:i,measurementId:x}=e.options;if(!n)throw u.create("no-app-id");if(!i){if(x)return{measurementId:x,appId:n};throw u.create("no-api-key")}const s=t.getThrottleMetadata(n)||{backoffCount:0,throttleEndTimeMillis:Date.now()},r=new T;return setTimeout((async()=>{r.abort()}),void 0!==a?a:c),E({appId:n,apiKey:i,measurementId:x},s,r,t)}async function E(e,{throttleEndTimeMillis:t,backoffCount:a},n,i=y){var s;const{appId:r,measurementId:o}=e;try{await function(e,t){return new Promise(((a,n)=>{const i=Math.max(t-Date.now(),0),x=setTimeout(a,i);e.addEventListener((()=>{clearTimeout(x),n(u.create("fetch-throttle",{throttleEndTimeMillis:t}))}))}))}(n,t)}catch(e){if(o)return h.warn(`Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID ${o} provided in the "measurementId" field in the local Firebase config. [${null==e?void 0:e.message}]`),{appId:r,measurementId:o};throw e}try{const t=await async function(e){var t;const{appId:a,apiKey:n}=e,i={method:"GET",headers:w(n)},x=d.replace("{app-id}",a),s=await fetch(x,i);if(200!==s.status&&304!==s.status){let e="";try{const a=await s.json();(null===(t=a.error)||void 0===t?void 0:t.message)&&(e=a.error.message)}catch(e){}throw u.create("config-fetch-failed",{httpStatus:s.status,responseMessage:e})}return s.json()}(e);return i.deleteThrottleMetadata(r),t}catch(t){const _=t;if(!function(e){if(!(e instanceof x.FirebaseError&&e.customData))return!1;const t=Number(e.customData.httpStatus);return 429===t||500===t||503===t||504===t}(_)){if(i.deleteThrottleMetadata(r),o)return h.warn(`Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID ${o} provided in the "measurementId" field in the local Firebase config. [${null==_?void 0:_.message}]`),{appId:r,measurementId:o};throw t}const c=503===Number(null===(s=null==_?void 0:_.customData)||void 0===s?void 0:s.httpStatus)?(0,x.calculateBackoffMillis)(a,i.intervalMillis,v):(0,x.calculateBackoffMillis)(a,i.intervalMillis),d={throttleEndTimeMillis:Date.now()+c,backoffCount:a+1};return i.setThrottleMetadata(r,d),h.debug(`Calling attemptFetch again in ${c} millis`),E(e,d,n,i)}}class T{constructor(){this.listeners=[]}addEventListener(e){this.listeners.push(e)}abort(){this.listeners.forEach((e=>e()))}}let I,A;function C(e){A=e}function P(e){I=e}async function L(e,t,a,n,i,s,r){var c;const d=S(e);d.then((t=>{a[t.measurementId]=t.appId,e.options.measurementId&&t.measurementId!==e.options.measurementId&&h.warn(`The measurement ID in the local Firebase config (${e.options.measurementId}) does not match the measurement ID fetched from the server (${t.measurementId}). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.`)})).catch((e=>h.error(e))),t.push(d);const f=async function(){if(!(0,x.isIndexedDBAvailable)())return h.warn(u.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),!1;try{await(0,x.validateIndexedDBOpenable)()}catch(e){return h.warn(u.create("indexeddb-unavailable",{errorInfo:null==e?void 0:e.toString()}).message),!1}return!0}().then((e=>e?n.getId():void 0)),[b,p]=await Promise.all([d,f]);(function(e){const t=window.document.getElementsByTagName("script");for(const a of Object.values(t))if(a.src&&a.src.includes(l)&&a.src.includes(e))return a;return null})(s)||m(s,b.measurementId),A&&(i("consent","default",A),C(void 0)),i("js",new Date);const g=null!==(c=null==r?void 0:r.config)&&void 0!==c?c:{};return g[_]="firebase",g.update=!0,null!=p&&(g[o]=p),i("config",b.measurementId,g),I&&(i("set",I),P(void 0)),b.measurementId}class k{constructor(e){this.app=e}_delete(){return delete D[this.app.options.appId],Promise.resolve()}}let D={},M=[];const O={};let N,B,z="dataLayer",j="gtag",R=!1;function F(e){if(R)throw u.create("already-initialized");e.dataLayerName&&(z=e.dataLayerName),e.gtagName&&(j=e.gtagName)}function U(e,t,a){!function(){const e=[];if((0,x.isBrowserExtension)()&&e.push("This is a browser extension environment."),(0,x.areCookiesEnabled)()||e.push("Cookies are not available."),e.length>0){const t=e.map(((e,t)=>`(${t+1}) ${e}`)).join(" "),a=u.create("invalid-analytics-context",{errorInfo:t});h.warn(a.message)}}();const n=e.options.appId;if(!n)throw u.create("no-app-id");if(!e.options.apiKey){if(!e.options.measurementId)throw u.create("no-api-key");h.warn(`The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID ${e.options.measurementId} provided in the "measurementId" field in the local Firebase config.`)}if(null!=D[n])throw u.create("already-exists",{id:n});if(!R){!function(e){let t=[];Array.isArray(window[e])?t=window[e]:window[e]=t}(z);const{wrappedGtag:e,gtagCore:t}=function(e,t,a,n,i){let x=function(...e){window[n].push(arguments)};return window[i]&&"function"==typeof window[i]&&(x=window[i]),window[i]=g(x,e,t,a),{gtagCore:x,wrappedGtag:window[i]}}(D,M,O,z,j);B=e,N=t,R=!0}D[n]=L(e,M,O,t,N,z,a);return new k(e)}function H(e=(0,n.getApp)()){e=(0,x.getModularInstance)(e);const t=(0,n._getProvider)(e,r);return t.isInitialized()?t.getImmediate():G(e)}function G(e,t={}){const a=(0,n._getProvider)(e,r);if(a.isInitialized()){const e=a.getImmediate();if((0,x.deepEqual)(t,a.getOptions()))return e;throw u.create("already-initialized")}return a.initialize({options:t})}async function W(){if((0,x.isBrowserExtension)())return!1;if(!(0,x.areCookiesEnabled)())return!1;if(!(0,x.isIndexedDBAvailable)())return!1;try{return await(0,x.validateIndexedDBOpenable)()}catch(e){return!1}}function V(e,t,a){e=(0,x.getModularInstance)(e),async function(e,t,a,n){if(n&&n.global)return e("set",{screen_name:a}),Promise.resolve();e("config",await t,{update:!0,screen_name:a})}(B,D[e.app.options.appId],t,a).catch((e=>h.error(e)))}async function Y(e){return e=(0,x.getModularInstance)(e),async function(e,t){const a=await t;return new Promise(((t,n)=>{e("get",a,"client_id",(e=>{e||n(u.create("no-client-id")),t(e)}))}))}(B,D[e.app.options.appId])}function $(e,t,a){e=(0,x.getModularInstance)(e),async function(e,t,a,n){if(n&&n.global)return e("set",{user_id:a}),Promise.resolve();e("config",await t,{update:!0,user_id:a})}(B,D[e.app.options.appId],t,a).catch((e=>h.error(e)))}function X(e,t,a){e=(0,x.getModularInstance)(e),async function(e,t,a,n){if(n&&n.global){const t={};for(const e of Object.keys(a))t[`user_properties.${e}`]=a[e];return e("set",t),Promise.resolve()}e("config",await t,{update:!0,user_properties:a})}(B,D[e.app.options.appId],t,a).catch((e=>h.error(e)))}function q(e,t){e=(0,x.getModularInstance)(e),async function(e,t){const a=await e;window[`ga-disable-${a}`]=!t}(D[e.app.options.appId],t).catch((e=>h.error(e)))}function K(e){B?B("set",e):P(e)}function Z(e,t,a,n){e=(0,x.getModularInstance)(e),async function(e,t,a,n,i){if(i&&i.global)e("event",a,n);else{const i=await t;e("event",a,Object.assign(Object.assign({},n),{send_to:i}))}}(B,D[e.app.options.appId],t,a,n).catch((e=>h.error(e)))}function J(e){B?B("consent","update",e):C(e)}const Q="@firebase/analytics",ee="0.10.0";(0,n._registerComponent)(new s.Component(r,((e,{options:t})=>U(e.getProvider("app").getImmediate(),e.getProvider("installations-internal").getImmediate(),t)),"PUBLIC")),(0,n._registerComponent)(new s.Component("analytics-internal",(function(e){try{const t=e.getProvider(r).getImmediate();return{logEvent:(e,a,n)=>Z(t,e,a,n)}}catch(e){throw u.create("interop-component-reg-failed",{reason:e})}}),"PRIVATE")),(0,n.registerVersion)(Q,ee),(0,n.registerVersion)(Q,ee,"esm2017")},"./node_modules/@firebase/app/dist/esm/index.esm2017.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{FirebaseError:()=>x.FirebaseError,SDK_VERSION:()=>X,_DEFAULT_ENTRY_NAME:()=>N,_addComponent:()=>R,_addOrOverwriteComponent:()=>F,_apps:()=>z,_clearComponents:()=>W,_components:()=>j,_getProvider:()=>H,_registerComponent:()=>U,_removeServiceInstance:()=>G,deleteApp:()=>J,getApp:()=>K,getApps:()=>Z,initializeApp:()=>q,onLog:()=>ee,registerVersion:()=>Q,setLogLevel:()=>te});var n=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),i=a("./node_modules/@firebase/logger/dist/esm/index.esm2017.js"),x=a("./node_modules/@firebase/util/dist/index.esm2017.js"),s=a("./node_modules/idb/build/index.js");class r{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const o="@firebase/app",_="0.9.15",c=new i.Logger("@firebase/app"),d="@firebase/app-compat",l="@firebase/analytics-compat",h="@firebase/analytics",f="@firebase/app-check-compat",u="@firebase/app-check",b="@firebase/auth",p="@firebase/auth-compat",m="@firebase/database",g="@firebase/database-compat",v="@firebase/functions",y="@firebase/functions-compat",w="@firebase/installations",S="@firebase/installations-compat",E="@firebase/messaging",T="@firebase/messaging-compat",I="@firebase/performance",A="@firebase/performance-compat",C="@firebase/remote-config",P="@firebase/remote-config-compat",L="@firebase/storage",k="@firebase/storage-compat",D="@firebase/firestore",M="@firebase/firestore-compat",O="firebase",N="[DEFAULT]",B={[o]:"fire-core",[d]:"fire-core-compat",[h]:"fire-analytics",[l]:"fire-analytics-compat",[u]:"fire-app-check",[f]:"fire-app-check-compat",[b]:"fire-auth",[p]:"fire-auth-compat",[m]:"fire-rtdb",[g]:"fire-rtdb-compat",[v]:"fire-fn",[y]:"fire-fn-compat",[w]:"fire-iid",[S]:"fire-iid-compat",[E]:"fire-fcm",[T]:"fire-fcm-compat",[I]:"fire-perf",[A]:"fire-perf-compat",[C]:"fire-rc",[P]:"fire-rc-compat",[L]:"fire-gcs",[k]:"fire-gcs-compat",[D]:"fire-fst",[M]:"fire-fst-compat","fire-js":"fire-js",[O]:"fire-js-all"},z=new Map,j=new Map;function R(e,t){try{e.container.addComponent(t)}catch(a){c.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,a)}}function F(e,t){e.container.addOrOverwriteComponent(t)}function U(e){const t=e.name;if(j.has(t))return c.debug(`There were multiple attempts to register component ${t}.`),!1;j.set(t,e);for(const t of z.values())R(t,e);return!0}function H(e,t){const a=e.container.getProvider("heartbeat").getImmediate({optional:!0});return a&&a.triggerHeartbeat(),e.container.getProvider(t)}function G(e,t,a=N){H(e,t).clearInstance(a)}function W(){j.clear()}const V={"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."},Y=new x.ErrorFactory("app","Firebase",V);class ${constructor(e,t,a){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=a,this.container.addComponent(new n.Component("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw Y.create("app-deleted",{appName:this._name})}}const X="10.1.0";function q(e,t={}){let a=e;if("object"!=typeof t){t={name:t}}const i=Object.assign({name:N,automaticDataCollectionEnabled:!1},t),s=i.name;if("string"!=typeof s||!s)throw Y.create("bad-app-name",{appName:String(s)});if(a||(a=(0,x.getDefaultAppConfig)()),!a)throw Y.create("no-options");const r=z.get(s);if(r){if((0,x.deepEqual)(a,r.options)&&(0,x.deepEqual)(i,r.config))return r;throw Y.create("duplicate-app",{appName:s})}const o=new n.ComponentContainer(s);for(const e of j.values())o.addComponent(e);const _=new $(a,i,o);return z.set(s,_),_}function K(e=N){const t=z.get(e);if(!t&&e===N&&(0,x.getDefaultAppConfig)())return q();if(!t)throw Y.create("no-app",{appName:e});return t}function Z(){return Array.from(z.values())}async function J(e){const t=e.name;z.has(t)&&(z.delete(t),await Promise.all(e.container.getProviders().map((e=>e.delete()))),e.isDeleted=!0)}function Q(e,t,a){var i;let x=null!==(i=B[e])&&void 0!==i?i:e;a&&(x+=`-${a}`);const s=x.match(/\s|\//),r=t.match(/\s|\//);if(s||r){const e=[`Unable to register library "${x}" with version "${t}":`];return s&&e.push(`library name "${x}" contains illegal characters (whitespace or "/")`),s&&r&&e.push("and"),r&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void c.warn(e.join(" "))}U(new n.Component(`${x}-version`,(()=>({library:x,version:t})),"VERSION"))}function ee(e,t){if(null!==e&&"function"!=typeof e)throw Y.create("invalid-log-argument");(0,i.setUserLogHandler)(e,t)}function te(e){(0,i.setLogLevel)(e)}const ae="firebase-heartbeat-database",ne=1,ie="firebase-heartbeat-store";let xe=null;function se(){return xe||(xe=(0,s.openDB)(ae,ne,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(ie)}}).catch((e=>{throw Y.create("idb-open",{originalErrorMessage:e.message})}))),xe}async function re(e,t){try{const a=(await se()).transaction(ie,"readwrite"),n=a.objectStore(ie);await n.put(t,oe(e)),await a.done}catch(e){if(e instanceof x.FirebaseError)c.warn(e.message);else{const t=Y.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});c.warn(t.message)}}}function oe(e){return`${e.name}!${e.options.appId}`}class _e{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new de(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=ce();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=ce(),{heartbeatsToSend:t,unsentEntries:a}=function(e,t=1024){const a=[];let n=e.slice();for(const i of e){const e=a.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),le(a)>t){e.dates.pop();break}}else if(a.push({agent:i.agent,dates:[i.date]}),le(a)>t){a.pop();break}n=n.slice(1)}return{heartbeatsToSend:a,unsentEntries:n}}(this._heartbeatsCache.heartbeats),n=(0,x.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,a.length>0?(this._heartbeatsCache.heartbeats=a,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),n}}function ce(){return(new Date).toISOString().substring(0,10)}class de{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,x.isIndexedDBAvailable)()&&(0,x.validateIndexedDBOpenable)().then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){return await async function(e){try{const t=await se();return await t.transaction(ie).objectStore(ie).get(oe(e))}catch(e){if(e instanceof x.FirebaseError)c.warn(e.message);else{const t=Y.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});c.warn(t.message)}}}(this.app)||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const a=await this.read();return re(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:a.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const a=await this.read();return re(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:a.lastSentHeartbeatDate,heartbeats:[...a.heartbeats,...e.heartbeats]})}}}function le(e){return(0,x.base64urlEncodeWithoutPadding)(JSON.stringify({version:2,heartbeats:e})).length}var he;he="",U(new n.Component("platform-logger",(e=>new r(e)),"PRIVATE")),U(new n.Component("heartbeat",(e=>new _e(e)),"PRIVATE")),Q(o,_,he),Q(o,_,"esm2017"),Q("fire-js","")},"./node_modules/@firebase/component/dist/esm/index.esm2017.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{Component:()=>i,ComponentContainer:()=>r,Provider:()=>s});var n=a("./node_modules/@firebase/util/dist/index.esm2017.js");class i{constructor(e,t,a){this.name=e,this.instanceFactory=t,this.type=a,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const x="[DEFAULT]";class s{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new n.Deferred;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const a=this.getOrInitializeService({instanceIdentifier:t});a&&e.resolve(a)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const a=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),n=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(a)&&!this.shouldAutoInitialize()){if(n)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:a})}catch(e){if(n)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:x})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const a=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:a});t.resolve(e)}catch(e){}}}}clearInstance(e=x){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=x){return this.instances.has(e)}getOptions(e=x){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,a=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(a))throw Error(`${this.name}(${a}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const n=this.getOrInitializeService({instanceIdentifier:a,options:t});for(const[e,t]of this.instancesDeferred.entries()){a===this.normalizeInstanceIdentifier(e)&&t.resolve(n)}return n}onInit(e,t){var a;const n=this.normalizeInstanceIdentifier(t),i=null!==(a=this.onInitCallbacks.get(n))&&void 0!==a?a:new Set;i.add(e),this.onInitCallbacks.set(n,i);const x=this.instances.get(n);return x&&e(x,n),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const a=this.onInitCallbacks.get(t);if(a)for(const n of a)try{n(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let a=this.instances.get(e);if(!a&&this.component&&(a=this.component.instanceFactory(this.container,{instanceIdentifier:(n=e,n===x?void 0:n),options:t}),this.instances.set(e,a),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(a,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,a)}catch(e){}var n;return a||null}normalizeInstanceIdentifier(e=x){return this.component?this.component.multipleInstances?e:x:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class r{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new s(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},"./node_modules/@firebase/installations/dist/esm/index.esm2017.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{deleteInstallations:()=>Q,getId:()=>K,getInstallations:()=>te,getToken:()=>Z,onIdChange:()=>ee});var n=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js"),i=a("./node_modules/@firebase/component/dist/esm/index.esm2017.js"),x=a("./node_modules/@firebase/util/dist/index.esm2017.js"),s=a("./node_modules/@firebase/installations/node_modules/idb/build/index.js");const r="@firebase/installations",o="0.6.4",_=1e4,c=`w:${o}`,d="FIS_v2",l="https://firebaseinstallations.googleapis.com/v1",h=36e5,f={"missing-app-config-values":'Missing App configuration value: "{$valueName}"',"not-registered":"Firebase Installation is not registered.","installation-not-found":"Firebase Installation not found.","request-failed":'{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',"app-offline":"Could not process request. Application offline.","delete-pending-registration":"Can't delete installation while there is a pending registration request."},u=new x.ErrorFactory("installations","Installations",f);function b(e){return e instanceof x.FirebaseError&&e.code.includes("request-failed")}function p({projectId:e}){return`${l}/projects/${e}/installations`}function m(e){return{token:e.token,requestStatus:2,expiresIn:(t=e.expiresIn,Number(t.replace("s","000"))),creationTime:Date.now()};var t}async function g(e,t){const a=(await t.json()).error;return u.create("request-failed",{requestName:e,serverCode:a.code,serverMessage:a.message,serverStatus:a.status})}function v({apiKey:e}){return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function y(e,{refreshToken:t}){const a=v(e);return a.append("Authorization",function(e){return`${d} ${e}`}(t)),a}async function w(e){const t=await e();return t.status>=500&&t.status<600?e():t}function S(e){return new Promise((t=>{setTimeout(t,e)}))}const E=/^[cdef][\w-]{21}$/,T="";function I(){try{const e=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(e),e[0]=112+e[0]%16;const t=function(e){const t=(a=e,btoa(String.fromCharCode(...a)).replace(/\+/g,"-").replace(/\//g,"_"));var a;return t.substr(0,22)}(e);return E.test(t)?t:T}catch(e){return T}}function A(e){return`${e.appName}!${e.appId}`}const C=new Map;function P(e,t){const a=A(e);L(a,t),function(e,t){const a=D();a&&a.postMessage({key:e,fid:t});M()}(a,t)}function L(e,t){const a=C.get(e);if(a)for(const e of a)e(t)}let k=null;function D(){return!k&&"BroadcastChannel"in self&&(k=new BroadcastChannel("[Firebase] FID Change"),k.onmessage=e=>{L(e.data.key,e.data.fid)}),k}function M(){0===C.size&&k&&(k.close(),k=null)}const O="firebase-installations-database",N=1,B="firebase-installations-store";let z=null;function j(){return z||(z=(0,s.openDB)(O,N,{upgrade:(e,t)=>{if(0===t)e.createObjectStore(B)}})),z}async function R(e,t){const a=A(e),n=(await j()).transaction(B,"readwrite"),i=n.objectStore(B),x=await i.get(a);return await i.put(t,a),await n.done,x&&x.fid===t.fid||P(e,t.fid),t}async function F(e){const t=A(e),a=(await j()).transaction(B,"readwrite");await a.objectStore(B).delete(t),await a.done}async function U(e,t){const a=A(e),n=(await j()).transaction(B,"readwrite"),i=n.objectStore(B),x=await i.get(a),s=t(x);return void 0===s?await i.delete(a):await i.put(s,a),await n.done,!s||x&&x.fid===s.fid||P(e,s.fid),s}async function H(e){let t;const a=await U(e.appConfig,(a=>{const n=function(e){const t=e||{fid:I(),registrationStatus:0};return V(t)}(a),i=function(e,t){if(0===t.registrationStatus){if(!navigator.onLine){return{installationEntry:t,registrationPromise:Promise.reject(u.create("app-offline"))}}const a={fid:t.fid,registrationStatus:1,registrationTime:Date.now()},n=async function(e,t){try{const a=await async function({appConfig:e,heartbeatServiceProvider:t},{fid:a}){const n=p(e),i=v(e),x=t.getImmediate({optional:!0});if(x){const e=await x.getHeartbeatsHeader();e&&i.append("x-firebase-client",e)}const s={fid:a,authVersion:d,appId:e.appId,sdkVersion:c},r={method:"POST",headers:i,body:JSON.stringify(s)},o=await w((()=>fetch(n,r)));if(o.ok){const e=await o.json();return{fid:e.fid||a,registrationStatus:2,refreshToken:e.refreshToken,authToken:m(e.authToken)}}throw await g("Create Installation",o)}(e,t);return R(e.appConfig,a)}catch(a){throw b(a)&&409===a.customData.serverCode?await F(e.appConfig):await R(e.appConfig,{fid:t.fid,registrationStatus:0}),a}}(e,a);return{installationEntry:a,registrationPromise:n}}return 1===t.registrationStatus?{installationEntry:t,registrationPromise:G(e)}:{installationEntry:t}}(e,n);return t=i.registrationPromise,i.installationEntry}));return a.fid===T?{installationEntry:await t}:{installationEntry:a,registrationPromise:t}}async function G(e){let t=await W(e.appConfig);for(;1===t.registrationStatus;)await S(100),t=await W(e.appConfig);if(0===t.registrationStatus){const{installationEntry:t,registrationPromise:a}=await H(e);return a||t}return t}function W(e){return U(e,(e=>{if(!e)throw u.create("installation-not-found");return V(e)}))}function V(e){return 1===(t=e).registrationStatus&&t.registrationTime+_<Date.now()?{fid:e.fid,registrationStatus:0}:e;var t}async function Y({appConfig:e,heartbeatServiceProvider:t},a){const n=function(e,{fid:t}){return`${p(e)}/${t}/authTokens:generate`}(e,a),i=y(e,a),x=t.getImmediate({optional:!0});if(x){const e=await x.getHeartbeatsHeader();e&&i.append("x-firebase-client",e)}const s={installation:{sdkVersion:c,appId:e.appId}},r={method:"POST",headers:i,body:JSON.stringify(s)},o=await w((()=>fetch(n,r)));if(o.ok){return m(await o.json())}throw await g("Generate Auth Token",o)}async function $(e,t=!1){let a;const n=await U(e.appConfig,(n=>{if(!q(n))throw u.create("not-registered");const i=n.authToken;if(!t&&function(e){return 2===e.requestStatus&&!function(e){const t=Date.now();return t<e.creationTime||e.creationTime+e.expiresIn<t+h}(e)}(i))return n;if(1===i.requestStatus)return a=async function(e,t){let a=await X(e.appConfig);for(;1===a.authToken.requestStatus;)await S(100),a=await X(e.appConfig);const n=a.authToken;return 0===n.requestStatus?$(e,t):n}(e,t),n;{if(!navigator.onLine)throw u.create("app-offline");const t=function(e){const t={requestStatus:1,requestTime:Date.now()};return Object.assign(Object.assign({},e),{authToken:t})}(n);return a=async function(e,t){try{const a=await Y(e,t),n=Object.assign(Object.assign({},t),{authToken:a});return await R(e.appConfig,n),a}catch(a){if(!b(a)||401!==a.customData.serverCode&&404!==a.customData.serverCode){const a=Object.assign(Object.assign({},t),{authToken:{requestStatus:0}});await R(e.appConfig,a)}else await F(e.appConfig);throw a}}(e,t),t}}));return a?await a:n.authToken}function X(e){return U(e,(e=>{if(!q(e))throw u.create("not-registered");const t=e.authToken;return 1===(a=t).requestStatus&&a.requestTime+_<Date.now()?Object.assign(Object.assign({},e),{authToken:{requestStatus:0}}):e;var a}))}function q(e){return void 0!==e&&2===e.registrationStatus}async function K(e){const t=e,{installationEntry:a,registrationPromise:n}=await H(t);return n?n.catch(console.error):$(t).catch(console.error),a.fid}async function Z(e,t=!1){const a=e;await async function(e){const{registrationPromise:t}=await H(e);t&&await t}(a);return(await $(a,t)).token}async function J(e,t){const a=function(e,{fid:t}){return`${p(e)}/${t}`}(e,t),n={method:"DELETE",headers:y(e,t)},i=await w((()=>fetch(a,n)));if(!i.ok)throw await g("Delete Installation",i)}async function Q(e){const{appConfig:t}=e,a=await U(t,(e=>{if(!e||0!==e.registrationStatus)return e}));if(a){if(1===a.registrationStatus)throw u.create("delete-pending-registration");if(2===a.registrationStatus){if(!navigator.onLine)throw u.create("app-offline");await J(t,a),await F(t)}}}function ee(e,t){const{appConfig:a}=e;return function(e,t){D();const a=A(e);let n=C.get(a);n||(n=new Set,C.set(a,n)),n.add(t)}(a,t),()=>{!function(e,t){const a=A(e),n=C.get(a);n&&(n.delete(t),0===n.size&&C.delete(a),M())}(a,t)}}function te(e=(0,n.getApp)()){return(0,n._getProvider)(e,"installations").getImmediate()}function ae(e){return u.create("missing-app-config-values",{valueName:e})}const ne="installations",ie=e=>{const t=e.getProvider("app").getImmediate(),a=function(e){if(!e||!e.options)throw ae("App Configuration");if(!e.name)throw ae("App Name");const t=["projectId","apiKey","appId"];for(const a of t)if(!e.options[a])throw ae(a);return{appName:e.name,projectId:e.options.projectId,apiKey:e.options.apiKey,appId:e.options.appId}}(t);return{app:t,appConfig:a,heartbeatServiceProvider:(0,n._getProvider)(t,"heartbeat"),_delete:()=>Promise.resolve()}},xe=e=>{const t=e.getProvider("app").getImmediate(),a=(0,n._getProvider)(t,ne).getImmediate();return{getId:()=>K(a),getToken:e=>Z(a,e)}};(0,n._registerComponent)(new i.Component(ne,ie,"PUBLIC")),(0,n._registerComponent)(new i.Component("installations-internal",xe,"PRIVATE")),(0,n.registerVersion)(r,o),(0,n.registerVersion)(r,o,"esm2017")},"./node_modules/@firebase/installations/node_modules/idb/build/index.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{deleteDB:()=>x,openDB:()=>i,unwrap:()=>n.u,wrap:()=>n.w});var n=a("./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js");function i(e,t,{blocked:a,upgrade:i,blocking:x,terminated:s}={}){const r=indexedDB.open(e,t),o=(0,n.w)(r);return i&&r.addEventListener("upgradeneeded",(e=>{i((0,n.w)(r.result),e.oldVersion,e.newVersion,(0,n.w)(r.transaction))})),a&&r.addEventListener("blocked",(()=>a())),o.then((e=>{s&&e.addEventListener("close",(()=>s())),x&&e.addEventListener("versionchange",(()=>x()))})).catch((()=>{})),o}function x(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);return t&&a.addEventListener("blocked",(()=>t())),(0,n.w)(a).then((()=>{}))}const s=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],o=new Map;function _(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(o.get(t))return o.get(t);const a=t.replace(/FromIndex$/,""),n=t!==a,i=r.includes(a);if(!(a in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!s.includes(a))return;const x=async function(e,...t){const x=this.transaction(e,i?"readwrite":"readonly");let s=x.store;return n&&(s=s.index(t.shift())),(await Promise.all([s[a](...t),i&&x.done]))[0]};return o.set(t,x),x}(0,n.r)((e=>({...e,get:(t,a,n)=>_(t,a)||e.get(t,a,n),has:(t,a)=>!!_(t,a)||e.has(t,a)})))},"./node_modules/@firebase/installations/node_modules/idb/build/wrap-idb-value.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{a:()=>c,i:()=>n,r:()=>l,u:()=>b,w:()=>u});const n=(e,t)=>t.some((t=>e instanceof t));let i,x;const s=new WeakMap,r=new WeakMap,o=new WeakMap,_=new WeakMap,c=new WeakMap;let d={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return r.get(e);if("objectStoreNames"===t)return e.objectStoreNames||o.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function l(e){d=e(d)}function h(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(x||(x=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(s.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...a){const n=e.call(b(this),t,...a);return o.set(n,t.sort?t.sort():[t]),u(n)}}function f(e){return"function"==typeof e?h(e):(e instanceof IDBTransaction&&function(e){if(r.has(e))return;const t=new Promise(((t,a)=>{const n=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",x),e.removeEventListener("abort",x)},i=()=>{t(),n()},x=()=>{a(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",i),e.addEventListener("error",x),e.addEventListener("abort",x)}));r.set(e,t)}(e),n(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const n=()=>{e.removeEventListener("success",i),e.removeEventListener("error",x)},i=()=>{t(u(e.result)),n()},x=()=>{a(e.error),n()};e.addEventListener("success",i),e.addEventListener("error",x)}));return t.then((t=>{t instanceof IDBCursor&&s.set(t,e)})).catch((()=>{})),c.set(t,e),t}(e);if(_.has(e))return _.get(e);const t=f(e);return t!==e&&(_.set(e,t),c.set(t,e)),t}const b=e=>c.get(e)},"./node_modules/@firebase/logger/dist/esm/index.esm2017.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{LogLevel:()=>i,Logger:()=>_,setLogLevel:()=>c,setUserLogHandler:()=>d});const n=[];var i;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));const x={debug:i.DEBUG,verbose:i.VERBOSE,info:i.INFO,warn:i.WARN,error:i.ERROR,silent:i.SILENT},s=i.INFO,r={[i.DEBUG]:"log",[i.VERBOSE]:"log",[i.INFO]:"info",[i.WARN]:"warn",[i.ERROR]:"error"},o=(e,t,...a)=>{if(t<e.logLevel)return;const n=(new Date).toISOString(),i=r[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${n}]  ${e.name}:`,...a)};class _{constructor(e){this.name=e,this._logLevel=s,this._logHandler=o,this._userLogHandler=null,n.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in i))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?x[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,i.DEBUG,...e),this._logHandler(this,i.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,i.VERBOSE,...e),this._logHandler(this,i.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,i.INFO,...e),this._logHandler(this,i.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,i.WARN,...e),this._logHandler(this,i.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,i.ERROR,...e),this._logHandler(this,i.ERROR,...e)}}function c(e){n.forEach((t=>{t.setLogLevel(e)}))}function d(e,t){for(const a of n){let n=null;t&&t.level&&(n=x[t.level]),a.userLogHandler=null===e?null:(t,a,...x)=>{const s=x.map((e=>{if(null==e)return null;if("string"==typeof e)return e;if("number"==typeof e||"boolean"==typeof e)return e.toString();if(e instanceof Error)return e.message;try{return JSON.stringify(e)}catch(e){return null}})).filter((e=>e)).join(" ");a>=(null!=n?n:t.logLevel)&&e({level:i[a].toLowerCase(),message:s,args:x,type:t.name})}}}},"./node_modules/firebase/analytics/dist/esm/index.esm.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{getAnalytics:()=>n.getAnalytics,getGoogleAnalyticsClientId:()=>n.getGoogleAnalyticsClientId,initializeAnalytics:()=>n.initializeAnalytics,isSupported:()=>n.isSupported,logEvent:()=>n.logEvent,setAnalyticsCollectionEnabled:()=>n.setAnalyticsCollectionEnabled,setConsent:()=>n.setConsent,setCurrentScreen:()=>n.setCurrentScreen,setDefaultEventParameters:()=>n.setDefaultEventParameters,setUserId:()=>n.setUserId,setUserProperties:()=>n.setUserProperties,settings:()=>n.settings});var n=a("./node_modules/@firebase/analytics/dist/esm/index.esm2017.js")},"./node_modules/firebase/app/dist/esm/index.esm.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{FirebaseError:()=>n.FirebaseError,SDK_VERSION:()=>n.SDK_VERSION,_DEFAULT_ENTRY_NAME:()=>n._DEFAULT_ENTRY_NAME,_addComponent:()=>n._addComponent,_addOrOverwriteComponent:()=>n._addOrOverwriteComponent,_apps:()=>n._apps,_clearComponents:()=>n._clearComponents,_components:()=>n._components,_getProvider:()=>n._getProvider,_registerComponent:()=>n._registerComponent,_removeServiceInstance:()=>n._removeServiceInstance,deleteApp:()=>n.deleteApp,getApp:()=>n.getApp,getApps:()=>n.getApps,initializeApp:()=>n.initializeApp,onLog:()=>n.onLog,registerVersion:()=>n.registerVersion,setLogLevel:()=>n.setLogLevel});var n=a("./node_modules/@firebase/app/dist/esm/index.esm2017.js");(0,n.registerVersion)("firebase","10.1.0","app")},"./node_modules/idb/build/index.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{deleteDB:()=>x,openDB:()=>i,unwrap:()=>n.u,wrap:()=>n.w});var n=a("./node_modules/idb/build/wrap-idb-value.js");function i(e,t,{blocked:a,upgrade:i,blocking:x,terminated:s}={}){const r=indexedDB.open(e,t),o=(0,n.w)(r);return i&&r.addEventListener("upgradeneeded",(e=>{i((0,n.w)(r.result),e.oldVersion,e.newVersion,(0,n.w)(r.transaction),e)})),a&&r.addEventListener("blocked",(e=>a(e.oldVersion,e.newVersion,e))),o.then((e=>{s&&e.addEventListener("close",(()=>s())),x&&e.addEventListener("versionchange",(e=>x(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),o}function x(e,{blocked:t}={}){const a=indexedDB.deleteDatabase(e);return t&&a.addEventListener("blocked",(e=>t(e.oldVersion,e))),(0,n.w)(a).then((()=>{}))}const s=["get","getKey","getAll","getAllKeys","count"],r=["put","add","delete","clear"],o=new Map;function _(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(o.get(t))return o.get(t);const a=t.replace(/FromIndex$/,""),n=t!==a,i=r.includes(a);if(!(a in(n?IDBIndex:IDBObjectStore).prototype)||!i&&!s.includes(a))return;const x=async function(e,...t){const x=this.transaction(e,i?"readwrite":"readonly");let s=x.store;return n&&(s=s.index(t.shift())),(await Promise.all([s[a](...t),i&&x.done]))[0]};return o.set(t,x),x}(0,n.r)((e=>({...e,get:(t,a,n)=>_(t,a)||e.get(t,a,n),has:(t,a)=>!!_(t,a)||e.has(t,a)})))},"./node_modules/idb/build/wrap-idb-value.js":(e,t,a)=>{"use strict";a.r(t),a.d(t,{a:()=>c,i:()=>n,r:()=>l,u:()=>b,w:()=>u});const n=(e,t)=>t.some((t=>e instanceof t));let i,x;const s=new WeakMap,r=new WeakMap,o=new WeakMap,_=new WeakMap,c=new WeakMap;let d={get(e,t,a){if(e instanceof IDBTransaction){if("done"===t)return r.get(e);if("objectStoreNames"===t)return e.objectStoreNames||o.get(e);if("store"===t)return a.objectStoreNames[1]?void 0:a.objectStore(a.objectStoreNames[0])}return u(e[t])},set:(e,t,a)=>(e[t]=a,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function l(e){d=e(d)}function h(e){return e!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(x||(x=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(e)?function(...t){return e.apply(b(this),t),u(s.get(this))}:function(...t){return u(e.apply(b(this),t))}:function(t,...a){const n=e.call(b(this),t,...a);return o.set(n,t.sort?t.sort():[t]),u(n)}}function f(e){return"function"==typeof e?h(e):(e instanceof IDBTransaction&&function(e){if(r.has(e))return;const t=new Promise(((t,a)=>{const n=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",x),e.removeEventListener("abort",x)},i=()=>{t(),n()},x=()=>{a(e.error||new DOMException("AbortError","AbortError")),n()};e.addEventListener("complete",i),e.addEventListener("error",x),e.addEventListener("abort",x)}));r.set(e,t)}(e),n(e,i||(i=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,d):e)}function u(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,a)=>{const n=()=>{e.removeEventListener("success",i),e.removeEventListener("error",x)},i=()=>{t(u(e.result)),n()},x=()=>{a(e.error),n()};e.addEventListener("success",i),e.addEventListener("error",x)}));return t.then((t=>{t instanceof IDBCursor&&s.set(t,e)})).catch((()=>{})),c.set(t,e),t}(e);if(_.has(e))return _.get(e);const t=f(e);return t!==e&&(_.set(e,t),c.set(t,e)),t}const b=e=>c.get(e)},"./node_modules/workbox-window/build/workbox-window.prod.es5.mjs":(e,t,a)=>{"use strict";a.r(t),a.d(t,{Workbox:()=>h,messageSW:()=>n});try{self["workbox:window:4.3.1"]&&_()}catch(n){}var n=function(e,t){return new Promise((function(a){var n=new MessageChannel;n.port1.onmessage=function(e){return a(e.data)},e.postMessage(t,[n.port2])}))};function i(e,t){for(var a=0;a<t.length;a++){var n=t[a];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function x(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}try{self["workbox:core:4.3.1"]&&_()}catch(n){}var s=function(){var e=this;this.promise=new Promise((function(t,a){e.resolve=t,e.reject=a}))},r=function(e,t){return new URL(e,location).href===new URL(t,location).href},o=function(e,t){Object.assign(this,t,{type:e})};function c(e){return function(){for(var t=[],a=0;a<arguments.length;a++)t[a]=arguments[a];try{return Promise.resolve(e.apply(this,t))}catch(e){return Promise.reject(e)}}}function d(e,t,a){return a?t?t(e):e:(e&&e.then||(e=Promise.resolve(e)),t?e.then(t):e)}function l(){}var h=function(e){var t,a;function _(t,a){var n;return void 0===a&&(a={}),(n=e.call(this)||this).t=t,n.i=a,n.o=0,n.u=new s,n.s=new s,n.h=new s,n.v=n.v.bind(x(x(n))),n.l=n.l.bind(x(x(n))),n.g=n.g.bind(x(x(n))),n.m=n.m.bind(x(x(n))),n}a=e,(t=_).prototype=Object.create(a.prototype),t.prototype.constructor=t,t.__proto__=a;var h,f,u=_.prototype;return u.register=c((function(e){var t,a,n=this,i=(void 0===e?{}:e).immediate,x=void 0!==i&&i;return t=function(){return n.p=Boolean(navigator.serviceWorker.controller),n.P=n.R(),d(n.k(),(function(e){n.B=e,n.P&&(n.O=n.P,n.s.resolve(n.P),n.h.resolve(n.P),n.j(n.P),n.P.addEventListener("statechange",n.l,{once:!0}));var t=n.B.waiting;return t&&r(t.scriptURL,n.t)&&(n.O=t,Promise.resolve().then((function(){n.dispatchEvent(new o("waiting",{sw:t,wasWaitingBeforeRegister:!0}))}))),n.O&&n.u.resolve(n.O),n.B.addEventListener("updatefound",n.g),navigator.serviceWorker.addEventListener("controllerchange",n.m,{once:!0}),"BroadcastChannel"in self&&(n.C=new BroadcastChannel("workbox"),n.C.addEventListener("message",n.v)),navigator.serviceWorker.addEventListener("message",n.v),n.B}))},(a=function(){if(!x&&"complete"!==document.readyState)return function(e,t){return e&&e.then?e.then(l):Promise.resolve()}(new Promise((function(e){return addEventListener("load",e)})))}())&&a.then?a.then(t):t()})),u.getSW=c((function(){return this.O||this.u.promise})),u.messageSW=c((function(e){return d(this.getSW(),(function(t){return n(t,e)}))})),u.R=function(){var e=navigator.serviceWorker.controller;if(e&&r(e.scriptURL,this.t))return e},u.k=c((function(){var e=this;return function(e,t){try{var a=e()}catch(e){return t(e)}return a&&a.then?a.then(void 0,t):a}((function(){return d(navigator.serviceWorker.register(e.t,e.i),(function(t){return e.L=performance.now(),t}))}),(function(e){throw e}))})),u.j=function(e){n(e,{type:"WINDOW_READY",meta:"workbox-window"})},u.g=function(){var e=this.B.installing;this.o>0||!r(e.scriptURL,this.t)||performance.now()>this.L+6e4?(this.W=e,this.B.removeEventListener("updatefound",this.g)):(this.O=e,this.u.resolve(e)),++this.o,e.addEventListener("statechange",this.l)},u.l=function(e){var t=this,a=e.target,n=a.state,i=a===this.W,x=i?"external":"",s={sw:a,originalEvent:e};!i&&this.p&&(s.isUpdate=!0),this.dispatchEvent(new o(x+n,s)),"installed"===n?this._=setTimeout((function(){"installed"===n&&t.B.waiting===a&&t.dispatchEvent(new o(x+"waiting",s))}),200):"activating"===n&&(clearTimeout(this._),i||this.s.resolve(a))},u.m=function(e){var t=this.O;t===navigator.serviceWorker.controller&&(this.dispatchEvent(new o("controlling",{sw:t,originalEvent:e})),this.h.resolve(t))},u.v=function(e){var t=e.data;this.dispatchEvent(new o("message",{data:t,originalEvent:e}))},h=_,(f=[{key:"active",get:function(){return this.s.promise}},{key:"controlling",get:function(){return this.h.promise}}])&&i(h.prototype,f),_}(function(){function e(){this.D={}}var t=e.prototype;return t.addEventListener=function(e,t){this.T(e).add(t)},t.removeEventListener=function(e,t){this.T(e).delete(t)},t.dispatchEvent=function(e){e.target=this,this.T(e.type).forEach((function(t){return t(e)}))},t.T=function(e){return this.D[e]=this.D[e]||new Set},e}())}},t={};function a(n){var i=t[n];if(void 0!==i)return i.exports;var x=t[n]={exports:{}};return e[n].call(x.exports,x,x.exports,a),x.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),a.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var n={};(()=>{"use strict";a.r(n);var e=a("./src/data/index.ts"),t=a("./src/sceneHandler/index.ts"),i=a("./src/constants/index.ts"),x=a("./node_modules/workbox-window/build/workbox-window.prod.es5.mjs"),s=a("./src/Firebase/firebase-integration.ts"),r=a("./src/common/index.ts"),o=a("./src/components/index.ts");new class{canvas;versionInfoElement;lang;is_cached;progressBar;progressBarContainer;channel;sceneHandler;loadingElement;majVersion;minVersion;dataModal;startSessionTime;titleTextElement;feedBackTextElement;currentProgress;firebaseIntegration;constructor(e){this.lang=e,this.currentProgress=10,this.canvas=document.getElementById("canvas"),this.channel=new BroadcastChannel("my-channel"),this.progressBar=document.getElementById("progress-bar"),this.titleTextElement=document.getElementById("title"),this.feedBackTextElement=document.getElementById("feedback-text"),this.progressBarContainer=document.getElementById("progress-bar-container"),this.versionInfoElement=document.getElementById("version-info-id"),this.loadingElement=document.getElementById("loading-screen"),this.is_cached=this.initializeCachedData(),this.firebaseIntegration=new s.FirebaseIntegration,this.startSessionTime=0,this.init(),this.channel.addEventListener("message",this.handleServiceWorkerMessage),window.addEventListener("beforeunload",this.handleBeforeUnload),document.addEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.addEventListener("resize",this.handleResize.bind(this))}async init(){const t=await r.Utils.getLanguageSpecificFont(this.lang);await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),await this.loadTitleFeedbackCustomFont(),await this.preloadGameAudios(),this.handleLoadingScreen(),this.setupCanvas();const a=await(0,e.getData)();this.majVersion=a.majversion,this.minVersion=a.minversion,this.dataModal=this.createDataModal(a),this.globalInitialization(a),this.logSessionStartFirebaseEvent(),window.addEventListener("resize",(async()=>{this.handleResize(this.dataModal)}));const n=localStorage.getItem(this.lang+"gamePlayedInfo"),x=n?JSON.parse(n).length-1:0,s=r.Debugger.DebugMode?i.PreviousPlayedLevel+this.lang+"Debug":i.PreviousPlayedLevel+this.lang;localStorage.setItem(s,x.toString()),this.is_cached.has(this.lang)&&this.handleCachedScenario(this.dataModal),this.registerWorkbox()}async loadTitleFeedbackCustomFont(){const t=e.customFonts[this.lang]||e.customFonts.default,a=`'${t}', sans-serif`;await this.loadAndCacheFont(t,`./assets/fonts/${t}.ttf`),[this.titleTextElement,this.feedBackTextElement].forEach((e=>{e&&(e.style.fontFamily=a)}))}logSessionStartFirebaseEvent(){let e=localStorage.getItem("lastSessionEndTime"),t=0;if(this.startSessionTime=(new Date).getTime(),e){let a=parseInt(e);isNaN(a)||(t=Math.abs((new Date).getTime()-a))}const a=parseFloat((t?t/864e5:0).toFixed(3)),n={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",days_since_last:a};this.firebaseIntegration.sendSessionStartEvent(n)}logSessionEndFirebaseEvent(){const e={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.majVersion&&this.minVersion?this.majVersion.toString()+"."+this.minVersion.toString():"",duration:((new Date).getTime()-this.startSessionTime)/1e3};localStorage.setItem("lastSessionEndTime",(new Date).getTime().toString()),this.firebaseIntegration.sendSessionEndEvent(e)}initializeCachedData(){const e=localStorage.getItem(i.IsCached);return e?new Map(JSON.parse(e)):new Map}async loadAndCacheFont(e,t){try{const a=await caches.open("fontCache");if(!await a.match(t)){const e=await fetch(t),n=await e.blob();await a.put(t,new Response(n))}const n=new FontFace(e,`url(${t}) format('truetype')`);await n.load(),document.fonts.add(n)}catch(e){console.error(...d("1603038447_175_6_175_62_11",`Failed to load and cache font: ${e}`))}}handleLoadingScreen=()=>{this.is_cached.get(r.lang)?(this.loadingElement.style.zIndex="-1",this.loadingElement.style.display="none",this.progressBarContainer.style.display="none",this.progressBar.style.display="none"):(this.progressBarContainer.style.display="flex",this.progressBar.style.display="flex",this.progressBar.style.width="10%")};async registerWorkbox(){if("serviceWorker"in navigator)try{const t=new x.Workbox("./sw.js",{});await t.register(),await navigator.serviceWorker.ready,this.is_cached.has(this.lang)?fetch(e.URL+"?cache-bust="+(new Date).getTime(),{method:"GET",headers:{"Content-Type":"application/json","Cache-Control":"no-store"},cache:"no-store"}).then((async e=>{if(!e.ok)return void console.error(...d("1603038447_212_16_214_17_11","Failed to fetch the content file from the server!"));const t=await e.json(),a=t.majversion+"."+t.minversion,n=localStorage.getItem("version"+r.lang.toLowerCase());if(a&&n!=a){console.log(...c("1603038447_229_16_229_69_4","Content version mismatch! Reloading..."));var x=JSON.parse(localStorage.getItem("is_cached"));console.log(...c("1603038447_231_16_231_52_4","current lang  "+r.lang));var s=x.filter((e=>!e.toString().includes(r.lang)));localStorage.setItem(i.IsCached,JSON.stringify(s)),localStorage.removeItem("version"+r.lang.toLowerCase()),caches.delete(r.lang),this.handleUpdateFoundMessage()}})).catch((e=>{console.error(...d("1603038447_243_14_243_72_11","Error fetching the content file: "+e))})):this.channel.postMessage({command:"Cache",data:this.lang}),navigator.serviceWorker.addEventListener("message",this.handleServiceWorkerMessage)}catch(e){console.error(...d("1603038447_251_8_251_68_11",`Failed to register service worker: ${e}`))}}setupCanvas(){this.canvas.height=window.innerHeight,this.canvas.width=window.screen.width>1080?768:window.innerWidth}createDataModal(t){return new e.DataModal(t.title,t.OtherAudios,t.Levels,t.FeedbackTexts,t.RightToLeft,t.FeedbackAudios,t.majversion,t.minversion,t.version)}globalInitialization(e){globalThis.aboutCompany=e.aboutCompany,globalThis.descriptionText=e.descriptionText}handleResize(e){this.is_cached.has(this.lang)&&(this.updateVersionInfoElement(e),this.setupCanvas(),this.reinitializeSceneHandler(e))}updateVersionInfoElement(e){this.is_cached.has(this.lang)&&r.Debugger.DevelopmentLink&&(e.majVersion&&e.minVersion?this.versionInfoElement.innerHTML+=`/j.v${e.majVersion}.${e.minVersion}`:e.version&&(this.versionInfoElement.innerHTML+=`/j.v${e.version}`),document.getElementById("toggle-btn").style.display="block")}reinitializeSceneHandler(e){delete this.sceneHandler,this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}handleCachedScenario(e){this.updateVersionInfoElement(e),this.sceneHandler=new t.SceneHandler(this.canvas,e),this.passingDataToContainer()}passingDataToContainer=()=>{window.Android&&window.Android.cachedStatus(1==this.is_cached.get(this.lang))};setContainerAppOrientation(){window.Android&&window.Android.setContainerAppOrientation("portrait")}handleUpdateFoundMessage(){confirm("Update Found\nPress ok to update")&&window.location.reload()}handleLoadingMessage=e=>{if(this.progressBarContainer&&this.progressBar){this.showProgressBar();const t=Math.min(100,Math.max(0,e.data));t>this.currentProgress&&(this.currentProgress=t,this.progressBar.style.width=`${this.currentProgress}%`),this.isDownloadCompleted(this.currentProgress)&&(this.cacheLanguage(),this.sendCompletionEvent(),this.hideLoadingScreen())}};showProgressBar(){this.progressBarContainer.classList.add("visible"),this.progressBar.classList.add("visible")}isDownloadCompleted(e){return 100===e&&!this.is_cached.get(this.lang)}cacheLanguage(){try{this.is_cached.set(this.lang,!0),localStorage.setItem(i.IsCached,JSON.stringify(Array.from(this.is_cached.entries())))}catch(e){console.error(...d("1603038447_371_6_371_53_11","Error caching language:",e))}}sendCompletionEvent(){const e={cr_user_id:r.pseudoId,ftm_language:r.lang,profile_number:0,version_number:this.versionInfoElement.innerHTML,json_version_number:this.getJsonVersionNumber()};this.firebaseIntegration.sendDownloadCompletedEvent(e)}getJsonVersionNumber(){return this.majVersion&&this.minVersion?this.majVersion+"."+this.minVersion:""}hideLoadingScreen(){try{localStorage.setItem("version"+this.lang,this.getJsonVersionNumber()),this.loadingElement.style.display="none",this.handleResize(this.dataModal)}catch(e){console.error(...d("1603038447_398_6_398_58_11","Error hiding loading screen:",e))}}handleServiceWorkerMessage=e=>{"Loading"===e.data.msg?this.handleLoadingMessage(e.data):"Update Found"===e.data.msg&&this.handleUpdateFoundMessage()};handleVisibilityChange=()=>{(0,r.isDocumentVisible)()?this.logSessionStartFirebaseEvent():this.logSessionEndFirebaseEvent()};handleBeforeUnload=async e=>{this.logSessionEndFirebaseEvent(),this.dispose()};preloadGameAudios=async()=>{let e=i.AUDIO_URL_PRELOAD;return new Promise(((t,a)=>{const n=e.map((e=>(new o.AudioPlayer).preloadGameAudio(e)));Promise.all(n).then((()=>t())).catch((e=>{console.error(...d("1603038447_435_10_435_57_11","Error preloading audio:",e)),a(e)}))}))};dispose(){this.channel.removeEventListener("message",this.handleServiceWorkerMessage),window.removeEventListener("beforeunload",this.handleBeforeUnload),document.removeEventListener(r.VISIBILITY_CHANGE,this.handleVisibilityChange),window.removeEventListener("resize",this.handleResize),navigator.serviceWorker&&navigator.serviceWorker.removeEventListener("message",this.handleServiceWorkerMessage)}}(r.lang);function _(){try{return(0,eval)("globalThis._console_ninja")||(0,eval)("/* https://github.com/wallabyjs/console-ninja#how-does-it-work */'use strict';var _0xfe5e44=_0x2800;(function(_0x215495,_0x54db3f){var _0x15a0c1=_0x2800,_0x56d85f=_0x215495();while(!![]){try{var _0x8589f5=parseInt(_0x15a0c1(0x1f3))/0x1*(parseInt(_0x15a0c1(0x1bf))/0x2)+parseInt(_0x15a0c1(0x1ec))/0x3+-parseInt(_0x15a0c1(0x28b))/0x4+parseInt(_0x15a0c1(0x22b))/0x5*(-parseInt(_0x15a0c1(0x1a4))/0x6)+-parseInt(_0x15a0c1(0x1ad))/0x7+parseInt(_0x15a0c1(0x1e8))/0x8*(parseInt(_0x15a0c1(0x294))/0x9)+-parseInt(_0x15a0c1(0x20d))/0xa;if(_0x8589f5===_0x54db3f)break;else _0x56d85f['push'](_0x56d85f['shift']());}catch(_0x128f40){_0x56d85f['push'](_0x56d85f['shift']());}}}(_0x4842,0xe3eb8));var K=Object['create'],Q=Object[_0xfe5e44(0x1bd)],G=Object['getOwnPropertyDescriptor'],ee=Object['getOwnPropertyNames'],te=Object[_0xfe5e44(0x248)],ne=Object['prototype'][_0xfe5e44(0x24a)],re=(_0x5b75c6,_0x3483b6,_0x592bfb,_0x35bd8b)=>{var _0x34c8f6=_0xfe5e44;if(_0x3483b6&&typeof _0x3483b6==_0x34c8f6(0x259)||typeof _0x3483b6==_0x34c8f6(0x254)){for(let _0x15cfbc of ee(_0x3483b6))!ne['call'](_0x5b75c6,_0x15cfbc)&&_0x15cfbc!==_0x592bfb&&Q(_0x5b75c6,_0x15cfbc,{'get':()=>_0x3483b6[_0x15cfbc],'enumerable':!(_0x35bd8b=G(_0x3483b6,_0x15cfbc))||_0x35bd8b['enumerable']});}return _0x5b75c6;},V=(_0x83a491,_0x1c7fab,_0x333922)=>(_0x333922=_0x83a491!=null?K(te(_0x83a491)):{},re(_0x1c7fab||!_0x83a491||!_0x83a491[_0xfe5e44(0x250)]?Q(_0x333922,_0xfe5e44(0x25e),{'value':_0x83a491,'enumerable':!0x0}):_0x333922,_0x83a491)),Z=class{constructor(_0x3b8201,_0x2edd2b,_0x14c251,_0x21a374,_0x2d7409,_0x485d26){var _0x3273eb=_0xfe5e44,_0x22070f,_0x1cdd3b,_0x55f9de,_0xce468f;this[_0x3273eb(0x291)]=_0x3b8201,this[_0x3273eb(0x270)]=_0x2edd2b,this[_0x3273eb(0x262)]=_0x14c251,this[_0x3273eb(0x1bc)]=_0x21a374,this[_0x3273eb(0x264)]=_0x2d7409,this[_0x3273eb(0x27c)]=_0x485d26,this['_allowedToSend']=!0x0,this[_0x3273eb(0x1ab)]=!0x0,this[_0x3273eb(0x203)]=!0x1,this[_0x3273eb(0x1c5)]=!0x1,this[_0x3273eb(0x221)]=((_0x1cdd3b=(_0x22070f=_0x3b8201[_0x3273eb(0x206)])==null?void 0x0:_0x22070f[_0x3273eb(0x1cc)])==null?void 0x0:_0x1cdd3b[_0x3273eb(0x1c3)])===_0x3273eb(0x1fd),this['_inBrowser']=!((_0xce468f=(_0x55f9de=this[_0x3273eb(0x291)][_0x3273eb(0x206)])==null?void 0x0:_0x55f9de[_0x3273eb(0x26f)])!=null&&_0xce468f[_0x3273eb(0x28c)])&&!this['_inNextEdge'],this['_WebSocketClass']=null,this[_0x3273eb(0x1a8)]=0x0,this[_0x3273eb(0x28f)]=0x14,this['_webSocketErrorDocsLink']=_0x3273eb(0x211),this[_0x3273eb(0x1ae)]=(this[_0x3273eb(0x23e)]?_0x3273eb(0x247):_0x3273eb(0x28a))+this[_0x3273eb(0x201)];}async[_0xfe5e44(0x272)](){var _0x2ec457=_0xfe5e44,_0x16b1f6,_0x46ae56;if(this[_0x2ec457(0x1d5)])return this[_0x2ec457(0x1d5)];let _0x420cd7;if(this['_inBrowser']||this[_0x2ec457(0x221)])_0x420cd7=this[_0x2ec457(0x291)]['WebSocket'];else{if((_0x16b1f6=this[_0x2ec457(0x291)][_0x2ec457(0x206)])!=null&&_0x16b1f6['_WebSocket'])_0x420cd7=(_0x46ae56=this[_0x2ec457(0x291)][_0x2ec457(0x206)])==null?void 0x0:_0x46ae56['_WebSocket'];else try{let _0x492511=await import(_0x2ec457(0x251));_0x420cd7=(await import((await import(_0x2ec457(0x245)))[_0x2ec457(0x1b3)](_0x492511['join'](this['nodeModules'],'ws/index.js'))[_0x2ec457(0x232)]()))[_0x2ec457(0x25e)];}catch{try{_0x420cd7=require(require(_0x2ec457(0x251))[_0x2ec457(0x23c)](this[_0x2ec457(0x1bc)],'ws'));}catch{throw new Error(_0x2ec457(0x27f));}}}return this[_0x2ec457(0x1d5)]=_0x420cd7,_0x420cd7;}['_connectToHostNow'](){var _0x311ae5=_0xfe5e44;this['_connecting']||this['_connected']||this['_connectAttemptCount']>=this['_maxConnectAttemptCount']||(this['_allowedToConnectOnSend']=!0x1,this[_0x311ae5(0x1c5)]=!0x0,this[_0x311ae5(0x1a8)]++,this[_0x311ae5(0x1e7)]=new Promise((_0x3f4e5c,_0x1b1d42)=>{var _0x1f6130=_0x311ae5;this['getWebSocketClass']()[_0x1f6130(0x1cf)](_0x1a8fc2=>{var _0x26657b=_0x1f6130;let _0x3f72a0=new _0x1a8fc2(_0x26657b(0x1c9)+(!this['_inBrowser']&&this[_0x26657b(0x264)]?_0x26657b(0x281):this[_0x26657b(0x270)])+':'+this[_0x26657b(0x262)]);_0x3f72a0[_0x26657b(0x274)]=()=>{var _0x5e4dcd=_0x26657b;this[_0x5e4dcd(0x1e2)]=!0x1,this[_0x5e4dcd(0x21d)](_0x3f72a0),this[_0x5e4dcd(0x24b)](),_0x1b1d42(new Error(_0x5e4dcd(0x20c)));},_0x3f72a0[_0x26657b(0x280)]=()=>{var _0x5da152=_0x26657b;this[_0x5da152(0x23e)]||_0x3f72a0[_0x5da152(0x1dd)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)]&&_0x3f72a0[_0x5da152(0x1dd)][_0x5da152(0x1b7)](),_0x3f4e5c(_0x3f72a0);},_0x3f72a0[_0x26657b(0x1ea)]=()=>{var _0x382c92=_0x26657b;this[_0x382c92(0x1ab)]=!0x0,this[_0x382c92(0x21d)](_0x3f72a0),this[_0x382c92(0x24b)]();},_0x3f72a0[_0x26657b(0x1df)]=_0x11fcab=>{var _0x5fd04d=_0x26657b;try{if(!(_0x11fcab!=null&&_0x11fcab[_0x5fd04d(0x1b9)])||!this['eventReceivedCallback'])return;let _0x4ff655=JSON[_0x5fd04d(0x234)](_0x11fcab[_0x5fd04d(0x1b9)]);this[_0x5fd04d(0x27c)](_0x4ff655[_0x5fd04d(0x1b4)],_0x4ff655['args'],this['global'],this[_0x5fd04d(0x23e)]);}catch{}};})[_0x1f6130(0x1cf)](_0x3ec18f=>(this[_0x1f6130(0x203)]=!0x0,this[_0x1f6130(0x1c5)]=!0x1,this[_0x1f6130(0x1ab)]=!0x1,this['_allowedToSend']=!0x0,this[_0x1f6130(0x1a8)]=0x0,_0x3ec18f))[_0x1f6130(0x260)](_0x4d0842=>(this[_0x1f6130(0x203)]=!0x1,this[_0x1f6130(0x1c5)]=!0x1,console[_0x1f6130(0x1f2)](_0x1f6130(0x1ca)+this[_0x1f6130(0x201)]),_0x1b1d42(new Error(_0x1f6130(0x266)+(_0x4d0842&&_0x4d0842['message'])))));}));}[_0xfe5e44(0x21d)](_0x200506){var _0x3828d3=_0xfe5e44;this[_0x3828d3(0x203)]=!0x1,this[_0x3828d3(0x1c5)]=!0x1;try{_0x200506[_0x3828d3(0x1ea)]=null,_0x200506[_0x3828d3(0x274)]=null,_0x200506[_0x3828d3(0x280)]=null;}catch{}try{_0x200506[_0x3828d3(0x1e5)]<0x2&&_0x200506['close']();}catch{}}['_attemptToReconnectShortly'](){var _0x2c9e50=_0xfe5e44;clearTimeout(this[_0x2c9e50(0x240)]),!(this[_0x2c9e50(0x1a8)]>=this[_0x2c9e50(0x28f)])&&(this[_0x2c9e50(0x240)]=setTimeout(()=>{var _0x26eb71=_0x2c9e50,_0x52968d;this[_0x26eb71(0x203)]||this[_0x26eb71(0x1c5)]||(this[_0x26eb71(0x284)](),(_0x52968d=this[_0x26eb71(0x1e7)])==null||_0x52968d[_0x26eb71(0x260)](()=>this[_0x26eb71(0x24b)]()));},0x1f4),this[_0x2c9e50(0x240)][_0x2c9e50(0x1b7)]&&this[_0x2c9e50(0x240)]['unref']());}async[_0xfe5e44(0x26e)](_0x254553){var _0x10e206=_0xfe5e44;try{if(!this[_0x10e206(0x1e2)])return;this['_allowedToConnectOnSend']&&this[_0x10e206(0x284)](),(await this[_0x10e206(0x1e7)])[_0x10e206(0x26e)](JSON['stringify'](_0x254553));}catch(_0x4fb68d){console[_0x10e206(0x1f2)](this[_0x10e206(0x1ae)]+':\\x20'+(_0x4fb68d&&_0x4fb68d[_0x10e206(0x222)])),this[_0x10e206(0x1e2)]=!0x1,this['_attemptToReconnectShortly']();}}};function q(_0x363e8b,_0x58bc11,_0x5a57be,_0x3c20e5,_0x3cdf4f,_0x2eec54,_0x377b83,_0x1b0bff=ie){var _0xc8f00e=_0xfe5e44;let _0xe24ba0=_0x5a57be[_0xc8f00e(0x1e4)](',')['map'](_0x46f2cf=>{var _0x14d705=_0xc8f00e,_0xdaec49,_0x3c920c,_0x205786,_0x14ba10;try{if(!_0x363e8b['_console_ninja_session']){let _0x38ad4a=((_0x3c920c=(_0xdaec49=_0x363e8b['process'])==null?void 0x0:_0xdaec49['versions'])==null?void 0x0:_0x3c920c[_0x14d705(0x28c)])||((_0x14ba10=(_0x205786=_0x363e8b[_0x14d705(0x206)])==null?void 0x0:_0x205786[_0x14d705(0x1cc)])==null?void 0x0:_0x14ba10[_0x14d705(0x1c3)])===_0x14d705(0x1fd);(_0x3cdf4f===_0x14d705(0x237)||_0x3cdf4f===_0x14d705(0x200)||_0x3cdf4f===_0x14d705(0x1a6)||_0x3cdf4f===_0x14d705(0x233))&&(_0x3cdf4f+=_0x38ad4a?_0x14d705(0x1f9):_0x14d705(0x1ee)),_0x363e8b[_0x14d705(0x288)]={'id':+new Date(),'tool':_0x3cdf4f},_0x377b83&&_0x3cdf4f&&!_0x38ad4a&&console['log'](_0x14d705(0x1c6)+(_0x3cdf4f[_0x14d705(0x26d)](0x0)[_0x14d705(0x1c7)]()+_0x3cdf4f[_0x14d705(0x1a9)](0x1))+',',_0x14d705(0x252),_0x14d705(0x246));}let _0x51b6a1=new Z(_0x363e8b,_0x58bc11,_0x46f2cf,_0x3c20e5,_0x2eec54,_0x1b0bff);return _0x51b6a1[_0x14d705(0x26e)][_0x14d705(0x21f)](_0x51b6a1);}catch(_0xe14f48){return console[_0x14d705(0x1f2)]('logger\\x20failed\\x20to\\x20connect\\x20to\\x20host',_0xe14f48&&_0xe14f48[_0x14d705(0x222)]),()=>{};}});return _0x10f04c=>_0xe24ba0['forEach'](_0x53fdd6=>_0x53fdd6(_0x10f04c));}function ie(_0x1e3a4e,_0x26e9b1,_0x45eb31,_0x5dd34b){var _0xa75978=_0xfe5e44;_0x5dd34b&&_0x1e3a4e===_0xa75978(0x263)&&_0x45eb31['location']['reload']();}function _0x4842(){var _0x55a193=['onmessage','Symbol','_ninjaIgnoreNextError','_allowedToSend','allStrLength','split','readyState','_getOwnPropertySymbols','_ws','2382480MpSNUG','props','onclose','count','1720296nDiCbK','...','\\x20browser','_isUndefined','number','autoExpandMaxDepth','warn','1qLarGK','value','getOwnPropertySymbols','args','location','Set','\\x20server','_numberRegExp','get','_hasSymbolPropertyOnItsPath','edge','_addObjectProperty','performance','remix','_webSocketErrorDocsLink','_getOwnPropertyNames','_connected','push','set','process','_regExpToString','isArray','time','_setNodeLabel','test','logger\\x20websocket\\x20error','2427080OyrYQm','[object\\x20Map]','undefined','capped','https://tinyurl.com/37x8b79t','timeStamp','_propertyName','cappedProps','negativeInfinity','constructor','null','fromCharCode','hrtime','_objectToString','name',[\"localhost\",\"127.0.0.1\",\"example.cypress.io\",\"CEB-LAPTOP-0006\",\"192.168.1.79\"],'_disposeWebsocket','isExpressionToEvaluate','bind','_consoleNinjaAllowedToStart','_inNextEdge','message','positiveInfinity','concat','Number','_sortProps','console','type','pop','error','13205BQaGVp','autoExpand','elements','autoExpandPreviousObjects','_isPrimitiveType','log','_treeNodePropertiesBeforeFullValue','toString','angular','parse','[object\\x20BigInt]','_additionalMetadata','next.js','_treeNodePropertiesAfterFullValue','HTMLAllCollection','reduceLimits','parent','join','serialize','_inBrowser','_isNegativeZero','_reconnectTimeout','autoExpandLimit','[object\\x20Set]','[object\\x20Date]','1','url','see\\x20https://tinyurl.com/2vt8jxzw\\x20for\\x20more\\x20info.','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20refreshing\\x20the\\x20page\\x20may\\x20help;\\x20also\\x20see\\x20','getPrototypeOf','now','hasOwnProperty','_attemptToReconnectShortly','_console_ninja','length','Error','array','__es'+'Module','path','background:\\x20rgb(30,30,30);\\x20color:\\x20rgb(255,213,92)','_cleanNode','function','root_exp_id','getOwnPropertyDescriptor','map','forEach','object','cappedElements','Buffer','_property','index','default','autoExpandPropertyCount','catch','NEGATIVE_INFINITY','port','reload','dockerizedApp','current','failed\\x20to\\x20connect\\x20to\\x20host:\\x20','funcName','strLength','bigint','match','stack','1.0.0','charAt','send','versions','host','_addLoadNode','getWebSocketClass','call','onerror','','_type','expressionsToEvaluate','stackTraceLimit','POSITIVE_INFINITY','disabledTrace','_undefined','eventReceivedCallback','disabledLog','replace','failed\\x20to\\x20find\\x20and\\x20load\\x20WebSocket','onopen','gateway.docker.internal','string','_isMap','_connectToHostNow','_HTMLAllCollection','1729498501336','_isSet','_console_ninja_session','getOwnPropertyNames','Console\\x20Ninja\\x20failed\\x20to\\x20send\\x20logs,\\x20restarting\\x20the\\x20process\\x20may\\x20help;\\x20also\\x20see\\x20','3799160JnHzpD','node','prototype','_setNodeId','_maxConnectAttemptCount','perf_hooks','global','_isPrimitiveWrapperType','String','54cKIlnc','endsWith','includes','hits','toLowerCase','trace','42SfmdiD','setter','astro','origin','_connectAttemptCount','substr','totalStrLength','_allowedToConnectOnSend','_p_length','9027438ugZkeV','_sendErrorMessage','_addFunctionsNode','_blacklistedProperty','elapsed','sort','pathToFileURL','method','_Symbol','noFunctions','unref','_addProperty','data','root_exp','_quotedRegExp','nodeModules','defineProperty','resolveGetters','2147774qrYQaz','_keyStrRegExp','_setNodeQueryPath','stringify','NEXT_RUNTIME','_capIfString','_connecting','%c\\x20Console\\x20Ninja\\x20extension\\x20is\\x20connected\\x20to\\x20','toUpperCase','unknown','ws://','logger\\x20failed\\x20to\\x20connect\\x20to\\x20host,\\x20see\\x20','_getOwnPropertyDescriptor','env','',\"c:\\\\Users\\\\sheerwoodc\\\\.vscode\\\\extensions\\\\wallabyjs.console-ninja-1.0.363\\\\node_modules\",'then','_setNodePermissions','depth','coverage','level','_p_name','_WebSocketClass','sortProps','_p_','date','symbol','_processTreeNodeResult','Map','slice','_socket','_isArray'];_0x4842=function(){return _0x55a193;};return _0x4842();}function B(_0x2e36ea){var _0x5eab18=_0xfe5e44,_0x57ceac,_0x1cd3ff;let _0x174e43=function(_0x2d5214,_0x4d7e82){return _0x4d7e82-_0x2d5214;},_0x355dd9;if(_0x2e36ea[_0x5eab18(0x1ff)])_0x355dd9=function(){return _0x2e36ea['performance']['now']();};else{if(_0x2e36ea[_0x5eab18(0x206)]&&_0x2e36ea[_0x5eab18(0x206)][_0x5eab18(0x219)]&&((_0x1cd3ff=(_0x57ceac=_0x2e36ea['process'])==null?void 0x0:_0x57ceac[_0x5eab18(0x1cc)])==null?void 0x0:_0x1cd3ff[_0x5eab18(0x1c3)])!==_0x5eab18(0x1fd))_0x355dd9=function(){var _0x2a5b23=_0x5eab18;return _0x2e36ea[_0x2a5b23(0x206)]['hrtime']();},_0x174e43=function(_0x37a19c,_0x13b965){return 0x3e8*(_0x13b965[0x0]-_0x37a19c[0x0])+(_0x13b965[0x1]-_0x37a19c[0x1])/0xf4240;};else try{let {performance:_0x2474a0}=require(_0x5eab18(0x290));_0x355dd9=function(){var _0x50de9c=_0x5eab18;return _0x2474a0[_0x50de9c(0x249)]();};}catch{_0x355dd9=function(){return+new Date();};}}return{'elapsed':_0x174e43,'timeStamp':_0x355dd9,'now':()=>Date['now']()};}function _0x2800(_0x20c316,_0x27e44d){var _0x4842d5=_0x4842();return _0x2800=function(_0x280079,_0x2b136d){_0x280079=_0x280079-0x1a1;var _0xf6dce9=_0x4842d5[_0x280079];return _0xf6dce9;},_0x2800(_0x20c316,_0x27e44d);}function H(_0x5f046d,_0xbfea67,_0x4c9847){var _0x42332c=_0xfe5e44,_0x4536df,_0x3e591b,_0x1c02fd,_0x5661b7,_0xda7882;if(_0x5f046d['_consoleNinjaAllowedToStart']!==void 0x0)return _0x5f046d[_0x42332c(0x220)];let _0x152a42=((_0x3e591b=(_0x4536df=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x4536df['versions'])==null?void 0x0:_0x3e591b[_0x42332c(0x28c)])||((_0x5661b7=(_0x1c02fd=_0x5f046d[_0x42332c(0x206)])==null?void 0x0:_0x1c02fd[_0x42332c(0x1cc)])==null?void 0x0:_0x5661b7[_0x42332c(0x1c3)])===_0x42332c(0x1fd);function _0x412595(_0x5027d4){var _0x5782b1=_0x42332c;if(_0x5027d4['startsWith']('/')&&_0x5027d4[_0x5782b1(0x295)]('/')){let _0x558f03=new RegExp(_0x5027d4[_0x5782b1(0x1dc)](0x1,-0x1));return _0x3d0d65=>_0x558f03['test'](_0x3d0d65);}else{if(_0x5027d4['includes']('*')||_0x5027d4[_0x5782b1(0x296)]('?')){let _0x51bebf=new RegExp('^'+_0x5027d4[_0x5782b1(0x27e)](/\\./g,String[_0x5782b1(0x218)](0x5c)+'.')[_0x5782b1(0x27e)](/\\*/g,'.*')[_0x5782b1(0x27e)](/\\?/g,'.')+String['fromCharCode'](0x24));return _0x24f699=>_0x51bebf[_0x5782b1(0x20b)](_0x24f699);}else return _0x207603=>_0x207603===_0x5027d4;}}let _0x275cea=_0xbfea67[_0x42332c(0x257)](_0x412595);return _0x5f046d[_0x42332c(0x220)]=_0x152a42||!_0xbfea67,!_0x5f046d[_0x42332c(0x220)]&&((_0xda7882=_0x5f046d[_0x42332c(0x1f7)])==null?void 0x0:_0xda7882['hostname'])&&(_0x5f046d[_0x42332c(0x220)]=_0x275cea['some'](_0x55b435=>_0x55b435(_0x5f046d['location']['hostname']))),_0x5f046d[_0x42332c(0x220)];}function X(_0x2f1a70,_0x5be072,_0x39be01,_0x5a5745){var _0x1ae9de=_0xfe5e44;_0x2f1a70=_0x2f1a70,_0x5be072=_0x5be072,_0x39be01=_0x39be01,_0x5a5745=_0x5a5745;let _0x45ad24=B(_0x2f1a70),_0x34913b=_0x45ad24[_0x1ae9de(0x1b1)],_0x5f4254=_0x45ad24[_0x1ae9de(0x212)];class _0x39aee3{constructor(){var _0x209462=_0x1ae9de;this[_0x209462(0x1c0)]=/^(?!(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$)[_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*$/,this[_0x209462(0x1fa)]=/^(0|[1-9][0-9]*)$/,this[_0x209462(0x1bb)]=/'([^\\\\']|\\\\')*'/,this[_0x209462(0x27b)]=_0x2f1a70[_0x209462(0x20f)],this['_HTMLAllCollection']=_0x2f1a70[_0x209462(0x239)],this[_0x209462(0x1cb)]=Object[_0x209462(0x256)],this[_0x209462(0x202)]=Object[_0x209462(0x289)],this[_0x209462(0x1b5)]=_0x2f1a70[_0x209462(0x1e0)],this['_regExpToString']=RegExp['prototype'][_0x209462(0x232)],this['_dateToString']=Date[_0x209462(0x28d)][_0x209462(0x232)];}[_0x1ae9de(0x23d)](_0x24b7f3,_0x296f73,_0x46653d,_0x5bf9fd){var _0xda21b4=_0x1ae9de,_0x2a2fd0=this,_0x4dd6b0=_0x46653d[_0xda21b4(0x22c)];function _0x131eb6(_0x24c1df,_0x28bf57,_0x408d48){var _0x479131=_0xda21b4;_0x28bf57[_0x479131(0x228)]='unknown',_0x28bf57['error']=_0x24c1df[_0x479131(0x222)],_0x1f0d56=_0x408d48[_0x479131(0x28c)][_0x479131(0x265)],_0x408d48[_0x479131(0x28c)][_0x479131(0x265)]=_0x28bf57,_0x2a2fd0[_0x479131(0x231)](_0x28bf57,_0x408d48);}try{_0x46653d['level']++,_0x46653d['autoExpand']&&_0x46653d['autoExpandPreviousObjects'][_0xda21b4(0x204)](_0x296f73);var _0x1e2094,_0x16aefa,_0x542566,_0x42e28b,_0xce7f95=[],_0xe6f1c3=[],_0xf17c29,_0x207db8=this[_0xda21b4(0x276)](_0x296f73),_0x277de6=_0x207db8==='array',_0x5c426c=!0x1,_0x66fe1b=_0x207db8===_0xda21b4(0x254),_0xca6e64=this[_0xda21b4(0x22f)](_0x207db8),_0x2c405a=this[_0xda21b4(0x292)](_0x207db8),_0x4f5d62=_0xca6e64||_0x2c405a,_0x6961d3={},_0x1bc657=0x0,_0x201335=!0x1,_0x1f0d56,_0x46ae26=/^(([1-9]{1}[0-9]*)|0)$/;if(_0x46653d[_0xda21b4(0x1d1)]){if(_0x277de6){if(_0x16aefa=_0x296f73[_0xda21b4(0x24d)],_0x16aefa>_0x46653d[_0xda21b4(0x22d)]){for(_0x542566=0x0,_0x42e28b=_0x46653d[_0xda21b4(0x22d)],_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0['_addProperty'](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));_0x24b7f3[_0xda21b4(0x25a)]=!0x0;}else{for(_0x542566=0x0,_0x42e28b=_0x16aefa,_0x1e2094=_0x542566;_0x1e2094<_0x42e28b;_0x1e2094++)_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1b8)](_0xce7f95,_0x296f73,_0x207db8,_0x1e2094,_0x46653d));}_0x46653d['autoExpandPropertyCount']+=_0xe6f1c3[_0xda21b4(0x24d)];}if(!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&!_0xca6e64&&_0x207db8!==_0xda21b4(0x293)&&_0x207db8!==_0xda21b4(0x25b)&&_0x207db8!==_0xda21b4(0x269)){var _0x56b380=_0x5bf9fd[_0xda21b4(0x1e9)]||_0x46653d[_0xda21b4(0x1e9)];if(this['_isSet'](_0x296f73)?(_0x1e2094=0x0,_0x296f73[_0xda21b4(0x258)](function(_0x365782){var _0x20415e=_0xda21b4;if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d['isExpressionToEvaluate']&&_0x46653d['autoExpand']&&_0x46653d[_0x20415e(0x25f)]>_0x46653d[_0x20415e(0x241)]){_0x201335=!0x0;return;}_0xe6f1c3['push'](_0x2a2fd0[_0x20415e(0x1b8)](_0xce7f95,_0x296f73,'Set',_0x1e2094++,_0x46653d,function(_0x464074){return function(){return _0x464074;};}(_0x365782)));})):this[_0xda21b4(0x283)](_0x296f73)&&_0x296f73[_0xda21b4(0x258)](function(_0x378430,_0x28b1c6){var _0x29ac38=_0xda21b4;if(_0x1bc657++,_0x46653d[_0x29ac38(0x25f)]++,_0x1bc657>_0x56b380){_0x201335=!0x0;return;}if(!_0x46653d[_0x29ac38(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0x29ac38(0x25f)]>_0x46653d[_0x29ac38(0x241)]){_0x201335=!0x0;return;}var _0x39ddf3=_0x28b1c6['toString']();_0x39ddf3[_0x29ac38(0x24d)]>0x64&&(_0x39ddf3=_0x39ddf3[_0x29ac38(0x1dc)](0x0,0x64)+_0x29ac38(0x1ed)),_0xe6f1c3[_0x29ac38(0x204)](_0x2a2fd0[_0x29ac38(0x1b8)](_0xce7f95,_0x296f73,_0x29ac38(0x1db),_0x39ddf3,_0x46653d,function(_0x46bd7a){return function(){return _0x46bd7a;};}(_0x378430)));}),!_0x5c426c){try{for(_0xf17c29 in _0x296f73)if(!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29))&&!this['_blacklistedProperty'](_0x296f73,_0xf17c29,_0x46653d)){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d['autoExpand']&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d[_0xda21b4(0x241)]){_0x201335=!0x0;break;}_0xe6f1c3[_0xda21b4(0x204)](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}catch{}if(_0x6961d3[_0xda21b4(0x1ac)]=!0x0,_0x66fe1b&&(_0x6961d3[_0xda21b4(0x1d4)]=!0x0),!_0x201335){var _0x2658ba=[][_0xda21b4(0x224)](this[_0xda21b4(0x202)](_0x296f73))[_0xda21b4(0x224)](this[_0xda21b4(0x1e6)](_0x296f73));for(_0x1e2094=0x0,_0x16aefa=_0x2658ba[_0xda21b4(0x24d)];_0x1e2094<_0x16aefa;_0x1e2094++)if(_0xf17c29=_0x2658ba[_0x1e2094],!(_0x277de6&&_0x46ae26[_0xda21b4(0x20b)](_0xf17c29[_0xda21b4(0x232)]()))&&!this[_0xda21b4(0x1b0)](_0x296f73,_0xf17c29,_0x46653d)&&!_0x6961d3[_0xda21b4(0x1d7)+_0xf17c29[_0xda21b4(0x232)]()]){if(_0x1bc657++,_0x46653d['autoExpandPropertyCount']++,_0x1bc657>_0x56b380){_0x201335=!0x0;break;}if(!_0x46653d[_0xda21b4(0x21e)]&&_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x25f)]>_0x46653d['autoExpandLimit']){_0x201335=!0x0;break;}_0xe6f1c3['push'](_0x2a2fd0[_0xda21b4(0x1fe)](_0xce7f95,_0x6961d3,_0x296f73,_0x207db8,_0xf17c29,_0x46653d));}}}}}if(_0x24b7f3[_0xda21b4(0x228)]=_0x207db8,_0x4f5d62?(_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73['valueOf'](),this['_capIfString'](_0x207db8,_0x24b7f3,_0x46653d,_0x5bf9fd)):_0x207db8==='date'?_0x24b7f3[_0xda21b4(0x1f4)]=this['_dateToString'][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x269)?_0x24b7f3[_0xda21b4(0x1f4)]=_0x296f73[_0xda21b4(0x232)]():_0x207db8==='RegExp'?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x207)][_0xda21b4(0x273)](_0x296f73):_0x207db8===_0xda21b4(0x1d9)&&this[_0xda21b4(0x1b5)]?_0x24b7f3[_0xda21b4(0x1f4)]=this[_0xda21b4(0x1b5)][_0xda21b4(0x28d)][_0xda21b4(0x232)][_0xda21b4(0x273)](_0x296f73):!_0x46653d[_0xda21b4(0x1d1)]&&!(_0x207db8===_0xda21b4(0x217)||_0x207db8===_0xda21b4(0x20f))&&(delete _0x24b7f3[_0xda21b4(0x1f4)],_0x24b7f3[_0xda21b4(0x210)]=!0x0),_0x201335&&(_0x24b7f3[_0xda21b4(0x214)]=!0x0),_0x1f0d56=_0x46653d['node'][_0xda21b4(0x265)],_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x24b7f3,this[_0xda21b4(0x231)](_0x24b7f3,_0x46653d),_0xe6f1c3[_0xda21b4(0x24d)]){for(_0x1e2094=0x0,_0x16aefa=_0xe6f1c3['length'];_0x1e2094<_0x16aefa;_0x1e2094++)_0xe6f1c3[_0x1e2094](_0x1e2094);}_0xce7f95[_0xda21b4(0x24d)]&&(_0x24b7f3[_0xda21b4(0x1e9)]=_0xce7f95);}catch(_0x38ef6d){_0x131eb6(_0x38ef6d,_0x24b7f3,_0x46653d);}return this[_0xda21b4(0x236)](_0x296f73,_0x24b7f3),this[_0xda21b4(0x238)](_0x24b7f3,_0x46653d),_0x46653d[_0xda21b4(0x28c)][_0xda21b4(0x265)]=_0x1f0d56,_0x46653d[_0xda21b4(0x1d3)]--,_0x46653d[_0xda21b4(0x22c)]=_0x4dd6b0,_0x46653d[_0xda21b4(0x22c)]&&_0x46653d[_0xda21b4(0x22e)][_0xda21b4(0x229)](),_0x24b7f3;}[_0x1ae9de(0x1e6)](_0xb74ebd){var _0x1753d6=_0x1ae9de;return Object[_0x1753d6(0x1f5)]?Object[_0x1753d6(0x1f5)](_0xb74ebd):[];}[_0x1ae9de(0x287)](_0x28d2ef){var _0x33e17f=_0x1ae9de;return!!(_0x28d2ef&&_0x2f1a70[_0x33e17f(0x1f8)]&&this[_0x33e17f(0x21a)](_0x28d2ef)===_0x33e17f(0x242)&&_0x28d2ef[_0x33e17f(0x258)]);}[_0x1ae9de(0x1b0)](_0x329b1b,_0x42292a,_0x37ab2c){var _0x453ac9=_0x1ae9de;return _0x37ab2c[_0x453ac9(0x1b6)]?typeof _0x329b1b[_0x42292a]=='function':!0x1;}[_0x1ae9de(0x276)](_0x22f058){var _0x241b7a=_0x1ae9de,_0x3d4e65='';return _0x3d4e65=typeof _0x22f058,_0x3d4e65==='object'?this['_objectToString'](_0x22f058)==='[object\\x20Array]'?_0x3d4e65='array':this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x243)?_0x3d4e65=_0x241b7a(0x1d8):this[_0x241b7a(0x21a)](_0x22f058)===_0x241b7a(0x235)?_0x3d4e65=_0x241b7a(0x269):_0x22f058===null?_0x3d4e65=_0x241b7a(0x217):_0x22f058[_0x241b7a(0x216)]&&(_0x3d4e65=_0x22f058[_0x241b7a(0x216)][_0x241b7a(0x21b)]||_0x3d4e65):_0x3d4e65===_0x241b7a(0x20f)&&this['_HTMLAllCollection']&&_0x22f058 instanceof this[_0x241b7a(0x285)]&&(_0x3d4e65=_0x241b7a(0x239)),_0x3d4e65;}[_0x1ae9de(0x21a)](_0x1de872){var _0x3570e9=_0x1ae9de;return Object[_0x3570e9(0x28d)][_0x3570e9(0x232)][_0x3570e9(0x273)](_0x1de872);}[_0x1ae9de(0x22f)](_0x42b981){var _0x1b4389=_0x1ae9de;return _0x42b981==='boolean'||_0x42b981==='string'||_0x42b981===_0x1b4389(0x1f0);}['_isPrimitiveWrapperType'](_0x57d12a){var _0x51fa40=_0x1ae9de;return _0x57d12a==='Boolean'||_0x57d12a==='String'||_0x57d12a===_0x51fa40(0x225);}[_0x1ae9de(0x1b8)](_0x3de90e,_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85){var _0x279d30=this;return function(_0x56c688){var _0x31cb49=_0x2800,_0x64fca0=_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x265)],_0x189cd8=_0x5bf061['node'][_0x31cb49(0x25d)],_0x5ea25f=_0x5bf061[_0x31cb49(0x28c)]['parent'];_0x5bf061['node'][_0x31cb49(0x23b)]=_0x64fca0,_0x5bf061['node'][_0x31cb49(0x25d)]=typeof _0x22b26e==_0x31cb49(0x1f0)?_0x22b26e:_0x56c688,_0x3de90e[_0x31cb49(0x204)](_0x279d30[_0x31cb49(0x25c)](_0x14b82f,_0x15885f,_0x22b26e,_0x5bf061,_0x2bae85)),_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x23b)]=_0x5ea25f,_0x5bf061[_0x31cb49(0x28c)][_0x31cb49(0x25d)]=_0x189cd8;};}['_addObjectProperty'](_0x8f1714,_0x46c19e,_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881){var _0x557444=_0x1ae9de,_0x58766c=this;return _0x46c19e[_0x557444(0x1d7)+_0x3c5712['toString']()]=!0x0,function(_0x494a74){var _0x3c739b=_0x557444,_0x38c099=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x265)],_0xea8865=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)],_0x1da583=_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)];_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x38c099,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0x494a74,_0x8f1714[_0x3c739b(0x204)](_0x58766c[_0x3c739b(0x25c)](_0x308793,_0x53bf13,_0x3c5712,_0x3eb7db,_0x4dd881)),_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x23b)]=_0x1da583,_0x3eb7db[_0x3c739b(0x28c)][_0x3c739b(0x25d)]=_0xea8865;};}[_0x1ae9de(0x25c)](_0xa26af7,_0xd1783c,_0x4c3410,_0xa3bf2,_0x9fad98){var _0xa63a4b=_0x1ae9de,_0x36eca9=this;_0x9fad98||(_0x9fad98=function(_0x4958a8,_0x41ca28){return _0x4958a8[_0x41ca28];});var _0x29cbb9=_0x4c3410[_0xa63a4b(0x232)](),_0x5cfb46=_0xa3bf2[_0xa63a4b(0x277)]||{},_0x445183=_0xa3bf2[_0xa63a4b(0x1d1)],_0x316f50=_0xa3bf2['isExpressionToEvaluate'];try{var _0x141d25=this['_isMap'](_0xa26af7),_0xfd5f67=_0x29cbb9;_0x141d25&&_0xfd5f67[0x0]==='\\x27'&&(_0xfd5f67=_0xfd5f67[_0xa63a4b(0x1a9)](0x1,_0xfd5f67[_0xa63a4b(0x24d)]-0x2));var _0x4fdb4d=_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46[_0xa63a4b(0x1d7)+_0xfd5f67];_0x4fdb4d&&(_0xa3bf2[_0xa63a4b(0x1d1)]=_0xa3bf2[_0xa63a4b(0x1d1)]+0x1),_0xa3bf2[_0xa63a4b(0x21e)]=!!_0x4fdb4d;var _0x475157=typeof _0x4c3410=='symbol',_0x29d85c={'name':_0x475157||_0x141d25?_0x29cbb9:this['_propertyName'](_0x29cbb9)};if(_0x475157&&(_0x29d85c[_0xa63a4b(0x1d9)]=!0x0),!(_0xd1783c===_0xa63a4b(0x24f)||_0xd1783c===_0xa63a4b(0x24e))){var _0x260b73=this[_0xa63a4b(0x1cb)](_0xa26af7,_0x4c3410);if(_0x260b73&&(_0x260b73[_0xa63a4b(0x205)]&&(_0x29d85c[_0xa63a4b(0x1a5)]=!0x0),_0x260b73[_0xa63a4b(0x1fb)]&&!_0x4fdb4d&&!_0xa3bf2[_0xa63a4b(0x1be)]))return _0x29d85c['getter']=!0x0,this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x194fa5;try{_0x194fa5=_0x9fad98(_0xa26af7,_0x4c3410);}catch(_0x2c3142){return _0x29d85c={'name':_0x29cbb9,'type':_0xa63a4b(0x1c8),'error':_0x2c3142[_0xa63a4b(0x222)]},this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2),_0x29d85c;}var _0x50852a=this[_0xa63a4b(0x276)](_0x194fa5),_0x3ab79e=this[_0xa63a4b(0x22f)](_0x50852a);if(_0x29d85c[_0xa63a4b(0x228)]=_0x50852a,_0x3ab79e)this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x30a33f=_0xa63a4b;_0x29d85c[_0x30a33f(0x1f4)]=_0x194fa5['valueOf'](),!_0x4fdb4d&&_0x36eca9[_0x30a33f(0x1c4)](_0x50852a,_0x29d85c,_0xa3bf2,{});});else{var _0x2eb8d1=_0xa3bf2[_0xa63a4b(0x22c)]&&_0xa3bf2[_0xa63a4b(0x1d3)]<_0xa3bf2['autoExpandMaxDepth']&&_0xa3bf2[_0xa63a4b(0x22e)]['indexOf'](_0x194fa5)<0x0&&_0x50852a!=='function'&&_0xa3bf2[_0xa63a4b(0x25f)]<_0xa3bf2['autoExpandLimit'];_0x2eb8d1||_0xa3bf2[_0xa63a4b(0x1d3)]<_0x445183||_0x4fdb4d?(this['serialize'](_0x29d85c,_0x194fa5,_0xa3bf2,_0x4fdb4d||{}),this[_0xa63a4b(0x236)](_0x194fa5,_0x29d85c)):this[_0xa63a4b(0x1da)](_0x29d85c,_0xa3bf2,_0x194fa5,function(){var _0x1ac2f4=_0xa63a4b;_0x50852a===_0x1ac2f4(0x217)||_0x50852a==='undefined'||(delete _0x29d85c['value'],_0x29d85c[_0x1ac2f4(0x210)]=!0x0);});}return _0x29d85c;}finally{_0xa3bf2[_0xa63a4b(0x277)]=_0x5cfb46,_0xa3bf2['depth']=_0x445183,_0xa3bf2[_0xa63a4b(0x21e)]=_0x316f50;}}['_capIfString'](_0x15a619,_0x2e9551,_0x2d0dc7,_0x3aa61d){var _0x1ccfd8=_0x1ae9de,_0x14e5ce=_0x3aa61d[_0x1ccfd8(0x268)]||_0x2d0dc7[_0x1ccfd8(0x268)];if((_0x15a619===_0x1ccfd8(0x282)||_0x15a619===_0x1ccfd8(0x293))&&_0x2e9551['value']){let _0x381743=_0x2e9551[_0x1ccfd8(0x1f4)]['length'];_0x2d0dc7['allStrLength']+=_0x381743,_0x2d0dc7['allStrLength']>_0x2d0dc7['totalStrLength']?(_0x2e9551[_0x1ccfd8(0x210)]='',delete _0x2e9551[_0x1ccfd8(0x1f4)]):_0x381743>_0x14e5ce&&(_0x2e9551[_0x1ccfd8(0x210)]=_0x2e9551[_0x1ccfd8(0x1f4)]['substr'](0x0,_0x14e5ce),delete _0x2e9551['value']);}}[_0x1ae9de(0x283)](_0x11ab3e){var _0x455bcd=_0x1ae9de;return!!(_0x11ab3e&&_0x2f1a70['Map']&&this[_0x455bcd(0x21a)](_0x11ab3e)===_0x455bcd(0x20e)&&_0x11ab3e[_0x455bcd(0x258)]);}[_0x1ae9de(0x213)](_0x59761d){var _0x205d94=_0x1ae9de;if(_0x59761d[_0x205d94(0x26a)](/^\\d+$/))return _0x59761d;var _0x283bad;try{_0x283bad=JSON[_0x205d94(0x1c2)](''+_0x59761d);}catch{_0x283bad='\\x22'+this[_0x205d94(0x21a)](_0x59761d)+'\\x22';}return _0x283bad['match'](/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)?_0x283bad=_0x283bad[_0x205d94(0x1a9)](0x1,_0x283bad[_0x205d94(0x24d)]-0x2):_0x283bad=_0x283bad[_0x205d94(0x27e)](/'/g,'\\x5c\\x27')[_0x205d94(0x27e)](/\\\\\"/g,'\\x22')[_0x205d94(0x27e)](/(^\"|\"$)/g,'\\x27'),_0x283bad;}[_0x1ae9de(0x1da)](_0x55bb11,_0x1b3795,_0x48f261,_0x3e21aa){var _0x571adc=_0x1ae9de;this[_0x571adc(0x231)](_0x55bb11,_0x1b3795),_0x3e21aa&&_0x3e21aa(),this['_additionalMetadata'](_0x48f261,_0x55bb11),this[_0x571adc(0x238)](_0x55bb11,_0x1b3795);}[_0x1ae9de(0x231)](_0xe082ed,_0x50b700){var _0x489d9f=_0x1ae9de;this['_setNodeId'](_0xe082ed,_0x50b700),this[_0x489d9f(0x1c1)](_0xe082ed,_0x50b700),this['_setNodeExpressionPath'](_0xe082ed,_0x50b700),this['_setNodePermissions'](_0xe082ed,_0x50b700);}['_setNodeId'](_0x56e200,_0x453198){}['_setNodeQueryPath'](_0x40a95f,_0x1f617a){}[_0x1ae9de(0x20a)](_0x295c6a,_0x297bb4){}[_0x1ae9de(0x1ef)](_0x3f6925){return _0x3f6925===this['_undefined'];}[_0x1ae9de(0x238)](_0x215840,_0x2292fd){var _0x544c37=_0x1ae9de;this[_0x544c37(0x20a)](_0x215840,_0x2292fd),this['_setNodeExpandableState'](_0x215840),_0x2292fd[_0x544c37(0x1d6)]&&this['_sortProps'](_0x215840),this[_0x544c37(0x1af)](_0x215840,_0x2292fd),this[_0x544c37(0x271)](_0x215840,_0x2292fd),this[_0x544c37(0x253)](_0x215840);}[_0x1ae9de(0x236)](_0x90e37d,_0x2905ac){var _0x245bf4=_0x1ae9de;let _0x404a53;try{_0x2f1a70[_0x245bf4(0x227)]&&(_0x404a53=_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)],_0x2f1a70[_0x245bf4(0x227)][_0x245bf4(0x22a)]=function(){}),_0x90e37d&&typeof _0x90e37d[_0x245bf4(0x24d)]==_0x245bf4(0x1f0)&&(_0x2905ac[_0x245bf4(0x24d)]=_0x90e37d[_0x245bf4(0x24d)]);}catch{}finally{_0x404a53&&(_0x2f1a70['console'][_0x245bf4(0x22a)]=_0x404a53);}if(_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x1f0)||_0x2905ac[_0x245bf4(0x228)]===_0x245bf4(0x225)){if(isNaN(_0x2905ac[_0x245bf4(0x1f4)]))_0x2905ac['nan']=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];else switch(_0x2905ac[_0x245bf4(0x1f4)]){case Number[_0x245bf4(0x279)]:_0x2905ac[_0x245bf4(0x223)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case Number[_0x245bf4(0x261)]:_0x2905ac[_0x245bf4(0x215)]=!0x0,delete _0x2905ac[_0x245bf4(0x1f4)];break;case 0x0:this['_isNegativeZero'](_0x2905ac['value'])&&(_0x2905ac['negativeZero']=!0x0);break;}}else _0x2905ac['type']==='function'&&typeof _0x90e37d[_0x245bf4(0x21b)]==_0x245bf4(0x282)&&_0x90e37d[_0x245bf4(0x21b)]&&_0x2905ac['name']&&_0x90e37d[_0x245bf4(0x21b)]!==_0x2905ac[_0x245bf4(0x21b)]&&(_0x2905ac[_0x245bf4(0x267)]=_0x90e37d['name']);}[_0x1ae9de(0x23f)](_0x3603f9){return 0x1/_0x3603f9===Number['NEGATIVE_INFINITY'];}[_0x1ae9de(0x226)](_0x91135f){var _0x27bcc9=_0x1ae9de;!_0x91135f['props']||!_0x91135f['props'][_0x27bcc9(0x24d)]||_0x91135f[_0x27bcc9(0x228)]==='array'||_0x91135f[_0x27bcc9(0x228)]==='Map'||_0x91135f[_0x27bcc9(0x228)]===_0x27bcc9(0x1f8)||_0x91135f['props'][_0x27bcc9(0x1b2)](function(_0x2a2cdb,_0x49ee4b){var _0x5e76b3=_0x27bcc9,_0x19063e=_0x2a2cdb[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)](),_0x446003=_0x49ee4b[_0x5e76b3(0x21b)][_0x5e76b3(0x1a2)]();return _0x19063e<_0x446003?-0x1:_0x19063e>_0x446003?0x1:0x0;});}['_addFunctionsNode'](_0x2e8e4d,_0x199c30){var _0x3d3aa0=_0x1ae9de;if(!(_0x199c30[_0x3d3aa0(0x1b6)]||!_0x2e8e4d[_0x3d3aa0(0x1e9)]||!_0x2e8e4d['props']['length'])){for(var _0x435133=[],_0x2531e7=[],_0x4b5a61=0x0,_0x36d28b=_0x2e8e4d[_0x3d3aa0(0x1e9)]['length'];_0x4b5a61<_0x36d28b;_0x4b5a61++){var _0x10d795=_0x2e8e4d['props'][_0x4b5a61];_0x10d795[_0x3d3aa0(0x228)]===_0x3d3aa0(0x254)?_0x435133[_0x3d3aa0(0x204)](_0x10d795):_0x2531e7[_0x3d3aa0(0x204)](_0x10d795);}if(!(!_0x2531e7[_0x3d3aa0(0x24d)]||_0x435133['length']<=0x1)){_0x2e8e4d['props']=_0x2531e7;var _0x14dec4={'functionsNode':!0x0,'props':_0x435133};this[_0x3d3aa0(0x28e)](_0x14dec4,_0x199c30),this[_0x3d3aa0(0x20a)](_0x14dec4,_0x199c30),this['_setNodeExpandableState'](_0x14dec4),this['_setNodePermissions'](_0x14dec4,_0x199c30),_0x14dec4['id']+='\\x20f',_0x2e8e4d['props']['unshift'](_0x14dec4);}}}['_addLoadNode'](_0x4a8f7a,_0x346db0){}['_setNodeExpandableState'](_0x1c6fd1){}[_0x1ae9de(0x1de)](_0x1211e9){var _0x3903b5=_0x1ae9de;return Array[_0x3903b5(0x208)](_0x1211e9)||typeof _0x1211e9=='object'&&this[_0x3903b5(0x21a)](_0x1211e9)==='[object\\x20Array]';}[_0x1ae9de(0x1d0)](_0x311e8c,_0x69f8f0){}[_0x1ae9de(0x253)](_0x1fb5ad){var _0x4e516a=_0x1ae9de;delete _0x1fb5ad[_0x4e516a(0x1fc)],delete _0x1fb5ad['_hasSetOnItsPath'],delete _0x1fb5ad['_hasMapOnItsPath'];}['_setNodeExpressionPath'](_0x1f43f0,_0x5dc18c){}}let _0x44e097=new _0x39aee3(),_0x555933={'props':0x64,'elements':0x64,'strLength':0x400*0x32,'totalStrLength':0x400*0x32,'autoExpandLimit':0x1388,'autoExpandMaxDepth':0xa},_0x5ef4bb={'props':0x5,'elements':0x5,'strLength':0x100,'totalStrLength':0x100*0x3,'autoExpandLimit':0x1e,'autoExpandMaxDepth':0x2};function _0x47aee0(_0x5f519b,_0x36e1c2,_0x38a5b2,_0x245a33,_0x33842e,_0x47f99d){var _0x1b6dc9=_0x1ae9de;let _0x4e9097,_0x2d5f08;try{_0x2d5f08=_0x5f4254(),_0x4e9097=_0x39be01[_0x36e1c2],!_0x4e9097||_0x2d5f08-_0x4e9097['ts']>0x1f4&&_0x4e9097[_0x1b6dc9(0x1eb)]&&_0x4e9097[_0x1b6dc9(0x209)]/_0x4e9097[_0x1b6dc9(0x1eb)]<0x64?(_0x39be01[_0x36e1c2]=_0x4e9097={'count':0x0,'time':0x0,'ts':_0x2d5f08},_0x39be01[_0x1b6dc9(0x1a1)]={}):_0x2d5f08-_0x39be01[_0x1b6dc9(0x1a1)]['ts']>0x32&&_0x39be01[_0x1b6dc9(0x1a1)]['count']&&_0x39be01[_0x1b6dc9(0x1a1)]['time']/_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x1eb)]<0x64&&(_0x39be01[_0x1b6dc9(0x1a1)]={});let _0x321c5e=[],_0x103871=_0x4e9097['reduceLimits']||_0x39be01[_0x1b6dc9(0x1a1)]['reduceLimits']?_0x5ef4bb:_0x555933,_0x1e4aec=_0x11f00b=>{var _0x1d93c3=_0x1b6dc9;let _0x3970c5={};return _0x3970c5['props']=_0x11f00b[_0x1d93c3(0x1e9)],_0x3970c5[_0x1d93c3(0x22d)]=_0x11f00b[_0x1d93c3(0x22d)],_0x3970c5[_0x1d93c3(0x268)]=_0x11f00b[_0x1d93c3(0x268)],_0x3970c5[_0x1d93c3(0x1aa)]=_0x11f00b[_0x1d93c3(0x1aa)],_0x3970c5[_0x1d93c3(0x241)]=_0x11f00b['autoExpandLimit'],_0x3970c5[_0x1d93c3(0x1f1)]=_0x11f00b['autoExpandMaxDepth'],_0x3970c5[_0x1d93c3(0x1d6)]=!0x1,_0x3970c5['noFunctions']=!_0x5be072,_0x3970c5[_0x1d93c3(0x1d1)]=0x1,_0x3970c5[_0x1d93c3(0x1d3)]=0x0,_0x3970c5['expId']=_0x1d93c3(0x255),_0x3970c5['rootExpression']=_0x1d93c3(0x1ba),_0x3970c5[_0x1d93c3(0x22c)]=!0x0,_0x3970c5[_0x1d93c3(0x22e)]=[],_0x3970c5['autoExpandPropertyCount']=0x0,_0x3970c5[_0x1d93c3(0x1be)]=!0x0,_0x3970c5[_0x1d93c3(0x1e3)]=0x0,_0x3970c5[_0x1d93c3(0x28c)]={'current':void 0x0,'parent':void 0x0,'index':0x0},_0x3970c5;};for(var _0x4e066e=0x0;_0x4e066e<_0x33842e[_0x1b6dc9(0x24d)];_0x4e066e++)_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'timeNode':_0x5f519b===_0x1b6dc9(0x209)||void 0x0},_0x33842e[_0x4e066e],_0x1e4aec(_0x103871),{}));if(_0x5f519b===_0x1b6dc9(0x1a3)||_0x5f519b===_0x1b6dc9(0x22a)){let _0x4223a0=Error['stackTraceLimit'];try{Error[_0x1b6dc9(0x278)]=0x1/0x0,_0x321c5e[_0x1b6dc9(0x204)](_0x44e097[_0x1b6dc9(0x23d)]({'stackNode':!0x0},new Error()[_0x1b6dc9(0x26b)],_0x1e4aec(_0x103871),{'strLength':0x1/0x0}));}finally{Error[_0x1b6dc9(0x278)]=_0x4223a0;}}return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':_0x321c5e,'id':_0x36e1c2,'context':_0x47f99d}]};}catch(_0x5b28ee){return{'method':_0x1b6dc9(0x230),'version':_0x5a5745,'args':[{'ts':_0x38a5b2,'session':_0x245a33,'args':[{'type':'unknown','error':_0x5b28ee&&_0x5b28ee[_0x1b6dc9(0x222)]}],'id':_0x36e1c2,'context':_0x47f99d}]};}finally{try{if(_0x4e9097&&_0x2d5f08){let _0x1d65c6=_0x5f4254();_0x4e9097['count']++,_0x4e9097[_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x4e9097['ts']=_0x1d65c6,_0x39be01[_0x1b6dc9(0x1a1)]['count']++,_0x39be01['hits'][_0x1b6dc9(0x209)]+=_0x34913b(_0x2d5f08,_0x1d65c6),_0x39be01['hits']['ts']=_0x1d65c6,(_0x4e9097[_0x1b6dc9(0x1eb)]>0x32||_0x4e9097[_0x1b6dc9(0x209)]>0x64)&&(_0x4e9097['reduceLimits']=!0x0),(_0x39be01['hits']['count']>0x3e8||_0x39be01[_0x1b6dc9(0x1a1)][_0x1b6dc9(0x209)]>0x12c)&&(_0x39be01['hits'][_0x1b6dc9(0x23a)]=!0x0);}}catch{}}}return _0x47aee0;}((_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x2de19f,_0x1e302a,_0x363b8d,_0xa0a303,_0x5e55f1,_0x306ab3)=>{var _0x313444=_0xfe5e44;if(_0x2abb00[_0x313444(0x24c)])return _0x2abb00[_0x313444(0x24c)];if(!H(_0x2abb00,_0x363b8d,_0x1722a1))return _0x2abb00[_0x313444(0x24c)]={'consoleLog':()=>{},'consoleTrace':()=>{},'consoleTime':()=>{},'consoleTimeEnd':()=>{},'autoLog':()=>{},'autoLogMany':()=>{},'autoTraceMany':()=>{},'coverage':()=>{},'autoTrace':()=>{},'autoTime':()=>{},'autoTimeEnd':()=>{}},_0x2abb00[_0x313444(0x24c)];let _0x3b7d8d=B(_0x2abb00),_0x4d9f47=_0x3b7d8d[_0x313444(0x1b1)],_0xfc6f6c=_0x3b7d8d[_0x313444(0x212)],_0x175f2b=_0x3b7d8d[_0x313444(0x249)],_0x128725={'hits':{},'ts':{}},_0x42d6ce=X(_0x2abb00,_0xa0a303,_0x128725,_0x2de19f),_0x541b4e=_0x187c8d=>{_0x128725['ts'][_0x187c8d]=_0xfc6f6c();},_0x49ea08=(_0x2965f7,_0x54e0b4)=>{let _0xa3a7a1=_0x128725['ts'][_0x54e0b4];if(delete _0x128725['ts'][_0x54e0b4],_0xa3a7a1){let _0x3799a5=_0x4d9f47(_0xa3a7a1,_0xfc6f6c());_0x48a896(_0x42d6ce('time',_0x2965f7,_0x175f2b(),_0x1c96ca,[_0x3799a5],_0x54e0b4));}},_0x1ca95f=_0x556e2e=>{var _0x634c6d=_0x313444,_0x3a78f9;return _0x1722a1===_0x634c6d(0x237)&&_0x2abb00[_0x634c6d(0x1a7)]&&((_0x3a78f9=_0x556e2e==null?void 0x0:_0x556e2e[_0x634c6d(0x1f6)])==null?void 0x0:_0x3a78f9[_0x634c6d(0x24d)])&&(_0x556e2e['args'][0x0][_0x634c6d(0x1a7)]=_0x2abb00[_0x634c6d(0x1a7)]),_0x556e2e;};_0x2abb00[_0x313444(0x24c)]={'consoleLog':(_0x1d9044,_0x3da3ab)=>{var _0x578a1e=_0x313444;_0x2abb00[_0x578a1e(0x227)]['log'][_0x578a1e(0x21b)]!==_0x578a1e(0x27d)&&_0x48a896(_0x42d6ce('log',_0x1d9044,_0x175f2b(),_0x1c96ca,_0x3da3ab));},'consoleTrace':(_0x38468d,_0x50b548)=>{var _0x144123=_0x313444,_0x2c0a3b,_0x41bd30;_0x2abb00['console'][_0x144123(0x230)][_0x144123(0x21b)]!==_0x144123(0x27a)&&((_0x41bd30=(_0x2c0a3b=_0x2abb00[_0x144123(0x206)])==null?void 0x0:_0x2c0a3b[_0x144123(0x26f)])!=null&&_0x41bd30[_0x144123(0x28c)]&&(_0x2abb00[_0x144123(0x1e1)]=!0x0),_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x38468d,_0x175f2b(),_0x1c96ca,_0x50b548))));},'consoleError':(_0xe83c02,_0x52826e)=>{var _0x14dcca=_0x313444;_0x2abb00[_0x14dcca(0x1e1)]=!0x0,_0x48a896(_0x1ca95f(_0x42d6ce(_0x14dcca(0x22a),_0xe83c02,_0x175f2b(),_0x1c96ca,_0x52826e)));},'consoleTime':_0x5caf3f=>{_0x541b4e(_0x5caf3f);},'consoleTimeEnd':(_0x27d8c5,_0x417474)=>{_0x49ea08(_0x417474,_0x27d8c5);},'autoLog':(_0x85c6df,_0x7f39a2)=>{var _0x40bb49=_0x313444;_0x48a896(_0x42d6ce(_0x40bb49(0x230),_0x7f39a2,_0x175f2b(),_0x1c96ca,[_0x85c6df]));},'autoLogMany':(_0x5158c0,_0x7b99d2)=>{_0x48a896(_0x42d6ce('log',_0x5158c0,_0x175f2b(),_0x1c96ca,_0x7b99d2));},'autoTrace':(_0x1bc11d,_0x565cc9)=>{_0x48a896(_0x1ca95f(_0x42d6ce('trace',_0x565cc9,_0x175f2b(),_0x1c96ca,[_0x1bc11d])));},'autoTraceMany':(_0x352345,_0x4c7f95)=>{var _0x378e10=_0x313444;_0x48a896(_0x1ca95f(_0x42d6ce(_0x378e10(0x1a3),_0x352345,_0x175f2b(),_0x1c96ca,_0x4c7f95)));},'autoTime':(_0x5359fa,_0x25990a,_0x323d68)=>{_0x541b4e(_0x323d68);},'autoTimeEnd':(_0x5be9bc,_0x5dbe0a,_0xba445f)=>{_0x49ea08(_0x5dbe0a,_0xba445f);},'coverage':_0x27be41=>{var _0x20affe=_0x313444;_0x48a896({'method':_0x20affe(0x1d2),'version':_0x2de19f,'args':[{'id':_0x27be41}]});}};let _0x48a896=q(_0x2abb00,_0x741326,_0x268816,_0x831694,_0x1722a1,_0x5e55f1,_0x306ab3),_0x1c96ca=_0x2abb00['_console_ninja_session'];return _0x2abb00[_0x313444(0x24c)];})(globalThis,'127.0.0.1','60591',_0xfe5e44(0x1ce),'webpack',_0xfe5e44(0x26c),_0xfe5e44(0x286),_0xfe5e44(0x21c),_0xfe5e44(0x1cd),_0xfe5e44(0x275),_0xfe5e44(0x244));")}catch(e){}}function c(e,...t){try{_().consoleLog(e,t)}catch(e){}return t}function d(e,...t){try{_().consoleError(e,t)}catch(e){}return t}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,